{"name":"dc","description":"dc - an arbitrary precision calculator","body":"\n\n<h1 align=\"center\">dc</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dc - an\narbitrary precision calculator</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dc [-V]\n[--version] [-h] [--help] <br>\n[-e scriptexpression] [--expression=scriptexpression] <br>\n[-f scriptfile] [--file=scriptfile] <br>\n[file ...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>dc</i> is a\nreverse-polish desk calculator which supports unlimited\nprecision arithmetic. It also allows you to define and call\nmacros. Normally <i>dc</i> reads from the standard input; if\nany command arguments are given to it, they are filenames,\nand <i>dc</i> reads and executes the contents of the files\nbefore reading from standard input. All normal output is to\nstandard output; all error output is to standard error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\nreverse-polish calculator stores numbers on a stack.\nEntering a number pushes it on the stack. Arithmetic\noperations pop arguments off the stack and push the\nresults.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To enter a\nnumber in <i>dc</i>, type the digits (using upper case\nletters <i>A</i> through <i>F</i> as &quot;digits&quot; when\nworking with input bases greater than ten), with an optional\ndecimal point. Exponential notation is not supported. To\nenter a negative number, begin the number with\n&rsquo;&rsquo;_&rsquo;&rsquo;. &rsquo;&rsquo;-&rsquo;&rsquo;\ncannot be used for this, as it is a binary operator for\nsubtraction instead. To enter two numbers in succession,\nseparate them with spaces or newlines. These have no meaning\nas commands.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>dc</i> may\nbe invoked with the following command-line options:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-V</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--version</b></p>\n\n<p style=\"margin-left:22%;\">Print out the version of\n<i>dc</i> that is being run and a copyright notice, then\nexit.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>-h</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>--help</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Print a usage message briefly summarizing these\ncommand-line options and the bug-reporting address, then\nexit.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-e</b> <i>script</i> <b><br>\n--expression=</b><i>script</i></p>\n\n<p style=\"margin-left:22%;\">Add the commands in\n<i>script</i> to the set of commands to be run while\nprocessing the input.</p>\n\n<p style=\"margin-left:11%;\"><b>-f</b> <i>script-file</i>\n<b><br>\n--file=</b><i>script-file</i></p>\n\n<p style=\"margin-left:22%;\">Add the commands contained in\nthe file <i>script-file</i> to the set of commands to be run\nwhile processing the input.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If any\ncommand-line parameters remain after processing the above,\nthese parameters are interpreted as the names of input files\nto be processed. A file name of <b>-</b> refers to the\nstandard input stream. The standard input will processed if\nno script files or expressions are specified.</p>\n\n<h2>Printing Commands\n<a name=\"Printing Commands\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>p</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Prints the value on the top of\nthe stack, without altering the stack. A newline is printed\nafter the value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>n</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Prints the value on the top of the stack, popping it\noff, and does not print a newline after.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>P</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops off the value on top of the stack. If it it a\nstring, it is simply printed without a trailing newline.\nOtherwise it is a number, and the integer portion of its\nabsolute value is printed out as a &quot;base\n(UCHAR_MAX+1)&quot; byte stream. Assuming that (UCHAR_MAX+1)\nis 256 (as it is on most machines with 8-bit bytes), the\nsequence <b>KSK0k1/_1Ss [ls*]Sxd0&gt;x\n[256~Ssd0&lt;x]dsxxsx[q]Sq[Lsd0&gt;qaPlxx]\ndsxxsx0sqLqsxLxLK+k</b> could also accomplish this function.\n(Much of the complexity of the above native-dc code is due\nto the ~ computing the characters backwards, and the desire\nto ensure that all registers wind up back in their original\nstates.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>f</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Prints the entire contents of the stack without altering\nanything. This is a good command to use if you are lost or\nwant to figure out what the effect of some command has\nbeen.</p> </td></tr>\n</table>\n\n<h2>Arithmetic\n<a name=\"Arithmetic\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>+</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Pops two values off the stack,\nadds them, and pushes the result. The precision of the\nresult is determined only by the values of the arguments,\nand is enough to be exact.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>-</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops two values, subtracts the first one popped from the\nsecond one popped, and pushes the result.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>*</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops two values, multiplies them, and pushes the result.\nThe number of fraction digits in the result depends on the\ncurrent precision value and the number of fraction digits in\nthe two arguments.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>/</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops two values, divides the second one popped from the\nfirst one popped, and pushes the result. The number of\nfraction digits is specified by the precision value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>%</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops two values, computes the remainder of the division\nthat the <b>/</b> command would do, and pushes that. The\nvalue computed is the same as that computed by the sequence\n<b>Sd dld/ Ld*-</b> .</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>~</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops two values, divides the second one popped from the\nfirst one popped. The quotient is pushed first, and the\nremainder is pushed next. The number of fraction digits used\nin the division is specified by the precision value. (The\nsequence <b>SdSn lnld/ LnLd%</b> could also accomplish this\nfunction, with slightly different error checking.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>^</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops two values and exponentiates, using the first value\npopped as the exponent and the second popped as the base.\nThe fraction part of the exponent is ignored. The precision\nvalue specifies the number of fraction digits in the\nresult.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>|</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops three values and computes a modular exponentiation.\nThe first value popped is used as the reduction modulus;\nthis value must be a non-zero number, and should be an\ninteger. The second popped is used as the exponent; this\nvalue must be a non-negative number, and any fractional part\nof this exponent will be ignored. The third value popped is\nthe base which gets exponentiated, which should be an\ninteger. For small integers this is like the sequence\n<b>Sm^Lm%</b>, but, unlike <b>^</b>, this command will work\nwith arbitrarily large exponents.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>v</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops one value, computes its square root, and pushes\nthat. The maximum of the precision value and the precision\nof the argument is used to determine the number of fraction\ndigits in the result.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most arithmetic\noperations are affected by the &rsquo;&rsquo;precision\nvalue&rsquo;&rsquo;, which you can set with the <b>k</b>\ncommand. The default precision value is zero, which means\nthat all arithmetic except for addition and subtraction\nproduces integer results.</p>\n\n<h2>Stack Control\n<a name=\"Stack Control\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>c</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Clears the stack, rendering it\nempty.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>d</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Duplicates the value on the top of the stack, pushing\nanother copy of it. Thus, &rsquo;&rsquo;4d*p&rsquo;&rsquo;\ncomputes 4 squared and prints it.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>r</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Reverses the order of (swaps) the top two values on the\nstack. (This can also be accomplished with the sequence\n<b>SaSbLaLb</b>.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>R</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops the top-of-stack as an integer <i>n</i>. Cyclically\nrotates the top <i>n</i> items on the updated stack. If\n<i>n</i> is positive, then the rotation direction will make\nthe topmost element the second-from top; if <i>n</i> is\nnegative, then the rotation will make the topmost element\nthe <i>n</i>-th element from the top. If the stack depth is\nless than <i>n</i>, then the entire stack is rotated (in the\nappropriate direction), without any error being\nreported.</p> </td></tr>\n</table>\n\n<h2>Registers\n<a name=\"Registers\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>dc</i>\nprovides at least 256 memory registers, each named by a\nsingle character. You can store a number or a string in a\nregister and retrieve it later.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>s</b><i>r</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Pop the value off the top of the\nstack and store it into register <i>r</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>l</b><i>r</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Copy the value in register <i>r</i> and push it onto the\nstack. The value 0 is retrieved if the register is\nuninitialized. This does not alter the contents of\n<i>r</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each register\nalso contains its own stack. The current register value is\nthe top of the register&rsquo;s stack.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>S</b><i>r</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Pop the value off the top of the\n(main) stack and push it onto the stack of register\n<i>r</i>. The previous value of the register becomes\ninaccessible.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>L</b><i>r</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Pop the value off the top of register <i>r</i>&rsquo;s\nstack and push it onto the main stack. The previous value in\nregister <i>r</i>&rsquo;s stack, if any, is now accessible\nvia the <b>l</b><i>r</i> command.</p></td></tr>\n</table>\n\n<h2>Parameters\n<a name=\"Parameters\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>dc</i> has\nthree parameters that control its operation: the precision,\nthe input radix, and the output radix. The precision\nspecifies the number of fraction digits to keep in the\nresult of most arithmetic operations. The input radix\ncontrols the interpretation of numbers typed in; all numbers\ntyped in use this radix. The output radix is used for\nprinting numbers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The input and\noutput radices are separate parameters; you can make them\nunequal, which can be useful or confusing. The input radix\nmust be between 2 and 16 inclusive. The output radix must be\nat least 2. The precision must be zero or greater. The\nprecision is always measured in decimal digits, regardless\nof the current input or output radix.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>i</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Pops the value off the top of\nthe stack and uses it to set the input radix.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>o</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops the value off the top of the stack and uses it to\nset the output radix.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>k</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops the value off the top of the stack and uses it to\nset the precision.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>I</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pushes the current input radix on the stack.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>O</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pushes the current output radix on the stack.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>K</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pushes the current precision on the stack.</p></td></tr>\n</table>\n\n<h2>Strings\n<a name=\"Strings\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>dc</i> has a\nlimited ability to operate on strings as well as on numbers;\nthe only things you can do with strings are print them and\nexecute them as macros (which means that the contents of the\nstring are processed as <i>dc</i> commands). All registers\nand the stack can hold strings, and <i>dc</i> always knows\nwhether any given object is a string or a number. Some\ncommands such as arithmetic operations demand numbers as\narguments and print errors if given strings. Other commands\ncan accept either a number or a string; for example, the\n<b>p</b> command can accept either and prints the object\naccording to its type. <b><br>\n[</b><i>characters</i><b>]</b></p>\n\n<p style=\"margin-left:22%;\">Makes a string containing\n<i>characters</i> (contained between balanced <b>[</b> and\n<b>]</b> characters), and pushes it on the stack. For\nexample, <b>[foo]P</b> prints the characters <b>foo</b>\n(with no newline).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>a</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>The top-of-stack is popped. If it was a number, then the\nlow-order byte of this number is converted into a string and\npushed onto the stack. Otherwise the top-of-stack was a\nstring, and the first character of that string is pushed\nback.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>x</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops a value off the stack and executes it as a macro.\nNormally it should be a string; if it is a number, it is\nsimply pushed back onto the stack. For example, <b>[1p]x</b>\nexecutes the macro <b>1p</b> which pushes <b>1</b> on the\nstack and prints <b>1</b> on a separate line.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Macros are most\noften stored in registers; <b>[1p]sa</b> stores a macro to\nprint <b>1</b> into register <b>a</b>, and <b>lax</b>\ninvokes this macro.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><b>&gt;</b><i>r</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Pops two values off the stack\nand compares them assuming they are numbers, executing the\ncontents of register <i>r</i> as a macro if the original\ntop-of-stack is greater. Thus, <b>1 2&gt;a</b> will invoke\nregister <b>a</b>&rsquo;s contents and <b>2 1&gt;a</b> will\nnot.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>!&gt;</b><i>r</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Similar but invokes the macro if the original\ntop-of-stack is not greater than (less than or equal to)\nwhat was the second-to-top.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>&lt;</b><i>r</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Similar but invokes the macro if the original\ntop-of-stack is less.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>!&lt;</b><i>r</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Similar but invokes the macro if the original\ntop-of-stack is not less than (greater than or equal to)\nwhat was the second-to-top.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>=</b><i>r</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Similar but invokes the macro if the two numbers popped\nare equal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>!=</b><i>r</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Similar but invokes the macro if the two numbers popped\nare not equal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>?</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Reads a line from the terminal and executes it. This\ncommand allows a macro to request input from the user.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>q</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>exits from a macro and also from the macro which invoked\nit. If called from the top level, or from a macro which was\ncalled directly from the top level, the <b>q</b> command\nwill cause <i>dc</i> to exit.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>Q</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops a value off the stack and uses it as a count of\nlevels of macro execution to be exited. Thus, <b>3Q</b>\nexits three levels. The <b>Q</b> command will never cause\n<i>dc</i> to exit.</p></td></tr>\n</table>\n\n<h2>Status Inquiry\n<a name=\"Status Inquiry\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>Z</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Pops a value off the stack,\ncalculates the number of decimal digits it has (or number of\ncharacters, if it is a string) and pushes that number. The\ndigit count for a number does <i>not</i> include any leading\nzeros, even if those appear to the right of the radix\npoint.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>X</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops a value off the stack, calculates the number of\nfraction digits it has, and pushes that number. For a\nstring, the value pushed is 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>z</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Pushes the current stack depth: the number of objects on\nthe stack before the execution of the <b>z</b> command.</p></td></tr>\n</table>\n\n<h2>Miscellaneous\n<a name=\"Miscellaneous\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>!</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Will run the rest of the line as\na system command. Note that parsing of the !&lt;, !=, and\n!&gt; commands take precedence, so if you want to run a\ncommand starting with &lt;, =, or &gt; you will need to add\na space after the !.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>#</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Will interpret the rest of the line as a comment.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>:</b><i>r</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Will pop the top two values off of the stack. The old\nsecond-to-top value will be stored in the array <i>r</i>,\nindexed by the old top-of-stack value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>;</b><i>r</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Pops the top-of-stack and uses it as an index into the\narray <i>r</i>. The selected value is then pushed onto the\nstack.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that each\nstacked instance of a register has its own array associated\nwith it. Thus <b>1 0:a 0Sa 2 0:a La 0;ap</b> will print 1,\nbecause the 2 was stored in an instance of 0:a that was\nlater popped.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">~/.dcrc</p></td>\n<td width=\"12%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\">The commands in this file will\nbe executed when <i>dc</i> is first run.</p></td></tr>\n</table>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Email bug\nreports to <b>bug-dc@gnu.org</b>.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#Printing Commands\">Printing Commands</a>","<a href=\"#Arithmetic\">Arithmetic</a>","<a href=\"#Stack Control\">Stack Control</a>","<a href=\"#Registers\">Registers</a>","<a href=\"#Parameters\">Parameters</a>","<a href=\"#Strings\">Strings</a>","<a href=\"#Status Inquiry\">Status Inquiry</a>","<a href=\"#Miscellaneous\">Miscellaneous</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#BUGS\">BUGS</a>"]}