{"name":"git-tag","description":"git-tag - Create, list, delete or verify a tag object signed with GPG","body":"\n\n<h1 align=\"center\">GIT-TAG</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-tag -\nCreate, list, delete or verify a tag object signed with\nGPG</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git tag</i>\n[-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F\n&lt;file&gt;] [-e] <br>\n&lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;] <i><br>\ngit tag</i> -d &lt;tagname&gt;... <i><br>\ngit tag</i> [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;]\n[--no-contains &lt;commit&gt;] <br>\n[--points-at &lt;object&gt;] [--column[=&lt;options&gt;] |\n--no-column] <br>\n[--create-reflog] [--sort=&lt;key&gt;]\n[--format=&lt;format&gt;] <br>\n[--merged &lt;commit&gt;] [--no-merged &lt;commit&gt;]\n[&lt;pattern&gt;...] <i><br>\ngit tag</i> -v [--format=&lt;format&gt;]\n&lt;tagname&gt;...</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Add a tag\nreference in <b>refs/tags/</b>, unless <b>-d/-l/-v</b> is\ngiven to delete, list or verify tags.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unless\n<b>-f</b> is given, the named tag must not yet exist.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If one of\n<b>-a</b>, <b>-s</b>, or <b>-u &lt;keyid&gt;</b> is passed,\nthe command creates a <i>tag</i> object, and requires a tag\nmessage. Unless <b>-m &lt;msg&gt;</b> or <b>-F\n&lt;file&gt;</b> is given, an editor is started for the user\nto type in the tag message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>-m\n&lt;msg&gt;</b> or <b>-F &lt;file&gt;</b> is given and\n<b>-a</b>, <b>-s</b>, and <b>-u &lt;keyid&gt;</b> are\nabsent, <b>-a</b> is implied.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Otherwise, a\ntag reference that points directly at the given object\n(i.e., a lightweight tag) is created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A GnuPG signed\ntag object will be created when <b>-s</b> or <b>-u\n&lt;keyid&gt;</b> is used. When <b>-u &lt;keyid&gt;</b> is\nnot used, the committer identity for the current user is\nused to find the GnuPG key for signing. The configuration\nvariable <b>gpg.program</b> is used to specify custom GnuPG\nbinary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Tag objects\n(created with <b>-a</b>, <b>-s</b>, or <b>-u</b>) are called\n&quot;annotated&quot; tags; they contain a creation date,\nthe tagger name and e-mail, a tagging message, and an\noptional GnuPG signature. Whereas a &quot;lightweight&quot;\ntag is simply a name for an object (usually a commit\nobject).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Annotated tags\nare meant for release while lightweight tags are meant for\nprivate or temporary object labels. For this reason, some\ngit commands for naming objects (like <b>git describe</b>)\nwill ignore lightweight tags by default.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-a,\n--annotate</p>\n\n<p style=\"margin-left:17%;\">Make an unsigned, annotated tag\nobject</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s, --sign</p>\n\n<p style=\"margin-left:17%;\">Make a GPG-signed tag, using\nthe default e-mail address&rsquo;s key. The default behavior\nof tag GPG-signing is controlled by <b>tag.gpgSign</b>\nconfiguration variable if it exists, or disabled otherwise.\nSee <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-sign</p>\n\n<p style=\"margin-left:17%;\">Override <b>tag.gpgSign</b>\nconfiguration variable that is set to force each and every\ntag to be signed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-u\n&lt;keyid&gt;, --local-user=&lt;keyid&gt;</p>\n\n<p style=\"margin-left:17%;\">Make a GPG-signed tag, using\nthe given key.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f, --force</p>\n\n<p style=\"margin-left:17%;\">Replace an existing tag with\nthe given name (instead of failing)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-d,\n--delete</p>\n\n<p style=\"margin-left:17%;\">Delete existing tags with the\ngiven names.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v,\n--verify</p>\n\n<p style=\"margin-left:17%;\">Verify the GPG signature of the\ngiven tag names.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n&lt;num&gt;</p>\n\n<p style=\"margin-left:17%;\">&lt;num&gt; specifies how many\nlines from the annotation, if any, are printed when using\n-l. Implies <b>--list</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default is\nnot to print any annotation lines. If no number is given to\n<b>-n</b>, only the first line is printed. If the tag is not\nannotated, the commit message is displayed instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-l, --list</p>\n\n<p style=\"margin-left:17%;\">List tags. With optional\n<b>&lt;pattern&gt;...</b>, e.g. <b>git tag --list 'v-*'</b>,\nlist only the tags that match the pattern(s).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Running\n&quot;git tag&quot; without arguments also lists all tags.\nThe pattern is a shell wildcard (i.e., matched using\nfnmatch(3)). Multiple patterns may be given; if any of them\nmatches, the tag is shown.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option is\nimplicitly supplied if any other list-like option such as\n<b>--contains</b> is provided. See the documentation for\neach of those options for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sort=&lt;key&gt;</p>\n\n<p style=\"margin-left:17%;\">Sort based on the key given.\nPrefix <b>-</b> to sort in descending order of the value.\nYou may use the --sort=&lt;key&gt; option multiple times, in\nwhich case the last key becomes the primary key. Also\nsupports &quot;version:refname&quot; or\n&quot;v:refname&quot; (tag names are treated as versions).\nThe &quot;version:refname&quot; sort order can also be\naffected by the &quot;versionsort.suffix&quot; configuration\nvariable. The keys supported are the same as those in <b>git\nfor-each-ref</b>. Sort order defaults to the value\nconfigured for the <b>tag.sort</b> variable if it exists, or\nlexicographic order otherwise. See <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--color[=&lt;when&gt;]</p>\n\n<p style=\"margin-left:17%;\">Respect any colors specified in\nthe <b>--format</b> option. The <b>&lt;when&gt;</b> field\nmust be one of <b>always</b>, <b>never</b>, or <b>auto</b>\n(if <b>&lt;when&gt;</b> is absent, behave as if\n<b>always</b> was given).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-i,\n--ignore-case</p>\n\n<p style=\"margin-left:17%;\">Sorting and filtering tags are\ncase insensitive.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--column[=&lt;options&gt;],\n--no-column</p>\n\n<p style=\"margin-left:17%;\">Display tag listing in columns.\nSee configuration variable <b>column.tag</b> for option\nsyntax. <b>--column</b> and <b>--no-column</b> without\noptions are equivalent to <i>always</i> and <i>never</i>\nrespectively.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option is\nonly applicable when listing tags without annotation\nlines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--contains\n[&lt;commit&gt;]</p>\n\n<p style=\"margin-left:17%;\">Only list tags which contain\nthe specified commit (HEAD if not specified). Implies\n<b>--list</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-contains\n[&lt;commit&gt;]</p>\n\n<p style=\"margin-left:17%;\">Only list tags which\ndon&rsquo;t contain the specified commit (HEAD if not\nspecified). Implies <b>--list</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--merged\n[&lt;commit&gt;]</p>\n\n<p style=\"margin-left:17%;\">Only list tags whose commits\nare reachable from the specified commit (<b>HEAD</b> if not\nspecified).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-merged\n[&lt;commit&gt;]</p>\n\n<p style=\"margin-left:17%;\">Only list tags whose commits\nare not reachable from the specified commit (<b>HEAD</b> if\nnot specified).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--points-at\n&lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">Only list tags of the given\nobject (HEAD if not specified). Implies <b>--list</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-m &lt;msg&gt;,\n--message=&lt;msg&gt;</p>\n\n<p style=\"margin-left:17%;\">Use the given tag message\n(instead of prompting). If multiple <b>-m</b> options are\ngiven, their values are concatenated as separate paragraphs.\nImplies <b>-a</b> if none of <b>-a</b>, <b>-s</b>, or <b>-u\n&lt;keyid&gt;</b> is given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-F\n&lt;file&gt;, --file=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Take the tag message from the\ngiven file. Use <i>-</i> to read the message from the\nstandard input. Implies <b>-a</b> if none of <b>-a</b>,\n<b>-s</b>, or <b>-u &lt;keyid&gt;</b> is given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-e, --edit</p>\n\n<p style=\"margin-left:17%;\">The message taken from file\nwith <b>-F</b> and command line with <b>-m</b> are usually\nused as the tag message unmodified. This option lets you\nfurther edit the message taken from these sources.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cleanup=&lt;mode&gt;</p>\n\n<p style=\"margin-left:17%;\">This option sets how the tag\nmessage is cleaned up. The <i>&lt;mode&gt;</i> can be one of\n<i>verbatim</i>, <i>whitespace</i> and <i>strip</i>. The\n<i>strip</i> mode is default. The <i>verbatim</i> mode does\nnot change message at all, <i>whitespace</i> removes just\nleading/trailing whitespace lines and <i>strip</i> removes\nboth whitespace and commentary.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--create-reflog</p>\n\n<p style=\"margin-left:17%;\">Create a reflog for the tag. To\nglobally enable reflogs for tags, see\n<b>core.logAllRefUpdates</b> in <a href=\"https://man.page/1/git-config\">git-config(1)</a>. The\nnegated form <b>--no-create-reflog</b> only overrides an\nearlier <b>--create-reflog</b>, but currently does not\nnegate the setting of <b>core.logAllRefUpdates</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--format=&lt;format&gt;</p>\n\n<p style=\"margin-left:17%;\">A string that interpolates\n<b>%(fieldname)</b> from a tag ref being shown and the\nobject it points at. The format is the same as that of\n<a href=\"https://man.page/1/git-for-each-ref\">git-for-each-ref(1)</a>. When unspecified, defaults to\n<b>%(refname:strip=2)</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;tagname&gt;</p>\n\n<p style=\"margin-left:17%;\">The name of the tag to create,\ndelete, or describe. The new tag name must pass all checks\ndefined by <a href=\"https://man.page/1/git-check-ref-format\">git-check-ref-format(1)</a>. Some of these\nchecks may restrict the characters allowed in a tag\nname.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;commit&gt;,\n&lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">The object that the new tag\nwill refer to, usually a commit. Defaults to HEAD.</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\n<i>git tag</i> in sign-with-default mode (-s) will use your\ncommitter identity (of the form <b>Your Name\n&lt;your@email.address&gt;</b>) to find a key. If you want\nto use a different default key, you can specify it in the\nrepository configuration as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[user] <br>\nsigningKey = &lt;gpg-keyid&gt;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pager.tag</b>\nis only respected when listing tags, i.e., when <b>-l</b> is\nused or implied. The default is to use a pager. See\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>On\nRe-tagging</b> <br>\nWhat should you do when you tag a wrong commit and you would\nwant to re-tag?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you never\npushed anything out, just re-tag it. Use &quot;-f&quot; to\nreplace the old one. And you&rsquo;re done.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">But if you have\npushed things out (or others could just read your repository\ndirectly), then others will have already seen the old tag.\nIn that case you can do one of two things:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. The sane\nthing. Just admit you screwed up, and use a different name.\nOthers have already seen one tag-name, and if you keep the\nsame name, you may be in the situation that two people both\nhave &quot;version X&quot;, but they actually have\n<i>different</i> &quot;X&quot;'s. So just call it\n&quot;X.1&quot; and be done with it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. The insane\nthing. You really want to call the new version &quot;X&quot;\ntoo, <i>even though</i> others have already seen the old\none. So just use <i>git tag -f</i> again, as if you\nhadn&rsquo;t already published the old one.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However, Git\ndoes <b>not</b> (and it should not) change tags behind users\nback. So if somebody already got the old tag, doing a <i>git\npull</i> on your tree shouldn&rsquo;t just make them\noverwrite the old one.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If somebody got\na release tag from you, you cannot just change the tag for\nthem by updating your own one. This is a big security issue,\nin that people MUST be able to trust their tag-names. If you\nreally want to do the insane thing, you need to just fess up\nto it, and tell people that you messed up. You can do that\nby making a very public announcement saying:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Ok, I messed\nup, and I pushed out an earlier version tagged as X. I <br>\nthen fixed something, and retagged the *fixed* tree as X\nagain.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you got the\nwrong tag, and want the new one, please delete <br>\nthe old one and fetch the new one by doing:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git tag -d X\n<br>\ngit fetch origin tag X</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">to get my\nupdated tag.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can test\nwhich tag you have by doing</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git rev-parse\nX</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">which should\nreturn 0123456789abcdef.. if you have the new version.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sorry for the\ninconvenience.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Does this seem\na bit complicated? It <b>should</b> be. There is no way that\nit would be correct to just &quot;fix&quot; it\nautomatically. People need to know that their tags might\nhave been changed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>On Automatic\nfollowing</b> <br>\nIf you are following somebody else&rsquo;s tree, you are\nmost likely using remote-tracking branches (eg.\n<b>refs/remotes/origin/master</b>). You usually want the\ntags from the other end.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On the other\nhand, if you are fetching because you would want a one-shot\nmerge from somebody else, you typically do not want to get\ntags from there. This happens more often for people near the\ntoplevel but not limited to them. Mere mortals when pulling\nfrom each other do not necessarily want to automatically get\nprivate anchor point tags from the other person.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Often,\n&quot;please pull&quot; messages on the mailing list just\nprovide two pieces of information: a repo URL and a branch\nname; this is designed to be easily cut&amp;pasted at the\nend of a <i>git fetch</i> command line:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Linus, please\npull from</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">git://git..../proj.git\nmaster</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">to get the\nfollowing updates...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">becomes:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git pull\ngit://git..../proj.git master</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In such a case,\nyou do not want to automatically follow the other\nperson&rsquo;s tags.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One important\naspect of Git is its distributed nature, which largely means\nthere is no inherent &quot;upstream&quot; or\n&quot;downstream&quot; in the system. On the face of it, the\nabove example might seem to indicate that the tag namespace\nis owned by the upper echelon of people and that tags only\nflow downwards, but that is not the case. It only shows that\nthe usage pattern determines who are interested in whose\ntags.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A one-shot pull\nis a sign that a commit history is now crossing the boundary\nbetween one circle of people (e.g. &quot;people who are\nprimarily interested in the networking part of the\nkernel&quot;) who may have their own set of tags (e.g.\n&quot;this is the third release candidate from the\nnetworking group to be proposed for general consumption with\n2.6.21 release&quot;) to another circle of people (e.g.\n&quot;people who integrate various subsystem\nimprovements&quot;). The latter are usually not interested\nin the detailed tags used internally in the former group\n(that is what &quot;internal&quot; means). That is why it is\ndesirable not to follow tags automatically in this case.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It may well be\nthat among networking people, they may want to exchange the\ntags internal to their group, but in that workflow they are\nmost likely tracking each other&rsquo;s progress by having\nremote-tracking branches. Again, the heuristic to\nautomatically follow such tags is a good thing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>On\nBackdating Tags</b> <br>\nIf you have imported some changes from another VCS and would\nlike to add tags for major releases of your work, it is\nuseful to be able to specify the date to embed inside of the\ntag object; such data in the tag object affects, for\nexample, the ordering of tags in the gitweb interface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To set the date\nused in future tag objects, set the environment variable\nGIT_COMMITTER_DATE (see the later discussion of possible\nvalues; the most common form is &quot;YYYY-MM-DD\nHH:MM&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\nGIT_COMMITTER_DATE=&quot;2006-10-02 10:31&quot; git tag -s\nv1.0.1</p>\n\n<h2>DATE FORMATS\n<a name=\"DATE FORMATS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>GIT_AUTHOR_DATE</b> and <b>GIT_COMMITTER_DATE</b>\nenvironment variables support the following date\nformats:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git internal\nformat</p>\n\n<p style=\"margin-left:17%;\">It is <b>&lt;unix timestamp&gt;\n&lt;time zone offset&gt;</b>, where <b>&lt;unix\ntimestamp&gt;</b> is the number of seconds since the UNIX\nepoch. <b>&lt;time zone offset&gt;</b> is a positive or\nnegative offset from UTC. For example CET (which is 1 hour\nahead of UTC) is <b>+0100</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RFC 2822</p>\n\n<p style=\"margin-left:17%;\">The standard email format as\ndescribed by RFC 2822, for example <b>Thu, 07 Apr 2005\n22:13:13 +0200</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ISO 8601</p>\n\n<p style=\"margin-left:17%;\">Time and date specified by the\nISO 8601 standard, for example <b>2005-04-07T22:13:13</b>.\nThe parser accepts a space instead of the <b>T</b> character\nas well. Fractional parts of a second will be ignored, for\nexample <b>2005-04-07T22:13:13.019</b> will be treated as\n<b>2005-04-07T22:13:13</b>.</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nIn addition, the date part is accepted in the following\nformats: <b>YYYY.MM.DD</b>, <b>MM/DD/YYYY</b> and\n<b>DD.MM.YYYY</b>.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>When\ncombining multiple <b>--contains</b> and\n<b>--no-contains</b> filters, only references that contain\nat least one of the <b>--contains</b> commits and contain\nnone of the <b>--no-contains</b> commits are\nshown.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>When\ncombining multiple <b>--merged</b> and <b>--no-merged</b>\nfilters, only references that are reachable from at least\none of the <b>--merged</b> commits and from none of the\n<b>--no-merged</b> commits are shown.</big></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><a href=\"https://man.page/1/git-check-ref-format\">git-check-ref-format(1)</a>.\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#DATE FORMATS\">DATE FORMATS</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}