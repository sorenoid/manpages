{"name":"git-pull","description":"git-pull - Fetch from and integrate with another repository or a local branch","body":"\n\n<h1 align=\"center\">GIT-PULL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-pull -\nFetch from and integrate with another repository or a local\nbranch</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git pull</i>\n[&lt;options&gt;] [&lt;repository&gt;\n[&lt;refspec&gt;...]]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Incorporates\nchanges from a remote repository into the current branch. If\nthe current branch is behind the remote, then by default it\nwill fast-forward the current branch to match the remote. If\nthe current branch and the remote have diverged, the user\nneeds to specify how to reconcile the divergent branches\nwith <b>--rebase</b> or <b>--no-rebase</b> (or the\ncorresponding configuration option in\n<b>pull.rebase</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">More precisely,\n<b>git pull</b> runs <b>git fetch</b> with the given\nparameters and then depending on configuration options or\ncommand line flags, will call either <b>git rebase</b> or\n<b>git merge</b> to reconcile diverging branches.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;repository&gt;\nshould be the name of a remote repository as passed to\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>. &lt;refspec&gt; can name an arbitrary\nremote ref (for example, the name of a tag) or even a\ncollection of refs with corresponding remote-tracking\nbranches (e.g., refs/heads/*:refs/remotes/origin/*), but\nusually it is the name of a branch in the remote\nrepository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Default values\nfor &lt;repository&gt; and &lt;branch&gt; are read from the\n&quot;remote&quot; and &quot;merge&quot; configuration for\nthe current branch as set by <a href=\"https://man.page/1/git-branch\">git-branch(1)</a>\n<b>--track</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Assume the\nfollowing history exists and the current branch is\n&quot;<b>master</b>&quot;:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A---B---C\nmaster on origin <br>\n/ <br>\nD---E---F---G master <br>\n^ <br>\norigin/master in your repository</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then\n&quot;<b>git pull</b>&quot; will fetch and replay the\nchanges from the remote <b>master</b> branch since it\ndiverged from the local <b>master</b> (i.e., <b>E</b>) until\nits current commit (<b>C</b>) on top of <b>master</b> and\nrecord the result in a new commit along with the names of\nthe two parent commits and a log message from the user\ndescribing the changes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A---B---C\norigin/master <br>\n/ \\ <br>\nD---E---F---G---H master</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/1/git-merge\">git-merge(1)</a> for details, including how conflicts are\npresented and handled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In Git 1.7.0 or\nlater, to cancel a conflicting merge, use <b>git reset\n--merge</b>. <b>Warning</b>: In older versions of Git,\nrunning <i>git pull</i> with uncommitted changes is\ndiscouraged: while possible, it leaves you in a state that\nmay be hard to back out of in the case of a conflict.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If any of the\nremote changes overlap with local uncommitted changes, the\nmerge will be automatically canceled and the work tree\nuntouched. It is generally best to get any local changes in\nworking order before pulling or stash them away with\n<a href=\"https://man.page/1/git-stash\">git-stash(1)</a>.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">This is passed to both\nunderlying git-fetch to squelch reporting of during\ntransfer, and underlying git-merge to squelch output during\nmerging.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v,\n--verbose</p>\n\n<p style=\"margin-left:17%;\">Pass --verbose to git-fetch and\ngit-merge.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]recurse-submodules[=yes|on-demand|no]</p>\n\n<p style=\"margin-left:17%;\">This option controls if new\ncommits of populated submodules should be fetched, and if\nthe working trees of active submodules should be updated,\ntoo (see <a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>, <a href=\"https://man.page/1/git-config\">git-config(1)</a> and\n<a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the checkout\nis done via rebase, local submodule commits are rebased as\nwell.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the update\nis done via merge, the submodule conflicts are resolved and\nchecked out.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options\nrelated to merging</b> <br>\n--commit, --no-commit</p>\n\n<p style=\"margin-left:17%;\">Perform the merge and commit\nthe result. This option can be used to override --no-commit.\nOnly useful when merging.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n--no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and\nfurther tweak the merge result before committing.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nfast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with\n--no-commit. Thus, if you want to ensure your branch is not\nchanged or updated by the merge command, use --no-ff with\n--no-commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--edit, -e,\n--no-edit</p>\n\n<p style=\"margin-left:17%;\">Invoke an editor before\ncommitting successful mechanical merge to further edit the\nauto-generated merge message, so that the user can explain\nand justify the merge. The <b>--no-edit</b> option can be\nused to accept the auto-generated message (this is generally\ndiscouraged).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Older scripts\nmay depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor\nopened when they run <b>git merge</b>. To make it easier to\nadjust such scripts to the updated behaviour, the\nenvironment variable <b>GIT_MERGE_AUTOEDIT</b> can be set to\n<b>no</b> at the beginning of them.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cleanup=&lt;mode&gt;</p>\n\n<p style=\"margin-left:17%;\">This option determines how the\nmerge message will be cleaned up before committing. See\n<a href=\"https://man.page/1/git-commit\">git-commit(1)</a> for more details. In addition, if the\n<i>&lt;mode&gt;</i> is given a value of <b>scissors</b>,\nscissors will be appended to <b>MERGE_MSG</b> before being\npassed on to the commit machinery in the case of a merge\nconflict.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ff-only</p>\n\n<p style=\"margin-left:17%;\">Only update to the new history\nif there is no divergent local history. This is the default\nwhen no method for reconciling divergent histories is\nprovided (via the --rebase=* flags).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ff,\n--no-ff</p>\n\n<p style=\"margin-left:17%;\">When merging rather than\nrebasing, specifies how a merge is handled when the\nmerged-in history is already a descendant of the current\nhistory. If merging is requested, <b>--ff</b> is the default\nunless merging an annotated (and possibly signed) tag that\nis not stored in its natural place in the <b>refs/tags/</b>\nhierarchy, in which case <b>--no-ff</b> is assumed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>--ff</b>, when possible resolve the merge as a\nfast-forward (only update the branch pointer to match the\nmerged branch; do not create a merge commit). When not\npossible (when the merged-in history is not a descendant of\nthe current history), create a merge commit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>--no-ff</b>, create a merge commit in all cases, even\nwhen the merge could instead be resolved as a\nfast-forward.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-S[&lt;keyid&gt;],\n--gpg-sign[=&lt;keyid&gt;], --no-gpg-sign</p>\n\n<p style=\"margin-left:17%;\">GPG-sign the resulting merge\ncommit. The <b>keyid</b> argument is optional and defaults\nto the committer identity; if specified, it must be stuck to\nthe option without a space. <b>--no-gpg-sign</b> is useful\nto countermand both <b>commit.gpgSign</b> configuration\nvariable, and earlier <b>--gpg-sign</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--log[=&lt;n&gt;],\n--no-log</p>\n\n<p style=\"margin-left:17%;\">In addition to branch names,\npopulate the log message with one-line descriptions from at\nmost &lt;n&gt; actual commits that are being merged. See\nalso <a href=\"https://man.page/1/git-fmt-merge-msg\">git-fmt-merge-msg(1)</a>. Only useful when\nmerging.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With --no-log\ndo not list one-line descriptions from the actual commits\nbeing merged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--signoff,\n--no-signoff</p>\n\n<p style=\"margin-left:17%;\">Add a <b>Signed-off-by</b>\ntrailer by the committer at the end of the commit log\nmessage. The meaning of a signoff depends on the project to\nwhich you&rsquo;re committing. For example, it may certify\nthat the committer has the rights to submit the work under\nthe project&rsquo;s license or agrees to some contributor\nrepresentation, such as a Developer Certificate of Origin.\n(See\n<b><font color=\"#0000FF\">http://developercertificate.org</font></b>\n<font color=\"#000000\">for the one used by the Linux kernel\nand Git projects.) Consult the documentation or leadership\nof the project to which you&rsquo;re contributing to\nunderstand how the signoffs are used in that\nproject.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n--no-signoff option can be used to countermand an earlier\n--signoff option on the command line.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--stat,\n-n, --no-stat</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Show a\ndiffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option\nmerge.stat.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">With\n-n or --no-stat do not show a diffstat at the end of the\nmerge.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--squash,\n--no-squash</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Produce\nthe working tree and index state as if a real merge happened\n(except for the merge information), but do not actually make\na commit, move the <b>HEAD</b>, or record\n<b>$GIT_DIR/MERGE_HEAD</b> (to cause the next <b>git\ncommit</b> command to create a merge commit). This allows\nyou to create a single commit on top of the current branch\nwhose effect is the same as merging another branch (or more\nin case of an octopus).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">With\n--no-squash perform the merge and commit the result. This\noption can be used to override --squash.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">With\n--squash, --commit is not allowed, and will fail.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Only\nuseful when merging.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--[no-]verify</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By\ndefault, the pre-merge and commit-msg hooks are run. When\n<b>--no-verify</b> is given, these are bypassed. See also\n<a href=\"https://man.page/5/githooks\">githooks(5)</a>. Only useful when merging.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-s\n&lt;strategy&gt;, --strategy=&lt;strategy&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Use the\ngiven merge strategy; can be supplied more than once to\nspecify them in the order they should be tried. If there is\nno <b>-s</b> option, a built-in list of strategies is used\ninstead (<b>ort</b> when merging a single head,\n<b>octopus</b> otherwise).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-X\n&lt;option&gt;, --strategy-option=&lt;option&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Pass\nmerge strategy specific option through to the merge\nstrategy.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--verify-signatures,\n--no-verify-signatures</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Verify\nthat the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in\nthe default trust model, this means the signing key has been\nsigned by a trusted key. If the tip commit of the side\nbranch is not signed with a valid key, the merge is\naborted.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Only\nuseful when merging.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--summary,\n--no-summary</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Synonyms\nto --stat and --no-stat; these are deprecated and will be\nremoved in the future.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--autostash,\n--no-autostash</font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Automatically\ncreate a temporary stash entry before the operation begins,\nrecord it in the special ref <b>MERGE_AUTOSTASH</b> and\napply it after the operation ends. This means that you can\nrun the operation on a dirty worktree. However, use with\ncare: the final stash application after a successful merge\nmight result in non-trivial conflicts.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--allow-unrelated-histories</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By\ndefault, <b>git merge</b> command refuses to merge histories\nthat do not share a common ancestor. This option can be used\nto override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Only\nuseful when merging.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-r,\n--rebase[=false|true|merges|interactive]</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">When\ntrue, rebase the current branch on top of the upstream\nbranch after fetching. If there is a remote-tracking branch\ncorresponding to the upstream branch and the upstream branch\nwas rebased since last fetched, the rebase uses that\ninformation to avoid rebasing non-local changes.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nset to <b>merges</b>, rebase using <b>git rebase\n--rebase-merges</b> so that the local merge commits are\nincluded in the rebase (see <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a> for\ndetails).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nfalse, merge the upstream branch into the current\nbranch.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<b>interactive</b>, enable the interactive mode of\nrebase.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">See\n<b>pull.rebase</b>, <b>branch.&lt;name&gt;.rebase</b> and\n<b>branch.autoSetupRebase</b> in <a href=\"https://man.page/1/git-config\">git-config(1)</a> if you\nwant to make <b>git pull</b> always use <b>--rebase</b>\ninstead of merging.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><b><big>Note</big></b>\n<br>\nThis is a potentially <i>dangerous</i> mode of operation. It\nrewrites history, which does not bode well when you\npublished that history already. Do <b>not</b> use this\noption unless you have read <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a>\ncarefully.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--no-rebase</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>This\nis shorthand for --rebase=false.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><b>Options\nrelated to fetching</b> <br>\n--all</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Fetch\nall remotes.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-a,\n--append</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Append\nref names and object names of fetched refs to the existing\ncontents of <b>.git/FETCH_HEAD</b>. Without this option old\ndata in <b>.git/FETCH_HEAD</b> will be\noverwritten.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--atomic</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Use\nan atomic transaction to update local refs. Either all refs\nare updated, or on error, no refs are\nupdated.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--depth=&lt;depth&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Limit\nfetching to the specified number of commits from the tip of\neach remote branch history. If fetching to a <i>shallow</i>\nrepository created by <b>git clone</b> with\n<b>--depth=&lt;depth&gt;</b> option (see\n<a href=\"https://man.page/1/git-clone\">git-clone(1)</a>), deepen or shorten the history to the\nspecified number of commits. Tags for the deepened commits\nare not fetched.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--deepen=&lt;depth&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Similar\nto --depth, except it specifies the number of commits from\nthe current shallow boundary instead of from the tip of each\nremote branch history.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--shallow-since=&lt;date&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Deepen\nor shorten the history of a shallow repository to include\nall reachable commits after &lt;date&gt;.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--shallow-exclude=&lt;revision&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Deepen\nor shorten the history of a shallow repository to exclude\ncommits reachable from a specified remote branch or tag.\nThis option can be specified multiple\ntimes.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--unshallow</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>If\nthe source repository is complete, convert a shallow\nrepository to a complete one, removing all the limitations\nimposed by shallow repositories.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>If\nthe source repository is shallow, fetch as much as possible\nso that the current repository has the same history as the\nsource repository.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--update-shallow</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>By\ndefault when fetching from a shallow repository, <b>git\nfetch</b> refuses refs that require updating .git/shallow.\nThis option updates .git/shallow and accept such\nrefs.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--negotiation-tip=&lt;commit|glob&gt;</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>By\ndefault, Git will report, to the server, commits reachable\nfrom all local refs to find common commits in an attempt to\nreduce the size of the to-be-received packfile. If\nspecified, Git will only report commits reachable from the\ngiven tips. This is useful to speed up fetches when the user\nknows which local ref is likely to have commits in common\nwith the upstream ref being fetched.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>This\noption may be specified more than once; if so, Git will\nreport commits reachable from any of the given\ncommits.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>The\nargument to this option may be a glob on ref names, a ref,\nor the (possibly abbreviated) SHA-1 of a commit. Specifying\na glob is equivalent to specifying this option multiple\ntimes, one for each matching ref name.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>See\nalso the <b>fetch.negotiationAlgorithm</b> and\n<b>push.negotiate</b> configuration variables documented in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>, and the <b>--negotiate-only</b> option\nbelow.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--negotiate-only</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Do\nnot fetch anything from the server, and instead print the\nancestors of the provided <b>--negotiation-tip=*</b>\narguments, which we have in common with the\nserver.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>Internally\nthis is used to implement the <b>push.negotiate</b> option,\nsee <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--dry-run</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Show\nwhat would be done, without making any\nchanges.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-f,\n--force</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>When\n<i>git fetch</i> is used with <b>&lt;src&gt;:&lt;dst&gt;</b>\nrefspec it may refuse to update the local branch as\ndiscussed in the <b>&lt;refspec&gt;</b> part of the\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a> documentation. This option overrides\nthat check.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-k,\n--keep</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Keep\ndownloaded pack.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--prefetch</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Modify\nthe configured refspec to place all refs into the\n<b>refs/prefetch/</b> namespace. See the <b>prefetch</b>\ntask in <a href=\"https://man.page/1/git-maintenance\">git-maintenance(1)</a>.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-p,\n--prune</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Before\nfetching, remove any remote-tracking references that no\nlonger exist on the remote. Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option. However, if tags\nare fetched due to an explicit refspec (either on the\ncommand line or in the remote configuration, for example if\nthe remote was cloned with the --mirror option), then they\nare also subject to pruning. Supplying <b>--prune-tags</b>\nis a shorthand for providing the tag\nrefspec.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--no-tags</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>By\ndefault, tags that point at objects that are downloaded from\nthe remote repository are fetched and stored locally. This\noption disables this automatic tag following. The default\nbehavior for a remote may be specified with the\nremote.&lt;name&gt;.tagOpt setting. See\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--refmap=&lt;refspec&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>When\nfetching refs listed on the command line, use the specified\nrefspec (can be given more than once) to map the refs to\nremote-tracking branches, instead of the values of\n<b>remote.*.fetch</b> configuration variables for the remote\nrepository. Providing an empty <b>&lt;refspec&gt;</b> to the\n<b>--refmap</b> option causes Git to ignore the configured\nrefspecs and rely entirely on the refspecs supplied as\ncommand-line arguments. See section on &quot;Configured\nRemote-tracking Branches&quot; for details.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-t,\n--tags</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Fetch\nall tags from the remote (i.e., fetch remote tags\n<b>refs/tags/*</b> into local tags with the same name), in\naddition to whatever else would otherwise be fetched. Using\nthis option alone does not subject tags to pruning, even if\n--prune is used (though tags may be pruned anyway if they\nare also the destination of an explicit refspec; see\n<b>--prune</b>).</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-j,\n--jobs=&lt;n&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Number\nof parallel children to be used for all forms of\nfetching.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>If\nthe <b>--multiple</b> option was specified, the different\nremotes will be fetched in parallel. If multiple submodules\nare fetched, they will be fetched in parallel. To control\nthem independently, use the config settings\n<b>fetch.parallel</b> and <b>submodule.fetchJobs</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>).</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>Typically,\nparallel recursive and multi-remote fetches will be faster.\nBy default fetches are performed sequentially, not in\nparallel.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--set-upstream</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>If\nthe remote is fetched successfully, add upstream (tracking)\nreference, used by argument-less <a href=\"https://man.page/1/git-pull\">git-pull(1)</a> and\nother commands. For more information, see\n<b>branch.&lt;name&gt;.merge</b> and\n<b>branch.&lt;name&gt;.remote</b> in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--upload-pack\n&lt;upload-pack&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>When\ngiven, and the repository to fetch from is handled by <i>git\nfetch-pack</i>, <b>--exec=&lt;upload-pack&gt;</b> is passed\nto the command to specify non-default path for the command\nrun on the other end.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--progress</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Progress\nstatus is reported on the standard error stream by default\nwhen it is attached to a terminal, unless -q is specified.\nThis flag forces progress status even if the standard error\nstream is not directed to a terminal.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-o\n&lt;option&gt;,\n--server-option=&lt;option&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Transmit\nthe given string to the server when communicating using\nprotocol version 2. The given string must not contain a NUL\nor LF character. The server&rsquo;s handling of server\noptions, including unknown ones, is server-specific. When\nmultiple <b>--server-option=&lt;option&gt;</b> are given,\nthey are all sent to the other side in the order listed on\nthe command line.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--show-forced-updates</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>By\ndefault, git checks if a branch is force-updated during\nfetch. This can be disabled through fetch.showForcedUpdates,\nbut the --show-forced-updates option guarantees this check\noccurs. See <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>--no-show-forced-updates</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>By\ndefault, git checks if a branch is force-updated during\nfetch. Pass --no-show-forced-updates or set\nfetch.showForcedUpdates to false to skip this check for\nperformance reasons. If used during <i>git-pull</i> the\n--ff-only option will still check for forced updates before\nattempting a fast-forward update. See\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-4,\n--ipv4</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Use\nIPv4 addresses only, ignoring IPv6\naddresses.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>-6,\n--ipv6</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Use\nIPv6 addresses only, ignoring IPv4\naddresses.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>&lt;repository&gt;</big></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>The\n&quot;remote&quot; repository that is the source of a fetch\nor pull operation. This parameter can be either a URL (see\nthe section GIT URLS below) or the name of a remote (see the\nsection REMOTES below).</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>&lt;refspec&gt;</big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>Specifies\nwhich refs to fetch and which local refs to update. When no\n&lt;refspec&gt;s appear on the command line, the refs to\nfetch are read from <b>remote.&lt;repository&gt;.fetch</b>\nvariables instead (see the section &quot;CONFIGURED\nREMOTE-TRACKING BRANCHES&quot; in\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>).</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>The\nformat of a &lt;refspec&gt; parameter is an optional plus\n<b>+</b>, followed by the source &lt;src&gt;, followed by a\ncolon <b>:</b>, followed by the destination ref &lt;dst&gt;.\nThe colon can be omitted when &lt;dst&gt; is empty.\n&lt;src&gt; is typically a ref, but it can also be a fully\nspelled hex object name.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>A\n&lt;refspec&gt; may contain a <b>*</b> in its &lt;src&gt; to\nindicate a simple pattern match. Such a refspec functions\nlike a glob that matches any ref with the same prefix. A\npattern &lt;refspec&gt; must have a <b>*</b> in both the\n&lt;src&gt; and &lt;dst&gt;. It will map refs to the\ndestination by replacing the <b>*</b> with the contents\nmatched from the source.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>If\na refspec is prefixed by <b>^</b>, it will be interpreted as\na negative refspec. Rather than specifying which refs to\nfetch or which local refs to update, such a refspec will\ninstead specify refs to exclude. A ref will be considered to\nmatch if it matches at least one positive refspec, and does\nnot match any negative refspec. Negative refspecs can be\nuseful to restrict the scope of a pattern refspec so that it\nwill not include specific refs. Negative refspecs can\nthemselves be pattern refspecs. However, they may only\ncontain a &lt;src&gt; and do not specify a &lt;dst&gt;.\nFully spelled out hex object names are also not\nsupported.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><b>tag\n&lt;tag&gt;</b> means the same as\n<b>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</b>; it\nrequests fetching everything up to the given\ntag.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>The\nremote ref that matches &lt;src&gt; is fetched, and if\n&lt;dst&gt; is not an empty string, an attempt is made to\nupdate the local ref that matches it.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>Whether\nthat update is allowed without <b>--force</b> depends on the\nref namespace it&rsquo;s being fetched to, the type of\nobject being fetched, and whether the update is considered\nto be a fast-forward. Generally, the same rules apply for\nfetching as when pushing, see the <b>&lt;refspec&gt;...</b>\nsection of <a href=\"https://man.page/1/git-push\">git-push(1)</a> for what those are. Exceptions\nto those rules particular to <i>git fetch</i> are noted\nbelow.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>Until\nGit version 2.20, and unlike when pushing with\n<a href=\"https://man.page/1/git-push\">git-push(1)</a>, any updates to <b>refs/tags/*</b> would\nbe accepted without <b>+</b> in the refspec (or\n<b>--force</b>). When fetching, we promiscuously considered\nall tag updates from a remote to be forced fetches. Since\nGit version 2.20, fetching to update <b>refs/tags/*</b>\nworks the same way as when pushing. I.e. any updates will be\nrejected without <b>+</b> in the refspec (or\n<b>--force</b>).</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>Unlike\nwhen pushing with <a href=\"https://man.page/1/git-push\">git-push(1)</a>, any updates outside of\n<b>refs/{tags,heads}/*</b> will be accepted without <b>+</b>\nin the refspec (or <b>--force</b>), whether that&rsquo;s\nswapping e.g. a tree object for a blob, or a commit for\nanother commit that&rsquo;s doesn&rsquo;t have the previous\ncommit as an ancestor etc.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>Unlike\nwhen pushing with <a href=\"https://man.page/1/git-push\">git-push(1)</a>, there is no\nconfiguration which&rsquo;ll amend these rules, and nothing\nlike a <b>pre-fetch</b> hook analogous to the\n<b>pre-receive</b> hook.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>As\nwith pushing with <a href=\"https://man.page/1/git-push\">git-push(1)</a>, all of the rules\ndescribed above about what&rsquo;s not allowed as an update\ncan be overridden by adding an the optional leading <b>+</b>\nto a refspec (or using <b>--force</b> command line option).\nThe only exception to this is that no amount of forcing will\nmake the <b>refs/heads/*</b> namespace accept a non-commit\nobject.</big></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><big><b><big>Note</big></b>\n<br>\nWhen the remote branch you want to fetch is known to be\nrewound and rebased regularly, it is expected that its new\ntip will not be descendant of its previous tip (as stored in\nyour remote-tracking branch the last time you fetched). You\nwould want to use the <b>+</b> sign to indicate\nnon-fast-forward updates will be needed for such branches.\nThere is no way to determine or declare that a branch will\nbe made available in a repository with this behavior; the\npulling user simply must know this is the expected usage\npattern for a branch.</big></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><big><b><big>Note</big></b>\n<br>\nThere is a difference between listing multiple\n&lt;refspec&gt; directly on <i>git pull</i> command line and\nhaving multiple <b>remote.&lt;repository&gt;.fetch</b>\nentries in your configuration for a &lt;repository&gt; and\nrunning a <i>git pull</i> command without any explicit\n&lt;refspec&gt; parameters. &lt;refspec&gt;s listed\nexplicitly on the command line are always merged into the\ncurrent branch after fetching. In other words, if you list\nmore than one remote ref, <i>git pull</i> will create an\nOctopus merge. On the other hand, if you do not list any\nexplicit &lt;refspec&gt; parameter on the command line,\n<i>git pull</i> will fetch all the &lt;refspec&gt;s it finds\nin the <b>remote.&lt;repository&gt;.fetch</b> configuration\nand merge only the first &lt;refspec&gt; found into the\ncurrent branch. This is because making an Octopus from\nremote refs is rarely done, while keeping track of multiple\nremote heads in one-go by fetching more than one is often\nuseful.</big></font></p>\n\n<h2>GIT URLS\n<a name=\"GIT URLS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>In\ngeneral, URLs contain information about the transport\nprotocol, the address of the remote server, and the path to\nthe repository. Depending on the transport protocol, some of\nthis information may be absent.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>Git\nsupports ssh, git, http, and https protocols (in addition,\nftp, and ftps can be used for fetching, but this is\ninefficient and deprecated; do not use\nit).</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\nnative transport (i.e. git:// URL) does no authentication\nand should be used with caution on unsecured\nnetworks.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\nfollowing syntaxes may be used with\nthem:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nssh://[user@]host.xz[:port]/path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\ngit://host.xz[:port]/path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nhttp[s]://host.xz[:port]/path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nftp[s]://host.xz[:port]/path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>An\nalternative scp-like syntax may also be used with the ssh\nprotocol:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\n[user@]host.xz:path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>This\nsyntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that\ncontains a colon. For example the local path <b>foo:bar</b>\ncould be specified as an absolute path or <b>./foo:bar</b>\nto avoid being misinterpreted as an ssh\nurl.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\nssh and git protocols additionally support ~username\nexpansion:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\ngit://host.xz[:port]/~[user]/path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\n[user@]host.xz:/~[user]/path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>For\nlocal repositories, also supported by Git natively, the\nfollowing syntaxes may be used:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\n/path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nfile:///path/to/repo.git/</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>These\ntwo syntaxes are mostly equivalent, except when cloning,\nwhen the former implies --local option. See\n<a href=\"https://man.page/1/git-clone\">git-clone(1)</a> for details.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big><i>git\nclone</i>, <i>git fetch</i> and <i>git pull</i>, but not\n<i>git push</i>, will also accept a suitable bundle file.\nSee <a href=\"https://man.page/1/git-bundle\">git-bundle(1)</a>.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>When\nGit doesn&rsquo;t know how to handle a certain transport\nprotocol, it attempts to use the\n<i>remote-&lt;transport&gt;</i> remote helper, if one\nexists. To explicitly request a remote helper, the following\nsyntax may be used:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\n&lt;transport&gt;::&lt;address&gt;</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>where\n&lt;address&gt; may be a path, a server and path, or an\narbitrary URL-like string recognized by the specific remote\nhelper being invoked. See <a href=\"https://man.page/7/gitremote-helpers\">gitremote-helpers(7)</a> for\ndetails.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>If\nthere are a large number of similarly-named remote\nrepositories and you want to use a different format for them\n(such that the URLs you use will be rewritten into URLs that\nwork), you can create a configuration section of the\nform:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>[url\n&quot;&lt;actual url base&gt;&quot;] <br>\ninsteadOf = &lt;other url base&gt;</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>For\nexample, with this:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>[url\n&quot;git://git.host.xz/&quot;] <br>\ninsteadOf = host.xz:/path/to/ <br>\ninsteadOf = work:</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>a\nURL like &quot;work:repo.git&quot; or like\n&quot;host.xz:/path/to/repo.git&quot; will be rewritten in\nany context that takes a URL to be\n&quot;git://git.host.xz/repo.git&quot;.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>If\nyou want to rewrite URLs for push only, you can create a\nconfiguration section of the form:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>[url\n&quot;&lt;actual url base&gt;&quot;] <br>\npushInsteadOf = &lt;other url\nbase&gt;</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>For\nexample, with this:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>[url\n&quot;ssh://example.org/&quot;] <br>\npushInsteadOf = git://example.org/</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>a\nURL like &quot;git://example.org/path/to/repo.git&quot; will\nbe rewritten to\n&quot;ssh://example.org/path/to/repo.git&quot; for pushes,\nbut pulls will still use the original\nURL.</big></big></font></p>\n\n<h2>REMOTES\n<a name=\"REMOTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\nname of one of the following can be used instead of a URL as\n<b>&lt;repository&gt;</b> argument:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\na remote in the Git configuration file:\n<b>$GIT_DIR/config</b>,</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\na file in the <b>$GIT_DIR/remotes</b> directory,\nor</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\na file in the <b>$GIT_DIR/branches</b>\ndirectory.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>All\nof these also allow you to omit the refspec from the command\nline because they each contain a refspec which git will use\nby default.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big><b>Named\nremote in configuration file</b> <br>\nYou can choose to provide the name of a remote which you had\npreviously configured using <a href=\"https://man.page/1/git-remote\">git-remote(1)</a>,\n<a href=\"https://man.page/1/git-config\">git-config(1)</a> or even by a manual edit to the\n<b>$GIT_DIR/config</b> file. The URL of this remote will be\nused to access the repository. The refspec of this remote\nwill be used by default when you do not provide a refspec on\nthe command line. The entry in the config file would appear\nlike this:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>[remote\n&quot;&lt;name&gt;&quot;] <br>\nurl = &lt;url&gt; <br>\npushurl = &lt;pushurl&gt; <br>\npush = &lt;refspec&gt; <br>\nfetch = &lt;refspec&gt;</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\n<b>&lt;pushurl&gt;</b> is used for pushes only. It is\noptional and defaults to\n<b>&lt;url&gt;</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big><b>Named\nfile in $GIT_DIR/remotes</b> <br>\nYou can choose to provide the name of a file in\n<b>$GIT_DIR/remotes</b>. The URL in this file will be used\nto access the repository. The refspec in this file will be\nused as default when you do not provide a refspec on the\ncommand line. This file should have the following\nformat:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>URL:\none of the above URL format <br>\nPush: &lt;refspec&gt; <br>\nPull: &lt;refspec&gt;</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big><b>Push:</b>\nlines are used by <i>git push</i> and <b>Pull:</b> lines are\nused by <i>git pull</i> and <i>git fetch</i>. Multiple\n<b>Push:</b> and <b>Pull:</b> lines may be specified for\nadditional branch mappings.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big><b>Named\nfile in $GIT_DIR/branches</b> <br>\nYou can choose to provide the name of a file in\n<b>$GIT_DIR/branches</b>. The URL in this file will be used\nto access the repository. This file should have the\nfollowing format:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&lt;url&gt;#&lt;head&gt;</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big><b>&lt;url&gt;</b>\nis required; <b>#&lt;head&gt;</b> is\noptional.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>Depending\non the operation, git will use one of the following\nrefspecs, if you don&rsquo;t provide one on the command\nline. <b>&lt;branch&gt;</b> is the name of this file in\n<b>$GIT_DIR/branches</b> and <b>&lt;head&gt;</b> defaults to\n<b>master</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>git\nfetch uses:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>git\npush uses:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>HEAD:refs/heads/&lt;head&gt;</big></big></font></p>\n\n<h2>MERGE STRATEGIES\n<a name=\"MERGE STRATEGIES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\nmerge mechanism (<b>git merge</b> and <b>git pull</b>\ncommands) allows the backend <i>merge strategies</i> to be\nchosen with <b>-s</b> option. Some strategies can also take\ntheir own options, which can be passed by giving\n<b>-X&lt;option&gt;</b> arguments to <b>git merge</b> and/or\n<b>git pull</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>ort</big></big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big><big>This\nis the default merge strategy when pulling or merging one\nbranch. This strategy can only resolve two heads using a\n3-way merge algorithm. When there is more than one common\nancestor that can be used for 3-way merge, it creates a\nmerged tree of the common ancestors and uses that as the\nreference tree for the 3-way merge. This has been reported\nto result in fewer merge conflicts without causing mismerges\nby tests done on actual merge commits taken from Linux 2.6\nkernel development history. Additionally this strategy can\ndetect and handle merges involving renames. It does not make\nuse of detected copies. The name for this algorithm is an\nacronym (&quot;Ostensibly Recursive&rsquo;s Twin&quot;) and\ncame from the fact that it was written as a replacement for\nthe previous default algorithm,\n<b>recursive</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\n<i>ort</i> strategy can take the following\noptions:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>ours</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>This\noption forces conflicting hunks to be auto-resolved cleanly\nby favoring <i>our</i> version. Changes from the other tree\nthat do not conflict with our side are reflected in the\nmerge result. For a binary file, the entire contents are\ntaken from our side.</big></big></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><big><big>This\nshould not be confused with the <i>ours</i> merge strategy,\nwhich does not even look at what the other tree contains at\nall. It discards everything the other tree did, declaring\n<i>our</i> history contains all that happened in\nit.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>theirs</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>This\nis the opposite of <i>ours</i>; note that, unlike\n<i>ours</i>, there is no <i>theirs</i> merge strategy to\nconfuse this merge option with.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>ignore-space-change,\nignore-all-space, ignore-space-at-eol,\nignore-cr-at-eol</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>Treats\nlines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge. Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also <a href=\"https://man.page/1/git-diff\">git-diff(1)</a> <b>-b</b>, <b>-w</b>,\n<b>--ignore-space-at-eol</b>, and\n<b>--ignore-cr-at-eol</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nIf <i>their</i> version only introduces whitespace changes\nto a line, <i>our</i> version is\nused;</big></big></font></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nIf <i>our</i> version introduces whitespace changes but\n<i>their</i> version includes a substantial change,\n<i>their</i> version is used;</big></big></font></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nOtherwise, the merge proceeds in the usual\nway.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>renormalize</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>This\nruns a virtual check-out and check-in of all three stages of\na file when resolving a three-way merge. This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules. See\n&quot;Merging branches with differing checkin/checkout\nattributes&quot; in <a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> for\ndetails.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>no-renormalize</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>Disables\nthe <b>renormalize</b> option. This overrides the\n<b>merge.renormalize</b> configuration\nvariable.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>find-renames[=&lt;n&gt;]</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>Turn\non rename detection, optionally setting the similarity\nthreshold. This is the default. This overrides the\n<i>merge.renames</i> configuration variable. See also\n<a href=\"https://man.page/1/git-diff\">git-diff(1)</a>\n<b>--find-renames</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>rename-threshold=&lt;n&gt;</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>Deprecated\nsynonym for\n<b>find-renames=&lt;n&gt;</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>subtree[=&lt;path&gt;]</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>This\noption is a more advanced form of <i>subtree</i> strategy,\nwhere the strategy makes a guess on how two trees must be\nshifted to match with each other when merging. Instead, the\nspecified path is prefixed (or stripped from the beginning)\nto make the shape of two trees to\nmatch.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>recursive</big></big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big><big>This\ncan only resolve two heads using a 3-way merge algorithm.\nWhen there is more than one common ancestor that can be used\nfor 3-way merge, it creates a merged tree of the common\nancestors and uses that as the reference tree for the 3-way\nmerge. This has been reported to result in fewer merge\nconflicts without causing mismerges by tests done on actual\nmerge commits taken from Linux 2.6 kernel development\nhistory. Additionally this can detect and handle merges\ninvolving renames. It does not make use of detected copies.\nThis was the default strategy for resolving two heads from\nGit v0.99.9k until v2.33.0.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\n<i>recursive</i> strategy takes the same options as\n<i>ort</i>. However, there are three additional options that\n<i>ort</i> ignores (not documented above) that are\npotentially useful with the <i>recursive</i>\nstrategy:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>patience</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>Deprecated\nsynonym for\n<b>diff-algorithm=patience</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>diff-algorithm=[patience|minimal|histogram|myers]</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>Use\na different diff algorithm while merging, which can help\navoid mismerges that occur due to unimportant matching lines\n(such as braces from distinct functions). See also\n<a href=\"https://man.page/1/git-diff\">git-diff(1)</a> <b>--diff-algorithm</b>. Note that\n<b>ort</b> specifically uses\n<b>diff-algorithm=histogram</b>, while <b>recursive</b>\ndefaults to the <b>diff.algorithm</b> config\nsetting.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>no-renames</big></big></font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\"><big><big>Turn\noff rename detection. This overrides the\n<b>merge.renames</b> configuration variable. See also\n<a href=\"https://man.page/1/git-diff\">git-diff(1)</a>\n<b>--no-renames</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>resolve</big></big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big><big>This\ncan only resolve two heads (i.e. the current branch and\nanother branch you pulled from) using a 3-way merge\nalgorithm. It tries to carefully detect criss-cross merge\nambiguities. It does not handle\nrenames.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>octopus</big></big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big><big>This\nresolves cases with more than two heads, but refuses to do a\ncomplex merge that needs manual resolution. It is primarily\nmeant to be used for bundling topic branch heads together.\nThis is the default merge strategy when pulling or merging\nmore than one branch.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>ours</big></big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big><big>This\nresolves any number of heads, but the resulting tree of the\nmerge is always that of the current branch head, effectively\nignoring all changes from all other branches. It is meant to\nbe used to supersede old development history of side\nbranches. Note that this is different from the -Xours option\nto the <i>recursive</i> merge\nstrategy.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>subtree</big></big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big><big>This\nis a modified <b>ort</b> strategy. When merging trees A and\nB, if B corresponds to a subtree of A, B is first adjusted\nto match the tree structure of A, instead of reading the\ntrees at the same level. This adjustment is also done to the\ncommon ancestor tree.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>With\nthe strategies that use 3-way merge (including the default,\n<i>ort</i>), if a change is made on both branches, but later\nreverted on one of the branches, that change will be present\nin the merged result; some people find this behavior\nconfusing. It occurs because only the heads and the merge\nbase are considered when performing a merge, not the\nindividual commits. The merge algorithm therefore considers\nthe reverted change as no change at all, and substitutes the\nchanged version instead.</big></big></font></p>\n\n<h2>DEFAULT BEHAVIOUR\n<a name=\"DEFAULT BEHAVIOUR\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>Often\npeople use <b>git pull</b> without giving any parameter.\nTraditionally, this has been equivalent to saying <b>git\npull origin</b>. However, when configuration\n<b>branch.&lt;name&gt;.remote</b> is present while on branch\n<b>&lt;name&gt;</b>, that value is used instead of\n<b>origin</b>.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>In\norder to determine what URL to use to fetch from, the value\nof the configuration <b>remote.&lt;origin&gt;.url</b> is\nconsulted and if there is not any such variable, the value\non the <b>URL:</b> line in\n<b>$GIT_DIR/remotes/&lt;origin&gt;</b> is\nused.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>In\norder to determine what remote branches to fetch (and\noptionally store in the remote-tracking branches) when the\ncommand is run without any refspec parameters on the command\nline, values of the configuration variable\n<b>remote.&lt;origin&gt;.fetch</b> are consulted, and if\nthere aren&rsquo;t any,\n<b>$GIT_DIR/remotes/&lt;origin&gt;</b> is consulted and its\n<b>Pull:</b> lines are used. In addition to the refspec\nformats described in the OPTIONS section, you can have a\nglobbing refspec that looks like\nthis:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>refs/heads/*:refs/remotes/origin/*</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>A\nglobbing refspec must have a non-empty RHS (i.e. must store\nwhat were fetched in remote-tracking branches), and its LHS\nand RHS must end with <b>/*</b>. The above specifies that\nall remote branches are tracked using remote-tracking\nbranches in <b>refs/remotes/origin/</b> hierarchy under the\nsame name.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\nrule to determine which remote branch to merge after\nfetching is a bit involved, in order not to break backward\ncompatibility.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>If\nexplicit refspecs were given on the command line of <b>git\npull</b>, they are all merged.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>When\nno refspec was given on the command line, then <b>git\npull</b> uses the refspec from the configuration or\n<b>$GIT_DIR/remotes/&lt;origin&gt;</b>. In such cases, the\nfollowing rules apply:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>1.\nIf <b>branch.&lt;name&gt;.merge</b> configuration for the\ncurrent branch <b>&lt;name&gt;</b> exists, that is the name\nof the branch at the remote site that is\nmerged.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>2.\nIf the refspec is a globbing one, nothing is\nmerged.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>3.\nOtherwise the remote branch of the first refspec is\nmerged.</big></big></font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nUpdate the remote-tracking branches for the repository you\ncloned from, then merge one of them into your current\nbranch:</big></big></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><big><big>$\ngit pull <br>\n$ git pull origin</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>Normally\nthe branch merged in is the HEAD of the remote repository,\nbut the choice is determined by the\nbranch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge\noptions; see <a href=\"https://man.page/1/git-config\">git-config(1)</a> for\ndetails.</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>&bull;\nMerge into the current branch the remote branch\n<b>next</b>:</big></big></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><big><big>$\ngit pull origin next</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>This\nleaves a copy of <b>next</b> temporarily in FETCH_HEAD, and\nupdates the remote-tracking branch <b>origin/next</b>. The\nsame can be done by invoking fetch and\nmerge:</big></big></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><big><big>$\ngit fetch origin <br>\n$ git merge origin/next</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>If\nyou tried a pull which resulted in complex conflicts and\nwould want to start over, you can recover with <i>git\nreset</i>.</big></big></font></p>\n\n<h2>SECURITY\n<a name=\"SECURITY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\nfetch and push protocols are not designed to prevent one\nside from stealing data from the other repository that was\nnot intended to be shared. If you have private data that you\nneed to protect from a malicious peer, your best option is\nto store it in another repository. This applies to both\nclients and servers. In particular, namespaces on a server\nare not effective for read access control; you should only\ngrant read access to a namespace to clients that you would\ntrust with read access to the entire\nrepository.</big></big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>The\nknown attack vectors are as follows:</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>1.\nThe victim sends &quot;have&quot; lines advertising the IDs\nof objects it has that are not explicitly intended to be\nshared but can be used to optimize the transfer if the peer\nalso has them. The attacker chooses an object ID X to steal\nand sends a ref to X, but isn&rsquo;t required to send the\ncontent of X because the victim already has it. Now the\nvictim believes that the attacker has X, and it sends the\ncontent of X back to the attacker later. (This attack is\nmost straightforward for a client to perform on a server, by\ncreating a ref to X in the namespace the client has access\nto and then fetching it. The most likely way for a server to\nperform it on a client is to &quot;merge&quot; X into a\npublic branch and hope that the user does additional work on\nthis branch and pushes it back to the server without\nnoticing the merge.)</big></big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big><big>2.\nAs in #1, the attacker chooses an object ID X to steal. The\nvictim sends an object Y that the attacker already has, and\nthe attacker falsely claims to have X and not Y, so the\nvictim sends Y as a delta against X. The delta reveals\nregions of X that are similar to Y to the\nattacker.</big></big></font></p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>Using\n--recurse-submodules can only fetch new commits in already\nchecked out submodules right now. When e.g. upstream added a\nnew submodule in the just fetched commits of the\nsuperproject the submodule itself cannot be fetched, making\nit impossible to check out that submodule later without\nhaving to do a fetch again. This is expected to be fixed in\na future Git version.</big></big></font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big><a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>,\n<a href=\"https://man.page/1/git-merge\">git-merge(1)</a>,\n<a href=\"https://man.page/1/git-config\">git-config(1)</a></big></big></font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><big>Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</big></big></font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#GIT URLS\">GIT URLS</a>","<a href=\"#REMOTES\">REMOTES</a>","<a href=\"#MERGE STRATEGIES\">MERGE STRATEGIES</a>","<a href=\"#DEFAULT BEHAVIOUR\">DEFAULT BEHAVIOUR</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SECURITY\">SECURITY</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}