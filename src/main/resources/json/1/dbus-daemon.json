{"name":"dbus-daemon","description":"dbus-daemon -\nMessage bus daemon","body":"\n\n<h1 align=\"center\">DBUS-DAEMON</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dbus-daemon -\nMessage bus daemon</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"89%\">\n\n\n<p style=\"margin-top: 1em\"><b>dbus-daemon</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"89%\">\n\n\n<p style=\"margin-top: 1em\"><b>dbus-daemon</b> [--version]\n[--session] [--system] [--config-file=<i>FILE</i>]\n[--print-address&nbsp;[<i>=DESCRIPTOR</i>]]\n[--print-pid&nbsp;[<i>=DESCRIPTOR</i>]] [--fork]\n[--nosyslog] [--syslog] [--syslog-only]</p></td></tr>\n</table>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dbus-daemon</b>\nis the D-Bus message bus daemon. See\n<b><font color=\"#0000FF\">http://www.freedesktop.org/software/dbus/</font></b>\n<font color=\"#000000\">for more information about the big\npicture. D-Bus is first a library that provides one-to-one\ncommunication between any two applications;\n<b>dbus-daemon</b> is an application that uses this library\nto implement a message bus daemon. Multiple programs connect\nto the message bus daemon and can exchange messages with one\nanother.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">There\nare two standard message bus instances: the systemwide\nmessage bus (installed on many systems as the\n&quot;messagebus&quot; init service) and the\nper-user-login-session message bus (started each time a user\nlogs in). <b>dbus-daemon</b> is used for both of these\ninstances, but with a different configuration\nfile.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n--session option is equivalent to\n&quot;--config-file=/usr/share/dbus-1/session.conf&quot; and\nthe --system option is equivalent to\n&quot;--config-file=/usr/share/dbus-1/system.conf&quot;. By\ncreating additional configuration files and using the\n--config-file option, additional special-purpose message bus\ndaemons could be created.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nsystemwide daemon is normally launched by an init script,\nstandardly called simply &quot;messagebus&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nsystemwide daemon is largely used for broadcasting system\nevents, such as changes to the printer queue, or\nadding/removing devices.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nper-session daemon is used for various interprocess\ncommunication among desktop applications (however, it is not\ntied to X or the GUI in any way).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">SIGHUP\nwill cause the D-Bus daemon to PARTIALLY reload its\nconfiguration file and to flush its user/group information\ncaches. Some configuration changes would require kicking all\napps off the bus; so they will only take effect if you\nrestart the daemon. Policy changes should take effect with\nSIGHUP.</font></p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing options are supported:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--config-file=FILE</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Use the\ngiven configuration file.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--fork</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Force the\nmessage bus to fork and become a daemon, even if the\nconfiguration file does not specify that it should. In most\ncontexts the configuration file already gets this right,\nthough. This option is not supported on Windows.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--nofork</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Force the\nmessage bus not to fork and become a daemon, even if the\nconfiguration file specifies that it should. On Windows, the\ndbus-daemon never forks, so this option is allowed but does\nnothing.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--print-address[=DESCRIPTOR]</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Print the\naddress of the message bus to standard output, or to the\ngiven file descriptor. This is used by programs that launch\nthe message bus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--print-pid[=DESCRIPTOR]</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Print the\nprocess ID of the message bus to standard output, or to the\ngiven file descriptor. This is used by programs that launch\nthe message bus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--session</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Use the\nstandard configuration file for the per-login-session\nmessage bus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--system</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Use the\nstandard configuration file for the systemwide message\nbus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--version</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Print the\nversion of the daemon.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--introspect</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Print the\nintrospection information for all D-Bus internal\ninterfaces.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--address[=ADDRESS]</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Set the\naddress to listen on. This option overrides the address\nconfigured in the configuration file via the &lt;listen&gt;\ndirective. See the documentation of that directive for more\ndetails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--systemd-activation</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Enable\nsystemd-style service activation. Only useful in conjunction\nwith the systemd system and session manager on\nLinux.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--nopidfile</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Don't\nwrite a PID file even if one is configured in the\nconfiguration files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--syslog</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Force the\nmessage bus to use the system log for messages, in addition\nto writing to standard error, even if the configuration file\ndoes not specify that it should. On Unix, this uses the\nsyslog; on Windows, this uses\nOutputDebugString().</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--syslog-only</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Force the\nmessage bus to use the system log for messages, and\n<i>not</i> duplicate them to standard error. On Unix, this\nuses the syslog; on Windows, this uses\nOutputDebugString().</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>--nosyslog</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Force the\nmessage bus to use only standard error for messages, even if\nthe configuration file specifies that it should use the\nsystem log.</font></p>\n\n<h2>CONFIGURATION FILE\n<a name=\"CONFIGURATION FILE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nmessage bus daemon has a configuration file that specializes\nit for a particular application. For example, one\nconfiguration file might set up the message bus to be a\nsystemwide message bus, while another might set it up to be\na per-user-login-session bus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nconfiguration file also establishes resource limits,\nsecurity parameters, and so forth.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nconfiguration file is not part of any interoperability\nspecification and its backward compatibility is not\nguaranteed; this document is documentation, not\nspecification.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nstandard systemwide and per-session message bus setups are\nconfigured in the files\n&quot;/usr/share/dbus-1/system.conf&quot; and\n&quot;/usr/share/dbus-1/session.conf&quot;. These files\nnormally &lt;include&gt; a system-local.conf or\nsession-local.conf in /etc/dbus-1; you can put local\noverrides in those files to avoid modifying the primary\nconfiguration files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nconfiguration file is an XML document. It must have the\nfollowing doctype declaration:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;!DOCTYPE\nbusconfig PUBLIC &quot;-//freedesktop//DTD D-Bus Bus\nConfiguration 1.0//EN&quot; <br>\n\n&quot;</font><b><font color=\"#0000FF\">http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd</font></b><font color=\"#000000\">&quot;&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing elements may be present in the configuration\nfile.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;busconfig&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Root\nelement.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;type&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nwell-known type of the message bus. Currently known values\nare &quot;system&quot; and &quot;session&quot;; if other\nvalues are set, they should be either added to the D-Bus\nspecification, or namespaced. The last &lt;type&gt; element\n&quot;wins&quot; (previous values are ignored). This element\nonly controls which message bus specific environment\nvariables are set in activated clients. Most of the policy\nthat distinguishes a session bus from the system bus is\ncontrolled from the other elements in the configuration\nfile.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nthe well-known type of the message bus is\n&quot;session&quot;, then the DBUS_STARTER_BUS_TYPE\nenvironment variable will be set to &quot;session&quot; and\nthe DBUS_SESSION_BUS_ADDRESS environment variable will be\nset to the address of the session bus. Likewise, if the type\nof the message bus is &quot;system&quot;, then the\nDBUS_STARTER_BUS_TYPE environment variable will be set to\n&quot;system&quot; and the DBUS_SYSTEM_BUS_ADDRESS\nenvironment variable will be set to the address of the\nsystem bus (which is normally well known anyway).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\n&lt;type&gt;session&lt;/type&gt;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;include&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Include\na file &lt;include&gt;filename.conf&lt;/include&gt; at this\npoint. If the filename is relative, it is located relative\nto the configuration file doing the including.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;include&gt;\nhas an optional attribute\n&quot;ignore_missing=(yes|no)&quot; which defaults to\n&quot;no&quot; if not provided. This attribute controls\nwhether it's a fatal error for the included file to be\nabsent.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;includedir&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Include\nall files in &lt;includedir&gt;foo.d&lt;/includedir&gt; at\nthis point. Files in the directory are included in undefined\norder. Only files ending in &quot;.conf&quot; are\nincluded.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nis intended to allow extension of the system bus by\nparticular packages. For example, if CUPS wants to be able\nto send out notification of printer queue changes, it could\ninstall a file to /usr/share/dbus-1/system.d or\n/etc/dbus-1/system.d that allowed all apps to receive this\nmessage and allowed the printer daemon user to send\nit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;user&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nuser account the daemon should run as, as either a username\nor a UID. If the daemon cannot change to this UID on\nstartup, it will exit. If this element is not present, the\ndaemon will not change or care about its UID.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nlast &lt;user&gt; entry in the file &quot;wins&quot;, the\nothers are ignored.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nuser is changed after the bus has completed initialization.\nSo sockets etc. will be created before changing user, but no\ndata will be read from clients before changing user. This\nmeans that sockets and PID files can be created in a\nlocation that requires root privileges for\nwriting.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;fork&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\npresent, the bus daemon becomes a real daemon (forks into\nthe background, etc.). This is generally used rather than\nthe --fork command line option.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;keep_umask&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\npresent, the bus daemon keeps its original umask when\nforking. This may be useful to avoid affecting the behavior\nof child processes.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;syslog&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\npresent, the bus daemon will log to syslog. The --syslog,\n--syslog-only and --nosyslog command-line options take\nprecedence over this setting.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;pidfile&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\npresent, the bus daemon will write its pid to the specified\nfile. The --nopidfile command-line option takes precedence\nover this setting.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;allow_anonymous&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\npresent, connections that authenticated using the ANONYMOUS\nmechanism will be authorized to connect. This option has no\npractical effect unless the ANONYMOUS mechanism has also\nbeen enabled using the <i>&lt;auth&gt;</i> element,\ndescribed below.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Using\nthis directive in the configuration of the well-known system\nbus or the well-known session bus will make that bus\ninsecure and should never be done. Similarly, on custom bus\ntypes, using this directive will usually make the custom bus\ninsecure, unless its configuration has been specifically\ndesigned to prevent anonymous users from causing damage or\nescalating privileges.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;listen&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Add\nan address that the bus should listen on. The address is in\nthe standard D-Bus format that contains a transport name\nplus possible parameters/options.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">On\nplatforms other than Windows, unix-based transports (unix,\nsystemd, launchd) are the default for both the well-known\nsystem bus and the well-known session bus, and are strongly\nrecommended.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">On\nWindows, unix-based transports are not available, so\nTCP-based transports must be used. Similar to remote X11,\nthe tcp and nonce-tcp transports have no integrity or\nconfidentiality protection, so they should normally only be\nused across the local loopback interface, for example using\nan address like tcp:host=127.0.0.1 or\nnonce-tcp:host=localhost. In particular, configuring the\nwell-known system bus or the well-known session bus to\nlisten on a non-loopback TCP address is insecure.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Developers\nare sometimes tempted to use remote TCP as a debugging tool.\nHowever, if this functionality is left enabled in finished\nproducts, the result will be dangerously insecure. Instead\nof using remote TCP, developers should</font>\n<b><font color=\"#0000FF\">relay connections via Secure Shell\nor a similar protocol</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Remote\nTCP connections were historically sometimes used to share a\nsingle session bus between login sessions of the same user\non different machines within a trusted local area network,\nin conjunction with unencrypted remote X11, a NFS-shared\nhome directory and NIS (YP) authentication. This is insecure\nagainst an attacker on the same LAN and should be considered\nstrongly deprecated; more specifically, it is insecure in\nthe same ways and for the same reasons as unencrypted remote\nX11 and NFSv2/NFSv3. The D-Bus maintainers recommend using a\nseparate session bus per (user, machine) pair, only\naccessible from within that machine.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\n&lt;listen&gt;unix:path=/tmp/foo&lt;/listen&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\n&lt;listen&gt;tcp:host=localhost,port=1234&lt;/listen&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nthere are multiple &lt;listen&gt; elements, then the bus\nlistens on multiple addresses. The bus will pass its address\nto started services or other interested parties with the\nlast address given in &lt;listen&gt; first. That is, apps\nwill try to connect to the last &lt;listen&gt; address\nfirst.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">tcp\nsockets can accept IPv4 addresses, IPv6 addresses or\nhostnames. If a hostname resolves to multiple addresses, the\nserver will bind to all of them. The family=ipv4 or\nfamily=ipv6 options can be used to force it to bind to a\nsubset of addresses</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\n&lt;listen&gt;tcp:host=localhost,port=0,family=ipv4&lt;/listen&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nspecial case is using a port number of zero (or omitting the\nport), which means to choose an available port selected by\nthe operating system. The port number chosen can be obtained\nwith the --print-address command line parameter and will be\npresent in other cases where the server reports its own\naddress, such as when DBUS_SESSION_BUS_ADDRESS is\nset.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\n&lt;listen&gt;tcp:host=localhost,port=0&lt;/listen&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">tcp/nonce-tcp\naddresses also allow a bind=hostname option, used in a\nlistenable address to configure the interface on which the\nserver will listen: either the hostname is the IP address of\none of the local machine's interfaces (most commonly\n127.0.0.1), a DNS name that resolves to one of those IP\naddresses, '0.0.0.0' to listen on all IPv4 interfaces\nsimultaneously, or '::' to listen on all IPv4 and IPv6\ninterfaces simultaneously (if supported by the OS). If not\nspecified, the default is the same value as\n&quot;host&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\n&lt;listen&gt;tcp:host=localhost,bind=0.0.0.0,port=0&lt;/listen&gt;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;auth&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Lists\npermitted authorization mechanisms. If this element doesn't\nexist, then all known mechanisms are allowed. If there are\nmultiple &lt;auth&gt; elements, all the listed mechanisms\nare allowed. The order in which mechanisms are listed is not\nmeaningful.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">On\nnon-Windows operating systems, allowing only the EXTERNAL\nauthentication mechanism is strongly recommended. This is\nthe default for the well-known system bus and for the\nwell-known session bus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\n&lt;auth&gt;EXTERNAL&lt;/auth&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\n&lt;auth&gt;DBUS_COOKIE_SHA1&lt;/auth&gt;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;servicedir&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Adds\na directory to search for .service files, which tell the\ndbus-daemon how to start a program to provide a particular\nwell-known bus name. See the D-Bus Specification for more\ndetails about the contents of .service files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\na particular service is found in more than one\n&lt;servicedir&gt;, the first directory listed in the\nconfiguration file takes precedence. If two service files\nproviding the same well-known bus name are found in the same\ndirectory, it is arbitrary which one will be chosen (this\ncan only happen if at least one of the service files does\nnot have the recommended name, which is its well-known bus\nname followed by &quot;.service&quot;).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;standard_session_servicedirs/&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;standard_session_servicedirs/&gt;\nrequests a standard set of session service directories. Its\neffect is similar to specifying a series of\n&lt;servicedir/&gt; elements for each of the data\ndirectories, in the order given here. It is not exactly\nequivalent, because there is currently no way to disable\ndirectory monitoring or enforce strict service file naming\nfor a &lt;servicedir/&gt;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">As\nwith &lt;servicedir/&gt; elements, if a particular service\nis found in more than one service directory, the first\ndirectory takes precedence. If two service files providing\nthe same well-known bus name are found in the same\ndirectory, it is arbitrary which one will be chosen (this\ncan only happen if at least one of the service files does\nnot have the recommended name, which is its well-known bus\nname followed by &quot;.service&quot;).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">On\nUnix, the standard session service directories\nare:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>$XDG_RUNTIME_DIR</i>/dbus-1/services, if XDG_RUNTIME_DIR\nis set (see the XDG Base Directory Specification for details\nof XDG_RUNTIME_DIR): this location is suitable for transient\nservices created at runtime by systemd generators (see\n<b>systemd.generator</b>(7)), session managers or other\nsession infrastructure. It is an extension provided by the\nreference implementation of dbus-daemon, and is not\nstandardized in the D-Bus Specification.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Unlike\nthe other standard session service directories, this\ndirectory enforces strict naming for the service files: the\nfilename must be exactly the well-known bus name of the\nservice, followed by &quot;.service&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Also\nunlike the other standard session service directories, this\ndirectory is never monitored with <a href=\"https://man.page/7/inotify\">inotify(7)</a> or\nsimilar APIs. Programs that create service files in this\ndirectory while a dbus-daemon is running are expected to\ncall the dbus-daemon's ReloadConfig() method after they have\nmade changes.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>$XDG_DATA_HOME</i>/dbus-1/services, where XDG_DATA_HOME\ndefaults to ~/.local/share (see the XDG Base Directory\nSpecification): this location is specified by the D-Bus\nSpecification, and is suitable for per-user,\nlocally-installed software.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>directory</i>/dbus-1/services for each directory in\nXDG_DATA_DIRS, where XDG_DATA_DIRS defaults to\n/usr/local/share:/usr/share (see the XDG Base Directory\nSpecification): these locations are specified by the D-Bus\nSpecification. The defaults are suitable for software\ninstalled locally by a system administrator\n(/usr/local/share) or for software installed from operating\nsystem packages (/usr/share). Per-user or system-wide\nconfiguration that sets the XDG_DATA_DIRS environment\nvariable can extend this search path to cover installations\nin other locations, for example\n~/.local/share/flatpak/exports/share/ and\n/var/lib/flatpak/exports/share/ when <a href=\"https://man.page/1/flatpak\">flatpak(1)</a> is\nused.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>${datadir}</i>/dbus-1/services for the <i>${datadir}</i>\nthat was specified when dbus was compiled, typically\n/usr/share: this location is an extension provided by the\nreference dbus-daemon implementation, and is suitable for\nsoftware stacks installed alongside dbus-daemon.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&quot;XDG Base Directory Specification&quot; can be found\nat</font>\n<b><font color=\"#0000FF\">http://freedesktop.org/wiki/Standards/basedir-spec</font></b>\n<font color=\"#000000\">if it hasn't moved, otherwise try your\nfavorite search engine.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">On\nWindows, the standard session service directories\nare:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>%CommonProgramFiles%</i>/dbus-1/services if\n%CommonProgramFiles% is set: this location is suitable for\nsystem-wide installed software packages</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nA share/dbus-1/services directory found in the same\ndirectory hierarchy (prefix) as the dbus-daemon: this\nlocation is suitable for software stacks installed alongside\ndbus-daemon</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&lt;standard_session_servicedirs/&gt; option is only\nrelevant to the per-user-session bus daemon defined in\n/etc/dbus-1/session.conf. Putting it in any other\nconfiguration file would probably be nonsense.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;standard_system_servicedirs/&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;standard_system_servicedirs/&gt;\nspecifies the standard system-wide activation directories\nthat should be searched for service files. As with session\nservices, the first directory listed has highest\nprecedence.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">On\nUnix, the standard session service directories\nare:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n/usr/local/share/dbus-1/system-services: this location is\nspecified by the D-Bus Specification, and is suitable for\nsoftware installed locally by the system\nadministrator</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n/usr/share/dbus-1/system-services: this location is\nspecified by the D-Bus Specification, and is suitable for\nsoftware installed by operating system packages</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>${datadir}</i>/dbus-1/system-services for the\n<i>${datadir}</i> that was specified when dbus was compiled,\ntypically /usr/share: this location is an extension provided\nby the reference dbus-daemon implementation, and is suitable\nfor software stacks installed alongside\ndbus-daemon</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n/lib/dbus-1/system-services: this location is specified by\nthe D-Bus Specification, and was intended for software\ninstalled by operating system packages and used during early\nboot (but it should be considered deprecated, because the\nreference dbus-daemon is not designed to be available during\nearly boot)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">On\nWindows, there is no standard system bus, so there are no\nstandard system bus directories either.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&lt;standard_system_servicedirs/&gt; option is only relevant\nto the per-system bus daemon defined in\n/usr/share/dbus-1/system.conf. Putting it in any other\nconfiguration file would probably be nonsense.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;servicehelper/&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;servicehelper/&gt;\nspecifies the setuid helper that is used to launch system\ndaemons with an alternate user. Typically this should be the\ndbus-daemon-launch-helper executable in located in\nlibexec.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&lt;servicehelper/&gt; option is only relevant to the\nper-system bus daemon defined in\n/usr/share/dbus-1/system.conf. Putting it in any other\nconfiguration file would probably be nonsense.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;limit&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;limit&gt;\nestablishes a resource limit. For example:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;limit\nname=&quot;max_message_size&quot;&gt;64&lt;/limit&gt; <br>\n&lt;limit\nname=&quot;max_completed_connections&quot;&gt;512&lt;/limit&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nname attribute is mandatory. Available limit names\nare:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&quot;max_incoming_bytes&quot;\n: total size in bytes of messages <br>\nincoming from a single connection <br>\n&quot;max_incoming_unix_fds&quot; : total number of unix fds\nof messages <br>\nincoming from a single connection <br>\n&quot;max_outgoing_bytes&quot; : total size in bytes of\nmessages <br>\nqueued up for a single connection <br>\n&quot;max_outgoing_unix_fds&quot; : total number of unix fds\nof messages <br>\nqueued up for a single connection <br>\n&quot;max_message_size&quot; : max size of a single message\nin <br>\nbytes <br>\n&quot;max_message_unix_fds&quot; : max unix fds of a single\nmessage <br>\n&quot;service_start_timeout&quot; : milliseconds\n(thousandths) until <br>\na started service has to connect <br>\n&quot;auth_timeout&quot; : milliseconds (thousandths) a <br>\nconnection is given to <br>\nauthenticate <br>\n&quot;pending_fd_timeout&quot; : milliseconds (thousandths)\na <br>\nfd is given to be transmitted to <br>\ndbus-daemon before disconnecting the <br>\nconnection <br>\n&quot;max_completed_connections&quot; : max number of\nauthenticated connections <br>\n&quot;max_incomplete_connections&quot; : max number of\nunauthenticated <br>\nconnections <br>\n&quot;max_connections_per_user&quot; : max number of\ncompleted connections from <br>\nthe same user <br>\n&quot;max_pending_service_starts&quot; : max number of\nservice launches in <br>\nprogress at the same time <br>\n&quot;max_names_per_connection&quot; : max number of names a\nsingle <br>\nconnection can own <br>\n&quot;max_match_rules_per_connection&quot;: max number of\nmatch rules for a single <br>\nconnection <br>\n&quot;max_replies_per_connection&quot; : max number of\npending method <br>\nreplies per connection <br>\n(number of calls-in-progress) <br>\n&quot;reply_timeout&quot; : milliseconds (thousandths) <br>\nuntil a method call times out</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nmax incoming/outgoing queue sizes allow a new message to be\nqueued if one byte remains below the max. So you can in fact\nexceed the max by max_message_size.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">max_completed_connections\ndivided by max_connections_per_user is the number of users\nthat can work together to denial-of-service all other users\nby using up all connections on the systemwide\nbus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Limits\nare normally only of interest on the systemwide bus, not the\nuser session buses.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;policy&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&lt;policy&gt; element defines a security policy to be\napplied to a particular set of connections to the bus. A\npolicy is made up of &lt;allow&gt; and &lt;deny&gt;\nelements. Policies are normally used with the systemwide\nbus; they are analogous to a firewall in that they allow\nexpected traffic and prevent unexpected traffic.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Currently,\nthe system bus has a default-deny policy for sending method\ncalls and owning bus names, and a default-allow policy for\nreceiving messages, sending signals, and sending a single\nsuccess or error reply for each method call that does not\nhave the NO_REPLY flag. Sending more than the expected\nnumber of replies is not allowed.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\ngeneral, it is best to keep system services as small,\ntargeted programs which run in their own process and provide\na single bus name. Then, all that is needed is an\n&lt;allow&gt; rule for the &quot;own&quot; permission to let\nthe process claim the bus name, and a\n&quot;send_destination&quot; rule to allow traffic from some\nor all uids to your service.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&lt;policy&gt; element has one of four\nattributes:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">context=&quot;(default|mandatory)&quot;\n<br>\nat_console=&quot;(true|false)&quot; <br>\nuser=&quot;username or userid&quot; <br>\ngroup=&quot;group name or gid&quot;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Policies\nare applied to a connection as follows:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">-\nall context=&quot;default&quot; policies are applied <br>\n- all group=&quot;connection's user's group&quot; policies\nare applied <br>\nin undefined order <br>\n- all user=&quot;connection's auth user&quot; policies are\napplied <br>\nin undefined order <br>\n- all at_console=&quot;true&quot; policies are applied <br>\n- all at_console=&quot;false&quot; policies are applied <br>\n- all context=&quot;mandatory&quot; policies are\napplied</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Policies\napplied later will override those applied earlier, when the\npolicies overlap. Multiple policies with the same\nuser/group/context are applied in the order they appear in\nthe config file.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>&lt;deny&gt;</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>&lt;allow&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\n&lt;deny&gt; element appears below a &lt;policy&gt; element\nand prohibits some action. The &lt;allow&gt; element makes\nan exception to previous &lt;deny&gt; statements, and works\njust like &lt;deny&gt; but with the inverse\nmeaning.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\npossible attributes of these elements are:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">send_interface=&quot;interface_name&quot;\n| &quot;*&quot; <br>\nsend_member=&quot;method_or_signal_name&quot; |\n&quot;*&quot; <br>\nsend_error=&quot;error_name&quot; | &quot;*&quot; <br>\nsend_broadcast=&quot;true&quot; | &quot;false&quot; <br>\nsend_destination=&quot;name&quot; | &quot;*&quot; <br>\nsend_type=&quot;method_call&quot; |\n&quot;method_return&quot; | &quot;signal&quot; |\n&quot;error&quot; | &quot;*&quot; <br>\nsend_path=&quot;/path/name&quot; | &quot;*&quot;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">receive_interface=&quot;interface_name&quot;\n| &quot;*&quot; <br>\nreceive_member=&quot;method_or_signal_name&quot; |\n&quot;*&quot; <br>\nreceive_error=&quot;error_name&quot; | &quot;*&quot; <br>\nreceive_sender=&quot;name&quot; | &quot;*&quot; <br>\nreceive_type=&quot;method_call&quot; |\n&quot;method_return&quot; | &quot;signal&quot; |\n&quot;error&quot; | &quot;*&quot; <br>\nreceive_path=&quot;/path/name&quot; |\n&quot;*&quot;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">send_requested_reply=&quot;true&quot;\n| &quot;false&quot; <br>\nreceive_requested_reply=&quot;true&quot; |\n&quot;false&quot;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">eavesdrop=&quot;true&quot;\n| &quot;false&quot;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">own=&quot;name&quot;\n| &quot;*&quot; <br>\nown_prefix=&quot;name&quot; <br>\nuser=&quot;username&quot; | &quot;*&quot; <br>\ngroup=&quot;groupname&quot; | &quot;*&quot;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Examples:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;deny\nsend_destination=&quot;org.freedesktop.Service&quot;\nsend_interface=&quot;org.freedesktop.System&quot;\nsend_member=&quot;Reboot&quot;/&gt; <br>\n&lt;deny\nsend_destination=&quot;org.freedesktop.System&quot;/&gt;\n<br>\n&lt;deny\nreceive_sender=&quot;org.freedesktop.System&quot;/&gt; <br>\n&lt;deny user=&quot;john&quot;/&gt; <br>\n&lt;deny group=&quot;enemies&quot;/&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&lt;deny&gt; element's attributes determine whether the deny\n&quot;matches&quot; a particular action. If it matches, the\naction is denied (unless later rules in the config file\nallow it).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Rules\nwith one or more of the send_* family of attributes are\nchecked in order when a connection attempts to send a\nmessage. The last rule that matches the message determines\nwhether it may be sent. The well-known session bus normally\nallows sending any message. The well-known system bus\nnormally allows sending any signal, selected method calls to\nthe <b>dbus-daemon</b>, and exactly one reply to each\npreviously-sent method call (either success or an error).\nEither of these can be overridden by configuration; on the\nsystem bus, services that will receive method calls must\ninstall configuration that allows them to do so, usually via\nrules of the form &lt;policy\ncontext=&quot;default&quot;&gt;&lt;allow\nsend_destination=&quot;...&quot;/&gt;&lt;policy&gt;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Rules\nwith one or more of the receive_* family of attributes, or\nwith the eavesdrop attribute and no others, are checked for\neach recipient of a message (there might be more than one\nrecipient if the message is a broadcast or a connection is\neavesdropping). The last rule that matches the message\ndetermines whether it may be received. The well-known\nsession bus normally allows receiving any message, including\neavesdropping. The well-known system bus normally allows\nreceiving any message that was not eavesdropped (any unicast\nmessage addressed to the recipient, and any broadcast\nmessage).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\neavesdrop, min_fds and max_fds attributes are modifiers that\ncan be applied to either send_* or receive_* rules, and are\ndocumented below.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">send_destination\nand receive_sender rules mean that messages may not be sent\nto or received from the *owner* of the given name, not that\nthey may not be sent *to that name*. That is, if a\nconnection owns services A, B, C, and sending to A is\ndenied, sending to B or C will not work either. As a special\ncase, send_destination=&quot;*&quot; matches any message\n(whether it has a destination specified or not), and\nreceive_sender=&quot;*&quot; similarly matches any\nmessage.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Rules\nwith send_broadcast=&quot;true&quot; match signal messages\nwith no destination (broadcasts). Rules with\nsend_broadcast=&quot;false&quot; are the inverse: they match\nany unicast destination (unicast signals, together with all\nmethod calls, replies and errors) but do not match messages\nwith no destination (broadcasts). This is not the same as\nsend_destination=&quot;*&quot;, which matches any sent\nmessage, regardless of whether it has a destination or\nnot.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nother send_* and receive_* attributes are purely\ntextual/by-value matches against the given field in the\nmessage header, except that for the attributes where it is\nallowed, * matches any message (whether it has the relevant\nheader field or not). For example,\nsend_interface=&quot;*&quot; matches any sent message, even\nif it does not contain an interface header field. More\ncomplex glob matching such as foo.bar.* is not\nallowed.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&quot;Eavesdropping&quot;\noccurs when an application receives a message that was\nexplicitly addressed to a name the application does not own,\nor is a reply to such a message. Eavesdropping thus only\napplies to messages that are addressed to services and\nreplies to such messages (i.e. it does not apply to\nsignals).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\n&lt;allow&gt;, eavesdrop=&quot;true&quot; indicates that the\nrule matches even when eavesdropping.\neavesdrop=&quot;false&quot; is the default and means that\nthe rule only allows messages to go to their specified\nrecipient. For &lt;deny&gt;, eavesdrop=&quot;true&quot;\nindicates that the rule matches only when eavesdropping.\neavesdrop=&quot;false&quot; is the default for &lt;deny&gt;\nalso, but here it means that the rule applies always, even\nwhen not eavesdropping. The eavesdrop attribute can only be\ncombined with send and receive rules (with send_* and\nreceive_* attributes).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n[send|receive]_requested_reply attribute works similarly to\nthe eavesdrop attribute. It controls whether the\n&lt;deny&gt; or &lt;allow&gt; matches a reply that is\nexpected (corresponds to a previous method call message).\nThis attribute only makes sense for reply messages (errors\nand method returns), and is ignored for other message\ntypes.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\n&lt;allow&gt;,\n[send|receive]_requested_reply=&quot;true&quot; is the\ndefault and indicates that only requested replies are\nallowed by the rule.\n[send|receive]_requested_reply=&quot;false&quot; means that\nthe rule allows any reply even if unexpected.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\n&lt;deny&gt;,\n[send|receive]_requested_reply=&quot;false&quot; is the\ndefault but indicates that the rule matches only when the\nreply was not requested.\n[send|receive]_requested_reply=&quot;true&quot; indicates\nthat the rule applies always, regardless of pending reply\nstate.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nmin_fds and max_fds attributes modify either send_* or\nreceive_* rules. A rule with the min_fds attribute only\nmatches messages if they have at least that many Unix file\ndescriptors attached. Conversely, a rule with the max_fds\nattribute only matches messages if they have no more than\nthat many file descriptors attached. In practice, rules with\nthese attributes will most commonly take the form &lt;allow\nsend_destination=&quot;...&quot; max_fds=&quot;0&quot;/&gt;,\n&lt;deny send_destination=&quot;...&quot;\nmin_fds=&quot;1&quot;/&gt; or &lt;deny\nreceive_sender=&quot;*&quot;\nmin_fds=&quot;1&quot;/&gt;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Rules\nwith the user or group attribute are checked when a new\nconnection to the message bus is established, and control\nwhether the connection can continue. Each of these\nattributes cannot be combined with any other attribute. As a\nspecial case, both user=&quot;*&quot; and\ngroup=&quot;*&quot; match any connection. If there are no\nrules of this form, the default is to allow connections from\nthe same user ID that owns the <b>dbus-daemon</b> process.\nThe well-known session bus normally uses that default\nbehaviour, while the well-known system bus normally allows\nany connection.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Rules\nwith the own or own_prefix attribute are checked when a\nconnection attempts to own a well-known bus names. As a\nspecial case, own=&quot;*&quot; matches any well-known bus\nname. The well-known session bus normally allows any\nconnection to own any name, while the well-known system bus\nnormally does not allow any connection to own any name,\nexcept where allowed by further configuration. System\nservices that will own a name must install configuration\nthat allows them to do so, usually via rules of the form\n&lt;policy user=&quot;some-system-user&quot;&gt;&lt;allow\nown=&quot;...&quot;/&gt;&lt;/policy&gt;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;allow\nown_prefix=&quot;a.b&quot;/&gt; allows you to own the name\n&quot;a.b&quot; or any name whose first dot-separated\nelements are &quot;a.b&quot;: in particular, you can own\n&quot;a.b.c&quot; or &quot;a.b.c.d&quot;, but not\n&quot;a.bc&quot; or &quot;a.c&quot;. This is useful when\nservices like Telepathy and ReserveDevice define a meaning\nfor subtrees of well-known names, such as\norg.freedesktop.Telepathy.ConnectionManager.(anything) and\norg.freedesktop.ReserveDevice1.(anything).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">It\ndoes not make sense to deny a user or group inside a\n&lt;policy&gt; for a user or group; user/group denials can\nonly be inside context=&quot;default&quot; or\ncontext=&quot;mandatory&quot; policies.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nsingle &lt;deny&gt; rule may specify combinations of\nattributes such as send_destination and send_interface and\nsend_type. In this case, the denial applies only if both\nattributes match the message being denied. e.g. &lt;deny\nsend_interface=&quot;foo.bar&quot;\nsend_destination=&quot;foo.blah&quot;/&gt; would deny\nmessages with the given interface AND the given bus name. To\nget an OR effect you specify multiple &lt;deny&gt;\nrules.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan't include both send_ and receive_ attributes on the same\nrule, since &quot;whether the message can be sent&quot; and\n&quot;whether it can be received&quot; are evaluated\nseparately.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Be\ncareful with send_interface/receive_interface, because the\ninterface field in messages is optional. In particular, do\nNOT specify &lt;deny\nsend_interface=&quot;org.foo.Bar&quot;/&gt;! This will cause\nno-interface messages to be blocked for all services, which\nis almost certainly not what you intended. Always use rules\nof the form: &lt;deny send_interface=&quot;org.foo.Bar&quot;\nsend_destination=&quot;org.foo.Service&quot;/&gt;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;selinux&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&lt;selinux&gt; element contains settings related to\nSecurity Enhanced Linux. More details below.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;associate&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">An\n&lt;associate&gt; element appears below an &lt;selinux&gt;\nelement and creates a mapping. Right now only one kind of\nassociation is possible:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;associate\nown=&quot;org.freedesktop.Foobar&quot;\ncontext=&quot;foo_t&quot;/&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nmeans that if a connection asks to own the name\n&quot;org.freedesktop.Foobar&quot; then the source context\nwill be the context of the connection and the target context\nwill be &quot;foo_t&quot; - see the short discussion of\nSELinux below.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note,\nthe context here is the target context when requesting a\nname, NOT the context of the connection owning the\nname.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">There's\ncurrently no way to set a default for owning any name, if we\nadd this syntax it will look like:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;associate\nown=&quot;*&quot; context=&quot;foo_t&quot;/&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou find a reason this is useful, let the developers know.\nRight now the default will be the security context of the\nbus itself.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\ntwo &lt;associate&gt; elements specify the same name, the\nelement appearing later in the configuration file will be\nused.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>&lt;apparmor&gt;</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&lt;apparmor&gt; element is used to configure AppArmor\nmediation on the bus. It can contain one attribute that\nspecifies the mediation mode:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;apparmor\nmode=&quot;(enabled|disabled|required)&quot;/&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ndefault mode is &quot;enabled&quot;. In &quot;enabled&quot;\nmode, AppArmor mediation will be performed if AppArmor\nsupport is available in the kernel. If it is not available,\ndbus-daemon will start but AppArmor mediation will not\noccur. In &quot;disabled&quot; mode, AppArmor mediation is\ndisabled. In &quot;required&quot; mode, AppArmor mediation\nwill be enabled if AppArmor support is available, otherwise\ndbus-daemon will refuse to start.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nAppArmor mediation mode of the bus cannot be changed after\nthe bus starts. Modifying the mode in the configuration file\nand sending a SIGHUP signal to the daemon has no effect on\nthe mediation mode.</font></p>\n\n<h2>SELINUX\n<a name=\"SELINUX\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">See</font>\n<b><font color=\"#0000FF\">http://www.nsa.gov/selinux/</font></b>\n<font color=\"#000000\">for full details on SELinux. Some\nuseful excerpts:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Every\nsubject (process) and object (e.g. file, socket, IPC object,\netc) in the system is assigned a collection of security\nattributes, known as a security context. A security context\ncontains all of the security attributes associated with a\nparticular subject or object that are relevant to the\nsecurity policy.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\norder to better encapsulate security contexts and to provide\ngreater efficiency, the policy enforcement code of SELinux\ntypically handles security identifiers (SIDs) rather than\nsecurity contexts. A SID is an integer that is mapped by the\nsecurity server to a security context at runtime.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\na security decision is required, the policy enforcement code\npasses a pair of SIDs (typically the SID of a subject and\nthe SID of an object, but sometimes a pair of subject SIDs\nor a pair of object SIDs), and an object security class to\nthe security server. The object security class indicates the\nkind of object, e.g. a process, a regular file, a directory,\na TCP socket, etc.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Access\ndecisions specify whether or not a permission is granted for\na given pair of SIDs and class. Each object class has a set\nof associated permissions defined to control operations on\nobjects with that class.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">D-Bus\nperforms SELinux security checks in two places.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">First,\nany time a message is routed from one connection to another\nconnection, the bus daemon will check permissions with the\nsecurity context of the first connection as source, security\ncontext of the second connection as target, object class\n&quot;dbus&quot; and requested permission\n&quot;send_msg&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\na security context is not available for a connection\n(impossible when using UNIX domain sockets), then the target\ncontext used is the context of the bus daemon itself. There\nis currently no way to change this default, because we're\nassuming that only UNIX domain sockets will be used to\nconnect to the systemwide bus. If this changes, we'll\nprobably add a way to set the default connection\ncontext.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Second,\nany time a connection asks to own a name, the bus daemon\nwill check permissions with the security context of the\nconnection as source, the security context specified for the\nname in the config file as target, object class\n&quot;dbus&quot; and requested permission\n&quot;acquire_svc&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nsecurity context for a bus name is specified with the\n&lt;associate&gt; element described earlier in this\ndocument. If a name has no security context associated in\nthe configuration file, the security context of the bus\ndaemon itself will be used.</font></p>\n\n<h2>APPARMOR\n<a name=\"APPARMOR\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nAppArmor confinement context is stored when applications\nconnect to the bus. The confinement context consists of a\nlabel and a confinement mode. When a security decision is\nrequired, the daemon uses the confinement context to query\nthe AppArmor policy to determine if the action should be\nallowed or denied and if the action should be\naudited.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ndaemon performs AppArmor security checks in three\nplaces.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">First,\nany time a message is routed from one connection to another\nconnection, the bus daemon will check permissions with the\nlabel of the first connection as source, label and/or\nconnection name of the second connection as target, along\nwith the bus name, the path name, the interface name, and\nthe member name. Reply messages, such as method_return and\nerror messages, are implicitly allowed if they are in\nresponse to a message that has already been\nallowed.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Second,\nany time a connection asks to own a name, the bus daemon\nwill check permissions with the label of the connection as\nsource, the requested name as target, along with the bus\nname.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Third,\nany time a connection attempts to eavesdrop, the bus daemon\nwill check permissions with the label of the connection as\nthe source, along with the bus name.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">AppArmor\nrules for bus mediation are not stored in the bus\nconfiguration files. They are stored in the application's\nAppArmor profile. Please see <i>apparmor.d(5)</i> for more\ndetails.</font></p>\n\n<h2>DEBUGGING\n<a name=\"DEBUGGING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou're trying to figure out where your messages are going or\nwhy you aren't getting messages, there are several things\nyou can try.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Remember\nthat the system bus is heavily locked down and if you\nhaven't installed a security policy file to allow your\nmessage through, it won't work. For the session bus, this is\nnot a concern.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nsimplest way to figure out what's happening on the bus is to\nrun the <i>dbus-monitor</i> program, which comes with the\nD-Bus package. You can also send test messages with\n<i>dbus-send</i>. These programs have their own man\npages.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou want to know what the daemon itself is doing, you might\nconsider running a separate copy of the daemon to test\nagainst. This will allow you to put the daemon under a\ndebugger, or run it with verbose output, without messing up\nyour real session and system daemons.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">To\nrun a separate test copy of the daemon, for example you\nmight open a terminal and type:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">DBUS_VERBOSE=1\ndbus-daemon --session --print-address</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ntest daemon address will be printed when the daemon starts.\nYou will need to copy-and-paste this address and use it as\nthe value of the DBUS_SESSION_BUS_ADDRESS environment\nvariable when you launch the applications you want to test.\nThis will cause those applications to connect to your test\nbus instead of the DBUS_SESSION_BUS_ADDRESS of your real\nsession bus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">DBUS_VERBOSE=1\nwill have NO EFFECT unless your copy of D-Bus was compiled\nwith verbose mode enabled. This is not recommended in\nproduction builds due to performance impact. You may need to\nrebuild D-Bus if your copy was not built with debugging in\nmind. (DBUS_VERBOSE also affects the D-Bus library and thus\napplications using D-Bus; it may be useful to see verbose\noutput on both the client side and from the\ndaemon.)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou want to get fancy, you can create a custom bus\nconfiguration for your test bus (see the session.conf and\nsystem.conf files that define the two default configurations\nfor example). This would allow you to specify a different\ndirectory for .service files, for example.</font></p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">See</font>\n<b><font color=\"#0000FF\">http://www.freedesktop.org/software/dbus/doc/AUTHORS</font></b></p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Please\nsend bug reports to the D-Bus mailing list or bug tracker,\nsee</font>\n<b><font color=\"#0000FF\">http://www.freedesktop.org/software/dbus/</font></b></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">relay\nconnections via Secure Shell or a similar\nprotocol</font></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://lists.freedesktop.org/archives/dbus/2018-April/017447.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#CONFIGURATION FILE\">CONFIGURATION FILE</a>","<a href=\"#SELINUX\">SELINUX</a>","<a href=\"#APPARMOR\">APPARMOR</a>","<a href=\"#DEBUGGING\">DEBUGGING</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#NOTES\">NOTES</a>"]}