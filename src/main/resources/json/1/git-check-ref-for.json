{"name":"git-check-ref-for","body":"\n\n<h1 align=\"center\">GIT-CHECK-REF-FOR</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-check-ref-format\n- Ensures that a reference name is well formed</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ncheck-ref-format</i> [--normalize] <br>\n[--[no-]allow-onelevel] [--refspec-pattern] <br>\n&lt;refname&gt; <i><br>\ngit check-ref-format</i> --branch\n&lt;branchname-shorthand&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Checks if a\ngiven <i>refname</i> is acceptable, and exits with a\nnon-zero status if it is not.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A reference is\nused in Git to specify branches and tags. A branch head is\nstored in the <b>refs/heads</b> hierarchy, while a tag is\nstored in the <b>refs/tags</b> hierarchy of the ref\nnamespace (typically in <b>$GIT_DIR/refs/heads</b> and\n<b>$GIT_DIR/refs/tags</b> directories or, as entries in file\n<b>$GIT_DIR/packed-refs</b> if refs are packed by <b>git\ngc</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git imposes the\nfollowing rules on how references are named:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. They can\ninclude slash <b>/</b> for hierarchical (directory)\ngrouping, but no slash-separated component can begin with a\ndot <b>.</b> or end with the sequence <b>.lock</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. They must\ncontain at least one <b>/</b>. This enforces the presence of\na category like <b>heads/</b>, <b>tags/</b> etc. but the\nactual names are not restricted. If the\n<b>--allow-onelevel</b> option is used, this rule is\nwaived.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. They cannot\nhave two consecutive dots <b>..</b> anywhere.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">4. They cannot\nhave ASCII control characters (i.e. bytes whose values are\nlower than \\040, or \\177 <b>DEL</b>), space, tilde <b>~</b>,\ncaret <b>^</b>, or colon <b>:</b> anywhere.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">5. They cannot\nhave question-mark <b>?</b>, asterisk <b>*</b>, or open\nbracket <b>[</b> anywhere. See the <b>--refspec-pattern</b>\noption below for an exception to this rule.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">6. They cannot\nbegin or end with a slash <b>/</b> or contain multiple\nconsecutive slashes (see the <b>--normalize</b> option below\nfor an exception to this rule)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">7. They cannot\nend with a dot <b>.</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">8. They cannot\ncontain a sequence <b>@{</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">9. They cannot\nbe the single character <b>@</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">10. They cannot\ncontain a <b>\\</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These rules\nmake it easy for shell script based tools to parse reference\nnames, pathname expansion by the shell when a reference name\nis used unquoted (by mistake), and also avoid ambiguities in\ncertain reference name expressions (see\n<a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a>):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. A double-dot\n<b>..</b> is often used as in <b>ref1..ref2</b>, and in some\ncontexts this notation means <b>^ref1 ref2</b> (i.e. not in\n<b>ref1</b> and in <b>ref2</b>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. A tilde\n<b>~</b> and caret <b>^</b> are used to introduce the\npostfix <i>nth parent</i> and <i>peel onion</i>\noperation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. A colon\n<b>:</b> is used as in <b>srcref:dstref</b> to mean\n&quot;use srcref&rsquo;s value and store it in dstref&quot;\nin fetch and push operations. It may also be used to select\na specific object such as with <i>git cat-file</i>:\n&quot;git cat-file blob v1.3.3:refs.c&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">4.\nat-open-brace <b>@{</b> is used as a notation to access a\nreflog entry.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With the\n<b>--branch</b> option, the command takes a name and checks\nif it can be used as a valid branch name (e.g. when creating\na new branch). But be cautious when using the previous\ncheckout syntax that may refer to a detached HEAD state. The\nrule <b>git check-ref-format --branch $name</b> implements\nmay be stricter than what <b>git check-ref-format\nrefs/heads/$name</b> says (e.g. a dash may appear at the\nbeginning of a ref component, but it is explicitly forbidden\nat the beginning of a branch name). When run with\n<b>--branch</b> option in a repository, the input is first\nexpanded for the &ldquo;previous checkout syntax&rdquo;\n<b>@{-n}</b>. For example, <b>@{-1}</b> is a way to refer\nthe last thing that was checked out using &quot;git\nswitch&quot; or &quot;git checkout&quot; operation. This\noption should be used by porcelains to accept this syntax\nanywhere a branch name is expected, so they can act as if\nyou typed the branch name. As an exception note that, the\n&ldquo;previous checkout operation&rdquo; might result in a\ncommit object name when the N-th last thing checked out was\nnot a branch.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]allow-onelevel</p>\n\n<p style=\"margin-left:17%;\">Controls whether one-level\nrefnames are accepted (i.e., refnames that do not contain\nmultiple <b>/</b>-separated components). The default is\n<b>--no-allow-onelevel</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--refspec-pattern</p>\n\n<p style=\"margin-left:17%;\">Interpret &lt;refname&gt; as a\nreference name pattern for a refspec (as used with remote\nrepositories). If this option is enabled, &lt;refname&gt; is\nallowed to contain a single <b>*</b> in the refspec (e.g.,\n<b>foo/bar*/baz</b> or <b>foo/bar*baz/</b> but not\n<b>foo/bar*/baz*</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--normalize</p>\n\n<p style=\"margin-left:17%;\">Normalize <i>refname</i> by\nremoving any leading slash (<b>/</b>) characters and\ncollapsing runs of adjacent slashes between name components\ninto a single slash. If the normalized refname is valid then\nprint it to standard output and exit with a status of 0,\notherwise exit with a non-zero status. (<b>--print</b> is a\ndeprecated way to spell <b>--normalize</b>.)</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Print\nthe name of the previous thing checked out:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git\ncheck-ref-format --branch @{-1}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nDetermine the reference name to use for a new branch:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ ref=$(git\ncheck-ref-format --normalize\n&quot;refs/heads/$newbranch&quot;)|| <br>\n{ echo &quot;we do not like '$newbranch' as a branch\nname.&quot; &gt;&amp;2 ; exit 1 ; }</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#GIT\">GIT</a>"]}