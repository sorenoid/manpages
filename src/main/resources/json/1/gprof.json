{"name":"gprof","description":"gprof - display call graph profile data","body":"\n\n<h1 align=\"center\">GPROF</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gprof - display\ncall graph profile data</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gprof [\n-[abcDhilLrsTvwxyz] ] [ -[ACeEfFJnNOpPqQRStZ][<i>name</i>] ]\n<br>\n[ -I <i>dirs</i> ] [ -d[<i>num</i>] ] [ -k <i>from/to</i> ]\n<br>\n[ -m <i>min-count</i> ] [ -R <i>map_file</i> ] [ -t\n<i>table-length</i> ] <br>\n[ --[no-]annotated-source[=<i>name</i>] ] <br>\n[ --[no-]exec-counts[=<i>name</i>] ] <br>\n[ --[no-]flat-profile[=<i>name</i>] ] [\n--[no-]graph[=<i>name</i>] ] <br>\n[ --[no-]time=<i>name</i>] [ --all-lines ] [ --brief ] <br>\n[ --debug[=<i>level</i>] ] [ --function-ordering ] <br>\n[ --file-ordering <i>map_file</i> ] [\n--directory-path=<i>dirs</i> ] <br>\n[ --display-unused-functions ] [ --file-format=<i>name</i> ]\n<br>\n[ --file-info ] [ --help ] [ --line ] [ --inline-file-names\n] <br>\n[ --min-count=<i>n</i> ] [ --no-static ] [ --print-path ]\n<br>\n[ --separate-files ] [ --static-call-graph ] [ --sum ] <br>\n[ --table-length=<i>len</i> ] [ --traditional ] [ --version\n] <br>\n[ --width=<i>n</i> ] [ --ignore-non-functions ] <br>\n[ --demangle[= <i><small>STYLE</small></i> ] ] [\n--no-demangle ] <br>\n[--external-symbol-table=name] <br>\n[ <i>image-file</i> ] [ <i>profile-file</i> ... ]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;gprof&quot;\nproduces an execution profile of C, Pascal, or Fortran77\nprograms. The effect of called routines is incorporated in\nthe profile of each caller. The profile data is taken from\nthe call graph profile file (<i>gmon.out</i> default) which\nis created by programs that are compiled with the <b>-pg</b>\noption of &quot;cc&quot;, &quot;pc&quot;, and\n&quot;f77&quot;. The <b>-pg</b> option also links in\nversions of the library routines that are compiled for\nprofiling. &quot;Gprof&quot; reads the given object file\n(the default is &quot;a.out&quot;) and establishes the\nrelation between its symbol table and the call graph profile\nfrom <i>gmon.out</i>. If more than one profile file is\nspecified, the &quot;gprof&quot; output shows the sum of the\nprofile information in the given profile files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you use gcc\n2.95.x or 3.0 to compile your binaries, you may need to add\nthe <b>-fprofile-arcs</b> to the compile command line in\norder for the call graphs to be properly stored in\ngmon.out.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Gprof&quot;\ncalculates the amount of time spent in each routine. Next,\nthese times are propagated along the edges of the call\ngraph. Cycles are discovered, and calls into a cycle are\nmade to share the time of the cycle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Several forms\nof output are available from the analysis.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>flat\nprofile</i> shows how much time your program spent in each\nfunction, and how many times that function was called. If\nyou simply want to know which functions burn most of the\ncycles, it is stated concisely here.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>call\ngraph</i> shows, for each function, which functions called\nit, which other functions it called, and how many times.\nThere is also an estimate of how much time was spent in the\nsubroutines of each function. This can suggest places where\nyou might try to eliminate function calls that use a lot of\ntime.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>annotated source</i> listing is a copy of the\nprogram&rsquo;s source code, labeled with the number of\ntimes each line of the program was executed.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These options\nspecify which of several output formats &quot;gprof&quot;\nshould produce.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many of these\noptions take an optional <i>symspec</i> to specify functions\nto be included or excluded. These options can be specified\nmultiple times, with different symspecs, to include or\nexclude sets of symbols.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Specifying any\nof these options overrides the default (<b>-p -q</b>), which\nprints a flat profile and call graph analysis for all\nfunctions. <br>\n&quot;-A[<i>symspec</i>]&quot; <br>\n&quot;--annotated-source[=<i>symspec</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-A</b> option causes\n&quot;gprof&quot; to print annotated source code. If\n<i>symspec</i> is specified, print output only for matching\nsymbols.</p>\n\n<p style=\"margin-left:11%;\">&quot;-b&quot; <br>\n&quot;--brief&quot;</p>\n\n<p style=\"margin-left:17%;\">If the <b>-b</b> option is\ngiven, &quot;gprof&quot; doesn&rsquo;t print the verbose\nblurbs that try to explain the meaning of all of the fields\nin the tables. This is useful if you intend to print out the\noutput, or are tired of seeing the blurbs.</p>\n\n<p style=\"margin-left:11%;\">&quot;-C[<i>symspec</i>]&quot;\n<br>\n&quot;--exec-counts[=<i>symspec</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-C</b> option causes\n&quot;gprof&quot; to print a tally of functions and the\nnumber of times each was called. If <i>symspec</i> is\nspecified, print tally only for matching symbols.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the profile\ndata file contains basic-block count records, specifying the\n<b>-l</b> option, along with <b>-C</b>, will cause\nbasic-block execution counts to be tallied and\ndisplayed.</p>\n\n<p style=\"margin-left:11%;\">&quot;-i&quot; <br>\n&quot;--file-info&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-i</b> option causes\n&quot;gprof&quot; to display summary information about the\nprofile data file(s) and then exit. The number of histogram,\ncall graph, and basic-block count records is displayed.</p>\n\n<p style=\"margin-left:11%;\">&quot;-I <i>dirs</i>&quot; <br>\n&quot;--directory-path=<i>dirs</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-I</b> option specifies\na list of search directories in which to find source files.\nEnvironment variable <i><small>GPROF_PATH</small></i> can\nalso be used to convey this information. Used mostly for\nannotated source output.</p>\n\n<p style=\"margin-left:11%;\">&quot;-J[<i>symspec</i>]&quot;\n<br>\n&quot;--no-annotated-source[=<i>symspec</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-J</b> option causes\n&quot;gprof&quot; not to print annotated source code. If\n<i>symspec</i> is specified, &quot;gprof&quot; prints\nannotated source, but excludes matching symbols.</p>\n\n<p style=\"margin-left:11%;\">&quot;-L&quot; <br>\n&quot;--print-path&quot;</p>\n\n<p style=\"margin-left:17%;\">Normally, source filenames are\nprinted with the path component suppressed. The <b>-L</b>\noption causes &quot;gprof&quot; to print the full pathname\nof source filenames, which is determined from symbolic\ndebugging information in the image file and is relative to\nthe directory in which the compiler was invoked.</p>\n\n<p style=\"margin-left:11%;\">&quot;-p[<i>symspec</i>]&quot;\n<br>\n&quot;--flat-profile[=<i>symspec</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-p</b> option causes\n&quot;gprof&quot; to print a flat profile. If <i>symspec</i>\nis specified, print flat profile only for matching\nsymbols.</p>\n\n<p style=\"margin-left:11%;\">&quot;-P[<i>symspec</i>]&quot;\n<br>\n&quot;--no-flat-profile[=<i>symspec</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-P</b> option causes\n&quot;gprof&quot; to suppress printing a flat profile. If\n<i>symspec</i> is specified, &quot;gprof&quot; prints a flat\nprofile, but excludes matching symbols.</p>\n\n<p style=\"margin-left:11%;\">&quot;-q[<i>symspec</i>]&quot;\n<br>\n&quot;--graph[=<i>symspec</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-q</b> option causes\n&quot;gprof&quot; to print the call graph analysis. If\n<i>symspec</i> is specified, print call graph only for\nmatching symbols and their children.</p>\n\n<p style=\"margin-left:11%;\">&quot;-Q[<i>symspec</i>]&quot;\n<br>\n&quot;--no-graph[=<i>symspec</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-Q</b> option causes\n&quot;gprof&quot; to suppress printing the call graph. If\n<i>symspec</i> is specified, &quot;gprof&quot; prints a call\ngraph, but excludes matching symbols.</p>\n\n<p style=\"margin-left:11%;\">&quot;-t&quot; <br>\n&quot;--table-length=<i>num</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-t</b> option causes the\n<i>num</i> most active source lines in each source file to\nbe listed when source annotation is enabled. The default is\n10.</p>\n\n<p style=\"margin-left:11%;\">&quot;-y&quot; <br>\n&quot;--separate-files&quot;</p>\n\n<p style=\"margin-left:17%;\">This option affects annotated\nsource output only. Normally, &quot;gprof&quot; prints\nannotated source files to standard-output. If this option is\nspecified, annotated source for a file named\n<i>path/filename</i> is generated in the file\n<i>filename-ann</i>. If the underlying file system would\ntruncate <i>filename-ann</i> so that it overwrites the\noriginal <i>filename</i>, &quot;gprof&quot; generates\nannotated source in the file <i>filename.ann</i> instead (if\nthe original file name has an extension, that extension is\n<i>replaced</i> with <i>.ann</i>).</p>\n\n<p style=\"margin-left:11%;\">&quot;-Z[<i>symspec</i>]&quot;\n<br>\n&quot;--no-exec-counts[=<i>symspec</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-Z</b> option causes\n&quot;gprof&quot; not to print a tally of functions and the\nnumber of times each was called. If <i>symspec</i> is\nspecified, print tally, but exclude matching symbols.</p>\n\n<p style=\"margin-left:11%;\">&quot;-r&quot; <br>\n&quot;--function-ordering&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>--function-ordering</b>\noption causes &quot;gprof&quot; to print a suggested\nfunction ordering for the program based on profiling data.\nThis option suggests an ordering which may improve paging,\ntlb and cache behavior for the program on systems which\nsupport arbitrary ordering of functions in an\nexecutable.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The exact\ndetails of how to force the linker to place functions in a\nparticular order is system dependent and out of the scope of\nthis manual.</p>\n\n<p style=\"margin-left:11%;\">&quot;-R <i>map_file</i>&quot;\n<br>\n&quot;--file-ordering <i>map_file</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>--file-ordering</b>\noption causes &quot;gprof&quot; to print a suggested .o link\nline ordering for the program based on profiling data. This\noption suggests an ordering which may improve paging, tlb\nand cache behavior for the program on systems which do not\nsupport arbitrary ordering of functions in an\nexecutable.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Use of the\n<b>-a</b> argument is highly recommended with this\noption.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>map_file</i> argument is a pathname to a file which\nprovides function name to object file mappings. The format\nof the file is similar to the output of the program\n&quot;nm&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">c-parse.o:00000000\nT yyparse <br>\nc-parse.o:00000004 C yyerrflag <br>\nc-lang.o:00000000 T maybe_objc_method_name <br>\nc-lang.o:00000000 T print_lang_statistics <br>\nc-lang.o:00000000 T recognize_objc_keyword <br>\nc-decl.o:00000000 T print_lang_identifier <br>\nc-decl.o:00000000 T print_lang_type <br>\n...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To create a\n<i>map_file</i> with <small>GNU</small> &quot;nm&quot;, type\na command like &quot;nm --extern-only --defined-only -v\n--print-file-name program-name&quot;.</p>\n\n<p style=\"margin-left:11%;\">&quot;-T&quot; <br>\n&quot;--traditional&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-T</b> option causes\n&quot;gprof&quot; to print its output in\n&quot;traditional&quot; <small>BSD</small> style.</p>\n\n<p style=\"margin-left:11%;\">&quot;-w <i>width</i>&quot;\n<br>\n&quot;--width=<i>width</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">Sets width of output lines to\n<i>width</i>. Currently only used when printing the function\nindex at the bottom of the call graph.</p>\n\n<p style=\"margin-left:11%;\">&quot;-x&quot; <br>\n&quot;--all-lines&quot;</p>\n\n<p style=\"margin-left:17%;\">This option affects annotated\nsource output only. By default, only the lines at the\nbeginning of a basic-block are annotated. If this option is\nspecified, every line in a basic-block is annotated by\nrepeating the annotation for the first line. This behavior\nis similar to &quot;tcov&quot;&rsquo;s <b>-a</b>.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;--demangle[=<i>style</i>]&quot;\n<br>\n&quot;--no-demangle&quot;</p>\n\n<p style=\"margin-left:17%;\">These options control whether C\n<small>++</small> symbol names should be demangled when\nprinting output. The default is to demangle symbols. The\n&quot;--no-demangle&quot; option may be used to turn off\ndemangling. Different compilers have different mangling\nstyles. The optional demangling style argument can be used\nto choose an appropriate demangling style for your\ncompiler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Analysis\nOptions</b> <br>\n&quot;-a&quot; <br>\n&quot;--no-static&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-a</b> option causes\n&quot;gprof&quot; to suppress the printing of statically\ndeclared (private) functions. (These are functions whose\nnames are not listed as global, and which are not visible\noutside the file/function/block where they were defined.)\nTime spent in these functions, calls to/from them, etc.,\nwill all be attributed to the function that was loaded\ndirectly before it in the executable file. This option\naffects both the flat profile and the call graph.</p>\n\n<p style=\"margin-left:11%;\">&quot;-c&quot; <br>\n&quot;--static-call-graph&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-c</b> option causes the\ncall graph of the program to be augmented by a heuristic\nwhich examines the text space of the object file and\nidentifies function calls in the binary machine code. Since\nnormal call graph records are only generated when functions\nare entered, this option identifies children that could have\nbeen called, but never were. Calls to functions that were\nnot compiled with profiling enabled are also identified, but\nonly if symbol table entries are present for them. Calls to\ndynamic library routines are typically <i>not</i> found by\nthis option. Parents or children identified via this\nheuristic are indicated in the call graph with call counts\nof <b>0</b>.</p>\n\n<p style=\"margin-left:11%;\">&quot;-D&quot; <br>\n&quot;--ignore-non-functions&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-D</b> option causes\n&quot;gprof&quot; to ignore symbols which are not known to\nbe functions. This option will give more accurate profile\ndata on systems where it is supported (Solaris and\n<small>HPUX</small> for example).</p>\n\n<p style=\"margin-left:11%;\">&quot;-k\n<i>from</i>/<i>to</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-k</b> option allows you\nto delete from the call graph any arcs from symbols matching\nsymspec <i>from</i> to those matching symspec <i>to</i>.</p>\n\n<p style=\"margin-left:11%;\">&quot;-l&quot; <br>\n&quot;--line&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-l</b> option enables\nline-by-line profiling, which causes histogram hits to be\ncharged to individual source code lines, instead of\nfunctions. This feature only works with programs compiled by\nolder versions of the &quot;gcc&quot; compiler. Newer\nversions of &quot;gcc&quot; are designed to work with the\n&quot;gcov&quot; tool instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the program\nwas compiled with basic-block counting enabled, this option\nwill also identify how many times each line of code was\nexecuted. While line-by-line profiling can help isolate\nwhere in a large function a program is spending its time, it\nalso significantly increases the running time of\n&quot;gprof&quot;, and magnifies statistical\ninaccuracies.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;--inline-file-names&quot;</p>\n\n<p style=\"margin-left:17%;\">This option causes\n&quot;gprof&quot; to print the source file after each symbol\nin both the flat profile and the call graph. The full path\nto the file is printed if used with the <b>-L</b>\noption.</p>\n\n<p style=\"margin-left:11%;\">&quot;-m <i>num</i>&quot; <br>\n&quot;--min-count=<i>num</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">This option affects execution\ncount output only. Symbols that are executed less than\n<i>num</i> times are suppressed.</p>\n\n<p style=\"margin-left:11%;\">&quot;-n<i>symspec</i>&quot;\n<br>\n&quot;--time=<i>symspec</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-n</b> option causes\n&quot;gprof&quot;, in its call graph analysis, to only\npropagate times for symbols matching <i>symspec</i>.</p>\n\n<p style=\"margin-left:11%;\">&quot;-N<i>symspec</i>&quot;\n<br>\n&quot;--no-time=<i>symspec</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-n</b> option causes\n&quot;gprof&quot;, in its call graph analysis, not to\npropagate times for symbols matching <i>symspec</i>.</p>\n\n<p style=\"margin-left:11%;\">&quot;-S<i>filename</i>&quot;\n<br>\n&quot;--external-symbol-table=<i>filename</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-S</b> option causes\n&quot;gprof&quot; to read an external symbol table file,\nsuch as <i>/proc/kallsyms</i>, rather than read the symbol\ntable from the given object file (the default is\n&quot;a.out&quot;). This is useful for profiling kernel\nmodules.</p>\n\n<p style=\"margin-left:11%;\">&quot;-z&quot; <br>\n&quot;--display-unused-functions&quot;</p>\n\n<p style=\"margin-left:17%;\">If you give the <b>-z</b>\noption, &quot;gprof&quot; will mention all functions in the\nflat profile, even those that were never called, and that\nhad no time spent in them. This is useful in conjunction\nwith the <b>-c</b> option for discovering which routines\nwere never called.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Miscellaneous\nOptions</b> <br>\n&quot;-d[<i>num</i>]&quot; <br>\n&quot;--debug[=<i>num</i>]&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-d</b> <i>num</i> option\nspecifies debugging options. If <i>num</i> is not specified,\nenable all debugging.</p>\n\n<p style=\"margin-left:11%;\">&quot;-h&quot; <br>\n&quot;--help&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-h</b> option prints\ncommand line usage.</p>\n\n<p style=\"margin-left:11%;\">&quot;-O<i>name</i>&quot; <br>\n&quot;--file-format=<i>name</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">Selects the format of the\nprofile data files. Recognized formats are <b>auto</b> (the\ndefault), <b>bsd</b>, <b>4.4bsd</b>, <b>magic</b>, and\n<b>prof</b> (not yet supported).</p>\n\n<p style=\"margin-left:11%;\">&quot;-s&quot; <br>\n&quot;--sum&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-s</b> option causes\n&quot;gprof&quot; to summarize the information in the\nprofile data files it read in, and write out a profile data\nfile called <i>gmon.sum</i>, which contains all the\ninformation from the profile data files that\n&quot;gprof&quot; read in. The file <i>gmon.sum</i> may be\none of the specified input files; the effect of this is to\nmerge the data in the other input files into\n<i>gmon.sum</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Eventually you\ncan run &quot;gprof&quot; again without <b>-s</b> to analyze\nthe cumulative data in the file <i>gmon.sum</i>.</p>\n\n<p style=\"margin-left:11%;\">&quot;-v&quot; <br>\n&quot;--version&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-v</b> flag causes\n&quot;gprof&quot; to print the current version number, and\nthen exit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Deprecated\nOptions</b> <br>\nThese options have been replaced with newer versions that\nuse symspecs. <br>\n&quot;-e <i>function_name</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-e</b> <i>function</i>\noption tells &quot;gprof&quot; to not print information\nabout the function <i>function_name</i> (and its\nchildren...) in the call graph. The function will still be\nlisted as a child of any functions that call it, but its\nindex number will be shown as <b>[not printed]</b>. More\nthan one <b>-e</b> option may be given; only one\n<i>function_name</i> may be indicated with each <b>-e</b>\noption.</p>\n\n<p style=\"margin-left:11%;\">&quot;-E\n<i>function_name</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The &quot;-E\n<i>function</i>&quot; option works like the &quot;-e&quot;\noption, but time spent in the function (and children who\nwere not called from anywhere else), will not be used to\ncompute the percentages-of-time for the call graph. More\nthan one <b>-E</b> option may be given; only one\n<i>function_name</i> may be indicated with each <b>-E</b>\noption.</p>\n\n<p style=\"margin-left:11%;\">&quot;-f\n<i>function_name</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-f</b> <i>function</i>\noption causes &quot;gprof&quot; to limit the call graph to\nthe function <i>function_name</i> and its children (and\ntheir children...). More than one <b>-f</b> option may be\ngiven; only one <i>function_name</i> may be indicated with\neach <b>-f</b> option.</p>\n\n<p style=\"margin-left:11%;\">&quot;-F\n<i>function_name</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">The <b>-F</b> <i>function</i>\noption works like the &quot;-f&quot; option, but only time\nspent in the function and its children (and their\nchildren...) will be used to determine total-time and\npercentages-of-time for the call graph. More than one\n<b>-F</b> option may be given; only one <i>function_name</i>\nmay be indicated with each <b>-F</b> option. The <b>-F</b>\noption overrides the <b>-E</b> option.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;<i>a.out</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">the namelist and text\nspace.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;<i>gmon.out</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">dynamic call graph and\nprofile.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;<i>gmon.sum</i>&quot;</p>\n\n<p style=\"margin-left:17%;\">summarized dynamic call graph\nand profile.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The granularity\nof the sampling is shown, but remains statistical at best.\nWe assume that the time for each execution of a function can\nbe expressed by the total time for the function divided by\nthe number of times the function is called. Thus the time\npropagated along the call graph arcs to the function&rsquo;s\nparents is directly proportional to the number of times that\narc is traversed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parents that\nare not themselves profiled will have the time of their\nprofiled children propagated to them, but they will appear\nto be spontaneously invoked in the call graph listing, and\nwill not have their time propagated further. Similarly,\nsignal catchers, even though profiled, will appear to be\nspontaneous (although for more obscure reasons). Any\nprofiled children of signal catchers should have their times\npropagated properly, unless the signal catcher was invoked\nduring the execution of the profiling routine, in which case\nall is lost.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The profiled\nprogram must call &quot;exit&quot;(2) or return normally for\nthe profiling information to be saved in the <i>gmon.out</i>\nfile.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/cc\">cc(1)</a>,\n<a href=\"https://man.page/1/prof\">prof(1)</a>, and the Info entry for <i>gprof</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;An\nExecution Profiler for Modular Programs&quot;, by S. Graham,\nP. Kessler, M. McKusick; Software - Practice and Experience,\nVol. 13, pp. 671-685, 1983.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;gprof: A\nCall Graph Execution Profiler&quot;, by S. Graham, P.\nKessler, M. McKusick; Proceedings of the\n<small>SIGPLAN</small> &rsquo;82 Symposium on Compiler\nConstruction, <small>SIGPLAN</small> Notices, Vol. 17, No 6,\npp. 120-126, June 1982.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n1988-2022 Free Software Foundation, Inc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission is\ngranted to copy, distribute and/or modify this document\nunder the terms of the <small>GNU</small> Free Documentation\nLicense, Version 1.3 or any later version published by the\nFree Software Foundation; with no Invariant Sections, with\nno Front-Cover Texts, and with no Back-Cover Texts. A copy\nof the license is included in the section entitled &quot;\n<small>GNU</small> Free Documentation License&quot;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"]}