{"name":"git-update-ref","body":"\n\n<h1 align=\"center\">GIT-UPDATE-REF</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-update-ref\n- Update the object name stored in a ref safely</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nupdate-ref</i> [-m &lt;reason&gt;] [--no-deref] (-d\n&lt;ref&gt; [&lt;oldvalue&gt;] | [--create-reflog]\n&lt;ref&gt; &lt;newvalue&gt; [&lt;oldvalue&gt;] | --stdin\n[-z])</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Given two\narguments, stores the &lt;newvalue&gt; in the &lt;ref&gt;,\npossibly dereferencing the symbolic refs. E.g. <b>git\nupdate-ref HEAD &lt;newvalue&gt;</b> updates the current\nbranch head to the new object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Given three\narguments, stores the &lt;newvalue&gt; in the &lt;ref&gt;,\npossibly dereferencing the symbolic refs, after verifying\nthat the current value of the &lt;ref&gt; matches\n&lt;oldvalue&gt;. E.g. <b>git update-ref refs/heads/master\n&lt;newvalue&gt; &lt;oldvalue&gt;</b> updates the master\nbranch head to &lt;newvalue&gt; only if its current value is\n&lt;oldvalue&gt;. You can specify 40 &quot;0&quot; or an\nempty string as &lt;oldvalue&gt; to make sure that the ref\nyou are creating does not exist.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It also allows\na &quot;ref&quot; file to be a symbolic pointer to another\nref file by starting with the four-byte header sequence of\n&quot;ref:&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">More\nimportantly, it allows the update of a ref file to follow\nthese symbolic pointers, whether they are symlinks or these\n&quot;regular file symbolic refs&quot;. It follows\n<b>real</b> symlinks only if they start with\n&quot;refs/&quot;: otherwise it will just try to read them\nand update them as a regular file (i.e. it will allow the\nfilesystem to follow them, but will overwrite such a symlink\nto somewhere else with a regular filename).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If --no-deref\nis given, &lt;ref&gt; itself is overwritten, rather than the\nresult of following the symbolic pointers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general,\nusing</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git update-ref\nHEAD &quot;$head&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">should be a\n<i>lot</i> safer than doing</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">echo\n&quot;$head&quot; &gt; &quot;$GIT_DIR/HEAD&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">both from a\nsymlink following standpoint <b>and</b> an error checking\nstandpoint. The &quot;refs/&quot; rule for symlinks means\nthat symlinks that point to &quot;outside&quot; the tree are\nsafe: they&rsquo;ll be followed for reading but not for\nwriting (so we&rsquo;ll never write through a ref symlink to\nsome other tree, if you have copied a whole archive by\ncreating a symlink tree).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With <b>-d</b>\nflag, it deletes the named &lt;ref&gt; after verifying it\nstill contains &lt;oldvalue&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With\n<b>--stdin</b>, update-ref reads instructions from standard\ninput and performs all modifications together. Specify\ncommands of the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">update SP\n&lt;ref&gt; SP &lt;newvalue&gt; [SP &lt;oldvalue&gt;] LF\n<br>\ncreate SP &lt;ref&gt; SP &lt;newvalue&gt; LF <br>\ndelete SP &lt;ref&gt; [SP &lt;oldvalue&gt;] LF <br>\nverify SP &lt;ref&gt; [SP &lt;oldvalue&gt;] LF <br>\noption SP &lt;opt&gt; LF <br>\nstart LF <br>\nprepare LF <br>\ncommit LF <br>\nabort LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With\n<b>--create-reflog</b>, update-ref will create a reflog for\neach ref even if one would not ordinarily be created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Quote fields\ncontaining whitespace as if they were strings in C source\ncode; i.e., surrounded by double-quotes and with backslash\nescapes. Use 40 &quot;0&quot; characters or the empty string\nto specify a zero value. To specify a missing value, omit\nthe value and its preceding SP entirely.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alternatively,\nuse <b>-z</b> to specify in NUL-terminated format, without\nquoting:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">update SP\n&lt;ref&gt; NUL &lt;newvalue&gt; NUL [&lt;oldvalue&gt;] NUL\n<br>\ncreate SP &lt;ref&gt; NUL &lt;newvalue&gt; NUL <br>\ndelete SP &lt;ref&gt; NUL [&lt;oldvalue&gt;] NUL <br>\nverify SP &lt;ref&gt; NUL [&lt;oldvalue&gt;] NUL <br>\noption SP &lt;opt&gt; NUL <br>\nstart NUL <br>\nprepare NUL <br>\ncommit NUL <br>\nabort NUL</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this format,\nuse 40 &quot;0&quot; to specify a zero value, and use the\nempty string to specify a missing value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In either\nformat, values can be specified in any form that Git\nrecognizes as an object name. Commands in any other format\nor a repeated &lt;ref&gt; produce an error. Command meanings\nare:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">update</p>\n\n<p style=\"margin-left:17%;\">Set &lt;ref&gt; to\n&lt;newvalue&gt; after verifying &lt;oldvalue&gt;, if given.\nSpecify a zero &lt;newvalue&gt; to ensure the ref does not\nexist after the update and/or a zero &lt;oldvalue&gt; to\nmake sure the ref does not exist before the update.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">create</p>\n\n<p style=\"margin-left:17%;\">Create &lt;ref&gt; with\n&lt;newvalue&gt; after verifying it does not exist. The\ngiven &lt;newvalue&gt; may not be zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">delete</p>\n\n<p style=\"margin-left:17%;\">Delete &lt;ref&gt; after\nverifying it exists with &lt;oldvalue&gt;, if given. If\ngiven, &lt;oldvalue&gt; may not be zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">verify</p>\n\n<p style=\"margin-left:17%;\">Verify &lt;ref&gt; against\n&lt;oldvalue&gt; but do not change it. If &lt;oldvalue&gt;\nis zero or missing, the ref must not exist.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">option</p>\n\n<p style=\"margin-left:17%;\">Modify behavior of the next\ncommand naming a &lt;ref&gt;. The only valid option is\n<b>no-deref</b> to avoid dereferencing a symbolic ref.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">start</p>\n\n<p style=\"margin-left:17%;\">Start a transaction. In\ncontrast to a non-transactional session, a transaction will\nautomatically abort if the session ends without an explicit\ncommit. This command may create a new empty transaction when\nthe current one has been committed or aborted already.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prepare</p>\n\n<p style=\"margin-left:17%;\">Prepare to commit the\ntransaction. This will create lock files for all queued\nreference updates. If one reference could not be locked, the\ntransaction will be aborted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">commit</p>\n\n<p style=\"margin-left:17%;\">Commit all reference updates\nqueued for the transaction, ending the transaction.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">abort</p>\n\n<p style=\"margin-left:17%;\">Abort the transaction,\nreleasing all locks if the transaction is in prepared\nstate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If all\n&lt;ref&gt;s can be locked with matching &lt;oldvalue&gt;s\nsimultaneously, all modifications are performed. Otherwise,\nno modifications are performed. Note that while each\nindividual &lt;ref&gt; is updated or deleted atomically, a\nconcurrent reader may still see a subset of the\nmodifications.</p>\n\n<h2>LOGGING UPDATES\n<a name=\"LOGGING UPDATES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If config\nparameter &quot;core.logAllRefUpdates&quot; is true and the\nref is one under &quot;refs/heads/&quot;,\n&quot;refs/remotes/&quot;, &quot;refs/notes/&quot;, or a\npseudoref like HEAD or ORIG_HEAD; or the file\n&quot;$GIT_DIR/logs/&lt;ref&gt;&quot; exists then <b>git\nupdate-ref</b> will append a line to the log file\n&quot;$GIT_DIR/logs/&lt;ref&gt;&quot; (dereferencing all\nsymbolic refs before creating the log name) describing the\nchange in ref value. Log lines are formatted as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">oldsha1 SP\nnewsha1 SP committer LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Where\n&quot;oldsha1&quot; is the 40 character hexadecimal value\npreviously stored in &lt;ref&gt;, &quot;newsha1&quot; is the\n40 character hexadecimal value of &lt;newvalue&gt; and\n&quot;committer&quot; is the committer&rsquo;s name, email\naddress and date in the standard Git committer ident\nformat.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Optionally with\n-m:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">oldsha1 SP\nnewsha1 SP committer TAB message LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Where all\nfields are as described above and &quot;message&quot; is the\nvalue supplied to the -m option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An update will\nfail (without changing &lt;ref&gt;) if the current user is\nunable to create a new log file, append to the existing log\nfile or does not have committer information available.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#LOGGING UPDATES\">LOGGING UPDATES</a>","<a href=\"#GIT\">GIT</a>"]}