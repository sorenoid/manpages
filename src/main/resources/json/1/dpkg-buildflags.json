{"name":"dpkg-buildflags","description":"dpkg-buildflags\n- returns build flags to use during package build","body":"\n\n<h1 align=\"center\">dpkg-buildflags</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dpkg-buildflags\n- returns build flags to use during package build</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dpkg-buildflags</b>\n[<i>option</i>...] [<i>command</i>]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dpkg-buildflags</b>\nis a tool to retrieve compilation flags to use during build\nof Debian packages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\nflags are defined by the vendor but they can be\nextended/overridden in several ways:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>system-wide with <b>/etc/dpkg/buildflags.conf</b>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>for the current user with\n<b>$XDG_CONFIG_HOME/dpkg/buildflags.conf</b> where\n<b>$XDG_CONFIG_HOME</b> defaults to\n<b>$HOME/.config</b>;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>temporarily by the user with environment variables (see\nsection <b><small>ENVIRONMENT</small></b> );</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>4.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>dynamically by the package maintainer with environment\nvariables set via <b>debian/rules</b> (see section\n<b><small>ENVIRONMENT</small></b> ).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nconfiguration files can contain four types of directives:\n<b><small><br>\nSET</small></b> <i>flag value</i></p>\n\n<p style=\"margin-left:17%;\">Override the flag named\n<i>flag</i> to have the value <i>value</i>.</p>\n\n<p style=\"margin-left:11%;\"><b><small>STRIP</small></b>\n<i>flag value</i></p>\n\n<p style=\"margin-left:17%;\">Strip from the flag named\n<i>flag</i> all the build flags listed in <i>value</i>.</p>\n\n<p style=\"margin-left:11%;\"><b><small>APPEND</small></b>\n<i>flag value</i></p>\n\n<p style=\"margin-left:17%;\">Extend the flag named\n<i>flag</i> by appending the options given in <i>value</i>.\nA space is prepended to the appended value if the\nflag&rsquo;s current value is non-empty.</p>\n\n<p style=\"margin-left:11%;\"><b><small>PREPEND</small></b>\n<i>flag value</i></p>\n\n<p style=\"margin-left:17%;\">Extend the flag named\n<i>flag</i> by prepending the options given in <i>value</i>.\nA space is appended to the prepended value if the\nflag&rsquo;s current value is non-empty.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nconfiguration files can contain comments on lines starting\nwith a hash (#). Empty lines are also ignored.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--dump</b></p>\n\n<p style=\"margin-left:17%;\">Print to standard output all\ncompilation flags and their values. It prints one flag per\nline separated from its value by an equal sign\n(&ldquo;<i>flag</i>=<i>value</i>&rdquo;). This is the\ndefault action.</p>\n\n<p style=\"margin-left:11%;\"><b>--list</b></p>\n\n<p style=\"margin-left:17%;\">Print the list of flags\nsupported by the current vendor (one per line). See the\n<b><small>SUPPORTED FLAGS</small></b> section for more\ninformation about them.</p>\n\n<p style=\"margin-left:11%;\"><b>--status</b></p>\n\n<p style=\"margin-left:17%;\">Display any information that\ncan be useful to explain the behaviour of\n<b>dpkg-buildflags</b> (since dpkg 1.16.5): relevant\nenvironment variables, current vendor, state of all feature\nflags. Also print the resulting compiler flags with their\norigin.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is\nintended to be run from <b>debian/rules</b>, so that the\nbuild log keeps a clear trace of the build flags used. This\ncan be useful to diagnose problems related to them.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--export=</b><i>format</i></p>\n\n<p style=\"margin-left:17%;\">Print to standard output\ncommands that can be used to export all the compilation\nflags for some particular tool. If the <i>format</i> value\nis not given, <b>sh</b> is assumed. Only compilation flags\nstarting with an upper case character are included, others\nare assumed to not be suitable for the environment.\nSupported formats:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><b>sh</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Shell commands to set and export all the compilation\nflags in the environment. The flag values are quoted so the\noutput is ready for evaluation by a shell.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><b>cmdline</b></p>\n\n<p style=\"margin-left:23%;\">Arguments to pass to a build\nprogram&rsquo;s command line to use all the compilation\nflags (since dpkg 1.17.0). The flag values are quoted in\nshell syntax.</p>\n\n<p style=\"margin-left:17%;\"><b>configure</b></p>\n\n<p style=\"margin-left:23%;\">This is a legacy alias for\n<b>cmdline</b>.</p>\n\n<p style=\"margin-left:17%;\"><b>make</b></p>\n\n<p style=\"margin-left:23%;\">Make directives to set and\nexport all the compilation flags in the environment. Output\ncan be written to a Makefile fragment and evaluated using an\n<b>include</b> directive.</p>\n\n<p style=\"margin-left:11%;\"><b>--get</b> <i>flag</i></p>\n\n<p style=\"margin-left:17%;\">Print the value of the flag on\nstandard output. Exits with 0 if the flag is known otherwise\nexits with 1.</p>\n\n<p style=\"margin-left:11%;\"><b>--origin</b> <i>flag</i></p>\n\n<p style=\"margin-left:17%;\">Print the origin of the value\nthat is returned by <b>--get</b>. Exits with 0 if the flag\nis known otherwise exits with 1. The origin can be one of\nthe following values: <b><br>\nvendor</b></p>\n\n<p style=\"margin-left:23%;\">the original flag set by the\nvendor is returned;</p>\n\n<p style=\"margin-left:17%;\"><b>system</b></p>\n\n<p style=\"margin-left:23%;\">the flag is set/modified by a\nsystem-wide configuration;</p>\n\n<p style=\"margin-left:17%;\"><b>user</b></p>\n\n<p style=\"margin-left:23%;\">the flag is set/modified by a\nuser-specific configuration;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>env</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>the flag is set/modified by an environment-specific\nconfiguration.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--query</b></p>\n\n<p style=\"margin-left:17%;\">Print any information that can\nbe useful to explain the behaviour of the program: current\nvendor, relevant environment variables, feature areas, state\nof all feature flags, and the compiler flags with their\norigin (since dpkg 1.19.0).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Vendor: Debian\n<br>\nEnvironment: <br>\nDEB_CFLAGS_SET=-O0 -Wall <br>\nArea: qa <br>\nFeatures: <br>\nbug=no <br>\ncanary=no <br>\nArea: reproducible <br>\nFeatures: <br>\ntimeless=no <br>\nFlag: CFLAGS <br>\nValue: -O0 -Wall <br>\nOrigin: env <br>\nFlag: CPPFLAGS <br>\nValue: -D_FORTIFY_SOURCE=2 <br>\nOrigin: vendor</p>\n\n<p style=\"margin-left:11%;\"><b>--query-features</b>\n<i>area</i></p>\n\n<p style=\"margin-left:17%;\">Print the features enabled for\na given area (since dpkg 1.16.2). The only currently\nrecognized areas on Debian and derivatives are\n<b>future</b>, <b>qa</b>, <b>reproducible</b>,\n<b>sanitize</b> and <b>hardening</b>, see the\n<b><small>FEATURE AREAS</small></b> section for more\ndetails. Exits with 0 if the area is known otherwise exits\nwith 1.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The output is\nin <small>RFC822</small> format, with one section per\nfeature. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Feature: pie\n<br>\nEnabled: yes <br>\nFeature: stackprotector <br>\nEnabled: yes</p>\n\n<p style=\"margin-left:11%;\"><b>--help</b></p>\n\n<p style=\"margin-left:17%;\">Show the usage message and\nexit.</p>\n\n<p style=\"margin-left:11%;\"><b>--version</b></p>\n\n<p style=\"margin-left:17%;\">Show the version and exit.</p>\n\n<h2>SUPPORTED FLAGS\n<a name=\"SUPPORTED FLAGS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>ASFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the assembler.\nDefault value: empty. Since dpkg 1.21.0.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>CFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the C compiler. The\ndefault value set by the vendor includes <b>-g</b> and the\ndefault optimization level (<b>-O2</b> usually, or\n<b>-O0</b> if the <b><small>DEB_BUILD_OPTIONS</small></b>\nenvironment variable defines <i>noopt</i>).</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>CPPFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the C preprocessor.\nDefault value: empty.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>CXXFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the C\n<small>++</small> compiler. Same as\n<b><small>CFLAGS</small></b> .</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>OBJCFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the Objective C\ncompiler. Same as <b><small>CFLAGS</small></b> .</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>OBJCXXFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the Objective C\n<small>++</small> compiler. Same as\n<b><small>CXXFLAGS</small></b> .</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>GCJFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the\n<small>GNU</small> Java compiler (gcj). A subset of\n<b><small>CFLAGS</small></b> .</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>DFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the D compiler (ldc\nor gdc). Since dpkg 1.20.6.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>FFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the Fortran 77\ncompiler. A subset of <b><small>CFLAGS</small></b> .</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>FCFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options for the Fortran 9x\ncompiler. Same as <b><small>FFLAGS</small></b> .</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>LDFLAGS</small></b></p>\n\n<p style=\"margin-left:17%;\">Options passed to the compiler\nwhen linking executables or shared objects (if the linker is\ncalled directly, then <b>-Wl</b> and <b>,</b> have to be\nstripped from these options). Default value: empty.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">New flags might\nbe added in the future if the need arises (for example to\nsupport other languages).</p>\n\n<h2>FEATURE AREAS\n<a name=\"FEATURE AREAS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each area\nfeature can be enabled and disabled in the\n<b><small>DEB_BUILD_OPTIONS</small></b> and\n<b><small>DEB_BUILD_MAINT_OPTIONS</small></b> environment\nvariable&rsquo;s area value with the &rsquo;<b>+</b>&rsquo;\nand &rsquo;<b>-</b>&rsquo; modifier. For example, to enable\nthe <b>hardening</b> &ldquo;pie&rdquo; feature and disable\nthe &ldquo;fortify&rdquo; feature you can do this in\n<b>debian/rules</b>:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">export\nDEB_BUILD_MAINT_OPTIONS=hardening=+pie,-fortify</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The special\nfeature <b>all</b> (valid in any area) can be used to enable\nor disable all area features at the same time. Thus\ndisabling everything in the <b>hardening</b> area and\nenabling only &ldquo;format&rdquo; and &ldquo;fortify&rdquo;\ncan be achieved with:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">export\nDEB_BUILD_MAINT_OPTIONS=hardening=-all,+format,+fortify</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>future</b>\n<br>\nSeveral compile-time options (detailed below) can be used to\nenable features that should be enabled by default, but\ncannot due to backwards compatibility reasons.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>lfs</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>This setting (disabled by default) enables Large File\nSupport on 32-bit architectures where their\n<small>ABI</small> does not include <small>LFS</small> by\ndefault, by adding <b>-D_LARGEFILE_SOURCE\n-D_FILE_OFFSET_BITS=64</b> to <b><small>CPPFLAGS</small></b>\n.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>qa</b> <br>\nSeveral compile-time options (detailed below) can be used to\nhelp detect problems in the source code or build system.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><b>bug</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">This setting (disabled by\ndefault) adds any warning option that reliably detects\nproblematic source code. The warnings are fatal. The only\ncurrently supported flags are <b><small>CFLAGS</small></b>\nand <b><small>CXXFLAGS</small></b> with flags set to\n<b>-Werror=array-bounds</b>, <b>-Werror=clobbered</b>,\n<b>-Werror=implicit-function-declaration</b> and\n<b>-Werror=volatile-register-var</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>canary</b></p>\n\n<p style=\"margin-left:17%;\">This setting (disabled by\ndefault) adds dummy canary options to the build flags, so\nthat the build logs can be checked for how the build flags\npropagate and to allow finding any omission of normal build\nflag settings. The only currently supported flags are\n<b><small>CPPFLAGS</small></b> ,\n<b><small>CFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> and\n<b><small>OBJCXXFLAGS</small></b> with flags set to\n<b>-D__DEB_CANARY_</b><i>flag</i>_<i>random-id</i><b>__</b>,\nand <b><small>LDFLAGS</small></b> set to\n<b>-Wl,-z,deb-canary-</b><i>random-id</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>optimize</b>\n<br>\nSeveral compile-time options (detailed below) can be used to\nhelp optimize a resulting binary (since dpkg 1.21.0).\n<b>Note</b>: enabling <b>all</b> these options can result in\nunreproducible binary artifacts.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>lto</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>This setting (since dpkg 1.21.0; disabled by default)\nenables Link Time Optimization by adding <b>-flto=auto\n-ffat-lto-objects</b> to <b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>OBJCXXFLAGS</small></b> ,\n<b><small>GCJFLAGS</small></b> ,\n<b><small>FFLAGS</small></b> , <b><small>FCFLAGS</small></b>\nand <b><small>LDFLAGS</small></b> .</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>optimize</b>\n<br>\nSeveral compile-time options (detailed below) can be used to\nhelp optimize a resulting binary (since dpkg 1.21.0).\n<b>Note</b>: enabling <b>all</b> these options can result in\nunreproducible binary artifacts.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\">lto</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">This setting (since dpkg 1.21.0;\ndisabled by default) enables Link Time Optimization by\nadding <b>-flto=auto -ffat-lto-objects</b> to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>OBJCXXFLAGS</small></b> ,\n<b><small>GCJFLAGS</small></b> ,\n<b><small>FFLAGS</small></b> and\n<b><small>FCFLAGS</small></b> .</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sanitize</b>\n<br>\nSeveral compile-time options (detailed below) can be used to\nhelp sanitize a resulting binary against memory corruptions,\nmemory leaks, use after free, threading data races and\nundefined behavior bugs. <b>Note</b>: these options should\n<b>not</b> be used for production builds as they can reduce\nreliability for conformant code, reduce security or even\nfunctionality. <b><br>\naddress</b></p>\n\n<p style=\"margin-left:17%;\">This setting (disabled by\ndefault) adds <b>-fsanitize=address</b> to\n<b><small>LDFLAGS</small></b> and <b>-fsanitize=address\n-fno-omit-frame-pointer</b> to <b><small>CFLAGS</small></b>\nand <b><small>CXXFLAGS</small></b> .</p>\n\n<p style=\"margin-left:11%;\"><b>thread</b></p>\n\n<p style=\"margin-left:17%;\">This setting (disabled by\ndefault) adds <b>-fsanitize=thread</b> to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> and\n<b><small>LDFLAGS</small></b> .</p>\n\n<p style=\"margin-left:11%;\"><b>leak</b></p>\n\n<p style=\"margin-left:17%;\">This setting (disabled by\ndefault) adds <b>-fsanitize=leak</b> to\n<b><small>LDFLAGS</small></b> . It gets automatically\ndisabled if either the <b>address</b> or the <b>thread</b>\nfeatures are enabled, as they imply it.</p>\n\n<p style=\"margin-left:11%;\"><b>undefined</b></p>\n\n<p style=\"margin-left:17%;\">This setting (disabled by\ndefault) adds <b>-fsanitize=undefined</b> to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> and\n<b><small>LDFLAGS</small></b> .</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>hardening</b>\n<br>\nSeveral compile-time options (detailed below) can be used to\nhelp harden a resulting binary against memory corruption\nattacks, or provide additional warning messages during\ncompilation. Except as noted below, these are enabled by\ndefault for architectures that support them. <b><br>\nformat</b></p>\n\n<p style=\"margin-left:17%;\">This setting (enabled by\ndefault) adds <b>-Wformat -Werror=format-security</b> to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> and\n<b><small>OBJCXXFLAGS</small></b> . This will warn about\nimproper format string uses, and will fail when format\nfunctions are used in a way that represent possible security\nproblems. At present, this warns about calls to\n<b>printf</b> and <b>scanf</b> functions where the format\nstring is not a string literal and there are no format\narguments, as in <b>printf(foo);</b> instead of\n<b>printf(&quot;%s&quot;, foo);</b> This may be a security\nhole if the format string came from untrusted input and\ncontains &rsquo;%n&rsquo;.</p>\n\n<p style=\"margin-left:11%;\"><b>fortify</b></p>\n\n<p style=\"margin-left:17%;\">This setting (enabled by\ndefault) adds <b>-D_FORTIFY_SOURCE=2</b> to\n<b><small>CPPFLAGS</small></b> . During code generation the\ncompiler knows a great deal of information about buffer\nsizes (where possible), and attempts to replace insecure\nunlimited length buffer function calls with length-limited\nones. This is especially useful for old, crufty code.\nAdditionally, format strings in writable memory that contain\n&rsquo;%n&rsquo; are blocked. If an application depends on\nsuch a format string, it will need to be worked around.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that for\nthis option to have any effect, the source must also be\ncompiled with <b>-O1</b> or higher. If the environment\nvariable <b><small>DEB_BUILD_OPTIONS</small></b> contains\n<i>noopt</i>, then <b>fortify</b> support will be disabled,\ndue to new warnings being issued by glibc 2.16 and\nlater.</p>\n\n<p style=\"margin-left:11%;\"><b>stackprotector</b></p>\n\n<p style=\"margin-left:17%;\">This setting (enabled by\ndefault if stackprotectorstrong is not in use) adds\n<b>-fstack-protector --param=ssp-buffer-size=4</b> to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>OBJCXXFLAGS</small></b> ,\n<b><small>GCJFLAGS</small></b> ,\n<b><small>FFLAGS</small></b> and\n<b><small>FCFLAGS</small></b> . This adds safety checks\nagainst stack overwrites. This renders many potential code\ninjection attacks into aborting situations. In the best case\nthis turns code injection vulnerabilities into denial of\nservice or into non-issues (depending on the\napplication).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This feature\nrequires linking against glibc (or another provider of\n<b>__stack_chk_fail</b>), so needs to be disabled when\nbuilding with <b>-nostdlib</b> or <b>-ffreestanding</b> or\nsimilar.</p>\n\n\n<p style=\"margin-left:11%;\"><b>stackprotectorstrong</b></p>\n\n<p style=\"margin-left:17%;\">This setting (enabled by\ndefault) adds <b>-fstack-protector-strong</b> to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>OBJCXXFLAGS</small></b> ,\n<b><small>GCJFLAGS</small></b> ,\n<b><small>FFLAGS</small></b> and\n<b><small>FCFLAGS</small></b> . This is a stronger variant\nof <b>stackprotector</b>, but without significant\nperformance penalties.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Disabling\n<b>stackprotector</b> will also disable this setting.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This feature\nhas the same requirements as <b>stackprotector</b>, and in\naddition also requires gcc 4.9 and later.</p>\n\n<p style=\"margin-left:11%;\"><b>relro</b></p>\n\n<p style=\"margin-left:17%;\">This setting (enabled by\ndefault) adds <b>-Wl,-z,relro</b> to\n<b><small>LDFLAGS</small></b> . During program load, several\n<small>ELF</small> memory sections need to be written to by\nthe linker. This flags the loader to turn these sections\nread-only before turning over control to the program. Most\nnotably this prevents <small>GOT</small> overwrite attacks.\nIf this option is disabled, <b>bindnow</b> will become\ndisabled as well.</p>\n\n<p style=\"margin-left:11%;\"><b>bindnow</b></p>\n\n<p style=\"margin-left:17%;\">This setting (disabled by\ndefault) adds <b>-Wl,-z,now</b> to\n<b><small>LDFLAGS</small></b> . During program load, all\ndynamic symbols are resolved, allowing for the entire\n<small>PLT</small> to be marked read-only (due to\n<b>relro</b> above). The option cannot become enabled if\n<b>relro</b> is not enabled.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>pie</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>This setting (with no global default since dpkg 1.18.23,\nas it is enabled by default now by gcc on the amd64, arm64,\narmel, armhf, hurd-i386, i386, kfreebsd-amd64,\nkfreebsd-i386, mips, mipsel, mips64el, powerpc, ppc64,\nppc64el, riscv64, s390x, sparc and sparc64 Debian\narchitectures) adds the required options to enable or\ndisable <small>PIE</small> via gcc specs files, if needed,\ndepending on whether gcc injects on that architecture the\nflags by itself or not. When the setting is enabled and gcc\ninjects the flags, it adds nothing. When the setting is\nenabled and gcc does not inject the flags, it adds\n<b>-fPIE</b> (via <i>/usr/share/dpkg/pie-compiler.specs</i>)\nto <b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>OBJCXXFLAGS</small></b> ,\n<b><small>GCJFLAGS</small></b> ,\n<b><small>FFLAGS</small></b> and\n<b><small>FCFLAGS</small></b> , and <b>-fPIE -pie</b> (via\n<i>/usr/share/dpkg/pie-link.specs</i>) to\n<b><small>LDFLAGS</small></b> . When the setting is disabled\nand gcc injects the flags, it adds <b>-fno-PIE</b> (via\n<i>/usr/share/dpkg/no-pie-compile.specs</i>) to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>OBJCXXFLAGS</small></b> ,\n<b><small>GCJFLAGS</small></b> ,\n<b><small>FFLAGS</small></b> and\n<b><small>FCFLAGS</small></b> , and <b>-fno-PIE -no-pie</b>\n(via <i>/usr/share/dpkg/no-pie-link.specs</i>) to\n<b><small>LDFLAGS</small></b> .</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Position\nIndependent Executable are needed to take advantage of\nAddress Space Layout Randomization, supported by some kernel\nversions. While <small>ASLR</small> can already be enforced\nfor data areas in the stack and heap (brk and mmap), the\ncode areas must be compiled as position-independent. Shared\nlibraries already do this (<b>-fPIC</b>), so they gain\n<small>ASLR</small> automatically, but binary .text regions\nneed to be build <small>PIE</small> to gain\n<small>ASLR.</small> When this happens, <small>ROP</small>\n(Return Oriented Programming) attacks are much harder since\nthere are no static locations to bounce off of during a\nmemory corruption attack.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>PIE</small>\nis not compatible with <b>-fPIC</b>, so in general care must\nbe taken when building shared objects. But because the\n<small>PIE</small> flags emitted get injected via gcc specs\nfiles, it should always be safe to unconditionally set them\nregardless of the object type being compiled or linked.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Static\nlibraries can be used by programs or other shared libraries.\nDepending on the flags used to compile all the objects\nwithin a static library, these libraries will be usable by\ndifferent sets of objects: <br>\nnone</p>\n\n<p style=\"margin-left:23%;\">Cannot be linked into a\n<small>PIE</small> program, nor a shared library.</p>\n\n<p style=\"margin-left:17%;\"><b>-fPIE</b></p>\n\n<p style=\"margin-left:23%;\">Can be linked into any program,\nbut not a shared library (recommended).</p>\n\n<p style=\"margin-left:17%;\"><b>-fPIC</b></p>\n\n<p style=\"margin-left:23%;\">Can be linked into any program\nand shared library.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If there is a\nneed to set these flags manually, bypassing the gcc specs\ninjection, there are several things to take into account.\nUnconditionally and explicitly passing <b>-fPIE</b>,\n<b>-fpie</b> or <b>-pie</b> to a build-system using libtool\nis safe as these flags will get stripped when building\nshared libraries. Otherwise on projects that build both\nprograms and shared libraries you might need to make sure\nthat when building the shared libraries <b>-fPIC</b> is\nalways passed last (so that it overrides any previous\n<b>-PIE</b>) to compilation flags such as\n<b><small>CFLAGS</small></b> , and <b>-shared</b> is passed\nlast (so that it overrides any previous <b>-pie</b>) to\nlinking flags such as <b><small>LDFLAGS</small></b> .\n<b>Note:</b> This should not be needed with the default gcc\nspecs machinery.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Additionally,\nsince <small>PIE</small> is implemented via a general\nregister, some register starved architectures (but not\nincluding i386 anymore since optimizations implemented in\ngcc &gt;= 5) can see performance losses of up to 15% in very\ntext-segment-heavy application workloads; most workloads see\nless than 1%. Architectures with more general registers\n(e.g. amd64) do not see as high a worst-case penalty.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>reproducible</b>\n<br>\nThe compile-time options detailed below can be used to help\nimprove build reproducibility or provide additional warning\nmessages during compilation. Except as noted below, these\nare enabled by default for architectures that support them.\n<b><br>\ntimeless</b></p>\n\n<p style=\"margin-left:17%;\">This setting (enabled by\ndefault) adds <b>-Wdate-time</b> to\n<b><small>CPPFLAGS</small></b> . This will cause warnings\nwhen the <b>__TIME__</b>, <b>__DATE__</b> and\n<b>__TIMESTAMP__</b> macros are used.</p>\n\n<p style=\"margin-left:11%;\"><b>fixfilepath</b></p>\n\n<p style=\"margin-left:17%;\">This setting (enabled by\ndefault) adds <b>-ffile-prefix-map=</b>\n<i><small>BUILDPATH</small></i> <b>=.</b> to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>OBJCXXFLAGS</small></b> ,\n<b><small>GCJFLAGS</small></b> ,\n<b><small>FFLAGS</small></b> and\n<b><small>FCFLAGS</small></b> where\n<b><small>BUILDPATH</small></b> is set to the top-level\ndirectory of the package being built. This has the effect of\nremoving the build path from any generated file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If both\n<b>fixdebugpath</b> and <b>fixfilepath</b> are set, this\noption takes precedence, because it is a superset of the\nformer.</p>\n\n<p style=\"margin-left:11%;\"><b>fixdebugpath</b></p>\n\n<p style=\"margin-left:17%;\">This setting (enabled by\ndefault) adds <b>-fdebug-prefix-map=</b>\n<i><small>BUILDPATH</small></i> <b>=.</b> to\n<b><small>CFLAGS</small></b> ,\n<b><small>CXXFLAGS</small></b> ,\n<b><small>OBJCFLAGS</small></b> ,\n<b><small>OBJCXXFLAGS</small></b> ,\n<b><small>GCJFLAGS</small></b> ,\n<b><small>FFLAGS</small></b> and\n<b><small>FCFLAGS</small></b> where\n<b><small>BUILDPATH</small></b> is set to the top-level\ndirectory of the package being built. This has the effect of\nremoving the build path from any generated debug\nsymbols.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are 2\nsets of environment variables doing the same operations, the\nfirst one ( <small>DEB_</small> <i>flag</i>_<i>op</i>)\nshould never be used within <b>debian/rules</b>. It&rsquo;s\nmeant for any user that wants to rebuild the source package\nwith different build flags. The second set (\n<small>DEB_</small> <i>flag</i>_MAINT_<i>op</i>) should only\nbe used in <b>debian/rules</b> by package maintainers to\nchange the resulting build flags. <b><small><br>\nDEB_</small></b> <i>flag</i><b>_SET <small><br>\nDEB_</small></b> <i>flag</i><b>_MAINT_SET</b></p>\n\n<p style=\"margin-left:17%;\">This variable can be used to\nforce the value returned for the given <i>flag</i>.</p>\n\n<p style=\"margin-left:11%;\"><b><small>DEB_</small></b>\n<i>flag</i><b>_STRIP <small><br>\nDEB_</small></b> <i>flag</i><b>_MAINT_STRIP</b></p>\n\n<p style=\"margin-left:17%;\">This variable can be used to\nprovide a space separated list of options that will be\nstripped from the set of flags returned for the given\n<i>flag</i>.</p>\n\n<p style=\"margin-left:11%;\"><b><small>DEB_</small></b>\n<i>flag</i><b>_APPEND <small><br>\nDEB_</small></b> <i>flag</i><b>_MAINT_APPEND</b></p>\n\n<p style=\"margin-left:17%;\">This variable can be used to\nappend supplementary options to the value returned for the\ngiven <i>flag</i>.</p>\n\n<p style=\"margin-left:11%;\"><b><small>DEB_</small></b>\n<i>flag</i><b>_PREPEND <small><br>\nDEB_</small></b> <i>flag</i><b>_MAINT_PREPEND</b></p>\n\n<p style=\"margin-left:17%;\">This variable can be used to\nprepend supplementary options to the value returned for the\ngiven <i>flag</i>.</p>\n\n<p style=\"margin-left:11%;\"><b><small>DEB_BUILD_OPTIONS\n<br>\nDEB_BUILD_MAINT_OPTIONS</small></b></p>\n\n<p style=\"margin-left:17%;\">These variables can be used by\na user or maintainer to disable/enable various area features\nthat affect build flags. The\n<b><small>DEB_BUILD_MAINT_OPTIONS</small></b> variable\noverrides any setting in the\n<b><small>DEB_BUILD_OPTIONS</small></b> feature areas. See\nthe <b><small>FEATURE AREAS</small></b> section for\ndetails.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>DEB_VENDOR</small></b></p>\n\n<p style=\"margin-left:17%;\">This setting defines the\ncurrent vendor. If not set, it will discover the current\nvendor by reading <b>/etc/dpkg/origins/default</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>DEB_BUILD_PATH</small></b></p>\n\n<p style=\"margin-left:17%;\">This variable sets the build\npath (since dpkg 1.18.8) to use in features such as\n<b>fixdebugpath</b> so that they can be controlled by the\ncaller. This variable is currently Debian and\nderivatives-specific.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>DPKG_COLORS</small></b></p>\n\n<p style=\"margin-left:17%;\">Sets the color mode (since dpkg\n1.18.5). The currently accepted values are: <b>auto</b>\n(default), <b>always</b> and <b>never</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>DPKG_NLS</small></b></p>\n\n<p style=\"margin-left:17%;\">If set, it will be used to\ndecide whether to activate Native Language Support, also\nknown as internationalization (or i18n) support (since dpkg\n1.19.0). The accepted values are: <b>0</b> and <b>1</b>\n(default).</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Configuration\nfiles <br>\n/etc/dpkg/buildflags.conf</b></p>\n\n<p style=\"margin-left:17%;\">System wide configuration\nfile.</p>\n\n\n<p style=\"margin-left:11%;\"><b>$XDG_CONFIG_HOME/dpkg/buildflags.conf</b>\nor <b><br>\n$HOME/.config/dpkg/buildflags.conf</b></p>\n\n<p style=\"margin-left:17%;\">User configuration file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Packaging\nsupport <br>\n/usr/share/dpkg/buildflags.mk</b></p>\n\n<p style=\"margin-left:17%;\">Makefile snippet that will load\n(and optionally export) all flags supported by\n<b>dpkg-buildflags</b> into variables (since dpkg\n1.16.1).</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To pass build\nflags to a build command in a Makefile:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$(MAKE) $(shell\ndpkg-buildflags --export=cmdline) <br>\n./configure $(shell dpkg-buildflags --export=cmdline)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To set build\nflags in a shell script or shell fragment, <b>eval</b> can\nbe used to interpret the output and to export the flags in\nthe environment:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">eval\n&quot;$(dpkg-buildflags --export=sh)&quot; &amp;&amp;\nmake</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">or to set the\npositional parameters to pass to a command:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">eval &quot;set\n-- $(dpkg-buildflags --export=cmdline)&quot; <br>\nfor dir in a b c; do (cd $dir &amp;&amp; ./configure\n&quot;$@&quot; &amp;&amp; make); done</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Usage in\ndebian/rules</b> <br>\nYou should call <b>dpkg-buildflags</b> or include\n<b>buildflags.mk</b> from the <b>debian/rules</b> file to\nobtain the needed build flags to pass to the build system.\nNote that older versions of <b>dpkg-buildpackage</b> (before\ndpkg 1.16.1) exported these flags automatically. However,\nyou should not rely on this, since this breaks manual\ninvocation of <b>debian/rules</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For packages\nwith autoconf-like build systems, you can pass the relevant\noptions to configure or <a href=\"https://man.page/1/make\">make(1)</a> directly, as shown\nabove.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For other build\nsystems, or when you need more fine-grained control about\nwhich flags are passed where, you can use <b>--get</b>. Or\nyou can include <b>buildflags.mk</b> instead, which takes\ncare of calling <b>dpkg-buildflags</b> and storing the build\nflags in make variables.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nexport all buildflags into the environment (where they can\nbe picked up by your build system):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">DPKG_EXPORT_BUILDFLAGS\n= 1 <br>\ninclude /usr/share/dpkg/buildflags.mk</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For some extra\ncontrol over what is exported, you can manually export the\nvariables (as none are exported by default):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">include\n/usr/share/dpkg/buildflags.mk <br>\nexport CPPFLAGS CFLAGS LDFLAGS</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">And you can of\ncourse pass the flags to commands manually:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">include\n/usr/share/dpkg/buildflags.mk <br>\nbuild-arch: <br>\n$(CC) -o hello hello.c $(CPPFLAGS) $(CFLAGS) $(LDFLAGS)</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#SUPPORTED FLAGS\">SUPPORTED FLAGS</a>","<a href=\"#FEATURE AREAS\">FEATURE AREAS</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>"]}