{"name":"bash","description":"bash - GNU Bourne-Again SHell","body":"\n\n<h1 align=\"center\">BASH</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">bash - GNU\nBourne-Again SHell</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bash</b>\n[options] [command_string | file]</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bash is\nCopyright (C) 1989-2020 by the Free Software Foundation,\nInc.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b> is\nan <b>sh</b>-compatible command language interpreter that\nexecutes commands read from the standard input or from a\nfile. <b>Bash</b> also incorporates useful features from the\n<i>Korn</i> and <i>C</i> shells (<b>ksh</b> and\n<b>csh</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b> is\nintended to be a conformant implementation of the Shell and\nUtilities portion of the IEEE POSIX specification (IEEE\nStandard 1003.1). <b>Bash</b> can be configured to be\nPOSIX-conformant by default.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of the\nsingle-character shell options documented in the description\nof the <b>set</b> builtin command, including <b>-o</b>, can\nbe used as options when the shell is invoked. In addition,\n<b>bash</b> interprets the following options when it is\ninvoked:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-c</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>If the <b>-c</b> option is present, then commands are\nread from the first non-option argument\n<i>command_string</i>. If there are arguments after the\n<i>command_string</i>, the first argument is assigned to\n<b>$0</b> and any remaining arguments are assigned to the\npositional parameters. The assignment to <b>$0</b> sets the\nname of the shell, which is used in warning and error\nmessages.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-i</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>If the <b>-i</b> option is present, the shell is\n<i>interactive</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-l</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>Make <b>bash</b> act as if it had been invoked as a\nlogin shell (see <b><small>INVOCATION</small></b>\nbelow).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-r</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>If the <b>-r</b> option is present, the shell becomes\n<i>restricted</i> (see <b><small>RESTRICTED\nSHELL</small></b> below).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>If the <b>-s</b> option is present, or if no arguments\nremain after option processing, then commands are read from\nthe standard input. This option allows the positional\nparameters to be set when invoking an interactive shell or\nwhen reading input through a pipe.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>Print shell input lines as they are read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-x</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>Print commands and their arguments as they are\nexecuted.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-D</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>A list of all double-quoted strings preceded by <b>$</b>\nis printed on the standard output. These are the strings\nthat are subject to language translation when the current\nlocale is not <b>C</b> or <b>POSIX</b>. This implies the\n<b>-n</b> option; no commands will be executed.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>[-+]O\n[</b><i>shopt_option</i><b>]</b></p>\n\n<p style=\"margin-left:26%;\"><i>shopt_option</i> is one of\nthe shell options accepted by the <b>shopt</b> builtin (see\n<b><small>SHELL BUILTIN COMMANDS</small></b> below). If\n<i>shopt_option</i> is present, <b>-O</b> sets the value of\nthat option; <b>+O</b> unsets it. If <i>shopt_option</i> is\nnot supplied, the names and values of the shell options\naccepted by <b>shopt</b> are printed on the standard output.\nIf the invocation option is <b>+O</b>, the output is\ndisplayed in a format that may be reused as input.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>--</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"74%\">\n\n\n<p>A <b>--</b> signals the end of options and disables\nfurther option processing. Any arguments after the <b>--</b>\nare treated as filenames and arguments. An argument of\n<b>-</b> is equivalent to <b>--</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b>\nalso interprets a number of multi-character options. These\noptions must appear on the command line before the\nsingle-character options to be recognized. <b><br>\n--debugger</b></p>\n\n<p style=\"margin-left:22%;\">Arrange for the debugger\nprofile to be executed before the shell starts. Turns on\nextended debugging mode (see the description of the\n<b>extdebug</b> option to the <b>shopt</b> builtin\nbelow).</p>\n\n<p style=\"margin-left:11%;\"><b>--dump-po-strings</b></p>\n\n<p style=\"margin-left:22%;\">Equivalent to <b>-D</b>, but\nthe output is in the GNU <i>gettext</i> <b>po</b> (portable\nobject) file format.</p>\n\n<p style=\"margin-left:11%;\"><b>--dump-strings</b></p>\n\n<p style=\"margin-left:22%;\">Equivalent to <b>-D</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>--help</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Display a usage message on standard output and exit\nsuccessfully.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--init-file</b> <i>file</i>\n<b><br>\n--rcfile</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">Execute commands from\n<i>file</i> instead of the system wide initialization file\n<i>/etc/bash.bashrc</i> and the standard personal\ninitialization file <i>~/.bashrc</i> if the shell is\ninteractive (see <b><small>INVOCATION</small></b>\nbelow).</p>\n\n<p style=\"margin-left:11%;\"><b>--login</b></p>\n\n<p style=\"margin-left:22%;\">Equivalent to <b>-l</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>--noediting</b></p>\n\n<p style=\"margin-left:22%;\">Do not use the GNU\n<b>readline</b> library to read command lines when the shell\nis interactive.</p>\n\n<p style=\"margin-left:11%;\"><b>--noprofile</b></p>\n\n<p style=\"margin-left:22%;\">Do not read either the\nsystem-wide startup file <i>/etc/profile</i> or any of the\npersonal initialization files <i>~/.bash_profile</i>,\n<i>~/.bash_login</i>, or <i>~/.profile</i>. By default,\n<b>bash</b> reads these files when it is invoked as a login\nshell (see <b><small>INVOCATION</small></b> below).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>--norc</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Do not read and execute the system wide initialization\nfile <i>/etc/bash.bashrc</i> and the personal initialization\nfile <i>~/.bashrc</i> if the shell is interactive. This\noption is on by default if the shell is invoked as\n<b>sh</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--posix</b></p>\n\n<p style=\"margin-left:22%;\">Change the behavior of\n<b>bash</b> where the default operation differs from the\nPOSIX standard to match the standard (<i>posix mode</i>).\nSee <b><small>SEE ALSO</small></b> below for a reference to\na document that details how posix mode affects bash&rsquo;s\nbehavior.</p>\n\n<p style=\"margin-left:11%;\"><b>--restricted</b></p>\n\n<p style=\"margin-left:22%;\">The shell becomes restricted\n(see <b><small>RESTRICTED SHELL</small></b> below).</p>\n\n<p style=\"margin-left:11%;\"><b>--verbose</b></p>\n\n<p style=\"margin-left:22%;\">Equivalent to <b>-v</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>--version</b></p>\n\n<p style=\"margin-left:22%;\">Show version information for\nthis instance of <b>bash</b> on the standard output and exit\nsuccessfully.</p>\n\n<h2>ARGUMENTS\n<a name=\"ARGUMENTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If arguments\nremain after option processing, and neither the <b>-c</b>\nnor the <b>-s</b> option has been supplied, the first\nargument is assumed to be the name of a file containing\nshell commands. If <b>bash</b> is invoked in this fashion,\n<b>$0</b> is set to the name of the file, and the positional\nparameters are set to the remaining arguments. <b>Bash</b>\nreads and executes commands from this file, then exits.\n<b>Bash</b>&rsquo;s exit status is the exit status of the\nlast command executed in the script. If no commands are\nexecuted, the exit status is 0. An attempt is first made to\nopen the file in the current directory, and, if no file is\nfound, then the shell searches the directories in\n<b><small>PATH</small></b> for the script.</p>\n\n<h2>INVOCATION\n<a name=\"INVOCATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A <i>login\nshell</i> is one whose first character of argument zero is a\n<b>-</b>, or one started with the <b>--login</b> option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n<i>interactive</i> shell is one started without non-option\narguments (unless <b>-s</b> is specified) and without the\n<b>-c</b> option whose standard input and error are both\nconnected to terminals (as determined by <i>isatty</i>(3)),\nor one started with the <b>-i</b> option.\n<b><small>PS1</small></b> is set and <b>$-</b> includes\n<b>i</b> if <b>bash</b> is interactive, allowing a shell\nscript or a startup file to test this state.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nparagraphs describe how <b>bash</b> executes its startup\nfiles. If any of the files exist but cannot be read,\n<b>bash</b> reports an error. Tildes are expanded in\nfilenames as described below under <b>Tilde Expansion</b> in\nthe <b><small>EXPANSION</small></b> section.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>bash</b> is invoked as an interactive login shell, or as\na non-interactive shell with the <b>--login</b> option, it\nfirst reads and executes commands from the file\n<i>/etc/profile</i>, if that file exists. After reading that\nfile, it looks for <i>~/.bash_profile</i>,\n<i>~/.bash_login</i>, and <i>~/.profile</i>, in that order,\nand reads and executes commands from the first one that\nexists and is readable. The <b>--noprofile</b> option may be\nused when the shell is started to inhibit this behavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When an\ninteractive login shell exits, or a non-interactive login\nshell executes the <b>exit</b> builtin command, <b>bash</b>\nreads and executes commands from the file\n<i>~/.bash_logout</i>, if it exists.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When an\ninteractive shell that is not a login shell is started,\n<b>bash</b> reads and executes commands from\n<i>/etc/bash.bashrc</i> and <i>~/.bashrc</i>, if these files\nexist. This may be inhibited by using the <b>--norc</b>\noption. The <b>--rcfile</b> <i>file</i> option will force\n<b>bash</b> to read and execute commands from <i>file</i>\ninstead of <i>/etc/bash.bashrc</i> and <i>~/.bashrc</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>bash</b> is started non-interactively, to run a shell\nscript, for example, it looks for the variable\n<b><small>BASH_ENV</small></b> in the environment, expands\nits value if it appears there, and uses the expanded value\nas the name of a file to read and execute. <b>Bash</b>\nbehaves as if the following command were executed:</p>\n\n<p style=\"margin-left:22%;\">if [ -n &quot;$BASH_ENV&quot;\n]; then . &quot;$BASH_ENV&quot;; fi</p>\n\n<p style=\"margin-left:11%;\">but the value of the\n<b><small>PATH</small></b> variable is not used to search\nfor the filename.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>bash</b>\nis invoked with the name <b>sh</b>, it tries to mimic the\nstartup behavior of historical versions of <b>sh</b> as\nclosely as possible, while conforming to the POSIX standard\nas well. When invoked as an interactive login shell, or a\nnon-interactive shell with the <b>--login</b> option, it\nfirst attempts to read and execute commands from\n<i>/etc/profile</i> and <i>~/.profile</i>, in that order.\nThe <b>--noprofile</b> option may be used to inhibit this\nbehavior. When invoked as an interactive shell with the name\n<b>sh</b>, <b>bash</b> looks for the variable\n<b><small>ENV</small></b><small>,</small> expands its value\nif it is defined, and uses the expanded value as the name of\na file to read and execute. Since a shell invoked as\n<b>sh</b> does not attempt to read and execute commands from\nany other startup files, the <b>--rcfile</b> option has no\neffect. A non-interactive shell invoked with the name\n<b>sh</b> does not attempt to read any other startup files.\nWhen invoked as <b>sh</b>, <b>bash</b> enters <i>posix</i>\nmode after the startup files are read.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>bash</b> is started in <i>posix</i> mode, as with the\n<b>--posix</b> command line option, it follows the POSIX\nstandard for startup files. In this mode, interactive shells\nexpand the <b><small>ENV</small></b> variable and commands\nare read and executed from the file whose name is the\nexpanded value. No other startup files are read.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b>\nattempts to determine when it is being run with its standard\ninput connected to a network connection, as when executed by\nthe remote shell daemon, usually <i>rshd</i>, or the secure\nshell daemon <i>sshd</i>. If <b>bash</b> determines it is\nbeing run in this fashion, it reads and executes commands\nfrom <i>~/.bashrc</i> and <i>~/.bashrc</i>, if these files\nexist and are readable. It will not do this if invoked as\n<b>sh</b>. The <b>--norc</b> option may be used to inhibit\nthis behavior, and the <b>--rcfile</b> option may be used to\nforce another file to be read, but neither <i>rshd</i> nor\n<i>sshd</i> generally invoke the shell with those options or\nallow them to be specified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the shell is\nstarted with the effective user (group) id not equal to the\nreal user (group) id, and the <b>-p</b> option is not\nsupplied, no startup files are read, shell functions are not\ninherited from the environment, the\n<b><small>SHELLOPTS</small></b><small>, <b>BASHOPTS</b>,\n<b>CDPATH</b>,</small> and <b><small>GLOBIGNORE</small></b>\nvariables, if they appear in the environment, are ignored,\nand the effective user id is set to the real user id. If the\n<b>-p</b> option is supplied at invocation, the startup\nbehavior is the same, but the effective user id is not\nreset.</p>\n\n<h2>DEFINITIONS\n<a name=\"DEFINITIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ndefinitions are used throughout the rest of this\ndocument.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>blank</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>A space or tab.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>word</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>A sequence of characters considered as a single unit by\nthe shell. Also known as a <b>token</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>name</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>A <i>word</i> consisting only of alphanumeric characters\nand underscores, and beginning with an alphabetic character\nor an underscore. Also referred to as an\n<b>identifier</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>metacharacter</b></p>\n\n<p style=\"margin-left:22%;\">A character that, when\nunquoted, separates words. One of the following: <b><br>\n| &amp; ; ( ) &lt; &gt; space tab newline</b></p>\n\n<p style=\"margin-left:11%;\"><b>control operator</b></p>\n\n<p style=\"margin-left:22%;\">A <i>token</i> that performs a\ncontrol function. It is one of the following symbols:\n<b><br>\n|| &amp; &amp;&amp; ; ;; ;&amp; ;;&amp; ( ) | |&amp;\n&lt;newline&gt;</b></p>\n\n<h2>RESERVED WORDS\n<a name=\"RESERVED WORDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>Reserved\nwords</i></b> are words that have a special meaning to the\nshell. The following words are recognized as reserved when\nunquoted and either the first word of a command (see\n<b><small>SHELL GRAMMAR</small></b> below), the third word\nof a <b>case</b> or <b>select</b> command (only <b>in</b> is\nvalid), or the third word of a <b>for</b> command (only\n<b>in</b> and <b>do</b> are valid):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>! case\ncoproc do done elif else esac fi for function if in select\nthen until while { } time [[ ]]</b></p>\n\n<h2>SHELL GRAMMAR\n<a name=\"SHELL GRAMMAR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Simple\nCommands</b> <br>\nA <i>simple command</i> is a sequence of optional variable\nassignments followed by <b>blank</b>-separated words and\nredirections, and terminated by a <i>control operator</i>.\nThe first word specifies the command to be executed, and is\npassed as argument zero. The remaining words are passed as\narguments to the invoked command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nvalue of a <i>simple command</i> is its exit status, or\n128+<i>n</i> if the command is terminated by signal\n<i>n</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Pipelines</b>\n<br>\nA <i>pipeline</i> is a sequence of one or more commands\nseparated by one of the control operators <b>|</b> or\n<b>|&amp;</b>. The format for a pipeline is:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<b>time</b>\n[<b>-p</b>]] [ ! ] <i>command</i> [\n[<b>|</b>&#9130;<b>|&amp;</b>] <i>command2</i> ... ]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The standard\noutput of <i>command</i> is connected via a pipe to the\nstandard input of <i>command2</i>. This connection is\nperformed before any redirections specified by the command\n(see <b><small>REDIRECTION</small></b> below). If\n<b>|&amp;</b> is used, <i>command</i>&rsquo;s standard\nerror, in addition to its standard output, is connected to\n<i>command2</i>&rsquo;s standard input through the pipe; it\nis shorthand for <b>2&gt;&amp;1 |</b>. This implicit\nredirection of the standard error to the standard output is\nperformed after any redirections specified by the\ncommand.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nstatus of a pipeline is the exit status of the last command,\nunless the <b>pipefail</b> option is enabled. If\n<b>pipefail</b> is enabled, the pipeline&rsquo;s return\nstatus is the value of the last (rightmost) command to exit\nwith a non-zero status, or zero if all commands exit\nsuccessfully. If the reserved word <b>!</b> precedes a\npipeline, the exit status of that pipeline is the logical\nnegation of the exit status as described above. The shell\nwaits for all commands in the pipeline to terminate before\nreturning a value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<b>time</b> reserved word precedes a pipeline, the elapsed\nas well as user and system time consumed by its execution\nare reported when the pipeline terminates. The <b>-p</b>\noption changes the output format to that specified by POSIX.\nWhen the shell is in <i>posix mode</i>, it does not\nrecognize <b>time</b> as a reserved word if the next token\nbegins with a &rsquo;-&rsquo;. The\n<b><small>TIMEFORMAT</small></b> variable may be set to a\nformat string that specifies how the timing information\nshould be displayed; see the description of\n<b><small>TIMEFORMAT</small></b> under <b>Shell\nVariables</b> below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the shell\nis in <i>posix mode</i>, <b>time</b> may be followed by a\nnewline. In this case, the shell displays the total user and\nsystem time consumed by the shell and its children. The\n<b><small>TIMEFORMAT</small></b> variable may be used to\nspecify the format of the time information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each command in\na pipeline is executed as a separate process (i.e., in a\nsubshell). See <b><small>COMMAND EXECUTION\nENVIRONMENT</small></b> for a description of a subshell\nenvironment. If the <b>lastpipe</b> option is enabled using\nthe <b>shopt</b> builtin (see the description of\n<b>shopt</b> below), the last element of a pipeline may be\nrun by the shell process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Lists</b>\n<br>\nA <i>list</i> is a sequence of one or more pipelines\nseparated by one of the operators <b>;</b>, <b>&amp;</b>,\n<b>&amp;&amp;</b>, or <b>||</b>, and optionally terminated\nby one of <b>;</b>, <b>&amp;</b>, or\n<b>&lt;newline&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Of these list\noperators, <b>&amp;&amp;</b> and <b>||</b> have equal\nprecedence, followed by <b>;</b> and <b>&amp;</b>, which\nhave equal precedence.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A sequence of\none or more newlines may appear in a <i>list</i> instead of\na semicolon to delimit commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a command is\nterminated by the control operator <b>&amp;</b>, the shell\nexecutes the command in the <i>background</i> in a subshell.\nThe shell does not wait for the command to finish, and the\nreturn status is 0. These are referred to as\n<i>asynchronous</i> commands. Commands separated by a\n<b>;</b> are executed sequentially; the shell waits for each\ncommand to terminate in turn. The return status is the exit\nstatus of the last command executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">AND and OR\nlists are sequences of one or more pipelines separated by\nthe <b>&amp;&amp;</b> and <b>||</b> control operators,\nrespectively. AND and OR lists are executed with left\nassociativity. An AND list has the form</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>command1</i>\n<b>&amp;&amp;</b> <i>command2</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>command2</i>\nis executed if, and only if, <i>command1</i> returns an exit\nstatus of zero (success).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An OR list has\nthe form</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>command1</i>\n<b>||</b> <i>command2</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>command2</i>\nis executed if, and only if, <i>command1</i> returns a\nnon-zero exit status. The return status of AND and OR lists\nis the exit status of the last command executed in the\nlist.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Compound\nCommands</b> <br>\nA <i>compound command</i> is one of the following. In most\ncases a <i>list</i> in a command&rsquo;s description may be\nseparated from the rest of the command by one or more\nnewlines, and may be followed by a newline in place of a\nsemicolon.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>(<i>list</i>)</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>list</i> is executed in a subshell environment (see\n<b><small>COMMAND EXECUTION ENVIRONMENT</small></b> below).\nVariable assignments and builtin commands that affect the\nshell&rsquo;s environment do not remain in effect after the\ncommand completes. The return status is the exit status of\n<i>list</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">{ <i>list</i>; }</p>\n\n<p style=\"margin-left:22%;\"><i>list</i> is simply executed\nin the current shell environment. <i>list</i> must be\nterminated with a newline or semicolon. This is known as a\n<i>group command</i>. The return status is the exit status\nof <i>list</i>. Note that unlike the metacharacters <b>(</b>\nand <b>)</b>, <b>{</b> and <b>}</b> are <i>reserved\nwords</i> and must occur where a reserved word is permitted\nto be recognized. Since they do not cause a word break, they\nmust be separated from <i>list</i> by whitespace or another\nshell metacharacter.</p>\n\n<p style=\"margin-left:11%;\">((<i>expression</i>))</p>\n\n<p style=\"margin-left:22%;\">The <i>expression</i> is\nevaluated according to the rules described below under\n<b><small>ARITHMETIC EVALUATION</small></b><small>.</small>\nIf the value of the expression is non-zero, the return\nstatus is 0; otherwise the return status is 1. This is\nexactly equivalent to <b>let\n&quot;</b><i>expression</i><b>&quot;</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>[[</b> <i>expression</i>\n<b>]]</b></p>\n\n<p style=\"margin-left:22%;\">Return a status of 0 or 1\ndepending on the evaluation of the conditional expression\n<i>expression</i>. Expressions are composed of the primaries\ndescribed below under <b><small>CONDITIONAL\nEXPRESSIONS</small></b><small>.</small> Word splitting and\npathname expansion are not performed on the words between\nthe <b>[[</b> and <b>]]</b>; tilde expansion, parameter and\nvariable expansion, arithmetic expansion, command\nsubstitution, process substitution, and quote removal are\nperformed. Conditional operators such as <b>-f</b> must be\nunquoted to be recognized as primaries.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When used with\n<b>[[</b>, the <b>&lt;</b> and <b>&gt;</b> operators sort\nlexicographically using the current locale.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the\ndescription of the <i>test</i> builtin command (section\nSHELL BUILTIN COMMANDS below) for the handling of parameters\n(i.e. missing parameters).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n<b>==</b> and <b>!=</b> operators are used, the string to\nthe right of the operator is considered a pattern and\nmatched according to the rules described below under\n<b>Pattern Matching</b>, as if the <b>extglob</b> shell\noption were enabled. The <b>=</b> operator is equivalent to\n<b>==</b>. If the <b>nocasematch</b> shell option is\nenabled, the match is performed without regard to the case\nof alphabetic characters. The return value is 0 if the\nstring matches (<b>==</b>) or does not match (<b>!=</b>) the\npattern, and 1 otherwise. Any part of the pattern may be\nquoted to force the quoted portion to be matched as a\nstring.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An additional\nbinary operator, <b>=~</b>, is available, with the same\nprecedence as <b>==</b> and <b>!=</b>. When it is used, the\nstring to the right of the operator is considered a POSIX\nextended regular expression and matched accordingly (using\nthe POSIX <i>regcomp</i> and <i>regexec</i> interfaces\nusually described in <i>regex</i>(3)). The return value is 0\nif the string matches the pattern, and 1 otherwise. If the\nregular expression is syntactically incorrect, the\nconditional expression&rsquo;s return value is 2. If the\n<b>nocasematch</b> shell option is enabled, the match is\nperformed without regard to the case of alphabetic\ncharacters. Any part of the pattern may be quoted to force\nthe quoted portion to be matched as a string. Bracket\nexpressions in regular expressions must be treated\ncarefully, since normal quoting characters lose their\nmeanings between brackets. If the pattern is stored in a\nshell variable, quoting the variable expansion forces the\nentire pattern to be matched as a string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The pattern\nwill match if it matches any part of the string. Anchor the\npattern using the <b>^</b> and <b>$</b> regular expression\noperators to force it to match the entire string. The array\nvariable <b><small>BASH_REMATCH</small></b> records which\nparts of the string matched the pattern. The element of\n<b><small>BASH_REMATCH</small></b> with index 0 contains the\nportion of the string matching the entire regular\nexpression. Substrings matched by parenthesized\nsubexpressions within the regular expression are saved in\nthe remaining <b><small>BASH_REMATCH</small></b> indices.\nThe element of <b><small>BASH_REMATCH</small></b> with index\n<i>n</i> is the portion of the string matching the\n<i>n</i>th parenthesized subexpression.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Expressions may\nbe combined using the following operators, listed in\ndecreasing order of precedence:</p>\n\n<p style=\"margin-left:22%;\"><b>(</b> <i>expression</i>\n<b>)</b></p>\n\n<p style=\"margin-left:32%;\">Returns the value of\n<i>expression</i>. This may be used to override the normal\nprecedence of operators.</p>\n\n<p style=\"margin-left:22%;\"><b>!</b> <i>expression</i></p>\n\n<p style=\"margin-left:32%;\">True if <i>expression</i> is\nfalse.</p>\n\n<p style=\"margin-left:22%;\"><i>expression1</i>\n<b>&amp;&amp;</b> <i>expression2</i></p>\n\n<p style=\"margin-left:32%;\">True if both <i>expression1</i>\nand <i>expression2</i> are true.</p>\n\n<p style=\"margin-left:22%;\"><i>expression1</i> <b>||</b>\n<i>expression2</i></p>\n\n<p style=\"margin-left:32%;\">True if either\n<i>expression1</i> or <i>expression2</i> is true.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>&amp;&amp;</b> and <b>||</b> operators do not evaluate\n<i>expression2</i> if the value of <i>expression1</i> is\nsufficient to determine the return value of the entire\nconditional expression.</p>\n\n<p style=\"margin-left:11%;\"><b>for</b> <i>name</i> [ [\n<b>in</b> [ <i>word ...</i> ] ] ; ] <b>do</b> <i>list</i> ;\n<b>done</b></p>\n\n<p style=\"margin-left:22%;\">The list of words following\n<b>in</b> is expanded, generating a list of items. The\nvariable <i>name</i> is set to each element of this list in\nturn, and <i>list</i> is executed each time. If the\n<b>in</b> <i>word</i> is omitted, the <b>for</b> command\nexecutes <i>list</i> once for each positional parameter that\nis set (see <b><small>PARAMETERS</small></b> below). The\nreturn status is the exit status of the last command that\nexecutes. If the expansion of the items following <b>in</b>\nresults in an empty list, no commands are executed, and the\nreturn status is 0.</p>\n\n<p style=\"margin-left:11%;\"><b>for</b> (( <i>expr1</i> ;\n<i>expr2</i> ; <i>expr3</i> )) ; <b>do</b> <i>list</i> ;\n<b>done</b></p>\n\n<p style=\"margin-left:22%;\">First, the arithmetic\nexpression <i>expr1</i> is evaluated according to the rules\ndescribed below under <b><small>ARITHMETIC\nEVALUATION</small></b><small>.</small> The arithmetic\nexpression <i>expr2</i> is then evaluated repeatedly until\nit evaluates to zero. Each time <i>expr2</i> evaluates to a\nnon-zero value, <i>list</i> is executed and the arithmetic\nexpression <i>expr3</i> is evaluated. If any expression is\nomitted, it behaves as if it evaluates to 1. The return\nvalue is the exit status of the last command in <i>list</i>\nthat is executed, or false if any of the expressions is\ninvalid.</p>\n\n<p style=\"margin-left:11%;\"><b>select</b> <i>name</i> [\n<b>in</b> <i>word</i> ] ; <b>do</b> <i>list</i> ;\n<b>done</b></p>\n\n<p style=\"margin-left:22%;\">The list of words following\n<b>in</b> is expanded, generating a list of items. The set\nof expanded words is printed on the standard error, each\npreceded by a number. If the <b>in</b> <i>word</i> is\nomitted, the positional parameters are printed (see\n<b><small>PARAMETERS</small></b> below). The\n<b><small>PS3</small></b> prompt is then displayed and a\nline read from the standard input. If the line consists of a\nnumber corresponding to one of the displayed words, then the\nvalue of <i>name</i> is set to that word. If the line is\nempty, the words and prompt are displayed again. If EOF is\nread, the command completes. Any other value read causes\n<i>name</i> to be set to null. The line read is saved in the\nvariable <b><small>REPLY</small></b><small>.</small> The\n<i>list</i> is executed after each selection until a\n<b>break</b> command is executed. The exit status of\n<b>select</b> is the exit status of the last command\nexecuted in <i>list</i>, or zero if no commands were\nexecuted.</p>\n\n<p style=\"margin-left:11%;\"><b>case</b> <i>word</i>\n<b>in</b> [ [(] <i>pattern</i> [ <b>|</b> <i>pattern</i> ]\n... ) <i>list</i> ;; ] ... <b>esac</b></p>\n\n<p style=\"margin-left:22%;\">A <b>case</b> command first\nexpands <i>word</i>, and tries to match it against each\n<i>pattern</i> in turn, using the matching rules described\nunder <b>Pattern Matching</b> below. The <i>word</i> is\nexpanded using tilde expansion, parameter and variable\nexpansion, arithmetic expansion, command substitution,\nprocess substitution and quote removal. Each <i>pattern</i>\nexamined is expanded using tilde expansion, parameter and\nvariable expansion, arithmetic expansion, command\nsubstitution, and process substitution. If the\n<b>nocasematch</b> shell option is enabled, the match is\nperformed without regard to the case of alphabetic\ncharacters. When a match is found, the corresponding\n<i>list</i> is executed. If the <b>;;</b> operator is used,\nno subsequent matches are attempted after the first pattern\nmatch. Using <b>;&amp;</b> in place of <b>;;</b> causes\nexecution to continue with the <i>list</i> associated with\nthe next set of patterns. Using <b>;;&amp;</b> in place of\n<b>;;</b> causes the shell to test the next pattern list in\nthe statement, if any, and execute any associated\n<i>list</i> on a successful match, continuing the case\nstatement execution as if the pattern list had not matched.\nThe exit status is zero if no pattern matches. Otherwise, it\nis the exit status of the last command executed in\n<i>list</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>if</b> <i>list</i>;\n<b>then</b> <i>list</i>; [ <b>elif</b> <i>list</i>;\n<b>then</b> <i>list</i>; ] ... [ <b>else</b> <i>list</i>; ]\n<b>fi</b></p>\n\n<p style=\"margin-left:22%;\">The <b>if</b> <i>list</i> is\nexecuted. If its exit status is zero, the <b>then</b>\n<i>list</i> is executed. Otherwise, each <b>elif</b>\n<i>list</i> is executed in turn, and if its exit status is\nzero, the corresponding <b>then</b> <i>list</i> is executed\nand the command completes. Otherwise, the <b>else</b>\n<i>list</i> is executed, if present. The exit status is the\nexit status of the last command executed, or zero if no\ncondition tested true.</p>\n\n<p style=\"margin-left:11%;\"><b>while</b> <i>list-1</i>;\n<b>do</b> <i>list-2</i>; <b>done <br>\nuntil</b> <i>list-1</i>; <b>do</b> <i>list-2</i>;\n<b>done</b></p>\n\n<p style=\"margin-left:22%;\">The <b>while</b> command\ncontinuously executes the list <i>list-2</i> as long as the\nlast command in the list <i>list-1</i> returns an exit\nstatus of zero. The <b>until</b> command is identical to the\n<b>while</b> command, except that the test is negated:\n<i>list-2</i> is executed as long as the last command in\n<i>list-1</i> returns a non-zero exit status. The exit\nstatus of the <b>while</b> and <b>until</b> commands is the\nexit status of the last command executed in <i>list-2</i>,\nor zero if none was executed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Coprocesses</b>\n<br>\nA <i>coprocess</i> is a shell command preceded by the\n<b>coproc</b> reserved word. A coprocess is executed\nasynchronously in a subshell, as if the command had been\nterminated with the <b>&amp;</b> control operator, with a\ntwo-way pipe established between the executing shell and the\ncoprocess.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The format for\na coprocess is:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>coproc</b>\n[<i>NAME</i>] <i>command</i> [<i>redirections</i>]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This creates a\ncoprocess named <i>NAME</i>. If <i>NAME</i> is not supplied,\nthe default name is <b>COPROC</b>. <i>NAME</i> must not be\nsupplied if <i>command</i> is a <i>simple command</i> (see\nabove); otherwise, it is interpreted as the first word of\nthe simple command. When the coprocess is executed, the\nshell creates an array variable (see <b>Arrays</b> below)\nnamed <i>NAME</i> in the context of the executing shell. The\nstandard output of <i>command</i> is connected via a pipe to\na file descriptor in the executing shell, and that file\ndescriptor is assigned to <i>NAME</i>[0]. The standard input\nof <i>command</i> is connected via a pipe to a file\ndescriptor in the executing shell, and that file descriptor\nis assigned to <i>NAME</i>[1]. This pipe is established\nbefore any redirections specified by the command (see\n<b><small>REDIRECTION</small></b> below). The file\ndescriptors can be utilized as arguments to shell commands\nand redirections using standard word expansions. Other than\nthose created to execute command and process substitutions,\nthe file descriptors are not available in subshells. The\nprocess ID of the shell spawned to execute the coprocess is\navailable as the value of the variable <i>NAME</i>_PID. The\n<b>wait</b> builtin command may be used to wait for the\ncoprocess to terminate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since the\ncoprocess is created as an asynchronous command, the\n<b>coproc</b> command always returns success. The return\nstatus of a coprocess is the exit status of\n<i>command</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Shell\nFunction Definitions</b> <br>\nA shell function is an object that is called like a simple\ncommand and executes a compound command with a new set of\npositional parameters. Shell functions are declared as\nfollows: <i><br>\nfname</i> () <i>compound-command</i> [<i>redirection</i>]\n<b><br>\nfunction</b> <i>fname</i> [()] <i>compound-command</i>\n[<i>redirection</i>]</p>\n\n<p style=\"margin-left:22%;\">This defines a function named\n<i>fname</i>. The reserved word <b>function</b> is optional.\nIf the <b>function</b> reserved word is supplied, the\nparentheses are optional. The <i>body</i> of the function is\nthe compound command <i>compound-command</i> (see\n<b>Compound Commands</b> above). That command is usually a\n<i>list</i> of commands between { and }, but may be any\ncommand listed under <b>Compound Commands</b> above, with\none exception: If the <b>function</b> reserved word is used,\nbut the parentheses are not supplied, the braces are\nrequired. <i>compound-command</i> is executed whenever\n<i>fname</i> is specified as the name of a simple command.\nWhen in <i>posix mode</i>, <i>fname</i> must be a valid\nshell <i>name</i> and may not be the name of one of the\nPOSIX <i>special builtins</i>. In default mode, a function\nname can be any unquoted shell word that does not contain\n<b>$</b>. Any redirections (see\n<b><small>REDIRECTION</small></b> below) specified when a\nfunction is defined are performed when the function is\nexecuted. The exit status of a function definition is zero\nunless a syntax error occurs or a readonly function with the\nsame name already exists. When executed, the exit status of\na function is the exit status of the last command executed\nin the body. (See <b><small>FUNCTIONS</small></b>\nbelow.)</p>\n\n<h2>COMMENTS\n<a name=\"COMMENTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a\nnon-interactive shell, or an interactive shell in which the\n<b>interactive_comments</b> option to the <b>shopt</b>\nbuiltin is enabled (see <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below), a word beginning with <b>#</b>\ncauses that word and all remaining characters on that line\nto be ignored. An interactive shell without the\n<b>interactive_comments</b> option enabled does not allow\ncomments. The <b>interactive_comments</b> option is on by\ndefault in interactive shells.</p>\n\n<h2>QUOTING\n<a name=\"QUOTING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Quoting</i>\nis used to remove the special meaning of certain characters\nor words to the shell. Quoting can be used to disable\nspecial treatment for special characters, to prevent\nreserved words from being recognized as such, and to prevent\nparameter expansion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of the\n<i>metacharacters</i> listed above under\n<b><small>DEFINITIONS</small></b> has special meaning to the\nshell and must be quoted if it is to represent itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\ncommand history expansion facilities are being used (see\n<b><small>HISTORY EXPANSION</small></b> below), the\n<i>history expansion</i> character, usually <b>!</b>, must\nbe quoted to prevent history expansion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are three\nquoting mechanisms: the <i>escape character</i>, single\nquotes, and double quotes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A non-quoted\nbackslash (<b>\\</b>) is the <i>escape character</i>. It\npreserves the literal value of the next character that\nfollows, with the exception of &lt;newline&gt;. If a\n<b>\\</b>&lt;newline&gt; pair appears, and the backslash is\nnot itself quoted, the <b>\\</b>&lt;newline&gt; is treated as\na line continuation (that is, it is removed from the input\nstream and effectively ignored).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Enclosing\ncharacters in single quotes preserves the literal value of\neach character within the quotes. A single quote may not\noccur between single quotes, even when preceded by a\nbackslash.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Enclosing\ncharacters in double quotes preserves the literal value of\nall characters within the quotes, with the exception of\n<b>$</b>, <b>`</b>, <b>\\</b>, and, when history expansion is\nenabled, <b>!</b>. When the shell is in <i>posix mode</i>,\nthe <b>!</b> has no special meaning within double quotes,\neven when history expansion is enabled. The characters\n<b>$</b> and <b>`</b> retain their special meaning within\ndouble quotes. The backslash retains its special meaning\nonly when followed by one of the following characters:\n<b>$</b>, <b>`</b>, <b>&quot;</b>, <b>\\</b>, or\n<b>&lt;newline&gt;</b>. A double quote may be quoted within\ndouble quotes by preceding it with a backslash. If enabled,\nhistory expansion will be performed unless an <b>!</b>\nappearing in double quotes is escaped using a backslash. The\nbackslash preceding the <b>!</b> is not removed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The special\nparameters <b>*</b> and <b>@</b> have special meaning when\nin double quotes (see <b><small>PARAMETERS</small></b>\nbelow).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Words of the\nform <b>$</b>'<i>string</i>' are treated specially. The word\nexpands to <i>string</i>, with backslash-escaped characters\nreplaced as specified by the ANSI C standard. Backslash\nescape sequences, if present, are decoded as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\a</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>alert (bell)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\b</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>backspace</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\e</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\E</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>an escape character</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\f</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>form feed</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\n</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>new line</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\r</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>carriage return</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\t</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>horizontal tab</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\v</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>vertical tab</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\\\</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>backslash</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\'</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>single quote</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\&quot;</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>double quote</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\?</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>question mark</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\</b><i>nnn</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>the eight-bit character whose value is the octal value\n<i>nnn</i> (one to three octal digits)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\x</b><i>HH</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>the eight-bit character whose value is the hexadecimal\nvalue <i>HH</i> (one or two hex digits)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\u</b><i>HHHH</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>the Unicode (ISO/IEC 10646) character whose value is the\nhexadecimal value <i>HHHH</i> (one to four hex digits)</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>\\U</b><i>HHHHHHHH</i></p>\n\n<p style=\"margin-left:32%;\">the Unicode (ISO/IEC 10646)\ncharacter whose value is the hexadecimal value\n<i>HHHHHHHH</i> (one to eight hex digits)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\c</b><i>x</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"33%\">\n\n\n<p>a control-<i>x</i> character</p></td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The expanded\nresult is single-quoted, as if the dollar sign had not been\npresent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A double-quoted\nstring preceded by a dollar sign\n(<b>$</b>&quot;<i>string</i>&quot;) will cause the string to\nbe translated according to the current locale. The\n<i>gettext</i> infrastructure performs the message catalog\nlookup and translation, using the <b>LC_MESSAGES</b> and\n<b>TEXTDOMAIN</b> shell variables. If the current locale is\n<b>C</b> or <b>POSIX</b>, or if there are no translations\navailable, the dollar sign is ignored. If the string is\ntranslated and replaced, the replacement is\ndouble-quoted.</p>\n\n<h2>PARAMETERS\n<a name=\"PARAMETERS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n<i>parameter</i> is an entity that stores values. It can be\na <i>name</i>, a number, or one of the special characters\nlisted below under <b>Special Parameters</b>. A\n<i>variable</i> is a parameter denoted by a <i>name</i>. A\nvariable has a <i>value</i> and zero or more\n<i>attributes</i>. Attributes are assigned using the\n<b>declare</b> builtin command (see <b>declare</b> below in\n<b><small>SHELL BUILTIN\nCOMMANDS</small></b><small>).</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A parameter is\nset if it has been assigned a value. The null string is a\nvalid value. Once a variable is set, it may be unset only by\nusing the <b>unset</b> builtin command (see <b><small>SHELL\nBUILTIN COMMANDS</small></b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n<i>variable</i> may be assigned to by a statement of the\nform</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>name</i>=[<i>value</i>]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>value</i>\nis not given, the variable is assigned the null string. All\n<i>values</i> undergo tilde expansion, parameter and\nvariable expansion, command substitution, arithmetic\nexpansion, and quote removal (see\n<b><small>EXPANSION</small></b> below). If the variable has\nits <b>integer</b> attribute set, then <i>value</i> is\nevaluated as an arithmetic expression even if the $((...))\nexpansion is not used (see <b>Arithmetic Expansion</b>\nbelow). Word splitting is not performed, with the exception\nof <b>&quot;$@&quot;</b> as explained below under <b>Special\nParameters</b>. Pathname expansion is not performed.\nAssignment statements may also appear as arguments to the\n<b>alias</b>, <b>declare</b>, <b>typeset</b>, <b>export</b>,\n<b>readonly</b>, and <b>local</b> builtin commands\n(<i>declaration</i> commands). When in <i>posix mode</i>,\nthese builtins may appear in a command after one or more\ninstances of the <b>command</b> builtin and retain these\nassignment statement properties.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the context\nwhere an assignment statement is assigning a value to a\nshell variable or array index, the += operator can be used\nto append to or add to the variable&rsquo;s previous value.\nThis includes arguments to builtin commands such as\n<b>declare</b> that accept assignment statements\n(<i>declaration</i> commands). When += is applied to a\nvariable for which the <i>integer</i> attribute has been\nset, <i>value</i> is evaluated as an arithmetic expression\nand added to the variable&rsquo;s current value, which is\nalso evaluated. When += is applied to an array variable\nusing compound assignment (see <b>Arrays</b> below), the\nvariable&rsquo;s value is not unset (as it is when using =),\nand new values are appended to the array beginning at one\ngreater than the array&rsquo;s maximum index (for indexed\narrays) or added as additional key-value pairs in an\nassociative array. When applied to a string-valued variable,\n<i>value</i> is expanded and appended to the\nvariable&rsquo;s value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A variable can\nbe assigned the <i>nameref</i> attribute using the <b>-n</b>\noption to the <b>declare</b> or <b>local</b> builtin\ncommands (see the descriptions of <b>declare</b> and\n<b>local</b> below) to create a <i>nameref</i>, or a\nreference to another variable. This allows variables to be\nmanipulated indirectly. Whenever the nameref variable is\nreferenced, assigned to, unset, or has its attributes\nmodified (other than using or changing the <i>nameref</i>\nattribute itself), the operation is actually performed on\nthe variable specified by the nameref variable&rsquo;s\nvalue. A nameref is commonly used within shell functions to\nrefer to a variable whose name is passed as an argument to\nthe function. For instance, if a variable name is passed to\na shell function as its first argument, running</p>\n\n<p style=\"margin-left:22%;\">declare -n ref=$1</p>\n\n<p style=\"margin-left:11%;\">inside the function creates a\nnameref variable <b>ref</b> whose value is the variable name\npassed as the first argument. References and assignments to\n<b>ref</b>, and changes to its attributes, are treated as\nreferences, assignments, and attribute modifications to the\nvariable whose name was passed as <b>$1</b>. If the control\nvariable in a <b>for</b> loop has the nameref attribute, the\nlist of words can be a list of shell variables, and a name\nreference will be established for each word in the list, in\nturn, when the loop is executed. Array variables cannot be\ngiven the <b>nameref</b> attribute. However, nameref\nvariables can reference array variables and subscripted\narray variables. Namerefs can be unset using the <b>-n</b>\noption to the <b>unset</b> builtin. Otherwise, if\n<b>unset</b> is executed with the name of a nameref variable\nas an argument, the variable referenced by the nameref\nvariable will be unset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Positional\nParameters</b> <br>\nA <i>positional parameter</i> is a parameter denoted by one\nor more digits, other than the single digit 0. Positional\nparameters are assigned from the shell&rsquo;s arguments\nwhen it is invoked, and may be reassigned using the\n<b>set</b> builtin command. Positional parameters may not be\nassigned to with assignment statements. The positional\nparameters are temporarily replaced when a shell function is\nexecuted (see <b><small>FUNCTIONS</small></b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a\npositional parameter consisting of more than a single digit\nis expanded, it must be enclosed in braces (see\n<b><small>EXPANSION</small></b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Special\nParameters</b> <br>\nThe shell treats several parameters specially. These\nparameters may only be referenced; assignment to them is not\nallowed.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>*</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Expands to the positional\nparameters, starting from one. When the expansion is not\nwithin double quotes, each positional parameter expands to a\nseparate word. In contexts where it is performed, those\nwords are subject to further word splitting and pathname\nexpansion. When the expansion occurs within double quotes,\nit expands to a single word with the value of each parameter\nseparated by the first character of the\n<b><small>IFS</small></b> special variable. That is,\n&quot;<b>$*</b>&quot; is equivalent to\n&quot;<b>$1</b><i>c</i><b>$2</b><i>c</i><b>...</b>&quot;,\nwhere <i>c</i> is the first character of the value of the\n<b><small>IFS</small></b> variable. If\n<b><small>IFS</small></b> is unset, the parameters are\nseparated by spaces. If <b><small>IFS</small></b> is null,\nthe parameters are joined without intervening\nseparators.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>@</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the positional parameters, starting from one.\nIn contexts where word splitting is performed, this expands\neach positional parameter to a separate word; if not within\ndouble quotes, these words are subject to word splitting. In\ncontexts where word splitting is not performed, this expands\nto a single word with each positional parameter separated by\na space. When the expansion occurs within double quotes,\neach parameter expands to a separate word. That is,\n&quot;<b>$@</b>&quot; is equivalent to &quot;<b>$1</b>&quot;\n&quot;<b>$2</b>&quot; ... If the double-quoted expansion\noccurs within a word, the expansion of the first parameter\nis joined with the beginning part of the original word, and\nthe expansion of the last parameter is joined with the last\npart of the original word. When there are no positional\nparameters, &quot;<b>$@</b>&quot; and <b>$@</b> expand to\nnothing (i.e., they are removed).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>#</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the number of positional parameters in\ndecimal.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>?</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the exit status of the most recently executed\nforeground pipeline.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>-</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the current option flags as specified upon\ninvocation, by the <b>set</b> builtin command, or those set\nby the shell itself (such as the <b>-i</b> option).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>$</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the process ID of the shell. In a ()\nsubshell, it expands to the process ID of the current shell,\nnot the subshell.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>!</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the process ID of the job most recently\nplaced into the background, whether executed as an\nasynchronous command or using the <b>bg</b> builtin (see\n<b><small>JOB CONTROL</small></b> below).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>0</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the name of the shell or shell script. This\nis set at shell initialization. If <b>bash</b> is invoked\nwith a file of commands, <b>$0</b> is set to the name of\nthat file. If <b>bash</b> is started with the <b>-c</b>\noption, then <b>$0</b> is set to the first argument after\nthe string to be executed, if one is present. Otherwise, it\nis set to the filename used to invoke <b>bash</b>, as given\nby argument zero.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Shell\nVariables</b> <br>\nThe following variables are set by the shell:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><b>_</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">At shell startup, set to the\npathname used to invoke the shell or shell script being\nexecuted as passed in the environment or argument list.\nSubsequently, expands to the last argument to the previous\nsimple command executed in the foreground, after expansion.\nAlso set to the full pathname used to invoke each command\nexecuted and placed in the environment exported to that\ncommand. When checking mail, this parameter holds the name\nof the mail file currently being checked.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>BASH</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the full filename used to invoke this\ninstance of <b>bash</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>BASHOPTS</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of\nenabled shell options. Each word in the list is a valid\nargument for the <b>-s</b> option to the <b>shopt</b>\nbuiltin command (see <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below). The options appearing in\n<b><small>BASHOPTS</small></b> are those reported as\n<i>on</i> by <b>shopt</b>. If this variable is in the\nenvironment when <b>bash</b> starts up, each shell option in\nthe list will be enabled before reading any startup files.\nThis variable is read-only.</p>\n\n<p style=\"margin-left:11%;\"><b>BASHPID</b></p>\n\n<p style=\"margin-left:22%;\">Expands to the process ID of\nthe current <b>bash</b> process. This differs from <b>$$</b>\nunder certain circumstances, such as subshells that do not\nrequire <b>bash</b> to be re-initialized. Assignments to\n<b><small>BASHPID</small></b> have no effect. If\n<b>BASHPID</b> is unset, it loses its special properties,\neven if it is subsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_ALIASES</b></p>\n\n<p style=\"margin-left:22%;\">An associative array variable\nwhose members correspond to the internal list of aliases as\nmaintained by the <b>alias</b> builtin. Elements added to\nthis array appear in the alias list; however, unsetting\narray elements currently does not cause aliases to be\nremoved from the alias list. If <b>BASH_ALIASES</b> is\nunset, it loses its special properties, even if it is\nsubsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_ARGC</b></p>\n\n<p style=\"margin-left:22%;\">An array variable whose values\nare the number of parameters in each frame of the current\n<b>bash</b> execution call stack. The number of parameters\nto the current subroutine (shell function or script executed\nwith <b>.</b> or <b>source</b>) is at the top of the stack.\nWhen a subroutine is executed, the number of parameters\npassed is pushed onto\n<b><small>BASH_ARGC</small></b><small>.</small> The shell\nsets <b><small>BASH_ARGC</small></b> only when in extended\ndebugging mode (see the description of the <b>extdebug</b>\noption to the <b>shopt</b> builtin below). Setting\n<b>extdebug</b> after the shell has started to execute a\nscript, or referencing this variable when <b>extdebug</b> is\nnot set, may result in inconsistent values.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_ARGV</b></p>\n\n<p style=\"margin-left:22%;\">An array variable containing\nall of the parameters in the current <b>bash</b> execution\ncall stack. The final parameter of the last subroutine call\nis at the top of the stack; the first parameter of the\ninitial call is at the bottom. When a subroutine is\nexecuted, the parameters supplied are pushed onto\n<b><small>BASH_ARGV</small></b><small>.</small> The shell\nsets <b><small>BASH_ARGV</small></b> only when in extended\ndebugging mode (see the description of the <b>extdebug</b>\noption to the <b>shopt</b> builtin below). Setting\n<b>extdebug</b> after the shell has started to execute a\nscript, or referencing this variable when <b>extdebug</b> is\nnot set, may result in inconsistent values.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_ARGV0</b></p>\n\n<p style=\"margin-left:22%;\">When referenced, this variable\nexpands to the name of the shell or shell script (identical\nto <b>$0</b>; see the description of special parameter 0\nabove). Assignment to <b>BASH_ARGV0</b> causes the value\nassigned to also be assigned to <b>$0</b>. If\n<b>BASH_ARGV0</b> is unset, it loses its special properties,\neven if it is subsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_CMDS</b></p>\n\n<p style=\"margin-left:22%;\">An associative array variable\nwhose members correspond to the internal hash table of\ncommands as maintained by the <b>hash</b> builtin. Elements\nadded to this array appear in the hash table; however,\nunsetting array elements currently does not cause command\nnames to be removed from the hash table. If <b>BASH_CMDS</b>\nis unset, it loses its special properties, even if it is\nsubsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_COMMAND</b></p>\n\n<p style=\"margin-left:22%;\">The command currently being\nexecuted or about to be executed, unless the shell is\nexecuting a command as the result of a trap, in which case\nit is the command executing at the time of the trap. If\n<b>BASH_COMMAND</b> is unset, it loses its special\nproperties, even if it is subsequently reset.</p>\n\n\n<p style=\"margin-left:11%;\"><b>BASH_EXECUTION_STRING</b></p>\n\n<p style=\"margin-left:22%;\">The command argument to the\n<b>-c</b> invocation option.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_LINENO</b></p>\n\n<p style=\"margin-left:22%;\">An array variable whose members\nare the line numbers in source files where each\ncorresponding member of <b><small>FUNCNAME</small></b> was\ninvoked. <b>${BASH_LINENO[</b><i>$i</i><b>]}</b> is the line\nnumber in the source file\n(<b>${BASH_SOURCE[</b><i>$i+1</i><b>]}</b>) where\n<b>${FUNCNAME[</b><i>$i</i><b>]}</b> was called (or\n<b>${BASH_LINENO[</b><i>$i-1</i><b>]}</b> if referenced\nwithin another shell function). Use\n<b><small>LINENO</small></b> to obtain the current line\nnumber.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_LOADABLES_PATH</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of\ndirectories in which the shell looks for dynamically\nloadable builtins specified by the <b>enable</b>\ncommand.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_REMATCH</b></p>\n\n<p style=\"margin-left:22%;\">An array variable whose members\nare assigned by the <b>=~</b> binary operator to the\n<b>[[</b> conditional command. The element with index 0 is\nthe portion of the string matching the entire regular\nexpression. The element with index <i>n</i> is the portion\nof the string matching the <i>n</i>th parenthesized\nsubexpression.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_SOURCE</b></p>\n\n<p style=\"margin-left:22%;\">An array variable whose members\nare the source filenames where the corresponding shell\nfunction names in the <b><small>FUNCNAME</small></b> array\nvariable are defined. The shell function\n<b>${FUNCNAME[</b><i>$i</i><b>]}</b> is defined in the file\n<b>${BASH_SOURCE[</b><i>$i</i><b>]}</b> and called from\n<b>${BASH_SOURCE[</b><i>$i+1</i><b>]}</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_SUBSHELL</b></p>\n\n<p style=\"margin-left:22%;\">Incremented by one within each\nsubshell or subshell environment when the shell begins\nexecuting in that environment. The initial value is 0. If\n<b>BASH_SUBSHELL</b> is unset, it loses its special\nproperties, even if it is subsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_VERSINFO</b></p>\n\n<p style=\"margin-left:22%;\">A readonly array variable whose\nmembers hold version information for this instance of\n<b>bash</b>. The values assigned to the array members are as\nfollows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"24%\">\n\n\n<p><b>BASH_VERSINFO[</b>0<b>]</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"42%\">\n\n\n<p>The major version number (the <i>release</i>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"24%\">\n\n\n<p><b>BASH_VERSINFO[</b>1<b>]</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"42%\">\n\n\n<p>The minor version number (the <i>version</i>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"24%\">\n\n\n<p><b>BASH_VERSINFO[</b>2<b>]</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"42%\">\n\n\n<p>The patch level.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"24%\">\n\n\n<p><b>BASH_VERSINFO[</b>3<b>]</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"42%\">\n\n\n<p>The build version.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"24%\">\n\n\n<p><b>BASH_VERSINFO[</b>4<b>]</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"42%\">\n\n\n<p>The release status (e.g., <i>beta1</i>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"24%\">\n\n\n<p><b>BASH_VERSINFO[</b>5<b>]</b></p></td>\n<td width=\"12%\"></td>\n<td width=\"42%\">\n\n\n<p>The value of\n<b><small>MACHTYPE</small></b><small>.</small></p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>BASH_VERSION</b></p>\n\n<p style=\"margin-left:22%;\">Expands to a string describing\nthe version of this instance of <b>bash</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>COMP_CWORD</b></p>\n\n<p style=\"margin-left:22%;\">An index into\n<b>${COMP_WORDS}</b> of the word containing the current\ncursor position. This variable is available only in shell\nfunctions invoked by the programmable completion facilities\n(see <b>Programmable Completion</b> below).</p>\n\n<p style=\"margin-left:11%;\"><b>COMP_KEY</b></p>\n\n<p style=\"margin-left:22%;\">The key (or final key of a key\nsequence) used to invoke the current completion\nfunction.</p>\n\n<p style=\"margin-left:11%;\"><b>COMP_LINE</b></p>\n\n<p style=\"margin-left:22%;\">The current command line. This\nvariable is available only in shell functions and external\ncommands invoked by the programmable completion facilities\n(see <b>Programmable Completion</b> below).</p>\n\n<p style=\"margin-left:11%;\"><b>COMP_POINT</b></p>\n\n<p style=\"margin-left:22%;\">The index of the current cursor\nposition relative to the beginning of the current command.\nIf the current cursor position is at the end of the current\ncommand, the value of this variable is equal to\n<b>${#COMP_LINE}</b>. This variable is available only in\nshell functions and external commands invoked by the\nprogrammable completion facilities (see <b>Programmable\nCompletion</b> below).</p>\n\n<p style=\"margin-left:11%;\"><b>COMP_TYPE</b></p>\n\n<p style=\"margin-left:22%;\">Set to an integer value\ncorresponding to the type of completion attempted that\ncaused a completion function to be called: <i>TAB</i>, for\nnormal completion, <i>?</i>, for listing completions after\nsuccessive tabs, <i>!</i>, for listing alternatives on\npartial word completion, <i>@</i>, to list completions if\nthe word is not unmodified, or <i>%</i>, for menu\ncompletion. This variable is available only in shell\nfunctions and external commands invoked by the programmable\ncompletion facilities (see <b>Programmable Completion</b>\nbelow).</p>\n\n<p style=\"margin-left:11%;\"><b>COMP_WORDBREAKS</b></p>\n\n<p style=\"margin-left:22%;\">The set of characters that the\n<b>readline</b> library treats as word separators when\nperforming word completion. If\n<b><small>COMP_WORDBREAKS</small></b> is unset, it loses its\nspecial properties, even if it is subsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>COMP_WORDS</b></p>\n\n<p style=\"margin-left:22%;\">An array variable (see\n<b>Arrays</b> below) consisting of the individual words in\nthe current command line. The line is split into words as\n<b>readline</b> would split it, using\n<b><small>COMP_WORDBREAKS</small></b> as described above.\nThis variable is available only in shell functions invoked\nby the programmable completion facilities (see\n<b>Programmable Completion</b> below).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>COPROC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An array variable (see <b>Arrays</b> below) created to\nhold the file descriptors for output from and input to an\nunnamed coprocess (see <b>Coprocesses</b> above).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>DIRSTACK</b></p>\n\n<p style=\"margin-left:22%;\">An array variable (see\n<b>Arrays</b> below) containing the current contents of the\ndirectory stack. Directories appear in the stack in the\norder they are displayed by the <b>dirs</b> builtin.\nAssigning to members of this array variable may be used to\nmodify directories already in the stack, but the\n<b>pushd</b> and <b>popd</b> builtins must be used to add\nand remove directories. Assignment to this variable will not\nchange the current directory. If\n<b><small>DIRSTACK</small></b> is unset, it loses its\nspecial properties, even if it is subsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>EPOCHREALTIME</b></p>\n\n<p style=\"margin-left:22%;\">Each time this parameter is\nreferenced, it expands to the number of seconds since the\nUnix Epoch (see <i>time</i>(3)) as a floating point value\nwith micro-second granularity. Assignments to\n<b><small>EPOCHREALTIME</small></b> are ignored. If\n<b><small>EPOCHREALTIME</small></b> is unset, it loses its\nspecial properties, even if it is subsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>EPOCHSECONDS</b></p>\n\n<p style=\"margin-left:22%;\">Each time this parameter is\nreferenced, it expands to the number of seconds since the\nUnix Epoch (see <i>time</i>(3)). Assignments to\n<b><small>EPOCHSECONDS</small></b> are ignored. If\n<b><small>EPOCHSECONDS</small></b> is unset, it loses its\nspecial properties, even if it is subsequently reset.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>EUID</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the effective user ID of the current user,\ninitialized at shell startup. This variable is readonly.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>FUNCNAME</b></p>\n\n<p style=\"margin-left:22%;\">An array variable containing\nthe names of all shell functions currently in the execution\ncall stack. The element with index 0 is the name of any\ncurrently-executing shell function. The bottom-most element\n(the one with the highest index) is &quot;main&quot;. This\nvariable exists only when a shell function is executing.\nAssignments to <b><small>FUNCNAME</small></b> have no\neffect. If <b><small>FUNCNAME</small></b> is unset, it loses\nits special properties, even if it is subsequently\nreset.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This variable\ncan be used with <b>BASH_LINENO</b> and <b>BASH_SOURCE</b>.\nEach element of <b>FUNCNAME</b> has corresponding elements\nin <b>BASH_LINENO</b> and <b>BASH_SOURCE</b> to describe the\ncall stack. For instance,\n<b>${FUNCNAME[</b><i>$i</i><b>]}</b> was called from the\nfile <b>${BASH_SOURCE[</b><i>$i+1</i><b>]}</b> at line\nnumber <b>${BASH_LINENO[</b><i>$i</i><b>]}</b>. The\n<b>caller</b> builtin displays the current call stack using\nthis information.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>GROUPS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An array variable containing the list of groups of which\nthe current user is a member. Assignments to\n<b><small>GROUPS</small></b> have no effect. If\n<b><small>GROUPS</small></b> is unset, it loses its special\nproperties, even if it is subsequently reset.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>HISTCMD</b></p>\n\n<p style=\"margin-left:22%;\">The history number, or index in\nthe history list, of the current command. Assignments to\n<b><small>HISTCMD</small></b> are ignored. If\n<b><small>HISTCMD</small></b> is unset, it loses its special\nproperties, even if it is subsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>HOSTNAME</b></p>\n\n<p style=\"margin-left:22%;\">Automatically set to the name\nof the current host.</p>\n\n<p style=\"margin-left:11%;\"><b>HOSTTYPE</b></p>\n\n<p style=\"margin-left:22%;\">Automatically set to a string\nthat uniquely describes the type of machine on which\n<b>bash</b> is executing. The default is\nsystem-dependent.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>LINENO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Each time this parameter is referenced, the shell\nsubstitutes a decimal number representing the current\nsequential line number (starting with 1) within a script or\nfunction. When not in a script or function, the value\nsubstituted is not guaranteed to be meaningful. If\n<b><small>LINENO</small></b> is unset, it loses its special\nproperties, even if it is subsequently reset.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>MACHTYPE</b></p>\n\n<p style=\"margin-left:22%;\">Automatically set to a string\nthat fully describes the system type on which <b>bash</b> is\nexecuting, in the standard GNU <i>cpu-company-system</i>\nformat. The default is system-dependent.</p>\n\n<p style=\"margin-left:11%;\"><b>MAPFILE</b></p>\n\n<p style=\"margin-left:22%;\">An array variable (see\n<b>Arrays</b> below) created to hold the text read by the\n<b>mapfile</b> builtin when no variable name is\nsupplied.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OLDPWD</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The previous working directory as set by the <b>cd</b>\ncommand.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OPTARG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The value of the last option argument processed by the\n<b>getopts</b> builtin command (see <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OPTIND</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The index of the next argument to be processed by the\n<b>getopts</b> builtin command (see <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OSTYPE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Automatically set to a string that describes the\noperating system on which <b>bash</b> is executing. The\ndefault is system-dependent.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>PIPESTATUS</b></p>\n\n<p style=\"margin-left:22%;\">An array variable (see\n<b>Arrays</b> below) containing a list of exit status values\nfrom the processes in the most-recently-executed foreground\npipeline (which may contain only a single command).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>PPID</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The process ID of the shell&rsquo;s parent. This\nvariable is readonly.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>PWD</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The current working directory as set by the <b>cd</b>\ncommand.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>RANDOM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Each time this parameter is referenced, it expands to a\nrandom integer between 0 and 32767. Assigning a value to\n<b><small>RANDOM</small></b> initializes (seeds) the\nsequence of random numbers. If <b><small>RANDOM</small></b>\nis unset, it loses its special properties, even if it is\nsubsequently reset.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>READLINE_LINE</b></p>\n\n<p style=\"margin-left:22%;\">The contents of the\n<b>readline</b> line buffer, for use with &quot;bind\n-x&quot; (see <b><small>SHELL BUILTIN COMMANDS</small></b>\nbelow).</p>\n\n<p style=\"margin-left:11%;\"><b>READLINE_MARK</b></p>\n\n<p style=\"margin-left:22%;\">The position of the mark (saved\ninsertion point) in the <b>readline</b> line buffer, for use\nwith &quot;bind -x&quot; (see <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below). The characters between the\ninsertion point and the mark are often called the\n<i>region</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>READLINE_POINT</b></p>\n\n<p style=\"margin-left:22%;\">The position of the insertion\npoint in the <b>readline</b> line buffer, for use with\n&quot;bind -x&quot; (see <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>REPLY</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Set to the line of input read by the <b>read</b> builtin\ncommand when no arguments are supplied.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>SECONDS</b></p>\n\n<p style=\"margin-left:22%;\">Each time this parameter is\nreferenced, the number of seconds since shell invocation is\nreturned. If a value is assigned to\n<b><small>SECONDS</small></b><small>,</small> the value\nreturned upon subsequent references is the number of seconds\nsince the assignment plus the value assigned. The number of\nseconds at shell invocation and the current time is always\ndetermined by querying the system clock. If\n<b><small>SECONDS</small></b> is unset, it loses its special\nproperties, even if it is subsequently reset.</p>\n\n<p style=\"margin-left:11%;\"><b>SHELLOPTS</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of\nenabled shell options. Each word in the list is a valid\nargument for the <b>-o</b> option to the <b>set</b> builtin\ncommand (see <b><small>SHELL BUILTIN COMMANDS</small></b>\nbelow). The options appearing in\n<b><small>SHELLOPTS</small></b> are those reported as\n<i>on</i> by <b>set -o</b>. If this variable is in the\nenvironment when <b>bash</b> starts up, each shell option in\nthe list will be enabled before reading any startup files.\nThis variable is read-only.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>SHLVL</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Incremented by one each time an instance of <b>bash</b>\nis started.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>SRANDOM</b></p>\n\n<p style=\"margin-left:22%;\">This variable expands to a\n32-bit pseudo-random number each time it is referenced. The\nrandom number generator is not linear on systems that\nsupport /dev/urandom or <i>arc4random</i>, so each returned\nnumber has no relationship to the numbers preceding it. The\nrandom number generator cannot be seeded, so assignments to\nthis variable have no effect. If\n<b><small>SRANDOM</small></b> is unset, it loses its special\nproperties, even if it is subsequently reset.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>UID</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to the user ID of the current user, initialized\nat shell startup. This variable is readonly.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvariables are used by the shell. In some cases, <b>bash</b>\nassigns a default value to a variable; these cases are noted\nbelow. <b><br>\nBASH_COMPAT</b></p>\n\n<p style=\"margin-left:22%;\">The value is used to set the\nshell&rsquo;s compatibility level. See <b><small>SHELL\nCOMPATIBILITY MODE</small></b> below for a description of\nthe various compatibility levels and their effects. The\nvalue may be a decimal number (e.g., 4.2) or an integer\n(e.g., 42) corresponding to the desired compatibility level.\nIf <b>BASH_COMPAT</b> is unset or set to the empty string,\nthe compatibility level is set to the default for the\ncurrent version. If <b>BASH_COMPAT</b> is set to a value\nthat is not one of the valid compatibility levels, the shell\nprints an error message and sets the compatibility level to\nthe default for the current version. The valid values\ncorrespond to the compatibility levels described below under\n<b><small>BSHELL</small></b><small>COMPATIBILITY<b>MODE</b>.</small>\nFor example, 4.2 and 42 are valid values that correspond to\nthe <b>compat42 shopt</b> option and set the compatibility\nlevel to 42. The current version is also a valid value.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_ENV</b></p>\n\n<p style=\"margin-left:22%;\">If this parameter is set when\n<b>bash</b> is executing a shell script, its value is\ninterpreted as a filename containing commands to initialize\nthe shell, as in <i>~/.bashrc</i>. The value of\n<b><small>BASH_ENV</small></b> is subjected to parameter\nexpansion, command substitution, and arithmetic expansion\nbefore being interpreted as a filename.\n<b><small>PATH</small></b> is not used to search for the\nresultant filename.</p>\n\n<p style=\"margin-left:11%;\"><b>BASH_XTRACEFD</b></p>\n\n<p style=\"margin-left:22%;\">If set to an integer\ncorresponding to a valid file descriptor, <b>bash</b> will\nwrite the trace output generated when <i>set -x</i> is\nenabled to that file descriptor. The file descriptor is\nclosed when <b><small>BASH_XTRACEFD</small></b> is unset or\nassigned a new value. Unsetting\n<b><small>BASH_XTRACEFD</small></b> or assigning it the\nempty string causes the trace output to be sent to the\nstandard error. Note that setting\n<b><small>BASH_XTRACEFD</small></b> to 2 (the standard error\nfile descriptor) and then unsetting it will result in the\nstandard error being closed.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CDPATH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The search path for the <b>cd</b> command. This is a\ncolon-separated list of directories in which the shell looks\nfor destination directories specified by the <b>cd</b>\ncommand. A sample value is &quot;.:~:/usr&quot;.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CHILD_MAX</b></p>\n\n<p style=\"margin-left:22%;\">Set the number of exited child\nstatus values for the shell to remember. Bash will not allow\nthis value to be decreased below a POSIX-mandated minimum,\nand there is a maximum value (currently 8192) that this may\nnot exceed. The minimum value is system-dependent.</p>\n\n<p style=\"margin-left:11%;\"><b>COLUMNS</b></p>\n\n<p style=\"margin-left:22%;\">Used by the <b>select</b>\ncompound command to determine the terminal width when\nprinting selection lists. Automatically set if the\n<b>checkwinsize</b> option is enabled or in an interactive\nshell upon receipt of a\n<b><small>SIGWINCH</small></b><small>.</small></p>\n\n<p style=\"margin-left:11%;\"><b>COMPREPLY</b></p>\n\n<p style=\"margin-left:22%;\">An array variable from which\n<b>bash</b> reads the possible completions generated by a\nshell function invoked by the programmable completion\nfacility (see <b>Programmable Completion</b> below). Each\narray element contains one possible completion.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EMACS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>If <b>bash</b> finds this variable in the environment\nwhen the shell starts with value &quot;t&quot;, it assumes\nthat the shell is running in an Emacs shell buffer and\ndisables line editing.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ENV</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Expanded and executed similarly to\n<b><small>BASH_ENV</small></b> (see <b>INVOCATION</b> above)\nwhen an interactive shell is invoked in <i>posix\nmode</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EXECIGNORE</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of shell\npatterns (see <b>Pattern Matching</b>) defining the list of\nfilenames to be ignored by command search using <b>PATH</b>.\nFiles whose full pathnames match one of these patterns are\nnot considered executable files for the purposes of\ncompletion and command execution via <b>PATH</b> lookup.\nThis does not affect the behavior of the <b>[</b>,\n<b>test</b>, and <b>[[</b> commands. Full pathnames in the\ncommand hash table are not subject to <b>EXECIGNORE</b>. Use\nthis variable to ignore shared library files that have the\nexecutable bit set, but are not executable files. The\npattern matching honors the setting of the <b>extglob</b>\nshell option.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FCEDIT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"70%\">\n\n\n<p>The default editor for the <b>fc</b> builtin\ncommand.</p> </td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>FIGNORE</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of\nsuffixes to ignore when performing filename completion (see\n<b><small>READLINE</small></b> below). A filename whose\nsuffix matches one of the entries in\n<b><small>FIGNORE</small></b> is excluded from the list of\nmatched filenames. A sample value is &quot;.o:~&quot;\n(Quoting is needed when assigning a value to this variable,\nwhich contains tildes).</p>\n\n<p style=\"margin-left:11%;\"><b>FUNCNEST</b></p>\n\n<p style=\"margin-left:22%;\">If set to a numeric value\ngreater than 0, defines a maximum function nesting level.\nFunction invocations that exceed this nesting level will\ncause the current command to abort.</p>\n\n<p style=\"margin-left:11%;\"><b>GLOBIGNORE</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of\npatterns defining the set of file names to be ignored by\npathname expansion. If a file name matched by a pathname\nexpansion pattern also matches one of the patterns in\n<b><small>GLOBIGNORE</small></b><small>,</small> it is\nremoved from the list of matches.</p>\n\n<p style=\"margin-left:11%;\"><b>HISTCONTROL</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of\nvalues controlling how commands are saved on the history\nlist. If the list of values includes <i>ignorespace</i>,\nlines which begin with a <b>space</b> character are not\nsaved in the history list. A value of <i>ignoredups</i>\ncauses lines matching the previous history entry to not be\nsaved. A value of <i>ignoreboth</i> is shorthand for\n<i>ignorespace</i> and <i>ignoredups</i>. A value of\n<i>erasedups</i> causes all previous lines matching the\ncurrent line to be removed from the history list before that\nline is saved. Any value not in the above list is ignored.\nIf <b><small>HISTCONTROL</small></b> is unset, or does not\ninclude a valid value, all lines read by the shell parser\nare saved on the history list, subject to the value of\n<b><small>HISTIGNORE</small></b><small>.</small> The second\nand subsequent lines of a multi-line compound command are\nnot tested, and are added to the history regardless of the\nvalue of\n<b><small>HISTCONTROL</small></b><small>.</small></p>\n\n<p style=\"margin-left:11%;\"><b>HISTFILE</b></p>\n\n<p style=\"margin-left:22%;\">The name of the file in which\ncommand history is saved (see <b><small>HISTORY</small></b>\nbelow). The default value is <i>~/.bash_history</i>. If\nunset, the command history is not saved when a shell\nexits.</p>\n\n<p style=\"margin-left:11%;\"><b>HISTFILESIZE</b></p>\n\n<p style=\"margin-left:22%;\">The maximum number of lines\ncontained in the history file. When this variable is\nassigned a value, the history file is truncated, if\nnecessary, to contain no more than that number of lines by\nremoving the oldest entries. The history file is also\ntruncated to this size after writing it when a shell exits.\nIf the value is 0, the history file is truncated to zero\nsize. Non-numeric values and numeric values less than zero\ninhibit truncation. The shell sets the default value to the\nvalue of <b>HISTSIZE</b> after reading any startup\nfiles.</p>\n\n<p style=\"margin-left:11%;\"><b>HISTIGNORE</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of\npatterns used to decide which command lines should be saved\non the history list. Each pattern is anchored at the\nbeginning of the line and must match the complete line (no\nimplicit &rsquo;<b>*</b>&rsquo; is appended). Each pattern\nis tested against the line after the checks specified by\n<b><small>HISTCONTROL</small></b> are applied. In addition\nto the normal shell pattern matching characters,\n&rsquo;<b>&amp;</b>&rsquo; matches the previous history\nline. &rsquo;<b>&amp;</b>&rsquo; may be escaped using a\nbackslash; the backslash is removed before attempting a\nmatch. The second and subsequent lines of a multi-line\ncompound command are not tested, and are added to the\nhistory regardless of the value of\n<b><small>HISTIGNORE</small></b><small>.</small> The pattern\nmatching honors the setting of the <b>extglob</b> shell\noption.</p>\n\n<p style=\"margin-left:11%;\"><b>HISTSIZE</b></p>\n\n<p style=\"margin-left:22%;\">The number of commands to\nremember in the command history (see\n<b><small>HISTORY</small></b> below). If the value is 0,\ncommands are not saved in the history list. Numeric values\nless than zero result in every command being saved on the\nhistory list (there is no limit). The shell sets the default\nvalue to 500 after reading any startup files.</p>\n\n<p style=\"margin-left:11%;\"><b>HISTTIMEFORMAT</b></p>\n\n<p style=\"margin-left:22%;\">If this variable is set and not\nnull, its value is used as a format string for\n<i>strftime</i>(3) to print the time stamp associated with\neach history entry displayed by the <b>history</b> builtin.\nIf this variable is set, time stamps are written to the\nhistory file so they may be preserved across shell sessions.\nThis uses the history comment character to distinguish\ntimestamps from other history lines.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>HOME</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>The home directory of the current user; the default\nargument for the <b>cd</b> builtin command. The value of\nthis variable is also used when performing tilde\nexpansion.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>HOSTFILE</b></p>\n\n<p style=\"margin-left:22%;\">Contains the name of a file in\nthe same format as <i>/etc/hosts</i> that should be read\nwhen the shell needs to complete a hostname. The list of\npossible hostname completions may be changed while the shell\nis running; the next time hostname completion is attempted\nafter the value is changed, <b>bash</b> adds the contents of\nthe new file to the existing list. If\n<b><small>HOSTFILE</small></b> is set, but has no value, or\ndoes not name a readable file, <b>bash</b> attempts to read\n<i>/etc/hosts</i> to obtain the list of possible hostname\ncompletions. When <b><small>HOSTFILE</small></b> is unset,\nthe hostname list is cleared.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>IFS</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>Internal Field Separator</i> that is used for\nword splitting after expansion and to split lines into words\nwith the <b>read</b> builtin command. The default value is\n&rsquo;&rsquo;&lt;space&gt;&lt;tab&gt;&lt;newline&gt;&rsquo;&rsquo;.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>IGNOREEOF</b></p>\n\n<p style=\"margin-left:22%;\">Controls the action of an\ninteractive shell on receipt of an <b><small>EOF</small></b>\ncharacter as the sole input. If set, the value is the number\nof consecutive <b><small>EOF</small></b> characters which\nmust be typed as the first characters on an input line\nbefore <b>bash</b> exits. If the variable exists but does\nnot have a numeric value, or has no value, the default value\nis 10. If it does not exist, <b><small>EOF</small></b>\nsignifies the end of input to the shell.</p>\n\n<p style=\"margin-left:11%;\"><b>INPUTRC</b></p>\n\n<p style=\"margin-left:22%;\">The filename for the\n<b>readline</b> startup file, overriding the default of\n<i>~/.inputrc</i> (see <b><small>READLINE</small></b>\nbelow).</p>\n\n<p style=\"margin-left:11%;\"><b>INSIDE_EMACS</b></p>\n\n<p style=\"margin-left:22%;\">If this variable appears in the\nenvironment when the shell starts, <b>bash</b> assumes that\nit is running inside an Emacs shell buffer and may disable\nline editing, depending on the value of <b>TERM</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>LANG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Used to determine the locale category for any category\nnot specifically selected with a variable starting with\n<b>LC_</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>LC_ALL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This variable overrides the value of\n<b><small>LANG</small></b> and any other <b>LC_</b> variable\nspecifying a locale category.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>LC_COLLATE</b></p>\n\n<p style=\"margin-left:22%;\">This variable determines the\ncollation order used when sorting the results of pathname\nexpansion, and determines the behavior of range expressions,\nequivalence classes, and collating sequences within pathname\nexpansion and pattern matching.</p>\n\n<p style=\"margin-left:11%;\"><b>LC_CTYPE</b></p>\n\n<p style=\"margin-left:22%;\">This variable determines the\ninterpretation of characters and the behavior of character\nclasses within pathname expansion and pattern matching.</p>\n\n<p style=\"margin-left:11%;\"><b>LC_MESSAGES</b></p>\n\n<p style=\"margin-left:22%;\">This variable determines the\nlocale used to translate double-quoted strings preceded by a\n<b>$</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>LC_NUMERIC</b></p>\n\n<p style=\"margin-left:22%;\">This variable determines the\nlocale category used for number formatting.</p>\n\n<p style=\"margin-left:11%;\"><b>LC_TIME</b></p>\n\n<p style=\"margin-left:22%;\">This variable determines the\nlocale category used for data and time formatting.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>LINES</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Used by the <b>select</b> compound command to determine\nthe column length for printing selection lists.\nAutomatically set if the <b>checkwinsize</b> option is\nenabled or in an interactive shell upon receipt of a\n<b><small>SIGWINCH</small></b><small>.</small></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>MAIL</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>If this parameter is set to a file or directory name and\nthe <b><small>MAILPATH</small></b> variable is not set,\n<b>bash</b> informs the user of the arrival of mail in the\nspecified file or Maildir-format directory.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>MAILCHECK</b></p>\n\n<p style=\"margin-left:22%;\">Specifies how often (in\nseconds) <b>bash</b> checks for mail. The default is 60\nseconds. When it is time to check for mail, the shell does\nso before displaying the primary prompt. If this variable is\nunset, or set to a value that is not a number greater than\nor equal to zero, the shell disables mail checking.</p>\n\n<p style=\"margin-left:11%;\"><b>MAILPATH</b></p>\n\n<p style=\"margin-left:22%;\">A colon-separated list of\nfilenames to be checked for mail. The message to be printed\nwhen mail arrives in a particular file may be specified by\nseparating the filename from the message with a\n&rsquo;?&rsquo;. When used in the text of the message,\n<b>$_</b> expands to the name of the current mailfile.\nExample: <b><br>\nMAILPATH</b>='/var/mail/bfox?&quot;You have\nmail&quot;:~/shell-mail?&quot;$_ has mail!&quot;' <b><br>\nBash</b> can be configured to supply a default value for\nthis variable (there is no value by default), but the\nlocation of the user mail files that it uses is system\ndependent (e.g., /var/mail/<b>$USER</b>).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OPTERR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>If set to the value 1, <b>bash</b> displays error\nmessages generated by the <b>getopts</b> builtin command\n(see <b><small>SHELL BUILTIN COMMANDS</small></b> below).\n<b><small>OPTERR</small></b> is initialized to 1 each time\nthe shell is invoked or a shell script is executed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>PATH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The search path for commands. It is a colon-separated\nlist of directories in which the shell looks for commands\n(see <b><small>COMMAND EXECUTION</small></b> below). A\nzero-length (null) directory name in the value of\n<b><small>PATH</small></b> indicates the current directory.\nA null directory name may appear as two adjacent colons, or\nas an initial or trailing colon. The default path is\nsystem-dependent, and is set by the administrator who\ninstalls <b>bash</b>. A common value is\n&rsquo;&rsquo;/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:\n/sbin&rsquo;&rsquo;.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>POSIXLY_CORRECT</b></p>\n\n<p style=\"margin-left:22%;\">If this variable is in the\nenvironment when <b>bash</b> starts, the shell enters\n<i>posix mode</i> before reading the startup files, as if\nthe <b>--posix</b> invocation option had been supplied. If\nit is set while the shell is running, <b>bash</b> enables\n<i>posix mode</i>, as if the command <i>set -o posix</i> had\nbeen executed. When the shell enters <i>posix mode</i>, it\nsets this variable if it was not already set.</p>\n\n<p style=\"margin-left:11%;\"><b>PROMPT_COMMAND</b></p>\n\n<p style=\"margin-left:22%;\">If this variable is set, and is\nan array, the value of each set element is executed as a\ncommand prior to issuing each primary prompt. If this is set\nbut not an array variable, its value is used as a command to\nexecute instead.</p>\n\n<p style=\"margin-left:11%;\"><b>PROMPT_DIRTRIM</b></p>\n\n<p style=\"margin-left:22%;\">If set to a number greater than\nzero, the value is used as the number of trailing directory\ncomponents to retain when expanding the <b>\\w</b> and\n<b>\\W</b> prompt string escapes (see\n<b><small>PROMPTING</small></b> below). Characters removed\nare replaced with an ellipsis.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>PS0</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The value of this parameter is expanded (see\n<b><small>PROMPTING</small></b> below) and displayed by\ninteractive shells after reading a command and before the\ncommand is executed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>PS1</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The value of this parameter is expanded (see\n<b><small>PROMPTING</small></b> below) and used as the\nprimary prompt string. The default value is\n&rsquo;&rsquo;<b>\\s-\\v\\$</b> &rsquo;&rsquo;.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>PS2</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The value of this parameter is expanded as with\n<b><small>PS1</small></b> and used as the secondary prompt\nstring. The default is &rsquo;&rsquo;<b>&gt;</b>\n&rsquo;&rsquo;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>PS3</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The value of this parameter is used as the prompt for\nthe <b>select</b> command (see <b><small>SHELL\nGRAMMAR</small></b> above).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>PS4</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The value of this parameter is expanded as with\n<b><small>PS1</small></b> and the value is printed before\neach command <b>bash</b> displays during an execution trace.\nThe first character of the expanded value of\n<b><small>PS4</small></b> is replicated multiple times, as\nnecessary, to indicate multiple levels of indirection. The\ndefault is &rsquo;&rsquo;<b>+</b> &rsquo;&rsquo;.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>SHELL</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This variable expands to the full pathname to the shell.\nIf it is not set when the shell starts, <b>bash</b> assigns\nto it the full pathname of the current user&rsquo;s login\nshell.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>TIMEFORMAT</b></p>\n\n<p style=\"margin-left:22%;\">The value of this parameter is\nused as a format string specifying how the timing\ninformation for pipelines prefixed with the <b>time</b>\nreserved word should be displayed. The <b>%</b> character\nintroduces an escape sequence that is expanded to a time\nvalue or other information. The escape sequences and their\nmeanings are as follows; the braces denote optional\nportions.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"12%\">\n\n\n<p><b>%%</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>A literal <b>%</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"12%\">\n\n\n<p><b>%[</b><i>p</i><b>][l]R</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>The elapsed time in seconds.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"12%\">\n\n\n<p><b>%[</b><i>p</i><b>][l]U</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>The number of CPU seconds spent in user mode.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"12%\">\n\n\n<p><b>%[</b><i>p</i><b>][l]S</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>The number of CPU seconds spent in system mode.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"12%\">\n\n\n<p><b>%P</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>The CPU percentage, computed as (%U + %S) / %R.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The optional\n<i>p</i> is a digit specifying the <i>precision</i>, the\nnumber of fractional digits after a decimal point. A value\nof 0 causes no decimal point or fraction to be output. At\nmost three places after the decimal point may be specified;\nvalues of <i>p</i> greater than 3 are changed to 3. If\n<i>p</i> is not specified, the value 3 is used.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The optional\n<b>l</b> specifies a longer format, including minutes, of\nthe form <i>MM</i>m<i>SS</i>.<i>FF</i>s. The value of\n<i>p</i> determines whether or not the fraction is\nincluded.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this\nvariable is not set, <b>bash</b> acts as if it had the value\n<b>$'\\nreal\\t%3lR\\nuser\\t%3lU\\nsys\\t%3lS'</b>. If the value\nis null, no timing information is displayed. A trailing\nnewline is added when the format string is displayed.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>TMOUT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">If set to a value greater than\nzero, <b><small>TMOUT</small></b> is treated as the default\ntimeout for the <b>read</b> builtin. The <b>select</b>\ncommand terminates if input does not arrive after\n<b><small>TMOUT</small></b> seconds when input is coming\nfrom a terminal. In an interactive shell, the value is\ninterpreted as the number of seconds to wait for a line of\ninput after issuing the primary prompt. <b>Bash</b>\nterminates after waiting for that number of seconds if a\ncomplete line of input does not arrive.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>TMPDIR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>If set, <b>bash</b> uses its value as the name of a\ndirectory in which <b>bash</b> creates temporary files for\nthe shell&rsquo;s use.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>auto_resume</b></p>\n\n<p style=\"margin-left:22%;\">This variable controls how the\nshell interacts with the user and job control. If this\nvariable is set, single word simple commands without\nredirections are treated as candidates for resumption of an\nexisting stopped job. There is no ambiguity allowed; if\nthere is more than one job beginning with the string typed,\nthe job most recently accessed is selected. The <i>name</i>\nof a stopped job, in this context, is the command line used\nto start it. If set to the value <i>exact</i>, the string\nsupplied must match the name of a stopped job exactly; if\nset to <i>substring</i>, the string supplied needs to match\na substring of the name of a stopped job. The\n<i>substring</i> value provides functionality analogous to\nthe <b>%?</b> job identifier (see <b><small>JOB\nCONTROL</small></b> below). If set to any other value, the\nsupplied string must be a prefix of a stopped job&rsquo;s\nname; this provides functionality analogous to the\n<b>%</b><i>string</i> job identifier.</p>\n\n<p style=\"margin-left:11%;\"><b>histchars</b></p>\n\n<p style=\"margin-left:22%;\">The two or three characters\nwhich control history expansion and tokenization (see\n<b><small>HISTORY EXPANSION</small></b> below). The first\ncharacter is the <i>history expansion</i> character, the\ncharacter which signals the start of a history expansion,\nnormally &rsquo;<b>!</b>&rsquo;. The second character is the\n<i>quick substitution</i> character, which is used as\nshorthand for re-running the previous command entered,\nsubstituting one string for another in the command. The\ndefault is &rsquo;<b>^</b>&rsquo;. The optional third\ncharacter is the character which indicates that the\nremainder of the line is a comment when found as the first\ncharacter of a word, normally &rsquo;<b>#</b>&rsquo;. The\nhistory comment character causes history substitution to be\nskipped for the remaining words on the line. It does not\nnecessarily cause the shell parser to treat the rest of the\nline as a comment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Arrays <br>\nBash</b> provides one-dimensional indexed and associative\narray variables. Any variable may be used as an indexed\narray; the <b>declare</b> builtin will explicitly declare an\narray. There is no maximum limit on the size of an array,\nnor any requirement that members be indexed or assigned\ncontiguously. Indexed arrays are referenced using integers\n(including arithmetic expressions) and are zero-based;\nassociative arrays are referenced using arbitrary strings.\nUnless otherwise noted, indexed array indices must be\nnon-negative integers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An indexed\narray is created automatically if any variable is assigned\nto using the syntax\n<i>name</i>[<i>subscript</i>]=<i>value</i>. The\n<i>subscript</i> is treated as an arithmetic expression that\nmust evaluate to a number. To explicitly declare an indexed\narray, use <b>declare -a</b> <i>name</i> (see\n<b><small>SHELL BUILTIN COMMANDS</small></b> below).\n<b>declare -a</b>\n<i>name</i><b>[</b><i>subscript</i><b>]</b> is also\naccepted; the <i>subscript</i> is ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Associative\narrays are created using <b>declare -A</b> <i>name</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Attributes may\nbe specified for an array variable using the <b>declare</b>\nand <b>readonly</b> builtins. Each attribute applies to all\nmembers of an array.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Arrays are\nassigned to using compound assignments of the form\n<i>name</i>=<b>(</b>value<i>1</i> ... value<i>n</i><b>)</b>,\nwhere each <i>value</i> may be of the form\n[<i>subscript</i>]=<i>string</i>. Indexed array assignments\ndo not require anything but <i>string</i>. Each <i>value</i>\nin the list is expanded using all the shell expansions\ndescribed below under\n<b><small>EXPANSION</small></b><small>.</small> When\nassigning to indexed arrays, if the optional brackets and\nsubscript are supplied, that index is assigned to; otherwise\nthe index of the element assigned is the last index assigned\nto by the statement plus one. Indexing starts at zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When assigning\nto an associative array, the words in a compound assignment\nmay be either assignment statements, for which the subscript\nis required, or a list of words that is interpreted as a\nsequence of alternating keys and values:\n<i>name</i>=<b>(</b> <i>key1 value1 key2 value2</i>\n...<b>)</b>. These are treated identically to\n<i>name</i>=<b>(</b> [<i>key1</i>]=<i>value1</i>\n[<i>key2</i>]=<i>value2</i> ...<b>)</b>. The first word in\nthe list determines how the remaining words are interpreted;\nall assignments in a list must be of the same type. When\nusing key/value pairs, the keys may not be missing or empty;\na final missing value is treated like the empty string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This syntax is\nalso accepted by the <b>declare</b> builtin. Individual\narray elements may be assigned to using the\n<i>name</i>[<i>subscript</i>]=<i>value</i> syntax introduced\nabove. When assigning to an indexed array, if <i>name</i> is\nsubscripted by a negative number, that number is interpreted\nas relative to one greater than the maximum index of\n<i>name</i>, so negative indices count back from the end of\nthe array, and an index of -1 references the last\nelement.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any element of\nan array may be referenced using\n${<i>name</i>[<i>subscript</i>]}. The braces are required to\navoid conflicts with pathname expansion. If <i>subscript</i>\nis <b>@</b> or <b>*</b>, the word expands to all members of\n<i>name</i>. These subscripts differ only when the word\nappears within double quotes. If the word is double-quoted,\n${<i>name</i>[*]} expands to a single word with the value of\neach array member separated by the first character of the\n<b><small>IFS</small></b> special variable, and\n${<i>name</i>[@]} expands each element of <i>name</i> to a\nseparate word. When there are no array members,\n${<i>name</i>[@]} expands to nothing. If the double-quoted\nexpansion occurs within a word, the expansion of the first\nparameter is joined with the beginning part of the original\nword, and the expansion of the last parameter is joined with\nthe last part of the original word. This is analogous to the\nexpansion of the special parameters <b>*</b> and <b>@</b>\n(see <b>Special Parameters</b> above).\n${#<i>name</i>[<i>subscript</i>]} expands to the length of\n${<i>name</i>[<i>subscript</i>]}. If <i>subscript</i> is\n<b>*</b> or <b>@</b>, the expansion is the number of\nelements in the array. If the <i>subscript</i> used to\nreference an element of an indexed array evaluates to a\nnumber less than zero, it is interpreted as relative to one\ngreater than the maximum index of the array, so negative\nindices count back from the end of the array, and an index\nof -1 references the last element.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Referencing an\narray variable without a subscript is equivalent to\nreferencing the array with a subscript of 0. Any reference\nto a variable using a valid subscript is legal, and\n<b>bash</b> will create an array if necessary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An array\nvariable is considered set if a subscript has been assigned\na value. The null string is a valid value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is possible\nto obtain the keys (indices) of an array as well as the\nvalues. ${<b>!</b><i>name</i>[<i>@</i>]} and\n${<b>!</b><i>name</i>[<i>*</i>]} expand to the indices\nassigned in array variable <i>name</i>. The treatment when\nin double quotes is similar to the expansion of the special\nparameters <i>@</i> and <i>*</i> within double quotes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>unset</b> builtin is used to destroy arrays. <b>unset</b>\n<i>name</i>[<i>subscript</i>] destroys the array element at\nindex <i>subscript</i>, for both indexed and associative\narrays. Negative subscripts to indexed arrays are\ninterpreted as described above. Unsetting the last element\nof an array variable does not unset the variable.\n<b>unset</b> <i>name</i>, where <i>name</i> is an array, or\n<b>unset</b> <i>name</i>[<i>subscript</i>], where\n<i>subscript</i> is <b>*</b> or <b>@</b>, removes the entire\narray.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using a\nvariable name with a subscript as an argument to a command,\nsuch as with <b>unset</b>, without using the word expansion\nsyntax described above, the argument is subject to pathname\nexpansion. If pathname expansion is not desired, the\nargument should be quoted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>declare</b>, <b>local</b>, and <b>readonly</b> builtins\neach accept a <b>-a</b> option to specify an indexed array\nand a <b>-A</b> option to specify an associative array. If\nboth options are supplied, <b>-A</b> takes precedence. The\n<b>read</b> builtin accepts a <b>-a</b> option to assign a\nlist of words read from the standard input to an array. The\n<b>set</b> and <b>declare</b> builtins display array values\nin a way that allows them to be reused as assignments.</p>\n\n<h2>EXPANSION\n<a name=\"EXPANSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Expansion is\nperformed on the command line after it has been split into\nwords. There are seven kinds of expansion performed:\n<i>brace expansion</i>, <i>tilde expansion</i>, <i>parameter\nand variable expansion</i>, <i>command substitution</i>,\n<i>arithmetic expansion</i>, <i>word splitting</i>, and\n<i>pathname expansion</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The order of\nexpansions is: brace expansion; tilde expansion, parameter\nand variable expansion, arithmetic expansion, and command\nsubstitution (done in a left-to-right fashion); word\nsplitting; and pathname expansion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On systems that\ncan support it, there is an additional expansion available:\n<i>process substitution</i>. This is performed at the same\ntime as tilde, parameter, variable, and arithmetic expansion\nand command substitution.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After these\nexpansions are performed, quote characters present in the\noriginal word are removed unless they have been quoted\nthemselves (<i>quote removal</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only brace\nexpansion, word splitting, and pathname expansion can\nincrease the number of words of the expansion; other\nexpansions expand a single word to a single word. The only\nexceptions to this are the expansions of\n&quot;<b>$@</b>&quot; and\n&quot;<b>${</b><i>name</i><b>[@]}</b>&quot;, and, in most\ncases, <b>$*</b> and <b>${</b><i>name</i><b>[*]}</b> as\nexplained above (see\n<b><small>PARAMETERS</small></b><small>).</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Brace\nExpansion</b> <i><br>\nBrace expansion</i> is a mechanism by which arbitrary\nstrings may be generated. This mechanism is similar to\n<i>pathname expansion</i>, but the filenames generated need\nnot exist. Patterns to be brace expanded take the form of an\noptional <i>preamble</i>, followed by either a series of\ncomma-separated strings or a sequence expression between a\npair of braces, followed by an optional <i>postscript</i>.\nThe preamble is prefixed to each string contained within the\nbraces, and the postscript is then appended to each\nresulting string, expanding left to right.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Brace\nexpansions may be nested. The results of each expanded\nstring are not sorted; left to right order is preserved. For\nexample, a<b>{</b>d,c,b<b>}</b>e expands into &rsquo;ade ace\nabe&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A sequence\nexpression takes the form\n<b>{</b><i>x</i><b>..</b><i>y</i><b>[..</b><i>incr</i><b>]}</b>,\nwhere <i>x</i> and <i>y</i> are either integers or single\ncharacters, and <i>incr</i>, an optional increment, is an\ninteger. When integers are supplied, the expression expands\nto each number between <i>x</i> and <i>y</i>, inclusive.\nSupplied integers may be prefixed with <i>0</i> to force\neach term to have the same width. When either <i>x</i> or\n<i>y</i> begins with a zero, the shell attempts to force all\ngenerated terms to contain the same number of digits,\nzero-padding where necessary. When characters are supplied,\nthe expression expands to each character lexicographically\nbetween <i>x</i> and <i>y</i>, inclusive, using the default\nC locale. Note that both <i>x</i> and <i>y</i> must be of\nthe same type. When the increment is supplied, it is used as\nthe difference between each term. The default increment is 1\nor -1 as appropriate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Brace expansion\nis performed before any other expansions, and any characters\nspecial to other expansions are preserved in the result. It\nis strictly textual. <b>Bash</b> does not apply any\nsyntactic interpretation to the context of the expansion or\nthe text between the braces.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\ncorrectly-formed brace expansion must contain unquoted\nopening and closing braces, and at least one unquoted comma\nor a valid sequence expression. Any incorrectly formed brace\nexpansion is left unchanged. A <b>{</b> or <b>,</b> may be\nquoted with a backslash to prevent its being considered part\nof a brace expression. To avoid conflicts with parameter\nexpansion, the string <b>${</b> is not considered eligible\nfor brace expansion, and inhibits brace expansion until the\nclosing <b>}</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This construct\nis typically used as shorthand when the common prefix of the\nstrings to be generated is longer than in the above\nexample:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">mkdir\n/usr/local/src/bash/{old,new,dist,bugs}</p>\n\n<p style=\"margin-left:11%;\">or</p>\n\n<p style=\"margin-left:22%;\">chown root\n/usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Brace expansion\nintroduces a slight incompatibility with historical versions\nof <b>sh</b>. <b>sh</b> does not treat opening or closing\nbraces specially when they appear as part of a word, and\npreserves them in the output. <b>Bash</b> removes braces\nfrom words as a consequence of brace expansion. For example,\na word entered to <b>sh</b> as <i>file{1,2}</i> appears\nidentically in the output. The same word is output as\n<i>file1 file2</i> after expansion by <b>bash</b>. If strict\ncompatibility with <b>sh</b> is desired, start <b>bash</b>\nwith the <b>+B</b> option or disable brace expansion with\nthe <b>+B</b> option to the <b>set</b> command (see\n<b><small>SHELL BUILTIN COMMANDS</small></b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Tilde\nExpansion</b> <br>\nIf a word begins with an unquoted tilde character\n(&rsquo;<b>~</b>&rsquo;), all of the characters preceding\nthe first unquoted slash (or all characters, if there is no\nunquoted slash) are considered a <i>tilde-prefix</i>. If\nnone of the characters in the tilde-prefix are quoted, the\ncharacters in the tilde-prefix following the tilde are\ntreated as a possible <i>login name</i>. If this login name\nis the null string, the tilde is replaced with the value of\nthe shell parameter\n<b><small>HOME</small></b><small>.</small> If\n<b><small>HOME</small></b> is unset, the home directory of\nthe user executing the shell is substituted instead.\nOtherwise, the tilde-prefix is replaced with the home\ndirectory associated with the specified login name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\ntilde-prefix is a &rsquo;~+&rsquo;, the value of the shell\nvariable <b><small>PWD</small></b> replaces the\ntilde-prefix. If the tilde-prefix is a &rsquo;~-&rsquo;, the\nvalue of the shell variable\n<b><small>OLDPWD</small></b><small>,</small> if it is set,\nis substituted. If the characters following the tilde in the\ntilde-prefix consist of a number <i>N</i>, optionally\nprefixed by a &rsquo;+&rsquo; or a &rsquo;-&rsquo;, the\ntilde-prefix is replaced with the corresponding element from\nthe directory stack, as it would be displayed by the\n<b>dirs</b> builtin invoked with the tilde-prefix as an\nargument. If the characters following the tilde in the\ntilde-prefix consist of a number without a leading\n&rsquo;+&rsquo; or &rsquo;-&rsquo;, &rsquo;+&rsquo; is\nassumed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the login\nname is invalid, or the tilde expansion fails, the word is\nunchanged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each variable\nassignment is checked for unquoted tilde-prefixes\nimmediately following a <b>:</b> or the first <b>=</b>. In\nthese cases, tilde expansion is also performed.\nConsequently, one may use filenames with tildes in\nassignments to <b><small>PATH</small></b><small>,\n<b>MAILPATH</b>,</small> and\n<b><small>CDPATH</small></b><small>,</small> and the shell\nassigns the expanded value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bash also\nperforms tilde expansion on words satisfying the conditions\nof variable assignments (as described above under\n<b><small>PARAMETERS</small></b><small>)</small> when they\nappear as arguments to simple commands. Bash does not do\nthis, except for the <i>declaration</i> commands listed\nabove, when in <i>posix mode</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Parameter\nExpansion</b> <br>\nThe &rsquo;<b>$</b>&rsquo; character introduces parameter\nexpansion, command substitution, or arithmetic expansion.\nThe parameter name or symbol to be expanded may be enclosed\nin braces, which are optional but serve to protect the\nvariable to be expanded from characters immediately\nfollowing it which could be interpreted as part of the\nname.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When braces are\nused, the matching ending brace is the first\n&rsquo;<b>}</b>&rsquo; not escaped by a backslash or within\na quoted string, and not within an embedded arithmetic\nexpansion, command substitution, or parameter expansion.\n<br>\n${<i>parameter</i>}</p>\n\n<p style=\"margin-left:22%;\">The value of <i>parameter</i>\nis substituted. The braces are required when\n<i>parameter</i> is a positional parameter with more than\none digit, or when <i>parameter</i> is followed by a\ncharacter which is not to be interpreted as part of its\nname. The <i>parameter</i> is a shell parameter as described\nabove <b>PARAMETERS</b>) or an array reference\n(<b>Arrays</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the first\ncharacter of <i>parameter</i> is an exclamation point\n(<b>!</b>), and <i>parameter</i> is not a <i>nameref</i>, it\nintroduces a level of indirection. <b>Bash</b> uses the\nvalue formed by expanding the rest of <i>parameter</i> as\nthe new <i>parameter</i>; this is then expanded and that\nvalue is used in the rest of the expansion, rather than the\nexpansion of the original <i>parameter</i>. This is known as\n<i>indirect expansion</i>. The value is subject to tilde\nexpansion, parameter expansion, command substitution, and\narithmetic expansion. If <i>parameter</i> is a nameref, this\nexpands to the name of the parameter referenced by\n<i>parameter</i> instead of performing the complete indirect\nexpansion. The exceptions to this are the expansions of\n${<b>!</b><i>prefix</i><b>*</b>} and\n${<b>!</b><i>name</i>[<i>@</i>]} described below. The\nexclamation point must immediately follow the left brace in\norder to introduce indirection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In each of the\ncases below, <i>word</i> is subject to tilde expansion,\nparameter expansion, command substitution, and arithmetic\nexpansion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When not\nperforming substring expansion, using the forms documented\nbelow (e.g., <b>:-</b>), <b>bash</b> tests for a parameter\nthat is unset or null. Omitting the colon results in a test\nonly for a parameter that is unset. <br>\n${<i>parameter</i><b>:-</b><i>word</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Use Default Values</b>. If\n<i>parameter</i> is unset or null, the expansion of\n<i>word</i> is substituted. Otherwise, the value of\n<i>parameter</i> is substituted.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>:=</b><i>word</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Assign Default Values</b>.\nIf <i>parameter</i> is unset or null, the expansion of\n<i>word</i> is assigned to <i>parameter</i>. The value of\n<i>parameter</i> is then substituted. Positional parameters\nand special parameters may not be assigned to in this\nway.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>:?</b><i>word</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Display Error if Null or\nUnset</b>. If <i>parameter</i> is null or unset, the\nexpansion of <i>word</i> (or a message to that effect if\n<i>word</i> is not present) is written to the standard error\nand the shell, if it is not interactive, exits. Otherwise,\nthe value of <i>parameter</i> is substituted.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>:+</b><i>word</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Use Alternate Value</b>. If\n<i>parameter</i> is null or unset, nothing is substituted,\notherwise the expansion of <i>word</i> is substituted.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>:</b><i>offset</i>}\n<br>\n\n${<i>parameter</i><b>:</b><i>offset</i><b>:</b><i>length</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Substring Expansion</b>.\nExpands to up to <i>length</i> characters of the value of\n<i>parameter</i> starting at the character specified by\n<i>offset</i>. If <i>parameter</i> is <b>@</b>, an indexed\narray subscripted by <b>@</b> or <b>*</b>, or an associative\narray name, the results differ as described below. If\n<i>length</i> is omitted, expands to the substring of the\nvalue of <i>parameter</i> starting at the character\nspecified by <i>offset</i> and extending to the end of the\nvalue. <i>length</i> and <i>offset</i> are arithmetic\nexpressions (see <b><small>ARITHMETIC EVALUATION</small></b>\nbelow).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<i>offset</i> evaluates to a number less than zero, the\nvalue is used as an offset in characters from the end of the\nvalue of <i>parameter</i>. If <i>length</i> evaluates to a\nnumber less than zero, it is interpreted as an offset in\ncharacters from the end of the value of <i>parameter</i>\nrather than a number of characters, and the expansion is the\ncharacters between <i>offset</i> and that result. Note that\na negative offset must be separated from the colon by at\nleast one space to avoid being confused with the <b>:-</b>\nexpansion.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<i>parameter</i> is <b>@</b>, the result is <i>length</i>\npositional parameters beginning at <i>offset</i>. A negative\n<i>offset</i> is taken relative to one greater than the\ngreatest positional parameter, so an offset of -1 evaluates\nto the last positional parameter. It is an expansion error\nif <i>length</i> evaluates to a number less than zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<i>parameter</i> is an indexed array name subscripted by @\nor *, the result is the <i>length</i> members of the array\nbeginning with ${<i>parameter</i>[<i>offset</i>]}. A\nnegative <i>offset</i> is taken relative to one greater than\nthe maximum index of the specified array. It is an expansion\nerror if <i>length</i> evaluates to a number less than\nzero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Substring\nexpansion applied to an associative array produces undefined\nresults.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Substring\nindexing is zero-based unless the positional parameters are\nused, in which case the indexing starts at 1 by default. If\n<i>offset</i> is 0, and the positional parameters are used,\n<b>$0</b> is prefixed to the list.</p>\n\n\n<p style=\"margin-left:11%;\">${<b>!</b><i>prefix</i><b>*</b>}\n<br>\n${<b>!</b><i>prefix</i><b>@</b>}</p>\n\n<p style=\"margin-left:22%;\"><b>Names matching prefix</b>.\nExpands to the names of variables whose names begin with\n<i>prefix</i>, separated by the first character of the\n<b><small>IFS</small></b> special variable. When <i>@</i> is\nused and the expansion appears within double quotes, each\nvariable name expands to a separate word.</p>\n\n\n<p style=\"margin-left:11%;\">${<b>!</b><i>name</i>[<i>@</i>]}\n<br>\n${<b>!</b><i>name</i>[<i>*</i>]}</p>\n\n<p style=\"margin-left:22%;\"><b>List of array keys</b>. If\n<i>name</i> is an array variable, expands to the list of\narray indices (keys) assigned in <i>name</i>. If <i>name</i>\nis not an array, expands to 0 if <i>name</i> is set and null\notherwise. When <i>@</i> is used and the expansion appears\nwithin double quotes, each key expands to a separate\nword.</p>\n\n\n<p style=\"margin-left:11%;\">${<b>#</b><i>parameter</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Parameter length</b>. The\nlength in characters of the value of <i>parameter</i> is\nsubstituted. If <i>parameter</i> is <b>*</b> or <b>@</b>,\nthe value substituted is the number of positional\nparameters. If <i>parameter</i> is an array name subscripted\nby <b>*</b> or <b>@</b>, the value substituted is the number\nof elements in the array. If <i>parameter</i> is an indexed\narray name subscripted by a negative number, that number is\ninterpreted as relative to one greater than the maximum\nindex of <i>parameter</i>, so negative indices count back\nfrom the end of the array, and an index of -1 references the\nlast element.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>#</b><i>word</i>}\n<br>\n${<i>parameter</i><b>##</b><i>word</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Remove matching prefix\npattern</b>. The <i>word</i> is expanded to produce a\npattern just as in pathname expansion, and matched against\nthe expanded value of <i>parameter</i> using the rules\ndescribed under <b>Pattern Matching</b> below. If the\npattern matches the beginning of the value of\n<i>parameter</i>, then the result of the expansion is the\nexpanded value of <i>parameter</i> with the shortest\nmatching pattern (the &rsquo;&rsquo;<b>#</b>&rsquo;&rsquo;\ncase) or the longest matching pattern (the\n&rsquo;&rsquo;<b>##</b>&rsquo;&rsquo; case) deleted. If\n<i>parameter</i> is <b>@</b> or <b>*</b>, the pattern\nremoval operation is applied to each positional parameter in\nturn, and the expansion is the resultant list. If\n<i>parameter</i> is an array variable subscripted with\n<b>@</b> or <b>*</b>, the pattern removal operation is\napplied to each member of the array in turn, and the\nexpansion is the resultant list.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>%</b><i>word</i>}\n<br>\n${<i>parameter</i><b>%%</b><i>word</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Remove matching suffix\npattern</b>. The <i>word</i> is expanded to produce a\npattern just as in pathname expansion, and matched against\nthe expanded value of <i>parameter</i> using the rules\ndescribed under <b>Pattern Matching</b> below. If the\npattern matches a trailing portion of the expanded value of\n<i>parameter</i>, then the result of the expansion is the\nexpanded value of <i>parameter</i> with the shortest\nmatching pattern (the &rsquo;&rsquo;<b>%</b>&rsquo;&rsquo;\ncase) or the longest matching pattern (the\n&rsquo;&rsquo;<b>%%</b>&rsquo;&rsquo; case) deleted. If\n<i>parameter</i> is <b>@</b> or <b>*</b>, the pattern\nremoval operation is applied to each positional parameter in\nturn, and the expansion is the resultant list. If\n<i>parameter</i> is an array variable subscripted with\n<b>@</b> or <b>*</b>, the pattern removal operation is\napplied to each member of the array in turn, and the\nexpansion is the resultant list.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>/</b><i>pattern</i><b>/</b><i>string</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Pattern substitution</b>.\nThe <i>pattern</i> is expanded to produce a pattern just as\nin pathname expansion, <i>Parameter</i> is expanded and the\nlongest match of <i>pattern</i> against its value is\nreplaced with <i>string</i>. The match is performed using\nthe rules described under <b>Pattern Matching</b> below. If\n<i>pattern</i> begins with <b>/</b>, all matches of\n<i>pattern</i> are replaced with <i>string</i>. Normally\nonly the first match is replaced. If <i>pattern</i> begins\nwith <b>#</b>, it must match at the beginning of the\nexpanded value of <i>parameter</i>. If <i>pattern</i> begins\nwith <b>%</b>, it must match at the end of the expanded\nvalue of <i>parameter</i>. If <i>string</i> is null, matches\nof <i>pattern</i> are deleted and the <b>/</b> following\n<i>pattern</i> may be omitted. If the <b>nocasematch</b>\nshell option is enabled, the match is performed without\nregard to the case of alphabetic characters. If\n<i>parameter</i> is <b>@</b> or <b>*</b>, the substitution\noperation is applied to each positional parameter in turn,\nand the expansion is the resultant list. If <i>parameter</i>\nis an array variable subscripted with <b>@</b> or <b>*</b>,\nthe substitution operation is applied to each member of the\narray in turn, and the expansion is the resultant list.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>^</b><i>pattern</i>}\n<br>\n${<i>parameter</i><b>^^</b><i>pattern</i>} <br>\n${<i>parameter</i><b>,</b><i>pattern</i>} <br>\n${<i>parameter</i><b>,,</b><i>pattern</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Case modification</b>. This\nexpansion modifies the case of alphabetic characters in\n<i>parameter</i>. The <i>pattern</i> is expanded to produce\na pattern just as in pathname expansion. Each character in\nthe expanded value of <i>parameter</i> is tested against\n<i>pattern</i>, and, if it matches the pattern, its case is\nconverted. The pattern should not attempt to match more than\none character. The <b>^</b> operator converts lowercase\nletters matching <i>pattern</i> to uppercase; the <b>,</b>\noperator converts matching uppercase letters to lowercase.\nThe <b>^^</b> and <b>,,</b> expansions convert each matched\ncharacter in the expanded value; the <b>^</b> and <b>,</b>\nexpansions match and convert only the first character in the\nexpanded value. If <i>pattern</i> is omitted, it is treated\nlike a <b>?</b>, which matches every character. If\n<i>parameter</i> is <b>@</b> or <b>*</b>, the case\nmodification operation is applied to each positional\nparameter in turn, and the expansion is the resultant list.\nIf <i>parameter</i> is an array variable subscripted with\n<b>@</b> or <b>*</b>, the case modification operation is\napplied to each member of the array in turn, and the\nexpansion is the resultant list.</p>\n\n\n<p style=\"margin-left:11%;\">${<i>parameter</i><b>@</b><i>operator</i>}</p>\n\n<p style=\"margin-left:22%;\"><b>Parameter\ntransformation</b>. The expansion is either a transformation\nof the value of <i>parameter</i> or information about\n<i>parameter</i> itself, depending on the value of\n<i>operator</i>. Each <i>operator</i> is a single\nletter:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>U</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>The expansion is a string that is the value of\n<i>parameter</i> with lowercase alphabetic characters\nconverted to uppercase.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>u</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>The expansion is a string that is the value of\n<i>parameter</i> with the first character converted to\nuppercase, if it is alphabetic.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>L</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>The expansion is a string that is the value of\n<i>parameter</i> with uppercase alphabetic characters\nconverted to lowercase.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>Q</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>The expansion is a string that is the value of\n<i>parameter</i> quoted in a format that can be reused as\ninput.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>E</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>The expansion is a string that is the value of\n<i>parameter</i> with backslash escape sequences expanded as\nwith the <b>$&rsquo;...&rsquo;</b> quoting mechanism.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>P</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>The expansion is a string that is the result of\nexpanding the value of <i>parameter</i> as if it were a\nprompt string (see <b>PROMPTING</b> below).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>A</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>The expansion is a string in the form of an assignment\nstatement or <b>declare</b> command that, if evaluated, will\nrecreate <i>parameter</i> with its attributes and value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>K</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>Produces a possibly-quoted version of the value of\n<i>parameter</i>, except that it prints the values of\nindexed and associative arrays as a sequence of quoted\nkey-value pairs (see <b>Arrays</b> above).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>a</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>The expansion is a string consisting of flag values\nrepresenting <i>parameter</i>&rsquo;s attributes.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<i>parameter</i> is <b>@</b> or <b>*</b>, the operation is\napplied to each positional parameter in turn, and the\nexpansion is the resultant list. If <i>parameter</i> is an\narray variable subscripted with <b>@</b> or <b>*</b>, the\noperation is applied to each member of the array in turn,\nand the expansion is the resultant list.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The result of\nthe expansion is subject to word splitting and pathname\nexpansion as described below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Command\nSubstitution</b> <i><br>\nCommand substitution</i> allows the output of a command to\nreplace the command name. There are two forms:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>$(</b><i>command</i><b>)</b></p>\n\n<p style=\"margin-left:11%;\">or</p>\n\n\n<p style=\"margin-left:22%;\"><b>`</b><i>command</i><b>`</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b>\nperforms the expansion by executing <i>command</i> in a\nsubshell environment and replacing the command substitution\nwith the standard output of the command, with any trailing\nnewlines deleted. Embedded newlines are not deleted, but\nthey may be removed during word splitting. The command\nsubstitution <b>$(cat</b> <i>file</i><b>)</b> can be\nreplaced by the equivalent but faster <b>$(&lt;</b>\n<i>file</i><b>)</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\nold-style backquote form of substitution is used, backslash\nretains its literal meaning except when followed by\n<b>$</b>, <b>`</b>, or <b>\\</b>. The first backquote not\npreceded by a backslash terminates the command substitution.\nWhen using the $(<i>command</i>) form, all characters\nbetween the parentheses make up the command; none are\ntreated specially.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Command\nsubstitutions may be nested. To nest when using the\nbackquoted form, escape the inner backquotes with\nbackslashes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nsubstitution appears within double quotes, word splitting\nand pathname expansion are not performed on the results.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Arithmetic\nExpansion</b> <br>\nArithmetic expansion allows the evaluation of an arithmetic\nexpression and the substitution of the result. The format\nfor arithmetic expansion is:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>$((</b><i>expression</i><b>))</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The old format\n<b>$[</b><i>expression</i><b>]</b> is deprecated and will be\nremoved in upcoming versions of bash.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>expression</i> is treated as if it were within double\nquotes, but a double quote inside the parentheses is not\ntreated specially. All tokens in the expression undergo\nparameter and variable expansion, command substitution, and\nquote removal. The result is treated as the arithmetic\nexpression to be evaluated. Arithmetic expansions may be\nnested.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The evaluation\nis performed according to the rules listed below under\n<b><small>ARITHMETIC EVALUATION</small></b><small>.</small>\nIf <i>expression</i> is invalid, <b>bash</b> prints a\nmessage indicating failure and no substitution occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Process\nSubstitution</b> <i><br>\nProcess substitution</i> allows a process&rsquo;s input or\noutput to be referred to using a filename. It takes the form\nof <b>&lt;(</b><i>list</i><b>)</b> or\n<b>&gt;(</b><i>list</i><b>)</b>. The process <i>list</i> is\nrun asynchronously, and its input or output appears as a\nfilename. This filename is passed as an argument to the\ncurrent command as the result of the expansion. If the\n<b>&gt;(</b><i>list</i><b>)</b> form is used, writing to the\nfile will provide input for <i>list</i>. If the\n<b>&lt;(</b><i>list</i><b>)</b> form is used, the file\npassed as an argument should be read to obtain the output of\n<i>list</i>. Process substitution is supported on systems\nthat support named pipes (<i>FIFOs</i>) or the\n<b>/dev/fd</b> method of naming open files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When available,\nprocess substitution is performed simultaneously with\nparameter and variable expansion, command substitution, and\narithmetic expansion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Word\nSplitting</b> <br>\nThe shell scans the results of parameter expansion, command\nsubstitution, and arithmetic expansion that did not occur\nwithin double quotes for <i>word splitting</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell\ntreats each character of <b><small>IFS</small></b> as a\ndelimiter, and splits the results of the other expansions\ninto words using these characters as field terminators. If\n<b><small>IFS</small></b> is unset, or its value is exactly\n<b>&lt;space&gt;&lt;tab&gt;&lt;newline&gt;</b>, the default,\nthen sequences of <b>&lt;space&gt;</b>, <b>&lt;tab&gt;</b>,\nand <b>&lt;newline&gt;</b> at the beginning and end of the\nresults of the previous expansions are ignored, and any\nsequence of <b><small>IFS</small></b> characters not at the\nbeginning or end serves to delimit words. If\n<b><small>IFS</small></b> has a value other than the\ndefault, then sequences of the whitespace characters\n<b>space</b>, <b>tab</b>, and <b>newline</b> are ignored at\nthe beginning and end of the word, as long as the whitespace\ncharacter is in the value of <b><small>IFS</small></b> (an\n<b><small>IFS</small></b> whitespace character). Any\ncharacter in <b><small>IFS</small></b> that is not\n<b><small>IFS</small></b> whitespace, along with any\nadjacent <b><small>IFS</small></b> whitespace characters,\ndelimits a field. A sequence of <b><small>IFS</small></b>\nwhitespace characters is also treated as a delimiter. If the\nvalue of <b><small>IFS</small></b> is null, no word\nsplitting occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Explicit null\narguments (<b>&quot;&quot;</b> or <b>''</b>) are retained\nand passed to commands as empty strings. Unquoted implicit\nnull arguments, resulting from the expansion of parameters\nthat have no values, are removed. If a parameter with no\nvalue is expanded within double quotes, a null argument\nresults and is retained and passed to a command as an empty\nstring. When a quoted null argument appears as part of a\nword whose expansion is non-null, the null argument is\nremoved. That is, the word -d'' becomes -d after word\nsplitting and null argument removal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that if no\nexpansion occurs, no splitting is performed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Pathname\nExpansion</b> <br>\nAfter word splitting, unless the <b>-f</b> option has been\nset, <b>bash</b> scans each word for the characters\n<b>*</b>, <b>?</b>, and <b>[</b>. If one of these characters\nappears, and is not quoted, then the word is regarded as a\n<i>pattern</i>, and replaced with an alphabetically sorted\nlist of filenames matching the pattern (see\n<b><small>Pattern Matching</small></b> below). If no\nmatching filenames are found, and the shell option\n<b>nullglob</b> is not enabled, the word is left unchanged.\nIf the <b>nullglob</b> option is set, and no matches are\nfound, the word is removed. If the <b>failglob</b> shell\noption is set, and no matches are found, an error message is\nprinted and the command is not executed. If the shell option\n<b>nocaseglob</b> is enabled, the match is performed without\nregard to the case of alphabetic characters. Note that when\nusing range expressions like [a-z] (see below), letters of\nthe other case may be included, depending on the setting of\n<b>LC_COLLATE.</b> When a pattern is used for pathname\nexpansion, the character\n<b>&rsquo;&rsquo;.&rsquo;&rsquo;</b> at the start of a name\nor immediately following a slash must be matched explicitly,\nunless the shell option <b>dotglob</b> is set. The filenames\n<b>&rsquo;&rsquo;.&rsquo;&rsquo;</b> and\n<b>&rsquo;&rsquo;..&rsquo;&rsquo;</b> must always be matched\nexplicitly, even if <b>dotglob</b> is set. In other cases,\nthe <b>&rsquo;&rsquo;.&rsquo;&rsquo;</b> character is not\ntreated specially. When matching a pathname, the slash\ncharacter must always be matched explicitly by a slash in\nthe pattern, but in other matching contexts it can be\nmatched by a special pattern character as described below\nunder <b><small>Pattern Matching</small></b><small>.</small>\nSee the description of <b>shopt</b> below under\n<b><small>SHELL BUILTIN COMMANDS</small></b> for a\ndescription of the <b>nocaseglob</b>, <b>nullglob</b>,\n<b>failglob</b>, and <b>dotglob</b> shell options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b><small>GLOBIGNORE</small></b> shell variable may be used\nto restrict the set of file names matching a <i>pattern</i>.\nIf <b><small>GLOBIGNORE</small></b> is set, each matching\nfile name that also matches one of the patterns in\n<b><small>GLOBIGNORE</small></b> is removed from the list of\nmatches. If the <b>nocaseglob</b> option is set, the\nmatching against the patterns in\n<b><small>GLOBIGNORE</small></b> is performed without regard\nto case. The filenames <b>&rsquo;&rsquo;.&rsquo;&rsquo;</b>\nand <b>&rsquo;&rsquo;..&rsquo;&rsquo;</b> are always ignored\nwhen <b><small>GLOBIGNORE</small></b> is set and not null.\nHowever, setting <b><small>GLOBIGNORE</small></b> to a\nnon-null value has the effect of enabling the <b>dotglob</b>\nshell option, so all other filenames beginning with a\n<b>&rsquo;&rsquo;.&rsquo;&rsquo;</b> will match. To get the\nold behavior of ignoring filenames beginning with a\n<b>&rsquo;&rsquo;.&rsquo;&rsquo;</b>, make\n<b>&rsquo;&rsquo;.*&rsquo;&rsquo;</b> one of the patterns in\n<b><small>GLOBIGNORE</small></b><small>.</small> The\n<b>dotglob</b> option is disabled when\n<b><small>GLOBIGNORE</small></b> is unset. The pattern\nmatching honors the setting of the <b>extglob</b> shell\noption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Pattern\nMatching</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any character\nthat appears in a pattern, other than the special pattern\ncharacters described below, matches itself. The NUL\ncharacter may not occur in a pattern. A backslash escapes\nthe following character; the escaping backslash is discarded\nwhen matching. The special pattern characters must be quoted\nif they are to be matched literally.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The special\npattern characters have the following meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><b>*</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">Matches any string, including\nthe null string. When the <b>globstar</b> shell option is\nenabled, and <b>*</b> is used in a pathname expansion\ncontext, two adjacent <b>*</b>s used as a single pattern\nwill match all files and zero or more directories and\nsubdirectories. If followed by a <b>/</b>, two adjacent\n<b>*</b>s will match only directories and\nsubdirectories.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>?</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Matches any single character.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>[...]</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Matches any one of the enclosed characters. A pair of\ncharacters separated by a hyphen denotes a <i>range\nexpression</i>; any character that falls between those two\ncharacters, inclusive, using the current locale&rsquo;s\ncollating sequence and character set, is matched. If the\nfirst character following the <b>[</b> is a <b>!</b> or a\n<b>^</b> then any character not enclosed is matched. The\nsorting order of characters in range expressions is\ndetermined by the current locale and the values of the\n<b><small>LC_COLLATE</small></b> or\n<b><small>LC_ALL</small></b> shell variables, if set. To\nobtain the traditional interpretation of range expressions,\nwhere <b>[a-d]</b> is equivalent to <b>[abcd]</b>, set value\nof the <b>LC_ALL</b> shell variable to <b>C</b>, or enable\nthe <b>globasciiranges</b> shell option. A <b>-</b> may be\nmatched by including it as the first or last character in\nthe set. A <b>]</b> may be matched by including it as the\nfirst character in the set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Within <b>[</b>\nand <b>]</b>, <i>character classes</i> can be specified\nusing the syntax <b>[:</b><i>class</i><b>:]</b>, where\n<i>class</i> is one of the following classes defined in the\nPOSIX standard: <b><br>\nalnum alpha ascii blank cntrl digit graph lower print punct\nspace upper word xdigit</b> <br>\nA character class matches any character belonging to that\nclass. The <b>word</b> character class matches letters,\ndigits, and the character _.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Within <b>[</b>\nand <b>]</b>, an <i>equivalence class</i> can be specified\nusing the syntax <b>[=</b><i>c</i><b>=]</b>, which matches\nall characters with the same collation weight (as defined by\nthe current locale) as the character <i>c</i>.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Within <b>[</b>\nand <b>]</b>, the syntax <b>[.</b><i>symbol</i><b>.]</b>\nmatches the collating symbol <i>symbol</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<b>extglob</b> shell option is enabled using the\n<b>shopt</b> builtin, several extended pattern matching\noperators are recognized. In the following description, a\n<i>pattern-list</i> is a list of one or more patterns\nseparated by a <b>|</b>. Composite patterns may be formed\nusing one or more of the following sub-patterns:</p>\n\n\n<p style=\"margin-left:22%;\"><b>?(</b><i>pattern-list</i><b>)</b></p>\n\n<p style=\"margin-left:32%;\">Matches zero or one occurrence\nof the given patterns</p>\n\n\n<p style=\"margin-left:22%;\"><b>*(</b><i>pattern-list</i><b>)</b></p>\n\n<p style=\"margin-left:32%;\">Matches zero or more\noccurrences of the given patterns</p>\n\n\n<p style=\"margin-left:22%;\"><b>+(</b><i>pattern-list</i><b>)</b></p>\n\n<p style=\"margin-left:32%;\">Matches one or more occurrences\nof the given patterns</p>\n\n\n<p style=\"margin-left:22%;\"><b>@(</b><i>pattern-list</i><b>)</b></p>\n\n<p style=\"margin-left:32%;\">Matches one of the given\npatterns</p>\n\n\n<p style=\"margin-left:22%;\"><b>!(</b><i>pattern-list</i><b>)</b></p>\n\n<p style=\"margin-left:32%;\">Matches anything except one of\nthe given patterns</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Complicated\nextended pattern matching against long strings is slow,\nespecially when the patterns contain alternations and the\nstrings contain multiple matches. Using separate matches\nagainst shorter strings, or using arrays of strings instead\nof a single long string, may be faster.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Quote\nRemoval</b> <br>\nAfter the preceding expansions, all unquoted occurrences of\nthe characters <b>\\</b>, <b>'</b>, and <b>&quot;</b> that\ndid not result from one of the above expansions are\nremoved.</p>\n\n<h2>REDIRECTION\n<a name=\"REDIRECTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before a\ncommand is executed, its input and output may be\n<i>redirected</i> using a special notation interpreted by\nthe shell. Redirection allows commands&rsquo; file handles\nto be duplicated, opened, closed, made to refer to different\nfiles, and can change the files the command reads from and\nwrites to. Redirection may also be used to modify file\nhandles in the current shell execution environment. The\nfollowing redirection operators may precede or appear\nanywhere within a <i>simple command</i> or may follow a\n<i>command</i>. Redirections are processed in the order they\nappear, from left to right.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each\nredirection that may be preceded by a file descriptor number\nmay instead be preceded by a word of the form\n{<i>varname</i>}. In this case, for each redirection\noperator except &gt;&amp;- and &lt;&amp;-, the shell will\nallocate a file descriptor greater than or equal to 10 and\nassign it to <i>varname</i>. If &gt;&amp;- or &lt;&amp;- is\npreceded by {<i>varname</i>}, the value of <i>varname</i>\ndefines the file descriptor to close. If {<i>varname</i>} is\nsupplied, the redirection persists beyond the scope of the\ncommand, allowing the shell programmer to manage the file\ndescriptor himself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing descriptions, if the file descriptor number is\nomitted, and the first character of the redirection operator\nis <b>&lt;</b>, the redirection refers to the standard input\n(file descriptor 0). If the first character of the\nredirection operator is <b>&gt;</b>, the redirection refers\nto the standard output (file descriptor 1).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The word\nfollowing the redirection operator in the following\ndescriptions, unless otherwise noted, is subjected to brace\nexpansion, tilde expansion, parameter and variable\nexpansion, command substitution, arithmetic expansion, quote\nremoval, pathname expansion, and word splitting. If it\nexpands to more than one word, <b>bash</b> reports an\nerror.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\norder of redirections is significant. For example, the\ncommand</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">ls <b>&gt;</b>\ndirlist 2<b>&gt;&amp;</b>1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">directs both\nstandard output and standard error to the file\n<i>dirlist</i>, while the command</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">ls\n2<b>&gt;&amp;</b>1 <b>&gt;</b> dirlist</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">directs only\nthe standard output to file <i>dirlist</i>, because the\nstandard error was duplicated from the standard output\nbefore the standard output was redirected to\n<i>dirlist</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b>\nhandles several filenames specially when they are used in\nredirections, as described in the following table. If the\noperating system on which <b>bash</b> is running provides\nthese special files, bash will use them; otherwise it will\nemulate them internally with the behavior described\nbelow.</p>\n\n<p style=\"margin-left:22%;\"><b>/dev/fd/</b><i>fd</i></p>\n\n<p style=\"margin-left:32%;\">If <i>fd</i> is a valid\ninteger, file descriptor <i>fd</i> is duplicated.</p>\n\n<p style=\"margin-left:22%;\"><b>/dev/stdin</b></p>\n\n<p style=\"margin-left:32%;\">File descriptor 0 is\nduplicated.</p>\n\n<p style=\"margin-left:22%;\"><b>/dev/stdout</b></p>\n\n<p style=\"margin-left:32%;\">File descriptor 1 is\nduplicated.</p>\n\n<p style=\"margin-left:22%;\"><b>/dev/stderr</b></p>\n\n<p style=\"margin-left:32%;\">File descriptor 2 is\nduplicated.</p>\n\n\n<p style=\"margin-left:22%;\"><b>/dev/tcp/</b><i>host</i><b>/</b><i>port</i></p>\n\n<p style=\"margin-left:32%;\">If <i>host</i> is a valid\nhostname or Internet address, and <i>port</i> is an integer\nport number or service name, <b>bash</b> attempts to open\nthe corresponding TCP socket.</p>\n\n\n<p style=\"margin-left:22%;\"><b>/dev/udp/</b><i>host</i><b>/</b><i>port</i></p>\n\n<p style=\"margin-left:32%;\">If <i>host</i> is a valid\nhostname or Internet address, and <i>port</i> is an integer\nport number or service name, <b>bash</b> attempts to open\nthe corresponding UDP socket.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A failure to\nopen or create a file causes the redirection to fail.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Redirections\nusing file descriptors greater than 9 should be used with\ncare, as they may conflict with file descriptors the shell\nuses internally.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\n<b>exec</b> builtin command can make redirections take\neffect in the current shell.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Redirecting\nInput</b> <br>\nRedirection of input causes the file whose name results from\nthe expansion of <i>word</i> to be opened for reading on\nfile descriptor <i>n</i>, or the standard input (file\ndescriptor 0) if <i>n</i> is not specified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The general\nformat for redirecting input is:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&lt;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Redirecting\nOutput</b> <br>\nRedirection of output causes the file whose name results\nfrom the expansion of <i>word</i> to be opened for writing\non file descriptor <i>n</i>, or the standard output (file\ndescriptor 1) if <i>n</i> is not specified. If the file does\nnot exist it is created; if it does exist it is truncated to\nzero size.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The general\nformat for redirecting output is:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&gt;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nredirection operator is <b>&gt;</b>, and the\n<b>noclobber</b> option to the <b>set</b> builtin has been\nenabled, the redirection will fail if the file whose name\nresults from the expansion of <i>word</i> exists and is a\nregular file. If the redirection operator is <b>&gt;|</b>,\nor the redirection operator is <b>&gt;</b> and the\n<b>noclobber</b> option to the <b>set</b> builtin command is\nnot enabled, the redirection is attempted even if the file\nnamed by <i>word</i> exists.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Appending\nRedirected Output</b> <br>\nRedirection of output in this fashion causes the file whose\nname results from the expansion of <i>word</i> to be opened\nfor appending on file descriptor <i>n</i>, or the standard\noutput (file descriptor 1) if <i>n</i> is not specified. If\nthe file does not exist it is created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The general\nformat for appending output is:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&gt;&gt;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Redirecting\nStandard Output and Standard Error</b> <br>\nThis construct allows both the standard output (file\ndescriptor 1) and the standard error output (file descriptor\n2) to be redirected to the file whose name is the expansion\nof <i>word</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are two\nformats for redirecting standard output and standard\nerror:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>&amp;&gt;</b><i>word</i></p>\n\n<p style=\"margin-left:11%;\">and</p>\n\n\n<p style=\"margin-left:22%;\"><b>&gt;&amp;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Of the two\nforms, the first is preferred. This is semantically\nequivalent to</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>&gt;</b><i>word</i>\n2<b>&gt;&amp;</b>1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using the\nsecond form, <i>word</i> may not expand to a number or\n<b>-</b>. If it does, other redirection operators apply (see\n<b>Duplicating File Descriptors</b> below) for compatibility\nreasons.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Appending\nStandard Output and Standard Error</b> <br>\nThis construct allows both the standard output (file\ndescriptor 1) and the standard error output (file descriptor\n2) to be appended to the file whose name is the expansion of\n<i>word</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The format for\nappending standard output and standard error is:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>&amp;&gt;&gt;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is\nsemantically equivalent to</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>&gt;&gt;</b><i>word</i>\n2<b>&gt;&amp;</b>1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(see\n<b>Duplicating File Descriptors</b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Here\nDocuments</b> <br>\nThis type of redirection instructs the shell to read input\nfrom the current source until a line containing only\n<i>delimiter</i> (with no trailing blanks) is seen. All of\nthe lines read up to that point are then used as the\nstandard input (or file descriptor <i>n</i> if <i>n</i> is\nspecified) for a command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The format of\nhere-documents is:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&lt;&lt;</b>[<b>-</b>]<i>word\n<br>\nhere-document <br>\ndelimiter</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">No parameter\nand variable expansion, command substitution, arithmetic\nexpansion, or pathname expansion is performed on\n<i>word</i>. If any part of <i>word</i> is quoted, the\n<i>delimiter</i> is the result of quote removal on\n<i>word</i>, and the lines in the here-document are not\nexpanded. If <i>word</i> is unquoted, all lines of the\nhere-document are subjected to parameter expansion, command\nsubstitution, and arithmetic expansion, the character\nsequence <b>\\&lt;newline&gt;</b> is ignored, and <b>\\</b>\nmust be used to quote the characters <b>\\</b>, <b>$</b>, and\n<b>`</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nredirection operator is <b>&lt;&lt;-</b>, then all leading\ntab characters are stripped from input lines and the line\ncontaining <i>delimiter</i>. This allows here-documents\nwithin shell scripts to be indented in a natural\nfashion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Here\nStrings</b> <br>\nA variant of here documents, the format is:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&lt;&lt;&lt;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>word</i>\nundergoes tilde expansion, parameter and variable expansion,\ncommand substitution, arithmetic expansion, and quote\nremoval. Pathname expansion and word splitting are not\nperformed. The result is supplied as a single string, with a\nnewline appended, to the command on its standard input (or\nfile descriptor <i>n</i> if <i>n</i> is specified).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Duplicating\nFile Descriptors</b> <br>\nThe redirection operator</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&lt;&amp;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">is used to\nduplicate input file descriptors. If <i>word</i> expands to\none or more digits, the file descriptor denoted by <i>n</i>\nis made to be a copy of that file descriptor. If the digits\nin <i>word</i> do not specify a file descriptor open for\ninput, a redirection error occurs. If <i>word</i> evaluates\nto <b>-</b>, file descriptor <i>n</i> is closed. If <i>n</i>\nis not specified, the standard input (file descriptor 0) is\nused.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\noperator</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&gt;&amp;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">is used\nsimilarly to duplicate output file descriptors. If <i>n</i>\nis not specified, the standard output (file descriptor 1) is\nused. If the digits in <i>word</i> do not specify a file\ndescriptor open for output, a redirection error occurs. If\n<i>word</i> evaluates to <b>-</b>, file descriptor <i>n</i>\nis closed. As a special case, if <i>n</i> is omitted, and\n<i>word</i> does not expand to one or more digits or\n<b>-</b>, the standard output and standard error are\nredirected as described previously.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Moving File\nDescriptors</b> <br>\nThe redirection operator</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&lt;&amp;</b><i>digit</i><b>-</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">moves the file\ndescriptor <i>digit</i> to file descriptor <i>n</i>, or the\nstandard input (file descriptor 0) if <i>n</i> is not\nspecified. <i>digit</i> is closed after being duplicated to\n<i>n</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Similarly, the\nredirection operator</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&gt;&amp;</b><i>digit</i><b>-</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">moves the file\ndescriptor <i>digit</i> to file descriptor <i>n</i>, or the\nstandard output (file descriptor 1) if <i>n</i> is not\nspecified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Opening File\nDescriptors for Reading and Writing</b> <br>\nThe redirection operator</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[<i>n</i>]<b>&lt;&gt;</b><i>word</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">causes the file\nwhose name is the expansion of <i>word</i> to be opened for\nboth reading and writing on file descriptor <i>n</i>, or on\nfile descriptor 0 if <i>n</i> is not specified. If the file\ndoes not exist, it is created.</p>\n\n<h2>ALIASES\n<a name=\"ALIASES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Aliases</i>\nallow a string to be substituted for a word when it is used\nas the first word of a simple command. The shell maintains a\nlist of aliases that may be set and unset with the\n<b>alias</b> and <b>unalias</b> builtin commands (see\n<b><small>SHELL BUILTIN COMMANDS</small></b> below). The\nfirst word of each simple command, if unquoted, is checked\nto see if it has an alias. If so, that word is replaced by\nthe text of the alias. The characters <b>/</b>, <b>$</b>,\n<b>`</b>, and <b>=</b> and any of the shell\n<i>metacharacters</i> or quoting characters listed above may\nnot appear in an alias name. The replacement text may\ncontain any valid shell input, including shell\nmetacharacters. The first word of the replacement text is\ntested for aliases, but a word that is identical to an alias\nbeing expanded is not expanded a second time. This means\nthat one may alias <b>ls</b> to <b>ls -F</b>, for instance,\nand <b>bash</b> does not try to recursively expand the\nreplacement text. If the last character of the alias value\nis a <i>blank</i>, then the next command word following the\nalias is also checked for alias expansion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Aliases are\ncreated and listed with the <b>alias</b> command, and\nremoved with the <b>unalias</b> command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is no\nmechanism for using arguments in the replacement text. If\narguments are needed, a shell function should be used (see\n<b><small>FUNCTIONS</small></b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Aliases are not\nexpanded when the shell is not interactive, unless the\n<b>expand_aliases</b> shell option is set using <b>shopt</b>\n(see the description of <b>shopt</b> under <b><small>SHELL\nBUILTIN COMMANDS</small></b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The rules\nconcerning the definition and use of aliases are somewhat\nconfusing. <b>Bash</b> always reads at least one complete\nline of input, and all lines that make up a compound\ncommand, before executing any of the commands on that line\nor the compound command. Aliases are expanded when a command\nis read, not when it is executed. Therefore, an alias\ndefinition appearing on the same line as another command\ndoes not take effect until the next line of input is read.\nThe commands following the alias definition on that line are\nnot affected by the new alias. This behavior is also an\nissue when functions are executed. Aliases are expanded when\na function definition is read, not when the function is\nexecuted, because a function definition is itself a command.\nAs a consequence, aliases defined in a function are not\navailable until after that function is executed. To be safe,\nalways put alias definitions on a separate line, and do not\nuse <b>alias</b> in compound commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For almost\nevery purpose, aliases are superseded by shell\nfunctions.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A shell\nfunction, defined as described above under <b><small>SHELL\nGRAMMAR</small></b><small>,</small> stores a series of\ncommands for later execution. When the name of a shell\nfunction is used as a simple command name, the list of\ncommands associated with that function name is executed.\nFunctions are executed in the context of the current shell;\nno new process is created to interpret them (contrast this\nwith the execution of a shell script). When a function is\nexecuted, the arguments to the function become the\npositional parameters during its execution. The special\nparameter <b>#</b> is updated to reflect the change. Special\nparameter <b>0</b> is unchanged. The first element of the\n<b><small>FUNCNAME</small></b> variable is set to the name\nof the function while the function is executing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All other\naspects of the shell execution environment are identical\nbetween a function and its caller with these exceptions: the\n<b><small>DEBUG</small></b> and <b>RETURN</b> traps (see the\ndescription of the <b>trap</b> builtin under <b><small>SHELL\nBUILTIN COMMANDS</small></b> below) are not inherited unless\nthe function has been given the <b>trace</b> attribute (see\nthe description of the <b><small>declare</small></b> builtin\nbelow) or the <b>-o functrace</b> shell option has been\nenabled with the <b>set</b> builtin (in which case all\nfunctions inherit the <b>DEBUG</b> and <b>RETURN</b> traps),\nand the <b><small>ERR</small></b> trap is not inherited\nunless the <b>-o errtrace</b> shell option has been\nenabled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Variables local\nto the function may be declared with the <b>local</b>\nbuiltin command. Ordinarily, variables and their values are\nshared between the function and its caller. If a variable is\ndeclared <b>local</b>, the variable&rsquo;s visible scope is\nrestricted to that function and its children (including the\nfunctions it calls). Local variables &quot;shadow&quot;\nvariables with the same name declared at previous scopes.\nFor instance, a local variable declared in a function hides\na global variable of the same name: references and\nassignments refer to the local variable, leaving the global\nvariable unmodified. When the function returns, the global\nvariable is once again visible.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell uses\n<i>dynamic scoping</i> to control a variable&rsquo;s\nvisibility within functions. With dynamic scoping, visible\nvariables and their values are a result of the sequence of\nfunction calls that caused execution to reach the current\nfunction. The value of a variable that a function sees\ndepends on its value within its caller, if any, whether that\ncaller is the &quot;global&quot; scope or another shell\nfunction. This is also the value that a local variable\ndeclaration &quot;shadows&quot;, and the value that is\nrestored when the function returns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example, if\na variable <i>var</i> is declared as local in function\n<i>func1</i>, and <i>func1</i> calls another function\n<i>func2</i>, references to <i>var</i> made from within\n<i>func2</i> will resolve to the local variable <i>var</i>\nfrom <i>func1</i>, shadowing any global variable named\n<i>var</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>unset</b> builtin also acts using the same dynamic scope:\nif a variable is local to the current scope, <b>unset</b>\nwill unset it; otherwise the unset will refer to the\nvariable found in any calling scope as described above. If a\nvariable at the current local scope is unset, it will remain\nso until it is reset in that scope or until the function\nreturns. Once the function returns, any instance of the\nvariable at a previous scope will become visible. If the\nunset acts on a variable at a previous scope, any instance\nof a variable with that name that had been shadowed will\nbecome visible.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>FUNCNEST</b> variable, if set to a numeric value greater\nthan 0, defines a maximum function nesting level. Function\ninvocations that exceed the limit cause the entire command\nto abort.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the builtin\ncommand <b>return</b> is executed in a function, the\nfunction completes and execution resumes with the next\ncommand after the function call. Any command associated with\nthe <b>RETURN</b> trap is executed before execution resumes.\nWhen a function completes, the values of the positional\nparameters and the special parameter <b>#</b> are restored\nto the values they had prior to the function&rsquo;s\nexecution.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Function names\nand definitions may be listed with the <b>-f</b> option to\nthe <b>declare</b> or <b>typeset</b> builtin commands. The\n<b>-F</b> option to <b>declare</b> or <b>typeset</b> will\nlist the function names only (and optionally the source file\nand line number, if the <b>extdebug</b> shell option is\nenabled). Functions may be exported so that subshells\nautomatically have them defined with the <b>-f</b> option to\nthe <b>export</b> builtin. A function definition may be\ndeleted using the <b>-f</b> option to the <b>unset</b>\nbuiltin.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Functions may\nbe recursive. The <b>FUNCNEST</b> variable may be used to\nlimit the depth of the function call stack and restrict the\nnumber of function invocations. By default, no limit is\nimposed on the number of recursive calls.</p>\n\n<h2>ARITHMETIC EVALUATION\n<a name=\"ARITHMETIC EVALUATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell\nallows arithmetic expressions to be evaluated, under certain\ncircumstances (see the <b>let</b> and <b>declare</b> builtin\ncommands, the <b>((</b> compound command, and <b>Arithmetic\nExpansion</b>). Evaluation is done in fixed-width integers\nwith no check for overflow, though division by 0 is trapped\nand flagged as an error. The operators and their precedence,\nassociativity, and values are the same as in the C language.\nThe following list of operators is grouped into levels of\nequal-precedence operators. The levels are listed in order\nof decreasing precedence. <i><br>\nid</i><b>++</b> <i>id</i><b>--</b></p>\n\n<p style=\"margin-left:22%;\">variable post-increment and\npost-decrement</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>- +</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"30%\">\n\n\n<p>unary minus and plus</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>++</b><i>id</i>\n<b>--</b><i>id</i></p>\n\n<p style=\"margin-left:22%;\">variable pre-increment and\npre-decrement</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>! ~</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"53%\">\n\n\n<p>logical and bitwise negation</p></td>\n<td width=\"25%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>**</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"53%\">\n\n\n<p>exponentiation</p></td>\n<td width=\"25%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>* / %</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"53%\">\n\n\n<p>multiplication, division, remainder</p></td>\n<td width=\"25%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>+ -</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"53%\">\n\n\n<p>addition, subtraction</p></td>\n<td width=\"25%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>&lt;&lt; &gt;&gt;</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"53%\">\n\n\n<p>left and right bitwise shifts</p></td>\n<td width=\"25%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>&lt;= &gt;= &lt;\n&gt;</b></p>\n\n<p style=\"margin-left:22%;\">comparison</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>== !=</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"35%\">\n\n\n<p>equality and inequality</p></td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>&amp;</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"35%\">\n\n\n<p>bitwise AND</p></td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>^</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"35%\">\n\n\n<p>bitwise exclusive OR</p></td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>|</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"35%\">\n\n\n<p>bitwise OR</p></td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>&amp;&amp;</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"35%\">\n\n\n<p>logical AND</p></td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>||</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"35%\">\n\n\n<p>logical OR</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><i>expr</i><b>?</b><i>expr</i><b>:</b><i>expr</i></p>\n\n<p style=\"margin-left:22%;\">conditional operator</p>\n\n<p style=\"margin-left:11%;\"><b>= *= /= %= += -= &lt;&lt;=\n&gt;&gt;= &amp;= ^= |=</b></p>\n\n<p style=\"margin-left:22%;\">assignment</p>\n\n<p style=\"margin-left:11%;\"><i>expr1</i> <b>,</b>\n<i>expr2</i></p>\n\n<p style=\"margin-left:22%;\">comma</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Shell variables\nare allowed as operands; parameter expansion is performed\nbefore the expression is evaluated. Within an expression,\nshell variables may also be referenced by name without using\nthe parameter expansion syntax. A shell variable that is\nnull or unset evaluates to 0 when referenced by name without\nusing the parameter expansion syntax. The value of a\nvariable is evaluated as an arithmetic expression when it is\nreferenced, or when a variable which has been given the\n<i>integer</i> attribute using <b>declare -i</b> is assigned\na value. A null value evaluates to 0. A shell variable need\nnot have its <i>integer</i> attribute turned on to be used\nin an expression.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Integer\nconstants follow the C language definition, without suffixes\nor character constants. Constants with a leading 0 are\ninterpreted as octal numbers. A leading 0x or 0X denotes\nhexadecimal. Otherwise, numbers take the form\n[<i>base#</i>]n, where the optional <i>base</i> is a decimal\nnumber between 2 and 64 representing the arithmetic base,\nand <i>n</i> is a number in that base. If <i>base#</i> is\nomitted, then base 10 is used. When specifying <i>n</i>, if\na non-digit is required, the digits greater than 9 are\nrepresented by the lowercase letters, the uppercase letters,\n@, and _, in that order. If <i>base</i> is less than or\nequal to 36, lowercase and uppercase letters may be used\ninterchangeably to represent numbers between 10 and 35.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Operators are\nevaluated in order of precedence. Sub-expressions in\nparentheses are evaluated first and may override the\nprecedence rules above.</p>\n\n<h2>CONDITIONAL EXPRESSIONS\n<a name=\"CONDITIONAL EXPRESSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Conditional\nexpressions are used by the <b>[[</b> compound command and\nthe <b>test</b> and <b>[</b> builtin commands to test file\nattributes and perform string and arithmetic comparisons.\nThe <b>test</b> and <b>[</b> commands determine their\nbehavior based on the number of arguments; see the\ndescriptions of those commands for any other\ncommand-specific actions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Expressions are\nformed from the following unary or binary primaries.\n<b>Bash</b> handles several filenames specially when they\nare used in expressions. If the operating system on which\n<b>bash</b> is running provides these special files, bash\nwill use them; otherwise it will emulate them internally\nwith this behavior: If any <i>file</i> argument to one of\nthe primaries is of the form <i>/dev/fd/n</i>, then file\ndescriptor <i>n</i> is checked. If the <i>file</i> argument\nto one of the primaries is one of <i>/dev/stdin</i>,\n<i>/dev/stdout</i>, or <i>/dev/stderr</i>, file descriptor\n0, 1, or 2, respectively, is checked.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unless\notherwise specified, primaries that operate on files follow\nsymbolic links and operate on the target of the link, rather\nthan the link itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When used with\n<b>[[</b>, the <b>&lt;</b> and <b>&gt;</b> operators sort\nlexicographically using the current locale. The <b>test</b>\ncommand sorts using ASCII ordering. <b><br>\n-a</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists.</p>\n\n<p style=\"margin-left:11%;\"><b>-b</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis a block special file.</p>\n\n<p style=\"margin-left:11%;\"><b>-c</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis a character special file.</p>\n\n<p style=\"margin-left:11%;\"><b>-d</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis a directory.</p>\n\n<p style=\"margin-left:11%;\"><b>-e</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists.</p>\n\n<p style=\"margin-left:11%;\"><b>-f</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis a regular file.</p>\n\n<p style=\"margin-left:11%;\"><b>-g</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis set-group-id.</p>\n\n<p style=\"margin-left:11%;\"><b>-h</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis a symbolic link.</p>\n\n<p style=\"margin-left:11%;\"><b>-k</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nits &rsquo;&rsquo;sticky&rsquo;&rsquo; bit is set.</p>\n\n<p style=\"margin-left:11%;\"><b>-p</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis a named pipe (FIFO).</p>\n\n<p style=\"margin-left:11%;\"><b>-r</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis readable.</p>\n\n<p style=\"margin-left:11%;\"><b>-s</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nhas a size greater than zero.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>-t</b> <i>fd</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>True if file descriptor <i>fd</i> is open and refers to\na terminal.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-u</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nits set-user-id bit is set.</p>\n\n<p style=\"margin-left:11%;\"><b>-w</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis writable.</p>\n\n<p style=\"margin-left:11%;\"><b>-x</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis executable.</p>\n\n<p style=\"margin-left:11%;\"><b>-G</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis owned by the effective group id.</p>\n\n<p style=\"margin-left:11%;\"><b>-L</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis a symbolic link.</p>\n\n<p style=\"margin-left:11%;\"><b>-N</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nhas been modified since it was last read.</p>\n\n<p style=\"margin-left:11%;\"><b>-O</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis owned by the effective user id.</p>\n\n<p style=\"margin-left:11%;\"><b>-S</b> <i>file</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file</i> exists and\nis a socket.</p>\n\n<p style=\"margin-left:11%;\"><i>file1</i> <b>-ef</b>\n<i>file2</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file1</i> and\n<i>file2</i> refer to the same device and inode numbers.</p>\n\n<p style=\"margin-left:11%;\"><i>file1</i> -<b>nt</b>\n<i>file2</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file1</i> is newer\n(according to modification date) than <i>file2</i>, or if\n<i>file1</i> exists and <i>file2</i> does not.</p>\n\n<p style=\"margin-left:11%;\"><i>file1</i> -<b>ot</b>\n<i>file2</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>file1</i> is older\nthan <i>file2</i>, or if <i>file2</i> exists and\n<i>file1</i> does not.</p>\n\n<p style=\"margin-left:11%;\"><b>-o</b> <i>optname</i></p>\n\n<p style=\"margin-left:22%;\">True if the shell option\n<i>optname</i> is enabled. See the list of options under the\ndescription of the <b>-o</b> option to the <b>set</b>\nbuiltin below.</p>\n\n<p style=\"margin-left:11%;\"><b>-v</b> <i>varname</i></p>\n\n<p style=\"margin-left:22%;\">True if the shell variable\n<i>varname</i> is set (has been assigned a value).</p>\n\n<p style=\"margin-left:11%;\"><b>-R</b> <i>varname</i></p>\n\n<p style=\"margin-left:22%;\">True if the shell variable\n<i>varname</i> is set and is a name reference.</p>\n\n<p style=\"margin-left:11%;\"><b>-z</b> <i>string</i></p>\n\n<p style=\"margin-left:22%;\">True if the length of\n<i>string</i> is zero.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>string</i></p></td>\n<td width=\"80%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-n</b> <i>string</i></p>\n\n<p style=\"margin-left:22%;\">True if the length of\n<i>string</i> is non-zero.</p>\n\n<p style=\"margin-left:11%;\"><i>string1</i> <b>==</b>\n<i>string2 <br>\nstring1</i> <b>=</b> <i>string2</i></p>\n\n<p style=\"margin-left:22%;\">True if the strings are equal.\n<b>=</b> should be used with the <b>test</b> command for\nPOSIX conformance. When used with the <b>[[</b> command,\nthis performs pattern matching as described above\n(<b>Compound Commands</b>).</p>\n\n<p style=\"margin-left:11%;\"><i>string1</i> <b>!=</b>\n<i>string2</i></p>\n\n<p style=\"margin-left:22%;\">True if the strings are not\nequal.</p>\n\n<p style=\"margin-left:11%;\"><i>string1</i> <b>&lt;</b>\n<i>string2</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>string1</i> sorts\nbefore <i>string2</i> lexicographically.</p>\n\n<p style=\"margin-left:11%;\"><i>string1</i> <b>&gt;</b>\n<i>string2</i></p>\n\n<p style=\"margin-left:22%;\">True if <i>string1</i> sorts\nafter <i>string2</i> lexicographically.</p>\n\n<p style=\"margin-left:11%;\"><i>arg1</i> <b>OP</b>\n<i>arg2</i></p>\n\n<p style=\"margin-left:22%;\"><b><small>OP</small></b> is one\nof <b>-eq</b>, <b>-ne</b>, <b>-lt</b>, <b>-le</b>,\n<b>-gt</b>, or <b>-ge</b>. These arithmetic binary operators\nreturn true if <i>arg1</i> is equal to, not equal to, less\nthan, less than or equal to, greater than, or greater than\nor equal to <i>arg2</i>, respectively. <i>Arg1</i> and\n<i>arg2</i> may be positive or negative integers. When used\nwith the <b>[[</b> command, <i>Arg1</i> and <i>Arg2</i> are\nevaluated as arithmetic expressions (see\n<b><small>ARITHMETIC EVALUATION</small></b> above).</p>\n\n<h2>SIMPLE COMMAND EXPANSION\n<a name=\"SIMPLE COMMAND EXPANSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a simple\ncommand is executed, the shell performs the following\nexpansions, assignments, and redirections, from left to\nright, in the following order.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>The words that the parser has marked as variable\nassignments (those preceding the command name) and\nredirections are saved for later processing.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>The words that are not variable assignments or\nredirections are expanded. If any words remain after\nexpansion, the first word is taken to be the name of the\ncommand and the remaining words are the arguments.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Redirections are performed as described above under\n<b><small>REDIRECTION</small></b><small>.</small></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>4.</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>The text after the <b>=</b> in each variable assignment\nundergoes tilde expansion, parameter expansion, command\nsubstitution, arithmetic expansion, and quote removal before\nbeing assigned to the variable.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no command\nname results, the variable assignments affect the current\nshell environment. Otherwise, the variables are added to the\nenvironment of the executed command and do not affect the\ncurrent shell environment. If any of the assignments\nattempts to assign a value to a readonly variable, an error\noccurs, and the command exits with a non-zero status.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no command\nname results, redirections are performed, but do not affect\nthe current shell environment. A redirection error causes\nthe command to exit with a non-zero status.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there is a\ncommand name left after expansion, execution proceeds as\ndescribed below. Otherwise, the command exits. If one of the\nexpansions contained a command substitution, the exit status\nof the command is the exit status of the last command\nsubstitution performed. If there were no command\nsubstitutions, the command exits with a status of zero.</p>\n\n<h2>COMMAND EXECUTION\n<a name=\"COMMAND EXECUTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">After a command\nhas been split into words, if it results in a simple command\nand an optional list of arguments, the following actions are\ntaken.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the command\nname contains no slashes, the shell attempts to locate it.\nIf there exists a shell function by that name, that function\nis invoked as described above in\n<b><small>FUNCTIONS</small></b><small>.</small> If the name\ndoes not match a function, the shell searches for it in the\nlist of shell builtins. If a match is found, that builtin is\ninvoked.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the name is\nneither a shell function nor a builtin, and contains no\nslashes, <b>bash</b> searches each element of the\n<b><small>PATH</small></b> for a directory containing an\nexecutable file by that name. <b>Bash</b> uses a hash table\nto remember the full pathnames of executable files (see\n<b>hash</b> under <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below). A full search of the\ndirectories in <b><small>PATH</small></b> is performed only\nif the command is not found in the hash table. If the search\nis unsuccessful, the shell searches for a defined shell\nfunction named <b>command_not_found_handle</b>. If that\nfunction exists, it is invoked in a separate execution\nenvironment with the original command and the original\ncommand&rsquo;s arguments as its arguments, and the\nfunction&rsquo;s exit status becomes the exit status of that\nsubshell. If that function is not defined, the shell prints\nan error message and returns an exit status of 127.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the search\nis successful, or if the command name contains one or more\nslashes, the shell executes the named program in a separate\nexecution environment. Argument 0 is set to the name given,\nand the remaining arguments to the command are set to the\narguments given, if any.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If this\nexecution fails because the file is not in executable\nformat, and the file is not a directory, it is assumed to be\na <i>shell script</i>, a file containing shell commands. A\nsubshell is spawned to execute it. This subshell\nreinitializes itself, so that the effect is as if a new\nshell had been invoked to handle the script, with the\nexception that the locations of commands remembered by the\nparent (see <b>hash</b> below under <b><small>SHELL BUILTIN\nCOMMANDS</small></b><small>)</small> are retained by the\nchild.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the program\nis a file beginning with <b>#!</b>, the remainder of the\nfirst line specifies an interpreter for the program. The\nshell executes the specified interpreter on operating\nsystems that do not handle this executable format\nthemselves. The arguments to the interpreter consist of a\nsingle optional argument following the interpreter name on\nthe first line of the program, followed by the name of the\nprogram, followed by the command arguments, if any.</p>\n\n<h2>COMMAND EXECUTION ENVIRONMENT\n<a name=\"COMMAND EXECUTION ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell has\nan <i>execution environment</i>, which consists of the\nfollowing:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">open files inherited by the\nshell at invocation, as modified by redirections supplied to\nthe <b>exec</b> builtin</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>the current working directory as set by <b>cd</b>,\n<b>pushd</b>, or <b>popd</b>, or inherited by the shell at\ninvocation</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>the file creation mode mask as set by <b>umask</b> or\ninherited from the shell&rsquo;s parent</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>current traps set by <b>trap</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>shell parameters that are set by variable assignment or\nwith <b>set</b> or inherited from the shell&rsquo;s parent\nin the environment</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>shell functions defined during execution or inherited\nfrom the shell&rsquo;s parent in the environment</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>options enabled at invocation (either by default or with\ncommand-line arguments) or by <b>set</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>options enabled by <b>shopt</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>shell aliases defined with <b>alias</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>various process IDs, including those of background jobs,\nthe value of <b>$$</b>, and the value of\n<b><small>PPID</small></b></p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a simple\ncommand other than a builtin or shell function is to be\nexecuted, it is invoked in a separate execution environment\nthat consists of the following. Unless otherwise noted, the\nvalues are inherited from the shell.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">the shell&rsquo;s open files,\nplus any modifications and additions specified by\nredirections to the command</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>the current working directory</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>the file creation mode mask</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>shell variables and functions marked for export, along\nwith variables exported for the command, passed in the\nenvironment</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>traps caught by the shell are reset to the values\ninherited from the shell&rsquo;s parent, and traps ignored\nby the shell are ignored</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A command\ninvoked in this separate environment cannot affect the\nshell&rsquo;s execution environment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Command\nsubstitution, commands grouped with parentheses, and\nasynchronous commands are invoked in a subshell environment\nthat is a duplicate of the shell environment, except that\ntraps caught by the shell are reset to the values that the\nshell inherited from its parent at invocation. Builtin\ncommands that are invoked as part of a pipeline are also\nexecuted in a subshell environment. Changes made to the\nsubshell environment cannot affect the shell&rsquo;s\nexecution environment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Subshells\nspawned to execute command substitutions inherit the value\nof the <b>-e</b> option from the parent shell. When not in\n<i>posix mode</i>, <b>bash</b> clears the <b>-e</b> option\nin such subshells.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a command is\nfollowed by a <b>&amp;</b> and job control is not active,\nthe default standard input for the command is the empty file\n<i>/dev/null</i>. Otherwise, the invoked command inherits\nthe file descriptors of the calling shell as modified by\nredirections.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a program\nis invoked it is given an array of strings called the\n<i>environment</i>. This is a list of\n<i>name</i>-<i>value</i> pairs, of the form\n<i>name</i>=<i>value</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell\nprovides several ways to manipulate the environment. On\ninvocation, the shell scans its own environment and creates\na parameter for each name found, automatically marking it\nfor <i>export</i> to child processes. Executed commands\ninherit the environment. The <b>export</b> and <b>declare\n-x</b> commands allow parameters and functions to be added\nto and deleted from the environment. If the value of a\nparameter in the environment is modified, the new value\nbecomes part of the environment, replacing the old. The\nenvironment inherited by any executed command consists of\nthe shell&rsquo;s initial environment, whose values may be\nmodified in the shell, less any pairs removed by the\n<b>unset</b> command, plus any additions via the\n<b>export</b> and <b>declare -x</b> commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The environment\nfor any <i>simple command</i> or function may be augmented\ntemporarily by prefixing it with parameter assignments, as\ndescribed above in\n<b><small>PARAMETERS</small></b><small>.</small> These\nassignment statements affect only the environment seen by\nthat command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<b>-k</b> option is set (see the <b>set</b> builtin command\nbelow), then <i>all</i> parameter assignments are placed in\nthe environment for a command, not just those that precede\nthe command name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>bash</b> invokes an external command, the variable\n<b>_</b> is set to the full filename of the command and\npassed to that command in its environment.</p>\n\n<h2>EXIT STATUS\n<a name=\"EXIT STATUS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The exit status\nof an executed command is the value returned by the\n<i>waitpid</i> system call or equivalent function. Exit\nstatuses fall between 0 and 255, though, as explained below,\nthe shell may use values above 125 specially. Exit statuses\nfrom shell builtins and compound commands are also limited\nto this range. Under certain circumstances, the shell will\nuse special values to indicate specific failure modes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the\nshell&rsquo;s purposes, a command which exits with a zero\nexit status has succeeded. An exit status of zero indicates\nsuccess. A non-zero exit status indicates failure. When a\ncommand terminates on a fatal signal <i>N</i>, <b>bash</b>\nuses the value of 128+<i>N</i> as the exit status.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a command is\nnot found, the child process created to execute it returns a\nstatus of 127. If a command is found but is not executable,\nthe return status is 126.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a command\nfails because of an error during expansion or redirection,\nthe exit status is greater than zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Shell builtin\ncommands return a status of 0 (<i>true</i>) if successful,\nand non-zero (<i>false</i>) if an error occurs while they\nexecute. All builtins return an exit status of 2 to indicate\nincorrect usage, generally invalid options or missing\narguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b>\nitself returns the exit status of the last command executed,\nunless a syntax error occurs, in which case it exits with a\nnon-zero value. See also the <b>exit</b> builtin command\nbelow.</p>\n\n<h2>SIGNALS\n<a name=\"SIGNALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>bash</b> is interactive, in the absence of any traps, it\nignores <b><small>SIGTERM</small></b> (so that <b>kill 0</b>\ndoes not kill an interactive shell), and\n<b><small>SIGINT</small></b> is caught and handled (so that\nthe <b>wait</b> builtin is interruptible). In all cases,\n<b>bash</b> ignores\n<b><small>SIGQUIT</small></b><small>.</small> If job control\nis in effect, <b>bash</b> ignores\n<b><small>SIGTTIN</small></b><small>,\n<b>SIGTTOU</b>,</small> and\n<b><small>SIGTSTP</small></b><small>.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Non-builtin\ncommands run by <b>bash</b> have signal handlers set to the\nvalues inherited by the shell from its parent. When job\ncontrol is not in effect, asynchronous commands ignore\n<b><small>SIGINT</small></b> and\n<b><small>SIGQUIT</small></b> in addition to these inherited\nhandlers. Commands run as a result of command substitution\nignore the keyboard-generated job control signals\n<b><small>SIGTTIN</small></b><small>,\n<b>SIGTTOU</b>,</small> and\n<b><small>SIGTSTP</small></b><small>.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell exits\nby default upon receipt of a\n<b><small>SIGHUP</small></b><small>.</small> Before exiting,\nan interactive shell resends the\n<b><small>SIGHUP</small></b> to all jobs, running or\nstopped. Stopped jobs are sent <b><small>SIGCONT</small></b>\nto ensure that they receive the\n<b><small>SIGHUP</small></b><small>.</small> To prevent the\nshell from sending the signal to a particular job, it should\nbe removed from the jobs table with the <b>disown</b>\nbuiltin (see <b><small>SHELL BUILTIN COMMANDS</small></b>\nbelow) or marked to not receive <b><small>SIGHUP</small></b>\nusing <b>disown -h</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<b>huponexit</b> shell option has been set with\n<b>shopt</b>, <b>bash</b> sends a\n<b><small>SIGHUP</small></b> to all jobs when an interactive\nlogin shell exits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>bash</b>\nis waiting for a command to complete and receives a signal\nfor which a trap has been set, the trap will not be executed\nuntil the command completes. When <b>bash</b> is waiting for\nan asynchronous command via the <b>wait</b> builtin, the\nreception of a signal for which a trap has been set will\ncause the <b>wait</b> builtin to return immediately with an\nexit status greater than 128, immediately after which the\ntrap is executed.</p>\n\n<h2>JOB CONTROL\n<a name=\"JOB CONTROL\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Job\ncontrol</i> refers to the ability to selectively stop\n(<i>suspend</i>) the execution of processes and continue\n(<i>resume</i>) their execution at a later point. A user\ntypically employs this facility via an interactive interface\nsupplied jointly by the operating system kernel&rsquo;s\nterminal driver and <b>bash</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell\nassociates a <i>job</i> with each pipeline. It keeps a table\nof currently executing jobs, which may be listed with the\n<b>jobs</b> command. When <b>bash</b> starts a job\nasynchronously (in the <i>background</i>), it prints a line\nthat looks like:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">[1] 25647</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">indicating that\nthis job is job number 1 and that the process ID of the last\nprocess in the pipeline associated with this job is 25647.\nAll of the processes in a single pipeline are members of the\nsame job. <b>Bash</b> uses the <i>job</i> abstraction as the\nbasis for job control.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To facilitate\nthe implementation of the user interface to job control, the\noperating system maintains the notion of a <i>current\nterminal process group ID</i>. Members of this process group\n(processes whose process group ID is equal to the current\nterminal process group ID) receive keyboard-generated\nsignals such as <b><small>SIGINT</small></b><small>.</small>\nThese processes are said to be in the <i>foreground</i>.\n<i>Background</i> processes are those whose process group ID\ndiffers from the terminal&rsquo;s; such processes are immune\nto keyboard-generated signals. Only foreground processes are\nallowed to read from or, if the user so specifies with stty\ntostop, write to the terminal. Background processes which\nattempt to read from (write to when stty tostop is in\neffect) the terminal are sent a <b><small>SIGTTIN\n(SIGTTOU)</small></b> signal by the kernel&rsquo;s terminal\ndriver, which, unless caught, suspends the process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\noperating system on which <b>bash</b> is running supports\njob control, <b>bash</b> contains facilities to use it.\nTyping the <i>suspend</i> character (typically <b>^Z</b>,\nControl-Z) while a process is running causes that process to\nbe stopped and returns control to <b>bash</b>. Typing the\n<i>delayed suspend</i> character (typically <b>^Y</b>,\nControl-Y) causes the process to be stopped when it attempts\nto read input from the terminal, and control to be returned\nto <b>bash</b>. The user may then manipulate the state of\nthis job, using the <b>bg</b> command to continue it in the\nbackground, the <b>fg</b> command to continue it in the\nforeground, or the <b>kill</b> command to kill it. A\n<b>^Z</b> takes effect immediately, and has the additional\nside effect of causing pending output and typeahead to be\ndiscarded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are a\nnumber of ways to refer to a job in the shell. The character\n<b>%</b> introduces a job specification (<i>jobspec</i>).\nJob number <i>n</i> may be referred to as <b>%n</b>. A job\nmay also be referred to using a prefix of the name used to\nstart it, or using a substring that appears in its command\nline. For example, <b>%ce</b> refers to a stopped job whose\ncommand name begins with <b>ce</b>. If a prefix matches more\nthan one job, <b>bash</b> reports an error. Using\n<b>%?ce</b>, on the other hand, refers to any job containing\nthe string <b>ce</b> in its command line. If the substring\nmatches more than one job, <b>bash</b> reports an error. The\nsymbols <b>%%</b> and <b>%+</b> refer to the shell&rsquo;s\nnotion of the <i>current job</i>, which is the last job\nstopped while it was in the foreground or started in the\nbackground. The <i>previous job</i> may be referenced using\n<b>%-</b>. If there is only a single job, <b>%+</b> and\n<b>%-</b> can both be used to refer to that job. In output\npertaining to jobs (e.g., the output of the <b>jobs</b>\ncommand), the current job is always flagged with a <b>+</b>,\nand the previous job with a <b>-</b>. A single % (with no\naccompanying job specification) also refers to the current\njob.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Simply naming a\njob can be used to bring it into the foreground: <b>%1</b>\nis a synonym for <b>&rsquo;&rsquo;fg %1&rsquo;&rsquo;</b>,\nbringing job 1 from the background into the foreground.\nSimilarly, <b>&rsquo;&rsquo;%1 &amp;&rsquo;&rsquo;</b>\nresumes job 1 in the background, equivalent to\n<b>&rsquo;&rsquo;bg %1&rsquo;&rsquo;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell\nlearns immediately whenever a job changes state. Normally,\n<b>bash</b> waits until it is about to print a prompt before\nreporting changes in a job&rsquo;s status so as to not\ninterrupt any other output. If the <b>-b</b> option to the\n<b>set</b> builtin command is enabled, <b>bash</b> reports\nsuch changes immediately. Any trap on\n<b><small>SIGCHLD</small></b> is executed for each child\nthat exits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If an attempt\nto exit <b>bash</b> is made while jobs are stopped (or, if\nthe <b>checkjobs</b> shell option has been enabled using the\n<b>shopt</b> builtin, running), the shell prints a warning\nmessage, and, if the <b>checkjobs</b> option is enabled,\nlists the jobs and their statuses. The <b>jobs</b> command\nmay then be used to inspect their status. If a second\nattempt to exit is made without an intervening command, the\nshell does not print another warning, and any stopped jobs\nare terminated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the shell\nis waiting for a job or process using the <b>wait</b>\nbuiltin, and job control is enabled, <b>wait</b> will return\nwhen the job changes state. The <b>-f</b> option causes\n<b>wait</b> to wait until the job or process terminates\nbefore returning.</p>\n\n<h2>PROMPTING\n<a name=\"PROMPTING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When executing\ninteractively, <b>bash</b> displays the primary prompt\n<b><small>PS1</small></b> when it is ready to read a\ncommand, and the secondary prompt <b><small>PS2</small></b>\nwhen it needs more input to complete a command. <b>Bash</b>\ndisplays <b><small>PS0</small></b> after it reads a command\nbut before executing it. <b>Bash</b> displays\n<b><small>PS4</small></b> as described above before tracing\neach command when the <b>-x</b> option is enabled.\n<b>Bash</b> allows these prompt strings to be customized by\ninserting a number of backslash-escaped special characters\nthat are decoded as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>\\a</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">an ASCII bell character (07)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>\\d</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>the date in &quot;Weekday Month Date&quot; format (e.g.,\n&quot;Tue May 26&quot;)</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:22%;\"><b>\\D{</b><i>format</i><b>}</b></p>\n\n<p style=\"margin-left:32%;\">the <i>format</i> is passed to\n<i>strftime</i>(3) and the result is inserted into the\nprompt string; an empty <i>format</i> results in a\nlocale-specific time representation. The braces are\nrequired</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\e</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>an ASCII escape character (033)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\h</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the hostname up to the first &rsquo;.&rsquo;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\H</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the hostname</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\j</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the number of jobs currently managed by the shell</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\l</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the basename of the shell&rsquo;s terminal device\nname</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\n</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>newline</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\r</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>carriage return</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\s</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the name of the shell, the basename of <b>$0</b> (the\nportion following the final slash)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\t</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the current time in 24-hour HH:MM:SS format</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\T</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the current time in 12-hour HH:MM:SS format</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\@</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the current time in 12-hour am/pm format</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\A</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the current time in 24-hour HH:MM format</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\u</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the username of the current user</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\v</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the version of <b>bash</b> (e.g., 2.00)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\V</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the release of <b>bash</b>, version + patch level (e.g.,\n2.00.0)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\w</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the current working directory, with\n<b><small>$HOME</small></b> abbreviated with a tilde (uses\nthe value of the <b><small>PROMPT_DIRTRIM</small></b>\nvariable)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\W</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the basename of the current working directory, with\n<b><small>$HOME</small></b> abbreviated with a tilde</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\!</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the history number of this command</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\#</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the command number of this command</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\$</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>if the effective UID is 0, a <b>#</b>, otherwise a\n<b>$</b></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\</b><i>nnn</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the character corresponding to the octal number\n<i>nnn</i></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\\\</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>a backslash</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\[</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>begin a sequence of non-printing characters, which could\nbe used to embed a terminal control sequence into the\nprompt</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\]</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>end a sequence of non-printing characters</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nnumber and the history number are usually different: the\nhistory number of a command is its position in the history\nlist, which may include commands restored from the history\nfile (see <b><small>HISTORY</small></b> below), while the\ncommand number is the position in the sequence of commands\nexecuted during the current shell session. After the string\nis decoded, it is expanded via parameter expansion, command\nsubstitution, arithmetic expansion, and quote removal,\nsubject to the value of the <b>promptvars</b> shell option\n(see the description of the <b>shopt</b> command under\n<b><small>SHELL BUILTIN COMMANDS</small></b> below). This\ncan have unwanted side effects if escaped portions of the\nstring appear within command substitution or contain\ncharacters special to word expansion.</p>\n\n<h2>READLINE\n<a name=\"READLINE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is the\nlibrary that handles reading input when using an interactive\nshell, unless the <b>--noediting</b> option is given at\nshell invocation. Line editing is also used when using the\n<b>-e</b> option to the <b>read</b> builtin. By default, the\nline editing commands are similar to those of Emacs. A\nvi-style line editing interface is also available. Line\nediting can be enabled at any time using the <b>-o emacs</b>\nor <b>-o vi</b> options to the <b>set</b> builtin (see\n<b><small>SHELL BUILTIN COMMANDS</small></b> below). To turn\noff line editing after the shell is running, use the <b>+o\nemacs</b> or <b>+o vi</b> options to the <b>set</b>\nbuiltin.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Readline\nNotation</b> <br>\nIn this section, the Emacs-style notation is used to denote\nkeystrokes. Control keys are denoted by C-<i>key</i>, e.g.,\nC-n means Control-N. Similarly, <i>meta</i> keys are denoted\nby M-<i>key</i>, so M-x means Meta-X. (On keyboards without\na <i>meta</i> key, M-<i>x</i> means ESC <i>x</i>, i.e.,\npress the Escape key then the <i>x</i> key. This makes ESC\nthe <i>meta prefix</i>. The combination M-C-<i>x</i> means\nESC-Control-<i>x</i>, or press the Escape key then hold the\nControl key while pressing the <i>x</i> key.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Readline\ncommands may be given numeric <i>arguments</i>, which\nnormally act as a repeat count. Sometimes, however, it is\nthe sign of the argument that is significant. Passing a\nnegative argument to a command that acts in the forward\ndirection (e.g., <b>kill-line</b>) causes that command to\nact in a backward direction. Commands whose behavior with\narguments deviates from this are noted below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a command\nis described as <i>killing</i> text, the text deleted is\nsaved for possible future retrieval (<i>yanking</i>). The\nkilled text is saved in a <i>kill ring</i>. Consecutive\nkills cause the text to be accumulated into one unit, which\ncan be yanked all at once. Commands which do not kill text\nseparate the chunks of text on the kill ring.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Readline\nInitialization</b> <br>\nReadline is customized by putting commands in an\ninitialization file (the <i>inputrc</i> file). The name of\nthis file is taken from the value of the\n<b><small>INPUTRC</small></b> variable. If that variable is\nunset, the default is <i>~/.inputrc</i>. If that file does\nnot exist or cannot be read, the ultimate default is\n<i>/etc/inputrc</i>. When a program which uses the readline\nlibrary starts up, the initialization file is read, and the\nkey bindings and variables are set. There are only a few\nbasic constructs allowed in the readline initialization\nfile. Blank lines are ignored. Lines beginning with a\n<b>#</b> are comments. Lines beginning with a <b>$</b>\nindicate conditional constructs. Other lines denote key\nbindings and variable settings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\nkey-bindings may be changed with an <i>inputrc</i> file.\nOther programs that use this library may add their own\ncommands and bindings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nplacing</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">M-Control-u:\nuniversal-argument</p>\n\n<p style=\"margin-left:11%;\">or</p>\n\n<p style=\"margin-left:22%;\">C-Meta-u:\nuniversal-argument</p>\n\n<p style=\"margin-left:11%;\">into the <i>inputrc</i> would\nmake M-C-u execute the readline command\n<i>universal-argument</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nsymbolic character names are recognized: <i>RUBOUT</i>,\n<i>DEL</i>, <i>ESC</i>, <i>LFD</i>, <i>NEWLINE</i>,\n<i>RET</i>, <i>RETURN</i>, <i>SPC</i>, <i>SPACE</i>, and\n<i>TAB</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\ncommand names, readline allows keys to be bound to a string\nthat is inserted when the key is pressed (a\n<i>macro</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Readline Key\nBindings</b> <br>\nThe syntax for controlling key bindings in the\n<i>inputrc</i> file is simple. All that is required is the\nname of the command or the text of a macro and a key\nsequence to which it should be bound. The name may be\nspecified in one of two ways: as a symbolic key name,\npossibly with <i>Meta-</i> or <i>Control-</i> prefixes, or\nas a key sequence.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using the\nform <b>keyname</b>:<i>function-name</i> or <i>macro</i>,\n<i>keyname</i> is the name of a key spelled out in English.\nFor example:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Control-u:\nuniversal-argument <br>\nMeta-Rubout: backward-kill-word <br>\nControl-o: &quot;&gt; output&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the above\nexample, <i>C-u</i> is bound to the function\n<b>universal-argument</b>, <i>M-DEL</i> is bound to the\nfunction <b>backward-kill-word</b>, and <i>C-o</i> is bound\nto run the macro expressed on the right hand side (that is,\nto insert the text &rsquo;&rsquo;&gt; output&rsquo;&rsquo;\ninto the line).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the second\nform, <b>&quot;keyseq&quot;</b>:<i>function-name</i> or\n<i>macro</i>, <b>keyseq</b> differs from <b>keyname</b>\nabove in that strings denoting an entire key sequence may be\nspecified by placing the sequence within double quotes. Some\nGNU Emacs style key escapes can be used, as in the following\nexample, but the symbolic character names are not\nrecognized.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">&quot;\\C-u&quot;:\nuniversal-argument <br>\n&quot;\\C-x\\C-r&quot;: re-read-init-file <br>\n&quot;\\e[11~&quot;: &quot;Function Key 1&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this\nexample, <i>C-u</i> is again bound to the function\n<b>universal-argument</b>. <i>C-x C-r</i> is bound to the\nfunction <b>re-read-init-file</b>, and <i>ESC [ 1 1 ~</i> is\nbound to insert the text &rsquo;&rsquo;Function Key\n1&rsquo;&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The full set of\nGNU Emacs style escape sequences is</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><b>\\C-</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"30%\">\n\n\n<p style=\"margin-top: 1em\">control prefix</p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\M-</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"30%\">\n\n\n<p>meta prefix</p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\e</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"30%\">\n\n\n<p>an escape character</p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\\\</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"30%\">\n\n\n<p>backslash</p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\&quot;</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"30%\">\n\n\n<p>literal &quot;</p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\'</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"30%\">\n\n\n<p>literal '</p></td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe GNU Emacs style escape sequences, a second set of\nbackslash escapes is available:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><b>\\a</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">alert (bell)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\b</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>backspace</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\d</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>delete</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\f</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>form feed</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\n</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>newline</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\r</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>carriage return</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\t</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>horizontal tab</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\v</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>vertical tab</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\</b><i>nnn</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the eight-bit character whose value is the octal value\n<i>nnn</i> (one to three digits)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\x</b><i>HH</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the eight-bit character whose value is the hexadecimal\nvalue <i>HH</i> (one or two hex digits)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When entering\nthe text of a macro, single or double quotes must be used to\nindicate a macro definition. Unquoted text is assumed to be\na function name. In the macro body, the backslash escapes\ndescribed above are expanded. Backslash will quote any other\ncharacter in the macro text, including &quot; and '.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b>\nallows the current readline key bindings to be displayed or\nmodified with the <b>bind</b> builtin command. The editing\nmode may be switched during interactive use by using the\n<b>-o</b> option to the <b>set</b> builtin command (see\n<b><small>SHELL BUILTIN COMMANDS</small></b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Readline\nVariables</b> <br>\nReadline has variables that can be used to further customize\nits behavior. A variable may be set in the <i>inputrc</i>\nfile with a statement of the form</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>set</b>\n<i>variable-name value</i></p>\n\n<p style=\"margin-left:11%;\">or using the <b>bind</b>\nbuiltin command (see <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Except where\nnoted, readline variables can take the values <b>On</b> or\n<b>Off</b> (without regard to case). Unrecognized variable\nnames are ignored. When a variable value is read, empty or\nnull values, &quot;on&quot; (case-insensitive), and\n&quot;1&quot; are equivalent to <b>On</b>. All other values\nare equivalent to <b>Off</b>. The variables and their\ndefault values are: <b><br>\nbell-style (audible)</b></p>\n\n<p style=\"margin-left:22%;\">Controls what happens when\nreadline wants to ring the terminal bell. If set to\n<b>none</b>, readline never rings the bell. If set to\n<b>visible</b>, readline uses a visible bell if one is\navailable. If set to <b>audible</b>, readline attempts to\nring the terminal&rsquo;s bell.</p>\n\n<p style=\"margin-left:11%;\"><b>bind-tty-special-chars\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nattempts to bind the control characters treated specially by\nthe kernel&rsquo;s terminal driver to their readline\nequivalents.</p>\n\n<p style=\"margin-left:11%;\"><b>blink-matching-paren\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nattempts to briefly move the cursor to an opening\nparenthesis when a closing parenthesis is inserted.</p>\n\n<p style=\"margin-left:11%;\"><b>colored-completion-prefix\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, when\nlisting completions, readline displays the common prefix of\nthe set of possible completions using a different color. The\ncolor definitions are taken from the value of the\n<b>LS_COLORS</b> environment variable.</p>\n\n<p style=\"margin-left:11%;\"><b>colored-stats (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\ndisplays possible completions using different colors to\nindicate their file type. The color definitions are taken\nfrom the value of the <b>LS_COLORS</b> environment\nvariable.</p>\n\n<p style=\"margin-left:11%;\"><b>comment-begin\n(&rsquo;&rsquo;#&rsquo;&rsquo;)</b></p>\n\n<p style=\"margin-left:22%;\">The string that is inserted\nwhen the readline <b>insert-comment</b> command is executed.\nThis command is bound to <b>M-#</b> in emacs mode and to\n<b>#</b> in vi command mode.</p>\n\n<p style=\"margin-left:11%;\"><b>completion-display-width\n(-1)</b></p>\n\n<p style=\"margin-left:22%;\">The number of screen columns\nused to display possible matches when performing completion.\nThe value is ignored if it is less than 0 or greater than\nthe terminal screen width. A value of 0 will cause matches\nto be displayed one per line. The default value is -1.</p>\n\n<p style=\"margin-left:11%;\"><b>completion-ignore-case\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nperforms filename matching and completion in a\ncase-insensitive fashion.</p>\n\n<p style=\"margin-left:11%;\"><b>completion-map-case\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, and\n<b>completion-ignore-case</b> is enabled, readline treats\nhyphens (<i>-</i>) and underscores (<i>_</i>) as equivalent\nwhen performing case-insensitive filename matching and\ncompletion.</p>\n\n\n<p style=\"margin-left:11%;\"><b>completion-prefix-display-length\n(0)</b></p>\n\n<p style=\"margin-left:22%;\">The length in characters of the\ncommon prefix of a list of possible completions that is\ndisplayed without modification. When set to a value greater\nthan zero, common prefixes longer than this value are\nreplaced with an ellipsis when displaying possible\ncompletions.</p>\n\n<p style=\"margin-left:11%;\"><b>completion-query-items\n(100)</b></p>\n\n<p style=\"margin-left:22%;\">This determines when the user\nis queried about viewing the number of possible completions\ngenerated by the <b>possible-completions</b> command. It may\nbe set to any integer value greater than or equal to zero.\nIf the number of possible completions is greater than or\nequal to the value of this variable, readline will ask\nwhether or not the user wishes to view them; otherwise they\nare simply listed on the terminal.</p>\n\n<p style=\"margin-left:11%;\"><b>convert-meta (On)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill convert characters with the eighth bit set to an ASCII\nkey sequence by stripping the eighth bit and prefixing an\nescape character (in effect, using escape as the <i>meta\nprefix</i>). The default is <i>On</i>, but readline will set\nit to <i>Off</i> if the locale contains eight-bit\ncharacters.</p>\n\n<p style=\"margin-left:11%;\"><b>disable-completion\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill inhibit word completion. Completion characters will be\ninserted into the line as if they had been mapped to\n<b>self-insert</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>echo-control-characters\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, on\noperating systems that indicate they support it, readline\nechoes a character corresponding to a signal generated from\nthe keyboard.</p>\n\n<p style=\"margin-left:11%;\"><b>editing-mode (emacs)</b></p>\n\n<p style=\"margin-left:22%;\">Controls whether readline\nbegins with a set of key bindings similar to <i>Emacs</i> or\n<i>vi</i>. <b>editing-mode</b> can be set to either\n<b>emacs</b> or <b>vi</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>emacs-mode-string\n(@)</b></p>\n\n<p style=\"margin-left:22%;\">If the\n<i>show-mode-in-prompt</i> variable is enabled, this string\nis displayed immediately before the last line of the primary\nprompt when emacs editing mode is active. The value is\nexpanded like a key binding, so the standard set of meta-\nand control prefixes and backslash escape sequences is\navailable. Use the \\1 and \\2 escapes to begin and end\nsequences of non-printing characters, which can be used to\nembed a terminal control sequence into the mode string.</p>\n\n<p style=\"margin-left:11%;\"><b>enable-bracketed-paste\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, readline\nwill configure the terminal in a way that will enable it to\ninsert each paste into the editing buffer as a single string\nof characters, instead of treating each character as if it\nhad been read from the keyboard. This can prevent pasted\ncharacters from being interpreted as editing commands.</p>\n\n<p style=\"margin-left:11%;\"><b>enable-keypad (Off)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, readline\nwill try to enable the application keypad when it is called.\nSome systems need this to enable the arrow keys.</p>\n\n<p style=\"margin-left:11%;\"><b>enable-meta-key (On)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, readline\nwill try to enable any meta modifier key the terminal claims\nto support when it is called. On many terminals, the meta\nkey is used to send eight-bit characters.</p>\n\n<p style=\"margin-left:11%;\"><b>expand-tilde (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, tilde\nexpansion is performed when readline attempts word\ncompletion.</p>\n\n<p style=\"margin-left:11%;\"><b>history-preserve-point\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, the\nhistory code attempts to place point at the same location on\neach history line retrieved with <b>previous-history</b> or\n<b>next-history</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>history-size (unset)</b></p>\n\n<p style=\"margin-left:22%;\">Set the maximum number of\nhistory entries saved in the history list. If set to zero,\nany existing history entries are deleted and no new entries\nare saved. If set to a value less than zero, the number of\nhistory entries is not limited. By default, the number of\nhistory entries is set to the value of the <b>HISTSIZE</b>\nshell variable. If an attempt is made to set\n<i>history-size</i> to a non-numeric value, the maximum\nnumber of history entries will be set to 500.</p>\n\n<p style=\"margin-left:11%;\"><b>horizontal-scroll-mode\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, makes\nreadline use a single line for display, scrolling the input\nhorizontally on a single screen line when it becomes longer\nthan the screen width rather than wrapping to a new line.\nThis setting is automatically enabled for terminals of\nheight 1.</p>\n\n<p style=\"margin-left:11%;\"><b>input-meta (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill enable eight-bit input (that is, it will not strip the\neighth bit from the characters it reads), regardless of what\nthe terminal claims it can support. The name\n<b>meta-flag</b> is a synonym for this variable. The default\nis <i>Off</i>, but readline will set it to <i>On</i> if the\nlocale contains eight-bit characters.</p>\n\n<p style=\"margin-left:11%;\"><b>isearch-terminators\n(&rsquo;&rsquo;C-[C-J&rsquo;&rsquo;)</b></p>\n\n<p style=\"margin-left:22%;\">The string of characters that\nshould terminate an incremental search without subsequently\nexecuting the character as a command. If this variable has\nnot been given a value, the characters <i>ESC</i> and\n<i>C-J</i> will terminate an incremental search.</p>\n\n<p style=\"margin-left:11%;\"><b>keymap (emacs)</b></p>\n\n<p style=\"margin-left:22%;\">Set the current readline\nkeymap. The set of valid keymap names is <i>emacs,\nemacs-standard, emacs-meta, emacs-ctlx, vi, vi-command</i>,\nand <i>vi-insert</i>. <i>vi</i> is equivalent to\n<i>vi-command</i>; <i>emacs</i> is equivalent to\n<i>emacs-standard</i>. The default value is <i>emacs</i>;\nthe value of <b>editing-mode</b> also affects the default\nkeymap.</p>\n\n<p style=\"margin-left:11%;\"><b>keyseq-timeout (500)</b></p>\n\n<p style=\"margin-left:22%;\">Specifies the duration\n<i>readline</i> will wait for a character when reading an\nambiguous key sequence (one that can form a complete key\nsequence using the input read so far, or can take additional\ninput to complete a longer key sequence). If no input is\nreceived within the timeout, <i>readline</i> will use the\nshorter but complete key sequence. The value is specified in\nmilliseconds, so a value of 1000 means that <i>readline</i>\nwill wait one second for additional input. If this variable\nis set to a value less than or equal to zero, or to a\nnon-numeric value, <i>readline</i> will wait until another\nkey is pressed to decide which key sequence to complete.</p>\n\n<p style=\"margin-left:11%;\"><b>mark-directories\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, completed\ndirectory names have a slash appended.</p>\n\n<p style=\"margin-left:11%;\"><b>mark-modified-lines\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, history\nlines that have been modified are displayed with a preceding\nasterisk (<b>*</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>mark-symlinked-directories\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, completed\nnames which are symbolic links to directories have a slash\nappended (subject to the value of\n<b>mark-directories</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>match-hidden-files\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">This variable, when set to\n<b>On</b>, causes readline to match files whose names begin\nwith a &rsquo;.&rsquo; (hidden files) when performing\nfilename completion. If set to <b>Off</b>, the leading\n&rsquo;.&rsquo; must be supplied by the user in the filename\nto be completed.</p>\n\n\n<p style=\"margin-left:11%;\"><b>menu-complete-display-prefix\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, menu\ncompletion displays the common prefix of the list of\npossible completions (which may be empty) before cycling\nthrough the list.</p>\n\n<p style=\"margin-left:11%;\"><b>output-meta (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill display characters with the eighth bit set directly\nrather than as a meta-prefixed escape sequence. The default\nis <i>Off</i>, but readline will set it to <i>On</i> if the\nlocale contains eight-bit characters.</p>\n\n<p style=\"margin-left:11%;\"><b>page-completions\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nuses an internal <i>more</i>-like pager to display a\nscreenful of possible completions at a time.</p>\n\n\n<p style=\"margin-left:11%;\"><b>print-completions-horizontally\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill display completions with matches sorted horizontally in\nalphabetical order, rather than down the screen.</p>\n\n<p style=\"margin-left:11%;\"><b>revert-all-at-newline\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill undo all changes to history lines before returning when\n<b>accept-line</b> is executed. By default, history lines\nmay be modified and retain individual undo lists across\ncalls to <b>readline</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>show-all-if-ambiguous\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">This alters the default\nbehavior of the completion functions. If set to <b>On</b>,\nwords which have more than one possible completion cause the\nmatches to be listed immediately instead of ringing the\nbell.</p>\n\n<p style=\"margin-left:11%;\"><b>show-all-if-unmodified\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">This alters the default\nbehavior of the completion functions in a fashion similar to\n<b>show-all-if-ambiguous</b>. If set to <b>On</b>, words\nwhich have more than one possible completion without any\npossible partial completion (the possible completions\ndon&rsquo;t share a common prefix) cause the matches to be\nlisted immediately instead of ringing the bell.</p>\n\n<p style=\"margin-left:11%;\"><b>show-mode-in-prompt\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, add a\nstring to the beginning of the prompt indicating the editing\nmode: emacs, vi command, or vi insertion. The mode strings\nare user-settable (e.g., <i>emacs-mode-string</i>).</p>\n\n<p style=\"margin-left:11%;\"><b>skip-completed-text\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, this\nalters the default completion behavior when inserting a\nsingle match into the line. It&rsquo;s only active when\nperforming completion in the middle of a word. If enabled,\nreadline does not insert characters from the completion that\nmatch characters after point in the word being completed, so\nportions of the word following the cursor are not\nduplicated.</p>\n\n<p style=\"margin-left:11%;\"><b>vi-cmd-mode-string\n((cmd))</b></p>\n\n<p style=\"margin-left:22%;\">If the\n<i>show-mode-in-prompt</i> variable is enabled, this string\nis displayed immediately before the last line of the primary\nprompt when vi editing mode is active and in command mode.\nThe value is expanded like a key binding, so the standard\nset of meta- and control prefixes and backslash escape\nsequences is available. Use the \\1 and \\2 escapes to begin\nand end sequences of non-printing characters, which can be\nused to embed a terminal control sequence into the mode\nstring.</p>\n\n<p style=\"margin-left:11%;\"><b>vi-ins-mode-string\n((ins))</b></p>\n\n<p style=\"margin-left:22%;\">If the\n<i>show-mode-in-prompt</i> variable is enabled, this string\nis displayed immediately before the last line of the primary\nprompt when vi editing mode is active and in insertion mode.\nThe value is expanded like a key binding, so the standard\nset of meta- and control prefixes and backslash escape\nsequences is available. Use the \\1 and \\2 escapes to begin\nand end sequences of non-printing characters, which can be\nused to embed a terminal control sequence into the mode\nstring.</p>\n\n<p style=\"margin-left:11%;\"><b>visible-stats (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, a\ncharacter denoting a file&rsquo;s type as reported by\n<i>stat</i>(2) is appended to the filename when listing\npossible completions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Readline\nConditional Constructs</b> <br>\nReadline implements a facility similar in spirit to the\nconditional compilation features of the C preprocessor which\nallows key bindings and variable settings to be performed as\nthe result of tests. There are four parser directives\nused.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>$if</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The <b>$if</b> construct allows bindings to be made\nbased on the editing mode, the terminal being used, or the\napplication using readline. The text of the test, after any\ncomparison operator,</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">extends to the end of the line;\nunless otherwise noted, no characters are required to\nisolate it.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><b>mode</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">The <b>mode=</b> form of the\n<b>$if</b> directive is used to test whether readline is in\nemacs or vi mode. This may be used in conjunction with the\n<b>set keymap</b> command, for instance, to set bindings in\nthe <i>emacs-standard</i> and <i>emacs-ctlx</i> keymaps only\nif readline is starting out in emacs mode.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>term</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>The <b>term=</b> form may be used to include\nterminal-specific key bindings, perhaps to bind the key\nsequences output by the terminal&rsquo;s function keys. The\nword on the right side of the <b>=</b> is tested against\nboth the full name of the terminal and the portion of the\nterminal name before the first <b>-</b>. This allows\n<i>sun</i> to match both <i>sun</i> and <i>sun-cmd</i>, for\ninstance.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>version</b></p>\n\n<p style=\"margin-left:32%;\">The <b>version</b> test may be\nused to perform comparisons against specific readline\nversions. The <b>version</b> expands to the current readline\nversion. The set of comparison operators includes <b>=</b>,\n(and <b>==</b>), <b>!=</b>, <b>&lt;=</b>, <b>&gt;=</b>,\n<b>&lt;</b>, and <b>&gt;</b>. The version number supplied on\nthe right side of the operator consists of a major version\nnumber, an optional decimal point, and an optional minor\nversion (e.g., <b>7.1</b>). If the minor version is omitted,\nit is assumed to be <b>0</b>. The operator may be separated\nfrom the string <b>version</b> and from the version number\nargument by whitespace.</p>\n\n<p style=\"margin-left:22%;\"><b>application</b></p>\n\n<p style=\"margin-left:32%;\">The <b>application</b>\nconstruct is used to include application-specific settings.\nEach program using the readline library sets the\n<i>application name</i>, and an initialization file can test\nfor a particular value. This could be used to bind key\nsequences to functions useful for a specific program. For\ninstance, the following command adds a key sequence that\nquotes the current or previous word in <b>bash</b>:</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\"><b>$if</b> Bash\n<br>\n# Quote the current or previous word <br>\n&quot;\\C-xq&quot;: &quot;\\eb\\&quot;\\ef\\&quot;&quot; <b><br>\n$endif</b></p>\n\n<p style=\"margin-left:22%;\"><i>variable</i></p>\n\n<p style=\"margin-left:32%;\">The <i>variable</i> construct\nprovides simple equality tests for readline variables and\nvalues. The permitted comparison operators are <i>=</i>,\n<i>==</i>, and <i>!=</i>. The variable name must be\nseparated from the comparison operator by whitespace; the\noperator may be separated from the value on the right hand\nside by whitespace. Both string and boolean variables may be\ntested. Boolean variables must be tested against the values\n<i>on</i> and <i>off</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$endif</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This command, as seen in the previous example,\nterminates an <b>$if</b> command.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$else</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Commands in this branch of the <b>$if</b> directive are\nexecuted if the test fails.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>$include</b></p>\n\n<p style=\"margin-left:22%;\">This directive takes a single\nfilename as an argument and reads commands and bindings from\nthat file. For example, the following directive would read\n<i>/etc/inputrc</i>:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>$include</b>\n<i>/etc/inputrc</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Searching</b>\n<br>\nReadline provides commands for searching through the command\nhistory (see <b><small>HISTORY</small></b> below) for lines\ncontaining a specified string. There are two search modes:\n<i>incremental</i> and <i>non-incremental</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Incremental\nsearches begin before the user has finished typing the\nsearch string. As each character of the search string is\ntyped, readline displays the next entry from the history\nmatching the string typed so far. An incremental search\nrequires only as many characters as needed to find the\ndesired history entry. The characters present in the value\nof the <b>isearch-terminators</b> variable are used to\nterminate an incremental search. If that variable has not\nbeen assigned a value the Escape and Control-J characters\nwill terminate an incremental search. Control-G will abort\nan incremental search and restore the original line. When\nthe search is terminated, the history entry containing the\nsearch string becomes the current line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To find other\nmatching entries in the history list, type Control-S or\nControl-R as appropriate. This will search backward or\nforward in the history for the next entry matching the\nsearch string typed so far. Any other key sequence bound to\na readline command will terminate the search and execute\nthat command. For instance, a <i>newline</i> will terminate\nthe search and accept the line, thereby executing the\ncommand from the history list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Readline\nremembers the last incremental search string. If two\nControl-Rs are typed without any intervening characters\ndefining a new search string, any remembered search string\nis used.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Non-incremental\nsearches read the entire search string before starting to\nsearch for matching history lines. The search string may be\ntyped by the user or be part of the contents of the current\nline.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Readline\nCommand Names</b> <br>\nThe following is a list of the names of the commands and the\ndefault key sequences to which they are bound. Command names\nwithout an accompanying key sequence are unbound by default.\nIn the following descriptions, <i>point</i> refers to the\ncurrent cursor position, and <i>mark</i> refers to a cursor\nposition saved by the <b>set-mark</b> command. The text\nbetween the point and mark is referred to as the\n<i>region</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commands for\nMoving <br>\nbeginning-of-line (C-a)</b></p>\n\n<p style=\"margin-left:22%;\">Move to the start of the\ncurrent line.</p>\n\n<p style=\"margin-left:11%;\"><b>end-of-line (C-e)</b></p>\n\n<p style=\"margin-left:22%;\">Move to the end of the\nline.</p>\n\n<p style=\"margin-left:11%;\"><b>forward-char (C-f)</b></p>\n\n<p style=\"margin-left:22%;\">Move forward a character.</p>\n\n<p style=\"margin-left:11%;\"><b>backward-char (C-b)</b></p>\n\n<p style=\"margin-left:22%;\">Move back a character.</p>\n\n<p style=\"margin-left:11%;\"><b>forward-word (M-f)</b></p>\n\n<p style=\"margin-left:22%;\">Move forward to the end of the\nnext word. Words are composed of alphanumeric characters\n(letters and digits).</p>\n\n<p style=\"margin-left:11%;\"><b>backward-word (M-b)</b></p>\n\n<p style=\"margin-left:22%;\">Move back to the start of the\ncurrent or previous word. Words are composed of alphanumeric\ncharacters (letters and digits).</p>\n\n<p style=\"margin-left:11%;\"><b>shell-forward-word</b></p>\n\n<p style=\"margin-left:22%;\">Move forward to the end of the\nnext word. Words are delimited by non-quoted shell\nmetacharacters.</p>\n\n<p style=\"margin-left:11%;\"><b>shell-backward-word</b></p>\n\n<p style=\"margin-left:22%;\">Move back to the start of the\ncurrent or previous word. Words are delimited by non-quoted\nshell metacharacters.</p>\n\n\n<p style=\"margin-left:11%;\"><b>previous-screen-line</b></p>\n\n<p style=\"margin-left:22%;\">Attempt to move point to the\nsame physical screen column on the previous physical screen\nline. This will not have the desired effect if the current\nReadline line does not take up more than one physical line\nor if point is not greater than the length of the prompt\nplus the screen width.</p>\n\n<p style=\"margin-left:11%;\"><b>next-screen-line</b></p>\n\n<p style=\"margin-left:22%;\">Attempt to move point to the\nsame physical screen column on the next physical screen\nline. This will not have the desired effect if the current\nReadline line does not take up more than one physical line\nor if the length of the current Readline line is not greater\nthan the length of the prompt plus the screen width.</p>\n\n<p style=\"margin-left:11%;\"><b>clear-display\n(M-C-l)</b></p>\n\n<p style=\"margin-left:22%;\">Clear the screen and, if\npossible, the terminal&rsquo;s scrollback buffer, then\nredraw the current line, leaving the current line at the top\nof the screen.</p>\n\n<p style=\"margin-left:11%;\"><b>clear-screen (C-l)</b></p>\n\n<p style=\"margin-left:22%;\">Clear the screen, then redraw\nthe current line, leaving the current line at the top of the\nscreen. With an argument, refresh the current line without\nclearing the screen.</p>\n\n<p style=\"margin-left:11%;\"><b>redraw-current-line</b></p>\n\n<p style=\"margin-left:22%;\">Refresh the current line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commands for\nManipulating the History <br>\naccept-line (Newline, Return)</b></p>\n\n<p style=\"margin-left:22%;\">Accept the line regardless of\nwhere the cursor is. If this line is non-empty, add it to\nthe history list according to the state of the\n<b><small>HISTCONTROL</small></b> variable. If the line is a\nmodified history line, then restore the history line to its\noriginal state.</p>\n\n<p style=\"margin-left:11%;\"><b>previous-history\n(C-p)</b></p>\n\n<p style=\"margin-left:22%;\">Fetch the previous command from\nthe history list, moving back in the list.</p>\n\n<p style=\"margin-left:11%;\"><b>next-history (C-n)</b></p>\n\n<p style=\"margin-left:22%;\">Fetch the next command from the\nhistory list, moving forward in the list.</p>\n\n<p style=\"margin-left:11%;\"><b>beginning-of-history\n(M-&lt;)</b></p>\n\n<p style=\"margin-left:22%;\">Move to the first line in the\nhistory.</p>\n\n<p style=\"margin-left:11%;\"><b>end-of-history\n(M-&gt;)</b></p>\n\n<p style=\"margin-left:22%;\">Move to the end of the input\nhistory, i.e., the line currently being entered.</p>\n\n<p style=\"margin-left:11%;\"><b>reverse-search-history\n(C-r)</b></p>\n\n<p style=\"margin-left:22%;\">Search backward starting at the\ncurrent line and moving &rsquo;up&rsquo; through the history\nas necessary. This is an incremental search.</p>\n\n<p style=\"margin-left:11%;\"><b>forward-search-history\n(C-s)</b></p>\n\n<p style=\"margin-left:22%;\">Search forward starting at the\ncurrent line and moving &rsquo;down&rsquo; through the\nhistory as necessary. This is an incremental search.</p>\n\n\n<p style=\"margin-left:11%;\"><b>non-incremental-reverse-search-history\n(M-p)</b></p>\n\n<p style=\"margin-left:22%;\">Search backward through the\nhistory starting at the current line using a non-incremental\nsearch for a string supplied by the user.</p>\n\n\n<p style=\"margin-left:11%;\"><b>non-incremental-forward-search-history\n(M-n)</b></p>\n\n<p style=\"margin-left:22%;\">Search forward through the\nhistory using a non-incremental search for a string supplied\nby the user.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-search-forward</b></p>\n\n<p style=\"margin-left:22%;\">Search forward through the\nhistory for the string of characters between the start of\nthe current line and the point. This is a non-incremental\nsearch.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-search-backward</b></p>\n\n<p style=\"margin-left:22%;\">Search backward through the\nhistory for the string of characters between the start of\nthe current line and the point. This is a non-incremental\nsearch.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-substring-search-backward</b></p>\n\n<p style=\"margin-left:22%;\">Search backward through the\nhistory for the string of characters between the start of\nthe current line and the current cursor position (the\n<i>point</i>). The search string may match anywhere in a\nhistory line. This is a non-incremental search.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-substring-search-forward</b></p>\n\n<p style=\"margin-left:22%;\">Search forward through the\nhistory for the string of characters between the start of\nthe current line and the point. The search string may match\nanywhere in a history line. This is a non-incremental\nsearch.</p>\n\n<p style=\"margin-left:11%;\"><b>yank-nth-arg (M-C-y)</b></p>\n\n<p style=\"margin-left:22%;\">Insert the first argument to\nthe previous command (usually the second word on the\nprevious line) at point. With an argument <i>n</i>, insert\nthe <i>n</i>th word from the previous command (the words in\nthe previous command begin with word 0). A negative argument\ninserts the <i>n</i>th word from the end of the previous\ncommand. Once the argument <i>n</i> is computed, the\nargument is extracted as if the &quot;!<i>n</i>&quot;\nhistory expansion had been specified.</p>\n\n<p style=\"margin-left:11%;\"><b>yank-last-arg (M-.,\nM-_)</b></p>\n\n<p style=\"margin-left:22%;\">Insert the last argument to the\nprevious command (the last word of the previous history\nentry). With a numeric argument, behave exactly like\n<b>yank-nth-arg</b>. Successive calls to\n<b>yank-last-arg</b> move back through the history list,\ninserting the last word (or the word specified by the\nargument to the first call) of each line in turn. Any\nnumeric argument supplied to these successive calls\ndetermines the direction to move through the history. A\nnegative argument switches the direction through the history\n(back or forward). The history expansion facilities are used\nto extract the last word, as if the &quot;!$&quot; history\nexpansion had been specified.</p>\n\n<p style=\"margin-left:11%;\"><b>shell-expand-line\n(M-C-e)</b></p>\n\n<p style=\"margin-left:22%;\">Expand the line as the shell\ndoes. This performs alias and history expansion as well as\nall of the shell word expansions. See <b><small>HISTORY\nEXPANSION</small></b> below for a description of history\nexpansion.</p>\n\n<p style=\"margin-left:11%;\"><b>history-expand-line\n(M-^)</b></p>\n\n<p style=\"margin-left:22%;\">Perform history expansion on\nthe current line. See <b><small>HISTORY\nEXPANSION</small></b> below for a description of history\nexpansion.</p>\n\n<p style=\"margin-left:11%;\"><b>magic-space</b></p>\n\n<p style=\"margin-left:22%;\">Perform history expansion on\nthe current line and insert a space. See <b><small>HISTORY\nEXPANSION</small></b> below for a description of history\nexpansion.</p>\n\n<p style=\"margin-left:11%;\"><b>alias-expand-line</b></p>\n\n<p style=\"margin-left:22%;\">Perform alias expansion on the\ncurrent line. See <b><small>ALIASES</small></b> above for a\ndescription of alias expansion.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-and-alias-expand-line</b></p>\n\n<p style=\"margin-left:22%;\">Perform history and alias\nexpansion on the current line.</p>\n\n<p style=\"margin-left:11%;\"><b>insert-last-argument (M-.,\nM-_)</b></p>\n\n<p style=\"margin-left:22%;\">A synonym for\n<b>yank-last-arg</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>operate-and-get-next\n(C-o)</b></p>\n\n<p style=\"margin-left:22%;\">Accept the current line for\nexecution and fetch the next line relative to the current\nline from the history for editing. A numeric argument, if\nsupplied, specifies the history entry to use instead of the\ncurrent line.</p>\n\n<p style=\"margin-left:11%;\"><b>edit-and-execute-command\n(C-x C-e)</b></p>\n\n<p style=\"margin-left:22%;\">Invoke an editor on the current\ncommand line, and execute the result as shell commands.\n<b>Bash</b> attempts to invoke\n<b><small>$VISUAL</small></b><small>,\n<b>$EDITOR</b>,</small> and <i>emacs</i> as the editor, in\nthat order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commands for\nChanging Text</b> <i><br>\nend-of-file</i> <b>(usually C-d)</b></p>\n\n<p style=\"margin-left:22%;\">The character indicating\nend-of-file as set, for example, by\n&rsquo;&rsquo;stty&rsquo;&rsquo;. If this character is read\nwhen there are no characters on the line, and point is at\nthe beginning of the line, Readline interprets it as the end\nof input and returns\n<b><small>EOF</small></b><small>.</small></p>\n\n<p style=\"margin-left:11%;\"><b>delete-char (C-d)</b></p>\n\n<p style=\"margin-left:22%;\">Delete the character at point.\nIf this function is bound to the same character as the tty\n<b>EOF</b> character, as <b>C-d</b> commonly is, see above\nfor the effects.</p>\n\n<p style=\"margin-left:11%;\"><b>backward-delete-char\n(Rubout)</b></p>\n\n<p style=\"margin-left:22%;\">Delete the character behind the\ncursor. When given a numeric argument, save the deleted text\non the kill ring.</p>\n\n\n<p style=\"margin-left:11%;\"><b>forward-backward-delete-char</b></p>\n\n<p style=\"margin-left:22%;\">Delete the character under the\ncursor, unless the cursor is at the end of the line, in\nwhich case the character behind the cursor is deleted.</p>\n\n<p style=\"margin-left:11%;\"><b>quoted-insert (C-q,\nC-v)</b></p>\n\n<p style=\"margin-left:22%;\">Add the next character typed to\nthe line verbatim. This is how to insert characters like\n<b>C-q</b>, for example.</p>\n\n<p style=\"margin-left:11%;\"><b>tab-insert (C-v TAB)</b></p>\n\n<p style=\"margin-left:22%;\">Insert a tab character.</p>\n\n<p style=\"margin-left:11%;\"><b>self-insert\n(a,&nbsp;b,&nbsp;A,&nbsp;1,&nbsp;!,&nbsp;...)</b></p>\n\n<p style=\"margin-left:22%;\">Insert the character typed.</p>\n\n<p style=\"margin-left:11%;\"><b>transpose-chars\n(C-t)</b></p>\n\n<p style=\"margin-left:22%;\">Drag the character before point\nforward over the character at point, moving point forward as\nwell. If point is at the end of the line, then this\ntransposes the two characters before point. Negative\narguments have no effect.</p>\n\n<p style=\"margin-left:11%;\"><b>transpose-words\n(M-t)</b></p>\n\n<p style=\"margin-left:22%;\">Drag the word before point past\nthe word after point, moving point over that word as well.\nIf point is at the end of the line, this transposes the last\ntwo words on the line.</p>\n\n<p style=\"margin-left:11%;\"><b>upcase-word (M-u)</b></p>\n\n<p style=\"margin-left:22%;\">Uppercase the current (or\nfollowing) word. With a negative argument, uppercase the\nprevious word, but do not move point.</p>\n\n<p style=\"margin-left:11%;\"><b>downcase-word (M-l)</b></p>\n\n<p style=\"margin-left:22%;\">Lowercase the current (or\nfollowing) word. With a negative argument, lowercase the\nprevious word, but do not move point.</p>\n\n<p style=\"margin-left:11%;\"><b>capitalize-word\n(M-c)</b></p>\n\n<p style=\"margin-left:22%;\">Capitalize the current (or\nfollowing) word. With a negative argument, capitalize the\nprevious word, but do not move point.</p>\n\n<p style=\"margin-left:11%;\"><b>overwrite-mode</b></p>\n\n<p style=\"margin-left:22%;\">Toggle overwrite mode. With an\nexplicit positive numeric argument, switches to overwrite\nmode. With an explicit non-positive numeric argument,\nswitches to insert mode. This command affects only\n<b>emacs</b> mode; <b>vi</b> mode does overwrite\ndifferently. Each call to <i>readline()</i> starts in insert\nmode. In overwrite mode, characters bound to\n<b>self-insert</b> replace the text at point rather than\npushing the text to the right. Characters bound to\n<b>backward-delete-char</b> replace the character before\npoint with a space. By default, this command is unbound.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Killing and\nYanking <br>\nkill-line (C-k)</b></p>\n\n<p style=\"margin-left:22%;\">Kill the text from point to the\nend of the line.</p>\n\n<p style=\"margin-left:11%;\"><b>backward-kill-line (C-x\nRubout)</b></p>\n\n<p style=\"margin-left:22%;\">Kill backward to the beginning\nof the line.</p>\n\n<p style=\"margin-left:11%;\"><b>unix-line-discard\n(C-u)</b></p>\n\n<p style=\"margin-left:22%;\">Kill backward from point to the\nbeginning of the line. The killed text is saved on the\nkill-ring.</p>\n\n<p style=\"margin-left:11%;\"><b>kill-whole-line</b></p>\n\n<p style=\"margin-left:22%;\">Kill all characters on the\ncurrent line, no matter where point is.</p>\n\n<p style=\"margin-left:11%;\"><b>kill-word (M-d)</b></p>\n\n<p style=\"margin-left:22%;\">Kill from point to the end of\nthe current word, or if between words, to the end of the\nnext word. Word boundaries are the same as those used by\n<b>forward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>backward-kill-word\n(M-Rubout)</b></p>\n\n<p style=\"margin-left:22%;\">Kill the word behind point.\nWord boundaries are the same as those used by\n<b>backward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>shell-kill-word</b></p>\n\n<p style=\"margin-left:22%;\">Kill from point to the end of\nthe current word, or if between words, to the end of the\nnext word. Word boundaries are the same as those used by\n<b>shell-forward-word</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>shell-backward-kill-word</b></p>\n\n<p style=\"margin-left:22%;\">Kill the word behind point.\nWord boundaries are the same as those used by\n<b>shell-backward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>unix-word-rubout\n(C-w)</b></p>\n\n<p style=\"margin-left:22%;\">Kill the word behind point,\nusing white space as a word boundary. The killed text is\nsaved on the kill-ring.</p>\n\n\n<p style=\"margin-left:11%;\"><b>unix-filename-rubout</b></p>\n\n<p style=\"margin-left:22%;\">Kill the word behind point,\nusing white space and the slash character as the word\nboundaries. The killed text is saved on the kill-ring.</p>\n\n<p style=\"margin-left:11%;\"><b>delete-horizontal-space\n(M-\\)</b></p>\n\n<p style=\"margin-left:22%;\">Delete all spaces and tabs\naround point.</p>\n\n<p style=\"margin-left:11%;\"><b>kill-region</b></p>\n\n<p style=\"margin-left:22%;\">Kill the text in the current\nregion.</p>\n\n<p style=\"margin-left:11%;\"><b>copy-region-as-kill</b></p>\n\n<p style=\"margin-left:22%;\">Copy the text in the region to\nthe kill buffer.</p>\n\n<p style=\"margin-left:11%;\"><b>copy-backward-word</b></p>\n\n<p style=\"margin-left:22%;\">Copy the word before point to\nthe kill buffer. The word boundaries are the same as\n<b>backward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>copy-forward-word</b></p>\n\n<p style=\"margin-left:22%;\">Copy the word following point\nto the kill buffer. The word boundaries are the same as\n<b>forward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>yank (C-y)</b></p>\n\n<p style=\"margin-left:22%;\">Yank the top of the kill ring\ninto the buffer at point.</p>\n\n<p style=\"margin-left:11%;\"><b>yank-pop (M-y)</b></p>\n\n<p style=\"margin-left:22%;\">Rotate the kill ring, and yank\nthe new top. Only works following <b>yank</b> or\n<b>yank-pop</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Numeric\nArguments <br>\ndigit-argument (M-0, M-1, ..., M--)</b></p>\n\n<p style=\"margin-left:22%;\">Add this digit to the argument\nalready accumulating, or start a new argument. M-- starts a\nnegative argument.</p>\n\n<p style=\"margin-left:11%;\"><b>universal-argument</b></p>\n\n<p style=\"margin-left:22%;\">This is another way to specify\nan argument. If this command is followed by one or more\ndigits, optionally with a leading minus sign, those digits\ndefine the argument. If the command is followed by digits,\nexecuting <b>universal-argument</b> again ends the numeric\nargument, but is otherwise ignored. As a special case, if\nthis command is immediately followed by a character that is\nneither a digit nor minus sign, the argument count for the\nnext command is multiplied by four. The argument count is\ninitially one, so executing this function the first time\nmakes the argument count four, a second time makes the\nargument count sixteen, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Completing\n<br>\ncomplete (TAB)</b></p>\n\n<p style=\"margin-left:22%;\">Attempt to perform completion\non the text before point. <b>Bash</b> attempts completion\ntreating the text as a variable (if the text begins with\n<b>$</b>), username (if the text begins with <b>~</b>),\nhostname (if the text begins with <b>@</b>), or command\n(including aliases and functions) in turn. If none of these\nproduces a match, filename completion is attempted.</p>\n\n<p style=\"margin-left:11%;\"><b>possible-completions\n(M-?)</b></p>\n\n<p style=\"margin-left:22%;\">List the possible completions\nof the text before point.</p>\n\n<p style=\"margin-left:11%;\"><b>insert-completions\n(M-*)</b></p>\n\n<p style=\"margin-left:22%;\">Insert all completions of the\ntext before point that would have been generated by\n<b>possible-completions</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>menu-complete</b></p>\n\n<p style=\"margin-left:22%;\">Similar to <b>complete</b>, but\nreplaces the word to be completed with a single match from\nthe list of possible completions. Repeated execution of\n<b>menu-complete</b> steps through the list of possible\ncompletions, inserting each match in turn. At the end of the\nlist of completions, the bell is rung (subject to the\nsetting of <b>bell-style</b>) and the original text is\nrestored. An argument of <i>n</i> moves <i>n</i> positions\nforward in the list of matches; a negative argument may be\nused to move backward through the list. This command is\nintended to be bound to <b>TAB</b>, but is unbound by\ndefault.</p>\n\n\n<p style=\"margin-left:11%;\"><b>menu-complete-backward</b></p>\n\n<p style=\"margin-left:22%;\">Identical to\n<b>menu-complete</b>, but moves backward through the list of\npossible completions, as if <b>menu-complete</b> had been\ngiven a negative argument. This command is unbound by\ndefault.</p>\n\n<p style=\"margin-left:11%;\"><b>delete-char-or-list</b></p>\n\n<p style=\"margin-left:22%;\">Deletes the character under the\ncursor if not at the beginning or end of the line (like\n<b>delete-char</b>). If at the end of the line, behaves\nidentically to <b>possible-completions</b>. This command is\nunbound by default.</p>\n\n<p style=\"margin-left:11%;\"><b>complete-filename\n(M-/)</b></p>\n\n<p style=\"margin-left:22%;\">Attempt filename completion on\nthe text before point.</p>\n\n\n<p style=\"margin-left:11%;\"><b>possible-filename-completions\n(C-x /)</b></p>\n\n<p style=\"margin-left:22%;\">List the possible completions\nof the text before point, treating it as a filename.</p>\n\n<p style=\"margin-left:11%;\"><b>complete-username\n(M-~)</b></p>\n\n<p style=\"margin-left:22%;\">Attempt completion on the text\nbefore point, treating it as a username.</p>\n\n\n<p style=\"margin-left:11%;\"><b>possible-username-completions\n(C-x ~)</b></p>\n\n<p style=\"margin-left:22%;\">List the possible completions\nof the text before point, treating it as a username.</p>\n\n<p style=\"margin-left:11%;\"><b>complete-variable\n(M-$)</b></p>\n\n<p style=\"margin-left:22%;\">Attempt completion on the text\nbefore point, treating it as a shell variable.</p>\n\n\n<p style=\"margin-left:11%;\"><b>possible-variable-completions\n(C-x $)</b></p>\n\n<p style=\"margin-left:22%;\">List the possible completions\nof the text before point, treating it as a shell\nvariable.</p>\n\n<p style=\"margin-left:11%;\"><b>complete-hostname\n(M-@)</b></p>\n\n<p style=\"margin-left:22%;\">Attempt completion on the text\nbefore point, treating it as a hostname.</p>\n\n\n<p style=\"margin-left:11%;\"><b>possible-hostname-completions\n(C-x @)</b></p>\n\n<p style=\"margin-left:22%;\">List the possible completions\nof the text before point, treating it as a hostname.</p>\n\n<p style=\"margin-left:11%;\"><b>complete-command\n(M-!)</b></p>\n\n<p style=\"margin-left:22%;\">Attempt completion on the text\nbefore point, treating it as a command name. Command\ncompletion attempts to match the text against aliases,\nreserved words, shell functions, shell builtins, and finally\nexecutable filenames, in that order.</p>\n\n\n<p style=\"margin-left:11%;\"><b>possible-command-completions\n(C-x !)</b></p>\n\n<p style=\"margin-left:22%;\">List the possible completions\nof the text before point, treating it as a command name.</p>\n\n<p style=\"margin-left:11%;\"><b>dynamic-complete-history\n(M-TAB)</b></p>\n\n<p style=\"margin-left:22%;\">Attempt completion on the text\nbefore point, comparing the text against lines from the\nhistory list for possible completion matches.</p>\n\n<p style=\"margin-left:11%;\"><b>dabbrev-expand</b></p>\n\n<p style=\"margin-left:22%;\">Attempt menu completion on the\ntext before point, comparing the text against lines from the\nhistory list for possible completion matches.</p>\n\n<p style=\"margin-left:11%;\"><b>complete-into-braces\n(M-{)</b></p>\n\n<p style=\"margin-left:22%;\">Perform filename completion and\ninsert the list of possible completions enclosed within\nbraces so the list is available to the shell (see <b>Brace\nExpansion</b> above).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Keyboard\nMacros <br>\nstart-kbd-macro (C-x ()</b></p>\n\n<p style=\"margin-left:22%;\">Begin saving the characters\ntyped into the current keyboard macro.</p>\n\n<p style=\"margin-left:11%;\"><b>end-kbd-macro (C-x\n))</b></p>\n\n<p style=\"margin-left:22%;\">Stop saving the characters\ntyped into the current keyboard macro and store the\ndefinition.</p>\n\n<p style=\"margin-left:11%;\"><b>call-last-kbd-macro (C-x\ne)</b></p>\n\n<p style=\"margin-left:22%;\">Re-execute the last keyboard\nmacro defined, by making the characters in the macro appear\nas if typed at the keyboard.</p>\n\n<p style=\"margin-left:11%;\"><b>print-last-kbd-macro\n()</b></p>\n\n<p style=\"margin-left:22%;\">Print the last keyboard macro\ndefined in a format suitable for the <i>inputrc</i>\nfile.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Miscellaneous\n<br>\nre-read-init-file (C-x C-r)</b></p>\n\n<p style=\"margin-left:22%;\">Read in the contents of the\n<i>inputrc</i> file, and incorporate any bindings or\nvariable assignments found there.</p>\n\n<p style=\"margin-left:11%;\"><b>abort (C-g)</b></p>\n\n<p style=\"margin-left:22%;\">Abort the current editing\ncommand and ring the terminal&rsquo;s bell (subject to the\nsetting of <b>bell-style</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>do-lowercase-version (M-A,\nM-B, M-</b><i>x</i><b>, ...)</b></p>\n\n<p style=\"margin-left:22%;\">If the metafied character\n<i>x</i> is uppercase, run the command that is bound to the\ncorresponding metafied lowercase character. The behavior is\nundefined if <i>x</i> is already lowercase.</p>\n\n<p style=\"margin-left:11%;\"><b>prefix-meta (ESC)</b></p>\n\n<p style=\"margin-left:22%;\">Metafy the next character\ntyped. <b><small>ESC</small> f</b> is equivalent to\n<b>Meta-f</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>undo (C-_, C-x C-u)</b></p>\n\n<p style=\"margin-left:22%;\">Incremental undo, separately\nremembered for each line.</p>\n\n<p style=\"margin-left:11%;\"><b>revert-line (M-r)</b></p>\n\n<p style=\"margin-left:22%;\">Undo all changes made to this\nline. This is like executing the <b>undo</b> command enough\ntimes to return the line to its initial state.</p>\n\n<p style=\"margin-left:11%;\"><b>tilde-expand\n(M-&amp;)</b></p>\n\n<p style=\"margin-left:22%;\">Perform tilde expansion on the\ncurrent word.</p>\n\n<p style=\"margin-left:11%;\"><b>set-mark (C-@,\nM-&lt;space&gt;)</b></p>\n\n<p style=\"margin-left:22%;\">Set the mark to the point. If a\nnumeric argument is supplied, the mark is set to that\nposition.</p>\n\n<p style=\"margin-left:11%;\"><b>exchange-point-and-mark (C-x\nC-x)</b></p>\n\n<p style=\"margin-left:22%;\">Swap the point with the mark.\nThe current cursor position is set to the saved position,\nand the old cursor position is saved as the mark.</p>\n\n<p style=\"margin-left:11%;\"><b>character-search\n(C-])</b></p>\n\n<p style=\"margin-left:22%;\">A character is read and point\nis moved to the next occurrence of that character. A\nnegative count searches for previous occurrences.</p>\n\n<p style=\"margin-left:11%;\"><b>character-search-backward\n(M-C-])</b></p>\n\n<p style=\"margin-left:22%;\">A character is read and point\nis moved to the previous occurrence of that character. A\nnegative count searches for subsequent occurrences.</p>\n\n<p style=\"margin-left:11%;\"><b>skip-csi-sequence</b></p>\n\n<p style=\"margin-left:22%;\">Read enough characters to\nconsume a multi-key sequence such as those defined for keys\nlike Home and End. Such sequences begin with a Control\nSequence Indicator (CSI), usually ESC-[. If this sequence is\nbound to &quot;\\[&quot;, keys producing such sequences will\nhave no effect unless explicitly bound to a readline\ncommand, instead of inserting stray characters into the\nediting buffer. This is unbound by default, but usually\nbound to ESC-[.</p>\n\n<p style=\"margin-left:11%;\"><b>insert-comment (M-#)</b></p>\n\n<p style=\"margin-left:22%;\">Without a numeric argument, the\nvalue of the readline <b>comment-begin</b> variable is\ninserted at the beginning of the current line. If a numeric\nargument is supplied, this command acts as a toggle: if the\ncharacters at the beginning of the line do not match the\nvalue of <b>comment-begin</b>, the value is inserted,\notherwise the characters in <b>comment-begin</b> are deleted\nfrom the beginning of the line. In either case, the line is\naccepted as if a newline had been typed. The default value\nof <b>comment-begin</b> causes this command to make the\ncurrent line a shell comment. If a numeric argument causes\nthe comment character to be removed, the line will be\nexecuted by the shell.</p>\n\n<p style=\"margin-left:11%;\"><b>glob-complete-word\n(M-g)</b></p>\n\n<p style=\"margin-left:22%;\">The word before point is\ntreated as a pattern for pathname expansion, with an\nasterisk implicitly appended. This pattern is used to\ngenerate a list of matching filenames for possible\ncompletions.</p>\n\n<p style=\"margin-left:11%;\"><b>glob-expand-word (C-x\n*)</b></p>\n\n<p style=\"margin-left:22%;\">The word before point is\ntreated as a pattern for pathname expansion, and the list of\nmatching filenames is inserted, replacing the word. If a\nnumeric argument is supplied, an asterisk is appended before\npathname expansion.</p>\n\n<p style=\"margin-left:11%;\"><b>glob-list-expansions (C-x\ng)</b></p>\n\n<p style=\"margin-left:22%;\">The list of expansions that\nwould have been generated by <b>glob-expand-word</b> is\ndisplayed, and the line is redrawn. If a numeric argument is\nsupplied, an asterisk is appended before pathname\nexpansion.</p>\n\n<p style=\"margin-left:11%;\"><b>dump-functions</b></p>\n\n<p style=\"margin-left:22%;\">Print all of the functions and\ntheir key bindings to the readline output stream. If a\nnumeric argument is supplied, the output is formatted in\nsuch a way that it can be made part of an <i>inputrc</i>\nfile.</p>\n\n<p style=\"margin-left:11%;\"><b>dump-variables</b></p>\n\n<p style=\"margin-left:22%;\">Print all of the settable\nreadline variables and their values to the readline output\nstream. If a numeric argument is supplied, the output is\nformatted in such a way that it can be made part of an\n<i>inputrc</i> file.</p>\n\n<p style=\"margin-left:11%;\"><b>dump-macros</b></p>\n\n<p style=\"margin-left:22%;\">Print all of the readline key\nsequences bound to macros and the strings they output. If a\nnumeric argument is supplied, the output is formatted in\nsuch a way that it can be made part of an <i>inputrc</i>\nfile.</p>\n\n<p style=\"margin-left:11%;\"><b>display-shell-version (C-x\nC-v)</b></p>\n\n<p style=\"margin-left:22%;\">Display version information\nabout the current instance of <b>bash</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Programmable\nCompletion</b> <br>\nWhen word completion is attempted for an argument to a\ncommand for which a completion specification (a\n<i>compspec</i>) has been defined using the <b>complete</b>\nbuiltin (see <b><small>SHELL BUILTIN COMMANDS</small></b>\nbelow), the programmable completion facilities are\ninvoked.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, the\ncommand name is identified. If the command word is the empty\nstring (completion attempted at the beginning of an empty\nline), any compspec defined with the <b>-E</b> option to\n<b>complete</b> is used. If a compspec has been defined for\nthat command, the compspec is used to generate the list of\npossible completions for the word. If the command word is a\nfull pathname, a compspec for the full pathname is searched\nfor first. If no compspec is found for the full pathname, an\nattempt is made to find a compspec for the portion following\nthe final slash. If those searches do not result in a\ncompspec, any compspec defined with the <b>-D</b> option to\n<b>complete</b> is used as the default. If there is no\ndefault compspec, <b>bash</b> attempts alias expansion on\nthe command word as a final resort, and attempts to find a\ncompspec for the command word from any successful\nexpansion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once a compspec\nhas been found, it is used to generate the list of matching\nwords. If a compspec is not found, the default <b>bash</b>\ncompletion as described above under <b>Completing</b> is\nperformed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, the\nactions specified by the compspec are used. Only matches\nwhich are prefixed by the word being completed are returned.\nWhen the <b>-f</b> or <b>-d</b> option is used for filename\nor directory name completion, the shell variable\n<b><small>FIGNORE</small></b> is used to filter the\nmatches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any completions\nspecified by a pathname expansion pattern to the <b>-G</b>\noption are generated next. The words generated by the\npattern need not match the word being completed. The\n<b><small>GLOBIGNORE</small></b> shell variable is not used\nto filter the matches, but the <b><small>FIGNORE</small></b>\nvariable is used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Next, the\nstring specified as the argument to the <b>-W</b> option is\nconsidered. The string is first split using the characters\nin the <b><small>IFS</small></b> special variable as\ndelimiters. Shell quoting is honored. Each word is then\nexpanded using brace expansion, tilde expansion, parameter\nand variable expansion, command substitution, and arithmetic\nexpansion, as described above under\n<b><small>EXPANSION</small></b><small>.</small> The results\nare split using the rules described above under <b>Word\nSplitting</b>. The results of the expansion are\nprefix-matched against the word being completed, and the\nmatching words become the possible completions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After these\nmatches have been generated, any shell function or command\nspecified with the <b>-F</b> and <b>-C</b> options is\ninvoked. When the command or function is invoked, the\n<b><small>COMP_LINE</small></b><small>, <b>COMP_POINT</b>,\n<b>COMP_KEY</b>,</small> and <b><small>COMP_TYPE</small></b>\nvariables are assigned values as described above under\n<b>Shell Variables</b>. If a shell function is being\ninvoked, the <b><small>COMP_WORDS</small></b> and\n<b><small>COMP_CWORD</small></b> variables are also set.\nWhen the function or command is invoked, the first argument\n(<b>$1</b>) is the name of the command whose arguments are\nbeing completed, the second argument (<b>$2</b>) is the word\nbeing completed, and the third argument (<b>$3</b>) is the\nword preceding the word being completed on the current\ncommand line. No filtering of the generated completions\nagainst the word being completed is performed; the function\nor command has complete freedom in generating the\nmatches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any function\nspecified with <b>-F</b> is invoked first. The function may\nuse any of the shell facilities, including the\n<b>compgen</b> builtin described below, to generate the\nmatches. It must put the possible completions in the\n<b><small>COMPREPLY</small></b> array variable, one per\narray element.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Next, any\ncommand specified with the <b>-C</b> option is invoked in an\nenvironment equivalent to command substitution. It should\nprint a list of completions, one per line, to the standard\noutput. Backslash may be used to escape a newline, if\nnecessary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After all of\nthe possible completions are generated, any filter specified\nwith the <b>-X</b> option is applied to the list. The filter\nis a pattern as used for pathname expansion; a <b>&amp;</b>\nin the pattern is replaced with the text of the word being\ncompleted. A literal <b>&amp;</b> may be escaped with a\nbackslash; the backslash is removed before attempting a\nmatch. Any completion that matches the pattern will be\nremoved from the list. A leading <b>!</b> negates the\npattern; in this case any completion not matching the\npattern will be removed. If the <b>nocasematch</b> shell\noption is enabled, the match is performed without regard to\nthe case of alphabetic characters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Finally, any\nprefix and suffix specified with the <b>-P</b> and <b>-S</b>\noptions are added to each member of the completion list, and\nthe result is returned to the readline completion code as\nthe list of possible completions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\npreviously-applied actions do not generate any matches, and\nthe <b>-o dirnames</b> option was supplied to\n<b>complete</b> when the compspec was defined, directory\nname completion is attempted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the <b>-o\nplusdirs</b> option was supplied to <b>complete</b> when the\ncompspec was defined, directory name completion is attempted\nand any matches are added to the results of the other\nactions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, if\na compspec is found, whatever it generates is returned to\nthe completion code as the full set of possible completions.\nThe default <b>bash</b> completions are not attempted, and\nthe readline default of filename completion is disabled. If\nthe <b>-o bashdefault</b> option was supplied to\n<b>complete</b> when the compspec was defined, the\n<b>bash</b> default completions are attempted if the\ncompspec generates no matches. If the <b>-o default</b>\noption was supplied to <b>complete</b> when the compspec was\ndefined, readline&rsquo;s default completion will be\nperformed if the compspec (and, if attempted, the default\n<b>bash</b> completions) generate no matches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a compspec\nindicates that directory name completion is desired, the\nprogrammable completion functions force readline to append a\nslash to completed names which are symbolic links to\ndirectories, subject to the value of the\n<b>mark-directories</b> readline variable, regardless of the\nsetting of the <b>mark-symlinked-directories</b> readline\nvariable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is some\nsupport for dynamically modifying completions. This is most\nuseful when used in combination with a default completion\nspecified with <b>complete -D</b>. It&rsquo;s possible for\nshell functions executed as completion handlers to indicate\nthat completion should be retried by returning an exit\nstatus of 124. If a shell function returns 124, and changes\nthe compspec associated with the command on which completion\nis being attempted (supplied as the first argument when the\nfunction is executed), programmable completion restarts from\nthe beginning, with an attempt to find a new compspec for\nthat command. This allows a set of completions to be built\ndynamically as completion is attempted, rather than being\nloaded all at once.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For instance,\nassuming that there is a library of compspecs, each kept in\na file corresponding to the name of the command, the\nfollowing default completion function would load completions\ndynamically:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">_completion_loader()\n<br>\n{ <br>\n. &quot;/etc/bash_completion.d/$1.sh&quot; &gt;/dev/null\n2&gt;&amp;1 &amp;&amp; return 124 <br>\n} <br>\ncomplete -D -F _completion_loader -o bashdefault -o\ndefault</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the <b>-o\nhistory</b> option to the <b>set</b> builtin is enabled, the\nshell provides access to the <i>command history</i>, the\nlist of commands previously typed. The value of the\n<b><small>HISTSIZE</small></b> variable is used as the\nnumber of commands to save in a history list. The text of\nthe last <b><small>HISTSIZE</small></b> commands (default\n500) is saved. The shell stores each command in the history\nlist prior to parameter and variable expansion (see\n<b><small>EXPANSION</small></b> above) but after history\nexpansion is performed, subject to the values of the shell\nvariables <b><small>HISTIGNORE</small></b> and\n<b><small>HISTCONTROL</small></b><small>.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On startup, the\nhistory is initialized from the file named by the variable\n<b><small>HISTFILE</small></b> (default\n<i>~/.bash_history</i>). The file named by the value of\n<b><small>HISTFILE</small></b> is truncated, if necessary,\nto contain no more than the number of lines specified by the\nvalue of <b><small>HISTFILESIZE</small></b><small>.</small>\nIf <b>HISTFILESIZE</b> is unset, or set to null, a\nnon-numeric value, or a numeric value less than zero, the\nhistory file is not truncated. When the history file is\nread, lines beginning with the history comment character\nfollowed immediately by a digit are interpreted as\ntimestamps for the following history line. These timestamps\nare optionally displayed depending on the value of the\n<b><small>HISTTIMEFORMAT</small></b> variable. When a shell\nwith history enabled exits, the last\n<b><small>$HISTSIZE</small></b> lines are copied from the\nhistory list to\n<b><small>$HISTFILE</small></b><small>.</small> If the\n<b>histappend</b> shell option is enabled (see the\ndescription of <b>shopt</b> under <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below), the lines are appended to the\nhistory file, otherwise the history file is overwritten. If\n<b><small>HISTFILE</small></b> is unset, or if the history\nfile is unwritable, the history is not saved. If the\n<b><small>HISTTIMEFORMAT</small></b> variable is set, time\nstamps are written to the history file, marked with the\nhistory comment character, so they may be preserved across\nshell sessions. This uses the history comment character to\ndistinguish timestamps from other history lines. After\nsaving the history, the history file is truncated to contain\nno more than <b><small>HISTFILESIZE</small></b> lines. If\n<b><small>HISTFILESIZE</small></b> is unset, or set to null,\na non-numeric value, or a numeric value less than zero, the\nhistory file is not truncated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The builtin\ncommand <b>fc</b> (see <b><small>SHELL BUILTIN\nCOMMANDS</small></b> below) may be used to list or edit and\nre-execute a portion of the history list. The <b>history</b>\nbuiltin may be used to display or modify the history list\nand manipulate the history file. When using command-line\nediting, search commands are available in each editing mode\nthat provide access to the history list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell\nallows control over which commands are saved on the history\nlist. The <b><small>HISTCONTROL</small></b> and\n<b><small>HISTIGNORE</small></b> variables may be set to\ncause the shell to save only a subset of the commands\nentered. The <b>cmdhist</b> shell option, if enabled, causes\nthe shell to attempt to save each line of a multi-line\ncommand in the same history entry, adding semicolons where\nnecessary to preserve syntactic correctness. The\n<b>lithist</b> shell option causes the shell to save the\ncommand with embedded newlines instead of semicolons. See\nthe description of the <b>shopt</b> builtin below under\n<b><small>SHELL BUILTIN COMMANDS</small></b> for information\non setting and unsetting shell options.</p>\n\n<h2>HISTORY EXPANSION\n<a name=\"HISTORY EXPANSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell\nsupports a history expansion feature that is similar to the\nhistory expansion in <b>csh</b>. This section describes what\nsyntax features are available. This feature is enabled by\ndefault for interactive shells, and can be disabled using\nthe <b>+H</b> option to the <b>set</b> builtin command (see\n<b><small>SHELL BUILTIN COMMANDS</small></b> below).\nNon-interactive shells do not perform history expansion by\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">History\nexpansions introduce words from the history list into the\ninput stream, making it easy to repeat commands, insert the\narguments to a previous command into the current input line,\nor fix errors in previous commands quickly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">History\nexpansion is performed immediately after a complete line is\nread, before the shell breaks it into words, and is\nperformed on each line individually without taking quoting\non previous lines into account. It takes place in two parts.\nThe first is to determine which line from the history list\nto use during substitution. The second is to select portions\nof that line for inclusion into the current one. The line\nselected from the history is the <i>event</i>, and the\nportions of that line that are acted upon are <i>words</i>.\nVarious <i>modifiers</i> are available to manipulate the\nselected words. The line is broken into words in the same\nfashion as when reading input, so that several\n<i>metacharacter</i>-separated words surrounded by quotes\nare considered one word. History expansions are introduced\nby the appearance of the history expansion character, which\nis <b>!</b> by default. Only backslash (<b>\\</b>) and single\nquotes can quote the history expansion character, but the\nhistory expansion character is also treated as quoted if it\nimmediately precedes the closing double quote in a\ndouble-quoted string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Several\ncharacters inhibit history expansion if found immediately\nfollowing the history expansion character, even if it is\nunquoted: space, tab, newline, carriage return, and\n<b>=</b>. If the <b>extglob</b> shell option is enabled,\n<b>(</b> will also inhibit expansion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Several shell\noptions settable with the <b>shopt</b> builtin may be used\nto tailor the behavior of history expansion. If the\n<b>histverify</b> shell option is enabled (see the\ndescription of the <b>shopt</b> builtin below), and\n<b>readline</b> is being used, history substitutions are not\nimmediately passed to the shell parser. Instead, the\nexpanded line is reloaded into the <b>readline</b> editing\nbuffer for further modification. If <b>readline</b> is being\nused, and the <b>histreedit</b> shell option is enabled, a\nfailed history substitution will be reloaded into the\n<b>readline</b> editing buffer for correction. The <b>-p</b>\noption to the <b>history</b> builtin command may be used to\nsee what a history expansion will do before using it. The\n<b>-s</b> option to the <b>history</b> builtin may be used\nto add commands to the end of the history list without\nactually executing them, so that they are available for\nsubsequent recall.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shell\nallows control of the various characters used by the history\nexpansion mechanism (see the description of <b>histchars</b>\nabove under <b>Shell Variables</b>). The shell uses the\nhistory comment character to mark history timestamps when\nwriting the history file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Event\nDesignators</b> <br>\nAn event designator is a reference to a command line entry\nin the history list. Unless the reference is absolute,\nevents are relative to the current position in the history\nlist.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>!</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Start a history substitution, except when followed by a\n<b>blank</b>, newline, carriage return, = or ( (when the\n<b>extglob</b> shell option is enabled using the\n<b>shopt</b> builtin).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>!</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Refer to command line <i>n</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>!-</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Refer to the current command minus <i>n</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>!!</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Refer to the previous command. This is a synonym for\n&rsquo;!-1&rsquo;.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>!</b><i>string</i></p>\n\n<p style=\"margin-left:22%;\">Refer to the most recent\ncommand preceding the current position in the history list\nstarting with <i>string</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>!?</b><i>string</i><b>[?]</b></p>\n\n<p style=\"margin-left:22%;\">Refer to the most recent\ncommand preceding the current position in the history list\ncontaining <i>string</i>. The trailing <b>?</b> may be\nomitted if <i>string</i> is followed immediately by a\nnewline. If <i>string</i> is missing, the string from the\nmost recent search is used; it is an error if there is no\nprevious search string.</p>\n\n<p style=\"margin-left:11%;\"><b><big>^</big></b>\n<i>string1</i> <b><big>^</big></b> <i>string2</i>\n<b><big>^</big></b></p>\n\n<p style=\"margin-left:22%;\">Quick substitution. Repeat the\nprevious command, replacing <i>string1</i> with\n<i>string2</i>. Equivalent to &rsquo;&rsquo;!!:s\n<big>^</big> <i>string1</i> <big>^</big> <i>string2</i>\n<big>^</big> &rsquo;&rsquo; (see <b>Modifiers</b>\nbelow).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>!#</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"56%\">\n\n\n<p>The entire command line typed so far.</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Word\nDesignators</b> <br>\nWord designators are used to select desired words from the\nevent. A <b>:</b> separates the event specification from the\nword designator. It may be omitted if the word designator\nbegins with a <b>^</b>, <b>$</b>, <b>*</b>, <b>-</b>, or\n<b>%</b>. Words are numbered from the beginning of the line,\nwith the first word being denoted by 0 (zero). Words are\ninserted into the current line separated by single spaces.\n<b><br>\n0 (zero)</b></p>\n\n<p style=\"margin-left:22%;\">The zeroth word. For the shell,\nthis is the command word.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>n</i>th word.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>^</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The first argument. That is, word 1.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>$</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The last word. This is usually the last argument, but\nwill expand to the zeroth word if there is only one word in\nthe line.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>%</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The first word matched by the most recent\n&rsquo;?<i>string</i>?&rsquo; search, if the search string\nbegins with a character that is part of a word.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>x</i><b>-</b><i>y</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>A range of words; &rsquo;-<i>y</i>&rsquo; abbreviates\n&rsquo;0-<i>y</i>&rsquo;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>*</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>All of the words but the zeroth. This is a synonym for\n&rsquo;<i>1-$</i>&rsquo;. It is not an error to use <b>*</b>\nif there is just one word in the event; the empty string is\nreturned in that case.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>x*</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Abbreviates <i>x-$</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>x-</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Abbreviates <i>x-$</i> like <b>x*</b>, but omits the\nlast word. If <b>x</b> is missing, it defaults to 0.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a word\ndesignator is supplied without an event specification, the\nprevious command is used as the event.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Modifiers</b>\n<br>\nAfter the optional word designator, there may appear a\nsequence of one or more of the following modifiers, each\npreceded by a &rsquo;:&rsquo;. These modify, or edit, the\nword or words selected from the history event.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>h</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Remove a trailing filename\ncomponent, leaving only the head.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>t</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Remove all leading filename components, leaving the\ntail.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>r</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Remove a trailing suffix of the form <i>.xxx</i>,\nleaving the basename.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>e</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Remove all but the trailing suffix.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>p</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Print the new command but do not execute it.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>q</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Quote the substituted words, escaping further\nsubstitutions.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>x</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Quote the substituted words as with <b>q</b>, but break\ninto words at <b>blanks</b> and newlines. The <b>q</b> and\n<b>x</b> modifiers are mutually exclusive; the last one\nsupplied is used.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>s/</b><i>old</i><b>/</b><i>new</i><b>/</b></p>\n\n<p style=\"margin-left:22%;\">Substitute <i>new</i> for the\nfirst occurrence of <i>old</i> in the event line. Any\ncharacter may be used as the delimiter in place of /. The\nfinal delimiter is optional if it is the last character of\nthe event line. The delimiter may be quoted in <i>old</i>\nand <i>new</i> with a single backslash. If &amp; appears in\n<i>new</i>, it is replaced by <i>old</i>. A single backslash\nwill quote the &amp;. If <i>old</i> is null, it is set to\nthe last <i>old</i> substituted, or, if no previous history\nsubstitutions took place, the last <i>string</i> in a\n<b>!?</b><i>string</i><b>[?]</b> search. If <i>new</i> is\nnull, each matching <i>old</i> is deleted.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>&amp;</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Repeat the previous substitution.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>g</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Cause changes to be applied over the entire event line.\nThis is used in conjunction with &rsquo;<b>:s</b>&rsquo;\n(e.g.,\n&rsquo;<b>:gs/</b><i>old</i><b>/</b><i>new</i><b>/</b>&rsquo;)\nor &rsquo;<b>:&amp;</b>&rsquo;. If used with\n&rsquo;<b>:s</b>&rsquo;, any delimiter can be used in place\nof /, and the final delimiter is optional if it is the last\ncharacter of the event line. An <b>a</b> may be used as a\nsynonym for <b>g</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>G</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Apply the following &rsquo;<b>s</b>&rsquo; or\n&rsquo;<b>&amp;</b>&rsquo; modifier once to each word in the\nevent line.</p></td></tr>\n</table>\n\n<h2>SHELL BUILTIN COMMANDS\n<a name=\"SHELL BUILTIN COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unless\notherwise noted, each builtin command documented in this\nsection as accepting options preceded by <b>-</b> accepts\n<b>--</b> to signify the end of the options. The <b>:</b>,\n<b>true</b>, <b>false</b>, and <b>test</b>/<b>[</b> builtins\ndo not accept options and do not treat <b>--</b> specially.\nThe <b>exit</b>, <b>logout</b>, <b>return</b>, <b>break</b>,\n<b>continue</b>, <b>let</b>, and <b>shift</b> builtins\naccept and process arguments beginning with <b>-</b> without\nrequiring <b>--</b>. Other builtins that accept arguments\nbut are not specified as accepting options interpret\narguments beginning with <b>-</b> as invalid options and\nrequire <b>--</b> to prevent this interpretation. <b><br>\n:</b> [<i>arguments</i>]</p>\n\n<p style=\"margin-left:22%;\">No effect; the command does\nnothing beyond expanding <i>arguments</i> and performing any\nspecified redirections. The return status is zero.</p>\n\n<p style=\"margin-left:11%;\"><b>.</b> <i>filename</i>\n[<i>arguments</i>] <b><br>\nsource</b> <i>filename</i> [<i>arguments</i>]</p>\n\n<p style=\"margin-left:22%;\">Read and execute commands from\n<i>filename</i> in the current shell environment and return\nthe exit status of the last command executed from\n<i>filename</i>. If <i>filename</i> does not contain a\nslash, filenames in <b><small>PATH</small></b> are used to\nfind the directory containing <i>filename</i>. The file\nsearched for in <b><small>PATH</small></b> need not be\nexecutable. When <b>bash</b> is not in <i>posix mode</i>,\nthe current directory is searched if no file is found in\n<b><small>PATH</small></b><small>.</small> If the\n<b>sourcepath</b> option to the <b>shopt</b> builtin command\nis turned off, the <b><small>PATH</small></b> is not\nsearched. If any <i>arguments</i> are supplied, they become\nthe positional parameters when <i>filename</i> is executed.\nOtherwise the positional parameters are unchanged. If the\n<b>-T</b> option is enabled, <b>source</b> inherits any trap\non <b>DEBUG</b>; if it is not, any <b>DEBUG</b> trap string\nis saved and restored around the call to <b>source</b>, and\n<b>source</b> unsets the <b>DEBUG</b> trap while it\nexecutes. If <b>-T</b> is not set, and the sourced file\nchanges the <b>DEBUG</b> trap, the new value is retained\nwhen <b>source</b> completes. The return status is the\nstatus of the last command exited within the script (0 if no\ncommands are executed), and false if <i>filename</i> is not\nfound or cannot be read.</p>\n\n<p style=\"margin-left:11%;\"><b>alias</b> [<b>-p</b>]\n[<i>name</i>[=<i>value</i>] ...]</p>\n\n<p style=\"margin-left:22%;\"><b>Alias</b> with no arguments\nor with the <b>-p</b> option prints the list of aliases in\nthe form <b>alias</b> <i>name</i>=<i>value</i> on standard\noutput. When arguments are supplied, an alias is defined for\neach <i>name</i> whose <i>value</i> is given. A trailing\nspace in <i>value</i> causes the next word to be checked for\nalias substitution when the alias is expanded. For each\n<i>name</i> in the argument list for which no <i>value</i>\nis supplied, the name and value of the alias is printed.\n<b>Alias</b> returns true unless a <i>name</i> is given for\nwhich no alias has been defined.</p>\n\n<p style=\"margin-left:11%;\"><b>bg</b> [<i>jobspec</i>\n...]</p>\n\n<p style=\"margin-left:22%;\">Resume each suspended job\n<i>jobspec</i> in the background, as if it had been started\nwith <b>&amp;</b>. If <i>jobspec</i> is not present, the\nshell&rsquo;s notion of the <i>current job</i> is used.\n<b>bg</b> <i>jobspec</i> returns 0 unless run when job\ncontrol is disabled or, when run with job control enabled,\nany specified <i>jobspec</i> was not found or was started\nwithout job control.</p>\n\n<p style=\"margin-left:11%;\"><b>bind</b> [<b>-m</b>\n<i>keymap</i>] [<b>-lpsvPSVX</b>] <b><br>\nbind</b> [<b>-m</b> <i>keymap</i>] [<b>-q</b>\n<i>function</i>] [<b>-u</b> <i>function</i>] [<b>-r</b>\n<i>keyseq</i>] <b><br>\nbind</b> [<b>-m</b> <i>keymap</i>] <b>-f</b> <i>filename</i>\n<b><br>\nbind</b> [<b>-m</b> <i>keymap</i>] <b>-x</b>\n<i>keyseq</i>:<i>shell-command</i> <b><br>\nbind</b> [<b>-m</b> <i>keymap</i>]\n<i>keyseq</i>:<i>function-name</i> <b><br>\nbind</b> [<b>-m</b> <i>keymap</i>]\n<i>keyseq</i>:<i>readline-command</i></p>\n\n<p style=\"margin-left:22%;\">Display current <b>readline</b>\nkey and function bindings, bind a key sequence to a\n<b>readline</b> function or macro, or set a <b>readline</b>\nvariable. Each non-option argument is a command as it would\nappear in <i>.inputrc</i>, but each binding or command must\nbe passed as a separate argument; e.g.,\n&rsquo;&quot;\\C-x\\C-r&quot;: re-read-init-file&rsquo;.\nOptions, if supplied, have the following meanings: <b><br>\n-m</b> <i>keymap</i></p>\n\n<p style=\"margin-left:32%;\">Use <i>keymap</i> as the keymap\nto be affected by the subsequent bindings. Acceptable\n<i>keymap</i> names are <i>emacs, emacs-standard,\nemacs-meta, emacs-ctlx, vi, vi-move, vi-command</i>, and\n<i>vi-insert</i>. <i>vi</i> is equivalent to\n<i>vi-command</i> (<i>vi-move</i> is also a synonym);\n<i>emacs</i> is equivalent to <i>emacs-standard</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-l</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>List the names of all <b>readline</b> functions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-p</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display <b>readline</b> function names and bindings in\nsuch a way that they can be re-read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-P</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>List current <b>readline</b> function names and\nbindings.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display <b>readline</b> key sequences bound to macros\nand the strings they output in such a way that they can be\nre-read.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-S</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display <b>readline</b> key sequences bound to macros\nand the strings they output.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display <b>readline</b> variable names and values in\nsuch a way that they can be re-read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-V</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>List current <b>readline</b> variable names and\nvalues.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>-f</b> <i>filename</i></p>\n\n<p style=\"margin-left:32%;\">Read key bindings from\n<i>filename</i>.</p>\n\n<p style=\"margin-left:22%;\"><b>-q</b> <i>function</i></p>\n\n<p style=\"margin-left:32%;\">Query about which keys invoke\nthe named <i>function</i>.</p>\n\n<p style=\"margin-left:22%;\"><b>-u</b> <i>function</i></p>\n\n<p style=\"margin-left:32%;\">Unbind all keys bound to the\nnamed <i>function</i>.</p>\n\n<p style=\"margin-left:22%;\"><b>-r</b> <i>keyseq</i></p>\n\n<p style=\"margin-left:32%;\">Remove any current binding for\n<i>keyseq</i>.</p>\n\n<p style=\"margin-left:22%;\"><b>-x</b>\n<i>keyseq</i><b>:</b><i>shell-command</i></p>\n\n<p style=\"margin-left:32%;\">Cause <i>shell-command</i> to\nbe executed whenever <i>keyseq</i> is entered. When\n<i>shell-command</i> is executed, the shell sets the\n<b><small>READLINE_LINE</small></b> variable to the contents\nof the <b>readline</b> line buffer and the\n<b><small>READLINE_POINT</small></b> and\n<b><small>READLINE_MARK</small></b> variables to the current\nlocation of the insertion point and the saved insertion\npoint (the mark), respectively. If the executed command\nchanges the value of any of\n<b><small>READLINE_LINE</small></b><small>,\n<b>READLINE_POINT</b>,</small> or\n<b><small>READLINE_MARK</small></b><small>,</small> those\nnew values will be reflected in the editing state.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-X</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>List all key sequences bound to shell commands and the\nassociated commands in a format that can be reused as\ninput.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The return\nvalue is 0 unless an unrecognized option is given or an\nerror occurred.</p>\n\n<p style=\"margin-left:11%;\"><b>break</b> [<i>n</i>]</p>\n\n<p style=\"margin-left:22%;\">Exit from within a <b>for</b>,\n<b>while</b>, <b>until</b>, or <b>select</b> loop. If\n<i>n</i> is specified, break <i>n</i> levels. <i>n</i> must\nbe &ge; 1. If <i>n</i> is greater than the number of\nenclosing loops, all enclosing loops are exited. The return\nvalue is 0 unless <i>n</i> is not greater than or equal to\n1.</p>\n\n<p style=\"margin-left:11%;\"><b>builtin</b>\n<i>shell-builtin</i> [<i>arguments</i>]</p>\n\n<p style=\"margin-left:22%;\">Execute the specified shell\nbuiltin, passing it <i>arguments</i>, and return its exit\nstatus. This is useful when defining a function whose name\nis the same as a shell builtin, retaining the functionality\nof the builtin within the function. The <b>cd</b> builtin is\ncommonly redefined this way. The return status is false if\n<i>shell-builtin</i> is not a shell builtin command.</p>\n\n<p style=\"margin-left:11%;\"><b>caller</b> [<i>expr</i>]</p>\n\n<p style=\"margin-left:22%;\">Returns the context of any\nactive subroutine call (a shell function or a script\nexecuted with the <b>.</b> or <b>source</b> builtins).\nWithout <i>expr</i>, <b>caller</b> displays the line number\nand source filename of the current subroutine call. If a\nnon-negative integer is supplied as <i>expr</i>,\n<b>caller</b> displays the line number, subroutine name, and\nsource file corresponding to that position in the current\nexecution call stack. This extra information may be used,\nfor example, to print a stack trace. The current frame is\nframe 0. The return value is 0 unless the shell is not\nexecuting a subroutine call or <i>expr</i> does not\ncorrespond to a valid position in the call stack.</p>\n\n<p style=\"margin-left:11%;\"><b>cd</b> [<b>-L</b>|[<b>-P</b>\n[<b>-e</b>]] [-@]] [<i>dir</i>]</p>\n\n<p style=\"margin-left:22%;\">Change the current directory to\n<i>dir</i>. if <i>dir</i> is not supplied, the value of the\n<b><small>HOME</small></b> shell variable is the default.\nAny additional arguments following <i>dir</i> are ignored.\nThe variable <b><small>CDPATH</small></b> defines the search\npath for the directory containing <i>dir</i>: each directory\nname in <b><small>CDPATH</small></b> is searched for\n<i>dir</i>. Alternative directory names in\n<b><small>CDPATH</small></b> are separated by a colon (:). A\nnull directory name in <b><small>CDPATH</small></b> is the\nsame as the current directory, i.e.,\n&rsquo;&rsquo;<b>.</b>&rsquo;&rsquo;. If <i>dir</i> begins\nwith a slash (/), then <b><small>CDPATH</small></b> is not\nused. The <b>-P</b> option causes <b>cd</b> to use the\nphysical directory structure by resolving symbolic links\nwhile traversing <i>dir</i> and before processing instances\nof <i>..</i> in <i>dir</i> (see also the <b>-P</b> option to\nthe <b>set</b> builtin command); the <b>-L</b> option forces\nsymbolic links to be followed by resolving the link after\nprocessing instances of <i>..</i> in <i>dir</i>. If\n<i>..</i> appears in <i>dir</i>, it is processed by removing\nthe immediately previous pathname component from <i>dir</i>,\nback to a slash or the beginning of <i>dir</i>. If the\n<b>-e</b> option is supplied with <b>-P</b>, and the current\nworking directory cannot be successfully determined after a\nsuccessful directory change, <b>cd</b> will return an\nunsuccessful status. On systems that support it, the\n<b>-@</b> option presents the extended attributes associated\nwith a file as a directory. An argument of <b>-</b> is\nconverted to <b><small>$OLDPWD</small></b> before the\ndirectory change is attempted. If a non-empty directory name\nfrom <b><small>CDPATH</small></b> is used, or if <b>-</b> is\nthe first argument, and the directory change is successful,\nthe absolute pathname of the new working directory is\nwritten to the standard output. The return value is true if\nthe directory was successfully changed; false otherwise.</p>\n\n<p style=\"margin-left:11%;\"><b>command</b> [<b>-pVv</b>]\n<i>command</i> [<i>arg</i> ...]</p>\n\n<p style=\"margin-left:22%;\">Run <i>command</i> with\n<i>args</i> suppressing the normal shell function lookup.\nOnly builtin commands or commands found in the\n<b><small>PATH</small></b> are executed. If the <b>-p</b>\noption is given, the search for <i>command</i> is performed\nusing a default value for <b><small>PATH</small></b> that is\nguaranteed to find all of the standard utilities. If either\nthe <b>-V</b> or <b>-v</b> option is supplied, a description\nof <i>command</i> is printed. The <b>-v</b> option causes a\nsingle word indicating the command or filename used to\ninvoke <i>command</i> to be displayed; the <b>-V</b> option\nproduces a more verbose description. If the <b>-V</b> or\n<b>-v</b> option is supplied, the exit status is 0 if\n<i>command</i> was found, and 1 if not. If neither option is\nsupplied and an error occurred or <i>command</i> cannot be\nfound, the exit status is 127. Otherwise, the exit status of\nthe <b>command</b> builtin is the exit status of\n<i>command</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>compgen</b> [<i>option</i>]\n[<i>word</i>]</p>\n\n<p style=\"margin-left:22%;\">Generate possible completion\nmatches for <i>word</i> according to the <i>option</i>s,\nwhich may be any option accepted by the <b>complete</b>\nbuiltin with the exception of <b>-p</b> and <b>-r</b>, and\nwrite the matches to the standard output. When using the\n<b>-F</b> or <b>-C</b> options, the various shell variables\nset by the programmable completion facilities, while\navailable, will not have useful values.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The matches\nwill be generated in the same way as if the programmable\ncompletion code had generated them directly from a\ncompletion specification with the same flags. If <i>word</i>\nis specified, only those completions matching <i>word</i>\nwill be displayed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The return\nvalue is true unless an invalid option is supplied, or no\nmatches were generated.</p>\n\n<p style=\"margin-left:11%;\"><b>complete</b>\n[<b>-abcdefgjksuv</b>] [<b>-o</b> <i>comp-option</i>]\n[<b>-DEI</b>] [<b>-A</b> <i>action</i>] [<b>-G</b> <i><br>\nglobpat</i>] [<b>-W</b> <i>wordlist</i>]</p>\n\n<p style=\"margin-left:22%;\">[<b>-F</b> <i>function</i>]\n[<b>-C</b> <i>command</i>] [<b>-X</b> <i>filterpat</i>]\n[<b>-P</b> <i>prefix</i>] [<b>-S</b> <i>suffix</i>]\n<i>name</i> [<i>name ...</i>]</p>\n\n<p style=\"margin-left:11%;\"><b>complete -pr</b>\n[<b>-DEI</b>] [<i>name</i> ...]</p>\n\n<p style=\"margin-left:22%;\">Specify how arguments to each\n<i>name</i> should be completed. If the <b>-p</b> option is\nsupplied, or if no options are supplied, existing completion\nspecifications are printed in a way that allows them to be\nreused as input. The <b>-r</b> option removes a completion\nspecification for each <i>name</i>, or, if no <i>name</i>s\nare supplied, all completion specifications. The <b>-D</b>\noption indicates that other supplied options and actions\nshould apply to the &rsquo;&rsquo;default&rsquo;&rsquo;\ncommand completion; that is, completion attempted on a\ncommand for which no completion has previously been defined.\nThe <b>-E</b> option indicates that other supplied options\nand actions should apply to\n&rsquo;&rsquo;empty&rsquo;&rsquo; command completion; that\nis, completion attempted on a blank line. The <b>-I</b>\noption indicates that other supplied options and actions\nshould apply to completion on the initial non-assignment\nword on the line, or after a command delimiter such as\n<b>;</b> or <b>|</b>, which is usually command name\ncompletion. If multiple options are supplied, the <b>-D</b>\noption takes precedence over <b>-E</b>, and both take\nprecedence over <b>-I</b>. If any of <b>-D</b>, <b>-E</b>,\nor <b>-I</b> are supplied, any other <i>name</i> arguments\nare ignored; these completions only apply to the case\nspecified by the option.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The process of\napplying these completion specifications when word\ncompletion is attempted is described above under\n<b>Programmable Completion</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Other options,\nif specified, have the following meanings. The arguments to\nthe <b>-G</b>, <b>-W</b>, and <b>-X</b> options (and, if\nnecessary, the <b>-P</b> and <b>-S</b> options) should be\nquoted to protect them from expansion before the\n<b>complete</b> builtin is invoked. <b><br>\n-o</b> <i>comp-option</i></p>\n\n<p style=\"margin-left:34%;\">The <i>comp-option</i> controls\nseveral aspects of the compspec&rsquo;s behavior beyond the\nsimple generation of completions. <i>comp-option</i> may be\none of: <b><br>\nbashdefault</b></p>\n\n<p style=\"margin-left:46%;\">Perform the rest of the default\n<b>bash</b> completions if the compspec generates no\nmatches.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>default</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Use readline&rsquo;s default filename completion if the\ncompspec generates no matches.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>dirnames</b></p>\n\n<p style=\"margin-left:46%;\">Perform directory name\ncompletion if the compspec generates no matches.</p>\n\n<p style=\"margin-left:34%;\"><b>filenames</b></p>\n\n<p style=\"margin-left:46%;\">Tell readline that the compspec\ngenerates filenames, so it can perform any filename-specific\nprocessing (like adding a slash to directory names, quoting\nspecial characters, or suppressing trailing spaces).\nIntended to be used with shell functions.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>noquote</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Tell readline not to quote the completed words if they\nare filenames (quoting filenames is the default).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>nosort</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Tell readline not to sort the list of possible\ncompletions alphabetically.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>nospace</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Tell readline not to append a space (the default) to\nwords completed at the end of the line.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>plusdirs</b></p>\n\n<p style=\"margin-left:46%;\">After any matches defined by\nthe compspec are generated, directory name completion is\nattempted and any matches are added to the results of the\nother actions.</p>\n\n<p style=\"margin-left:22%;\"><b>-A</b> <i>action</i></p>\n\n<p style=\"margin-left:34%;\">The <i>action</i> may be one of\nthe following to generate a list of possible\ncompletions:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"8%\">\n\n\n<p><b>alias</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"54%\">\n\n\n<p>Alias names. May also be specified as <b>-a</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>arrayvar</b></p>\n\n<p style=\"margin-left:46%;\">Array variable names.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>binding</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p><b>Readline</b> key binding names.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>builtin</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Names of shell builtin commands. May also be specified\nas <b>-b</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>command</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Command names. May also be specified as <b>-c</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>directory</b></p>\n\n<p style=\"margin-left:46%;\">Directory names. May also be\nspecified as <b>-d</b>.</p>\n\n<p style=\"margin-left:34%;\"><b>disabled</b></p>\n\n<p style=\"margin-left:46%;\">Names of disabled shell\nbuiltins.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>enabled</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Names of enabled shell builtins.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>export</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Names of exported shell variables. May also be specified\nas <b>-e</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>file</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>File names. May also be specified as <b>-f</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>function</b></p>\n\n<p style=\"margin-left:46%;\">Names of shell functions.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"8%\">\n\n\n<p><b>group</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"54%\">\n\n\n<p>Group names. May also be specified as <b>-g</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>helptopic</b></p>\n\n<p style=\"margin-left:46%;\">Help topics as accepted by the\n<b>help</b> builtin.</p>\n\n<p style=\"margin-left:34%;\"><b>hostname</b></p>\n\n<p style=\"margin-left:46%;\">Hostnames, as taken from the\nfile specified by the <b><small>HOSTFILE</small></b> shell\nvariable.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>job</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Job names, if job control is active. May also be\nspecified as <b>-j</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>keyword</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Shell reserved words. May also be specified as\n<b>-k</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>running</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Names of running jobs, if job control is active.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>service</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Service names. May also be specified as <b>-s</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>setopt</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Valid arguments for the <b>-o</b> option to the\n<b>set</b> builtin.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>shopt</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Shell option names as accepted by the <b>shopt</b>\nbuiltin.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>signal</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Signal names.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>stopped</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Names of stopped jobs, if job control is active.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>user</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>User names. May also be specified as <b>-u</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>variable</b></p>\n\n<p style=\"margin-left:46%;\">Names of all shell variables.\nMay also be specified as <b>-v</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>-C</b> <i>command</i></p>\n\n<p style=\"margin-left:34%;\"><i>command</i> is executed in a\nsubshell environment, and its output is used as the possible\ncompletions.</p>\n\n<p style=\"margin-left:22%;\"><b>-F</b> <i>function</i></p>\n\n<p style=\"margin-left:34%;\">The shell function\n<i>function</i> is executed in the current shell\nenvironment. When the function is executed, the first\nargument (<b>$1</b>) is the name of the command whose\narguments are being completed, the second argument\n(<b>$2</b>) is the word being completed, and the third\nargument (<b>$3</b>) is the word preceding the word being\ncompleted on the current command line. When it finishes, the\npossible completions are retrieved from the value of the\n<b><small>COMPREPLY</small></b> array variable.</p>\n\n<p style=\"margin-left:22%;\"><b>-G</b> <i>globpat</i></p>\n\n<p style=\"margin-left:34%;\">The pathname expansion pattern\n<i>globpat</i> is expanded to generate the possible\ncompletions.</p>\n\n<p style=\"margin-left:22%;\"><b>-P</b> <i>prefix</i></p>\n\n<p style=\"margin-left:34%;\"><i>prefix</i> is added at the\nbeginning of each possible completion after all other\noptions have been applied.</p>\n\n<p style=\"margin-left:22%;\"><b>-S</b> <i>suffix</i></p>\n\n<p style=\"margin-left:34%;\"><i>suffix</i> is appended to\neach possible completion after all other options have been\napplied.</p>\n\n<p style=\"margin-left:22%;\"><b>-W</b> <i>wordlist</i></p>\n\n<p style=\"margin-left:34%;\">The <i>wordlist</i> is split\nusing the characters in the <b><small>IFS</small></b>\nspecial variable as delimiters, and each resultant word is\nexpanded. Shell quoting is honored within <i>wordlist</i>,\nin order to provide a mechanism for the words to contain\nshell metacharacters or characters in the value of\n<b><small>IFS</small></b><small>.</small> The possible\ncompletions are the members of the resultant list which\nmatch the word being completed.</p>\n\n<p style=\"margin-left:22%;\"><b>-X</b> <i>filterpat</i></p>\n\n<p style=\"margin-left:34%;\"><i>filterpat</i> is a pattern\nas used for pathname expansion. It is applied to the list of\npossible completions generated by the preceding options and\narguments, and each completion matching <i>filterpat</i> is\nremoved from the list. A leading <b>!</b> in\n<i>filterpat</i> negates the pattern; in this case, any\ncompletion not matching <i>filterpat</i> is removed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The return\nvalue is true unless an invalid option is supplied, an\noption other than <b>-p</b> or <b>-r</b> is supplied without\na <i>name</i> argument, an attempt is made to remove a\ncompletion specification for a <i>name</i> for which no\nspecification exists, or an error occurs adding a completion\nspecification.</p>\n\n<p style=\"margin-left:11%;\"><b>compopt</b> [<b>-o</b>\n<i>option</i>] [<b>-DEI</b>] [<b>+o</b> <i>option</i>]\n[<i>name</i>]</p>\n\n<p style=\"margin-left:22%;\">Modify completion options for\neach <i>name</i> according to the <i>option</i>s, or for the\ncurrently-executing completion if no <i>name</i>s are\nsupplied. If no <i>option</i>s are given, display the\ncompletion options for each <i>name</i> or the current\ncompletion. The possible values of <i>option</i> are those\nvalid for the <b>complete</b> builtin described above. The\n<b>-D</b> option indicates that other supplied options\nshould apply to the &rsquo;&rsquo;default&rsquo;&rsquo;\ncommand completion; that is, completion attempted on a\ncommand for which no completion has previously been defined.\nThe <b>-E</b> option indicates that other supplied options\nshould apply to &rsquo;&rsquo;empty&rsquo;&rsquo; command\ncompletion; that is, completion attempted on a blank line.\nThe <b>-I</b> option indicates that other supplied options\nshould apply to completion on the initial non-assignment\nword on the line, or after a command delimiter such as\n<b>;</b> or <b>|</b>, which is usually command name\ncompletion.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The return\nvalue is true unless an invalid option is supplied, an\nattempt is made to modify the options for a <i>name</i> for\nwhich no completion specification exists, or an output error\noccurs.</p>\n\n<p style=\"margin-left:11%;\"><b>continue</b> [<i>n</i>]</p>\n\n<p style=\"margin-left:22%;\">Resume the next iteration of\nthe enclosing <b>for</b>, <b>while</b>, <b>until</b>, or\n<b>select</b> loop. If <i>n</i> is specified, resume at the\n<i>n</i>th enclosing loop. <i>n</i> must be &ge; 1. If\n<i>n</i> is greater than the number of enclosing loops, the\nlast enclosing loop (the\n&rsquo;&rsquo;top-level&rsquo;&rsquo; loop) is resumed. The\nreturn value is 0 unless <i>n</i> is not greater than or\nequal to 1.</p>\n\n<p style=\"margin-left:11%;\"><b>declare</b>\n[<b>-aAfFgiIlnrtux</b>] [<b>-p</b>]\n[<i>name</i>[=<i>value</i>] ...] <b><br>\ntypeset</b> [<b>-aAfFgiIlnrtux</b>] [<b>-p</b>]\n[<i>name</i>[=<i>value</i>] ...]</p>\n\n<p style=\"margin-left:22%;\">Declare variables and/or give\nthem attributes. If no <i>name</i>s are given then display\nthe values of variables. The <b>-p</b> option will display\nthe attributes and values of each <i>name</i>. When\n<b>-p</b> is used with <i>name</i> arguments, additional\noptions, other than <b>-f</b> and <b>-F</b>, are ignored.\nWhen <b>-p</b> is supplied without <i>name</i> arguments, it\nwill display the attributes and values of all variables\nhaving the attributes specified by the additional options.\nIf no other options are supplied with <b>-p</b>,\n<b>declare</b> will display the attributes and values of all\nshell variables. The <b>-f</b> option will restrict the\ndisplay to shell functions. The <b>-F</b> option inhibits\nthe display of function definitions; only the function name\nand attributes are printed. If the <b>extdebug</b> shell\noption is enabled using <b>shopt</b>, the source file name\nand line number where each <i>name</i> is defined are\ndisplayed as well. The <b>-F</b> option implies <b>-f</b>.\nThe <b>-g</b> option forces variables to be created or\nmodified at the global scope, even when <b>declare</b> is\nexecuted in a shell function. It is ignored in all other\ncases. The <b>-I</b> option causes local variables to\ninherit the attributes (except the <i>nameref</i> attribute)\nand value of any existing variable with the same <i>name</i>\nat a surrounding scope. If there is no existing variable,\nthe local variable is initially unset. The following options\ncan be used to restrict output to variables with the\nspecified attribute or to give variables attributes:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-a</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Each <i>name</i> is an indexed array variable (see\n<b>Arrays</b> above).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-A</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Each <i>name</i> is an associative array variable (see\n<b>Arrays</b> above).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-f</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Use function names only.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-i</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The variable is treated as an integer; arithmetic\nevaluation (see <b><small>ARITHMETIC EVALUATION</small></b>\nabove) is performed when the variable is assigned a\nvalue.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-l</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>When the variable is assigned a value, all upper-case\ncharacters are converted to lower-case. The upper-case\nattribute is disabled.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Give each <i>name</i> the <i>nameref</i> attribute,\nmaking it a name reference to another variable. That other\nvariable is defined by the value of <i>name</i>. All\nreferences, assignments, and attribute modifications to\n<i>name</i>, except those using or changing the <b>-n</b>\nattribute itself, are performed on the variable referenced\nby <i>name</i>&rsquo;s value. The nameref attribute cannot\nbe applied to array variables.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-r</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Make <i>name</i>s readonly. These names cannot then be\nassigned values by subsequent assignment statements or\nunset.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-t</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Give each <i>name</i> the <i>trace</i> attribute. Traced\nfunctions inherit the <b>DEBUG</b> and <b>RETURN</b> traps\nfrom the calling shell. The trace attribute has no special\nmeaning for variables.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-u</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>When the variable is assigned a value, all lower-case\ncharacters are converted to upper-case. The lower-case\nattribute is disabled.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-x</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Mark <i>name</i>s for export to subsequent commands via\nthe environment.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Using\n&rsquo;+&rsquo; instead of &rsquo;-&rsquo; turns off the\nattribute instead, with the exceptions that <b>+a</b> and\n<b>+A</b> may not be used to destroy array variables and\n<b>+r</b> will not remove the readonly attribute. When used\nin a function, <b>declare</b> and <b>typeset</b> make each\n<i>name</i> local, as with the <b>local</b> command, unless\nthe <b>-g</b> option is supplied. If a variable name is\nfollowed by =<i>value</i>, the value of the variable is set\nto <i>value</i>. When using <b>-a</b> or <b>-A</b> and the\ncompound assignment syntax to create array variables,\nadditional attributes do not take effect until subsequent\nassignments. The return value is 0 unless an invalid option\nis encountered, an attempt is made to define a function\nusing &rsquo;&rsquo;-f foo=bar&rsquo;&rsquo;, an attempt is\nmade to assign a value to a readonly variable, an attempt is\nmade to assign a value to an array variable without using\nthe compound assignment syntax (see <b>Arrays</b> above),\none of the <i>names</i> is not a valid shell variable name,\nan attempt is made to turn off readonly status for a\nreadonly variable, an attempt is made to turn off array\nstatus for an array variable, or an attempt is made to\ndisplay a non-existent function with <b>-f</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>dirs [-clpv]\n[+</b><i>n</i><b>] [-</b><i>n</i><b>]</b></p>\n\n<p style=\"margin-left:22%;\">Without options, displays the\nlist of currently remembered directories. The default\ndisplay is on a single line with directory names separated\nby spaces. Directories are added to the list with the\n<b>pushd</b> command; the <b>popd</b> command removes\nentries from the list. The current directory is always the\nfirst directory in the stack.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-c</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Clears the directory stack by deleting all of the\nentries.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-l</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Produces a listing using full pathnames; the default\nlisting format uses a tilde to denote the home\ndirectory.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-p</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Print the directory stack with one entry per line.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Print the directory stack with one entry per line,\nprefixing each entry with its index in the stack.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>+</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Displays the <i>n</i>th entry counting from the left of\nthe list shown by <b>dirs</b> when invoked without options,\nstarting with zero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Displays the <i>n</i>th entry counting from the right of\nthe list shown by <b>dirs</b> when invoked without options,\nstarting with zero.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The return\nvalue is 0 unless an invalid option is supplied or <i>n</i>\nindexes beyond the end of the directory stack.</p>\n\n<p style=\"margin-left:11%;\"><b>disown</b> [<b>-ar</b>]\n[<b>-h</b>] [<i>jobspec</i> ... | <i>pid</i> ... ]</p>\n\n<p style=\"margin-left:22%;\">Without options, remove each\n<i>jobspec</i> from the table of active jobs. If\n<i>jobspec</i> is not present, and neither the <b>-a</b> nor\nthe <b>-r</b> option is supplied, the <i>current job</i> is\nused. If the <b>-h</b> option is given, each <i>jobspec</i>\nis not removed from the table, but is marked so that\n<b><small>SIGHUP</small></b> is not sent to the job if the\nshell receives a\n<b><small>SIGHUP</small></b><small>.</small> If no\n<i>jobspec</i> is supplied, the <b>-a</b> option means to\nremove or mark all jobs; the <b>-r</b> option without a\n<i>jobspec</i> argument restricts operation to running jobs.\nThe return value is 0 unless a <i>jobspec</i> does not\nspecify a valid job.</p>\n\n<p style=\"margin-left:11%;\"><b>echo</b> [<b>-neE</b>]\n[<i>arg</i> ...]</p>\n\n<p style=\"margin-left:22%;\">Output the <i>arg</i>s,\nseparated by spaces, followed by a newline. The return\nstatus is 0 unless a write error occurs. If <b>-n</b> is\nspecified, the trailing newline is suppressed. If the\n<b>-e</b> option is given, interpretation of the following\nbackslash-escaped characters is enabled. The <b>-E</b>\noption disables the interpretation of these escape\ncharacters, even on systems where they are interpreted by\ndefault. The <b>xpg_echo</b> shell option may be used to\ndynamically determine whether or not <b>echo</b> expands\nthese escape characters by default. <b>echo</b> does not\ninterpret <b>--</b> to mean the end of options. <b>echo</b>\ninterprets the following escape sequences:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\a</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>alert (bell)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\b</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>backspace</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\c</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>suppress further output</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\e</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\E</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>an escape character</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\f</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>form feed</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\n</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>new line</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\r</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>carriage return</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\t</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>horizontal tab</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\v</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>vertical tab</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\\\</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>backslash</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\0</b><i>nnn</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>the eight-bit character whose value is the octal value\n<i>nnn</i> (zero to three octal digits)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\x</b><i>HH</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>the eight-bit character whose value is the hexadecimal\nvalue <i>HH</i> (one or two hex digits)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>\\u</b><i>HHHH</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>the Unicode (ISO/IEC 10646) character whose value is the\nhexadecimal value <i>HHHH</i> (one to four hex digits)</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>\\U</b><i>HHHHHHHH</i></p>\n\n<p style=\"margin-left:32%;\">the Unicode (ISO/IEC 10646)\ncharacter whose value is the hexadecimal value\n<i>HHHHHHHH</i> (one to eight hex digits)</p>\n\n<p style=\"margin-left:11%;\"><b>enable</b> [<b>-a</b>]\n[<b>-dnps</b>] [<b>-f</b> <i>filename</i>] [<i>name</i>\n...]</p>\n\n<p style=\"margin-left:22%;\">Enable and disable builtin\nshell commands. Disabling a builtin allows a disk command\nwhich has the same name as a shell builtin to be executed\nwithout specifying a full pathname, even though the shell\nnormally searches for builtins before disk commands. If\n<b>-n</b> is used, each <i>name</i> is disabled; otherwise,\n<i>names</i> are enabled. For example, to use the\n<b>test</b> binary found via the <b><small>PATH</small></b>\ninstead of the shell builtin version, run\n&rsquo;&rsquo;enable -n test&rsquo;&rsquo;. The <b>-f</b>\noption means to load the new builtin command <i>name</i>\nfrom shared object <i>filename</i>, on systems that support\ndynamic loading. The <b>-d</b> option will delete a builtin\npreviously loaded with <b>-f</b>. If no <i>name</i>\narguments are given, or if the <b>-p</b> option is supplied,\na list of shell builtins is printed. With no other option\narguments, the list consists of all enabled shell builtins.\nIf <b>-n</b> is supplied, only disabled builtins are\nprinted. If <b>-a</b> is supplied, the list printed includes\nall builtins, with an indication of whether or not each is\nenabled. If <b>-s</b> is supplied, the output is restricted\nto the POSIX <i>special</i> builtins. The return value is 0\nunless a <i>name</i> is not a shell builtin or there is an\nerror loading a new builtin from a shared object.</p>\n\n<p style=\"margin-left:11%;\"><b>eval</b> [<i>arg</i>\n...]</p>\n\n<p style=\"margin-left:22%;\">The <i>arg</i>s are read and\nconcatenated together into a single command. This command is\nthen read and executed by the shell, and its exit status is\nreturned as the value of <b>eval</b>. If there are no\n<i>args</i>, or only null arguments, <b>eval</b> returns\n0.</p>\n\n<p style=\"margin-left:11%;\"><b>exec</b> [<b>-cl</b>]\n[<b>-a</b> <i>name</i>] [<i>command</i>\n[<i>arguments</i>]]</p>\n\n<p style=\"margin-left:22%;\">If <i>command</i> is specified,\nit replaces the shell. No new process is created. The\n<i>arguments</i> become the arguments to <i>command</i>. If\nthe <b>-l</b> option is supplied, the shell places a dash at\nthe beginning of the zeroth argument passed to\n<i>command</i>. This is what <i>login</i>(1) does. The\n<b>-c</b> option causes <i>command</i> to be executed with\nan empty environment. If <b>-a</b> is supplied, the shell\npasses <i>name</i> as the zeroth argument to the executed\ncommand. If <i>command</i> cannot be executed for some\nreason, a non-interactive shell exits, unless the\n<b>execfail</b> shell option is enabled. In that case, it\nreturns failure. An interactive shell returns failure if the\nfile cannot be executed. A subshell exits unconditionally if\n<b>exec</b> fails. If <i>command</i> is not specified, any\nredirections take effect in the current shell, and the\nreturn status is 0. If there is a redirection error, the\nreturn status is 1.</p>\n\n<p style=\"margin-left:11%;\"><b>exit</b> [<i>n</i>]</p>\n\n<p style=\"margin-left:22%;\">Cause the shell to exit with a\nstatus of <i>n</i>. If <i>n</i> is omitted, the exit status\nis that of the last command executed. A trap on\n<b><small>EXIT</small></b> is executed before the shell\nterminates.</p>\n\n<p style=\"margin-left:11%;\"><b>export</b> [<b>-fn</b>]\n[<i>name</i>[=<i>word</i>]] ... <b><br>\nexport -p</b></p>\n\n<p style=\"margin-left:22%;\">The supplied <i>names</i> are\nmarked for automatic export to the environment of\nsubsequently executed commands. If the <b>-f</b> option is\ngiven, the <i>names</i> refer to functions. If no\n<i>names</i> are given, or if the <b>-p</b> option is\nsupplied, a list of names of all exported variables is\nprinted. The <b>-n</b> option causes the export property to\nbe removed from each <i>name</i>. If a variable name is\nfollowed by =<i>word</i>, the value of the variable is set\nto <i>word</i>. <b>export</b> returns an exit status of 0\nunless an invalid option is encountered, one of the\n<i>names</i> is not a valid shell variable name, or\n<b>-f</b> is supplied with a <i>name</i> that is not a\nfunction.</p>\n\n<p style=\"margin-left:11%;\"><b>fc</b> [<b>-e</b>\n<i>ename</i>] [<b>-lnr</b>] [<i>first</i>] [<i>last</i>]\n<b><br>\nfc -s</b> [<i>pat</i>=<i>rep</i>] [<i>cmd</i>]</p>\n\n<p style=\"margin-left:22%;\">The first form selects a range\nof commands from <i>first</i> to <i>last</i> from the\nhistory list and displays or edits and re-executes them.\n<i>First</i> and <i>last</i> may be specified as a string\n(to locate the last command beginning with that string) or\nas a number (an index into the history list, where a\nnegative number is used as an offset from the current\ncommand number). When listing, a <i>first</i> or <i>last</i>\nof 0 is equivalent to -1 and -0 is equivalent to the current\ncommand (usually the <b>fc</b> command); otherwise 0 is\nequivalent to -1 and -0 is invalid. If <i>last</i> is not\nspecified, it is set to the current command for listing (so\nthat &rsquo;&rsquo;fc -l -10&rsquo;&rsquo; prints the last\n10 commands) and to <i>first</i> otherwise. If <i>first</i>\nis not specified, it is set to the previous command for\nediting and -16 for listing.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <b>-n</b>\noption suppresses the command numbers when listing. The\n<b>-r</b> option reverses the order of the commands. If the\n<b>-l</b> option is given, the commands are listed on\nstandard output. Otherwise, the editor given by <i>ename</i>\nis invoked on a file containing those commands. If\n<i>ename</i> is not given, the value of the\n<b><small>FCEDIT</small></b> variable is used, and the value\nof <b><small>EDITOR</small></b> if\n<b><small>FCEDIT</small></b> is not set. If neither variable\nis set, <i>vi</i> is used. When editing is complete, the\nedited commands are echoed and executed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In the second\nform, <i>command</i> is re-executed after each instance of\n<i>pat</i> is replaced by <i>rep</i>. <i>Command</i> is\ninterpreted the same as <i>first</i> above. A useful alias\nto use with this is &rsquo;&rsquo;r=&quot;fc\n-s&quot;&rsquo;&rsquo;, so that typing &rsquo;&rsquo;r\ncc&rsquo;&rsquo; runs the last command beginning with\n&rsquo;&rsquo;cc&rsquo;&rsquo; and typing\n&rsquo;&rsquo;r&rsquo;&rsquo; re-executes the last\ncommand.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the first\nform is used, the return value is 0 unless an invalid option\nis encountered or <i>first</i> or <i>last</i> specify\nhistory lines out of range. If the <b>-e</b> option is\nsupplied, the return value is the value of the last command\nexecuted or failure if an error occurs with the temporary\nfile of commands. If the second form is used, the return\nstatus is that of the command re-executed, unless <i>cmd</i>\ndoes not specify a valid history line, in which case\n<b>fc</b> returns failure.</p>\n\n<p style=\"margin-left:11%;\"><b>fg</b> [<i>jobspec</i>]</p>\n\n<p style=\"margin-left:22%;\">Resume <i>jobspec</i> in the\nforeground, and make it the current job. If <i>jobspec</i>\nis not present, the shell&rsquo;s notion of the <i>current\njob</i> is used. The return value is that of the command\nplaced into the foreground, or failure if run when job\ncontrol is disabled or, when run with job control enabled,\nif <i>jobspec</i> does not specify a valid job or\n<i>jobspec</i> specifies a job that was started without job\ncontrol.</p>\n\n<p style=\"margin-left:11%;\"><b>getopts</b> <i>optstring\nname</i> [<i>arg ...</i>]</p>\n\n<p style=\"margin-left:22%;\"><b>getopts</b> is used by shell\nprocedures to parse positional parameters. <i>optstring</i>\ncontains the option characters to be recognized; if a\ncharacter is followed by a colon, the option is expected to\nhave an argument, which should be separated from it by white\nspace. The colon and question mark characters may not be\nused as option characters. Each time it is invoked,\n<b>getopts</b> places the next option in the shell variable\n<i>name</i>, initializing <i>name</i> if it does not exist,\nand the index of the next argument to be processed into the\nvariable <b><small>OPTIND</small></b><small>.\n<b>OPTIND</b></small> is initialized to 1 each time the\nshell or a shell script is invoked. When an option requires\nan argument, <b>getopts</b> places that argument into the\nvariable <b><small>OPTARG</small></b><small>.</small> The\nshell does not reset <b><small>OPTIND</small></b>\nautomatically; it must be manually reset between multiple\ncalls to <b>getopts</b> within the same shell invocation if\na new set of parameters is to be used.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When the end of\noptions is encountered, <b>getopts</b> exits with a return\nvalue greater than zero. <b><small>OPTIND</small></b> is set\nto the index of the first non-option argument, and\n<i>name</i> is set to ?.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>getopts</b>\nnormally parses the positional parameters, but if more\narguments are supplied as <i>arg</i> values, <b>getopts</b>\nparses those instead.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>getopts</b>\ncan report errors in two ways. If the first character of\n<i>optstring</i> is a colon, <i>silent</i> error reporting\nis used. In normal operation, diagnostic messages are\nprinted when invalid options or missing option arguments are\nencountered. If the variable <b><small>OPTERR</small></b> is\nset to 0, no error messages will be displayed, even if the\nfirst character of <i>optstring</i> is not a colon.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If an invalid\noption is seen, <b>getopts</b> places ? into <i>name</i>\nand, if not silent, prints an error message and unsets\n<b><small>OPTARG</small></b><small>.</small> If\n<b>getopts</b> is silent, the option character found is\nplaced in <b><small>OPTARG</small></b> and no diagnostic\nmessage is printed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If a required\nargument is not found, and <b>getopts</b> is not silent, a\nquestion mark (<b>?</b>) is placed in <i>name</i>,\n<b><small>OPTARG</small></b> is unset, and a diagnostic\nmessage is printed. If <b>getopts</b> is silent, then a\ncolon (<b>:</b>) is placed in <i>name</i> and\n<b><small>OPTARG</small></b> is set to the option character\nfound.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>getopts</b>\nreturns true if an option, specified or unspecified, is\nfound. It returns false if the end of options is encountered\nor an error occurs.</p>\n\n<p style=\"margin-left:11%;\"><b>hash</b> [<b>-lr</b>]\n[<b>-p</b> <i>filename</i>] [<b>-dt</b>] [<i>name</i>]</p>\n\n<p style=\"margin-left:22%;\">Each time <b>hash</b> is\ninvoked, the full pathname of the command <i>name</i> is\ndetermined by searching the directories in <b>$PATH</b> and\nremembered. Any previously-remembered pathname is discarded.\nIf the <b>-p</b> option is supplied, no path search is\nperformed, and <i>filename</i> is used as the full filename\nof the command. The <b>-r</b> option causes the shell to\nforget all remembered locations. The <b>-d</b> option causes\nthe shell to forget the remembered location of each\n<i>name</i>. If the <b>-t</b> option is supplied, the full\npathname to which each <i>name</i> corresponds is printed.\nIf multiple <i>name</i> arguments are supplied with\n<b>-t</b>, the <i>name</i> is printed before the hashed full\npathname. The <b>-l</b> option causes output to be displayed\nin a format that may be reused as input. If no arguments are\ngiven, or if only <b>-l</b> is supplied, information about\nremembered commands is printed. The return status is true\nunless a <i>name</i> is not found or an invalid option is\nsupplied.</p>\n\n<p style=\"margin-left:11%;\"><b>help</b> [<b>-dms</b>]\n[<i>pattern</i>]</p>\n\n<p style=\"margin-left:22%;\">Display helpful information\nabout builtin commands. If <i>pattern</i> is specified,\n<b>help</b> gives detailed help on all commands matching\n<i>pattern</i>; otherwise help for all the builtins and\nshell control structures is printed.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-d</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display a short description of each <i>pattern</i></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-m</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display the description of each <i>pattern</i> in a\nmanpage-like format</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display only a short usage synopsis for each\n<i>pattern</i></p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The return\nstatus is 0 unless no command matches <i>pattern</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>history [</b><i>n</i><b>]\n<br>\nhistory -c <br>\nhistory -d</b> <i>offset</i> <b><br>\nhistory -d</b> <i>start</i>-<i>end</i> <b><br>\nhistory -anrw</b> [<i>filename</i>] <b><br>\nhistory -p</b> <i>arg</i> [<i>arg ...</i>] <b><br>\nhistory -s</b> <i>arg</i> [<i>arg ...</i>]</p>\n\n<p style=\"margin-left:22%;\">With no options, display the\ncommand history list with line numbers. Lines listed with a\n<b>*</b> have been modified. An argument of <i>n</i> lists\nonly the last <i>n</i> lines. If the shell variable\n<b><small>HISTTIMEFORMAT</small></b> is set and not null, it\nis used as a format string for <i>strftime</i>(3) to display\nthe time stamp associated with each displayed history entry.\nNo intervening blank is printed between the formatted time\nstamp and the history line. If <i>filename</i> is supplied,\nit is used as the name of the history file; if not, the\nvalue of <b><small>HISTFILE</small></b> is used. Options, if\nsupplied, have the following meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-c</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Clear the history list by deleting all the entries.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>-d</b> <i>offset</i></p>\n\n<p style=\"margin-left:32%;\">Delete the history entry at\nposition <i>offset</i>. If <i>offset</i> is negative, it is\ninterpreted as relative to one greater than the last history\nposition, so negative indices count back from the end of the\nhistory, and an index of -1 refers to the current <b>history\n-d</b> command.</p>\n\n<p style=\"margin-left:22%;\"><b>-d</b>\n<i>start</i>-<i>end</i></p>\n\n<p style=\"margin-left:32%;\">Delete the history entries\nbetween positions <i>start</i> and <i>end</i>, inclusive.\nPositive and negative values for <i>start</i> and <i>end</i>\nare interpreted as described above.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-a</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Append the &rsquo;&rsquo;new&rsquo;&rsquo; history lines\nto the history file. These are history lines entered since\nthe beginning of the current <b>bash</b> session, but not\nalready appended to the history file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Read the history lines not already read from the history\nfile into the current history list. These are lines appended\nto the history file since the beginning of the current\n<b>bash</b> session.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-r</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Read the contents of the history file and append them to\nthe current history list.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-w</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Write the current history list to the history file,\noverwriting the history file&rsquo;s contents.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-p</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Perform history substitution on the following\n<i>args</i> and display the result on the standard output.\nDoes not store the results in the history list. Each\n<i>arg</i> must be quoted to disable normal history\nexpansion.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Store the <i>args</i> in the history list as a single\nentry. The last command in the history list is removed\nbefore the <i>args</i> are added.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<b><small>HISTTIMEFORMAT</small></b> variable is set, the\ntime stamp information associated with each history entry is\nwritten to the history file, marked with the history comment\ncharacter. When the history file is read, lines beginning\nwith the history comment character followed immediately by a\ndigit are interpreted as timestamps for the following\nhistory entry. The return value is 0 unless an invalid\noption is encountered, an error occurs while reading or\nwriting the history file, an invalid <i>offset</i> is\nsupplied as an argument to <b>-d</b>, or the history\nexpansion supplied as an argument to <b>-p</b> fails.</p>\n\n<p style=\"margin-left:11%;\"><b>jobs</b> [<b>-lnprs</b>] [\n<i>jobspec</i> ... ] <b><br>\njobs -x</b> <i>command</i> [ <i>args</i> ... ]</p>\n\n<p style=\"margin-left:22%;\">The first form lists the active\njobs. The options have the following meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-l</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>List process IDs in addition to the normal\ninformation.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display information only about jobs that have changed\nstatus since the user was last notified of their status.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-p</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>List only the process ID of the job&rsquo;s process\ngroup leader.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-r</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display only running jobs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Display only stopped jobs.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<i>jobspec</i> is given, output is restricted to information\nabout that job. The return status is 0 unless an invalid\noption is encountered or an invalid <i>jobspec</i> is\nsupplied.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<b>-x</b> option is supplied, <b>jobs</b> replaces any\n<i>jobspec</i> found in <i>command</i> or <i>args</i> with\nthe corresponding process group ID, and executes\n<i>command</i> passing it <i>args</i>, returning its exit\nstatus.</p>\n\n<p style=\"margin-left:11%;\"><b>kill</b> [<b>-s</b>\n<i>sigspec</i> | <b>-n</b> <i>signum</i> |\n<b>-</b><i>sigspec</i>] [<i>pid</i> | <i>jobspec</i>] ...\n<b><br>\nkill -l</b>|<b>-L</b> [<i>sigspec</i> |\n<i>exit_status</i>]</p>\n\n<p style=\"margin-left:22%;\">Send the signal named by\n<i>sigspec</i> or <i>signum</i> to the processes named by\n<i>pid</i> or <i>jobspec</i>. <i>sigspec</i> is either a\ncase-insensitive signal name such as\n<b><small>SIGKILL</small></b> (with or without the\n<b><small>SIG</small></b> prefix) or a signal number;\n<i>signum</i> is a signal number. If <i>sigspec</i> is not\npresent, then <b><small>SIGTERM</small></b> is assumed. An\nargument of <b>-l</b> lists the signal names. If any\narguments are supplied when <b>-l</b> is given, the names of\nthe signals corresponding to the arguments are listed, and\nthe return status is 0. The <i>exit_status</i> argument to\n<b>-l</b> is a number specifying either a signal number or\nthe exit status of a process terminated by a signal. The\n<b>-L</b> option is equivalent to <b>-l</b>. <b>kill</b>\nreturns true if at least one signal was successfully sent,\nor false if an error occurs or an invalid option is\nencountered.</p>\n\n<p style=\"margin-left:11%;\"><b>let</b> <i>arg</i>\n[<i>arg</i> ...]</p>\n\n<p style=\"margin-left:22%;\">Each <i>arg</i> is an\narithmetic expression to be evaluated (see\n<b><small>ARITHMETIC EVALUATION</small></b> above). If the\nlast <i>arg</i> evaluates to 0, <b>let</b> returns 1; 0 is\nreturned otherwise.</p>\n\n<p style=\"margin-left:11%;\"><b>local</b> [<i>option</i>]\n[<i>name</i>[=<i>value</i>] ... | - ]</p>\n\n<p style=\"margin-left:22%;\">For each argument, a local\nvariable named <i>name</i> is created, and assigned\n<i>value</i>. The <i>option</i> can be any of the options\naccepted by <b>declare</b>. When <b>local</b> is used within\na function, it causes the variable <i>name</i> to have a\nvisible scope restricted to that function and its children.\nIf <i>name</i> is -, the set of shell options is made local\nto the function in which <b>local</b> is invoked: shell\noptions changed using the <b>set</b> builtin inside the\nfunction are restored to their original values when the\nfunction returns. The restore is effected as if a series of\n<b>set</b> commands were executed to restore the values that\nwere in place before the function. With no operands,\n<b>local</b> writes a list of local variables to the\nstandard output. It is an error to use <b>local</b> when not\nwithin a function. The return status is 0 unless\n<b>local</b> is used outside a function, an invalid\n<i>name</i> is supplied, or <i>name</i> is a readonly\nvariable.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>logout</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"29%\">\n\n\n<p>Exit a login shell.</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>mapfile</b> [<b>-d</b>\n<i>delim</i>] [<b>-n</b> <i>count</i>] [<b>-O</b>\n<i>origin</i>] [<b>-s</b> <i>count</i>] [<b>-t</b>]\n[<b>-u</b> <i>fd</i>] [<b>-C</b> <i><br>\ncallback</i>] [<b>-c</b> <i>quantum</i>] [<i>array</i>]\n<b><br>\nreadarray</b> [<b>-d</b> <i>delim</i>] [<b>-n</b>\n<i>count</i>] [<b>-O</b> <i>origin</i>] [<b>-s</b>\n<i>count</i>] [<b>-t</b>] [<b>-u</b> <i>fd</i>] [<b>-C</b>\n<i><br>\ncallback</i>] [<b>-c</b> <i>quantum</i>] [<i>array</i>]</p>\n\n<p style=\"margin-left:22%;\">Read lines from the standard\ninput into the indexed array variable <i>array</i>, or from\nfile descriptor <i>fd</i> if the <b>-u</b> option is\nsupplied. The variable <b><small>MAPFILE</small></b> is the\ndefault <i>array</i>. Options, if supplied, have the\nfollowing meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-d</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The first character of <i>delim</i> is used to terminate\neach input line, rather than newline. If <i>delim</i> is the\nempty string, <b>mapfile</b> will terminate a line when it\nreads a NUL character.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Copy at most <i>count</i> lines. If <i>count</i> is 0,\nall lines are copied.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-O</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Begin assigning to <i>array</i> at index <i>origin</i>.\nThe default index is 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Discard the first <i>count</i> lines read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-t</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Remove a trailing <i>delim</i> (default newline) from\neach line read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-u</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Read lines from file descriptor <i>fd</i> instead of the\nstandard input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-C</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Evaluate <i>callback</i> each time <i>quantum</i> lines\nare read. The <b>-c</b> option specifies <i>quantum</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-c</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Specify the number of lines read between each call to\n<i>callback</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <b>-C</b> is\nspecified without <b>-c</b>, the default quantum is 5000.\nWhen <i>callback</i> is evaluated, it is supplied the index\nof the next array element to be assigned and the line to be\nassigned to that element as additional arguments.\n<i>callback</i> is evaluated after the line is read but\nbefore the array element is assigned.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If not supplied\nwith an explicit origin, <b>mapfile</b> will clear\n<i>array</i> before assigning to it.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>mapfile</b>\nreturns successfully unless an invalid option or option\nargument is supplied, <i>array</i> is invalid or\nunassignable, or if <i>array</i> is not an indexed\narray.</p>\n\n<p style=\"margin-left:11%;\"><b>popd</b> [-<b>n</b>]\n[+<i>n</i>] [-<i>n</i>]</p>\n\n<p style=\"margin-left:22%;\">Removes entries from the\ndirectory stack. With no arguments, removes the top\ndirectory from the stack, and performs a <b>cd</b> to the\nnew top directory. Arguments, if supplied, have the\nfollowing meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Suppresses the normal change of directory when removing\ndirectories from the stack, so that only the stack is\nmanipulated.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>+</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Removes the <i>n</i>th entry counting from the left of\nthe list shown by <b>dirs</b>, starting with zero. For\nexample: &rsquo;&rsquo;popd +0&rsquo;&rsquo; removes the\nfirst directory, &rsquo;&rsquo;popd +1&rsquo;&rsquo; the\nsecond.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Removes the <i>n</i>th entry counting from the right of\nthe list shown by <b>dirs</b>, starting with zero. For\nexample: &rsquo;&rsquo;popd -0&rsquo;&rsquo; removes the\nlast directory, &rsquo;&rsquo;popd -1&rsquo;&rsquo; the next\nto last.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<b>popd</b> command is successful, a <b>dirs</b> is\nperformed as well, and the return status is 0. <b>popd</b>\nreturns false if an invalid option is encountered, the\ndirectory stack is empty, a non-existent directory stack\nentry is specified, or the directory change fails.</p>\n\n<p style=\"margin-left:11%;\"><b>printf</b> [<b>-v</b>\n<i>var</i>] <i>format</i> [<i>arguments</i>]</p>\n\n<p style=\"margin-left:22%;\">Write the formatted\n<i>arguments</i> to the standard output under the control of\nthe <i>format</i>. The <b>-v</b> option causes the output to\nbe assigned to the variable <i>var</i> rather than being\nprinted to the standard output.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>format</i> is a character string which contains three\ntypes of objects: plain characters, which are simply copied\nto standard output, character escape sequences, which are\nconverted and copied to the standard output, and format\nspecifications, each of which causes printing of the next\nsuccessive <i>argument</i>. In addition to the standard\n<i>printf</i>(1) format specifications, <b>printf</b>\ninterprets the following extensions:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>%b</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>causes <b>printf</b> to expand backslash escape\nsequences in the corresponding <i>argument</i> in the same\nway as <b>echo -e</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>%q</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>causes <b>printf</b> to output the corresponding\n<i>argument</i> in a format that can be reused as shell\ninput.</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:22%;\"><b>%(</b><i>datefmt</i><b>)T</b></p>\n\n<p style=\"margin-left:32%;\">causes <b>printf</b> to output\nthe date-time string resulting from using <i>datefmt</i> as\na format string for <i>strftime</i>(3). The corresponding\n<i>argument</i> is an integer representing the number of\nseconds since the epoch. Two special argument values may be\nused: -1 represents the current time, and -2 represents the\ntime the shell was invoked. If no argument is specified,\nconversion behaves as if -1 had been given. This is an\nexception to the usual <b>printf</b> behavior.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The %b, %q, and\n%T directives all use the field width and precision\narguments from the format specification and write that many\nbytes from (or use that wide a field for) the expanded\nargument, which usually contains more characters than the\noriginal.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Arguments to\nnon-string format specifiers are treated as C constants,\nexcept that a leading plus or minus sign is allowed, and if\nthe leading character is a single or double quote, the value\nis the ASCII value of the following character.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>format</i> is reused as necessary to consume all of the\n<i>arguments</i>. If the <i>format</i> requires more\n<i>arguments</i> than are supplied, the extra format\nspecifications behave as if a zero value or null string, as\nappropriate, had been supplied. The return value is zero on\nsuccess, non-zero on failure.</p>\n\n<p style=\"margin-left:11%;\"><b>pushd</b> [<b>-n</b>]\n[+<i>n</i>] [-<i>n</i>] <b><br>\npushd</b> [<b>-n</b>] [<i>dir</i>]</p>\n\n<p style=\"margin-left:22%;\">Adds a directory to the top of\nthe directory stack, or rotates the stack, making the new\ntop of the stack the current working directory. With no\narguments, <b>pushd</b> exchanges the top two directories\nand returns 0, unless the directory stack is empty.\nArguments, if supplied, have the following meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Suppresses the normal change of directory when rotating\nor adding directories to the stack, so that only the stack\nis manipulated.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>+</b><i>n</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Rotates the stack so that the <i>n</i>th directory\n(counting from the left of the list shown by <b>dirs</b>,\nstarting with zero) is at the top.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-</b><i>n</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Rotates the stack so that the <i>n</i>th directory\n(counting from the right of the list shown by <b>dirs</b>,\nstarting with zero) is at the top.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><i>dir</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Adds <i>dir</i> to the directory stack at the top,\nmaking it the new current working directory as if it had\nbeen supplied as the argument to the <b>cd</b> builtin.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<b>pushd</b> command is successful, a <b>dirs</b> is\nperformed as well. If the first form is used, <b>pushd</b>\nreturns 0 unless the cd to <i>dir</i> fails. With the second\nform, <b>pushd</b> returns 0 unless the directory stack is\nempty, a non-existent directory stack element is specified,\nor the directory change to the specified new current\ndirectory fails.</p>\n\n<p style=\"margin-left:11%;\"><b>pwd</b> [<b>-LP</b>]</p>\n\n<p style=\"margin-left:22%;\">Print the absolute pathname of\nthe current working directory. The pathname printed contains\nno symbolic links if the <b>-P</b> option is supplied or the\n<b>-o physical</b> option to the <b>set</b> builtin command\nis enabled. If the <b>-L</b> option is used, the pathname\nprinted may contain symbolic links. The return status is 0\nunless an error occurs while reading the name of the current\ndirectory or an invalid option is supplied.</p>\n\n<p style=\"margin-left:11%;\"><b>read</b> [<b>-ers</b>]\n[<b>-a</b> <i>aname</i>] [<b>-d</b> <i>delim</i>] [<b>-i</b>\n<i>text</i>] [<b>-n</b> <i>nchars</i>] [<b>-N</b>\n<i>nchars</i>] [<b>-p</b> <i><br>\nprompt</i>] [<b>-t</b> <i>timeout</i>] [<b>-u</b> <i>fd</i>]\n[<i>name</i> ...]</p>\n\n<p style=\"margin-left:22%;\">One line is read from the\nstandard input, or from the file descriptor <i>fd</i>\nsupplied as an argument to the <b>-u</b> option, split into\nwords as described above under <b>Word Splitting</b>, and\nthe first word is assigned to the first <i>name</i>, the\nsecond word to the second <i>name</i>, and so on. If there\nare more words than names, the remaining words and their\nintervening delimiters are assigned to the last <i>name</i>.\nIf there are fewer words read from the input stream than\nnames, the remaining names are assigned empty values. The\ncharacters in <b><small>IFS</small></b> are used to split\nthe line into words using the same rules the shell uses for\nexpansion (described above under <b>Word Splitting</b>). The\nbackslash character (<b>\\</b>) may be used to remove any\nspecial meaning for the next character read and for line\ncontinuation. Options, if supplied, have the following\nmeanings: <b><br>\n-a</b> <i>aname</i></p>\n\n<p style=\"margin-left:32%;\">The words are assigned to\nsequential indices of the array variable <i>aname</i>,\nstarting at 0. <i>aname</i> is unset before any new values\nare assigned. Other <i>name</i> arguments are ignored.</p>\n\n<p style=\"margin-left:22%;\"><b>-d</b> <i>delim</i></p>\n\n<p style=\"margin-left:32%;\">The first character of\n<i>delim</i> is used to terminate the input line, rather\nthan newline. If <i>delim</i> is the empty string,\n<b>read</b> will terminate a line when it reads a NUL\ncharacter.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-e</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>If the standard input is coming from a terminal,\n<b>readline</b> (see <b><small>READLINE</small></b> above)\nis used to obtain the line. Readline uses the current (or\ndefault, if line editing was not previously active) editing\nsettings, but uses Readline&rsquo;s default filename\ncompletion.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>-i</b> <i>text</i></p>\n\n<p style=\"margin-left:32%;\">If <b>readline</b> is being\nused to read the line, <i>text</i> is placed into the\nediting buffer before editing begins.</p>\n\n<p style=\"margin-left:22%;\"><b>-n</b> <i>nchars</i></p>\n\n<p style=\"margin-left:32%;\"><b>read</b> returns after\nreading <i>nchars</i> characters rather than waiting for a\ncomplete line of input, but honors a delimiter if fewer than\n<i>nchars</i> characters are read before the delimiter.</p>\n\n<p style=\"margin-left:22%;\"><b>-N</b> <i>nchars</i></p>\n\n<p style=\"margin-left:32%;\"><b>read</b> returns after\nreading exactly <i>nchars</i> characters rather than waiting\nfor a complete line of input, unless EOF is encountered or\n<b>read</b> times out. Delimiter characters encountered in\nthe input are not treated specially and do not cause\n<b>read</b> to return until <i>nchars</i> characters are\nread. The result is not split on the characters in\n<b>IFS</b>; the intent is that the variable is assigned\nexactly the characters read (with the exception of\nbackslash; see the <b>-r</b> option below).</p>\n\n<p style=\"margin-left:22%;\"><b>-p</b> <i>prompt</i></p>\n\n<p style=\"margin-left:32%;\">Display <i>prompt</i> on\nstandard error, without a trailing newline, before\nattempting to read any input. The prompt is displayed only\nif input is coming from a terminal.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-r</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Backslash does not act as an escape character. The\nbackslash is considered to be part of the line. In\nparticular, a backslash-newline pair may not then be used as\na line continuation.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Silent mode. If input is coming from a terminal,\ncharacters are not echoed.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>-t</b> <i>timeout</i></p>\n\n<p style=\"margin-left:32%;\">Cause <b>read</b> to time out\nand return failure if a complete line of input (or a\nspecified number of characters) is not read within\n<i>timeout</i> seconds. <i>timeout</i> may be a decimal\nnumber with a fractional portion following the decimal\npoint. This option is only effective if <b>read</b> is\nreading input from a terminal, pipe, or other special file;\nit has no effect when reading from regular files. If\n<b>read</b> times out, <b>read</b> saves any partial input\nread into the specified variable <i>name</i>. If\n<i>timeout</i> is 0, <b>read</b> returns immediately,\nwithout trying to read any data. The exit status is 0 if\ninput is available on the specified file descriptor,\nnon-zero otherwise. The exit status is greater than 128 if\nthe timeout is exceeded.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>-u</b> <i>fd</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Read input from file descriptor <i>fd</i>.</p></td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If no\n<i>names</i> are supplied, the line read, without the ending\ndelimiter but otherwise unmodified, is assigned to the\nvariable <b><small>REPLY</small></b><small>.</small> The\nexit status is zero, unless end-of-file is encountered,\n<b>read</b> times out (in which case the status is greater\nthan 128), a variable assignment error (such as assigning to\na readonly variable) occurs, or an invalid file descriptor\nis supplied as the argument to <b>-u</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>readonly</b> [<b>-aAf</b>]\n[<b>-p</b>] [<i>name</i>[=<i>word</i>] ...]</p>\n\n<p style=\"margin-left:22%;\">The given <i>names</i> are\nmarked readonly; the values of these <i>names</i> may not be\nchanged by subsequent assignment. If the <b>-f</b> option is\nsupplied, the functions corresponding to the <i>names</i>\nare so marked. The <b>-a</b> option restricts the variables\nto indexed arrays; the <b>-A</b> option restricts the\nvariables to associative arrays. If both options are\nsupplied, <b>-A</b> takes precedence. If no <i>name</i>\narguments are given, or if the <b>-p</b> option is supplied,\na list of all readonly names is printed. The other options\nmay be used to restrict the output to a subset of the set of\nreadonly names. The <b>-p</b> option causes output to be\ndisplayed in a format that may be reused as input. If a\nvariable name is followed by =<i>word</i>, the value of the\nvariable is set to <i>word</i>. The return status is 0\nunless an invalid option is encountered, one of the\n<i>names</i> is not a valid shell variable name, or\n<b>-f</b> is supplied with a <i>name</i> that is not a\nfunction.</p>\n\n<p style=\"margin-left:11%;\"><b>return</b> [<i>n</i>]</p>\n\n<p style=\"margin-left:22%;\">Causes a function to stop\nexecuting and return the value specified by <i>n</i> to its\ncaller. If <i>n</i> is omitted, the return status is that of\nthe last command executed in the function body. If\n<b>return</b> is executed by a trap handler, the last\ncommand used to determine the status is the last command\nexecuted before the trap handler. If <b>return</b> is\nexecuted during a <b>DEBUG</b> trap, the last command used\nto determine the status is the last command executed by the\ntrap handler before <b>return</b> was invoked. If\n<b>return</b> is used outside a function, but during\nexecution of a script by the <b>.</b> (<b>source</b>)\ncommand, it causes the shell to stop executing that script\nand return either <i>n</i> or the exit status of the last\ncommand executed within the script as the exit status of the\nscript. If <i>n</i> is supplied, the return value is its\nleast significant 8 bits. The return status is non-zero if\n<b>return</b> is supplied a non-numeric argument, or is used\noutside a function and not during execution of a script by\n<b>.</b> or <b>source</b>. Any command associated with the\n<b>RETURN</b> trap is executed before execution resumes\nafter the function or script.</p>\n\n<p style=\"margin-left:11%;\"><b>set</b>\n[<b>--abefhkmnptuvxBCEHPT</b>] [<b>-o</b>\n<i>option-name</i>] [<i>arg</i> ...] <b><br>\nset</b> [<b>+abefhkmnptuvxBCEHPT</b>] [<b>+o</b>\n<i>option-name</i>] [<i>arg</i> ...]</p>\n\n<p style=\"margin-left:22%;\">Without options, the name and\nvalue of each shell variable are displayed in a format that\ncan be reused as input for setting or resetting the\ncurrently-set variables. Read-only variables cannot be\nreset. In <i>posix mode</i>, only shell variables are\nlisted. The output is sorted according to the current\nlocale. When options are specified, they set or unset shell\nattributes. Any arguments remaining after option processing\nare treated as values for the positional parameters and are\nassigned, in order, to <b>$1</b>, <b>$2</b>, <b>...\n$</b><i>n</i>. Options, if specified, have the following\nmeanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-a</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Each variable or function that is created or modified is\ngiven the export attribute and marked for export to the\nenvironment of subsequent commands.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-b</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Report the status of terminated background jobs\nimmediately, rather than before the next primary prompt.\nThis is effective only when job control is enabled.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-e</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Exit immediately if a <i>pipeline</i> (which may consist\nof a single <i>simple command</i>), a <i>list</i>, or a\n<i>compound command</i> (see <b><small>SHELL\nGRAMMAR</small></b> above), exits with a non-zero status.\nThe shell does not exit if the command that fails is part of\nthe command list immediately following a <b>while</b> or\n<b>until</b> keyword, part of the test following the\n<b>if</b> or <b>elif</b> reserved words, part of any command\nexecuted in a <b>&amp;&amp;</b> or <b>||</b> list except the\ncommand following the final <b>&amp;&amp;</b> or <b>||</b>,\nany command in a pipeline but the last, or if the\ncommand&rsquo;s return value is being inverted with\n<b>!</b>. If a compound command other than a subshell\nreturns a non-zero status because a command failed while\n<b>-e</b> was being ignored, the shell does not exit. A trap\non <b>ERR</b>, if set, is executed before the shell exits.\nThis option applies to the shell environment and each\nsubshell environment separately (see <b><small>COMMAND\nEXECUTION ENVIRONMENT</small></b> above), and may cause\nsubshells to exit before executing all the commands in the\nsubshell.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:34%; margin-top: 1em\">If a compound\ncommand or shell function executes in a context where\n<b>-e</b> is being ignored, none of the commands executed\nwithin the compound command or function body will be\naffected by the <b>-e</b> setting, even if <b>-e</b> is set\nand a command returns a failure status. If a compound\ncommand or shell function sets <b>-e</b> while executing in\na context where <b>-e</b> is ignored, that setting will not\nhave any effect until the compound command or the command\ncontaining the function call completes.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>-f</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\">Disable pathname expansion.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-h</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Remember the location of commands as they are looked up\nfor execution. This is enabled by default.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-k</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>All arguments in the form of assignment statements are\nplaced in the environment for a command, not just those that\nprecede the command name.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-m</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Monitor mode. Job control is enabled. This option is on\nby default for interactive shells on systems that support it\n(see <b><small>JOB CONTROL</small></b> above). All processes\nrun in a separate process group. When a background job\ncompletes, the shell prints a line containing its exit\nstatus.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Read commands but do not execute them. This may be used\nto check a shell script for syntax errors. This is ignored\nby interactive shells.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>-o</b>\n<i>option-name</i></p>\n\n<p style=\"margin-left:34%;\">The <i>option-name</i> can be\none of the following: <b><br>\nallexport</b></p>\n\n<p style=\"margin-left:46%;\">Same as <b>-a</b>.</p>\n\n<p style=\"margin-left:34%;\"><b>braceexpand</b></p>\n\n<p style=\"margin-left:46%;\">Same as <b>-B</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>emacs</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Use an emacs-style command line editing interface. This\nis enabled by default when the shell is interactive, unless\nthe shell is started with the <b>--noediting</b> option.\nThis also affects the editing interface used for <b>read\n-e</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>errexit</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Same as <b>-e</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>errtrace</b></p>\n\n<p style=\"margin-left:46%;\">Same as <b>-E</b>.</p>\n\n<p style=\"margin-left:34%;\"><b>functrace</b></p>\n\n<p style=\"margin-left:46%;\">Same as <b>-T</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>hashall</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"17%\">\n\n\n<p>Same as <b>-h</b>.</p></td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>histexpand</b></p>\n\n<p style=\"margin-left:46%;\">Same as <b>-H</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>history</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Enable command history, as described above under\n<b><small>HISTORY</small></b><small>.</small> This option is\non by default in interactive shells.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>ignoreeof</b></p>\n\n<p style=\"margin-left:46%;\">The effect is as if the shell\ncommand &rsquo;&rsquo;IGNOREEOF=10&rsquo;&rsquo; had been\nexecuted (see <b>Shell Variables</b> above).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>keyword</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"17%\">\n\n\n<p>Same as <b>-k</b>.</p></td>\n<td width=\"37%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>monitor</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"17%\">\n\n\n<p>Same as <b>-m</b>.</p></td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>noclobber</b></p>\n\n<p style=\"margin-left:46%;\">Same as <b>-C</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>noexec</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"28%\">\n\n\n<p>Same as <b>-n</b>.</p></td>\n<td width=\"26%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>noglob</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"28%\">\n\n\n<p>Same as <b>-f</b>.</p></td>\n<td width=\"26%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>nolog</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"28%\">\n\n\n<p>Currently ignored.</p></td>\n<td width=\"26%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>notify</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"28%\">\n\n\n<p>Same as <b>-b</b>.</p></td>\n<td width=\"26%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>nounset</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"28%\">\n\n\n<p>Same as <b>-u</b>.</p></td>\n<td width=\"26%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>onecmd</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"28%\">\n\n\n<p>Same as <b>-t</b>.</p></td>\n<td width=\"26%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>physical</b></p>\n\n<p style=\"margin-left:46%;\">Same as <b>-P</b>.</p>\n\n<p style=\"margin-left:34%;\"><b>pipefail</b></p>\n\n<p style=\"margin-left:46%;\">If set, the return value of a\npipeline is the value of the last (rightmost) command to\nexit with a non-zero status, or zero if all commands in the\npipeline exit successfully. This option is disabled by\ndefault.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"8%\">\n\n\n<p><b>posix</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"54%\">\n\n\n<p>Change the behavior of <b>bash</b> where the default\noperation differs from the POSIX standard to match the\nstandard (<i>posix mode</i>). See <b><small>SEE\nALSO</small></b> below for a reference to a document that\ndetails how posix mode affects bash&rsquo;s behavior.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\"><b>privileged</b></p>\n\n<p style=\"margin-left:46%;\">Same as <b>-p</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>verbose</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Same as <b>-v</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>vi</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Use a vi-style command line editing interface. This also\naffects the editing interface used for <b>read -e</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"34%\"></td>\n<td width=\"11%\">\n\n\n<p><b>xtrace</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>Same as <b>-x</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%;\">If <b>-o</b> is supplied with\nno <i>option-name</i>, the values of the current options are\nprinted. If <b>+o</b> is supplied with no\n<i>option-name</i>, a series of <b>set</b> commands to\nrecreate the current option settings is displayed on the\nstandard output.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>-p</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\">Turn on <i>privileged</i> mode.\nIn this mode, the <b><small>$ENV</small></b> and\n<b><small>$BASH_ENV</small></b> files are not processed,\nshell functions are not inherited from the environment, and\nthe <b><small>SHELLOPTS</small></b><small>, <b>BASHOPTS</b>,\n<b>CDPATH</b>,</small> and <b><small>GLOBIGNORE</small></b>\nvariables, if they appear in the environment, are ignored.\nIf the shell is started with the effective user (group) id\nnot equal to the real user (group) id, and the <b>-p</b>\noption is not supplied, these actions are taken and the\neffective user id is set to the real user id. If the\n<b>-p</b> option is supplied at startup, the effective user\nid is not reset. Turning this option off causes the\neffective user and group ids to be set to the real user and\ngroup ids.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-t</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Exit after reading and executing one command.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-u</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Treat unset variables and parameters other than the\nspecial parameters &quot;@&quot; and &quot;*&quot; as an\nerror when performing parameter expansion. If expansion is\nattempted on an unset variable or parameter, the shell\nprints an error message, and, if not interactive, exits with\na non-zero status.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Print shell input lines as they are read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-x</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>After expanding each <i>simple command</i>, <b>for</b>\ncommand, <b>case</b> command, <b>select</b> command, or\narithmetic <b>for</b> command, display the expanded value of\n<b><small>PS4</small></b><small>,</small> followed by the\ncommand and its expanded arguments or associated word\nlist.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-B</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>The shell performs brace expansion (see <b>Brace\nExpansion</b> above). This is on by default.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-C</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, <b>bash</b> does not overwrite an existing file\nwith the <b>&gt;</b>, <b>&gt;&amp;</b>, and <b>&lt;&gt;</b>\nredirection operators. This may be overridden when creating\noutput files by using the redirection operator <b>&gt;|</b>\ninstead of <b>&gt;</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-E</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, any trap on <b>ERR</b> is inherited by shell\nfunctions, command substitutions, and commands executed in a\nsubshell environment. The <b>ERR</b> trap is normally not\ninherited in such cases.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-H</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Enable <b>!</b> style history substitution. This option\nis on by default when the shell is interactive.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-P</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, the shell does not resolve symbolic links when\nexecuting commands such as <b>cd</b> that change the current\nworking directory. It uses the physical directory structure\ninstead. By default, <b>bash</b> follows the logical chain\nof directories when performing commands which change the\ncurrent directory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-T</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, any traps on <b>DEBUG</b> and <b>RETURN</b> are\ninherited by shell functions, command substitutions, and\ncommands executed in a subshell environment. The\n<b>DEBUG</b> and <b>RETURN</b> traps are normally not\ninherited in such cases.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>--</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>If no arguments follow this option, then the positional\nparameters are unset. Otherwise, the positional parameters\nare set to the <i>arg</i>s, even if some of them begin with\na <b>-</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"66%\">\n\n\n<p>Signal the end of options, cause all remaining\n<i>arg</i>s to be assigned to the positional parameters. The\n<b>-x</b> and <b>-v</b> options are turned off. If there are\nno <i>arg</i>s, the positional parameters remain\nunchanged.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The options are\noff by default unless otherwise noted. Using + rather than -\ncauses these options to be turned off. The options can also\nbe specified as arguments to an invocation of the shell. The\ncurrent set of options may be found in <b>$-</b>. The return\nstatus is always true unless an invalid option is\nencountered.</p>\n\n<p style=\"margin-left:11%;\"><b>shift</b> [<i>n</i>]</p>\n\n<p style=\"margin-left:22%;\">The positional parameters from\n<i>n</i>+1 ... are renamed to <b>$1 ....</b> Parameters\nrepresented by the numbers <b>$#</b> down to\n<b>$#</b>-<i>n</i>+1 are unset. <i>n</i> must be a\nnon-negative number less than or equal to <b>$#</b>. If\n<i>n</i> is 0, no parameters are changed. If <i>n</i> is not\ngiven, it is assumed to be 1. If <i>n</i> is greater than\n<b>$#</b>, the positional parameters are not changed. The\nreturn status is greater than zero if <i>n</i> is greater\nthan <b>$#</b> or less than zero; otherwise 0.</p>\n\n<p style=\"margin-left:11%;\"><b>shopt</b> [<b>-pqsu</b>]\n[<b>-o</b>] [<i>optname</i> ...]</p>\n\n<p style=\"margin-left:22%;\">Toggle the values of settings\ncontrolling optional shell behavior. The settings can be\neither those listed below, or, if the <b>-o</b> option is\nused, those available with the <b>-o</b> option to the\n<b>set</b> builtin command. With no options, or with the\n<b>-p</b> option, a list of all settable options is\ndisplayed, with an indication of whether or not each is set;\nif <i>optnames</i> are supplied, the output is restricted to\nthose options. The <b>-p</b> option causes output to be\ndisplayed in a form that may be reused as input. Other\noptions have the following meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Enable (set) each <i>optname</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-u</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Disable (unset) each <i>optname</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-q</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Suppresses normal output (quiet mode); the return status\nindicates whether the <i>optname</i> is set or unset. If\nmultiple <i>optname</i> arguments are given with <b>-q</b>,\nthe return status is zero if all <i>optnames</i> are\nenabled; non-zero otherwise.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-o</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>Restricts the values of <i>optname</i> to be those\ndefined for the <b>-o</b> option to the <b>set</b>\nbuiltin.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If either\n<b>-s</b> or <b>-u</b> is used with no <i>optname</i>\narguments, <b>shopt</b> shows only those options which are\nset or unset, respectively. Unless otherwise noted, the\n<b>shopt</b> options are disabled (unset) by default.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The return\nstatus when listing options is zero if all <i>optnames</i>\nare enabled, non-zero otherwise. When setting or unsetting\noptions, the return status is zero unless an <i>optname</i>\nis not a valid shell option.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The list of\n<b>shopt</b> options is: <b><br>\nassoc_expand_once</b></p>\n\n<p style=\"margin-left:34%;\">If set, the shell suppresses\nmultiple evaluation of associative array subscripts during\narithmetic expression evaluation, while executing builtins\nthat can perform variable assignments, and while executing\nbuiltins that perform array dereferencing.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>autocd</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, a command name that is the name of a directory\nis executed as if it were the argument to the <b>cd</b>\ncommand. This option is only used by interactive shells.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>cdable_vars</b></p>\n\n<p style=\"margin-left:34%;\">If set, an argument to the\n<b>cd</b> builtin command that is not a directory is assumed\nto be the name of a variable whose value is the directory to\nchange to.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>cdspell</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, minor errors in the spelling of a directory\ncomponent in a <b>cd</b> command will be corrected. The\nerrors checked for are transposed characters, a missing\ncharacter, and one character too many. If a correction is\nfound, the corrected filename is printed, and the command\nproceeds. This option is only used by interactive\nshells.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>checkhash</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> checks that\na command found in the hash table exists before trying to\nexecute it. If a hashed command no longer exists, a normal\npath search is performed.</p>\n\n<p style=\"margin-left:22%;\"><b>checkjobs</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> lists the\nstatus of any stopped and running jobs before exiting an\ninteractive shell. If any jobs are running, this causes the\nexit to be deferred until a second exit is attempted without\nan intervening command (see <b><small>JOB\nCONTROL</small></b> above). The shell always postpones\nexiting if any jobs are stopped.</p>\n\n<p style=\"margin-left:22%;\"><b>checkwinsize</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> checks the\nwindow size after each external (non-builtin) command and,\nif necessary, updates the values of\n<b><small>LINES</small></b> and\n<b><small>COLUMNS</small></b><small>.</small> This option is\nenabled by default.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>cmdhist</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, <b>bash</b> attempts to save all lines of a\nmultiple-line command in the same history entry. This allows\neasy re-editing of multi-line commands. This option is\nenabled by default, but only has an effect if command\nhistory is enabled, as described above under\n<b><small>HISTORY</small></b><small>.</small></p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>compat31 <br>\ncompat32 <br>\ncompat40 <br>\ncompat41 <br>\ncompat42 <br>\ncompat43 <br>\ncompat44</b></p>\n\n<p style=\"margin-left:34%;\">These control aspects of the\nshell&rsquo;s compatibility mode (see <b><small>SHELL\nCOMPATIBILITY MODE</small></b> below).</p>\n\n<p style=\"margin-left:22%;\"><b>complete_fullquote</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> quotes all\nshell metacharacters in filenames and directory names when\nperforming completion. If not set, <b>bash</b> removes\nmetacharacters such as the dollar sign from the set of\ncharacters that will be quoted in completed filenames when\nthese metacharacters appear in shell variable references in\nwords to be completed. This means that dollar signs in\nvariable names that expand to directories will not be\nquoted; however, any dollar signs appearing in filenames\nwill not be quoted, either. This is active only when bash is\nusing backslashes to quote completed filenames. This\nvariable is set by default, which is the default bash\nbehavior in versions through 4.2.</p>\n\n<p style=\"margin-left:22%;\"><b>direxpand</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> replaces\ndirectory names with the results of word expansion when\nperforming filename completion. This changes the contents of\nthe readline editing buffer. If not set, <b>bash</b>\nattempts to preserve what the user typed.</p>\n\n<p style=\"margin-left:22%;\"><b>dirspell</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> attempts\nspelling correction on directory names during word\ncompletion if the directory name initially supplied does not\nexist.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>dotglob</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, <b>bash</b> includes filenames beginning with a\n&rsquo;.&rsquo; in the results of pathname expansion. The\nfilenames <b>&rsquo;&rsquo;.&rsquo;&rsquo;</b> and\n<b>&rsquo;&rsquo;..&rsquo;&rsquo;</b> must always be matched\nexplicitly, even if <b>dotglob</b> is set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>execfail</b></p>\n\n<p style=\"margin-left:34%;\">If set, a non-interactive shell\nwill not exit if it cannot execute the file specified as an\nargument to the <b>exec</b> builtin command. An interactive\nshell does not exit if <b>exec</b> fails.</p>\n\n<p style=\"margin-left:22%;\"><b>expand_aliases</b></p>\n\n<p style=\"margin-left:34%;\">If set, aliases are expanded as\ndescribed above under\n<b><small>ALIASES</small></b><small>.</small> This option is\nenabled by default for interactive shells.</p>\n\n<p style=\"margin-left:22%;\"><b>extdebug</b></p>\n\n<p style=\"margin-left:34%;\">If set at shell invocation, or\nin a shell startup file, arrange to execute the debugger\nprofile before the shell starts, identical to the\n<b>--debugger</b> option. If set after invocation, behavior\nintended for use by debuggers is enabled:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>1.</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"55%\">\n\n\n<p>The <b>-F</b> option to the <b>declare</b> builtin\ndisplays the source file name and line number corresponding\nto each function name supplied as an argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>2.</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"55%\">\n\n\n<p>If the command run by the <b>DEBUG</b> trap returns a\nnon-zero value, the next command is skipped and not\nexecuted.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>3.</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"55%\">\n\n\n<p>If the command run by the <b>DEBUG</b> trap returns a\nvalue of 2, and the shell is executing in a subroutine (a\nshell function or a shell script executed by the <b>.</b> or\n<b>source</b> builtins), the shell simulates a call to\n<b>return</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>4.</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"55%\">\n\n\n<p><b><small>BASH_ARGC</small></b> and\n<b><small>BASH_ARGV</small></b> are updated as described in\ntheir descriptions above.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>5.</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"55%\">\n\n\n<p>Function tracing is enabled: command substitution, shell\nfunctions, and subshells invoked with <b>(</b>\n<i>command</i> <b>)</b> inherit the <b>DEBUG</b> and\n<b>RETURN</b> traps.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>6.</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"55%\">\n\n\n<p>Error tracing is enabled: command substitution, shell\nfunctions, and subshells invoked with <b>(</b>\n<i>command</i> <b>)</b> inherit the <b>ERR</b> trap.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>extglob</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:34%; margin-top: 1em\">If set, the\nextended pattern matching features described above under\n<b>Pathname Expansion</b> are enabled.</p>\n\n<p style=\"margin-left:22%;\"><b>extquote</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>$</b>'<i>string</i>'\nand <b>$</b>&quot;<i>string</i>&quot; quoting is performed\nwithin <b>${</b><i>parameter</i><b>}</b> expansions enclosed\nin double quotes. This option is enabled by default.</p>\n\n<p style=\"margin-left:22%;\"><b>failglob</b></p>\n\n<p style=\"margin-left:34%;\">If set, patterns which fail to\nmatch filenames during pathname expansion result in an\nexpansion error.</p>\n\n<p style=\"margin-left:22%;\"><b>force_fignore</b></p>\n\n<p style=\"margin-left:34%;\">If set, the suffixes specified\nby the <b><small>FIGNORE</small></b> shell variable cause\nwords to be ignored when performing word completion even if\nthe ignored words are the only possible completions. See\n<b><small>SHELL VARIABLES</small></b> above for a\ndescription of <b><small>FIGNORE</small></b><small>.</small>\nThis option is enabled by default.</p>\n\n<p style=\"margin-left:22%;\"><b>globasciiranges</b></p>\n\n<p style=\"margin-left:34%;\">If set, range expressions used\nin pattern matching bracket expressions (see\n<b><small>Pattern Matching</small></b> above) behave as if\nin the traditional C locale when performing comparisons.\nThat is, the current locale&rsquo;s collating sequence is\nnot taken into account, so <b>b</b> will not collate between\n<b>A</b> and <b>B</b>, and upper-case and lower-case ASCII\ncharacters will collate together.</p>\n\n<p style=\"margin-left:22%;\"><b>globstar</b></p>\n\n<p style=\"margin-left:34%;\">If set, the pattern <b>**</b>\nused in a pathname expansion context will match all files\nand zero or more directories and subdirectories. If the\npattern is followed by a <b>/</b>, only directories and\nsubdirectories match.</p>\n\n<p style=\"margin-left:22%;\"><b>gnu_errfmt</b></p>\n\n<p style=\"margin-left:34%;\">If set, shell error messages\nare written in the standard GNU error message format.</p>\n\n<p style=\"margin-left:22%;\"><b>histappend</b></p>\n\n<p style=\"margin-left:34%;\">If set, the history list is\nappended to the file named by the value of the\n<b><small>HISTFILE</small></b> variable when the shell\nexits, rather than overwriting the file.</p>\n\n<p style=\"margin-left:22%;\"><b>histreedit</b></p>\n\n<p style=\"margin-left:34%;\">If set, and <b>readline</b> is\nbeing used, a user is given the opportunity to re-edit a\nfailed history substitution.</p>\n\n<p style=\"margin-left:22%;\"><b>histverify</b></p>\n\n<p style=\"margin-left:34%;\">If set, and <b>readline</b> is\nbeing used, the results of history substitution are not\nimmediately passed to the shell parser. Instead, the\nresulting line is loaded into the <b>readline</b> editing\nbuffer, allowing further modification.</p>\n\n<p style=\"margin-left:22%;\"><b>hostcomplete</b></p>\n\n<p style=\"margin-left:34%;\">If set, and <b>readline</b> is\nbeing used, <b>bash</b> will attempt to perform hostname\ncompletion when a word containing a <b>@</b> is being\ncompleted (see <b>Completing</b> under\n<b><small>READLINE</small></b> above). This is enabled by\ndefault.</p>\n\n<p style=\"margin-left:22%;\"><b>huponexit</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> will send\n<b><small>SIGHUP</small></b> to all jobs when an interactive\nlogin shell exits.</p>\n\n<p style=\"margin-left:22%;\"><b>inherit_errexit</b></p>\n\n<p style=\"margin-left:34%;\">If set, command substitution\ninherits the value of the <b>errexit</b> option, instead of\nunsetting it in the subshell environment. This option is\nenabled when <i>posix mode</i> is enabled.</p>\n\n\n<p style=\"margin-left:22%;\"><b>interactive_comments</b></p>\n\n<p style=\"margin-left:34%;\">If set, allow a word beginning\nwith <b>#</b> to cause that word and all remaining\ncharacters on that line to be ignored in an interactive\nshell (see <b><small>COMMENTS</small></b> above). This\noption is enabled by default.</p>\n\n<p style=\"margin-left:22%;\"><b>lastpipe</b></p>\n\n<p style=\"margin-left:34%;\">If set, and job control is not\nactive, the shell runs the last command of a pipeline not\nexecuted in the background in the current shell\nenvironment.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>lithist</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>If set, and the <b>cmdhist</b> option is enabled,\nmulti-line commands are saved to the history with embedded\nnewlines rather than using semicolon separators where\npossible.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>localvar_inherit</b></p>\n\n<p style=\"margin-left:34%;\">If set, local variables inherit\nthe value and attributes of a variable of the same name that\nexists at a previous scope before any new value is assigned.\nThe nameref attribute is not inherited.</p>\n\n<p style=\"margin-left:22%;\"><b>localvar_unset</b></p>\n\n<p style=\"margin-left:34%;\">If set, calling <b>unset</b> on\nlocal variables in previous function scopes marks them so\nsubsequent lookups find them unset until that function\nreturns. This is identical to the behavior of unsetting\nlocal variables at the current function scope.</p>\n\n<p style=\"margin-left:22%;\"><b>login_shell</b></p>\n\n<p style=\"margin-left:34%;\">The shell sets this option if\nit is started as a login shell (see\n<b><small>INVOCATION</small></b> above). The value may not\nbe changed.</p>\n\n<p style=\"margin-left:22%;\"><b>mailwarn</b></p>\n\n<p style=\"margin-left:34%;\">If set, and a file that\n<b>bash</b> is checking for mail has been accessed since the\nlast time it was checked, the message &rsquo;&rsquo;The mail\nin <i>mailfile</i> has been read&rsquo;&rsquo; is\ndisplayed.</p>\n\n\n<p style=\"margin-left:22%;\"><b>no_empty_cmd_completion</b></p>\n\n<p style=\"margin-left:34%;\">If set, and <b>readline</b> is\nbeing used, <b>bash</b> will not attempt to search the\n<b><small>PATH</small></b> for possible completions when\ncompletion is attempted on an empty line.</p>\n\n<p style=\"margin-left:22%;\"><b>nocaseglob</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> matches\nfilenames in a case-insensitive fashion when performing\npathname expansion (see <b>Pathname Expansion</b>\nabove).</p>\n\n<p style=\"margin-left:22%;\"><b>nocasematch</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> matches\npatterns in a case-insensitive fashion when performing\nmatching while executing <b>case</b> or <b>[[</b>\nconditional commands, when performing pattern substitution\nword expansions, or when filtering possible completions as\npart of programmable completion.</p>\n\n<p style=\"margin-left:22%;\"><b>nullglob</b></p>\n\n<p style=\"margin-left:34%;\">If set, <b>bash</b> allows\npatterns which match no files (see <b>Pathname Expansion</b>\nabove) to expand to a null string, rather than\nthemselves.</p>\n\n<p style=\"margin-left:22%;\"><b>progcomp</b></p>\n\n<p style=\"margin-left:34%;\">If set, the programmable\ncompletion facilities (see <b>Programmable Completion</b>\nabove) are enabled. This option is enabled by default.</p>\n\n<p style=\"margin-left:22%;\"><b>progcomp_alias</b></p>\n\n<p style=\"margin-left:34%;\">If set, and programmable\ncompletion is enabled, <b>bash</b> treats a command name\nthat doesn&rsquo;t have any completions as a possible alias\nand attempts alias expansion. If it has an alias,\n<b>bash</b> attempts programmable completion using the\ncommand word resulting from the expanded alias.</p>\n\n<p style=\"margin-left:22%;\"><b>promptvars</b></p>\n\n<p style=\"margin-left:34%;\">If set, prompt strings undergo\nparameter expansion, command substitution, arithmetic\nexpansion, and quote removal after being expanded as\ndescribed in <b><small>PROMPTING</small></b> above. This\noption is enabled by default.</p>\n\n<p style=\"margin-left:22%;\"><b>restricted_shell</b></p>\n\n<p style=\"margin-left:34%;\">The shell sets this option if\nit is started in restricted mode (see <b><small>RESTRICTED\nSHELL</small></b> below). The value may not be changed. This\nis not reset when the startup files are executed, allowing\nthe startup files to discover whether or not a shell is\nrestricted.</p>\n\n<p style=\"margin-left:22%;\"><b>shift_verbose</b></p>\n\n<p style=\"margin-left:34%;\">If set, the <b>shift</b>\nbuiltin prints an error message when the shift count exceeds\nthe number of positional parameters.</p>\n\n<p style=\"margin-left:22%;\"><b>sourcepath</b></p>\n\n<p style=\"margin-left:34%;\">If set, the <b>source</b>\n(<b>.</b>) builtin uses the value of\n<b><small>PATH</small></b> to find the directory containing\nthe file supplied as an argument. This option is enabled by\ndefault.</p>\n\n<p style=\"margin-left:22%;\"><b>xpg_echo</b></p>\n\n<p style=\"margin-left:34%;\">If set, the <b>echo</b> builtin\nexpands backslash-escape sequences by default.</p>\n\n<p style=\"margin-left:11%;\"><b>suspend</b> [<b>-f</b>]</p>\n\n<p style=\"margin-left:22%;\">Suspend the execution of this\nshell until it receives a <b><small>SIGCONT</small></b>\nsignal. A login shell cannot be suspended; the <b>-f</b>\noption can be used to override this and force the\nsuspension. The return status is 0 unless the shell is a\nlogin shell and <b>-f</b> is not supplied, or if job control\nis not enabled.</p>\n\n<p style=\"margin-left:11%;\"><b>test</b> <i>expr</i> <b><br>\n[</b> <i>expr</i> <b>]</b></p>\n\n<p style=\"margin-left:22%;\">Return a status of 0 (true) or\n1 (false) depending on the evaluation of the conditional\nexpression <i>expr</i>. Each operator and operand must be a\nseparate argument. Expressions are composed of the primaries\ndescribed above under <b><small>CONDITIONAL\nEXPRESSIONS</small></b><small>.</small> <b>test</b> does not\naccept any options, nor does it accept and ignore an\nargument of <b>--</b> as signifying the end of options.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Expressions may\nbe combined using the following operators, listed in\ndecreasing order of precedence. The evaluation depends on\nthe number of arguments; see below. Operator precedence is\nused when there are five or more arguments.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>!</b> <i>expr</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"34%\">\n\n\n<p>True if <i>expr</i> is false.</p></td>\n<td width=\"34%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>(</b> <i>expr</i>\n<b>)</b></p>\n\n<p style=\"margin-left:32%;\">Returns the value of\n<i>expr</i>. This may be used to override the normal\nprecedence of operators.</p>\n\n<p style=\"margin-left:22%;\"><i>expr1</i> -<b>a</b>\n<i>expr2</i></p>\n\n<p style=\"margin-left:32%;\">True if both <i>expr1</i> and\n<i>expr2</i> are true.</p>\n\n<p style=\"margin-left:22%;\"><i>expr1</i> -<b>o</b>\n<i>expr2</i></p>\n\n<p style=\"margin-left:32%;\">True if either <i>expr1</i> or\n<i>expr2</i> is true.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>test</b> and\n<b>[</b> evaluate conditional expressions using a set of\nrules based on the number of arguments. <br>\n0 arguments</p>\n\n<p style=\"margin-left:32%;\">The expression is false.</p>\n\n<p style=\"margin-left:22%;\">1 argument</p>\n\n<p style=\"margin-left:32%;\">The expression is true if and\nonly if the argument is not null.</p>\n\n<p style=\"margin-left:22%;\">2 arguments</p>\n\n<p style=\"margin-left:32%;\">If the first argument is\n<b>!</b>, the expression is true if and only if the second\nargument is null. If the first argument is one of the unary\nconditional operators listed above under\n<b><small>CONDITIONAL\nEXPRESSIONS</small></b><small>,</small> the expression is\ntrue if the unary test is true. If the first argument is not\na valid unary conditional operator, the expression is\nfalse.</p>\n\n<p style=\"margin-left:22%;\">3 arguments</p>\n\n<p style=\"margin-left:32%;\">The following conditions are\napplied in the order listed. If the second argument is one\nof the binary conditional operators listed above under\n<b><small>CONDITIONAL\nEXPRESSIONS</small></b><small>,</small> the result of the\nexpression is the result of the binary test using the first\nand third arguments as operands. The <b>-a</b> and <b>-o</b>\noperators are considered binary operators when there are\nthree arguments. If the first argument is <b>!</b>, the\nvalue is the negation of the two-argument test using the\nsecond and third arguments. If the first argument is exactly\n<b>(</b> and the third argument is exactly <b>)</b>, the\nresult is the one-argument test of the second argument.\nOtherwise, the expression is false.</p>\n\n<p style=\"margin-left:22%;\">4 arguments</p>\n\n<p style=\"margin-left:32%;\">If the first argument is\n<b>!</b>, the result is the negation of the three-argument\nexpression composed of the remaining arguments. Otherwise,\nthe expression is parsed and evaluated according to\nprecedence using the rules listed above.</p>\n\n<p style=\"margin-left:22%;\">5 or more arguments</p>\n\n<p style=\"margin-left:32%;\">The expression is parsed and\nevaluated according to precedence using the rules listed\nabove.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When used with\n<b>test</b> or <b>[</b>, the <b>&lt;</b> and <b>&gt;</b>\noperators sort lexicographically using ASCII ordering.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>times</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Print the accumulated user and system times for the\nshell and for processes run from the shell. The return\nstatus is 0.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>trap</b> [<b>-lp</b>]\n[[<i>arg</i>] <i>sigspec</i> ...]</p>\n\n<p style=\"margin-left:22%;\">The command <i>arg</i> is to be\nread and executed when the shell receives signal(s)\n<i>sigspec</i>. If <i>arg</i> is absent (and there is a\nsingle <i>sigspec</i>) or <b>-</b>, each specified signal is\nreset to its original disposition (the value it had upon\nentrance to the shell). If <i>arg</i> is the null string the\nsignal specified by each <i>sigspec</i> is ignored by the\nshell and by the commands it invokes. If <i>arg</i> is not\npresent and <b>-p</b> has been supplied, then the trap\ncommands associated with each <i>sigspec</i> are displayed.\nIf no arguments are supplied or if only <b>-p</b> is given,\n<b>trap</b> prints the list of commands associated with each\nsignal. The <b>-l</b> option causes the shell to print a\nlist of signal names and their corresponding numbers. Each\n<i>sigspec</i> is either a signal name defined in\n&lt;<i>signal.h</i>&gt;, or a signal number. Signal names\nare case insensitive and the <b><small>SIG</small></b>\nprefix is optional.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If a\n<i>sigspec</i> is <b><small>EXIT</small></b> (0) the command\n<i>arg</i> is executed on exit from the shell. If a\n<i>sigspec</i> is\n<b><small>DEBUG</small></b><small>,</small> the command\n<i>arg</i> is executed before every <i>simple command</i>,\n<i>for</i> command, <i>case</i> command, <i>select</i>\ncommand, every arithmetic <i>for</i> command, and before the\nfirst command executes in a shell function (see\n<b><small>SHELL GRAMMAR</small></b> above). Refer to the\ndescription of the <b>extdebug</b> option to the\n<b>shopt</b> builtin for details of its effect on the\n<b>DEBUG</b> trap. If a <i>sigspec</i> is\n<b><small>RETURN</small></b><small>,</small> the command\n<i>arg</i> is executed each time a shell function or a\nscript executed with the <b>.</b> or <b>source</b> builtins\nfinishes executing.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If a\n<i>sigspec</i> is <b><small>ERR</small></b><small>,</small>\nthe command <i>arg</i> is executed whenever a pipeline\n(which may consist of a single simple command), a list, or a\ncompound command returns a non-zero exit status, subject to\nthe following conditions. The <b><small>ERR</small></b> trap\nis not executed if the failed command is part of the command\nlist immediately following a <b>while</b> or <b>until</b>\nkeyword, part of the test in an <i>if</i> statement, part of\na command executed in a <b>&amp;&amp;</b> or <b>||</b> list\nexcept the command following the final <b>&amp;&amp;</b> or\n<b>||</b>, any command in a pipeline but the last, or if the\ncommand&rsquo;s return value is being inverted using\n<b>!</b>. These are the same conditions obeyed by the\n<b>errexit</b> (<b>-e</b>) option.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Signals ignored\nupon entry to the shell cannot be trapped or reset. Trapped\nsignals that are not being ignored are reset to their\noriginal values in a subshell or subshell environment when\none is created. The return status is false if any\n<i>sigspec</i> is invalid; otherwise <b>trap</b> returns\ntrue.</p>\n\n<p style=\"margin-left:11%;\"><b>type</b> [<b>-aftpP</b>]\n<i>name</i> [<i>name</i> ...]</p>\n\n<p style=\"margin-left:22%;\">With no options, indicate how\neach <i>name</i> would be interpreted if used as a command\nname. If the <b>-t</b> option is used, <b>type</b> prints a\nstring which is one of <i>alias</i>, <i>keyword</i>,\n<i>function</i>, <i>builtin</i>, or <i>file</i> if\n<i>name</i> is an alias, shell reserved word, function,\nbuiltin, or disk file, respectively. If the <i>name</i> is\nnot found, then nothing is printed, and an exit status of\nfalse is returned. If the <b>-p</b> option is used,\n<b>type</b> either returns the name of the disk file that\nwould be executed if <i>name</i> were specified as a command\nname, or nothing if &rsquo;&rsquo;type -t name&rsquo;&rsquo;\nwould not return <i>file</i>. The <b>-P</b> option forces a\n<b><small>PATH</small></b> search for each <i>name</i>, even\nif &rsquo;&rsquo;type -t name&rsquo;&rsquo; would not return\n<i>file</i>. If a command is hashed, <b>-p</b> and <b>-P</b>\nprint the hashed value, which is not necessarily the file\nthat appears first in\n<b><small>PATH</small></b><small>.</small> If the <b>-a</b>\noption is used, <b>type</b> prints all of the places that\ncontain an executable named <i>name</i>. This includes\naliases and functions, if and only if the <b>-p</b> option\nis not also used. The table of hashed commands is not\nconsulted when using <b>-a</b>. The <b>-f</b> option\nsuppresses shell function lookup, as with the <b>command</b>\nbuiltin. <b>type</b> returns true if all of the arguments\nare found, false if any are not found.</p>\n\n<p style=\"margin-left:11%;\"><b>ulimit</b> [<b>-HS</b>]\n<b>-a <br>\nulimit</b> [<b>-HS</b>] [<b>-bcdefiklmnpqrstuvxPRT</b>\n[<i>limit</i>]]</p>\n\n<p style=\"margin-left:22%;\">Provides control over the\nresources available to the shell and to processes started by\nit, on systems that allow such control. The <b>-H</b> and\n<b>-S</b> options specify that the hard or soft limit is set\nfor the given resource. A hard limit cannot be increased by\na non-root user once it is set; a soft limit may be\nincreased up to the value of the hard limit. If neither\n<b>-H</b> nor <b>-S</b> is specified, both the soft and hard\nlimits are set. The value of <i>limit</i> can be a number in\nthe unit specified for the resource or one of the special\nvalues <b>hard</b>, <b>soft</b>, or <b>unlimited</b>, which\nstand for the current hard limit, the current soft limit,\nand no limit, respectively. If <i>limit</i> is omitted, the\ncurrent value of the soft limit of the resource is printed,\nunless the <b>-H</b> option is given. When more than one\nresource is specified, the limit name and unit, if\nappropriate, are printed before the value. Other options are\ninterpreted as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-a</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>All current limits are reported; no limits are set</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-b</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum socket buffer size</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-c</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum size of core files created</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-d</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum size of a process&rsquo;s data segment</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-e</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum scheduling priority (&quot;nice&quot;)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-f</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum size of files written by the shell and its\nchildren</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-i</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of pending signals</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-k</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of kqueues that may be allocated</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-l</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum size that may be locked into memory</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-m</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum resident set size (many systems do not honor\nthis limit)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of open file descriptors (most\nsystems do not allow this value to be set)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-p</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The pipe size in 512-byte blocks (this may not be\nset)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-q</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of bytes in POSIX message queues</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-r</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum real-time scheduling priority</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum stack size</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-t</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum amount of cpu time in seconds</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-u</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of processes available to a single\nuser</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum amount of virtual memory available to the\nshell and, on some systems, to its children</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-x</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of file locks</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-P</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of pseudoterminals</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-R</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum time a real-time process can run before\nblocking, in microseconds</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-T</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of threads</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <i>limit</i>\nis given, and the <b>-a</b> option is not used, <i>limit</i>\nis the new value of the specified resource. If no option is\ngiven, then <b>-f</b> is assumed. Values are in 1024-byte\nincrements, except for <b>-t</b>, which is in seconds;\n<b>-R</b>, which is in microseconds; <b>-p</b>, which is in\nunits of 512-byte blocks; <b>-P</b>, <b>-T</b>, <b>-b</b>,\n<b>-k</b>, <b>-n</b>, and <b>-u</b>, which are unscaled\nvalues; and, when in posix mode, <b>-c</b> and <b>-f</b>,\nwhich are in 512-byte increments. The return status is 0\nunless an invalid option or argument is supplied, or an\nerror occurs while setting a new limit.</p>\n\n<p style=\"margin-left:11%;\"><b>umask</b> [<b>-p</b>]\n[<b>-S</b>] [<i>mode</i>]</p>\n\n<p style=\"margin-left:22%;\">The user file-creation mask is\nset to <i>mode</i>. If <i>mode</i> begins with a digit, it\nis interpreted as an octal number; otherwise it is\ninterpreted as a symbolic mode mask similar to that accepted\nby <i>chmod</i>(1). If <i>mode</i> is omitted, the current\nvalue of the mask is printed. The <b>-S</b> option causes\nthe mask to be printed in symbolic form; the default output\nis an octal number. If the <b>-p</b> option is supplied, and\n<i>mode</i> is omitted, the output is in a form that may be\nreused as input. The return status is 0 if the mode was\nsuccessfully changed or if no <i>mode</i> argument was\nsupplied, and false otherwise.</p>\n\n<p style=\"margin-left:11%;\"><b>unalias</b> [-<b>a</b>]\n[<i>name</i> ...]</p>\n\n<p style=\"margin-left:22%;\">Remove each <i>name</i> from\nthe list of defined aliases. If <b>-a</b> is supplied, all\nalias definitions are removed. The return value is true\nunless a supplied <i>name</i> is not a defined alias.</p>\n\n<p style=\"margin-left:11%;\"><b>unset</b> [-<b>fv</b>]\n[-<b>n</b>] [<i>name</i> ...]</p>\n\n<p style=\"margin-left:22%;\">For each <i>name</i>, remove\nthe corresponding variable or function. If the <b>-v</b>\noption is given, each <i>name</i> refers to a shell\nvariable, and that variable is removed. Read-only variables\nmay not be unset. If <b>-f</b> is specified, each\n<i>name</i> refers to a shell function, and the function\ndefinition is removed. If the <b>-n</b> option is supplied,\nand <i>name</i> is a variable with the <i>nameref</i>\nattribute, <i>name</i> will be unset rather than the\nvariable it references. <b>-n</b> has no effect if the\n<b>-f</b> option is supplied. If no options are supplied,\neach <i>name</i> refers to a variable; if there is no\nvariable by that name, a function with that name, if any, is\nunset. Each unset variable or function is removed from the\nenvironment passed to subsequent commands. If any of\n<b><small>BASH_ALIASES</small></b><small>,\n<b>BASH_ARGV0</b>, <b>BASH_CMDS</b>, <b>BASH_COMMAND</b>,\n<b>BASH_SUBSHELL</b>, <b>BASHPID</b>,\n<b>COMP_WORDBREAKS</b>, <b>DIRSTACK</b>,\n<b>EPOCHREALTIME</b>, <b>EPOCHSECONDS</b>, <b>FUNCNAME</b>,\n<b>GROUPS</b>, <b>HISTCMD</b>, <b>LINENO</b>, <b>RANDOM</b>,\n<b>SECONDS</b>,</small> or <b><small>SRANDOM</small></b> are\nunset, they lose their special properties, even if they are\nsubsequently reset. The exit status is true unless a\n<i>name</i> is readonly.</p>\n\n<p style=\"margin-left:11%;\"><b>wait</b> [<b>-fn</b>]\n[<b>-p</b> <i>varname</i>] [<i>id ...</i>]</p>\n\n<p style=\"margin-left:22%;\">Wait for each specified child\nprocess and return its termination status. Each <i>id</i>\nmay be a process ID or a job specification; if a job spec is\ngiven, all processes in that job&rsquo;s pipeline are waited\nfor. If <i>id</i> is not given, <b>wait</b> waits for all\nrunning background jobs and the last-executed process\nsubstitution, if its process id is the same as <b>$!</b>,\nand the return status is zero. If the <b>-n</b> option is\nsupplied, <b>wait</b> waits for a single job from the list\nof <i>id</i>s or, if no <i>id</i>s are supplied, any job, to\ncomplete and returns its exit status. If none of the\nsupplied arguments is a child of the shell, or if no\narguments are supplied and the shell has no unwaited-for\nchildren, the exit status is 127. If the <b>-p</b> option is\nsupplied, the process or job identifier of the job for which\nthe exit status is returned is assigned to the variable\n<i>varname</i> named by the option argument. The variable\nwill be unset initially, before any assignment. This is\nuseful only when the <b>-n</b> option is supplied. Supplying\nthe <b>-f</b> option, when job control is enabled, forces\n<b>wait</b> to wait for <i>id</i> to terminate before\nreturning its status, instead of returning when it changes\nstatus. If <i>id</i> specifies a non-existent process or\njob, the return status is 127. Otherwise, the return status\nis the exit status of the last process or job waited\nfor.</p>\n\n<h2>SHELL COMPATIBILITY MODE\n<a name=\"SHELL COMPATIBILITY MODE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bash-4.0\nintroduced the concept of a &rsquo;shell compatibility\nlevel&rsquo;, specified as a set of options to the shopt\nbuiltin <b>compat31</b>, <b>compat32</b>, <b>compat40</b>,\n<b>compat41</b>, and so on). There is only one current\ncompatibility level -- each option is mutually exclusive.\nThe compatibility level is intended to allow users to select\nbehavior from previous versions that is incompatible with\nnewer versions while they migrate scripts to use current\nfeatures and behavior. It&rsquo;s intended to be a temporary\nsolution.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This section\ndoes not mention behavior that is standard for a particular\nversion (e.g., setting <b>compat32</b> means that quoting\nthe rhs of the regexp matching operator quotes special\nregexp characters in the word, which is default behavior in\nbash-3.2 and above).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a user\nenables, say, <b>compat32</b>, it may affect the behavior of\nother compatibility levels up to and including the current\ncompatibility level. The idea is that each compatibility\nlevel controls behavior that changed in that version of\n<b>bash</b>, but that behavior may have been present in\nearlier versions. For instance, the change to use\nlocale-based comparisons with the <b>[[</b> command came in\nbash-4.1, and earlier versions used ASCII-based comparisons,\nso enabling <b>compat32</b> will enable ASCII-based\ncomparisons as well. That granularity may not be sufficient\nfor all uses, and as a result users should employ\ncompatibility levels carefully. Read the documentation for a\nparticular feature to find out the current behavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bash-4.3\nintroduced a new shell variable:\n<b><small>BASH_COMPAT</small></b><small>.</small> The value\nassigned to this variable (a decimal version number like\n4.2, or an integer corresponding to the\n<b>compat</b><i>NN</i> option, like 42) determines the\ncompatibility level.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Starting with\nbash-4.4, Bash has begun deprecating older compatibility\nlevels. Eventually, the options will be removed in favor of\n<b><small>BASH_COMPAT</small></b><small>.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bash-5.0 is the\nfinal version for which there will be an individual shopt\noption for the previous version. Users should use\n<b><small>BASH_COMPAT</small></b> on bash-5.0 and later\nversions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ntable describes the behavior changes controlled by each\ncompatibility level setting. The <b>compat</b><i>NN</i> tag\nis used as shorthand for setting the compatibility level to\n<i>NN</i> using one of the following mechanisms. For\nversions prior to bash-5.0, the compatibility level may be\nset using the corresponding <b>compat</b><i>NN</i> shopt\noption. For bash-4.3 and later versions, the\n<b><small>BASH_COMPAT</small></b> variable is preferred, and\nit is required for bash-5.1 and later versions. <b><br>\ncompat31</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>quoting the rhs of the <b>[[</b> command&rsquo;s regexp\nmatching operator (=~) has no special effect</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>compat32</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>interrupting a command list such as &quot;a ; b ;\nc&quot; causes the execution of the next command in the list\n(in bash-4.0 and later versions, the shell acts as if it\nreceived the interrupt, so interrupting one command in a\nlist aborts the execution of the entire list)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>compat40</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>the <b>&lt;</b> and <b>&gt;</b> operators to the\n<b>[[</b> command do not consider the current locale when\ncomparing strings; they use ASCII ordering. Bash versions\nprior to bash-4.1 use ASCII collation and <i>strcmp</i>(3);\nbash-4.1 and later use the current locale&rsquo;s collation\nsequence and <i>strcoll</i>(3).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>compat41</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>in <i>posix</i> mode, <b>time</b> may be followed by\noptions and still be recognized as a reserved word (this is\nPOSIX interpretation 267)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>in <i>posix</i> mode, the parser requires that an even\nnumber of single quotes occur in the <i>word</i> portion of\na double-quoted parameter expansion and treats them\nspecially, so that characters within the single quotes are\nconsidered quoted (this is POSIX interpretation 221)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>compat42</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>the replacement string in double-quoted pattern\nsubstitution does not undergo quote removal, as it does in\nversions after bash-4.2</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>in posix mode, single quotes are considered special when\nexpanding the <i>word</i> portion of a double-quoted\nparameter expansion and can be used to quote a closing brace\nor other special character (this is part of POSIX\ninterpretation 221); in later versions, single quotes are\nnot special within double-quoted word expansions</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>compat43</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>the shell does not print a warning message if an attempt\nis made to use a quoted compound assignment as an argument\nto declare (declare -a foo=&rsquo;(1 2)&rsquo;). Later\nversions warn that this usage is deprecated</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>word expansion errors are considered non-fatal errors\nthat cause the current command to fail, even in posix mode\n(the default behavior is to make them fatal errors that\ncause the shell to exit)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>when executing a shell function, the loop state\n(while/until/etc.) is not reset, so <b>break</b> or\n<b>continue</b> in that function will break or continue\nloops in the calling context. Bash-4.4 and later reset the\nloop state to prevent this</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>compat44</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>the shell sets up the values used by\n<b><small>BASH_ARGV</small></b> and\n<b><small>BASH_ARGC</small></b> so they can expand to the\nshell&rsquo;s positional parameters even if extended\ndebugging mode is not enabled</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>a subshell inherits loops from its parent context, so\n<b>break</b> or <b>continue</b> will cause the subshell to\nexit. Bash-5.0 and later reset the loop state to prevent the\nexit</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>variable assignments preceding builtins like\n<b>export</b> and <b>readonly</b> that set attributes\ncontinue to affect variables with the same name in the\ncalling environment even if the shell is not in posix\nmode</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>compat50</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>Bash-5.1 changed the way <b><small>$RANDOM</small></b>\nis generated to introduce slightly more randomness. If the\nshell compatibility level is set to 50 or lower, it reverts\nto the method from bash-5.0 and previous versions, so\nseeding the random number generator by assigning a value to\n<b><small>RANDOM</small></b> will produce the same sequence\nas in bash-5.0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>If the command hash table is empty, bash versions prior\nto bash-5.1 printed an informational message to that effect,\neven when producing output that can be reused as input.\nBash-5.1 suppresses that message when the <b>-l</b> option\nis supplied.</p></td></tr>\n</table>\n\n<h2>RESTRICTED SHELL\n<a name=\"RESTRICTED SHELL\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>bash</b>\nis started with the name <b>rbash</b>, or the <b>-r</b>\noption is supplied at invocation, the shell becomes\nrestricted. A restricted shell is used to set up an\nenvironment more controlled than the standard shell. It\nbehaves identically to <b>bash</b> with the exception that\nthe following are disallowed or not performed:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">changing directories with\n<b>cd</b></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>setting or unsetting the values of\n<b><small>SHELL</small></b><small>, <b>PATH</b>,\n<b>HISTFILE</b>, <b>ENV</b>,</small> or\n<b><small>BASH_ENV</small></b></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>specifying command names containing <b>/</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>specifying a filename containing a <b>/</b> as an\nargument to the <b>.</b> builtin command</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>specifying a filename containing a slash as an argument\nto the <b>history</b> builtin command</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>specifying a filename containing a slash as an argument\nto the <b>-p</b> option to the <b>hash</b> builtin\ncommand</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>importing function definitions from the shell\nenvironment at startup</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>parsing the value of <b><small>SHELLOPTS</small></b>\nfrom the shell environment at startup</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>redirecting output using the &gt;, &gt;|, &lt;&gt;,\n&gt;&amp;, &amp;&gt;, and &gt;&gt; redirection operators</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>using the <b>exec</b> builtin command to replace the\nshell with another command</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>adding or deleting builtin commands with the <b>-f</b>\nand <b>-d</b> options to the <b>enable</b> builtin\ncommand</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>using the <b>enable</b> builtin command to enable\ndisabled shell builtins</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>specifying the <b>-p</b> option to the <b>command</b>\nbuiltin command</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>turning off restricted mode with <b>set +r</b> or <b>set\n+o restricted</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These\nrestrictions are enforced after any startup files are\nread.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a command\nthat is found to be a shell script is executed (see\n<b><small>COMMAND EXECUTION</small></b> above), <b>rbash</b>\nturns off any restrictions in the shell spawned to execute\nthe script.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Bash\nReference Manual</i>, Brian Fox and Chet Ramey <i><br>\nThe Gnu Readline Library</i>, Brian Fox and Chet Ramey\n<i><br>\nThe Gnu History Library</i>, Brian Fox and Chet Ramey\n<i><br>\nPortable Operating System Interface (POSIX) Part 2: Shell\nand <br>\nUtilities</i>, IEEE --</p>\n\n\n<p style=\"margin-left:22%;\">http://pubs.opengroup.org/onlinepubs/9699919799/</p>\n\n\n<p style=\"margin-left:11%;\">http://tiswww.case.edu/~chet/bash/POSIX\n-- a description of posix mode <i><br>\nsh</i>(1), <i>ksh</i>(1), <i>csh</i>(1) <i><br>\nemacs</i>(1), <i>vi</i>(1) <i><br>\nreadline</i>(3)</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/bin/bash</i></p>\n\n<p style=\"margin-left:22%;\">The <b>bash</b> executable</p>\n\n<p style=\"margin-left:11%;\"><i>/etc/profile</i></p>\n\n<p style=\"margin-left:22%;\">The systemwide initialization\nfile, executed for login shells</p>\n\n<p style=\"margin-left:11%;\"><i>/etc/bash.bashrc</i></p>\n\n<p style=\"margin-left:22%;\">The systemwide\nper-interactive-shell startup file</p>\n\n\n<p style=\"margin-left:11%;\"><i>/etc/bash.bash.logout</i></p>\n\n<p style=\"margin-left:22%;\">The systemwide login shell\ncleanup file, executed when a login shell exits</p>\n\n<p style=\"margin-left:11%;\"><i>~/.bash_profile</i></p>\n\n<p style=\"margin-left:22%;\">The personal initialization\nfile, executed for login shells</p>\n\n<p style=\"margin-left:11%;\"><i>~/.bashrc</i></p>\n\n<p style=\"margin-left:22%;\">The individual\nper-interactive-shell startup file</p>\n\n<p style=\"margin-left:11%;\"><i>~/.bash_logout</i></p>\n\n<p style=\"margin-left:22%;\">The individual login shell\ncleanup file, executed when a login shell exits</p>\n\n<p style=\"margin-left:11%;\"><i>~/.inputrc</i></p>\n\n<p style=\"margin-left:22%;\">Individual <i>readline</i>\ninitialization file</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Brian Fox, Free\nSoftware Foundation <br>\nbfox@gnu.org</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Chet Ramey,\nCase Western Reserve University <br>\nchet.ramey@case.edu</p>\n\n<h2>BUG REPORTS\n<a name=\"BUG REPORTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you find a\nbug in <b>bash,</b> you should report it. But first, you\nshould make sure that it really is a bug, and that it\nappears in the latest version of <b>bash</b>. The latest\nversion is always available from\n<i>ftp://ftp.gnu.org/pub/gnu/bash/</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once you have\ndetermined that a bug actually exists, use the\n<i>bashbug</i> command to submit a bug report. If you have a\nfix, you are encouraged to mail that as well! Suggestions\nand &rsquo;philosophical&rsquo; bug reports may be mailed to\n<i>bug-bash@gnu.org</i> or posted to the Usenet newsgroup\n<b>gnu.bash.bug</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ALL bug reports\nshould include: <br>\nThe version number of <b>bash</b> <br>\nThe hardware and operating system <br>\nThe compiler used to compile <br>\nA description of the bug behaviour <br>\nA short script or &rsquo;recipe&rsquo; which exercises the\nbug</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>bashbug</i>\ninserts the first three items automatically into the\ntemplate it provides for filing a bug report.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Comments and\nbug reports concerning this manual page should be directed\nto <i>chet.ramey@case.edu</i>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">It&rsquo;s too\nbig and too slow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are some\nsubtle differences between <b>bash</b> and traditional\nversions of <b>sh</b>, mostly because of the\n<b><small>POSIX</small></b> specification.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Aliases are\nconfusing in some uses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Shell builtin\ncommands and functions are not stoppable/restartable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Compound\ncommands and command sequences of the form &rsquo;a ; b ;\nc&rsquo; are not handled gracefully when process suspension\nis attempted. When a process is stopped, the shell\nimmediately executes the next command in the sequence. It\nsuffices to place the sequence of commands between\nparentheses to force it into a subshell, which may be\nstopped as a unit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Array variables\nmay not (yet) be exported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There may be\nonly one active coprocess at a time.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#ARGUMENTS\">ARGUMENTS</a>","<a href=\"#INVOCATION\">INVOCATION</a>","<a href=\"#DEFINITIONS\">DEFINITIONS</a>","<a href=\"#RESERVED WORDS\">RESERVED WORDS</a>","<a href=\"#SHELL GRAMMAR\">SHELL GRAMMAR</a>","<a href=\"#COMMENTS\">COMMENTS</a>","<a href=\"#QUOTING\">QUOTING</a>","<a href=\"#PARAMETERS\">PARAMETERS</a>","<a href=\"#EXPANSION\">EXPANSION</a>","<a href=\"#REDIRECTION\">REDIRECTION</a>","<a href=\"#ALIASES\">ALIASES</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#ARITHMETIC EVALUATION\">ARITHMETIC EVALUATION</a>","<a href=\"#CONDITIONAL EXPRESSIONS\">CONDITIONAL EXPRESSIONS</a>","<a href=\"#SIMPLE COMMAND EXPANSION\">SIMPLE COMMAND EXPANSION</a>","<a href=\"#COMMAND EXECUTION\">COMMAND EXECUTION</a>","<a href=\"#COMMAND EXECUTION ENVIRONMENT\">COMMAND EXECUTION ENVIRONMENT</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#EXIT STATUS\">EXIT STATUS</a>","<a href=\"#SIGNALS\">SIGNALS</a>","<a href=\"#JOB CONTROL\">JOB CONTROL</a>","<a href=\"#PROMPTING\">PROMPTING</a>","<a href=\"#READLINE\">READLINE</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#HISTORY EXPANSION\">HISTORY EXPANSION</a>","<a href=\"#SHELL BUILTIN COMMANDS\">SHELL BUILTIN COMMANDS</a>","<a href=\"#SHELL COMPATIBILITY MODE\">SHELL COMPATIBILITY MODE</a>","<a href=\"#RESTRICTED SHELL\">RESTRICTED SHELL</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#BUG REPORTS\">BUG REPORTS</a>","<a href=\"#BUGS\">BUGS</a>"]}