{"name":"h2xs","body":"\n\n<h1 align=\"center\">H2XS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">h2xs - convert\n.h C header files to Perl extensions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>h2xs</b> [\n<b><small>OPTIONS</small></b> ...] [headerfile ...\n[extra_libraries]]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>h2xs\n-h</b>|<b>-?</b>|<b>--help</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>h2xs</i></b>\nbuilds a Perl extension from C header files. The extension\nwill include functions which can be used to retrieve the\nvalue of any #define statement which was in the C header\nfiles.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>module_name</i> will be used for the name of the\nextension. If module_name is not supplied then the name of\nthe first header file will be used, with the first character\ncapitalized.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nextension might need extra libraries, they should be\nincluded here. The extension Makefile.PL will take care of\nchecking whether the libraries actually exist and how they\nshould be loaded. The extra libraries should be specified in\nthe form -lm -lposix, etc, just as on the cc command line.\nBy default, the Makefile.PL will search through the library\npath determined by Configure. That path can be augmented by\nincluding arguments of the form\n<b>-L/another/library/path</b> in the extra-libraries\nargument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In spite of its\nname, <i>h2xs</i> may also be used to create a skeleton pure\nPerl module. See the <b>-X</b> option.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-A</b>,\n<b>--omit-autoload</b></p>\n\n<p style=\"margin-left:18%;\">Omit all autoload facilities.\nThis is the same as <b>-c</b> but also removes the\n&quot;use&Acirc;&nbsp;AutoLoader&quot; statement from the\n.pm file.</p>\n\n<p style=\"margin-left:11%;\"><b>-B</b>,\n<b>--beta-version</b></p>\n\n<p style=\"margin-left:18%;\">Use an alpha/beta style version\nnumber. Causes version number to be &quot;0.00_01&quot;\nunless <b>-v</b> is specified.</p>\n\n<p style=\"margin-left:11%;\"><b>-C</b>,\n<b>--omit-changes</b></p>\n\n<p style=\"margin-left:18%;\">Omits creation of the\n<i>Changes</i> file, and adds a <small>HISTORY</small>\nsection to the <small>POD</small> template.</p>\n\n<p style=\"margin-left:11%;\"><b>-F</b>,\n<b>--cpp-flags</b>=<i>addflags</i></p>\n\n<p style=\"margin-left:18%;\">Additional flags to specify to\nC preprocessor when scanning header for function\ndeclarations. Writes these options in the generated\n<i>Makefile.PL</i> too.</p>\n\n<p style=\"margin-left:11%;\"><b>-M</b>,\n<b>--func-mask</b>=<i>regular expression</i></p>\n\n<p style=\"margin-left:18%;\">selects functions/macros to\nprocess.</p>\n\n<p style=\"margin-left:11%;\"><b>-O</b>,\n<b>--overwrite-ok</b></p>\n\n<p style=\"margin-left:18%;\">Allows a pre-existing extension\ndirectory to be overwritten.</p>\n\n<p style=\"margin-left:11%;\"><b>-P</b>,\n<b>--omit-pod</b></p>\n\n<p style=\"margin-left:18%;\">Omit the autogenerated stub\n<small>POD</small> section.</p>\n\n<p style=\"margin-left:11%;\"><b>-X</b>, <b>--omit-XS</b></p>\n\n<p style=\"margin-left:18%;\">Omit the <small>XS</small>\nportion. Used to generate a skeleton pure Perl module.\n&quot;-c&quot; and &quot;-f&quot; are implicitly\nenabled.</p>\n\n<p style=\"margin-left:11%;\"><b>-a</b>,\n<b>--gen-accessors</b></p>\n\n<p style=\"margin-left:18%;\">Generate an accessor method for\neach element of structs and unions. The generated methods\nare named after the element name; will return the current\nvalue of the element if called without additional arguments;\nand will set the element to the supplied value (and return\nthe new value) if called with an additional argument.\nEmbedded structures and unions are returned as a pointer\nrather than the complete structure, to facilitate chained\ncalls.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">These methods\nall apply to the Ptr type for the structure; additionally\ntwo methods are constructed for the structure type itself,\n&quot;_to_ptr&quot; which returns a Ptr type pointing to the\nsame structure, and a &quot;new&quot; method to construct\nand return a new structure, initialised to zeroes.</p>\n\n<p style=\"margin-left:11%;\"><b>-b</b>,\n<b>--compat-version</b>=<i>version</i></p>\n\n<p style=\"margin-left:18%;\">Generates a .pm file which is\nbackwards compatible with the specified perl version.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">For versions\n&lt; 5.6.0, the changes are. <br>\n- no use of &rsquo;our&rsquo; (uses &rsquo;use vars&rsquo;\ninstead) <br>\n- no &rsquo;use warnings&rsquo;</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">Specifying a\ncompatibility version higher than the version of perl you\nare using to run h2xs will have no effect. If unspecified\nh2xs will default to compatibility with the version of perl\nyou are using to run h2xs.</p>\n\n<p style=\"margin-left:11%;\"><b>-c</b>,\n<b>--omit-constant</b></p>\n\n<p style=\"margin-left:18%;\">Omit &quot;constant()&quot;\nfrom the .xs file and corresponding specialised\n&quot;AUTOLOAD&quot; from the .pm file.</p>\n\n<p style=\"margin-left:11%;\"><b>-d</b>,\n<b>--debugging</b></p>\n\n<p style=\"margin-left:18%;\">Turn on debugging messages.</p>\n\n<p style=\"margin-left:11%;\"><b>-e</b>,\n<b>--omit-enums</b>=[<i>regular expression</i>]</p>\n\n<p style=\"margin-left:18%;\">If <i>regular expression</i> is\nnot given, skip all constants that are defined in a C\nenumeration. Otherwise skip only those constants that are\ndefined in an enum whose name matches <i>regular\nexpression</i>.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">Since\n<i>regular expression</i> is optional, make sure that this\nswitch is followed by at least one other switch if you omit\n<i>regular expression</i> and have some pending arguments\nsuch as header-file names. This is ok:</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">h2xs -e -n\nModule::Foo foo.h</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">This is not\nok:</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">h2xs -n\nModule::Foo -e foo.h</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">In the latter,\nfoo.h is taken as <i>regular expression</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>-f</b>, <b>--force</b></p>\n\n<p style=\"margin-left:18%;\">Allows an extension to be\ncreated for a header even if that header is not found in\nstandard include directories.</p>\n\n<p style=\"margin-left:11%;\"><b>-g</b>, <b>--global</b></p>\n\n<p style=\"margin-left:18%;\">Include code for safely storing\nstatic data in the .xs file. Extensions that do no make use\nof static data can ignore this option.</p>\n\n<p style=\"margin-left:11%;\"><b>-h</b>, <b>-?</b>,\n<b>--help</b></p>\n\n<p style=\"margin-left:18%;\">Print the usage, help and\nversion for this h2xs and exit.</p>\n\n<p style=\"margin-left:11%;\"><b>-k</b>,\n<b>--omit-const-func</b></p>\n\n<p style=\"margin-left:18%;\">For function arguments declared\nas &quot;const&quot;, omit the const attribute in the\ngenerated <small>XS</small> code.</p>\n\n<p style=\"margin-left:11%;\"><b>-m</b>,\n<b>--gen-tied-var</b></p>\n\n<p style=\"margin-left:18%;\"><b>Experimental</b>: for each\nvariable declared in the header file(s), declare a perl\nvariable of the same name magically tied to the C\nvariable.</p>\n\n<p style=\"margin-left:11%;\"><b>-n</b>,\n<b>--name</b>=<i>module_name</i></p>\n\n<p style=\"margin-left:18%;\">Specifies a name to be used for\nthe extension, e.g., -n&Acirc;&nbsp;RPC::DCE</p>\n\n<p style=\"margin-left:11%;\"><b>-o</b>,\n<b>--opaque-re</b>=<i>regular expression</i></p>\n\n<p style=\"margin-left:18%;\">Use &quot;opaque&quot; data\ntype for the C types matched by the regular expression, even\nif these types are &quot;typedef&quot;-equivalent to types\nfrom typemaps. Should not be used without <b>-x</b>.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">This may be\nuseful since, say, types which are\n&quot;typedef&quot;-equivalent to integers may represent\nOS-related handles, and one may want to work with these\nhandles in OO-way, as in\n&quot;$handle-&gt;do_something()&quot;. Use &quot;-o .&quot;\nif you want to handle all the &quot;typedef&quot;ed types as\nopaque types.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">The\ntype-to-match is whitewashed (except for commas, which have\nno whitespace before them, and multiple &quot;*&quot; which\nhave no whitespace between them).</p>\n\n<p style=\"margin-left:11%;\"><b>-p</b>,\n<b>--remove-prefix</b>=<i>prefix</i></p>\n\n<p style=\"margin-left:18%;\">Specify a prefix which should\nbe removed from the Perl function names, e.g.,\n-p&Acirc;&nbsp;sec_rgy_ This sets up the <small>XS\n<b>PREFIX</b></small> keyword and removes the prefix from\nfunctions that are autoloaded via the &quot;constant()&quot;\nmechanism.</p>\n\n<p style=\"margin-left:11%;\"><b>-s</b>,\n<b>--const-subs</b>=<i>sub1,sub2</i></p>\n\n<p style=\"margin-left:18%;\">Create a perl subroutine for\nthe specified macros rather than autoload with the\n<b>constant()</b> subroutine. These macros are assumed to\nhave a return type of <b>char *</b>, e.g.,\n-s&Acirc;&nbsp;sec_rgy_wildcard_name,sec_rgy_wildcard_sid.</p>\n\n<p style=\"margin-left:11%;\"><b>-t</b>,\n<b>--default-type</b>=<i>type</i></p>\n\n<p style=\"margin-left:18%;\">Specify the internal type that\nthe <b>constant()</b> mechanism uses for macros. The default\nis <small>IV</small> (signed integer). Currently all macros\nfound during the header scanning process will be assumed to\nhave this type. Future versions of &quot;h2xs&quot; may gain\nthe ability to make educated guesses.</p>\n\n<p style=\"margin-left:11%;\"><b>--use-new-tests</b></p>\n\n<p style=\"margin-left:18%;\">When <b>--compat-version</b>\n(<b>-b</b>) is present the generated tests will use\n&quot;Test::More&quot; rather than &quot;Test&quot; which is\nthe default for versions before 5.6.2.\n&quot;Test::More&quot; will be added to\n<small>PREREQ_PM</small> in the generated\n&quot;Makefile.PL&quot;.</p>\n\n<p style=\"margin-left:11%;\"><b>--use-old-tests</b></p>\n\n<p style=\"margin-left:18%;\">Will force the generation of\ntest code that uses the older &quot;Test&quot; module.</p>\n\n<p style=\"margin-left:11%;\"><b>--skip-exporter</b></p>\n\n<p style=\"margin-left:18%;\">Do not use &quot;Exporter&quot;\nand/or export any symbol.</p>\n\n<p style=\"margin-left:11%;\"><b>--skip-ppport</b></p>\n\n<p style=\"margin-left:18%;\">Do not use\n&quot;Devel::PPPort&quot;: no portability to older\nversion.</p>\n\n<p style=\"margin-left:11%;\"><b>--skip-autoloader</b></p>\n\n<p style=\"margin-left:18%;\">Do not use the module\n&quot;AutoLoader&quot;; but keep the <b>constant()</b>\nfunction and &quot;sub AUTOLOAD&quot; for constants.</p>\n\n<p style=\"margin-left:11%;\"><b>--skip-strict</b></p>\n\n<p style=\"margin-left:18%;\">Do not use the pragma\n&quot;strict&quot;.</p>\n\n<p style=\"margin-left:11%;\"><b>--skip-warnings</b></p>\n\n<p style=\"margin-left:18%;\">Do not use the pragma\n&quot;warnings&quot;.</p>\n\n<p style=\"margin-left:11%;\"><b>-v</b>,\n<b>--version</b>=<i>version</i></p>\n\n<p style=\"margin-left:18%;\">Specify a version number for\nthis extension. This version number is added to the\ntemplates. The default is 0.01, or 0.00_01 if &quot;-B&quot;\nis specified. The version specified should be numeric.</p>\n\n<p style=\"margin-left:11%;\"><b>-x</b>,\n<b>--autogen-xsubs</b></p>\n\n<p style=\"margin-left:18%;\">Automatically generate XSUBs\nbasing on function declarations in the header file. The\npackage &quot;C::Scan&quot; should be installed. If this\noption is specified, the name of the header file may look\nlike &quot;NAME1,NAME2&quot;. In this case\n<small>NAME1</small> is used instead of the specified\nstring, but XSUBs are emitted only for the declarations\nincluded from file <small>NAME2.</small></p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">Note that some\ntypes of arguments/return-values for functions may result in\nXSUB-declarations/typemap-entries which need hand-editing.\nSuch may be objects which cannot be converted from/to a\npointer (like &quot;long long&quot;), pointers to functions,\nor arrays. See also the section on &quot;\n<small>LIMITATIONS</small> of <b>-x</b>&quot;.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"># Default\nbehavior, extension is Rusers <br>\nh2xs rpcsvc/rusers <br>\n# Same, but extension is RUSERS <br>\nh2xs -n RUSERS rpcsvc/rusers <br>\n# Extension is rpcsvc::rusers. Still finds\n&lt;rpcsvc/rusers.h&gt; <br>\nh2xs rpcsvc::rusers <br>\n# Extension is ONC::RPC. Still finds &lt;rpcsvc/rusers.h&gt;\n<br>\nh2xs -n ONC::RPC rpcsvc/rusers <br>\n# Without constant() or AUTOLOAD <br>\nh2xs -c rpcsvc/rusers <br>\n# Creates templates for an extension named RPC <br>\nh2xs -cfn RPC <br>\n# Extension is ONC::RPC. <br>\nh2xs -cfn ONC::RPC <br>\n# Extension is a pure Perl module with no XS code. <br>\nh2xs -X My::Module <br>\n# Extension is Lib::Foo which works at least with\nPerl5.005_03. <br>\n# Constants are created for all #defines and enums h2xs can\nfind <br>\n# in foo.h. <br>\nh2xs -b 5.5.3 -n Lib::Foo foo.h <br>\n# Extension is Lib::Foo which works at least with\nPerl5.005_03. <br>\n# Constants are created for all #defines but only for enums\n<br>\n# whose names do not start with 'bar_'. <br>\nh2xs -b 5.5.3 -e '^bar_' -n Lib::Foo foo.h <br>\n# Makefile.PL will look for library -lrpc in <br>\n# additional directory /opt/net/lib <br>\nh2xs rpcsvc/rusers -L/opt/net/lib -lrpc <br>\n# Extension is DCE::rgynbase <br>\n# prefix &quot;sec_rgy_&quot; is dropped from perl function\nnames <br>\nh2xs -n DCE::rgynbase -p sec_rgy_ dce/rgynbase <br>\n# Extension is DCE::rgynbase <br>\n# prefix &quot;sec_rgy_&quot; is dropped from perl function\nnames <br>\n# subroutines are created for sec_rgy_wildcard_name and <br>\n# sec_rgy_wildcard_sid <br>\nh2xs -n DCE::rgynbase -p sec_rgy_ \\ <br>\n-s sec_rgy_wildcard_name,sec_rgy_wildcard_sid dce/rgynbase\n<br>\n# Make XS without defines in perl.h, but with function\ndeclarations <br>\n# visible from perl.h. Name of the extension is perl1. <br>\n# When scanning perl.h, define -DEXT=extern -DdEXT=\n-DINIT(x)= <br>\n# Extra backslashes below because the string is passed to\nshell. <br>\n# Note that a directory with perl header files would <br>\n# be added automatically to include path. <br>\nh2xs -xAn perl1 -F &quot;-DEXT=extern -DdEXT=\n-DINIT\\(x\\)=&quot; perl.h <br>\n# Same with function declaration in proto.h as visible from\nperl.h. <br>\nh2xs -xAn perl2 perl.h,proto.h <br>\n# Same but select only functions which match /^av_/ <br>\nh2xs -M '^av_' -xAn perl2 perl.h,proto.h <br>\n# Same but treat SV* etc as &quot;opaque&quot; types <br>\nh2xs -o '^[S]V \\*$' -M '^av_' -xAn perl2 perl.h,proto.h</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Extension\nbased on</b> <i>.h</i> <b>and</b> <i>.c</i> <b>files</b>\n<br>\nSuppose that you have some C files implementing some\nfunctionality, and the corresponding header files. How to\ncreate an extension which makes this functionality\naccessible in Perl? The example below assumes that the\nheader files are <i>interface_simple.h</i> and\n<i>interface_hairy.h</i>, and you want the perl module be\nnamed as &quot;Ext::Ension&quot;. If you need some\npreprocessor directives and/or linking with external\nlibraries, see the flags &quot;-F&quot;, &quot;-L&quot; and\n&quot;-l&quot; in &quot; <small>OPTIONS&quot;</small> . <br>\nFind the directory name</p>\n\n<p style=\"margin-left:17%;\">Start with a dummy run of\nh2xs:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">h2xs -Afn\nExt::Ension</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The only\npurpose of this step is to create the needed directories,\nand let you know the names of these directories. From the\noutput you can see that the directory for the extension is\n<i>Ext/Ension</i>.</p>\n\n<p style=\"margin-left:11%;\">Copy C files</p>\n\n<p style=\"margin-left:17%;\">Copy your header files and C\nfiles to this directory <i>Ext/Ension</i>.</p>\n\n<p style=\"margin-left:11%;\">Create the extension</p>\n\n<p style=\"margin-left:17%;\">Run h2xs, overwriting older\nautogenerated files:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">h2xs -Oxan\nExt::Ension interface_simple.h interface_hairy.h</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">h2xs looks for\nheader files <i>after</i> changing to the extension\ndirectory, so it will find your header files\n<small>OK.</small></p>\n\n<p style=\"margin-left:11%;\">Archive and test</p>\n\n<p style=\"margin-left:17%;\">As usual, run</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">cd Ext/Ension\n<br>\nperl Makefile.PL <br>\nmake dist <br>\nmake <br>\nmake test</p>\n\n<p style=\"margin-left:11%;\">Hints</p>\n\n<p style=\"margin-left:17%;\">It is important to do\n&quot;make dist&quot; as early as possible. This way you can\neasily <a href=\"https://man.page/1/merge\">merge(1)</a> your changes to autogenerated files\nif you decide to edit your &quot;.h&quot; files and rerun\nh2xs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Do not forget\nto edit the documentation in the generated <i>.pm</i>\nfile.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Consider the\nautogenerated files as skeletons only, you may invent better\ninterfaces than what h2xs could guess.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Consider this\nsection as a guideline only, some other options of h2xs may\nbetter suit your needs.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">No environment\nvariables are used.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Larry Wall and\nothers</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl,\nperlxstut, ExtUtils::MakeMaker, and AutoLoader.</p>\n\n<h2>DIAGNOSTICS\n<a name=\"DIAGNOSTICS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The usual\nwarnings if it cannot read or write the files involved.</p>\n\n<h2>LIMITATIONS of -x\n<a name=\"LIMITATIONS of -x\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>h2xs</i>\nwould not distinguish whether an argument to a C function\nwhich is of the form, say, &quot;int *&quot;, is an input,\noutput, or input/output parameter. In particular, argument\ndeclarations of the form</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nfoo(n) <br>\nint *n</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">should be\nbetter rewritten as</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nfoo(n) <br>\nint &amp;n</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n&quot;n&quot; is an input parameter.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additionally,\n<i>h2xs</i> has no facilities to intuit that a function</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nfoo(addr,l) <br>\nchar *addr <br>\nint l</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">takes a pair of\naddress and length of data at this address, so it is better\nto rewrite this function as</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nfoo(sv) <br>\nSV *addr <br>\nPREINIT: <br>\nSTRLEN len; <br>\nchar *s; <br>\nCODE: <br>\ns = SvPV(sv,len); <br>\nRETVAL = foo(s, len); <br>\nOUTPUT: <br>\nRETVAL</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">or\nalternately</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int <br>\nmy_foo(SV *sv) <br>\n{ <br>\nSTRLEN len; <br>\nchar *s = SvPV(sv,len); <br>\nreturn foo(s, len); <br>\n} <br>\nMODULE = foo PACKAGE = foo PREFIX = my_ <br>\nint <br>\nfoo(sv) <br>\nSV *sv</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See perlxs and\nperlxstut for additional details.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#DIAGNOSTICS\">DIAGNOSTICS</a>","<a href=\"#LIMITATIONS of -x\">LIMITATIONS of -x</a>"]}