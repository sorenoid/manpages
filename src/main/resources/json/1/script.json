{"name":"script","body":"\n\n<h1 align=\"center\">SCRIPT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">script - make\ntypescript of terminal session</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>script</b>\n[options] [<i>file</i>]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>script</b>\nmakes a typescript of everything on your terminal session.\nThe terminal data are stored in raw form to the log file and\ninformation about timing to another (optional) structured\nlog file. The timing log file is necessary to replay the\nsession later by <a href=\"https://man.page/1/scriptreplay\">scriptreplay(1)</a> and to store\nadditional information about the session.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since version\n2.35, <b>script</b> supports multiple streams and allows the\nlogging of input and output to separate files or all the one\nfile. This version also supports new timing file which\nrecords additional information. The command <b>scriptreplay\n--summary</b> then provides all the information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the argument\n<i>file</i> or option <b>--log-out</b> <i>file</i> is given,\n<b>script</b> saves the dialogue in this <i>file</i>. If no\nfilename is given, the dialogue is saved in the file\n<i>typescript</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nlogging input using <b>--log-in</b> or <b>--log-io</b> may\nrecord security-sensitive information as the log file\ncontains all terminal session input (e.g., passwords)\nindependently of the terminal echo flag setting.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Below, the\n<i>size</i> argument may be followed by the multiplicative\nsuffixes KiB (=1024), MiB (=1024*1024), and so on for GiB,\nTiB, PiB, EiB, ZiB and YiB (the &quot;iB&quot; is optional,\ne.g., &quot;K&quot; has the same meaning as\n&quot;KiB&quot;), or the suffixes KB (=1000), MB\n(=1000*1000), and so on for GB, TB, PB, EB, ZB and YB.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-a</b>,\n<b>--append</b></p>\n\n<p style=\"margin-left:17%;\">Append the output to\n<i>file</i> or to <i>typescript</i>, retaining the prior\ncontents.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-c</b>,\n<b>--command</b> <i>command</i></p>\n\n<p style=\"margin-left:17%;\">Run the <i>command</i> rather\nthan an interactive shell. This makes it easy for a script\nto capture the output of a program that behaves differently\nwhen its stdout is not a tty.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-E</b>,\n<b>--echo</b> <i>when</i></p>\n\n<p style=\"margin-left:17%;\">This option controls the\n<b>ECHO</b> flag for the slave end of the session&rsquo;s\npseudoterminal. The supported modes are <i>always</i>,\n<i>never</i>, or <i>auto</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default is\n<i>auto</i> &mdash; in this case, <b>ECHO</b> enabled for\nthe pseudoterminal slave; if the current standard input is a\nterminal, <b>ECHO</b> is disabled for it to prevent double\necho; if the current standard input is not a terminal (for\nexample pipe: <b>echo date | script</b>) then keeping\n<b>ECHO</b> enabled for the pseudoterminal slave enables the\nstandard input data to be viewed on screen while being\nrecorded to session log simultaneously.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\n'never' mode affects content of the session output log,\nbecause users input is not repeated on output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-e</b>,\n<b>--return</b></p>\n\n<p style=\"margin-left:17%;\">Return the exit status of the\nchild process. Uses the same format as bash termination on\nsignal termination (i.e., exit status is 128 + the signal\nnumber). The exit status of the child process is always\nstored in the type script file too.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-f</b>,\n<b>--flush</b></p>\n\n<p style=\"margin-left:17%;\">Flush output after each write.\nThis is nice for telecooperation: one person does <b>mkfifo\nfoo; script -f foo</b>, and another can supervise in\nreal-time what is being done using <b>cat foo</b>. Note that\nflush has an impact on performance; it&rsquo;s possible to\nuse <b>SIGUSR1</b> to flush logs on demand.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--force</b></p>\n\n<p style=\"margin-left:17%;\">Allow the default output file\n<i>typescript</i> to be a hard or symbolic link. The command\nwill follow a symbolic link.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-B</b>,\n<b>--log-io</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">Log input and output to the\nsame <i>file</i>. Note, this option makes sense only if\n<b>--log-timing</b> is also specified, otherwise it&rsquo;s\nimpossible to separate output and input streams from the log\n<i>file</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-I</b>,\n<b>--log-in</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">Log input to the <i>file</i>.\nThe log output is disabled if only <b>--log-in</b>\nspecified.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Use this\nlogging functionality carefully as it logs all input,\nincluding input when terminal has disabled echo flag (for\nexample, password inputs).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-O</b>,\n<b>--log-out</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">Log output to the <i>file</i>.\nThe default is to log output to the file with name\n<i>typescript</i> if the option <b>--log-out</b> or\n<b>--log-in</b> is not given. The log output is disabled if\nonly <b>--log-in</b> specified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-T</b>,\n<b>--log-timing</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">Log timing information to the\n<i>file</i>. Two timing file formats are supported now. The\nclassic format is used when only one stream (input or\noutput) logging is enabled. The multi-stream format is used\non <b>--log-io</b> or when <b>--log-in</b> and\n<b>--log-out</b> are used together. See also\n<b>--logging-format</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-m</b>,\n<b>--logging-format</b> <i>format</i></p>\n\n<p style=\"margin-left:17%;\">Force use of <i>advanced</i> or\n<i>classic</i> format. The default is the classic format to\nlog only output and the advanced format when input as well\nas output logging is requested.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Classic\nformat</b></p>\n\n<p style=\"margin-left:23%;\">The log contains two fields,\nseparated by a space. The first field indicates how much\ntime elapsed since the previous output. The second field\nindicates how many characters were output this time.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Advanced\n(multi-stream) format</b></p>\n\n<p style=\"margin-left:23%;\">The first field is an entry\ntype identifier ('I&rsquo;nput, 'O&rsquo;utput,\n'H&rsquo;eader, 'S&rsquo;ignal). The socond field is how\nmuch time elapsed since the previous entry, and the rest of\nthe entry is type-specific data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-o</b>,\n<b>--output-limit</b> <i>size</i></p>\n\n<p style=\"margin-left:17%;\">Limit the size of the\ntypescript and timing files to <i>size</i> and stop the\nchild process after this size is exceeded. The calculated\nfile size does not include the start and done messages that\nthe <b>script</b> command prepends and appends to the child\nprocess output. Due to buffering, the resulting output file\nmight be larger than the specified value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-q</b>,\n<b>--quiet</b></p>\n\n<p style=\"margin-left:17%;\">Be quiet (do not write start\nand done messages to standard output).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-t</b>[<i>file</i>],\n<b>--timing</b>[=<i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Output timing data to standard\nerror, or to <i>file</i> when given. This option is\ndeprecated in favour of <b>--log-timing</b> where the\n<i>file</i> argument is not optional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-V</b>,\n<b>--version</b></p>\n\n<p style=\"margin-left:17%;\">Display version information and\nexit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-h</b>,\n<b>--help</b></p>\n\n<p style=\"margin-left:17%;\">Display help text and exit.</p>\n\n<h2>SIGNALS\n<a name=\"SIGNALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Upon receiving\n<b>SIGUSR1</b>, <b>script</b> immediately flushes the output\nfiles.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nenvironment variable is utilized by <b>script</b>:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SHELL</b></p>\n\n<p style=\"margin-left:17%;\">If the variable <b>SHELL</b>\nexists, the shell forked by <b>script</b> will be that\nshell. If <b>SHELL</b> is not set, the Bourne shell is\nassumed. (Most shells set this variable automatically).</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The script ends\nwhen the forked shell exits (a <i>control-D</i> for the\nBourne shell (<b>sh</b>(1p)), and <i>exit</i>, <i>logout</i>\nor <i>control-d</i> (if <i>ignoreeof</i> is not set) for the\nC-shell, <a href=\"https://man.page/1/csh\">csh(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Certain\ninteractive commands, such as <a href=\"https://man.page/1/vi\">vi(1)</a>, create garbage\nin the typescript file. <b>script</b> works best with\ncommands that do not manipulate the screen, the results are\nmeant to emulate a hardcopy terminal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is not\nrecommended to run <b>script</b> in non-interactive shells.\nThe inner shell of <b>script</b> is always interactive, and\nthis could lead to unexpected results. If you use\n<b>script</b> in the shell initialization file, you have to\navoid entering an infinite loop. You can use for example the\n<b>.profile</b> file, which is read by login shells\nonly:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if test -t 0 ;\nthen <br>\nscript <br>\nexit <br>\nfi</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You should also\navoid use of <b>script</b> in command pipes, as\n<b>script</b> can read more input than you would expect.</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>script</b> command appeared in 3.0BSD.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>script</b>\nplaces <i>everything</i> in the log file, including\nlinefeeds and backspaces. This is not what the naive user\nexpects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>script</b>\nis primarily designed for interactive terminal sessions.\nWhen stdin is not a terminal (for example: <b>echo foo |\nscript</b>), then the session can hang, because the\ninteractive shell within the script session misses EOF and\n<b>script</b> has no clue when to close the session. See the\n<b>NOTES</b> section for more information.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/csh\">csh(1)</a>\n(for the <i>history</i> mechanism), <a href=\"https://man.page/1/scriptreplay\">scriptreplay(1)</a>,\n<a href=\"https://man.page/1/scriptlive\">scriptlive(1)</a></p>\n\n<h2>REPORTING BUGS\n<a name=\"REPORTING BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For bug\nreports, use the issue tracker at\n&lt;https://github.com/karelzak/util-linux/issues&gt;.</p>\n\n<h2>AVAILABILITY\n<a name=\"AVAILABILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>script</b> command is part of the util-linux package\nwhich can be downloaded from <i>Linux Kernel Archive</i>\n&lt;https://www.kernel.org/pub/linux/utils/util-linux/&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SIGNALS\">SIGNALS</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#REPORTING BUGS\">REPORTING BUGS</a>","<a href=\"#AVAILABILITY\">AVAILABILITY</a>"]}