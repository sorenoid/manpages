{"name":"gitweb","description":"gitweb - Git\nweb interface (web frontend to Git repositories)","body":"\n\n<h1 align=\"center\">GITWEB</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitweb - Git\nweb interface (web frontend to Git repositories)</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To get started\nwith gitweb, run <a href=\"https://man.page/1/git-instaweb\">git-instaweb(1)</a> from a Git\nrepository. This would configure and start your web server,\nand run web browser pointing to gitweb.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gitweb provides\na web interface to Git repositories. Its features\ninclude:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Viewing\nmultiple Git repositories with common root.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Browsing\nevery revision of the repository.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Viewing\nthe contents of files in the repository at any revision.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Viewing\nthe revision log of branches, history of files and\ndirectories, see what was changed when, by who.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Viewing\nthe blame/annotation details of any file (if enabled).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nGenerating RSS and Atom feeds of commits, for any branch.\nThe feeds are auto-discoverable in modern web browsers.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Viewing\neverything that was changed in a revision, and step through\nrevisions one at a time, viewing the history of the\nrepository.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Finding\ncommits which commit messages matches given search term.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<b><font color=\"#0000FF\">http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/</font></b>\n<font color=\"#000000\">for gitweb source code, browsed using\ngitweb itself.</font></p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Various\naspects of gitweb&rsquo;s behavior can be controlled through\nthe configuration file <b>gitweb_config.perl</b> or\n<b>/etc/gitweb.conf</b>. See the <b>gitweb.conf</b>(5) for\ndetails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Repositories</b>\n<br>\nGitweb can show information from one or more Git\nrepositories. These repositories have to be all on local\nfilesystem, and have to share common repository root, i.e.\nbe all under a single parent repository (but see also\n&quot;Advanced web server setup&quot; section,\n&quot;Webserver configuration with multiple projects'\nroot&quot; subsection).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">our\n$projectroot = '/path/to/parent/directory';</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ndefault value for <b>$projectroot</b> is <b>/pub/git</b>.\nYou can change it during building gitweb via\n<b>GITWEB_PROJECTROOT</b> build configuration\nvariable.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">By\ndefault all Git repositories under <b>$projectroot</b> are\nvisible and available to gitweb. The list of projects is\ngenerated by default by scanning the <b>$projectroot</b>\ndirectory for Git repositories (for object databases to be\nmore exact; gitweb is not interested in a working area, and\nis best suited to showing &quot;bare&quot;\nrepositories).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nname of the repository in gitweb is the path to its\n<b>$GIT_DIR</b> (its object database) relative to\n<b>$projectroot</b>. Therefore the repository $repo can be\nfound at &quot;$projectroot/$repo&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Projects\nlist file format</b> <br>\nInstead of having gitweb find repositories by scanning\nfilesystem starting from $projectroot, you can provide a\npre-generated list of visible projects by setting\n<b>$projects_list</b> to point to a plain text file with a\nlist of projects (with some additional info).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nfile uses the following format:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nOne record (for project / repository) per line; does not\nsupport line continuation (newline escaping).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nLeading and trailing whitespace are ignored.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nWhitespace separated fields; any run of whitespace can be\nused as field separator (rules for Perl&rsquo;s\n&quot;<b>split(&quot; &quot;, $line)</b>&quot;).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nFields use modified URI encoding, defined in RFC 3986,\nsection 2.1 (Percent-Encoding), or rather &quot;Query string\nencoding&quot; (see</font>\n<b><font color=\"#0000FF\">https://en.wikipedia.org/wiki/Query_string#URL_encoding</font></b><font color=\"#000000\">),\nthe difference being that SP (&quot; &quot;) can be encoded\nas &quot;+&quot; (and therefore &quot;+&quot; has to be also\npercent-encoded).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Reserved\ncharacters are: &quot;%&quot; (used for encoding),\n&quot;+&quot; (can be used to encode SPACE), all whitespace\ncharacters as defined in Perl, including SP, TAB and LF,\n(used to separate fields in a record).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nCurrently recognized fields are:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;repository\npath&gt;</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">path to\nrepository GIT_DIR, relative to\n<b>$projectroot</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;repository\nowner&gt;</font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">displayed\nas repository owner, preferably full name, or email, or\nboth</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan generate the projects list index file using the\nproject_index action (the <i>TXT</i> link on projects list\npage) directly from gitweb; see also &quot;Generating\nprojects list using gitweb&quot; section below.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example\ncontents:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">foo.git\nJoe+R+Hacker+&lt;joe@example.com&gt; <br>\nfoo/bar.git O+W+Ner+&lt;owner@example.org&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">By\ndefault this file controls only which projects are\n<b>visible</b> on projects list page (note that entries that\ndo not point to correctly recognized Git repositories\nwon&rsquo;t be displayed by gitweb). Even if a project is\nnot visible on projects list page, you can view it\nnevertheless by hand-crafting a gitweb URL. By setting\n<b>$strict_export</b> configuration variable (see\n<b>gitweb.conf</b>(5)) to true value you can allow viewing\nonly of repositories also shown on the overview page (i.e.\nonly projects explicitly listed in projects list file will\nbe accessible).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Generating\nprojects list using gitweb</b> <br>\nWe assume that GITWEB_CONFIG has its default Makefile value,\nnamely <i>gitweb_config.perl</i>. Put the following in\n<i>gitweb_make_index.perl</i> file:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">read_config_file(&quot;gitweb_config.perl&quot;);\n<br>\n$projects_list = $projectroot;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Then\ncreate the following script to get list of project in the\nformat suitable for GITWEB_LIST build configuration variable\n(or <b>$projects_list</b> variable in gitweb\nconfig):</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#!/bin/sh</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">export\nGITWEB_CONFIG=&quot;gitweb_make_index.perl&quot; <br>\nexport GATEWAY_INTERFACE=&quot;CGI/1.1&quot; <br>\nexport HTTP_ACCEPT=&quot;*/*&quot; <br>\nexport REQUEST_METHOD=&quot;GET&quot; <br>\nexport QUERY_STRING=&quot;a=project_index&quot;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">perl\n-- /var/www/cgi-bin/gitweb.cgi</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Run\nthis script and save its output to a file. This file could\nthen be used as projects list file, which means that you can\nset <b>$projects_list</b> to its filename.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Controlling\naccess to Git repositories</b> <br>\nBy default all Git repositories under <b>$projectroot</b>\nare visible and available to gitweb. You can however\nconfigure how gitweb controls access to\nrepositories.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nAs described in &quot;Projects list file format&quot;\nsection, you can control which projects are <b>visible</b>\nby selectively including repositories in projects list file,\nand setting <b>$projects_list</b> gitweb configuration\nvariable to point to it. With <b>$strict_export</b> set,\nprojects list file can be used to control which repositories\nare <b>available</b> as well.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nYou can configure gitweb to only list and allow viewing of\nthe explicitly exported repositories, via <b>$export_ok</b>\nvariable in gitweb config file; see <b>gitweb.conf</b>(5)\nmanpage. If it evaluates to true, gitweb shows repositories\nonly if this file named by <b>$export_ok</b> exists in its\nobject database (if directory has the magic file named\n<b>$export_ok</b>).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">For\nexample <a href=\"https://man.page/1/git-daemon\">git-daemon(1)</a> by default (unless\n<b>--export-all</b> option is used) allows pulling only for\nthose repositories that have <i>git-daemon-export-ok</i>\nfile. Adding</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">our\n$export_ok = &quot;git-daemon-export-ok&quot;;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">makes\ngitweb show and allow access only to those repositories that\ncan be fetched from via <b>git://</b> protocol.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nFinally, it is possible to specify an arbitrary perl\nsubroutine that will be called for each repository to\ndetermine if it can be exported. The subroutine receives an\nabsolute path to the project (repository) as its only\nparameter (i.e.\n&quot;$projectroot/$project&quot;).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">For\nexample, if you use mod_perl to run the script, and have\ndumb HTTP protocol authentication configured for your\nrepositories, you can use the following hook to allow access\nonly if the user is authorized to read the files:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$export_auth_hook\n= sub { <br>\nuse Apache2::SubRequest (); <br>\nuse Apache2::Const -compile =&gt; qw(HTTP_OK); <br>\nmy $path = &quot;$_[0]/HEAD&quot;; <br>\nmy $r = Apache2::RequestUtil-&gt;request; <br>\nmy $sub = $r-&gt;lookup_file($path); <br>\nreturn $sub-&gt;filename eq $path <br>\n&amp;&amp; $sub-&gt;status == Apache2::Const::HTTP_OK; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Per-repository\ngitweb configuration</b> <br>\nYou can configure individual repositories shown in gitweb by\ncreating file in the <b>GIT_DIR</b> of Git repository, or by\nsetting some repo configuration variable (in\n<b>GIT_DIR/config</b>, see <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan use the following files in repository:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">README.html</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A html\nfile (HTML fragment) which is included on the gitweb project\n&quot;summary&quot; page inside <b>&lt;div&gt;</b> block\nelement. You can use it for longer description of a project,\nto provide links (for example to project&rsquo;s homepage),\netc. This is recognized only if XSS prevention is off\n(<b>$prevent_xss</b> is false, see <b>gitweb.conf</b>(5)); a\nway to include a README safely when XSS prevention is on may\nbe worked out in the future.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">description\n(or <b>gitweb.description</b>)</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Short\n(shortened to <b>$projects_list_description_width</b> in the\nprojects list page, which is 25 characters by default; see\n<b>gitweb.conf</b>(5)) single line description of a project\n(of a repository). Plain text file; HTML will be escaped. By\ndefault set to</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">Unnamed\nrepository; edit this file to name it for gitweb.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">from\nthe template during repository creation, usually installed\nin <b>/usr/share/git-core/templates/</b>. You can use the\n<b>gitweb.description</b> repo configuration variable, but\nthe file takes precedence.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">category\n(or <b>gitweb.category</b>)</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Singe\nline category of a project, used to group projects if\n<b>$projects_list_group_categories</b> is enabled. By\ndefault (file and configuration variable absent),\nuncategorized projects are put in the\n<b>$project_list_default_category</b> category. You can use\nthe <b>gitweb.category</b> repo configuration variable, but\nthe file takes precedence.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nconfiguration variables\n<b>$projects_list_group_categories</b> and\n<b>$project_list_default_category</b> are described in\n<b>gitweb.conf</b>(5)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">cloneurl\n(or multiple-valued <b>gitweb.url</b>)</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">File with\nrepository URL (used for clone and fetch), one per line.\nDisplayed in the project summary page. You can use\nmultiple-valued <b>gitweb.url</b> repository configuration\nvariable for that, but the file takes precedence.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nis per-repository enhancement / version of global\nprefix-based <b>@git_base_url_list</b> gitweb configuration\nvariable (see <b>gitweb.conf</b>(5)).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">gitweb.owner</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">You can\nuse the <b>gitweb.owner</b> repository configuration\nvariable to set repository&rsquo;s owner. It is displayed in\nthe project list and summary page.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nit&rsquo;s not set, filesystem directory&rsquo;s owner is\nused (via GECOS field, i.e. real name field from\n<a href=\"https://man.page/3/getpwuid\">getpwuid(3)</a>) if <b>$projects_list</b> is unset\n(gitweb scans <b>$projectroot</b> for repositories); if\n<b>$projects_list</b> points to file with list of\nrepositories, then project owner defaults to value from this\nfile for given repository.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">various\n<b>gitweb.*</b> config variables (in config)</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Read\ndescription of <b>%feature</b> hash for detailed list, and\ndescriptions. See also &quot;Configuring gitweb\nfeatures&quot; section in <b>gitweb.conf</b>(5)</font></p>\n\n<h2>ACTIONS, AND URLS\n<a name=\"ACTIONS, AND URLS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Gitweb\ncan use path_info (component) based URLs, or it can pass all\nnecessary information via query parameters. The typical\ngitweb URLs are broken down in to five\ncomponents:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">.../gitweb.cgi/&lt;repo&gt;/&lt;action&gt;/&lt;revision&gt;:/&lt;path&gt;?&lt;arguments&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">repo</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nrepository the action will be performed on.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">All\nactions except for those that list all available projects,\nin whatever form, require this parameter.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">action</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\naction that will be run. Defaults to <i>projects_list</i> if\nrepo is not set, and to <i>summary</i> otherwise.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">revision</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Revision\nshown. Defaults to HEAD.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">path</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The path\nwithin the &lt;repository&gt; that the action is performed\non, for those actions that require it.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">arguments</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Any\narguments that control the behaviour of the\naction.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Some\nactions require or allow to specify two revisions, and\nsometimes even two pathnames. In most general form such\npath_info (component) based gitweb URL looks like\nthis:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">.../gitweb.cgi/&lt;repo&gt;/&lt;action&gt;/&lt;revision_from&gt;:/&lt;path_from&gt;..&lt;revision_to&gt;:/&lt;path_to&gt;?&lt;arguments&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Each\naction is implemented as a subroutine, and must be present\nin %actions hash. Some actions are disabled by default, and\nmust be turned on via feature mechanism. For example to\nenable <i>blame</i> view add the following to gitweb\nconfiguration file:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$feature{'blame'}{'default'}\n= [1];</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Actions:</b>\n<br>\nThe standard actions are:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">project_list</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Lists the\navailable Git repositories. This is the default command if\nno repository is specified in the URL.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">summary</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Displays\nsummary about given repository. This is the default command\nif no action is specified in URL, and only repository is\nspecified.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">heads,\nremotes</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Lists all\nlocal or all remote-tracking branches in given\nrepository.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nlatter is not available by default, unless\nconfigured.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">tags</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">List all\ntags (lightweight and annotated) in given\nrepository.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">blob,\ntree</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Shows the\nfiles and directories in a given repository path, at given\nrevision. This is default command if no action is specified\nin the URL, and path is given.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">blob_plain</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Returns\nthe raw data for the file in given repository, at given path\nand revision. Links to this action are marked\n<i>raw</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">blobdiff</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Shows the\ndifference between two revisions of the same\nfile.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">blame,\nblame_incremental</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Shows the\nblame (also called annotation) information for a file. On a\nper line basis it shows the revision in which that line was\nlast changed and the user that committed the change. The\nincremental version (which if configured is used\nautomatically when JavaScript is enabled) uses Ajax to\nincrementally add blame info to the contents of given\nfile.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\naction is disabled by default for performance\nreasons.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">commit,\ncommitdiff</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Shows\ninformation about a specific commit in a repository. The\n<i>commit</i> view shows information about commit in more\ndetail, the <i>commitdiff</i> action shows changeset for\ngiven commit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">patch</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Returns\nthe commit in plain text mail format, suitable for applying\nwith <a href=\"https://man.page/1/git-am\">git-am(1)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">tag</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Display\nspecific annotated tag (tag object).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">log,\nshortlog</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Shows log\ninformation (commit message or just commit subject) for a\ngiven branch (starting from given revision).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<i>shortlog</i> view is more compact; it shows one commit\nper line.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">history</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Shows\nhistory of the file or directory in a given repository path,\nstarting from given revision (defaults to HEAD, i.e. default\nbranch).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nview is similar to <i>shortlog</i> view.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">rss,\natom</font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Generates\nan RSS (or Atom) feed of changes to repository.</font></p>\n\n<h2>WEBSERVER CONFIGURATION\n<a name=\"WEBSERVER CONFIGURATION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nsection explains how to configure some common webservers to\nrun gitweb. In all cases, <b>/path/to/gitweb</b> in the\nexamples is the directory you ran installed gitweb in, and\ncontains <b>gitweb_config.perl</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou&rsquo;ve configured a web server that isn&rsquo;t listed\nhere for gitweb, please send in the instructions so they can\nbe included in a future release.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Apache\nas CGI</b> <br>\nApache must be configured to support CGI scripts in the\ndirectory in which gitweb is installed. Let&rsquo;s assume\nthat it is <b>/var/www/cgi-bin</b> directory.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">ScriptAlias\n/cgi-bin/ &quot;/var/www/cgi-bin/&quot;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;Directory\n&quot;/var/www/cgi-bin&quot;&gt; <br>\nOptions Indexes FollowSymlinks ExecCGI <br>\nAllowOverride None <br>\nOrder allow,deny <br>\nAllow from all <br>\n&lt;/Directory&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">With\nthat configuration the full path to browse repositories\nwould be:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">http://server/cgi-bin/gitweb.cgi</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Apache\nwith mod_perl, via ModPerl::Registry</b> <br>\nYou can use mod_perl with gitweb. You must install\nApache::Registry (for mod_perl 1.x) or ModPerl::Registry\n(for mod_perl 2.x) to enable this support.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Assuming\nthat gitweb is installed to <b>/var/www/perl</b>, the\nfollowing Apache configuration (for mod_perl 2.x) is\nsuitable.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Alias\n/perl &quot;/var/www/perl&quot;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;Directory\n&quot;/var/www/perl&quot;&gt; <br>\nSetHandler perl-script <br>\nPerlResponseHandler ModPerl::Registry <br>\nPerlOptions +ParseHeaders <br>\nOptions Indexes FollowSymlinks +ExecCGI <br>\nAllowOverride None <br>\nOrder allow,deny <br>\nAllow from all <br>\n&lt;/Directory&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">With\nthat configuration the full path to browse repositories\nwould be:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">http://server/perl/gitweb.cgi</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Apache\nwith FastCGI</b> <br>\nGitweb works with Apache and FastCGI. First you need to\nrename, copy or symlink gitweb.cgi to gitweb.fcgi.\nLet&rsquo;s assume that gitweb is installed in\n<b>/usr/share/gitweb</b> directory. The following Apache\nconfiguration is suitable (UNTESTED!)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">FastCgiServer\n/usr/share/gitweb/gitweb.cgi <br>\nScriptAlias /gitweb /usr/share/gitweb/gitweb.cgi</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Alias\n/gitweb/static /usr/share/gitweb/static <br>\n&lt;Directory /usr/share/gitweb/static&gt; <br>\nSetHandler default-handler <br>\n&lt;/Directory&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">With\nthat configuration the full path to browse repositories\nwould be:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">http://server/gitweb</font></p>\n\n<h2>ADVANCED WEB SERVER SETUP\n<a name=\"ADVANCED WEB SERVER SETUP\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\nof those examples use request rewriting, and need\n<b>mod_rewrite</b> (or equivalent; examples below are\nwritten for Apache).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Single\nURL for gitweb and for fetching</b> <br>\nIf you want to have one URL for both gitweb and your\n<b>http://</b> repositories, you can configure Apache like\nthis:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;VirtualHost\n*:80&gt; <br>\nServerName git.example.org <br>\nDocumentRoot /pub/git <br>\nSetEnv GITWEB_CONFIG /etc/gitweb.conf</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nturning on mod rewrite <br>\nRewriteEngine on</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nmake the front page an internal rewrite to the gitweb script\n<br>\nRewriteRule ^/$ /cgi-bin/gitweb.cgi</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nmake access for &quot;dumb clients&quot; work <br>\nRewriteRule ^/(.*\\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \\\n<br>\n/cgi-bin/gitweb.cgi%{REQUEST_URI} [L,PT] <br>\n&lt;/VirtualHost&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nabove configuration expects your public repositories to live\nunder <b>/pub/git</b> and will serve them as\n<b>http://git.domain.org/dir-under-pub-git</b>, both as\nclonable Git URL and as browseable gitweb interface. If you\nthen start your <a href=\"https://man.page/1/git-daemon\">git-daemon(1)</a> with\n<b>--base-path=/pub/git --export-all</b> then you can even\nuse the <b>git://</b> URL with exactly the same\npath.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Setting\nthe environment variable <b>GITWEB_CONFIG</b> will tell\ngitweb to use the named file (i.e. in this example\n<b>/etc/gitweb.conf</b>) as a configuration for gitweb. You\ndon&rsquo;t really need it in above example; it is required\nonly if your configuration file is in different place than\nbuilt-in (during compiling gitweb) <i>gitweb_config.perl</i>\nor <b>/etc/gitweb.conf</b>. See <b>gitweb.conf</b>(5) for\ndetails, especially information about precedence\nrules.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou use the rewrite rules from the example you <b>might</b>\nalso need something like the following in your gitweb\nconfiguration file (<b>/etc/gitweb.conf</b> following\nexample):</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">@stylesheets\n= (&quot;/some/absolute/path/gitweb.css&quot;); <br>\n$my_uri = &quot;/&quot;; <br>\n$home_link = &quot;/&quot;; <br>\n$per_request_config = 1;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Nowadays\nthough gitweb should create HTML base tag when needed (to\nset base URI for relative links), so it should work\nautomatically.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Webserver\nconfiguration with multiple projects' root</b> <br>\nIf you want to use gitweb with several project roots you can\nedit your Apache virtual host and gitweb configuration files\nin the following way.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nvirtual host configuration (in Apache configuration file)\nshould look like this:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;VirtualHost\n*:80&gt; <br>\nServerName git.example.org <br>\nDocumentRoot /pub/git <br>\nSetEnv GITWEB_CONFIG /etc/gitweb.conf</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nturning on mod rewrite <br>\nRewriteEngine on</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nmake the front page an internal rewrite to the gitweb script\n<br>\nRewriteRule ^/$ /cgi-bin/gitweb.cgi [QSA,L,PT]</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nlook for a public_git directory in unix users' home <br>\n# http://git.example.org/~&lt;user&gt;/ <br>\nRewriteRule ^/\\~([^\\/]+)(/|/gitweb.cgi)?$\n/cgi-bin/gitweb.cgi \\ <br>\n\n[QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nhttp://git.example.org/+&lt;user&gt;/ <br>\n#RewriteRule ^/\\+([^\\/]+)(/|/gitweb.cgi)?$\n/cgi-bin/gitweb.cgi \\ <br>\n\n[QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nhttp://git.example.org/user/&lt;user&gt;/ <br>\n#RewriteRule ^/user/([^\\/]+)/(gitweb.cgi)?$\n/cgi-bin/gitweb.cgi \\ <br>\n\n[QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\ndefined list of project roots <br>\nRewriteRule ^/scm(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \\\n<br>\n[QSA,E=GITWEB_PROJECTROOT:/pub/scm/,L,PT] <br>\nRewriteRule ^/var(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \\\n<br>\n[QSA,E=GITWEB_PROJECTROOT:/var/git/,L,PT]</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#\nmake access for &quot;dumb clients&quot; work <br>\nRewriteRule ^/(.*\\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \\\n<br>\n/cgi-bin/gitweb.cgi%{REQUEST_URI} [L,PT] <br>\n&lt;/VirtualHost&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Here\nactual project root is passed to gitweb via\n<b>GITWEB_PROJECT_ROOT</b> environment variable from a web\nserver, so you need to put the following line in gitweb\nconfiguration file (<b>/etc/gitweb.conf</b> in above\nexample):</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$projectroot\n= $ENV{'GITWEB_PROJECTROOT'} ||\n&quot;/pub/git&quot;;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Note</b>\nthat this requires to be set for each request, so either\n<b>$per_request_config</b> must be false, or the above must\nbe put in code referenced by\n<b>$per_request_config</b>;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">These\nconfigurations enable two things. First, each unix user\n(<b>&lt;user&gt;</b>) of the server will be able to browse\nthrough gitweb Git repositories found in\n<b>~/public_git/</b> with the following url:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">http://git.example.org/~&lt;user&gt;/</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou do not want this feature on your server just remove the\nsecond rewrite rule.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou already use &rsquo;mod_userdir&rsquo; in your virtual\nhost or you don&rsquo;t want to use the '~&rsquo; as first\ncharacter, just comment or remove the second rewrite rule,\nand uncomment one of the following according to what you\nwant.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Second,\nrepositories found in <b>/pub/scm/</b> and <b>/var/git/</b>\nwill be accessible through\n<b>http://git.example.org/scm/</b> and\n<b>http://git.example.org/var/</b>. You can add as many\nproject roots as you want by adding rewrite rules like the\nthird and the fourth.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>PATH_INFO\nusage</b> <br>\nIf you enable PATH_INFO usage in gitweb by\nputting</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$feature{'pathinfo'}{'default'}\n= [1];</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">in\nyour gitweb configuration file, it is possible to set up\nyour server so that it consumes and produces URLs in the\nform</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">http://git.example.com/project.git/shortlog/sometag</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">i.e.\nwithout <i>gitweb.cgi</i> part, by using a configuration\nsuch as the following. This configuration assumes that\n<b>/var/www/gitweb</b> is the DocumentRoot of your\nwebserver, contains the gitweb.cgi script and complementary\nstatic files (stylesheet, favicon, JavaScript):</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;VirtualHost\n*:80&gt; <br>\nServerAlias git.example.com</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">DocumentRoot\n/var/www/gitweb</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;Directory\n/var/www/gitweb&gt; <br>\nOptions ExecCGI <br>\nAddHandler cgi-script cgi</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">DirectoryIndex\ngitweb.cgi</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">RewriteEngine\nOn <br>\nRewriteCond %{REQUEST_FILENAME} !-f <br>\nRewriteCond %{REQUEST_FILENAME} !-d <br>\nRewriteRule ^.* /gitweb.cgi/$0 [L,PT] <br>\n&lt;/Directory&gt; <br>\n&lt;/VirtualHost&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nrewrite rule guarantees that existing static files will be\nproperly served, whereas any other URL will be passed to\ngitweb as PATH_INFO parameter.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Notice</b>\nthat in this case you don&rsquo;t need special settings for\n<b>@stylesheets</b>, <b>$my_uri</b> and <b>$home_link</b>,\nbut you lose &quot;dumb client&quot; access to your project\n.git dirs (described in &quot;Single URL for gitweb and for\nfetching&quot; section). A possible workaround for the\nlatter is the following: in your project root dir (e.g.\n<b>/pub/git</b>) have the projects named <b>without</b> a\n.git extension (e.g. <b>/pub/git/project</b> instead of\n<b>/pub/git/project.git</b>) and configure Apache as\nfollows:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;VirtualHost\n*:80&gt; <br>\nServerAlias git.example.com</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">DocumentRoot\n/var/www/gitweb</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">AliasMatch\n^(/.*?)(\\.git)(/.*)?$ /pub/git$1$3 <br>\n&lt;Directory /var/www/gitweb&gt; <br>\nOptions ExecCGI <br>\nAddHandler cgi-script cgi</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">DirectoryIndex\ngitweb.cgi</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">RewriteEngine\nOn <br>\nRewriteCond %{REQUEST_FILENAME} !-f <br>\nRewriteCond %{REQUEST_FILENAME} !-d <br>\nRewriteRule ^.* /gitweb.cgi/$0 [L,PT] <br>\n&lt;/Directory&gt; <br>\n&lt;/VirtualHost&gt;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nadditional AliasMatch makes it so that</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">http://git.example.com/project.git</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">will\ngive raw access to the project&rsquo;s Git dir (so that the\nproject can be cloned), while</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">http://git.example.com/project</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">will\nprovide human-friendly gitweb access.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nsolution is not 100% bulletproof, in the sense that if some\nproject has a named ref (branch, tag) starting with\n<b>git/</b>, then paths such as</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">http://git.example.com/project/command/abranch..git/abranch</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">will\nfail with a 404 error.</font></p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Please\nreport any bugs or feature requests to</font>\n<b><font color=\"#0000FF\">git@vger.kernel.org</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">, putting &quot;gitweb&quot; in the\nsubject of email.</font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>gitweb.conf</b>(5),\n<a href=\"https://man.page/1/git-instaweb\">git-instaweb(1)</a></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>gitweb/README</b>,\n<b>gitweb/INSTALL</b></font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"29%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">git@vger.kernel.org</font></p> </td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">mailto:git@vger.kernel.org</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#ACTIONS, AND URLS\">ACTIONS, AND URLS</a>","<a href=\"#WEBSERVER CONFIGURATION\">WEBSERVER CONFIGURATION</a>","<a href=\"#ADVANCED WEB SERVER SETUP\">ADVANCED WEB SERVER SETUP</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"]}