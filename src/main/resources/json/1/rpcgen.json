{"name":"rpcgen","description":"<b><i>rpcgen</i></b> - an RPC protocol compiler","body":"\n\n<h1 align=\"center\">rpcgen</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>rpcgen</i></b>\n- an RPC protocol compiler</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>rpcgen</i></b>\n<i>infile</i> <b><i><br>\nrpcgen\n[-D</i></b><i>name</i><b><i>[=</i></b><i>value</i><b><i>]]\n[-T] [-K</i></b> <i>secs</i><b><i>]</i></b> <i>infile</i>\n<b><i><br>\nrpcgen -c|-h|-l|-m|-M|-t [-o</i></b> <i>outfile</i>\n<b><i>]</i></b> <i>infile</i> <b><i><br>\nrpcgen [-I] -s</i></b> <i>nettype</i> <b><i>[-o</i></b>\n<i>outfile</i><b><i>]</i></b> <i>infile</i> <b><i><br>\nrpcgen -n</i></b> <i>netid</i> <b><i>[-o</i></b>\n<i>outfile</i><b><i>]</i></b> <i>infile</i></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><b>rpcgen</b></i>\nis a tool that generates C code to implement an RPC\nprotocol. The input to <b><i>rpcgen</i></b> is a language\nsimilar to C known as RPC Language (Remote Procedure Call\nLanguage).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>rpcgen</i></b>\nis normally used as in the first synopsis where it takes an\ninput file and generates up to four output files. If the\n<i>infile</i> is named <b><i>proto.x</i></b>, then\n<b><i>rpcgen</i></b> will generate a header file in\n<b><i>proto.h</i></b>, XDR routines in\n<b><i>proto_xdr.c</i></b>, server-side stubs in\n<b><i>proto_svc.c</i></b>, and client-side stubs in\n<b><i>proto_clnt.c</i></b>. With the <b><i>-T</i></b>\noption, it will also generate the RPC dispatch table in\n<b><i>proto_tbl.i</i></b>. With the <b><i>-Sc</i></b>\noption, it will also generate sample code which would\nillustrate how to use the remote procedures on the client\nside. This code would be created in\n<b><i>proto_client.c</i></b>. With the <b><i>-Ss</i></b>\noption, it will also generate a sample server code which\nwould illustrate how to write the remote procedures. This\ncode would be created in <b><i>proto_server.c</i></b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The server\ncreated can be started both by the port monitors (for\nexample, <b><i>inetd</i></b> or <b><i>listen</i></b>) or by\nitself. When it is started by a port monitor, it creates\nservers only for the transport for which the file descriptor\n<b><i>0</i></b> was passed. The name of the transport must\nbe specified by setting up the environmental variable\n<b><i>PM_TRANSPORT</i></b>. When the server generated by\n<b><i>rpcgen</i></b> is executed, it creates server handles\nfor all the transports specified in <b><i>NETPATH</i></b>\nenvironment variable, or if it is unset, it creates server\nhandles for all the visible transports from\n<b><i>/etc/netconfig</i></b> file. Note: the transports are\nchosen at run time and not at compile time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When built for\na port monitor (<b><i>rpcgen -I</i></b>), and that the\nserver is self-started, it backgrounds itself by default. A\nspecial define symbol <b><i>RPC_SVC_FG</i></b> can be used\nto run the server process in foreground.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The second\nsynopsis provides special features which allow for the\ncreation of more sophisticated RPC servers. These features\ninclude support for user provided <b><i>#defines</i></b> and\nRPC dispatch tables. The entries in the RPC dispatch table\ncontain:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>pointers to the service routine corresponding to that\nprocedure,</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>a pointer to the input and output arguments</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the size of these routines</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">A server can use the dispatch\ntable to check authorization and then to execute the service\nroutine; a client library may use it to deal with the\ndetails of storage management and XDR data conversion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The other three\nsynopses shown above are used when one does not want to\ngenerate all the output files, but only a particular one.\nSome examples of their usage is described in the EXAMPLE\nsection below. When <b><i>rpcgen</i></b> is executed with\nthe <b><i>-s</i></b> option, it creates servers for that\nparticular class of transports. When executed with the\n<b><i>-n</i></b> option, it creates a server for the\ntransport specified by <i>netid</i>. If <i>infile</i> is not\nspecified, <b><i>rpcgen</i></b> accepts the standard\ninput.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The C\npreprocessor, <b><i>cc -E</i></b> [see <b><i>cc</i></b>(1)],\nis run on the input file before it is actually interpreted\nby <b><i>rpcgen</i></b>. For each type of output file,\n<b><i>rpcgen</i></b> defines a special preprocessor symbol\nfor use by the <b><i>rpcgen</i></b> programmer:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\"><b><i>RPC_HDR</i></b></p></td>\n<td width=\"6%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">defined when compiling into\nheader files</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><b><i>RPC_XDR</i></b></p></td>\n<td width=\"6%\"></td>\n<td width=\"71%\">\n\n\n<p>defined when compiling into XDR routines</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><b><i>RPC_SVC</i></b></p></td>\n<td width=\"6%\"></td>\n<td width=\"71%\">\n\n\n<p>defined when compiling into server-side stubs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><b><i>RPC_CLNT</i></b></p></td>\n<td width=\"6%\"></td>\n<td width=\"71%\">\n\n\n<p>defined when compiling into client-side stubs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><b><i>RPC_TBL</i></b></p></td>\n<td width=\"6%\"></td>\n<td width=\"71%\">\n\n\n<p>defined when compiling into RPC dispatch tables</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any line\nbeginning with &rsquo;<b><i>%</i></b>&rsquo; is passed\ndirectly into the output file, uninterpreted by\n<b><i>rpcgen</i></b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For every data\ntype referred to in <i>infile</i>, <b><i>rpcgen</i></b>\nassumes that there exists a routine with the string\n<b><i>xdr_</i></b> prepended to the name of the data type.\nIf this routine does not exist in the RPC/XDR library, it\nmust be provided. Providing an undefined data type allows\ncustomization of XDR routines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions are available:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b><i>-a</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Generate all the files including\nsample code for client and server side.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-b</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>This generates code for the SunOS4.1 style of rpc. It is\nfor backward compatibility. This is the default.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-5</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>This generates code for the SysVr4 style of rpc. It is\nused by the Transport Independent RPC that is in Svr4\nsystems. By default rpcgen generates code for SunOS4.1 stype\nof rpc.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-c</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Compile into XDR routines.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-C</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Generate code in ANSI C. This option also generates code\nthat could be compiled with the C++ compiler. This is the\ndefault.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-k</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Generate code in K&amp;R C. The default is ANSI C.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b><i>-D</i></b><i>name</i><b><i>[=</i></b><i>value</i><b><i>]</i></b></p>\n\n<p style=\"margin-left:22%;\">Define a symbol <i>name</i>.\nEquivalent to the <b><i>#define</i></b> directive in the\nsource. If no <i>value</i> is given, <i>value</i> is defined\nas <b><i>1</i></b>. This option may be specified more than\nonce.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-h</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Compile into <b><i>C</i></b> data-definitions (a header\nfile). <b><i>-T</i></b> option can be used in conjunction to\nproduce a header file which supports RPC dispatch\ntables.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-I</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Generate a service that can be started from inetd. The\ndefault is to generate a static service that handles\ntransports selected with <b><i>-s</i></b>. Using\n<b><i>-I</i></b> allows starting a service by either\nmethod.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b><i>-K</i></b>\n<i>secs</i></p>\n\n<p style=\"margin-left:22%;\">By default, services created\nusing <b><i>rpcgen</i></b> wait <b><i>120</i></b> seconds\nafter servicing a request before exiting. That interval can\nbe changed using the <b><i>-K</i></b> flag. To create a\nserver that exits immediately upon servicing a request,\n<b><i>-K&nbsp;0</i></b> can be used. To create a server that\nnever exits, the appropriate argument is\n<b><i>-K&nbsp;-1</i></b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When monitoring\nfor a server, some portmonitors, like\n<b><i>listen</i></b>(1M), <i>always</i> spawn a new process\nin response to a service request. If it is known that a\nserver will be used with such a monitor, the server should\nexit immediately on completion. For such servers,\n<b><i>rpcgen</i></b> should be used with\n<b><i>-K&nbsp;-1</i></b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-l</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Compile into client-side stubs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-m</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Compile into server-side stubs, but do not generate a\n&ldquo;main&rdquo; routine. This option is useful for doing\ncallback-routines and for users who need to write their own\n&ldquo;main&rdquo; routine to do initialization.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-M</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Generate multithread-safe stubs for passing arguments\nand results between rpcgen-generated code and user written\ncode. This option is useful for users who want to use\nthreads in their code.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b><i>-n</i></b>\n<i>netid</i></p>\n\n<p style=\"margin-left:22%;\">Compile into server-side stubs\nfor the transport specified by <i>netid</i>. There should be\nan entry for <i>netid</i> in the netconfig database. This\noption may be specified more than once, so as to compile a\nserver that serves multiple transports.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b><i>-N</i></b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Use the newstyle of rpcgen. This allows procedures to\nhave multiple arguments. It also uses the style of parameter\npassing that closely resembles C. So, when passing an\nargument to a remote procedure you do not have to pass a\npointer to the argument but the argument itself. This\nbehaviour is different from the oldstyle of rpcgen generated\ncode. The newstyle is not the default case because of\nbackward compatibility.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b><i>-o</i></b>\n<i>outfile</i></p>\n\n<p style=\"margin-left:22%;\">Specify the name of the output\nfile. If none is specified, standard output is used\n(<b><i>-c</i></b>, <b><i>-h</i></b>, <b><i>-l</i></b>,\n<b><i>-m</i></b>, <b><i>-n</i></b>, <b><i>-s</i></b>,\n<b><i>-Sc</i></b>, <b><i>-Sm</i></b>, <b><i>-Ss</i></b>, and\n<b><i>-t</i></b> modes only).</p>\n\n<p style=\"margin-left:11%;\"><b><i>-s</i></b>\n<i>nettype</i></p>\n\n<p style=\"margin-left:22%;\">Compile into server-side stubs\nfor all the transports belonging to the class\n<i>nettype</i>. The supported classes are\n<b><i>netpath</i></b>, <b><i>visible</i></b>,\n<b><i>circuit_n</i></b>, <b><i>circuit_v</i></b>,\n<b><i>datagram_n</i></b>, <b><i>datagram_v</i></b>,\n<b><i>tcp</i></b>, and <b><i>udp</i></b> [see\n<b><i>rpc</i></b>(3N) for the meanings associated with these\nclasses]. This option may be specified more than once. Note:\nthe transports are chosen at run time and not at compile\ntime.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b><i>-Sc</i></b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Generate sample code to show the use of remote procedure\nand how to bind to the server before calling the client side\nstubs generated by rpcgen.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b><i>-Sm</i></b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Generate a sample Makefile which can be used for\ncompiling the application.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b><i>-Ss</i></b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Generate skeleton code for the remote procedures on the\nserver side. You would need to fill in the actual code for\nthe remote procedures.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b><i>-t</i></b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Compile into RPC dispatch table.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b><i>-T</i></b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Generate the code to support RPC dispatch tables.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The options\n<b><i>-c</i></b>, <b><i>-h</i></b>, <b><i>-l</i></b>,\n<b><i>-m</i></b>, <b><i>-s</i></b> and <b><i>-t</i></b> are\nused exclusively to generate a particular type of file,\nwhile the options <b><i>-D</i></b> and <b><i>-T</i></b> are\nglobal and can be used with the other options.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The RPC\nLanguage does not support nesting of structures. As a\nwork-around, structures can be declared at the top-level,\nand their name used inside other structures in order to\nachieve the same effect.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Name clashes\ncan occur when using program definitions, since the apparent\nscoping does not really apply. Most of these can be avoided\nby giving unique names for programs, versions, procedures\nand types.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The server code\ngenerated with <b><i>-n</i></b> option refers to the\ntransport indicated by <i>netid</i> and hence is very site\nspecific.</p>\n\n<h2>EXAMPLE\n<a name=\"EXAMPLE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nexample:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b><i>$ rpcgen\n-T prot.x</i></b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">generates the\nfive files: <b><i>prot.h</i></b>, <b><i>prot_clnt.c</i></b>,\n<b><i>prot_svc.c</i></b>, <b><i>prot_xdr.c</i></b> and\n<b><i>prot_tbl.i</i></b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nexample sends the C data-definitions (header file) to the\nstandard output.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b><i>$ rpcgen\n-h prot.x</i></b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To send the\ntest version of the <b><i>-DTEST</i></b>, server side stubs\nfor all the transport belonging to the class\n<b><i>datagram_n</i></b> to standard output, use:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b><i>$ rpcgen\n-s datagram_n -DTEST prot.x</i></b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To create the\nserver side stubs for the transport indicated by\n<i>netid</i> <b><i>tcp</i></b>, use:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b><i>$ rpcgen\n-n tcp -o prot_svc.c prot.x</i></b></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>cc</i></b>(1).</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLE\">EXAMPLE</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"]}