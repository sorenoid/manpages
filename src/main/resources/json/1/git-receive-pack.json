{"name":"git-receive-pack","description":"git-receive-pack - Receive what is pushed into the repository","body":"\n\n<h1 align=\"center\">GIT-RECEIVE-PACK</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-receive-pack\n- Receive what is pushed into the repository</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git-receive-pack</i>\n&lt;directory&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Invoked by\n<i>git send-pack</i> and updates the repository with the\ninformation fed from the remote end.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command is\nusually not invoked directly by the end user. The UI for the\nprotocol is on the <i>git send-pack</i> side, and the\nprogram pair is meant to be used to push updates to remote\nrepository. For pull operations, see\n<a href=\"https://man.page/1/git-fetch-pack\">git-fetch-pack(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nallows for creation and fast-forwarding of sha1 refs\n(heads/tags) on the remote end (strictly speaking, it is the\nlocal end <i>git-receive-pack</i> runs, but to the user who\nis sitting at the send-pack end, it is updating the remote.\nConfused?)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are other\nreal-world examples of using update and post-update hooks\nfound in the Documentation/howto directory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git-receive-pack</i>\nhonours the receive.denyNonFastForwards config option, which\ntells it if updates to a ref should be denied if they are\nnot fast-forwards.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A number of\nother receive.* config options are available to tweak its\nbehavior, see <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;directory&gt;</p>\n\n<p style=\"margin-left:17%;\">The repository to sync\ninto.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--http-backend-info-refs</p>\n\n<p style=\"margin-left:17%;\">Used by\n<a href=\"https://man.page/1/git-http-backend\">git-http-backend(1)</a> to serve up\n<b>$GIT_URL/info/refs?service=git-receive-pack</b> requests.\nSee <b>--http-backend-info-refs</b> in\n<a href=\"https://man.page/1/git-upload-pack\">git-upload-pack(1)</a>.</p>\n\n<h2>PRE-RECEIVE HOOK\n<a name=\"PRE-RECEIVE HOOK\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before any ref\nis updated, if $GIT_DIR/hooks/pre-receive file exists and is\nexecutable, it will be invoked once with no parameters. The\nstandard input of the hook will be one line per ref to be\nupdated:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sha1-old SP\nsha1-new SP refname LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The refname\nvalue is relative to $GIT_DIR; e.g. for the master head this\nis &quot;refs/heads/master&quot;. The two sha1 values before\neach refname are the object names for the refname before and\nafter the update. Refs to be created will have sha1-old\nequal to 0{40}, while refs to be deleted will have sha1-new\nequal to 0{40}, otherwise sha1-old and sha1-new should be\nvalid objects in the repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When accepting\na signed push (see <a href=\"https://man.page/1/git-push\">git-push(1)</a>), the signed push\ncertificate is stored in a blob and an environment variable\n<b>GIT_PUSH_CERT</b> can be consulted for its object name.\nSee the description of <b>post-receive</b> hook for an\nexample. In addition, the certificate is verified using GPG\nand the result is exported with the following environment\nvariables:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_PUSH_CERT_SIGNER</b></p>\n\n<p style=\"margin-left:17%;\">The name and the e-mail address\nof the owner of the key that signed the push\ncertificate.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_PUSH_CERT_KEY</b></p>\n\n<p style=\"margin-left:17%;\">The GPG key ID of the key that\nsigned the push certificate.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_PUSH_CERT_STATUS</b></p>\n\n<p style=\"margin-left:17%;\">The status of GPG verification\nof the push certificate, using the same mnemonic as used in\n<b>%G?</b> format of <b>git log</b> family of commands (see\n<a href=\"https://man.page/1/git-log\">git-log(1)</a>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_PUSH_CERT_NONCE</b></p>\n\n<p style=\"margin-left:17%;\">The nonce string the process\nasked the signer to include in the push certificate. If this\ndoes not match the value recorded on the &quot;nonce&quot;\nheader in the push certificate, it may indicate that the\ncertificate is a valid one that is being replayed from a\nseparate &quot;git push&quot; session.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_PUSH_CERT_NONCE_STATUS</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>UNSOLICITED</b></p>\n\n<p style=\"margin-left:23%;\">&quot;git push --signed&quot;\nsent a nonce when we did not ask it to send one.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>MISSING</b></p>\n\n<p style=\"margin-left:23%;\">&quot;git push --signed&quot;\ndid not send any nonce header.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>BAD</b></p>\n\n<p style=\"margin-left:23%;\">&quot;git push --signed&quot;\nsent a bogus nonce.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>OK</b></p>\n\n<p style=\"margin-left:23%;\">&quot;git push --signed&quot;\nsent the nonce we asked it to send.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>SLOP</b></p>\n\n<p style=\"margin-left:23%;\">&quot;git push --signed&quot;\nsent a nonce different from what we asked it to send now,\nbut in a previous session. See\n<b>GIT_PUSH_CERT_NONCE_SLOP</b> environment variable.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_PUSH_CERT_NONCE_SLOP</b></p>\n\n<p style=\"margin-left:17%;\">&quot;git push --signed&quot;\nsent a nonce different from what we asked it to send now,\nbut in a different session whose starting time is different\nby this many seconds from the current session. Only\nmeaningful when <b>GIT_PUSH_CERT_NONCE_STATUS</b> says\n<b>SLOP</b>. Also read about <b>receive.certNonceSlop</b>\nvariable in <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook is\ncalled before any refname is updated and before any\nfast-forward checks are performed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\npre-receive hook exits with a non-zero exit status no\nupdates will be performed, and the update, post-receive and\npost-update hooks will not be invoked either. This can be\nuseful to quickly bail out if the update is not to be\nsupported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the notes\non the quarantine environment below.</p>\n\n<h2>UPDATE HOOK\n<a name=\"UPDATE HOOK\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before each ref\nis updated, if $GIT_DIR/hooks/update file exists and is\nexecutable, it is invoked once per ref, with three\nparameters:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$GIT_DIR/hooks/update\nrefname sha1-old sha1-new</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The refname\nparameter is relative to $GIT_DIR; e.g. for the master head\nthis is &quot;refs/heads/master&quot;. The two sha1\narguments are the object names for the refname before and\nafter the update. Note that the hook is called before the\nrefname is updated, so either sha1-old is 0{40} (meaning\nthere is no such ref yet), or it should match what is\nrecorded in refname.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The hook should\nexit with non-zero status if it wants to disallow updating\nthe named ref. Otherwise it should exit with zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Successful\nexecution (a zero exit status) of this hook does not ensure\nthe ref will actually be updated, it is only a prerequisite.\nAs such it is not a good idea to send notices (e.g. email)\nfrom this hook. Consider using the post-receive hook\ninstead.</p>\n\n<h2>POST-RECEIVE HOOK\n<a name=\"POST-RECEIVE HOOK\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">After all refs\nwere updated (or attempted to be updated), if any ref update\nwas successful, and if $GIT_DIR/hooks/post-receive file\nexists and is executable, it will be invoked once with no\nparameters. The standard input of the hook will be one line\nfor each successfully updated ref:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sha1-old SP\nsha1-new SP refname LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The refname\nvalue is relative to $GIT_DIR; e.g. for the master head this\nis &quot;refs/heads/master&quot;. The two sha1 values before\neach refname are the object names for the refname before and\nafter the update. Refs that were created will have sha1-old\nequal to 0{40}, while refs that were deleted will have\nsha1-new equal to 0{40}, otherwise sha1-old and sha1-new\nshould be valid objects in the repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>GIT_PUSH_CERT*</b> environment variables can be\ninspected, just as in <b>pre-receive</b> hook, after\naccepting a signed push.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using this\nhook, it is easy to generate mails describing the updates to\nthe repository. This example script sends one mail message\nper ref listing the commits pushed to the repository, and\nlogs the push certificates of signed pushes with good\nsignatures to a logger service:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#!/bin/sh <br>\n# mail out commit update information. <br>\nwhile read oval nval ref <br>\ndo <br>\nif expr &quot;$oval&quot; : '0*$' &gt;/dev/null <br>\nthen <br>\necho &quot;Created a new ref, with the following\ncommits:&quot; <br>\ngit rev-list --pretty &quot;$nval&quot; <br>\nelse <br>\necho &quot;New commits:&quot; <br>\ngit rev-list --pretty &quot;$nval&quot; &quot;^$oval&quot;\n<br>\nfi | <br>\nmail -s &quot;Changes to ref $ref&quot; commit-list@mydomain\n<br>\ndone <br>\n# log signed push certificate, if any <br>\nif test -n &quot;${GIT_PUSH_CERT-}&quot; &amp;&amp; test\n${GIT_PUSH_CERT_STATUS} = G <br>\nthen <br>\n( <br>\necho expected nonce is ${GIT_PUSH_NONCE} <br>\ngit cat-file blob ${GIT_PUSH_CERT} <br>\n) | mail -s &quot;push certificate from\n$GIT_PUSH_CERT_SIGNER&quot; push-log@mydomain <br>\nfi <br>\nexit 0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The exit code\nfrom this hook invocation is ignored, however a non-zero\nexit code will generate an error message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that it is\npossible for refname to not have sha1-new when this hook\nruns. This can easily occur if another user modifies the ref\nafter it was updated by <i>git-receive-pack</i>, but before\nthe hook was able to evaluate it. It is recommended that\nhooks rely on sha1-new rather than the current value of\nrefname.</p>\n\n<h2>POST-UPDATE HOOK\n<a name=\"POST-UPDATE HOOK\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">After all other\nprocessing, if at least one ref was updated, and if\n$GIT_DIR/hooks/post-update file exists and is executable,\nthen post-update will be called with the list of refs that\nhave been updated. This can be used to implement any\nrepository wide cleanup tasks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The exit code\nfrom this hook invocation is ignored; the only thing left\nfor <i>git-receive-pack</i> to do at that point is to exit\nitself anyway.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook can\nbe used, for example, to run <b>git update-server-info</b>\nif the repository is packed and is served via a dumb\ntransport.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#!/bin/sh <br>\nexec git update-server-info</p>\n\n<h2>QUARANTINE ENVIRONMENT\n<a name=\"QUARANTINE ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>receive-pack</b> takes in objects, they are placed into a\ntemporary &quot;quarantine&quot; directory within the\n<b>$GIT_DIR/objects</b> directory and migrated into the main\nobject store only after the <b>pre-receive</b> hook has\ncompleted. If the push fails before then, the temporary\ndirectory is removed entirely.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This has a few\nuser-visible effects and caveats:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. Pushes which\nfail due to problems with the incoming pack, missing\nobjects, or due to the <b>pre-receive</b> hook will not\nleave any on-disk data. This is usually helpful to prevent\nrepeated failed pushes from filling up your disk, but can\nmake debugging more challenging.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Any objects\ncreated by the <b>pre-receive</b> hook will be created in\nthe quarantine directory (and migrated only if it\nsucceeds).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. The\n<b>pre-receive</b> hook MUST NOT update any refs to point to\nquarantined objects. Other programs accessing the repository\nwill not be able to see the objects (and if the pre-receive\nhook fails, those refs would become corrupted). For safety,\nany ref updates from within <b>pre-receive</b> are\nautomatically rejected.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-send-pack\">git-send-pack(1)</a>,\n<a href=\"https://man.page/7/gitnamespaces\">gitnamespaces(7)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#PRE-RECEIVE HOOK\">PRE-RECEIVE HOOK</a>","<a href=\"#UPDATE HOOK\">UPDATE HOOK</a>","<a href=\"#POST-RECEIVE HOOK\">POST-RECEIVE HOOK</a>","<a href=\"#POST-UPDATE HOOK\">POST-UPDATE HOOK</a>","<a href=\"#QUARANTINE ENVIRONMENT\">QUARANTINE ENVIRONMENT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}