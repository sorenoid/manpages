{"name":"python","body":"\n\n<h1 align=\"center\">PYTHON</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">python - an\ninterpreted, interactive, object-oriented programming\nlanguage</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>python</b> [\n<b>-B</b> ] [ <b>-b</b> ] [ <b>-d</b> ] [ <b>-E</b> ] [\n<b>-h</b> ] [ <b>-i</b> ] [ <b>-I</b> ] <br>\n[ <b>-m</b> <i>module-name</i> ] [ <b>-q</b> ] [ <b>-O</b> ]\n[ <b>-OO</b> ] [ <b>-s</b> ] [ <b>-S</b> ] [ <b>-u</b> ]\n<br>\n[ <b>-v</b> ] [ <b>-V</b> ] [ <b>-W</b> <i>argument</i> ] [\n<b>-x</b> ] [ [ <b>-X</b> <i>option</i> ] <b>-?</b> ] <br>\n[ <b>--check-hash-based-pycs</b> <i>default</i> |\n<i>always</i> | <i>never</i> ] <br>\n[ <b>-c</b> <i>command</i> | <i>script</i> | - ] [\n<i>arguments</i> ]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Python is an\ninterpreted, interactive, object-oriented programming\nlanguage that combines remarkable power with very clear\nsyntax. For an introduction to programming in Python, see\nthe Python Tutorial. The Python Library Reference documents\nbuilt-in and standard types, constants, functions and\nmodules. Finally, the Python Reference Manual describes the\nsyntax and semantics of the core language in (perhaps too)\nmuch detail. (These documents may be located via the\n<b>INTERNET RESOURCES</b> below; they may be installed on\nyour system as well.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Python&rsquo;s\nbasic power can be extended with your own modules written in\nC or C++. On most systems such modules may be dynamically\nloaded. Python is also adaptable as an extension language\nfor existing applications. See the internal documentation\nfor hints.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Documentation\nfor installed Python modules and packages can be viewed by\nrunning the <b>pydoc</b> program.</p>\n\n<h2>COMMAND LINE OPTIONS\n<a name=\"COMMAND LINE OPTIONS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>-B</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Don&rsquo;t write <i>.pyc</i>\nfiles on import. See also PYTHONDONTWRITEBYTECODE.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-b</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Issue warnings about str(bytes_instance),\nstr(bytearray_instance) and comparing bytes/bytearray with\nstr. (-bb: issue errors)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-c</b> <i>command</i></p>\n\n<p style=\"margin-left:22%;\">Specify the command to execute\n(see next section). This terminates the option list\n(following options are passed as arguments to the\ncommand).</p>\n\n<p style=\"margin-left:11%;\"><b>--check-hash-based-pycs</b>\n<i>mode</i></p>\n\n<p style=\"margin-left:22%;\">Configure how Python evaluates\nthe up-to-dateness of hash-based .pyc files.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-d</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Turn on parser debugging output (for expert only,\ndepending on compilation options).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-E</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Ignore environment variables like PYTHONPATH and\nPYTHONHOME that modify the behavior of the interpreter.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-h , -? , --help</b></p>\n\n<p style=\"margin-left:22%;\">Prints the usage for the\ninterpreter executable and exits.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-i</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>When a script is passed as first argument or the\n<b>-c</b> option is used, enter interactive mode after\nexecuting the script or the command. It does not read the\n$PYTHONSTARTUP file. This can be useful to inspect global\nvariables or a stack trace when a script raises an\nexception.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-I</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Run Python in isolated mode. This also implies <b>-E</b>\nand <b>-s</b>. In isolated mode sys.path contains neither\nthe script&rsquo;s directory nor the user&rsquo;s\nsite-packages directory. All PYTHON* environment variables\nare ignored, too. Further restrictions may be imposed to\nprevent the user from injecting malicious code.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-m</b>\n<i>module-name</i></p>\n\n<p style=\"margin-left:22%;\">Searches <i>sys.path</i> for\nthe named module and runs the corresponding <i>.py</i> file\nas a script. This terminates the option list (following\noptions are passed as arguments to the module).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-O</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Remove assert statements and any code conditional on the\nvalue of __debug__; augment the filename for compiled\n(bytecode) files by adding .opt-1 before the .pyc\nextension.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-OO</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Do <b>-O</b> and also discard docstrings; change the\nfilename for compiled (bytecode) files by adding .opt-2\nbefore the .pyc extension.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-q</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Do not print the version and copyright messages. These\nmessages are also suppressed in non-interactive mode.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-s</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Don&rsquo;t add user site directory to sys.path.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-S</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Disable the import of the module <i>site</i> and the\nsite-dependent manipulations of <i>sys.path</i> that it\nentails. Also disable these manipulations if <i>site</i> is\nexplicitly imported later.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-u</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Force the stdout and stderr streams to be unbuffered.\nThis option has no effect on the stdin stream.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Print a message each time a module is initialized,\nshowing the place (filename or built-in module) from which\nit is loaded. When given twice, print a message for each\nfile that is checked for when searching for a module. Also\nprovides information on module cleanup at exit.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-V , --version</b></p>\n\n<p style=\"margin-left:22%;\">Prints the Python version\nnumber of the executable and exits. When given twice, print\nmore information about the build.</p>\n\n<p style=\"margin-left:11%;\"><b>-W</b> <i>argument</i></p>\n\n<p style=\"margin-left:22%;\">Warning control. Python&rsquo;s\nwarning machinery by default prints warning messages to\n<i>sys.stderr</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The simplest\nsettings apply a particular action unconditionally to all\nwarnings emitted by a process (even those that are otherwise\nignored by default):</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-Wdefault #\nWarn once per call location <br>\n-Werror # Convert to exceptions <br>\n-Walways # Warn every time <br>\n-Wmodule # Warn once per calling module <br>\n-Wonce # Warn once per Python process <br>\n-Wignore # Never warn</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The action\nnames can be abbreviated as desired and the interpreter will\nresolve them to the appropriate action name. For example,\n<b>-Wi</b> is the same as <b>-Wignore .</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The full form\nof argument is:\n<i>action:message:category:module:lineno</i></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Empty fields\nmatch all values; trailing empty fields may be omitted. For\nexample <b>-W ignore::DeprecationWarning</b> ignores all\nDeprecationWarning warnings.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>action</i> field is as explained above but only applies\nto warnings that match the remaining fields.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>message</i> field must match the whole printed warning\nmessage; this match is case-insensitive.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>category</i> field matches the warning category (ex:\n&quot;DeprecationWarning&quot;). This must be a class name;\nthe match test whether the actual warning category of the\nmessage is a subclass of the specified warning category.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>module</i> field matches the (fully-qualified) module\nname; this match is case-sensitive.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>lineno</i> field matches the line number, where zero\nmatches all line numbers and is thus equivalent to an\nomitted line number.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Multiple\n<b>-W</b> options can be given; when a warning matches more\nthan one option, the action for the last matching option is\nperformed. Invalid <b>-W</b> options are ignored (though, a\nwarning message is printed about invalid options when the\nfirst warning is issued).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Warnings can\nalso be controlled using the <b>PYTHONWARNINGS</b>\nenvironment variable and from within a Python program using\nthe warnings module. For example, the\nwarnings.filterwarnings() function can be used to use a\nregular expression on the warning message.</p>\n\n<p style=\"margin-left:11%;\"><b>-X</b> <i>option</i></p>\n\n<p style=\"margin-left:22%;\">Set implementation specific\noption. The following options are available:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-X\nfaulthandler: enable faulthandler</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-X\nshowrefcount: output the total reference count and number of\nused <br>\nmemory blocks when the program finishes or after each\nstatement in the <br>\ninteractive interpreter. This only works on debug builds</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-X tracemalloc:\nstart tracing Python memory allocations using the <br>\ntracemalloc module. By default, only the most recent frame\nis stored in a <br>\ntraceback of a trace. Use -X tracemalloc=NFRAME to start\ntracing with a <br>\ntraceback limit of NFRAME frames</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-X importtime:\nshow how long each import takes. It shows module name, <br>\ncumulative time (including nested imports) and self time\n(excluding <br>\nnested imports). Note that its output may be broken in\nmulti-threaded <br>\napplication. Typical usage is python3 -X importtime -c\n&rsquo;import asyncio&rsquo;</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-X dev: enable\nCPython&rsquo;s &quot;development mode&quot;, introducing\nadditional runtime <br>\nchecks which are too expensive to be enabled by default. It\nwill not be <br>\nmore verbose than the default if the code is correct: new\nwarnings are <br>\nonly emitted when an issue is detected. Effect of the\ndeveloper mode: <br>\n* Add default warning filter, as -W default <br>\n* Install debug hooks on memory allocators: see the\nPyMem_SetupDebugHooks() C function <br>\n* Enable the faulthandler module to dump the Python\ntraceback on a crash <br>\n* Enable asyncio debug mode <br>\n* Set the dev_mode attribute of sys.flags to True <br>\n* io.IOBase destructor logs close() exceptions</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-X utf8: enable\nUTF-8 mode for operating system interfaces, overriding the\ndefault <br>\nlocale-aware mode. -X utf8=0 explicitly disables UTF-8 mode\n(even when it would <br>\notherwise activate automatically). See PYTHONUTF8 for more\ndetails</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-X\npycache_prefix=PATH: enable writing .pyc files to a parallel\ntree rooted at the <br>\ngiven directory instead of to the code tree.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-x</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Skip the first line of the source. This is intended for\na DOS specific hack only. Warning: the line numbers in error\nmessages will be off by one!</p></td></tr>\n</table>\n\n<h2>INTERPRETER INTERFACE\n<a name=\"INTERPRETER INTERFACE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The interpreter\ninterface resembles that of the UNIX shell: when called with\nstandard input connected to a tty device, it prompts for\ncommands and executes them until an EOF is read; when called\nwith a file name argument or with a file as standard input,\nit reads and executes a <i>script</i> from that file; when\ncalled with <b>-c</b> <i>command</i>, it executes the Python\nstatement(s) given as <i>command</i>. Here <i>command</i>\nmay contain multiple statements separated by newlines.\nLeading whitespace is significant in Python statements! In\nnon-interactive mode, the entire input is parsed before it\nis executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If available,\nthe script name and additional arguments thereafter are\npassed to the script in the Python variable <i>sys.argv</i>,\nwhich is a list of strings (you must first <i>import sys</i>\nto be able to access it). If no script name is given,\n<i>sys.argv[0]</i> is an empty string; if <b>-c</b> is used,\n<i>sys.argv[0]</i> contains the string\n<i>&rsquo;-c&rsquo;.</i> Note that options interpreted by\nthe Python interpreter itself are not placed in\n<i>sys.argv</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In interactive\nmode, the primary prompt is &rsquo;&gt;&gt;&gt;&rsquo;; the\nsecond prompt (which appears when a command is not complete)\nis &rsquo;...&rsquo;. The prompts can be changed by\nassignment to <i>sys.ps1</i> or <i>sys.ps2</i>. The\ninterpreter quits when it reads an EOF at a prompt. When an\nunhandled exception occurs, a stack trace is printed and\ncontrol returns to the primary prompt; in non-interactive\nmode, the interpreter exits after printing the stack trace.\nThe interrupt signal raises the <i>KeyboardInterrupt</i>\nexception; other UNIX signals are not caught (except that\nSIGPIPE is sometimes ignored, in favor of the <i>IOError</i>\nexception). Error messages are written to stderr.</p>\n\n<h2>FILES AND DIRECTORIES\n<a name=\"FILES AND DIRECTORIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These are\nsubject to difference depending on local installation\nconventions; ${prefix} and ${exec_prefix} are\ninstallation-dependent and should be interpreted as for GNU\nsoftware; they may be the same. On Debian GNU/{Hurd,Linux}\nthe default for both is <i>/usr</i>. <i><br>\n${exec_prefix}/bin/python</i></p>\n\n<p style=\"margin-left:22%;\">Recommended location of the\ninterpreter.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>${prefix}/lib/python&lt;version&gt;\n<br>\n${exec_prefix}/lib/python&lt;version&gt;</i></p>\n\n<p style=\"margin-left:22%;\">Recommended locations of the\ndirectories containing the standard modules.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>${prefix}/include/python&lt;version&gt;\n<br>\n${exec_prefix}/include/python&lt;version&gt;</i></p>\n\n<p style=\"margin-left:22%;\">Recommended locations of the\ndirectories containing the include files needed for\ndeveloping Python extensions and embedding the\ninterpreter.</p>\n\n<h2>ENVIRONMENT VARIABLES\n<a name=\"ENVIRONMENT VARIABLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">PYTHONHOME</p>\n\n<p style=\"margin-left:22%;\">Change the location of the\nstandard Python libraries. By default, the libraries are\nsearched in ${prefix}/lib/python&lt;version&gt; and\n${exec_prefix}/lib/python&lt;version&gt;, where ${prefix}\nand ${exec_prefix} are installation-dependent directories,\nboth defaulting to <i>/usr/local</i>. When $PYTHONHOME is\nset to a single directory, its value replaces both ${prefix}\nand ${exec_prefix}. To specify different values for these,\nset $PYTHONHOME to ${prefix}:${exec_prefix}.</p>\n\n<p style=\"margin-left:11%;\">PYTHONPATH</p>\n\n<p style=\"margin-left:22%;\">Augments the default search\npath for module files. The format is the same as the\nshell&rsquo;s $PATH: one or more directory pathnames\nseparated by colons. Non-existent directories are silently\nignored. The default search path is installation dependent,\nbut generally begins with\n${prefix}/lib/python&lt;version&gt; (see PYTHONHOME above).\nThe default search path is always appended to $PYTHONPATH.\nIf a script argument is given, the directory containing the\nscript is inserted in the path in front of $PYTHONPATH. The\nsearch path can be manipulated from within a Python program\nas the variable <i>sys.path</i>.</p>\n\n<p style=\"margin-left:11%;\">PYTHONPLATLIBDIR</p>\n\n<p style=\"margin-left:22%;\">Override sys.platlibdir.</p>\n\n<p style=\"margin-left:11%;\">PYTHONSTARTUP</p>\n\n<p style=\"margin-left:22%;\">If this is the name of a\nreadable file, the Python commands in that file are executed\nbefore the first prompt is displayed in interactive mode.\nThe file is executed in the same name space where\ninteractive commands are executed so that objects defined or\nimported in it can be used without qualification in the\ninteractive session. You can also change the prompts\n<i>sys.ps1</i> and <i>sys.ps2</i> in this file.</p>\n\n<p style=\"margin-left:11%;\">PYTHONOPTIMIZE</p>\n\n<p style=\"margin-left:22%;\">If this is set to a non-empty\nstring it is equivalent to specifying the <b>-O</b> option.\nIf set to an integer, it is equivalent to specifying\n<b>-O</b> multiple times.</p>\n\n<p style=\"margin-left:11%;\">PYTHONDEBUG</p>\n\n<p style=\"margin-left:22%;\">If this is set to a non-empty\nstring it is equivalent to specifying the <b>-d</b> option.\nIf set to an integer, it is equivalent to specifying\n<b>-d</b> multiple times.</p>\n\n<p style=\"margin-left:11%;\">PYTHONDONTWRITEBYTECODE</p>\n\n<p style=\"margin-left:22%;\">If this is set to a non-empty\nstring it is equivalent to specifying the <b>-B</b> option\n(don&rsquo;t try to write <i>.pyc</i> files).</p>\n\n<p style=\"margin-left:11%;\">PYTHONINSPECT</p>\n\n<p style=\"margin-left:22%;\">If this is set to a non-empty\nstring it is equivalent to specifying the <b>-i</b>\noption.</p>\n\n<p style=\"margin-left:11%;\">PYTHONIOENCODING</p>\n\n<p style=\"margin-left:22%;\">If this is set before running\nthe interpreter, it overrides the encoding used for\nstdin/stdout/stderr, in the syntax\n<i>encodingname</i><b>:</b><i>errorhandler</i> The\n<i>errorhandler</i> part is optional and has the same\nmeaning as in str.encode. For stderr, the\n<i>errorhandler</i> <br>\npart is ignored; the handler will always be\n&acute;backslashreplace&acute;.</p>\n\n<p style=\"margin-left:11%;\">PYTHONNOUSERSITE</p>\n\n<p style=\"margin-left:22%;\">If this is set to a non-empty\nstring it is equivalent to specifying the <b>-s</b> option\n(Don&rsquo;t add the user site directory to sys.path).</p>\n\n<p style=\"margin-left:11%;\">PYTHONUNBUFFERED</p>\n\n<p style=\"margin-left:22%;\">If this is set to a non-empty\nstring it is equivalent to specifying the <b>-u</b>\noption.</p>\n\n<p style=\"margin-left:11%;\">PYTHONVERBOSE</p>\n\n<p style=\"margin-left:22%;\">If this is set to a non-empty\nstring it is equivalent to specifying the <b>-v</b> option.\nIf set to an integer, it is equivalent to specifying\n<b>-v</b> multiple times.</p>\n\n<p style=\"margin-left:11%;\">PYTHONWARNINGS</p>\n\n<p style=\"margin-left:22%;\">If this is set to a\ncomma-separated string it is equivalent to specifying the\n<b>-W</b> option for each separate value.</p>\n\n<p style=\"margin-left:11%;\">PYTHONHASHSEED</p>\n\n<p style=\"margin-left:22%;\">If this variable is set to\n&quot;random&quot;, a random value is used to seed the\nhashes of str and bytes objects.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\nPYTHONHASHSEED is set to an integer value, it is used as a\nfixed seed for generating the hash() of the types covered by\nthe hash randomization. Its purpose is to allow repeatable\nhashing, such as for selftests for the interpreter itself,\nor to allow a cluster of python processes to share hash\nvalues.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The integer\nmust be a decimal number in the range [0,4294967295].\nSpecifying the value 0 will disable hash randomization.</p>\n\n<p style=\"margin-left:11%;\">PYTHONMALLOC</p>\n\n<p style=\"margin-left:22%;\">Set the Python memory\nallocators and/or install debug hooks. The available memory\nallocators are <i>malloc</i> and <i>pymalloc</i>. The\navailable debug hooks are <i>debug</i>, <i>malloc_debug</i>,\nand <i>pymalloc_debug</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When Python is\ncompiled in debug mode, the default is <i>pymalloc_debug</i>\nand the debug hooks are automatically used. Otherwise, the\ndefault is <i>pymalloc</i>.</p>\n\n<p style=\"margin-left:11%;\">PYTHONMALLOCSTATS</p>\n\n<p style=\"margin-left:22%;\">If set to a non-empty string,\nPython will print statistics of the pymalloc memory\nallocator every time a new pymalloc object arena is created,\nand on shutdown.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This variable\nis ignored if the $<b>PYTHONMALLOC</b> environment variable\nis used to force the <a href=\"https://man.page/3/malloc\">malloc(3)</a> allocator of the C\nlibrary, or if Python is configured without pymalloc\nsupport.</p>\n\n<p style=\"margin-left:11%;\">PYTHONASYNCIODEBUG</p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset to a non-empty string, enable the debug mode of the\nasyncio module.</p>\n\n<p style=\"margin-left:11%;\">PYTHONTRACEMALLOC</p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset to a non-empty string, start tracing Python memory\nallocations using the tracemalloc module.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value of\nthe variable is the maximum number of frames stored in a\ntraceback of a trace. For example,\n<i>PYTHONTRACEMALLOC=1</i> stores only the most recent\nframe.</p>\n\n<p style=\"margin-left:11%;\">PYTHONFAULTHANDLER</p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset to a non-empty string, <i>faulthandler.enable()</i> is\ncalled at startup: install a handler for SIGSEGV, SIGFPE,\nSIGABRT, SIGBUS and SIGILL signals to dump the Python\ntraceback.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This is\nequivalent to the <b>-X faulthandler</b> option.</p>\n\n<p style=\"margin-left:11%;\">PYTHONEXECUTABLE</p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset, <i>sys.argv[0]</i> will be set to its value instead of\nthe value got through the C runtime. Only works on Mac OS\nX.</p>\n\n<p style=\"margin-left:11%;\">PYTHONUSERBASE</p>\n\n<p style=\"margin-left:22%;\">Defines the user base\ndirectory, which is used to compute the path of the user\n<i>site-packages</i> directory and Distutils installation\npaths for <i>python setup.py install --user</i>.</p>\n\n<p style=\"margin-left:11%;\">PYTHONPROFILEIMPORTTIME</p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset to a non-empty string, Python will show how long each\nimport takes. This is exactly equivalent to setting <b>-X\nimporttime</b> on the command line.</p>\n\n<p style=\"margin-left:11%;\">PYTHONBREAKPOINT</p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset to 0, it disables the default debugger. It can be set to\nthe callable of your debugger of choice.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Debug-mode\nvariables</b> <br>\nSetting these variables only has an effect in a debug build\nof Python, that is, if Python was configured with the\n<b>--with-pydebug</b> build option. <br>\nPYTHONTHREADDEBUG</p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset, Python will print threading debug info. The feature is\ndeprecated in Python 3.10 and will be removed in Python\n3.12.</p>\n\n<p style=\"margin-left:11%;\">PYTHONDUMPREFS</p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset, Python will dump objects and reference counts still\nalive after shutting down the interpreter.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Python\nSoftware Foundation: https://www.python.org/psf/</p>\n\n<h2>INTERNET RESOURCES\n<a name=\"INTERNET RESOURCES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Main website:\nhttps://www.python.org/ <br>\nDocumentation: https://docs.python.org/ <br>\nDeveloper resources: https://devguide.python.org/ <br>\nDownloads: https://www.python.org/downloads/ <br>\nModule repository: https://pypi.org/ <br>\nNewsgroups: comp.lang.python, comp.lang.python.announce</p>\n\n<h2>LICENSING\n<a name=\"LICENSING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Python is\ndistributed under an Open Source license. See the file\n&quot;LICENSE&quot; in the Python source distribution for\ninformation on terms &amp; conditions for accessing and\notherwise using Python and for a DISCLAIMER OF ALL\nWARRANTIES.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMAND LINE OPTIONS\">COMMAND LINE OPTIONS</a>","<a href=\"#INTERPRETER INTERFACE\">INTERPRETER INTERFACE</a>","<a href=\"#FILES AND DIRECTORIES\">FILES AND DIRECTORIES</a>","<a href=\"#ENVIRONMENT VARIABLES\">ENVIRONMENT VARIABLES</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#INTERNET RESOURCES\">INTERNET RESOURCES</a>","<a href=\"#LICENSING\">LICENSING</a>"]}