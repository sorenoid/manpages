{"name":"git-blame","body":"\n\n<h1 align=\"center\">GIT-BLAME</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-blame -\nShow what revision and author last modified each line of a\nfile</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nblame</i> [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e]\n[-p] [-w] [--incremental] <br>\n[-L &lt;range&gt;] [-S &lt;revs-file&gt;] [-M] [-C] [-C]\n[-C] [--since=&lt;date&gt;] <br>\n[--ignore-rev &lt;rev&gt;] [--ignore-revs-file &lt;file&gt;]\n<br>\n[--color-lines] [--color-by-age] [--progress]\n[--abbrev=&lt;n&gt;] <br>\n[&lt;rev&gt; | --contents &lt;file&gt; | --reverse\n&lt;rev&gt;..&lt;rev&gt;] [--] &lt;file&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Annotates each\nline in the given file with information from the revision\nwhich last modified the line. Optionally, start annotating\nfrom the given revision.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When specified\none or more times, <b>-L</b> restricts annotation to the\nrequested lines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The origin of\nlines is automatically followed across whole-file renames\n(currently there is no option to turn the rename-following\noff). To follow lines moved from one file to another, or to\nfollow lines that were copied and pasted from another file,\netc., see the <b>-C</b> and <b>-M</b> options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The report does\nnot tell you anything about lines which have been deleted or\nreplaced; you need to use a tool such as <i>git diff</i> or\nthe &quot;pickaxe&quot; interface briefly mentioned in the\nfollowing paragraph.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Apart from\nsupporting file annotation, Git also supports searching the\ndevelopment history for when a code snippet occurred in a\nchange. This makes it possible to track when a code snippet\nwas added to a file, moved or copied between files, and\neventually deleted or replaced. It works by searching for a\ntext string in the diff. A small example of the pickaxe\ninterface that searches for <b>blame_usage</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git log\n--pretty=oneline -S'blame_usage' <br>\n5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S\n&lt;ancestry-file&gt; <br>\nea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the\noutput</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-b</p>\n\n<p style=\"margin-left:17%;\">Show blank SHA-1 for boundary\ncommits. This can also be controlled via the\n<b>blame.blankBoundary</b> config option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--root</p>\n\n<p style=\"margin-left:17%;\">Do not treat root commits as\nboundaries. This can also be controlled via the\n<b>blame.showRoot</b> config option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-stats</p>\n\n<p style=\"margin-left:17%;\">Include additional statistics\nat the end of blame output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-L\n&lt;start&gt;,&lt;end&gt;, -L :&lt;funcname&gt;</p>\n\n<p style=\"margin-left:17%;\">Annotate only the line range\ngiven by <i>&lt;start&gt;,&lt;end&gt;</i>, or by the\nfunction name regex <i>&lt;funcname&gt;</i>. May be\nspecified multiple times. Overlapping ranges are\nallowed.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>&lt;start&gt;</i>\nand <i>&lt;end&gt;</i> are optional. <b>-L &lt;start&gt;</b>\nor <b>-L &lt;start&gt;,</b> spans from <i>&lt;start&gt;</i>\nto end of file. <b>-L ,&lt;end&gt;</b> spans from start of\nfile to <i>&lt;end&gt;</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>&lt;start&gt;</i>\nand <i>&lt;end&gt;</i> can take one of these forms:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nnumber</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">If\n<i>&lt;start&gt;</i> or <i>&lt;end&gt;</i> is a number, it\nspecifies an absolute line number (lines count from 1).</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>/regex/</b></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This form will\nuse the first line matching the given POSIX regex. If\n<i>&lt;start&gt;</i> is a regex, it will search from the end\nof the previous <b>-L</b> range, if any, otherwise from the\nstart of file. If <i>&lt;start&gt;</i> is <b>^/regex/</b>,\nit will search from the start of file. If <i>&lt;end&gt;</i>\nis a regex, it will search starting at the line given by\n<i>&lt;start&gt;</i>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; +offset\nor -offset</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is only\nvalid for <i>&lt;end&gt;</i> and will specify a number of\nlines before or after the line given by\n<i>&lt;start&gt;</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>:&lt;funcname&gt;</b> is given in place of\n<i>&lt;start&gt;</i> and <i>&lt;end&gt;</i>, it is a regular\nexpression that denotes the range from the first funcname\nline that matches <i>&lt;funcname&gt;</i>, up to the next\nfuncname line. <b>:&lt;funcname&gt;</b> searches from the\nend of the previous <b>-L</b> range, if any, otherwise from\nthe start of file. <b>^:&lt;funcname&gt;</b> searches from\nthe start of file. The function names are determined in the\nsame way as <b>git diff</b> works out patch hunk headers\n(see <i>Defining a custom hunk-header</i> in\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-l</p>\n\n<p style=\"margin-left:17%;\">Show long rev (Default:\noff).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-t</p>\n\n<p style=\"margin-left:17%;\">Show raw timestamp (Default:\noff).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-S\n&lt;revs-file&gt;</p>\n\n<p style=\"margin-left:17%;\">Use revisions from revs-file\ninstead of calling <a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reverse\n&lt;rev&gt;..&lt;rev&gt;</p>\n\n<p style=\"margin-left:17%;\">Walk history forward instead of\nbackward. Instead of showing the revision in which a line\nappeared, this shows the last revision in which a line has\nexisted. This requires a range of revision like START..END\nwhere the path to blame exists in START. <b>git blame\n--reverse START</b> is taken as <b>git blame --reverse\nSTART..HEAD</b> for convenience.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--first-parent</p>\n\n<p style=\"margin-left:17%;\">Follow only the first parent\ncommit upon seeing a merge commit. This option can be used\nto determine when a line was introduced to a particular\nintegration branch, rather than when it was introduced to\nthe history overall.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-p,\n--porcelain</p>\n\n<p style=\"margin-left:17%;\">Show in a format designed for\nmachine consumption.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--line-porcelain</p>\n\n<p style=\"margin-left:17%;\">Show the porcelain format, but\noutput commit information for each line, not just the first\ntime a commit is referenced. Implies --porcelain.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--incremental</p>\n\n<p style=\"margin-left:17%;\">Show the result incrementally\nin a format designed for machine consumption.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--encoding=&lt;encoding&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies the encoding used to\noutput author names and commit summaries. Setting it to\n<b>none</b> makes blame output unconverted data. For more\ninformation see the discussion about encoding in the\n<a href=\"https://man.page/1/git-log\">git-log(1)</a> manual page.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--contents\n&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">When &lt;rev&gt; is not\nspecified, the command annotates the changes starting\nbackwards from the working tree copy. This flag makes the\ncommand pretend as if the working tree copy has the contents\nof the named file (specify <b>-</b> to make the command read\nfrom the standard input).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--date\n&lt;format&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies the format used to\noutput dates. If --date is not provided, the value of the\nblame.date config variable is used. If the blame.date config\nvariable is also not set, the iso format is used. For\nsupported values, see the discussion of the --date option at\n<a href=\"https://man.page/1/git-log\">git-log(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]progress</p>\n\n<p style=\"margin-left:17%;\">Progress status is reported on\nthe standard error stream by default when it is attached to\na terminal. This flag enables progress reporting even if not\nattached to a terminal. Can&rsquo;t use <b>--progress</b>\ntogether with <b>--porcelain</b> or\n<b>--incremental</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-M[&lt;num&gt;]</p>\n\n<p style=\"margin-left:17%;\">Detect moved or copied lines\nwithin a file. When a commit moves or copies a block of\nlines (e.g. the original file has A and then B, and the\ncommit changes it to B and then A), the traditional\n<i>blame</i> algorithm notices only half of the movement and\ntypically blames the lines that were moved up (i.e. B) to\nthe parent and assigns blame to the lines that were moved\ndown (i.e. A) to the child commit. With this option, both\ngroups of lines are blamed on the parent by running extra\npasses of inspection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;num&gt; is\noptional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as\nmoving/copying within a file for it to associate those lines\nwith the parent commit. The default value is 20.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-C[&lt;num&gt;]</p>\n\n<p style=\"margin-left:17%;\">In addition to <b>-M</b>,\ndetect lines moved or copied from other files that were\nmodified in the same commit. This is useful when you\nreorganize your program and move code around across files.\nWhen this option is given twice, the command additionally\nlooks for copies from other files in the commit that creates\nthe file. When this option is given three times, the command\nadditionally looks for copies from other files in any\ncommit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;num&gt; is\noptional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as\nmoving/copying between files for it to associate those lines\nwith the parent commit. And the default value is 40. If\nthere are more than one <b>-C</b> options given, the\n&lt;num&gt; argument of the last <b>-C</b> will take\neffect.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-rev\n&lt;rev&gt;</p>\n\n<p style=\"margin-left:17%;\">Ignore changes made by the\nrevision when assigning blame, as if the change never\nhappened. Lines that were changed or added by an ignored\ncommit will be blamed on the previous commit that changed\nthat line or nearby lines. This option may be specified\nmultiple times to ignore more than one revision. If the\n<b>blame.markIgnoredLines</b> config option is set, then\nlines that were changed by an ignored commit and attributed\nto another commit will be marked with a <b>?</b> in the\nblame output. If the <b>blame.markUnblamableLines</b> config\noption is set, then those lines touched by an ignored commit\nthat we could not attribute to another revision are marked\nwith a <i>*</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-revs-file\n&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Ignore revisions listed in\n<b>file</b>, which must be in the same format as an\n<b>fsck.skipList</b>. This option may be repeated, and these\nfiles will be processed after any files specified with the\n<b>blame.ignoreRevsFile</b> config option. An empty file\nname, <b>&quot;&quot;</b>, will clear the list of revs from\npreviously processed files.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--color-lines</p>\n\n<p style=\"margin-left:17%;\">Color line annotations in the\ndefault format differently if they come from the same commit\nas the preceding line. This makes it easier to distinguish\ncode blocks introduced by different commits. The color\ndefaults to cyan and can be adjusted using the\n<b>color.blame.repeatedLines</b> config option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--color-by-age</p>\n\n<p style=\"margin-left:17%;\">Color line annotations\ndepending on the age of the line in the default format. The\n<b>color.blame.highlightRecent</b> config option controls\nwhat color is used for each range of age.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-h</p>\n\n<p style=\"margin-left:17%;\">Show help message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-c</p>\n\n<p style=\"margin-left:17%;\">Use the same output mode as\n<a href=\"https://man.page/1/git-annotate\">git-annotate(1)</a> (Default: off).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--score-debug</p>\n\n<p style=\"margin-left:17%;\">Include debugging information\nrelated to the movement of lines between files (see\n<b>-C</b>) and lines moved within a file (see <b>-M</b>).\nThe first number listed is the score. This is the number of\nalphanumeric characters detected as having been moved\nbetween or within files. This must be above a certain\nthreshold for <i>git blame</i> to consider those lines of\ncode to have been moved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f,\n--show-name</p>\n\n<p style=\"margin-left:17%;\">Show the filename in the\noriginal commit. By default the filename is shown if there\nis any line that came from a file with a different name, due\nto rename detection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--show-number</p>\n\n<p style=\"margin-left:17%;\">Show the line number in the\noriginal commit (Default: off).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s</p>\n\n<p style=\"margin-left:17%;\">Suppress the author name and\ntimestamp from the output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-e,\n--show-email</p>\n\n<p style=\"margin-left:17%;\">Show the author email instead\nof author name (Default: off). This can also be controlled\nvia the <b>blame.showEmail</b> config option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-w</p>\n\n<p style=\"margin-left:17%;\">Ignore whitespace when\ncomparing the parent&rsquo;s version and the child&rsquo;s\nto find where the lines came from.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--abbrev=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of using the default\n7+1 hexadecimal digits as the abbreviated object name, use\n&lt;m&gt;+1 digits, where &lt;m&gt; is at least &lt;n&gt;\nbut ensures the commit object names are unique. Note that 1\ncolumn is used for a caret to mark the boundary commit.</p>\n\n<h2>THE DEFAULT FORMAT\n<a name=\"THE DEFAULT FORMAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When neither\n<b>--porcelain</b> nor <b>--incremental</b> option is\nspecified, <b>git blame</b> will output annotation for each\nline with:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nabbreviated object name for the commit the line came\nfrom;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; author\nident (by default author name and date, unless <b>-s</b> or\n<b>-e</b> is specified); and</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; line\nnumber</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">before the line\ncontents.</p>\n\n<h2>THE PORCELAIN FORMAT\n<a name=\"THE PORCELAIN FORMAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this format,\neach line is output after a header; the header at the\nminimum has the first line which has:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; 40-byte\nSHA-1 of the commit the line is attributed to;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; the line\nnumber of the line in the original file;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; the line\nnumber of the line in the final file;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; on a\nline that starts a group of lines from a different commit\nthan the previous one, the number of lines in this group. On\nsubsequent lines this field is absent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This header\nline is followed by the following information at least once\nfor each commit:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; the\nauthor name (&quot;author&quot;), email\n(&quot;author-mail&quot;), time (&quot;author-time&quot;),\nand time zone (&quot;author-tz&quot;); similarly for\ncommitter.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; the\nfilename in the commit that the line is attributed to.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; the\nfirst line of the commit log message\n(&quot;summary&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The contents of\nthe actual line is output after the above header, prefixed\nby a TAB. This is to allow adding more header elements\nlater.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The porcelain\nformat generally suppresses commit information that has\nalready been seen. For example, two lines that are blamed to\nthe same commit will both be shown, but the details for that\ncommit will be shown only once. This is more efficient, but\nmay require more state be kept by the reader. The\n<b>--line-porcelain</b> option can be used to output full\ncommit information for each line, allowing simpler (but less\nefficient) usage like:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># count the\nnumber of lines attributed to each author <br>\ngit blame --line-porcelain file | <br>\nsed -n 's/^author //p' | <br>\nsort | uniq -c | sort -rn</p>\n\n<h2>SPECIFYING RANGES\n<a name=\"SPECIFYING RANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unlike <i>git\nblame</i> and <i>git annotate</i> in older versions of git,\nthe extent of the annotation can be limited to both line\nranges and revision ranges. The <b>-L</b> option, which\nlimits annotation to a range of lines, may be specified\nmultiple times.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When you are\ninterested in finding the origin for lines 40-60 for file\n<b>foo</b>, you can use the <b>-L</b> option like so (they\nmean the same thing &mdash; both ask for 21 lines starting\nat line 40):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git blame -L\n40,60 foo <br>\ngit blame -L 40,+21 foo</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also you can\nuse a regular expression to specify the line range:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git blame -L\n'/^sub hello {/,/^}$/' foo</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">which limits\nthe annotation to the body of the <b>hello</b>\nsubroutine.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When you are\nnot interested in changes older than version v2.6.18, or\nchanges older than 3 weeks, you can use revision range\nspecifiers similar to <i>git rev-list</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git blame\nv2.6.18.. -- foo <br>\ngit blame --since=3.weeks -- foo</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When revision\nrange specifiers are used to limit the annotation, lines\nthat have not changed since the range boundary (either the\ncommit v2.6.18 or the most recent commit that is more than 3\nweeks old in the above example) are blamed for that range\nboundary commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A particularly\nuseful way is to see if an added file has lines created by\ncopy-and-paste from existing files. Sometimes this indicates\nthat the developer was being sloppy and did not refactor the\ncode properly. You can first find the commit that introduced\nthe file with:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git log\n--diff-filter=A --pretty=short -- foo</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and then\nannotate the change between the commit and its parents,\nusing <b>commit^!</b> notation:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git blame -C -C\n-f $commit^! -- foo</p>\n\n<h2>INCREMENTAL OUTPUT\n<a name=\"INCREMENTAL OUTPUT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When called\nwith <b>--incremental</b> option, the command outputs the\nresult as it is built. The output generally will talk about\nlines touched by more recent commits first (i.e. the lines\nwill be annotated out of order) and is meant to be used by\ninteractive viewers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The output\nformat is similar to the Porcelain format, but it does not\ncontain the actual lines from the file that is being\nannotated.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. Each blame\nentry always starts with a line of:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;40-byte hex\nsha1&gt; &lt;sourceline&gt; &lt;resultline&gt;\n&lt;num_lines&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Line numbers\ncount from 1.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. The first\ntime that a commit shows up in the stream, it has various\nother information about it printed out with a one-word tag\nat the beginning of each line describing the extra commit\ninformation (author, email, committer, dates, summary,\netc.).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. Unlike the\nPorcelain format, the filename information is always given\nand terminates the entry:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">&quot;filename&quot;\n&lt;whitespace-quoted-filename-goes-here&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">and thus it is\nreally quite easy to parse for some line- and word-oriented\nparser (which should be quite natural for most scripting\nlanguages).</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nFor people who do parsing: to make it more robust, just\nignore any lines between the first and last one\n(&quot;&lt;sha1&gt;&quot; and &quot;filename&quot; lines)\nwhere you do not recognize the tag words (or care about that\nparticular one) at the beginning of the &quot;extended\ninformation&quot; lines. That way, if there is ever added\ninformation (like the commit encoding or extended commit\ncommentary), a blame viewer will not care.</p>\n\n<h2>MAPPING AUTHORS\n<a name=\"MAPPING AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>See\n<a href=\"https://man.page/5/gitmailmap\">gitmailmap(5)</a>.</big></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><a href=\"https://man.page/1/git-annotate\">git-annotate(1)</a></big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#THE DEFAULT FORMAT\">THE DEFAULT FORMAT</a>","<a href=\"#THE PORCELAIN FORMAT\">THE PORCELAIN FORMAT</a>","<a href=\"#SPECIFYING RANGES\">SPECIFYING RANGES</a>","<a href=\"#INCREMENTAL OUTPUT\">INCREMENTAL OUTPUT</a>","<a href=\"#MAPPING AUTHORS\">MAPPING AUTHORS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}