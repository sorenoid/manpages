{"name":"unshare","description":"unshare - run\nprogram in new namespaces","body":"\n\n<h1 align=\"center\">UNSHARE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">unshare - run\nprogram in new namespaces</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unshare</b>\n[options] [<i>program</i> [<i>arguments</i>]]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>unshare</b> command creates new namespaces (as specified\nby the command-line options described below) and then\nexecutes the specified <i>program</i>. If <i>program</i> is\nnot given, then &quot;${SHELL}&quot; is run (default:\n<i>/bin/sh</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, a\nnew namespace persists only as long as it has member\nprocesses. A new namespace can be made persistent even when\nit has no member processes by bind mounting\n/proc/<i>pid</i>/ns/<i>type</i> files to a filesystem path.\nA namespace that has been made persistent in this way can\nsubsequently be entered with <a href=\"https://man.page/1/nsenter\">nsenter(1)</a> even after\nthe <i>program</i> terminates (except PID namespaces where a\npermanently running init process is required). Once a\npersistent namespace is no longer needed, it can be\nunpersisted by using <b>umount</b>(8) to remove the bind\nmount. See the EXAMPLES section for more details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unshare</b>\nsince util-linux version 2.36 uses\n<i>/proc/[pid]/ns/pid_for_children</i> and\n<i>/proc/[pid]/ns/time_for_children</i> files for persistent\nPID and TIME namespaces. This change requires Linux kernel\n4.17 or newer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ntypes of namespaces can be created with <b>unshare</b>:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mount\nnamespace</b></p>\n\n<p style=\"margin-left:17%;\">Mounting and unmounting\nfilesystems will not affect the rest of the system, except\nfor filesystems which are explicitly marked as shared (with\n<b>mount --make-shared</b>; see <i>/proc/self/mountinfo</i>\nor <b>findmnt -o+PROPAGATION</b> for the <b>shared</b>\nflags). For further details, see\n<a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>unshare</b>\nsince util-linux version 2.27 automatically sets propagation\nto <b>private</b> in a new mount namespace to make sure that\nthe new namespace is really unshared. It&rsquo;s possible to\ndisable this feature with option <b>--propagation\nunchanged</b>. Note that <b>private</b> is the kernel\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>UTS\nnamespace</b></p>\n\n<p style=\"margin-left:17%;\">Setting hostname or domainname\nwill not affect the rest of the system. For further details,\nsee <a href=\"https://man.page/7/uts_namespaces\">uts_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>IPC\nnamespace</b></p>\n\n<p style=\"margin-left:17%;\">The process will have an\nindependent namespace for POSIX message queues as well as\nSystem V message queues, semaphore sets and shared memory\nsegments. For further details, see\n<a href=\"https://man.page/7/ipc_namespaces\">ipc_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>network\nnamespace</b></p>\n\n<p style=\"margin-left:17%;\">The process will have\nindependent IPv4 and IPv6 stacks, IP routing tables,\nfirewall rules, the <i>/proc/net</i> and\n<i>/sys/class/net</i> directory trees, sockets, etc. For\nfurther details, see <a href=\"https://man.page/7/network_namespaces\">network_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>PID\nnamespace</b></p>\n\n<p style=\"margin-left:17%;\">Children will have a distinct\nset of PID-to-process mappings from their parent. For\nfurther details, see <a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cgroup\nnamespace</b></p>\n\n<p style=\"margin-left:17%;\">The process will have a\nvirtualized view of <i>/proc/self/cgroup</i>, and new cgroup\nmounts will be rooted at the namespace cgroup root. For\nfurther details, see <a href=\"https://man.page/7/cgroup_namespaces\">cgroup_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>user\nnamespace</b></p>\n\n<p style=\"margin-left:17%;\">The process will have a\ndistinct set of UIDs, GIDs and capabilities. For further\ndetails, see <a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>time\nnamespace</b></p>\n\n<p style=\"margin-left:17%;\">The process can have a distinct\nview of <b>CLOCK_MONOTONIC</b> and/or <b>CLOCK_BOOTTIME</b>\nwhich can be changed using <i>/proc/self/timens_offsets</i>.\nFor further details, see <a href=\"https://man.page/7/time_namespaces\">time_namespaces(7)</a>.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-i</b>,\n<b>--ipc</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Unshare the IPC namespace. If\n<i>file</i> is specified, then a persistent namespace is\ncreated by a bind mount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-m</b>,\n<b>--mount</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Unshare the mount namespace. If\n<i>file</i> is specified, then a persistent namespace is\ncreated by a bind mount. Note that <i>file</i> must be\nlocated on a mount whose propagation type is not\n<b>shared</b> (or an error results). Use the command\n<b>findmnt -o+PROPAGATION</b> when not sure about the\ncurrent setting. See also the examples below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-n</b>,\n<b>--net</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Unshare the network namespace.\nIf <i>file</i> is specified, then a persistent namespace is\ncreated by a bind mount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-p</b>,\n<b>--pid</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Unshare the PID namespace. If\n<i>file</i> is specified, then a persistent namespace is\ncreated by a bind mount. (Creation of a persistent PID\nnamespace will fail if the <b>--fork</b> option is not also\nspecified.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See also the\n<b>--fork</b> and <b>--mount-proc</b> options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-u</b>,\n<b>--uts</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Unshare the UTS namespace. If\n<i>file</i> is specified, then a persistent namespace is\ncreated by a bind mount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-U</b>,\n<b>--user</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Unshare the user namespace. If\n<i>file</i> is specified, then a persistent namespace is\ncreated by a bind mount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-C</b>,\n<b>--cgroup</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Unshare the cgroup namespace.\nIf <i>file</i> is specified, then persistent namespace is\ncreated by bind mount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-T</b>,\n<b>--time</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:17%;\">Unshare the time namespace. If\n<i>file</i> is specified, then a persistent namespace is\ncreated by a bind mount. The <b>--monotonic</b> and\n<b>--boottime</b> options can be used to specify the\ncorresponding offset in the time namespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-f</b>,\n<b>--fork</b></p>\n\n<p style=\"margin-left:17%;\">Fork the specified\n<i>program</i> as a child process of <b>unshare</b> rather\nthan running it directly. This is useful when creating a new\nPID namespace. Note that when <b>unshare</b> is waiting for\nthe child process, then it ignores <b>SIGINT</b> and\n<b>SIGTERM</b> and does not forward any signals to the\nchild. It is necessary to send signals to the child\nprocess.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--keep-caps</b></p>\n\n<p style=\"margin-left:17%;\">When the <b>--user</b> option\nis given, ensure that capabilities granted in the user\nnamespace are preserved in the child process.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--kill-child</b>[<b>=</b><i>signame</i>]</p>\n\n<p style=\"margin-left:17%;\">When <b>unshare</b> terminates,\nhave <i>signame</i> be sent to the forked child process.\nCombined with <b>--pid</b> this allows for an easy and\nreliable killing of the entire process tree below\n<b>unshare</b>. If not given, <i>signame</i> defaults to\n<b>SIGKILL</b>. This option implies <b>--fork</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--mount-proc</b>[<b>=</b><i>mountpoint</i>]</p>\n\n<p style=\"margin-left:17%;\">Just before running the\nprogram, mount the proc filesystem at <i>mountpoint</i>\n(default is <i>/proc</i>). This is useful when creating a\nnew PID namespace. It also implies creating a new mount\nnamespace since the <i>/proc</i> mount would otherwise mess\nup existing programs on the system. The new proc filesystem\nis explicitly mounted as private (with\n<b>MS_PRIVATE</b>|<b>MS_REC</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--map-user=</b><i>uid|name</i></p>\n\n<p style=\"margin-left:17%;\">Run the program only after the\ncurrent effective user ID has been mapped to <i>uid</i>. If\nthis option is specified multiple times, the last occurrence\ntakes precedence. This option implies <b>--user</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--map-group=</b><i>gid|name</i></p>\n\n<p style=\"margin-left:17%;\">Run the program only after the\ncurrent effective group ID has been mapped to <i>gid</i>. If\nthis option is specified multiple times, the last occurrence\ntakes precedence. This option implies\n<b>--setgroups=deny</b> and <b>--user</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-r</b>,\n<b>--map-root-user</b></p>\n\n<p style=\"margin-left:17%;\">Run the program only after the\ncurrent effective user and group IDs have been mapped to the\nsuperuser UID and GID in the newly created user namespace.\nThis makes it possible to conveniently gain capabilities\nneeded to manage various aspects of the newly created\nnamespaces (such as configuring interfaces in the network\nnamespace or mounting filesystems in the mount namespace)\neven when run unprivileged. As a mere convenience feature,\nit does not support more sophisticated use cases, such as\nmapping multiple ranges of UIDs and GIDs. This option\nimplies <b>--setgroups=deny</b> and <b>--user</b>. This\noption is equivalent to <b>--map-user=0\n--map-group=0</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-c</b>,\n<b>--map-current-user</b></p>\n\n<p style=\"margin-left:17%;\">Run the program only after the\ncurrent effective user and group IDs have been mapped to the\nsame UID and GID in the newly created user namespace. This\noption implies <b>--setgroups=deny</b> and <b>--user</b>.\nThis option is equivalent to <b>--map-user=$(id -ru)\n--map-group=$(id -rg)</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--propagation\nprivate</b>|<b>shared</b>|<b>slave</b>|<b>unchanged</b></p>\n\n<p style=\"margin-left:17%;\">Recursively set the mount\npropagation flag in the new mount namespace. The default is\nto set the propagation to <i>private</i>. It is possible to\ndisable this feature with the argument <b>unchanged</b>. The\noption is silently ignored when the mount namespace\n(<b>--mount</b>) is not requested.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--setgroups\nallow</b>|<b>deny</b></p>\n\n<p style=\"margin-left:17%;\">Allow or deny the\n<a href=\"https://man.page/2/setgroups\">setgroups(2)</a> system call in a user namespace.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To be able to\ncall <a href=\"https://man.page/2/setgroups\">setgroups(2)</a>, the calling process must at least\nhave <b>CAP_SETGID</b>. But since Linux 3.19 a further\nrestriction applies: the kernel gives permission to call\n<a href=\"https://man.page/2/setgroups\">setgroups(2)</a> only after the GID map\n(<b>/proc/</b><i>pid</i>*/gid_map*) has been set. The GID\nmap is writable by root when <a href=\"https://man.page/2/setgroups\">setgroups(2)</a> is enabled\n(i.e., <b>allow</b>, the default), and the GID map becomes\nwritable by unprivileged processes when <a href=\"https://man.page/2/setgroups\">setgroups(2)</a>\nis permanently disabled (with <b>deny</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-R</b>,\n<b>--root=</b><i>dir</i></p>\n\n<p style=\"margin-left:17%;\">run the command with root\ndirectory set to <i>dir</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-w</b>,\n<b>--wd=</b><i>dir</i></p>\n\n<p style=\"margin-left:17%;\">change working directory to\n<i>dir</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-S</b>,\n<b>--setuid</b> <i>uid</i></p>\n\n<p style=\"margin-left:17%;\">Set the user ID which will be\nused in the entered namespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-G</b>,\n<b>--setgid</b> <i>gid</i></p>\n\n<p style=\"margin-left:17%;\">Set the group ID which will be\nused in the entered namespace and drop supplementary\ngroups.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--monotonic</b>\n<i>offset</i></p>\n\n<p style=\"margin-left:17%;\">Set the offset of\n<b>CLOCK_MONOTONIC</b> which will be used in the entered\ntime namespace. This option requires unsharing a time\nnamespace with <b>--time</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--boottime</b>\n<i>offset</i></p>\n\n<p style=\"margin-left:17%;\">Set the offset of\n<b>CLOCK_BOOTTIME</b> which will be used in the entered time\nnamespace. This option requires unsharing a time namespace\nwith <b>--time</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-V</b>,\n<b>--version</b></p>\n\n<p style=\"margin-left:17%;\">Display version information and\nexit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-h</b>,\n<b>--help</b></p>\n\n<p style=\"margin-left:17%;\">Display help text and exit.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The proc and\nsysfs filesystems mounting as root in a user namespace have\nto be restricted so that a less privileged user can not get\nmore access to sensitive files that a more privileged user\nmade unavailable. In short the rule for proc and sysfs is as\nclose to a bind mount as possible.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncommand creates a PID namespace, using <b>--fork</b> to\nensure that the executed command is performed in a child\nprocess that (being the first process in the namespace) has\nPID 1. The <b>--mount-proc</b> option ensures that a new\nmount namespace is also simultaneously created and that a\nnew <a href=\"https://man.page/5/proc\">proc(5)</a> filesystem is mounted that contains\ninformation corresponding to the new PID namespace. When the\n<b>readlink</b> command terminates, the new namespaces are\nautomatically torn down.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># unshare\n--fork --pid --mount-proc readlink /proc/self <br>\n1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As an\nunprivileged user, create a new user namespace where the\nuser&rsquo;s credentials are mapped to the root IDs inside\nthe namespace:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ id -u; id -g\n<br>\n1000 <br>\n1000 <br>\n$ unshare --user --map-root-user \\ <br>\nsh -c ''whoami; cat /proc/self/uid_map /proc/self/gid_map''\n<br>\nroot <br>\n0 1000 1 <br>\n0 1000 1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first of\nthe following commands creates a new persistent UTS\nnamespace and modifies the hostname as seen in that\nnamespace. The namespace is then entered with\n<a href=\"https://man.page/1/nsenter\">nsenter(1)</a> in order to display the modified hostname;\nthis step demonstrates that the UTS namespace continues to\nexist even though the namespace had no member processes\nafter the <b>unshare</b> command terminated. The namespace\nis then destroyed by removing the bind mount.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># touch\n/root/uts-ns <br>\n# unshare --uts=/root/uts-ns hostname FOO <br>\n# nsenter --uts=/root/uts-ns hostname <br>\nFOO <br>\n# umount /root/uts-ns</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncommands establish a persistent mount namespace referenced\nby the bind mount <i>/root/namespaces/mnt</i>. In order to\nensure that the creation of that bind mount succeeds, the\nparent directory (<i>/root/namespaces</i>) is made a bind\nmount whose propagation type is not <b>shared</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># mount --bind\n/root/namespaces /root/namespaces <br>\n# mount --make-private /root/namespaces <br>\n# touch /root/namespaces/mnt <br>\n# unshare --mount=/root/namespaces/mnt</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncommands demonstrate the use of the <b>--kill-child</b>\noption when creating a PID namespace, in order to ensure\nthat when <b>unshare</b> is killed, all of the processes\nwithin the PID namespace are killed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># set +m #\nDon't print job status messages</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># unshare --pid\n--fork --mount-proc --kill-child -- \\</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">bash --norc -c\n''(sleep 555 &amp;) &amp;&amp; (ps a &amp;) &amp;&amp; sleep\n999'' &amp; <br>\n[1] 53456 <br>\n# PID TTY STAT TIME COMMAND <br>\n1 pts/3 S+ 0:00 sleep 999 <br>\n3 pts/3 S+ 0:00 sleep 555 <br>\n5 pts/3 R+ 0:00 ps a</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># ps h -o\n'comm' $! # Show that background job is unshare(1) <br>\nunshare <br>\n# kill $! # Kill unshare(1) <br>\n# pidof sleep</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<a href=\"https://man.page/1/pidof\">pidof(1)</a> command prints no output, because the\n<b>sleep</b> processes have been killed. More precisely,\nwhen the <b>sleep</b> process that has PID 1 in the\nnamespace (i.e., the namespace&rsquo;s init process) was\nkilled, this caused all other processes in the namespace to\nbe killed. By contrast, a similar series of commands where\nthe <b>--kill-child</b> option is not used shows that when\n<b>unshare</b> terminates, the processes in the PID\nnamespace are not killed:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># unshare --pid\n--fork --mount-proc -- \\</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">bash --norc -c\n''(sleep 555 &amp;) &amp;&amp; (ps a &amp;) &amp;&amp; sleep\n999'' &amp; <br>\n[1] 53479 <br>\n# PID TTY STAT TIME COMMAND <br>\n1 pts/3 S+ 0:00 sleep 999 <br>\n3 pts/3 S+ 0:00 sleep 555 <br>\n5 pts/3 R+ 0:00 ps a</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># kill $! <br>\n# pidof sleep <br>\n53482 53480</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nexample demonstrates the creation of a time namespace where\nthe boottime clock is set to a point several years in the\npast:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># uptime -p #\nShow uptime in initial time namespace <br>\nup 21 hours, 30 minutes <br>\n# unshare --time --fork --boottime 300000000 uptime -p <br>\nup 9 years, 28 weeks, 1 day, 2 hours, 50 minutes</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Mikhail\nGusarov</i> &lt;dottedmag@dottedmag.net&gt;, <i>Karel\nZak</i> &lt;kzak@redhat.com&gt;</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/unshare\">unshare(2)</a>, <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>, <b>mount</b>(8)</p>\n\n<h2>REPORTING BUGS\n<a name=\"REPORTING BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For bug\nreports, use the issue tracker at\n&lt;https://github.com/karelzak/util-linux/issues&gt;.</p>\n\n<h2>AVAILABILITY\n<a name=\"AVAILABILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>unshare</b> command is part of the util-linux package\nwhich can be downloaded from <i>Linux Kernel Archive</i>\n&lt;https://www.kernel.org/pub/linux/utils/util-linux/&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#REPORTING BUGS\">REPORTING BUGS</a>","<a href=\"#AVAILABILITY\">AVAILABILITY</a>"]}