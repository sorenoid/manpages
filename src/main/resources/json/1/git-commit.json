{"name":"git-commit","description":"git-commit - Record changes to the repository","body":"\n\n<h1 align=\"center\">GIT-COMMIT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-commit -\nRecord changes to the repository</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ncommit</i> [-a | --interactive | --patch] [-s] [-v]\n[-u&lt;mode&gt;] [--amend] <br>\n[--dry-run] [(-c | -C | --squash) &lt;commit&gt; | --fixup\n[(amend|reword):]&lt;commit&gt;)] <br>\n[-F &lt;file&gt; | -m &lt;msg&gt;] [--reset-author]\n[--allow-empty] <br>\n[--allow-empty-message] [--no-verify] [-e]\n[--author=&lt;author&gt;] <br>\n[--date=&lt;date&gt;] [--cleanup=&lt;mode&gt;]\n[--[no-]status] <br>\n[-i | -o] [--pathspec-from-file=&lt;file&gt;\n[--pathspec-file-nul]] <br>\n[(--trailer &lt;token&gt;[(=|:)&lt;value&gt;])...]\n[-S[&lt;keyid&gt;]] <br>\n[--] [&lt;pathspec&gt;...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Create a new\ncommit containing the current contents of the index and the\ngiven log message describing the changes. The new commit is\na direct child of HEAD, usually the tip of the current\nbranch, and the branch is updated to point to it (unless no\nbranch is associated with the working tree, in which case\nHEAD is &quot;detached&quot; as described in\n<a href=\"https://man.page/1/git-checkout\">git-checkout(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The content to\nbe committed can be specified in several ways:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. by using\n<a href=\"https://man.page/1/git-add\">git-add(1)</a> to incrementally &quot;add&quot; changes\nto the index before using the <i>commit</i> command (Note:\neven modified files must be &quot;added&quot;);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. by using\n<a href=\"https://man.page/1/git-rm\">git-rm(1)</a> to remove files from the working tree and\nthe index, again before using the <i>commit</i> command;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. by listing\nfiles as arguments to the <i>commit</i> command (without\n--interactive or --patch switch), in which case the commit\nwill ignore changes staged in the index, and instead record\nthe current content of the listed files (which must already\nbe known to Git);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">4. by using the\n-a switch with the <i>commit</i> command to automatically\n&quot;add&quot; changes from all known files (i.e. all files\nthat are already listed in the index) and to automatically\n&quot;rm&quot; files in the index that have been removed\nfrom the working tree, and then perform the actual\ncommit;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">5. by using the\n--interactive or --patch switches with the <i>commit</i>\ncommand to decide one by one which files or hunks should be\npart of the commit in addition to contents in the index,\nbefore finalizing the operation. See the &ldquo;Interactive\nMode&rdquo; section of <a href=\"https://man.page/1/git-add\">git-add(1)</a> to learn how to\noperate these modes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>--dry-run</b> option can be used to obtain a summary of\nwhat is included by any of the above for the next commit by\ngiving the same set of parameters (options and paths).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you make a\ncommit and then find a mistake immediately after that, you\ncan recover from it with <i>git reset</i>.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-a, --all</p>\n\n<p style=\"margin-left:17%;\">Tell the command to\nautomatically stage files that have been modified and\ndeleted, but new files you have not told Git about are not\naffected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-p, --patch</p>\n\n<p style=\"margin-left:17%;\">Use the interactive patch\nselection interface to choose which changes to commit. See\n<a href=\"https://man.page/1/git-add\">git-add(1)</a> for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-C\n&lt;commit&gt;, --reuse-message=&lt;commit&gt;</p>\n\n<p style=\"margin-left:17%;\">Take an existing commit object,\nand reuse the log message and the authorship information\n(including the timestamp) when creating the commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-c\n&lt;commit&gt;, --reedit-message=&lt;commit&gt;</p>\n\n<p style=\"margin-left:17%;\">Like <i>-C</i>, but with\n<b>-c</b> the editor is invoked, so that the user can\nfurther edit the commit message.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--fixup=[(amend|reword):]&lt;commit&gt;</p>\n\n<p style=\"margin-left:17%;\">Create a new commit which\n&quot;fixes up&quot; <b>&lt;commit&gt;</b> when applied with\n<b>git rebase --autosquash</b>. Plain\n<b>--fixup=&lt;commit&gt;</b> creates a &quot;fixup!&quot;\ncommit which changes the content of <b>&lt;commit&gt;</b>\nbut leaves its log message untouched.\n<b>--fixup=amend:&lt;commit&gt;</b> is similar but creates\nan &quot;amend!&quot; commit which also replaces the log\nmessage of <b>&lt;commit&gt;</b> with the log message of the\n&quot;amend!&quot; commit.\n<b>--fixup=reword:&lt;commit&gt;</b> creates an\n&quot;amend!&quot; commit which replaces the log message of\n<b>&lt;commit&gt;</b> with its own log message but makes no\nchanges to the content of <b>&lt;commit&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The commit\ncreated by plain <b>--fixup=&lt;commit&gt;</b> has a subject\ncomposed of &quot;fixup!&quot; followed by the subject line\nfrom &lt;commit&gt;, and is recognized specially by <b>git\nrebase --autosquash</b>. The <b>-m</b> option may be used to\nsupplement the log message of the created commit, but the\nadditional commentary will be thrown away once the\n&quot;fixup!&quot; commit is squashed into\n<b>&lt;commit&gt;</b> by <b>git rebase --autosquash</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The commit\ncreated by <b>--fixup=amend:&lt;commit&gt;</b> is similar\nbut its subject is instead prefixed with &quot;amend!&quot;.\nThe log message of &lt;commit&gt; is copied into the log\nmessage of the &quot;amend!&quot; commit and opened in an\neditor so it can be refined. When <b>git rebase\n--autosquash</b> squashes the &quot;amend!&quot; commit into\n<b>&lt;commit&gt;</b>, the log message of\n<b>&lt;commit&gt;</b> is replaced by the refined log message\nfrom the &quot;amend!&quot; commit. It is an error for the\n&quot;amend!&quot; commit&rsquo;s log message to be empty\nunless <b>--allow-empty-message</b> is specified.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--fixup=reword:&lt;commit&gt;</b>\nis shorthand for <b>--fixup=amend:&lt;commit&gt; --only</b>.\nIt creates an &quot;amend!&quot; commit with only a log\nmessage (ignoring any changes staged in the index). When\nsquashed by <b>git rebase --autosquash</b>, it replaces the\nlog message of <b>&lt;commit&gt;</b> without making any\nother changes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Neither\n&quot;fixup!&quot; nor &quot;amend!&quot; commits change\nauthorship of <b>&lt;commit&gt;</b> when applied by <b>git\nrebase --autosquash</b>. See <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a> for\ndetails.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--squash=&lt;commit&gt;</p>\n\n<p style=\"margin-left:17%;\">Construct a commit message for\nuse with <b>rebase --autosquash</b>. The commit message\nsubject line is taken from the specified commit with a\nprefix of &quot;squash! &quot;. Can be used with additional\ncommit message options\n(<b>-m</b>/<b>-c</b>/<b>-C</b>/<b>-F</b>). See\n<a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a> for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reset-author</p>\n\n<p style=\"margin-left:17%;\">When used with -C/-c/--amend\noptions, or when committing after a conflicting cherry-pick,\ndeclare that the authorship of the resulting commit now\nbelongs to the committer. This also renews the author\ntimestamp.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--short</p>\n\n<p style=\"margin-left:17%;\">When doing a dry-run, give the\noutput in the short-format. See <a href=\"https://man.page/1/git-status\">git-status(1)</a> for\ndetails. Implies <b>--dry-run</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--branch</p>\n\n<p style=\"margin-left:17%;\">Show the branch and tracking\ninfo even in short-format.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--porcelain</p>\n\n<p style=\"margin-left:17%;\">When doing a dry-run, give the\noutput in a porcelain-ready format. See <a href=\"https://man.page/1/git-status\">git-status(1)</a>\nfor details. Implies <b>--dry-run</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--long</p>\n\n<p style=\"margin-left:17%;\">When doing a dry-run, give the\noutput in the long-format. Implies <b>--dry-run</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-z, --null</p>\n\n<p style=\"margin-left:17%;\">When showing <b>short</b> or\n<b>porcelain</b> status output, print the filename verbatim\nand terminate the entries with NUL, instead of LF. If no\nformat is given, implies the <b>--porcelain</b> output\nformat. Without the <b>-z</b> option, filenames with\n&quot;unusual&quot; characters are quoted as explained for\nthe configuration variable <b>core.quotePath</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-F\n&lt;file&gt;, --file=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Take the commit message from\nthe given file. Use <i>-</i> to read the message from the\nstandard input.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--author=&lt;author&gt;</p>\n\n<p style=\"margin-left:17%;\">Override the commit author.\nSpecify an explicit author using the standard <b>A U Thor\n&lt;author@example.com&gt;</b> format. Otherwise\n&lt;author&gt; is assumed to be a pattern and is used to\nsearch for an existing commit by that author (i.e. rev-list\n--all -i --author=&lt;author&gt;); the commit author is then\ncopied from the first such commit found.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--date=&lt;date&gt;</p>\n\n<p style=\"margin-left:17%;\">Override the author date used\nin the commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-m &lt;msg&gt;,\n--message=&lt;msg&gt;</p>\n\n<p style=\"margin-left:17%;\">Use the given &lt;msg&gt; as\nthe commit message. If multiple <b>-m</b> options are given,\ntheir values are concatenated as separate paragraphs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The <b>-m</b>\noption is mutually exclusive with <b>-c</b>, <b>-C</b>, and\n<b>-F</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-t\n&lt;file&gt;, --template=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">When editing the commit\nmessage, start the editor with the contents in the given\nfile. The <b>commit.template</b> configuration variable is\noften used to give this option implicitly to the command.\nThis mechanism can be used by projects that want to guide\nparticipants with some hints on what to write in the message\nin what order. If the user exits the editor without editing\nthe message, the commit is aborted. This has no effect when\na message is given by other means, e.g. with the <b>-m</b>\nor <b>-F</b> options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s, --signoff,\n--no-signoff</p>\n\n<p style=\"margin-left:17%;\">Add a <b>Signed-off-by</b>\ntrailer by the committer at the end of the commit log\nmessage. The meaning of a signoff depends on the project to\nwhich you&rsquo;re committing. For example, it may certify\nthat the committer has the rights to submit the work under\nthe project&rsquo;s license or agrees to some contributor\nrepresentation, such as a Developer Certificate of Origin.\n(See\n<b><font color=\"#0000FF\">http://developercertificate.org</font></b>\n<font color=\"#000000\">for the one used by the Linux kernel\nand Git projects.) Consult the documentation or leadership\nof the project to which you&rsquo;re contributing to\nunderstand how the signoffs are used in that\nproject.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n--no-signoff option can be used to countermand an earlier\n--signoff option on the command line.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--trailer\n&lt;token&gt;[(=|:)&lt;value&gt;]</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Specify a\n(&lt;token&gt;, &lt;value&gt;) pair that should be applied\nas a trailer. (e.g. <b>git commit --trailer\n&quot;Signed-off-by:C O Mitter \\\n&lt;committer@example.com&gt;&quot; --trailer\n&quot;Helped-by:C O Mitter \\\n&lt;committer@example.com&gt;&quot;</b> will add the\n&quot;Signed-off-by&quot; trailer and the\n&quot;Helped-by&quot; trailer to the commit message.) The\n<b>trailer.*</b> configuration variables\n(<a href=\"https://man.page/1/git-interpret-trailers\">git-interpret-trailers(1)</a>) can be used to define if\na duplicated trailer is omitted, where in the run of\ntrailers each trailer would appear, and other\ndetails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-n,\n--[no-]verify</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By\ndefault, the pre-commit and commit-msg hooks are run. When\nany of <b>--no-verify</b> or <b>-n</b> is given, these are\nbypassed. See also <a href=\"https://man.page/5/githooks\">githooks(5)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--allow-empty</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Usually\nrecording a commit that has the exact same tree as its sole\nparent commit is a mistake, and the command prevents you\nfrom making such a commit. This option bypasses the safety,\nand is primarily for use by foreign SCM interface\nscripts.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--allow-empty-message</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Like\n--allow-empty this command is primarily for use by foreign\nSCM interface scripts. It allows you to create a commit with\nan empty commit message without using plumbing commands like\n<a href=\"https://man.page/1/git-commit-tree\">git-commit-tree(1)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--cleanup=&lt;mode&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This\noption determines how the supplied commit message should be\ncleaned up before committing. The <i>&lt;mode&gt;</i> can be\n<b>strip</b>, <b>whitespace</b>, <b>verbatim</b>,\n<b>scissors</b> or <b>default</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">strip</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Strip\nleading and trailing empty lines, trailing whitespace,\ncommentary and collapse consecutive empty lines.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">whitespace</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Same as\n<b>strip</b> except #commentary is not removed.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">verbatim</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Do not\nchange the message at all.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">scissors</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Same as\n<b>whitespace</b> except that everything from (and\nincluding) the line found below is truncated, if the message\nis to be edited. &quot;<b>#</b>&quot; can be customized with\ncore.commentChar.</font></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><font color=\"#000000\">#\n------------------------ &gt;8\n------------------------</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">default</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Same as\n<b>strip</b> if the message is to be edited. Otherwise\n<b>whitespace</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\ndefault can be changed by the <b>commit.cleanup</b>\nconfiguration variable (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-e,\n--edit</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nmessage taken from file with <b>-F</b>, command line with\n<b>-m</b>, and from commit object with <b>-C</b> are usually\nused as the commit log message unmodified. This option lets\nyou further edit the message taken from these\nsources.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--no-edit</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Use the\nselected commit message without launching an editor. For\nexample, <b>git commit --amend --no-edit</b> amends a commit\nwithout changing its commit message.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--amend</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Replace\nthe tip of the current branch by creating a new commit. The\nrecorded tree is prepared as usual (including the effect of\nthe <b>-i</b> and <b>-o</b> options and explicit pathspec),\nand the message from the original commit is used as the\nstarting point, instead of an empty message, when no other\nmessage is specified from the command line via options such\nas <b>-m</b>, <b>-F</b>, <b>-c</b>, etc. The new commit has\nthe same parents and author as the current one (the\n<b>--reset-author</b> option can countermand\nthis).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">It\nis a rough equivalent for:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit reset --soft HEAD^ <br>\n$ ... do something else to come up with the right tree ...\n<br>\n$ git commit -c ORIG_HEAD</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">but\ncan be used to amend a merge commit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">You\nshould understand the implications of rewriting history if\nyou amend a commit that has already been published. (See the\n&quot;RECOVERING FROM UPSTREAM REBASE&quot; section in\n<a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a>.)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--no-post-rewrite</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Bypass\nthe post-rewrite hook.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-i,\n--include</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Before\nmaking a commit out of staged contents so far, stage the\ncontents of paths given on the command line as well. This is\nusually not what you want unless you are concluding a\nconflicted merge.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-o,\n--only</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Make a\ncommit by taking the updated working tree contents of the\npaths specified on the command line, disregarding any\ncontents that have been staged for other paths. This is the\ndefault mode of operation of <i>git commit</i> if any paths\nare given on the command line, in which case this option can\nbe omitted. If this option is specified together with\n<b>--amend</b>, then no paths need to be specified, which\ncan be used to amend the last commit without committing\nchanges that have already been staged. If used together with\n<b>--allow-empty</b> paths are also not required, and an\nempty commit will be created.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--pathspec-from-file=&lt;file&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Pathspec\nis passed in <b>&lt;file&gt;</b> instead of commandline\nargs. If <b>&lt;file&gt;</b> is exactly <b>-</b> then\nstandard input is used. Pathspec elements are separated by\nLF or CR/LF. Pathspec elements can be quoted as explained\nfor the configuration variable <b>core.quotePath</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). See also <b>--pathspec-file-nul</b>\nand global <b>--literal-pathspecs</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--pathspec-file-nul</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Only\nmeaningful with <b>--pathspec-from-file</b>. Pathspec\nelements are separated with NUL character and all other\ncharacters are taken literally (including newlines and\nquotes).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-u[&lt;mode&gt;],\n--untracked-files[=&lt;mode&gt;]</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Show\nuntracked files.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nmode parameter is optional (defaults to <i>all</i>), and is\nused to specify the handling of untracked files; when -u is\nnot used, the default is <i>normal</i>, i.e. show untracked\nfiles and directories.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\npossible options are:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>no</i> - Show no untracked files</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>normal</i> - Shows untracked files and\ndirectories</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<i>all</i> - Also shows individual files in untracked\ndirectories.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\ndefault can be changed using the status.showUntrackedFiles\nconfiguration variable documented in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-v,\n--verbose</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Show\nunified diff between the HEAD commit and what would be\ncommitted at the bottom of the commit message template to\nhelp the user describe the commit by reminding what changes\nthe commit has. Note that this diff output doesn&rsquo;t\nhave its lines prefixed with <i>#</i>. This diff will not be\na part of the commit message. See the <b>commit.verbose</b>\nconfiguration variable in <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nspecified twice, show in addition the unified diff between\nwhat would be committed and the worktree files, i.e. the\nunstaged changes to tracked files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-q,\n--quiet</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Suppress\ncommit summary message.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--dry-run</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Do not\ncreate a commit, but show a list of paths that are to be\ncommitted, paths with local changes that will be left\nuncommitted and paths that are untracked.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--status</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Include\nthe output of <a href=\"https://man.page/1/git-status\">git-status(1)</a> in the commit message\ntemplate when using an editor to prepare the commit message.\nDefaults to on, but can be used to override configuration\nvariable commit.status.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--no-status</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Do not\ninclude the output of <a href=\"https://man.page/1/git-status\">git-status(1)</a> in the commit\nmessage template when using an editor to prepare the default\ncommit message.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-S[&lt;keyid&gt;],\n--gpg-sign[=&lt;keyid&gt;], --no-gpg-sign</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">GPG-sign\ncommits. The <b>keyid</b> argument is optional and defaults\nto the committer identity; if specified, it must be stuck to\nthe option without a space. <b>--no-gpg-sign</b> is useful\nto countermand both <b>commit.gpgSign</b> configuration\nvariable, and earlier <b>--gpg-sign</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Do not\ninterpret any more arguments as options.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;pathspec&gt;...</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">When\npathspec is given on the command line, commit the contents\nof the files that match the pathspec without recording the\nchanges already added to the index. The contents of these\nfiles are also staged for the next commit on top of what\nhave been staged before.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">For\nmore details, see the <i>pathspec</i> entry in\n<a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>.</font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nrecording your own work, the contents of modified files in\nyour working tree are temporarily stored to a staging area\ncalled the &quot;index&quot; with <i>git add</i>. A file can\nbe reverted back, only in the index but not in the working\ntree, to that of the last commit with <b>git restore\n--staged &lt;file&gt;</b>, which effectively reverts <i>git\nadd</i> and prevents the changes to this file from\nparticipating in the next commit. After building the state\nto be committed incrementally with these commands, <b>git\ncommit</b> (without any pathname parameter) is used to\nrecord what has been staged so far. This is the most basic\nform of the command. An example:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\nedit hello.c <br>\n$ git rm goodbye.c <br>\n$ git add hello.c <br>\n$ git commit</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Instead\nof staging files after each individual change, you can tell\n<b>git commit</b> to notice the changes to the files whose\ncontents are tracked in your working tree and do\ncorresponding <b>git add</b> and <b>git rm</b> for you. That\nis, this example does the same as the earlier example if\nthere is no other change in your working tree:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\nedit hello.c <br>\n$ rm goodbye.c <br>\n$ git commit -a</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ncommand <b>git commit -a</b> first looks at your working\ntree, notices that you have modified hello.c and removed\ngoodbye.c, and performs necessary <b>git add</b> and <b>git\nrm</b> for you.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">After\nstaging changes to many files, you can alter the order the\nchanges are recorded in, by giving pathnames to <b>git\ncommit</b>. When pathnames are given, the command makes a\ncommit that only records the changes made to the named\npaths:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\nedit hello.c hello.h <br>\n$ git add hello.c hello.h <br>\n$ edit Makefile <br>\n$ git commit Makefile</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nmakes a commit that records the modification to\n<b>Makefile</b>. The changes staged for <b>hello.c</b> and\n<b>hello.h</b> are not included in the resulting commit.\nHowever, their changes are not lost &mdash; they are still\nstaged and merely held back. After the above sequence, if\nyou do:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit commit</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">this\nsecond commit would record the changes to <b>hello.c</b> and\n<b>hello.h</b> as expected.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">After\na merge (initiated by <i>git merge</i> or <i>git pull</i>)\nstops because of conflicts, cleanly merged paths are already\nstaged to be committed for you, and paths that conflicted\nare left in unmerged state. You would have to first check\nwhich paths are conflicting with <i>git status</i> and after\nfixing them manually in your working tree, you would stage\nthe result as usual with <i>git add</i>:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit status | grep unmerged <br>\nunmerged: hello.c <br>\n$ edit hello.c <br>\n$ git add hello.c</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">After\nresolving conflicts and staging the result, <b>git ls-files\n-u</b> would stop mentioning the conflicted path. When you\nare done, run <b>git commit</b> to finally record the\nmerge:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit commit</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">As\nwith the case to record your own changes, you can use\n<b>-a</b> option to save typing. One difference is that\nduring a merge resolution, you cannot use <b>git commit</b>\nwith pathnames to alter the order the changes are committed,\nbecause the merge should be recorded as a single commit. In\nfact, the command refuses to run when given pathnames (but\nsee <b>-i</b> option).</font></p>\n\n<h2>COMMIT INFORMATION\n<a name=\"COMMIT INFORMATION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Author\nand committer information is taken from the following\nenvironment variables, if set:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">GIT_AUTHOR_NAME\n<br>\nGIT_AUTHOR_EMAIL <br>\nGIT_AUTHOR_DATE <br>\nGIT_COMMITTER_NAME <br>\nGIT_COMMITTER_EMAIL <br>\nGIT_COMMITTER_DATE</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">(nb\n&quot;&lt;&quot;, &quot;&gt;&quot; and &quot;\\n&quot;s are\nstripped)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nauthor and committer names are by convention some form of a\npersonal name (that is, the name by which other humans refer\nto you), although Git does not enforce or require any\nparticular form. Arbitrary Unicode may be used, subject to\nthe constraints listed above. This name has no effect on\nauthentication; for that, see the <b>credential.username</b>\nvariable in <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\ncase (some of) these environment variables are not set, the\ninformation is taken from the configuration items\n<b>user.name</b> and <b>user.email</b>, or, if not present,\nthe environment variable EMAIL, or, if that is not set,\nsystem user name and the hostname used for outgoing mail\n(taken from <b>/etc/mailname</b> and falling back to the\nfully qualified hostname when that file does not\nexist).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>author.name</b> and <b>committer.name</b> and their\ncorresponding email options override <b>user.name</b> and\n<b>user.email</b> if set and are overridden themselves by\nthe environment variables.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ntypical usage is to set just the <b>user.name</b> and\n<b>user.email</b> variables; the other options are provided\nfor more complex use cases.</font></p>\n\n<h2>DATE FORMATS\n<a name=\"DATE FORMATS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>GIT_AUTHOR_DATE</b> and <b>GIT_COMMITTER_DATE</b>\nenvironment variables support the following date\nformats:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Git\ninternal format</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">It is\n<b>&lt;unix timestamp&gt; &lt;time zone offset&gt;</b>,\nwhere <b>&lt;unix timestamp&gt;</b> is the number of seconds\nsince the UNIX epoch. <b>&lt;time zone offset&gt;</b> is a\npositive or negative offset from UTC. For example CET (which\nis 1 hour ahead of UTC) is <b>+0100</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">RFC\n2822</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nstandard email format as described by RFC 2822, for example\n<b>Thu, 07 Apr 2005 22:13:13 +0200</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">ISO\n8601</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Time and\ndate specified by the ISO 8601 standard, for example\n<b>2005-04-07T22:13:13</b>. The parser accepts a space\ninstead of the <b>T</b> character as well. Fractional parts\nof a second will be ignored, for example\n<b>2005-04-07T22:13:13.019</b> will be treated as\n<b>2005-04-07T22:13:13</b>.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><b><big>Note</big></b>\n<br>\nIn addition, the date part is accepted in the following\nformats: <b>YYYY.MM.DD</b>, <b>MM/DD/YYYY</b> and\n<b>DD.MM.YYYY</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\naddition to recognizing all date formats above, the\n<b>--date</b> option will also try to make sense of other,\nmore human-centric date formats, such as relative dates like\n&quot;yesterday&quot; or &quot;last Friday at\nnoon&quot;.</font></p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>Though\nnot required, it&rsquo;s a good idea to begin the commit\nmessage with a single short (less than 50 character) line\nsummarizing the change, followed by a blank line and then a\nmore thorough description. The text up to the first blank\nline in a commit message is treated as the commit title, and\nthat title is used throughout Git. For example,\n<a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a> turns a commit into email, and it\nuses the title on the Subject line and the rest of the\ncommit in the body.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>Git\nis to some extent character encoding\nagnostic.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>&bull;\nThe contents of the blob objects are uninterpreted sequences\nof bytes. There is no encoding translation at the core\nlevel.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>&bull;\nPath names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well\nas path names in command line arguments, environment\nvariables and config files (<b>.git/config</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>), <a href=\"https://man.page/5/gitignore\">gitignore(5)</a>,\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> and\n<a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a>).</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>Note\nthat Git at the core level treats path names simply as\nsequences of non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and\nfile systems that use legacy extended ASCII encodings.\nHowever, repositories created on such systems will not work\nproperly on UTF-8-based systems (e.g. Linux, Mac, Windows)\nand vice versa. Additionally, many Git-based tools simply\nassume path names to be UTF-8 and will fail to display other\nencodings correctly.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>&bull;\nCommit log messages are typically encoded in UTF-8, but\nother extended ASCII encodings are also supported. This\nincludes ISO-8859-x, CP125x and many others, but <i>not</i>\nUTF-16/32, EBCDIC and CJK multi-byte encodings (GBK,\nShift-JIS, Big5, EUC-x, CP9xx etc.).</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>Although\nwe encourage that the commit log messages are encoded in\nUTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects. If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it. However, there are a few things to keep\nin mind.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>1.\n<i>git commit</i> and <i>git commit-tree</i> issues a\nwarning if the commit log message given to it does not look\nlike a valid UTF-8 string, unless you explicitly say your\nproject uses a legacy encoding. The way to say this is to\nhave <b>i18n.commitEncoding</b> in <b>.git/config</b> file,\nlike this:</big></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><big>[i18n]\n<br>\ncommitEncoding = ISO-8859-1</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>Commit\nobjects created with the above setting record the value of\n<b>i18n.commitEncoding</b> in its <b>encoding</b> header.\nThis is to help other people who look at them later. Lack of\nthis header implies that the commit log message is encoded\nin UTF-8.</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>2.\n<i>git log</i>, <i>git show</i>, <i>git blame</i> and\nfriends look at the <b>encoding</b> header of a commit\nobject, and try to re-code the log message into UTF-8 unless\notherwise specified. You can specify the desired output\nencoding with <b>i18n.logOutputEncoding</b> in\n<b>.git/config</b> file, like this:</big></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\"><big>[i18n]\n<br>\nlogOutputEncoding = ISO-8859-1</big></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><big>If\nyou do not have this configuration variable, the value of\n<b>i18n.commitEncoding</b> is used instead.</big></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>Note\nthat we deliberately chose not to re-code the commit log\nmessage when a commit is made to force UTF-8 at the commit\nobject level, because re-coding to UTF-8 is not necessarily\na reversible operation.</big></font></p>\n\n<h2>ENVIRONMENT AND CONFIGURATION VARIABLES\n<a name=\"ENVIRONMENT AND CONFIGURATION VARIABLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>The\neditor used to edit the commit log message will be chosen\nfrom the <b>GIT_EDITOR</b> environment variable, the\ncore.editor configuration variable, the <b>VISUAL</b>\nenvironment variable, or the <b>EDITOR</b> environment\nvariable (in that order). See <a href=\"https://man.page/1/git-var\">git-var(1)</a> for\ndetails.</big></font></p>\n\n<h2>HOOKS\n<a name=\"HOOKS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>This\ncommand can run <b>commit-msg</b>,\n<b>prepare-commit-msg</b>, <b>pre-commit</b>,\n<b>post-commit</b> and <b>post-rewrite</b> hooks. See\n<a href=\"https://man.page/5/githooks\">githooks(5)</a> for more information.</big></font></p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><b>$GIT_DIR/COMMIT_EDITMSG</b></big></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><big>This\nfile contains the commit message of a commit in progress. If\n<b>git commit</b> exits due to an error before creating a\ncommit, any commit message that has been provided by the\nuser (e.g., in an editor session) will be available in this\nfile, but will be overwritten by the next invocation of\n<b>git commit</b>.</big></font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big><a href=\"https://man.page/1/git-add\">git-add(1)</a>,\n<a href=\"https://man.page/1/git-rm\">git-rm(1)</a>, <a href=\"https://man.page/1/git-mv\">git-mv(1)</a>, <a href=\"https://man.page/1/git-merge\">git-merge(1)</a>,\n<a href=\"https://man.page/1/git-commit-tree\">git-commit-tree(1)</a></big></font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><big>Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</big></font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#COMMIT INFORMATION\">COMMIT INFORMATION</a>","<a href=\"#DATE FORMATS\">DATE FORMATS</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#ENVIRONMENT AND CONFIGURATION VARIABLES\">ENVIRONMENT AND CONFIGURATION VARIABLES</a>","<a href=\"#HOOKS\">HOOKS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}