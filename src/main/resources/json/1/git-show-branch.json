{"name":"git-show-branch","description":"git-show-branch - Show branches and their commits","body":"\n\n<h1 align=\"center\">GIT-SHOW-BRANCH</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-show-branch\n- Show branches and their commits</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nshow-branch</i> [-a|--all] [-r|--remotes] [--topo-order |\n--date-order] <br>\n[--current] [--color[=&lt;when&gt;] | --no-color] [--sparse]\n<br>\n[--more=&lt;n&gt; | --list | --independent | --merge-base]\n<br>\n[--no-name | --sha1-name] [--topics] <br>\n[(&lt;rev&gt; | &lt;glob&gt;)...] <i><br>\ngit show-branch</i> (-g|--reflog)[=&lt;n&gt;[,&lt;base&gt;]]\n[--list] [&lt;ref&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Shows the\ncommit ancestry graph starting from the commits named with\n&lt;rev&gt;s or &lt;glob&gt;s (or all refs under refs/heads\nand/or refs/tags) semi-visually.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It cannot show\nmore than 29 branches and commits at a time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It uses\n<b>showbranch.default</b> multi-valued configuration items\nif no &lt;rev&gt; or &lt;glob&gt; is given on the command\nline.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;rev&gt;</p>\n\n<p style=\"margin-left:17%;\">Arbitrary extended SHA-1\nexpression (see <a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a>) that typically names\na branch head or a tag.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;glob&gt;</p>\n\n<p style=\"margin-left:17%;\">A glob pattern that matches\nbranch or tag names under refs/. For example, if you have\nmany topic branches under refs/heads/topic, giving\n<b>topic/*</b> would show all of them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-r,\n--remotes</p>\n\n<p style=\"margin-left:17%;\">Show the remote-tracking\nbranches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-a, --all</p>\n\n<p style=\"margin-left:17%;\">Show both remote-tracking\nbranches and local branches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--current</p>\n\n<p style=\"margin-left:17%;\">With this option, the command\nincludes the current branch to the list of revs to be shown\nwhen it is not given on the command line.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--topo-order</p>\n\n<p style=\"margin-left:17%;\">By default, the branches and\ntheir commits are shown in reverse chronological order. This\noption makes them appear in topological order (i.e.,\ndescendant commits are shown before their parents).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--date-order</p>\n\n<p style=\"margin-left:17%;\">This option is similar to\n<b>--topo-order</b> in the sense that no parent comes before\nall of its children, but otherwise commits are ordered\naccording to their commit date.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sparse</p>\n\n<p style=\"margin-left:17%;\">By default, the output omits\nmerges that are reachable from only one tip being shown.\nThis option makes them visible.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--more=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Usually the command stops\noutput upon showing the commit that is the common ancestor\nof all the branches. This flag tells the command to go\n&lt;n&gt; more common commits beyond that. When &lt;n&gt; is\nnegative, display only the &lt;reference&gt;s given, without\nshowing the commit ancestry tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--list</p>\n\n<p style=\"margin-left:17%;\">Synonym to <b>--more=-1</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--merge-base</p>\n\n<p style=\"margin-left:17%;\">Instead of showing the commit\nlist, determine possible merge bases for the specified\ncommits. All merge bases will be contained in all specified\ncommits. This is different from how <a href=\"https://man.page/1/git-merge-base\">git-merge-base(1)</a>\nhandles the case of three or more commits.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--independent</p>\n\n<p style=\"margin-left:17%;\">Among the &lt;reference&gt;s\ngiven, display only the ones that cannot be reached from any\nother &lt;reference&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-name</p>\n\n<p style=\"margin-left:17%;\">Do not show naming strings for\neach commit.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sha1-name</p>\n\n<p style=\"margin-left:17%;\">Instead of naming the commits\nusing the path to reach them from heads (e.g.\n&quot;master~2&quot; to mean the grandparent of\n&quot;master&quot;), name them with the unique prefix of\ntheir object names.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--topics</p>\n\n<p style=\"margin-left:17%;\">Shows only commits that are NOT\non the first branch given. This helps track topic branches\nby hiding any commit that is already in the main line of\ndevelopment. When given &quot;git show-branch --topics\nmaster topic1 topic2&quot;, this will show the revisions\ngiven by &quot;git rev-list ^master topic1 topic2&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-g,\n--reflog[=&lt;n&gt;[,&lt;base&gt;]] [&lt;ref&gt;]</p>\n\n<p style=\"margin-left:17%;\">Shows &lt;n&gt; most recent\nref-log entries for the given ref. If &lt;base&gt; is given,\n&lt;n&gt; entries going back from that entry. &lt;base&gt;\ncan be specified as count or date. When no explicit\n&lt;ref&gt; parameter is given, it defaults to the current\nbranch (or <b>HEAD</b> if it is detached).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--color[=&lt;when&gt;]</p>\n\n<p style=\"margin-left:17%;\">Color the status sign (one of\nthese: <b>* ! + -</b>) of each commit corresponding to the\nbranch it&rsquo;s in. The value must be always (the\ndefault), never, or auto.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-color</p>\n\n<p style=\"margin-left:17%;\">Turn off colored output, even\nwhen the configuration file gives the default to color\noutput. Same as <b>--color=never</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\n--more, --list, --independent and --merge-base options are\nmutually exclusive.</p>\n\n<h2>OUTPUT\n<a name=\"OUTPUT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Given N\n&lt;references&gt;, the first N lines are the one-line\ndescription from their commit message. The branch head that\nis pointed at by $GIT_DIR/HEAD is prefixed with an asterisk\n<b>*</b> character while other heads are prefixed with a\n<b>!</b> character.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Following these\nN lines, one-line log for each commit is displayed, indented\nN places. If a commit is on the I-th branch, the I-th\nindentation character shows a <b>+</b> sign; otherwise it\nshows a space. Merge commits are denoted by a <b>-</b> sign.\nEach commit shows a short name that can be used as an\nextended SHA-1 to name that commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nexample shows three branches, &quot;master&quot;,\n&quot;fixes&quot; and &quot;mhf&quot;:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git\nshow-branch master fixes mhf <br>\n* [master] Add 'git show-branch'. <br>\n! [fixes] Introduce &quot;reset type&quot; flag to &quot;git\nreset&quot; <br>\n! [mhf] Allow &quot;+remote:local&quot; refspec to cause\n--force when fetching. <br>\n--- <br>\n+ [mhf] Allow &quot;+remote:local&quot; refspec to cause\n--force when fetching. <br>\n+ [mhf~1] Use git-octopus when pulling more than one heads.\n<br>\n+ [fixes] Introduce &quot;reset type&quot; flag to &quot;git\nreset&quot; <br>\n+ [mhf~2] &quot;git fetch --force&quot;. <br>\n+ [mhf~3] Use .git/remote/origin, not .git/branches/origin.\n<br>\n+ [mhf~4] Make &quot;git pull&quot; and &quot;git\nfetch&quot; default to origin <br>\n+ [mhf~5] Infamous 'octopus merge' <br>\n+ [mhf~6] Retire git-parse-remote. <br>\n+ [mhf~7] Multi-head fetch. <br>\n+ [mhf~8] Start adding the $GIT_DIR/remotes/ support. <br>\n*++ [master] Add 'git show-branch'.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These three\nbranches all forked from a common commit, [master], whose\ncommit message is &quot;Add 'git show-branch'&quot;. The\n&quot;fixes&quot; branch adds one commit &quot;Introduce\n&quot;reset type&quot; flag to &quot;git reset&quot;&quot;.\nThe &quot;mhf&quot; branch adds many other commits. The\ncurrent branch is &quot;master&quot;.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you keep\nyour primary branches immediately under <b>refs/heads</b>,\nand topic branches in subdirectories of it, having the\nfollowing in the configuration file may help:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[showbranch]\n<br>\ndefault = --topo-order <br>\ndefault = heads/*</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With this,\n<b>git show-branch</b> without extra parameters would show\nonly the primary branches. In addition, if you happen to be\non your topic branch, it is shown as well.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git\nshow-branch --reflog=&quot;10,1 hour ago&quot; --list\nmaster</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">shows 10 reflog\nentries going back from the tip as of 1 hour ago. Without\n<b>--list</b>, the output also shows how these tips are\ntopologically related with each other.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#OUTPUT\">OUTPUT</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#GIT\">GIT</a>"]}