{"name":"git-push","body":"\n\n<h1 align=\"center\">GIT-PUSH</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-push -\nUpdate remote refs along with associated objects</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git push</i>\n[--all | --mirror | --tags] [--follow-tags] [--atomic] [-n |\n--dry-run] [--receive-pack=&lt;git-receive-pack&gt;] <br>\n[--repo=&lt;repository&gt;] [-f | --force] [-d | --delete]\n[--prune] [-v | --verbose] <br>\n[-u | --set-upstream] [-o &lt;string&gt; |\n--push-option=&lt;string&gt;] <br>\n[--[no-]signed|--signed=(true|false|if-asked)] <br>\n[--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]\n[--force-if-includes]] <br>\n[--no-verify] [&lt;repository&gt; [&lt;refspec&gt;...]]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Updates remote\nrefs using local refs, while sending objects necessary to\ncomplete the given refs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can make\ninteresting things happen to a repository every time you\npush into it, by setting up <i>hooks</i> there. See\ndocumentation for <a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\ncommand line does not specify where to push with the\n<b>&lt;repository&gt;</b> argument, <b>branch.*.remote</b>\nconfiguration for the current branch is consulted to\ndetermine where to push. If the configuration is missing, it\ndefaults to <i>origin</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\ncommand line does not specify what to push with\n<b>&lt;refspec&gt;...</b> arguments or <b>--all</b>,\n<b>--mirror</b>, <b>--tags</b> options, the command finds\nthe default <b>&lt;refspec&gt;</b> by consulting\n<b>remote.*.push</b> configuration, and if it is not found,\nhonors <b>push.default</b> configuration to decide what to\npush (See <a href=\"https://man.page/1/git-config\">git-config(1)</a> for the meaning of\n<b>push.default</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When neither\nthe command-line nor the configuration specify what to push,\nthe default behavior is used, which corresponds to the\n<b>simple</b> value for <b>push.default</b>: the current\nbranch is pushed to the corresponding upstream branch, but\nas a safety measure, the push is aborted if the upstream\nbranch does not have the same name as the local one.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;repository&gt;</p>\n\n<p style=\"margin-left:17%;\">The &quot;remote&quot;\nrepository that is destination of a push operation. This\nparameter can be either a URL (see the section GIT URLS\nbelow) or the name of a remote (see the section REMOTES\nbelow).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;refspec&gt;...</p>\n\n<p style=\"margin-left:17%;\">Specify what destination ref to\nupdate with what source object. The format of a\n&lt;refspec&gt; parameter is an optional plus <b>+</b>,\nfollowed by the source object &lt;src&gt;, followed by a\ncolon <b>:</b>, followed by the destination ref\n&lt;dst&gt;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The &lt;src&gt;\nis often the name of the branch you would want to push, but\nit can be any arbitrary &quot;SHA-1 expression&quot;, such\nas <b>master~4</b> or <b>HEAD</b> (see\n<a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The &lt;dst&gt;\ntells which ref on the remote side is updated with this\npush. Arbitrary expressions cannot be used here, an actual\nref must be named. If <b>git push [&lt;repository&gt;]</b>\nwithout any <b>&lt;refspec&gt;</b> argument is set to update\nsome ref at the destination with <b>&lt;src&gt;</b> with\n<b>remote.&lt;repository&gt;.push</b> configuration\nvariable, <b>:&lt;dst&gt;</b> part can be omitted&mdash;such\na push will update a ref that <b>&lt;src&gt;</b> normally\nupdates without any <b>&lt;refspec&gt;</b> on the command\nline. Otherwise, missing <b>:&lt;dst&gt;</b> means to update\nthe same ref as the <b>&lt;src&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If &lt;dst&gt;\ndoesn&rsquo;t start with <b>refs/</b> (e.g.\n<b>refs/heads/master</b>) we will try to infer where in\n<b>refs/*</b> on the destination &lt;repository&gt; it\nbelongs based on the type of &lt;src&gt; being pushed and\nwhether &lt;dst&gt; is ambiguous.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; If\n&lt;dst&gt; unambiguously refers to a ref on the\n&lt;repository&gt; remote, then push to that ref.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; If\n&lt;src&gt; resolves to a ref starting with refs/heads/ or\nrefs/tags/, then prepend that to &lt;dst&gt;.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Other\nambiguity resolutions might be added in the future, but for\nnow any other cases will error out with an error indicating\nwhat we tried, and depending on the\n<b>advice.pushUnqualifiedRefname</b> configuration (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>) suggest what refs/ namespace you may\nhave wanted to push to.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The object\nreferenced by &lt;src&gt; is used to update the &lt;dst&gt;\nreference on the remote side. Whether this is allowed\ndepends on where in <b>refs/*</b> the &lt;dst&gt; reference\nlives as described in detail below, in those sections\n&quot;update&quot; means any modifications except deletes,\nwhich as noted after the next few sections are treated\ndifferently.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>refs/heads/*</b> namespace will only accept commit\nobjects, and updates only if they can be fast-forwarded.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>refs/tags/*</b> namespace will accept any kind of object\n(as commits, trees and blobs can be tagged), and any updates\nto them will be rejected.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It&rsquo;s\npossible to push any type of object to any namespace outside\nof <b>refs/{tags,heads}/*</b>. In the case of tags and\ncommits, these will be treated as if they were the commits\ninside <b>refs/heads/*</b> for the purposes of whether the\nupdate is allowed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">I.e. a\nfast-forward of commits and tags outside\n<b>refs/{tags,heads}/*</b> is allowed, even in cases where\nwhat&rsquo;s being fast-forwarded is not a commit, but a tag\nobject which happens to point to a new commit which is a\nfast-forward of the commit the last tag (or commit)\nit&rsquo;s replacing. Replacing a tag with an entirely\ndifferent tag is also allowed, if it points to the same\ncommit, as well as pushing a peeled tag, i.e. pushing the\ncommit that existing tag object points to, or a new tag\nobject which an existing commit points to.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Tree and blob\nobjects outside of <b>refs/{tags,heads}/*</b> will be\ntreated the same way as if they were inside\n<b>refs/tags/*</b>, any update of them will be rejected.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">All of the\nrules described above about what&rsquo;s not allowed as an\nupdate can be overridden by adding an the optional leading\n<b>+</b> to a refspec (or using <b>--force</b> command line\noption). The only exception to this is that no amount of\nforcing will make the <b>refs/heads/*</b> namespace accept a\nnon-commit object. Hooks and configuration can also override\nor amend these rules, see e.g.\n<b>receive.denyNonFastForwards</b> in <a href=\"https://man.page/1/git-config\">git-config(1)</a>\nand <b>pre-receive</b> and <b>update</b> in\n<a href=\"https://man.page/5/githooks\">githooks(5)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Pushing an\nempty &lt;src&gt; allows you to delete the &lt;dst&gt; ref\nfrom the remote repository. Deletions are always accepted\nwithout a leading <b>+</b> in the refspec (or\n<b>--force</b>), except when forbidden by configuration or\nhooks. See <b>receive.denyDeletes</b> in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a> and <b>pre-receive</b> and\n<b>update</b> in <a href=\"https://man.page/5/githooks\">githooks(5)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The special\nrefspec <b>:</b> (or <b>+:</b> to allow non-fast-forward\nupdates) directs Git to push &quot;matching&quot; branches:\nfor every branch that exists on the local side, the remote\nside is updated if a branch of the same name already exists\non the remote side.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>tag\n&lt;tag&gt;</b> means the same as\n<b>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all</p>\n\n<p style=\"margin-left:17%;\">Push all branches (i.e. refs\nunder <b>refs/heads/</b>); cannot be used with other\n&lt;refspec&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--prune</p>\n\n<p style=\"margin-left:17%;\">Remove remote branches that\ndon&rsquo;t have a local counterpart. For example a remote\nbranch <b>tmp</b> will be removed if a local branch with the\nsame name doesn&rsquo;t exist any more. This also respects\nrefspecs, e.g. <b>git push --prune remote\nrefs/heads/*:refs/tmp/*</b> would make sure that remote\n<b>refs/tmp/foo</b> will be removed if <b>refs/heads/foo</b>\ndoesn&rsquo;t exist.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--mirror</p>\n\n<p style=\"margin-left:17%;\">Instead of naming each ref to\npush, specifies that all refs under <b>refs/</b> (which\nincludes but is not limited to <b>refs/heads/</b>,\n<b>refs/remotes/</b>, and <b>refs/tags/</b>) be mirrored to\nthe remote repository. Newly created local refs will be\npushed to the remote end, locally updated refs will be force\nupdated on the remote end, and deleted refs will be removed\nfrom the remote end. This is the default if the\nconfiguration option <b>remote.&lt;remote&gt;.mirror</b> is\nset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--dry-run</p>\n\n<p style=\"margin-left:17%;\">Do everything except actually\nsend the updates.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--porcelain</p>\n\n<p style=\"margin-left:17%;\">Produce machine-readable\noutput. The output status line for each ref will be\ntab-separated and sent to stdout instead of stderr. The full\nsymbolic names of the refs will be given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-d,\n--delete</p>\n\n<p style=\"margin-left:17%;\">All listed refs are deleted\nfrom the remote repository. This is the same as prefixing\nall refs with a colon.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--tags</p>\n\n<p style=\"margin-left:17%;\">All refs under <b>refs/tags</b>\nare pushed, in addition to refspecs explicitly listed on the\ncommand line.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--follow-tags</p>\n\n<p style=\"margin-left:17%;\">Push all the refs that would be\npushed without this option, and also push annotated tags in\n<b>refs/tags</b> that are missing from the remote but are\npointing at commit-ish that are reachable from the refs\nbeing pushed. This can also be specified with configuration\nvariable <b>push.followTags</b>. For more information, see\n<b>push.followTags</b> in <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]signed,\n--signed=(true|false|if-asked)</p>\n\n<p style=\"margin-left:17%;\">GPG-sign the push request to\nupdate refs on the receiving side, to allow it to be checked\nby the hooks and/or be logged. If <b>false</b> or\n<b>--no-signed</b>, no signing will be attempted. If\n<b>true</b> or <b>--signed</b>, the push will fail if the\nserver does not support signed pushes. If set to\n<b>if-asked</b>, sign if and only if the server supports\nsigned pushes. The push will also fail if the actual call to\n<b>gpg --sign</b> fails. See <a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a> for\nthe details on the receiving end.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]atomic</p>\n\n<p style=\"margin-left:17%;\">Use an atomic transaction on\nthe remote side if available. Either all refs are updated,\nor on error, no refs are updated. If the server does not\nsupport atomic pushes the push will fail.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-o\n&lt;option&gt;, --push-option=&lt;option&gt;</p>\n\n<p style=\"margin-left:17%;\">Transmit the given string to\nthe server, which passes them to the pre-receive as well as\nthe post-receive hook. The given string must not contain a\nNUL or LF character. When multiple\n<b>--push-option=&lt;option&gt;</b> are given, they are all\nsent to the other side in the order listed on the command\nline. When no <b>--push-option=&lt;option&gt;</b> is given\nfrom the command line, the values of configuration variable\n<b>push.pushOption</b> are used instead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--receive-pack=&lt;git-receive-pack&gt;,\n--exec=&lt;git-receive-pack&gt;</p>\n\n<p style=\"margin-left:17%;\">Path to the\n<i>git-receive-pack</i> program on the remote end. Sometimes\nuseful when pushing to a remote repository over ssh, and you\ndo not have the program in a directory on the default\n$PATH.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]force-with-lease,\n--force-with-lease=&lt;refname&gt;,\n--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</p>\n\n<p style=\"margin-left:17%;\">Usually, &quot;git push&quot;\nrefuses to update a remote ref that is not an ancestor of\nthe local ref used to overwrite it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option\noverrides this restriction if the current value of the\nremote ref is the expected value. &quot;git push&quot; fails\notherwise.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Imagine that\nyou have to rebase what you have already published. You will\nhave to bypass the &quot;must fast-forward&quot; rule in\norder to replace the history you originally published with\nthe rebased history. If somebody else built on top of your\noriginal history while you are rebasing, the tip of the\nbranch at the remote may advance with their commit, and\nblindly pushing with <b>--force</b> will lose their\nwork.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option\nallows you to say that you expect the history you are\nupdating is what you rebased and want to replace. If the\nremote ref still points at the commit you specified, you can\nbe sure that no other people did anything to the ref. It is\nlike taking a &quot;lease&quot; on the ref without\nexplicitly locking it, and the remote ref is updated only if\nthe &quot;lease&quot; is still valid.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--force-with-lease</b>\nalone, without specifying the details, will protect all\nremote refs that are going to be updated by requiring their\ncurrent value to be the same as the remote-tracking branch\nwe have for them.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--force-with-lease=&lt;refname&gt;</b>,\nwithout specifying the expected value, will protect the\nnamed ref (alone), if it is going to be updated, by\nrequiring its current value to be the same as the\nremote-tracking branch we have for it.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</b>\nwill protect the named ref (alone), if it is going to be\nupdated, by requiring its current value to be the same as\nthe specified value <b>&lt;expect&gt;</b> (which is allowed\nto be different from the remote-tracking branch we have for\nthe refname, or we do not even have to have such a\nremote-tracking branch when this form is used). If\n<b>&lt;expect&gt;</b> is the empty string, then the named\nref must not already exist.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that all\nforms other than\n<b>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</b>\nthat specifies the expected current value of the ref\nexplicitly are still experimental and their semantics may\nchange as we gain experience with this feature.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;--no-force-with-lease&quot;\nwill cancel all the previous --force-with-lease on the\ncommand line.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A general note\non safety: supplying this option without an expected value,\ni.e. as <b>--force-with-lease</b> or\n<b>--force-with-lease=&lt;refname&gt;</b> interacts very\nbadly with anything that implicitly runs <b>git fetch</b> on\nthe remote to be pushed to in the background, e.g. <b>git\nfetch origin</b> on your repository in a cronjob.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The protection\nit offers over <b>--force</b> is ensuring that subsequent\nchanges your work wasn&rsquo;t based on aren&rsquo;t\nclobbered, but this is trivially defeated if some background\nprocess is updating refs in the background. We don&rsquo;t\nhave anything except the remote tracking info to go by as a\nheuristic for refs you&rsquo;re expected to have seen &amp;\nare willing to clobber.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If your editor\nor some other system is running <b>git fetch</b> in the\nbackground for you a way to mitigate this is to simply set\nup another remote:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">git remote add\norigin-push $(git config remote.origin.url) <br>\ngit fetch origin-push</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Now when the\nbackground process runs <b>git fetch origin</b> the\nreferences on <b>origin-push</b> won&rsquo;t be updated, and\nthus commands like:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">git push\n--force-with-lease origin-push</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Will fail\nunless you manually run <b>git fetch origin-push</b>. This\nmethod is of course entirely defeated by something that runs\n<b>git fetch --all</b>, in that case you&rsquo;d need to\neither disable it or do something more tedious like:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">git fetch #\nupdate 'master' from remote <br>\ngit tag base master # mark our base point <br>\ngit rebase -i master # rewrite some commits <br>\ngit push --force-with-lease=master:base master:master</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">I.e. create a\n<b>base</b> tag for versions of the upstream code that\nyou&rsquo;ve seen and are willing to overwrite, then rewrite\nhistory, and finally force push changes to <b>master</b> if\nthe remote version is still at <b>base</b>, regardless of\nwhat your local <b>remotes/origin/master</b> has been\nupdated to in the background.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Alternatively,\nspecifying <b>--force-if-includes</b> as an ancillary option\nalong with <b>--force-with-lease[=&lt;refname&gt;]</b>\n(i.e., without saying what exact commit the ref on the\nremote side must be pointing at, or which refs on the remote\nside are being protected) at the time of &quot;push&quot;\nwill verify if updates from the remote-tracking refs that\nmay have been implicitly updated in the background are\nintegrated locally before allowing a forced update.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f, --force</p>\n\n<p style=\"margin-left:17%;\">Usually, the command refuses to\nupdate a remote ref that is not an ancestor of the local ref\nused to overwrite it. Also, when <b>--force-with-lease</b>\noption is used, the command refuses to update a remote ref\nwhose current value does not match what is expected.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This flag\ndisables these checks, and can cause the remote repository\nto lose commits; use it with care.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\n<b>--force</b> applies to all the refs that are pushed,\nhence using it with <b>push.default</b> set to\n<b>matching</b> or with multiple push destinations\nconfigured with <b>remote.*.push</b> may overwrite refs\nother than the current branch (including local refs that are\nstrictly behind their remote counterpart). To force a push\nto only one branch, use a <b>+</b> in front of the refspec\nto push (e.g <b>git push origin +master</b> to force a push\nto the <b>master</b> branch). See the\n<b>&lt;refspec&gt;...</b> section above for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]force-if-includes</p>\n\n<p style=\"margin-left:17%;\">Force an update only if the tip\nof the remote-tracking ref has been integrated locally.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option\nenables a check that verifies if the tip of the\nremote-tracking ref is reachable from one of the\n&quot;reflog&quot; entries of the local branch based in it\nfor a rewrite. The check ensures that any updates from the\nremote have been incorporated locally by rejecting the\nforced update if that is not the case.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the option\nis passed without specifying <b>--force-with-lease</b>, or\nspecified along with\n<b>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</b>, it\nis a &quot;no-op&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Specifying\n<b>--no-force-if-includes</b> disables this behavior.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--repo=&lt;repository&gt;</p>\n\n<p style=\"margin-left:17%;\">This option is equivalent to\nthe &lt;repository&gt; argument. If both are specified, the\ncommand-line argument takes precedence.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-u,\n--set-upstream</p>\n\n<p style=\"margin-left:17%;\">For every branch that is up to\ndate or successfully pushed, add upstream (tracking)\nreference, used by argument-less <a href=\"https://man.page/1/git-pull\">git-pull(1)</a> and\nother commands. For more information, see\n<b>branch.&lt;name&gt;.merge</b> in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]thin</p>\n\n<p style=\"margin-left:17%;\">These options are passed to\n<a href=\"https://man.page/1/git-send-pack\">git-send-pack(1)</a>. A thin transfer significantly\nreduces the amount of sent data when the sender and receiver\nshare many of the same objects in common. The default is\n<b>--thin</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">Suppress all output, including\nthe listing of updated refs, unless an error occurs.\nProgress is not reported to the standard error stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v,\n--verbose</p>\n\n<p style=\"margin-left:17%;\">Run verbosely.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--progress</p>\n\n<p style=\"margin-left:17%;\">Progress status is reported on\nthe standard error stream by default when it is attached to\na terminal, unless -q is specified. This flag forces\nprogress status even if the standard error stream is not\ndirected to a terminal.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-recurse-submodules,\n--recurse-submodules=check|on-demand|only|no</p>\n\n<p style=\"margin-left:17%;\">May be used to make sure all\nsubmodule commits used by the revisions to be pushed are\navailable on a remote-tracking branch. If <i>check</i> is\nused Git will verify that all submodule commits that changed\nin the revisions to be pushed are available on at least one\nremote of the submodule. If any commits are missing the push\nwill be aborted and exit with non-zero status. If\n<i>on-demand</i> is used all submodules that changed in the\nrevisions to be pushed will be pushed. If on-demand was not\nable to push all necessary revisions it will also be aborted\nand exit with non-zero status. If <i>only</i> is used all\nsubmodules will be recursively pushed while the superproject\nis left unpushed. A value of <i>no</i> or using\n<b>--no-recurse-submodules</b> can be used to override the\npush.recurseSubmodules configuration variable when no\nsubmodule recursion is required.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]verify</p>\n\n<p style=\"margin-left:17%;\">Toggle the pre-push hook (see\n<a href=\"https://man.page/5/githooks\">githooks(5)</a>). The default is --verify, giving the\nhook a chance to prevent the push. With --no-verify, the\nhook is bypassed completely.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-4, --ipv4</p>\n\n<p style=\"margin-left:17%;\">Use IPv4 addresses only,\nignoring IPv6 addresses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-6, --ipv6</p>\n\n<p style=\"margin-left:17%;\">Use IPv6 addresses only,\nignoring IPv4 addresses.</p>\n\n<h2>GIT URLS\n<a name=\"GIT URLS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general,\nURLs contain information about the transport protocol, the\naddress of the remote server, and the path to the\nrepository. Depending on the transport protocol, some of\nthis information may be absent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git supports\nssh, git, http, and https protocols (in addition, ftp, and\nftps can be used for fetching, but this is inefficient and\ndeprecated; do not use it).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The native\ntransport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nsyntaxes may be used with them:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nssh://[user@]host.xz[:port]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ngit://host.xz[:port]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nhttp[s]://host.xz[:port]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nftp[s]://host.xz[:port]/path/to/repo.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An alternative\nscp-like syntax may also be used with the ssh protocol:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n[user@]host.xz:path/to/repo.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This syntax is\nonly recognized if there are no slashes before the first\ncolon. This helps differentiate a local path that contains a\ncolon. For example the local path <b>foo:bar</b> could be\nspecified as an absolute path or <b>./foo:bar</b> to avoid\nbeing misinterpreted as an ssh url.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The ssh and git\nprotocols additionally support ~username expansion:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ngit://host.xz[:port]/~[user]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n[user@]host.xz:/~[user]/path/to/repo.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For local\nrepositories, also supported by Git natively, the following\nsyntaxes may be used:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nfile:///path/to/repo.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These two\nsyntaxes are mostly equivalent, except when cloning, when\nthe former implies --local option. See <a href=\"https://man.page/1/git-clone\">git-clone(1)</a>\nfor details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nclone</i>, <i>git fetch</i> and <i>git pull</i>, but not\n<i>git push</i>, will also accept a suitable bundle file.\nSee <a href=\"https://man.page/1/git-bundle\">git-bundle(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When Git\ndoesn&rsquo;t know how to handle a certain transport\nprotocol, it attempts to use the\n<i>remote-&lt;transport&gt;</i> remote helper, if one\nexists. To explicitly request a remote helper, the following\nsyntax may be used:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&lt;transport&gt;::&lt;address&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n&lt;address&gt; may be a path, a server and path, or an\narbitrary URL-like string recognized by the specific remote\nhelper being invoked. See <a href=\"https://man.page/7/gitremote-helpers\">gitremote-helpers(7)</a> for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there are a\nlarge number of similarly-named remote repositories and you\nwant to use a different format for them (such that the URLs\nyou use will be rewritten into URLs that work), you can\ncreate a configuration section of the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[url\n&quot;&lt;actual url base&gt;&quot;] <br>\ninsteadOf = &lt;other url base&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nwith this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[url\n&quot;git://git.host.xz/&quot;] <br>\ninsteadOf = host.xz:/path/to/ <br>\ninsteadOf = work:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">a URL like\n&quot;work:repo.git&quot; or like\n&quot;host.xz:/path/to/repo.git&quot; will be rewritten in\nany context that takes a URL to be\n&quot;git://git.host.xz/repo.git&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nrewrite URLs for push only, you can create a configuration\nsection of the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[url\n&quot;&lt;actual url base&gt;&quot;] <br>\npushInsteadOf = &lt;other url base&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nwith this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[url\n&quot;ssh://example.org/&quot;] <br>\npushInsteadOf = git://example.org/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">a URL like\n&quot;git://example.org/path/to/repo.git&quot; will be\nrewritten to &quot;ssh://example.org/path/to/repo.git&quot;\nfor pushes, but pulls will still use the original URL.</p>\n\n<h2>REMOTES\n<a name=\"REMOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The name of one\nof the following can be used instead of a URL as\n<b>&lt;repository&gt;</b> argument:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; a remote\nin the Git configuration file: <b>$GIT_DIR/config</b>,</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; a file\nin the <b>$GIT_DIR/remotes</b> directory, or</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; a file\nin the <b>$GIT_DIR/branches</b> directory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of these\nalso allow you to omit the refspec from the command line\nbecause they each contain a refspec which git will use by\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Named remote\nin configuration file</b> <br>\nYou can choose to provide the name of a remote which you had\npreviously configured using <a href=\"https://man.page/1/git-remote\">git-remote(1)</a>,\n<a href=\"https://man.page/1/git-config\">git-config(1)</a> or even by a manual edit to the\n<b>$GIT_DIR/config</b> file. The URL of this remote will be\nused to access the repository. The refspec of this remote\nwill be used by default when you do not provide a refspec on\nthe command line. The entry in the config file would appear\nlike this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[remote\n&quot;&lt;name&gt;&quot;] <br>\nurl = &lt;url&gt; <br>\npushurl = &lt;pushurl&gt; <br>\npush = &lt;refspec&gt; <br>\nfetch = &lt;refspec&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>&lt;pushurl&gt;</b> is used for pushes only. It is\noptional and defaults to <b>&lt;url&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Named file\nin $GIT_DIR/remotes</b> <br>\nYou can choose to provide the name of a file in\n<b>$GIT_DIR/remotes</b>. The URL in this file will be used\nto access the repository. The refspec in this file will be\nused as default when you do not provide a refspec on the\ncommand line. This file should have the following\nformat:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">URL: one of the\nabove URL format <br>\nPush: &lt;refspec&gt; <br>\nPull: &lt;refspec&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Push:</b>\nlines are used by <i>git push</i> and <b>Pull:</b> lines are\nused by <i>git pull</i> and <i>git fetch</i>. Multiple\n<b>Push:</b> and <b>Pull:</b> lines may be specified for\nadditional branch mappings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Named file\nin $GIT_DIR/branches</b> <br>\nYou can choose to provide the name of a file in\n<b>$GIT_DIR/branches</b>. The URL in this file will be used\nto access the repository. This file should have the\nfollowing format:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;url&gt;#&lt;head&gt;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&lt;url&gt;</b>\nis required; <b>#&lt;head&gt;</b> is optional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Depending on\nthe operation, git will use one of the following refspecs,\nif you don&rsquo;t provide one on the command line.\n<b>&lt;branch&gt;</b> is the name of this file in\n<b>$GIT_DIR/branches</b> and <b>&lt;head&gt;</b> defaults to\n<b>master</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">git fetch\nuses:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">git push\nuses:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">HEAD:refs/heads/&lt;head&gt;</p>\n\n<h2>OUTPUT\n<a name=\"OUTPUT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The output of\n&quot;git push&quot; depends on the transport method used;\nthis section describes the output when pushing over the Git\nprotocol (either locally or via ssh).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The status of\nthe push is output in tabular form, with each line\nrepresenting the status of a single ref. Each line is of the\nform:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;flag&gt;\n&lt;summary&gt; &lt;from&gt; -&gt; &lt;to&gt;\n(&lt;reason&gt;)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If --porcelain\nis used, then each line of the output is of the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;flag&gt; \\t\n&lt;from&gt;:&lt;to&gt; \\t &lt;summary&gt;\n(&lt;reason&gt;)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The status of\nup-to-date refs is shown only if --porcelain or --verbose\noption is used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">flag</p>\n\n<p style=\"margin-left:17%;\">A single character indicating\nthe status of the ref:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">(space)</p>\n\n<p style=\"margin-left:23%;\">for a successfully pushed\nfast-forward;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>+</b></p>\n\n<p style=\"margin-left:23%;\">for a successful forced\nupdate;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>-</b></p>\n\n<p style=\"margin-left:23%;\">for a successfully deleted\nref;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>*</b></p>\n\n<p style=\"margin-left:23%;\">for a successfully pushed new\nref;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>!</b></p>\n\n<p style=\"margin-left:23%;\">for a ref that was rejected or\nfailed to push; and</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>=</b></p>\n\n<p style=\"margin-left:23%;\">for a ref that was up to date\nand did not need pushing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">summary</p>\n\n<p style=\"margin-left:17%;\">For a successfully pushed ref,\nthe summary shows the old and new values of the ref in a\nform suitable for using as an argument to <b>git log</b>\n(this is <b>&lt;old&gt;..&lt;new&gt;</b> in most cases, and\n<b>&lt;old&gt;...&lt;new&gt;</b> for forced non-fast-forward\nupdates).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For a failed\nupdate, more details are given:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">rejected</p>\n\n<p style=\"margin-left:23%;\">Git did not try to send the ref\nat all, typically because it is not a fast-forward and you\ndid not force the update.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">remote\nrejected</p>\n\n<p style=\"margin-left:23%;\">The remote end refused the\nupdate. Usually caused by a hook on the remote side, or\nbecause the remote repository has one of the following\nsafety options in effect: <b>receive.denyCurrentBranch</b>\n(for pushes to the checked out branch),\n<b>receive.denyNonFastForwards</b> (for forced\nnon-fast-forward updates), <b>receive.denyDeletes</b> or\n<b>receive.denyDeleteCurrent</b>. See\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">remote\nfailure</p>\n\n<p style=\"margin-left:23%;\">The remote end did not report\nthe successful update of the ref, perhaps because of a\ntemporary error on the remote side, a break in the network\nconnection, or other transient error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">from</p>\n\n<p style=\"margin-left:17%;\">The name of the local ref being\npushed, minus its <b>refs/&lt;type&gt;/</b> prefix. In the\ncase of deletion, the name of the local ref is omitted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">to</p>\n\n<p style=\"margin-left:17%;\">The name of the remote ref\nbeing updated, minus its <b>refs/&lt;type&gt;/</b>\nprefix.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">reason</p>\n\n<p style=\"margin-left:17%;\">A human-readable explanation.\nIn the case of successfully pushed refs, no explanation is\nneeded. For a failed ref, the reason for failure is\ndescribed.</p>\n\n<h2>NOTE ABOUT FAST-FORWARDS\n<a name=\"NOTE ABOUT FAST-FORWARDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When an update\nchanges a branch (or more in general, a ref) that used to\npoint at commit A to point at another commit B, it is called\na fast-forward update if and only if B is a descendant of\nA.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a\nfast-forward update from A to B, the set of commits that the\noriginal commit A built on top of is a subset of the commits\nthe new commit B builds on top of. Hence, it does not lose\nany history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In contrast, a\nnon-fast-forward update will lose history. For example,\nsuppose you and somebody else started at the same commit X,\nand you built a history leading to commit B while the other\nperson built a history leading to commit A. The history\nlooks like this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">B <br>\n/ <br>\n---X---A</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Further suppose\nthat the other person already pushed changes leading to A\nback to the original repository from which you two obtained\nthe original commit X.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The push done\nby the other person updated the branch that used to point at\ncommit X to point at commit A. It is a fast-forward.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">But if you try\nto push, you will attempt to update the branch (that now\npoints at A) with commit B. This does <i>not</i>\nfast-forward. If you did so, the changes introduced by\ncommit A will be lost, because everybody will now start\nbuilding on top of B.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command by\ndefault does not allow an update that is not a fast-forward\nto prevent such loss of history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you do not\nwant to lose your work (history from X to B) or the work by\nthe other person (history from X to A), you would need to\nfirst fetch the history from the repository, create a\nhistory that contains changes done by both parties, and push\nthe result back.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can perform\n&quot;git pull&quot;, resolve potential conflicts, and\n&quot;git push&quot; the result. A &quot;git pull&quot; will\ncreate a merge commit C between commits A and B.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">B---C <br>\n/ / <br>\n---X---A</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Updating A with\nthe resulting merge commit will fast-forward and your push\nwill be accepted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alternatively,\nyou can rebase your change between X and B on top of A, with\n&quot;git pull --rebase&quot;, and push the result back. The\nrebase will create a new commit D that builds the change\nbetween X and B on top of A.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">B D <br>\n/ / <br>\n---X---A</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Again, updating\nA with this commit will fast-forward and your push will be\naccepted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is\nanother common situation where you may encounter\nnon-fast-forward rejection when you try to push, and it is\npossible even when you are pushing into a repository nobody\nelse pushes into. After you push commit A yourself (in the\nfirst picture in this section), replace it with &quot;git\ncommit --amend&quot; to produce commit B, and you try to\npush it out, because forgot that you have pushed A out\nalready. In such a case, and only if you are certain that\nnobody in the meantime fetched your earlier commit A (and\nstarted building on top of it), you can run &quot;git push\n--force&quot; to overwrite it. In other words, &quot;git\npush --force&quot; is a method reserved for a case where you\ndo mean to lose history.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\npush</b></p>\n\n<p style=\"margin-left:17%;\">Works like <b>git push\n&lt;remote&gt;</b>, where &lt;remote&gt; is the current\nbranch&rsquo;s remote (or <b>origin</b>, if no remote is\nconfigured for the current branch).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\norigin</b></p>\n\n<p style=\"margin-left:17%;\">Without additional\nconfiguration, pushes the current branch to the configured\nupstream (<b>branch.&lt;name&gt;.merge</b> configuration\nvariable) if it has the same name as the current branch, and\nerrors out without pushing otherwise.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\nbehavior of this command when no &lt;refspec&gt; is given\ncan be configured by setting the <b>push</b> option of the\nremote, or the <b>push.default</b> configuration\nvariable.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example, to\ndefault to pushing only the current branch to <b>origin</b>\nuse <b>git config remote.origin.push HEAD</b>. Any valid\n&lt;refspec&gt; (like the ones in the examples below) can be\nconfigured as the default for <b>git push origin</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\norigin :</b></p>\n\n<p style=\"margin-left:17%;\">Push &quot;matching&quot;\nbranches to <b>origin</b>. See &lt;refspec&gt; in the\nOPTIONS section above for a description of\n&quot;matching&quot; branches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\norigin master</b></p>\n\n<p style=\"margin-left:17%;\">Find a ref that matches\n<b>master</b> in the source repository (most likely, it\nwould find <b>refs/heads/master</b>), and update the same\nref (e.g. <b>refs/heads/master</b>) in <b>origin</b>\nrepository with it. If <b>master</b> did not exist remotely,\nit would be created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\norigin HEAD</b></p>\n\n<p style=\"margin-left:17%;\">A handy way to push the current\nbranch to the same name on the remote.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\nmothership master:satellite/master dev:satellite/dev</b></p>\n\n<p style=\"margin-left:17%;\">Use the source ref that matches\n<b>master</b> (e.g. <b>refs/heads/master</b>) to update the\nref that matches <b>satellite/master</b> (most probably\n<b>refs/remotes/satellite/master</b>) in the\n<b>mothership</b> repository; do the same for <b>dev</b> and\n<b>satellite/dev</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the section\ndescribing <b>&lt;refspec&gt;...</b> above for a discussion\nof the matching semantics.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is to\nemulate <b>git fetch</b> run on the <b>mothership</b> using\n<b>git push</b> that is run in the opposite direction in\norder to integrate the work done on <b>satellite</b>, and is\noften necessary when you can only make connection in one way\n(i.e. satellite can ssh into mothership but mothership\ncannot initiate connection to satellite because the latter\nis behind a firewall or does not run sshd).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">After running\nthis <b>git push</b> on the <b>satellite</b> machine, you\nwould ssh into the <b>mothership</b> and run <b>git\nmerge</b> there to complete the emulation of <b>git pull</b>\nthat were run on <b>mothership</b> to pull changes made on\n<b>satellite</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\norigin HEAD:master</b></p>\n\n<p style=\"margin-left:17%;\">Push the current branch to the\nremote ref matching <b>master</b> in the <b>origin</b>\nrepository. This form is convenient to push the current\nbranch without thinking about its local name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\norigin master:refs/heads/experimental</b></p>\n\n<p style=\"margin-left:17%;\">Create the branch\n<b>experimental</b> in the <b>origin</b> repository by\ncopying the current <b>master</b> branch. This form is only\nneeded to create a new branch or tag in the remote\nrepository when the local name and the remote name are\ndifferent; otherwise, the ref name on its own will work.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\norigin :experimental</b></p>\n\n<p style=\"margin-left:17%;\">Find a ref that matches\n<b>experimental</b> in the <b>origin</b> repository (e.g.\n<b>refs/heads/experimental</b>), and delete it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\norigin +dev:master</b></p>\n\n<p style=\"margin-left:17%;\">Update the origin\nrepository&rsquo;s master branch with the dev branch,\nallowing non-fast-forward updates. <b>This can leave\nunreferenced commits dangling in the origin repository.</b>\nConsider the following situation, where a fast-forward is\nnot possible:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">o---o---o---A---B\norigin/master <br>\n\\ <br>\nX---Y---Z dev</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The above\ncommand would change the origin repository to</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">A---B (unnamed\nbranch) <br>\n/ <br>\no---o---o---X---Y---Z master</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Commits A and B\nwould no longer belong to a branch with a symbolic name, and\nso would be unreachable. As such, these commits would be\nremoved by a <b>git gc</b> command on the origin\nrepository.</p>\n\n<h2>SECURITY\n<a name=\"SECURITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fetch and\npush protocols are not designed to prevent one side from\nstealing data from the other repository that was not\nintended to be shared. If you have private data that you\nneed to protect from a malicious peer, your best option is\nto store it in another repository. This applies to both\nclients and servers. In particular, namespaces on a server\nare not effective for read access control; you should only\ngrant read access to a namespace to clients that you would\ntrust with read access to the entire repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The known\nattack vectors are as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. The victim\nsends &quot;have&quot; lines advertising the IDs of objects\nit has that are not explicitly intended to be shared but can\nbe used to optimize the transfer if the peer also has them.\nThe attacker chooses an object ID X to steal and sends a ref\nto X, but isn&rsquo;t required to send the content of X\nbecause the victim already has it. Now the victim believes\nthat the attacker has X, and it sends the content of X back\nto the attacker later. (This attack is most straightforward\nfor a client to perform on a server, by creating a ref to X\nin the namespace the client has access to and then fetching\nit. The most likely way for a server to perform it on a\nclient is to &quot;merge&quot; X into a public branch and\nhope that the user does additional work on this branch and\npushes it back to the server without noticing the\nmerge.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. As in #1,\nthe attacker chooses an object ID X to steal. The victim\nsends an object Y that the attacker already has, and the\nattacker falsely claims to have X and not Y, so the victim\nsends Y as a delta against X. The delta reveals regions of X\nthat are similar to Y to the attacker.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#GIT URLS\">GIT URLS</a>","<a href=\"#REMOTES\">REMOTES</a>","<a href=\"#OUTPUT\">OUTPUT</a>","<a href=\"#NOTE ABOUT FAST-FORWARDS\">NOTE ABOUT FAST-FORWARDS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SECURITY\">SECURITY</a>","<a href=\"#GIT\">GIT</a>"]}