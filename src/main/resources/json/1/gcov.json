{"name":"gcov","body":"\n\n<h1 align=\"center\">GCOV</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gcov - coverage\ntesting tool</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gcov\n[<b>-v</b>|<b>--version</b>] [<b>-h</b>|<b>--help</b>] <br>\n[<b>-a</b>|<b>--all-blocks</b>] <br>\n[<b>-b</b>|<b>--branch-probabilities</b>] <br>\n[<b>-c</b>|<b>--branch-counts</b>] <br>\n[<b>-d</b>|<b>--display-progress</b>] <br>\n[<b>-f</b>|<b>--function-summaries</b>] <br>\n[<b>-j</b>|<b>--json-format</b>] <br>\n[<b>-H</b>|<b>--human-readable</b>] <br>\n[<b>-k</b>|<b>--use-colors</b>] <br>\n[<b>-l</b>|<b>--long-file-names</b>] <br>\n[<b>-m</b>|<b>--demangled-names</b>] <br>\n[<b>-n</b>|<b>--no-output</b>] <br>\n[<b>-o</b>|<b>--object-directory</b> <i>directory|file</i>]\n<br>\n[<b>-p</b>|<b>--preserve-paths</b>] <br>\n[<b>-q</b>|<b>--use-hotness-colors</b>] <br>\n[<b>-r</b>|<b>--relative-only</b>] <br>\n[<b>-s</b>|<b>--source-prefix</b> <i>directory</i>] <br>\n[<b>-t</b>|<b>--stdout</b>] <br>\n[<b>-u</b>|<b>--unconditional-branches</b>] <br>\n[<b>-x</b>|<b>--hash-filenames</b>] <i><br>\nfiles</i></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><b>gcov</b></i>\nis a test coverage program. Use it in concert with\n<small>GCC</small> to analyze your programs to help create\nmore efficient, faster running code and to discover untested\nparts of your program. You can use <b>gcov</b> as a\nprofiling tool to help discover where your optimization\nefforts will best affect your code. You can also use\n<b>gcov</b> along with the other profiling tool,\n<b>gprof</b>, to assess which parts of your code use the\ngreatest amount of computing time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Profiling tools\nhelp you analyze your code&rsquo;s performance. Using a\nprofiler such as <b>gcov</b> or <b>gprof</b>, you can find\nout some basic performance statistics, such as:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>how often each line of code executes</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>what lines of code are actually executed</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>how much computing time each section of code uses</p></td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once you know\nthese things about how your code works when compiled, you\ncan look at each module to see which modules should be\noptimized. <b>gcov</b> helps you determine where to work on\noptimization.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Software\ndevelopers also use coverage testing in concert with\ntestsuites, to make sure software is actually good enough\nfor a release. Testsuites can verify that a program works as\nexpected; a coverage program tests to see how much of the\nprogram is exercised by the testsuite. Developers can then\ndetermine what kinds of test cases need to be added to the\ntestsuites to create both better testing and a better final\nproduct.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You should\ncompile your code without optimization if you plan to use\n<b>gcov</b> because the optimization, by combining some\nlines of code into one function, may not give you as much\ninformation as you need to look for &rsquo;hot spots&rsquo;\nwhere the code is using a great deal of computer time.\nLikewise, because <b>gcov</b> accumulates statistics by line\n(at the lowest resolution), it works best with a programming\nstyle that places only one statement on each line. If you\nuse complicated macros that expand to loops or to other\ncontrol structures, the statistics are less helpful---they\nonly report on the line where the macro call appears. If\nyour complex macros behave like functions, you can replace\nthem with inline functions to solve this problem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>gcov</b>\ncreates a logfile called <i>sourcefile.gcov</i> which\nindicates how many times each line of a source file\n<i>sourcefile.c</i> has executed. You can use these logfiles\nalong with <b>gprof</b> to aid in fine-tuning the\nperformance of your programs. <b>gprof</b> gives timing\ninformation you can use along with the information you get\nfrom <b>gcov</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>gcov</b>\nworks only on code compiled with <small>GCC.</small> It is\nnot compatible with any other profiling or test coverage\nmechanism.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>-a</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--all-blocks</b></p>\n\n<p style=\"margin-left:17%;\">Write individual execution\ncounts for every basic block. Normally gcov outputs\nexecution counts only for the main blocks of a line. With\nthis option you can determine if blocks within a single line\nare not being executed.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-b</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>--branch-probabilities</b></p>\n\n<p style=\"margin-left:17%;\">Write branch frequencies to the\noutput file, and write branch summary info to the standard\noutput. This option allows you to see how often each branch\nin your program was taken. Unconditional branches will not\nbe shown, unless the <b>-u</b> option is given.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-c</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--branch-counts</b></p>\n\n<p style=\"margin-left:17%;\">Write branch frequencies as the\nnumber of branches taken, rather than the percentage of\nbranches taken.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-d</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--display-progress</b></p>\n\n<p style=\"margin-left:17%;\">Display the progress on the\nstandard output.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-f</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>--function-summaries</b></p>\n\n<p style=\"margin-left:17%;\">Output summaries for each\nfunction in addition to the file level summary.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-h</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--help</b></p>\n\n<p style=\"margin-left:17%;\">Display help about using\n<b>gcov</b> (on the standard output), and exit without doing\nany further processing.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-j</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--json-format</b></p>\n\n<p style=\"margin-left:17%;\">Output gcov file in an\neasy-to-parse <small>JSON</small> intermediate format which\ndoes not require source code for generation. The\n<small>JSON</small> file is compressed with gzip compression\nalgorithm and the files have <i>.gcov.json.gz</i>\nextension.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Structure of\nthe <small>JSON</small> is following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">{ <br>\n&quot;current_working_directory&quot;:\n&lt;current_working_directory&gt;, <br>\n&quot;data_file&quot;: &lt;data_file&gt;, <br>\n&quot;format_version&quot;: &lt;format_version&gt;, <br>\n&quot;gcc_version&quot;: &lt;gcc_version&gt; <br>\n&quot;files&quot;: [&lt;file&gt;] <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Fields of the\nroot element have following semantics:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>current_working_directory</i>: working directory\nwhere a compilation unit was compiled</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>data_file</i>: name of the data file (\n<small>GCDA</small> )</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>format_version</i>: semantic version of the\nformat</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>gcc_version</i>: version of the <small>GCC</small>\ncompiler</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Each\n<i>file</i> has the following form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">{ <br>\n&quot;file&quot;: &lt;file_name&gt;, <br>\n&quot;functions&quot;: [&lt;function&gt;], <br>\n&quot;lines&quot;: [&lt;line&gt;] <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Fields of the\n<i>file</i> element have following semantics:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"5%\"></td>\n<td width=\"52%\">\n\n\n<p style=\"margin-top: 1em\"><i>file_name</i>: name of the\nsource file</p></td>\n<td width=\"25%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Each\n<i>function</i> has the following form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">{ <br>\n&quot;blocks&quot;: &lt;blocks&gt;, <br>\n&quot;blocks_executed&quot;: &lt;blocks_executed&gt;, <br>\n&quot;demangled_name&quot;: &quot;&lt;demangled_name&gt;,\n<br>\n&quot;end_column&quot;: &lt;end_column&gt;, <br>\n&quot;end_line&quot;: &lt;end_line&gt;, <br>\n&quot;execution_count&quot;: &lt;execution_count&gt;, <br>\n&quot;name&quot;: &lt;name&gt;, <br>\n&quot;start_column&quot;: &lt;start_column&gt; <br>\n&quot;start_line&quot;: &lt;start_line&gt; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Fields of the\n<i>function</i> element have following semantics:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><i>blocks</i>: number of blocks\nthat are in the function</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>blocks_executed</i>: number of executed blocks of the\nfunction</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>demangled_name</i>: demangled name of the\nfunction</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>end_column</i>: column in the source file where the\nfunction ends</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>end_line</i>: line in the source file where the\nfunction ends</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>execution_count</i>: number of executions of the\nfunction</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>name</i>: name of the function</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>start_column</i>: column in the source file where the\nfunction begins</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>start_line</i>: line in the source file where the\nfunction begins</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that line\nnumbers and column numbers number from 1. In the current\nimplementation, <i>start_line</i> and <i>start_column</i> do\nnot include any template parameters and the leading return\ntype but that this is likely to be fixed in the future.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Each\n<i>line</i> has the following form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">{ <br>\n&quot;branches&quot;: [&lt;branch&gt;], <br>\n&quot;count&quot;: &lt;count&gt;, <br>\n&quot;line_number&quot;: &lt;line_number&gt;, <br>\n&quot;unexecuted_block&quot;: &lt;unexecuted_block&gt; <br>\n&quot;function_name&quot;: &lt;function_name&gt;, <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Branches are\npresent only with <i>-b</i> option. Fields of the\n<i>line</i> element have following semantics:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><i>count</i>: number of\nexecutions of the line</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>line_number</i>: line number</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>unexecuted_block</i>: flag whether the line contains\nan unexecuted block (not all statements on the line are\nexecuted)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>function_name</i>: a name of a function this\n<i>line</i> belongs to (for a line with an inlined\nstatements can be not set)</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Each\n<i>branch</i> has the following form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">{ <br>\n&quot;count&quot;: &lt;count&gt;, <br>\n&quot;fallthrough&quot;: &lt;fallthrough&gt;, <br>\n&quot;throw&quot;: &lt;throw&gt; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Fields of the\n<i>branch</i> element have following semantics:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><i>count</i>: number of\nexecutions of the branch</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>fallthrough</i>: true when the branch is a fall\nthrough branch</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>*</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>throw</i>: true when the branch is an exceptional\nbranch</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>-H</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--human-readable</b></p>\n\n<p style=\"margin-left:17%;\">Write counts in human readable\nformat (like 24.6k).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-k</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--use-colors</b></p>\n\n<p style=\"margin-left:17%;\">Use colors for lines of code\nthat have zero coverage. We use red color for\nnon-exceptional lines and cyan for exceptional. Same colors\nare used for basic blocks with <b>-a</b> option.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-l</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--long-file-names</b></p>\n\n<p style=\"margin-left:17%;\">Create long file names for\nincluded source files. For example, if the header file\n<i>x.h</i> contains code, and was included in the file\n<i>a.c</i>, then running <b>gcov</b> on the file <i>a.c</i>\nwill produce an output file called <i>a.c##x.h.gcov</i>\ninstead of <i>x.h.gcov</i>. This can be useful if <i>x.h</i>\nis included in multiple source files and you want to see the\nindividual contributions. If you use the <b>-p</b> option,\nboth the including and included file names will be complete\npath names.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-m</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--demangled-names</b></p>\n\n<p style=\"margin-left:17%;\">Display demangled function\nnames in output. The default is to show mangled function\nnames.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-n</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--no-output</b></p>\n\n<p style=\"margin-left:17%;\">Do not create the <b>gcov</b>\noutput file.</p>\n\n<p style=\"margin-left:11%;\"><b>-o</b> <i>directory|file</i>\n<b><br>\n--object-directory</b> <i>directory</i> <b><br>\n--object-file</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">Specify either the directory\ncontaining the gcov data files, or the object path name. The\n<i>.gcno</i>, and <i>.gcda</i> data files are searched for\nusing this option. If a directory is specified, the data\nfiles are in that directory and named after the input file\nname, without its extension. If a file is specified here,\nthe data files are named after that file, without its\nextension.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-p</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--preserve-paths</b></p>\n\n<p style=\"margin-left:17%;\">Preserve complete path\ninformation in the names of generated <i>.gcov</i> files.\nWithout this option, just the filename component is used.\nWith this option, all directories are used, with <b>/</b>\ncharacters translated to <b>#</b> characters, <i>.</i>\ndirectory components removed and unremoveable <i>..</i>\ncomponents renamed to <b>^</b>. This is useful if\nsourcefiles are in several different directories.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-q</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>--use-hotness-colors</b></p>\n\n<p style=\"margin-left:17%;\">Emit perf-like colored output\nfor hot lines. Legend of the color scale is printed at the\nvery beginning of the output file.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-r</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--relative-only</b></p>\n\n<p style=\"margin-left:17%;\">Only output information about\nsource files with a relative pathname (after source prefix\nelision). Absolute paths are usually system header files and\ncoverage of any inline functions therein is normally\nuninteresting.</p>\n\n<p style=\"margin-left:11%;\"><b>-s</b> <i>directory</i>\n<b><br>\n--source-prefix</b> <i>directory</i></p>\n\n<p style=\"margin-left:17%;\">A prefix for source file names\nto remove when generating the output coverage files. This\noption is useful when building in a separate directory, and\nthe pathname to the source directory is not wanted when\ndetermining the output file names. Note that this prefix\ndetection is applied before determining whether the source\nfile is absolute.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-t</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--stdout</b></p>\n\n<p style=\"margin-left:17%;\">Output to standard output\ninstead of output files.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-u</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>--unconditional-branches</b></p>\n\n<p style=\"margin-left:17%;\">When branch probabilities are\ngiven, include those of unconditional branches.\nUnconditional branches are normally not interesting.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--version</b></p>\n\n<p style=\"margin-left:17%;\">Display the <b>gcov</b> version\nnumber (on the standard output), and exit without doing any\nfurther processing.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-w</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--verbose</b></p>\n\n<p style=\"margin-left:17%;\">Print verbose informations\nrelated to basic blocks and arcs.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-x</b></p></td>\n<td width=\"86%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--hash-filenames</b></p>\n\n<p style=\"margin-left:17%;\">When using\n<i>--preserve-paths</i>, gcov uses the full pathname of the\nsource files to create an output filename. This can lead to\nlong filenames that can overflow filesystem limits. This\noption creates names of the form\n<i>source-file##md5.gcov</i>, where the <i>source-file</i>\ncomponent is the final filename part and the <i>md5</i>\ncomponent is calculated from the full mangled name that\nwould have been used otherwise. The option is an alternative\nto the <i>--preserve-paths</i> on systems which have a\nfilesystem limit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>gcov</b>\nshould be run with the current directory the same as that\nwhen you invoked the compiler. Otherwise it will not be able\nto locate the source files. <b>gcov</b> produces files\ncalled <i>mangledname.gcov</i> in the current directory.\nThese contain the coverage information of the source file\nthey correspond to. One <i>.gcov</i> file is produced for\neach source (or header) file containing code, which was\ncompiled to produce the data files. The <i>mangledname</i>\npart of the output file name is usually simply the source\nfile name, but can be something more complicated if the\n<b>-l</b> or <b>-p</b> options are given. Refer to those\noptions for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you invoke\n<b>gcov</b> with multiple input files, the contributions\nfrom each input file are summed. Typically you would invoke\nit with the same list of files as the final link of your\nexecutable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>.gcov</i> files contain the <b>:</b> separated fields\nalong with program source code. The format is</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;execution_count&gt;:&lt;line_number&gt;:&lt;source\nline text&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additional\nblock information may succeed each line, when requested by\ncommand line option. The <i>execution_count</i> is <b>-</b>\nfor lines containing no code. Unexecuted lines are marked\n<b>#####</b> or <b>=====</b>, depending on whether they are\nreachable by non-exceptional paths or only exceptional paths\nsuch as C <small>++</small> exception handlers,\nrespectively. Given the <b>-a</b> option, unexecuted blocks\nare marked <b>$$$$$</b> or <b>%%%%%</b>, depending on\nwhether a basic block is reachable via non-exceptional or\nexceptional paths. Executed basic blocks having a statement\nwith zero <i>execution_count</i> end with <b>*</b> character\nand are colored with magenta color with the <b>-k</b>\noption. This functionality is not supported in Ada.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\n<small>GCC</small> can completely remove the bodies of\nfunctions that are not needed -- for instance if they are\ninlined everywhere. Such functions are marked with <b>-</b>,\nwhich can be confusing. Use the\n<b>-fkeep-inline-functions</b> and\n<b>-fkeep-static-functions</b> options to retain these\nfunctions and allow gcov to properly show their\n<i>execution_count</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some lines of\ninformation at the start have <i>line_number</i> of zero.\nThese preamble lines are of the form</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-:0:&lt;tag&gt;:&lt;value&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The ordering\nand number of these preamble lines will be augmented as\n<b>gcov</b> development progresses --- do not rely on them\nremaining unchanged. Use <i>tag</i> to locate a particular\npreamble line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The additional\nblock information is of the form</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;tag&gt;\n&lt;information&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>information</i> is human readable, but designed to be\nsimple enough for machine parsing too.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When printing\npercentages, 0% and 100% are only printed when the values\nare <i>exactly</i> 0% and 100% respectively. Other values\nwhich would conventionally be rounded to 0% or 100% are\ninstead printed as the nearest non-boundary value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using\n<b>gcov</b>, you must first compile your program with a\nspecial <small>GCC</small> option <b>--coverage</b>. This\ntells the compiler to generate additional information needed\nby gcov (basically a flow graph of the program) and also\nincludes additional code in the object files for generating\nthe extra profiling information needed by gcov. These\nadditional files are placed in the directory where the\nobject file is located.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Running the\nprogram will cause profile output to be generated. For each\nsource file compiled with <b>-fprofile-arcs</b>, an\naccompanying <i>.gcda</i> file will be placed in the object\nfile directory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Running\n<b>gcov</b> with your program&rsquo;s source file names as\narguments will now produce a listing of the code along with\nfrequency of execution for each line. For example, if your\nprogram is called <i>tmp.cpp</i>, this is what you see when\nyou use the basic <b>gcov</b> facility:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$ g++\n--coverage tmp.cpp -c <br>\n$ g++ --coverage tmp.o <br>\n$ a.out <br>\n$ gcov tmp.cpp -m <br>\nFile 'tmp.cpp' <br>\nLines executed:92.86% of 14 <br>\nCreating 'tmp.cpp.gcov'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The file\n<i>tmp.cpp.gcov</i> contains output from <b>gcov</b>. Here\nis a sample:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-:\n0:Source:tmp.cpp <br>\n-: 0:Working directory:/home/gcc/testcase <br>\n-: 0:Graph:tmp.gcno <br>\n-: 0:Data:tmp.gcda <br>\n-: 0:Runs:1 <br>\n-: 0:Programs:1 <br>\n-: 1:#include &lt;stdio.h&gt; <br>\n-: 2: <br>\n-: 3:template&lt;class T&gt; <br>\n-: 4:class Foo <br>\n-: 5:{ <br>\n-: 6: public: <br>\n1*: 7: Foo(): b (1000) {} <br>\n------------------ <br>\nFoo&lt;char&gt;::Foo(): <br>\n#####: 7: Foo(): b (1000) {} <br>\n------------------ <br>\nFoo&lt;int&gt;::Foo(): <br>\n1: 7: Foo(): b (1000) {} <br>\n------------------ <br>\n2*: 8: void inc () { b++; } <br>\n------------------ <br>\nFoo&lt;char&gt;::inc(): <br>\n#####: 8: void inc () { b++; } <br>\n------------------ <br>\nFoo&lt;int&gt;::inc(): <br>\n2: 8: void inc () { b++; } <br>\n------------------ <br>\n-: 9: <br>\n-: 10: private: <br>\n-: 11: int b; <br>\n-: 12:}; <br>\n-: 13: <br>\n-: 14:template class Foo&lt;int&gt;; <br>\n-: 15:template class Foo&lt;char&gt;; <br>\n-: 16: <br>\n-: 17:int <br>\n1: 18:main (void) <br>\n-: 19:{ <br>\n-: 20: int i, total; <br>\n1: 21: Foo&lt;int&gt; counter; <br>\n-: 22: <br>\n1: 23: counter.inc(); <br>\n1: 24: counter.inc(); <br>\n1: 25: total = 0; <br>\n-: 26: <br>\n11: 27: for (i = 0; i &lt; 10; i++) <br>\n10: 28: total += i; <br>\n-: 29: <br>\n1*: 30: int v = total &gt; 100 ? 1 : 2; <br>\n-: 31: <br>\n1: 32: if (total != 45) <br>\n#####: 33: printf (&quot;Failure\\n&quot;); <br>\n-: 34: else <br>\n1: 35: printf (&quot;Success\\n&quot;); <br>\n1: 36: return 0; <br>\n-: 37:}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that line\n7 is shown in the report multiple times. First occurrence\npresents total number of execution of the line and the next\ntwo belong to instances of class Foo constructors. As you\ncan also see, line 30 contains some unexecuted basic blocks\nand thus execution count has asterisk symbol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When you use\nthe <b>-a</b> option, you will get individual block counts,\nand the output looks like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-:\n0:Source:tmp.cpp <br>\n-: 0:Working directory:/home/gcc/testcase <br>\n-: 0:Graph:tmp.gcno <br>\n-: 0:Data:tmp.gcda <br>\n-: 0:Runs:1 <br>\n-: 0:Programs:1 <br>\n-: 1:#include &lt;stdio.h&gt; <br>\n-: 2: <br>\n-: 3:template&lt;class T&gt; <br>\n-: 4:class Foo <br>\n-: 5:{ <br>\n-: 6: public: <br>\n1*: 7: Foo(): b (1000) {} <br>\n------------------ <br>\nFoo&lt;char&gt;::Foo(): <br>\n#####: 7: Foo(): b (1000) {} <br>\n------------------ <br>\nFoo&lt;int&gt;::Foo(): <br>\n1: 7: Foo(): b (1000) {} <br>\n------------------ <br>\n2*: 8: void inc () { b++; } <br>\n------------------ <br>\nFoo&lt;char&gt;::inc(): <br>\n#####: 8: void inc () { b++; } <br>\n------------------ <br>\nFoo&lt;int&gt;::inc(): <br>\n2: 8: void inc () { b++; } <br>\n------------------ <br>\n-: 9: <br>\n-: 10: private: <br>\n-: 11: int b; <br>\n-: 12:}; <br>\n-: 13: <br>\n-: 14:template class Foo&lt;int&gt;; <br>\n-: 15:template class Foo&lt;char&gt;; <br>\n-: 16: <br>\n-: 17:int <br>\n1: 18:main (void) <br>\n-: 19:{ <br>\n-: 20: int i, total; <br>\n1: 21: Foo&lt;int&gt; counter; <br>\n1: 21-block 0 <br>\n-: 22: <br>\n1: 23: counter.inc(); <br>\n1: 23-block 0 <br>\n1: 24: counter.inc(); <br>\n1: 24-block 0 <br>\n1: 25: total = 0; <br>\n-: 26: <br>\n11: 27: for (i = 0; i &lt; 10; i++) <br>\n1: 27-block 0 <br>\n11: 27-block 1 <br>\n10: 28: total += i; <br>\n10: 28-block 0 <br>\n-: 29: <br>\n1*: 30: int v = total &gt; 100 ? 1 : 2; <br>\n1: 30-block 0 <br>\n%%%%%: 30-block 1 <br>\n1: 30-block 2 <br>\n-: 31: <br>\n1: 32: if (total != 45) <br>\n1: 32-block 0 <br>\n#####: 33: printf (&quot;Failure\\n&quot;); <br>\n%%%%%: 33-block 0 <br>\n-: 34: else <br>\n1: 35: printf (&quot;Success\\n&quot;); <br>\n1: 35-block 0 <br>\n1: 36: return 0; <br>\n1: 36-block 0 <br>\n-: 37:}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this mode,\neach basic block is only shown on one line -- the last line\nof the block. A multi-line block will only contribute to the\nexecution count of that last line, and other lines will not\nbe shown to contain code, unless previous blocks end on\nthose lines. The total execution count of a line is shown\nand subsequent lines show the execution counts for\nindividual blocks that end on that line. After each block,\nthe branch and call counts of the block will be shown, if\nthe <b>-b</b> option is given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because of the\nway <small>GCC</small> instruments calls, a call count can\nbe shown after a line with no individual blocks. As you can\nsee, line 33 contains a basic block that was not\nexecuted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When you use\nthe <b>-b</b> option, your output looks like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-:\n0:Source:tmp.cpp <br>\n-: 0:Working directory:/home/gcc/testcase <br>\n-: 0:Graph:tmp.gcno <br>\n-: 0:Data:tmp.gcda <br>\n-: 0:Runs:1 <br>\n-: 0:Programs:1 <br>\n-: 1:#include &lt;stdio.h&gt; <br>\n-: 2: <br>\n-: 3:template&lt;class T&gt; <br>\n-: 4:class Foo <br>\n-: 5:{ <br>\n-: 6: public: <br>\n1*: 7: Foo(): b (1000) {} <br>\n------------------ <br>\nFoo&lt;char&gt;::Foo(): <br>\nfunction Foo&lt;char&gt;::Foo() called 0 returned 0% blocks\nexecuted 0% <br>\n#####: 7: Foo(): b (1000) {} <br>\n------------------ <br>\nFoo&lt;int&gt;::Foo(): <br>\nfunction Foo&lt;int&gt;::Foo() called 1 returned 100% blocks\nexecuted 100% <br>\n1: 7: Foo(): b (1000) {} <br>\n------------------ <br>\n2*: 8: void inc () { b++; } <br>\n------------------ <br>\nFoo&lt;char&gt;::inc(): <br>\nfunction Foo&lt;char&gt;::inc() called 0 returned 0% blocks\nexecuted 0% <br>\n#####: 8: void inc () { b++; } <br>\n------------------ <br>\nFoo&lt;int&gt;::inc(): <br>\nfunction Foo&lt;int&gt;::inc() called 2 returned 100% blocks\nexecuted 100% <br>\n2: 8: void inc () { b++; } <br>\n------------------ <br>\n-: 9: <br>\n-: 10: private: <br>\n-: 11: int b; <br>\n-: 12:}; <br>\n-: 13: <br>\n-: 14:template class Foo&lt;int&gt;; <br>\n-: 15:template class Foo&lt;char&gt;; <br>\n-: 16: <br>\n-: 17:int <br>\nfunction main called 1 returned 100% blocks executed 81%\n<br>\n1: 18:main (void) <br>\n-: 19:{ <br>\n-: 20: int i, total; <br>\n1: 21: Foo&lt;int&gt; counter; <br>\ncall 0 returned 100% <br>\nbranch 1 taken 100% (fallthrough) <br>\nbranch 2 taken 0% (throw) <br>\n-: 22: <br>\n1: 23: counter.inc(); <br>\ncall 0 returned 100% <br>\nbranch 1 taken 100% (fallthrough) <br>\nbranch 2 taken 0% (throw) <br>\n1: 24: counter.inc(); <br>\ncall 0 returned 100% <br>\nbranch 1 taken 100% (fallthrough) <br>\nbranch 2 taken 0% (throw) <br>\n1: 25: total = 0; <br>\n-: 26: <br>\n11: 27: for (i = 0; i &lt; 10; i++) <br>\nbranch 0 taken 91% (fallthrough) <br>\nbranch 1 taken 9% <br>\n10: 28: total += i; <br>\n-: 29: <br>\n1*: 30: int v = total &gt; 100 ? 1 : 2; <br>\nbranch 0 taken 0% (fallthrough) <br>\nbranch 1 taken 100% <br>\n-: 31: <br>\n1: 32: if (total != 45) <br>\nbranch 0 taken 0% (fallthrough) <br>\nbranch 1 taken 100% <br>\n#####: 33: printf (&quot;Failure\\n&quot;); <br>\ncall 0 never executed <br>\nbranch 1 never executed <br>\nbranch 2 never executed <br>\n-: 34: else <br>\n1: 35: printf (&quot;Success\\n&quot;); <br>\ncall 0 returned 100% <br>\nbranch 1 taken 100% (fallthrough) <br>\nbranch 2 taken 0% (throw) <br>\n1: 36: return 0; <br>\n-: 37:}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For each\nfunction, a line is printed showing how many times the\nfunction is called, how many times it returns and what\npercentage of the function&rsquo;s blocks were executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For each basic\nblock, a line is printed after the last line of the basic\nblock describing the branch or call that ends the basic\nblock. There can be multiple branches and calls listed for a\nsingle source line if there are multiple basic blocks that\nend on that line. In this case, the branches and calls are\neach given a number. There is no simple way to map these\nbranches and calls back to source constructs. In general,\nthough, the lowest numbered branch or call will correspond\nto the leftmost construct on the source line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a branch,\nif it was executed at least once, then a percentage\nindicating the number of times the branch was taken divided\nby the number of times the branch was executed will be\nprinted. Otherwise, the message &quot;never executed&quot;\nis printed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a call, if\nit was executed at least once, then a percentage indicating\nthe number of times the call returned divided by the number\nof times the call was executed will be printed. This will\nusually be 100%, but may be less for functions that call\n&quot;exit&quot; or &quot;longjmp&quot;, and thus may not\nreturn every time they are called.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The execution\ncounts are cumulative. If the example program were executed\nagain without removing the <i>.gcda</i> file, the count for\nthe number of times each line in the source was executed\nwould be added to the results of the previous run(s). This\nis potentially useful in several ways. For example, it could\nbe used to accumulate data over a number of program runs as\npart of a test verification suite, or to provide more\naccurate long-term information over a large number of\nprogram runs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The data in the\n<i>.gcda</i> files is saved immediately before the program\nexits. For each source file compiled with\n<b>-fprofile-arcs</b>, the profiling code first attempts to\nread in an existing <i>.gcda</i> file; if the file\ndoesn&rsquo;t match the executable (differing number of\nbasic block counts) it will ignore the contents of the file.\nIt then adds in the new execution counts and finally writes\nthe data to the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using gcov\nwith <small>GCC</small> Optimization</b> <br>\nIf you plan to use <b>gcov</b> to help optimize your code,\nyou must first compile your program with a special\n<small>GCC</small> option <b>--coverage</b>. Aside from\nthat, you can use any other <small>GCC</small> options; but\nif you want to prove that every single line in your program\nwas executed, you should not compile with optimization at\nthe same time. On some machines the optimizer can eliminate\nsome simple code lines by combining them with other lines.\nFor example, code like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (a != b)\n<br>\nc = 1; <br>\nelse <br>\nc = 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">can be compiled\ninto one instruction on some machines. In this case, there\nis no way for <b>gcov</b> to calculate separate execution\ncounts for each line because there isn&rsquo;t separate code\nfor each line. Hence the <b>gcov</b> output looks like this\nif you compiled the program with optimization:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">100: 12:if (a\n!= b) <br>\n100: 13: c = 1; <br>\n100: 14:else <br>\n100: 15: c = 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The output\nshows that this block of code, combined by optimization,\nexecuted 100 times. In one sense this result is correct,\nbecause there was only one instruction representing all four\nof these lines. However, the output does not indicate how\nmany times the result was 0 and how many times the result\nwas 1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Inlineable\nfunctions can create unexpected line counts. Line counts are\nshown for the source code of the inlineable function, but\nwhat is shown depends on where the function is inlined, or\nif it is not inlined at all.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the function\nis not inlined, the compiler must emit an out of line copy\nof the function, in any object file that needs it. If\n<i>fileA.o</i> and <i>fileB.o</i> both contain out of line\nbodies of a particular inlineable function, they will also\nboth contain coverage counts for that function. When\n<i>fileA.o</i> and <i>fileB.o</i> are linked together, the\nlinker will, on many systems, select one of those out of\nline bodies for all calls to that function, and remove or\nignore the other. Unfortunately, it will not remove the\ncoverage counters for the unused function body. Hence when\ninstrumented, all but one use of that function will show\nzero counts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the function\nis inlined in several places, the block structure in each\nlocation might not be the same. For instance, a condition\nmight now be calculable at compile time in some instances.\nBecause the coverage of all the uses of the inline function\nwill be shown for the same source lines, the line counts\nthemselves might seem inconsistent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Long-running\napplications can use the &quot;__gcov_reset&quot; and\n&quot;__gcov_dump&quot; facilities to restrict profile\ncollection to the program region of interest. Calling\n&quot;__gcov_reset(void)&quot; will clear all profile\ncounters to zero, and calling &quot;__gcov_dump(void)&quot;\nwill cause the profile information collected at that point\nto be dumped to <i>.gcda</i> output files. Instrumented\napplications use a static destructor with priority 99 to\ninvoke the &quot;__gcov_dump&quot; function. Thus\n&quot;__gcov_dump&quot; is executed after all user defined\nstatic destructors, as well as handlers registered with\n&quot;atexit&quot;. If an executable loads a dynamic shared\nobject via dlopen functionality,\n<b>-Wl,--dynamic-list-data</b> is needed to dump all profile\ndata.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Profiling\nrun-time library reports various errors related to profile\nmanipulation and profile saving. Errors are printed into\nstandard error output or\n<b><small>GCOV_ERROR_FILE</small></b> file, if environment\nvariable is used. In order to terminate immediately after an\nerrors occurs set <b><small>GCOV_EXIT_AT_ERROR</small></b>\nenvironment variable. That can help users to find profile\nclashing which leads to a misleading profile.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>gpl</i>(7),\n<i>gfdl</i>(7), <i>fsf-funding</i>(7), <i>gcc</i>(1) and the\nInfo entry for <i>gcc</i>.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n1996-2021 Free Software Foundation, Inc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission is\ngranted to copy, distribute and/or modify this document\nunder the terms of the <small>GNU</small> Free Documentation\nLicense, Version 1.3 or any later version published by the\nFree Software Foundation; with the Invariant Sections being\n&quot; <small>GNU</small> General Public License&quot; and\n&quot;Funding Free Software&quot;, the Front-Cover texts\nbeing (a) (see below), and with the Back-Cover Texts being\n(b) (see below). A copy of the license is included in the\n<i>gfdl</i>(7) man page.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(a) The\n<small>FSF</small> &rsquo;s Front-Cover Text is:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A GNU\nManual</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(b) The\n<small>FSF</small> &rsquo;s Back-Cover Text is:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You have\nfreedom to copy and modify this GNU Manual, like GNU <br>\nsoftware. Copies published by the Free Software Foundation\nraise <br>\nfunds for GNU development.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"]}