{"name":"git-credential-sto","description":"git-credential-store\n- Helper to store credentials on disk","body":"\n\n<h1 align=\"center\">GIT-CREDENTIAL-STO</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-credential-store\n- Helper to store credentials on disk</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git config\ncredential.helper 'store [&lt;options&gt;]'</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nUsing this helper will store your passwords unencrypted on\ndisk, protected only by filesystem permissions. If this is\nnot an acceptable security tradeoff, try\n<a href=\"https://man.page/1/git-credential-cache\">git-credential-cache(1)</a>, or find a helper that\nintegrates with secure storage provided by your operating\nsystem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command\nstores credentials indefinitely on disk for use by future\nGit programs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You probably\ndon&rsquo;t want to invoke this command directly; it is\nmeant to be used as a credential helper by other parts of\ngit. See <a href=\"https://man.page/7/gitcredentials\">gitcredentials(7)</a> or <b>EXAMPLES</b>\nbelow.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>--file=&lt;path&gt;</big></p>\n\n<p style=\"margin-left:17%;\"><big>Use <b>&lt;path&gt;</b> to\nlookup and store credentials. The file will have its\nfilesystem permissions set to prevent other users on the\nsystem from reading it, but will not be encrypted or\notherwise protected. If not specified, credentials will be\nsearched for from <b>~/.git-credentials</b> and\n<b>$XDG_CONFIG_HOME/git/credentials</b>, and credentials\nwill be written to <b>~/.git-credentials</b> if it exists,\nor <b>$XDG_CONFIG_HOME/git/credentials</b> if it exists and\nthe former does not. See also the section called\n&ldquo;FILES&rdquo;.</big></p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>If not set\nexplicitly with <b>--file</b>, there are two files where\ngit-credential-store will search for credentials in order of\nprecedence:</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>~/.git-credentials</big></p>\n\n<p style=\"margin-left:17%;\"><big>User-specific credentials\nfile.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>$XDG_CONFIG_HOME/git/credentials</big></p>\n\n<p style=\"margin-left:17%;\"><big>Second user-specific\ncredentials file. If <i>$XDG_CONFIG_HOME</i> is not set or\nempty, <b>$HOME/.config/git/credentials</b> will be used.\nAny credentials stored in this file will not be used if\n<b>~/.git-credentials</b> has a matching credential as well.\nIt is a good idea not to create this file if you sometimes\nuse older versions of Git that do not support it.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>For\ncredential lookups, the files are read in the order given\nabove, with the first matching credential found taking\nprecedence over credentials found in files further down the\nlist.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Credential\nstorage will by default write to the first existing file in\nthe list. If none of these files exist,\n<b>~/.git-credentials</b> will be created and written\nto.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>When\nerasing credentials, matching credentials will be erased\nfrom all files.</big></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The point\nof this helper is to reduce the number of times you must\ntype your username or password. For example:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ git\nconfig credential.helper store <br>\n$ git push http://example.com/repo.git <br>\nUsername: &lt;type your username&gt; <br>\nPassword: &lt;type your password&gt;</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>[several\ndays later] <br>\n$ git push http://example.com/repo.git <br>\n[your credentials are used automatically]</big></p>\n\n<h2>STORAGE FORMAT\n<a name=\"STORAGE FORMAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\n<b>.git-credentials</b> file is stored in plaintext. Each\ncredential is stored on its own line as a URL\nlike:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>https://user:pass@example.com</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>No other\nkinds of lines (e.g. empty lines or comment lines) are\nallowed in the file, even though some may be silently\nignored. Do not view or edit the file with\neditors.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>When Git\nneeds authentication for a particular URL context,\ncredential-store will consider that context a pattern to\nmatch against each entry in the credentials file. If the\nprotocol, hostname, and username (if we already have one)\nmatch, then the password is returned to Git. See the\ndiscussion of configuration in <a href=\"https://man.page/7/gitcredentials\">gitcredentials(7)</a> for\nmore information.</big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#STORAGE FORMAT\">STORAGE FORMAT</a>","<a href=\"#GIT\">GIT</a>"]}