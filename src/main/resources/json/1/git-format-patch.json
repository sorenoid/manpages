{"name":"git-format-patch","body":"\n\n<h1 align=\"center\">GIT-FORMAT-PATCH</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-format-patch\n- Prepare patches for e-mail submission</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nformat-patch</i> [-k] [(-o|--output-directory) &lt;dir&gt; |\n--stdout] <br>\n[--no-thread | --thread[=&lt;style&gt;]] <br>\n[(--attach|--inline)[=&lt;boundary&gt;] | --no-attach] <br>\n[-s | --signoff] <br>\n[--signature=&lt;signature&gt; | --no-signature] <br>\n[--signature-file=&lt;file&gt;] <br>\n[-n | --numbered | -N | --no-numbered] <br>\n[--start-number &lt;n&gt;] [--numbered-files] <br>\n[--in-reply-to=&lt;message id&gt;] [--suffix=.&lt;sfx&gt;]\n<br>\n[--ignore-if-in-upstream] <br>\n[--cover-from-description=&lt;mode&gt;] <br>\n[--rfc] [--subject-prefix=&lt;subject prefix&gt;] <br>\n[(--reroll-count|-v) &lt;n&gt;] <br>\n[--to=&lt;email&gt;] [--cc=&lt;email&gt;] <br>\n[--[no-]cover-letter] [--quiet] <br>\n[--[no-]encode-email-headers] <br>\n[--no-notes | --notes[=&lt;ref&gt;]] <br>\n[--interdiff=&lt;previous&gt;] <br>\n[--range-diff=&lt;previous&gt;\n[--creation-factor=&lt;percent&gt;]] <br>\n[--filename-max-length=&lt;n&gt;] <br>\n[--progress] <br>\n[&lt;common diff options&gt;] <br>\n[ &lt;since&gt; | &lt;revision range&gt; ]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Prepare each\nnon-merge commit with its &quot;patch&quot; in one\n&quot;message&quot; per commit, formatted to resemble a UNIX\nmailbox. The output of this command is convenient for e-mail\nsubmission or for use with <i>git am</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n&quot;message&quot; generated by the command consists of\nthree parts:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; A brief\nmetadata header that begins with <b>From &lt;commit&gt;</b>\nwith a fixed <b>Mon Sep 17 00:00:00 2001</b> datestamp to\nhelp programs like &quot;file(1)&quot; to recognize that the\nfile is an output from this command, fields that record the\nauthor identity, the author date, and the title of the\nchange (taken from the first paragraph of the commit log\nmessage).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\nsecond and subsequent paragraphs of the commit log\nmessage.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\n&quot;patch&quot;, which is the &quot;diff -p --stat&quot;\noutput (see <a href=\"https://man.page/1/git-diff\">git-diff(1)</a>) between the commit and its\nparent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The log message\nand the patch is separated by a line with a three-dash\nline.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are two\nways to specify which commits to operate on.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. A single\ncommit, &lt;since&gt;, specifies that the commits leading to\nthe tip of the current branch that are not in the history\nthat leads to the &lt;since&gt; to be output.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Generic\n&lt;revision range&gt; expression (see &quot;SPECIFYING\nREVISIONS&quot; section in <a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a>) means the\ncommits in the specified range.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first rule\ntakes precedence in the case of a single &lt;commit&gt;. To\napply the second rule, i.e., format everything since the\nbeginning of history up until &lt;commit&gt;, use the\n<b>--root</b> option: <b>git format-patch --root\n&lt;commit&gt;</b>. If you want to format only\n&lt;commit&gt; itself, you can do this with <b>git\nformat-patch -1 &lt;commit&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\neach output file is numbered sequentially from 1, and uses\nthe first line of the commit message (massaged for pathname\nsafety) as the filename. With the <b>--numbered-files</b>\noption, the output file names will only be numbers, without\nthe first line of the commit appended. The names of the\noutput files are printed to standard output, unless the\n<b>--stdout</b> option is specified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>-o</b> is\nspecified, output files are created in &lt;dir&gt;.\nOtherwise they are created in the current working directory.\nThe default path can be set with the\n<b>format.outputDirectory</b> configuration option. The\n<b>-o</b> option takes precedence over\n<b>format.outputDirectory</b>. To store patches in the\ncurrent working directory even when\n<b>format.outputDirectory</b> points elsewhere, use <b>-o\n.</b>. All directory components will be created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, the\nsubject of a single patch is &quot;[PATCH] &quot; followed\nby the concatenation of lines from the commit message up to\nthe first blank line (see the DISCUSSION section of\n<a href=\"https://man.page/1/git-commit\">git-commit(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When multiple\npatches are output, the subject prefix will instead be\n&quot;[PATCH n/m] &quot;. To force 1/1 to be added for a\nsingle patch, use <b>-n</b>. To omit patch numbers from the\nsubject, use <b>-N</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If given\n<b>--thread</b>, <b>git-format-patch</b> will generate\n<b>In-Reply-To</b> and <b>References</b> headers to make the\nsecond and subsequent patch mails appear as replies to the\nfirst mail; this also generates a <b>Message-Id</b> header\nto reference.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-p,\n--no-stat</p>\n\n<p style=\"margin-left:17%;\">Generate plain patches without\nany diffstats.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-U&lt;n&gt;,\n--unified=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Generate diffs with &lt;n&gt;\nlines of context instead of the usual three.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--output=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Output to a specific file\ninstead of stdout.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--output-indicator-new=&lt;char&gt;,\n--output-indicator-old=&lt;char&gt;,\n--output-indicator-context=&lt;char&gt;</p>\n\n<p style=\"margin-left:17%;\">Specify the character used to\nindicate new, old or context lines in the generated patch.\nNormally they are <i>+</i>, <i>-</i> and ' '\nrespectively.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--indent-heuristic</p>\n\n<p style=\"margin-left:17%;\">Enable the heuristic that\nshifts diff hunk boundaries to make patches easier to read.\nThis is the default.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-indent-heuristic</p>\n\n<p style=\"margin-left:17%;\">Disable the indent\nheuristic.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--minimal</p>\n\n<p style=\"margin-left:17%;\">Spend extra time to make sure\nthe smallest possible diff is produced.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--patience</p>\n\n<p style=\"margin-left:17%;\">Generate a diff using the\n&quot;patience diff&quot; algorithm.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--histogram</p>\n\n<p style=\"margin-left:17%;\">Generate a diff using the\n&quot;histogram diff&quot; algorithm.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--anchored=&lt;text&gt;</p>\n\n<p style=\"margin-left:17%;\">Generate a diff using the\n&quot;anchored diff&quot; algorithm.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option may\nbe specified more than once.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a line\nexists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to\nprevent it from appearing as a deletion or addition in the\noutput. It uses the &quot;patience diff&quot; algorithm\ninternally.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--diff-algorithm={patience|minimal|histogram|myers}</p>\n\n<p style=\"margin-left:17%;\">Choose a diff algorithm. The\nvariants are as follows:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>default</b>,\n<b>myers</b></p>\n\n<p style=\"margin-left:23%;\">The basic greedy diff\nalgorithm. Currently, this is the default.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>minimal</b></p>\n\n<p style=\"margin-left:23%;\">Spend extra time to make sure\nthe smallest possible diff is produced.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>patience</b></p>\n\n<p style=\"margin-left:23%;\">Use &quot;patience diff&quot;\nalgorithm when generating patches.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>histogram</b></p>\n\n<p style=\"margin-left:23%;\">This algorithm extends the\npatience algorithm to &quot;support low-occurrence common\nelements&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For instance,\nif you configured the <b>diff.algorithm</b> variable to a\nnon-default value and want to use the default one, then you\nhave to use <b>--diff-algorithm=default</b> option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</p>\n\n<p style=\"margin-left:17%;\">Generate a diffstat. By\ndefault, as much space as necessary will be used for the\nfilename part, and the rest for the graph part. Maximum\nwidth defaults to terminal width, or 80 columns if not\nconnected to a terminal, and can be overridden by\n<b>&lt;width&gt;</b>. The width of the filename part can be\nlimited by giving another width <b>&lt;name-width&gt;</b>\nafter a comma. The width of the graph part can be limited by\nusing <b>--stat-graph-width=&lt;width&gt;</b> (affects all\ncommands generating a stat graph) or by setting\n<b>diff.statGraphWidth=&lt;width&gt;</b> (does not affect\n<b>git format-patch</b>). By giving a third parameter\n<b>&lt;count&gt;</b>, you can limit the output to the first\n<b>&lt;count&gt;</b> lines, followed by <b>...</b> if there\nare more.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These\nparameters can also be set individually with\n<b>--stat-width=&lt;width&gt;</b>,\n<b>--stat-name-width=&lt;name-width&gt;</b> and\n<b>--stat-count=&lt;count&gt;</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--compact-summary</p>\n\n<p style=\"margin-left:17%;\">Output a condensed summary of\nextended header information such as file creations or\ndeletions (&quot;new&quot; or &quot;gone&quot;, optionally\n&quot;+l&quot; if it&rsquo;s a symlink) and mode changes\n(&quot;+x&quot; or &quot;-x&quot; for adding or removing\nexecutable bit respectively) in diffstat. The information is\nput between the filename part and the graph part. Implies\n<b>--stat</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--numstat</p>\n\n<p style=\"margin-left:17%;\">Similar to <b>--stat</b>, but\nshows number of added and deleted lines in decimal notation\nand pathname without abbreviation, to make it more machine\nfriendly. For binary files, outputs two <b>-</b> instead of\nsaying <b>0 0</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--shortstat</p>\n\n<p style=\"margin-left:17%;\">Output only the last line of\nthe <b>--stat</b> format containing total number of modified\nfiles, as well as number of added and deleted lines.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-X[&lt;param1,param2,...&gt;],\n--dirstat[=&lt;param1,param2,...&gt;]</p>\n\n<p style=\"margin-left:17%;\">Output the distribution of\nrelative amount of changes for each sub-directory. The\nbehavior of <b>--dirstat</b> can be customized by passing it\na comma separated list of parameters. The defaults are\ncontrolled by the <b>diff.dirstat</b> configuration variable\n(see <a href=\"https://man.page/1/git-config\">git-config(1)</a>). The following parameters are\navailable:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>changes</b></p>\n\n<p style=\"margin-left:23%;\">Compute the dirstat numbers by\ncounting the lines that have been removed from the source,\nor added to the destination. This ignores the amount of pure\ncode movements within a file. In other words, rearranging\nlines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>lines</b></p>\n\n<p style=\"margin-left:23%;\">Compute the dirstat numbers by\ndoing the regular line-based diff analysis, and summing the\nremoved/added line counts. (For binary files, count 64-byte\nchunks instead, since binary files have no natural concept\nof lines). This is a more expensive <b>--dirstat</b>\nbehavior than the <b>changes</b> behavior, but it does count\nrearranged lines within a file as much as other changes. The\nresulting output is consistent with what you get from the\nother <b>--*stat</b> options.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>files</b></p>\n\n<p style=\"margin-left:23%;\">Compute the dirstat numbers by\ncounting the number of files changed. Each changed file\ncounts equally in the dirstat analysis. This is the\ncomputationally cheapest <b>--dirstat</b> behavior, since it\ndoes not have to look at the file contents at all.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>cumulative</b></p>\n\n<p style=\"margin-left:23%;\">Count changes in a child\ndirectory for the parent directory as well. Note that when\nusing <b>cumulative</b>, the sum of the percentages reported\nmay exceed 100%. The default (non-cumulative) behavior can\nbe specified with the <b>noncumulative</b> parameter.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;limit&gt;</p>\n\n<p style=\"margin-left:23%;\">An integer parameter specifies\na cut-off percent (3% by default). Directories contributing\nless than this percentage of the changes are not shown in\nthe output.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example: The\nfollowing will count changed files, while ignoring\ndirectories with less than 10% of the total amount of\nchanged files, and accumulating child directory counts in\nthe parent directories:\n<b>--dirstat=files,10,cumulative</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cumulative</p>\n\n<p style=\"margin-left:17%;\">Synonym for\n--dirstat=cumulative</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dirstat-by-file[=&lt;param1,param2&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Synonym for\n--dirstat=files,param1,param2...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--summary</p>\n\n<p style=\"margin-left:17%;\">Output a condensed summary of\nextended header information such as creations, renames and\nmode changes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-renames</p>\n\n<p style=\"margin-left:17%;\">Turn off rename detection, even\nwhen the configuration file gives the default to do so.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]rename-empty</p>\n\n<p style=\"margin-left:17%;\">Whether to use empty blobs as\nrename source.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--full-index</p>\n\n<p style=\"margin-left:17%;\">Instead of the first handful of\ncharacters, show the full pre- and post-image blob object\nnames on the &quot;index&quot; line when generating patch\nformat output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--binary</p>\n\n<p style=\"margin-left:17%;\">In addition to\n<b>--full-index</b>, output a binary diff that can be\napplied with <b>git-apply</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--abbrev[=&lt;n&gt;]</p>\n\n<p style=\"margin-left:17%;\">Instead of showing the full\n40-byte hexadecimal object name in diff-raw format output\nand diff-tree header lines, show the shortest prefix that is\nat least <i>&lt;n&gt;</i> hexdigits long that uniquely\nrefers the object. In diff-patch output format,\n<b>--full-index</b> takes higher precedence, i.e. if\n<b>--full-index</b> is specified, full blob names will be\nshown regardless of <b>--abbrev</b>. Non default number of\ndigits can be specified with <b>--abbrev=&lt;n&gt;</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-B[&lt;n&gt;][/&lt;m&gt;],\n--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</p>\n\n<p style=\"margin-left:17%;\">Break complete rewrite changes\ninto pairs of delete and create. This serves two\npurposes:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It affects the\nway a change that amounts to a total rewrite of a file not\nas a series of deletion and insertion mixed together with a\nvery few lines that happen to match textually as the\ncontext, but as a single deletion of everything old followed\nby a single insertion of everything new, and the number\n<b>m</b> controls this aspect of the -B option (defaults to\n60%). <b>-B/70%</b> specifies that less than 30% of the\noriginal should remain in the result for Git to consider it\na total rewrite (i.e. otherwise the resulting patch will be\na series of deletion and insertion mixed together with\ncontext lines).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When used with\n-M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that\ndisappeared as the source of a rename), and the number\n<b>n</b> controls this aspect of the -B option (defaults to\n50%). <b>-B20%</b> specifies that a change with addition and\ndeletion compared to 20% or more of the file&rsquo;s size\nare eligible for being picked up as a possible source of a\nrename to another file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-M[&lt;n&gt;],\n--find-renames[=&lt;n&gt;]</p>\n\n<p style=\"margin-left:17%;\">Detect renames. If <b>n</b> is\nspecified, it is a threshold on the similarity index (i.e.\namount of addition/deletions compared to the file&rsquo;s\nsize). For example, <b>-M90%</b> means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn&rsquo;t changed. Without a <b>%</b> sign, the number is\nto be read as a fraction, with a decimal point before it.\nI.e., <b>-M5</b> becomes 0.5, and is thus the same as\n<b>-M50%</b>. Similarly, <b>-M05</b> is the same as\n<b>-M5%</b>. To limit detection to exact renames, use\n<b>-M100%</b>. The default similarity index is 50%.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-C[&lt;n&gt;],\n--find-copies[=&lt;n&gt;]</p>\n\n<p style=\"margin-left:17%;\">Detect copies as well as\nrenames. See also <b>--find-copies-harder</b>. If <b>n</b>\nis specified, it has the same meaning as for\n<b>-M&lt;n&gt;</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--find-copies-harder</p>\n\n<p style=\"margin-left:17%;\">For performance reasons, by\ndefault, <b>-C</b> option finds copies only if the original\nfile of the copy was modified in the same changeset. This\nflag makes the command inspect unmodified files as\ncandidates for the source of copy. This is a very expensive\noperation for large projects, so use it with caution. Giving\nmore than one <b>-C</b> option has the same effect.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-D,\n--irreversible-delete</p>\n\n<p style=\"margin-left:17%;\">Omit the preimage for deletes,\ni.e. print only the header but not the diff between the\npreimage and <b>/dev/null</b>. The resulting patch is not\nmeant to be applied with <b>patch</b> or <b>git apply</b>;\nthis is solely for people who want to just concentrate on\nreviewing the text after the change. In addition, the output\nobviously lacks enough information to apply such a patch in\nreverse, even manually, hence the name of the option.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When used\ntogether with <b>-B</b>, omit also the preimage in the\ndeletion part of a delete/create pair.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-l&lt;num&gt;</p>\n\n<p style=\"margin-left:17%;\">The <b>-M</b> and <b>-C</b>\noptions involve some preliminary steps that can detect\nsubsets of renames/copies cheaply, followed by an exhaustive\nfallback portion that compares all remaining unpaired\ndestinations to all relevant sources. (For renames, only\nremaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.) For N sources and\ndestinations, this exhaustive check is O(N^2). This option\nprevents the exhaustive portion of rename/copy detection\nfrom running if the number of source/destination files\ninvolved exceeds the specified number. Defaults to\ndiff.renameLimit. Note that a value of 0 is treated as\nunlimited.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-O&lt;orderfile&gt;</p>\n\n<p style=\"margin-left:17%;\">Control the order in which\nfiles appear in the output. This overrides the\n<b>diff.orderFile</b> configuration variable (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). To cancel <b>diff.orderFile</b>, use\n<b>-O/dev/null</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The output\norder is determined by the order of glob patterns in\n&lt;orderfile&gt;. All files with pathnames that match the\nfirst pattern are output first, all files with pathnames\nthat match the second pattern (but not the first) are output\nnext, and so on. All files with pathnames that do not match\nany pattern are output last, as if there was an implicit\nmatch-all pattern at the end of the file. If multiple\npathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to\neach other is the normal order.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;orderfile&gt;\nis parsed as follows:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Blank\nlines are ignored, so they can be used as separators for\nreadability.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Lines\nstarting with a hash (&quot;<b>#</b>&quot;) are ignored, so\nthey can be used for comments. Add a backslash\n(&quot;<b>\\</b>&quot;) to the beginning of the pattern if it\nstarts with a hash.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Each\nother line contains a single pattern.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Patterns have\nthe same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname\nalso matches a pattern if removing any number of the final\npathname components matches the pattern. For example, the\npattern &quot;<b>foo*bar</b>&quot; matches\n&quot;<b>fooasdfbar</b>&quot; and\n&quot;<b>foo/bar/baz/asdf</b>&quot; but not\n&quot;<b>foobarx</b>&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--skip-to=&lt;file&gt;,\n--rotate-to=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Discard the files before the\nnamed &lt;file&gt; from the output (i.e. <i>skip to</i>), or\nmove them to the end of the output (i.e. <i>rotate to</i>).\nThese were invented primarily for use of the <b>git\ndifftool</b> command, and may not be very useful\notherwise.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--relative[=&lt;path&gt;],\n--no-relative</p>\n\n<p style=\"margin-left:17%;\">When run from a subdirectory of\nthe project, it can be told to exclude changes outside the\ndirectory and show pathnames relative to it with this\noption. When you are not in a subdirectory (e.g. in a bare\nrepository), you can name which subdirectory to make the\noutput relative to by giving a &lt;path&gt; as an argument.\n<b>--no-relative</b> can be used to countermand both\n<b>diff.relative</b> config option and previous\n<b>--relative</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-a, --text</p>\n\n<p style=\"margin-left:17%;\">Treat all files as text.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-cr-at-eol</p>\n\n<p style=\"margin-left:17%;\">Ignore carriage-return at the\nend of line when doing a comparison.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-space-at-eol</p>\n\n<p style=\"margin-left:17%;\">Ignore changes in whitespace at\nEOL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-b,\n--ignore-space-change</p>\n\n<p style=\"margin-left:17%;\">Ignore changes in amount of\nwhitespace. This ignores whitespace at line end, and\nconsiders all other sequences of one or more whitespace\ncharacters to be equivalent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-w,\n--ignore-all-space</p>\n\n<p style=\"margin-left:17%;\">Ignore whitespace when\ncomparing lines. This ignores differences even if one line\nhas whitespace where the other line has none.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-blank-lines</p>\n\n<p style=\"margin-left:17%;\">Ignore changes whose lines are\nall blank.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-I&lt;regex&gt;,\n--ignore-matching-lines=&lt;regex&gt;</p>\n\n<p style=\"margin-left:17%;\">Ignore changes whose all lines\nmatch &lt;regex&gt;. This option may be specified more than\nonce.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--inter-hunk-context=&lt;lines&gt;</p>\n\n<p style=\"margin-left:17%;\">Show the context between diff\nhunks, up to the specified number of lines, thereby fusing\nhunks that are close to each other. Defaults to\n<b>diff.interHunkContext</b> or 0 if the config option is\nunset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-W,\n--function-context</p>\n\n<p style=\"margin-left:17%;\">Show whole function as context\nlines for each change. The function names are determined in\nthe same way as <b>git diff</b> works out patch hunk headers\n(see <i>Defining a custom hunk-header</i> in\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ext-diff</p>\n\n<p style=\"margin-left:17%;\">Allow an external diff helper\nto be executed. If you set an external diff driver with\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a>, you need to use this option with\n<a href=\"https://man.page/1/git-log\">git-log(1)</a> and friends.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-ext-diff</p>\n\n<p style=\"margin-left:17%;\">Disallow external diff\ndrivers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--textconv,\n--no-textconv</p>\n\n<p style=\"margin-left:17%;\">Allow (or disallow) external\ntext conversion filters to be run when comparing binary\nfiles. See <a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> for details. Because\ntextconv filters are typically a one-way conversion, the\nresulting diff is suitable for human consumption, but cannot\nbe applied. For this reason, textconv filters are enabled by\ndefault only for <a href=\"https://man.page/1/git-diff\">git-diff(1)</a> and <a href=\"https://man.page/1/git-log\">git-log(1)</a>,\nbut not for <a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a> or diff plumbing\ncommands.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-submodules[=&lt;when&gt;]</p>\n\n<p style=\"margin-left:17%;\">Ignore changes to submodules in\nthe diff generation. &lt;when&gt; can be either\n&quot;none&quot;, &quot;untracked&quot;, &quot;dirty&quot;\nor &quot;all&quot;, which is the default. Using\n&quot;none&quot; will consider the submodule modified when\nit either contains untracked or modified files or its HEAD\ndiffers from the commit recorded in the superproject and can\nbe used to override any settings of the <i>ignore</i> option\nin <a href=\"https://man.page/1/git-config\">git-config(1)</a> or <a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a>. When\n&quot;untracked&quot; is used submodules are not considered\ndirty when they only contain untracked content (but they are\nstill scanned for modified content). Using &quot;dirty&quot;\nignores all changes to the work tree of submodules, only\nchanges to the commits stored in the superproject are shown\n(this was the behavior until 1.7.0). Using &quot;all&quot;\nhides all changes to submodules.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--src-prefix=&lt;prefix&gt;</p>\n\n<p style=\"margin-left:17%;\">Show the given source prefix\ninstead of &quot;a/&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dst-prefix=&lt;prefix&gt;</p>\n\n<p style=\"margin-left:17%;\">Show the given destination\nprefix instead of &quot;b/&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-prefix</p>\n\n<p style=\"margin-left:17%;\">Do not show any source or\ndestination prefix.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--line-prefix=&lt;prefix&gt;</p>\n\n<p style=\"margin-left:17%;\">Prepend an additional prefix to\nevery line of output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ita-invisible-in-index</p>\n\n<p style=\"margin-left:17%;\">By default entries added by\n&quot;git add -N&quot; appear as an existing empty file in\n&quot;git diff&quot; and a new file in &quot;git diff\n--cached&quot;. This option makes the entry appear as a new\nfile in &quot;git diff&quot; and non-existent in &quot;git\ndiff --cached&quot;. This option could be reverted with\n<b>--ita-visible-in-index</b>. Both options are experimental\nand could be removed in future.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For more\ndetailed explanation on these common options, see also\n<a href=\"https://man.page/7/gitdiffcore\">gitdiffcore(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Prepare patches from the\ntopmost &lt;n&gt; commits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-o &lt;dir&gt;,\n--output-directory &lt;dir&gt;</p>\n\n<p style=\"margin-left:17%;\">Use &lt;dir&gt; to store the\nresulting files, instead of the current working\ndirectory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--numbered</p>\n\n<p style=\"margin-left:17%;\">Name output in <i>[PATCH\nn/m]</i> format, even with a single patch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-N,\n--no-numbered</p>\n\n<p style=\"margin-left:17%;\">Name output in <i>[PATCH]</i>\nformat.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--start-number\n&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Start numbering the patches at\n&lt;n&gt; instead of 1.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--numbered-files</p>\n\n<p style=\"margin-left:17%;\">Output file names will be a\nsimple number sequence without the default first line of the\ncommit appended.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-k,\n--keep-subject</p>\n\n<p style=\"margin-left:17%;\">Do not strip/add <i>[PATCH]</i>\nfrom the first line of the commit log message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s,\n--signoff</p>\n\n<p style=\"margin-left:17%;\">Add a <b>Signed-off-by</b>\ntrailer to the commit message, using the committer identity\nof yourself. See the signoff option in <a href=\"https://man.page/1/git-commit\">git-commit(1)</a>\nfor more information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdout</p>\n\n<p style=\"margin-left:17%;\">Print all commits to the\nstandard output in mbox format, instead of creating a file\nfor each one.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--attach[=&lt;boundary&gt;]</p>\n\n<p style=\"margin-left:17%;\">Create multipart/mixed\nattachment, the first part of which is the commit message\nand the patch itself in the second part, with\n<b>Content-Disposition: attachment</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-attach</p>\n\n<p style=\"margin-left:17%;\">Disable the creation of an\nattachment, overriding the configuration setting.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--inline[=&lt;boundary&gt;]</p>\n\n<p style=\"margin-left:17%;\">Create multipart/mixed\nattachment, the first part of which is the commit message\nand the patch itself in the second part, with\n<b>Content-Disposition: inline</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--thread[=&lt;style&gt;],\n--no-thread</p>\n\n<p style=\"margin-left:17%;\">Controls addition of\n<b>In-Reply-To</b> and <b>References</b> headers to make the\nsecond and subsequent mails appear as replies to the first.\nAlso controls generation of the <b>Message-Id</b> header to\nreference.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The optional\n&lt;style&gt; argument can be either <b>shallow</b> or\n<b>deep</b>. <i>shallow</i> threading makes every mail a\nreply to the head of the series, where the head is chosen\nfrom the cover letter, the <b>--in-reply-to</b>, and the\nfirst patch mail, in this order. <i>deep</i> threading makes\nevery mail a reply to the previous one.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default is\n<b>--no-thread</b>, unless the <b>format.thread</b>\nconfiguration is set. If <b>--thread</b> is specified\nwithout a style, it defaults to the style specified by\n<b>format.thread</b> if any, or else <b>shallow</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Beware that the\ndefault for <i>git send-email</i> is to thread emails\nitself. If you want <b>git format-patch</b> to take care of\nthreading, you will want to ensure that threading is\ndisabled for <b>git send-email</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--in-reply-to=&lt;message\nid&gt;</p>\n\n<p style=\"margin-left:17%;\">Make the first mail (or all the\nmails with <b>--no-thread</b>) appear as a reply to the\ngiven &lt;message id&gt;, which avoids breaking threads to\nprovide a new patch series.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-if-in-upstream</p>\n\n<p style=\"margin-left:17%;\">Do not include a patch that\nmatches a commit in &lt;until&gt;..&lt;since&gt;. This will\nexamine all patches reachable from &lt;since&gt; but not\nfrom &lt;until&gt; and compare them with the patches being\ngenerated, and any patch that matches is ignored.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cover-from-description=&lt;mode&gt;</p>\n\n<p style=\"margin-left:17%;\">Controls which parts of the\ncover letter will be automatically populated using the\nbranch&rsquo;s description.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>&lt;mode&gt;</b> is <b>message</b> or <b>default</b>, the\ncover letter subject will be populated with placeholder\ntext. The body of the cover letter will be populated with\nthe branch&rsquo;s description. This is the default mode\nwhen no configuration nor command line option is\nspecified.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>&lt;mode&gt;</b> is <b>subject</b>, the first paragraph\nof the branch description will populate the cover letter\nsubject. The remainder of the description will populate the\nbody of the cover letter.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>&lt;mode&gt;</b> is <b>auto</b>, if the first paragraph\nof the branch description is greater than 100 bytes, then\nthe mode will be <b>message</b>, otherwise <b>subject</b>\nwill be used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>&lt;mode&gt;</b> is <b>none</b>, both the cover letter\nsubject and body will be populated with placeholder\ntext.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--subject-prefix=&lt;subject\nprefix&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of the standard\n<i>[PATCH]</i> prefix in the subject line, instead use\n<i>[&lt;subject prefix&gt;]</i>. This allows for useful\nnaming of a patch series, and can be combined with the\n<b>--numbered</b> option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--filename-max-length=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of the standard 64\nbytes, chomp the generated output filenames at around\n<i>&lt;n&gt;</i> bytes (too short a value will be silently\nraised to a reasonable length). Defaults to the value of the\n<b>format.filenameMaxLength</b> configuration variable, or\n64 if unconfigured.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--rfc</p>\n\n<p style=\"margin-left:17%;\">Alias for\n<b>--subject-prefix=&quot;RFC PATCH&quot;</b>. RFC means\n&quot;Request For Comments&quot;; use this when sending an\nexperimental patch for discussion rather than\napplication.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v &lt;n&gt;,\n--reroll-count=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Mark the series as the\n&lt;n&gt;-th iteration of the topic. The output filenames\nhave <b>v&lt;n&gt;</b> prepended to them, and the subject\nprefix (&quot;PATCH&quot; by default, but configurable via\nthe <b>--subject-prefix</b> option) has &rsquo;\nv&lt;n&gt;&rsquo; appended to it. E.g.\n<b>--reroll-count=4</b> may produce\n<b>v4-0001-add-makefile.patch</b> file that has\n&quot;Subject: [PATCH v4 1/20] Add makefile&quot; in it.\n<b>&lt;n&gt;</b> does not have to be an integer (e.g.\n&quot;--reroll-count=4.4&quot;, or\n&quot;--reroll-count=4rev2&quot; are allowed), but the\ndownside of using such a reroll-count is that the\nrange-diff/interdiff with the previous version does not\nstate exactly which version the new interation is compared\nagainst.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--to=&lt;email&gt;</p>\n\n<p style=\"margin-left:17%;\">Add a <b>To:</b> header to the\nemail headers. This is in addition to any configured\nheaders, and may be used multiple times. The negated form\n<b>--no-to</b> discards all <b>To:</b> headers added so far\n(from config or command line).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cc=&lt;email&gt;</p>\n\n<p style=\"margin-left:17%;\">Add a <b>Cc:</b> header to the\nemail headers. This is in addition to any configured\nheaders, and may be used multiple times. The negated form\n<b>--no-cc</b> discards all <b>Cc:</b> headers added so far\n(from config or command line).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--from,\n--from=&lt;ident&gt;</p>\n\n<p style=\"margin-left:17%;\">Use <b>ident</b> in the\n<b>From:</b> header of each commit email. If the author\nident of the commit is not textually identical to the\nprovided <b>ident</b>, place a <b>From:</b> header in the\nbody of the message with the original author. If no\n<b>ident</b> is given, use the committer ident.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that this\noption is only useful if you are actually sending the emails\nand want to identify yourself as the sender, but retain the\noriginal author (and <b>git am</b> will correctly pick up\nthe in-body header). Note also that <b>git send-email</b>\nalready handles this transformation for you, and this option\nshould not be used if you are feeding the result to <b>git\nsend-email</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--add-header=&lt;header&gt;</p>\n\n<p style=\"margin-left:17%;\">Add an arbitrary header to the\nemail headers. This is in addition to any configured\nheaders, and may be used multiple times. For example,\n<b>--add-header=&quot;Organization: git-foo&quot;</b>. The\nnegated form <b>--no-add-header</b> discards <b>all</b>\n(<b>To:</b>, <b>Cc:</b>, and custom) headers added so far\nfrom config or command line.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]cover-letter</p>\n\n<p style=\"margin-left:17%;\">In addition to the patches,\ngenerate a cover letter file containing the branch\ndescription, shortlog and the overall diffstat. You can fill\nin a description in the file before sending it out.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--encode-email-headers,\n--no-encode-email-headers</p>\n\n<p style=\"margin-left:17%;\">Encode email headers that have\nnon-ASCII characters with &quot;Q-encoding&quot; (described\nin RFC 2047), instead of outputting the headers verbatim.\nDefaults to the value of the\n<b>format.encodeEmailHeaders</b> configuration variable.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--interdiff=&lt;previous&gt;</p>\n\n<p style=\"margin-left:17%;\">As a reviewer aid, insert an\ninterdiff into the cover letter, or as commentary of the\nlone patch of a 1-patch series, showing the differences\nbetween the previous version of the patch series and the\nseries currently being formatted. <b>previous</b> is a\nsingle revision naming the tip of the previous series which\nshares a common base with the series being formatted (for\nexample <b>git format-patch --cover-letter\n--interdiff=feature/v1 -3 feature/v2</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--range-diff=&lt;previous&gt;</p>\n\n<p style=\"margin-left:17%;\">As a reviewer aid, insert a\nrange-diff (see <a href=\"https://man.page/1/git-range-diff\">git-range-diff(1)</a>) into the cover\nletter, or as commentary of the lone patch of a 1-patch\nseries, showing the differences between the previous version\nof the patch series and the series currently being\nformatted. <b>previous</b> can be a single revision naming\nthe tip of the previous series if it shares a common base\nwith the series being formatted (for example <b>git\nformat-patch --cover-letter --range-diff=feature/v1 -3\nfeature/v2</b>), or a revision range if the two versions of\nthe series are disjoint (for example <b>git format-patch\n--cover-letter --range-diff=feature/v1~3..feature/v1 -3\nfeature/v2</b>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that diff\noptions passed to the command affect how the primary product\nof <b>format-patch</b> is generated, and they are not passed\nto the underlying <b>range-diff</b> machinery used to\ngenerate the cover-letter material (this may change in the\nfuture).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--creation-factor=&lt;percent&gt;</p>\n\n<p style=\"margin-left:17%;\">Used with <b>--range-diff</b>,\ntweak the heuristic which matches up commits between the\nprevious and current series of patches by adjusting the\ncreation/deletion cost fudge factor. See\n<a href=\"https://man.page/1/git-range-diff\">git-range-diff(1)</a>) for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--notes[=&lt;ref&gt;],\n--no-notes</p>\n\n<p style=\"margin-left:17%;\">Append the notes (see\n<a href=\"https://man.page/1/git-notes\">git-notes(1)</a>) for the commit after the three-dash\nline.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The expected\nuse case of this is to write supporting explanation for the\ncommit that does not belong to the commit log message\nproper, and include it with the patch submission. While one\ncan simply write these explanations after\n<b>format-patch</b> has run but before sending, keeping them\nas Git notes allows them to be maintained between versions\nof the patch series (but see the discussion of the\n<b>notes.rewrite</b> configuration options in\n<a href=\"https://man.page/1/git-notes\">git-notes(1)</a> to use this workflow).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default is\n<b>--no-notes</b>, unless the <b>format.notes</b>\nconfiguration is set.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]signature=&lt;signature&gt;</p>\n\n<p style=\"margin-left:17%;\">Add a signature to each message\nproduced. Per RFC 3676 the signature is separated from the\nbody by a line with '-- ' on it. If the signature option is\nomitted the signature defaults to the Git version\nnumber.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--signature-file=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Works just like --signature\nexcept the signature is read from a file.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--suffix=.&lt;sfx&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of using <b>.patch</b>\nas the suffix for generated filenames, use specified suffix.\nA common alternative is <b>--suffix=.txt</b>. Leaving this\nempty will remove the <b>.patch</b> suffix.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\nleading character does not have to be a dot; for example,\nyou can use <b>--suffix=-patch</b> to get\n<b>0001-description-of-my-change-patch</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">Do not print the names of the\ngenerated files to standard output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-binary</p>\n\n<p style=\"margin-left:17%;\">Do not output contents of\nchanges in binary files, instead display a notice that those\nfiles changed. Patches generated using this option cannot be\napplied properly, but they are still useful for code\nreview.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--zero-commit</p>\n\n<p style=\"margin-left:17%;\">Output an all-zero hash in each\npatch&rsquo;s From header instead of the hash of the\ncommit.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]base[=&lt;commit&gt;]</p>\n\n<p style=\"margin-left:17%;\">Record the base tree\ninformation to identify the state the patch series applies\nto. See the BASE TREE INFORMATION section below for details.\nIf &lt;commit&gt; is &quot;auto&quot;, a base commit is\nautomatically chosen. The <b>--no-base</b> option overrides\na <b>format.useAutoBase</b> configuration.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--root</p>\n\n<p style=\"margin-left:17%;\">Treat the revision argument as\na &lt;revision range&gt;, even if it is just a single commit\n(that would normally be treated as a &lt;since&gt;). Note\nthat root commits included in the specified range are always\nformatted as creation patches, independently of this\nflag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--progress</p>\n\n<p style=\"margin-left:17%;\">Show progress reports on stderr\nas patches are generated.</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can specify\nextra mail header lines to be added to each message,\ndefaults for the subject prefix and file suffix, number\npatches when outputting more than one patch, add\n&quot;To:&quot; or &quot;Cc:&quot; headers, configure\nattachments, change the patch output directory, and sign off\npatches with configuration variables.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[format] <br>\nheaders = &quot;Organization: git-foo\\n&quot; <br>\nsubjectPrefix = CHANGE <br>\nsuffix = .txt <br>\nnumbered = auto <br>\nto = &lt;email&gt; <br>\ncc = &lt;email&gt; <br>\nattach [ = mime-boundary-string ] <br>\nsignOff = true <br>\noutputDirectory = &lt;directory&gt; <br>\ncoverLetter = auto <br>\ncoverFromDescription = auto</p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The patch\nproduced by <i>git format-patch</i> is in UNIX mailbox\nformat, with a fixed &quot;magic&quot; time stamp to\nindicate that the file is output from format-patch rather\nthan a real mailbox, like so:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">From\n8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00\n2001 <br>\nFrom: Tony Luck &lt;tony.luck@intel.com&gt; <br>\nDate: Tue, 13 Jul 2010 11:42:54 -0700 <br>\nSubject: [PATCH]\n=?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=\n<br>\n=?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?= <br>\nMIME-Version: 1.0 <br>\nContent-Type: text/plain; charset=UTF-8 <br>\nContent-Transfer-Encoding: 8bit</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">arch/arm config\nfiles were slimmed down using a python script <br>\n(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae\ncomment)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Do the same for\nia64 so we can have sleek &amp; trim looking <br>\n...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Typically it\nwill be placed in a MUA&rsquo;s drafts folder, edited to add\ntimely commentary that should not go in the changelog after\nthe three dashes, and then sent as a message whose body, in\nour example, starts with &quot;arch/arm config files\nwere...&quot;. On the receiving end, readers can save\ninteresting patches in a UNIX mailbox and apply them with\n<a href=\"https://man.page/1/git-am\">git-am(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a patch is\npart of an ongoing discussion, the patch generated by <i>git\nformat-patch</i> can be tweaked to take advantage of the\n<i>git am --scissors</i> feature. After your response to the\ndiscussion comes a line that consists solely of &quot;<b>--\n&gt;8 --</b>&quot; (scissors and perforation), followed by\nthe patch with unnecessary header fields removed:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">... <br>\n&gt; So we should do such-and-such.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Makes sense to\nme. How about this patch?</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">-- &gt;8 --\n<br>\nSubject: [IA64] Put ia64 config files on the Uwe\nKleine-K&ouml;nig diet</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">arch/arm config\nfiles were slimmed down using a python script <br>\n...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When sending a\npatch this way, most often you are sending your own patch,\nso in addition to the &quot;<b>From $SHA1\n$magic_timestamp</b>&quot; marker you should omit\n<b>From:</b> and <b>Date:</b> lines from the patch file. The\npatch title is likely to be different from the subject of\nthe discussion the patch is in response to, so it is likely\nthat you would want to keep the Subject: line, like the\nexample above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Checking for\npatch corruption</b> <br>\nMany mailers if not set up properly will corrupt whitespace.\nHere are two common types of corruption:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Empty\ncontext lines that do not have <i>any</i> whitespace.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nNon-empty context lines that have one extra whitespace at\nthe beginning.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One way to test\nif your MUA is set up correctly is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Send the\npatch to yourself, exactly the way you would, except with\nTo: and Cc: lines that do not contain the list and\nmaintainer address.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Save\nthat patch to a file in UNIX mailbox format. Call it\na.patch, say.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Apply\nit:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git fetch\n&lt;project&gt; master:test-apply <br>\n$ git switch test-apply <br>\n$ git restore --source=HEAD --staged --worktree :/ <br>\n$ git am a.patch</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If it does not\napply correctly, there can be various reasons.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\npatch itself does not apply cleanly. That is <i>bad</i> but\ndoes not have much to do with your MUA. You might want to\nrebase the patch with <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a> before\nregenerating it in this case.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The MUA\ncorrupted your patch; &quot;am&quot; would complain that the\npatch does not apply. Look in the .git/rebase-apply/\nsubdirectory and see what <i>patch</i> file contains and\ncheck for the common corruption patterns mentioned\nabove.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; While at\nit, check the <i>info</i> and <i>final-commit</i> files as\nwell. If what is in <i>final-commit</i> is not exactly what\nyou would want to see in the commit log message, it is very\nlikely that the receiver would end up hand editing the log\nmessage when applying your patch. Things like &quot;Hi, this\nis my first patch.\\n&quot; in the patch e-mail should come\nafter the three-dash line that signals the end of the commit\nmessage.</p>\n\n<h2>MUA-SPECIFIC HINTS\n<a name=\"MUA-SPECIFIC HINTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here are some\nhints on how to successfully submit patches inline using\nvarious mailers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GMail</b>\n<br>\nGMail does not have any way to turn off line wrapping in the\nweb interface, so it will mangle any emails that you send.\nYou can however use &quot;git send-email&quot; and send your\npatches through the GMail SMTP server, or use any IMAP email\nclient to connect to the google IMAP server and forward the\nemails through that.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For hints on\nusing <i>git send-email</i> to send your patches through the\nGMail SMTP server, see the EXAMPLE section of\n<a href=\"https://man.page/1/git-send-email\">git-send-email(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For hints on\nsubmission using the IMAP interface, see the EXAMPLE section\nof <a href=\"https://man.page/1/git-imap-send\">git-imap-send(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Thunderbird</b>\n<br>\nBy default, Thunderbird will both wrap emails as well as\nflag them as being <i>format=flowed</i>, both of which will\nmake the resulting email unusable by Git.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are three\ndifferent approaches: use an add-on to turn off line wraps,\nconfigure Thunderbird to not mangle patches, or use an\nexternal editor to keep Thunderbird from mangling the\npatches.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>Approach\n#1 (add-on)</big></b></p>\n\n<p style=\"margin-left:17%;\">Install the Toggle Word Wrap\nadd-on that is available from\n<b><font color=\"#0000FF\">https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/</font></b>\n<font color=\"#000000\">It adds a menu entry &quot;Enable Word\nWrap&quot; in the composer&rsquo;s &quot;Options&quot; menu\nthat you can tick off. Now you can compose the message as\nyou otherwise do (cut + paste, <i>git format-patch</i> |\n<i>git imap-send</i>, etc), but you have to insert line\nbreaks manually in any text that you type.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b><big>Approach\n#2 (configuration)</big></b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Three\nsteps:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">1.\nConfigure your mail server composition as plain text:\nEdit...Account Settings...Composition &amp; Addressing,\nuncheck &quot;Compose Messages in HTML&quot;.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">2.\nConfigure your general composition window to not\nwrap.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">In\nThunderbird 2: Edit..Preferences..Composition, wrap plain\ntext messages at 0</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">In\nThunderbird 3: Edit..Preferences..Advanced..Config Editor.\nSearch for &quot;mail.wrap_long_lines&quot;. Toggle it to\nmake sure it is set to <b>false</b>. Also, search for\n&quot;mailnews.wraplength&quot; and set the value to\n0.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">3.\nDisable the use of format=flowed:\nEdit..Preferences..Advanced..Config Editor. Search for\n&quot;mailnews.send_plaintext_flowed&quot;. Toggle it to\nmake sure it is set to <b>false</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">After\nthat is done, you should be able to compose email as you\notherwise would (cut + paste, <i>git format-patch</i> |\n<i>git imap-send</i>, etc), and the patches will not be\nmangled.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b><big>Approach\n#3 (external editor)</big></b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nfollowing Thunderbird extensions are needed: AboutConfig\nfrom</font>\n<b><font color=\"#0000FF\">http://aboutconfig.mozdev.org/</font></b>\n<font color=\"#000000\">and External Editor from</font>\n<b><font color=\"#0000FF\">http://globs.org/articles.php?lng=en&amp;pg=8</font></b></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">1.\nPrepare the patch as a text file using your method of\nchoice.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">2.\nBefore opening a compose window, use Edit&rarr;Account\nSettings to uncheck the &quot;Compose messages in HTML\nformat&quot; setting in the &quot;Composition &amp;\nAddressing&quot; panel of the account to be used to send the\npatch.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">3.\nIn the main Thunderbird window, <i>before</i> you open the\ncompose window for the patch, use Tools&rarr;about:config to\nset the following to the indicated values:</font></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><font color=\"#000000\">mailnews.send_plaintext_flowed\n=&gt; false <br>\nmailnews.wraplength =&gt; 0</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">4.\nOpen a compose window and click the external editor\nicon.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">5.\nIn the external editor window, read in the patch file and\nexit the editor normally.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Side\nnote: it may be possible to do step 2 with about:config and\nthe following settings but no one&rsquo;s tried\nyet.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">mail.html_compose\n=&gt; false <br>\nmail.identity.default.compose_html =&gt; false <br>\nmail.identity.id?.compose_html =&gt; false</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">There\nis a script in contrib/thunderbird-patch-inline which can\nhelp you include patches with Thunderbird in an easy way. To\nuse it, do the steps above and then use the script as the\nexternal editor.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>KMail</b>\n<br>\nThis should help you to submit patches inline using\nKMail.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">1.\nPrepare the patch as a text file.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">2.\nClick on New Mail.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">3.\nGo under &quot;Options&quot; in the Composer window and be\nsure that &quot;Word wrap&quot; is not set.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">4.\nUse Message &rarr; Insert file... and insert the\npatch.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">5.\nBack in the compose window: add whatever other text you wish\nto the message, complete the addressing and subject fields,\nand press send.</font></p>\n\n<h2>BASE TREE INFORMATION\n<a name=\"BASE TREE INFORMATION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nbase tree information block is used for maintainers or third\nparty testers to know the exact state the patch series\napplies to. It consists of the <i>base commit</i>, which is\na well-known commit that is part of the stable part of the\nproject history everybody else works off of, and zero or\nmore <i>prerequisite patches</i>, which are well-known\npatches in flight that is not yet part of the <i>base\ncommit</i> that need to be applied on top of <i>base\ncommit</i> in topological order before the patches can be\napplied.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>base commit</i> is shown as &quot;base-commit: &quot;\nfollowed by the 40-hex of the commit object name. A\n<i>prerequisite patch</i> is shown as\n&quot;prerequisite-patch-id: &quot; followed by the 40-hex\n<i>patch id</i>, which can be obtained by passing the patch\nthrough the <b>git patch-id --stable</b> command.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Imagine\nthat on top of the public commit P, you applied well-known\npatches X, Y and Z from somebody else, and then built your\nthree-patch series A, B, C, the history would be\nlike:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">---P---X---Y---Z---A---B---C</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">With\n<b>git format-patch --base=P -3 C</b> (or variants thereof,\ne.g. with <b>--cover-letter</b> or using <b>Z..C</b> instead\nof <b>-3 C</b> to specify the range), the base tree\ninformation block is shown at the end of the first message\nthe command outputs (either the first patch, or the cover\nletter), like this:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">base-commit:\nP <br>\nprerequisite-patch-id: X <br>\nprerequisite-patch-id: Y <br>\nprerequisite-patch-id: Z</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\nnon-linear topology, such as</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">---P---X---A---M---C\n<br>\n\\ / <br>\nY---Z---B</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan also use <b>git format-patch --base=P -3 C</b> to\ngenerate patches for A, B and C, and the identifiers for P,\nX, Y, Z are appended at the end of the first\nmessage.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nset <b>--base=auto</b> in cmdline, it will automatically\ncompute the base commit as the merge base of tip commit of\nthe remote-tracking branch and revision-range specified in\ncmdline. For a local branch, you need to make it to track a\nremote branch by <b>git branch --set-upstream-to</b> before\nusing this option.</font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nExtract commits between revisions R1 and R2, and apply them\non top of the current branch using <i>git am</i> to\ncherry-pick them:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit format-patch -k --stdout R1..R2 | git am -3\n-k</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nExtract all commits which are in the current branch but not\nin the origin branch:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit format-patch origin</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">For\neach commit a separate file is created in the current\ndirectory.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nExtract all commits that lead to <i>origin</i> since the\ninception of the project:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit format-patch --root origin</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe same as the previous one:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit format-patch -M -B origin</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Additionally,\nit detects and handles renames and complete rewrites\nintelligently to produce a renaming patch. A renaming patch\nreduces the amount of text output, and generally makes it\neasier to review. Note that non-Git &quot;patch&quot;\nprograms won&rsquo;t understand renaming patches, so use it\nonly when you know the recipient uses Git to apply your\npatch.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nExtract three topmost commits from the current branch and\nformat them as e-mailable patches:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit format-patch -3</font></p>\n\n<h2>CAVEATS\n<a name=\"CAVEATS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat <b>format-patch</b> will omit merge commits from the\noutput, even if they are part of the requested range. A\nsimple &quot;patch&quot; does not include enough information\nfor the receiving end to reproduce the same merge\ncommit.</font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/1/git-am\">git-am(1)</a>,\n<a href=\"https://man.page/1/git-send-email\">git-send-email(1)</a></font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#MUA-SPECIFIC HINTS\">MUA-SPECIFIC HINTS</a>","<a href=\"#BASE TREE INFORMATION\">BASE TREE INFORMATION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#CAVEATS\">CAVEATS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}