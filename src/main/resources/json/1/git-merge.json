{"name":"git-merge","body":"\n\n<h1 align=\"center\">GIT-MERGE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-merge -\nJoin two or more development histories together</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nmerge</i> [-n] [--stat] [--no-commit] [--squash]\n[--[no-]edit] <br>\n[--no-verify] [-s &lt;strategy&gt;] [-X\n&lt;strategy-option&gt;] [-S[&lt;keyid&gt;]] <br>\n[--[no-]allow-unrelated-histories] <br>\n[--[no-]rerere-autoupdate] [-m &lt;msg&gt;] [-F\n&lt;file&gt;] [&lt;commit&gt;...] <i><br>\ngit merge</i> (--continue | --abort | --quit)</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Incorporates\nchanges from the named commits (since the time their\nhistories diverged from the current branch) into the current\nbranch. This command is used by <i>git pull</i> to\nincorporate changes from another repository and can be used\nby hand to merge changes from one branch into another.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Assume the\nfollowing history exists and the current branch is\n&quot;<b>master</b>&quot;:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A---B---C topic\n<br>\n/ <br>\nD---E---F---G master</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then\n&quot;<b>git merge topic</b>&quot; will replay the changes\nmade on the <b>topic</b> branch since it diverged from\n<b>master</b> (i.e., <b>E</b>) until its current commit\n(<b>C</b>) on top of <b>master</b>, and record the result in\na new commit along with the names of the two parent commits\nand a log message from the user describing the changes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A---B---C topic\n<br>\n/ \\ <br>\nD---E---F---G---H master</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The second\nsyntax (&quot;<b>git merge --abort</b>&quot;) can only be\nrun after the merge has resulted in conflicts. <i>git merge\n--abort</i> will abort the merge process and try to\nreconstruct the pre-merge state. However, if there were\nuncommitted changes when the merge started (and especially\nif those changes were further modified after the merge was\nstarted), <i>git merge --abort</i> will in some cases be\nunable to reconstruct the original (pre-merge) changes.\nTherefore:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Warning</b>:\nRunning <i>git merge</i> with non-trivial uncommitted\nchanges is discouraged: while possible, it may leave you in\na state that is hard to back out of in the case of a\nconflict.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The third\nsyntax (&quot;<b>git merge --continue</b>&quot;) can only be\nrun after the merge has resulted in conflicts.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--commit,\n--no-commit</p>\n\n<p style=\"margin-left:17%;\">Perform the merge and commit\nthe result. This option can be used to override\n--no-commit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n--no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and\nfurther tweak the merge result before committing.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nfast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with\n--no-commit. Thus, if you want to ensure your branch is not\nchanged or updated by the merge command, use --no-ff with\n--no-commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--edit, -e,\n--no-edit</p>\n\n<p style=\"margin-left:17%;\">Invoke an editor before\ncommitting successful mechanical merge to further edit the\nauto-generated merge message, so that the user can explain\nand justify the merge. The <b>--no-edit</b> option can be\nused to accept the auto-generated message (this is generally\ndiscouraged). The <b>--edit</b> (or <b>-e</b>) option is\nstill useful if you are giving a draft message with the\n<b>-m</b> option from the command line and want to edit it\nin the editor.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Older scripts\nmay depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor\nopened when they run <b>git merge</b>. To make it easier to\nadjust such scripts to the updated behaviour, the\nenvironment variable <b>GIT_MERGE_AUTOEDIT</b> can be set to\n<b>no</b> at the beginning of them.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cleanup=&lt;mode&gt;</p>\n\n<p style=\"margin-left:17%;\">This option determines how the\nmerge message will be cleaned up before committing. See\n<a href=\"https://man.page/1/git-commit\">git-commit(1)</a> for more details. In addition, if the\n<i>&lt;mode&gt;</i> is given a value of <b>scissors</b>,\nscissors will be appended to <b>MERGE_MSG</b> before being\npassed on to the commit machinery in the case of a merge\nconflict.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ff, --no-ff,\n--ff-only</p>\n\n<p style=\"margin-left:17%;\">Specifies how a merge is\nhandled when the merged-in history is already a descendant\nof the current history. <b>--ff</b> is the default unless\nmerging an annotated (and possibly signed) tag that is not\nstored in its natural place in the <b>refs/tags/</b>\nhierarchy, in which case <b>--no-ff</b> is assumed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>--ff</b>, when possible resolve the merge as a\nfast-forward (only update the branch pointer to match the\nmerged branch; do not create a merge commit). When not\npossible (when the merged-in history is not a descendant of\nthe current history), create a merge commit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>--no-ff</b>, create a merge commit in all cases, even\nwhen the merge could instead be resolved as a\nfast-forward.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>--ff-only</b>, resolve the merge as a fast-forward when\npossible. When not possible, refuse to merge and exit with a\nnon-zero status.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-S[&lt;keyid&gt;],\n--gpg-sign[=&lt;keyid&gt;], --no-gpg-sign</p>\n\n<p style=\"margin-left:17%;\">GPG-sign the resulting merge\ncommit. The <b>keyid</b> argument is optional and defaults\nto the committer identity; if specified, it must be stuck to\nthe option without a space. <b>--no-gpg-sign</b> is useful\nto countermand both <b>commit.gpgSign</b> configuration\nvariable, and earlier <b>--gpg-sign</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--log[=&lt;n&gt;],\n--no-log</p>\n\n<p style=\"margin-left:17%;\">In addition to branch names,\npopulate the log message with one-line descriptions from at\nmost &lt;n&gt; actual commits that are being merged. See\nalso <a href=\"https://man.page/1/git-fmt-merge-msg\">git-fmt-merge-msg(1)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With --no-log\ndo not list one-line descriptions from the actual commits\nbeing merged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--signoff,\n--no-signoff</p>\n\n<p style=\"margin-left:17%;\">Add a <b>Signed-off-by</b>\ntrailer by the committer at the end of the commit log\nmessage. The meaning of a signoff depends on the project to\nwhich you&rsquo;re committing. For example, it may certify\nthat the committer has the rights to submit the work under\nthe project&rsquo;s license or agrees to some contributor\nrepresentation, such as a Developer Certificate of Origin.\n(See\n<b><font color=\"#0000FF\">http://developercertificate.org</font></b>\n<font color=\"#000000\">for the one used by the Linux kernel\nand Git projects.) Consult the documentation or leadership\nof the project to which you&rsquo;re contributing to\nunderstand how the signoffs are used in that\nproject.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n--no-signoff option can be used to countermand an earlier\n--signoff option on the command line.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--stat,\n-n, --no-stat</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Show a\ndiffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option\nmerge.stat.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">With\n-n or --no-stat do not show a diffstat at the end of the\nmerge.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--squash,\n--no-squash</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Produce\nthe working tree and index state as if a real merge happened\n(except for the merge information), but do not actually make\na commit, move the <b>HEAD</b>, or record\n<b>$GIT_DIR/MERGE_HEAD</b> (to cause the next <b>git\ncommit</b> command to create a merge commit). This allows\nyou to create a single commit on top of the current branch\nwhose effect is the same as merging another branch (or more\nin case of an octopus).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">With\n--no-squash perform the merge and commit the result. This\noption can be used to override --squash.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">With\n--squash, --commit is not allowed, and will fail.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--[no-]verify</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By\ndefault, the pre-merge and commit-msg hooks are run. When\n<b>--no-verify</b> is given, these are bypassed. See also\n<a href=\"https://man.page/5/githooks\">githooks(5)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-s\n&lt;strategy&gt;, --strategy=&lt;strategy&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Use the\ngiven merge strategy; can be supplied more than once to\nspecify them in the order they should be tried. If there is\nno <b>-s</b> option, a built-in list of strategies is used\ninstead (<b>ort</b> when merging a single head,\n<b>octopus</b> otherwise).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-X\n&lt;option&gt;, --strategy-option=&lt;option&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Pass\nmerge strategy specific option through to the merge\nstrategy.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--verify-signatures,\n--no-verify-signatures</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Verify\nthat the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in\nthe default trust model, this means the signing key has been\nsigned by a trusted key. If the tip commit of the side\nbranch is not signed with a valid key, the merge is\naborted.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--summary,\n--no-summary</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Synonyms\nto --stat and --no-stat; these are deprecated and will be\nremoved in the future.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-q,\n--quiet</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Operate\nquietly. Implies --no-progress.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-v,\n--verbose</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Be\nverbose.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--progress,\n--no-progress</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Turn\nprogress on/off explicitly. If neither is specified,\nprogress is shown if standard error is connected to a\nterminal. Note that not all merge strategies may support\nprogress reporting.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--autostash,\n--no-autostash</font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Automatically\ncreate a temporary stash entry before the operation begins,\nrecord it in the special ref <b>MERGE_AUTOSTASH</b> and\napply it after the operation ends. This means that you can\nrun the operation on a dirty worktree. However, use with\ncare: the final stash application after a successful merge\nmight result in non-trivial conflicts.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--allow-unrelated-histories</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By\ndefault, <b>git merge</b> command refuses to merge histories\nthat do not share a common ancestor. This option can be used\nto override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-m\n&lt;msg&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Set the\ncommit message to be used for the merge commit (in case one\nis created).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\n<b>--log</b> is specified, a shortlog of the commits being\nmerged will be appended to the specified message.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<i>git fmt-merge-msg</i> command can be used to give a good\ndefault for automated <i>git merge</i> invocations. The\nautomated message can include the branch\ndescription.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-F\n&lt;file&gt;, --file=&lt;file&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Read the\ncommit message to be used for the merge commit (in case one\nis created).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\n<b>--log</b> is specified, a shortlog of the commits being\nmerged will be appended to the specified message.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--rerere-autoupdate,\n--no-rerere-autoupdate</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Allow the\nrerere mechanism to update the index with the result of\nauto-conflict resolution if possible.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--overwrite-ignore,\n--no-overwrite-ignore</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Silently\noverwrite ignored files from the merge result. This is the\ndefault behavior. Use <b>--no-overwrite-ignore</b> to\nabort.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--abort</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Abort the\ncurrent conflict resolution process, and try to reconstruct\nthe pre-merge state. If an autostash entry is present, apply\nit to the worktree.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthere were uncommitted worktree changes present when the\nmerge started, <i>git merge --abort</i> will in some cases\nbe unable to reconstruct these changes. It is therefore\nrecommended to always commit or stash your changes before\nrunning <i>git merge</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><i>git\nmerge --abort</i> is equivalent to <i>git reset --merge</i>\nwhen <b>MERGE_HEAD</b> is present unless\n<b>MERGE_AUTOSTASH</b> is also present in which case <i>git\nmerge --abort</i> applies the stash entry to the worktree\nwhereas <i>git reset --merge</i> will save the stashed\nchanges in the stash list.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--quit</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Forget\nabout the current merge in progress. Leave the index and the\nworking tree as-is. If <b>MERGE_AUTOSTASH</b> is present,\nthe stash entry will be saved to the stash list.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--continue</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">After a\n<i>git merge</i> stops due to conflicts you can conclude the\nmerge by running <i>git merge --continue</i> (see &quot;HOW\nTO RESOLVE CONFLICTS&quot; section below).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;commit&gt;...</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Commits,\nusually other branch heads, to merge into our branch.\nSpecifying more than one commit will create a merge with\nmore than two parents (affectionately called an Octopus\nmerge).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nno commit is given from the command line, merge the\nremote-tracking branches that the current branch is\nconfigured to use as its upstream. See also the\nconfiguration section of this manual page.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<b>FETCH_HEAD</b> (and no other commit) is specified, the\nbranches recorded in the <b>.git/FETCH_HEAD</b> file by the\nprevious invocation of <b>git fetch</b> for merging are\nmerged to the current branch.</font></p>\n\n<h2>PRE-MERGE CHECKS\n<a name=\"PRE-MERGE CHECKS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Before\napplying outside changes, you should get your own work in\ngood shape and committed locally, so it will not be\nclobbered if there are conflicts. See also\n<a href=\"https://man.page/1/git-stash\">git-stash(1)</a>. <i>git pull</i> and <i>git merge</i>\nwill stop without doing anything when local uncommitted\nchanges overlap with files that <i>git pull</i>/<i>git\nmerge</i> may need to update.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">To\navoid recording unrelated changes in the merge commit,\n<i>git pull</i> and <i>git merge</i> will also abort if\nthere are any changes registered in the index relative to\nthe <b>HEAD</b> commit. (Special narrow exceptions to this\nrule may exist depending on which merge strategy is in use,\nbut generally, the index must match HEAD.)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nall named commits are already ancestors of <b>HEAD</b>,\n<i>git merge</i> will exit early with the message\n&quot;Already up to date.&quot;</font></p>\n\n<h2>FAST-FORWARD MERGE\n<a name=\"FAST-FORWARD MERGE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Often\nthe current branch head is an ancestor of the named commit.\nThis is the most common case especially when invoked from\n<i>git pull</i>: you are tracking an upstream repository,\nyou have committed no local changes, and now you want to\nupdate to a newer upstream revision. In this case, a new\ncommit is not needed to store the combined history; instead,\nthe <b>HEAD</b> (along with the index) is updated to point\nat the named commit, without creating an extra merge\ncommit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nbehavior can be suppressed with the <b>--no-ff</b>\noption.</font></p>\n\n<h2>TRUE MERGE\n<a name=\"TRUE MERGE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Except\nin a fast-forward merge (see above), the branches to be\nmerged must be tied together by a merge commit that has both\nof them as its parents.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nmerged version reconciling the changes from all branches to\nbe merged is committed, and your <b>HEAD</b>, index, and\nworking tree are updated to it. It is possible to have\nmodifications in the working tree as long as they do not\noverlap; the update will preserve them.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nit is not obvious how to reconcile the changes, the\nfollowing happens:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">1.\nThe <b>HEAD</b> pointer stays the same.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">2.\nThe <b>MERGE_HEAD</b> ref is set to point to the other\nbranch head.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">3.\nPaths that merged cleanly are updated both in the index file\nand in your working tree.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">4.\nFor conflicting paths, the index file records up to three\nversions: stage 1 stores the version from the common\nancestor, stage 2 from <b>HEAD</b>, and stage 3 from\n<b>MERGE_HEAD</b> (you can inspect the stages with <b>git\nls-files -u</b>). The working tree files contain the result\nof the &quot;merge&quot; program; i.e. 3-way merge results\nwith familiar conflict markers <b>&lt;&lt;&lt; ===\n&gt;&gt;&gt;</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">5.\nNo other changes are made. In particular, the local\nmodifications you had before you started merge will stay the\nsame and the index entries for them stay as they were, i.e.\nmatching <b>HEAD</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou tried a merge which resulted in complex conflicts and\nwant to start over, you can recover with <b>git merge\n--abort</b>.</font></p>\n\n<h2>MERGING TAG\n<a name=\"MERGING TAG\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nmerging an annotated (and possibly signed) tag, Git always\ncreates a merge commit even if a fast-forward merge is\npossible, and the commit message template is prepared with\nthe tag message. Additionally, if the tag is signed, the\nsignature check is reported as a comment in the message\ntemplate. See also <a href=\"https://man.page/1/git-tag\">git-tag(1)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nyou want to just integrate with the work leading to the\ncommit that happens to be tagged, e.g. synchronizing with an\nupstream release point, you may not want to make an\nunnecessary merge commit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\nsuch a case, you can &quot;unwrap&quot; the tag yourself\nbefore feeding it to <b>git merge</b>, or pass\n<b>--ff-only</b> when you do not have any work on your own.\ne.g.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">git\nfetch origin <br>\ngit merge v1.2.3^0 <br>\ngit merge --ff-only v1.2.3</font></p>\n\n<h2>HOW CONFLICTS ARE PRESENTED\n<a name=\"HOW CONFLICTS ARE PRESENTED\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">During\na merge, the working tree files are updated to reflect the\nresult of the merge. Among the changes made to the common\nancestor&rsquo;s version, non-overlapping ones (that is, you\nchanged an area of the file while the other side left that\narea intact, or vice versa) are incorporated in the final\nresult verbatim. When both sides made changes to the same\narea, however, Git cannot randomly pick one side over the\nother, and asks you to resolve it by leaving what both sides\ndid to that area.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">By\ndefault, Git uses the same style as the one used by the\n&quot;merge&quot; program from the RCS suite to present such\na conflicted hunk, like this:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Here\nare lines that are either unchanged from the common <br>\nancestor, or cleanly resolved because only one side changed.\n<br>\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt <br>\nConflict resolution is hard; <br>\nlet's go shopping. <br>\n======= <br>\nGit makes conflict resolution easy. <br>\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt <br>\nAnd here is another line that is cleanly resolved or\nunmodified.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\narea where a pair of conflicting changes happened is marked\nwith markers <b>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</b>,\n<b>=======</b>, and <b>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</b>. The\npart before the <b>=======</b> is typically your side, and\nthe part afterwards is typically their side.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ndefault format does not show what the original said in the\nconflicting area. You cannot tell how many lines are deleted\nand replaced with Barbie&rsquo;s remark on your side. The\nonly thing you can tell is that your side wants to say it is\nhard and you&rsquo;d prefer to go shopping, while the other\nside wants to claim it is easy.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">An\nalternative style can be used by setting the\n&quot;merge.conflictStyle&quot; configuration variable to\n&quot;diff3&quot;. In &quot;diff3&quot; style, the above\nconflict may look like this:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Here\nare lines that are either unchanged from the common <br>\nancestor, or cleanly resolved because only one side changed.\n<br>\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt <br>\nConflict resolution is hard; <br>\nlet's go shopping. <br>\n||||||| <br>\nConflict resolution is hard. <br>\n======= <br>\nGit makes conflict resolution easy. <br>\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt <br>\nAnd here is another line that is cleanly resolved or\nunmodified.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\naddition to the <b>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</b>,\n<b>=======</b>, and <b>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</b>\nmarkers, it uses another <b>|||||||</b> marker that is\nfollowed by the original text. You can tell that the\noriginal just stated a fact, and your side simply gave in to\nthat statement and gave up, while the other side tried to\nhave a more positive attitude. You can sometimes come up\nwith a better resolution by viewing the original.</font></p>\n\n<h2>HOW TO RESOLVE CONFLICTS\n<a name=\"HOW TO RESOLVE CONFLICTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">After\nseeing a conflict, you can do two things:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nDecide not to merge. The only clean-ups you need are to\nreset the index file to the <b>HEAD</b> commit to reverse 2.\nand to clean up working tree changes made by 2. and 3.;\n<b>git merge --abort</b> can be used for this.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nResolve the conflicts. Git will mark the conflicts in the\nworking tree. Edit the files into shape and <i>git add</i>\nthem to the index. Use <i>git commit</i> or <i>git merge\n--continue</i> to seal the deal. The latter command checks\nwhether there is a (interrupted) merge in progress before\ncalling <i>git commit</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan work through the conflict with a number of\ntools:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nUse a mergetool. <b>git mergetool</b> to launch a graphical\nmergetool which will work you through the merge.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nLook at the diffs. <b>git diff</b> will show a three-way\ndiff, highlighting changes from both the <b>HEAD</b> and\n<b>MERGE_HEAD</b> versions.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nLook at the diffs from each branch. <b>git log --merge -p\n&lt;path&gt;</b> will show diffs first for the <b>HEAD</b>\nversion and then the <b>MERGE_HEAD</b> version.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nLook at the originals. <b>git show :1:filename</b> shows the\ncommon ancestor, <b>git show :2:filename</b> shows the\n<b>HEAD</b> version, and <b>git show :3:filename</b> shows\nthe <b>MERGE_HEAD</b> version.</font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nMerge branches <b>fixes</b> and <b>enhancements</b> on top\nof the current branch, making an octopus merge:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit merge fixes enhancements</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nMerge branch <b>obsolete</b> into the current branch, using\n<b>ours</b> merge strategy:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit merge -s ours obsolete</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nMerge branch <b>maint</b> into the current branch, but do\nnot make a new commit automatically:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit merge --no-commit maint</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\ncan be used when you want to include further changes to the\nmerge, or want to write your own merge commit\nmessage.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">You\nshould refrain from abusing this option to sneak substantial\nchanges into a merge commit. Small fixups like bumping\nrelease/version name would be acceptable.</font></p>\n\n<h2>MERGE STRATEGIES\n<a name=\"MERGE STRATEGIES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nmerge mechanism (<b>git merge</b> and <b>git pull</b>\ncommands) allows the backend <i>merge strategies</i> to be\nchosen with <b>-s</b> option. Some strategies can also take\ntheir own options, which can be passed by giving\n<b>-X&lt;option&gt;</b> arguments to <b>git merge</b> and/or\n<b>git pull</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">ort</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This is\nthe default merge strategy when pulling or merging one\nbranch. This strategy can only resolve two heads using a\n3-way merge algorithm. When there is more than one common\nancestor that can be used for 3-way merge, it creates a\nmerged tree of the common ancestors and uses that as the\nreference tree for the 3-way merge. This has been reported\nto result in fewer merge conflicts without causing mismerges\nby tests done on actual merge commits taken from Linux 2.6\nkernel development history. Additionally this strategy can\ndetect and handle merges involving renames. It does not make\nuse of detected copies. The name for this algorithm is an\nacronym (&quot;Ostensibly Recursive&rsquo;s Twin&quot;) and\ncame from the fact that it was written as a replacement for\nthe previous default algorithm, <b>recursive</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<i>ort</i> strategy can take the following\noptions:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">ours</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">This\noption forces conflicting hunks to be auto-resolved cleanly\nby favoring <i>our</i> version. Changes from the other tree\nthat do not conflict with our side are reflected in the\nmerge result. For a binary file, the entire contents are\ntaken from our side.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">This\nshould not be confused with the <i>ours</i> merge strategy,\nwhich does not even look at what the other tree contains at\nall. It discards everything the other tree did, declaring\n<i>our</i> history contains all that happened in\nit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">theirs</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">This is\nthe opposite of <i>ours</i>; note that, unlike <i>ours</i>,\nthere is no <i>theirs</i> merge strategy to confuse this\nmerge option with.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">ignore-space-change,\nignore-all-space, ignore-space-at-eol,\nignore-cr-at-eol</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Treats\nlines with the indicated type of whitespace change as\nunchanged for the sake of a three-way merge. Whitespace\nchanges mixed with other changes to a line are not ignored.\nSee also <a href=\"https://man.page/1/git-diff\">git-diff(1)</a> <b>-b</b>, <b>-w</b>,\n<b>--ignore-space-at-eol</b>, and\n<b>--ignore-cr-at-eol</b>.</font></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><font color=\"#000000\">&bull;\nIf <i>their</i> version only introduces whitespace changes\nto a line, <i>our</i> version is used;</font></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><font color=\"#000000\">&bull;\nIf <i>our</i> version introduces whitespace changes but\n<i>their</i> version includes a substantial change,\n<i>their</i> version is used;</font></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><font color=\"#000000\">&bull;\nOtherwise, the merge proceeds in the usual way.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">renormalize</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">This runs\na virtual check-out and check-in of all three stages of a\nfile when resolving a three-way merge. This option is meant\nto be used when merging branches with different clean\nfilters or end-of-line normalization rules. See\n&quot;Merging branches with differing checkin/checkout\nattributes&quot; in <a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> for\ndetails.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">no-renormalize</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Disables\nthe <b>renormalize</b> option. This overrides the\n<b>merge.renormalize</b> configuration variable.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">find-renames[=&lt;n&gt;]</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Turn on\nrename detection, optionally setting the similarity\nthreshold. This is the default. This overrides the\n<i>merge.renames</i> configuration variable. See also\n<a href=\"https://man.page/1/git-diff\">git-diff(1)</a> <b>--find-renames</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">rename-threshold=&lt;n&gt;</font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Deprecated\nsynonym for <b>find-renames=&lt;n&gt;</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">subtree[=&lt;path&gt;]</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">This\noption is a more advanced form of <i>subtree</i> strategy,\nwhere the strategy makes a guess on how two trees must be\nshifted to match with each other when merging. Instead, the\nspecified path is prefixed (or stripped from the beginning)\nto make the shape of two trees to match.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">recursive</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This can\nonly resolve two heads using a 3-way merge algorithm. When\nthere is more than one common ancestor that can be used for\n3-way merge, it creates a merged tree of the common\nancestors and uses that as the reference tree for the 3-way\nmerge. This has been reported to result in fewer merge\nconflicts without causing mismerges by tests done on actual\nmerge commits taken from Linux 2.6 kernel development\nhistory. Additionally this can detect and handle merges\ninvolving renames. It does not make use of detected copies.\nThis was the default strategy for resolving two heads from\nGit v0.99.9k until v2.33.0.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<i>recursive</i> strategy takes the same options as\n<i>ort</i>. However, there are three additional options that\n<i>ort</i> ignores (not documented above) that are\npotentially useful with the <i>recursive</i>\nstrategy:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">patience</font></p>\n\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Deprecated\nsynonym for <b>diff-algorithm=patience</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">diff-algorithm=[patience|minimal|histogram|myers]</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Use a\ndifferent diff algorithm while merging, which can help avoid\nmismerges that occur due to unimportant matching lines (such\nas braces from distinct functions). See also\n<a href=\"https://man.page/1/git-diff\">git-diff(1)</a> <b>--diff-algorithm</b>. Note that\n<b>ort</b> specifically uses\n<b>diff-algorithm=histogram</b>, while <b>recursive</b>\ndefaults to the <b>diff.algorithm</b> config\nsetting.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">no-renames</font></p>\n\n<p style=\"margin-left:23%;\"><font color=\"#000000\">Turn off\nrename detection. This overrides the <b>merge.renames</b>\nconfiguration variable. See also <a href=\"https://man.page/1/git-diff\">git-diff(1)</a>\n<b>--no-renames</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">resolve</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This can\nonly resolve two heads (i.e. the current branch and another\nbranch you pulled from) using a 3-way merge algorithm. It\ntries to carefully detect criss-cross merge ambiguities. It\ndoes not handle renames.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">octopus</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This\nresolves cases with more than two heads, but refuses to do a\ncomplex merge that needs manual resolution. It is primarily\nmeant to be used for bundling topic branch heads together.\nThis is the default merge strategy when pulling or merging\nmore than one branch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">ours</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This\nresolves any number of heads, but the resulting tree of the\nmerge is always that of the current branch head, effectively\nignoring all changes from all other branches. It is meant to\nbe used to supersede old development history of side\nbranches. Note that this is different from the -Xours option\nto the <i>recursive</i> merge strategy.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">subtree</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This is a\nmodified <b>ort</b> strategy. When merging trees A and B, if\nB corresponds to a subtree of A, B is first adjusted to\nmatch the tree structure of A, instead of reading the trees\nat the same level. This adjustment is also done to the\ncommon ancestor tree.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">With\nthe strategies that use 3-way merge (including the default,\n<i>ort</i>), if a change is made on both branches, but later\nreverted on one of the branches, that change will be present\nin the merged result; some people find this behavior\nconfusing. It occurs because only the heads and the merge\nbase are considered when performing a merge, not the\nindividual commits. The merge algorithm therefore considers\nthe reverted change as no change at all, and substitutes the\nchanged version instead.</font></p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.conflictStyle</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Specify\nthe style in which conflicted hunks are written out to\nworking tree files upon merge. The default is\n&quot;merge&quot;, which shows a\n<b>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</b> conflict marker, changes\nmade by one side, a <b>=======</b> marker, changes made by\nthe other side, and then a\n<b>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</b> marker. An alternate\nstyle, &quot;diff3&quot;, adds a <b>|||||||</b> marker and\nthe original text before the <b>=======</b>\nmarker.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.defaultToUpstream</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">If merge\nis called without any commit argument, merge the upstream\nbranches configured for the current branch by using their\nlast observed values stored in their remote-tracking\nbranches. The values of the <b>branch.&lt;current\nbranch&gt;.merge</b> that name the branches at the remote\nnamed by <b>branch.&lt;current branch&gt;.remote</b> are\nconsulted, and then they are mapped via\n<b>remote.&lt;remote&gt;.fetch</b> to their corresponding\nremote-tracking branches, and the tips of these tracking\nbranches are merged. Defaults to true.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.ff</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By\ndefault, Git does not create an extra merge commit when\nmerging a commit that is a descendant of the current commit.\nInstead, the tip of the current branch is fast-forwarded.\nWhen set to <b>false</b>, this variable tells Git to create\nan extra merge commit in such a case (equivalent to giving\nthe <b>--no-ff</b> option from the command line). When set\nto <b>only</b>, only such fast-forward merges are allowed\n(equivalent to giving the <b>--ff-only</b> option from the\ncommand line).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.verifySignatures</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">If true,\nthis is equivalent to the --verify-signatures command line\noption. See <a href=\"https://man.page/1/git-merge\">git-merge(1)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.branchdesc</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">In\naddition to branch names, populate the log message with the\nbranch description text associated with them. Defaults to\nfalse.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.log</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">In\naddition to branch names, populate the log message with at\nmost the specified number of one-line descriptions from the\nactual commits that are being merged. Defaults to false, and\ntrue is a synonym for 20.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.suppressDest</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By adding\na glob that matches the names of integration branches to\nthis multi-valued configuration variable, the default merge\nmessage computed for merges into these integration branches\nwill omit &quot;into &lt;branch name&gt;&quot; from its\ntitle.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">An\nelement with an empty value can be used to clear the list of\nglobs accumulated from previous configuration entries. When\nthere is no <b>merge.suppressDest</b> variable defined, the\ndefault value of <b>master</b> is used for backward\ncompatibility.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.renameLimit</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nnumber of files to consider in the exhaustive portion of\nrename detection during a merge. If not specified, defaults\nto the value of diff.renameLimit. If neither\nmerge.renameLimit nor diff.renameLimit are specified,\ncurrently defaults to 7000. This setting has no effect if\nrename detection is turned off.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.renames</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Whether\nGit detects renames. If set to &quot;false&quot;, rename\ndetection is disabled. If set to &quot;true&quot;, basic\nrename detection is enabled. Defaults to the value of\ndiff.renames.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.directoryRenames</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Whether\nGit detects directory renames, affecting what happens at\nmerge time to new files added to a directory on one side of\nhistory when that directory was renamed on the other side of\nhistory. If merge.directoryRenames is set to\n&quot;false&quot;, directory rename detection is disabled,\nmeaning that such new files will be left behind in the old\ndirectory. If set to &quot;true&quot;, directory rename\ndetection is enabled, meaning that such new files will be\nmoved into the new directory. If set to\n&quot;conflict&quot;, a conflict will be reported for such\npaths. If merge.renames is false, merge.directoryRenames is\nignored and treated as false. Defaults to\n&quot;conflict&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.renormalize</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Tell Git\nthat canonical representation of files in the repository has\nchanged over time (e.g. earlier commits record text files\nwith CRLF line endings, but recent ones use LF line\nendings). In such a repository, Git can convert the data\nrecorded in commits to a canonical form before performing a\nmerge to reduce unnecessary conflicts. For more information,\nsee section &quot;Merging branches with differing\ncheckin/checkout attributes&quot; in\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.stat</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Whether\nto print the diffstat between ORIG_HEAD and the merge result\nat the end of the merge. True by default.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.autoStash</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">When set\nto true, automatically create a temporary stash entry before\nthe operation begins, and apply it after the operation ends.\nThis means that you can run merge on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful merge might result in non-trivial conflicts. This\noption can be overridden by the <b>--no-autostash</b> and\n<b>--autostash</b> options of <a href=\"https://man.page/1/git-merge\">git-merge(1)</a>. Defaults\nto false.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.tool</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhich merge tool is used by <a href=\"https://man.page/1/git-mergetool\">git-mergetool(1)</a>. The\nlist below shows the valid built-in values. Any other value\nis treated as a custom merge tool and requires that a\ncorresponding mergetool.&lt;tool&gt;.cmd variable is\ndefined.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.guitool</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhich merge tool is used by <a href=\"https://man.page/1/git-mergetool\">git-mergetool(1)</a> when the\n-g/--gui flag is specified. The list below shows the valid\nbuilt-in values. Any other value is treated as a custom\nmerge tool and requires that a corresponding\nmergetool.&lt;guitool&gt;.cmd variable is\ndefined.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\naraxis</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nbc</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nbc3</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nbc4</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ncodecompare</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ndeltawalker</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ndiffmerge</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ndiffuse</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\necmerge</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nemerge</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nexamdiff</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nguiffy</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ngvimdiff</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ngvimdiff1</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ngvimdiff2</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ngvimdiff3</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nkdiff3</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nmeld</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nnvimdiff</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nnvimdiff1</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nnvimdiff2</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nnvimdiff3</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nopendiff</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\np4merge</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nsmerge</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ntkdiff</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\ntortoisemerge</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nvimdiff</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nvimdiff1</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nvimdiff2</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nvimdiff3</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nwinmerge</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">&bull;\nxxdiff</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.verbosity</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nthe amount of output shown by the recursive merge strategy.\nLevel 0 outputs nothing except a final error message if\nconflicts were detected. Level 1 outputs only conflicts, 2\noutputs conflicts and file changes. Level 5 and above\noutputs debugging information. The default is level 2. Can\nbe overridden by the <b>GIT_MERGE_VERBOSITY</b> environment\nvariable.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.&lt;driver&gt;.name</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Defines a\nhuman-readable name for a custom low-level merge driver. See\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.&lt;driver&gt;.driver</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Defines\nthe command that implements a custom low-level merge driver.\nSee <a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">merge.&lt;driver&gt;.recursive</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Names a\nlow-level merge driver to be used when performing an\ninternal merge between common ancestors. See\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">branch.&lt;name&gt;.mergeOptions</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets\ndefault options for merging into branch &lt;name&gt;. The\nsyntax and supported options are the same as those of <i>git\nmerge</i>, but option values containing whitespace\ncharacters are currently not supported.</font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/1/git-fmt-merge-msg\">git-fmt-merge-msg(1)</a>,\n<a href=\"https://man.page/1/git-pull\">git-pull(1)</a>, <a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a>,\n<a href=\"https://man.page/1/git-reset\">git-reset(1)</a>, <a href=\"https://man.page/1/git-diff\">git-diff(1)</a>,\n<a href=\"https://man.page/1/git-ls-files\">git-ls-files(1)</a>, <a href=\"https://man.page/1/git-add\">git-add(1)</a>, <a href=\"https://man.page/1/git-rm\">git-rm(1)</a>,\n<a href=\"https://man.page/1/git-mergetool\">git-mergetool(1)</a></font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#PRE-MERGE CHECKS\">PRE-MERGE CHECKS</a>","<a href=\"#FAST-FORWARD MERGE\">FAST-FORWARD MERGE</a>","<a href=\"#TRUE MERGE\">TRUE MERGE</a>","<a href=\"#MERGING TAG\">MERGING TAG</a>","<a href=\"#HOW CONFLICTS ARE PRESENTED\">HOW CONFLICTS ARE PRESENTED</a>","<a href=\"#HOW TO RESOLVE CONFLICTS\">HOW TO RESOLVE CONFLICTS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#MERGE STRATEGIES\">MERGE STRATEGIES</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}