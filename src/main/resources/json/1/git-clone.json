{"name":"git-clone","description":"git-clone - Clone a repository into a new directory","body":"\n\n<h1 align=\"center\">GIT-CLONE</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-clone -\nClone a repository into a new directory</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nclone</i> [--template=&lt;template_directory&gt;] <br>\n[-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n<br>\n[-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;]\n[--reference &lt;repository&gt;] <br>\n[--dissociate] [--separate-git-dir &lt;git dir&gt;] <br>\n[--depth &lt;depth&gt;] [--[no-]single-branch] [--no-tags]\n<br>\n[--recurse-submodules[=&lt;pathspec&gt;]]\n[--[no-]shallow-submodules] <br>\n[--[no-]remote-submodules] [--jobs &lt;n&gt;] [--sparse]\n[--[no-]reject-shallow] <br>\n[--filter=&lt;filter&gt;] [--] &lt;repository&gt; <br>\n[&lt;directory&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Clones a\nrepository into a newly created directory, creates\nremote-tracking branches for each branch in the cloned\nrepository (visible using <b>git branch --remotes</b>), and\ncreates and checks out an initial branch that is forked from\nthe cloned repository&rsquo;s currently active branch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After the\nclone, a plain <b>git fetch</b> without arguments will\nupdate all the remote-tracking branches, and a <b>git\npull</b> without arguments will in addition merge the remote\nmaster branch into the current master branch, if any (this\nis untrue when &quot;--single-branch&quot; is given; see\nbelow).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This default\nconfiguration is achieved by creating references to the\nremote branch heads under <b>refs/remotes/origin</b> and by\ninitializing <b>remote.origin.url</b> and\n<b>remote.origin.fetch</b> configuration variables.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-l, --local</p>\n\n<p style=\"margin-left:17%;\">When the repository to clone\nfrom is on a local machine, this flag bypasses the normal\n&quot;Git aware&quot; transport mechanism and clones the\nrepository by making a copy of HEAD and everything under\nobjects and refs directories. The files under\n<b>.git/objects/</b> directory are hardlinked to save space\nwhen possible.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\nrepository is specified as a local path (e.g.,\n<b>/path/to/repo</b>), this is the default, and --local is\nessentially a no-op. If the repository is specified as a\nURL, then this flag is ignored (and we never use the local\noptimizations). Specifying <b>--no-local</b> will override\nthe default when <b>/path/to/repo</b> is given, using the\nregular Git transport instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>NOTE</b>:\nthis operation can race with concurrent modification to the\nsource repository, similar to running <b>cp -r src dst</b>\nwhile modifying <b>src</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-hardlinks</p>\n\n<p style=\"margin-left:17%;\">Force the cloning process from\na repository on a local filesystem to copy the files under\nthe <b>.git/objects</b> directory instead of using\nhardlinks. This may be desirable if you are trying to make a\nback-up of your repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s,\n--shared</p>\n\n<p style=\"margin-left:17%;\">When the repository to clone is\non the local machine, instead of using hard links,\nautomatically setup <b>.git/objects/info/alternates</b> to\nshare the objects with the source repository. The resulting\nrepository starts out without any object of its own.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>NOTE</b>:\nthis is a possibly dangerous operation; do <b>not</b> use it\nunless you understand what it does. If you clone your\nrepository using this option and then delete branches (or\nuse any other Git command that makes any existing commit\nunreferenced) in the source repository, some objects may\nbecome unreferenced (or dangling). These objects may be\nremoved by normal Git operations (such as <b>git commit</b>)\nwhich automatically call <b>git maintenance run --auto</b>.\n(See <a href=\"https://man.page/1/git-maintenance\">git-maintenance(1)</a>.) If these objects are\nremoved and were referenced by the cloned repository, then\nthe cloned repository will become corrupt.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nrunning <b>git repack</b> without the <b>--local</b> option\nin a repository cloned with <b>--shared</b> will copy\nobjects from the source repository into a pack in the cloned\nrepository, removing the disk space savings of <b>clone\n--shared</b>. It is safe, however, to run <b>git gc</b>,\nwhich uses the <b>--local</b> option by default.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nbreak the dependency of a repository cloned with\n<b>--shared</b> on its source repository, you can simply run\n<b>git repack -a</b> to copy all objects from the source\nrepository into a pack in the cloned repository.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reference[-if-able]\n&lt;repository&gt;</p>\n\n<p style=\"margin-left:17%;\">If the reference repository is\non the local machine, automatically setup\n<b>.git/objects/info/alternates</b> to obtain objects from\nthe reference repository. Using an already existing\nrepository as an alternate will require fewer objects to be\ncopied from the repository being cloned, reducing network\nand local storage costs. When using the\n<b>--reference-if-able</b>, a non existing directory is\nskipped with a warning instead of aborting the clone.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>NOTE</b>:\nsee the NOTE for the <b>--shared</b> option, and also the\n<b>--dissociate</b> option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dissociate</p>\n\n<p style=\"margin-left:17%;\">Borrow the objects from\nreference repositories specified with the <b>--reference</b>\noptions only to reduce network transfer, and stop borrowing\nfrom them after a clone is made by making necessary local\ncopies of borrowed objects. This option can also be used\nwhen cloning locally from a repository that already borrows\nobjects from another repository&mdash;the new repository\nwill borrow objects from the same repository, and this\noption can be used to stop the borrowing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">Operate quietly. Progress is\nnot reported to the standard error stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v,\n--verbose</p>\n\n<p style=\"margin-left:17%;\">Run verbosely. Does not affect\nthe reporting of progress status to the standard error\nstream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--progress</p>\n\n<p style=\"margin-left:17%;\">Progress status is reported on\nthe standard error stream by default when it is attached to\na terminal, unless <b>--quiet</b> is specified. This flag\nforces progress status even if the standard error stream is\nnot directed to a terminal.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--server-option=&lt;option&gt;</p>\n\n<p style=\"margin-left:17%;\">Transmit the given string to\nthe server when communicating using protocol version 2. The\ngiven string must not contain a NUL or LF character. The\nserver&rsquo;s handling of server options, including unknown\nones, is server-specific. When multiple\n<b>--server-option=&lt;option&gt;</b> are given, they are\nall sent to the other side in the order listed on the\ncommand line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--no-checkout</p>\n\n<p style=\"margin-left:17%;\">No checkout of HEAD is\nperformed after the clone is complete.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]reject-shallow</p>\n\n<p style=\"margin-left:17%;\">Fail if the source repository\nis a shallow repository. The <i>clone.rejectShallow</i>\nconfiguration variable can be used to specify the\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--bare</p>\n\n<p style=\"margin-left:17%;\">Make a <i>bare</i> Git\nrepository. That is, instead of creating\n<b>&lt;directory&gt;</b> and placing the administrative\nfiles in <b>&lt;directory&gt;/.git</b>, make the\n<b>&lt;directory&gt;</b> itself the <b>$GIT_DIR</b>. This\nobviously implies the <b>--no-checkout</b> because there is\nnowhere to check out the working tree. Also the branch heads\nat the remote are copied directly to corresponding local\nbranch heads, without mapping them to\n<b>refs/remotes/origin/</b>. When this option is used,\nneither remote-tracking branches nor the related\nconfiguration variables are created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sparse</p>\n\n<p style=\"margin-left:17%;\">Initialize the sparse-checkout\nfile so the working directory starts with only the files in\nthe root of the repository. The sparse-checkout file can be\nmodified to grow the working directory as needed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--filter=&lt;filter-spec&gt;</p>\n\n<p style=\"margin-left:17%;\">Use the partial clone feature\nand request that the server sends a subset of reachable\nobjects according to a given object filter. When using\n<b>--filter</b>, the supplied <b>&lt;filter-spec&gt;</b> is\nused for the partial clone filter. For example,\n<b>--filter=blob:none</b> will filter out all blobs (file\ncontents) until needed by Git. Also,\n<b>--filter=blob:limit=&lt;size&gt;</b> will filter out all\nblobs of size at least <b>&lt;size&gt;</b>. For more details\non filter specifications, see the <b>--filter</b> option in\n<a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--mirror</p>\n\n<p style=\"margin-left:17%;\">Set up a mirror of the source\nrepository. This implies <b>--bare</b>. Compared to\n<b>--bare</b>, <b>--mirror</b> not only maps local branches\nof the source to local branches of the target, it maps all\nrefs (including remote-tracking branches, notes etc.) and\nsets up a refspec configuration such that all these refs are\noverwritten by a <b>git remote update</b> in the target\nrepository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-o\n&lt;name&gt;, --origin &lt;name&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of using the remote\nname <b>origin</b> to keep track of the upstream repository,\nuse <b>&lt;name&gt;</b>. Overrides\n<b>clone.defaultRemoteName</b> from the config.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-b\n&lt;name&gt;, --branch &lt;name&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of pointing the newly\ncreated HEAD to the branch pointed to by the cloned\nrepository&rsquo;s HEAD, point to <b>&lt;name&gt;</b> branch\ninstead. In a non-bare repository, this is the branch that\nwill be checked out. <b>--branch</b> can also take tags and\ndetaches the HEAD at that commit in the resulting\nrepository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-u\n&lt;upload-pack&gt;, --upload-pack &lt;upload-pack&gt;</p>\n\n<p style=\"margin-left:17%;\">When given, and the repository\nto clone from is accessed via ssh, this specifies a\nnon-default path for the command run on the other end.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--template=&lt;template_directory&gt;</p>\n\n<p style=\"margin-left:17%;\">Specify the directory from\nwhich templates will be used; (See the &quot;TEMPLATE\nDIRECTORY&quot; section of <a href=\"https://man.page/1/git-init\">git-init(1)</a>.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-c\n&lt;key&gt;=&lt;value&gt;, --config\n&lt;key&gt;=&lt;value&gt;</p>\n\n<p style=\"margin-left:17%;\">Set a configuration variable in\nthe newly-created repository; this takes effect immediately\nafter the repository is initialized, but before the remote\nhistory is fetched or any files checked out. The key is in\nthe same format as expected by <a href=\"https://man.page/1/git-config\">git-config(1)</a> (e.g.,\n<b>core.eol=true</b>). If multiple values are given for the\nsame key, each value will be written to the config file.\nThis makes it safe, for example, to add additional fetch\nrefspecs to the origin remote.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Due to\nlimitations of the current implementation, some\nconfiguration variables do not take effect until after the\ninitial fetch and checkout. Configuration variables known to\nnot take effect are: <b>remote.&lt;name&gt;.mirror</b> and\n<b>remote.&lt;name&gt;.tagOpt</b>. Use the corresponding\n<b>--mirror</b> and <b>--no-tags</b> options instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--depth\n&lt;depth&gt;</p>\n\n<p style=\"margin-left:17%;\">Create a <i>shallow</i> clone\nwith a history truncated to the specified number of commits.\nImplies <b>--single-branch</b> unless\n<b>--no-single-branch</b> is given to fetch the histories\nnear the tips of all branches. If you want to clone\nsubmodules shallowly, also pass\n<b>--shallow-submodules</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--shallow-since=&lt;date&gt;</p>\n\n<p style=\"margin-left:17%;\">Create a shallow clone with a\nhistory after the specified time.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--shallow-exclude=&lt;revision&gt;</p>\n\n<p style=\"margin-left:17%;\">Create a shallow clone with a\nhistory, excluding commits reachable from a specified remote\nbranch or tag. This option can be specified multiple\ntimes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]single-branch</p>\n\n<p style=\"margin-left:17%;\">Clone only the history leading\nto the tip of a single branch, either specified by the\n<b>--branch</b> option or the primary branch remote&rsquo;s\n<b>HEAD</b> points at. Further fetches into the resulting\nrepository will only update the remote-tracking branch for\nthe branch this option was used for the initial cloning. If\nthe HEAD at the remote did not point at any branch when\n<b>--single-branch</b> clone was made, no remote-tracking\nbranch is created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-tags</p>\n\n<p style=\"margin-left:17%;\">Don&rsquo;t clone any tags, and\nset <b>remote.&lt;remote&gt;.tagOpt=--no-tags</b> in the\nconfig, ensuring that future <b>git pull</b> and <b>git\nfetch</b> operations won&rsquo;t follow any tags. Subsequent\nexplicit tag fetches will still work, (see\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Can be used in\nconjunction with <b>--single-branch</b> to clone and\nmaintain a branch with no references other than a single\ncloned branch. This is useful e.g. to maintain minimal\nclones of the default branch of some repository for search\nindexing.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--recurse-submodules[=&lt;pathspec&gt;]</p>\n\n<p style=\"margin-left:17%;\">After the clone is created,\ninitialize and clone submodules within based on the provided\npathspec. If no pathspec is provided, all submodules are\ninitialized and cloned. This option can be given multiple\ntimes for pathspecs consisting of multiple entries. The\nresulting clone has <b>submodule.active</b> set to the\nprovided pathspec, or &quot;.&quot; (meaning all submodules)\nif no pathspec is provided.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Submodules are\ninitialized and cloned using their default settings. This is\nequivalent to running <b>git submodule update --init\n--recursive &lt;pathspec&gt;</b> immediately after the clone\nis finished. This option is ignored if the cloned repository\ndoes not have a worktree/checkout (i.e. if any of\n<b>--no-checkout</b>/<b>-n</b>, <b>--bare</b>, or\n<b>--mirror</b> is given)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]shallow-submodules</p>\n\n<p style=\"margin-left:17%;\">All submodules which are cloned\nwill be shallow with a depth of 1.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]remote-submodules</p>\n\n<p style=\"margin-left:17%;\">All submodules which are cloned\nwill use the status of the submodule&rsquo;s remote-tracking\nbranch to update the submodule, rather than the\nsuperproject&rsquo;s recorded SHA-1. Equivalent to passing\n<b>--remote</b> to <b>git submodule update</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--separate-git-dir=&lt;git\ndir&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of placing the cloned\nrepository where it is supposed to be, place the cloned\nrepository at the specified directory, then make a\nfilesystem-agnostic Git symbolic link to there. The result\nis Git repository can be separated from working tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-j &lt;n&gt;,\n--jobs &lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">The number of submodules\nfetched at the same time. Defaults to the\n<b>submodule.fetchJobs</b> option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;repository&gt;</p>\n\n<p style=\"margin-left:17%;\">The (possibly remote)\nrepository to clone from. See the GIT URLS section below for\nmore information on specifying repositories.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;directory&gt;</p>\n\n<p style=\"margin-left:17%;\">The name of a new directory to\nclone into. The &quot;humanish&quot; part of the source\nrepository is used if no directory is explicitly given\n(<b>repo</b> for <b>/path/to/repo.git</b> and <b>foo</b> for\n<b>host.xz:foo/.git</b>). Cloning into an existing directory\nis only allowed if the directory is empty.</p>\n\n<h2>GIT URLS\n<a name=\"GIT URLS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general,\nURLs contain information about the transport protocol, the\naddress of the remote server, and the path to the\nrepository. Depending on the transport protocol, some of\nthis information may be absent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git supports\nssh, git, http, and https protocols (in addition, ftp, and\nftps can be used for fetching, but this is inefficient and\ndeprecated; do not use it).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The native\ntransport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nsyntaxes may be used with them:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nssh://[user@]host.xz[:port]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ngit://host.xz[:port]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nhttp[s]://host.xz[:port]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nftp[s]://host.xz[:port]/path/to/repo.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An alternative\nscp-like syntax may also be used with the ssh protocol:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n[user@]host.xz:path/to/repo.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This syntax is\nonly recognized if there are no slashes before the first\ncolon. This helps differentiate a local path that contains a\ncolon. For example the local path <b>foo:bar</b> could be\nspecified as an absolute path or <b>./foo:bar</b> to avoid\nbeing misinterpreted as an ssh url.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The ssh and git\nprotocols additionally support ~username expansion:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ngit://host.xz[:port]/~[user]/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n[user@]host.xz:/~[user]/path/to/repo.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For local\nrepositories, also supported by Git natively, the following\nsyntaxes may be used:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n/path/to/repo.git/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nfile:///path/to/repo.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These two\nsyntaxes are mostly equivalent, except the former implies\n--local option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nclone</i>, <i>git fetch</i> and <i>git pull</i>, but not\n<i>git push</i>, will also accept a suitable bundle file.\nSee <a href=\"https://man.page/1/git-bundle\">git-bundle(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When Git\ndoesn&rsquo;t know how to handle a certain transport\nprotocol, it attempts to use the\n<i>remote-&lt;transport&gt;</i> remote helper, if one\nexists. To explicitly request a remote helper, the following\nsyntax may be used:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&lt;transport&gt;::&lt;address&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n&lt;address&gt; may be a path, a server and path, or an\narbitrary URL-like string recognized by the specific remote\nhelper being invoked. See <a href=\"https://man.page/7/gitremote-helpers\">gitremote-helpers(7)</a> for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there are a\nlarge number of similarly-named remote repositories and you\nwant to use a different format for them (such that the URLs\nyou use will be rewritten into URLs that work), you can\ncreate a configuration section of the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[url\n&quot;&lt;actual url base&gt;&quot;] <br>\ninsteadOf = &lt;other url base&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nwith this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[url\n&quot;git://git.host.xz/&quot;] <br>\ninsteadOf = host.xz:/path/to/ <br>\ninsteadOf = work:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">a URL like\n&quot;work:repo.git&quot; or like\n&quot;host.xz:/path/to/repo.git&quot; will be rewritten in\nany context that takes a URL to be\n&quot;git://git.host.xz/repo.git&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nrewrite URLs for push only, you can create a configuration\nsection of the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[url\n&quot;&lt;actual url base&gt;&quot;] <br>\npushInsteadOf = &lt;other url base&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nwith this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[url\n&quot;ssh://example.org/&quot;] <br>\npushInsteadOf = git://example.org/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">a URL like\n&quot;git://example.org/path/to/repo.git&quot; will be\nrewritten to &quot;ssh://example.org/path/to/repo.git&quot;\nfor pushes, but pulls will still use the original URL.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Clone\nfrom upstream:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git clone\ngit://git.kernel.org/pub/scm/.../linux.git my-linux <br>\n$ cd my-linux <br>\n$ make</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Make a\nlocal clone that borrows from the current directory, without\nchecking things out:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git clone -l\n-s -n . ../copy <br>\n$ cd ../copy <br>\n$ git show-branch</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Clone\nfrom upstream while borrowing from an existing local\ndirectory:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git clone\n--reference /git/linux.git \\ <br>\ngit://git.kernel.org/pub/scm/.../linux.git \\ <br>\nmy-linux <br>\n$ cd my-linux</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Create a\nbare repository to publish your changes to the public:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git clone\n--bare -l /home/proj/.git /pub/scm/proj.git</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#GIT URLS\">GIT URLS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#GIT\">GIT</a>"]}