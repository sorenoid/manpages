{"name":"git-fast-import","description":"git-fast-import\n- Backend for fast Git data importers","body":"\n\n<h1 align=\"center\">GIT-FAST-IMPORT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-fast-import\n- Backend for fast Git data importers</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">frontend |\n<i>git fast-import</i> [&lt;options&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program is\nusually not what the end user wants to run directly. Most\nend users want to use one of the existing frontend programs,\nwhich parses a specific type of foreign source and feeds the\ncontents stored there to <i>git fast-import</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fast-import\nreads a mixed command/data stream from standard input and\nwrites one or more packfiles directly into the current\nrepository. When EOF is received on standard input, fast\nimport writes out updated branch and tag refs, fully\nupdating the current repository with the newly imported\ndata.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fast-import\nbackend itself can import into an empty repository (one that\nhas already been initialized by <i>git init</i>) or\nincrementally update an existing populated repository.\nWhether or not incremental imports are supported from a\nparticular foreign source depends on the frontend program in\nuse.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--force</p>\n\n<p style=\"margin-left:17%;\">Force updating modified\nexisting branches, even if doing so would cause commits to\nbe lost (as the new commit does not contain the old\ncommit).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--quiet</p>\n\n<p style=\"margin-left:17%;\">Disable the output shown by\n--stats, making fast-import usually be silent when it is\nsuccessful. However, if the import stream has directives\nintended to show user output (e.g. <b>progress</b>\ndirectives), the corresponding messages will still be\nshown.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stats</p>\n\n<p style=\"margin-left:17%;\">Display some basic statistics\nabout the objects fast-import has created, the packfiles\nthey were stored into, and the memory used by fast-import\nduring this run. Showing this output is currently the\ndefault, but can be disabled with --quiet.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--allow-unsafe-features</p>\n\n<p style=\"margin-left:17%;\">Many command-line options can\nbe provided as part of the fast-import stream itself by\nusing the <b>feature</b> or <b>option</b> commands. However,\nsome of these options are unsafe (e.g., allowing fast-import\nto access the filesystem outside of the repository). These\noptions are disabled by default, but can be allowed by\nproviding this option on the command line. This currently\nimpacts only the <b>export-marks</b>, <b>import-marks</b>,\nand <b>import-marks-if-exists</b> feature commands.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Only enable\nthis option if you trust the program generating the <br>\nfast-import stream! This option is enabled automatically for\n<br>\nremote-helpers that use the &rsquo;import&rsquo; capability,\nas they are <br>\nalready trusted to run their own code.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options for\nFrontends</b> <br>\n--cat-blob-fd=&lt;fd&gt;</p>\n\n<p style=\"margin-left:17%;\">Write responses to\n<b>get-mark</b>, <b>cat-blob</b>, and <b>ls</b> queries to\nthe file descriptor &lt;fd&gt; instead of <b>stdout</b>.\nAllows <b>progress</b> output intended for the end-user to\nbe separated from other output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--date-format=&lt;fmt&gt;</p>\n\n<p style=\"margin-left:17%;\">Specify the type of dates the\nfrontend will supply to fast-import within <b>author</b>,\n<b>committer</b> and <b>tagger</b> commands. See &ldquo;Date\nFormats&rdquo; below for details about which formats are\nsupported, and their syntax.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--done</p>\n\n<p style=\"margin-left:17%;\">Terminate with error if there\nis no <b>done</b> command at the end of the stream. This\noption might be useful for detecting errors that cause the\nfrontend to terminate before it has started to write a\nstream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Locations of\nMarks Files</b> <br>\n--export-marks=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Dumps the internal marks table\nto &lt;file&gt; when complete. Marks are written one per\nline as <b>:markid SHA-1</b>. Frontends can use this file to\nvalidate imports after they have been completed, or to save\nthe marks table across incremental runs. As &lt;file&gt; is\nonly opened and truncated at checkpoint (or completion) the\nsame path can also be safely given to --import-marks.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--import-marks=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Before processing any input,\nload the marks specified in &lt;file&gt;. The input file\nmust exist, must be readable, and must use the same format\nas produced by --export-marks. Multiple options may be\nsupplied to import more than one set of marks. If a mark is\ndefined to different values, the last file wins.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--import-marks-if-exists=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Like --import-marks but instead\nof erroring out, silently skips the file if it does not\nexist.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]relative-marks</p>\n\n<p style=\"margin-left:17%;\">After specifying\n--relative-marks the paths specified with --import-marks=\nand --export-marks= are relative to an internal directory in\nthe current repository. In git-fast-import this means that\nthe paths are relative to the .git/info/fast-import\ndirectory. However, other importers may use a different\nlocation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Relative and\nnon-relative marks may be combined by interweaving\n--(no-)-relative-marks with the --(import|export)-marks=\noptions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Submodule\nRewriting</b> <br>\n--rewrite-submodules-from=&lt;name&gt;:&lt;file&gt;,\n--rewrite-submodules-to=&lt;name&gt;:&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Rewrite the object IDs for the\nsubmodule specified by &lt;name&gt; from the values used in\nthe from &lt;file&gt; to those used in the to &lt;file&gt;.\nThe from marks should have been created by <b>git\nfast-export</b>, and the to marks should have been created\nby <b>git fast-import</b> when importing that same\nsubmodule.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;name&gt;\nmay be any arbitrary string not containing a colon\ncharacter, but the same value must be used with both options\nwhen specifying corresponding marks. Multiple submodules may\nbe specified with different values for &lt;name&gt;. It is\nan error not to use these options in corresponding\npairs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These options\nare primarily useful when converting a repository from one\nhash algorithm to another; without them, fast-import will\nfail if it encounters a submodule because it has no way of\nwriting the object ID into the new hash algorithm.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Performance\nand Compression Tuning</b> <br>\n--active-branches=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Maximum number of branches to\nmaintain active at once. See &ldquo;Memory\nUtilization&rdquo; below for details. Default is 5.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--big-file-threshold=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Maximum size of a blob that\nfast-import will attempt to create a delta for, expressed in\nbytes. The default is 512m (512 MiB). Some importers may\nwish to lower this on systems with constrained memory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--depth=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Maximum delta depth, for blob\nand tree deltification. Default is 50.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--export-pack-edges=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">After creating a packfile,\nprint a line of data to &lt;file&gt; listing the filename of\nthe packfile and the last commit on each branch that was\nwritten to that packfile. This information may be useful\nafter importing projects whose total object set exceeds the\n4 GiB packfile limit, as these commits can be used as edge\npoints during calls to <i>git pack-objects</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--max-pack-size=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Maximum size of each output\npackfile. The default is unlimited.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fastimport.unpackLimit</p>\n\n<p style=\"margin-left:17%;\">See <a href=\"https://man.page/1/git-config\">git-config(1)</a></p>\n\n<h2>PERFORMANCE\n<a name=\"PERFORMANCE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The design of\nfast-import allows it to import large projects in a minimum\namount of memory usage and processing time. Assuming the\nfrontend is able to keep up with fast-import and feed it a\nconstant stream of data, import times for projects holding\n10+ years of history and containing 100,000+ individual\ncommits are generally completed in just 1-2 hours on quite\nmodest (~$2,000 USD) hardware.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most\nbottlenecks appear to be in foreign source data access (the\nsource just cannot extract revisions fast enough) or disk IO\n(fast-import writes as fast as the disk will take the data).\nImports will run faster if the source data is stored on a\ndifferent drive than the destination Git repository (due to\nless IO contention).</p>\n\n<h2>DEVELOPMENT COST\n<a name=\"DEVELOPMENT COST\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A typical\nfrontend for fast-import tends to weigh in at approximately\n200 lines of Perl/Python/Ruby code. Most developers have\nbeen able to create working importers in just a couple of\nhours, even though it is their first exposure to\nfast-import, and sometimes even to Git. This is an ideal\nsituation, given that most conversion tools are throw-away\n(use once, and never look back).</p>\n\n<h2>PARALLEL OPERATION\n<a name=\"PARALLEL OPERATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Like <i>git\npush</i> or <i>git fetch</i>, imports handled by fast-import\nare safe to run alongside parallel <b>git repack -a -d</b>\nor <b>git gc</b> invocations, or any other Git operation\n(including <i>git prune</i>, as loose objects are never used\nby fast-import).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fast-import\ndoes not lock the branch or tag refs it is actively\nimporting. After the import, during its ref update phase,\nfast-import tests each existing branch ref to verify the\nupdate will be a fast-forward update (the commit stored in\nthe ref is contained in the new history of the commit to be\nwritten). If the update is not a fast-forward update,\nfast-import will skip updating that ref and instead prints a\nwarning message. fast-import will always attempt to update\nall branch refs, and does not stop on the first failure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Branch updates\ncan be forced with --force, but it&rsquo;s recommended that\nthis only be used on an otherwise quiet repository. Using\n--force is not necessary for an initial import into an empty\nrepository.</p>\n\n<h2>TECHNICAL DISCUSSION\n<a name=\"TECHNICAL DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fast-import\ntracks a set of branches in memory. Any branch can be\ncreated or modified at any point during the import process\nby sending a <b>commit</b> command on the input stream. This\ndesign allows a frontend program to process an unlimited\nnumber of branches simultaneously, generating commits in the\norder they are available from the source data. It also\nsimplifies the frontend programs considerably.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fast-import\ndoes not use or alter the current working directory, or any\nfile within it. (It does however update the current Git\nrepository, as referenced by <b>GIT_DIR</b>.) Therefore an\nimport frontend may use the working directory for its own\npurposes, such as extracting file revisions from the foreign\nsource. This ignorance of the working directory also allows\nfast-import to run very quickly, as it does not need to\nperform any costly file update operations when switching\nbetween branches.</p>\n\n<h2>INPUT FORMAT\n<a name=\"INPUT FORMAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">With the\nexception of raw file data (which Git does not interpret)\nthe fast-import input format is text (ASCII) based. This\ntext based format simplifies development and debugging of\nfrontend programs, especially when a higher level language\nsuch as Perl, Python or Ruby is being used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fast-import is\nvery strict about its input. Where we say SP below we mean\n<b>exactly</b> one space. Likewise LF means one (and only\none) linefeed and HT one (and only one) horizontal tab.\nSupplying additional whitespace characters will cause\nunexpected results, such as branch names or file names with\nleading or trailing spaces in their name, or early\ntermination of fast-import when it encounters unexpected\ninput.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Stream\nComments</b> <br>\nTo aid in debugging frontends fast-import ignores any line\nthat begins with <b>#</b> (ASCII pound/hash) up to and\nincluding the line ending <b>LF</b>. A comment line may\ncontain any sequence of bytes that does not contain an LF\nand therefore may be used to include any detailed debugging\ninformation that might be specific to the frontend and\nuseful when inspecting a fast-import data stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Date\nFormats</b> <br>\nThe following date formats are supported. A frontend should\nselect the format it will use for this import by passing the\nformat name in the --date-format=&lt;fmt&gt; command-line\noption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>raw</b></p>\n\n<p style=\"margin-left:17%;\">This is the Git native format\nand is <b>&lt;time&gt; SP &lt;offutc&gt;</b>. It is also\nfast-import&rsquo;s default format, if --date-format was not\nspecified.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The time of the\nevent is specified by <b>&lt;time&gt;</b> as the number of\nseconds since the UNIX epoch (midnight, Jan 1, 1970, UTC)\nand is written as an ASCII decimal integer.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The local\noffset is specified by <b>&lt;offutc&gt;</b> as a positive\nor negative offset from UTC. For example EST (which is 5\nhours behind UTC) would be expressed in <b>&lt;tz&gt;</b> by\n&ldquo;-0500&rdquo; while UTC is &ldquo;+0000&rdquo;. The\nlocal offset does not affect <b>&lt;time&gt;</b>; it is used\nonly as an advisement to help formatting routines display\nthe timestamp.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the local\noffset is not available in the source material, use\n&ldquo;+0000&rdquo;, or the most common local offset. For\nexample many organizations have a CVS repository which has\nonly ever been accessed by users who are located in the same\nlocation and time zone. In this case a reasonable offset\nfrom UTC could be assumed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unlike the\n<b>rfc2822</b> format, this format is very strict. Any\nvariation in formatting will cause fast-import to reject the\nvalue, and some sanity checks on the numeric values may also\nbe performed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>raw-permissive</b></p>\n\n<p style=\"margin-left:17%;\">This is the same as <b>raw</b>\nexcept that no sanity checks on the numeric epoch and local\noffset are performed. This can be useful when trying to\nfilter or import an existing history with e.g. bogus\ntimezone values.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>rfc2822</b></p>\n\n<p style=\"margin-left:17%;\">This is the standard email\nformat as described by RFC 2822.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">An example\nvalue is &ldquo;Tue Feb 6 11:22:18 2007 -0500&rdquo;. The\nGit parser is accurate, but a little on the lenient side. It\nis the same parser used by <i>git am</i> when applying\npatches received from email.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Some malformed\nstrings may be accepted as valid dates. In some of these\ncases Git will still be able to obtain the correct date from\nthe malformed string. There are also some types of malformed\nstrings which Git will parse wrong, and yet consider valid.\nSeriously malformed strings will be rejected.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unlike the\n<b>raw</b> format above, the time zone/UTC offset\ninformation contained in an RFC 2822 date string is used to\nadjust the date value to UTC prior to storage. Therefore it\nis important that this information be as accurate as\npossible.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the source\nmaterial uses RFC 2822 style dates, the frontend should let\nfast-import handle the parsing and conversion (rather than\nattempting to do it itself) as the Git parser has been well\ntested in the wild.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Frontends\nshould prefer the <b>raw</b> format if the source material\nalready uses UNIX-epoch format, can be coaxed to give dates\nin that format, or its format is easily convertible to it,\nas there is no ambiguity in parsing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>now</b></p>\n\n<p style=\"margin-left:17%;\">Always use the current time and\ntime zone. The literal <b>now</b> must always be supplied\nfor <b>&lt;when&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is a toy\nformat. The current time and time zone of this system is\nalways copied into the identity string at the time it is\nbeing created by fast-import. There is no way to specify a\ndifferent time or time zone.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This particular\nformat is supplied as it&rsquo;s short to implement and may\nbe useful to a process that wants to create a new commit\nright now, without needing to use a working directory or\n<i>git update-index</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If separate\n<b>author</b> and <b>committer</b> commands are used in a\n<b>commit</b> the timestamps may not match, as the system\nclock will be polled twice (once for each command). The only\nway to ensure that both author and committer identity\ninformation has the same timestamp is to omit <b>author</b>\n(thus copying from <b>committer</b>) or to use a date format\nother than <b>now</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commands</b>\n<br>\nfast-import accepts several commands to update the current\nrepository and control the current import process. More\ndetailed discussion (with examples) of each command follows\nlater.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>commit</b></p>\n\n<p style=\"margin-left:17%;\">Creates a new branch or updates\nan existing branch by creating a new commit and updating the\nbranch to point at the newly created commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tag</b></p>\n\n<p style=\"margin-left:17%;\">Creates an annotated tag object\nfrom an existing commit or branch. Lightweight tags are not\nsupported by this command, as they are not recommended for\nrecording meaningful points in time.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>reset</b></p>\n\n<p style=\"margin-left:17%;\">Reset an existing branch (or a\nnew branch) to a specific revision. This command must be\nused to change a branch to a specific revision without\nmaking a commit on it.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>blob</b></p>\n\n<p style=\"margin-left:17%;\">Convert raw file data into a\nblob, for future use in a <b>commit</b> command. This\ncommand is optional and is not needed to perform an\nimport.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>alias</b></p>\n\n<p style=\"margin-left:17%;\">Record that a mark refers to a\ngiven object without first creating any new object. Using\n--import-marks and referring to missing marks will cause\nfast-import to fail, so aliases can provide a way to set\notherwise pruned commits to a valid value (e.g. the nearest\nnon-pruned ancestor).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>checkpoint</b></p>\n\n<p style=\"margin-left:17%;\">Forces fast-import to close the\ncurrent packfile, generate its unique SHA-1 checksum and\nindex, and start a new packfile. This command is optional\nand is not needed to perform an import.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>progress</b></p>\n\n<p style=\"margin-left:17%;\">Causes fast-import to echo the\nentire line to its own standard output. This command is\noptional and is not needed to perform an import.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>done</b></p>\n\n<p style=\"margin-left:17%;\">Marks the end of the stream.\nThis command is optional unless the <b>done</b> feature was\nrequested using the <b>--done</b> command-line option or\n<b>feature done</b> command.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>get-mark</b></p>\n\n<p style=\"margin-left:17%;\">Causes fast-import to print the\nSHA-1 corresponding to a mark to the file descriptor set\nwith <b>--cat-blob-fd</b>, or <b>stdout</b> if\nunspecified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cat-blob</b></p>\n\n<p style=\"margin-left:17%;\">Causes fast-import to print a\nblob in <i>cat-file --batch</i> format to the file\ndescriptor set with <b>--cat-blob-fd</b> or <b>stdout</b> if\nunspecified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ls</b></p>\n\n<p style=\"margin-left:17%;\">Causes fast-import to print a\nline describing a directory entry in <i>ls-tree</i> format\nto the file descriptor set with <b>--cat-blob-fd</b> or\n<b>stdout</b> if unspecified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>feature</b></p>\n\n<p style=\"margin-left:17%;\">Enable the specified feature.\nThis requires that fast-import supports the specified\nfeature, and aborts if it does not.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>option</b></p>\n\n<p style=\"margin-left:17%;\">Specify any of the options\nlisted under OPTIONS that do not change stream semantic to\nsuit the frontend&rsquo;s needs. This command is optional\nand is not needed to perform an import.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>commit</b>\n<br>\nCreate or update a branch with a new commit, recording one\nlogical change to the project.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'commit' SP\n&lt;ref&gt; LF <br>\nmark? <br>\noriginal-oid? <br>\n('author' (SP &lt;name&gt;)? SP LT &lt;email&gt; GT SP\n&lt;when&gt; LF)? <br>\n'committer' (SP &lt;name&gt;)? SP LT &lt;email&gt; GT SP\n&lt;when&gt; LF <br>\n('encoding' SP &lt;encoding&gt;)? <br>\ndata <br>\n('from' SP &lt;commit-ish&gt; LF)? <br>\n('merge' SP &lt;commit-ish&gt; LF)* <br>\n(filemodify | filedelete | filecopy | filerename |\nfiledeleteall | notemodify)* <br>\nLF?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n<b>&lt;ref&gt;</b> is the name of the branch to make the\ncommit on. Typically branch names are prefixed with\n<b>refs/heads/</b> in Git, so importing the CVS branch\nsymbol <b>RELENG-1_0</b> would use\n<b>refs/heads/RELENG-1_0</b> for the value of\n<b>&lt;ref&gt;</b>. The value of <b>&lt;ref&gt;</b> must be\na valid refname in Git. As <b>LF</b> is not valid in a Git\nrefname, no quoting or escaping syntax is supported\nhere.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A <b>mark</b>\ncommand may optionally appear, requesting fast-import to\nsave a reference to the newly created commit for future use\nby the frontend (see below for format). It is very common\nfor frontends to mark every commit they create, thereby\nallowing future branch creation from any imported\ncommit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>data</b>\ncommand following <b>committer</b> must supply the commit\nmessage (see below for <b>data</b> command syntax). To\nimport an empty commit message use a 0 length data. Commit\nmessages are free-form and are not interpreted by Git.\nCurrently they must be encoded in UTF-8, as fast-import does\nnot permit other encodings to be specified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Zero or more\n<b>filemodify</b>, <b>filedelete</b>, <b>filecopy</b>,\n<b>filerename</b>, <b>filedeleteall</b> and\n<b>notemodify</b> commands may be included to update the\ncontents of the branch prior to creating the commit. These\ncommands may be supplied in any order. However it is\nrecommended that a <b>filedeleteall</b> command precede all\n<b>filemodify</b>, <b>filecopy</b>, <b>filerename</b> and\n<b>notemodify</b> commands in the same commit, as\n<b>filedeleteall</b> wipes the branch clean (see below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>LF</b>\nafter the command is optional (it used to be required). Note\nthat for reasons of backward compatibility, if the commit\nends with a <b>data</b> command (i.e. it has no <b>from</b>,\n<b>merge</b>, <b>filemodify</b>, <b>filedelete</b>,\n<b>filecopy</b>, <b>filerename</b>, <b>filedeleteall</b> or\n<b>notemodify</b> commands) then two <b>LF</b> commands may\nappear at the end of the command instead of just one.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>author</big></b></p>\n\n<p style=\"margin-left:17%;\">An <b>author</b> command may\noptionally appear, if the author information might differ\nfrom the committer information. If <b>author</b> is omitted\nthen fast-import will automatically use the\ncommitter&rsquo;s information for the author portion of the\ncommit. See below for a description of the fields in\n<b>author</b>, as they are identical to\n<b>committer</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>committer</big></b></p>\n\n<p style=\"margin-left:17%;\">The <b>committer</b> command\nindicates who made this commit, and when they made it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Here\n<b>&lt;name&gt;</b> is the person&rsquo;s display name (for\nexample &ldquo;Com M Itter&rdquo;) and <b>&lt;email&gt;</b>\nis the person&rsquo;s email address\n(&ldquo;cm@example.com&rdquo;). <b>LT</b> and <b>GT</b> are\nthe literal less-than (\\x3c) and greater-than (\\x3e)\nsymbols. These are required to delimit the email address\nfrom the other fields in the line. Note that\n<b>&lt;name&gt;</b> and <b>&lt;email&gt;</b> are free-form\nand may contain any sequence of bytes, except <b>LT</b>,\n<b>GT</b> and <b>LF</b>. <b>&lt;name&gt;</b> is typically\nUTF-8 encoded.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The time of the\nchange is specified by <b>&lt;when&gt;</b> using the date\nformat that was selected by the --date-format=&lt;fmt&gt;\ncommand-line option. See &ldquo;Date Formats&rdquo; above\nfor the set of supported formats, and their syntax.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>encoding</big></b></p>\n\n<p style=\"margin-left:17%;\">The optional <b>encoding</b>\ncommand indicates the encoding of the commit message. Most\ncommits are UTF-8 and the encoding is omitted, but this\nallows importing commit messages into git without first\nreencoding them.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>from</big></b></p>\n\n<p style=\"margin-left:17%;\">The <b>from</b> command is used\nto specify the commit to initialize this branch from. This\nrevision will be the first ancestor of the new commit. The\nstate of the tree built at this commit will begin with the\nstate at the <b>from</b> commit, and be altered by the\ncontent modifications in this commit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Omitting the\n<b>from</b> command in the first commit of a new branch will\ncause fast-import to create that commit with no ancestor.\nThis tends to be desired only for the initial commit of a\nproject. If the frontend creates all files from scratch when\nmaking a new branch, a <b>merge</b> command may be used\ninstead of <b>from</b> to start the commit with an empty\ntree. Omitting the <b>from</b> command on existing branches\nis usually desired, as the current commit on that branch is\nautomatically assumed to be the first ancestor of the new\ncommit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As <b>LF</b> is\nnot valid in a Git refname or SHA-1 expression, no quoting\nor escaping syntax is supported within\n<b>&lt;commit-ish&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Here\n<b>&lt;commit-ish&gt;</b> is any of the following:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; The name\nof an existing branch already in fast-import&rsquo;s\ninternal branch table. If fast-import doesn&rsquo;t know the\nname, it&rsquo;s treated as a SHA-1 expression.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; A mark\nreference, <b>:&lt;idnum&gt;</b>, where <b>&lt;idnum&gt;</b>\nis the mark number.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">The reason\nfast-import uses <b>:</b> to denote a mark reference is this\ncharacter is not legal in a Git branch name. The leading\n<b>:</b> makes it easy to distinguish between the mark 42\n(<b>:42</b>) and the branch 42 (<b>42</b> or\n<b>refs/heads/42</b>), or an abbreviated SHA-1 which\nhappened to consist only of base-10 digits.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Marks must be\ndeclared (via <b>mark</b>) before they can be used.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; A\ncomplete 40 byte or abbreviated commit SHA-1 in hex.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Any\nvalid Git SHA-1 expression that resolves to a commit. See\n&ldquo;SPECIFYING REVISIONS&rdquo; in <a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a>\nfor details.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; The\nspecial null SHA-1 (40 zeros) specifies that the branch is\nto be removed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The special\ncase of restarting an incremental import from the current\nbranch value should be written as:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">from\nrefs/heads/branch^0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The <b>^0</b>\nsuffix is necessary as fast-import does not permit a branch\nto start from itself, and the branch is created in memory\nbefore the <b>from</b> command is even read from the input.\nAdding <b>^0</b> will force fast-import to resolve the\ncommit through Git&rsquo;s revision parsing library, rather\nthan its internal branch table, thereby loading in the\nexisting value of the branch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>merge</big></b></p>\n\n<p style=\"margin-left:17%;\">Includes one additional\nancestor commit. The additional ancestry link does not\nchange the way the tree state is built at this commit. If\nthe <b>from</b> command is omitted when creating a new\nbranch, the first <b>merge</b> commit will be the first\nancestor of the current commit, and the branch will start\nout with no files. An unlimited number of <b>merge</b>\ncommands per commit are permitted by fast-import, thereby\nestablishing an n-way merge.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Here\n<b>&lt;commit-ish&gt;</b> is any of the commit specification\nexpressions also accepted by <b>from</b> (see above).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>filemodify</big></b></p>\n\n<p style=\"margin-left:17%;\">Included in a <b>commit</b>\ncommand to add a new file or change the content of an\nexisting file. This command has two different means of\nspecifying the content of the file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">External data\nformat</p>\n\n<p style=\"margin-left:23%;\">The data content for the file\nwas already supplied by a prior <b>blob</b> command. The\nfrontend just needs to connect it.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">'M' SP\n&lt;mode&gt; SP &lt;dataref&gt; SP &lt;path&gt; LF</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Here usually\n<b>&lt;dataref&gt;</b> must be either a mark reference\n(<b>:&lt;idnum&gt;</b>) set by a prior <b>blob</b> command,\nor a full 40-byte SHA-1 of an existing Git blob object. If\n<b>&lt;mode&gt;</b> is <b>040000&rsquo;</b> then\n<b>&lt;dataref&gt;</b> must be the full 40-byte SHA-1 of an\nexisting Git tree object or a mark reference set with\n<b>--import-marks</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Inline data\nformat</p>\n\n<p style=\"margin-left:23%;\">The data content for the file\nhas not been supplied yet. The frontend wants to supply it\nas part of this modify command.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">'M' SP\n&lt;mode&gt; SP 'inline' SP &lt;path&gt; LF <br>\ndata</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">See below for a\ndetailed description of the <b>data</b> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In both formats\n<b>&lt;mode&gt;</b> is the type of file entry, specified in\noctal. Git only supports the following modes:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>100644</b> or <b>644</b>: A normal (not-executable) file.\nThe majority of files in most projects use this mode. If in\ndoubt, this is what you want.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>100755</b> or <b>755</b>: A normal, but executable,\nfile.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>120000</b>: A symlink, the content of the file will be\nthe link target.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>160000</b>: A gitlink, SHA-1 of the object refers to a\ncommit in another repository. Git links can only be\nspecified by SHA or through a commit mark. They are used to\nimplement submodules.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>040000</b>: A subdirectory. Subdirectories can only be\nspecified by SHA or through a tree mark set with\n<b>--import-marks</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In both formats\n<b>&lt;path&gt;</b> is the complete path of the file to be\nadded (if not already existing) or modified (if already\nexisting).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A\n<b>&lt;path&gt;</b> string must use UNIX-style directory\nseparators (forward slash <b>/</b>), may contain any byte\nother than <b>LF</b>, and must not start with double quote\n(<b>&quot;</b>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A path can use\nC-style string quoting; this is accepted in all cases and\nmandatory if the filename starts with double quote or\ncontains <b>LF</b>. In C-style quoting, the complete name\nshould be surrounded with double quotes, and any <b>LF</b>,\nbackslash, or double quote characters must be escaped by\npreceding them with a backslash (e.g., <b>&quot;path/with\\n,\n\\\\ and \\&quot; in it&quot;</b>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The value of\n<b>&lt;path&gt;</b> must be in canonical form. That is it\nmust not:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; contain\nan empty directory component (e.g. <b>foo//bar</b> is\ninvalid),</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; end with\na directory separator (e.g. <b>foo/</b> is invalid),</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; start\nwith a directory separator (e.g. <b>/foo</b> is\ninvalid),</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; contain\nthe special component <b>.</b> or <b>..</b> (e.g.\n<b>foo/./bar</b> and <b>foo/../bar</b> are invalid).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The root of the\ntree can be represented by an empty string as\n<b>&lt;path&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It is\nrecommended that <b>&lt;path&gt;</b> always be encoded using\nUTF-8.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>filedelete</big></b></p>\n\n<p style=\"margin-left:17%;\">Included in a <b>commit</b>\ncommand to remove a file or recursively delete an entire\ndirectory from the branch. If the file or directory removal\nmakes its parent directory empty, the parent directory will\nbe automatically removed too. This cascades up the tree\nuntil the first non-empty directory or the root is\nreached.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">'D' SP\n&lt;path&gt; LF</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">here\n<b>&lt;path&gt;</b> is the complete path of the file or\nsubdirectory to be removed from the branch. See\n<b>filemodify</b> above for a detailed description of\n<b>&lt;path&gt;</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>filecopy</big></b></p>\n\n<p style=\"margin-left:17%;\">Recursively copies an existing\nfile or subdirectory to a different location within the\nbranch. The existing file or directory must exist. If the\ndestination exists it will be completely replaced by the\ncontent copied from the source.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">'C' SP\n&lt;path&gt; SP &lt;path&gt; LF</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">here the first\n<b>&lt;path&gt;</b> is the source location and the second\n<b>&lt;path&gt;</b> is the destination. See\n<b>filemodify</b> above for a detailed description of what\n<b>&lt;path&gt;</b> may look like. To use a source path that\ncontains SP the path must be quoted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A\n<b>filecopy</b> command takes effect immediately. Once the\nsource location has been copied to the destination any\nfuture commands applied to the source location will not\nimpact the destination of the copy.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>filerename</big></b></p>\n\n<p style=\"margin-left:17%;\">Renames an existing file or\nsubdirectory to a different location within the branch. The\nexisting file or directory must exist. If the destination\nexists it will be replaced by the source directory.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">'R' SP\n&lt;path&gt; SP &lt;path&gt; LF</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">here the first\n<b>&lt;path&gt;</b> is the source location and the second\n<b>&lt;path&gt;</b> is the destination. See\n<b>filemodify</b> above for a detailed description of what\n<b>&lt;path&gt;</b> may look like. To use a source path that\ncontains SP the path must be quoted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A\n<b>filerename</b> command takes effect immediately. Once the\nsource location has been renamed to the destination any\nfuture commands applied to the source location will create\nnew files there and not impact the destination of the\nrename.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that a\n<b>filerename</b> is the same as a <b>filecopy</b> followed\nby a <b>filedelete</b> of the source location. There is a\nslight performance advantage to using <b>filerename</b>, but\nthe advantage is so small that it is never worth trying to\nconvert a delete/add pair in source material into a rename\nfor fast-import. This <b>filerename</b> command is provided\njust to simplify frontends that already have rename\ninformation and don&rsquo;t want bother with decomposing it\ninto a <b>filecopy</b> followed by a <b>filedelete</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>filedeleteall</big></b></p>\n\n<p style=\"margin-left:17%;\">Included in a <b>commit</b>\ncommand to remove all files (and also all directories) from\nthe branch. This command resets the internal branch\nstructure to have no files in it, allowing the frontend to\nsubsequently add all interesting files from scratch.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">'deleteall'\nLF</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This command is\nextremely useful if the frontend does not know (or does not\ncare to know) what files are currently on the branch, and\ntherefore cannot generate the proper <b>filedelete</b>\ncommands to update the content.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Issuing a\n<b>filedeleteall</b> followed by the needed\n<b>filemodify</b> commands to set the correct content will\nproduce the same results as sending only the needed\n<b>filemodify</b> and <b>filedelete</b> commands. The\n<b>filedeleteall</b> approach may however require\nfast-import to use slightly more memory per active branch\n(less than 1 MiB for even most large projects); so frontends\nthat can easily obtain only the affected paths for a commit\nare encouraged to do so.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>notemodify</big></b></p>\n\n<p style=\"margin-left:17%;\">Included in a <b>commit\n&lt;notes_ref&gt;</b> command to add a new note annotating a\n<b>&lt;commit-ish&gt;</b> or change this annotation\ncontents. Internally it is similar to filemodify 100644 on\n<b>&lt;commit-ish&gt;</b> path (maybe split into\nsubdirectories). It&rsquo;s not advised to use any other\ncommands to write to the <b>&lt;notes_ref&gt;</b> tree\nexcept <b>filedeleteall</b> to delete all existing notes in\nthis tree. This command has two different means of\nspecifying the content of the note.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">External data\nformat</p>\n\n<p style=\"margin-left:23%;\">The data content for the note\nwas already supplied by a prior <b>blob</b> command. The\nfrontend just needs to connect it to the commit that is to\nbe annotated.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">'N' SP\n&lt;dataref&gt; SP &lt;commit-ish&gt; LF</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Here\n<b>&lt;dataref&gt;</b> can be either a mark reference\n(<b>:&lt;idnum&gt;</b>) set by a prior <b>blob</b> command,\nor a full 40-byte SHA-1 of an existing Git blob object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Inline data\nformat</p>\n\n<p style=\"margin-left:23%;\">The data content for the note\nhas not been supplied yet. The frontend wants to supply it\nas part of this modify command.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">'N' SP 'inline'\nSP &lt;commit-ish&gt; LF <br>\ndata</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">See below for a\ndetailed description of the <b>data</b> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In both formats\n<b>&lt;commit-ish&gt;</b> is any of the commit specification\nexpressions also accepted by <b>from</b> (see above).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mark</b>\n<br>\nArranges for fast-import to save a reference to the current\nobject, allowing the frontend to recall this object at a\nfuture point in time, without knowing its SHA-1. Here the\ncurrent object is the object creation command the\n<b>mark</b> command appears within. This can be\n<b>commit</b>, <b>tag</b>, and <b>blob</b>, but\n<b>commit</b> is the most common usage.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'mark' SP ':'\n&lt;idnum&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n<b>&lt;idnum&gt;</b> is the number assigned by the frontend\nto this mark. The value of <b>&lt;idnum&gt;</b> is expressed\nas an ASCII decimal integer. The value 0 is reserved and\ncannot be used as a mark. Only values greater than or equal\nto 1 may be used as marks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">New marks are\ncreated automatically. Existing marks can be moved to\nanother object simply by reusing the same\n<b>&lt;idnum&gt;</b> in another <b>mark</b> command.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>original-oid</b>\n<br>\nProvides the name of the object in the original source\ncontrol system. fast-import will simply ignore this\ndirective, but filter processes which operate on and modify\nthe stream before feeding to fast-import may have uses for\nthis information</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'original-oid'\nSP &lt;object-identifier&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n<b>&lt;object-identifier&gt;</b> is any string not\ncontaining LF.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tag</b> <br>\nCreates an annotated tag referring to a specific commit. To\ncreate lightweight (non-annotated) tags see the <b>reset</b>\ncommand below.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'tag' SP\n&lt;name&gt; LF <br>\nmark? <br>\n'from' SP &lt;commit-ish&gt; LF <br>\noriginal-oid? <br>\n'tagger' (SP &lt;name&gt;)? SP LT &lt;email&gt; GT SP\n&lt;when&gt; LF <br>\ndata</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n<b>&lt;name&gt;</b> is the name of the tag to create.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Tag names are\nautomatically prefixed with <b>refs/tags/</b> when stored in\nGit, so importing the CVS branch symbol\n<b>RELENG-1_0-FINAL</b> would use just\n<b>RELENG-1_0-FINAL</b> for <b>&lt;name&gt;</b>, and\nfast-import will write the corresponding ref as\n<b>refs/tags/RELENG-1_0-FINAL</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value of\n<b>&lt;name&gt;</b> must be a valid refname in Git and\ntherefore may contain forward slashes. As <b>LF</b> is not\nvalid in a Git refname, no quoting or escaping syntax is\nsupported here.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>from</b>\ncommand is the same as in the <b>commit</b> command; see\nabove for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>tagger</b> command uses the same format as\n<b>committer</b> within <b>commit</b>; again see above for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>data</b>\ncommand following <b>tagger</b> must supply the annotated\ntag message (see below for <b>data</b> command syntax). To\nimport an empty tag message use a 0 length data. Tag\nmessages are free-form and are not interpreted by Git.\nCurrently they must be encoded in UTF-8, as fast-import does\nnot permit other encodings to be specified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Signing\nannotated tags during import from within fast-import is not\nsupported. Trying to include your own PGP/GPG signature is\nnot recommended, as the frontend does not (easily) have\naccess to the complete set of bytes which normally goes into\nsuch a signature. If signing is required, create lightweight\ntags from within fast-import with <b>reset</b>, then create\nthe annotated versions of those tags offline with the\nstandard <i>git tag</i> process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>reset</b>\n<br>\nCreates (or recreates) the named branch, optionally starting\nfrom a specific revision. The reset command allows a\nfrontend to issue a new <b>from</b> command for an existing\nbranch, or to create a new branch from an existing commit\nwithout creating a new commit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'reset' SP\n&lt;ref&gt; LF <br>\n('from' SP &lt;commit-ish&gt; LF)? <br>\nLF?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a detailed\ndescription of <b>&lt;ref&gt;</b> and\n<b>&lt;commit-ish&gt;</b> see above under <b>commit</b> and\n<b>from</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>LF</b>\nafter the command is optional (it used to be required).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>reset</b> command can also be used to create lightweight\n(non-annotated) tags. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">reset\nrefs/tags/938 <br>\nfrom :938</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">would create\nthe lightweight tag <b>refs/tags/938</b> referring to\nwhatever commit mark <b>:938</b> references.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>blob</b>\n<br>\nRequests writing one file revision to the packfile. The\nrevision is not connected to any commit; this connection\nmust be formed in a subsequent <b>commit</b> command by\nreferencing the blob through an assigned mark.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'blob' LF <br>\nmark? <br>\noriginal-oid? <br>\ndata</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The mark\ncommand is optional here as some frontends have chosen to\ngenerate the Git SHA-1 for the blob on their own, and feed\nthat directly to <b>commit</b>. This is typically more work\nthan it&rsquo;s worth however, as marks are inexpensive to\nstore and easy to use.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>data</b>\n<br>\nSupplies raw data (for use as blob/file content, commit\nmessages, or annotated tag messages) to fast-import. Data\ncan be supplied using an exact byte count or delimited with\na terminating line. Real frontends intended for\nproduction-quality conversions should always use the exact\nbyte count format, as it is more robust and performs better.\nThe delimited format is intended primarily for testing\nfast-import.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Comment lines\nappearing within the <b>&lt;raw&gt;</b> part of <b>data</b>\ncommands are always taken to be part of the body of the data\nand are therefore never ignored by fast-import. This makes\nit safe to import any file/message content whose lines might\nstart with <b>#</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Exact byte\ncount format</p>\n\n<p style=\"margin-left:17%;\">The frontend must specify the\nnumber of bytes of data.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">'data' SP\n&lt;count&gt; LF <br>\n&lt;raw&gt; LF?</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">where\n<b>&lt;count&gt;</b> is the exact number of bytes appearing\nwithin <b>&lt;raw&gt;</b>. The value of <b>&lt;count&gt;</b>\nis expressed as an ASCII decimal integer. The <b>LF</b> on\neither side of <b>&lt;raw&gt;</b> is not included in\n<b>&lt;count&gt;</b> and will not be included in the\nimported data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The <b>LF</b>\nafter <b>&lt;raw&gt;</b> is optional (it used to be\nrequired) but recommended. Always including it makes\ndebugging a fast-import stream easier as the next command\nalways starts in column 0 of the next line, even if\n<b>&lt;raw&gt;</b> did not end with an <b>LF</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Delimited\nformat</p>\n\n<p style=\"margin-left:17%;\">A delimiter string is used to\nmark the end of the data. fast-import will compute the\nlength by searching for the delimiter. This format is\nprimarily useful for testing and is not recommended for real\ndata.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">'data' SP\n'&lt;&lt;' &lt;delim&gt; LF <br>\n&lt;raw&gt; LF <br>\n&lt;delim&gt; LF <br>\nLF?</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">where\n<b>&lt;delim&gt;</b> is the chosen delimiter string. The\nstring <b>&lt;delim&gt;</b> must not appear on a line by\nitself within <b>&lt;raw&gt;</b>, as otherwise fast-import\nwill think the data ends earlier than it really does. The\n<b>LF</b> immediately trailing <b>&lt;raw&gt;</b> is part of\n<b>&lt;raw&gt;</b>. This is one of the limitations of the\ndelimited format, it is impossible to supply a data chunk\nwhich does not have an LF as its last byte.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The <b>LF</b>\nafter <b>&lt;delim&gt; LF</b> is optional (it used to be\nrequired).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>alias</b>\n<br>\nRecord that a mark refers to a given object without first\ncreating any new object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'alias' LF <br>\nmark <br>\n'to' SP &lt;commit-ish&gt; LF <br>\nLF?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a detailed\ndescription of <b>&lt;commit-ish&gt;</b> see above under\n<b>from</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>checkpoint</b>\n<br>\nForces fast-import to close the current packfile, start a\nnew one, and to save out all current branch refs, tags and\nmarks.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'checkpoint' LF\n<br>\nLF?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nfast-import automatically switches packfiles when the\ncurrent packfile reaches --max-pack-size, or 4 GiB,\nwhichever limit is smaller. During an automatic packfile\nswitch fast-import does not update the branch refs, tags or\nmarks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As a\n<b>checkpoint</b> can require a significant amount of CPU\ntime and disk IO (to compute the overall pack SHA-1\nchecksum, generate the corresponding index file, and update\nthe refs) it can easily take several minutes for a single\n<b>checkpoint</b> command to complete.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Frontends may\nchoose to issue checkpoints during extremely large and long\nrunning imports, or when they need to allow another Git\nprocess access to a branch. However given that a 30 GiB\nSubversion repository can be loaded into Git through\nfast-import in about 3 hours, explicit checkpointing may not\nbe necessary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>LF</b>\nafter the command is optional (it used to be required).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>progress</b>\n<br>\nCauses fast-import to print the entire <b>progress</b> line\nunmodified to its standard output channel (file descriptor\n1) when the command is processed from the input stream. The\ncommand otherwise has no impact on the current import, or on\nany of fast-import&rsquo;s internal state.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'progress' SP\n&lt;any&gt; LF <br>\nLF?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>&lt;any&gt;</b> part of the command may contain any\nsequence of bytes that does not contain <b>LF</b>. The\n<b>LF</b> after the command is optional. Callers may wish to\nprocess the output through a tool such as sed to remove the\nleading part of the line, for example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">frontend | git\nfast-import | sed 's/^progress //'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Placing a\n<b>progress</b> command immediately after a\n<b>checkpoint</b> will inform the reader when the\n<b>checkpoint</b> has been completed and it can safely\naccess the refs that fast-import updated.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>get-mark</b>\n<br>\nCauses fast-import to print the SHA-1 corresponding to a\nmark to stdout or to the file descriptor previously arranged\nwith the <b>--cat-blob-fd</b> argument. The command\notherwise has no impact on the current import; its purpose\nis to retrieve SHA-1s that later commits might want to refer\nto in their commit messages.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'get-mark' SP\n':' &lt;idnum&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n&ldquo;Responses To Commands&rdquo; below for details about\nhow to read this output safely.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cat-blob</b>\n<br>\nCauses fast-import to print a blob to a file descriptor\npreviously arranged with the <b>--cat-blob-fd</b> argument.\nThe command otherwise has no impact on the current import;\nits main purpose is to retrieve blobs that may be in\nfast-import&rsquo;s memory but not accessible from the\ntarget repository.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'cat-blob' SP\n&lt;dataref&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>&lt;dataref&gt;</b> can be either a mark reference\n(<b>:&lt;idnum&gt;</b>) set previously or a full 40-byte\nSHA-1 of a Git blob, preexisting or ready to be written.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Output uses the\nsame format as <b>git cat-file --batch</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;sha1&gt; SP\n'blob' SP &lt;size&gt; LF <br>\n&lt;contents&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command\ncan be used where a <b>filemodify</b> directive can appear,\nallowing it to be used in the middle of a commit. For a\n<b>filemodify</b> using an inline directive, it can also\nappear right before the <b>data</b> directive.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n&ldquo;Responses To Commands&rdquo; below for details about\nhow to read this output safely.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ls</b> <br>\nPrints information about the object at a path to a file\ndescriptor previously arranged with the <b>--cat-blob-fd</b>\nargument. This allows printing a blob from the active commit\n(with <b>cat-blob</b>) or copying a blob or tree from a\nprevious commit for use in the current one (with\n<b>filemodify</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>ls</b>\ncommand can also be used where a <b>filemodify</b> directive\ncan appear, allowing it to be used in the middle of a\ncommit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Reading from\nthe active commit</p>\n\n<p style=\"margin-left:17%;\">This form can only be used in\nthe middle of a <b>commit</b>. The path names a directory\nentry within fast-import&rsquo;s active commit. The path\nmust be quoted in this case.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">'ls' SP\n&lt;path&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Reading from a\nnamed tree</p>\n\n<p style=\"margin-left:17%;\">The <b>&lt;dataref&gt;</b> can\nbe a mark reference (<b>:&lt;idnum&gt;</b>) or the full\n40-byte SHA-1 of a Git tag, commit, or tree object,\npreexisting or waiting to be written. The path is relative\nto the top level of the tree named by\n<b>&lt;dataref&gt;</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">'ls' SP\n&lt;dataref&gt; SP &lt;path&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<b>filemodify</b> above for a detailed description of\n<b>&lt;path&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Output uses the\nsame format as <b>git ls-tree &lt;tree&gt; --\n&lt;path&gt;</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;mode&gt; SP\n('blob' | 'tree' | 'commit') SP &lt;dataref&gt; HT\n&lt;path&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&lt;dataref&gt; represents the blob, tree, or commit object\nat &lt;path&gt; and can be used in later <i>get-mark</i>,\n<i>cat-blob</i>, <i>filemodify</i>, or <i>ls</i>\ncommands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there is no\nfile or subtree at that path, <i>git fast-import</i> will\ninstead report</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">missing SP\n&lt;path&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n&ldquo;Responses To Commands&rdquo; below for details about\nhow to read this output safely.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>feature</b>\n<br>\nRequire that fast-import supports the specified feature, or\nabort if it does not.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'feature' SP\n&lt;feature&gt; ('=' &lt;argument&gt;)? LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&lt;feature&gt; part of the command may be any one of the\nfollowing:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">date-format,\nexport-marks, relative-marks, no-relative-marks, force</p>\n\n<p style=\"margin-left:17%;\">Act as though the corresponding\ncommand-line option with a leading <b>--</b> was passed on\nthe command line (see OPTIONS, above).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">import-marks,\nimport-marks-if-exists</p>\n\n<p style=\"margin-left:17%;\">Like --import-marks except in\ntwo respects: first, only one &quot;feature\nimport-marks&quot; or &quot;feature\nimport-marks-if-exists&quot; command is allowed per stream;\nsecond, an --import-marks= or --import-marks-if-exists\ncommand-line option overrides any of these\n&quot;feature&quot; commands in the stream; third,\n&quot;feature import-marks-if-exists&quot; like a\ncorresponding command-line option silently skips a\nnonexistent file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">get-mark,\ncat-blob, ls</p>\n\n<p style=\"margin-left:17%;\">Require that the backend\nsupport the <i>get-mark</i>, <i>cat-blob</i>, or <i>ls</i>\ncommand respectively. Versions of fast-import not supporting\nthe specified command will exit with a message indicating\nso. This lets the import error out early with a clear\nmessage, rather than wasting time on the early part of an\nimport before the unsupported command is detected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">notes</p>\n\n<p style=\"margin-left:17%;\">Require that the backend\nsupport the <i>notemodify</i> (N) subcommand to the\n<i>commit</i> command. Versions of fast-import not\nsupporting notes will exit with a message indicating so.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">done</p>\n\n<p style=\"margin-left:17%;\">Error out if the stream ends\nwithout a <i>done</i> command. Without this feature, errors\ncausing the frontend to end abruptly at a convenient point\nin the stream can go undetected. This may occur, for\nexample, if an import front end dies in mid-operation\nwithout emitting SIGTERM or SIGKILL at its subordinate git\nfast-import instance.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>option</b>\n<br>\nProcesses the specified option so that git fast-import\nbehaves in a way that suits the frontend&rsquo;s needs. Note\nthat options specified by the frontend are overridden by any\noptions the user may specify to git fast-import itself.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">'option' SP\n&lt;option&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>&lt;option&gt;</b> part of the command may contain any of\nthe options listed in the OPTIONS section that do not change\nimport semantics, without the leading <b>--</b> and is\ntreated in the same way.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Option commands\nmust be the first commands on the input (not counting\nfeature commands), to give an option command after any\nnon-option command is an error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncommand-line options change import semantics and may\ntherefore not be passed as option:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ndate-format</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nimport-marks</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nexport-marks</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ncat-blob-fd</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nforce</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>done</b>\n<br>\nIf the <b>done</b> feature is not in use, treated as if EOF\nwas read. This can be used to tell fast-import to finish\nearly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<b>--done</b> command-line option or <b>feature done</b>\ncommand is in use, the <b>done</b> command is mandatory and\nmarks the end of the stream.</p>\n\n<h2>RESPONSES TO COMMANDS\n<a name=\"RESPONSES TO COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">New objects\nwritten by fast-import are not available immediately. Most\nfast-import commands have no visible effect until the next\ncheckpoint (or completion). The frontend can send commands\nto fill fast-import&rsquo;s input pipe without worrying\nabout how quickly they will take effect, which improves\nperformance by simplifying scheduling.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For some\nfrontends, though, it is useful to be able to read back data\nfrom the current repository as it is being updated (for\nexample when the source material describes objects in terms\nof patches to be applied to previously imported objects).\nThis can be accomplished by connecting the frontend and\nfast-import via bidirectional pipes:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">mkfifo\nfast-import-output <br>\nfrontend &lt;fast-import-output | <br>\ngit fast-import &gt;fast-import-output</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A frontend set\nup this way can use <b>progress</b>, <b>get-mark</b>,\n<b>ls</b>, and <b>cat-blob</b> commands to read information\nfrom the import in progress.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To avoid\ndeadlock, such frontends must completely consume any pending\noutput from <b>progress</b>, <b>ls</b>, <b>get-mark</b>, and\n<b>cat-blob</b> before performing writes to fast-import that\nmight block.</p>\n\n<h2>CRASH REPORTS\n<a name=\"CRASH REPORTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If fast-import\nis supplied invalid input it will terminate with a non-zero\nexit status and create a crash report in the top level of\nthe Git repository it was importing into. Crash reports\ncontain a snapshot of the internal fast-import state as well\nas the most recent commands that lead up to the crash.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All recent\ncommands (including stream comments, file changes and\nprogress commands) are shown in the command history within\nthe crash report, but raw file data and commit messages are\nexcluded from the crash report. This exclusion saves space\nwithin the report file and reduces the amount of buffering\nthat fast-import must perform during execution.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After writing a\ncrash report fast-import will close the current packfile and\nexport the marks table. This allows the frontend developer\nto inspect the repository state and resume the import from\nthe point where it crashed. The modified branches and tags\nare not updated during a crash, as the import did not\ncomplete successfully. Branch and tag information can be\nfound in the crash report and must be applied manually if\nthe update is needed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An example\ncrash:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ cat &gt;in\n&lt;&lt;END_OF_INPUT <br>\n# my very first test commit <br>\ncommit refs/heads/master <br>\ncommitter Shawn O. Pearce &lt;spearce&gt; 19283 -0400 <br>\n# who is that guy anyway? <br>\ndata &lt;&lt;EOF <br>\nthis is my commit <br>\nEOF <br>\nM 644 inline .gitignore <br>\ndata &lt;&lt;EOF <br>\n.gitignore <br>\nEOF <br>\nM 777 inline bob <br>\nEND_OF_INPUT</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git\nfast-import &lt;in <br>\nfatal: Corrupt mode: M 777 inline bob <br>\nfast-import: dumping crash report to\n.git/fast_import_crash_8434</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ cat\n.git/fast_import_crash_8434 <br>\nfast-import crash report: <br>\nfast-import process: 8434 <br>\nparent process : 1391 <br>\nat Sat Sep 1 00:58:12 2007</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">fatal: Corrupt\nmode: M 777 inline bob</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Most Recent\nCommands Before Crash <br>\n--------------------------------- <br>\n# my very first test commit <br>\ncommit refs/heads/master <br>\ncommitter Shawn O. Pearce &lt;spearce&gt; 19283 -0400 <br>\n# who is that guy anyway? <br>\ndata &lt;&lt;EOF <br>\nM 644 inline .gitignore <br>\ndata &lt;&lt;EOF <br>\n* M 777 inline bob</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Active Branch\nLRU <br>\n----------------- <br>\nactive_branches = 1 cur, 5 max</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">pos clock name\n<br>\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <br>\n1) 0 refs/heads/master</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Inactive\nBranches <br>\n----------------- <br>\nrefs/heads/master: <br>\nstatus : active loaded dirty <br>\ntip commit : 0000000000000000000000000000000000000000 <br>\nold tree : 0000000000000000000000000000000000000000 <br>\ncur tree : 0000000000000000000000000000000000000000 <br>\ncommit clock: 0 <br>\nlast pack :</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">-------------------\n<br>\nEND OF CRASH REPORT</p>\n\n<h2>TIPS AND TRICKS\n<a name=\"TIPS AND TRICKS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ntips and tricks have been collected from various users of\nfast-import, and are offered here as suggestions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Use One Mark\nPer Commit</b> <br>\nWhen doing a repository conversion, use a unique mark per\ncommit (<b>mark :&lt;n&gt;</b>) and supply the\n--export-marks option on the command line. fast-import will\ndump a file which lists every mark and the Git object SHA-1\nthat corresponds to it. If the frontend can tie the marks\nback to the source repository, it is easy to verify the\naccuracy and completeness of the import by comparing each\nGit commit to the corresponding source revision.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Coming from a\nsystem such as Perforce or Subversion this should be quite\nsimple, as the fast-import mark can also be the Perforce\nchangeset number or the Subversion revision number.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Freely Skip\nAround Branches</b> <br>\nDon&rsquo;t bother trying to optimize the frontend to stick\nto one branch at a time during an import. Although doing so\nmight be slightly faster for fast-import, it tends to\nincrease the complexity of the frontend code\nconsiderably.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The branch LRU\nbuiltin to fast-import tends to behave very well, and the\ncost of activating an inactive branch is so low that\nbouncing around between branches has virtually no impact on\nimport performance.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Handling\nRenames</b> <br>\nWhen importing a renamed file or directory, simply delete\nthe old name(s) and modify the new name(s) during the\ncorresponding commit. Git performs rename detection\nafter-the-fact, rather than explicitly during a commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Use Tag\nFixup Branches</b> <br>\nSome other SCM systems let the user create a tag from\nmultiple files which are not from the same commit/changeset.\nOr to create tags which are a subset of the files available\nin the repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Importing these\ntags as-is in Git is impossible without making at least one\ncommit which &ldquo;fixes up&rdquo; the files to match the\ncontent of the tag. Use fast-import&rsquo;s <b>reset</b>\ncommand to reset a dummy branch outside of your normal\nbranch space to the base commit for the tag, then commit one\nor more file fixup commits, and finally tag the dummy\nbranch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example\nsince all normal branches are stored under\n<b>refs/heads/</b> name the tag fixup branch\n<b>TAG_FIXUP</b>. This way it is impossible for the fixup\nbranch used by the importer to have namespace conflicts with\nreal branches imported from the source (the name\n<b>TAG_FIXUP</b> is not <b>refs/heads/TAG_FIXUP</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When committing\nfixups, consider using <b>merge</b> to connect the commit(s)\nwhich are supplying file revisions to the fixup branch.\nDoing so will allow tools such as <i>git blame</i> to track\nthrough the real commit history and properly annotate the\nsource files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After\nfast-import terminates the frontend will need to do <b>rm\n.git/TAG_FIXUP</b> to remove the dummy branch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Import Now,\nRepack Later</b> <br>\nAs soon as fast-import completes the Git repository is\ncompletely valid and ready for use. Typically this takes\nonly a very short time, even for considerably large projects\n(100,000+ commits).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However\nrepacking the repository is necessary to improve data\nlocality and access performance. It can also take hours on\nextremely large projects (especially if -f and a large\n--window parameter is used). Since repacking is safe to run\nalongside readers and writers, run the repack in the\nbackground and let it finish when it finishes. There is no\nreason to wait to explore your new Git project!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you choose\nto wait for the repack, don&rsquo;t try to run benchmarks or\nperformance tests until repacking is completed. fast-import\noutputs suboptimal packfiles that are simply never seen in\nreal use situations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Repacking\nHistorical Data</b> <br>\nIf you are repacking very old imported data (e.g. older than\nthe last year), consider expending some extra CPU time and\nsupplying --window=50 (or higher) when you run <i>git\nrepack</i>. This will take longer, but will also produce a\nsmaller packfile. You only need to expend the effort once,\nand everyone using your project will benefit from the\nsmaller repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Include Some\nProgress Messages</b> <br>\nEvery once in a while have your frontend emit a\n<b>progress</b> message to fast-import. The contents of the\nmessages are entirely free-form, so one suggestion would be\nto output the current month and year each time the current\ncommit date moves into the next month. Your users will feel\nbetter knowing how much of the data stream has been\nprocessed.</p>\n\n<h2>PACKFILE OPTIMIZATION\n<a name=\"PACKFILE OPTIMIZATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When packing a\nblob fast-import always attempts to deltify against the last\nblob written. Unless specifically arranged for by the\nfrontend, this will probably not be a prior version of the\nsame file, so the generated delta will not be the smallest\npossible. The resulting packfile will be compressed, but\nwill not be optimal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Frontends which\nhave efficient access to all revisions of a single file (for\nexample reading an RCS/CVS ,v file) can choose to supply all\nrevisions of that file as a sequence of consecutive\n<b>blob</b> commands. This allows fast-import to deltify the\ndifferent file revisions against each other, saving space in\nthe final packfile. Marks can be used to later identify\nindividual file revisions during a sequence of <b>commit</b>\ncommands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The packfile(s)\ncreated by fast-import do not encourage good disk access\npatterns. This is caused by fast-import writing the data in\nthe order it is received on standard input, while Git\ntypically organizes data within packfiles to make the most\nrecent (current tip) data appear before historical data. Git\nalso clusters commits together, speeding up revision\ntraversal through better cache locality.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For this reason\nit is strongly recommended that users repack the repository\nwith <b>git repack -a -d</b> after fast-import completes,\nallowing Git to reorganize the packfiles for faster data\naccess. If blob deltas are suboptimal (see above) then also\nadding the <b>-f</b> option to force recomputation of all\ndeltas can significantly reduce the final packfile size\n(30-50% smaller can be quite typical).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Instead of\nrunning <b>git repack</b> you can also run <b>git gc\n--aggressive</b>, which will also optimize other things\nafter an import (e.g. pack loose refs). As noted in the\n&quot;AGGRESSIVE&quot; section in <a href=\"https://man.page/1/git-gc\">git-gc(1)</a> the\n<b>--aggressive</b> option will find new deltas with the\n<b>-f</b> option to <a href=\"https://man.page/1/git-repack\">git-repack(1)</a>. For the reasons\nelaborated on above using <b>--aggressive</b> after a\nfast-import is one of the few cases where it&rsquo;s known\nto be worthwhile.</p>\n\n<h2>MEMORY UTILIZATION\n<a name=\"MEMORY UTILIZATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are a\nnumber of factors which affect how much memory fast-import\nrequires to perform an import. Like critical sections of\ncore Git, fast-import uses its own memory allocators to\namortize any overheads associated with malloc. In practice\nfast-import tends to amortize any malloc overheads to 0, due\nto its use of large block allocations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>per\nobject</b> <br>\nfast-import maintains an in-memory structure for every\nobject written in this execution. On a 32 bit system the\nstructure is 32 bytes, on a 64 bit system the structure is\n40 bytes (due to the larger pointer sizes). Objects in the\ntable are not deallocated until fast-import terminates.\nImporting 2 million objects on a 32 bit system will require\napproximately 64 MiB of memory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The object\ntable is actually a hashtable keyed on the object name (the\nunique SHA-1). This storage configuration allows fast-import\nto reuse an existing or already written object and avoid\nwriting duplicates to the output packfile. Duplicate blobs\nare surprisingly common in an import, typically due to\nbranch merges in the source.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>per mark</b>\n<br>\nMarks are stored in a sparse array, using 1 pointer (4 bytes\nor 8 bytes, depending on pointer size) per mark. Although\nthe array is sparse, frontends are still strongly encouraged\nto use marks between 1 and n, where n is the total number of\nmarks required for this import.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>per\nbranch</b> <br>\nBranches are classified as active and inactive. The memory\nusage of the two classes is significantly different.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Inactive\nbranches are stored in a structure which uses 96 or 120\nbytes (32 bit or 64 bit systems, respectively), plus the\nlength of the branch name (typically under 200 bytes), per\nbranch. fast-import will easily handle as many as 10,000\ninactive branches in under 2 MiB of memory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Active branches\nhave the same overhead as inactive branches, but also\ncontain copies of every tree that has been recently modified\non that branch. If subtree <b>include</b> has not been\nmodified since the branch became active, its contents will\nnot be loaded into memory, but if subtree <b>src</b> has\nbeen modified by a commit since the branch became active,\nthen its contents will be loaded in memory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As active\nbranches store metadata about the files contained on that\nbranch, their in-memory storage size can grow to a\nconsiderable size (see below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fast-import\nautomatically moves active branches to inactive status based\non a simple least-recently-used algorithm. The LRU chain is\nupdated on each <b>commit</b> command. The maximum number of\nactive branches can be increased or decreased on the command\nline with --active-branches=.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>per active\ntree</b> <br>\nTrees (aka directories) use just 12 bytes of memory on top\nof the memory required for their entries (see &ldquo;per\nactive file&rdquo; below). The cost of a tree is virtually\n0, as its overhead amortizes out over the individual file\nentries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>per active\nfile entry</b> <br>\nFiles (and pointers to subtrees) within active trees require\n52 or 64 bytes (32/64 bit platforms) per entry. To conserve\nspace, file and tree names are pooled in a common string\ntable, allowing the filename &ldquo;Makefile&rdquo; to use\njust 16 bytes (after including the string header overhead)\nno matter how many times it occurs within the project.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The active\nbranch LRU, when coupled with the filename string pool and\nlazy loading of subtrees, allows fast-import to efficiently\nimport projects with 2,000+ branches and 45,114+ files in a\nvery limited memory footprint (less than 2.7 MiB per active\nbranch).</p>\n\n<h2>SIGNALS\n<a name=\"SIGNALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sending\n<b>SIGUSR1</b> to the <i>git fast-import</i> process ends\nthe current packfile early, simulating a <b>checkpoint</b>\ncommand. The impatient operator can use this facility to\npeek at the objects and refs from an import in progress, at\nthe cost of some added running time and worse\ncompression.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-fast-export\">git-fast-export(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#PERFORMANCE\">PERFORMANCE</a>","<a href=\"#DEVELOPMENT COST\">DEVELOPMENT COST</a>","<a href=\"#PARALLEL OPERATION\">PARALLEL OPERATION</a>","<a href=\"#TECHNICAL DISCUSSION\">TECHNICAL DISCUSSION</a>","<a href=\"#INPUT FORMAT\">INPUT FORMAT</a>","<a href=\"#RESPONSES TO COMMANDS\">RESPONSES TO COMMANDS</a>","<a href=\"#CRASH REPORTS\">CRASH REPORTS</a>","<a href=\"#TIPS AND TRICKS\">TIPS AND TRICKS</a>","<a href=\"#PACKFILE OPTIMIZATION\">PACKFILE OPTIMIZATION</a>","<a href=\"#MEMORY UTILIZATION\">MEMORY UTILIZATION</a>","<a href=\"#SIGNALS\">SIGNALS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}