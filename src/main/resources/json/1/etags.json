{"name":"etags","description":"etags, ctags - generate tag file for Emacs, vi","body":"\n\n<h1 align=\"center\">etags</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">etags, ctags -\ngenerate tag file for Emacs, vi</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>etags</b>\n[-aCDGIQRVh] [-i <i>file</i>] [-l <i>language</i>] <br>\n[-o <i>tagfile</i>] [-r <i>regexp</i>]\n[--parse-stdin=<i>file</i>] <br>\n[--append] [--no-defines] [--globals] [--no-globals]\n[--no-line-directive] [--include=<i>file</i>]\n[--ignore-indentation] [--language=<i>language</i>]\n[--members] [--no-members] [--output=<i>tagfile</i>]\n[--class-qualify] [--regex=<i>regexp</i>] [--no-regex]\n[--help] [--version] <i>file</i> ...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ctags</b>\n[-aCdgIQRVh] [-BtTuvwx] [-l <i>language</i>] <br>\n[-o <i>tagfile</i>] [-r <i>regexp</i>]\n[--parse-stdin=<i>file</i>] <br>\n[--append] [--backward-search] [--cxref] [--no-defines]\n[--globals] [--no-globals] [--no-line-directive]\n[--ignore-indentation] [--language=<i>language</i>]\n[--members] [--no-members] [--class-qualify]\n[--output=<i>tagfile</i>] [--regex=<i>regexp</i>] [--update]\n[--help] [--version] <i>file</i> ...</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>etags</b> program is used to create a tag table file, in\na format understood by <b>emacs</b>(<b>1</b>); the\n<b>ctags</b> program is used to create a similar table in a\nformat understood by <b>vi</b>(<b>1</b>). Both forms of the\nprogram understand the syntax of C, Objective C, C++, Java,\nFortran, Ada, Cobol, Erlang, Forth, Go, HTML, LaTeX, Emacs\nLisp/Common Lisp, Lua, Makefile, Pascal, Perl, Ruby, PHP,\nPostScript, Python, Prolog, Scheme and most assembler-like\nsyntaxes. Both forms read the files specified on the command\nline, and write a tag table (defaults: <b>TAGS</b> for\n<b>etags</b>, <b>tags</b> for <b>ctags</b>) in the current\nworking directory. Files specified with relative file names\nwill be recorded in the tag table with file names relative\nto the directory where the tag table resides. If the tag\ntable is in /dev or is the standard output, however, the\nfile names are made relative to the working directory. Files\nspecified with absolute file names will be recorded with\nabsolute file names. Files generated from a source\nfile--like a C file generated from a source Cweb file--will\nbe recorded with the name of the source file. Compressed\nfiles are supported using gzip, bzip2, xz, and zstd. The\nprograms recognize the language used in an input file based\non its file name and contents. The <b>--language</b> switch\ncan be used to force parsing of the file names following the\nswitch according to the given language, overriding guesses\nbased on filename extensions.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some options\nmake sense only for the <b>vi</b> style tag files produced\nby ctags; <b>etags</b> does not recognize them. The programs\naccept unambiguous abbreviations for long option names.\n<b><br>\n-a, --append</b></p>\n\n<p style=\"margin-left:22%;\">Append to existing tag file.\n(For <b>vi</b>-format tag files, see also\n<b>--update</b>.)</p>\n\n<p style=\"margin-left:11%;\"><b>-B,\n--backward-search</b></p>\n\n<p style=\"margin-left:22%;\">Tag files written in the format\nexpected by <b>vi</b> contain regular expression search\ninstructions; the <b>-B</b> option writes them using the\ndelimiter &quot;<b>?</b>&quot;, to search <i>backwards</i>\nthrough files. The default is to use the delimiter\n&quot;<b>/</b>&quot;, to search <i>forwards</i> through\nfiles. Only <b>ctags</b> accepts this option.</p>\n\n<p style=\"margin-left:11%;\"><b>--declarations</b></p>\n\n<p style=\"margin-left:22%;\">In C and derived languages,\ncreate tags for function declarations, and create tags for\nextern variables unless --no-globals is used. In Lisp,\ncreate tags for (defvar foo) declarations.</p>\n\n<p style=\"margin-left:11%;\"><b>-D, --no-defines</b></p>\n\n<p style=\"margin-left:22%;\">Do not create tag entries for C\npreprocessor constant definitions and enum constants. This\nmay make the tags file much smaller if many header files are\ntagged.</p>\n\n<p style=\"margin-left:11%;\"><b>--globals</b></p>\n\n<p style=\"margin-left:22%;\">Create tag entries for global\nvariables in Perl and Makefile. This is the default in C and\nderived languages.</p>\n\n<p style=\"margin-left:11%;\"><b>--no-globals</b></p>\n\n<p style=\"margin-left:22%;\">Do not tag global variables in\nC and derived languages. Typically this reduces the file\nsize by one fourth.</p>\n\n<p style=\"margin-left:11%;\"><b>--no-line-directive</b></p>\n\n<p style=\"margin-left:22%;\">Ignore <b>#line</b>\npreprocessor directives in C and derived languages. The\ndefault is to honor those directives, and record the tags as\nif the file scanned was the one named in the <b>#line</b>\ndirective. This switch is useful when the original file\nnamed by <b>#line</b> is no longer available.</p>\n\n<p style=\"margin-left:11%;\"><b>-i</b> <i>file</i>,\n<b>--include=</b><i>file</i></p>\n\n<p style=\"margin-left:22%;\">Include a note in the tag file\nindicating that, when searching for a tag, one should also\nconsult the tags file <i>file</i> after checking the current\nfile. Only <b>etags</b> accepts this option.</p>\n\n<p style=\"margin-left:11%;\"><b>-I,\n--ignore-indentation</b></p>\n\n<p style=\"margin-left:22%;\">Don&rsquo;t rely on indentation\nas much as we normally do. Currently, this means not to\nassume that a closing brace in the first column is the final\nbrace of a function or structure definition in C and\nC++.</p>\n\n<p style=\"margin-left:11%;\"><b>-l</b> <i>language</i>,\n<b>--language=</b><i>language</i></p>\n\n<p style=\"margin-left:22%;\">Parse the following files\naccording to the given language. More than one such options\nmay be intermixed with filenames. Use <b>--help</b> to get a\nlist of the available languages and their default filename\nextensions. The &quot;auto&quot; language can be used to\nrestore automatic detection of language based on the file\nname. The &quot;none&quot; language may be used to disable\nlanguage parsing altogether; only regexp matching is done in\nthis case (see the <b>--regex</b> option).</p>\n\n<p style=\"margin-left:11%;\"><b>--members</b></p>\n\n<p style=\"margin-left:22%;\">Create tag entries for\nvariables that are members of structure-like constructs in\nPHP. This is the default for C and derived languages.</p>\n\n<p style=\"margin-left:11%;\"><b>--no-members</b></p>\n\n<p style=\"margin-left:22%;\">Do not tag member\nvariables.</p>\n\n<p style=\"margin-left:11%;\"><b>--packages-only</b></p>\n\n<p style=\"margin-left:22%;\">Only tag packages in Ada\nfiles.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--parse-stdin=</b><i>file</i></p>\n\n<p style=\"margin-left:22%;\">May be used (only once) in\nplace of a file name on the command line. <b>etags</b> will\nread from standard input and mark the produced tags as\nbelonging to the file <b>FILE</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-Q, --class-qualify</b></p>\n\n<p style=\"margin-left:22%;\">Qualify tag names with their\nclass name in C++, ObjC, Java, and Perl. This produces tag\nnames of the form <i>class</i><b>::</b><i>member</i> for C++\nand Perl, <i>class</i><b>(</b><i>category</i><b>)</b> for\nObjective C, and <i>class</i><b>.</b><i>member</i> for Java.\nFor Objective C, this also produces class methods qualified\nwith their arguments, as in\n<i>foo</i><b>:</b><i>bar</i><b>:</b><i>baz</i><b>:</b><i>more</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>-o</b> <i>tagfile</i>,\n<b>--output=</b><i>tagfile</i></p>\n\n<p style=\"margin-left:22%;\">Explicit name of file for tag\ntable; for <b>etags</b> only, a file name of - means\nstandard output; overrides default <b>TAGS</b> or\n<b>tags</b>. (But ignored with <b>-v</b> or <b>-x</b>.)</p>\n\n<p style=\"margin-left:11%;\"><b>-r</b> <i>regexp</i>,\n<b>--regex=</b><i>regexp</i></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Make tags based\non regexp matching for the files following this option, in\naddition to the tags made with the standard parsing based on\nlanguage. May be freely intermixed with filenames and the\n<b>-R</b> option. The regexps are cumulative, i.e., each\nsuch option will add to the previous ones. The regexps are\nof one of the forms:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n\n\n\n<p>[<b>{</b><i>language</i><b>}</b>]<b>/</b><i>tagregexp/</i>[<i>nameregexp</i><b>/</b>]<i>modifiers</i></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n\n\n<p><b>@</b><i>regexfile</i></p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">where\n<i>tagregexp</i> is used to match the tag. It should not\nmatch useless characters. If the match is such that more\ncharacters than needed are unavoidably matched by\n<i>tagregexp</i>, it may be useful to add a\n<i>nameregexp</i>, to narrow down the tag scope.\n<b>ctags</b> ignores regexps without a <i>nameregexp</i>.\nThe syntax of regexps is the same as in emacs. The following\ncharacter escape sequences are supported: \\a, \\b, \\d, \\e,\n\\f, \\n, \\r, \\t, \\v, which respectively stand for the ASCII\ncharacters BEL, BS, DEL, ESC, FF, NL, CR, TAB, VT. <br>\nThe <i>modifiers</i> are a sequence of 0 or more characters\namong <i>i</i>, which means to ignore case when matching;\n<i>m</i>, which means that the <i>tagregexp</i> will be\nmatched against the whole file contents at once, rather than\nline by line, and the matching sequence can match multiple\nlines; and <i>s</i>, which implies <i>m</i> and means that\nthe dot character in <i>tagregexp</i> matches the newline\nchar as well. <br>\nThe separator, which is <b>/</b> in the examples, can be any\ncharacter different from space, tab, braces and <b>@</b>. If\nthe separator character is needed inside the regular\nexpression, it must be quoted by preceding it with <b>\\</b>.\n<br>\nThe optional <b>{</b><i>language</i><b>}</b> prefix means\nthat the tag should be created only for files of language\n<i>language</i>, and ignored otherwise. This is particularly\nuseful when storing many predefined regexps in a file. <br>\nIn its second form, <i>regexfile</i> is the name of a file\nthat contains a number of arguments to the <i>--regex=</i>\noption, one per line. Lines beginning with a space or tab\nare assumed to be comments, and ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Here are some\nexamples. All the regexps are quoted to protect them from\nshell interpretation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Tag the DEFVAR\nmacros in the emacs source files: <i><br>\n--regex=&rsquo;/[ \\t]*DEFVAR_[A-Z_\n\\t(]+&quot;\\([^&quot;]+\\)&quot;/&rsquo;</i></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Tag VHDL files\n(this example is a single long line, broken here for\nformatting reasons): <i><br>\n\n--language=none&nbsp;--regex=&rsquo;/[&nbsp;\\t]*\\(ARCHITECTURE\\|\\\nCONFIGURATION\\)&nbsp;+[^&nbsp;]*&nbsp;+OF/&rsquo;&nbsp;--regex=&rsquo;/[&nbsp;\\t]*\\\n\\(ATTRIBUTE\\|ENTITY\\|FUNCTION\\|PACKAGE\\(&nbsp;BODY\\)?\\\n\\|PROCEDURE\\|PROCESS\\|TYPE\\)[&nbsp;\\t]+\\([^&nbsp;\\t(]+\\)/\\3/&rsquo;</i></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Tag TCL files\n(this last example shows the usage of a <i>tagregexp</i>):\n<i><br>\n--lang=none\n--regex=&rsquo;/proc[&nbsp;\\t]+\\([^&nbsp;\\t]+\\)/\\1/&rsquo;</i></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A regexp can be\npreceded by {<i>lang</i>}, thus restricting it to match\nlines of files of the specified language. Use <b>etags\n--help</b> to obtain a list of the recognized languages.\nThis feature is particularly useful inside <b>regex\nfiles</b>. A regex file contains one regex per line. Empty\nlines, and those lines beginning with space or tab are\nignored. Lines beginning with @ are references to regex\nfiles whose name follows the @ sign. Other lines are\nconsidered regular expressions like those following\n<b>--regex</b>. <br>\nFor example, the command <i><br>\netags --regex=@regex.file *.c</i> <br>\nreads the regexes contained in the file regex.file.</p>\n\n<p style=\"margin-left:11%;\"><b>-R, --no-regex</b></p>\n\n<p style=\"margin-left:22%;\">Don&rsquo;t do any more regexp\nmatching on the following files. May be freely intermixed\nwith filenames and the <b>--regex</b> option.</p>\n\n<p style=\"margin-left:11%;\"><b>-u, --update</b></p>\n\n<p style=\"margin-left:22%;\">Update tag entries for\n<i>files</i> specified on command line, leaving tag entries\nfor other files in place. Currently, this is implemented by\ndeleting the existing entries for the given files and then\nrewriting the new entries at the end of the tags file. It is\noften faster to simply rebuild the entire tag file than to\nuse this. Only <b>ctags</b> accepts this option.</p>\n\n<p style=\"margin-left:11%;\"><b>-v, --vgrind</b></p>\n\n<p style=\"margin-left:22%;\">Instead of generating a tag\nfile, write index (in <b>vgrind</b> format) to standard\noutput. Only <b>ctags</b> accepts this option.</p>\n\n<p style=\"margin-left:11%;\"><b>-x, --cxref</b></p>\n\n<p style=\"margin-left:22%;\">Instead of generating a tag\nfile, write a cross reference (in <b>cxref</b> format) to\nstandard output. Only <b>ctags</b> accepts this option.</p>\n\n<p style=\"margin-left:11%;\"><b>-h, -H, --help</b></p>\n\n<p style=\"margin-left:22%;\">Print usage information.\nFollowed by one or more --language=LANG prints detailed\ninformation about how tags are created for LANG.</p>\n\n<p style=\"margin-left:11%;\"><b>-V, --version</b></p>\n\n<p style=\"margin-left:22%;\">Print the current version of\nthe program (same as the version of the emacs <b>etags</b>\nis shipped with).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;<b>emacs</b>&quot;\nentry in <b>info</b>; <i>GNU Emacs Manual</i>, Richard\nStallman. <b><br>\ncxref</b>(<b>1</b>), <b>emacs</b>(<b>1</b>),\n<b>vgrind</b>(<b>1</b>), <b>vi</b>(<b>1</b>).</p>\n\n<h2>COPYING\n<a name=\"COPYING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright 1992,\n1999, 2001-2020 Free Software Foundation, Inc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission is\ngranted to make and distribute verbatim copies of this\ndocument provided the copyright notice and this permission\nnotice are preserved on all copies.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission is\ngranted to copy and distribute modified versions of this\ndocument under the conditions for verbatim copying, provided\nthat the entire resulting derived work is distributed under\nthe terms of a permission notice identical to this one.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission is\ngranted to copy and distribute translations of this document\ninto another language, under the above conditions for\nmodified versions, except that this permission notice may be\nstated in a translation approved by the Free Software\nFoundation.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYING\">COPYING</a>"]}