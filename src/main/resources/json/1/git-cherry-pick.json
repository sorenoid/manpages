{"name":"git-cherry-pick","body":"\n\n<h1 align=\"center\">GIT-CHERRY-PICK</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-cherry-pick\n- Apply the changes introduced by some existing commits</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ncherry-pick</i> [--edit] [-n] [-m parent-number] [-s] [-x]\n[--ff] <br>\n[-S[&lt;keyid&gt;]] &lt;commit&gt;... <i><br>\ngit cherry-pick</i> (--continue | --skip | --abort |\n--quit)</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Given one or\nmore existing commits, apply the change each one introduces,\nrecording a new commit for each. This requires your working\ntree to be clean (no modifications from the HEAD\ncommit).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When it is not\nobvious how to apply a change, the following happens:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. The current\nbranch and <b>HEAD</b> pointer stay at the last commit\nsuccessfully made.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. The\n<b>CHERRY_PICK_HEAD</b> ref is set to point at the commit\nthat introduced the change that is difficult to apply.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. Paths in\nwhich the change applied cleanly are updated both in the\nindex file and in your working tree.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">4. For\nconflicting paths, the index file records up to three\nversions, as described in the &quot;TRUE MERGE&quot; section\nof <a href=\"https://man.page/1/git-merge\">git-merge(1)</a>. The working tree files will include\na description of the conflict bracketed by the usual\nconflict markers <b>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</b> and\n<b>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">5. No other\nmodifications are made.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/1/git-merge\">git-merge(1)</a> for some hints on resolving such\nconflicts.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;commit&gt;...</p>\n\n<p style=\"margin-left:17%;\">Commits to cherry-pick. For a\nmore complete list of ways to spell commits, see\n<a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a>. Sets of commits can be passed but no\ntraversal is done by default, as if the <b>--no-walk</b>\noption was specified, see <a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a>. Note that\nspecifying a range will feed all &lt;commit&gt;... arguments\nto a single revision walk (see a later example that uses\n<i>maint master..next</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-e, --edit</p>\n\n<p style=\"margin-left:17%;\">With this option, <i>git\ncherry-pick</i> will let you edit the commit message prior\nto committing.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cleanup=&lt;mode&gt;</p>\n\n<p style=\"margin-left:17%;\">This option determines how the\ncommit message will be cleaned up before being passed on to\nthe commit machinery. See <a href=\"https://man.page/1/git-commit\">git-commit(1)</a> for more\ndetails. In particular, if the <i>&lt;mode&gt;</i> is given\na value of <b>scissors</b>, scissors will be appended to\n<b>MERGE_MSG</b> before being passed on in the case of a\nconflict.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-x</p>\n\n<p style=\"margin-left:17%;\">When recording the commit,\nappend a line that says &quot;(cherry picked from commit\n...)&quot; to the original commit message in order to\nindicate which commit this change was cherry-picked from.\nThis is done only for cherry picks without conflicts. Do not\nuse this option if you are cherry-picking from your private\nbranch because the information is useless to the recipient.\nIf on the other hand you are cherry-picking between two\npublicly visible branches (e.g. backporting a fix to a\nmaintenance branch for an older release from a development\nbranch), adding this information can be useful.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-r</p>\n\n<p style=\"margin-left:17%;\">It used to be that the command\ndefaulted to do <b>-x</b> described above, and <b>-r</b> was\nto disable it. Now the default is not to do <b>-x</b> so\nthis option is a no-op.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-m\nparent-number, --mainline parent-number</p>\n\n<p style=\"margin-left:17%;\">Usually you cannot cherry-pick\na merge because you do not know which side of the merge\nshould be considered the mainline. This option specifies the\nparent number (starting from 1) of the mainline and allows\ncherry-pick to replay the change relative to the specified\nparent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--no-commit</p>\n\n<p style=\"margin-left:17%;\">Usually the command\nautomatically creates a sequence of commits. This flag\napplies the changes necessary to cherry-pick each named\ncommit to your working tree and the index, without making\nany commit. In addition, when this option is used, your\nindex does not have to match the HEAD commit. The\ncherry-pick is done against the beginning state of your\nindex.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is useful\nwhen cherry-picking more than one commits' effect to your\nindex in a row.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s,\n--signoff</p>\n\n<p style=\"margin-left:17%;\">Add a <b>Signed-off-by</b>\ntrailer at the end of the commit message. See the signoff\noption in <a href=\"https://man.page/1/git-commit\">git-commit(1)</a> for more information.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-S[&lt;keyid&gt;],\n--gpg-sign[=&lt;keyid&gt;], --no-gpg-sign</p>\n\n<p style=\"margin-left:17%;\">GPG-sign commits. The\n<b>keyid</b> argument is optional and defaults to the\ncommitter identity; if specified, it must be stuck to the\noption without a space. <b>--no-gpg-sign</b> is useful to\ncountermand both <b>commit.gpgSign</b> configuration\nvariable, and earlier <b>--gpg-sign</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ff</p>\n\n<p style=\"margin-left:17%;\">If the current HEAD is the same\nas the parent of the cherry-pick&rsquo;ed commit, then a\nfast forward to this commit will be performed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--allow-empty</p>\n\n<p style=\"margin-left:17%;\">By default, cherry-picking an\nempty commit will fail, indicating that an explicit\ninvocation of <b>git commit --allow-empty</b> is required.\nThis option overrides that behavior, allowing empty commits\nto be preserved automatically in a cherry-pick. Note that\nwhen &quot;--ff&quot; is in effect, empty commits that meet\nthe &quot;fast-forward&quot; requirement will be kept even\nwithout this option. Note also, that use of this option only\nkeeps commits that were initially empty (i.e. the commit\nrecorded the same tree as its parent). Commits which are\nmade empty due to a previous commit are dropped. To force\nthe inclusion of those commits use\n<b>--keep-redundant-commits</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--allow-empty-message</p>\n\n<p style=\"margin-left:17%;\">By default, cherry-picking a\ncommit with an empty message will fail. This option\noverrides that behavior, allowing commits with empty\nmessages to be cherry picked.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--keep-redundant-commits</p>\n\n<p style=\"margin-left:17%;\">If a commit being cherry picked\nduplicates a commit already in the current history, it will\nbecome empty. By default these redundant commits cause\n<b>cherry-pick</b> to stop so the user can examine the\ncommit. This option overrides that behavior and creates an\nempty commit object. Implies <b>--allow-empty</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--strategy=&lt;strategy&gt;</p>\n\n<p style=\"margin-left:17%;\">Use the given merge strategy.\nShould only be used once. See the MERGE STRATEGIES section\nin <a href=\"https://man.page/1/git-merge\">git-merge(1)</a> for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-X&lt;option&gt;,\n--strategy-option=&lt;option&gt;</p>\n\n<p style=\"margin-left:17%;\">Pass the merge\nstrategy-specific option through to the merge strategy. See\n<a href=\"https://man.page/1/git-merge\">git-merge(1)</a> for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--rerere-autoupdate,\n--no-rerere-autoupdate</p>\n\n<p style=\"margin-left:17%;\">Allow the rerere mechanism to\nupdate the index with the result of auto-conflict resolution\nif possible.</p>\n\n<h2>SEQUENCER SUBCOMMANDS\n<a name=\"SEQUENCER SUBCOMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--continue</p>\n\n<p style=\"margin-left:17%;\">Continue the operation in\nprogress using the information in <b>.git/sequencer</b>. Can\nbe used to continue after resolving conflicts in a failed\ncherry-pick or revert.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--skip</p>\n\n<p style=\"margin-left:17%;\">Skip the current commit and\ncontinue with the rest of the sequence.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--quit</p>\n\n<p style=\"margin-left:17%;\">Forget about the current\noperation in progress. Can be used to clear the sequencer\nstate after a failed cherry-pick or revert.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--abort</p>\n\n<p style=\"margin-left:17%;\">Cancel the operation and return\nto the pre-sequence state.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\ncherry-pick master</b></p>\n\n<p style=\"margin-left:17%;\">Apply the change introduced by\nthe commit at the tip of the master branch and create a new\ncommit with this change.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\ncherry-pick ..master</b>, <b>git cherry-pick ^HEAD\nmaster</b></p>\n\n<p style=\"margin-left:17%;\">Apply the changes introduced by\nall commits that are ancestors of master but not of HEAD to\nproduce new commits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\ncherry-pick maint next ^master</b>, <b>git cherry-pick maint\nmaster..next</b></p>\n\n<p style=\"margin-left:17%;\">Apply the changes introduced by\nall commits that are ancestors of maint or next, but not\nmaster or any of its ancestors. Note that the latter does\nnot mean <b>maint</b> and everything between <b>master</b>\nand <b>next</b>; specifically, <b>maint</b> will not be used\nif it is included in <b>master</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\ncherry-pick master~4 master~2</b></p>\n\n<p style=\"margin-left:17%;\">Apply the changes introduced by\nthe fifth and third last commits pointed to by master and\ncreate 2 new commits with these changes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\ncherry-pick -n master~1 next</b></p>\n\n<p style=\"margin-left:17%;\">Apply to the working tree and\nthe index the changes introduced by the second last commit\npointed to by master and by the last commit pointed to by\nnext, but do not create any commit with these changes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\ncherry-pick --ff ..next</b></p>\n\n<p style=\"margin-left:17%;\">If history is linear and HEAD\nis an ancestor of next, update the working tree and advance\nthe HEAD pointer to match next. Otherwise, apply the changes\nintroduced by those commits that are in next but not HEAD to\nthe current branch, creating a new commit for each new\nchange.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git rev-list\n--reverse master -- README | git cherry-pick -n\n--stdin</b></p>\n\n<p style=\"margin-left:17%;\">Apply the changes introduced by\nall commits on the master branch that touched README to the\nworking tree and index, so the result can be inspected and\nmade into a single new commit if suitable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nsequence attempts to backport a patch, bails out because the\ncode the patch applies to has changed too much, and then\ntries again, this time exercising more care about matching\nup context lines.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git\ncherry-pick topic^ <b>(1)</b> <br>\n$ git diff <b>(2)</b> <br>\n$ git reset --merge ORIG_HEAD <b>(3)</b> <br>\n$ git cherry-pick -Xpatience topic^ <b>(4)</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>1.</b> apply\nthe change that would be shown by <b>git show topic^</b>. In\nthis example, the patch does not apply cleanly, so\ninformation about the conflict is written to the index and\nworking tree and no new commit results. <b><br>\n2.</b> summarize changes to be reconciled <b><br>\n3.</b> cancel the cherry-pick. In other words, return to the\npre-cherry-pick state, preserving any local modifications\nyou had in the working tree. <b><br>\n4.</b> try to apply the change introduced by <b>topic^</b>\nagain, spending extra time to avoid mistakes based on\nincorrectly matching context lines.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-revert\">git-revert(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SEQUENCER SUBCOMMANDS\">SEQUENCER SUBCOMMANDS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}