{"name":"git-sparse-checkou","description":"git-sparse-checkout\n- Initialize and modify the sparse-checkout configuration,\nwhich reduces the checkout to a set of paths given by a list\nof patterns.","body":"\n\n<h1 align=\"center\">GIT-SPARSE-CHECKOU</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-sparse-checkout\n- Initialize and modify the sparse-checkout configuration,\nwhich reduces the checkout to a set of paths given by a list\nof patterns.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nsparse-checkout &lt;subcommand&gt; [options]</i></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Initialize and\nmodify the sparse-checkout configuration, which reduces the\ncheckout to a set of paths given by a list of patterns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">THIS COMMAND IS\nEXPERIMENTAL. ITS BEHAVIOR, AND THE BEHAVIOR OF OTHER\nCOMMANDS IN THE PRESENCE OF SPARSE-CHECKOUTS, WILL LIKELY\nCHANGE IN THE FUTURE.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>list</i></p>\n\n<p style=\"margin-left:17%;\">Describe the patterns in the\nsparse-checkout file.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>init</i></p>\n\n<p style=\"margin-left:17%;\">Enable the\n<b>core.sparseCheckout</b> setting. If the sparse-checkout\nfile does not exist, then populate it with patterns that\nmatch every file in the root directory and no other\ndirectories, then will remove all directories tracked by\nGit. Add patterns to the sparse-checkout file to repopulate\nthe working directory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To avoid\ninterfering with other worktrees, it first enables the\n<b>extensions.worktreeConfig</b> setting and makes sure to\nset the <b>core.sparseCheckout</b> setting in the\nworktree-specific config file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\n<b>--cone</b> is provided, the\n<b>core.sparseCheckoutCone</b> setting is also set, allowing\nfor better performance with a limited set of patterns (see\n<i>CONE PATTERN SET</i> below).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Use the\n<b>--[no-]sparse-index</b> option to toggle the use of the\nsparse index format. This reduces the size of the index to\nbe more closely aligned with your sparse-checkout\ndefinition. This can have significant performance advantages\nfor commands such as <b>git status</b> or <b>git add</b>.\nThis feature is still experimental. Some commands might be\nslower with a sparse index until they are properly\nintegrated with the feature.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>WARNING:</b>\nUsing a sparse index requires modifying the index in a way\nthat is not completely understood by external tools. If you\nhave trouble with this compatibility, then run <b>git\nsparse-checkout init --no-sparse-index</b> to rewrite your\nindex to not be sparse. Older versions of Git will not\nunderstand the sparse directory entries index extension and\nmay fail to interact with your repository until it is\ndisabled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>set</i></p>\n\n<p style=\"margin-left:17%;\">Write a set of patterns to the\nsparse-checkout file, as given as a list of arguments\nfollowing the <i>set</i> subcommand. Update the working\ndirectory to match the new patterns. Enable the\ncore.sparseCheckout config setting if it is not already\nenabled.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When the\n<b>--stdin</b> option is provided, the patterns are read\nfrom standard in as a newline-delimited list instead of from\nthe arguments.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\n<b>core.sparseCheckoutCone</b> is enabled, the input list is\nconsidered a list of directories instead of sparse-checkout\npatterns. The command writes patterns to the sparse-checkout\nfile to include all files contained in those directories\n(recursively) as well as files that are siblings of ancestor\ndirectories. The input format matches the output of <b>git\nls-tree --name-only</b>. This includes interpreting\npathnames that begin with a double quote (&quot;) as C-style\nquoted strings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>add</i></p>\n\n<p style=\"margin-left:17%;\">Update the sparse-checkout file\nto include additional patterns. By default, these patterns\nare read from the command-line arguments, but they can be\nread from stdin using the <b>--stdin</b> option. When\n<b>core.sparseCheckoutCone</b> is enabled, the given\npatterns are interpreted as directory names as in the\n<i>set</i> subcommand.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>reapply</i></p>\n\n<p style=\"margin-left:17%;\">Reapply the sparsity pattern\nrules to paths in the working tree. Commands like merge or\nrebase can materialize paths to do their work (e.g. in order\nto show you a conflict), and other sparse-checkout commands\nmight fail to sparsify an individual file (e.g. because it\nhas unstaged changes or conflicts). In such cases, it can\nmake sense to run <b>git sparse-checkout reapply</b> later\nafter cleaning up affected paths (e.g. resolving conflicts,\nundoing or committing changes, etc.).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>disable</i></p>\n\n<p style=\"margin-left:17%;\">Disable the\n<b>core.sparseCheckout</b> config setting, and restore the\nworking directory to include all files. Leaves the\nsparse-checkout file intact so a later <i>git\nsparse-checkout init</i> command may return the working\ndirectory to the same state.</p>\n\n<h2>SPARSE CHECKOUT\n<a name=\"SPARSE CHECKOUT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Sparse\ncheckout&quot; allows populating the working directory\nsparsely. It uses the skip-worktree bit (see\n<a href=\"https://man.page/1/git-update-index\">git-update-index(1)</a>) to tell Git whether a file in\nthe working directory is worth looking at. If the\nskip-worktree bit is set, then the file is ignored in the\nworking directory. Git will not populate the contents of\nthose files, which makes a sparse checkout helpful when\nworking in a repository with many files, but only a few are\nimportant to the current user.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>$GIT_DIR/info/sparse-checkout</b> file is used to define\nthe skip-worktree reference bitmap. When Git updates the\nworking directory, it updates the skip-worktree bits in the\nindex based on this file. The files matching the patterns in\nthe file will appear in the working directory, and the rest\nwill not.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To enable the\nsparse-checkout feature, run <b>git sparse-checkout init</b>\nto initialize a simple sparse-checkout file and enable the\n<b>core.sparseCheckout</b> config setting. Then, run <b>git\nsparse-checkout set</b> to modify the patterns in the\nsparse-checkout file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To repopulate\nthe working directory with all files, use the <b>git\nsparse-checkout disable</b> command.</p>\n\n<h2>FULL PATTERN SET\n<a name=\"FULL PATTERN SET\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, the\nsparse-checkout file uses the same syntax as\n<b>.gitignore</b> files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While\n<b>$GIT_DIR/info/sparse-checkout</b> is usually used to\nspecify what files are included, you can also specify what\nfiles are <i>not</i> included, using negative patterns. For\nexample, to remove the file <b>unwanted</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* <br>\n!unwanted</p>\n\n<h2>CONE PATTERN SET\n<a name=\"CONE PATTERN SET\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The full\npattern set allows for arbitrary pattern matches and\ncomplicated inclusion/exclusion rules. These can result in\nO(N*M) pattern matches when updating the index, where N is\nthe number of patterns and M is the number of paths in the\nindex. To combat this performance issue, a more restricted\npattern set is allowed when <b>core.sparseCheckoutCone</b>\nis enabled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The accepted\npatterns in the cone pattern set are:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1.\n<b>Recursive:</b> All paths inside a directory are\nincluded.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2.\n<b>Parent:</b> All files immediately inside a directory are\nincluded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe above two patterns, we also expect that all files in the\nroot directory are included. If a recursive pattern is\nadded, then all leading directories are added as parent\npatterns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\nwhen running <b>git sparse-checkout init</b>, the root\ndirectory is added as a parent pattern. At this point, the\nsparse-checkout file contains the following patterns:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* <br>\n!/*/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This says\n&quot;include everything in root, but nothing two levels\nbelow root.&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When in cone\nmode, the <b>git sparse-checkout set</b> subcommand takes a\nlist of directories instead of a list of sparse-checkout\npatterns. In this mode, the command <b>git sparse-checkout\nset A/B/C</b> sets the directory <b>A/B/C</b> as a recursive\npattern, the directories <b>A</b> and <b>A/B</b> are added\nas parent patterns. The resulting sparse-checkout file is\nnow</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* <br>\n!/*/ <br>\n/A/ <br>\n!/A/*/ <br>\n/A/B/ <br>\n!/A/B/*/ <br>\n/A/B/C/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, order\nmatters, so the negative patterns are overridden by the\npositive patterns that appear lower in the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>core.sparseCheckoutCone=true</b>, then Git will parse the\nsparse-checkout file expecting patterns of these types. Git\nwill warn if the patterns do not match. If the patterns do\nmatch the expected format, then Git will use faster hash-\nbased algorithms to compute inclusion in the\nsparse-checkout.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the cone\nmode case, the <b>git sparse-checkout list</b> subcommand\nwill list the directories that define the recursive\npatterns. For the example sparse-checkout file above, the\noutput is as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git\nsparse-checkout list <br>\nA/B/C</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>core.ignoreCase=true</b>, then the pattern-matching\nalgorithm will use a case-insensitive check. This corrects\nfor case mismatched filenames in the <i>git sparse-checkout\nset</i> command to reflect the expected cone in the working\ndirectory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When changing\nthe sparse-checkout patterns in cone mode, Git will inspect\neach tracked directory that is not within the\nsparse-checkout cone to see if it contains any untracked\nfiles. If all of those files are ignored due to the\n<b>.gitignore</b> patterns, then the directory will be\ndeleted. If any of the untracked files within that directory\nis not ignored, then no deletions will occur within that\ndirectory and a warning message will appear. If these files\nare important, then reset your sparse-checkout definition so\nthey are included, use <b>git add</b> and <b>git commit</b>\nto store them, then remove any remaining files manually to\nensure Git can behave optimally.</p>\n\n<h2>SUBMODULES\n<a name=\"SUBMODULES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If your\nrepository contains one or more submodules, then submodules\nare populated based on interactions with the <b>git\nsubmodule</b> command. Specifically, <b>git submodule init\n-- &lt;path&gt;</b> will ensure the submodule at\n<b>&lt;path&gt;</b> is present, while <b>git submodule\ndeinit [-f] -- &lt;path&gt;</b> will remove the files for\nthe submodule at <b>&lt;path&gt;</b> (including any\nuntracked files, uncommitted changes, and unpushed history).\nSimilar to how sparse-checkout removes files from the\nworking tree but still leaves entries in the index,\ndeinitialized submodules are removed from the working\ndirectory but still have an entry in the index.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since\nsubmodules may have unpushed changes or untracked files,\nremoving them could result in data loss. Thus, changing\nsparse inclusion/exclusion rules will not cause an already\nchecked out submodule to be removed from the working copy.\nSaid another way, just as <b>checkout</b> will not cause\nsubmodules to be automatically removed or initialized even\nwhen switching between branches that remove or add\nsubmodules, using <b>sparse-checkout</b> to reduce or expand\nthe scope of &quot;interesting&quot; files will not cause\nsubmodules to be automatically deinitialized or initialized\neither.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Further, the\nabove facts mean that there are multiple reasons that\n&quot;tracked&quot; files might not be present in the\nworking copy: sparsity pattern application from\nsparse-checkout, and submodule initialization state. Thus,\ncommands like <b>git grep</b> that work on tracked files in\nthe working copy may return results that are limited by\neither or both of these restrictions.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-read-tree\">git-read-tree(1)</a>\n<a href=\"https://man.page/5/gitignore\">gitignore(5)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#SPARSE CHECKOUT\">SPARSE CHECKOUT</a>","<a href=\"#FULL PATTERN SET\">FULL PATTERN SET</a>","<a href=\"#CONE PATTERN SET\">CONE PATTERN SET</a>","<a href=\"#SUBMODULES\">SUBMODULES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}