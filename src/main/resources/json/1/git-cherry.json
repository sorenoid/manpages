{"name":"git-cherry","description":"git-cherry -\nFind commits yet to be applied to upstream","body":"\n\n<h1 align=\"center\">GIT-CHERRY</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-cherry -\nFind commits yet to be applied to upstream</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ncherry</i> [-v] [&lt;upstream&gt; [&lt;head&gt;\n[&lt;limit&gt;]]]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Determine\nwhether there are commits in\n<b>&lt;head&gt;..&lt;upstream&gt;</b> that are equivalent to\nthose in the range <b>&lt;limit&gt;..&lt;head&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The equivalence\ntest is based on the diff, after removing whitespace and\nline numbers. git-cherry therefore detects when commits have\nbeen &quot;copied&quot; by means of\n<a href=\"https://man.page/1/git-cherry-pick\">git-cherry-pick(1)</a>, <a href=\"https://man.page/1/git-am\">git-am(1)</a> or\n<a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Outputs the\nSHA1 of every commit in <b>&lt;limit&gt;..&lt;head&gt;</b>,\nprefixed with <b>-</b> for commits that have an equivalent\nin &lt;upstream&gt;, and <b>+</b> for commits that do\nnot.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v</p>\n\n<p style=\"margin-left:17%;\">Show the commit subjects next\nto the SHA1s.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;upstream&gt;</p>\n\n<p style=\"margin-left:17%;\">Upstream branch to search for\nequivalent commits. Defaults to the upstream branch of\nHEAD.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;head&gt;</p>\n\n<p style=\"margin-left:17%;\">Working branch; defaults to\nHEAD.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;limit&gt;</p>\n\n<p style=\"margin-left:17%;\">Do not report commits up to\n(and including) limit.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Patch\nworkflows</b> <br>\ngit-cherry is frequently used in patch-based workflows (see\n<a href=\"https://man.page/7/gitworkflows\">gitworkflows(7)</a>) to determine if a series of patches\nhas been applied by the upstream maintainer. In such a\nworkflow you might create and send a topic branch like\nthis:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git checkout\n-b topic origin/master <br>\n# work and create some commits <br>\n$ git format-patch origin/master <br>\n$ git send-email ... 00*</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Later, you can\nsee whether your changes have been applied by saying (still\non <b>topic</b>):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git fetch #\nupdate your notion of origin/master <br>\n$ git cherry -v</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Concrete\nexample</b> <br>\nIn a situation where topic consisted of three commits, and\nthe maintainer applied two of them, the situation might look\nlike:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git log\n--graph --oneline --decorate --boundary\norigin/master...topic <br>\n* 7654321 (origin/master) upstream tip commit <br>\n[... snip some other commits ...] <br>\n* cccc111 cherry-pick of C <br>\n* aaaa111 cherry-pick of A <br>\n[... snip a lot more that has happened ...] <br>\n| * cccc000 (topic) commit C <br>\n| * bbbb000 commit B <br>\n| * aaaa000 commit A <br>\n|/ <br>\no 1234567 branch point</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In such cases,\ngit-cherry shows a concise summary of what has yet to be\napplied:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git cherry\norigin/master topic <br>\n- cccc000... commit C <br>\n+ bbbb000... commit B <br>\n- aaaa000... commit A</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, we see\nthat the commits A and C (marked with <b>-</b>) can be\ndropped from your <b>topic</b> branch when you rebase it on\ntop of <b>origin/master</b>, while the commit B (marked with\n<b>+</b>) still needs to be kept so that it will be sent to\nbe applied to <b>origin/master</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using a\nlimit</b> <br>\nThe optional &lt;limit&gt; is useful in cases where your\ntopic is based on other work that is not in upstream.\nExpanding on the previous example, this might look like:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git log\n--graph --oneline --decorate --boundary\norigin/master...topic <br>\n* 7654321 (origin/master) upstream tip commit <br>\n[... snip some other commits ...] <br>\n* cccc111 cherry-pick of C <br>\n* aaaa111 cherry-pick of A <br>\n[... snip a lot more that has happened ...] <br>\n| * cccc000 (topic) commit C <br>\n| * bbbb000 commit B <br>\n| * aaaa000 commit A <br>\n| * 0000fff (base) unpublished stuff F <br>\n[... snip ...] <br>\n| * 0000aaa unpublished stuff A <br>\n|/ <br>\no 1234567 merge-base between upstream and topic</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By specifying\n<b>base</b> as the limit, you can avoid listing commits\nbetween <b>base</b> and <b>topic</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git cherry\norigin/master topic base <br>\n- cccc000... commit C <br>\n+ bbbb000... commit B <br>\n- aaaa000... commit A</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-patch-id\">git-patch-id(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}