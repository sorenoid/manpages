{"name":"git-rerere","description":"git-rerere - Reuse recorded resolution of conflicted merges","body":"\n\n<h1 align=\"center\">GIT-RERERE</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-rerere -\nReuse recorded resolution of conflicted merges</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nrerere</i> [<i>clear</i>|<i>forget</i>\n&lt;pathspec&gt;|<i>diff</i>|<i>remaining</i>|<i>status</i>|<i>gc</i>]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a workflow\nemploying relatively long lived topic branches, the\ndeveloper sometimes needs to resolve the same conflicts over\nand over again until the topic branches are done (either\nmerged to the &quot;release&quot; branch, or sent out and\naccepted upstream).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command\nassists the developer in this process by recording\nconflicted automerge results and corresponding hand resolve\nresults on the initial manual merge, and applying previously\nrecorded hand resolutions to their corresponding automerge\nresults.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nYou need to set the configuration variable\n<b>rerere.enabled</b> in order to enable this command.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Normally,\n<i>git rerere</i> is run without arguments or\nuser-intervention. However, it has several commands that\nallow it to interact with its working state.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>clear</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Reset the metadata used by\nrerere if a merge resolution is to be aborted. Calling\n<i>git am [--skip|--abort]</i> or <i>git rebase\n[--skip|--abort]</i> will automatically invoke this\ncommand.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>forget</i>\n&lt;pathspec&gt;</big></p>\n\n<p style=\"margin-left:17%;\"><big>Reset the conflict\nresolutions which rerere has recorded for the current\nconflict in &lt;pathspec&gt;.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>diff</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Display diffs for the\ncurrent state of the resolution. It is useful for tracking\nwhat has changed while the user is resolving conflicts.\nAdditional arguments are passed directly to the system\n<i>diff</i> command installed in PATH.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>status</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Print paths with conflicts\nwhose merge resolution rerere will record.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>remaining</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Print paths with conflicts\nthat have not been autoresolved by rerere. This includes\npaths whose resolutions cannot be tracked by rerere, such as\nconflicting submodules.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>gc</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Prune records of\nconflicted merges that occurred a long time ago. By default,\nunresolved conflicts older than 15 days and resolved\nconflicts older than 60 days are pruned. These defaults are\ncontrolled via the <b>gc.rerereUnresolved</b> and\n<b>gc.rerereResolved</b> configuration variables\nrespectively.</big></p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>When your\ntopic branch modifies an overlapping area that your master\nbranch (or upstream) touched since your topic branch forked\nfrom it, you may want to test it with the latest master,\neven before your topic branch is ready to be pushed\nupstream:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>o---*---o\ntopic <br>\n/ <br>\no---o---o---*---o---o master</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>For such a\ntest, you need to merge master and topic somehow. One way to\ndo it is to pull master into the topic branch:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ git\nswitch topic <br>\n$ git merge master</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>o---*---o---+\ntopic <br>\n/ / <br>\no---o---o---*---o---o master</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\ncommits marked with <b>*</b> touch the same area in the same\nfile; you need to resolve the conflicts when creating the\ncommit marked with <b>+</b>. Then you can test the result to\nmake sure your work-in-progress still works with what is in\nthe latest master.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>After this\ntest merge, there are two ways to continue your work on the\ntopic. The easiest is to build on top of the test merge\ncommit <b>+</b>, and when your work in the topic branch is\nfinally ready, pull the topic branch into master, and/or ask\nthe upstream to pull from you. By that time, however, the\nmaster or the upstream might have been advanced since the\ntest merge <b>+</b>, in which case the final commit graph\nwould look like this:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ git\nswitch topic <br>\n$ git merge master <br>\n$ ... work on both topic and master branches <br>\n$ git switch master <br>\n$ git merge topic</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>o---*---o---+---o---o\ntopic <br>\n/ / \\ <br>\no---o---o---*---o---o---o---o---+ master</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>When your\ntopic branch is long-lived, however, your topic branch would\nend up having many such &quot;Merge from master&quot;\ncommits on it, which would unnecessarily clutter the\ndevelopment history. Readers of the Linux kernel mailing\nlist may remember that Linus complained about such too\nfrequent test merges when a subsystem maintainer asked to\npull from a branch full of &quot;useless\nmerges&quot;.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>As an\nalternative, to keep the topic branch clean of test merges,\nyou could blow away the test merge, and keep building on top\nof the tip before the test merge:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ git\nswitch topic <br>\n$ git merge master <br>\n$ git reset --hard HEAD^ ;# rewind the test merge <br>\n$ ... work on both topic and master branches <br>\n$ git switch master <br>\n$ git merge topic</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>o---*---o-------o---o\ntopic <br>\n/ \\ <br>\no---o---o---*---o---o---o---o---+ master</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>This would\nleave only one merge commit when your topic branch is\nfinally ready and merged into the master branch. This merge\nwould require you to resolve the conflict, introduced by the\ncommits marked with <b>*</b>. However, this conflict is\noften the same conflict you resolved when you created the\ntest merge you blew away. <i>git rerere</i> helps you\nresolve this final conflicted merge using the information\nfrom your earlier hand resolve.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Running\nthe <i>git rerere</i> command immediately after a conflicted\nautomerge records the conflicted working tree files, with\nthe usual conflict markers\n<b>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</b>, <b>=======</b>, and\n<b>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</b> in them. Later, after\nyou are done resolving the conflicts, running <i>git\nrerere</i> again will record the resolved state of these\nfiles. Suppose you did this when you created the test merge\nof master into the topic branch.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Next time,\nafter seeing the same conflicted automerge, running <i>git\nrerere</i> will perform a three-way merge between the\nearlier conflicted automerge, the earlier manual resolution,\nand the current conflicted automerge. If this three-way\nmerge resolves cleanly, the result is written out to your\nworking tree file, so you do not have to manually resolve\nit. Note that <i>git rerere</i> leaves the index file alone,\nso you still need to do the final sanity checks with <b>git\ndiff</b> (or <b>git diff -c</b>) and <i>git add</i> when you\nare satisfied.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>As a\nconvenience measure, <i>git merge</i> automatically invokes\n<i>git rerere</i> upon exiting with a failed automerge and\n<i>git rerere</i> records the hand resolve when it is a new\nconflict, or reuses the earlier hand resolve when it is not.\n<i>git commit</i> also invokes <i>git rerere</i> when\ncommitting a merge result. What this means is that you do\nnot have to do anything special yourself (besides enabling\nthe rerere.enabled config variable).</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>In our\nexample, when you do the test merge, the manual resolution\nis recorded, and it will be reused when you do the actual\nmerge later with the updated master and topic branch, as\nlong as the recorded resolution is still\napplicable.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\ninformation <i>git rerere</i> records is also used when\nrunning <i>git rebase</i>. After blowing away the test merge\nand continuing development on the topic branch:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>o---*---o-------o---o\ntopic <br>\n/ <br>\no---o---o---*---o---o---o---o master</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ git\nrebase master topic</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>o---*---o-------o---o\ntopic <br>\n/ <br>\no---o---o---*---o---o---o---o master</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>you could\nrun <b>git rebase master topic</b>, to bring yourself up to\ndate before your topic is ready to be sent upstream. This\nwould result in falling back to a three-way merge, and it\nwould conflict the same way as the test merge you resolved\nearlier. <i>git rerere</i> will be run by <i>git rebase</i>\nto help you resolve this conflict.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>[NOTE]\n<i>git rerere</i> relies on the conflict markers in the file\nto detect the conflict. If the file already contains lines\nthat look the same as lines with conflict markers, <i>git\nrerere</i> may fail to record a conflict resolution. To work\naround this, the <b>conflict-marker-size</b> setting in\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> can be used.</big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#GIT\">GIT</a>"]}