{"name":"git-http-backend","body":"\n\n<h1 align=\"center\">GIT-HTTP-BACKEND</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-http-backend\n- Server side implementation of Git over HTTP</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nhttp-backend</i></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A simple CGI\nprogram to serve the contents of a Git repository to Git\nclients accessing the repository over http:// and https://\nprotocols. The program supports clients fetching using both\nthe smart HTTP protocol and the backwards-compatible dumb\nHTTP protocol, as well as clients pushing using the smart\nHTTP protocol. It also supports Git&rsquo;s more-efficient\n&quot;v2&quot; protocol if properly configured; see the\ndiscussion of <b>GIT_PROTOCOL</b> in the ENVIRONMENT section\nbelow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It verifies\nthat the directory has the magic file\n&quot;git-daemon-export-ok&quot;, and it will refuse to\nexport any Git directory that hasn&rsquo;t explicitly been\nmarked for export this way (unless the\n<b>GIT_HTTP_EXPORT_ALL</b> environmental variable is\nset).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\nonly the <b>upload-pack</b> service is enabled, which serves\n<i>git fetch-pack</i> and <i>git ls-remote</i> clients,\nwhich are invoked from <i>git fetch</i>, <i>git pull</i>,\nand <i>git clone</i>. If the client is authenticated, the\n<b>receive-pack</b> service is enabled, which serves <i>git\nsend-pack</i> clients, which is invoked from <i>git\npush</i>.</p>\n\n<h2>SERVICES\n<a name=\"SERVICES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These services\ncan be enabled/disabled using the per-repository\nconfiguration file:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">http.getanyfile</p>\n\n<p style=\"margin-left:17%;\">This serves Git clients older\nthan version 1.6.6 that are unable to use the upload pack\nservice. When enabled, clients are able to read any file\nwithin the repository, including objects that are no longer\nreachable from a branch but are still present. It is enabled\nby default, but a repository can disable it by setting this\nconfiguration item to <b>false</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">http.uploadpack</p>\n\n<p style=\"margin-left:17%;\">This serves <i>git\nfetch-pack</i> and <i>git ls-remote</i> clients. It is\nenabled by default, but a repository can disable it by\nsetting this configuration item to <b>false</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">http.receivepack</p>\n\n<p style=\"margin-left:17%;\">This serves <i>git\nsend-pack</i> clients, allowing push. It is disabled by\ndefault for anonymous users, and enabled by default for\nusers authenticated by the web server. It can be disabled by\nsetting this item to <b>false</b>, or enabled for all users,\nincluding anonymous users, by setting it to <b>true</b>.</p>\n\n<h2>URL TRANSLATION\n<a name=\"URL TRANSLATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To determine\nthe location of the repository on disk, <i>git\nhttp-backend</i> concatenates the environment variables\nPATH_INFO, which is set automatically by the web server, and\nGIT_PROJECT_ROOT, which must be set manually in the web\nserver configuration. If GIT_PROJECT_ROOT is not set, <i>git\nhttp-backend</i> reads PATH_TRANSLATED, which is also set\nautomatically by the web server.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of the\nfollowing examples map\n<b>http://$hostname/git/foo/bar.git</b> to\n<b>/var/www/git/foo/bar.git</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Apache 2.x</p>\n\n<p style=\"margin-left:17%;\">Ensure mod_cgi, mod_alias, and\nmod_env are enabled, set GIT_PROJECT_ROOT (or DocumentRoot)\nappropriately, and create a ScriptAlias to the CGI:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">SetEnv\nGIT_PROJECT_ROOT /var/www/git <br>\nSetEnv GIT_HTTP_EXPORT_ALL <br>\nScriptAlias /git/\n/usr/libexec/git-core/git-http-backend/</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"># This is not\nstrictly necessary using Apache and a modern version of <br>\n# git-http-backend, as the webserver will pass along the\nheader in the <br>\n# environment as HTTP_GIT_PROTOCOL, and http-backend will\ncopy that into <br>\n# GIT_PROTOCOL. But you may need this line (or something\nsimilar if you <br>\n# are using a different webserver), or if you want to\nsupport older Git <br>\n# versions that did not do that copying. <br>\n# <br>\n# Having the webserver set up GIT_PROTOCOL is perfectly fine\neven with <br>\n# modern versions (and will take precedence over\nHTTP_GIT_PROTOCOL, <br>\n# which means it can be used to override the client's\nrequest). <br>\nSetEnvIf Git-Protocol &quot;.*&quot; GIT_PROTOCOL=$0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To enable\nanonymous read access but authenticated write access,\nrequire authorization for both the initial ref advertisement\n(which we detect as a push via the service parameter in the\nquery string), and the receive-pack invocation itself:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">RewriteCond\n%{QUERY_STRING} service=git-receive-pack [OR] <br>\nRewriteCond %{REQUEST_URI} /git-receive-pack$ <br>\nRewriteRule ^/git/ - [E=AUTHREQUIRED:yes]</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;LocationMatch\n&quot;^/git/&quot;&gt; <br>\nOrder Deny,Allow <br>\nDeny from env=AUTHREQUIRED</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">AuthType Basic\n<br>\nAuthName &quot;Git Access&quot; <br>\nRequire group committers <br>\nSatisfy Any <br>\n... <br>\n&lt;/LocationMatch&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you do not\nhave <b>mod_rewrite</b> available to match against the query\nstring, it is sufficient to just protect\n<b>git-receive-pack</b> itself, like:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;LocationMatch\n&quot;^/git/.*/git-receive-pack$&quot;&gt; <br>\nAuthType Basic <br>\nAuthName &quot;Git Access&quot; <br>\nRequire group committers <br>\n... <br>\n&lt;/LocationMatch&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In this mode,\nthe server will not request authentication until the client\nactually starts the object negotiation phase of the push,\nrather than during the initial contact. For this reason, you\nmust also enable the <b>http.receivepack</b> config option\nin any repositories that should accept a push. The default\nbehavior, if <b>http.receivepack</b> is not set, is to\nreject any pushes by unauthenticated users; the initial\nrequest will therefore report <b>403 Forbidden</b> to the\nclient, without even giving an opportunity for\nauthentication.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To require\nauthentication for both reads and writes, use a Location\ndirective around the repository, or one of its parent\ndirectories:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;Location\n/git/private&gt; <br>\nAuthType Basic <br>\nAuthName &quot;Private Git Access&quot; <br>\nRequire group committers <br>\n... <br>\n&lt;/Location&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To serve gitweb\nat the same url, use a ScriptAliasMatch to only those URLs\nthat <i>git http-backend</i> can handle, and forward the\nrest to gitweb:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">ScriptAliasMatch\n\\ <br>\n&quot;(?x)^/git/(.*/(HEAD | \\ <br>\ninfo/refs | \\ <br>\nobjects/(info/[^/]+ | \\ <br>\n[0-9a-f]{2}/[0-9a-f]{38} | \\ <br>\npack/pack-[0-9a-f]{40}\\.(pack|idx)) | \\ <br>\ngit-(upload|receive)-pack))$&quot; \\ <br>\n/usr/libexec/git-core/git-http-backend/$1</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">ScriptAlias\n/git/ /var/www/cgi-bin/gitweb.cgi/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To serve\nmultiple repositories from different <a href=\"https://man.page/7/gitnamespaces\">gitnamespaces(7)</a>\nin a single repository:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">SetEnvIf\nRequest_URI &quot;^/git/([^/]*)&quot; GIT_NAMESPACE=$1 <br>\nScriptAliasMatch ^/git/[^/]*(.*)\n/usr/libexec/git-core/git-http-backend/storage.git$1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Accelerated\nstatic Apache 2.x</p>\n\n<p style=\"margin-left:17%;\">Similar to the above, but\nApache can be used to return static files that are stored on\ndisk. On many systems this may be more efficient as Apache\ncan ask the kernel to copy the file contents from the file\nsystem directly to the network:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">SetEnv\nGIT_PROJECT_ROOT /var/www/git</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">AliasMatch\n^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$ /var/www/git/$1\n<br>\nAliasMatch\n^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$\n/var/www/git/$1 <br>\nScriptAlias /git/\n/usr/libexec/git-core/git-http-backend/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This can be\ncombined with the gitweb configuration:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">SetEnv\nGIT_PROJECT_ROOT /var/www/git</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">AliasMatch\n^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$ /var/www/git/$1\n<br>\nAliasMatch\n^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$\n/var/www/git/$1 <br>\nScriptAliasMatch \\ <br>\n&quot;(?x)^/git/(.*/(HEAD | \\ <br>\ninfo/refs | \\ <br>\nobjects/info/[^/]+ | \\ <br>\ngit-(upload|receive)-pack))$&quot; \\ <br>\n/usr/libexec/git-core/git-http-backend/$1 <br>\nScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Lighttpd</p>\n\n<p style=\"margin-left:17%;\">Ensure that <b>mod_cgi</b>,\n<b>mod_alias</b>, <b>mod_auth</b>, <b>mod_setenv</b> are\nloaded, then set <b>GIT_PROJECT_ROOT</b> appropriately and\nredirect all requests to the CGI:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">alias.url += (\n&quot;/git&quot; =&gt;\n&quot;/usr/lib/git-core/git-http-backend&quot; ) <br>\n$HTTP[&quot;url&quot;] =~ &quot;^/git&quot; { <br>\ncgi.assign = (&quot;&quot; =&gt; &quot;&quot;) <br>\nsetenv.add-environment = ( <br>\n&quot;GIT_PROJECT_ROOT&quot; =&gt; &quot;/var/www/git&quot;,\n<br>\n&quot;GIT_HTTP_EXPORT_ALL&quot; =&gt; &quot;&quot; <br>\n) <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To enable\nanonymous read access but authenticated write access:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">$HTTP[&quot;querystring&quot;]\n=~ &quot;service=git-receive-pack&quot; { <br>\ninclude &quot;git-auth.conf&quot; <br>\n} <br>\n$HTTP[&quot;url&quot;] =~\n&quot;^/git/.*/git-receive-pack$&quot; { <br>\ninclude &quot;git-auth.conf&quot; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">where\n<b>git-auth.conf</b> looks something like:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">auth.require =\n( <br>\n&quot;/&quot; =&gt; ( <br>\n&quot;method&quot; =&gt; &quot;basic&quot;, <br>\n&quot;realm&quot; =&gt; &quot;Git Access&quot;, <br>\n&quot;require&quot; =&gt; &quot;valid-user&quot; <br>\n) <br>\n) <br>\n# ...and set up auth.backend here</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To require\nauthentication for both reads and writes:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">$HTTP[&quot;url&quot;]\n=~ &quot;^/git/private&quot; { <br>\ninclude &quot;git-auth.conf&quot; <br>\n}</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nhttp-backend</i> relies upon the <b>CGI</b> environment\nvariables set by the invoking web server, including:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nPATH_INFO (if GIT_PROJECT_ROOT is set, otherwise\nPATH_TRANSLATED)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nREMOTE_USER</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nREMOTE_ADDR</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nCONTENT_TYPE</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nQUERY_STRING</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nREQUEST_METHOD</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>GIT_HTTP_EXPORT_ALL</b> environmental variable may be\npassed to <i>git-http-backend</i> to bypass the check for\nthe &quot;git-daemon-export-ok&quot; file in each repository\nbefore allowing export of that repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>GIT_HTTP_MAX_REQUEST_BUFFER</b> environment variable (or\nthe <b>http.maxRequestBuffer</b> config variable) may be set\nto change the largest ref negotiation request that git will\nhandle during a fetch; any fetch requiring a larger buffer\nwill not succeed. This value should not normally need to be\nchanged, but may be helpful if you are fetching from a\nrepository with an extremely large number of refs. The value\ncan be specified with a unit (e.g., <b>100M</b> for 100\nmegabytes). The default is 10 megabytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Clients may\nprobe for optional protocol capabilities (like the v2\nprotocol) using the <b>Git-Protocol</b> HTTP header. In\norder to support these, the contents of that header must\nappear in the <b>GIT_PROTOCOL</b> environment variable. Most\nwebservers will pass this header to the CGI via the\n<b>HTTP_GIT_PROTOCOL</b> variable, and\n<b>git-http-backend</b> will automatically copy that to\n<b>GIT_PROTOCOL</b>. However, some webservers may be more\nselective about which headers they&rsquo;ll pass, in which\ncase they need to be configured explicitly (see the mention\nof <b>Git-Protocol</b> in the Apache config from the earlier\nEXAMPLES section).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The backend\nprocess sets GIT_COMMITTER_NAME to <i>$REMOTE_USER</i> and\nGIT_COMMITTER_EMAIL to\n<i>${REMOTE_USER}@http.${REMOTE_ADDR}</i>, ensuring that any\nreflogs created by <i>git-receive-pack</i> contain some\nidentifying information of the remote user who performed the\npush.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All <b>CGI</b>\nenvironment variables are available to each of the hooks\ninvoked by the <i>git-receive-pack</i>.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SERVICES\">SERVICES</a>","<a href=\"#URL TRANSLATION\">URL TRANSLATION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#GIT\">GIT</a>"]}