{"name":"mawk","description":"mawk - pattern scanning and text processing language","body":"\n\n<h1 align=\"center\">MAWK</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mawk - pattern\nscanning and text processing language</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mawk</b>\n[-<b>W</b> <i>option</i>] [-<b>F</b> <i>value</i>]\n[-<b>v</b> <i>var=value</i>] [--] &rsquo;program text&rsquo;\n[file ...] <b><br>\nmawk</b> [-<b>W</b> <i>option</i>] [-<b>F</b> <i>value</i>]\n[-<b>v</b> <i>var=value</i>] [-<b>f</b> <i>program-file</i>]\n[--] [file ...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mawk</b> is\nan interpreter for the AWK Programming Language. The AWK\nlanguage is useful for manipulation of data files, text\nretrieval and processing, and for prototyping and\nexperimenting with algorithms. <b>mawk</b> is a <i>new\nawk</i> meaning it implements the AWK language as defined in\nAho, Kernighan and Weinberger, <i>The AWK Programming\nLanguage,</i> Addison-Wesley Publishing, 1988 (hereafter\nreferred to as the AWK book.) <b>mawk</b> conforms to the\nPOSIX 1003.2 (draft 11.3) definition of the AWK language\nwhich contains a few features not described in the AWK book,\nand <b>mawk</b> provides a small number of extensions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An AWK program\nis a sequence of <i>pattern {action}</i> pairs and function\ndefinitions. Short programs are entered on the command line\nusually enclosed in &rsquo; &rsquo; to avoid shell\ninterpretation. Longer programs can be read in from a file\nwith the -f option. Data input is read from the list of\nfiles on the command line or from standard input when the\nlist is empty. The input is broken into records as\ndetermined by the record separator variable, <b>RS</b>.\nInitially, <b>RS</b> = &ldquo;\\n&rdquo; and records are\nsynonymous with lines. Each record is compared against each\n<i>pattern</i> and if it matches, the program text for\n<i>{action}</i> is executed.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">-<b>F</b> <i>value</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\">sets the field separator,\n<b>FS</b>, to <i>value</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"18%\">\n\n\n<p>-<b>f</b> <i>file</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"66%\">\n\n\n<p>Program text is read from <i>file</i> instead of from\nthe command line. Multiple <b>-f</b> options are\nallowed.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"18%\">\n\n\n<p>-<b>v</b> <i>var=value</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"66%\">\n\n\n<p>assigns <i>value</i> to program variable <i>var</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"18%\">\n\n\n<p>--</p></td>\n<td width=\"5%\"></td>\n<td width=\"66%\">\n\n\n<p>indicates the unambiguous end of options.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above\noptions will be available with any POSIX compatible\nimplementation of AWK. Implementation specific options are\nprefaced with <b>-W</b>. <b>mawk</b> provides these:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">-<b>W</b> dump</p></td>\n<td width=\"5%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\">writes an assembler like listing\nof the internal representation of the program to stdout and\nexits 0 (on successful compilation).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"18%\">\n\n\n<p>-<b>W</b> exec <i>file</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"66%\">\n\n\n<p>Program text is read from <i>file</i> and this is the\nlast option.</p></td></tr>\n</table>\n\n<p style=\"margin-left:34%; margin-top: 1em\">This is a\nuseful alternative to -<b>f</b> on systems that support the\n<b>#!</b> &ldquo;magic number&rdquo; convention for\nexecutable scripts. Those implicitly pass the pathname of\nthe script itself as the final parameter, and expect no more\nthan one &ldquo;-&rdquo; option on the <b>#!</b> line.\nBecause <b>mawk</b> can combine multiple -<b>W</b> options\nseparated by commas, you can use this option when an\nadditional -<b>W</b> option is needed.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">-<b>W</b> help</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\">prints a usage message to stderr\nand exits (same as &ldquo;-<b>W&nbsp;</b>usage&rdquo;).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p>-<b>W</b> interactive</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>sets unbuffered writes to stdout and line buffered reads\nfrom stdin. Records from stdin are lines regardless of the\nvalue of <b>RS</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p>-<b>W</b> posix_space</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>forces <b>mawk</b> not to consider &rsquo;\\n&rsquo; to\nbe space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p>-<b>W</b> random=<i>num</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>calls <b>srand</b> with the given parameter (and\noverrides the auto-seeding behavior).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p>-<b>W</b> sprintf=<i>num</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>adjusts the size of <b>mawk</b>&rsquo;s internal sprintf\nbuffer to <i>num</i> bytes. More than rare use of this\noption indicates <b>mawk</b> should be recompiled.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p>-<b>W</b> usage</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>prints a usage message to stderr and exits (same as\n&ldquo;-<b>W&nbsp;</b>help&rdquo;).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p>-<b>W</b> version</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p><b>mawk</b> writes its version and copyright to stdout\nand compiled limits to stderr and exits 0.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mawk</b>\naccepts abbreviations for any of these options, e.g.,\n&ldquo;-<b>W&nbsp;</b>v&rdquo; and &ldquo;-<b>W</b>v&rdquo;\nboth tell <b>mawk</b> to show its version.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mawk</b>\nallows multiple <b>-W</b> options to be combined by\nseparating the options with commas, e.g.,\n-Wsprint=2000,posix. This is useful for executable <b>#!</b>\n&ldquo;magic number&rdquo; invocations in which only one\nargument is supported, e.g., -<b>Winteractive,exec</b>.</p>\n\n<h2>THE AWK LANGUAGE\n<a name=\"THE AWK LANGUAGE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>1. Program\nstructure</b> <br>\nAn AWK program is a sequence of <i>pattern {action}</i>\npairs and user function definitions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A pattern can\nbe:</p>\n\n<p style=\"margin-left:18%;\"><b>BEGIN <br>\nEND</b> <br>\nexpression <br>\nexpression , expression</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One, but not\nboth, of <i>pattern {action}</i> can be omitted. If\n<i>{action}</i> is omitted it is implicitly { print }. If\n<i>pattern</i> is omitted, then it is implicitly matched.\n<b>BEGIN</b> and <b>END</b> patterns require an action.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Statements are\nterminated by newlines, semi-colons or both. Groups of\nstatements such as actions or loop bodies are blocked via\n{&nbsp;...&nbsp;} as in C. The last statement in a block\ndoesn&rsquo;t need a terminator. Blank lines have no\nmeaning; an empty statement is terminated with a semi-colon.\nLong statements can be continued with a backslash, \\. A\nstatement can be broken without a backslash after a comma,\nleft brace, &amp;&amp;, ||, <b>do</b>, <b>else</b>, the\nright parenthesis of an <b>if</b>, <b>while</b> or\n<b>for</b> statement, and the right parenthesis of a\nfunction definition. A comment starts with # and extends to,\nbut does not include the end of line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nstatements control program flow inside blocks.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>if</b> (\n<i>expr</i> ) <i>statement</i></p>\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>if</b> (\n<i>expr</i> ) <i>statement</i> <b>else</b>\n<i>statement</i></p>\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>while</b> (\n<i>expr</i> ) <i>statement</i></p>\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>do</b>\n<i>statement</i> <b>while</b> ( <i>expr</i> )</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>for</b> (\n<i>opt_expr</i> ; <i>opt_expr</i> ; <i>opt_expr</i> )\n<i>statement</i></p>\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>for</b> (\n<i>var</i> <b>in</b> <i>array</i> ) <i>statement</i></p>\n\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>continue</b></p>\n\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>break</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>2. Data\ntypes, conversion and comparison</b> <br>\nThere are two basic data types, numeric and string. Numeric\nconstants can be integer like -2, decimal like 1.08, or in\nscientific notation like -1.1e4 or .28E-3. All numbers are\nrepresented internally and all computations are done in\nfloating point arithmetic. So for example, the expression\n0.2e2 == 20 is true and true is represented as 1.0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">String\nconstants are enclosed in double quotes.</p>\n\n<p align=\"center\" style=\"margin-top: 1em\">&quot;This is a\nstring with a newline at the end.\\n&quot;</p>\n\n<p style=\"margin-top: 1em\">Strings can be continued across\na line by escaping (\\) the newline. The following escape\nsequences are recognized.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\\\</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>\\</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\&quot;</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>&quot;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\a</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>alert, ascii 7</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\b</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>backspace, ascii 8</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\t</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>tab, ascii 9</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\n</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>newline, ascii 10</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\v</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>vertical tab, ascii 11</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\f</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>formfeed, ascii 12</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\r</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>carriage return, ascii 13</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\ddd</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>1, 2 or 3 octal digits for ascii ddd</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>\\xhh</p></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>1 or 2 hex digits for ascii hh</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you escape\nany other character \\c, you get \\c, i.e., <b>mawk</b>\nignores the escape.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are\nreally three basic data types; the third is <i>number and\nstring</i> which has both a numeric value and a string value\nat the same time. User defined variables come into existence\nwhen first referenced and are initialized to <i>null</i>, a\nnumber and string value which has numeric value 0 and string\nvalue &quot;&quot;. Non-trivial number and string typed data\ncome from input and are typically stored in fields. (See\nsection 4).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The type of an\nexpression is determined by its context and automatic type\nconversion occurs if needed. For example, to evaluate the\nstatements</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>y = x + 2 ; z = x &quot;hello&quot;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value\nstored in variable y will be typed numeric. If x is not\nnumeric, the value read from x is converted to numeric\nbefore it is added to 2 and stored in y. The value stored in\nvariable z will be typed string, and the value of x will be\nconverted to string if necessary and concatenated with\n&quot;hello&quot;. (Of course, the value and type stored in\nx is not changed by any conversions.) A string expression is\nconverted to numeric using its longest numeric prefix as\nwith <a href=\"https://man.page/3/atof\">atof(3)</a>. A numeric expression is converted to\nstring by replacing <i>expr</i> with <b>sprintf(CONVFMT</b>,\n<i>expr</i>), unless <i>expr</i> can be represented on the\nhost machine as an exact integer then it is converted to\n<b>sprintf</b>(&quot;%d&quot;, <i>expr</i>).\n<b>Sprintf()</b> is an AWK built-in that duplicates the\nfunctionality of <a href=\"https://man.page/3/sprintf\">sprintf(3)</a>, and <b>CONVFMT</b> is a\nbuilt-in variable used for internal conversion from number\nto string and initialized to &quot;%.6g&quot;. Explicit type\nconversions can be forced, <i>expr</i> &quot;&quot; is\nstring and <i>expr</i>+0 is numeric.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To evaluate,\n<i>expr</i>1 <b>rel-op</b> <i>expr</i>2, if both operands\nare numeric or number and string then the comparison is\nnumeric; if both operands are string the comparison is\nstring; if one operand is string, the non-string operand is\nconverted and the comparison is string. The result is\nnumeric, 1 or 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In boolean\ncontexts such as, <b>if</b> ( <i>expr</i> )\n<i>statement</i>, a string expression evaluates true if and\nonly if it is not the empty string &quot;&quot;; numeric\nvalues if and only if not numerically zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>3. Regular\nexpressions</b> <br>\nIn the AWK language, records, fields and strings are often\ntested for matching a <i>regular expression</i>. Regular\nexpressions are enclosed in slashes, and</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><i>expr</i> ~ /<i>r</i>/</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">is an AWK\nexpression that evaluates to 1 if <i>expr</i>\n&ldquo;matches&rdquo; <i>r</i>, which means a substring of\n<i>expr</i> is in the set of strings defined by <i>r</i>.\nWith no match the expression evaluates to 0; replacing ~\nwith the &ldquo;not match&rdquo; operator, !~ , reverses the\nmeaning. As pattern-action pairs,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>/<i>r</i>/ { <i>action</i> } and <b>$0</b> ~ /<i>r</i>/\n{ <i>action</i> }</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">are the same,\nand for each input record that matches <i>r</i>,\n<i>action</i> is executed. In fact, /<i>r</i>/ is an AWK\nexpression that is equivalent to (<b>$0</b> ~ /<i>r</i>/)\nanywhere except when on the right side of a match operator\nor passed as an argument to a built-in function that expects\na regular expression argument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">AWK uses\nextended regular expressions as with the <b>-E</b> option of\n<a href=\"https://man.page/1/grep\">grep(1)</a>. The regular expression metacharacters, i.e.,\nthose with special meaning in regular expressions are</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>\\ ^ $ . [ ] | ( ) * + ?</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Regular\nexpressions are built up from characters as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"19%\">\n\n\n<p style=\"margin-top: 1em\"><i>c</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p style=\"margin-top: 1em\">matches any non-metacharacter\n<i>c</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"19%\">\n\n\n<p>\\<i>c</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p>matches a character defined by the same escape sequences\nused in string constants or the literal character <i>c</i>\nif \\<i>c</i> is not an escape sequence.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"19%\">\n\n\n<p>.</p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p>matches any character (including newline).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"19%\">\n\n\n<p>^</p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p>matches the front of a string.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"19%\">\n\n\n<p>$</p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p>matches the back of a string.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"19%\">\n\n\n<p>[c1c2c3...]</p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p>matches any character in the class c1c2c3...&nbsp;. An\ninterval of characters is denoted c1-c2 inside a class\n[...].</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"19%\">\n\n\n<p>[^c1c2c3...]</p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p>matches any character not in the class c1c2c3...</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Regular\nexpressions are built up from other regular expressions as\nfollows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\"><i>r</i>1<i>r</i>2</p></td>\n<td width=\"9%\"></td>\n<td width=\"62%\">\n\n\n<p style=\"margin-top: 1em\">matches <i>r</i>1 followed\nimmediately by <i>r</i>2 (concatenation).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p><i>r</i>1 | <i>r</i>2</p></td>\n<td width=\"9%\"></td>\n<td width=\"62%\">\n\n\n<p>matches <i>r</i>1 or <i>r</i>2 (alternation).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p><i>r</i>*</p></td>\n<td width=\"9%\"></td>\n<td width=\"62%\">\n\n\n<p>matches <i>r</i> repeated zero or more times.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p><i>r</i>+</p></td>\n<td width=\"9%\"></td>\n<td width=\"62%\">\n\n\n<p>matches <i>r</i> repeated one or more times.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p><i>r</i>?</p></td>\n<td width=\"9%\"></td>\n<td width=\"62%\">\n\n\n<p>matches <i>r</i> zero or once.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p>(<i>r</i>)</p></td>\n<td width=\"9%\"></td>\n<td width=\"62%\">\n\n\n<p>matches <i>r</i>, providing grouping.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The increasing\nprecedence of operators is alternation, concatenation and\nunary (*, + or ?).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\nexample,</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/^[_a-zA-Z][_a-zA-Z0-9]*$/\nand</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n\n<p>/^[-+]?([0-9]+\\.?|\\.[0-9])[0-9]*([eE][-+]?[0-9]+)?$/</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">are matched by\nAWK identifiers and AWK numeric constants respectively. Note\nthat &ldquo;.&rdquo; has to be escaped to be recognized as a\ndecimal point, and that metacharacters are not special\ninside character classes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any expression\ncan be used on the right hand side of the ~ or !~ operators\nor passed to a built-in that expects a regular expression.\nIf needed, it is converted to string, and then interpreted\nas a regular expression. For example,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>BEGIN { identifier = &quot;[_a-zA-Z][_a-zA-Z0-9]*&quot;\n}</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>$0 ~ &quot;^&quot; identifier</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prints all\nlines that start with an AWK identifier.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mawk</b>\nrecognizes the empty regular expression, //, which matches\nthe empty string and hence is matched by any string at the\nfront, back and between every character. For example,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>echo abc | mawk { gsub(//, &quot;X&quot;) ; print }</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>XaXbXcX</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>4. Records\nand fields</b> <br>\nRecords are read in one at a time, and stored in the\n<i>field</i> variable <b>$0</b>. The record is split into\n<i>fields</i> which are stored in <b>$1</b>, <b>$2</b>, ...,\n<b>$NF</b>. The built-in variable <b>NF</b> is set to the\nnumber of fields, and <b>NR</b> and <b>FNR</b> are\nincremented by 1. Fields above <b>$NF</b> are set to\n&quot;&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Assignment to\n<b>$0</b> causes the fields and <b>NF</b> to be recomputed.\nAssignment to <b>NF</b> or to a field causes <b>$0</b> to be\nreconstructed by concatenating the <b>$i&rsquo;s</b>\nseparated by <b>OFS</b>. Assignment to a field with index\ngreater than <b>NF</b>, increases <b>NF</b> and causes\n<b>$0</b> to be reconstructed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Data input\nstored in fields is string, unless the entire field has\nnumeric form and then the type is number and string. For\nexample,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>echo 24 24E |</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>mawk &rsquo;{ print($1&gt;100, $1&gt;&quot;100&quot;,\n$2&gt;100, $2&gt;&quot;100&quot;) }&rsquo;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>0 1 1 1</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$0</b> and\n<b>$2</b> are string and <b>$1</b> is number and string. The\nfirst comparison is numeric, the second is string, the third\nis string (100 is converted to &quot;100&quot;), and the\nlast is string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>5.\nExpressions and operators</b> <br>\nThe expression syntax is similar to C. Primary expressions\nare numeric constants, string constants, variables, fields,\narrays and function calls. The identifier for a variable,\narray or function can be a sequence of letters, digits and\nunderscores, that does not start with a digit. Variables are\nnot declared; they exist when first referenced and are\ninitialized to <i>null</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">New expressions\nare composed with the following operators in order of\nincreasing precedence.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>assignment</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>= += -= *= /= %= ^=</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>conditional</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>? :</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>logical or</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>||</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>logical and</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>&amp;&amp;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>array membership</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p><b>in</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>matching</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n\n\n<p>~ !~</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>relational</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>&lt; &gt; &lt;= &gt;= == !=</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>concatenation</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>(no explicit operator)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>add ops</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>+ -</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>mul ops</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>* / %</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>unary</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>+ -</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>logical not</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>!</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>exponentiation</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>^</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>inc and dec</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>++ -- (both post and pre)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p><i>field</i></p></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n\n\n<p>$</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Assignment,\nconditional and exponentiation associate right to left; the\nother operators associate left to right. Any expression can\nbe parenthesized.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>6.\nArrays</b> <br>\nAwk provides one-dimensional arrays. Array elements are\nexpressed as <i>array</i>[<i>expr</i>]. <i>Expr</i> is\ninternally converted to string type, so, for example, A[1]\nand A[&quot;1&quot;] are the same element and the actual\nindex is &quot;1&quot;. Arrays indexed by strings are called\nassociative arrays. Initially an array is empty; elements\nexist when first accessed. An expression, <i>expr</i>\n<b>in</b> <i>array</i> evaluates to 1 if\n<i>array</i>[<i>expr</i>] exists, else to 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is a form\nof the <b>for</b> statement that loops over each index of an\narray.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>for</b> ( <i>var</i> <b>in</b> <i>array</i> )\n<i>statement</i></p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sets <i>var</i>\nto each index of <i>array</i> and executes <i>statement</i>.\nThe order that <i>var</i> transverses the indices of\n<i>array</i> is not defined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The statement,\n<b>delete</b> <i>array</i>[<i>expr</i>], causes\n<i>array</i>[<i>expr</i>] not to exist. <b>mawk</b> supports\nan extension, <b>delete</b> <i>array</i>, which deletes all\nelements of <i>array</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Multidimensional\narrays are synthesized with concatenation using the built-in\nvariable <b>SUBSEP</b>.\n<i>array</i>[<i>expr</i>1,<i>expr</i>2] is equivalent to\n<i>array</i>[<i>expr</i>1 <b>SUBSEP</b> <i>expr</i>2].\nTesting for a multidimensional element uses a parenthesized\nindex, such as</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>if ( (i, j) in A ) print A[i, j]</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>7.\nBuiltin-variables</b> <br>\nThe following variables are built-in and initialized before\nprogram execution.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p style=\"margin-top: 1em\"><b>ARGC</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\">number of command line\narguments.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>ARGV</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>array of command line arguments, 0..ARGC-1.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>CONVFMT</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>format for internal conversion of numbers to string,\ninitially = &quot;%.6g&quot;.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>ENVIRON</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>array indexed by environment variables. An environment\nstring, <i>var=value</i> is stored as\n<b>ENVIRON</b>[<i>var</i>] = <i>value</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>FILENAME</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>name of the current input file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>FNR</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>current record number in <b>FILENAME</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>FS</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>splits records into fields as a regular expression.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>NF</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>number of fields in the current record.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>NR</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>current record number in the total input stream.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>OFMT</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>format for printing numbers; initially =\n&quot;%.6g&quot;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>OFS</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>inserted between fields on output, initially = &quot;\n&quot;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>ORS</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>terminates each record on output, initially =\n&quot;\\n&quot;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>RLENGTH</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>length set by the last call to the built-in function,\n<b>match()</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>RS</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>input record separator, initially = &quot;\\n&quot;.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>RSTART</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>index set by the last call to <b>match()</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"13%\">\n\n\n<p><b>SUBSEP</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>used to build multiple array subscripts, initially =\n&quot;\\034&quot;.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>8. Built-in\nfunctions</b> <br>\nString functions</p>\n\n<p style=\"margin-left:18%;\">gsub(<i>r,s,t</i>)\ngsub(<i>r,s</i>)</p>\n\n<p style=\"margin-left:29%;\">Global substitution, every\nmatch of regular expression <i>r</i> in variable <i>t</i> is\nreplaced by string <i>s</i>. The number of replacements is\nreturned. If <i>t</i> is omitted, <b>$0</b> is used. An\n&amp; in the replacement string <i>s</i> is replaced by the\nmatched substring of <i>t</i>. \\&amp; and \\\\ put literal\n&amp; and \\, respectively, in the replacement string.</p>\n\n<p style=\"margin-left:18%;\">index(<i>s,t</i>)</p>\n\n<p style=\"margin-left:29%;\">If <i>t</i> is a substring of\n<i>s</i>, then the position where <i>t</i> starts is\nreturned, else 0 is returned. The first character of\n<i>s</i> is in position 1.</p>\n\n<p style=\"margin-left:18%;\">length(<i>s</i>)</p>\n\n<p style=\"margin-left:29%;\">Returns the length of string or\narray. <i>s</i>.</p>\n\n<p style=\"margin-left:18%;\">match(<i>s,r</i>)</p>\n\n<p style=\"margin-left:29%;\">Returns the index of the first\nlongest match of regular expression <i>r</i> in string\n<i>s</i>. Returns 0 if no match. As a side effect,\n<b>RSTART</b> is set to the return value. <b>RLENGTH</b> is\nset to the length of the match or -1 if no match. If the\nempty string is matched, <b>RLENGTH</b> is set to 0, and 1\nis returned if the match is at the front, and\nlength(<i>s</i>)+1 is returned if the match is at the\nback.</p>\n\n<p style=\"margin-left:18%;\">split(<i>s,A,r</i>)\nsplit(<i>s,A</i>)</p>\n\n<p style=\"margin-left:29%;\">String <i>s</i> is split into\nfields by regular expression <i>r</i> and the fields are\nloaded into array <i>A</i>. The number of fields is\nreturned. See section 11 below for more detail. If <i>r</i>\nis omitted, <b>FS</b> is used.</p>\n\n\n<p style=\"margin-left:18%;\">sprintf(<i>format,expr-list</i>)</p>\n\n<p style=\"margin-left:29%;\">Returns a string constructed\nfrom <i>expr-list</i> according to <i>format</i>. See the\ndescription of printf() below.</p>\n\n<p style=\"margin-left:18%;\">sub(<i>r,s,t</i>)\nsub(<i>r,s</i>)</p>\n\n<p style=\"margin-left:29%;\">Single substitution, same as\ngsub() except at most one substitution.</p>\n\n<p style=\"margin-left:18%;\">substr(<i>s,i,n</i>)\nsubstr(<i>s,i</i>)</p>\n\n<p style=\"margin-left:29%;\">Returns the substring of string\n<i>s</i>, starting at index <i>i</i>, of length <i>n</i>. If\n<i>n</i> is omitted, the suffix of <i>s</i>, starting at\n<i>i</i> is returned.</p>\n\n<p style=\"margin-left:18%;\">tolower(<i>s</i>)</p>\n\n<p style=\"margin-left:29%;\">Returns a copy of <i>s</i> with\nall upper case characters converted to lower case.</p>\n\n<p style=\"margin-left:18%;\">toupper(<i>s</i>)</p>\n\n<p style=\"margin-left:29%;\">Returns a copy of <i>s</i> with\nall lower case characters converted to upper case.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Time\nfunctions</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These are\navailable on systems which support the corresponding C\n<b>mktime</b> and <b>strftime</b> functions:</p>\n\n\n<p style=\"margin-left:18%;\">mktime(<i>specification</i>)</p>\n\n<p style=\"margin-left:29%;\">converts a date specification\nto a timestamp with the same units as <b>systime</b>. The\ndate specification is a string containing the components of\nthe date as decimal integers: <br>\nYYYY</p>\n\n<p style=\"margin-left:34%;\">the year, e.g., 2012</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"3%\">\n\n\n<p>MM</p></td>\n<td width=\"2%\"></td>\n<td width=\"54%\">\n\n\n<p>the month of the year starting at 1</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"3%\">\n\n\n<p>DD</p></td>\n<td width=\"2%\"></td>\n<td width=\"54%\">\n\n\n<p>the day of the month starting at 1</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"3%\">\n\n\n<p>HH</p></td>\n<td width=\"2%\"></td>\n<td width=\"54%\">\n\n\n<p>hour (0-23)</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"3%\">\n\n\n<p>MM</p></td>\n<td width=\"2%\"></td>\n<td width=\"54%\">\n\n\n<p>minute (0-59)</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"3%\">\n\n\n<p>SS</p></td>\n<td width=\"2%\"></td>\n<td width=\"54%\">\n\n\n<p>seconds (0-59)</p></td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:29%;\">DST</p>\n\n<p style=\"margin-left:34%;\">tells how to treat timezone\nversus daylight savings time:</p>\n\n<p style=\"margin-left:37%;\">positive</p>\n\n<p style=\"margin-left:42%;\">DST is in effect</p>\n\n<p style=\"margin-left:37%;\">zero (default)</p>\n\n<p style=\"margin-left:42%;\">DST is not in effect</p>\n\n<p style=\"margin-left:37%;\">negative</p>\n\n<p style=\"margin-left:42%;\">mktime() should (use timezone\ninformation and system databases to) attempt to determine\nwhether DST is in effect at the specified time.</p>\n\n<p style=\"margin-left:18%;\">strftime([<i>format</i> [,\n<i>timestamp</i> [, <i>utc</i> ]]])</p>\n\n<p style=\"margin-left:29%;\">formats the given timestamp\nusing the format (passed to the C <b>strftime</b>\nfunction):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"4%\"></td>\n<td width=\"65%\">\n\n\n<p>If the <i>format</i> parameter is missing,\n&quot;%c&quot; is used.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"4%\"></td>\n<td width=\"65%\">\n\n\n<p>If the <i>timestamp</i> parameter is missing, the\ncurrent value from <b>systime</b> is used.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"4%\"></td>\n<td width=\"65%\">\n\n\n<p>If the <i>utc</i> parameter is present and nonzero, the\nresult is in UTC. Otherwise local time is used.</p></td></tr>\n</table>\n\n<p style=\"margin-left:18%;\">systime()</p>\n\n<p style=\"margin-left:29%;\">returns the current time of day\nas the number of seconds since the Epoch (1970-01-01\n00:00:00 UTC on POSIX systems).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Arithmetic\nfunctions</p>\n\n\n<p style=\"margin-left:18%; margin-top: 1em\">atan2(<i>y,x</i>)\nArctan of <i>y</i>/<i>x</i> between -pi and pi.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>cos(<i>x</i>)</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n\n\n<p>Cosine function, <i>x</i> in radians.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>exp(<i>x</i>)</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n\n\n<p>Exponential function.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>int(<i>x</i>)</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n\n\n<p>Returns <i>x</i> truncated towards zero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>log(<i>x</i>)</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n\n\n<p>Natural logarithm.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>rand()</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n\n\n<p>Returns a random number between zero and one.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>sin(<i>x</i>)</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n\n\n<p>Sine function, <i>x</i> in radians.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>sqrt(<i>x</i>)</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"-10%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n\n\n<p>Returns square root of <i>x</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:18%;\">srand(<i>expr</i>) srand()</p>\n\n<p style=\"margin-left:29%;\">Seeds the random number\ngenerator, using the clock if <i>expr</i> is omitted, and\nreturns the value of the previous seed. Srand(<i>expr</i>)\nis useful for repeating pseudo random sequences.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">Note:\n<b>mawk</b> is normally configured to seed the random number\ngenerator from the clock at startup, making it unnecessary\nto call srand(). This feature can be suppressed via\nconditional compile, or overridden using the <b>-Wrandom</b>\noption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>9. Input and\noutput</b> <br>\nThere are two output statements, <b>print</b> and\n<b>printf</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"8%\">\n\n\n<p>print</p></td>\n<td width=\"3%\"></td>\n<td width=\"53%\">\n\n\n<p>writes <b>$0 ORS</b> to standard output.</p></td>\n<td width=\"18%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:18%;\">print <i>expr</i>1,\n<i>expr</i>2, ..., <i>expr</i>n</p>\n\n<p style=\"margin-left:29%;\">writes <i>expr</i>1 <b>OFS</b>\n<i>expr</i>2 <b>OFS</b> ... <i>expr</i>n <b>ORS</b> to\nstandard output. Numeric expressions are converted to string\nwith <b>OFMT</b>.</p>\n\n<p style=\"margin-left:18%;\">printf <i>format,\nexpr-list</i></p>\n\n<p style=\"margin-left:29%;\">duplicates the printf C library\nfunction writing to standard output. The complete ANSI C\nformat specifications are recognized with conversions %c,\n%d, %e, %E, %f, %g, %G, %i, %o, %s, %u, %x, %X and %%, and\nconversion qualifiers h and l.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The argument\nlist to print or printf can optionally be enclosed in\nparentheses. Print formats numbers using <b>OFMT</b> or\n&quot;%d&quot; for exact integers. &quot;%c&quot; with a\nnumeric argument prints the corresponding 8 bit character,\nwith a string argument it prints the first character of the\nstring. The output of print and printf can be redirected to\na file or command by appending &gt; <i>file</i>, &gt;&gt;\n<i>file</i> or | <i>command</i> to the end of the print\nstatement. Redirection opens <i>file</i> or <i>command</i>\nonly once, subsequent redirections append to the already\nopen stream. By convention, <b>mawk</b> associates the\nfilename</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>&quot;/dev/stderr&quot; with stderr,</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>&quot;/dev/stdout&quot; with stdout,</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>&quot;-&quot; and &quot;/dev/stdin&quot; with stdin.</p></td>\n<td width=\"29%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The association\nwith stderr is especially useful because it allows print and\nprintf to be redirected to stderr. These names can also be\npassed to functions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The input\nfunction <b>getline</b> has the following variations.</p>\n\n<p style=\"margin-left:18%;\">getline</p>\n\n<p style=\"margin-left:29%;\">reads into <b>$0</b>, updates\nthe fields, <b>NF</b>, <b>NR</b> and <b>FNR</b>.</p>\n\n<p style=\"margin-left:18%;\">getline &lt; <i>file</i></p>\n\n<p style=\"margin-left:29%;\">reads into <b>$0</b> from\n<i>file</i>, updates the fields and <b>NF</b>.</p>\n\n<p style=\"margin-left:18%;\">getline <i>var</i></p>\n\n<p style=\"margin-left:29%;\">reads the next record into\n<i>var</i>, updates <b>NR</b> and <b>FNR</b>.</p>\n\n<p style=\"margin-left:18%;\">getline <i>var</i> &lt;\n<i>file</i></p>\n\n<p style=\"margin-left:29%;\">reads the next record of\n<i>file</i> into <i>var</i>.</p>\n\n<p style=\"margin-left:18%;\"><i>command</i> | getline</p>\n\n<p style=\"margin-left:29%;\">pipes a record from\n<i>command</i> into <b>$0</b> and updates the fields and\n<b>NF</b>.</p>\n\n<p style=\"margin-left:18%;\"><i>command</i> | getline\n<i>var</i></p>\n\n<p style=\"margin-left:29%;\">pipes a record from\n<i>command</i> into <i>var</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Getline returns\n0 on end-of-file, -1 on error, otherwise 1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Commands on the\nend of pipes are executed by /bin/sh.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>close</b>(<i>expr</i>) closes the file or pipe associated\nwith <i>expr</i>. Close returns 0 if <i>expr</i> is an open\nfile, the exit status if <i>expr</i> is a piped command, and\n-1 otherwise. Close is used to reread a file or command,\nmake sure the other end of an output pipe is finished or\nconserve file resources.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>fflush</b>(<i>expr</i>) flushes the output file or pipe\nassociated with <i>expr</i>. Fflush returns 0 if <i>expr</i>\nis an open output stream else -1. Fflush without an argument\nflushes stdout. Fflush with an empty argument (&quot;&quot;)\nflushes all open output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>system</b>(<i>expr</i>) uses the C runtime <b>system</b>\ncall to execute <i>expr</i> and returns the corresponding\nwait status of the command as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>if the <b>system</b> call failed, setting the status to\n-1, <i>mawk</i> returns that value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>if the command exited normally, <i>mawk</i> returns its\nexit-status.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>if the command exited due to a signal such as\n<b>SIGHUP</b>, <i>mawk</i> returns the signal number plus\n256.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Changes made to\nthe <b>ENVIRON</b> array are not passed to commands executed\nwith <b>system</b> or pipes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>10. User\ndefined functions</b> <br>\nThe syntax for a user defined function is</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>function</b>\nname( <i>args</i> ) { <i>statements</i> }</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\nbody can contain a return statement</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>return</b>\n<i>opt_expr</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A return\nstatement is not required. Function calls may be nested or\nrecursive. Functions are passed expressions by value and\narrays by reference. Extra arguments serve as local\nvariables and are initialized to <i>null</i>. For example,\ncsplit(<i>s,A</i>) puts each character of <i>s</i> into\narray <i>A</i> and returns the length of <i>s</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">function\ncsplit(s, A, n, i)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>{</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>n = length(s)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>for( i = 1 ; i &lt;= n ; i++ ) A[i] = substr(s, i,\n1)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>return n</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>}</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Putting extra\nspace between passed arguments and local variables is\nconventional. Functions can be referenced before they are\ndefined, but the function name and the &rsquo;(&rsquo; of\nthe arguments must touch to avoid confusion with\nconcatenation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A function\nparameter is normally a scalar value (number or string). If\nthere is a forward reference to a function using an array as\na parameter, the function&rsquo;s corresponding parameter\nwill be treated as an array.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>11.\nSplitting strings, records and files</b> <br>\nAwk programs use the same algorithm to split strings into\narrays with split(), and records into fields on <b>FS</b>.\n<b>mawk</b> uses essentially the same algorithm to split\nfiles into records on <b>RS</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Split(<i>expr,A,sep</i>)\nworks as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\">(1)</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">If <i>sep</i> is omitted, it is\nreplaced by <b>FS</b>. <i>Sep</i> can be an expression or\nregular expression. If it is an expression of non-string\ntype, it is converted to string.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"5%\">\n\n\n<p>(2)</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>If <i>sep</i> = &quot; &quot; (a single space), then\n&lt;SPACE&gt; is trimmed from the front and back of\n<i>expr</i>, and <i>sep</i> becomes &lt;SPACE&gt;.\n<b>mawk</b> defines &lt;SPACE&gt; as the regular expression\n/[&nbsp;\\t\\n]+/. Otherwise <i>sep</i> is treated as a\nregular expression, except that meta-characters are ignored\nfor a string of length 1, e.g., split(x, A, &quot;*&quot;)\nand split(x, A, /\\*/) are the same.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"5%\">\n\n\n<p>(3)</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>If <i>expr</i> is not string, it is converted to string.\nIf <i>expr</i> is then the empty string &quot;&quot;,\nsplit() returns 0 and <i>A</i> is set empty. Otherwise, all\nnon-overlapping, non-null and longest matches of <i>sep</i>\nin <i>expr</i>, separate <i>expr</i> into fields which are\nloaded into <i>A</i>. The fields are placed in A[1], A[2],\n..., A[n] and split() returns n, the number of fields which\nis the number of matches plus one. Data placed in <i>A</i>\nthat looks numeric is typed number and string.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Splitting\nrecords into fields works the same except the pieces are\nloaded into <b>$1</b>, <b>$2</b>,..., <b>$NF</b>. If\n<b>$0</b> is empty, <b>NF</b> is set to 0 and all <b>$i</b>\nto &quot;&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mawk</b>\nsplits files into records by the same algorithm, but with\nthe slight difference that <b>RS</b> is really a terminator\ninstead of a separator. (<b>ORS</b> is really a terminator\ntoo).</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">E.g., if\n<b>FS</b> = &ldquo;:+&rdquo; and <b>$0</b> =\n&ldquo;a::b:&rdquo; , then <b>NF</b> = 3 and <b>$1</b> =\n&ldquo;a&rdquo;, <b>$2</b> = &ldquo;b&rdquo; and <b>$3</b> =\n&quot;&quot;, but if &ldquo;a::b:&rdquo; is the contents of\nan input file and <b>RS</b> = &ldquo;:+&rdquo;, then there\nare two records &ldquo;a&rdquo; and &ldquo;b&rdquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>RS</b> =\n&quot; &quot; is not special.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>FS</b> =\n&quot;&quot;, then <b>mawk</b> breaks the record into\nindividual characters, and, similarly,\nsplit(<i>s,A,</i>&quot;&quot;) places the individual\ncharacters of <i>s</i> into <i>A</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>12.\nMulti-line records</b> <br>\nSince <b>mawk</b> interprets <b>RS</b> as a regular\nexpression, multi-line records are easy. Setting <b>RS</b> =\n&quot;\\n\\n+&quot;, makes one or more blank lines separate\nrecords. If <b>FS</b> = &quot; &quot; (the default), then\nsingle newlines, by the rules for &lt;SPACE&gt; above,\nbecome space and single newlines are field separators.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">For example,\nif</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"2%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">a file is\n&quot;a&nbsp;b\\nc\\n\\n&quot;,</p> </td>\n<td width=\"40%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p><b>RS</b> = &quot;\\n\\n+&quot; and</p></td>\n<td width=\"40%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p><b>FS</b> = &quot;&nbsp;&quot;,</p></td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:18%; margin-top: 1em\">then there is\none record &ldquo;a&nbsp;b\\nc&rdquo; with three fields\n&ldquo;a&rdquo;, &ldquo;b&rdquo; and &ldquo;c&rdquo;:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"2%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\">Changing <b>FS</b> =\n&ldquo;\\n&rdquo;, gives two fields &ldquo;a b&rdquo; and\n&ldquo;c&rdquo;;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>changing <b>FS</b> = &ldquo;&rdquo;, gives one field\nidentical to the record.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want\nlines with spaces or tabs to be considered blank, set\n<b>RS</b> = &ldquo;\\n([&nbsp;\\t]*\\n)+&rdquo;. For\ncompatibility with other awks, setting <b>RS</b> =\n&quot;&quot; has the same effect as if blank lines are\nstripped from the front and back of files and then records\nare determined as if <b>RS</b> = &ldquo;\\n\\n+&rdquo;. POSIX\nrequires that &ldquo;\\n&rdquo; always separates records when\n<b>RS</b> = &quot;&quot; regardless of the value of\n<b>FS</b>. <b>mawk</b> does not support this convention,\nbecause defining &ldquo;\\n&rdquo; as &lt;SPACE&gt; makes it\nunnecessary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most of the\ntime when you change <b>RS</b> for multi-line records, you\nwill also want to change <b>ORS</b> to &ldquo;\\n\\n&rdquo; so\nthe record spacing is preserved on output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>13. Program\nexecution</b> <br>\nThis section describes the order of program execution. First\n<b>ARGC</b> is set to the total number of command line\narguments passed to the execution phase of the program.\n<b>ARGV[0]</b> is set the name of the AWK interpreter and\n<b>ARGV[1]</b> ... <b>ARGV[ARGC-1]</b> holds the remaining\ncommand line arguments exclusive of options and program\nsource. For example with</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">mawk -f prog\nv=1 A t=hello B</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ARGC</b> = 5\nwith <b>ARGV[0]</b> = &quot;mawk&quot;, <b>ARGV[1]</b> =\n&quot;v=1&quot;, <b>ARGV[2]</b> = &quot;A&quot;,\n<b>ARGV[3]</b> = &quot;t=hello&quot; and <b>ARGV[4]</b> =\n&quot;B&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Next, each\n<b>BEGIN</b> block is executed in order. If the program\nconsists entirely of <b>BEGIN</b> blocks, then execution\nterminates, else an input stream is opened and execution\ncontinues. If <b>ARGC</b> equals 1, the input stream is set\nto stdin, else the command line arguments <b>ARGV[1]</b> ...\n<b>ARGV[ARGC-1]</b> are examined for a file argument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nline arguments divide into three sets: file arguments,\nassignment arguments and empty strings &quot;&quot;. An\nassignment has the form <i>var</i>=<i>string</i>. When an\n<b>ARGV[i]</b> is examined as a possible file argument, if\nit is empty it is skipped; if it is an assignment argument,\nthe assignment to <i>var</i> takes place and <b>i</b> skips\nto the next argument; else <b>ARGV[i]</b> is opened for\ninput. If it fails to open, execution terminates with exit\ncode 2. If no command line argument is a file argument, then\ninput comes from stdin. Getline in a <b>BEGIN</b> action\nopens input. &ldquo;-&rdquo; as a file argument denotes\nstdin.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once an input\nstream is open, each input record is tested against each\n<i>pattern</i>, and if it matches, the associated\n<i>action</i> is executed. An expression pattern matches if\nit is boolean true (see the end of section 2). A\n<b>BEGIN</b> pattern matches before any input has been read,\nand an <b>END</b> pattern matches after all input has been\nread. A range pattern, <i>expr</i>1,<i>expr</i>2 , matches\nevery record between the match of <i>expr</i>1 and the match\n<i>expr</i>2 inclusively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When end of\nfile occurs on the input stream, the remaining command line\narguments are examined for a file argument, and if there is\none it is opened, else the <b>END</b> <i>pattern</i> is\nconsidered matched and all <b>END</b> <i>actions</i> are\nexecuted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the example,\nthe assignment v=1 takes place after the <b>BEGIN</b>\n<i>actions</i> are executed, and the data placed in v is\ntyped number and string. Input is then read from file A. On\nend of file A, t is set to the string &quot;hello&quot;, and\nB is opened for input. On end of file B, the <b>END</b>\n<i>actions</i> are executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Program flow at\nthe <i>pattern {action}</i> level can be changed with\nthe</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>next</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>nextfile</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>exit</b> <i>opt_expr</i></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">statements:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">A <b>next</b> statement causes\nthe next input record to be read and pattern testing to\nrestart with the first <i>pattern {action}</i> pair in the\nprogram.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>A <b>nextfile</b> statement tells <b>mawk</b> to stop\nprocessing the current input file. It then updates FILENAME\nto the next file listed on the command line, and resets FNR\nto 1.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>An <b>exit</b> statement causes immediate execution of\nthe <b>END</b> actions or program termination if there are\nnone or if the <b>exit</b> occurs in an <b>END</b> action.\nThe <i>opt_expr</i> sets the exit value of the program\nunless overridden by a later <b>exit</b> or subsequent\nerror.</p> </td></tr>\n</table>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">1. emulate\ncat.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>{ print }</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">2. emulate\nwc.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>{ chars += length($0) + 1 # add one for the \\n</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>words += NF</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>}</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>END{ print NR, words, chars }</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">3. count the\nnumber of unique &ldquo;real words&rdquo;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>BEGIN { FS = &quot;[^A-Za-z]+&quot; }</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>{ for(i = 1 ; i &lt;= NF ; i++) word[$i] = &quot;&quot;\n}</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>END { delete word[&quot;&quot;]</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>for ( i in word ) cnt++</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>print cnt</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>}</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">4. sum the\nsecond field of every record based on the first field.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>$1 ~ /credit|gain/ { sum += $2 }</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>$1 ~ /debit|loss/ { sum -= $2 }</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>END { print sum }</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">5. sort a file,\ncomparing as string</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>{ line[NR] = $0 &quot;&quot; } # make sure of comparison\ntype</p> </td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p># in case some lines look numeric</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>END { isort(line, NR)</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>for(i = 1 ; i &lt;= NR ; i++) print line[i]</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>}</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>#insertion sort of A[1..n]</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n\n\n<p>function isort( A, n,</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n\n\n<p>i, j, hold)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>{</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>for( i = 2 ; i &lt;= n ; i++)</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>{</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>hold = A[j = i]</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>while ( A[j-1] &gt; hold )</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>{ j-- ; A[j+1] = A[j] }</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>A[j] = hold</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>}</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p># sentinel A[0] = &quot;&quot; will be created if\nneeded</p> </td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>}</p></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<h2>COMPATIBILITY ISSUES\n<a name=\"COMPATIBILITY ISSUES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MAWK 1.3.3\nversus POSIX 1003.2 Draft 11.3</b> <br>\nThe POSIX 1003.2(draft 11.3) definition of the AWK language\nis AWK as described in the AWK book with a few extensions\nthat appeared in SystemVR4 nawk. The extensions are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">New functions: toupper() and\ntolower().</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>New variables: ENVIRON[] and CONVFMT.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>ANSI C conversion specifications for printf() and\nsprintf().</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>New command options: -v var=value, multiple -f options\nand implementation options as arguments to -W.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>For systems (MS-DOS or Windows) which provide a\n<i>setmode</i> function, an environment variable MAWKBINMODE\nand a built-in variable BINMODE. The bits of the BINMODE\nvalue tell <i>mawk</i> how to modify the <b>RS</b> and\n<b>ORS</b> variables:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">0</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\"></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\">set standard input to binary\nmode, and if BIT-2 is unset, set <b>RS</b> to\n&quot;\\r\\n&quot; (CR/LF) rather than &quot;\\n&quot;\n(LF).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>set standard output to binary mode, and if BIT-2 is\nunset, set <b>ORS</b> to &quot;\\r\\n&quot; (CR/LF) rather\nthan &quot;\\n&quot; (LF).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>suppress the assignment to <b>RS</b> and <b>ORS</b> of\nCR/LF, making it possible to run scripts and generate output\ncompatible with Unix line-endings.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX AWK is\noriented to operate on files a line at a time. <b>RS</b> can\nbe changed from &quot;\\n&quot; to another single character,\nbut it is hard to find any use for this &mdash; there are no\nexamples in the AWK book. By convention, <b>RS</b> =\n&quot;&quot;, makes one or more blank lines separate\nrecords, allowing multi-line records. When <b>RS</b> =\n&quot;&quot;, &quot;\\n&quot; is always a field separator\nregardless of the value in <b>FS</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mawk</b>, on\nthe other hand, allows <b>RS</b> to be a regular expression.\nWhen &quot;\\n&quot; appears in records, it is treated as\nspace, and <b>FS</b> always determines fields.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Removing the\nline at a time paradigm can make some programs simpler and\ncan often improve performance. For example, redoing example\n3 from above,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">BEGIN { RS =\n&quot;[^A-Za-z]+&quot; }</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>{ word[ $0 ] = &quot;&quot; }</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>END { delete word[ &quot;&quot; ]</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>for( i in word ) cnt++</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>print cnt</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>}</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">counts the\nnumber of unique words by making each word a record. On\nmoderate size files, <b>mawk</b> executes twice as fast,\nbecause of the simplified inner loop.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nprogram replaces each comment by a single space in a C\nprogram file,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>BEGIN {</p></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>RS = &quot;/\\*([^*]|\\*+[^/*])*\\*+/&quot;</p></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n\n\n<p># comment is record separator</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>ORS = &quot; &quot;</p></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>getline hold</p></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">{ print hold ;\nhold = $0 }</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">END { printf\n&quot;%s&quot; , hold }</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Buffering one\nrecord is needed to avoid terminating the last record with a\nspace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With\n<b>mawk</b>, the following are all equivalent,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>x ~ /a\\+b/ x ~ &quot;a\\+b&quot; x ~\n&quot;a\\\\+b&quot;</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The strings get\nscanned twice, once as string and once as regular\nexpression. On the string scan, <b>mawk</b> ignores the\nescape on non-escape characters while the AWK book advocates\n<i>\\c</i> be recognized as <i>c</i> which necessitates the\ndouble escaping of meta-characters in strings. POSIX\nexplicitly declines to define the behavior which passively\nforces programs that must run under a variety of awks to use\nthe more portable but less readable, double escape.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX AWK does\nnot recognize &quot;/dev/std{in,out,err}&quot;. Some systems\nprovide an actual device for this, allowing AWKs which do\nnot implement the feature directly to support it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX AWK does\nnot recognize \\x hex escape sequences in strings. Unlike\nANSI C, <b>mawk</b> limits the number of digits that follows\n\\x to two as the current implementation only supports 8 bit\ncharacters. The built-in <b>fflush</b> first appeared in a\nrecent (1993) AT&amp;T awk released to netlib, and is not\npart of the POSIX standard. Aggregate deletion with\n<b>delete</b> <i>array</i> is not part of the POSIX\nstandard.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX\nexplicitly leaves the behavior of <b>FS</b> = &quot;&quot;\nundefined, and mentions splitting the record into characters\nas a possible interpretation, but currently this use is not\nportable across implementations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Random\nnumbers</b> <br>\nPOSIX does not prescribe a method for initializing random\nnumbers at startup.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In practice,\nmost implementations do nothing special, which makes\n<b>srand</b> and <b>rand</b> follow the C runtime library,\nmaking the initial seed value 1. Some implementations\n(Solaris XPG4 and Tru64) return 0 from the first call to\n<b>srand</b>, although the results from <b>rand</b> behave\nas if the initial seed is 1. Other implementations return\n1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While\n<b>mawk</b> can call <b>srand</b> at startup with no\nparameter (initializing random numbers from the clock), this\nfeature may be suppressed using conditional compilation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Extensions\nadded for compatibility for GAWK and BWK <br>\nNextfile</b> is a <b>gawk</b> extension (also implemented by\nBWK awk), is not yet part of the POSIX standard (as of\nOctober 2012), although it has been accepted for the next\nrevision of the standard.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mktime</b>,\n<b>strftime&nbsp;</b>and <b>systime</b> are <b>gawk</b>\nextensions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;/dev/stdin&quot; feature was added to <b>mawk</b>\nafter 1.3.4, for compatibility with <b>gawk</b> and BWK awk.\nThe corresponding &quot;-&quot; (alias for /dev/stdin) was\npresent in mawk 1.3.3.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Subtle\nDifferences not in POSIX or the AWK Book</b> <br>\nFinally, here is how <b>mawk</b> handles exceptional cases\nnot discussed in the AWK book or the POSIX draft. It is\nunsafe to assume consistency across awks and safe to skip to\nthe next section.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">substr(s, i, n) returns the\ncharacters of s in the intersection of the closed interval\n[1, length(s)] and the half-open interval [i, i+n). When\nthis intersection is empty, the empty string is returned; so\nsubstr(&quot;ABC&quot;, 1, 0) = &quot;&quot; and\nsubstr(&quot;ABC&quot;, -4, 6) = &quot;A&quot;.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>Every string, including the empty string, matches the\nempty string at the front so, s ~ // and s ~ &quot;&quot;,\nare always 1 as is match(s, //) and match(s, &quot;&quot;).\nThe last two set <b>RLENGTH</b> to 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>index(s, t) is always the same as match(s, t1) where t1\nis the same as t with metacharacters escaped. Hence\nconsistency with match requires that index(s, &quot;&quot;)\nalways returns 1. Also the condition, index(s,t) != 0 if and\nonly t is a substring of s, requires\nindex(&quot;&quot;,&quot;&quot;) = 1.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>If getline encounters end of file, getline var, leaves\nvar unchanged. Similarly, on entry to the <b>END</b>\nactions, <b>$0</b>, the fields and <b>NF</b> have their\nvalue unaltered from the last record.</p></td></tr>\n</table>\n\n<h2>ENVIRONMENT VARIABLES\n<a name=\"ENVIRONMENT VARIABLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mawk</b>\nrecognizes these variables:</p>\n\n<p style=\"margin-left:15%;\">MAWKBINMODE</p>\n\n<p style=\"margin-left:20%;\">(see <b>COMPATIBILITY\nISSUES</b>)</p>\n\n<p style=\"margin-left:15%;\">MAWK_LONG_OPTIONS</p>\n\n<p style=\"margin-left:20%;\">If this is set, <b>mawk</b>\nuses its value to decide what to do with GNU-style long\noptions:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"9%\">\n\n\n<p>allow</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p><b>Mawk</b> allows the option to be checked against the\n(small) set of long options it recognizes.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"9%\">\n\n\n<p>error</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p><b>Mawk</b> prints an error message and exits. This is\nthe default.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"9%\">\n\n\n<p>ignore</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p><b>Mawk</b> ignores the option.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"9%\">\n\n\n<p>warn</p></td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p>Print an warning message and otherwise ignore the\noption.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:20%; margin-top: 1em\">If the variable\nis unset, <b>mawk</b> prints an error message and exits.</p>\n\n<p style=\"margin-left:15%;\">WHINY_USERS</p>\n\n<p style=\"margin-left:20%;\">This is an undocumented\n<b>gawk</b> feature. It tells <b>mawk</b> to sort array\nindices before it starts to iterate over the elements of an\narray.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/grep\">grep(1)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Aho, Kernighan\nand Weinberger, <i>The AWK Programming Language</i>,\nAddison-Wesley Publishing, 1988, (the AWK book), defines the\nlanguage, opening with a tutorial and advancing to many\ninteresting programs that delve into issues of software\ndesign and analysis relevant to programming in any\nlanguage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>The GAWK\nManual</i>, The Free Software Foundation, 1991, is a\ntutorial and language reference that does not attempt the\ndepth of the AWK book and assumes the reader may be a novice\nprogrammer. The section on AWK arrays is excellent. It also\ndiscusses POSIX requirements for AWK.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mawk</b>\nimplements printf() and sprintf() using the C library\nfunctions, printf and sprintf, so full ANSI compatibility\nrequires an ANSI C library. In practice this means the h\nconversion qualifier may not be available. Also <b>mawk</b>\ninherits any bugs or limitations of the library\nfunctions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Implementors of\nthe AWK language have shown a consistent lack of imagination\nwhen naming their programs.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mike Brennan\n(brennan@whidbey.com). <br>\nThomas E. Dickey &lt;dickey@invisible-island.net&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#THE AWK LANGUAGE\">THE AWK LANGUAGE</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#COMPATIBILITY ISSUES\">COMPATIBILITY ISSUES</a>","<a href=\"#ENVIRONMENT VARIABLES\">ENVIRONMENT VARIABLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>"]}