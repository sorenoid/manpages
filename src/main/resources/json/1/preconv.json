{"name":"preconv","body":"\n\n<h1 align=\"center\">PRECONV</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">preconv -\nconvert encoding of input files to something GNU troff\nunderstands</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\"><b>preconv</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">[<b>-dr</b>]\n[<b>-D&nbsp;</b><i>default_encoding</i>]\n[<b>-e&nbsp;</b><i>encoding</i>] [<i>file</i> ...]</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p><b>preconv</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><b>-h</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p><b>preconv</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><b>--help</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\"><b>preconv</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><b>-v</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p><b>preconv</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><b>--version</b></p></td></tr>\n</table>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preconv</b>\nreads <i>files</i> and converts its encoding(s) to a form\nGNU <a href=\"https://man.page/1/troff\">troff(1)</a> can process, sending the data to\nstandard output. Currently, this means ASCII characters and\n&rsquo;\\[uXXXX]&rsquo; entities, where &rsquo;XXXX&rsquo; is\na hexadecimal number with four to six digits, representing a\nUnicode input code. Normally, <b>preconv</b> should be\ninvoked with the <b>-k</b> and <b>-K</b> options of\n<b>groff</b>.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Whitespace is\npermitted between a command-line option and its\nargument.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-d</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Emit debugging messages to standard error (mainly the\nused encoding).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-D</b><i>encoding</i></p>\n\n<p style=\"margin-left:22%;\">Specify default encoding if\neverything fails (see below).</p>\n\n<p style=\"margin-left:11%;\"><b>-e</b><i>encoding</i></p>\n\n<p style=\"margin-left:22%;\">Specify input encoding\nexplicitly, overriding all other methods. This corresponds\nto <b>groff</b>&rsquo;s <b>-K</b><i>encoding</i> option.\nWithout this switch, <b>preconv</b> uses the algorithm\ndescribed below to select the input encoding.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>--help</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n</td>\n<td width=\"32%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>-h</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n\n\n<p>Print a help message and exit.</p></td>\n<td width=\"32%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>-r</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n\n\n<p>Do not add .lf requests.</p></td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--version</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"52%\">\n\n\n<p>Print the version number and exit.</p></td>\n<td width=\"26%\">\n</td></tr>\n</table>\n\n<h2>USAGE\n<a name=\"USAGE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preconv</b>\ntries to find the input encoding with the following\nalgorithm.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">If the input encoding has been\nexplicitly specified with option <b>-e</b>, use it.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Otherwise, check whether the input starts with a <i>Byte\nOrder Mark</i> (BOM, see below). If found, use it.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Otherwise, check whether there is a known <i>coding\ntag</i> (see below) in either the first or second input\nline. If found, use it.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>4</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Finally, if the <b>uchardet</b> library (an encoding\ndetector library available on most major distributions) is\navailable on the system, use it to try to detect the\nencoding of the file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>5.</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>If everything fails, use a default encoding as given\nwith option <b>-D</b>, by the current locale, or\n&rsquo;latin1&rsquo; if the locale is set to\n&rsquo;C&rsquo;, &rsquo;POSIX&rsquo;, or empty (in that\norder).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\n<b>groff</b> program supports a <i>GROFF_ENCODING</i>\nenvironment variable which is eventually expanded to option\n<b>-k</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Byte Order\nMark</b> <br>\nThe Unicode Standard defines character U+FEFF as the Byte\nOrder Mark (BOM). On the other hand, value U+FFFE is\nguaranteed not be a Unicode character at all. This allows\ndetection of the byte order within the data stream (either\nbig-endian or little-endian), and the MIME encodings\n&rsquo;UTF-16&rsquo; and &rsquo;UTF-32&rsquo; mandate that\nthe data stream starts with U+FEFF. Similarly, the data\nstream encoded as &rsquo;UTF-8&rsquo; might start with a BOM\n(to ease the conversion from and to UTF-16 and UTF-32). In\nall cases, the byte order mark is <i>not</i> part of the\ndata but part of the encoding protocol; in other words,\n<b>preconv</b>&rsquo;s output doesn&rsquo;t contain it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nU+FEFF not at the start of the input data actually is\nemitted; it has then the meaning of a &rsquo;zero width\nno-break space&rsquo; character &ndash; something not needed\nnormally in <b>groff</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Coding\nTags</b> <br>\nEditors which support more than a single character encoding\nneed tags within the input files to mark the file&rsquo;s\nencoding. While it is possible to guess the right input\nencoding with the help of heuristic algorithms for data\nwhich represents a greater amount of a natural language, it\nis still just a guess. Additionally, all algorithms fail\neasily for input which is either too short or doesn&rsquo;t\nrepresent a natural language.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For these\nreasons, <b>preconv</b> supports the coding tag convention\n(with some restrictions) as used by <b>GNU Emacs</b> and\n<b>XEmacs</b> (and probably other programs too).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Coding tags in\n<b>GNU Emacs</b> and <b>XEmacs</b> are stored in so-called\n<i>File Variables</i>. <b>preconv</b> recognizes the\nfollowing syntax form which must be put into a troff comment\nin the first or second line.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">-*-\n<i>tag1</i>: <i>value1</i>; <i>tag2</i>: <i>value2</i>; ...\n-*-</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The only\nrelevant tag for <b>preconv</b> is &rsquo;coding&rsquo;\nwhich can take the values listed below. Here an example line\nwhich tells <b>Emacs</b> to edit a file in troff mode, and\nto use latin2 as its encoding.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">.\\&quot; -*-\nmode: troff; coding: latin-2 -*-</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nlist gives all MIME coding tags (either lowercase or\nuppercase) supported by <b>preconv</b>; this list is\nhard-coded in the source.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">big5, cp1047,\neuc-jp, euc-kr, gb2312, iso-8859-1, iso-8859-2, iso-8859-5,\niso-8859-7, iso-8859-9, iso-8859-13, iso-8859-15, koi8-r,\nus-ascii, utf-8, utf-16, utf-16be, utf-16le</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\nthe following hard-coded list of other tags is recognized\nwhich eventually map to values from the list above.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">ascii,\nchinese-big5, chinese-euc, chinese-iso-8bit, cn-big5, cn-gb,\ncn-gb-2312, cp878, csascii, csisolatin1, cyrillic-iso-8bit,\ncyrillic-koi8, euc-china, euc-cn, euc-japan, euc-japan-1990,\neuc-korea, greek-iso-8bit, iso-10646/utf8, iso-10646/utf-8,\niso-latin-1, iso-latin-2, iso-latin-5, iso-latin-7,\niso-latin-9, japanese-euc, japanese-iso-8bit, jis8, koi8,\nkorean-euc, korean-iso-8bit, latin-0, latin1, latin-1,\nlatin-2, latin-5, latin-7, latin-9, mule-utf-8, mule-utf-16,\nmule-utf-16be, mule-utf-16-be, mule-utf-16be-with-signature,\nmule-utf-16le, mule-utf-16-le, mule-utf-16le-with-signature,\nutf8, utf-16-be, utf-16-be-with-signature,\nutf-16be-with-signature, utf-16-le,\nutf-16-le-with-signature, utf-16le-with-signature</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Those tags are\ntaken from <b>GNU Emacs</b> and <b>XEmacs</b>, together with\nsome aliases. Trailing &rsquo;-dos&rsquo;,\n&rsquo;-unix&rsquo;, and &rsquo;-mac&rsquo; suffixes of\ncoding tags (which give the end-of-line convention used in\nthe file) are stripped off before the comparison with the\nabove tags happens.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Iconv Issues\n<br>\npreconv</b> by itself only supports three encodings:\nlatin-1, cp1047, and UTF-8; all other encodings are passed\nto the <b>iconv</b> library functions. At compile time it is\nsearched and checked for a valid <b>iconv</b>\nimplementation; a call to &rsquo;preconv --version&rsquo;\nshows whether <b>iconv</b> is used.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preconv</b>\ndoesn&rsquo;t support <i>local variable lists</i> yet. This\nis a different syntax form to specify local variables at the\nend of a file.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/groff\">groff(1)</a>\n<br>\nthe <b>GNU Emacs</b> and <b>XEmacs</b> info pages</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#USAGE\">USAGE</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"]}