{"name":"git-commit-tree","body":"\n\n<h1 align=\"center\">GIT-COMMIT-TREE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-commit-tree\n- Create a new commit object</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ncommit-tree</i> &lt;tree&gt; [(-p &lt;parent&gt;)...]\n<i><br>\ngit commit-tree</i> [(-p &lt;parent&gt;)...]\n[-S[&lt;keyid&gt;]] [(-m &lt;message&gt;)...] <br>\n[(-F &lt;file&gt;)...] &lt;tree&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is usually\nnot what an end user wants to run directly. See\n<a href=\"https://man.page/1/git-commit\">git-commit(1)</a> instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Creates a new\ncommit object based on the provided tree object and emits\nthe new commit object id on stdout. The log message is read\nfrom the standard input, unless <b>-m</b> or <b>-F</b>\noptions are given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>-m</b>\nand <b>-F</b> options can be given any number of times, in\nany order. The commit log message will be composed in the\norder in which the options are given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A commit object\nmay have any number of parents. With exactly one parent, it\nis an ordinary commit. Having more than one parent makes the\ncommit a merge between several lines of history. Initial\n(root) commits have no parents.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While a tree\nrepresents a particular directory state of a working\ndirectory, a commit represents that state in\n&quot;time&quot;, and explains how to get there.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Normally a\ncommit would identify a new &quot;HEAD&quot; state, and\nwhile Git doesn&rsquo;t care where you save the note about\nthat state, in practice we tend to just write the result to\nthe file that is pointed at by <b>.git/HEAD</b>, so that we\ncan always see what the last committed state was.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;tree&gt;</p>\n\n<p style=\"margin-left:17%;\">An existing tree object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-p\n&lt;parent&gt;</p>\n\n<p style=\"margin-left:17%;\">Each <b>-p</b> indicates the id\nof a parent commit object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-m\n&lt;message&gt;</p>\n\n<p style=\"margin-left:17%;\">A paragraph in the commit log\nmessage. This can be given more than once and each\n&lt;message&gt; becomes its own paragraph.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-F\n&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Read the commit log message\nfrom the given file. Use <b>-</b> to read from the standard\ninput. This can be given more than once and the content of\neach file becomes its own paragraph.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-S[&lt;keyid&gt;],\n--gpg-sign[=&lt;keyid&gt;], --no-gpg-sign</p>\n\n<p style=\"margin-left:17%;\">GPG-sign commits. The\n<b>keyid</b> argument is optional and defaults to the\ncommitter identity; if specified, it must be stuck to the\noption without a space. <b>--no-gpg-sign</b> is useful to\ncountermand a <b>--gpg-sign</b> option given earlier on the\ncommand line.</p>\n\n<h2>COMMIT INFORMATION\n<a name=\"COMMIT INFORMATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A commit\nencapsulates:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; all\nparent object ids</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; author\nname, email and date</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ncommitter name and email and the commit time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A commit\ncomment is read from stdin. If a changelog entry is not\nprovided via &quot;&lt;&quot; redirection, <i>git\ncommit-tree</i> will just wait for one to be entered and\nterminated with ^D.</p>\n\n<h2>DATE FORMATS\n<a name=\"DATE FORMATS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>GIT_AUTHOR_DATE</b> and <b>GIT_COMMITTER_DATE</b>\nenvironment variables support the following date\nformats:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git internal\nformat</p>\n\n<p style=\"margin-left:17%;\">It is <b>&lt;unix timestamp&gt;\n&lt;time zone offset&gt;</b>, where <b>&lt;unix\ntimestamp&gt;</b> is the number of seconds since the UNIX\nepoch. <b>&lt;time zone offset&gt;</b> is a positive or\nnegative offset from UTC. For example CET (which is 1 hour\nahead of UTC) is <b>+0100</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RFC 2822</p>\n\n<p style=\"margin-left:17%;\">The standard email format as\ndescribed by RFC 2822, for example <b>Thu, 07 Apr 2005\n22:13:13 +0200</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ISO 8601</p>\n\n<p style=\"margin-left:17%;\">Time and date specified by the\nISO 8601 standard, for example <b>2005-04-07T22:13:13</b>.\nThe parser accepts a space instead of the <b>T</b> character\nas well. Fractional parts of a second will be ignored, for\nexample <b>2005-04-07T22:13:13.019</b> will be treated as\n<b>2005-04-07T22:13:13</b>.</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nIn addition, the date part is accepted in the following\nformats: <b>YYYY.MM.DD</b>, <b>MM/DD/YYYY</b> and\n<b>DD.MM.YYYY</b>.</p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Git is to\nsome extent character encoding agnostic.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull; The\ncontents of the blob objects are uninterpreted sequences of\nbytes. There is no encoding translation at the core\nlevel.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPath names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well\nas path names in command line arguments, environment\nvariables and config files (<b>.git/config</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>), <a href=\"https://man.page/5/gitignore\">gitignore(5)</a>,\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> and <a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a>).</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Note that\nGit at the core level treats path names simply as sequences\nof non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and\nfile systems that use legacy extended ASCII encodings.\nHowever, repositories created on such systems will not work\nproperly on UTF-8-based systems (e.g. Linux, Mac, Windows)\nand vice versa. Additionally, many Git-based tools simply\nassume path names to be UTF-8 and will fail to display other\nencodings correctly.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nCommit log messages are typically encoded in UTF-8, but\nother extended ASCII encodings are also supported. This\nincludes ISO-8859-x, CP125x and many others, but <i>not</i>\nUTF-16/32, EBCDIC and CJK multi-byte encodings (GBK,\nShift-JIS, Big5, EUC-x, CP9xx etc.).</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Although\nwe encourage that the commit log messages are encoded in\nUTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects. If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it. However, there are a few things to keep\nin mind.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>1. <i>git\ncommit</i> and <i>git commit-tree</i> issues a warning if\nthe commit log message given to it does not look like a\nvalid UTF-8 string, unless you explicitly say your project\nuses a legacy encoding. The way to say this is to have\n<b>i18n.commitEncoding</b> in <b>.git/config</b> file, like\nthis:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[i18n]\n<br>\ncommitEncoding = ISO-8859-1</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Commit\nobjects created with the above setting record the value of\n<b>i18n.commitEncoding</b> in its <b>encoding</b> header.\nThis is to help other people who look at them later. Lack of\nthis header implies that the commit log message is encoded\nin UTF-8.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>2. <i>git\nlog</i>, <i>git show</i>, <i>git blame</i> and friends look\nat the <b>encoding</b> header of a commit object, and try to\nre-code the log message into UTF-8 unless otherwise\nspecified. You can specify the desired output encoding with\n<b>i18n.logOutputEncoding</b> in <b>.git/config</b> file,\nlike this:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[i18n]\n<br>\nlogOutputEncoding = ISO-8859-1</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>If you do\nnot have this configuration variable, the value of\n<b>i18n.commitEncoding</b> is used instead.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Note that\nwe deliberately chose not to re-code the commit log message\nwhen a commit is made to force UTF-8 at the commit object\nlevel, because re-coding to UTF-8 is not necessarily a\nreversible operation.</big></p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>/etc/mailname</big></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><a href=\"https://man.page/1/git-write-tree\">git-write-tree(1)</a>\n<a href=\"https://man.page/1/git-commit\">git-commit(1)</a></big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#COMMIT INFORMATION\">COMMIT INFORMATION</a>","<a href=\"#DATE FORMATS\">DATE FORMATS</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}