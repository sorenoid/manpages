{"name":"git-cat-file","body":"\n\n<h1 align=\"center\">GIT-CAT-FILE</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-cat-file -\nProvide content or type and size information for repository\nobjects</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ncat-file</i> (-t [--allow-unknown-type]| -s\n[--allow-unknown-type]| -e | -p | &lt;type&gt; | --textconv\n| --filters ) [--path=&lt;path&gt;] &lt;object&gt; <i><br>\ngit cat-file</i> (--batch[=&lt;format&gt;] |\n--batch-check[=&lt;format&gt;]) [ --textconv | --filters ]\n[--follow-symlinks]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In its first\nform, the command provides the content or the type of an\nobject in the repository. The type is required unless\n<b>-t</b> or <b>-p</b> is used to find the object type, or\n<b>-s</b> is used to find the object size, or\n<b>--textconv</b> or <b>--filters</b> is used (which imply\ntype &quot;blob&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the second\nform, a list of objects (separated by linefeeds) is provided\non stdin, and the SHA-1, type, and size of each object is\nprinted on stdout. The output format can be overridden using\nthe optional <b>&lt;format&gt;</b> argument. If either\n<b>--textconv</b> or <b>--filters</b> was specified, the\ninput is expected to list the object names followed by the\npath name, separated by a single whitespace, so that the\nappropriate drivers can be determined.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">The name of the object to show.\nFor a more complete list of ways to spell object names, see\nthe &quot;SPECIFYING REVISIONS&quot; section in\n<a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-t</p>\n\n<p style=\"margin-left:17%;\">Instead of the content, show\nthe object type identified by <b>&lt;object&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s</p>\n\n<p style=\"margin-left:17%;\">Instead of the content, show\nthe object size identified by <b>&lt;object&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-e</p>\n\n<p style=\"margin-left:17%;\">Exit with zero status if\n<b>&lt;object&gt;</b> exists and is a valid object. If\n<b>&lt;object&gt;</b> is of an invalid format exit with\nnon-zero and emits an error on stderr.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-p</p>\n\n<p style=\"margin-left:17%;\">Pretty-print the contents of\n<b>&lt;object&gt;</b> based on its type.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;type&gt;</p>\n\n<p style=\"margin-left:17%;\">Typically this matches the real\ntype of <b>&lt;object&gt;</b> but asking for a type that can\ntrivially be dereferenced from the given\n<b>&lt;object&gt;</b> is also permitted. An example is to\nask for a &quot;tree&quot; with <b>&lt;object&gt;</b> being\na commit object that contains it, or to ask for a\n&quot;blob&quot; with <b>&lt;object&gt;</b> being a tag\nobject that points at it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--textconv</p>\n\n<p style=\"margin-left:17%;\">Show the content as transformed\nby a textconv filter. In this case, <b>&lt;object&gt;</b>\nhas to be of the form <b>&lt;tree-ish&gt;:&lt;path&gt;</b>,\nor <b>:&lt;path&gt;</b> in order to apply the filter to the\ncontent recorded in the index at <b>&lt;path&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--filters</p>\n\n<p style=\"margin-left:17%;\">Show the content as converted\nby the filters configured in the current working tree for\nthe given <b>&lt;path&gt;</b> (i.e. smudge filters,\nend-of-line conversion, etc). In this case,\n<b>&lt;object&gt;</b> has to be of the form\n<b>&lt;tree-ish&gt;:&lt;path&gt;</b>, or\n<b>:&lt;path&gt;</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--path=&lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">For use with <b>--textconv</b>\nor <b>--filters</b>, to allow specifying an object name and\na path separately, e.g. when it is difficult to figure out\nthe revision from which the blob came.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--batch,\n--batch=&lt;format&gt;</p>\n\n<p style=\"margin-left:17%;\">Print object information and\ncontents for each object provided on stdin. May not be\ncombined with any other options or arguments except\n<b>--textconv</b> or <b>--filters</b>, in which case the\ninput lines also need to specify the path, separated by\nwhitespace. See the section <b>BATCH OUTPUT</b> below for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--batch-check,\n--batch-check=&lt;format&gt;</p>\n\n<p style=\"margin-left:17%;\">Print object information for\neach object provided on stdin. May not be combined with any\nother options or arguments except <b>--textconv</b> or\n<b>--filters</b>, in which case the input lines also need to\nspecify the path, separated by whitespace. See the section\n<b>BATCH OUTPUT</b> below for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--batch-all-objects</p>\n\n<p style=\"margin-left:17%;\">Instead of reading a list of\nobjects on stdin, perform the requested batch operation on\nall objects in the repository and any alternate object\nstores (not just reachable objects). Requires <b>--batch</b>\nor <b>--batch-check</b> be specified. By default, the\nobjects are visited in order sorted by their hashes; see\nalso <b>--unordered</b> below. Objects are presented as-is,\nwithout respecting the &quot;replace&quot; mechanism of\n<a href=\"https://man.page/1/git-replace\">git-replace(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--buffer</p>\n\n<p style=\"margin-left:17%;\">Normally batch output is\nflushed after each object is output, so that a process can\ninteractively read and write from <b>cat-file</b>. With this\noption, the output uses normal stdio buffering; this is much\nmore efficient when invoking <b>--batch-check</b> on a large\nnumber of objects.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--unordered</p>\n\n<p style=\"margin-left:17%;\">When <b>--batch-all-objects</b>\nis in use, visit objects in an order which may be more\nefficient for accessing the object contents than hash order.\nThe exact details of the order are unspecified, but if you\ndo not require a specific order, this should generally\nresult in faster output, especially with <b>--batch</b>.\nNote that <b>cat-file</b> will still show each object only\nonce, even if it is stored multiple times in the\nrepository.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--allow-unknown-type</p>\n\n<p style=\"margin-left:17%;\">Allow <b>-s</b> or <b>-t</b> to\nquery broken/corrupt objects of unknown type.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--follow-symlinks</p>\n\n<p style=\"margin-left:17%;\">With <b>--batch</b> or\n<b>--batch-check</b>, follow symlinks inside the repository\nwhen requesting objects with extended SHA-1 expressions of\nthe form tree-ish:path-in-tree. Instead of providing output\nabout the link itself, provide output about the linked-to\nobject. If a symlink points outside the tree-ish (e.g. a\nlink to <b>/foo</b> or a root-level link to <b>../foo</b>),\nthe portion of the link which is outside the tree will be\nprinted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option\ndoes not (currently) work correctly when an object in the\nindex is specified (e.g. <b>:link</b> instead of\n<b>HEAD:link</b>) rather than one in the tree.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option\ncannot (currently) be used unless <b>--batch</b> or\n<b>--batch-check</b> is used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example,\nconsider a git repository containing:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">f: a file\ncontaining &quot;hello\\n&quot; <br>\nlink: a symlink to f <br>\ndir/link: a symlink to ../f <br>\nplink: a symlink to ../f <br>\nalink: a symlink to /etc/passwd</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For a regular\nfile <b>f</b>, <b>echo HEAD:f | git cat-file --batch</b>\nwould print</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">ce013625030ba8dba906f756967f9e9ca394464a\nblob 6</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">And <b>echo\nHEAD:link | git cat-file --batch --follow-symlinks</b> would\nprint the same thing, as would <b>HEAD:dir/link</b>, as they\nboth point at <b>HEAD:f</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Without\n<b>--follow-symlinks</b>, these would print data about the\nsymlink itself. In the case of <b>HEAD:link</b>, you would\nsee</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">4d1ae35ba2c8ec712fa2a379db44ad639ca277bd\nblob 1</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Both\n<b>plink</b> and <b>alink</b> point outside the tree, so\nthey would respectively print:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">symlink 4 <br>\n../f</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">symlink 11 <br>\n/etc/passwd</p>\n\n<h2>OUTPUT\n<a name=\"OUTPUT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>-t</b> is\nspecified, one of the <b>&lt;type&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>-s</b> is\nspecified, the size of the <b>&lt;object&gt;</b> in\nbytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>-e</b> is\nspecified, no output, unless the <b>&lt;object&gt;</b> is\nmalformed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>-p</b> is\nspecified, the contents of <b>&lt;object&gt;</b> are\npretty-printed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>&lt;type&gt;</b> is specified, the raw (though\nuncompressed) contents of the <b>&lt;object&gt;</b> will be\nreturned.</p>\n\n<h2>BATCH OUTPUT\n<a name=\"BATCH OUTPUT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>--batch</b> or <b>--batch-check</b> is given,\n<b>cat-file</b> will read objects from stdin, one per line,\nand print information about them. By default, the whole line\nis considered as an object, as if it were fed to\n<a href=\"https://man.page/1/git-rev-parse\">git-rev-parse(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can specify\nthe information shown for each object by using a custom\n<b>&lt;format&gt;</b>. The <b>&lt;format&gt;</b> is copied\nliterally to stdout for each object, with placeholders of\nthe form <b>%(atom)</b> expanded, followed by a newline. The\navailable atoms are:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>objectname</b></p>\n\n<p style=\"margin-left:17%;\">The full hex representation of\nthe object name.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>objecttype</b></p>\n\n<p style=\"margin-left:17%;\">The type of the object (the\nsame as <b>cat-file -t</b> reports).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>objectsize</b></p>\n\n<p style=\"margin-left:17%;\">The size, in bytes, of the\nobject (the same as <b>cat-file -s</b> reports).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>objectsize:disk</b></p>\n\n<p style=\"margin-left:17%;\">The size, in bytes, that the\nobject takes up on disk. See the note about on-disk sizes in\nthe <b>CAVEATS</b> section below.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>deltabase</b></p>\n\n<p style=\"margin-left:17%;\">If the object is stored as a\ndelta on-disk, this expands to the full hex representation\nof the delta base object name. Otherwise, expands to the\nnull OID (all zeroes). See <b>CAVEATS</b> below.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>rest</b></p>\n\n<p style=\"margin-left:17%;\">If this atom is used in the\noutput string, input lines are split at the first whitespace\nboundary. All characters before that whitespace are\nconsidered to be the object name; characters after that\nfirst run of whitespace (i.e., the &quot;rest&quot; of the\nline) are output in place of the <b>%(rest)</b> atom.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no format is\nspecified, the default format is <b>%(objectname)\n%(objecttype) %(objectsize)</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>--batch</b> is specified, the object information is\nfollowed by the object contents (consisting of\n<b>%(objectsize)</b> bytes), followed by a newline.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\n<b>--batch</b> without a custom format would produce:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;oid&gt; SP\n&lt;type&gt; SP &lt;size&gt; LF <br>\n&lt;contents&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Whereas\n<b>--batch-check='%(objectname) %(objecttype)'</b> would\nproduce:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;oid&gt; SP\n&lt;type&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a name is\nspecified on stdin that cannot be resolved to an object in\nthe repository, then <b>cat-file</b> will ignore any custom\nformat and print:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;object&gt;\nSP missing LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a name is\nspecified that might refer to more than one object (an\nambiguous short sha), then <b>cat-file</b> will ignore any\ncustom format and print:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;object&gt;\nSP ambiguous LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>--follow-symlinks</b> is used, and a symlink in the\nrepository points outside the repository, then\n<b>cat-file</b> will ignore any custom format and print:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">symlink SP\n&lt;size&gt; LF <br>\n&lt;symlink&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The symlink\nwill either be absolute (beginning with a <b>/</b>), or\nrelative to the tree root. For instance, if dir/link points\nto <b>../../foo</b>, then <b>&lt;symlink&gt;</b> will be\n<b>../foo</b>. <b>&lt;size&gt;</b> is the size of the\nsymlink in bytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>--follow-symlinks</b> is used, the following error\nmessages will be displayed:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;object&gt;\nSP missing LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">is printed when\nthe initial symlink requested does not exist.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">dangling SP\n&lt;size&gt; LF <br>\n&lt;object&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">is printed when\nthe initial symlink exists, but something that it\n(transitive-of) points to does not.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">loop SP\n&lt;size&gt; LF <br>\n&lt;object&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">is printed for\nsymlink loops (or any symlinks that require more than 40\nlink resolutions to resolve).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">notdir SP\n&lt;size&gt; LF <br>\n&lt;object&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">is printed\nwhen, during symlink resolution, a file is used as a\ndirectory name.</p>\n\n<h2>CAVEATS\n<a name=\"CAVEATS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nsizes of objects on disk are reported accurately, but care\nshould be taken in drawing conclusions about which refs or\nobjects are responsible for disk usage. The size of a packed\nnon-delta object may be much larger than the size of objects\nwhich delta against it, but the choice of which object is\nthe base and which is the delta is arbitrary and is subject\nto change during a repack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note also that\nmultiple copies of an object may be present in the object\ndatabase; in this case, it is undefined which copy&rsquo;s\nsize or delta base will be reported.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#OUTPUT\">OUTPUT</a>","<a href=\"#BATCH OUTPUT\">BATCH OUTPUT</a>","<a href=\"#CAVEATS\">CAVEATS</a>","<a href=\"#GIT\">GIT</a>"]}