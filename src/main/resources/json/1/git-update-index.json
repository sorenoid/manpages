{"name":"git-update-index","description":"git-update-index\n- Register file contents in the working tree to the\nindex","body":"\n\n<h1 align=\"center\">GIT-UPDATE-INDEX</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-update-index\n- Register file contents in the working tree to the\nindex</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nupdate-index</i> <br>\n[--add] [--remove | --force-remove] [--replace] <br>\n[--refresh] [-q] [--unmerged] [--ignore-missing] <br>\n[(--cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;file&gt;)...]\n<br>\n[--chmod=(+|-)x] <br>\n[--[no-]assume-unchanged] <br>\n[--[no-]skip-worktree] <br>\n[--[no-]ignore-skip-worktree-entries] <br>\n[--[no-]fsmonitor-valid] <br>\n[--ignore-submodules] <br>\n[--[no-]split-index] <br>\n[--[no-|test-|force-]untracked-cache] <br>\n[--[no-]fsmonitor] <br>\n[--really-refresh] [--unresolve] [--again | -g] <br>\n[--info-only] [--index-info] <br>\n[-z] [--stdin] [--index-version &lt;n&gt;] <br>\n[--verbose] <br>\n[--] [&lt;file&gt;...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Modifies the\nindex. Each file mentioned is updated into the index and any\n<i>unmerged</i> or <i>needs updating</i> state is\ncleared.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See also\n<a href=\"https://man.page/1/git-add\">git-add(1)</a> for a more user-friendly way to do some of\nthe most common operations on the index.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The way <i>git\nupdate-index</i> handles files it is told about can be\nmodified using the various options:</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--add</p>\n\n<p style=\"margin-left:17%;\">If a specified file isn&rsquo;t\nin the index already then it&rsquo;s added. Default\nbehaviour is to ignore new files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--remove</p>\n\n<p style=\"margin-left:17%;\">If a specified file is in the\nindex but is missing then it&rsquo;s removed. Default\nbehavior is to ignore removed file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--refresh</p>\n\n<p style=\"margin-left:17%;\">Looks at the current index and\nchecks to see if merges or updates are needed by checking\nstat() information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q</p>\n\n<p style=\"margin-left:17%;\">Quiet. If --refresh finds that\nthe index needs an update, the default behavior is to error\nout. This option makes <i>git update-index</i> continue\nanyway.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-submodules</p>\n\n<p style=\"margin-left:17%;\">Do not try to update\nsubmodules. This option is only respected when passed before\n--refresh.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--unmerged</p>\n\n<p style=\"margin-left:17%;\">If --refresh finds unmerged\nchanges in the index, the default behavior is to error out.\nThis option makes <i>git update-index</i> continue\nanyway.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-missing</p>\n\n<p style=\"margin-left:17%;\">Ignores missing files during a\n--refresh</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cacheinfo\n&lt;mode&gt;,&lt;object&gt;,&lt;path&gt;, --cacheinfo\n&lt;mode&gt; &lt;object&gt; &lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">Directly insert the specified\ninfo into the index. For backward compatibility, you can\nalso give these three arguments as three separate\nparameters, but new users are encouraged to use a\nsingle-parameter form.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--index-info</p>\n\n<p style=\"margin-left:17%;\">Read index information from\nstdin.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--chmod=(+|-)x</p>\n\n<p style=\"margin-left:17%;\">Set the execute permissions on\nthe updated files.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]assume-unchanged</p>\n\n<p style=\"margin-left:17%;\">When this flag is specified,\nthe object names recorded for the paths are not updated.\nInstead, this option sets/unsets the &quot;assume\nunchanged&quot; bit for the paths. When the &quot;assume\nunchanged&quot; bit is on, the user promises not to change\nthe file and allows Git to assume that the working tree file\nmatches what is recorded in the index. If you want to change\nthe working tree file, you need to unset the bit to tell\nGit. This is sometimes helpful when working with a big\nproject on a filesystem that has very slow lstat(2) system\ncall (e.g. cifs).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Git will fail\n(gracefully) in case it needs to modify this file in the\nindex e.g. when merging in a commit; thus, in case the\nassumed-untracked file is changed upstream, you will need to\nhandle the situation manually.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--really-refresh</p>\n\n<p style=\"margin-left:17%;\">Like <b>--refresh</b>, but\nchecks stat information unconditionally, without regard to\nthe &quot;assume unchanged&quot; setting.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]skip-worktree</p>\n\n<p style=\"margin-left:17%;\">When one of these flags is\nspecified, the object name recorded for the paths are not\nupdated. Instead, these options set and unset the\n&quot;skip-worktree&quot; bit for the paths. See section\n&quot;Skip-worktree bit&quot; below for more\ninformation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]ignore-skip-worktree-entries</p>\n\n<p style=\"margin-left:17%;\">Do not remove skip-worktree\n(AKA &quot;index-only&quot;) entries even when the\n<b>--remove</b> option was specified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]fsmonitor-valid</p>\n\n<p style=\"margin-left:17%;\">When one of these flags is\nspecified, the object name recorded for the paths are not\nupdated. Instead, these options set and unset the\n&quot;fsmonitor valid&quot; bit for the paths. See section\n&quot;File System Monitor&quot; below for more\ninformation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-g, --again</p>\n\n<p style=\"margin-left:17%;\">Runs <i>git update-index</i>\nitself on the paths whose index entries are different from\nthose from the <b>HEAD</b> commit.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--unresolve</p>\n\n<p style=\"margin-left:17%;\">Restores the <i>unmerged</i> or\n<i>needs updating</i> state of a file during a merge if it\nwas cleared by accident.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--info-only</p>\n\n<p style=\"margin-left:17%;\">Do not create objects in the\nobject database for all &lt;file&gt; arguments that follow\nthis flag; just insert their object IDs into the index.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--force-remove</p>\n\n<p style=\"margin-left:17%;\">Remove the file from the index\neven when the working directory still has such a file.\n(Implies --remove.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--replace</p>\n\n<p style=\"margin-left:17%;\">By default, when a file\n<b>path</b> exists in the index, <i>git update-index</i>\nrefuses an attempt to add <b>path/file</b>. Similarly if a\nfile <b>path/file</b> exists, a file <b>path</b> cannot be\nadded. With --replace flag, existing entries that conflict\nwith the entry being added are automatically removed with\nwarning messages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdin</p>\n\n<p style=\"margin-left:17%;\">Instead of taking list of paths\nfrom the command line, read list of paths from the standard\ninput. Paths are separated by LF (i.e. one path per line) by\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--verbose</p>\n\n<p style=\"margin-left:17%;\">Report what is being added and\nremoved from index.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--index-version\n&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Write the resulting index out\nin the named on-disk format version. Supported versions are\n2, 3 and 4. The current default version is 2 or 3, depending\non whether extra features are used, such as <b>git add\n-N</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Version 4\nperforms a simple pathname compression that reduces index\nsize by 30%-50% on large repositories, which results in\nfaster load time. Version 4 is relatively young (first\nreleased in 1.8.0 in October 2012). Other Git\nimplementations such as JGit and libgit2 may not support it\nyet.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-z</p>\n\n<p style=\"margin-left:17%;\">Only meaningful with\n<b>--stdin</b> or <b>--index-info</b>; paths are separated\nwith NUL character instead of LF.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--split-index,\n--no-split-index</p>\n\n<p style=\"margin-left:17%;\">Enable or disable split index\nmode. If split-index mode is already enabled and\n<b>--split-index</b> is given again, all changes in\n$GIT_DIR/index are pushed back to the shared index file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These options\ntake effect whatever the value of the <b>core.splitIndex</b>\nconfiguration variable (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>). But a\nwarning is emitted when the change goes against the\nconfigured value, as the configured value will take effect\nnext time the index is read and this will remove the\nintended effect of the option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--untracked-cache,\n--no-untracked-cache</p>\n\n<p style=\"margin-left:17%;\">Enable or disable untracked\ncache feature. Please use <b>--test-untracked-cache</b>\nbefore enabling it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These options\ntake effect whatever the value of the\n<b>core.untrackedCache</b> configuration variable (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). But a warning is emitted when the\nchange goes against the configured value, as the configured\nvalue will take effect next time the index is read and this\nwill remove the intended effect of the option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--test-untracked-cache</p>\n\n<p style=\"margin-left:17%;\">Only perform tests on the\nworking directory to make sure untracked cache can be used.\nYou have to manually enable untracked cache using\n<b>--untracked-cache</b> or <b>--force-untracked-cache</b>\nor the <b>core.untrackedCache</b> configuration variable\nafterwards if you really want to use it. If a test fails the\nexit code is 1 and a message explains what is not working as\nneeded, otherwise the exit code is 0 and OK is printed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--force-untracked-cache</p>\n\n<p style=\"margin-left:17%;\">Same as\n<b>--untracked-cache</b>. Provided for backwards\ncompatibility with older versions of Git where\n<b>--untracked-cache</b> used to imply\n<b>--test-untracked-cache</b> but this option would enable\nthe extension unconditionally.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--fsmonitor,\n--no-fsmonitor</p>\n\n<p style=\"margin-left:17%;\">Enable or disable files system\nmonitor feature. These options take effect whatever the\nvalue of the <b>core.fsmonitor</b> configuration variable\n(see <a href=\"https://man.page/1/git-config\">git-config(1)</a>). But a warning is emitted when\nthe change goes against the configured value, as the\nconfigured value will take effect next time the index is\nread and this will remove the intended effect of the\noption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--</p>\n\n<p style=\"margin-left:17%;\">Do not interpret any more\narguments as options.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Files to act on. Note that\nfiles beginning with <i>.</i> are discarded. This includes\n<b>./file</b> and <b>dir/./file</b>. If you don&rsquo;t want\nthis, then use cleaner names. The same applies to\ndirectories ending <i>/</i> and paths with <i>//</i></p>\n\n<h2>USING --REFRESH\n<a name=\"USING --REFRESH\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><b>--refresh</b></i>\ndoes not calculate a new sha1 file or bring the index up to\ndate for mode/content changes. But what it <b>does</b> do is\nto &quot;re-match&quot; the stat information of a file with\nthe index, so that you can refresh the index for a file that\nhasn&rsquo;t been changed but where the stat entry is out of\ndate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nyou&rsquo;d want to do this after doing a <i>git\nread-tree</i>, to link up the stat index details with the\nproper files.</p>\n\n<h2>USING --CACHEINFO OR --INFO-ONLY\n<a name=\"USING --CACHEINFO OR --INFO-ONLY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--cacheinfo</b>\nis used to register a file that is not in the current\nworking directory. This is useful for minimum-checkout\nmerging.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To pretend you\nhave a file at path with mode and sha1, say:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git\nupdate-index --add --cacheinfo\n&lt;mode&gt;,&lt;sha1&gt;,&lt;path&gt;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--info-only</b>\nis used to register files without placing them in the object\ndatabase. This is useful for status-only repositories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both\n<b>--cacheinfo</b> and <b>--info-only</b> behave similarly:\nthe index is updated but the object database isn&rsquo;t.\n<b>--cacheinfo</b> is useful when the object is in the\ndatabase but the file isn&rsquo;t available locally.\n<b>--info-only</b> is useful when the file is available, but\nyou do not wish to update the object database.</p>\n\n<h2>USING --INDEX-INFO\n<a name=\"USING --INDEX-INFO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--index-info</b>\nis a more powerful mechanism that lets you feed multiple\nentry definitions from the standard input, and designed\nspecifically for scripts. It can take inputs of three\nformats:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. mode SP type\nSP sha1 TAB path</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This format is\nto stuff <b>git ls-tree</b> output into the index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. mode SP sha1\nSP stage TAB path</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This format is\nto put higher order stages into the index file and matches\n<i>git ls-files --stage</i> output.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. mode SP sha1\nTAB path</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This format is\nno longer produced by any Git command, but is and will\ncontinue to be supported by <b>update-index\n--index-info</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To place a\nhigher stage entry to the index, the path should first be\nremoved by feeding a mode=0 entry for the path, and then\nfeeding necessary input lines in the third format.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nstarting with this index:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git ls-files\n-s <br>\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0 frotz</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">you can feed\nthe following input to <b>--index-info</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git\nupdate-index --index-info <br>\n0 0000000000000000000000000000000000000000 frotz <br>\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1 frotz <br>\n100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2 frotz</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first line\nof the input feeds 0 as the mode to remove the path; the\nSHA-1 does not matter as long as it is well formatted. Then\nthe second and third line feeds stage 1 and stage 2 entries\nfor that path. After the above, we would end up with\nthis:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git ls-files\n-s <br>\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1 frotz <br>\n100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2 frotz</p>\n\n<h2>USING &ldquo;ASSUME UNCHANGED&rdquo; BIT\n<a name=\"USING &ldquo;ASSUME UNCHANGED&rdquo; BIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many operations\nin Git depend on your filesystem to have an efficient\n<b>lstat(2)</b> implementation, so that <b>st_mtime</b>\ninformation for working tree files can be cheaply checked to\nsee if the file contents have changed from the version\nrecorded in the index file. Unfortunately, some filesystems\nhave inefficient <b>lstat(2)</b>. If your filesystem is one\nof them, you can set &quot;assume unchanged&quot; bit to\npaths you have not changed to cause Git not to do this\ncheck. Note that setting this bit on a path does not mean\nGit will check the contents of the file to see if it has\nchanged &mdash; it makes Git to omit any checking and assume\nit has <b>not</b> changed. When you make changes to working\ntree files, you have to explicitly tell Git about it by\ndropping &quot;assume unchanged&quot; bit, either before or\nafter you modify them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to set\n&quot;assume unchanged&quot; bit, use\n<b>--assume-unchanged</b> option. To unset, use\n<b>--no-assume-unchanged</b>. To see which files have the\n&quot;assume unchanged&quot; bit set, use <b>git ls-files\n-v</b> (see <a href=\"https://man.page/1/git-ls-files\">git-ls-files(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nlooks at <b>core.ignorestat</b> configuration variable. When\nthis is true, paths updated with <b>git update-index\npaths...</b> and paths updated with other Git commands that\nupdate both index and working tree (e.g. <i>git apply\n--index</i>, <i>git checkout-index -u</i>, and <i>git\nread-tree -u</i>) are automatically marked as &quot;assume\nunchanged&quot;. Note that &quot;assume unchanged&quot; bit\nis <b>not</b> set if <b>git update-index --refresh</b> finds\nthe working tree file matches the index (use <b>git\nupdate-index --really-refresh</b> if you want to mark them\nas &quot;assume unchanged&quot;).</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To update and\nrefresh only the files already checked out:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git\ncheckout-index -n -f -a &amp;&amp; git update-index\n--ignore-missing --refresh</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On an\ninefficient filesystem with <b>core.ignorestat</b> set</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git\nupdate-index --really-refresh <b>(1)</b> <br>\n$ git update-index --no-assume-unchanged foo.c <b>(2)</b>\n<br>\n$ git diff --name-only <b>(3)</b> <br>\n$ edit foo.c <br>\n$ git diff --name-only <b>(4)</b> <br>\nM foo.c <br>\n$ git update-index foo.c <b>(5)</b> <br>\n$ git diff --name-only <b>(6)</b> <br>\n$ edit foo.c <br>\n$ git diff --name-only <b>(7)</b> <br>\n$ git update-index --no-assume-unchanged foo.c <b>(8)</b>\n<br>\n$ git diff --name-only <b>(9)</b> <br>\nM foo.c</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b>\nforces lstat(2) to set &quot;assume unchanged&quot; bits for\npaths that match index. <b><br>\n2.</b> mark the path to be edited. <b><br>\n3.</b> this does lstat(2) and finds index matches the path.\n<b><br>\n4.</b> this does lstat(2) and finds index does <b>not</b>\nmatch the path. <b><br>\n5.</b> registering the new version to index sets\n&quot;assume unchanged&quot; bit. <b><br>\n6.</b> and it is assumed unchanged. <b><br>\n7.</b> even after you edit it. <b><br>\n8.</b> you can tell about the change after the fact. <b><br>\n9.</b> now it checks with lstat(2) and finds it has been\nchanged.</p>\n\n<h2>SKIP-WORKTREE BIT\n<a name=\"SKIP-WORKTREE BIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Skip-worktree\nbit can be defined in one (long) sentence: When reading an\nentry, if it is marked as skip-worktree, then Git pretends\nits working directory version is up to date and read the\nindex version instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To elaborate,\n&quot;reading&quot; means checking for file existence,\nreading file attributes or file content. The working\ndirectory version may be present or absent. If present, its\ncontent may match against the index version or not. Writing\nis not affected by this bit, content safety is still first\npriority. Note that Git <i>can</i> update working directory\nfile, that is marked skip-worktree, if it is safe to do so\n(i.e. working directory version matches index version)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Although this\nbit looks similar to assume-unchanged bit, its goal is\ndifferent from assume-unchanged bit&rsquo;s. Skip-worktree\nalso takes precedence over assume-unchanged bit when both\nare set.</p>\n\n<h2>SPLIT INDEX\n<a name=\"SPLIT INDEX\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This mode is\ndesigned for repositories with very large indexes, and aims\nat reducing the time it takes to repeatedly write these\nindexes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this mode,\nthe index is split into two files, $GIT_DIR/index and\n$GIT_DIR/sharedindex.&lt;SHA-1&gt;. Changes are accumulated\nin $GIT_DIR/index, the split index, while the shared index\nfile contains all index entries and stays unchanged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All changes in\nthe split index are pushed back to the shared index file\nwhen the number of entries in the split index reaches a\nlevel specified by the splitIndex.maxPercentChange config\nvariable (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each time a new\nshared index file is created, the old shared index files are\ndeleted if their modification time is older than what is\nspecified by the splitIndex.sharedIndexExpire config\nvariable (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To avoid\ndeleting a shared index file that is still used, its\nmodification time is updated to the current time every time\na new split index based on the shared index file is either\ncreated or read from.</p>\n\n<h2>UNTRACKED CACHE\n<a name=\"UNTRACKED CACHE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This cache is\nmeant to speed up commands that involve determining\nuntracked files such as <b>git status</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This feature\nworks by recording the mtime of the working tree directories\nand then omitting reading directories and stat calls against\nfiles in those directories whose mtime hasn&rsquo;t changed.\nFor this to work the underlying operating system and file\nsystem must change the <b>st_mtime</b> field of directories\nif files in the directory are added, modified or\ndeleted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can test\nwhether the filesystem supports that with the\n<b>--test-untracked-cache</b> option. The\n<b>--untracked-cache</b> option used to implicitly perform\nthat test in older versions of Git, but that&rsquo;s no\nlonger the case.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nenable (or disable) this feature, it is easier to use the\n<b>core.untrackedCache</b> configuration variable (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>) than using the\n<b>--untracked-cache</b> option to <b>git update-index</b>\nin each repository, especially if you want to do so across\nall repositories you use, because you can set the\nconfiguration variable to <b>true</b> (or <b>false</b>) in\nyour <b>$HOME/.gitconfig</b> just once and have it affect\nall repositories you touch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n<b>core.untrackedCache</b> configuration variable is\nchanged, the untracked cache is added to or removed from the\nindex the next time a command reads the index; while when\n<b>--[no-|force-]untracked-cache</b> are used, the untracked\ncache is immediately added to or removed from the index.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before 2.17,\nthe untracked cache had a bug where replacing a directory\nwith a symlink to another directory could cause it to\nincorrectly show files tracked by git as untracked. See the\n&quot;status: add a failing test showing a\ncore.untrackedCache bug&quot; commit to git.git. A\nworkaround for that is (and this might work for other\nundiscovered bugs in the future):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git -c\ncore.untrackedCache=false status</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This bug has\nalso been shown to affect non-symlink cases of replacing a\ndirectory with a file when it comes to the internal\nstructures of the untracked cache, but no case has been\nreported where this resulted in wrong &quot;git status&quot;\noutput.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are also\ncases where existing indexes written by git versions before\n2.17 will reference directories that don&rsquo;t exist\nanymore, potentially causing many &quot;could not open\ndirectory&quot; warnings to be printed on &quot;git\nstatus&quot;. These are new warnings for existing issues\nthat were previously silently discarded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As with the bug\ndescribed above the solution is to one-off do a &quot;git\nstatus&quot; run with <b>core.untrackedCache=false</b> to\nflush out the leftover bad data.</p>\n\n<h2>FILE SYSTEM MONITOR\n<a name=\"FILE SYSTEM MONITOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This feature is\nintended to speed up git operations for repos that have\nlarge working directories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It enables git\nto work together with a file system monitor (see the\n&quot;fsmonitor-watchman&quot; section of\n<a href=\"https://man.page/5/githooks\">githooks(5)</a>) that can inform it as to what files have\nbeen modified. This enables git to avoid having to lstat()\nevery file to find modified files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When used in\nconjunction with the untracked cache, it can further improve\nperformance by avoiding the cost of scanning the entire\nworking directory looking for new files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nenable (or disable) this feature, it is easier to use the\n<b>core.fsmonitor</b> configuration variable (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>) than using the <b>--fsmonitor</b>\noption to <b>git update-index</b> in each repository,\nespecially if you want to do so across all repositories you\nuse, because you can set the configuration variable in your\n<b>$HOME/.gitconfig</b> just once and have it affect all\nrepositories you touch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n<b>core.fsmonitor</b> configuration variable is changed, the\nfile system monitor is added to or removed from the index\nthe next time a command reads the index. When\n<b>--[no-]fsmonitor</b> are used, the file system monitor is\nimmediately added to or removed from the index.</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nhonors <b>core.filemode</b> configuration variable. If your\nrepository is on a filesystem whose executable bits are\nunreliable, this should be set to <i>false</i> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). This causes the command to ignore\ndifferences in file modes recorded in the index and the file\nmode on the filesystem if they differ only on executable\nbit. On such an unfortunate filesystem, you may need to use\n<i>git update-index --chmod=</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Quite\nsimilarly, if <b>core.symlinks</b> configuration variable is\nset to <i>false</i> (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>), symbolic\nlinks are checked out as plain files, and this command does\nnot modify a recorded file mode from symbolic link to\nregular file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nlooks at <b>core.ignorestat</b> configuration variable. See\n<i>Using &quot;assume unchanged&quot; bit</i> section\nabove.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nalso looks at <b>core.trustctime</b> configuration variable.\nIt can be useful when the inode change time is regularly\nmodified by something outside Git (file system crawlers and\nbackup systems use ctime for marking files processed) (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The untracked\ncache extension can be enabled by the\n<b>core.untrackedCache</b> configuration variable (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Users often try\nto use the assume-unchanged and skip-worktree bits to tell\nGit to ignore changes to files that are tracked. This does\nnot work as expected, since Git may still check working tree\nfiles against the index when performing certain operations.\nIn general, Git does not provide a way to ignore changes to\ntracked files, so alternate solutions are recommended.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example, if\nthe file you want to change is some sort of config file, the\nrepository can include a sample config file that can then be\ncopied into the ignored name and modified. The repository\ncan even include a script to treat the sample file as a\ntemplate, modifying and copying it automatically.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-config\">git-config(1)</a>,\n<a href=\"https://man.page/1/git-add\">git-add(1)</a>, <a href=\"https://man.page/1/git-ls-files\">git-ls-files(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#USING --REFRESH\">USING --REFRESH</a>","<a href=\"#USING --CACHEINFO OR --INFO-ONLY\">USING --CACHEINFO OR --INFO-ONLY</a>","<a href=\"#USING --INDEX-INFO\">USING --INDEX-INFO</a>","<a href=\"#USING &ldquo;ASSUME UNCHANGED&rdquo; BIT\">USING &ldquo;ASSUME UNCHANGED&rdquo; BIT</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SKIP-WORKTREE BIT\">SKIP-WORKTREE BIT</a>","<a href=\"#SPLIT INDEX\">SPLIT INDEX</a>","<a href=\"#UNTRACKED CACHE\">UNTRACKED CACHE</a>","<a href=\"#FILE SYSTEM MONITOR\">FILE SYSTEM MONITOR</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}