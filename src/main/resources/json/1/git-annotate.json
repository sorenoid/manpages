{"name":"git-annotate","body":"\n\n<h1 align=\"center\">GIT-ANNOTATE</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-annotate -\nAnnotate file lines with commit information</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nannotate</i> [&lt;options&gt;] &lt;file&gt;\n[&lt;revision&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Annotates each\nline in the given file with information from the commit\nwhich introduced the line. Optionally annotates from a given\nrevision.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The only\ndifference between this command and <a href=\"https://man.page/1/git-blame\">git-blame(1)</a> is\nthat they use slightly different output formats, and this\ncommand exists only for backward compatibility to support\nexisting scripts, and provide a more familiar command name\nfor people coming from other SCM systems.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-b</p>\n\n<p style=\"margin-left:17%;\">Show blank SHA-1 for boundary\ncommits. This can also be controlled via the\n<b>blame.blankBoundary</b> config option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--root</p>\n\n<p style=\"margin-left:17%;\">Do not treat root commits as\nboundaries. This can also be controlled via the\n<b>blame.showRoot</b> config option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-stats</p>\n\n<p style=\"margin-left:17%;\">Include additional statistics\nat the end of blame output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-L\n&lt;start&gt;,&lt;end&gt;, -L :&lt;funcname&gt;</p>\n\n<p style=\"margin-left:17%;\">Annotate only the line range\ngiven by <i>&lt;start&gt;,&lt;end&gt;</i>, or by the\nfunction name regex <i>&lt;funcname&gt;</i>. May be\nspecified multiple times. Overlapping ranges are\nallowed.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>&lt;start&gt;</i>\nand <i>&lt;end&gt;</i> are optional. <b>-L &lt;start&gt;</b>\nor <b>-L &lt;start&gt;,</b> spans from <i>&lt;start&gt;</i>\nto end of file. <b>-L ,&lt;end&gt;</b> spans from start of\nfile to <i>&lt;end&gt;</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>&lt;start&gt;</i>\nand <i>&lt;end&gt;</i> can take one of these forms:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nnumber</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">If\n<i>&lt;start&gt;</i> or <i>&lt;end&gt;</i> is a number, it\nspecifies an absolute line number (lines count from 1).</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>/regex/</b></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This form will\nuse the first line matching the given POSIX regex. If\n<i>&lt;start&gt;</i> is a regex, it will search from the end\nof the previous <b>-L</b> range, if any, otherwise from the\nstart of file. If <i>&lt;start&gt;</i> is <b>^/regex/</b>,\nit will search from the start of file. If <i>&lt;end&gt;</i>\nis a regex, it will search starting at the line given by\n<i>&lt;start&gt;</i>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; +offset\nor -offset</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is only\nvalid for <i>&lt;end&gt;</i> and will specify a number of\nlines before or after the line given by\n<i>&lt;start&gt;</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>:&lt;funcname&gt;</b> is given in place of\n<i>&lt;start&gt;</i> and <i>&lt;end&gt;</i>, it is a regular\nexpression that denotes the range from the first funcname\nline that matches <i>&lt;funcname&gt;</i>, up to the next\nfuncname line. <b>:&lt;funcname&gt;</b> searches from the\nend of the previous <b>-L</b> range, if any, otherwise from\nthe start of file. <b>^:&lt;funcname&gt;</b> searches from\nthe start of file. The function names are determined in the\nsame way as <b>git diff</b> works out patch hunk headers\n(see <i>Defining a custom hunk-header</i> in\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-l</p>\n\n<p style=\"margin-left:17%;\">Show long rev (Default:\noff).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-t</p>\n\n<p style=\"margin-left:17%;\">Show raw timestamp (Default:\noff).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-S\n&lt;revs-file&gt;</p>\n\n<p style=\"margin-left:17%;\">Use revisions from revs-file\ninstead of calling <a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reverse\n&lt;rev&gt;..&lt;rev&gt;</p>\n\n<p style=\"margin-left:17%;\">Walk history forward instead of\nbackward. Instead of showing the revision in which a line\nappeared, this shows the last revision in which a line has\nexisted. This requires a range of revision like START..END\nwhere the path to blame exists in START. <b>git blame\n--reverse START</b> is taken as <b>git blame --reverse\nSTART..HEAD</b> for convenience.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--first-parent</p>\n\n<p style=\"margin-left:17%;\">Follow only the first parent\ncommit upon seeing a merge commit. This option can be used\nto determine when a line was introduced to a particular\nintegration branch, rather than when it was introduced to\nthe history overall.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-p,\n--porcelain</p>\n\n<p style=\"margin-left:17%;\">Show in a format designed for\nmachine consumption.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--line-porcelain</p>\n\n<p style=\"margin-left:17%;\">Show the porcelain format, but\noutput commit information for each line, not just the first\ntime a commit is referenced. Implies --porcelain.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--incremental</p>\n\n<p style=\"margin-left:17%;\">Show the result incrementally\nin a format designed for machine consumption.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--encoding=&lt;encoding&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies the encoding used to\noutput author names and commit summaries. Setting it to\n<b>none</b> makes blame output unconverted data. For more\ninformation see the discussion about encoding in the\n<a href=\"https://man.page/1/git-log\">git-log(1)</a> manual page.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--contents\n&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">When &lt;rev&gt; is not\nspecified, the command annotates the changes starting\nbackwards from the working tree copy. This flag makes the\ncommand pretend as if the working tree copy has the contents\nof the named file (specify <b>-</b> to make the command read\nfrom the standard input).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--date\n&lt;format&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies the format used to\noutput dates. If --date is not provided, the value of the\nblame.date config variable is used. If the blame.date config\nvariable is also not set, the iso format is used. For\nsupported values, see the discussion of the --date option at\n<a href=\"https://man.page/1/git-log\">git-log(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]progress</p>\n\n<p style=\"margin-left:17%;\">Progress status is reported on\nthe standard error stream by default when it is attached to\na terminal. This flag enables progress reporting even if not\nattached to a terminal. Can&rsquo;t use <b>--progress</b>\ntogether with <b>--porcelain</b> or\n<b>--incremental</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-M[&lt;num&gt;]</p>\n\n<p style=\"margin-left:17%;\">Detect moved or copied lines\nwithin a file. When a commit moves or copies a block of\nlines (e.g. the original file has A and then B, and the\ncommit changes it to B and then A), the traditional\n<i>blame</i> algorithm notices only half of the movement and\ntypically blames the lines that were moved up (i.e. B) to\nthe parent and assigns blame to the lines that were moved\ndown (i.e. A) to the child commit. With this option, both\ngroups of lines are blamed on the parent by running extra\npasses of inspection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;num&gt; is\noptional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as\nmoving/copying within a file for it to associate those lines\nwith the parent commit. The default value is 20.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-C[&lt;num&gt;]</p>\n\n<p style=\"margin-left:17%;\">In addition to <b>-M</b>,\ndetect lines moved or copied from other files that were\nmodified in the same commit. This is useful when you\nreorganize your program and move code around across files.\nWhen this option is given twice, the command additionally\nlooks for copies from other files in the commit that creates\nthe file. When this option is given three times, the command\nadditionally looks for copies from other files in any\ncommit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;num&gt; is\noptional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as\nmoving/copying between files for it to associate those lines\nwith the parent commit. And the default value is 40. If\nthere are more than one <b>-C</b> options given, the\n&lt;num&gt; argument of the last <b>-C</b> will take\neffect.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-rev\n&lt;rev&gt;</p>\n\n<p style=\"margin-left:17%;\">Ignore changes made by the\nrevision when assigning blame, as if the change never\nhappened. Lines that were changed or added by an ignored\ncommit will be blamed on the previous commit that changed\nthat line or nearby lines. This option may be specified\nmultiple times to ignore more than one revision. If the\n<b>blame.markIgnoredLines</b> config option is set, then\nlines that were changed by an ignored commit and attributed\nto another commit will be marked with a <b>?</b> in the\nblame output. If the <b>blame.markUnblamableLines</b> config\noption is set, then those lines touched by an ignored commit\nthat we could not attribute to another revision are marked\nwith a <i>*</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-revs-file\n&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Ignore revisions listed in\n<b>file</b>, which must be in the same format as an\n<b>fsck.skipList</b>. This option may be repeated, and these\nfiles will be processed after any files specified with the\n<b>blame.ignoreRevsFile</b> config option. An empty file\nname, <b>&quot;&quot;</b>, will clear the list of revs from\npreviously processed files.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--color-lines</p>\n\n<p style=\"margin-left:17%;\">Color line annotations in the\ndefault format differently if they come from the same commit\nas the preceding line. This makes it easier to distinguish\ncode blocks introduced by different commits. The color\ndefaults to cyan and can be adjusted using the\n<b>color.blame.repeatedLines</b> config option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--color-by-age</p>\n\n<p style=\"margin-left:17%;\">Color line annotations\ndepending on the age of the line in the default format. The\n<b>color.blame.highlightRecent</b> config option controls\nwhat color is used for each range of age.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-h</p>\n\n<p style=\"margin-left:17%;\">Show help message.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-blame\">git-blame(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}