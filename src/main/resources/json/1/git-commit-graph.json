{"name":"git-commit-graph","description":"git-commit-graph\n- Write and verify Git commit-graph files","body":"\n\n<h1 align=\"center\">GIT-COMMIT-GRAPH</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-commit-graph\n- Write and verify Git commit-graph files</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ncommit-graph verify</i> [--object-dir &lt;dir&gt;]\n[--shallow] [--[no-]progress] <i><br>\ngit commit-graph write</i> &lt;options&gt; [--object-dir\n&lt;dir&gt;] [--[no-]progress]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Manage the\nserialized commit-graph file.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--object-dir</p>\n\n<p style=\"margin-left:17%;\">Use given directory for the\nlocation of packfiles and commit-graph file. This parameter\nexists to specify the location of an alternate that only has\nthe objects directory, not a full <b>.git</b> directory. The\ncommit-graph file is expected to be in the\n<b>&lt;dir&gt;/info</b> directory and the packfiles are\nexpected to be in <b>&lt;dir&gt;/pack</b>. If the directory\ncould not be made into an absolute path, or does not match\nany known object directory, <b>git commit-graph ...</b> will\nexit with non-zero status.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]progress</p>\n\n<p style=\"margin-left:17%;\">Turn progress on/off\nexplicitly. If neither is specified, progress is shown if\nstandard error is connected to a terminal.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>write</i></p>\n\n<p style=\"margin-left:17%;\">Write a commit-graph file based\non the commits found in packfiles. If the config option\n<b>core.commitGraph</b> is disabled, then this command will\noutput a warning, then return success without writing a\ncommit-graph file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>--stdin-packs</b> option, generate the new commit graph\nby walking objects only in the specified pack-indexes.\n(Cannot be combined with <b>--stdin-commits</b> or\n<b>--reachable</b>.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>--stdin-commits</b> option, generate the new commit graph\nby walking commits starting at the commits specified in\nstdin as a list of OIDs in hex, one OID per line. OIDs that\nresolve to non-commits (either directly, or by peeling tags)\nare silently ignored. OIDs that are malformed, or do not\nexist generate an error. (Cannot be combined with\n<b>--stdin-packs</b> or <b>--reachable</b>.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>--reachable</b> option, generate the new commit graph by\nwalking commits starting at all refs. (Cannot be combined\nwith <b>--stdin-commits</b> or <b>--stdin-packs</b>.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>--append</b> option, include all commits that are present\nin the existing commit-graph file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>--changed-paths</b> option, compute and write information\nabout the paths changed between a commit and its first\nparent. This operation can take a while on large\nrepositories. It provides significant performance gains for\ngetting history of a directory or a file with <b>git log --\n&lt;path&gt;</b>. If this option is given, future\ncommit-graph writes will automatically assume that this\noption was intended. Use <b>--no-changed-paths</b> to stop\nstoring this data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>--max-new-filters=&lt;n&gt;</b> option, generate at most\n<b>n</b> new Bloom filters (if <b>--changed-paths</b> is\nspecified). If <b>n</b> is <b>-1</b>, no limit is enforced.\nOnly commits present in the new layer count against this\nlimit. To retroactively compute Bloom filters over earlier\nlayers, it is advised to use <b>--split=replace</b>.\nOverrides the <b>commitGraph.maxNewFilters</b>\nconfiguration.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>--split[=&lt;strategy&gt;]</b> option, write the\ncommit-graph as a chain of multiple commit-graph files\nstored in <b>&lt;dir&gt;/info/commit-graphs</b>.\nCommit-graph layers are merged based on the strategy and\nother splitting options. The new commits not already in the\ncommit-graph are added in a new &quot;tip&quot; file. This\nfile is merged with the existing file if the following merge\nconditions are met:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; If\n<b>--split=no-merge</b> is specified, a merge is never\nperformed, and the remaining options are ignored.\n<b>--split=replace</b> overwrites the existing chain with a\nnew one. A bare <b>--split</b> defers to the remaining\noptions. (Note that merging a chain of commit graphs\nreplaces the existing chain with a length-1 chain where the\nfirst and only incremental holds the entire graph).</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; If\n<b>--size-multiple=&lt;X&gt;</b> is not specified, let\n<b>X</b> equal 2. If the new tip file would have <b>N</b>\ncommits and the previous tip has <b>M</b> commits and\n<b>X</b> times <b>N</b> is greater than <b>M</b>, instead\nmerge the two files into a single file.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; If\n<b>--max-commits=&lt;M&gt;</b> is specified with <b>M</b> a\npositive integer, and the new tip file would have more than\n<b>M</b> commits, then instead merge the new tip with the\nprevious tip.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Finally, if\n<b>--expire-time=&lt;datetime&gt;</b> is not specified, let\n<b>datetime</b> be the current time. After writing the split\ncommit-graph, delete all unused commit-graph whose modified\ntimes are older than <b>datetime</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>verify</i></p>\n\n<p style=\"margin-left:17%;\">Read the commit-graph file and\nverify its contents against the object database. Used to\ncheck for corrupted data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>--shallow</b> option, only check the tip commit-graph\nfile in a chain of split commit-graphs.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Write a\ncommit-graph file for the packed commits in your local\n<b>.git</b> directory.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git\ncommit-graph write</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Write a\ncommit-graph file, extending the current commit-graph file\nusing commits in <b>&lt;pack-index&gt;</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ echo\n&lt;pack-index&gt; | git commit-graph write\n--stdin-packs</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Write a\ncommit-graph file containing all reachable commits.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git show-ref\n-s | git commit-graph write --stdin-commits</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Write a\ncommit-graph file containing all commits in the current\ncommit-graph file along with those reachable from\n<b>HEAD</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git rev-parse\nHEAD | git commit-graph write --stdin-commits --append</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#GIT\">GIT</a>"]}