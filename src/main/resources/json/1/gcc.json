{"name":"gcc","description":"gcc - GNU\nproject C and C++ compiler","body":"\n\n<h1 align=\"center\">GCC</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gcc - GNU\nproject C and C++ compiler</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gcc\n[<b>-c</b>|<b>-S</b>|<b>-E</b>]\n[<b>-std=</b><i>standard</i>] <br>\n[<b>-g</b>] [<b>-pg</b>] [<b>-O</b><i>level</i>] <br>\n[<b>-W</b><i>warn</i>...] [<b>-Wpedantic</b>] <br>\n[<b>-I</b><i>dir</i>...] [<b>-L</b><i>dir</i>...] <br>\n[<b>-D</b><i>macro</i>[=<i>defn</i>]...]\n[<b>-U</b><i>macro</i>] <br>\n[<b>-f</b><i>option</i>...]\n[<b>-m</b><i>machine-option</i>...] <br>\n[<b>-o</b> <i>outfile</i>] [@<i>file</i>]\n<i>infile</i>...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only the most\nuseful options are listed here; see below for the remainder.\n<b>g++</b> accepts mostly the same options as\n<b>gcc</b>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When you invoke\n<small>GCC,</small> it normally does preprocessing,\ncompilation, assembly and linking. The &quot;overall\noptions&quot; allow you to stop this process at an\nintermediate stage. For example, the <b>-c</b> option says\nnot to run the linker. Then the output consists of object\nfiles output by the assembler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other options\nare passed on to one or more stages of processing. Some\noptions control the preprocessor and others the compiler\nitself. Yet other options control the assembler and linker;\nmost of these are not documented here, since you rarely need\nto use any of them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most of the\ncommand-line options that you can use with\n<small>GCC</small> are useful for C programs; when an option\nis only useful with another language (usually C\n<small>++</small> ), the explanation says so explicitly. If\nthe description for a particular option does not mention a\nsource language, you can use that option with all supported\nlanguages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The usual way\nto run <small>GCC</small> is to run the executable called\n<b>gcc</b>, or <i>machine</i><b>-gcc</b> when\ncross-compiling, or <i>machine</i><b>-gcc-</b><i>version</i>\nto run a specific version of <small>GCC.</small> When you\ncompile C <small>++</small> programs, you should invoke\n<small>GCC</small> as <b>g++</b> instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>gcc</b>\nprogram accepts options and file names as operands. Many\noptions have multi-letter names; therefore multiple\nsingle-letter options may <i>not</i> be grouped: <b>-dv</b>\nis very different from <b>-d&nbsp;-v</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can mix\noptions and other arguments. For the most part, the order\nyou use doesn&rsquo;t matter. Order does matter when you use\nseveral options of the same kind; for example, if you\nspecify <b>-L</b> more than once, the directories are\nsearched in the order specified. Also, the placement of the\n<b>-l</b> option is significant.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many options\nhave long names starting with <b>-f</b> or with\n<b>-W</b>---for example, <b>-fmove-loop-invariants</b>,\n<b>-Wformat</b> and so on. Most of these have both positive\nand negative forms; the negative form of <b>-ffoo</b> is\n<b>-fno-foo</b>. This manual documents only one of these two\nforms, whichever one is not the default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some options\ntake one or more arguments typically separated either by a\nspace or by the equals sign (<b>=</b>) from the option name.\nUnless documented otherwise, an argument can be either\nnumeric or a string. Numeric arguments must typically be\nsmall unsigned decimal or hexadecimal integers. Hexadecimal\narguments must begin with the <b>0x</b> prefix. Arguments to\noptions that specify a size threshold of some sort may be\narbitrarily large decimal or hexadecimal integers followed\nby a byte size suffix designating a multiple of bytes such\nas &quot;kB&quot; and &quot;KiB&quot; for kilobyte and\nkibibyte, respectively, &quot;MB&quot; and &quot;MiB&quot;\nfor megabyte and mebibyte, &quot;GB&quot; and\n&quot;GiB&quot; for gigabyte and gigibyte, and so on. Such\narguments are designated by <i>byte-size</i> in the\nfollowing text. Refer to the <small>NIST, IEC,</small> and\nother relevant national and international standards for the\nfull listing and explanation of the binary and decimal byte\nsize prefixes.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Option\nSummary</b> <br>\nHere is a summary of all the options, grouped by type.\nExplanations are in the following sections. <i><br>\nOverall Options</i></p>\n\n<p style=\"margin-left:17%;\"><b>-c -S -E -o</b> <i>file</i>\n<b>-dumpbase</b> <i>dumpbase</i> <b>-dumpbase-ext</b>\n<i>auxdropsuf</i> <b>-dumpdir</b> <i>dumppfx</i> <b>-x</b>\n<i>language</i> <b>-v -###\n--help</b>[<b>=</b><i>class</i>[<b>,...</b>]]\n<b>--target-help --version -pass-exit-codes -pipe\n-specs=</b><i>file</i> <b>-wrapper @</b><i>file</i>\n<b>-ffile-prefix-map=</b><i>old</i><b>=</b><i>new</i>\n<b>-fplugin=</b><i>file</i>\n<b>-fplugin-arg-</b><i>name</i><b>=</b><i>arg</i>\n<b>-fdump-ada-spec</b>[<b>-slim</b>]\n<b>-fada-spec-parent=</b><i>unit</i>\n<b>-fdump-go-spec=</b><i>file</i></p>\n\n<p style=\"margin-left:11%;\"><i>C Language Options</i></p>\n\n<p style=\"margin-left:17%;\"><b>-ansi\n-std=</b><i>standard</i> <b>-fgnu89-inline\n-fpermitted-flt-eval-methods=</b><i>standard</i>\n<b>-aux-info</b> <i>filename</i>\n<b>-fallow-parameterless-variadic-functions -fno-asm\n-fno-builtin -fno-builtin-</b><i>function</i> <b>-fgimple\n-fhosted -ffreestanding -fopenacc\n-fopenacc-dim=</b><i>geom</i> <b>-fopenmp -fopenmp-simd\n-fms-extensions -fplan9-extensions\n-fsso-struct=</b><i>endianness</i>\n<b>-fallow-single-precision -fcond-mismatch\n-flax-vector-conversions -fsigned-bitfields -fsigned-char\n-funsigned-bitfields -funsigned-char</b></p>\n\n<p style=\"margin-left:11%;\"><i>C <small>++</small> Language\nOptions</i></p>\n\n<p style=\"margin-left:17%;\"><b>-fabi-version=</b><i>n</i>\n<b>-fno-access-control -faligned-new=</b><i>n</i>\n<b>-fargs-in-order=</b><i>n</i> <b>-fchar8_t -fcheck-new\n-fconstexpr-depth=</b><i>n</i>\n<b>-fconstexpr-cache-depth=</b><i>n</i>\n<b>-fconstexpr-loop-limit=</b><i>n</i>\n<b>-fconstexpr-ops-limit=</b><i>n</i>\n<b>-fno-elide-constructors -fno-enforce-eh-specs\n-fno-gnu-keywords -fno-implicit-templates\n-fno-implicit-inline-templates -fno-implement-inlines\n-fmodule-header</b>[<b>=</b><i>kind</i>] <b>-fmodule-only\n-fmodules-ts -fmodule-implicit-inline -fno-module-lazy\n-fmodule-mapper=</b><i>specification</i>\n<b>-fmodule-version-ignore -fms-extensions\n-fnew-inheriting-ctors -fnew-ttp-matching\n-fno-nonansi-builtins -fnothrow-opt -fno-operator-names\n-fno-optional-diags -fpermissive -fno-pretty-templates\n-fno-rtti -fsized-deallocation\n-ftemplate-backtrace-limit=</b><i>n</i>\n<b>-ftemplate-depth=</b><i>n</i> <b>-fno-threadsafe-statics\n-fuse-cxa-atexit -fno-weak -nostdinc++\n-fvisibility-inlines-hidden -fvisibility-ms-compat\n-fext-numeric-literals\n-flang-info-include-translate</b>[<b>=</b><i>header</i>]\n<b>-flang-info-include-translate-not\n-flang-info-module-cmi</b>[<b>=</b><i>module</i>]\n<b>-stdlib=</b><i>libstdc++,libc++</i> <b>-Wabi-tag\n-Wcatch-value -Wcatch-value=</b><i>n</i>\n<b>-Wno-class-conversion -Wclass-memaccess -Wcomma-subscript\n-Wconditionally-supported -Wno-conversion-null\n-Wctad-maybe-unsupported -Wctor-dtor-privacy\n-Wno-delete-incomplete -Wdelete-non-virtual-dtor\n-Wdeprecated-copy -Wdeprecated-copy-dtor\n-Wno-deprecated-enum-enum-conversion\n-Wno-deprecated-enum-float-conversion -Weffc++\n-Wno-exceptions -Wextra-semi -Wno-inaccessible-base\n-Wno-inherited-variadic-ctor -Wno-init-list-lifetime\n-Winvalid-imported-macros -Wno-invalid-offsetof\n-Wno-literal-suffix -Wno-mismatched-new-delete\n-Wmismatched-tags -Wmultiple-inheritance -Wnamespaces\n-Wnarrowing -Wnoexcept -Wnoexcept-type -Wnon-virtual-dtor\n-Wpessimizing-move -Wno-placement-new\n-Wplacement-new=</b><i>n</i> <b>-Wrange-loop-construct\n-Wredundant-move -Wredundant-tags -Wreorder -Wregister\n-Wstrict-null-sentinel -Wno-subobject-linkage -Wtemplates\n-Wno-non-template-friend -Wold-style-cast\n-Woverloaded-virtual -Wno-pmf-conversions -Wsign-promo\n-Wsized-deallocation -Wsuggest-final-methods\n-Wsuggest-final-types -Wsuggest-override -Wno-terminate\n-Wuseless-cast -Wno-vexing-parse -Wvirtual-inheritance\n-Wno-virtual-move-assign -Wvolatile\n-Wzero-as-null-pointer-constant</b></p>\n\n<p style=\"margin-left:11%;\"><i>Objective-C and Objective-C\n<small>++</small> Language Options</i></p>\n\n\n<p style=\"margin-left:17%;\"><b>-fconstant-string-class=</b><i>class-name</i>\n<b>-fgnu-runtime -fnext-runtime -fno-nil-receivers\n-fobjc-abi-version=</b><i>n</i> <b>-fobjc-call-cxx-cdtors\n-fobjc-direct-dispatch -fobjc-exceptions -fobjc-gc\n-fobjc-nilcheck -fobjc-std=objc1 -fno-local-ivars\n-fivar-visibility=</b>[<b>public</b>|<b>protected</b>|<b>private</b>|<b>package</b>]\n<b>-freplace-objc-classes -fzero-link -gen-decls\n-Wassign-intercept -Wno-property-assign-default\n-Wno-protocol -Wobjc-root-class -Wselector\n-Wstrict-selector-match -Wundeclared-selector</b></p>\n\n<p style=\"margin-left:11%;\"><i>Diagnostic Message\nFormatting Options</i></p>\n\n\n<p style=\"margin-left:17%;\"><b>-fmessage-length=</b><i>n</i>\n<b>-fdiagnostics-plain-output\n-fdiagnostics-show-location=</b>[<b>once</b>|<b>every-line</b>]\n<b>-fdiagnostics-color=</b>[<b>auto</b>|<b>never</b>|<b>always</b>]\n<b>-fdiagnostics-urls=</b>[<b>auto</b>|<b>never</b>|<b>always</b>]\n<b>-fdiagnostics-format=</b>[<b>text</b>|<b>json</b>]\n<b>-fno-diagnostics-show-option -fno-diagnostics-show-caret\n-fno-diagnostics-show-labels\n-fno-diagnostics-show-line-numbers -fno-diagnostics-show-cwe\n-fdiagnostics-minimum-margin-width=</b><i>width</i>\n<b>-fdiagnostics-parseable-fixits\n-fdiagnostics-generate-patch\n-fdiagnostics-show-template-tree -fno-elide-type\n-fdiagnostics-path-format=</b>[<b>none</b>|<b>separate-events</b>|<b>inline-events</b>]\n<b>-fdiagnostics-show-path-depths -fno-show-column\n-fdiagnostics-column-unit=</b>[<b>display</b>|<b>byte</b>]\n<b>-fdiagnostics-column-origin=</b><i>origin</i></p>\n\n<p style=\"margin-left:11%;\"><i>Warning Options</i></p>\n\n<p style=\"margin-left:17%;\"><b>-fsyntax-only\n-fmax-errors=</b><i>n</i> <b>-Wpedantic -pedantic-errors -w\n-Wextra -Wall -Wabi=</b><i>n</i> <b>-Waddress\n-Wno-address-of-packed-member -Waggregate-return\n-Walloc-size-larger-than=</b><i>byte-size</i>\n<b>-Walloc-zero -Walloca\n-Walloca-larger-than=</b><i>byte-size</i>\n<b>-Wno-aggressive-loop-optimizations -Warith-conversion\n-Warray-bounds -Warray-bounds=</b><i>n</i>\n<b>-Wno-attributes -Wattribute-alias=</b><i>n</i>\n<b>-Wno-attribute-alias -Wno-attribute-warning\n-Wbool-compare -Wbool-operation\n-Wno-builtin-declaration-mismatch\n-Wno-builtin-macro-redefined -Wc90-c99-compat\n-Wc99-c11-compat -Wc11-c2x-compat -Wc++-compat\n-Wc++11-compat -Wc++14-compat -Wc++17-compat -Wc++20-compat\n-Wcast-align -Wcast-align=strict -Wcast-function-type\n-Wcast-qual -Wchar-subscripts -Wclobbered -Wcomment\n-Wconversion -Wno-coverage-mismatch -Wno-cpp -Wdangling-else\n-Wdate-time -Wno-deprecated -Wno-deprecated-declarations\n-Wno-designated-init -Wdisabled-optimization\n-Wno-discarded-array-qualifiers -Wno-discarded-qualifiers\n-Wno-div-by-zero -Wdouble-promotion -Wduplicated-branches\n-Wduplicated-cond -Wempty-body -Wno-endif-labels\n-Wenum-compare -Wenum-conversion -Werror -Werror=*\n-Wexpansion-to-defined -Wfatal-errors -Wfloat-conversion\n-Wfloat-equal -Wformat -Wformat=2 -Wno-format-contains-nul\n-Wno-format-extra-args -Wformat-nonliteral\n-Wformat-overflow=</b><i>n</i> <b>-Wformat-security\n-Wformat-signedness -Wformat-truncation=</b><i>n</i>\n<b>-Wformat-y2k -Wframe-address\n-Wframe-larger-than=</b><i>byte-size</i>\n<b>-Wno-free-nonheap-object -Wno-if-not-aligned\n-Wno-ignored-attributes -Wignored-qualifiers\n-Wno-incompatible-pointer-types -Wimplicit\n-Wimplicit-fallthrough -Wimplicit-fallthrough=</b><i>n</i>\n<b>-Wno-implicit-function-declaration -Wno-implicit-int\n-Winit-self -Winline -Wno-int-conversion\n-Wint-in-bool-context -Wno-int-to-pointer-cast\n-Wno-invalid-memory-model -Winvalid-pch -Wjump-misses-init\n-Wlarger-than=</b><i>byte-size</i>\n<b>-Wlogical-not-parentheses -Wlogical-op -Wlong-long\n-Wno-lto-type-mismatch -Wmain -Wmaybe-uninitialized\n-Wmemset-elt-size -Wmemset-transposed-args\n-Wmisleading-indentation -Wmissing-attributes\n-Wmissing-braces -Wmissing-field-initializers\n-Wmissing-format-attribute -Wmissing-include-dirs\n-Wmissing-noreturn -Wno-missing-profile -Wno-multichar\n-Wmultistatement-macros -Wnonnull -Wnonnull-compare\n-Wnormalized=</b>[<b>none</b>|<b>id</b>|<b>nfc</b>|<b>nfkc</b>]\n<b>-Wnull-dereference -Wno-odr -Wopenmp-simd -Wno-overflow\n-Woverlength-strings -Wno-override-init-side-effects\n-Wpacked -Wno-packed-bitfield-compat -Wpacked-not-aligned\n-Wpadded -Wparentheses -Wno-pedantic-ms-format\n-Wpointer-arith -Wno-pointer-compare\n-Wno-pointer-to-int-cast -Wno-pragmas -Wno-prio-ctor-dtor\n-Wredundant-decls -Wrestrict -Wno-return-local-addr\n-Wreturn-type -Wno-scalar-storage-order -Wsequence-point\n-Wshadow -Wshadow=global -Wshadow=local\n-Wshadow=compatible-local -Wno-shadow-ivar\n-Wno-shift-count-negative -Wno-shift-count-overflow\n-Wshift-negative-value -Wno-shift-overflow\n-Wshift-overflow=</b><i>n</i> <b>-Wsign-compare\n-Wsign-conversion -Wno-sizeof-array-argument\n-Wsizeof-array-div -Wsizeof-pointer-div\n-Wsizeof-pointer-memaccess -Wstack-protector\n-Wstack-usage=</b><i>byte-size</i> <b>-Wstrict-aliasing\n-Wstrict-aliasing=n -Wstrict-overflow\n-Wstrict-overflow=</b><i>n</i> <b>-Wstring-compare\n-Wno-stringop-overflow -Wno-stringop-overread\n-Wno-stringop-truncation\n-Wsuggest-attribute=</b>[<b>pure</b>|<b>const</b>|<b>noreturn</b>|<b>format</b>|<b>malloc</b>]\n<b>-Wswitch -Wno-switch-bool -Wswitch-default -Wswitch-enum\n-Wno-switch-outside-range -Wno-switch-unreachable\n-Wsync-nand -Wsystem-headers -Wtautological-compare\n-Wtrampolines -Wtrigraphs -Wtsan -Wtype-limits -Wundef\n-Wuninitialized -Wunknown-pragmas\n-Wunsuffixed-float-constants -Wunused\n-Wunused-but-set-parameter -Wunused-but-set-variable\n-Wunused-const-variable -Wunused-const-variable=</b><i>n</i>\n<b>-Wunused-function -Wunused-label -Wunused-local-typedefs\n-Wunused-macros -Wunused-parameter -Wno-unused-result\n-Wunused-value -Wunused-variable -Wno-varargs\n-Wvariadic-macros -Wvector-operation-performance -Wvla\n-Wvla-larger-than=</b><i>byte-size</i>\n<b>-Wno-vla-larger-than -Wvolatile-register-var\n-Wwrite-strings -Wzero-length-bounds</b></p>\n\n<p style=\"margin-left:11%;\"><i>Static Analyzer\nOptions</i></p>\n\n<p style=\"margin-left:17%;\"><b>-fanalyzer\n-fanalyzer-call-summaries -fanalyzer-checker=</b><i>name</i>\n<b>-fno-analyzer-feasibility -fanalyzer-fine-grained\n-fanalyzer-state-merge -fanalyzer-state-purge\n-fanalyzer-transitivity -fanalyzer-verbose-edges\n-fanalyzer-verbose-state-changes\n-fanalyzer-verbosity=</b><i>level</i> <b>-fdump-analyzer\n-fdump-analyzer-stderr -fdump-analyzer-callgraph\n-fdump-analyzer-exploded-graph\n-fdump-analyzer-exploded-nodes\n-fdump-analyzer-exploded-nodes-2\n-fdump-analyzer-exploded-nodes-3 -fdump-analyzer-feasibility\n-fdump-analyzer-json -fdump-analyzer-state-purge\n-fdump-analyzer-supergraph -Wno-analyzer-double-fclose\n-Wno-analyzer-double-free\n-Wno-analyzer-exposure-through-output-file\n-Wno-analyzer-file-leak -Wno-analyzer-free-of-non-heap\n-Wno-analyzer-malloc-leak\n-Wno-analyzer-mismatching-deallocation\n-Wno-analyzer-null-argument -Wno-analyzer-null-dereference\n-Wno-analyzer-possible-null-argument\n-Wno-analyzer-possible-null-dereference\n-Wno-analyzer-shift-count-negative\n-Wno-analyzer-shift-count-overflow\n-Wno-analyzer-stale-setjmp-buffer\n-Wno-analyzer-tainted-array-index -Wanalyzer-too-complex\n-Wno-analyzer-unsafe-call-within-signal-handler\n-Wno-analyzer-use-after-free\n-Wno-analyzer-use-of-pointer-in-stale-stack-frame\n-Wno-analyzer-use-of-uninitialized-value\n-Wno-analyzer-write-to-const\n-Wno-analyzer-write-to-string-literal</b></p>\n\n<p style=\"margin-left:11%;\"><i>C and Objective-C-only\nWarning Options</i></p>\n\n<p style=\"margin-left:17%;\"><b>-Wbad-function-cast\n-Wmissing-declarations -Wmissing-parameter-type\n-Wmissing-prototypes -Wnested-externs\n-Wold-style-declaration -Wold-style-definition\n-Wstrict-prototypes -Wtraditional -Wtraditional-conversion\n-Wdeclaration-after-statement -Wpointer-sign</b></p>\n\n<p style=\"margin-left:11%;\"><i>Debugging Options</i></p>\n\n<p style=\"margin-left:17%;\"><b>-g -g</b><i>level</i>\n<b>-gdwarf -gdwarf-</b><i>version</i> <b>-ggdb\n-grecord-gcc-switches -gno-record-gcc-switches -gstabs\n-gstabs+ -gstrict-dwarf -gno-strict-dwarf -gas-loc-support\n-gno-as-loc-support -gas-locview-support\n-gno-as-locview-support -gcolumn-info -gno-column-info\n-gdwarf32 -gdwarf64 -gstatement-frontiers\n-gno-statement-frontiers -gvariable-location-views\n-gno-variable-location-views -ginternal-reset-location-views\n-gno-internal-reset-location-views -ginline-points\n-gno-inline-points -gvms -gxcoff -gxcoff+\n-gz</b>[<b>=</b><i>type</i>] <b>-gsplit-dwarf\n-gdescribe-dies -gno-describe-dies\n-fdebug-prefix-map=</b><i>old</i><b>=</b><i>new</i>\n<b>-fdebug-types-section -fno-eliminate-unused-debug-types\n-femit-struct-debug-baseonly -femit-struct-debug-reduced\n-femit-struct-debug-detailed</b>[<b>=</b><i>spec-list</i>]\n<b>-fno-eliminate-unused-debug-symbols\n-femit-class-debug-always -fno-merge-debug-strings\n-fno-dwarf2-cfi-asm -fvar-tracking\n-fvar-tracking-assignments</b></p>\n\n<p style=\"margin-left:11%;\"><i>Optimization Options</i></p>\n\n\n<p style=\"margin-left:17%;\"><b>-faggressive-loop-optimizations\n-falign-functions[=</b><i>n</i><b>[:</b><i>m</i><b>:[</b><i>n2</i><b>[:</b><i>m2</i><b>]]]]\n-falign-jumps[=</b><i>n</i><b>[:</b><i>m</i><b>:[</b><i>n2</i><b>[:</b><i>m2</i><b>]]]]\n-falign-labels[=</b><i>n</i><b>[:</b><i>m</i><b>:[</b><i>n2</i><b>[:</b><i>m2</i><b>]]]]\n-falign-loops[=</b><i>n</i><b>[:</b><i>m</i><b>:[</b><i>n2</i><b>[:</b><i>m2</i><b>]]]]\n-fno-allocation-dce -fallow-store-data-races\n-fassociative-math -fauto-profile\n-fauto-profile[=</b><i>path</i><b>] -fauto-inc-dec\n-fbranch-probabilities -fcaller-saves\n-fcombine-stack-adjustments -fconserve-stack -fcompare-elim\n-fcprop-registers -fcrossjumping -fcse-follow-jumps\n-fcse-skip-blocks -fcx-fortran-rules -fcx-limited-range\n-fdata-sections -fdce -fdelayed-branch\n-fdelete-null-pointer-checks -fdevirtualize\n-fdevirtualize-speculatively -fdevirtualize-at-ltrans -fdse\n-fearly-inlining -fipa-sra -fexpensive-optimizations\n-ffat-lto-objects -ffast-math -ffinite-math-only\n-ffloat-store -fexcess-precision=</b><i>style</i>\n<b>-ffinite-loops -fforward-propagate\n-ffp-contract=</b><i>style</i> <b>-ffunction-sections -fgcse\n-fgcse-after-reload -fgcse-las -fgcse-lm -fgraphite-identity\n-fgcse-sm -fhoist-adjacent-loads -fif-conversion\n-fif-conversion2 -findirect-inlining -finline-functions\n-finline-functions-called-once -finline-limit=</b><i>n</i>\n<b>-finline-small-functions -fipa-modref -fipa-cp\n-fipa-cp-clone -fipa-bit-cp -fipa-vrp -fipa-pta\n-fipa-profile -fipa-pure-const -fipa-reference\n-fipa-reference-addressable -fipa-stack-alignment -fipa-icf\n-fira-algorithm=</b><i>algorithm</i>\n<b>-flive-patching=</b><i>level</i>\n<b>-fira-region=</b><i>region</i> <b>-fira-hoist-pressure\n-fira-loop-pressure -fno-ira-share-save-slots\n-fno-ira-share-spill-slots\n-fisolate-erroneous-paths-dereference\n-fisolate-erroneous-paths-attribute -fivopts\n-fkeep-inline-functions -fkeep-static-functions\n-fkeep-static-consts -flimit-function-alignment\n-flive-range-shrinkage -floop-block -floop-interchange\n-floop-strip-mine -floop-unroll-and-jam -floop-nest-optimize\n-floop-parallelize-all -flra-remat -flto\n-flto-compression-level -flto-partition=</b><i>alg</i>\n<b>-fmerge-all-constants -fmerge-constants -fmodulo-sched\n-fmodulo-sched-allow-regmoves -fmove-loop-invariants\n-fno-branch-count-reg -fno-defer-pop\n-fno-fp-int-builtin-inexact -fno-function-cse\n-fno-guess-branch-probability -fno-inline -fno-math-errno\n-fno-peephole -fno-peephole2 -fno-printf-return-value\n-fno-sched-interblock -fno-sched-spec -fno-signed-zeros\n-fno-toplevel-reorder -fno-trapping-math\n-fno-zero-initialized-in-bss -fomit-frame-pointer\n-foptimize-sibling-calls -fpartial-inlining -fpeel-loops\n-fpredictive-commoning -fprefetch-loop-arrays\n-fprofile-correction -fprofile-use\n-fprofile-use=</b><i>path</i> <b>-fprofile-partial-training\n-fprofile-values -fprofile-reorder-functions\n-freciprocal-math -free -frename-registers -freorder-blocks\n-freorder-blocks-algorithm=</b><i>algorithm</i>\n<b>-freorder-blocks-and-partition -freorder-functions\n-frerun-cse-after-loop -freschedule-modulo-scheduled-loops\n-frounding-math -fsave-optimization-record\n-fsched2-use-superblocks -fsched-pressure -fsched-spec-load\n-fsched-spec-load-dangerous\n-fsched-stalled-insns-dep[=</b><i>n</i><b>]\n-fsched-stalled-insns[=</b><i>n</i><b>]\n-fsched-group-heuristic -fsched-critical-path-heuristic\n-fsched-spec-insn-heuristic -fsched-rank-heuristic\n-fsched-last-insn-heuristic -fsched-dep-count-heuristic\n-fschedule-fusion -fschedule-insns -fschedule-insns2\n-fsection-anchors -fselective-scheduling\n-fselective-scheduling2 -fsel-sched-pipelining\n-fsel-sched-pipelining-outer-loops -fsemantic-interposition\n-fshrink-wrap -fshrink-wrap-separate -fsignaling-nans\n-fsingle-precision-constant -fsplit-ivs-in-unroller\n-fsplit-loops -fsplit-paths -fsplit-wide-types\n-fsplit-wide-types-early -fssa-backprop -fssa-phiopt\n-fstdarg-opt -fstore-merging -fstrict-aliasing\n-fthread-jumps -ftracer -ftree-bit-ccp\n-ftree-builtin-call-dce -ftree-ccp -ftree-ch\n-ftree-coalesce-vars -ftree-copy-prop -ftree-dce\n-ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre\n-fcode-hoisting -ftree-loop-if-convert -ftree-loop-im\n-ftree-phiprop -ftree-loop-distribution\n-ftree-loop-distribute-patterns -ftree-loop-ivcanon\n-ftree-loop-linear -ftree-loop-optimize\n-ftree-loop-vectorize -ftree-parallelize-loops=</b><i>n</i>\n<b>-ftree-pre -ftree-partial-pre -ftree-pta -ftree-reassoc\n-ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra\n-ftree-switch-conversion -ftree-tail-merge -ftree-ter\n-ftree-vectorize -ftree-vrp -funconstrained-commons\n-funit-at-a-time -funroll-all-loops -funroll-loops\n-funsafe-math-optimizations -funswitch-loops -fipa-ra\n-fvariable-expansion-in-unroller -fvect-cost-model -fvpt\n-fweb -fwhole-program -fwpa -fuse-linker-plugin\n-fzero-call-used-regs --param</b>\n<i>name</i><b>=</b><i>value</i> <b>-O -O0 -O1 -O2 -O3 -Os\n-Ofast -Og</b></p>\n\n<p style=\"margin-left:11%;\"><i>Program Instrumentation\nOptions</i></p>\n\n<p style=\"margin-left:17%;\"><b>-p -pg -fprofile-arcs\n--coverage -ftest-coverage -fprofile-abs-path\n-fprofile-dir=</b><i>path</i> <b>-fprofile-generate\n-fprofile-generate=</b><i>path</i> <b>-fprofile-info-section\n-fprofile-info-section=</b><i>name</i>\n<b>-fprofile-note=</b><i>path</i>\n<b>-fprofile-prefix-path=</b><i>path</i>\n<b>-fprofile-update=</b><i>method</i>\n<b>-fprofile-filter-files=</b><i>regex</i>\n<b>-fprofile-exclude-files=</b><i>regex</i>\n<b>-fprofile-reproducible=</b>[<b>multithreaded</b>|<b>parallel-runs</b>|<b>serial</b>]\n<b>-fsanitize=</b><i>style</i> <b>-fsanitize-recover\n-fsanitize-recover=</b><i>style</i>\n<b>-fasan-shadow-offset=</b><i>number</i>\n<b>-fsanitize-sections=</b><i>s1</i><b>,</b><i>s2</i><b>,...\n-fsanitize-undefined-trap-on-error -fbounds-check\n-fcf-protection=</b>[<b>full</b>|<b>branch</b>|<b>return</b>|<b>none</b>|<b>check</b>]\n<b>-fstack-protector -fstack-protector-all\n-fstack-protector-strong -fstack-protector-explicit\n-fstack-check -fstack-limit-register=</b><i>reg</i>\n<b>-fstack-limit-symbol=</b><i>sym</i> <b>-fno-stack-limit\n-fsplit-stack\n-fvtable-verify=</b>[<b>std</b>|<b>preinit</b>|<b>none</b>]\n<b>-fvtv-counts -fvtv-debug -finstrument-functions\n-finstrument-functions-exclude-function-list=</b><i>sym</i><b>,</b><i>sym</i><b>,...\n-finstrument-functions-exclude-file-list=</b><i>file</i><b>,</b><i>file</i><b>,...</b></p>\n\n<p style=\"margin-left:11%;\"><i>Preprocessor Options</i></p>\n\n\n<p style=\"margin-left:17%;\"><b>-A</b><i>question</i><b>=</b><i>answer</i>\n<b>-A-</b><i>question</i>[<b>=</b><i>answer</i>] <b>-C -CC\n-D</b><i>macro</i>[<b>=</b><i>defn</i>] <b>-dD -dI -dM -dN\n-dU -fdebug-cpp -fdirectives-only -fdollars-in-identifiers\n-fexec-charset=</b><i>charset</i> <b>-fextended-identifiers\n-finput-charset=</b><i>charset</i> <b>-flarge-source-files\n-fmacro-prefix-map=</b><i>old</i><b>=</b><i>new</i>\n<b>-fmax-include-depth=</b><i>depth</i>\n<b>-fno-canonical-system-headers -fpch-deps -fpch-preprocess\n-fpreprocessed -ftabstop=</b><i>width</i>\n<b>-ftrack-macro-expansion\n-fwide-exec-charset=</b><i>charset</i>\n<b>-fworking-directory -H -imacros</b> <i>file</i>\n<b>-include</b> <i>file</i> <b>-M -MD -MF -MG -MM -MMD -MP\n-MQ -MT -Mno-modules -no-integrated-cpp -P -pthread -remap\n-traditional -traditional-cpp -trigraphs -U</b><i>macro</i>\n<b>-undef -Wp,</b><i>option</i> <b>-Xpreprocessor</b>\n<i>option</i></p>\n\n<p style=\"margin-left:11%;\"><i>Assembler Options</i></p>\n\n<p style=\"margin-left:17%;\"><b>-Wa,</b><i>option</i>\n<b>-Xassembler</b> <i>option</i></p>\n\n<p style=\"margin-left:11%;\"><i>Linker Options</i></p>\n\n<p style=\"margin-left:17%;\"><i>object-file-name</i>\n<b>-fuse-ld=</b><i>linker</i> <b>-l</b><i>library</i>\n<b>-nostartfiles -nodefaultlibs -nolibc -nostdlib -e</b>\n<i>entry</i> <b>--entry=</b><i>entry</i> <b>-pie -pthread -r\n-rdynamic -s -static -static-pie -static-libgcc\n-static-libstdc++ -static-libasan -static-libtsan\n-static-liblsan -static-libubsan -shared -shared-libgcc\n-symbolic -T</b> <i>script</i> <b>-Wl,</b><i>option</i>\n<b>-Xlinker</b> <i>option</i> <b>-u</b> <i>symbol</i>\n<b>-z</b> <i>keyword</i></p>\n\n<p style=\"margin-left:11%;\"><i>Directory Options</i></p>\n\n<p style=\"margin-left:17%;\"><b>-B</b><i>prefix</i>\n<b>-I</b><i>dir</i> <b>-I- -idirafter</b> <i>dir</i>\n<b>-imacros</b> <i>file</i> <b>-imultilib</b> <i>dir</i>\n<b>-iplugindir=</b><i>dir</i> <b>-iprefix</b> <i>file</i>\n<b>-iquote</b> <i>dir</i> <b>-isysroot</b> <i>dir</i>\n<b>-isystem</b> <i>dir</i> <b>-iwithprefix</b> <i>dir</i>\n<b>-iwithprefixbefore</b> <i>dir</i> <b>-L</b><i>dir</i>\n<b>-no-canonical-prefixes --no-sysroot-suffix -nostdinc\n-nostdinc++ --sysroot=</b><i>dir</i></p>\n\n<p style=\"margin-left:11%;\"><i>Code Generation\nOptions</i></p>\n\n<p style=\"margin-left:17%;\"><b>-fcall-saved-</b><i>reg</i>\n<b>-fcall-used-</b><i>reg</i> <b>-ffixed-</b><i>reg</i>\n<b>-fexceptions -fnon-call-exceptions\n-fdelete-dead-exceptions -funwind-tables\n-fasynchronous-unwind-tables -fno-gnu-unique\n-finhibit-size-directive -fcommon -fno-ident\n-fpcc-struct-return -fpic -fPIC -fpie -fPIE -fno-plt\n-fno-jump-tables -fno-bit-tests -frecord-gcc-switches\n-freg-struct-return -fshort-enums -fshort-wchar\n-fverbose-asm -fpack-struct[=</b><i>n</i><b>]\n-fleading-underscore -ftls-model=</b><i>model</i>\n<b>-fstack-reuse=</b><i>reuse_level</i> <b>-ftrampolines\n-ftrapv -fwrapv\n-fvisibility=</b>[<b>default</b>|<b>internal</b>|<b>hidden</b>|<b>protected</b>]\n<b>-fstrict-volatile-bitfields -fsync-libcalls</b></p>\n\n<p style=\"margin-left:11%;\"><i>Developer Options</i></p>\n\n<p style=\"margin-left:17%;\"><b>-d</b><i>letters</i>\n<b>-dumpspecs -dumpmachine -dumpversion -dumpfullversion\n-fcallgraph-info</b>[<b>=su,da</b>] <b>-fchecking\n-fchecking=</b><i>n</i> <b>-fdbg-cnt-list\n-fdbg-cnt=</b><i>counter-value-list</i>\n<b>-fdisable-ipa-</b><i>pass_name</i>\n<b>-fdisable-rtl-</b><i>pass_name</i>\n<b>-fdisable-rtl-</b><i>pass-name</i><b>=</b><i>range-list</i>\n<b>-fdisable-tree-</b><i>pass_name</i>\n<b>-fdisable-tree-</b><i>pass-name</i><b>=</b><i>range-list</i>\n<b>-fdump-debug -fdump-earlydebug -fdump-noaddr\n-fdump-unnumbered -fdump-unnumbered-links\n-fdump-final-insns</b>[<b>=</b><i>file</i>]\n<b>-fdump-ipa-all -fdump-ipa-cgraph -fdump-ipa-inline\n-fdump-lang-all -fdump-lang-</b><i>switch</i>\n<b>-fdump-lang-</b><i>switch</i><b>-</b><i>options</i>\n<b>-fdump-lang-</b><i>switch</i><b>-</b><i>options</i><b>=</b><i>filename</i>\n<b>-fdump-passes -fdump-rtl-</b><i>pass</i>\n<b>-fdump-rtl-</b><i>pass</i><b>=</b><i>filename</i>\n<b>-fdump-statistics -fdump-tree-all\n-fdump-tree-</b><i>switch</i>\n<b>-fdump-tree-</b><i>switch</i><b>-</b><i>options</i>\n<b>-fdump-tree-</b><i>switch</i><b>-</b><i>options</i><b>=</b><i>filename</i>\n<b>-fcompare-debug</b>[<b>=</b><i>opts</i>]\n<b>-fcompare-debug-second\n-fenable-</b><i>kind</i><b>-</b><i>pass</i>\n<b>-fenable-</b><i>kind</i><b>-</b><i>pass</i><b>=</b><i>range-list</i>\n<b>-fira-verbose=</b><i>n</i> <b>-flto-report\n-flto-report-wpa -fmem-report-wpa -fmem-report\n-fpre-ipa-mem-report -fpost-ipa-mem-report -fopt-info\n-fopt-info-</b><i>options</i>[<b>=</b><i>file</i>]\n<b>-fprofile-report -frandom-seed=</b><i>string</i>\n<b>-fsched-verbose=</b><i>n</i> <b>-fsel-sched-verbose\n-fsel-sched-dump-cfg -fsel-sched-pipelining-verbose -fstats\n-fstack-usage -ftime-report -ftime-report-details\n-fvar-tracking-assignments-toggle -gtoggle\n-print-file-name=</b><i>library</i>\n<b>-print-libgcc-file-name -print-multi-directory\n-print-multi-lib -print-multi-os-directory\n-print-prog-name=</b><i>program</i> <b>-print-search-dirs -Q\n-print-sysroot -print-sysroot-headers-suffix -save-temps\n-save-temps=cwd -save-temps=obj\n-time</b>[<b>=</b><i>file</i>]</p>\n\n<p style=\"margin-left:11%;\"><i>Machine-Dependent\nOptions</i></p>\n\n<p style=\"margin-left:17%;\"><i>AArch64 Options</i>\n<b>-mabi=</b><i>name</i> <b>-mbig-endian -mlittle-endian\n-mgeneral-regs-only -mcmodel=tiny -mcmodel=small\n-mcmodel=large -mstrict-align -mno-strict-align\n-momit-leaf-frame-pointer -mtls-dialect=desc\n-mtls-dialect=traditional -mtls-size=</b><i>size</i>\n<b>-mfix-cortex-a53-835769 -mfix-cortex-a53-843419\n-mlow-precision-recip-sqrt -mlow-precision-sqrt\n-mlow-precision-div -mpc-relative-literal-loads\n-msign-return-address=</b><i>scope</i>\n<b>-mbranch-protection=</b><i>none</i><b>|</b><i>standard</i><b>|</b><i>pac-ret</i><b>[+</b><i>leaf</i>\n<b>+</b><i>b-key</i><b>]|</b><i>bti</i>\n<b>-mharden-sls=</b><i>opts</i> <b>-march=</b><i>name</i>\n<b>-mcpu=</b><i>name</i> <b>-mtune=</b><i>name</i>\n<b>-moverride=</b><i>string</i> <b>-mverbose-cost-dump\n-mstack-protector-guard=</b><i>guard</i>\n<b>-mstack-protector-guard-reg=</b><i>sysreg</i>\n<b>-mstack-protector-guard-offset=</b><i>offset</i>\n<b>-mtrack-speculation -moutline-atomics</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Adapteva\nEpiphany Options</i> <b>-mhalf-reg-file\n-mprefer-short-insn-regs -mbranch-cost=</b><i>num</i>\n<b>-mcmove -mnops=</b><i>num</i> <b>-msoft-cmpsf\n-msplit-lohi -mpost-inc -mpost-modify\n-mstack-offset=</b><i>num</i> <b>-mround-nearest\n-mlong-calls -mshort-calls -msmall16\n-mfp-mode=</b><i>mode</i> <b>-mvect-double\n-max-vect-align=</b><i>num</i> <b>-msplit-vecmove-early\n-m1reg-</b><i>reg</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>AMD\nGCN</small> Options</i> <b>-march=</b><i>gpu</i>\n<b>-mtune=</b><i>gpu</i>\n<b>-mstack-size=</b><i>bytes</i></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>ARC</small>\nOptions</i> <b>-mbarrel-shifter -mjli-always\n-mcpu=</b><i>cpu</i> <b>-mA6 -mARC600 -mA7 -mARC700 -mdpfp\n-mdpfp-compact -mdpfp-fast -mno-dpfp-lrsr -mea -mno-mpy\n-mmul32x16 -mmul64 -matomic -mnorm -mspfp -mspfp-compact\n-mspfp-fast -msimd -msoft-float -mswap -mcrc -mdsp-packa\n-mdvbf -mlock -mmac-d16 -mmac-24 -mrtsc -mswape -mtelephony\n-mxy -misize -mannotate-align -marclinux -marclinux_prof\n-mlong-calls -mmedium-calls -msdata -mirq-ctrl-saved\n-mrgf-banked-regs -mlpc-width=</b><i>width</i> <b>-G</b>\n<i>num</i> <b>-mvolatile-cache -mtp-regno=</b><i>regno</i>\n<b>-malign-call -mauto-modify-reg -mbbit-peephole -mno-brcc\n-mcase-vector-pcrel -mcompact-casesi -mno-cond-exec\n-mearly-cbranchsi -mexpand-adddi -mindexed-loads -mlra\n-mlra-priority-none -mlra-priority-compact\nmlra-priority-noncompact -mmillicode -mmixed-code -mq-class\n-mRcq -mRcw -msize-level=</b><i>level</i>\n<b>-mtune=</b><i>cpu</i> <b>-mmultcost=</b><i>num</i>\n<b>-mcode-density-frame\n-munalign-prob-threshold=</b><i>probability</i>\n<b>-mmpy-option=</b><i>multo</i> <b>-mdiv-rem -mcode-density\n-mll64 -mfpu=</b><i>fpu</i> <b>-mrf16 -mbranch-index</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>ARM</small>\nOptions</i> <b>-mapcs-frame -mno-apcs-frame\n-mabi=</b><i>name</i> <b>-mapcs-stack-check\n-mno-apcs-stack-check -mapcs-reentrant -mno-apcs-reentrant\n-mgeneral-regs-only -msched-prolog -mno-sched-prolog\n-mlittle-endian -mbig-endian -mbe8 -mbe32\n-mfloat-abi=</b><i>name</i> <b>-mfp16-format=</b><i>name</i>\n<b>-mthumb-interwork -mno-thumb-interwork\n-mcpu=</b><i>name</i> <b>-march=</b><i>name</i>\n<b>-mfpu=</b><i>name</i> <b>-mtune=</b><i>name</i>\n<b>-mprint-tune-info -mstructure-size-boundary=</b><i>n</i>\n<b>-mabort-on-noreturn -mlong-calls -mno-long-calls\n-msingle-pic-base -mno-single-pic-base\n-mpic-register=</b><i>reg</i> <b>-mnop-fun-dllimport\n-mpoke-function-name -mthumb -marm -mflip-thumb -mtpcs-frame\n-mtpcs-leaf-frame -mcaller-super-interworking\n-mcallee-super-interworking -mtp=</b><i>name</i>\n<b>-mtls-dialect=</b><i>dialect</i> <b>-mword-relocations\n-mfix-cortex-m3-ldrd -munaligned-access -mneon-for-64bits\n-mslow-flash-data -masm-syntax-unified -mrestrict-it\n-mverbose-cost-dump -mpure-code -mcmse\n-mfix-cmse-cve-2021-35465 -mfdpic</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>AVR</small>\nOptions</i> <b>-mmcu=</b><i>mcu</i> <b>-mabsdata\n-maccumulate-args -mbranch-cost=</b><i>cost</i>\n<b>-mcall-prologues -mgas-isr-prologues -mint8\n-mdouble=</b><i>bits</i> <b>-mlong-double=</b><i>bits</i>\n<b>-mn_flash=</b><i>size</i> <b>-mno-interrupts\n-mmain-is-OS_task -mrelax -mrmw -mstrict-X -mtiny-stack\n-mfract-convert-truncate -mshort-calls -nodevicelib\n-nodevicespecs -Waddr-space-convert -Wmisspelled-isr</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Blackfin\nOptions</i>\n<b>-mcpu=</b><i>cpu</i>[<b>-</b><i>sirevision</i>] <b>-msim\n-momit-leaf-frame-pointer -mno-omit-leaf-frame-pointer\n-mspecld-anomaly -mno-specld-anomaly -mcsync-anomaly\n-mno-csync-anomaly -mlow-64k -mno-low64k -mstack-check-l1\n-mid-shared-library -mno-id-shared-library\n-mshared-library-id=</b><i>n</i> <b>-mleaf-id-shared-library\n-mno-leaf-id-shared-library -msep-data -mno-sep-data\n-mlong-calls -mno-long-calls -mfast-fp -minline-plt\n-mmulticore -mcorea -mcoreb -msdram -micplb</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>C6X\nOptions</i> <b>-mbig-endian -mlittle-endian\n-march=</b><i>cpu</i> <b>-msim\n-msdata=</b><i>sdata-type</i></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>CRIS</small>\nOptions</i> <b>-mcpu=</b><i>cpu</i> <b>-march=</b><i>cpu</i>\n<b>-mtune=</b><i>cpu</i> <b>-mmax-stack-frame=</b><i>n</i>\n<b>-metrax4 -metrax100 -mpdebug -mcc-init -mno-side-effects\n-mstack-align -mdata-align -mconst-align -m32-bit -m16-bit\n-m8-bit -mno-prologue-epilogue -melf -maout -sim -sim2\n-mmul-bug-workaround -mno-mul-bug-workaround</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>CR16</small>\nOptions</i> <b>-mmac -mcr16cplus -mcr16c -msim -mint32\n-mbit-ops -mdata-model=</b><i>model</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>C-SKY\nOptions</i> <b>-march=</b><i>arch</i>\n<b>-mcpu=</b><i>cpu</i> <b>-mbig-endian -EB -mlittle-endian\n-EL -mhard-float -msoft-float -mfpu=</b><i>fpu</i>\n<b>-mdouble-float -mfdivdu -mfloat-abi=</b><i>name</i>\n<b>-melrw -mistack -mmp -mcp -mcache -msecurity -mtrust\n-mdsp -medsp -mvdsp -mdiv -msmart -mhigh-registers -manchor\n-mpushpop -mmultiple-stld -mconstpool -mstack-size -mccrt\n-mbranch-cost=</b><i>n</i> <b>-mcse-cc -msched-prolog\n-msim</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Darwin\nOptions</i> <b>-all_load -allowable_client -arch\n-arch_errors_fatal -arch_only -bind_at_load -bundle\n-bundle_loader -client_name -compatibility_version\n-current_version -dead_strip -dependency-file -dylib_file\n-dylinker_install_name -dynamic -dynamiclib\n-exported_symbols_list -filelist -flat_namespace\n-force_cpusubtype_ALL -force_flat_namespace\n-headerpad_max_install_names -iframework -image_base -init\n-install_name -keep_private_externs -multi_module\n-multiply_defined -multiply_defined_unused -noall_load\n-no_dead_strip_inits_and_terms -nofixprebinding -nomultidefs\n-noprebind -noseglinkedit -pagezero_size -prebind\n-prebind_all_twolevel_modules -private_bundle\n-read_only_relocs -sectalign -sectobjectsymbols -whyload\n-seg1addr -sectcreate -sectobjectsymbols -sectorder -segaddr\n-segs_read_only_addr -segs_read_write_addr -seg_addr_table\n-seg_addr_table_filename -seglinkedit -segprot\n-segs_read_only_addr -segs_read_write_addr -single_module\n-static -sub_library -sub_umbrella -twolevel_namespace\n-umbrella -undefined -unexported_symbols_list\n-weak_reference_mismatches -whatsloaded -F -gused -gfull\n-mmacosx-version-min=</b><i>version</i> <b>-mkernel\n-mone-byte-bool</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>DEC</small>\nAlpha Options</i> <b>-mno-fp-regs -msoft-float -mieee\n-mieee-with-inexact -mieee-conformant\n-mfp-trap-mode=</b><i>mode</i>\n<b>-mfp-rounding-mode=</b><i>mode</i>\n<b>-mtrap-precision=</b><i>mode</i> <b>-mbuild-constants\n-mcpu=</b><i>cpu-type</i> <b>-mtune=</b><i>cpu-type</i>\n<b>-mbwx -mmax -mfix -mcix -mfloat-vax -mfloat-ieee\n-mexplicit-relocs -msmall-data -mlarge-data -msmall-text\n-mlarge-text -mmemory-latency=</b><i>time</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>eBPF\nOptions</i> <b>-mbig-endian -mlittle-endian\n-mkernel=</b><i>version</i>\n<b>-mframe-limit=</b><i>bytes</i> <b>-mxbpf</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>FR30</small>\nOptions</i> <b>-msmall-model -mno-lsim</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>FT32</small>\nOptions</i> <b>-msim -mlra -mnodiv -mft32b -mcompress\n-mnopm</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>FRV</small>\nOptions</i> <b>-mgpr-32 -mgpr-64 -mfpr-32 -mfpr-64\n-mhard-float -msoft-float -malloc-cc -mfixed-cc -mdword\n-mno-dword -mdouble -mno-double -mmedia -mno-media -mmuladd\n-mno-muladd -mfdpic -minline-plt -mgprel-ro\n-multilib-library-pic -mlinked-fp -mlong-calls\n-malign-labels -mlibrary-pic -macc-4 -macc-8 -mpack\n-mno-pack -mno-eflags -mcond-move -mno-cond-move\n-moptimize-membar -mno-optimize-membar -mscc -mno-scc\n-mcond-exec -mno-cond-exec -mvliw-branch -mno-vliw-branch\n-mmulti-cond-exec -mno-multi-cond-exec -mnested-cond-exec\n-mno-nested-cond-exec -mtomcat-stats -mTLS -mtls\n-mcpu=</b><i>cpu</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>GNU/Linux\nOptions</i> <b>-mglibc -muclibc -mmusl -mbionic -mandroid\n-tno-android-cc -tno-android-ld</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>H8/300\nOptions</i> <b>-mrelax -mh -ms -mn -mexr -mno-exr -mint32\n-malign-300</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>HPPA</small>\nOptions</i> <b>-march=</b><i>architecture-type</i>\n<b>-mcaller-copies -mdisable-fpregs -mdisable-indexing\n-mfast-indirect-calls -mgas -mgnu-ld -mhp-ld\n-mfixed-range=</b><i>register-range</i> <b>-mjump-in-delay\n-mlinker-opt -mlong-calls -mlong-load-store\n-mno-disable-fpregs -mno-disable-indexing\n-mno-fast-indirect-calls -mno-gas -mno-jump-in-delay\n-mno-long-load-store -mno-portable-runtime -mno-soft-float\n-mno-space-regs -msoft-float -mpa-risc-1-0 -mpa-risc-1-1\n-mpa-risc-2-0 -mportable-runtime\n-mschedule=</b><i>cpu-type</i> <b>-mspace-regs -msio -mwsio\n-munix=</b><i>unix-std</i> <b>-nolibdld -static\n-threads</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>IA-64</small>\nOptions</i> <b>-mbig-endian -mlittle-endian -mgnu-as\n-mgnu-ld -mno-pic -mvolatile-asm-stop -mregister-names\n-msdata -mno-sdata -mconstant-gp -mauto-pic -mfused-madd\n-minline-float-divide-min-latency\n-minline-float-divide-max-throughput\n-mno-inline-float-divide -minline-int-divide-min-latency\n-minline-int-divide-max-throughput -mno-inline-int-divide\n-minline-sqrt-min-latency -minline-sqrt-max-throughput\n-mno-inline-sqrt -mdwarf2-asm -mearly-stop-bits\n-mfixed-range=</b><i>register-range</i>\n<b>-mtls-size=</b><i>tls-size</i>\n<b>-mtune=</b><i>cpu-type</i> <b>-milp32 -mlp64\n-msched-br-data-spec -msched-ar-data-spec\n-msched-control-spec -msched-br-in-data-spec\n-msched-ar-in-data-spec -msched-in-control-spec\n-msched-spec-ldc -msched-spec-control-ldc\n-msched-prefer-non-data-spec-insns\n-msched-prefer-non-control-spec-insns\n-msched-stop-bits-after-every-cycle\n-msched-count-spec-in-critical-path\n-msel-sched-dont-check-control-spec\n-msched-fp-mem-deps-zero-cost\n-msched-max-memory-insns-hard-limit\n-msched-max-memory-insns=</b><i>max-insns</i></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>LM32</small>\nOptions</i> <b>-mbarrel-shift-enabled -mdivide-enabled\n-mmultiply-enabled -msign-extend-enabled\n-muser-enabled</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>M32R/D\nOptions</i> <b>-m32r2 -m32rx -m32r -mdebug -malign-loops\n-mno-align-loops -missue-rate=</b><i>number</i>\n<b>-mbranch-cost=</b><i>number</i>\n<b>-mmodel=</b><i>code-size-model-type</i>\n<b>-msdata=</b><i>sdata-type</i> <b>-mno-flush-func\n-mflush-func=</b><i>name</i> <b>-mno-flush-trap\n-mflush-trap=</b><i>number</i> <b>-G</b> <i>num</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>M32C\nOptions</i> <b>-mcpu=</b><i>cpu</i> <b>-msim\n-memregs=</b><i>number</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>M680x0\nOptions</i> <b>-march=</b><i>arch</i>\n<b>-mcpu=</b><i>cpu</i> <b>-mtune=</b><i>tune</i> <b>-m68000\n-m68020 -m68020-40 -m68020-60 -m68030 -m68040 -m68060\n-mcpu32 -m5200 -m5206e -m528x -m5307 -m5407 -mcfv4e\n-mbitfield -mno-bitfield -mc68000 -mc68020 -mnobitfield\n-mrtd -mno-rtd -mdiv -mno-div -mshort -mno-short\n-mhard-float -m68881 -msoft-float -mpcrel -malign-int\n-mstrict-align -msep-data -mno-sep-data\n-mshared-library-id=n -mid-shared-library\n-mno-id-shared-library -mxgot -mno-xgot\n-mlong-jump-table-offsets</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>MCore\nOptions</i> <b>-mhardlit -mno-hardlit -mdiv -mno-div\n-mrelax-immediates -mno-relax-immediates -mwide-bitfields\n-mno-wide-bitfields -m4byte-functions -mno-4byte-functions\n-mcallgraph-data -mno-callgraph-data -mslow-bytes\n-mno-slow-bytes -mno-lsim -mlittle-endian -mbig-endian -m210\n-m340 -mstack-increment</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>MeP\nOptions</i> <b>-mabsdiff -mall-opts -maverage\n-mbased=</b><i>n</i> <b>-mbitops -mc=</b><i>n</i> <b>-mclip\n-mconfig=</b><i>name</i> <b>-mcop -mcop32 -mcop64 -mivc2\n-mdc -mdiv -meb -mel -mio-volatile -ml -mleadz -mm -mminmax\n-mmult -mno-opts -mrepeat -ms -msatur -msdram -msim\n-msimnovec -mtf -mtiny=</b><i>n</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>MicroBlaze\nOptions</i> <b>-msoft-float -mhard-float -msmall-divides\n-mcpu=</b><i>cpu</i> <b>-mmemcpy -mxl-soft-mul -mxl-soft-div\n-mxl-barrel-shift -mxl-pattern-compare -mxl-stack-check\n-mxl-gp-opt -mno-clearbss -mxl-multiply-high\n-mxl-float-convert -mxl-float-sqrt -mbig-endian\n-mlittle-endian -mxl-reorder -mxl-mode-</b><i>app-model</i>\n<b>-mpic-data-is-text-relative</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>MIPS</small>\nOptions</i> <b>-EL -EB -march=</b><i>arch</i>\n<b>-mtune=</b><i>arch</i> <b>-mips1 -mips2 -mips3 -mips4\n-mips32 -mips32r2 -mips32r3 -mips32r5 -mips32r6 -mips64\n-mips64r2 -mips64r3 -mips64r5 -mips64r6 -mips16 -mno-mips16\n-mflip-mips16 -minterlink-compressed\n-mno-interlink-compressed -minterlink-mips16\n-mno-interlink-mips16 -mabi=</b><i>abi</i> <b>-mabicalls\n-mno-abicalls -mshared -mno-shared -mplt -mno-plt -mxgot\n-mno-xgot -mgp32 -mgp64 -mfp32 -mfpxx -mfp64 -mhard-float\n-msoft-float -mno-float -msingle-float -mdouble-float\n-modd-spreg -mno-odd-spreg -mabs=</b><i>mode</i>\n<b>-mnan=</b><i>encoding</i> <b>-mdsp -mno-dsp -mdspr2\n-mno-dspr2 -mmcu -mmno-mcu -meva -mno-eva -mvirt -mno-virt\n-mxpa -mno-xpa -mcrc -mno-crc -mginv -mno-ginv -mmicromips\n-mno-micromips -mmsa -mno-msa -mloongson-mmi\n-mno-loongson-mmi -mloongson-ext -mno-loongson-ext\n-mloongson-ext2 -mno-loongson-ext2 -mfpu=</b><i>fpu-type</i>\n<b>-msmartmips -mno-smartmips -mpaired-single\n-mno-paired-single -mdmx -mno-mdmx -mips3d -mno-mips3d -mmt\n-mno-mt -mllsc -mno-llsc -mlong64 -mlong32 -msym32\n-mno-sym32 -G</b><i>num</i> <b>-mlocal-sdata\n-mno-local-sdata -mextern-sdata -mno-extern-sdata -mgpopt\n-mno-gopt -membedded-data -mno-embedded-data\n-muninit-const-in-rodata -mno-uninit-const-in-rodata\n-mcode-readable=</b><i>setting</i> <b>-msplit-addresses\n-mno-split-addresses -mexplicit-relocs -mno-explicit-relocs\n-mcheck-zero-division -mno-check-zero-division\n-mdivide-traps -mdivide-breaks -mload-store-pairs\n-mno-load-store-pairs -mmemcpy -mno-memcpy -mlong-calls\n-mno-long-calls -mmad -mno-mad -mimadd -mno-imadd\n-mfused-madd -mno-fused-madd -nocpp -mfix-24k -mno-fix-24k\n-mfix-r4000 -mno-fix-r4000 -mfix-r4400 -mno-fix-r4400\n-mfix-r5900 -mno-fix-r5900 -mfix-r10000 -mno-fix-r10000\n-mfix-rm7000 -mno-fix-rm7000 -mfix-vr4120 -mno-fix-vr4120\n-mfix-vr4130 -mno-fix-vr4130 -mfix-sb1 -mno-fix-sb1\n-mflush-func=</b><i>func</i> <b>-mno-flush-func\n-mbranch-cost=</b><i>num</i> <b>-mbranch-likely\n-mno-branch-likely -mcompact-branches=</b><i>policy</i>\n<b>-mfp-exceptions -mno-fp-exceptions -mvr4130-align\n-mno-vr4130-align -msynci -mno-synci -mlxc1-sxc1\n-mno-lxc1-sxc1 -mmadd4 -mno-madd4 -mrelax-pic-calls\n-mno-relax-pic-calls -mmcount-ra-address -mframe-header-opt\n-mno-frame-header-opt</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>MMIX</small>\nOptions</i> <b>-mlibfuncs -mno-libfuncs -mepsilon\n-mno-epsilon -mabi=gnu -mabi=mmixware -mzero-extend\n-mknuthdiv -mtoplevel-symbols -melf -mbranch-predict\n-mno-branch-predict -mbase-addresses -mno-base-addresses\n-msingle-exit -mno-single-exit</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>MN10300</small>\nOptions</i> <b>-mmult-bug -mno-mult-bug -mno-am33 -mam33\n-mam33-2 -mam34 -mtune=</b><i>cpu-type</i>\n<b>-mreturn-pointer-on-d0 -mno-crt0 -mrelax -mliw\n-msetlb</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Moxie\nOptions</i> <b>-meb -mel -mmul.x -mno-crt0</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>MSP430</small>\nOptions</i> <b>-msim -masm-hex -mmcu= -mcpu= -mlarge -msmall\n-mrelax -mwarn-mcu -mcode-region= -mdata-region=\n-msilicon-errata= -msilicon-errata-warn= -mhwmult= -minrt\n-mtiny-printf -mmax-inline-shift=</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>NDS32</small>\nOptions</i> <b>-mbig-endian -mlittle-endian -mreduced-regs\n-mfull-regs -mcmov -mno-cmov -mext-perf -mno-ext-perf\n-mext-perf2 -mno-ext-perf2 -mext-string -mno-ext-string\n-mv3push -mno-v3push -m16bit -mno-16bit\n-misr-vector-size=</b><i>num</i>\n<b>-mcache-block-size=</b><i>num</i>\n<b>-march=</b><i>arch</i> <b>-mcmodel=</b><i>code-model</i>\n<b>-mctor-dtor -mrelax</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Nios\n<small>II</small> Options</i> <b>-G</b> <i>num</i>\n<b>-mgpopt=</b><i>option</i> <b>-mgpopt -mno-gpopt\n-mgprel-sec=</b><i>regexp</i>\n<b>-mr0rel-sec=</b><i>regexp</i> <b>-mel -meb\n-mno-bypass-cache -mbypass-cache -mno-cache-volatile\n-mcache-volatile -mno-fast-sw-div -mfast-sw-div -mhw-mul\n-mno-hw-mul -mhw-mulx -mno-hw-mulx -mno-hw-div -mhw-div\n-mcustom-</b><i>insn</i><b>=</b><i>N</i>\n<b>-mno-custom-</b><i>insn</i>\n<b>-mcustom-fpu-cfg=</b><i>name</i> <b>-mhal -msmallc\n-msys-crt0=</b><i>name</i> <b>-msys-lib=</b><i>name</i>\n<b>-march=</b><i>arch</i> <b>-mbmx -mno-bmx -mcdx\n-mno-cdx</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Nvidia\n<small>PTX</small> Options</i> <b>-m64 -mmainkernel\n-moptimize</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>OpenRISC\nOptions</i> <b>-mboard=</b><i>name</i> <b>-mnewlib\n-mhard-mul -mhard-div -msoft-mul -msoft-div -msoft-float\n-mhard-float -mdouble-float -munordered-float -mcmov -mror\n-mrori -msext -msfimm -mshftimm</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>PDP-11</small>\nOptions</i> <b>-mfpu -msoft-float -mac0 -mno-ac0 -m40 -m45\n-m10 -mint32 -mno-int16 -mint16 -mno-int32 -msplit\n-munix-asm -mdec-asm -mgnu-asm -mlra</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>picoChip\nOptions</i> <b>-mae=</b><i>ae_type</i>\n<b>-mvliw-lookahead=</b><i>N</i> <b>-msymbol-as-address\n-mno-inefficient-warnings</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>PowerPC\nOptions</i> See <small>RS/6000</small> and PowerPC\nOptions.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>PRU</small>\nOptions</i> <b>-mmcu=</b><i>mcu</i> <b>-minrt -mno-relax\n-mloop -mabi=</b><i>variant</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>RISC-V\nOptions</i> <b>-mbranch-cost=</b><i>N-instruction</i>\n<b>-mplt -mno-plt -mabi=</b><i>ABI-string</i> <b>-mfdiv\n-mno-fdiv -mdiv -mno-div -march=</b><i>ISA-string</i>\n<b>-mtune=</b><i>processor-string</i>\n<b>-mpreferred-stack-boundary=</b><i>num</i>\n<b>-msmall-data-limit=</b><i>N-bytes</i> <b>-msave-restore\n-mno-save-restore -mshorten-memrefs -mno-shorten-memrefs\n-mstrict-align -mno-strict-align -mcmodel=medlow\n-mcmodel=medany -mexplicit-relocs -mno-explicit-relocs\n-mrelax -mno-relax -mriscv-attribute -mmo-riscv-attribute\n-malign-data=</b><i>type</i> <b>-mbig-endian -mlittle-endian\n+-mstack-protector-guard=</b><i>guard</i>\n<b>-mstack-protector-guard-reg=</b><i>reg</i>\n<b>+-mstack-protector-guard-offset=</b><i>offset</i></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>RL78</small>\nOptions</i> <b>-msim -mmul=none -mmul=g13 -mmul=g14\n-mallregs -mcpu=g10 -mcpu=g13 -mcpu=g14 -mg10 -mg13 -mg14\n-m64bit-doubles -m32bit-doubles\n-msave-mduc-in-interrupts</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>RS/6000</small>\nand PowerPC Options</i> <b>-mcpu=</b><i>cpu-type</i>\n<b>-mtune=</b><i>cpu-type</i>\n<b>-mcmodel=</b><i>code-model</i> <b>-mpowerpc64 -maltivec\n-mno-altivec -mpowerpc-gpopt -mno-powerpc-gpopt\n-mpowerpc-gfxopt -mno-powerpc-gfxopt -mmfcrf -mno-mfcrf\n-mpopcntb -mno-popcntb -mpopcntd -mno-popcntd -mfprnd\n-mno-fprnd -mcmpb -mno-cmpb -mhard-dfp -mno-hard-dfp\n-mfull-toc -mminimal-toc -mno-fp-in-toc -mno-sum-in-toc -m64\n-m32 -mxl-compat -mno-xl-compat -mpe -malign-power\n-malign-natural -msoft-float -mhard-float -mmultiple\n-mno-multiple -mupdate -mno-update -mavoid-indexed-addresses\n-mno-avoid-indexed-addresses -mfused-madd -mno-fused-madd\n-mbit-align -mno-bit-align -mstrict-align -mno-strict-align\n-mrelocatable -mno-relocatable -mrelocatable-lib\n-mno-relocatable-lib -mtoc -mno-toc -mlittle -mlittle-endian\n-mbig -mbig-endian -mdynamic-no-pic -mswdiv\n-msingle-pic-base\n-mprioritize-restricted-insns=</b><i>priority</i>\n<b>-msched-costly-dep=</b><i>dependence_type</i>\n<b>-minsert-sched-nops=</b><i>scheme</i> <b>-mcall-aixdesc\n-mcall-eabi -mcall-freebsd -mcall-linux -mcall-netbsd\n-mcall-openbsd -mcall-sysv -mcall-sysv-eabi\n-mcall-sysv-noeabi -mtraceback=</b><i>traceback_type</i>\n<b>-maix-struct-return -msvr4-struct-return\n-mabi=</b><i>abi-type</i> <b>-msecure-plt -mbss-plt\n-mlongcall -mno-longcall -mpltseq -mno-pltseq\n-mblock-move-inline-limit=</b><i>num</i>\n<b>-mblock-compare-inline-limit=</b><i>num</i>\n<b>-mblock-compare-inline-loop-limit=</b><i>num</i>\n<b>-mno-block-ops-unaligned-vsx\n-mstring-compare-inline-limit=</b><i>num</i> <b>-misel\n-mno-isel -mvrsave -mno-vrsave -mmulhw -mno-mulhw -mdlmzb\n-mno-dlmzb -mprototype -mno-prototype -msim -mmvme -mads\n-myellowknife -memb -msdata -msdata=</b><i>opt</i>\n<b>-mreadonly-in-sdata -mvxworks -G</b> <i>num</i>\n<b>-mrecip -mrecip=</b><i>opt</i> <b>-mno-recip\n-mrecip-precision -mno-recip-precision\n-mveclibabi=</b><i>type</i> <b>-mfriz -mno-friz\n-mpointers-to-nested-functions\n-mno-pointers-to-nested-functions -msave-toc-indirect\n-mno-save-toc-indirect -mpower8-fusion -mno-mpower8-fusion\n-mpower8-vector -mno-power8-vector -mcrypto -mno-crypto\n-mhtm -mno-htm -mquad-memory -mno-quad-memory\n-mquad-memory-atomic -mno-quad-memory-atomic\n-mcompat-align-parm -mno-compat-align-parm -mfloat128\n-mno-float128 -mfloat128-hardware -mno-float128-hardware\n-mgnu-attribute -mno-gnu-attribute\n-mstack-protector-guard=</b><i>guard</i>\n<b>-mstack-protector-guard-reg=</b><i>reg</i>\n<b>-mstack-protector-guard-offset=</b><i>offset</i>\n<b>-mprefixed -mno-prefixed -mpcrel -mno-pcrel -mmma\n-mno-mmma -mrop-protect -mno-rop-protect -mprivileged\n-mno-privileged</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>RX</small>\nOptions</i> <b>-m64bit-doubles -m32bit-doubles -fpu -nofpu\n-mcpu= -mbig-endian-data -mlittle-endian-data -msmall-data\n-msim -mno-sim -mas100-syntax -mno-as100-syntax -mrelax\n-mmax-constant-size= -mint-register= -mpid\n-mallow-string-insns -mno-allow-string-insns -mjsr\n-mno-warn-multiple-fast-interrupts\n-msave-acc-in-interrupts</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>S/390 and\nzSeries Options</i> <b>-mtune=</b><i>cpu-type</i>\n<b>-march=</b><i>cpu-type</i> <b>-mhard-float -msoft-float\n-mhard-dfp -mno-hard-dfp -mlong-double-64 -mlong-double-128\n-mbackchain -mno-backchain -mpacked-stack -mno-packed-stack\n-msmall-exec -mno-small-exec -mmvcle -mno-mvcle -m64 -m31\n-mdebug -mno-debug -mesa -mzarch -mhtm -mvx -mzvector\n-mtpf-trace -mno-tpf-trace -mtpf-trace-skip\n-mno-tpf-trace-skip -mfused-madd -mno-fused-madd\n-mwarn-framesize -mwarn-dynamicstack -mstack-size\n-mstack-guard\n-mhotpatch=</b><i>halfwords</i><b>,</b><i>halfwords</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Score\nOptions</i> <b>-meb -mel -mnhwloop -muls -mmac -mscore5\n-mscore5u -mscore7 -mscore7d</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>SH</small>\nOptions</i> <b>-m1 -m2 -m2e -m2a-nofpu -m2a-single-only\n-m2a-single -m2a -m3 -m3e -m4-nofpu -m4-single-only\n-m4-single -m4 -m4a-nofpu -m4a-single-only -m4a-single -m4a\n-m4al -mb -ml -mdalign -mrelax -mbigtable -mfmovd -mrenesas\n-mno-renesas -mnomacsave -mieee -mno-ieee -mbitops -misize\n-minline-ic_invalidate -mpadstruct -mprefergot -musermode\n-multcost=</b><i>number</i> <b>-mdiv=</b><i>strategy</i>\n<b>-mdivsi3_libfunc=</b><i>name</i>\n<b>-mfixed-range=</b><i>register-range</i>\n<b>-maccumulate-outgoing-args\n-matomic-model=</b><i>atomic-model</i>\n<b>-mbranch-cost=</b><i>num</i> <b>-mzdcbranch\n-mno-zdcbranch -mcbranch-force-delay-slot -mfused-madd\n-mno-fused-madd -mfsca -mno-fsca -mfsrra -mno-fsrra\n-mpretend-cmove -mtas</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Solaris 2\nOptions</i> <b>-mclear-hwcap -mno-clear-hwcap -mimpure-text\n-mno-impure-text -pthreads</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>SPARC</small>\nOptions</i> <b>-mcpu=</b><i>cpu-type</i>\n<b>-mtune=</b><i>cpu-type</i>\n<b>-mcmodel=</b><i>code-model</i>\n<b>-mmemory-model=</b><i>mem-model</i> <b>-m32 -m64\n-mapp-regs -mno-app-regs -mfaster-structs\n-mno-faster-structs -mflat -mno-flat -mfpu -mno-fpu\n-mhard-float -msoft-float -mhard-quad-float\n-msoft-quad-float -mstack-bias -mno-stack-bias\n-mstd-struct-return -mno-std-struct-return\n-munaligned-doubles -mno-unaligned-doubles -muser-mode\n-mno-user-mode -mv8plus -mno-v8plus -mvis -mno-vis -mvis2\n-mno-vis2 -mvis3 -mno-vis3 -mvis4 -mno-vis4 -mvis4b\n-mno-vis4b -mcbcond -mno-cbcond -mfmaf -mno-fmaf -mfsmuld\n-mno-fsmuld -mpopc -mno-popc -msubxc -mno-subxc -mfix-at697f\n-mfix-ut699 -mfix-ut700 -mfix-gr712rc -mlra -mno-lra</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>System V\nOptions</i> <b>-Qy -Qn -YP,</b><i>paths</i>\n<b>-Ym,</b><i>dir</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>TILE-Gx\nOptions</i> <b>-mcpu=CPU -m32 -m64 -mbig-endian\n-mlittle-endian -mcmodel=</b><i>code-model</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>TILEPro\nOptions</i> <b>-mcpu=</b><i>cpu</i> <b>-m32</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>V850\nOptions</i> <b>-mlong-calls -mno-long-calls -mep -mno-ep\n-mprolog-function -mno-prolog-function -mspace\n-mtda=</b><i>n</i> <b>-msda=</b><i>n</i>\n<b>-mzda=</b><i>n</i> <b>-mapp-regs -mno-app-regs\n-mdisable-callt -mno-disable-callt -mv850e2v3 -mv850e2\n-mv850e1 -mv850es -mv850e -mv850 -mv850e3v5 -mloop -mrelax\n-mlong-jumps -msoft-float -mhard-float -mgcc-abi -mrh850-abi\n-mbig-switch</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>VAX</small>\nOptions</i> <b>-mg -mgnu -munix</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Visium\nOptions</i> <b>-mdebug -msim -mfpu -mno-fpu -mhard-float\n-msoft-float -mcpu=</b><i>cpu-type</i>\n<b>-mtune=</b><i>cpu-type</i> <b>-msv-mode\n-muser-mode</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i><small>VMS</small>\nOptions</i> <b>-mvms-return-codes\n-mdebug-main=</b><i>prefix</i> <b>-mmalloc64\n-mpointer-size=</b><i>size</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>VxWorks\nOptions</i> <b>-mrtp -non-static -Bstatic -Bdynamic\n-Xbind-lazy -Xbind-now</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>x86\nOptions</i> <b>-mtune=</b><i>cpu-type</i>\n<b>-march=</b><i>cpu-type</i>\n<b>-mtune-ctrl=</b><i>feature-list</i>\n<b>-mdump-tune-features -mno-default\n-mfpmath=</b><i>unit</i> <b>-masm=</b><i>dialect</i>\n<b>-mno-fancy-math-387 -mno-fp-ret-in-387 -m80387\n-mhard-float -msoft-float -mno-wide-multiply -mrtd\n-malign-double -mpreferred-stack-boundary=</b><i>num</i>\n<b>-mincoming-stack-boundary=</b><i>num</i> <b>-mcld -mcx16\n-msahf -mmovbe -mcrc32 -mmwait -mrecip\n-mrecip=</b><i>opt</i> <b>-mvzeroupper -mprefer-avx128\n-mprefer-vector-width=</b><i>opt</i> <b>-mmmx -msse -msse2\n-msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx -mavx2\n-mavx512f -mavx512pf -mavx512er -mavx512cd -mavx512vl\n-mavx512bw -mavx512dq -mavx512ifma -mavx512vbmi -msha -maes\n-mpclmul -mfsgsbase -mrdrnd -mf16c -mfma -mpconfig\n-mwbnoinvd -mptwrite -mprefetchwt1 -mclflushopt -mclwb\n-mxsavec -mxsaves -msse4a -m3dnow -m3dnowa -mpopcnt -mabm\n-mbmi -mtbm -mfma4 -mxop -madx -mlzcnt -mbmi2 -mfxsr -mxsave\n-mxsaveopt -mrtm -mhle -mlwp -mmwaitx -mclzero -mpku\n-mthreads -mgfni -mvaes -mwaitpkg -mshstk -mmanual-endbr\n-mforce-indirect-call -mavx512vbmi2 -mavx512bf16 -menqcmd\n-mvpclmulqdq -mavx512bitalg -mmovdiri -mmovdir64b\n-mavx512vpopcntdq -mavx5124fmaps -mavx512vnni -mavx5124vnniw\n-mprfchw -mrdpid -mrdseed -msgx -mavx512vp2intersect\n-mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16\n-muintr -mhreset -mavxvnni -mcldemote -mms-bitfields\n-mno-align-stringops -minline-all-stringops\n-minline-stringops-dynamically\n-mstringop-strategy=</b><i>alg</i> <b>-mkl -mwidekl\n-mmemcpy-strategy=</b><i>strategy</i>\n<b>-mmemset-strategy=</b><i>strategy</i> <b>-mpush-args\n-maccumulate-outgoing-args -m128bit-long-double\n-m96bit-long-double -mlong-double-64 -mlong-double-80\n-mlong-double-128 -mregparm=</b><i>num</i> <b>-msseregparm\n-mveclibabi=</b><i>type</i> <b>-mvect8-ret-in-mem -mpc32\n-mpc64 -mpc80 -mstackrealign -momit-leaf-frame-pointer\n-mno-red-zone -mno-tls-direct-seg-refs\n-mcmodel=</b><i>code-model</i> <b>-mabi=</b><i>name</i>\n<b>-maddress-mode=</b><i>mode</i> <b>-m32 -m64 -mx32 -m16\n-miamcu -mlarge-data-threshold=</b><i>num</i> <b>-msse2avx\n-mfentry -mrecord-mcount -mnop-mcount -m8bit-idiv\n-minstrument-return=</b><i>type</i>\n<b>-mfentry-name=</b><i>name</i>\n<b>-mfentry-section=</b><i>name</i>\n<b>-mavx256-split-unaligned-load\n-mavx256-split-unaligned-store -malign-data=</b><i>type</i>\n<b>-mstack-protector-guard=</b><i>guard</i>\n<b>-mstack-protector-guard-reg=</b><i>reg</i>\n<b>-mstack-protector-guard-offset=</b><i>offset</i>\n<b>-mstack-protector-guard-symbol=</b><i>symbol</i>\n<b>-mgeneral-regs-only -mcall-ms2sysv-xlogues\n-mindirect-branch=</b><i>choice</i>\n<b>-mfunction-return=</b><i>choice</i>\n<b>-mindirect-branch-register -mharden-sls=</b><i>choice</i>\n<b>-mindirect-branch-cs-prefix -mneeded</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>x86 Windows\nOptions</i> <b>-mconsole -mcygwin -mno-cygwin -mdll\n-mnop-fun-dllimport -mthread -municode -mwin32 -mwindows\n-fno-set-stack-executable</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Xstormy16\nOptions</i> <b>-msim</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Xtensa\nOptions</i> <b>-mconst16 -mno-const16 -mfused-madd\n-mno-fused-madd -mforce-no-pic -mserialize-volatile\n-mno-serialize-volatile -mtext-section-literals\n-mno-text-section-literals -mauto-litpools\n-mno-auto-litpools -mtarget-align -mno-target-align\n-mlongcalls -mno-longcalls -mabi=</b><i>abi-type</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>zSeries\nOptions</i> See S/390 and zSeries Options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options\nControlling the Kind of Output</b> <br>\nCompilation can involve up to four stages: preprocessing,\ncompilation proper, assembly and linking, always in that\norder. <small>GCC</small> is capable of preprocessing and\ncompiling several files either into several assembler input\nfiles, or into one assembler input file; then each assembler\ninput file produces an object file, and linking combines all\nthe object files (those newly compiled, and those specified\nas input) into an executable file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For any given\ninput file, the file name suffix determines what kind of\ncompilation is done: <i><br>\nfile</i><b>.c</b></p>\n\n<p style=\"margin-left:17%;\">C source code that must be\npreprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.i</b></p>\n\n<p style=\"margin-left:17%;\">C source code that should not\nbe preprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.ii</b></p>\n\n<p style=\"margin-left:17%;\">C <small>++</small> source code\nthat should not be preprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.m</b></p>\n\n<p style=\"margin-left:17%;\">Objective-C source code. Note\nthat you must link with the <i>libobjc</i> library to make\nan Objective-C program work.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.mi</b></p>\n\n<p style=\"margin-left:17%;\">Objective-C source code that\nshould not be preprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.mm</b> <i><br>\nfile</i><b>.M</b></p>\n\n<p style=\"margin-left:17%;\">Objective-C <small>++</small>\nsource code. Note that you must link with the <i>libobjc</i>\nlibrary to make an Objective-C <small>++</small> program\nwork. Note that <b>.M</b> refers to a literal capital M.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.mii</b></p>\n\n<p style=\"margin-left:17%;\">Objective-C <small>++</small>\nsource code that should not be preprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.h</b></p>\n\n<p style=\"margin-left:17%;\">C, C <small>++</small> ,\nObjective-C or Objective-C <small>++</small> header file to\nbe turned into a precompiled header (default), or C, C\n<small>++</small> header file to be turned into an Ada spec\n(via the <b>-fdump-ada-spec</b> switch).</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.cc</b> <i><br>\nfile</i><b>.cp</b> <i><br>\nfile</i><b>.cxx</b> <i><br>\nfile</i><b>.cpp</b> <i><br>\nfile</i><b>.CPP</b> <i><br>\nfile</i><b>.c++</b> <i><br>\nfile</i><b>.C</b></p>\n\n<p style=\"margin-left:17%;\">C <small>++</small> source code\nthat must be preprocessed. Note that in <b>.cxx</b>, the\nlast two letters must both be literally <b>x</b>. Likewise,\n<b>.C</b> refers to a literal capital C.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.mm</b> <i><br>\nfile</i><b>.M</b></p>\n\n<p style=\"margin-left:17%;\">Objective-C <small>++</small>\nsource code that must be preprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.mii</b></p>\n\n<p style=\"margin-left:17%;\">Objective-C <small>++</small>\nsource code that should not be preprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.hh</b> <i><br>\nfile</i><b>.H</b> <i><br>\nfile</i><b>.hp</b> <i><br>\nfile</i><b>.hxx</b> <i><br>\nfile</i><b>.hpp</b> <i><br>\nfile</i><b>.HPP</b> <i><br>\nfile</i><b>.h++</b> <i><br>\nfile</i><b>.tcc</b></p>\n\n<p style=\"margin-left:17%;\">C <small>++</small> header file\nto be turned into a precompiled header or Ada spec.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.f</b> <i><br>\nfile</i><b>.for</b> <i><br>\nfile</i><b>.ftn</b></p>\n\n<p style=\"margin-left:17%;\">Fixed form Fortran source code\nthat should not be preprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.F</b> <i><br>\nfile</i><b>.FOR</b> <i><br>\nfile</i><b>.fpp</b> <i><br>\nfile</i><b>.FPP</b> <i><br>\nfile</i><b>.FTN</b></p>\n\n<p style=\"margin-left:17%;\">Fixed form Fortran source code\nthat must be preprocessed (with the traditional\npreprocessor).</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.f90</b> <i><br>\nfile</i><b>.f95</b> <i><br>\nfile</i><b>.f03</b> <i><br>\nfile</i><b>.f08</b></p>\n\n<p style=\"margin-left:17%;\">Free form Fortran source code\nthat should not be preprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.F90</b> <i><br>\nfile</i><b>.F95</b> <i><br>\nfile</i><b>.F03</b> <i><br>\nfile</i><b>.F08</b></p>\n\n<p style=\"margin-left:17%;\">Free form Fortran source code\nthat must be preprocessed (with the traditional\npreprocessor).</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.go</b></p>\n\n<p style=\"margin-left:17%;\">Go source code.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.brig</b></p>\n\n<p style=\"margin-left:17%;\"><small>BRIG</small> files\n(binary representation of <small>HSAIL</small> ).</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.d</b></p>\n\n<p style=\"margin-left:17%;\">D source code.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.di</b></p>\n\n<p style=\"margin-left:17%;\">D interface file.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.dd</b></p>\n\n<p style=\"margin-left:17%;\">D documentation code\n(Ddoc).</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.ads</b></p>\n\n<p style=\"margin-left:17%;\">Ada source code file that\ncontains a library unit declaration (a declaration of a\npackage, subprogram, or generic, or a generic\ninstantiation), or a library unit renaming declaration (a\npackage, generic, or subprogram renaming declaration). Such\nfiles are also called <i>specs</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.adb</b></p>\n\n<p style=\"margin-left:17%;\">Ada source code file containing\na library unit body (a subprogram or package body). Such\nfiles are also called <i>bodies</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.s</b></p>\n\n<p style=\"margin-left:17%;\">Assembler code.</p>\n\n<p style=\"margin-left:11%;\"><i>file</i><b>.S</b> <i><br>\nfile</i><b>.sx</b></p>\n\n<p style=\"margin-left:17%;\">Assembler code that must be\npreprocessed.</p>\n\n<p style=\"margin-left:11%;\"><i>other</i></p>\n\n<p style=\"margin-left:17%;\">An object file to be fed\nstraight into linking. Any file name with no recognized\nsuffix is treated this way.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can specify\nthe input language explicitly with the <b>-x</b> option:\n<b><br>\n-x</b> <i>language</i></p>\n\n<p style=\"margin-left:17%;\">Specify explicitly the\n<i>language</i> for the following input files (rather than\nletting the compiler choose a default based on the file name\nsuffix). This option applies to all following input files\nuntil the next <b>-x</b> option. Possible values for\n<i>language</i> are:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">c c-header\ncpp-output <br>\nc++ c++-header c++-system-header c++-user-header\nc++-cpp-output <br>\nobjective-c objective-c-header objective-c-cpp-output <br>\nobjective-c++ objective-c++-header objective-c++-cpp-output\n<br>\nassembler assembler-with-cpp <br>\nada <br>\nd <br>\nf77 f77-cpp-input f95 f95-cpp-input <br>\ngo <br>\nbrig</p>\n\n<p style=\"margin-left:11%;\"><b>-x none</b></p>\n\n<p style=\"margin-left:17%;\">Turn off any specification of a\nlanguage, so that subsequent files are handled according to\ntheir file name suffixes (as they are if <b>-x</b> has not\nbeen used at all).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you only\nwant some of the stages of compilation, you can use\n<b>-x</b> (or filename suffixes) to tell <b>gcc</b> where to\nstart, and one of the options <b>-c</b>, <b>-S</b>, or\n<b>-E</b> to say where <b>gcc</b> is to stop. Note that some\ncombinations (for example, <b>-x cpp-output -E</b>) instruct\n<b>gcc</b> to do nothing at all.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-c</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Compile or assemble the source files, but do not link.\nThe linking stage simply is not done. The ultimate output is\nin the form of an object file for each source file.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By default, the\nobject file name for a source file is made by replacing the\nsuffix <b>.c</b>, <b>.i</b>, <b>.s</b>, etc., with\n<b>.o</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unrecognized\ninput files, not requiring compilation or assembly, are\nignored.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>-S</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Stop after the stage of\ncompilation proper; do not assemble. The output is in the\nform of an assembler code file for each non-assembler input\nfile specified.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By default, the\nassembler file name for a source file is made by replacing\nthe suffix <b>.c</b>, <b>.i</b>, etc., with <b>.s</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Input files\nthat don&rsquo;t require compilation are ignored.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>-E</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Stop after the preprocessing\nstage; do not run the compiler proper. The output is in the\nform of preprocessed source code, which is sent to the\nstandard output.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Input files\nthat don&rsquo;t require preprocessing are ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>-o</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">Place the primary output in\nfile <i>file</i>. This applies to whatever sort of output is\nbeing produced, whether it be an executable file, an object\nfile, an assembler file or preprocessed C code.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If <b>-o</b> is\nnot specified, the default is to put an executable file in\n<i>a.out</i>, the object file for <i>source.suffix</i> in\n<i>source.o</i>, its assembler file in <i>source.s</i>, a\nprecompiled header file in <i>source.suffix.gch</i>, and all\npreprocessed C source on standard output.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Though\n<b>-o</b> names only the primary output, it also affects the\nnaming of auxiliary and dump outputs. See the examples\nbelow. Unless overridden, both auxiliary outputs and dump\noutputs are placed in the same directory as the primary\noutput. In auxiliary outputs, the suffix of the input file\nis replaced with that of the auxiliary output file type; in\ndump outputs, the suffix of the dump file is appended to the\ninput file suffix. In compilation commands, the base name of\nboth auxiliary and dump outputs is that of the primary\noutput; in compile and link commands, the primary output\nname, minus the executable suffix, is combined with the\ninput file name. If both share the same base name,\ndisregarding the suffix, the result of the combination is\nthat base name, otherwise, they are concatenated, separated\nby a dash.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -c foo.c\n...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">will use\n<i>foo.o</i> as the primary output, and place aux outputs\nand dumps next to it, e.g., aux file <i>foo.dwo</i> for\n<b>-gsplit-dwarf</b>, and dump file <i>foo.c.???r.final</i>\nfor <b>-fdump-rtl-final</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a non-linker\noutput file is explicitly specified, aux and dump files by\ndefault take the same base name:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -c foo.c -o\ndir/foobar.o ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">will name aux\noutputs <i>dir/foobar.*</i> and dump outputs\n<i>dir/foobar.c.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A linker output\nwill instead prefix aux and dump outputs:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c bar.c\n-o dir/foobar ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">will generally\nname aux outputs <i>dir/foobar-foo.*</i> and\n<i>dir/foobar-bar.*</i>, and dump outputs\n<i>dir/foobar-foo.c.*</i> and <i>dir/foobar-bar.c.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The one\nexception to the above is when the executable shares the\nbase name with the single input:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c -o\ndir/foo ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">in which case\naux outputs are named <i>dir/foo.*</i> and dump outputs\nnamed <i>dir/foo.c.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The location\nand the names of auxiliary and dump outputs can be adjusted\nby the options <b>-dumpbase</b>, <b>-dumpbase-ext</b>,\n<b>-dumpdir</b>, <b>-save-temps=cwd</b>, and\n<b>-save-temps=obj</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-dumpbase</b>\n<i>dumpbase</i></p>\n\n<p style=\"margin-left:17%;\">This option sets the base name\nfor auxiliary and dump output files. It does not affect the\nname of the primary output file. Intermediate outputs, when\npreserved, are not regarded as primary outputs, but as\nauxiliary outputs:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -save-temps\n-S foo.c</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">saves the (no\nlonger) temporary preprocessed file in <i>foo.i</i>, and\nthen compiles to the (implied) output file <i>foo.s</i>,\nwhereas:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -save-temps\n-dumpbase save-foo -c foo.c</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">preprocesses to\nin <i>save-foo.i</i>, compiles to <i>save-foo.s</i> (now an\nintermediate, thus auxiliary output), and then assembles to\nthe (implied) output file <i>foo.o</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Absent this\noption, dump and aux files take their names from the input\nfile, or from the (non-linker) output file, if one is\nexplicitly specified: dump output files (e.g. those\nrequested by <b>-fdump-*</b> options) with the input name\nsuffix, and aux output files (those requested by other\nnon-dump options, e.g. &quot;-save-temps&quot;,\n&quot;-gsplit-dwarf&quot;, &quot;-fcallgraph-info&quot;)\nwithout it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Similar suffix\ndifferentiation of dump and aux outputs can be attained for\nexplicitly-given <b>-dumpbase basename.suf</b> by also\nspecifying <b>-dumpbase-ext .suf</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<i>dumpbase</i> is explicitly specified with any directory\ncomponent, any <i>dumppfx</i> specification (e.g.\n<b>-dumpdir</b> or <b>-save-temps=*</b>) is ignored, and\ninstead of appending to it, <i>dumpbase</i> fully overrides\nit:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c -c -o\ndir/foo.o -dumpbase alt/foo \\ <br>\n-dumpdir pfx- -save-temps=cwd ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">creates\nauxiliary and dump outputs named <i>alt/foo.*</i>,\ndisregarding <i>dir/</i> in <b>-o</b>, the <i>./</i> prefix\nimplied by <b>-save-temps=cwd</b>, and <i>pfx-</i> in\n<b>-dumpdir</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\n<b>-dumpbase</b> is specified in a command that compiles\nmultiple inputs, or that compiles and then links, it may be\ncombined with <i>dumppfx</i>, as specified under\n<b>-dumpdir</b>. Then, each input file is compiled using the\ncombined <i>dumppfx</i>, and default values for\n<i>dumpbase</i> and <i>auxdropsuf</i> are computed for each\ninput file:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c bar.c\n-c -dumpbase main ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">creates\n<i>foo.o</i> and <i>bar.o</i> as primary outputs, and avoids\noverwriting the auxiliary and dump outputs by using the\n<i>dumpbase</i> as a prefix, creating auxiliary and dump\noutputs named <i>main-foo.*</i> and <i>main-bar.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">An empty string\nspecified as <i>dumpbase</i> avoids the influence of the\noutput basename in the naming of auxiliary and dump outputs\nduring compilation, computing default values :</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -c foo.c -o\ndir/foobar.o -dumpbase &quot; ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">will name aux\noutputs <i>dir/foo.*</i> and dump outputs\n<i>dir/foo.c.*</i>. Note how their basenames are taken from\nthe input name, but the directory still defaults to that of\nthe output.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\nempty-string dumpbase does not prevent the use of the output\nbasename for outputs during linking:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c bar.c\n-o dir/foobar -dumpbase &quot; -flto ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The compilation\nof the source files will name auxiliary outputs\n<i>dir/foo.*</i> and <i>dir/bar.*</i>, and dump outputs\n<i>dir/foo.c.*</i> and <i>dir/bar.c.*</i>.\n<small>LTO</small> recompilation during linking will use\n<i>dir/foobar.</i> as the prefix for dumps and auxiliary\nfiles.</p>\n\n<p style=\"margin-left:11%;\"><b>-dumpbase-ext</b>\n<i>auxdropsuf</i></p>\n\n<p style=\"margin-left:17%;\">When forming the name of an\nauxiliary (but not a dump) output file, drop trailing\n<i>auxdropsuf</i> from <i>dumpbase</i> before appending any\nsuffixes. If not specified, this option defaults to the\nsuffix of a default <i>dumpbase</i>, i.e., the suffix of the\ninput file when <b>-dumpbase</b> is not present in the\ncommand line, or <i>dumpbase</i> is combined with\n<i>dumppfx</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c -c -o\ndir/foo.o -dumpbase x-foo.c -dumpbase-ext .c ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">creates\n<i>dir/foo.o</i> as the main output, and generates auxiliary\noutputs in <i>dir/x-foo.*</i>, taking the location of the\nprimary output, and dropping the <i>.c</i> suffix from the\n<i>dumpbase</i>. Dump outputs retain the suffix:\n<i>dir/x-foo.c.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option is\ndisregarded if it does not match the suffix of a specified\n<i>dumpbase</i>, except as an alternative to the executable\nsuffix when appending the linker output base name to\n<i>dumppfx</i>, as specified below:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c bar.c\n-o main.out -dumpbase-ext .out ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">creates\n<i>main.out</i> as the primary output, and avoids\noverwriting the auxiliary and dump outputs by using the\nexecutable name minus <i>auxdropsuf</i> as a prefix,\ncreating auxiliary outputs named <i>main-foo.*</i> and\n<i>main-bar.*</i> and dump outputs named <i>main-foo.c.*</i>\nand <i>main-bar.c.*</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>-dumpdir</b>\n<i>dumppfx</i></p>\n\n<p style=\"margin-left:17%;\">When forming the name of an\nauxiliary or dump output file, use <i>dumppfx</i> as a\nprefix:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -dumpdir\npfx- -c foo.c ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">creates\n<i>foo.o</i> as the primary output, and auxiliary outputs\nnamed <i>pfx-foo.*</i>, combining the given <i>dumppfx</i>\nwith the default <i>dumpbase</i> derived from the default\nprimary output, derived in turn from the input name. Dump\noutputs also take the input name suffix:\n<i>pfx-foo.c.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<i>dumppfx</i> is to be used as a directory name, it must\nend with a directory separator:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -dumpdir\ndir/ -c foo.c -o obj/bar.o ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">creates\n<i>obj/bar.o</i> as the primary output, and auxiliary\noutputs named <i>dir/bar.*</i>, combining the given\n<i>dumppfx</i> with the default <i>dumpbase</i> derived from\nthe primary output name. Dump outputs also take the input\nname suffix: <i>dir/bar.c.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It defaults to\nthe location of the output file, unless the output file is a\nspecial file like &quot;/dev/null&quot;. Options\n<b>-save-temps=cwd</b> and <b>-save-temps=obj</b> override\nthis default, just like an explicit <b>-dumpdir</b> option.\nIn case multiple such options are given, the last one\nprevails:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -dumpdir\npfx- -c foo.c -save-temps=obj ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">outputs\n<i>foo.o</i>, with auxiliary outputs named <i>foo.*</i>\nbecause <b>-save-temps=*</b> overrides the <i>dumppfx</i>\ngiven by the earlier <b>-dumpdir</b> option. It does not\nmatter that <b>=obj</b> is the default for\n<b>-save-temps</b>, nor that the output directory is\nimplicitly the current directory. Dump outputs are named\n<i>foo.c.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When compiling\nfrom multiple input files, if <b>-dumpbase</b> is specified,\n<i>dumpbase</i>, minus a <i>auxdropsuf</i> suffix, and a\ndash are appended to (or override, if containing any\ndirectory components) an explicit or defaulted\n<i>dumppfx</i>, so that each of the multiple compilations\ngets differently-named aux and dump outputs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c bar.c\n-c -dumpdir dir/pfx- -dumpbase main ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">outputs\nauxiliary dumps to <i>dir/pfx-main-foo.*</i> and\n<i>dir/pfx-main-bar.*</i>, appending <i>dumpbase</i>- to\n<i>dumppfx</i>. Dump outputs retain the input file suffix:\n<i>dir/pfx-main-foo.c.*</i> and <i>dir/pfx-main-bar.c.*</i>,\nrespectively. Contrast with the single-input\ncompilation:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c -c\n-dumpdir dir/pfx- -dumpbase main ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">that, applying\n<b>-dumpbase</b> to a single source, does not compute and\nappend a separate <i>dumpbase</i> per input file. Its\nauxiliary and dump outputs go in <i>dir/pfx-main.*</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When compiling\nand then linking from multiple input files, a defaulted or\nexplicitly specified <i>dumppfx</i> also undergoes the\n<i>dumpbase</i>- transformation above (e.g. the compilation\nof <i>foo.c</i> and <i>bar.c</i> above, but without\n<b>-c</b>). If neither <b>-dumpdir</b> nor <b>-dumpbase</b>\nare given, the linker output base name, minus\n<i>auxdropsuf</i>, if specified, or the executable suffix\notherwise, plus a dash is appended to the default\n<i>dumppfx</i> instead. Note, however, that unlike earlier\ncases of linking:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c bar.c\n-dumpdir dir/pfx- -o main ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">does not append\nthe output name <i>main</i> to <i>dumppfx</i>, because\n<b>-dumpdir</b> is explicitly specified. The goal is that\nthe explicitly-specified <i>dumppfx</i> may contain the\nspecified output name as part of the prefix, if desired;\nonly an explicitly-specified <b>-dumpbase</b> would be\ncombined with it, in order to avoid simply discarding a\nmeaningful option.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When compiling\nand then linking from a single input file, the linker output\nbase name will only be appended to the default\n<i>dumppfx</i> as above if it does not share the base name\nwith the single input file name. This has been covered in\nsingle-input linking cases above, but not with an explicit\n<b>-dumpdir</b> that inhibits the combination, even if\noverridden by <b>-save-temps=*</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc foo.c\n-dumpdir alt/pfx- -o dir/main.exe -save-temps=cwd ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Auxiliary\noutputs are named <i>foo.*</i>, and dump outputs\n<i>foo.c.*</i>, in the current working directory as\nultimately requested by <b>-save-temps=cwd</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Summing it all\nup for an intuitive though slightly imprecise data flow: the\nprimary output name is broken into a directory part and a\nbasename part; <i>dumppfx</i> is set to the former, unless\noverridden by <b>-dumpdir</b> or <b>-save-temps=*</b>, and\n<i>dumpbase</i> is set to the latter, unless overriden by\n<b>-dumpbase</b>. If there are multiple inputs or linking,\nthis <i>dumpbase</i> may be combined with <i>dumppfx</i> and\ntaken from each input file. Auxiliary output names for each\ninput are formed by combining <i>dumppfx</i>,\n<i>dumpbase</i> minus suffix, and the auxiliary output\nsuffix; dump output names are only different in that the\nsuffix from <i>dumpbase</i> is retained.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When it comes\nto auxiliary and dump outputs created during\n<small>LTO</small> recompilation, a combination of\n<i>dumppfx</i> and <i>dumpbase</i>, as given or as derived\nfrom the linker output name but not from inputs, even in\ncases in which this combination would not otherwise be used\nas such, is passed down with a trailing period replacing the\ncompiler-added dash, if any, as a <b>-dumpdir</b> option to\n<b>lto-wrapper</b>; being involved in linking, this program\ndoes not normally get any <b>-dumpbase</b> and\n<b>-dumpbase-ext</b>, and it ignores them.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When running\nsub-compilers, <b>lto-wrapper</b> appends <small>LTO</small>\nstage names to the received <i>dumppfx</i>, ensures it\ncontains a directory component so that it overrides any\n<b>-dumpdir</b>, and passes that as <b>-dumpbase</b> to\nsub-compilers.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Print (on standard error output) the commands executed\nto run the stages of compilation. Also print the version\nnumber of the compiler driver program and of the\npreprocessor and the compiler proper.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-###</b></p>\n\n<p style=\"margin-left:17%;\">Like <b>-v</b> except the\ncommands are not executed and arguments are quoted unless\nthey contain only alphanumeric characters or\n&quot;./-_&quot;. This is useful for shell scripts to\ncapture the driver-generated command lines.</p>\n\n<p style=\"margin-left:11%;\"><b>--help</b></p>\n\n<p style=\"margin-left:17%;\">Print (on the standard output)\na description of the command-line options understood by\n<b>gcc</b>. If the <b>-v</b> option is also specified then\n<b>--help</b> is also passed on to the various processes\ninvoked by <b>gcc</b>, so that they can display the\ncommand-line options they accept. If the <b>-Wextra</b>\noption has also been specified (prior to the <b>--help</b>\noption), then command-line options that have no\ndocumentation associated with them are also displayed.</p>\n\n<p style=\"margin-left:11%;\"><b>--target-help</b></p>\n\n<p style=\"margin-left:17%;\">Print (on the standard output)\na description of target-specific command-line options for\neach tool. For some targets extra target-specific\ninformation may also be printed.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--help={</b><i>class</i>|[<b>^</b>]<i>qualifier</i><b>}</b>[<b>,...</b>]</p>\n\n<p style=\"margin-left:17%;\">Print (on the standard output)\na description of the command-line options understood by the\ncompiler that fit into all specified classes and qualifiers.\nThese are the supported classes: <b><br>\noptimizers</b></p>\n\n<p style=\"margin-left:23%;\">Display all of the optimization\noptions supported by the compiler.</p>\n\n<p style=\"margin-left:17%;\"><b>warnings</b></p>\n\n<p style=\"margin-left:23%;\">Display all of the options\ncontrolling warning messages produced by the compiler.</p>\n\n<p style=\"margin-left:17%;\"><b>target</b></p>\n\n<p style=\"margin-left:23%;\">Display target-specific\noptions. Unlike the <b>--target-help</b> option however,\ntarget-specific options of the linker and assembler are not\ndisplayed. This is because those tools do not currently\nsupport the extended <b>--help=</b> syntax.</p>\n\n<p style=\"margin-left:17%;\"><b>params</b></p>\n\n<p style=\"margin-left:23%;\">Display the values recognized\nby the <b>--param</b> option.</p>\n\n<p style=\"margin-left:17%;\"><i>language</i></p>\n\n<p style=\"margin-left:23%;\">Display the options supported\nfor <i>language</i>, where <i>language</i> is the name of\none of the languages supported in this version of\n<small>GCC.</small> If an option is supported by all\nlanguages, one needs to select <b>common</b> class.</p>\n\n<p style=\"margin-left:17%;\"><b>common</b></p>\n\n<p style=\"margin-left:23%;\">Display the options that are\ncommon to all languages.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These are the\nsupported qualifiers: <b><br>\nundocumented</b></p>\n\n<p style=\"margin-left:23%;\">Display only those options that\nare undocumented.</p>\n\n<p style=\"margin-left:17%;\"><b>joined</b></p>\n\n<p style=\"margin-left:23%;\">Display options taking an\nargument that appears after an equal sign in the same\ncontinuous piece of text, such as: <b>--help=target</b>.</p>\n\n<p style=\"margin-left:17%;\"><b>separate</b></p>\n\n<p style=\"margin-left:23%;\">Display options taking an\nargument that appears as a separate word following the\noriginal option, such as: <b>-o output-file</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Thus for\nexample to display all the undocumented target-specific\nswitches supported by the compiler, use:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">--help=target,undocumented</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The sense of a\nqualifier can be inverted by prefixing it with the <b>^</b>\ncharacter, so for example to display all binary warning\noptions (i.e., ones that are either on or off and that do\nnot take an argument) that have a description, use:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">--help=warnings,^joined,^undocumented</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The argument to\n<b>--help=</b> should not consist solely of inverted\nqualifiers.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Combining\nseveral classes is possible, although this usually restricts\nthe output so much that there is nothing to display. One\ncase where it does work, however, is when one of the classes\nis <i>target</i>. For example, to display all the\ntarget-specific optimization options, use:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">--help=target,optimizers</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>--help=</b> option can be repeated on the command line.\nEach successive use displays its requested class of options,\nskipping those that have already been displayed. If\n<b>--help</b> is also specified anywhere on the command line\nthen this takes precedence over any <b>--help=</b>\noption.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\n<b>-Q</b> option appears on the command line before the\n<b>--help=</b> option, then the descriptive text displayed\nby <b>--help=</b> is changed. Instead of describing the\ndisplayed options, an indication is given as to whether the\noption is enabled, disabled or set to a specific value\n(assuming that the compiler knows this at the point where\nthe <b>--help=</b> option is used).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Here is a\ntruncated example from the <small>ARM</small> port of\n<b>gcc</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">% gcc -Q\n-mabi=2 --help=target -c <br>\nThe following options are target specific: <br>\n-mabi= 2 <br>\n-mabort-on-noreturn [disabled] <br>\n-mapcs [disabled]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The output is\nsensitive to the effects of previous command-line options,\nso for example it is possible to find out which\noptimizations are enabled at <b>-O2</b> by using:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">-Q -O2\n--help=optimizers</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Alternatively\nyou can discover which binary optimizations are enabled by\n<b>-O3</b> by using:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -c -Q -O3\n--help=optimizers &gt; /tmp/O3-opts <br>\ngcc -c -Q -O2 --help=optimizers &gt; /tmp/O2-opts <br>\ndiff /tmp/O2-opts /tmp/O3-opts | grep enabled</p>\n\n<p style=\"margin-left:11%;\"><b>--version</b></p>\n\n<p style=\"margin-left:17%;\">Display the version number and\ncopyrights of the invoked <small>GCC.</small></p>\n\n<p style=\"margin-left:11%;\"><b>-pass-exit-codes</b></p>\n\n<p style=\"margin-left:17%;\">Normally the <b>gcc</b> program\nexits with the code of 1 if any phase of the compiler\nreturns a non-success return code. If you specify\n<b>-pass-exit-codes</b>, the <b>gcc</b> program instead\nreturns with the numerically highest error produced by any\nphase returning an error indication. The C, C\n<small>++</small> , and Fortran front ends return 4 if an\ninternal compiler error is encountered.</p>\n\n<p style=\"margin-left:11%;\"><b>-pipe</b></p>\n\n<p style=\"margin-left:17%;\">Use pipes rather than temporary\nfiles for communication between the various stages of\ncompilation. This fails to work on some systems where the\nassembler is unable to read from a pipe; but the\n<small>GNU</small> assembler has no trouble.</p>\n\n<p style=\"margin-left:11%;\"><b>-specs=</b><i>file</i></p>\n\n<p style=\"margin-left:17%;\">Process <i>file</i> after the\ncompiler reads in the standard <i>specs</i> file, in order\nto override the defaults which the <b>gcc</b> driver program\nuses when determining what switches to pass to <b>cc1</b>,\n<b>cc1plus</b>, <b>as</b>, <b>ld</b>, etc. More than one\n<b>-specs=</b><i>file</i> can be specified on the command\nline, and they are processed in order, from left to\nright.</p>\n\n<p style=\"margin-left:11%;\"><b>-wrapper</b></p>\n\n<p style=\"margin-left:17%;\">Invoke all subcommands under a\nwrapper program. The name of the wrapper program and its\nparameters are passed as a comma separated list.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">gcc -c t.c\n-wrapper gdb,--args</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This invokes\nall subprograms of <b>gcc</b> under <b>gdb --args</b>, thus\nthe invocation of <b>cc1</b> is <b>gdb --args cc1\n...</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-ffile-prefix-map=</b><i>old</i><b>=</b><i>new</i></p>\n\n<p style=\"margin-left:17%;\">When compiling files residing\nin directory <i>old</i>, record any references to them in\nthe result of the compilation as if the files resided in\ndirectory <i>new</i> instead. Specifying this option is\nequivalent to specifying all the individual\n<b>-f*-prefix-map</b> options. This can be used to make\nreproducible builds that are location independent. See also\n<b>-fmacro-prefix-map</b> and <b>-fdebug-prefix-map</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fplugin=</b><i>name</i><b>.so</b></p>\n\n<p style=\"margin-left:17%;\">Load the plugin code in file\n<i>name</i>.so, assumed to be a shared object to be\ndlopen&rsquo;d by the compiler. The base name of the shared\nobject file is used to identify the plugin for the purposes\nof argument parsing (See\n<b>-fplugin-arg-</b><i>name</i><b>-</b><i>key</i><b>=</b><i>value</i>\nbelow). Each plugin should define the callback functions\nspecified in the Plugins <small>API.</small></p>\n\n\n<p style=\"margin-left:11%;\"><b>-fplugin-arg-</b><i>name</i><b>-</b><i>key</i><b>=</b><i>value</i></p>\n\n<p style=\"margin-left:17%;\">Define an argument called\n<i>key</i> with a value of <i>value</i> for the plugin\ncalled <i>name</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fdump-ada-spec</b>[<b>-slim</b>]</p>\n\n<p style=\"margin-left:17%;\">For C and C <small>++</small>\nsource and include files, generate corresponding Ada\nspecs.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fada-spec-parent=</b><i>unit</i></p>\n\n<p style=\"margin-left:17%;\">In conjunction with\n<b>-fdump-ada-spec</b>[<b>-slim</b>] above, generate Ada\nspecs as child units of parent <i>unit</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fdump-go-spec=</b><i>file</i></p>\n\n<p style=\"margin-left:17%;\">For input files in any\nlanguage, generate corresponding Go declarations in\n<i>file</i>. This generates Go &quot;const&quot;,\n&quot;type&quot;, &quot;var&quot;, and &quot;func&quot;\ndeclarations which may be a useful way to start writing a Go\ninterface to code written in some other language.</p>\n\n<p style=\"margin-left:11%;\"><b>@</b><i>file</i></p>\n\n<p style=\"margin-left:17%;\">Read command-line options from\n<i>file</i>. The options read are inserted in place of the\noriginal @<i>file</i> option. If <i>file</i> does not exist,\nor cannot be read, then the option will be treated\nliterally, and not removed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options in\n<i>file</i> are separated by whitespace. A whitespace\ncharacter may be included in an option by surrounding the\nentire option in either single or double quotes. Any\ncharacter (including a backslash) may be included by\nprefixing the character to be included with a backslash. The\n<i>file</i> may itself contain additional @<i>file</i>\noptions; any such options will be processed recursively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Compiling C\n<small>++</small> Programs</b> <br>\nC <small>++</small> source files conventionally use one of\nthe suffixes <b>.C</b>, <b>.cc</b>, <b>.cpp</b>,\n<b>.CPP</b>, <b>.c++</b>, <b>.cp</b>, or <b>.cxx</b>; C\n<small>++</small> header files often use <b>.hh</b>,\n<b>.hpp</b>, <b>.H</b>, or (for shared template code)\n<b>.tcc</b>; and preprocessed C <small>++</small> files use\nthe suffix <b>.ii</b>. <small>GCC</small> recognizes files\nwith these names and compiles them as C <small>++</small>\nprograms even if you call the compiler the same way as for\ncompiling C programs (usually with the name <b>gcc</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However, the\nuse of <b>gcc</b> does not add the C <small>++</small>\nlibrary. <b>g++</b> is a program that calls\n<small>GCC</small> and automatically specifies linking\nagainst the C <small>++</small> library. It treats\n<b>.c</b>, <b>.h</b> and <b>.i</b> files as C\n<small>++</small> source files instead of C source files\nunless <b>-x</b> is used. This program is also useful when\nprecompiling a C header file with a <b>.h</b> extension for\nuse in C <small>++</small> compilations. On many systems,\n<b>g++</b> is also installed with the name <b>c++</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When you\ncompile C <small>++</small> programs, you may specify many\nof the same command-line options that you use for compiling\nprograms in any language; or command-line options meaningful\nfor C and related languages; or options that are meaningful\nonly for C <small>++</small> programs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options\nControlling C Dialect</b> <br>\nThe following options control the dialect of C (or languages\nderived from C, such as C <small>++</small> , Objective-C\nand Objective-C <small>++</small> ) that the compiler\naccepts: <b><br>\n-ansi</b></p>\n\n<p style=\"margin-left:17%;\">In C mode, this is equivalent\nto <b>-std=c90</b>. In C <small>++</small> mode, it is\nequivalent to <b>-std=c++98</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This turns off\ncertain features of <small>GCC</small> that are incompatible\nwith <small>ISO C90</small> (when compiling C code), or of\nstandard C <small>++</small> (when compiling C\n<small>++</small> code), such as the &quot;asm&quot; and\n&quot;typeof&quot; keywords, and predefined macros such as\n&quot;unix&quot; and &quot;vax&quot; that identify the type\nof system you are using. It also enables the undesirable and\nrarely used <small>ISO</small> trigraph feature. For the C\ncompiler, it disables recognition of C <small>++</small>\nstyle <b>//</b> comments as well as the &quot;inline&quot;\nkeyword.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The alternate\nkeywords &quot;__asm__&quot;, &quot;__extension__&quot;,\n&quot;__inline__&quot; and &quot;__typeof__&quot; continue\nto work despite <b>-ansi</b>. You would not want to use them\nin an <small>ISO C</small> program, of course, but it is\nuseful to put them in header files that might be included in\ncompilations done with <b>-ansi</b>. Alternate predefined\nmacros such as &quot;__unix__&quot; and &quot;__vax__&quot;\nare also available, with or without <b>-ansi</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>-ansi</b> option does not cause non-ISO programs to be\nrejected gratuitously. For that, <b>-Wpedantic</b> is\nrequired in addition to <b>-ansi</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The macro\n&quot;__STRICT_ANSI__&quot; is predefined when the\n<b>-ansi</b> option is used. Some header files may notice\nthis macro and refrain from declaring certain functions or\ndefining certain macros that the <small>ISO</small> standard\ndoesn&rsquo;t call for; this is to avoid interfering with\nany programs that might use these names for other\nthings.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Functions that\nare normally built in but do not have semantics defined by\n<small>ISO C</small> (such as &quot;alloca&quot; and\n&quot;ffs&quot;) are not built-in functions when\n<b>-ansi</b> is used.</p>\n\n<p style=\"margin-left:11%;\"><b>-std=</b></p>\n\n<p style=\"margin-left:17%;\">Determine the language\nstandard. This option is currently only supported when\ncompiling C or C <small>++</small> .</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The compiler\ncan accept several base standards, such as <b>c90</b> or\n<b>c++98</b>, and <small>GNU</small> dialects of those\nstandards, such as <b>gnu90</b> or <b>gnu++98</b>. When a\nbase standard is specified, the compiler accepts all\nprograms following that standard plus those using\n<small>GNU</small> extensions that do not contradict it. For\nexample, <b>-std=c90</b> turns off certain features of\n<small>GCC</small> that are incompatible with <small>ISO\nC90,</small> such as the &quot;asm&quot; and\n&quot;typeof&quot; keywords, but not other\n<small>GNU</small> extensions that do not have a meaning in\n<small>ISO C90,</small> such as omitting the middle term of\na &quot;?:&quot; expression. On the other hand, when a\n<small>GNU</small> dialect of a standard is specified, all\nfeatures supported by the compiler are enabled, even when\nthose features change the meaning of the base standard. As a\nresult, some strict-conforming programs may be rejected. The\nparticular standard is used by <b>-Wpedantic</b> to identify\nwhich features are <small>GNU</small> extensions given that\nversion of the standard. For example <b>-std=gnu90\n-Wpedantic</b> warns about C <small>++</small> style\n<b>//</b> comments, while <b>-std=gnu99 -Wpedantic</b> does\nnot.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A value for\nthis option must be provided; possible values are</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c90</b></p></td>\n<td width=\"78%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c89</b></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><b>iso9899:1990</b></p>\n\n<p style=\"margin-left:23%;\">Support all <small>ISO\nC90</small> programs (certain <small>GNU</small> extensions\nthat conflict with <small>ISO C90</small> are disabled).\nSame as <b>-ansi</b> for C code.</p>\n\n<p style=\"margin-left:17%;\"><b>iso9899:199409</b></p>\n\n<p style=\"margin-left:23%;\"><small>ISO C90</small> as\nmodified in amendment 1.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c99</b></p></td>\n<td width=\"78%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c9x</b></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><b>iso9899:1999 <br>\niso9899:199x</b></p>\n\n<p style=\"margin-left:23%;\"><small>ISO C99.</small> This\nstandard is substantially completely supported, modulo bugs\nand floating-point issues (mainly but not entirely relating\nto optional C99 features from Annexes F and G). See\n&lt;<b>http://gcc.gnu.org/c99status.html</b>&gt; for more\ninformation. The names <b>c9x</b> and <b>iso9899:199x</b>\nare deprecated.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c11</b></p></td>\n<td width=\"78%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c1x</b></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><b>iso9899:2011</b></p>\n\n<p style=\"margin-left:23%;\"><small>ISO C11,</small> the\n2011 revision of the <small>ISO C</small> standard. This\nstandard is substantially completely supported, modulo bugs,\nfloating-point issues (mainly but not entirely relating to\noptional C11 features from Annexes F and G) and the optional\nAnnexes K (Bounds-checking interfaces) and L\n(Analyzability). The name <b>c1x</b> is deprecated.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c17</b></p></td>\n<td width=\"78%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c18</b></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><b>iso9899:2017 <br>\niso9899:2018</b></p>\n\n<p style=\"margin-left:23%;\"><small>ISO C17,</small> the\n2017 revision of the <small>ISO C</small> standard\n(published in 2018). This standard is same as C11 except for\ncorrections of defects (all of which are also applied with\n<b>-std=c11</b>) and a new value of\n&quot;__STDC_VERSION__&quot;, and so is supported to the\nsame extent as C11.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>c2x</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>The next version of the <small>ISO C</small> standard,\nstill under development. The support for this version is\nexperimental and incomplete.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><b>gnu90 <br>\ngnu89</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<small>ISO C90</small> (including some C99 features).</p>\n\n<p style=\"margin-left:17%;\"><b>gnu99 <br>\ngnu9x</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<small>ISO C99.</small> The name <b>gnu9x</b> is\ndeprecated.</p>\n\n<p style=\"margin-left:17%;\"><b>gnu11 <br>\ngnu1x</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<small>ISO C11.</small> The name <b>gnu1x</b> is\ndeprecated.</p>\n\n<p style=\"margin-left:17%;\"><b>gnu17 <br>\ngnu18</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<small>ISO C17.</small> This is the default for C code.</p>\n\n<p style=\"margin-left:17%;\"><b>gnu2x</b></p>\n\n<p style=\"margin-left:23%;\">The next version of the\n<small>ISO C</small> standard, still under development, plus\n<small>GNU</small> extensions. The support for this version\nis experimental and incomplete.</p>\n\n<p style=\"margin-left:17%;\"><b>c++98 <br>\nc++03</b></p>\n\n<p style=\"margin-left:23%;\">The 1998 <small>ISO C <small>++\nstandard plus the 2003 technical corrigendum and some\nadditional defect reports. Same as <b>-ansi</b> for C\n<small>++</small> code.</small></small></p>\n\n\n<p style=\"margin-left:17%;\"><small><small><b>gnu++98</b></small></small>\n<b><br>\ngnu++03</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<b>-std=c++98</b>.</p>\n\n<p style=\"margin-left:17%;\"><b>c++11 <br>\nc++0x</b></p>\n\n<p style=\"margin-left:23%;\">The 2011 <small>ISO C <small>++\nstandard plus amendments. The name <b>c++0x</b> is\ndeprecated.</small></small></p>\n\n\n<p style=\"margin-left:17%;\"><small><small><b>gnu++11</b></small></small>\n<b><br>\ngnu++0x</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<b>-std=c++11</b>. The name <b>gnu++0x</b> is\ndeprecated.</p>\n\n<p style=\"margin-left:17%;\"><b>c++14 <br>\nc++1y</b></p>\n\n<p style=\"margin-left:23%;\">The 2014 <small>ISO C <small>++\nstandard plus amendments. The name <b>c++1y</b> is\ndeprecated.</small></small></p>\n\n\n<p style=\"margin-left:17%;\"><small><small><b>gnu++14</b></small></small>\n<b><br>\ngnu++1y</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<b>-std=c++14</b>. The name <b>gnu++1y</b> is\ndeprecated.</p>\n\n<p style=\"margin-left:17%;\"><b>c++17 <br>\nc++1z</b></p>\n\n<p style=\"margin-left:23%;\">The 2017 <small>ISO C <small>++\nstandard plus amendments. The name <b>c++1z</b> is\ndeprecated.</small></small></p>\n\n\n<p style=\"margin-left:17%;\"><small><small><b>gnu++17</b></small></small>\n<b><br>\ngnu++1z</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<b>-std=c++17</b>. This is the default for C\n<small>++</small> code. The name <b>gnu++1z</b> is\ndeprecated.</p>\n\n<p style=\"margin-left:17%;\"><b>c++20 <br>\nc++2a</b></p>\n\n<p style=\"margin-left:23%;\">The 2020 <small>ISO C <small>++\nstandard plus amendments. Support is experimental, and could\nchange in incompatible ways in future releases. The name\n<b>c++2a</b> is deprecated.</small></small></p>\n\n\n<p style=\"margin-left:17%;\"><small><small><b>gnu++20</b></small></small>\n<b><br>\ngnu++2a</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<b>-std=c++20</b>. Support is experimental, and could change\nin incompatible ways in future releases. The name\n<b>gnu++2a</b> is deprecated.</p>\n\n<p style=\"margin-left:17%;\"><b>c++2b <br>\nc++23</b></p>\n\n<p style=\"margin-left:23%;\">The next revision of the\n<small>ISO C <small>++ standard, planned for 2023. Support\nis highly experimental, and will almost certainly change in\nincompatible ways in future releases.</small></small></p>\n\n\n<p style=\"margin-left:17%;\"><small><small><b>gnu++2b</b></small></small>\n<b><br>\ngnu++23</b></p>\n\n<p style=\"margin-left:23%;\"><small>GNU</small> dialect of\n<b>-std=c++2b</b>. Support is highly experimental, and will\nalmost certainly change in incompatible ways in future\nreleases.</p>\n\n<p style=\"margin-left:11%;\"><b>-fgnu89-inline</b></p>\n\n<p style=\"margin-left:17%;\">The option\n<b>-fgnu89-inline</b> tells <small>GCC</small> to use the\ntraditional <small>GNU</small> semantics for\n&quot;inline&quot; functions when in C99 mode.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Using this\noption is roughly equivalent to adding the\n&quot;gnu_inline&quot; function attribute to all inline\nfunctions.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The option\n<b>-fno-gnu89-inline</b> explicitly tells <small>GCC</small>\nto use the C99 semantics for &quot;inline&quot; when in C99\nor gnu99 mode (i.e., it specifies the default behavior).\nThis option is not supported in <b>-std=c90</b> or\n<b>-std=gnu90</b> mode.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\npreprocessor macros &quot;__GNUC_GNU_INLINE__&quot; and\n&quot;__GNUC_STDC_INLINE__&quot; may be used to check which\nsemantics are in effect for &quot;inline&quot;\nfunctions.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fpermitted-flt-eval-methods=</b><i>style</i></p>\n\n<p style=\"margin-left:17%;\"><small>ISO/IEC TS\n18661-3</small> defines new permissible values for\n&quot;FLT_EVAL_METHOD&quot; that indicate that operations\nand constants with a semantic type that is an interchange or\nextended format should be evaluated to the precision and\nrange of that type. These new values are a superset of those\npermitted under C99/C11, which does not specify the meaning\nof other positive values of &quot;FLT_EVAL_METHOD&quot;. As\nsuch, code conforming to C11 may not have been written\nexpecting the possibility of the new values.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>-fpermitted-flt-eval-methods</b>\nspecifies whether the compiler should allow only the values\nof &quot;FLT_EVAL_METHOD&quot; specified in C99/C11, or the\nextended set of values specified in <small>ISO/IEC TS\n18661-3.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>style</i> is\neither &quot;c11&quot; or &quot;ts-18661-3&quot; as\nappropriate.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\nwhen in a standards compliant mode (<b>-std=c11</b> or\nsimilar) is <b>-fpermitted-flt-eval-methods=c11</b>. The\ndefault when in a <small>GNU</small> dialect\n(<b>-std=gnu11</b> or similar) is\n<b>-fpermitted-flt-eval-methods=ts-18661-3</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-aux-info</b>\n<i>filename</i></p>\n\n<p style=\"margin-left:17%;\">Output to the given filename\nprototyped declarations for all functions declared and/or\ndefined in a translation unit, including those in header\nfiles. This option is silently ignored in any language other\nthan C.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Besides\ndeclarations, the file indicates, in comments, the origin of\neach declaration (source file and line), whether the\ndeclaration was implicit, prototyped or unprototyped\n(<b>I</b>, <b>N</b> for new or <b>O</b> for old,\nrespectively, in the first character after the line number\nand the colon), and whether it came from a declaration or a\ndefinition (<b>C</b> or <b>F</b>, respectively, in the\nfollowing character). In the case of function definitions, a\nK&amp;R-style list of arguments followed by their\ndeclarations is also provided, inside comments, after the\ndeclaration.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fallow-parameterless-variadic-functions</b></p>\n\n<p style=\"margin-left:17%;\">Accept variadic functions\nwithout named parameters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Although it is\npossible to define such a function, this is not very useful\nas it is not possible to read the arguments. This is only\nsupported for C as this construct is allowed by C\n<small>++</small> .</p>\n\n<p style=\"margin-left:11%;\"><b>-fno-asm</b></p>\n\n<p style=\"margin-left:17%;\">Do not recognize\n&quot;asm&quot;, &quot;inline&quot; or &quot;typeof&quot; as\na keyword, so that code can use these words as identifiers.\nYou can use the keywords &quot;__asm__&quot;,\n&quot;__inline__&quot; and &quot;__typeof__&quot; instead.\n<b>-ansi</b> implies <b>-fno-asm</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In C\n<small>++</small> , this switch only affects the\n&quot;typeof&quot; keyword, since &quot;asm&quot; and\n&quot;inline&quot; are standard keywords. You may want to\nuse the <b>-fno-gnu-keywords</b> flag instead, which has the\nsame effect. In C99 mode (<b>-std=c99</b> or\n<b>-std=gnu99</b>), this switch only affects the\n&quot;asm&quot; and &quot;typeof&quot; keywords, since\n&quot;inline&quot; is a standard keyword in <small>ISO\nC99.</small></p>\n\n<p style=\"margin-left:11%;\"><b>-fno-builtin <br>\n-fno-builtin-</b><i>function</i></p>\n\n<p style=\"margin-left:17%;\">Don&rsquo;t recognize built-in\nfunctions that do not begin with <b>__builtin_</b> as\nprefix.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>GCC</small>\nnormally generates special code to handle certain built-in\nfunctions more efficiently; for instance, calls to\n&quot;alloca&quot; may become single instructions which\nadjust the stack directly, and calls to &quot;memcpy&quot;\nmay become inline copy loops. The resulting code is often\nboth smaller and faster, but since the function calls no\nlonger appear as such, you cannot set a breakpoint on those\ncalls, nor can you change the behavior of the functions by\nlinking with a different library. In addition, when a\nfunction is recognized as a built-in function,\n<small>GCC</small> may use information about that function\nto warn about problems with calls to that function, or to\ngenerate more efficient code, even if the resulting code\nstill contains calls to that function. For example, warnings\nare given with <b>-Wformat</b> for bad calls to\n&quot;printf&quot; when &quot;printf&quot; is built in and\n&quot;strlen&quot; is known not to modify global memory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With the\n<b>-fno-builtin-</b><i>function</i> option only the built-in\nfunction <i>function</i> is disabled. <i>function</i> must\nnot begin with <b>__builtin_</b>. If a function is named\nthat is not built-in in this version of <small>GCC,</small>\nthis option is ignored. There is no corresponding\n<b>-fbuiltin-</b><i>function</i> option; if you wish to\nenable built-in functions selectively when using\n<b>-fno-builtin</b> or <b>-ffreestanding</b>, you may define\nmacros such as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#define abs(n)\n__builtin_abs ((n)) <br>\n#define strcpy(d, s) __builtin_strcpy ((d), (s))</p>\n\n<p style=\"margin-left:11%;\"><b>-fgimple</b></p>\n\n<p style=\"margin-left:17%;\">Enable parsing of function\ndefinitions marked with &quot;__GIMPLE&quot;. This is an\nexperimental feature that allows unit testing of\n<small>GIMPLE</small> passes.</p>\n\n<p style=\"margin-left:11%;\"><b>-fhosted</b></p>\n\n<p style=\"margin-left:17%;\">Assert that compilation targets\na hosted environment. This implies <b>-fbuiltin</b>. A\nhosted environment is one in which the entire standard\nlibrary is available, and in which &quot;main&quot; has a\nreturn type of &quot;int&quot;. Examples are nearly\neverything except a kernel. This is equivalent to\n<b>-fno-freestanding</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-ffreestanding</b></p>\n\n<p style=\"margin-left:17%;\">Assert that compilation targets\na freestanding environment. This implies\n<b>-fno-builtin</b>. A freestanding environment is one in\nwhich the standard library may not exist, and program\nstartup may not necessarily be at &quot;main&quot;. The most\nobvious example is an <small>OS</small> kernel. This is\nequivalent to <b>-fno-hosted</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-fopenacc</b></p>\n\n<p style=\"margin-left:17%;\">Enable handling of OpenACC\ndirectives &quot;#pragma acc&quot; in C/C <small>++</small>\nand &quot;!$acc&quot; in Fortran. When <b>-fopenacc</b> is\nspecified, the compiler generates accelerated code according\nto the OpenACC Application Programming Interface v2.6\n&lt;<b>https://www.openacc.org</b>&gt;. This option implies\n<b>-pthread</b>, and thus is only supported on targets that\nhave support for <b>-pthread</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fopenacc-dim=</b><i>geom</i></p>\n\n<p style=\"margin-left:17%;\">Specify default compute\ndimensions for parallel offload regions that do not\nexplicitly specify. The <i>geom</i> value is a triple of\n&rsquo;:&rsquo;-separated sizes, in order\n&rsquo;gang&rsquo;, &rsquo;worker&rsquo; and,\n&rsquo;vector&rsquo;. A size can be omitted, to use a\ntarget-specific default value.</p>\n\n<p style=\"margin-left:11%;\"><b>-fopenmp</b></p>\n\n<p style=\"margin-left:17%;\">Enable handling of OpenMP\ndirectives &quot;#pragma omp&quot; in C/C <small>++</small>\nand &quot;!$omp&quot; in Fortran. When <b>-fopenmp</b> is\nspecified, the compiler generates parallel code according to\nthe OpenMP Application Program Interface v4.5\n&lt;<b>https://www.openmp.org</b>&gt;. This option implies\n<b>-pthread</b>, and thus is only supported on targets that\nhave support for <b>-pthread</b>. <b>-fopenmp</b> implies\n<b>-fopenmp-simd</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-fopenmp-simd</b></p>\n\n<p style=\"margin-left:17%;\">Enable handling of\nOpenMP&rsquo;s <small>SIMD</small> directives with\n&quot;#pragma omp&quot; in C/C <small>++</small> and\n&quot;!$omp&quot; in Fortran. Other OpenMP directives are\nignored.</p>\n\n<p style=\"margin-left:11%;\"><b>-fgnu-tm</b></p>\n\n<p style=\"margin-left:17%;\">When the option <b>-fgnu-tm</b>\nis specified, the compiler generates code for the Linux\nvariant of Intel&rsquo;s current Transactional Memory\n<small>ABI</small> specification document (Revision 1.1, May\n6 2009). This is an experimental feature whose interface may\nchange in future versions of <small>GCC,</small> as the\nofficial specification changes. Please note that not all\narchitectures are supported for this feature.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ninformation on <small>GCC</small> &rsquo;s support for\ntransactional memory,</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\ntransactional memory feature is not supported with non-call\nexceptions (<b>-fnon-call-exceptions</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>-fms-extensions</b></p>\n\n<p style=\"margin-left:17%;\">Accept some non-standard\nconstructs used in Microsoft header files.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In C\n<small>++</small> code, this allows member names in\nstructures to be similar to previous types declarations.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef int\nUOW; <br>\nstruct ABC { <br>\nUOW UOW; <br>\n};</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Some cases of\nunnamed fields in structures and unions are only accepted\nwith this option.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that this\noption is off for all targets except for x86 targets using\nms-abi.</p>\n\n<p style=\"margin-left:11%;\"><b>-fplan9-extensions</b></p>\n\n<p style=\"margin-left:17%;\">Accept some non-standard\nconstructs used in Plan 9 code.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This enables\n<b>-fms-extensions</b>, permits passing pointers to\nstructures with anonymous fields to functions that expect\npointers to elements of the type of the field, and permits\nreferring to anonymous fields declared using a typedef. This\nis only supported for C, not C <small>++</small> .</p>\n\n<p style=\"margin-left:11%;\"><b>-fcond-mismatch</b></p>\n\n<p style=\"margin-left:17%;\">Allow conditional expressions\nwith mismatched types in the second and third arguments. The\nvalue of such an expression is void. This option is not\nsupported for C <small>++</small> .</p>\n\n\n<p style=\"margin-left:11%;\"><b>-flax-vector-conversions</b></p>\n\n<p style=\"margin-left:17%;\">Allow implicit conversions\nbetween vectors with differing numbers of elements and/or\nincompatible element types. This option should not be used\nfor new code.</p>\n\n<p style=\"margin-left:11%;\"><b>-funsigned-char</b></p>\n\n<p style=\"margin-left:17%;\">Let the type &quot;char&quot;\nbe unsigned, like &quot;unsigned char&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Each kind of\nmachine has a default for what &quot;char&quot; should be.\nIt is either like &quot;unsigned char&quot; by default or\nlike &quot;signed char&quot; by default.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Ideally, a\nportable program should always use &quot;signed char&quot;\nor &quot;unsigned char&quot; when it depends on the\nsignedness of an object. But many programs have been written\nto use plain &quot;char&quot; and expect it to be signed, or\nexpect it to be unsigned, depending on the machines they\nwere written for. This option, and its inverse, let you make\nsuch a program work with the opposite default.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The type\n&quot;char&quot; is always a distinct type from each of\n&quot;signed char&quot; or &quot;unsigned char&quot;, even\nthough its behavior is always just like one of those\ntwo.</p>\n\n<p style=\"margin-left:11%;\"><b>-fsigned-char</b></p>\n\n<p style=\"margin-left:17%;\">Let the type &quot;char&quot;\nbe signed, like &quot;signed char&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that this\nis equivalent to <b>-fno-unsigned-char</b>, which is the\nnegative form of <b>-funsigned-char</b>. Likewise, the\noption <b>-fno-signed-char</b> is equivalent to\n<b>-funsigned-char</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-fsigned-bitfields <br>\n-funsigned-bitfields <br>\n-fno-signed-bitfields <br>\n-fno-unsigned-bitfields</b></p>\n\n<p style=\"margin-left:17%;\">These options control whether a\nbit-field is signed or unsigned, when the declaration does\nnot use either &quot;signed&quot; or &quot;unsigned&quot;.\nBy default, such a bit-field is signed, because this is\nconsistent: the basic integer types such as &quot;int&quot;\nare signed types.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fsso-struct=</b><i>endianness</i></p>\n\n<p style=\"margin-left:17%;\">Set the default scalar storage\norder of structures and unions to the specified endianness.\nThe accepted values are <b>big-endian</b>,\n<b>little-endian</b> and <b>native</b> for the native\nendianness of the target (the default). This option is not\nsupported for C <small>++</small> .</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Warning:</b>\nthe <b>-fsso-struct</b> switch causes <small>GCC</small> to\ngenerate code that is not binary compatible with code\ngenerated without it if the specified endianness is not the\nnative endianness of the target.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options\nControlling C <small>++</small> Dialect</b> <br>\nThis section describes the command-line options that are\nonly meaningful for C <small>++</small> programs. You can\nalso use most of the <small>GNU</small> compiler options\nregardless of what language your program is in. For example,\nyou might compile a file <i>firstClass.C</i> like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">g++ -g\n-fstrict-enums -O -c firstClass.C</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this\nexample, only <b>-fstrict-enums</b> is an option meant only\nfor C <small>++</small> programs; you can use the other\noptions with any language supported by\n<small>GCC.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some options\nfor compiling C programs, such as <b>-std</b>, are also\nrelevant for C <small>++</small> programs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here is a list\nof options that are <i>only</i> for compiling C\n<small>++</small> programs: <b><br>\n-fabi-version=</b><i>n</i></p>\n\n<p style=\"margin-left:17%;\">Use version <i>n</i> of the C\n<small>++</small> ABI. <big>The default is version\n0.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Version 0\nrefers to the version conforming most closely to the C</big>\n++ <big>ABI <big>specification. Therefore, the</big> ABI\n<big>obtained using version 0 will change in different\nversions of G++ as</big> ABI <big>bugs are\nfixed.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Version\n1 is the version of the C</big> ++ <big>ABI <big>that first\nappeared in G++ 3.2.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Version\n2 is the version of the C</big> ++ <big>ABI <big>that first\nappeared in G++ 3.4, and was the default through G++\n4.9.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n3 corrects an error in mangling a constant address as a\ntemplate argument.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n4, which first appeared in G++ 4.5, implements a standard\nmangling for vector types.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n5, which first appeared in G++ 4.6, corrects the mangling of\nattribute const/volatile on function pointer types, decltype\nof a plain decl, and use of a function parameter in the\ndeclaration of another\nparameter.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n6, which first appeared in G++ 4.7, corrects the promotion\nbehavior of C</big> ++ <big>11 scoped enums and the mangling\nof template argument packs, const/static_cast, prefix ++ and\n--, and a class scope function used as a template\nargument.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n7, which first appeared in G++ 4.8, that treats nullptr_t as\na builtin type and corrects the mangling of lambdas in\ndefault argument scope.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n8, which first appeared in G++ 4.9, corrects the\nsubstitution behavior of function types with\nfunction-cv-qualifiers.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n9, which first appeared in G++ 5.2, corrects the alignment\nof &quot;nullptr_t&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n10, which first appeared in G++ 6.1, adds mangling of\nattributes that affect type identity, such as ia32 calling\nconvention attributes (e.g.\n<b>stdcall</b>).</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n11, which first appeared in G++ 7, corrects the mangling of\nsizeof... expressions and operator names. For multiple\nentities with the same name within a function, that are\ndeclared in different scopes, the mangling now changes\nstarting with the twelfth occurrence. It also implies\n<b>-fnew-inheriting-ctors</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n12, which first appeared in G++ 8, corrects the calling\nconventions for empty classes on the x86_64 target and for\nclasses with only deleted copy/move constructors. It\naccidentally changes the calling convention for classes with\na deleted copy constructor and a trivial move\nconstructor.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n13, which first appeared in G++ 8.2, fixes the accidental\nchange in version 12.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n14, which first appeared in G++ 10, corrects the mangling of\nthe nullptr expression.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Version\n15, which first appeared in G++ 11, changes the mangling of\n&quot;__alignof__&quot; to be distinct from that of\n&quot;alignof&quot;, and dependent operator\nnames.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>See\nalso <b>-Wabi</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fabi-compat-version=</b><i>n</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>On targets\nthat support strong aliases, G++ works around mangling\nchanges by creating an alias with the correct mangled name\nwhen defining a symbol with an incorrect mangled name. This\nswitch specifies which</big> ABI <big>version to use for the\nalias.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>With\n<b>-fabi-version=0</b> (the default), this defaults to 11\n(</big> GCC 7 <big>compatibility). If another</big> ABI\n<big>version is explicitly selected, this defaults to 0. For\ncompatibility with</big> GCC <big>versions 3.2 through 4.9,\nuse\n<b>-fabi-compat-version=2</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>If\nthis option is not provided but <b>-Wabi=</b><i>n</i> is,\nthat version is used for compatibility aliases. If this\noption is provided along with <b>-Wabi</b> (without the\nversion), the version from this option is used for the\nwarning.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-access-control</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Turn off\nall access checking. This switch is mainly useful for\nworking around bugs in the access control\ncode.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-faligned-new</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Enable\nsupport for C</big> ++ <big>17 &quot;new&quot; of types that\nrequire more alignment than &quot;void* ::operator\nnew(std::size_t)&quot; provides. A numeric argument such as\n&quot;-faligned-new=32&quot; can be used to specify how much\nalignment (in bytes) is provided by that function, but few\nusers will need to override the default of\n&quot;alignof(std::max_align_t)&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nflag is enabled by default for\n<b>-std=c++17</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fchar8_t\n<br>\n-fno-char8_t</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Enable\nsupport for &quot;char8_t&quot; as adopted for C</big> ++\n<big>20. This includes the addition of a new\n&quot;char8_t&quot; fundamental type, changes to the types\nof</big> UTF-8 <big>string and character literals, new\nsignatures for user-defined literals, associated standard\nlibrary updates, and new &quot;__cpp_char8_t&quot; and\n&quot;__cpp_lib_char8_t&quot; feature test\nmacros.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\noption enables functions to be overloaded for ordinary\nand</big> UTF-8 <big>strings:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>int\nf(const char *); // #1 <br>\nint f(const char8_t *); // #2 <br>\nint v1 = f(&quot;text&quot;); // Calls #1 <br>\nint v2 = f(u8&quot;text&quot;); // Calls\n#2</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>and\nintroduces new signatures for user-defined\nliterals:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>int\noperator&quot;&quot;_udl1(char8_t); <br>\nint v3 = u8'x'_udl1; <br>\nint operator&quot;&quot;_udl2(const char8_t*, std::size_t);\n<br>\nint v4 = u8&quot;text&quot;_udl2; <br>\ntemplate&lt;typename T, T...&gt; int\noperator&quot;&quot;_udl3(); <br>\nint v5 =\nu8&quot;text&quot;_udl3;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nchange to the types of</big> UTF-8 <big>string and character\nliterals introduces incompatibilities with</big> ISO C</big>\n++ <big>11</big> and later standards. For example, the\nfollowing code is well-formed under</big> ISO C</big> ++\n<big>11,</big> but\nisill-formedwhen<b>-fchar8_t</b>isspecified.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">charca[]=u8&quot;xx&quot;;//error:char-arrayinitializedfromwide\n<br>\n//string <br>\nconstchar*cp=u8&quot;xx&quot;;//error:invalidconversionfrom\n<br>\n//`constchar8_t*'to`constchar*' <br>\nintf(constchar*); <br>\nautov=f(u8&quot;xx&quot;);//error:invalidconversionfrom <br>\n//`constchar8_t*'to`constchar*' <br>\n\nstd::strings{u8&quot;xx&quot;};//error:nomatchingfunctionforcallto\n<br>\n//`std::basic_string&lt;char&gt;::basic_string()' <br>\nusingnamespacestd::literals; <br>\ns=u8&quot;xx&quot;s;//error:conversionfrom <br>\n//`basic_string&lt;char8_t&gt;'tonon-scalar <br>\n//type`basic_string&lt;char&gt;'requested</p>\n\n<p style=\"margin-left:11%;\"><b>-fcheck-new</b></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Check that the\npointer returned by &quot;operator new&quot; is non-null\nbefore attempting to modify the storage allocated. This\ncheck is normally unnecessary because the C</big> ++\n<big>standard specifies that &quot;operator new&quot; only\nreturns 0 if it is declared &quot;throw()&quot;, in which\ncase the compiler always checks the return value even\nwithout this option. In all other cases, when &quot;operator\nnew&quot; has a non-empty exception specification, memory\nexhaustion is signalled by throwing\n&quot;std::bad_alloc&quot;. See also <b>new\n(nothrow)</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fconcepts\n<br>\n-fconcepts-ts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Below\n<b>-std=c++20</b>, <b>-fconcepts</b> enables support for the\nC</big> ++ <big>Extensions for Concepts Technical\nSpecification,</big> ISO 19217\n<big>(2015).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-std=c++20</b> and above, Concepts are part of the\nlanguage standard, so <b>-fconcepts</b> defaults to on. But\nthe standard specification of Concepts differs significantly\nfrom the</big> TS, <big>so some constructs that were allowed\nin the</big> TS <big>but didn&rsquo;t make it into the\nstandard can still be enabled by\n<b>-fconcepts-ts</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fconstexpr-depth=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the maximum\nnested evaluation depth for C</big> ++ <big>11 constexpr\nfunctions to <i>n</i>. A limit is needed to detect endless\nrecursion during constant expression evaluation. The minimum\nspecified by the standard is 512.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fconstexpr-cache-depth=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the maximum\nlevel of nested evaluation depth for C</big> ++ <big>11\nconstexpr functions that will be cached to <i>n</i>. This is\na heuristic that trades off compilation speed (when the\ncache avoids repeated calculations) against memory\nconsumption (when the cache grows very large from highly\nrecursive evaluations). The default is 8. Very few users are\nlikely to want to adjust it, but if your code does heavy\nconstexpr calculations you might want to experiment to find\nwhich value works best for you.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fconstexpr-loop-limit=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the maximum\nnumber of iterations for a loop in C</big> ++ <big>14\nconstexpr functions to <i>n</i>. A limit is needed to detect\ninfinite loops during constant expression evaluation. The\ndefault is 262144 (1&lt;&lt;18).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fconstexpr-ops-limit=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the maximum\nnumber of operations during a single constexpr evaluation.\nEven when number of iterations of a single loop is limited\nwith the above limit, if there are several nested loops and\neach of them has many iterations but still smaller than the\nabove limit, or if in a body of some loop or even outside of\na loop too many expressions need to be evaluated, the\nresulting constexpr evaluation might take too long. The\ndefault is 33554432 (1&lt;&lt;25).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcoroutines</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable support\nfor the C</big> ++ <big>coroutines extension\n(experimental).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-elide-constructors</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The C</big> ++\n<big>standard allows an implementation to omit creating a\ntemporary that is only used to initialize another object of\nthe same type. Specifying this option disables that\noptimization, and forces G++ to call the copy constructor in\nall cases. This option also causes G++ to call trivial\nmember functions which otherwise would be expanded\ninline.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nC</big> ++ <big>17, the compiler is required to omit these\ntemporaries, but this option still affects trivial member\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-enforce-eh-specs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t\ngenerate code to check for violation of exception\nspecifications at run time. This option violates the C</big>\n++ <big>standard, but may be useful for reducing code size\nin production builds, much like defining &quot;NDEBUG&quot;.\nThis does not give user code permission to throw exceptions\nin violation of the exception specifications; the compiler\nstill optimizes based on the specifications, so throwing an\nunexpected exception results in undefined behavior at run\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fextern-tls-init\n<br>\n-fno-extern-tls-init</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The C</big> ++\n<big>11 and OpenMP standards allow &quot;thread_local&quot;\nand &quot;threadprivate&quot; variables to have dynamic\n(runtime) initialization. To support this, any use of such a\nvariable goes through a wrapper function that performs any\nnecessary initialization. When the use and definition of the\nvariable are in the same translation unit, this overhead can\nbe optimized away, but when the use is in a different\ntranslation unit there is significant overhead even if the\nvariable doesn&rsquo;t actually need dynamic initialization.\nIf the programmer can be sure that no use of the variable in\na non-defining</big> TU <big>needs to trigger dynamic\ninitialization (either because the variable is statically\ninitialized, or a use of the variable in the defining</big>\nTU <big>will be executed before any uses in another</big> TU\n<big>), they can avoid this overhead with the\n<b>-fno-extern-tls-init</b> option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\ntargets that support symbol aliases, the default is\n<b>-fextern-tls-init</b>. On targets that do not support\nsymbol aliases, the default is\n<b>-fno-extern-tls-init</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-gnu-keywords</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not recognize\n&quot;typeof&quot; as a keyword, so that code can use this\nword as an identifier. You can use the keyword\n&quot;__typeof__&quot; instead. This option is implied by\nthe strict</big> ISO C</big> ++ dialects: <b>-ansi</b>,\n<b>-std=c++98</b>, <b>-std=c++11</b>, etc.</big></p>\n\n\n<p style=\"margin-left:11%;\"><big><b>-fno-implicit-templates</b></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Never emit code\nfor non-inline templates that are instantiated implicitly\n(i.e. by use); only emit code for explicit instantiations.\nIf you use this option, you must take care to structure your\ncode to include all the necessary explicit instantiations to\navoid getting undefined symbols at link\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-implicit-inline-templates</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t emit\ncode for implicit instantiations of inline templates,\neither. The default is to handle inlines differently so that\ncompiles with and without optimization need the same set of\nexplicit instantiations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-implement-inlines</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>To save space,\ndo not emit out-of-line copies of inline functions\ncontrolled by &quot;#pragma implementation&quot;. This\ncauses linker errors if these functions are not inlined\neverywhere they are called.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmodules-ts\n<br>\n-fno-modules-ts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable support\nfor C</big> ++ <big>20 modules The <b>-fno-modules-ts</b> is\nusually not needed, as that is the default. Even though this\nis a C</big> ++ <big>20 feature, it is not currently\nimplicitly enabled by selecting that standard\nversion.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmodule-header\n<br>\n-fmodule-header=user <br>\n-fmodule-header=system</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile a header\nfile to create an importable header\nunit.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmodule-implicit-inline</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Member functions\ndefined in their class definitions are not implicitly inline\nfor modular code. This is different to traditional C</big>\n++ <big>behavior, for good reasons. However, it may result\nin a difficulty during code porting. This option makes such\nfunction definitions implicitly inline. It does however\ngenerate an</big> ABI <big>incompatibility, so you must use\nit everywhere or nowhere. (Such definitions outside of a\nnamed module remain implicitly inline,\nregardless.)</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-module-lazy</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable lazy\nmodule importing and module mapper\ncreation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmodule-mapper=</b>[<i>hostname</i>]<b>:</b><i>port</i>[<b>?</b><i>ident</i>]\n<b><br>\n-fmodule-mapper=|</b><i>program</i>[<b>?</b><i>ident</i>]\n<i>args...</i> <b><br>\n-fmodule-mapper==</b><i>socket</i>[<b>?</b><i>ident</i>]\n<b><br>\n\n-fmodule-mapper=&lt;&gt;</b>[<i>inout</i>][<b>?</b><i>ident</i>]\n<b><br>\n\n-fmodule-mapper=&lt;</b><i>in</i><b>&gt;</b><i>out</i>[<b>?</b><i>ident</i>]\n<b><br>\n\n-fmodule-mapper=</b><i>file</i>[<b>?</b><i>ident</i>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>An oracle to\nquery for module name to filename mappings. If unspecified\nthe</big> <b>CXX_MODULE_MAPPER</b> <big>environment variable\nis used, and if that is unset, an in-process default is\nprovided.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmodule-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Only emit the\nCompiled Module Interface, inhibiting any object\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fms-extensions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\nWpedantic warnings about constructs used in</big> MFC,\n<big>such as implicit int and getting a pointer to member\nfunction via non-standard syntax.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fnew-inheriting-ctors</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the P0136\nadjustment to the semantics of C</big> ++ <big>11\nconstructor inheritance. This is part of C</big> ++ <big>17\nbut also considered to be a Defect Report against C</big> ++\n<big>11 and C</big> ++ <big>14. This flag is enabled by\ndefault unless <b>-fabi-version=10</b> or lower is\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fnew-ttp-matching</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the P0522\nresolution to Core issue 150, template template parameters\nand default arguments: this allows a template with default\ntemplate arguments as an argument for a template template\nparameter with fewer template parameters. This flag is\nenabled by default for\n<b>-std=c++17</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-nonansi-builtins</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable built-in\ndeclarations of functions that are not mandated by</big>\nANSI/ISO C. <big>These include &quot;ffs&quot;,\n&quot;alloca&quot;, &quot;_exit&quot;, &quot;index&quot;,\n&quot;bzero&quot;, &quot;conjf&quot;, and other related\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fnothrow-opt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat a\n&quot;throw()&quot; exception specification as if it were a\n&quot;noexcept&quot; specification to reduce or eliminate\nthe text size overhead relative to a function with no\nexception specification. If the function has local variables\nof types with non-trivial destructors, the exception\nspecification actually makes the function smaller because\nthe</big> EH <big>cleanups for those variables can be\noptimized away. The semantic effect is that an exception\nthrown out of a function with such an exception\nspecification results in a call to &quot;terminate&quot;\nrather than &quot;unexpected&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-operator-names</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not treat the\noperator name keywords &quot;and&quot;, &quot;bitand&quot;,\n&quot;bitor&quot;, &quot;compl&quot;, &quot;not&quot;,\n&quot;or&quot; and &quot;xor&quot; as synonyms as\nkeywords.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-optional-diags</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\ndiagnostics that the standard says a compiler does not need\nto issue. Currently, the only such diagnostic issued by G++\nis the one for a name having multiple meanings within a\nclass.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpermissive</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Downgrade some\ndiagnostics about nonconformant code from errors to\nwarnings. Thus, using <b>-fpermissive</b> allows some\nnonconforming code to compile.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-pretty-templates</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When an error\nmessage refers to a specialization of a function template,\nthe compiler normally prints the signature of the template\nfollowed by the template arguments and any typedefs or\ntypenames in the signature (e.g. &quot;void f(T) [with T =\nint]&quot; rather than &quot;void f(int)&quot;) so that\nit&rsquo;s clear which template is involved. When an error\nmessage refers to a specialization of a class template, the\ncompiler omits any template arguments that match the default\ntemplate arguments for that template. If either of these\nbehaviors make it harder to understand the error message\nrather than easier, you can use <b>-fno-pretty-templates</b>\nto disable them.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-rtti</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\ngeneration of information about every class with virtual\nfunctions for use by the C</big> ++ <big>run-time type\nidentification features (&quot;dynamic_cast&quot; and\n&quot;typeid&quot;). If you don&rsquo;t use those parts of\nthe language, you can save some space by using this flag.\nNote that exception handling uses the same information, but\nG++ generates it as needed. The &quot;dynamic_cast&quot;\noperator can still be used for casts that do not require\nrun-time type information, i.e. casts to &quot;void *&quot;\nor to unambiguous base classes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Mixing\ncode compiled with <b>-frtti</b> with that compiled with\n<b>-fno-rtti</b> may not work. For example, programs may\nfail to link if a class compiled with <b>-fno-rtti</b> is\nused as a base for a class compiled with\n<b>-frtti</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsized-deallocation</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nbuilt-in global declarations</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>void\noperator delete (void *, std::size_t) noexcept; <br>\nvoid operator delete[] (void *, std::size_t)\nnoexcept;</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>as\nintroduced in C</big> ++ <big>14. This is useful for\nuser-defined replacement deallocation functions that, for\nexample, use the size of the object to make deallocation\nfaster. Enabled by default under <b>-std=c++14</b> and\nabove. The flag <b>-Wsized-deallocation</b> warns about\nplaces that might want to add a\ndefinition.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstrict-enums</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow the\ncompiler to optimize using the assumption that a value of\nenumerated type can only be one of the values of the\nenumeration (as defined in the C</big> ++ <big>standard;\nbasically, a value that can be represented in the minimum\nnumber of bits needed to represent all the enumerators).\nThis assumption may not be valid if the program uses a cast\nto convert an arbitrary integer value to the enumerated\ntype.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstrong-eval-order</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Evaluate member\naccess, array subscripting, and shift expressions in\nleft-to-right order, and evaluate assignment in\nright-to-left order, as adopted for C</big> ++ <big>17.\nEnabled by default with <b>-std=c++17</b>.\n<b>-fstrong-eval-order=some</b> enables just the ordering of\nmember access and shift expressions, and is the default\nwithout <b>-std=c++17</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftemplate-backtrace-limit=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the maximum\nnumber of template instantiation notes for a single warning\nor error to <i>n</i>. The default value is\n10.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftemplate-depth=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the maximum\ninstantiation depth for template classes to <i>n</i>. A\nlimit on the template instantiation depth is needed to\ndetect endless recursions during template class\ninstantiation.</big> ANSI/ISO C</big> ++ conforming programs\nmust not rely on a maximum depth greater than 17 (changed to\n1024 in C</big> ++ <big>11). The default value is 900, as\nthe compiler can run out of stack space before hitting 1024\nin some situations.</big></p>\n\n\n<p style=\"margin-left:11%;\"><big><b>-fno-threadsafe-statics</b></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not emit the\nextra code to use the routines specified in the C</big> ++\n<big>ABI <big>for thread-safe initialization of local\nstatics. You can use this option to reduce code size\nslightly in code that doesn&rsquo;t need to be\nthread-safe.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fuse-cxa-atexit</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Register\ndestructors for objects with static storage duration with\nthe &quot;__cxa_atexit&quot; function rather than the\n&quot;atexit&quot; function. This option is required for\nfully standards-compliant handling of static destructors,\nbut only works if your C library supports\n&quot;__cxa_atexit&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-use-cxa-get-exception-ptr</b></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Don&rsquo;t\nuse the &quot;__cxa_get_exception_ptr&quot; runtime routine.\nThis causes &quot;std::uncaught_exception&quot; to be\nincorrect, but is necessary if the runtime routine is not\navailable.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fvisibility-inlines-hidden</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This switch\ndeclares that the user does not attempt to compare pointers\nto inline functions or methods where the addresses of the\ntwo functions are taken in different shared\nobjects.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\neffect of this is that</big> GCC <big>may, effectively, mark\ninline methods with &quot;__attribute__ ((visibility\n(&quot;hidden&quot;)))&quot; so that they do not appear in\nthe export table of a</big> DSO <big>and do not require\na</big> PLT <big>indirection when used within the</big> DSO.\n<big>Enabling this option can have a dramatic effect on load\nand link times of a</big> DSO <big>as it massively reduces\nthe size of the dynamic export table when the library makes\nheavy use of templates.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nbehavior of this switch is not quite the same as marking the\nmethods as hidden directly, because it does not affect\nstatic variables local to the function or cause the compiler\nto deduce that the function is defined in only one shared\nobject.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>You\nmay mark a method as having a visibility explicitly to\nnegate the effect of the switch for that method. For\nexample, if you do want to compare pointers to a particular\ninline method, you might mark it as having default\nvisibility. Marking the enclosing class with explicit\nvisibility has no effect.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Explicitly\ninstantiated inline methods are unaffected by this option as\ntheir linkage might otherwise cross a shared library\nboundary.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fvisibility-ms-compat</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This flag\nattempts to use visibility settings to make</big> GCC\n<big>&rsquo;s C</big> ++ <big>linkage model compatible with\nthat of Microsoft Visual Studio.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nflag makes these changes to</big> GCC <big>&rsquo;s linkage\nmodel:</big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><big>1.</big></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>It sets the default visibility to\n&quot;hidden&quot;, like\n<b>-fvisibility=hidden</b>.</big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><big>2.</big></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>Types, but not their members, are\nnot hidden by default.</big></big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><big>3.</big></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>The One Definition Rule is relaxed\nfor types without explicit visibility specifications that\nare defined in more than one shared object: those\ndeclarations are permitted if they are permitted when this\noption is not used.</big></big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>In\nnew code it is better to use <b>-fvisibility=hidden</b> and\nexport those classes that are intended to be externally\nvisible. Unfortunately it is possible for code to rely,\nperhaps accidentally, on the Visual Studio\nbehavior.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Among\nthe consequences of these changes are that static data\nmembers of the same type with the same name but defined in\ndifferent shared objects are different, so changing one does\nnot change the other; and that pointers to function members\ndefined in different shared objects may not compare equal.\nWhen this flag is given, it is a violation of the</big> ODR\n<big>to define types with the same name\ndifferently.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-weak</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not use\nweak symbol support, even if it is provided by the linker.\nBy default, G++ uses weak symbols if they are available.\nThis option exists only for testing, and should not be used\nby end-users; it results in inferior code and has no\nbenefits. This option may be removed in a future release of\nG++.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fext-numeric-literals</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Accept\nimaginary, fixed-point, or machine-defined literal number\nsuffixes as</big> GNU <big>extensions. When this option is\nturned off these suffixes are treated as C</big> ++ <big>11\nuser-defined literal numeric suffixes. This is on by default\nfor all pre-C</big> ++ <big>11 dialects and all</big> GNU\n<big>dialects: <b>-std=c++98</b>, <b>-std=gnu++98</b>,\n<b>-std=gnu++11</b>, <b>-std=gnu++14</b>. This option is off\nby default for</big> ISO C</big> ++ <big>11</big> onwards\n(<b>-std=c++11</b>, ...).</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-nostdinc++</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not\nsearch for header files in the standard directories specific\nto C</big> ++ <big>, but do still search the other standard\ndirectories. (This option is used when building the C</big>\n++ <big>library.)</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-flang-info-include-translate\n<br>\n-flang-info-include-translate-not <br>\n\n-flang-info-include-translate=</b><i>header</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Inform of\ninclude translation events. The first will note accepted\ninclude translations, the second will note declined include\ntranslations. The <i>header</i> form will inform of include\ntranslations relating to that specific header. If\n<i>header</i> is of the form &quot;user&quot; or\n&quot;&lt;system&gt;&quot; it will be resolved to a specific\nuser or system header using the include\npath.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-flang-info-module-cmi\n<br>\n\n-flang-info-module-cmi=</b><i>module</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Inform of\nCompiled Module Interface pathnames. The first will note all\nread</big> CMI <big>pathnames. The <i>module</i> form will\nnot reading a specific module&rsquo;s</big> CMI.\n<i><big>module</big></i> <big>may be a named module or a\nheader-unit (the latter indicated by either being a pathname\ncontaining directory separators or enclosed in\n&quot;&lt;&gt;&quot; or\n&quot;&quot;).</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-stdlib=</b><i>libstdc++,libc++</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>When G++ is\nconfigured to support this option, it allows specification\nof alternate C</big> ++ <big>runtime libraries. Two options\nare available: <i>libstdc++</i> (the default, native C</big>\n++ <big>runtime for G++) and <i>libc++</i> which is the\nC</big> ++ <big>runtime installed on some operating systems\n(e.g. Darwin versions from Darwin11 onwards). The option\nswitches G++ to use the headers from the specified library\nand to emit &quot;-lstdc++&quot; or &quot;-lc++&quot;\nrespectively, when a C</big> ++ <big>runtime is required for\nlinking.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>In\naddition, these warning options have meanings only for\nC</big> ++ <big>programs: <b><br>\n-Wabi-tag</b> (C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\ntype with an</big> ABI <big>tag is used in a context that\ndoes not have that</big> ABI <big>tag. See <b>C</b></big>\n<b>++ <big>Attributes</big></b> <big>for more information\nabout</big> ABI <big>tags.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wcomma-subscript</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nuses of a comma expression within a subscripting expression.\nThis usage was deprecated in C</big> ++ <big>20. However, a\ncomma expression wrapped in &quot;( )&quot; is not\ndeprecated. Example:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>void\nf(int *a, int b, int c) { <br>\na[b,c]; // deprecated <br>\na[(b,c)]; // OK <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Enabled\nby default with\n<b>-std=c++20</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wctad-maybe-unsupported</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when\nperforming class template argument deduction (</big> CTAD\n<big>) on a type with no explicitly written deduction\nguides. This warning will point out cases where</big> CTAD\n<big>succeeded only because the compiler synthesized the\nimplicit deduction guides, which might not be what the\nprogrammer intended. Certain style guides allow</big> CTAD\n<big>only on types that specifically &quot;opt-in&quot;;\ni.e., on types that are designed to support</big> CTAD.\n<big>This warning can be suppressed with the following\npattern:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nallow_ctad_t; // any name works <br>\ntemplate &lt;typename T&gt; struct S { <br>\nS(T) { } <br>\n}; <br>\nS(allow_ctad_t) -&gt; S&lt;void&gt;; // guide with\nincomplete parameter type will never be\nconsidered</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wctor-dtor-privacy</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nclass seems unusable because all the constructors or\ndestructors in that class are private, and it has neither\nfriends nor public static member functions. Also warn if\nthere are no non-private methods, and there&rsquo;s at least\none private member function that isn&rsquo;t a constructor\nor destructor.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wdelete-non-virtual-dtor</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when\n&quot;delete&quot; is used to destroy an instance of a class\nthat has virtual functions and non-virtual destructor. It is\nunsafe to delete an instance of a derived class through a\npointer to a base class if the base class does not have a\nvirtual destructor. This warning is enabled by\n<b>-Wall</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wdeprecated-copy</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn that\nthe implicit declaration of a copy constructor or copy\nassignment operator is deprecated if the class has a\nuser-provided copy constructor or copy assignment operator,\nin C</big> ++ <big>11 and up. This warning is enabled by\n<b>-Wextra</b>. With <b>-Wdeprecated-copy-dtor</b>, also\ndeprecate if the class has a user-provided\ndestructor.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-deprecated-enum-enum-conversion</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Disable the\nwarning about the case when the usual arithmetic conversions\nare applied on operands where one is of enumeration type and\nthe other is of a different enumeration type. This\nconversion was deprecated in C</big> ++ <big>20. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>enum\nE1 { e }; <br>\nenum E2 { f }; <br>\nint k = f - e;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><b>-Wdeprecated-enum-enum-conversion</b>\nis enabled by default with <b>-std=c++20</b>. In pre-C</big>\n++ <big>20 dialects, this warning can be enabled by\n<b>-Wenum-conversion</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-deprecated-enum-float-conversion</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Disable the\nwarning about the case when the usual arithmetic conversions\nare applied on operands where one is of enumeration type and\nthe other is of a floating-point type. This conversion was\ndeprecated in C</big> ++ <big>20. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>enum\nE1 { e }; <br>\nenum E2 { f }; <br>\nbool b = e &lt;= 3.7;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><b>-Wdeprecated-enum-float-conversion</b>\nis enabled by default with <b>-std=c++20</b>. In pre-C</big>\n++ <big>20 dialects, this warning can be enabled by\n<b>-Wenum-conversion</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-init-list-lifetime</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not warn\nabout uses of &quot;std::initializer_list&quot; that are\nlikely to result in dangling pointers. Since the underlying\narray for an &quot;initializer_list&quot; is handled like a\nnormal C</big> ++ <big>temporary object, it is easy to\ninadvertently keep a pointer to the array past the end of\nthe array&rsquo;s lifetime. For\nexample:</big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>If a function returns a temporary\n&quot;initializer_list&quot;, or a local\n&quot;initializer_list&quot; variable, the array&rsquo;s\nlifetime ends at the end of the return statement, so the\nvalue returned has a dangling\npointer.</big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>If a new-expression creates an\n&quot;initializer_list&quot;, the array only lives until the\nend of the enclosing full-expression, so the\n&quot;initializer_list&quot; in the heap has a dangling\npointer.</big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>When an &quot;initializer_list&quot;\nvariable is assigned from a brace-enclosed initializer list,\nthe temporary array created for the right side of the\nassignment only lives until the end of the full-expression,\nso at the next statement the &quot;initializer_list&quot;\nvariable has a dangling pointer.</big></big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big>//\nli's initial underlying array lives as long as li <br>\nstd::initializer_list&lt;int&gt; li = { 1,2,3 }; <br>\n// assignment changes li to point to a temporary array <br>\nli = { 4, 5 }; <br>\n// now the temporary is gone and li has a dangling pointer\n<br>\nint i = li.begin()[0] // undefined\nbehavior</big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big>*</big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big>When a list\nconstructor stores the &quot;begin&quot; pointer from the\n&quot;initializer_list&quot; argument, this doesn&rsquo;t\nextend the lifetime of the array, so if a class variable is\nconstructed from a temporary &quot;initializer_list&quot;,\nthe pointer is left dangling by the end of the variable\ndeclaration statement.</big></big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Winvalid-imported-macros</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Verify all\nimported macro definitions are valid at the end of\ncompilation. This is not enabled by default, as it requires\nadditional processing to determine. It may be useful when\npreparing sets of header-units to ensure consistent\nmacros.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-literal-suffix</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not warn\nwhen a string or character literal is followed by a\nud-suffix which does not begin with an underscore. As a\nconforming extension,</big> GCC <big>treats such suffixes as\nseparate preprocessing tokens in order to maintain backwards\ncompatibility with code that uses formatting macros from\n&quot;&lt;inttypes.h&gt;&quot;. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>#define\n__STDC_FORMAT_MACROS <br>\n#include &lt;inttypes.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\nint main() { <br>\nint64_t i64 = 123; <br>\nprintf(&quot;My int64: %&quot; PRId64&quot;\\n&quot;, i64);\n<br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>In\nthis case, &quot;PRId64&quot; is treated as a separate\npreprocessing token.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\noption also controls warnings when a user-defined literal\noperator is declared with a literal suffix identifier that\ndoesn&rsquo;t begin with an underscore. Literal suffix\nidentifiers that don&rsquo;t begin with an underscore are\nreserved for future\nstandardization.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>These\nwarnings are enabled by default.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-narrowing</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>For C</big>\n++ <big>11 and later standards, narrowing conversions are\ndiagnosed by default, as required by the standard. A\nnarrowing conversion from a constant produces an error, and\na narrowing conversion from a non-constant produces a\nwarning, but <b>-Wno-narrowing</b> suppresses the\ndiagnostic. Note that this does not affect the meaning of\nwell-formed code; narrowing conversions are still considered\nill-formed in</big> SFINAE\n<big>contexts.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>With\n<b>-Wnarrowing</b> in C</big> ++ <big>98, warn when a\nnarrowing conversion prohibited by C</big> ++ <big>11 occurs\nwithin <b>{ }</b>, e.g.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>int\ni = { 2.2 }; // error: narrowing from double to\nint</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nflag is included in <b>-Wall</b> and\n<b>-Wc++11-compat</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wnoexcept</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nnoexcept-expression evaluates to false because of a call to\na function that does not have a non-throwing exception\nspecification (i.e. &quot;throw()&quot; or\n&quot;noexcept&quot;) but is known by the compiler to never\nthrow an exception.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wnoexcept-type</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn if the\nC</big> ++ <big>17 feature making &quot;noexcept&quot; part\nof a function type changes the mangled name of a symbol\nrelative to C</big> ++ <big>14. Enabled by <b>-Wabi</b> and\n<b>-Wc++17-compat</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>As\nan example:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>template\n&lt;class T&gt; void f(T t) { t(); }; <br>\nvoid g() noexcept; <br>\nvoid h() { f(g); }</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>In\nC</big> ++ <big>14, &quot;f&quot; calls\n&quot;f&lt;void(*)()&gt;&quot;, but in C</big> ++ <big>17 it\ncalls\n&quot;f&lt;void(*)()noexcept&gt;&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wclass-memaccess</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when\nthe destination of a call to a raw memory function such as\n&quot;memset&quot; or &quot;memcpy&quot; is an object of\nclass type, and when writing into such an object might\nbypass the class non-trivial or deleted constructor or copy\nassignment, violate const-correctness or encapsulation, or\ncorrupt virtual table pointers. Modifying the representation\nof such objects may violate invariants maintained by member\nfunctions of the class. For example, the call to\n&quot;memset&quot; below is undefined because it modifies a\nnon-trivial class object and is, therefore, diagnosed. The\nsafe way to either initialize or clear the storage of\nobjects of such types is by using the appropriate\nconstructor or assignment operator, if one is\navailable.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>std::string\nstr = &quot;abc&quot;; <br>\nmemset (&amp;str, 0, sizeof\nstr);</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\n<b>-Wclass-memaccess</b> option is enabled by <b>-Wall</b>.\nExplicitly casting the pointer to the class object to\n&quot;void *&quot; or to a type that can be safely accessed\nby the raw memory function suppresses the\nwarning.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wnon-virtual-dtor</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nclass has virtual functions and an accessible non-virtual\ndestructor itself or in an accessible polymorphic base\nclass, in which case it is possible but unsafe to delete an\ninstance of a derived class through a pointer to the class\nitself or base class. This warning is automatically enabled\nif <b>-Weffc++</b> is specified.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wregister</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn on\nuses of the &quot;register&quot; storage class specifier,\nexcept when it is part of the</big> GNU <b><big>Explicit\nRegister Variables</big></b> <big>extension. The use of the\n&quot;register&quot; keyword as storage class specifier has\nbeen deprecated in C</big> ++ <big>11 and removed in C</big>\n++ <big>17. Enabled by default with\n<b>-std=c++17</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wreorder</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when\nthe order of member initializers given in the code does not\nmatch the order in which they must be executed. For\ninstance:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nA { <br>\nint i; <br>\nint j; <br>\nA(): j (0), i (1) { } <br>\n};</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\ncompiler rearranges the member initializers for\n&quot;i&quot; and &quot;j&quot; to match the declaration\norder of the members, emitting a warning to that effect.\nThis warning is enabled by\n<b>-Wall</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-pessimizing-move</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This\nwarning warns when a call to &quot;std::move&quot; prevents\ncopy elision. A typical scenario when copy elision can occur\nis when returning in a function with a class return type,\nwhen the expression being returned is the name of a\nnon-volatile automatic object, and is not a function\nparameter, and has the same type as the function return\ntype.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nT { <br>\n... <br>\n}; <br>\nT fn() <br>\n{ <br>\nT t; <br>\n... <br>\nreturn std::move (t); <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>But\nin this example, the &quot;std::move&quot; call prevents\ncopy elision.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nwarning is enabled by\n<b>-Wall</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-redundant-move</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This\nwarning warns about redundant calls to\n&quot;std::move&quot;; that is, when a move operation would\nhave been performed even without the &quot;std::move&quot;\ncall. This happens because the compiler is forced to treat\nthe object as if it were an rvalue in certain situations\nsuch as returning a local variable, where copy elision\nisn&rsquo;t applicable.\nConsider:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nT { <br>\n... <br>\n}; <br>\nT fn(T t) <br>\n{ <br>\n... <br>\nreturn std::move (t); <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Here,\nthe &quot;std::move&quot; call is redundant. Because G++\nimplements Core Issue 1579, another example\nis:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nT { // convertible to U <br>\n... <br>\n}; <br>\nstruct U { <br>\n... <br>\n}; <br>\nU fn() <br>\n{ <br>\nT t; <br>\n... <br>\nreturn std::move (t); <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>In\nthis example, copy elision isn&rsquo;t applicable because\nthe type of the expression being returned and the function\nreturn type differ, yet G++ treats the return value as if it\nwere designated by an rvalue.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nwarning is enabled by\n<b>-Wextra</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wrange-loop-construct</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This\nwarning warns when a C</big> ++ <big>range-based for-loop is\ncreating an unnecessary copy. This can happen when the range\ndeclaration is not a reference, but probably should be. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nS { char arr[128]; }; <br>\nvoid fn () { <br>\nS arr[5]; <br>\nfor (const auto x : arr) { ... } <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>It\ndoes not warn when the type being copied is a\ntrivially-copyable type whose size is less than 64\nbytes.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nwarning also warns when a loop variable in a range-based\nfor-loop is initialized with a value of a different type\nresulting in a copy. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>void\nfn() { <br>\nint arr[10]; <br>\nfor (const double &amp;x : arr) { ... } <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>In\nthe example above, in every iteration of the loop a\ntemporary value of type &quot;double&quot; is created and\ndestroyed, to which the reference &quot;const double\n&amp;&quot; is bound.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nwarning is enabled by\n<b>-Wall</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wredundant-tags</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nredundant class-key and enum-key in references to class\ntypes and enumerated types in contexts where the key can be\neliminated without causing an ambiguity. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nfoo; <br>\nstruct foo *p; // warn that keyword struct can be\neliminated</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>On\nthe other hand, in this example there is no\nwarning:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nfoo; <br>\nvoid foo (); // &quot;hides&quot; struct foo <br>\nvoid bar (struct foo&amp;); // no warning, keyword struct is\nnecessary</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-subobject-linkage</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not warn\nif a class type has a base or a field whose type uses the\nanonymous namespace or depends on a type with no linkage. If\na type A depends on a type B with no or internal linkage,\ndefining it in multiple translation units would be an</big>\nODR <big>violation because the meaning of B is different in\neach translation unit. If A only appears in a single\ntranslation unit, the best way to silence the warning is to\ngive it internal linkage by putting it in an anonymous\nnamespace as well. The compiler doesn&rsquo;t give this\nwarning for types defined in the main .C file, as those are\nunlikely to have multiple definitions.\n<b>-Wsubobject-linkage</b> is enabled by\ndefault.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Weffc++</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nviolations of the following style guidelines from Scott\nMeyers&rsquo; <i>Effective C</i></big> <i>++</i> <big>series\nof books:</big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>Define a copy constructor and an\nassignment operator for classes with dynamically-allocated\nmemory.</big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>Prefer initialization to assignment\nin constructors.</big></big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>Have &quot;operator=&quot; return a\nreference to *this.</big></big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>Don&rsquo;t try to return a\nreference when you must return an\nobject.</big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>Distinguish between prefix and\npostfix forms of increment and decrement\noperators.</big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>Never overload\n&quot;&amp;&amp;&quot;, &quot;||&quot;, or\n&quot;,&quot;.</big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\noption also enables <b>-Wnon-virtual-dtor</b>, which is also\none of the effective C</big> ++ <big>recommendations.\nHowever, the check is extended to warn about the lack of\nvirtual destructor in accessible non-polymorphic bases\nclasses too.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>When\nselecting this option, be aware that the standard library\nheaders do not obey all of these guidelines; use <b>grep\n-v</b> to filter out those\nwarnings.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-exceptions</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Disable the\nwarning about the case when an exception handler is shadowed\nby another handler, which can point out a wrong ordering of\nexception handlers.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wstrict-null-sentinel</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nthe use of an uncasted &quot;NULL&quot; as sentinel. When\ncompiling only with</big> GCC <big>this is a valid sentinel,\nas &quot;NULL&quot; is defined to &quot;__null&quot;.\nAlthough it is a null pointer constant rather than a null\npointer, it is guaranteed to be of the same size as a\npointer. But this use is not portable across different\ncompilers.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-non-template-friend</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Disable\nwarnings when non-template friend functions are declared\nwithin a template. In very old versions of</big> GCC\n<big>that predate implementation of the</big> ISO\n<big>standard, declarations such as <b>friend int\nfoo(int)</b>, where the name of the friend is an\nunqualified-id, could be interpreted as a particular\nspecialization of a template function; the warning exists to\ndiagnose compatibility problems, and is enabled by\ndefault.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wold-style-cast</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn if an\nold-style (C-style) cast to a non-void type is used within a\nC</big> ++ <big>program. The new-style casts\n(&quot;dynamic_cast&quot;, &quot;static_cast&quot;,\n&quot;reinterpret_cast&quot;, and &quot;const_cast&quot;)\nare less vulnerable to unintended effects and much easier to\nsearch for.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Woverloaded-virtual</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nfunction declaration hides virtual functions from a base\nclass. For example, in:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nA { <br>\nvirtual void f(); <br>\n}; <br>\nstruct B: public A { <br>\nvoid f(int); <br>\n};</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>the\n&quot;A&quot; class version of &quot;f&quot; is hidden in\n&quot;B&quot;, and code like:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>B*\nb; <br>\nb-&gt;f();</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>fails\nto compile.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-pmf-conversions</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Disable the\ndiagnostic for converting a bound pointer to member function\nto a plain pointer.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wsign-promo</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when\noverload resolution chooses a promotion from unsigned or\nenumerated type to a signed type, over a conversion to an\nunsigned type of the same size. Previous versions of G++\ntried to preserve unsignedness, but the standard mandates\nthe current behavior.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wtemplates</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nprimary template declaration is encountered. Some coding\nrules disallow templates, and this may be used to enforce\nthat rule. The warning is inactive inside a system header\nfile, such as the</big> STL, <big>so one can still use\nthe</big> STL. <big>One may also instantiate or specialize\ntemplates.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-mismatched-new-delete</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn for\nmismatches between calls to &quot;operator new&quot; or\n&quot;operator delete&quot; and the corresponding call to\nthe allocation or deallocation function. This includes\ninvocations of C</big> ++ <big>&quot;operator delete&quot;\nwith pointers returned from either mismatched forms of\n&quot;operator new&quot;, or from other functions that\nallocate objects for which the &quot;operator delete&quot;\nisn&rsquo;t a suitable deallocator, as well as calls to\nother deallocation functions with pointers returned from\n&quot;operator new&quot; for which the deallocation function\nisn&rsquo;t suitable.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>For\nexample, the &quot;delete&quot; expression in the function\nbelow is diagnosed because it doesn&rsquo;t match the array\nform of the &quot;new&quot; expression the pointer argument\nwas returned from. Similarly, the call to &quot;free&quot;\nis also diagnosed.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>void\nf () <br>\n{ <br>\nint *a = new int[n]; <br>\ndelete a; // warning: mismatch in array forms of expressions\n<br>\nchar *p = new char[n]; <br>\nfree (p); // warning: mismatch between new and free <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nrelated option <b>-Wmismatched-dealloc</b> diagnoses\nmismatches involving allocation and deallocation functions\nother than &quot;operator new&quot; and &quot;operator\ndelete&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><b>-Wmismatched-new-delete</b>\nis enabled by default.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wmismatched-tags</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn for\ndeclarations of structs, classes, and class templates and\ntheir specializations with a class-key that does not match\neither the definition or the first declaration if no\ndefinition is provided.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>For\nexample, the declaration of &quot;struct Object&quot; in the\nargument list of &quot;draw&quot; triggers the warning. To\navoid it, either remove the redundant class-key\n&quot;struct&quot; or replace it with &quot;class&quot; to\nmatch its definition.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>class\nObject { <br>\npublic: <br>\nvirtual ~Object () = 0; <br>\n}; <br>\nvoid draw (struct Object*);</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>It\nis not wrong to declare a class with the class-key\n&quot;struct&quot; as the example above shows. The\n<b>-Wmismatched-tags</b> option is intended to help achieve\na consistent style of class declarations. In code that is\nintended to be portable to Windows-based compilers the\nwarning helps prevent unresolved references due to the\ndifference in the mangling of symbols declared with\ndifferent class-keys. The option can be used either on its\nown or in conjunction with\n<b>-Wredundant-tags</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wmultiple-inheritance</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nclass is defined with multiple direct base classes. Some\ncoding rules disallow multiple inheritance, and this may be\nused to enforce that rule. The warning is inactive inside a\nsystem header file, such as the</big> STL, <big>so one can\nstill use the</big> STL. <big>One may also define classes\nthat indirectly use multiple\ninheritance.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wvirtual-inheritance</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nclass is defined with a virtual direct base class. Some\ncoding rules disallow multiple inheritance, and this may be\nused to enforce that rule. The warning is inactive inside a\nsystem header file, such as the</big> STL, <big>so one can\nstill use the</big> STL. <big>One may also define classes\nthat indirectly use virtual\ninheritance.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-virtual-move-assign</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Suppress\nwarnings about inheriting from a virtual base with a\nnon-trivial C</big> ++ <big>11 move assignment operator.\nThis is dangerous because if the virtual base is reachable\nalong more than one path, it is moved multiple times, which\ncan mean both objects end up in the moved-from state. If the\nmove assignment operator is written to avoid moving from a\nmoved-from object, this warning can be\ndisabled.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wnamespaces</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nnamespace definition is opened. Some coding rules disallow\nnamespaces, and this may be used to enforce that rule. The\nwarning is inactive inside a system header file, such as\nthe</big> STL, <big>so one can still use the</big> STL.\n<big>One may also use using directives and qualified\nnames.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-terminate</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Disable the\nwarning about a throw-expression that will immediately\nresult in a call to\n&quot;terminate&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-vexing-parse</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nthe most vexing parse syntactic ambiguity. This warns about\nthe cases when a declaration looks like a variable\ndefinition, but the C</big> ++ <big>language requires it to\nbe interpreted as a function declaration. For\ninstance:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>void\nf(double a) { <br>\nint i(); // extern int i (void); <br>\nint n(int(a)); // extern int n (int); <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Another\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nS { S(int); }; <br>\nvoid f(double a) { <br>\nS x(int(a)); // extern struct S x (int); <br>\nS y(int()); // extern struct S y (int (*) (void)); <br>\nS z(); // extern struct S z (void); <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nwarning will suggest options how to deal with such an\nambiguity; e.g., it can suggest removing the parentheses or\nusing braces instead.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nwarning is enabled by default.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-class-conversion</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not warn\nwhen a conversion function converts an object to the same\ntype, to a base class of that type, or to void; such a\nconversion function will never be\ncalled.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wvolatile</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\ndeprecated uses of the &quot;volatile&quot; qualifier. This\nincludes postfix and prefix &quot;++&quot; and\n&quot;--&quot; expressions of &quot;volatile&quot;-qualified\ntypes, using simple assignments where the left operand is a\n&quot;volatile&quot;-qualified non-class type for their\nvalue, compound assignments where the left operand is a\n&quot;volatile&quot;-qualified non-class type,\n&quot;volatile&quot;-qualified function return type,\n&quot;volatile&quot;-qualified parameter type, and\nstructured bindings of a &quot;volatile&quot;-qualified\ntype. This usage was deprecated in C</big> ++\n<big>20.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Enabled\nby default with\n<b>-std=c++20</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wzero-as-null-pointer-constant</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when a\nliteral <b>0</b> is used as null pointer constant. This can\nbe useful to facilitate the conversion to\n&quot;nullptr&quot; in C</big> ++\n<big>11.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Waligned-new</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\na new-expression of a type that requires greater alignment\nthan the &quot;alignof(std::max_align_t)&quot; but uses an\nallocation function without an explicit alignment parameter.\nThis option is enabled by\n<b>-Wall</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Normally\nthis only warns about global allocation functions, but\n<b>-Waligned-new=all</b> also warns about class member\nallocation functions.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-placement-new\n<br>\n-Wplacement-new=</b><i>n</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nplacement new expressions with undefined behavior, such as\nconstructing an object in a buffer that is smaller than the\ntype of the object. For example, the placement new\nexpression below is diagnosed because it attempts to\nconstruct an array of 64 integers in a buffer only 64 bytes\nlarge.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>char\nbuf [64]; <br>\nnew (buf) int[64];</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nwarning is enabled by default. <b><br>\n-Wplacement-new=1</b></big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big><big>This is the\ndefault warning level of <b>-Wplacement-new</b>. At this\nlevel the warning is not issued for some strictly undefined\nconstructs that</big> GCC <big>allows as extensions for\ncompatibility with legacy code. For example, the following\n&quot;new&quot; expression is not diagnosed at this level\neven though it has undefined behavior according to the\nC</big> ++ <big>standard because it writes past the end of\nthe one-element array.</big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big>struct\nS { int n, a[1]; }; <br>\nS *s = (S *)malloc (sizeof *s + 31 * sizeof s-&gt;a[0]);\n<br>\nnew (s-&gt;a)int [32]();</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><b>-Wplacement-new=2</b></big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big><big>At this\nlevel, in addition to diagnosing all the same constructs as\nat level 1, a diagnostic is also issued for placement new\nexpressions that construct an object in the last member of\nstructure whose type is an array of a single element and\nwhose size is less than the size of the object being\nconstructed. While the previous example would be diagnosed,\nthe following construct makes use of the flexible member\narray extension to avoid the warning at level\n2.</big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big>struct\nS { int n, a[]; }; <br>\nS *s = (S *)malloc (sizeof *s + 32 * sizeof s-&gt;a[0]);\n<br>\nnew (s-&gt;a)int [32]();</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wcatch-value\n<br>\n-Wcatch-value=</b><i>n</i> (C</big> ++ <big>and\nObjective-C</big> ++ <big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\ncatch handlers that do not catch via reference. With\n<b>-Wcatch-value=1</b> (or <b>-Wcatch-value</b> for short)\nwarn about polymorphic class types that are caught by value.\nWith <b>-Wcatch-value=2</b> warn about all class types that\nare caught by value. With <b>-Wcatch-value=3</b> warn about\nall types that are not caught by reference.\n<b>-Wcatch-value</b> is enabled by\n<b>-Wall</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wconditionally-supported</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn for\nconditionally-supported (C</big> ++ <big>11 [intro.defs])\nconstructs.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-delete-incomplete</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not warn\nwhen deleting a pointer to incomplete type, which may cause\nundefined behavior at runtime. This warning is enabled by\ndefault.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wextra-semi</b>\n(C</big> ++ <big>, Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nredundant semicolons after in-class function\ndefinitions.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-inaccessible-base</b>\n(C</big> ++ <big>, Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This option\ncontrols warnings when a base class is inaccessible in a\nclass derived from it due to ambiguity. The warning is\nenabled by default. Note that the warning for ambiguous\nvirtual bases is enabled by the <b>-Wextra</b>\noption.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>struct\nA { int a; }; <br>\nstruct B : A { }; <br>\nstruct C : B, A { };</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-inherited-variadic-ctor</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Suppress\nwarnings about use of C</big> ++ <big>11 inheriting\nconstructors when the base class inherited from has a C\nvariadic constructor; the warning is on by default because\nthe ellipsis is not inherited.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-invalid-offsetof</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Suppress\nwarnings from applying the &quot;offsetof&quot; macro to a\nnon-POD type. According to the 2014</big> ISO C</big> ++\nstandard, applying &quot;offsetof&quot; to a\nnon-standard-layout type is undefined. In existing C</big>\n++ <big>implementations, however, &quot;offsetof&quot;\ntypically gives meaningful results. This flag is for users\nwho are aware that they are writing nonportable code and who\nhave deliberately chosen to ignore the warning about\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\nrestrictions on &quot;offsetof&quot; may be relaxed in a\nfuture version of the C</big> ++\n<big>standard.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wsized-deallocation</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\na definition of an unsized deallocation\nfunction</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>void\noperator delete (void *) noexcept; <br>\nvoid operator delete[] (void *)\nnoexcept;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>without\na definition of the corresponding sized deallocation\nfunction</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>void\noperator delete (void *, std::size_t) noexcept; <br>\nvoid operator delete[] (void *, std::size_t)\nnoexcept;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>or\nvice versa. Enabled by <b>-Wextra</b> along with\n<b>-fsized-deallocation</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wsuggest-final-types</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\ntypes with virtual methods where code quality would be\nimproved if the type were declared with the C</big> ++\n<big>11 &quot;final&quot; specifier, or, if possible,\ndeclared in an anonymous namespace. This allows</big> GCC\n<big>to more aggressively devirtualize the polymorphic\ncalls. This warning is more effective with link-time\noptimization, where the information about the class\nhierarchy graph is more\ncomplete.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wsuggest-final-methods</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nvirtual methods where code quality would be improved if the\nmethod were declared with the C</big> ++ <big>11\n&quot;final&quot; specifier, or, if possible, its type were\ndeclared in an anonymous namespace or with the\n&quot;final&quot; specifier. This warning is more effective\nwith link-time optimization, where the information about the\nclass hierarchy graph is more complete. It is recommended to\nfirst consider suggestions of <b>-Wsuggest-final-types</b>\nand then rebuild with new\nannotations.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wsuggest-override</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\noverriding virtual functions that are not marked with the\n&quot;override&quot; keyword.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wuseless-cast</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn when\nan expression is casted to its own\ntype.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-conversion-null</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not warn\nfor conversions between &quot;NULL&quot; and non-pointer\ntypes. <b>-Wconversion-null</b> is enabled by\ndefault.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big><b>Options\nControlling Objective-C and Objective-C</b></big> <b>++\n<big>Dialects</big></b> <big><br>\n(</big> NOTE: <big>This manual does not describe the\nObjective-C and Objective-C</big> ++ <big>languages\nthemselves.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>This\nsection describes the command-line options that are only\nmeaningful for Objective-C and Objective-C</big> ++\n<big>programs. You can also use most of the\nlanguage-independent</big> GNU <big>compiler options. For\nexample, you might compile a file <i>some_class.m</i> like\nthis:</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>gcc\n-g -fgnu-runtime -O -c\nsome_class.m</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>In\nthis example, <b>-fgnu-runtime</b> is an option meant only\nfor Objective-C and Objective-C</big> ++ <big>programs; you\ncan use the other options with any language supported\nby</big> GCC.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>Note\nthat since Objective-C is an extension of the C language,\nObjective-C compilations may also use options specific to\nthe C front-end (e.g., <b>-Wtraditional</b>). Similarly,\nObjective-C</big> ++ <big>compilations may use C</big> ++\n<big>-specific options (e.g.,\n<b>-Wabi</b>).</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>Here\nis a list of options that are <i>only</i> for compiling\nObjective-C and Objective-C</big> ++ <big>programs: <b><br>\n\n-fconstant-string-class=</b><i>class-name</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Use\n<i>class-name</i> as the name of the class to instantiate\nfor each literal string specified with the syntax\n&quot;@&quot;...&quot;&quot;. The default class name is\n&quot;NXConstantString&quot; if the</big> GNU <big>runtime\nis being used, and &quot;NSConstantString&quot; if the NeXT\nruntime is being used (see below). The\n<b>-fconstant-cfstrings</b> option, if also present,\noverrides the <b>-fconstant-string-class</b> setting and\ncause &quot;@&quot;...&quot;&quot; literals to be laid out\nas constant CoreFoundation\nstrings.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fgnu-runtime</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Generate\nobject code compatible with the standard</big> GNU\n<big>Objective-C runtime. This is the default for most types\nof systems.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fnext-runtime</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Generate\noutput compatible with the NeXT runtime. This is the default\nfor NeXT-based systems, including Darwin and Mac</big> OS X.\n<big>The macro &quot;__NEXT_RUNTIME__&quot; is predefined if\n(and only if) this option is\nused.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-nil-receivers</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Assume that\nall Objective-C message dispatches (&quot;[receiver\nmessage:arg]&quot;) in this translation unit ensure that the\nreceiver is not &quot;nil&quot;. This allows for more\nefficient entry points in the runtime to be used. This\noption is only available in conjunction with the NeXT\nruntime and</big> ABI <big>version 0 or\n1.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fobjc-abi-version=</b><i>n</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Use version\n<i>n</i> of the Objective-C</big> ABI <big>for the selected\nruntime. This option is currently supported only for the\nNeXT runtime. In that case, Version 0 is the traditional\n(32-bit)</big> ABI <big>without support for properties and\nother Objective-C 2.0 additions. Version 1 is the\ntraditional (32-bit)</big> ABI <big>with support for\nproperties and other Objective-C 2.0 additions. Version 2 is\nthe modern (64-bit)</big> ABI. <big>If nothing is specified,\nthe default is Version 0 on 32-bit target machines, and\nVersion 2 on 64-bit target\nmachines.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fobjc-call-cxx-cdtors</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>For each\nObjective-C class, check if any of its instance variables is\na C</big> ++ <big>object with a non-trivial default\nconstructor. If so, synthesize a special &quot;- (id)\n.cxx_construct&quot; instance method which runs non-trivial\ndefault constructors on any such instance variables, in\norder, and then return &quot;self&quot;. Similarly, check if\nany instance variable is a C</big> ++ <big>object with a\nnon-trivial destructor, and if so, synthesize a special\n&quot;- (void) .cxx_destruct&quot; method which runs all\nsuch default destructors, in reverse\norder.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\n&quot;- (id) .cxx_construct&quot; and &quot;- (void)\n.cxx_destruct&quot; methods thusly generated only operate on\ninstance variables declared in the current Objective-C\nclass, and not those inherited from superclasses. It is the\nresponsibility of the Objective-C runtime to invoke all such\nmethods in an object&rsquo;s inheritance hierarchy. The\n&quot;- (id) .cxx_construct&quot; methods are invoked by the\nruntime immediately after a new object instance is\nallocated; the &quot;- (void) .cxx_destruct&quot; methods\nare invoked immediately before the runtime deallocates an\nobject instance.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>As\nof this writing, only the NeXT runtime on Mac</big> OS X\n10.4 <big>and later has support for invoking the &quot;-\n(id) .cxx_construct&quot; and &quot;- (void)\n.cxx_destruct&quot; methods.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fobjc-direct-dispatch</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Allow fast\njumps to the message dispatcher. On Darwin this is\naccomplished via the comm page.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fobjc-exceptions</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Enable\nsyntactic support for structured exception handling in\nObjective-C, similar to what is offered by C</big> ++ <big>.\nThis option is required to use the Objective-C keywords\n@try, @throw, @catch, @finally and @synchronized. This\noption is available with both the</big> GNU <big>runtime and\nthe NeXT runtime (but not available in conjunction with the\nNeXT runtime on Mac</big> OS X 10.2 <big>and\nearlier).</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fobjc-gc</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Enable\ngarbage collection (</big> GC <big>) in Objective-C and\nObjective-C</big> ++ <big>programs. This option is only\navailable with the NeXT runtime; the</big> GNU <big>runtime\nhas a different garbage collection implementation that does\nnot require special compiler\nflags.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fobjc-nilcheck</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>For the\nNeXT runtime with version 2 of the</big> ABI, <big>check for\na nil receiver in method invocations before doing the actual\nmethod call. This is the default and can be disabled using\n<b>-fno-objc-nilcheck</b>. Class methods and super calls are\nnever checked for nil in this way no matter what this flag\nis set to. Currently this flag does nothing when the</big>\nGNU <big>runtime, or an older version of the NeXT\nruntime</big> ABI, <big>is used.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fobjc-std=objc1</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Conform to\nthe language syntax of Objective-C 1.0, the language\nrecognized by</big> GCC 4.0. <big>This only affects the\nObjective-C additions to the C/C</big> ++ <big>language; it\ndoes not affect conformance to C/C</big> ++ <big>standards,\nwhich is controlled by the separate C/C</big> ++\n<big>dialect option flags. When this option is used with the\nObjective-C or Objective-C</big> ++ <big>compiler, any\nObjective-C syntax that is not recognized by</big> GCC 4.0\n<big>is rejected. This is useful if you need to make sure\nthat your Objective-C code can be compiled with older\nversions of</big> GCC.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b><big>-freplace-objc-classes</big></b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Emit a\nspecial marker instructing <b>ld(1)</b> not to statically\nlink in the resulting object file, and allow <b>dyld(1)</b>\nto load it in at run time instead. This is used in\nconjunction with the Fix-and-Continue debugging mode, where\nthe object file in question may be recompiled and\ndynamically reloaded in the course of program execution,\nwithout the need to restart the program itself. Currently,\nFix-and-Continue functionality is only available in\nconjunction with the NeXT runtime on Mac</big> OS X 10.3\n<big>and later.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fzero-link</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>When\ncompiling for the NeXT runtime, the compiler ordinarily\nreplaces calls to &quot;objc_getClass(&quot;...&quot;)&quot;\n(when the name of the class is known at compile time) with\nstatic class references that get initialized at load time,\nwhich improves run-time performance. Specifying the\n<b>-fzero-link</b> flag suppresses this behavior and causes\ncalls to &quot;objc_getClass(&quot;...&quot;)&quot; to be\nretained. This is useful in Zero-Link debugging mode, since\nit allows for individual class implementations to be\nmodified during program execution. The</big> GNU\n<big>runtime currently always retains calls to\n&quot;objc_get_class(&quot;...&quot;)&quot; regardless of\ncommand-line options.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-local-ivars</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>By default\ninstance variables in Objective-C can be accessed as if they\nwere local variables from within the methods of the class\nthey&rsquo;re declared in. This can lead to shadowing\nbetween instance variables and other variables declared\neither locally inside a class method or globally with the\nsame name. Specifying the <b>-fno-local-ivars</b> flag\ndisables this behavior thus avoiding variable shadowing\nissues.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fivar-visibility=</b>[<b>public</b>|<b>protected</b>|<b>private</b>|<b>package</b>]</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Set the\ndefault instance variable visibility to the specified option\nso that instance variables declared outside the scope of any\naccess modifier directives default to the specified\nvisibility.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-gen-decls</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Dump\ninterface declarations for all classes seen in the source\nfile to a file named\n<i>sourcename.decl</i>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wassign-intercept</b>\n(Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn\nwhenever an Objective-C assignment is being intercepted by\nthe garbage collector.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-property-assign-default</b>\n(Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not warn\nif a property for an Objective-C object has no assign\nsemantics specified.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wno-protocol</b>\n(Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>If a class\nis declared to implement a protocol, a warning is issued for\nevery method in the protocol that is not implemented by the\nclass. The default behavior is to issue a warning for every\nmethod not explicitly implemented in the class, even if a\nmethod implementation is inherited from the superclass. If\nyou use the <b>-Wno-protocol</b> option, then methods\ninherited from the superclass are considered to be\nimplemented, and no warning is issued for\nthem.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wobjc-root-class</b>\n(Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn if a\nclass interface lacks a superclass. Most classes will\ninherit from &quot;NSObject&quot; (or &quot;Object&quot;)\nfor example. When declaring classes intended to be root\nclasses, the warning can be suppressed by marking their\ninterfaces with\n&quot;__attribute__((objc_root_class))&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wselector</b>\n(Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn if\nmultiple methods of different types for the same selector\nare found during compilation. The check is performed on the\nlist of methods in the final stage of compilation.\nAdditionally, a check is performed for each selector\nappearing in a &quot;@selector(...)&quot; expression, and a\ncorresponding method for that selector has been found during\ncompilation. Because these checks scan the method table only\nat the end of compilation, these warnings are not produced\nif the final stage of compilation is not reached, for\nexample because an error is found during compilation, or\nbecause the <b>-fsyntax-only</b> option is being\nused.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wstrict-selector-match</b>\n(Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn if\nmultiple methods with differing argument and/or return types\nare found for a given selector when attempting to send a\nmessage using this selector to a receiver of type\n&quot;id&quot; or &quot;Class&quot;. When this flag is off\n(which is the default behavior), the compiler omits such\nwarnings if any differences found are confined to types that\nshare the same size and\nalignment.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wundeclared-selector</b>\n(Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn if a\n&quot;@selector(...)&quot; expression referring to an\nundeclared selector is found. A selector is considered\nundeclared if no method with that name has been declared\nbefore the &quot;@selector(...)&quot; expression, either\nexplicitly in an @interface or @protocol declaration, or\nimplicitly in an @implementation section. This option always\nperforms its checks as soon as a &quot;@selector(...)&quot;\nexpression is found, while <b>-Wselector</b> only performs\nits checks in the final stage of compilation. This also\nenforces the coding style convention that methods and\nselectors must be declared before being\nused.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-print-objc-runtime-info</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Generate C\nheader describing the largest structure that is passed by\nvalue, if any.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big><b>Options\nto Control Diagnostic Messages Formatting</b> <br>\nTraditionally, diagnostic messages have been formatted\nirrespective of the output device&rsquo;s aspect (e.g. its\nwidth, ...). You can use the options described below to\ncontrol the formatting algorithm for diagnostic messages,\ne.g. how many characters per line, how often source location\ninformation should be reported. Note that some language\nfront ends may not honor these options. <b><br>\n-fmessage-length=</b><i>n</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Try to\nformat error messages so that they fit on lines of about\n<i>n</i> characters. If <i>n</i> is zero, then no\nline-wrapping is done; each error message appears on a\nsingle line. This is the default for all front\nends.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Note\n- this option also affects the display of the <b>#error</b>\nand <b>#warning</b> pre-processor directives, and the\n<b>deprecated</b> function/type/variable attribute. It does\nnot however affect the <b>pragma</b></big> <b>GCC\n<big>warning</big></b> <big>and <b>pragma</b></big> <b>GCC\n<big>error</big></b>\n<big>pragmas.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-plain-output</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This option\nrequests that diagnostic output look as plain as possible,\nwhich may be useful when running <b>dejagnu</b> or other\nutilities that need to parse diagnostics output and prefer\nthat it remain more stable over time.\n<b>-fdiagnostics-plain-output</b> is currently equivalent to\nthe following options: <b>-fno-diagnostics-show-caret\n-fno-diagnostics-show-line-numbers -fdiagnostics-color=never\n-fdiagnostics-urls=never\n-fdiagnostics-path-format=separate-events</b> In the future,\nif</big> GCC <big>changes the default appearance of its\ndiagnostics, the corresponding option to disable the new\nbehavior will be added to this\nlist.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-show-location=once</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Only\nmeaningful in line-wrapping mode. Instructs the diagnostic\nmessages reporter to emit source location information\n<i>once</i>; that is, in case the message is too long to fit\non a single physical line and has to be wrapped, the source\nlocation won&rsquo;t be emitted (as prefix) again, over and\nover, in subsequent continuation lines. This is the default\nbehavior.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-show-location=every-line</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Only\nmeaningful in line-wrapping mode. Instructs the diagnostic\nmessages reporter to emit the same source location\ninformation (as prefix) for physical lines that result from\nthe process of breaking a message which is too long to fit\non a single line.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-color[=</b></big>\n<i>WHEN</i> <b><big>] <br>\n-fno-diagnostics-color</big></b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Use color\nin diagnostics.</big> <i>WHEN</i> <big>is <b>never</b>,\n<b>always</b>, or <b>auto</b>. The default depends on how\nthe compiler has been configured, it can be any of the\nabove</big> <i>WHEN</i> <big>options or also <b>never</b>\nif</big> <b>GCC_COLORS</b> <big>environment variable\nisn&rsquo;t present in the environment, and <b>auto</b>\notherwise. <b>auto</b> makes</big> GCC <big>use color only\nwhen the standard error is a terminal, and when not\nexecuting in an emacs shell. The forms\n<b>-fdiagnostics-color</b> and <b>-fno-diagnostics-color</b>\nare aliases for <b>-fdiagnostics-color=always</b> and\n<b>-fdiagnostics-color=never</b>,\nrespectively.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\ncolors are defined by the environment variable</big>\n<b>GCC_COLORS</b> <big>. Its value is a colon-separated list\nof capabilities and Select Graphic Rendition (</big> SGR\n<big>) substrings.</big> SGR <big>commands are interpreted\nby the terminal or terminal emulator. (See the section in\nthe documentation of your text terminal for permitted values\nand their meanings as character attributes.) These substring\nvalues are integers in decimal representation and can be\nconcatenated with semicolons. Common values to concatenate\ninclude <b>1</b> for bold, <b>4</b> for underline, <b>5</b>\nfor blink, <b>7</b> for inverse, <b>39</b> for default\nforeground color, <b>30</b> to <b>37</b> for foreground\ncolors, <b>90</b> to <b>97</b> for 16-color mode foreground\ncolors, <b>38;5;0</b> to <b>38;5;255</b> for 88-color and\n256-color modes foreground colors, <b>49</b> for default\nbackground color, <b>40</b> to <b>47</b> for background\ncolors, <b>100</b> to <b>107</b> for 16-color mode\nbackground colors, and <b>48;5;0</b> to <b>48;5;255</b> for\n88-color and 256-color modes background\ncolors.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\ndefault</big> <b>GCC_COLORS</b>\n<big>is</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>error=01;31:warning=01;35:note=01;36:range1=32:range2=34:locus=01:\\\n<br>\nquote=01:path=01;36:fixit-insert=32:fixit-delete=31:\\ <br>\n\ndiff-filename=01:diff-hunk=32:diff-delete=31:diff-insert=32:\\\n<br>\ntype-diff=01;32</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>where\n<b>01;31</b> is bold red, <b>01;35</b> is bold magenta,\n<b>01;36</b> is bold cyan, <b>32</b> is green, <b>34</b> is\nblue, <b>01</b> is bold, and <b>31</b> is red. Setting</big>\n<b>GCC_COLORS</b> <big>to the empty string disables colors.\nSupported capabilities are as follows. <br>\n&quot;error=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for error:\nmarkers.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;warning=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for warning:\nmarkers.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;note=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for note:\nmarkers.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;path=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for colorizing paths of control-flow events\nas printed via <b>-fdiagnostics-path-format=</b>, such as\nthe identifiers of individual events and lines indicating\ninterprocedural calls and\nreturns.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;range1=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for first additional\nrange.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;range2=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for second additional\nrange.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;locus=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for location information, <b>file:line</b> or\n<b>file:line:column</b> etc.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;quote=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for information printed within\nquotes.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;fixit-insert=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for fix-it hints suggesting text to be\ninserted or replaced.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;fixit-delete=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for fix-it hints suggesting text to be\ndeleted.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;diff-filename=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for filename headers within generated\npatches.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;diff-hunk=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for the starts of hunks within generated\npatches.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;diff-delete=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for deleted lines within generated\npatches.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;diff-insert=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for inserted lines within generated\npatches.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big>&quot;type-diff=&quot;</big></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>SGR\n<big>substring for highlighting mismatching types within\ntemplate arguments in the C</big> ++\n<big>frontend.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-urls[=</b></big>\n<i>WHEN</i> <b><big>]</big></b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Use escape\nsequences to embed URLs in diagnostics. For example, when\n<b>-fdiagnostics-show-option</b> emits text showing the\ncommand-line option controlling a diagnostic, embed a</big>\nURL <big>for documentation of that\noption.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><i>WHEN</i>\n<big>is <b>never</b>, <b>always</b>, or <b>auto</b>.\n<b>auto</b> makes</big> GCC <big>use</big> URL <big>escape\nsequences only when the standard error is a terminal, and\nwhen not executing in an emacs shell or any graphical\nterminal which is known to be incompatible with this\nfeature, see below.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\ndefault depends on how the compiler has been configured. It\ncan be any of the above</big> <i>WHEN</i>\n<big>options.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>GCC\n<big>can also be configured (via the\n<b>--with-diagnostics-urls=auto-if-env</b> configure-time\noption) so that the default is affected by environment\nvariables. Under such a configuration,</big> GCC\n<big>defaults to using <b>auto</b> if either</big>\n<b>GCC_URLS</b> <big>or</big> <b>TERM_URLS</b>\n<big>environment variables are present and non-empty in the\nenvironment of the compiler, or <b>never</b> if neither\nare.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>However,\neven with <b>-fdiagnostics-urls=always</b> the behavior is\ndependent on those environment variables: If</big>\n<b>GCC_URLS</b> <big>is set to empty or <b>no</b>, do not\nembed URLs in diagnostics. If set to <b>st</b>, URLs\nuse</big> ST <big>escape sequences. If set to <b>bel</b>,\nthe default, URLs use</big> BEL <big>escape sequences. Any\nother non-empty value enables the feature. If</big>\n<b>GCC_URLS</b> <big>is not set, use</big> <b>TERM_URLS</b>\n<big>as a fallback. Note:</big> ST <big>is an</big> ANSI\n<big>escape sequence, string terminator</big> <b>ESC\n<big>\\</big></b><big>,</big> BEL <big>is an</big> ASCII\n<big>character, CTRL-G that usually sounds like a\nbeep.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>At\nthis time</big> GCC <big>tries to detect also a few\nterminals that are known to not implement the</big> URL\n<big>feature, and have bugs or at least had bugs in some\nversions that are still in use, where the</big> URL\n<big>escapes are likely to misbehave, i.e. print garbage on\nthe screen. That list is currently xfce4-terminal, certain\nknown to be buggy gnome-terminal versions, the linux\nconsole, and mingw. This check can be skipped with the\n<b>-fdiagnostics-urls=always</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-diagnostics-show-option</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>By default,\neach diagnostic emitted includes text indicating the\ncommand-line option that directly controls the diagnostic\n(if such an option is known to the diagnostic machinery).\nSpecifying the <b>-fno-diagnostics-show-option</b> flag\nsuppresses that behavior.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-diagnostics-show-caret</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>By default,\neach diagnostic emitted includes the original source line\nand a caret <b>^</b> indicating the column. This option\nsuppresses this information. The source line is truncated to\n<i>n</i> characters, if the <b>-fmessage-length=n</b> option\nis given. When the output is done to the terminal, the width\nis limited to the width given by the</big> <b>COLUMNS</b>\n<big>environment variable or, if not set, to the terminal\nwidth.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-diagnostics-show-labels</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>By default,\nwhen printing source code (via\n<b>-fdiagnostics-show-caret</b>), diagnostics can label\nranges of source code with pertinent information, such as\nthe types of expressions:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>printf\n(&quot;foo %s bar&quot;, long_i + long_j); <br>\n~^ ~~~~~~~~~~~~~~~ <br>\n| | <br>\nchar * long int</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\noption suppresses the printing of these labels (in the\nexample above, the vertical bars and the &quot;char *&quot;\nand &quot;long int&quot; text).</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-diagnostics-show-cwe</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Diagnostic\nmessages can optionally have an associated\n@url{https://cwe.mitre.org/index.html,</big> CWE <big>}\nidentifier.</big> GCC <big>itself only provides such\nmetadata for some of the <b>-fanalyzer</b>\ndiagnostics.</big> GCC <big>plugins may also provide\ndiagnostics with such metadata. By default, if this\ninformation is present, it will be printed with the\ndiagnostic. This option suppresses the printing of this\nmetadata.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-diagnostics-show-line-numbers</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>By default,\nwhen printing source code (via\n<b>-fdiagnostics-show-caret</b>), a left margin is printed,\nshowing line numbers. This option suppresses this left\nmargin.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-minimum-margin-width=</b><i>width</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This option\ncontrols the minimum width of the left margin printed by\n<b>-fdiagnostics-show-line-numbers</b>. It defaults to\n6.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-parseable-fixits</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Emit fix-it\nhints in a machine-parseable format, suitable for\nconsumption by IDEs. For each fix-it, a line will be printed\nafter the relevant diagnostic, starting with the string\n&quot;fix-it:&quot;. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>fix-it:&quot;test.c&quot;:{45:3-45:21}:&quot;gtk_widget_show_all&quot;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nlocation is expressed as a half-open range, expressed as a\ncount of bytes, starting at byte 1 for the initial column.\nIn the above example, bytes 3 through 20 of line 45 of\n&quot;test.c&quot; are to be replaced with the given\nstring:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>00000000011111111112222222222\n<br>\n12345678901234567890123456789 <br>\ngtk_widget_showall (dlg); <br>\n^^^^^^^^^^^^^^^^^^ <br>\ngtk_widget_show_all</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nfilename and replacement string escape backslash as\n&quot;\\\\&quot;, tab as &quot;\\t&quot;, newline as\n&quot;\\n&quot;, double quotes as &quot;\\&quot;&quot;,\nnon-printable characters as octal (e.g. vertical tab as\n&quot;\\013&quot;).</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>An\nempty replacement string indicates that the given range is\nto be removed. An empty range (e.g. &quot;45:3-45:3&quot;)\nindicates that the string is to be inserted at the given\nposition.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-generate-patch</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Print\nfix-it hints to stderr in unified diff format, after any\ndiagnostics are printed. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>---\ntest.c <br>\n+++ test.c <br>\n@ -42,5 +42,5 @ <br>\nvoid show_cb(GtkDialog *dlg) <br>\n{ <br>\n- gtk_widget_showall(dlg); <br>\n+ gtk_widget_show_all(dlg); <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\ndiff may or may not be colorized, following the same rules\nas for diagnostics (see\n<b>-fdiagnostics-color</b>).</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-show-template-tree</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>In the\nC</big> ++ <big>frontend, when printing diagnostics showing\nmismatching template types, such\nas:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>could\nnot convert 'std::map&lt;int, std::vector&lt;double&gt;\n&gt;()' <br>\nfrom 'map&lt;[...],vector&lt;double&gt;&gt;' to\n'map&lt;[...],vector&lt;float&gt;&gt;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>the\n<b>-fdiagnostics-show-template-tree</b> flag enables\nprinting a tree-like structure showing the common and\ndiffering parts of the types, such\nas:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>map&lt;\n<br>\n[...], <br>\nvector&lt; <br>\n[double != float]&gt;&gt;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nparts that differ are highlighted with color\n(&quot;double&quot; and &quot;float&quot; in this\ncase).</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-elide-type</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>By default\nwhen the C</big> ++ <big>frontend prints diagnostics showing\nmismatching template types, common parts of the types are\nprinted as &quot;[...]&quot; to simplify the error message.\nFor example:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>could\nnot convert 'std::map&lt;int, std::vector&lt;double&gt;\n&gt;()' <br>\nfrom 'map&lt;[...],vector&lt;double&gt;&gt;' to\n'map&lt;[...],vector&lt;float&gt;&gt;</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Specifying\nthe <b>-fno-elide-type</b> flag suppresses that behavior.\nThis flag also affects the output of the\n<b>-fdiagnostics-show-template-tree</b>\nflag.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-path-format=</b></big>\n<i>KIND</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Specify how\nto print paths of control-flow events for diagnostics that\nhave such a path associated with\nthem.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><i>KIND</i>\n<big>is <b>none</b>, <b>separate-events</b>, or\n<b>inline-events</b>, the\ndefault.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><b>none</b>\nmeans to not print diagnostic\npaths.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><b>separate-events</b>\nmeans to print a separate &quot;note&quot; diagnostic for\neach event within the diagnostic. For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>test.c:29:5:\nerror: passing NULL as argument 1 to 'PyList_Append' which\nrequires a non-NULL parameter <br>\ntest.c:25:10: note: (1) when 'PyList_New' fails, returning\nNULL <br>\ntest.c:27:3: note: (2) when 'i &lt; count' <br>\ntest.c:29:5: note: (3) when calling 'PyList_Append', passing\nNULL from (1) as argument 1</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><b>inline-events</b>\nmeans to print the events &quot;inline&quot; within the\nsource code. This view attempts to consolidate the events\ninto runs of sufficiently-close events, printing them as\nlabelled ranges within the\nsource.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>For\nexample, the same events as above might be printed\nas:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>'test':\nevents 1-3 <br>\n| <br>\n| 25 | list = PyList_New(0); <br>\n| | ^~~~~~~~~~~~~ <br>\n| | | <br>\n| | (1) when 'PyList_New' fails, returning NULL <br>\n| 26 | <br>\n| 27 | for (i = 0; i &lt; count; i++) { <br>\n| | ~~~ <br>\n| | | <br>\n| | (2) when 'i &lt; count' <br>\n| 28 | item = PyLong_FromLong(random()); <br>\n| 29 | PyList_Append(list, item); <br>\n| | ~~~~~~~~~~~~~~~~~~~~~~~~~ <br>\n| | | <br>\n| | (3) when calling 'PyList_Append', passing NULL from (1)\nas argument 1 <br>\n|</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Interprocedural\ncontrol flow is shown by grouping the events by stack frame,\nand using indentation to show how stack frames are nested,\npushed, and popped.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>For\nexample:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>'test':\nevents 1-2 <br>\n| <br>\n| 133 | { <br>\n| | ^ <br>\n| | | <br>\n| | (1) entering 'test' <br>\n| 134 | boxed_int *obj = make_boxed_int (i); <br>\n| | ~~~~~~~~~~~~~~~~~~ <br>\n| | | <br>\n| | (2) calling 'make_boxed_int' <br>\n| <br>\n+--&gt; 'make_boxed_int': events 3-4 <br>\n| <br>\n| 120 | { <br>\n| | ^ <br>\n| | | <br>\n| | (3) entering 'make_boxed_int' <br>\n| 121 | boxed_int *result = (boxed_int *)wrapped_malloc\n(sizeof (boxed_int)); <br>\n| | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <br>\n| | | <br>\n| | (4) calling 'wrapped_malloc' <br>\n| <br>\n+--&gt; 'wrapped_malloc': events 5-6 <br>\n| <br>\n| 7 | { <br>\n| | ^ <br>\n| | | <br>\n| | (5) entering 'wrapped_malloc' <br>\n| 8 | return malloc (size); <br>\n| | ~~~~~~~~~~~~~ <br>\n| | | <br>\n| | (6) calling 'malloc' <br>\n| <br>\n&lt;-------------+ <br>\n| <br>\n'test': event 7 <br>\n| <br>\n| 138 | free_boxed_int (obj); <br>\n| | ^~~~~~~~~~~~~~~~~~~~ <br>\n| | | <br>\n| | (7) calling 'free_boxed_int' <br>\n| <br>\n(etc)</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-show-path-depths</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This option\nprovides additional information when printing control-flow\npaths associated with a\ndiagnostic.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>If\nthis is option is provided then the stack depth will be\nprinted for each run of events within\n<b>-fdiagnostics-path-format=separate-events</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>This\nis intended for use by</big> GCC <big>developers and plugin\ndevelopers when debugging diagnostics that report\ninterprocedural control flow.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fno-show-column</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Do not\nprint column numbers in diagnostics. This may be necessary\nif diagnostics are being scanned by a program that does not\nunderstand the column numbers, such as\n<b>dejagnu</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-column-unit=</b></big>\n<i>UNIT</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Select the\nunits for the column number. This affects traditional\ndiagnostics (in the absence of <b>-fno-show-column</b>), as\nwell as</big> JSON <big>format diagnostics if\nrequested.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\ndefault</big> <i>UNIT</i> <big>, <b>display</b>, considers\nthe number of display columns occupied by each character.\nThis may be larger than the number of bytes required to\nencode the character, in the case of tab characters, or it\nmay be smaller, in the case of multibyte characters. For\nexample, the character &quot;</big> GREEK SMALL LETTER PI\n<big>(U+03C0)&quot; occupies one display column, and\nits</big> UTF-8 <big>encoding requires two bytes; the\ncharacter &quot;</big> SLIGHTLY SMILING FACE\n<big>(U+1F642)&quot; occupies two display columns, and\nits</big> UTF-8 <big>encoding requires four\nbytes.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Setting</big>\n<i>UNIT</i> <big>to <b>byte</b> changes the column number to\nthe raw byte count in all cases, as was traditionally output\nby</big> GCC <big>prior to version\n11.1.0.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-column-origin=</b></big>\n<i>ORIGIN</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Select the\norigin for column numbers, i.e. the column number assigned\nto the first column. The default value of 1 corresponds to\ntraditional</big> GCC <big>behavior and to the</big> GNU\n<big>style guide. Some utilities may perform better with an\norigin of 0; any non-negative value may be\nspecified.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fdiagnostics-format=</b></big>\n<i>FORMAT</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Select a\ndifferent format for printing diagnostics.</big>\n<i>FORMAT</i> <big>is <b>text</b> or <b>json</b>. The\ndefault is <b>text</b>.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\n<b>json</b> format consists of a top-level</big> JSON\n<big>array containing</big> JSON <big>objects representing\nthe diagnostics.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The</big>\nJSON <big>is emitted as one line, without formatting; the\nexamples below have been formatted for\nclarity.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Diagnostics\ncan have child diagnostics. For example, this error and\nnote:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>misleading-indentation.c:15:3:\nwarning: this 'if' clause does not <br>\nguard... [-Wmisleading-indentation] <br>\n15 | if (flag) <br>\n| ^~ <br>\nmisleading-indentation.c:17:5: note: ...this statement, but\nthe latter <br>\nis misleadingly indented as if it were guarded by the 'if'\n<br>\n17 | y = 2; <br>\n| ^</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>might\nbe printed in</big> JSON <big>form (after formatting) like\nthis:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>[\n<br>\n{ <br>\n&quot;kind&quot;: &quot;warning&quot;, <br>\n&quot;locations&quot;: [ <br>\n{ <br>\n&quot;caret&quot;: { <br>\n&quot;display-column&quot;: 3, <br>\n&quot;byte-column&quot;: 3, <br>\n&quot;column&quot;: 3, <br>\n&quot;file&quot;: &quot;misleading-indentation.c&quot;, <br>\n&quot;line&quot;: 15 <br>\n}, <br>\n&quot;finish&quot;: { <br>\n&quot;display-column&quot;: 4, <br>\n&quot;byte-column&quot;: 4, <br>\n&quot;column&quot;: 4, <br>\n&quot;file&quot;: &quot;misleading-indentation.c&quot;, <br>\n&quot;line&quot;: 15 <br>\n} <br>\n} <br>\n], <br>\n&quot;message&quot;: &quot;this \\u2018if\\u2019 clause does\nnot guard...&quot;, <br>\n&quot;option&quot;: &quot;-Wmisleading-indentation&quot;,\n<br>\n&quot;option_url&quot;:\n&quot;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wmisleading-indentation&quot;,\n<br>\n&quot;children&quot;: [ <br>\n{ <br>\n&quot;kind&quot;: &quot;note&quot;, <br>\n&quot;locations&quot;: [ <br>\n{ <br>\n&quot;caret&quot;: { <br>\n&quot;display-column&quot;: 5, <br>\n&quot;byte-column&quot;: 5, <br>\n&quot;column&quot;: 5, <br>\n&quot;file&quot;: &quot;misleading-indentation.c&quot;, <br>\n&quot;line&quot;: 17 <br>\n} <br>\n} <br>\n], <br>\n&quot;message&quot;: &quot;...this statement, but the latter\nis ...&quot; <br>\n} <br>\n] <br>\n&quot;column-origin&quot;: 1, <br>\n}, <br>\n... <br>\n]</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>where\nthe &quot;note&quot; is a child of the\n&quot;warning&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>A\ndiagnostic has a &quot;kind&quot;. If this is\n&quot;warning&quot;, then there is an &quot;option&quot; key\ndescribing the command-line option controlling the\nwarning.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>A\ndiagnostic can contain zero or more locations. Each location\nhas an optional &quot;label&quot; string and up to three\npositions within it: a &quot;caret&quot; position and\noptional &quot;start&quot; and &quot;finish&quot; positions.\nA position is described by a &quot;file&quot; name, a\n&quot;line&quot; number, and three numbers indicating a\ncolumn position:</big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>&quot;display-column&quot; counts\ndisplay columns, accounting for tabs and multibyte\ncharacters.</big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>&quot;byte-column&quot; counts raw\nbytes.</big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><big>*</big></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big>&quot;column&quot; is equal to one\nof the previous two, as dictated by the\n<b>-fdiagnostics-column-unit</b>\noption.</big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>All\nthree columns are relative to the origin specified by\n<b>-fdiagnostics-column-origin</b>, which is typically equal\nto 1 but may be set, for instance, to 0 for compatibility\nwith other utilities that number columns from 0. The column\norigin is recorded in the</big> JSON <big>output in the\n&quot;column-origin&quot; tag. In the remaining examples\nbelow, the extra column number outputs have been omitted for\nbrevity.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>For\nexample, this error:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>bad-binary-ops.c:64:23:\nerror: invalid operands to binary + (have 'S' {aka <br>\n'struct s'} and 'T' {aka 'struct t'}) <br>\n64 | return callee_4a () + callee_4b (); <br>\n| ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~ <br>\n| | | <br>\n| | T {aka struct t} <br>\n| S {aka struct s}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>has\nthree locations. Its primary location is at the\n&quot;+&quot; token at column 23. It has two secondary\nlocations, describing the left and right-hand sides of the\nexpression, which have labels. It might be printed in</big>\nJSON <big>form as:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>{\n<br>\n&quot;children&quot;: [], <br>\n&quot;kind&quot;: &quot;error&quot;, <br>\n&quot;locations&quot;: [ <br>\n{ <br>\n&quot;caret&quot;: { <br>\n&quot;column&quot;: 23, &quot;file&quot;:\n&quot;bad-binary-ops.c&quot;, &quot;line&quot;: 64 <br>\n} <br>\n}, <br>\n{ <br>\n&quot;caret&quot;: { <br>\n&quot;column&quot;: 10, &quot;file&quot;:\n&quot;bad-binary-ops.c&quot;, &quot;line&quot;: 64 <br>\n}, <br>\n&quot;finish&quot;: { <br>\n&quot;column&quot;: 21, &quot;file&quot;:\n&quot;bad-binary-ops.c&quot;, &quot;line&quot;: 64 <br>\n}, <br>\n&quot;label&quot;: &quot;S {aka struct s}&quot; <br>\n}, <br>\n{ <br>\n&quot;caret&quot;: { <br>\n&quot;column&quot;: 25, &quot;file&quot;:\n&quot;bad-binary-ops.c&quot;, &quot;line&quot;: 64 <br>\n}, <br>\n&quot;finish&quot;: { <br>\n&quot;column&quot;: 36, &quot;file&quot;:\n&quot;bad-binary-ops.c&quot;, &quot;line&quot;: 64 <br>\n}, <br>\n&quot;label&quot;: &quot;T {aka struct t}&quot; <br>\n} <br>\n], <br>\n&quot;message&quot;: &quot;invalid operands to binary +\n...&quot; <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>If\na diagnostic contains fix-it hints, it has a\n&quot;fixits&quot; array, consisting of half-open intervals,\nsimilar to the output of\n<b>-fdiagnostics-parseable-fixits</b>. For example, this\ndiagnostic with a replacement fix-it\nhint:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>demo.c:8:15:\nerror: 'struct s' has no member named 'colour'; did you <br>\nmean 'color'? <br>\n8 | return ptr-&gt;colour; <br>\n| ^~~~~~ <br>\n| color</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>might\nbe printed in</big> JSON <big>form\nas:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>{\n<br>\n&quot;children&quot;: [], <br>\n&quot;fixits&quot;: [ <br>\n{ <br>\n&quot;next&quot;: { <br>\n&quot;column&quot;: 21, <br>\n&quot;file&quot;: &quot;demo.c&quot;, <br>\n&quot;line&quot;: 8 <br>\n}, <br>\n&quot;start&quot;: { <br>\n&quot;column&quot;: 15, <br>\n&quot;file&quot;: &quot;demo.c&quot;, <br>\n&quot;line&quot;: 8 <br>\n}, <br>\n&quot;string&quot;: &quot;color&quot; <br>\n} <br>\n], <br>\n&quot;kind&quot;: &quot;error&quot;, <br>\n&quot;locations&quot;: [ <br>\n{ <br>\n&quot;caret&quot;: { <br>\n&quot;column&quot;: 15, <br>\n&quot;file&quot;: &quot;demo.c&quot;, <br>\n&quot;line&quot;: 8 <br>\n}, <br>\n&quot;finish&quot;: { <br>\n&quot;column&quot;: 20, <br>\n&quot;file&quot;: &quot;demo.c&quot;, <br>\n&quot;line&quot;: 8 <br>\n} <br>\n} <br>\n], <br>\n&quot;message&quot;: &quot;\\u2018struct s\\u2019 has no\nmember named ...&quot; <br>\n}</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>where\nthe fix-it hint suggests replacing the text from\n&quot;start&quot; up to but not including &quot;next&quot;\nwith &quot;string&quot;&rsquo;s value. Deletions are\nexpressed via an empty value for &quot;string&quot;,\ninsertions by having &quot;start&quot; equal\n&quot;next&quot;.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>If\nthe diagnostic has a path of control-flow events associated\nwith it, it has a &quot;path&quot; array of objects\nrepresenting the events. Each event object has a\n&quot;description&quot; string, a &quot;location&quot;\nobject, along with a &quot;function&quot; string and a\n&quot;depth&quot; number for representing interprocedural\npaths. The &quot;function&quot; represents the current\nfunction at that event, and the &quot;depth&quot; represents\nthe stack depth relative to some baseline: the higher, the\nmore frames are within the\nstack.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>For\nexample, the intraprocedural example shown for\n<b>-fdiagnostics-path-format=</b> might have this</big> JSON\n<big>for its path:</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>&quot;path&quot;:\n[ <br>\n{ <br>\n&quot;depth&quot;: 0, <br>\n&quot;description&quot;: &quot;when 'PyList_New' fails,\nreturning NULL&quot;, <br>\n&quot;function&quot;: &quot;test&quot;, <br>\n&quot;location&quot;: { <br>\n&quot;column&quot;: 10, <br>\n&quot;file&quot;: &quot;test.c&quot;, <br>\n&quot;line&quot;: 25 <br>\n} <br>\n}, <br>\n{ <br>\n&quot;depth&quot;: 0, <br>\n&quot;description&quot;: &quot;when 'i &lt; count'&quot;,\n<br>\n&quot;function&quot;: &quot;test&quot;, <br>\n&quot;location&quot;: { <br>\n&quot;column&quot;: 3, <br>\n&quot;file&quot;: &quot;test.c&quot;, <br>\n&quot;line&quot;: 27 <br>\n} <br>\n}, <br>\n{ <br>\n&quot;depth&quot;: 0, <br>\n&quot;description&quot;: &quot;when calling 'PyList_Append',\npassing NULL from (1) as argument 1&quot;, <br>\n&quot;function&quot;: &quot;test&quot;, <br>\n&quot;location&quot;: { <br>\n&quot;column&quot;: 5, <br>\n&quot;file&quot;: &quot;test.c&quot;, <br>\n&quot;line&quot;: 29 <br>\n} <br>\n} <br>\n]</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big><b>Options\nto Request or Suppress Warnings</b> <br>\nWarnings are diagnostic messages that report constructions\nthat are not inherently erroneous but that are risky or\nsuggest there may have been an\nerror.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>The\nfollowing language-independent options do not enable\nspecific warnings but control the kinds of diagnostics\nproduced by</big> GCC. <b><big><br>\n-fsyntax-only</big></b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Check the\ncode for syntax errors, but don&rsquo;t do anything beyond\nthat.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-fmax-errors=</b><i>n</i></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Limits the\nmaximum number of error messages to <i>n</i>, at which\npoint</big> GCC <big>bails out rather than attempting to\ncontinue processing the source code. If <i>n</i> is 0 (the\ndefault), there is no limit on the number of error messages\nproduced. If <b>-Wfatal-errors</b> is also specified, then\n<b>-Wfatal-errors</b> takes precedence over this\noption.</big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n\n<p><big><big><big><big><b>-w</b></big></big></big></big></p> </td>\n<td width=\"3%\"></td>\n<td width=\"45%\">\n\n\n<p><big><big><big><big>Inhibit all warning\nmessages.</big></big></big></big></p> </td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Werror</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Make all\nwarnings into errors.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Werror=</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Make the\nspecified warning into an error. The specifier for a warning\nis appended; for example <b>-Werror=switch</b> turns the\nwarnings controlled by <b>-Wswitch</b> into errors. This\nswitch takes a negative form, to be used to negate\n<b>-Werror</b> for specific warnings; for example\n<b>-Wno-error=switch</b> makes <b>-Wswitch</b> warnings not\nbe errors, even when <b>-Werror</b> is in\neffect.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>The\nwarning message for each controllable warning includes the\noption that controls the warning. That option can then be\nused with <b>-Werror=</b> and <b>-Wno-error=</b> as\ndescribed above. (Printing of the option in the warning\nmessage can be disabled using the\n<b>-fno-diagnostics-show-option</b>\nflag.)</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Note\nthat specifying <b>-Werror=</b><i>foo</i> automatically\nimplies <b>-W</b><i>foo</i>. However,\n<b>-Wno-error=</b><i>foo</i> does not imply\nanything.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><b>-Wfatal-errors</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>This option\ncauses the compiler to abort compilation on the first error\noccurred rather than trying to keep going and printing\nfurther error messages.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>You\ncan request many specific warnings with options beginning\nwith <b>-W</b>, for example <b>-Wimplicit</b> to request\nwarnings on implicit declarations. Each of these specific\nwarning options also has a negative form beginning\n<b>-Wno-</b> to turn off warnings; for example,\n<b>-Wno-implicit</b>. This manual lists only one of the two\nforms, whichever is not the default. For further\nlanguage-specific options also refer to <b>C</b></big> <b>++\n<big>Dialect Options</big></b> <big>and <b>Objective-C and\nObjective-C</b></big> <b>++ <big>Dialect\nOptions</big></b><big>. Additional warnings can be produced\nby enabling the static analyzer;</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>Some\noptions, such as <b>-Wall</b> and <b>-Wextra</b>, turn on\nother options, such as <b>-Wunused</b>, which may turn on\nfurther options, such as <b>-Wunused-value</b>. The combined\neffect of positive and negative forms is that more specific\noptions have priority over less specific ones, independently\nof their position in the command-line. For options of the\nsame specificity, the last one takes effect. Options enabled\nor disabled via pragmas take effect as if they appeared at\nthe end of the command-line.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>When\nan unrecognized warning option is requested (e.g.,\n<b>-Wunknown-warning</b>),</big> GCC <big>emits a diagnostic\nstating that the option is not recognized. However, if the\n<b>-Wno-</b> form is used, the behavior is slightly\ndifferent: no diagnostic is produced for\n<b>-Wno-unknown-warning</b> unless other diagnostics are\nbeing produced. This allows the use of new <b>-Wno-</b>\noptions with old compilers, but if something goes wrong, the\ncompiler warns that an unrecognized option is\npresent.</big></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><big>The\neffectiveness of some warnings depends on optimizations also\nbeing enabled. For example <b>-Wsuggest-final-types</b> is\nmore effective with link-time optimization and\n<b>-Wmaybe-uninitialized</b> does not warn at all unless\noptimization is enabled. <b><br>\n-Wpedantic <br>\n-pedantic</b></big></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Issue all\nthe warnings demanded by strict</big> ISO C <big>and</big>\nISO C</big> ++; reject all programs that use forbidden\nextensions, and some other programs that do not follow</big>\nISO C <big>and</big> ISO C</big> ++ <big>.</big> For\n<small>ISOC,</small> followstheversionofthe\n<small>ISOC</small>\nstandardspecifiedbyany<b>-std</b>optionused.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Valid\n<small>ISOC</small> and <small>ISOC\n<small>++programsshouldcompileproperlywithorwithoutthis\noption(thoughararefewrequire<b>-ansi</b>ora<b>-std</b>optionspecifyingtherequired\nversionofISOC).However,withoutthisoption,certainGNUextensionsand\ntraditionalCandC++featuresaresupportedaswell.Withthisoption,theyare\nrejected.</small></small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small><small><b>-Wpedantic</b>doesnotcausewarningmessagesforuseofthealternatekeywords\nwhosenamesbeginandendwith<b>__</b>.Thisalternateformatcanalsobeusedto\ndisablewarningsfornon-ISO<b>__intN</b>types,i.e.<b>__intN__</b>.Pedanticwarnings\narealsodisabledintheexpressionthatfollows&quot;__extension__&quot;.However,\nonlysystemheaderfilesshouldusetheseescaperoutes;applicationprograms\nshouldavoidthem.</small></small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small><small>Someuserstrytouse<b>-Wpedantic</b>tocheckprogramsforstrictISOCconformance.\nTheysoonfindthatitdoesnotdoquitewhattheywant:itfindssomenon-ISO\npractices,butnotall---onlythoseforwhichISOC<i>requires</i>adiagnostic,and\nsomeothersforwhichdiagnosticshavebeenadded.</small></small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small><small>AfeaturetoreportanyfailuretoconformtoISOCmightbeusefulinsome\ninstances,butwouldrequireconsiderableadditionalworkandwouldbequite\ndifferentfrom<b>-Wpedantic</b>.Wedon&rsquo;thaveplanstosupportsuchafeatureinthe\nnearfuture.</small></small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small><small>Wherethestandardspecifiedwith<b>-std</b>representsaGNUextendeddialectofC,\nsuchas<b>gnu90</b>or<b>gnu99</b>,thereisacorresponding<i>basestandard</i>,theversionof\nISOConwhichtheGNUextendeddialectisbased.Warningsfrom<b>-Wpedantic</b>are\ngivenwheretheyarerequiredbythebasestandard.(Itdoesnotmakesensefor\nsuchwarningstobegivenonlyforfeaturesnotinthespecifiedGNUCdialect,\nsincebydefinitiontheGNUdialectsofCincludeallfeaturesthecompiler\nsupportswiththegivenoption,andtherewouldbenothingtowarnabout.)</small></small></p>\n\n\n<p style=\"margin-left:11%;\"><small><small><b>-pedantic-errors</b></small></small></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Give an error\nwhenever the <i>base standard</i> (see <b>-Wpedantic</b>)\nrequires a diagnostic, in some cases where there is\nundefined behavior at compile-time and in some other cases\nthat do not prevent compilation of programs that are valid\naccording to the standard. This is not equivalent to\n<b>-Werror=pedantic</b>, since there are errors enabled by\nthis option and not enabled by the latter and vice\nversa.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wall</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This enables all\nthe warnings about constructions that some users consider\nquestionable, and that are easy to avoid (or modify to\nprevent the warning), even in conjunction with macros. This\nalso enables some language-specific warnings described in\n<b>C</b></big> <b>++ <big>Dialect Options</big></b> <big>and\n<b>Objective-C and Objective-C</b></big> <b>++ <big>Dialect\nOptions</big></b><big>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-Wall</b>\nturns on the following warning flags:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-Waddress\n-Warray-bounds=1</b> (only with <b>-O2</b>)\n<b>-Warray-parameter=2</b> (C and Objective-C only)\n<b>-Wbool-compare -Wbool-operation -Wc++11-compat\n-Wc++14-compat -Wcatch-value</b> (C</big> ++ <big>and\nObjective-C</big> ++ <big>only) <b>-Wchar-subscripts\n-Wcomment -Wduplicate-decl-specifier</b> (C and Objective-C\nonly) <b>-Wenum-compare</b> (in C/ObjC; this is on by\ndefault in C</big> ++ <big>) <b>-Wformat -Wformat-overflow\n-Wformat-truncation -Wint-in-bool-context -Wimplicit</b> (C\nand Objective-C only) <b>-Wimplicit-int</b> (C and\nObjective-C only) <b>-Wimplicit-function-declaration</b> (C\nand Objective-C only) <b>-Winit-self</b> (only for C</big>\n++ <big>) <b>-Wlogical-not-parentheses -Wmain</b> (only for\nC/ObjC and unless <b>-ffreestanding</b>)\n<b>-Wmaybe-uninitialized -Wmemset-elt-size\n-Wmemset-transposed-args -Wmisleading-indentation</b> (only\nfor C/C</big> ++ <big>) <b>-Wmissing-attributes\n-Wmissing-braces</b> (only for C/ObjC)\n<b>-Wmultistatement-macros -Wnarrowing</b> (only for C</big>\n++ <big>) <b>-Wnonnull -Wnonnull-compare -Wopenmp-simd\n-Wparentheses -Wpessimizing-move</b> (only for C</big> ++\n<big>) <b>-Wpointer-sign -Wrange-loop-construct</b> (only\nfor C</big> ++ <big>) <b>-Wreorder -Wrestrict -Wreturn-type\n-Wsequence-point -Wsign-compare</b> (only in C</big> ++\n<big>) <b>-Wsizeof-array-div -Wsizeof-pointer-div\n-Wsizeof-pointer-memaccess -Wstrict-aliasing\n-Wstrict-overflow=1 -Wswitch -Wtautological-compare\n-Wtrigraphs -Wuninitialized -Wunknown-pragmas\n-Wunused-function -Wunused-label -Wunused-value\n-Wunused-variable -Wvla-parameter</b> (C and Objective-C\nonly) <b>-Wvolatile-register-var\n-Wzero-length-bounds</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat some warning flags are not implied by <b>-Wall</b>.\nSome of them warn about constructions that users generally\ndo not consider questionable, but which occasionally you\nmight wish to check for; others warn about constructions\nthat are necessary or hard to avoid in some cases, and there\nis no simple way to modify the code to suppress the warning.\nSome of them are enabled by <b>-Wextra</b> but many of them\nmust be enabled individually.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wextra</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This enables\nsome extra warning flags that are not enabled by\n<b>-Wall</b>. (This option used to be called <b>-W</b>. The\nolder name is still supported, but the newer name is more\ndescriptive.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-Wclobbered\n-Wcast-function-type -Wdeprecated-copy</b> (C</big> ++\n<big>only) <b>-Wempty-body -Wenum-conversion</b> (C only)\n<b>-Wignored-qualifiers -Wimplicit-fallthrough=3\n-Wmissing-field-initializers -Wmissing-parameter-type</b> (C\nonly) <b>-Wold-style-declaration</b> (C only)\n<b>-Woverride-init -Wsign-compare</b> (C only)\n<b>-Wstring-compare -Wredundant-move</b> (only for C</big>\n++ <big>) <b>-Wtype-limits -Wuninitialized\n-Wshift-negative-value</b> (in C</big> ++ <big>11 to C</big>\n++ <big>17 and in C99 and newer) <b>-Wunused-parameter</b>\n(only with <b>-Wunused</b> or <b>-Wall</b>)\n<b>-Wunused-but-set-parameter</b> (only with <b>-Wunused</b>\nor <b>-Wall</b>)</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noption <b>-Wextra</b> also prints warning messages for the\nfollowing cases:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>A pointer is compared against integer\nzero with &quot;&lt;&quot;, &quot;&lt;=&quot;,\n&quot;&gt;&quot;, or\n&quot;&gt;=&quot;.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>(C</big> ++ <big>only) An enumerator and\na non-enumerator both appear in a conditional\nexpression.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>(C</big> ++ <big>only) Ambiguous virtual\nbases.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>(C</big> ++ <big>only) Subscripting an\narray that has been declared\n&quot;register&quot;.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>(C</big> ++ <big>only) Taking the address\nof a variable that has been declared\n&quot;register&quot;.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>(C</big> ++ <big>only) A base class is\nnot initialized in the copy constructor of a derived\nclass.</big></big></big></p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wabi</b> (C,\nObjective-C, C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn about code\naffected by</big> ABI <big>changes. This includes code that\nmay not be compatible with the vendor-neutral C</big> ++\n<big>ABI <big>as well as the psABI for the particular\ntarget.</big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big>Since\nG++ now defaults to updating the</big> ABI <big>with each\nmajor release, normally <b>-Wabi</b> warns only about\nC</big> ++ <big>ABI <big>compatibility problems if there is\na check added later in a release series for an</big> ABI\n<big>issue discovered since the initial release.\n<b>-Wabi</b> warns about more things if an older</big> ABI\n<big>version is selected (with\n<b>-fabi-version=</b><i>n</i>).</big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><b>-Wabi</b>\ncan also be used with an explicit version number to warn\nabout C</big> ++ <big>ABI <big>compatibility with a\nparticular <b>-fabi-version</b> level, e.g. <b>-Wabi=2</b>\nto warn about changes relative to\n<b>-fabi-version=2</b>.</big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big>If\nan explicit version number is provided and\n<b>-fabi-compat-version</b> is not specified, the version\nnumber from this option is used for compatibility aliases.\nIf no explicit version number is provided with this option,\nbut <b>-fabi-compat-version</b> is specified, that version\nnumber is used for C</big> ++ <big>ABI\n<big>warnings.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Although\nan effort has been made to warn about all such cases, there\nare probably some cases that are not warned about, even\nthough G++ is generating incompatible code. There may also\nbe cases where warnings are emitted even though the code\nthat is generated is\ncompatible.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>You\nshould rewrite your code to avoid these warnings if you are\nconcerned about the fact that code generated by G++ may not\nbe binary compatible with code generated by other\ncompilers.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Known\nincompatibilities in <b>-fabi-version=2</b> (which was the\ndefault from</big> GCC 3.4 <big>to 4.9)\ninclude:</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>A template with a\nnon-type template parameter of reference type was mangled\nincorrectly:</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>extern\nint N; <br>\ntemplate &lt;int &amp;&gt; struct S {}; <br>\nvoid n (S&lt;N&gt;)\n{2}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwas fixed in\n<b>-fabi-version=3</b>.</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big>SIMD\n<big>vector types declared using &quot;__attribute\n((vector_size))&quot; were mangled in a non-standard way\nthat does not allow for overloading of functions taking\nvectors of different\nsizes.</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nmangling was changed in\n<b>-fabi-version=4</b>.</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>&quot;__attribute\n((const))&quot; and &quot;noreturn&quot; were mangled as\ntype qualifiers, and &quot;decltype&quot; of a plain\ndeclaration was folded\naway.</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>These\nmangling issues were fixed in\n<b>-fabi-version=5</b>.</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>Scoped\nenumerators passed as arguments to a variadic function are\npromoted like unscoped enumerators, causing\n&quot;va_arg&quot; to complain. On most targets this does\nnot actually affect the parameter passing</big> ABI, <big>as\nthere is no way to pass an argument smaller than\n&quot;int&quot;.</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>Also,\nthe</big> ABI <big>changed the mangling of template argument\npacks, &quot;const_cast&quot;, &quot;static_cast&quot;,\nprefix increment/decrement, and a class scope function used\nas a template\nargument.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>These\nissues were corrected in\n<b>-fabi-version=6</b>.</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>Lambdas\nin default argument scope were mangled incorrectly, and\nthe</big> ABI <big>changed the mangling of\n&quot;nullptr_t&quot;.</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>These\nissues were corrected in\n<b>-fabi-version=7</b>.</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>When\nmangling a function type with function-cv-qualifiers, the\nun-qualified function type was incorrectly treated as a\nsubstitution\ncandidate.</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwas fixed in <b>-fabi-version=8</b>, the default for</big>\nGCC 5.1.</big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>&quot;decltype(nullptr)&quot;\nincorrectly had an alignment of 1, leading to unaligned\naccesses. Note that this did not affect the</big> ABI\n<big>of a function with a &quot;nullptr_t&quot; parameter,\nas parameters have a minimum\nalignment.</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwas fixed in <b>-fabi-version=9</b>, the default for</big>\nGCC 5.2.</big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>Target-specific\nattributes that affect the identity of a type, such as ia32\ncalling conventions on a function type (stdcall, regparm,\netc.), did not affect the mangled name, leading to name\ncollisions when function pointers were used as template\narguments.</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwas fixed in <b>-fabi-version=10</b>, the default for</big>\nGCC 6.1.</big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\noption also enables warnings about psABI-related changes.\nThe known psABI changes at this point\ninclude:</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>For\nSysV/x86-64, unions with &quot;long double&quot; members are\npassed in memory as specified in psABI. Prior to</big> GCC\n4.4, <big>this was not the case. For\nexample:</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>union\nU { <br>\nlong double ld; <br>\nint i; <br>\n};</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>&quot;union\nU&quot; is now always passed in\nmemory.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wchar-subscripts</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif an array subscript has type &quot;char&quot;. This is a\ncommon cause of error, as programmers often forget that this\ntype is signed on some machines. This warning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-coverage-mismatch</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif feedback profiles do not match when using the\n<b>-fprofile-use</b> option. If a source file is changed\nbetween compiling with <b>-fprofile-generate</b> and with\n<b>-fprofile-use</b>, the files with the profile feedback\ncan fail to match the source file and</big> GCC <big>cannot\nuse the profile feedback information. By default, this\nwarning is enabled and is treated as an error.\n<b>-Wno-coverage-mismatch</b> can be used to disable the\nwarning or <b>-Wno-error=coverage-mismatch</b> can be used\nto disable the error. Disabling the error for this warning\ncan result in poorly optimized code and is useful only in\nthe case of very minor changes such as bug fixes to an\nexisting code-base. Completely disabling the warning is not\nrecommended.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-cpp</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>(C,\nObjective-C, C</big> ++ <big>, Objective-C</big> ++ <big>and\nFortran only) Suppress warning messages emitted by\n&quot;#warning&quot;\ndirectives.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wdouble-promotion</b>\n(C, C</big> ++ <big>, Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Give\na warning when a value of type &quot;float&quot; is\nimplicitly promoted to &quot;double&quot;. CPUs with a\n32-bit &quot;single-precision&quot; floating-point unit\nimplement &quot;float&quot; in hardware, but emulate\n&quot;double&quot; in software. On such a machine, doing\ncomputations using &quot;double&quot; values is much more\nexpensive because of the overhead required for software\nemulation.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>It\nis easy to accidentally do computations with\n&quot;double&quot; because floating-point literals are\nimplicitly of type &quot;double&quot;. For example,\nin:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>float\narea(float radius) <br>\n{ <br>\nreturn 3.14159 * radius * radius; <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>the\ncompiler performs the entire computation with\n&quot;double&quot; because the floating-point literal is a\n&quot;double&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wduplicate-decl-specifier</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif a declaration has duplicate &quot;const&quot;,\n&quot;volatile&quot;, &quot;restrict&quot; or\n&quot;_Atomic&quot; specifier. This warning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wformat\n<br>\n\n-Wformat=</b><i>n</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Check\ncalls to &quot;printf&quot; and &quot;scanf&quot;, etc., to\nmake sure that the arguments supplied have types appropriate\nto the format string specified, and that the conversions\nspecified in the format string make sense. This includes\nstandard functions, and others specified by format\nattributes, in the &quot;printf&quot;, &quot;scanf&quot;,\n&quot;strftime&quot; and &quot;strfmon&quot; (an X/Open\nextension, not in the C standard) families (or other\ntarget-specific families). Which functions are checked\nwithout format attributes having been specified depends on\nthe standard version selected, and such checks of functions\nwithout the attribute specified are disabled by\n<b>-ffreestanding</b> or\n<b>-fno-builtin</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nformats are checked against the format features supported\nby</big> GNU <big>libc version 2.2. These include all</big>\nISO C90 <big>and C99 features, as well as features from the\nSingle Unix Specification and some</big> BSD <big>and</big>\nGNU <big>extensions. Other library implementations may not\nsupport all these features;</big> GCC <big>does not support\nwarning about features that go beyond a particular\nlibrary&rsquo;s limitations. However, if <b>-Wpedantic</b>\nis used with <b>-Wformat</b>, warnings are given about\nformat features not in the selected standard version (but\nnot for &quot;strfmon&quot; formats, since those are not in\nany version of the C standard). <b><br>\n-Wformat=1 <br>\n-Wformat</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Option\n<b>-Wformat</b> is equivalent to <b>-Wformat=1</b>, and\n<b>-Wno-format</b> is equivalent to <b>-Wformat=0</b>. Since\n<b>-Wformat</b> also checks for null format arguments for\nseveral functions, <b>-Wformat</b> also implies\n<b>-Wnonnull</b>. Some aspects of this level of format\nchecking can be disabled by the options:\n<b>-Wno-format-contains-nul</b>,\n<b>-Wno-format-extra-args</b>, and\n<b>-Wno-format-zero-length</b>. <b>-Wformat</b> is enabled\nby\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wformat=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Enable\n<b>-Wformat</b> plus additional format checks. Currently\nequivalent to <b>-Wformat -Wformat-nonliteral\n-Wformat-security\n-Wformat-y2k</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-format-contains-nul</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>If\n<b>-Wformat</b> is specified, do not warn about format\nstrings that contain</big> NUL\n<big>bytes.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-format-extra-args</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>If\n<b>-Wformat</b> is specified, do not warn about excess\narguments to a &quot;printf&quot; or &quot;scanf&quot;\nformat function. The C standard specifies that such\narguments are\nignored.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Where\nthe unused arguments lie between used arguments that are\nspecified with <b>$</b> operand number specifications,\nnormally warnings are still given, since the implementation\ncould not know what type to pass to &quot;va_arg&quot; to\nskip the unused arguments. However, in the case of\n&quot;scanf&quot; formats, this option suppresses the\nwarning if the unused arguments are all pointers, since the\nSingle Unix Specification says that such unused arguments\nare allowed.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wformat-overflow\n<br>\n\n-Wformat-overflow=</b><i>level</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout calls to formatted input/output functions such as\n&quot;sprintf&quot; and &quot;vsprintf&quot; that might\noverflow the destination buffer. When the exact number of\nbytes written by a format directive cannot be determined at\ncompile-time it is estimated based on heuristics that depend\non the <i>level</i> argument and on optimization. While\nenabling optimization will in most cases improve the\naccuracy of the warning, it may also result in false\npositives. <b><br>\n-Wformat-overflow <br>\n\n-Wformat-overflow=1</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Level\n<i>1</i> of <b>-Wformat-overflow</b> enabled by\n<b>-Wformat</b> employs a conservative approach that warns\nonly about calls that most likely overflow the buffer. At\nthis level, numeric arguments to format directives with\nunknown values are assumed to have the value of one, and\nstrings of unknown length to be empty. Numeric arguments\nthat are known to be bounded to a subrange of their type, or\nstring arguments whose output is bounded either by their\ndirective&rsquo;s precision or by a finite set of string\nliterals, are assumed to take on the value within the range\nthat results in the most bytes on output. For example, the\ncall to &quot;sprintf&quot; below is diagnosed because even\nwith both <i>a</i> and <i>b</i> equal to zero, the\nterminating</big> NUL <big>character ('\\0') appended by the\nfunction to the destination buffer will be written past its\nend. Increasing the size of the buffer by a single byte is\nsufficient to avoid the warning, though it may not be\nsufficient to avoid the\noverflow.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nf (int a, int b) <br>\n{ <br>\nchar buf [13]; <br>\nsprintf (buf, &quot;a = %i, b = %i\\n&quot;, a, b); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wformat-overflow=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Level\n<i>2</i> warns also about calls that might overflow the\ndestination buffer given an argument of sufficient length or\nmagnitude. At level <i>2</i>, unknown numeric arguments are\nassumed to have the minimum representable value for signed\ntypes with a precision greater than 1, and the maximum\nrepresentable value otherwise. Unknown string arguments\nwhose length cannot be assumed to be bounded either by the\ndirective&rsquo;s precision, or by a finite set of string\nliterals they may evaluate to, or the character array they\nmay point to, are assumed to be 1 character\nlong.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>At\nlevel <i>2</i>, the call in the example above is again\ndiagnosed, but this time because with <i>a</i> equal to a\n32-bit &quot;INT_MIN&quot; the first %i directive will write\nsome of its digits beyond the end of the destination buffer.\nTo make the call safe regardless of the values of the two\nvariables, the size of the destination buffer must be\nincreased to at least 34 bytes.</big> GCC <big>includes the\nminimum size of the buffer in an informational note\nfollowing the\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>An\nalternative to increasing the size of the destination buffer\nis to constrain the range of formatted values. The maximum\nlength of string arguments can be bounded by specifying the\nprecision in the format directive. When numeric arguments of\nformat directives can be assumed to be bounded by less than\nthe precision of their type, choosing an appropriate length\nmodifier to the format specifier will reduce the required\nbuffer size. For example, if <i>a</i> and <i>b</i> in the\nexample above can be assumed to be within the precision of\nthe &quot;short int&quot; type then using either the %hi\nformat directive or casting the argument to\n&quot;short&quot; reduces the maximum required size of the\nbuffer to 24\nbytes.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nf (int a, int b) <br>\n{ <br>\nchar buf [23]; <br>\nsprintf (buf, &quot;a = %hi, b = %i\\n&quot;, a, (short)b);\n<br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-format-zero-length</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>If\n<b>-Wformat</b> is specified, do not warn about zero-length\nformats. The C standard specifies that zero-length formats\nare allowed.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wformat-nonliteral</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>If\n<b>-Wformat</b> is specified, also warn if the format string\nis not a string literal and so cannot be checked, unless the\nformat function takes its format arguments as a\n&quot;va_list&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wformat-security</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>If\n<b>-Wformat</b> is specified, also warn about uses of format\nfunctions that represent possible security problems. At\npresent, this warns about calls to &quot;printf&quot; and\n&quot;scanf&quot; functions where the format string is not a\nstring literal and there are no format arguments, as in\n&quot;printf (foo);&quot;. This may be a security hole if\nthe format string came from untrusted input and contains\n<b>%n</b>. (This is currently a subset of what\n<b>-Wformat-nonliteral</b> warns about, but in future\nwarnings may be added to <b>-Wformat-security</b> that are\nnot included in\n<b>-Wformat-nonliteral</b>.)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wformat-signedness</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>If\n<b>-Wformat</b> is specified, also warn if the format string\nrequires an unsigned argument and the argument is signed and\nvice versa.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wformat-truncation\n<br>\n\n-Wformat-truncation=</b><i>level</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout calls to formatted input/output functions such as\n&quot;snprintf&quot; and &quot;vsnprintf&quot; that might\nresult in output truncation. When the exact number of bytes\nwritten by a format directive cannot be determined at\ncompile-time it is estimated based on heuristics that depend\non the <i>level</i> argument and on optimization. While\nenabling optimization will in most cases improve the\naccuracy of the warning, it may also result in false\npositives. Except as noted otherwise, the option uses the\nsame logic <b>-Wformat-overflow</b>. <b><br>\n-Wformat-truncation <br>\n\n-Wformat-truncation=1</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Level\n<i>1</i> of <b>-Wformat-truncation</b> enabled by\n<b>-Wformat</b> employs a conservative approach that warns\nonly about calls to bounded functions whose return value is\nunused and that will most likely result in output\ntruncation.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wformat-truncation=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Level\n<i>2</i> warns also about calls to bounded functions whose\nreturn value is used and that might result in truncation\ngiven an argument of sufficient length or\nmagnitude.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wformat-y2k</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>If\n<b>-Wformat</b> is specified, also warn about\n&quot;strftime&quot; formats that may yield only a two-digit\nyear.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wnonnull</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout passing a null pointer for arguments marked as\nrequiring a non-null value by the &quot;nonnull&quot;\nfunction\nattribute.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Wnonnull</b>\nis included in <b>-Wall</b> and <b>-Wformat</b>. It can be\ndisabled with the <b>-Wno-nonnull</b>\noption.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wnonnull-compare</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen comparing an argument marked with the\n&quot;nonnull&quot; function attribute against null inside\nthe function.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Wnonnull-compare</b>\nis included in <b>-Wall</b>. It can be disabled with the\n<b>-Wno-nonnull-compare</b>\noption.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wnull-dereference</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif the compiler detects paths that trigger erroneous or\nundefined behavior due to dereferencing a null pointer. This\noption is only active when\n<b>-fdelete-null-pointer-checks</b> is active, which is\nenabled by optimizations in most targets. The precision of\nthe warnings depends on the optimization options\nused.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Winit-self</b>\n(C, C</big> ++ <big>, Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout uninitialized variables that are initialized with\nthemselves. Note this option can only be used with the\n<b>-Wuninitialized</b>\noption.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>For\nexample,</big> GCC <big>warns about &quot;i&quot; being\nuninitialized in the following snippet only when\n<b>-Winit-self</b> has been\nspecified:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>int\nf() <br>\n{ <br>\nint i = i; <br>\nreturn i; <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by <b>-Wall</b> in C</big> ++\n<big>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-implicit-int</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption controls warnings when a declaration does not specify\na type. This warning is enabled by default in C99 and later\ndialects of C, and also by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-implicit-function-declaration</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption controls warnings when a function is used before\nbeing declared. This warning is enabled by default in C99\nand later dialects of C, and also by <b>-Wall</b>. The\nwarning is made into an error by\n<b>-pedantic-errors</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wimplicit</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Same\nas <b>-Wimplicit-int</b> and\n<b>-Wimplicit-function-declaration</b>. This warning is\nenabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wimplicit-fallthrough</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wimplicit-fallthrough</b>\nis the same as <b>-Wimplicit-fallthrough=3</b> and\n<b>-Wno-implicit-fallthrough</b> is the same as\n<b>-Wimplicit-fallthrough=0</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wimplicit-fallthrough=</b><i>n</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen a switch case falls through. For\nexample:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>switch\n(cond) <br>\n{ <br>\ncase 1: <br>\na = 1; <br>\nbreak; <br>\ncase 2: <br>\na = 2; <br>\ncase 3: <br>\na = 3; <br>\nbreak; <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning does not warn when the last statement of a case\ncannot fall through, e.g. when there is a return statement\nor a call to function declared with the noreturn attribute.\n<b>-Wimplicit-fallthrough=</b> also takes into account\ncontrol flow statements, such as ifs, and only warns when\nappropriate.\nE.g.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>switch\n(cond) <br>\n{ <br>\ncase 1: <br>\nif (i &gt; 3) { <br>\nbar (5); <br>\nbreak; <br>\n} else if (i &lt; 1) { <br>\nbar (0); <br>\n} else <br>\nreturn; <br>\ndefault: <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Since\nthere are occasions where a switch case fall through is\ndesirable,</big> GCC <big>provides an attribute,\n&quot;__attribute__ ((fallthrough))&quot;, that is to be\nused along with a null statement to suppress this warning\nthat would normally\noccur:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>switch\n(cond) <br>\n{ <br>\ncase 1: <br>\nbar (0); <br>\n__attribute__ ((fallthrough)); <br>\ndefault: <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>C</big>\n++ <big>17 provides a standard way to suppress the\n<b>-Wimplicit-fallthrough</b> warning using\n&quot;[[fallthrough]];&quot; instead of the</big> GNU\n<big>attribute. In C</big> ++ <big>11 or C</big> ++ <big>14\nusers can use &quot;[[gnu::fallthrough]];&quot;, which is\na</big> GNU <big>extension. Instead of these attributes, it\nis also possible to add a fallthrough comment to silence the\nwarning. The whole body of the C or C</big> ++ <big>style\ncomment should match the given regular expressions listed\nbelow. The option argument <i>n</i> specifies what kind of\ncomments are accepted: <br>\n*&lt;<b>-Wimplicit-fallthrough=0</b> disables the warning\naltogether.&gt; <br>\n*&lt;<b>-Wimplicit-fallthrough=1</b> matches &quot;.*&quot;\nregular&gt;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>expression,\nany comment is used as fallthrough\ncomment.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>*&lt;<b>-Wimplicit-fallthrough=2</b>\ncase insensitively\nmatches&gt;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>&quot;.*falls?[\n\\t-]*thr(ough|u).*&quot; regular\nexpression.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>*&lt;<b>-Wimplicit-fallthrough=3</b>\ncase sensitively matches one of\nthe&gt;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>following\nregular expressions: <br>\n*&lt;&quot;-fallthrough&quot;&gt; <br>\n*&lt;&quot;@fallthrough@&quot;&gt; <br>\n*&lt;&quot;lint -fallthrough[ \\t]*&quot;&gt; <br>\n*&lt;&quot;[ \\t.!]*(ELSE,? |INTENTIONAL(LY)? )?FALL(S | <br>\n|-)?THR(OUGH|U)[ \\t.!]*(-[^\\n\\r]*)?&quot;&gt; <br>\n*&lt;&quot;[ \\t.!]*(Else,? |Intentional(ly)? )?Fall((s |\n<br>\n|-)[Tt]|t)hr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?&quot;&gt; <br>\n*&lt;&quot;[ \\t.!]*([Ee]lse,? |[Ii]ntentional(ly)? )?fall(s\n| <br>\n|-)?thr(ough|u)[\n\\t.!]*(-[^\\n\\r]*)?&quot;&gt;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>*&lt;<b>-Wimplicit-fallthrough=4</b>\ncase sensitively matches one of\nthe&gt;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>following\nregular expressions: <br>\n*&lt;&quot;-fallthrough&quot;&gt; <br>\n*&lt;&quot;@fallthrough@&quot;&gt; <br>\n*&lt;&quot;lint -fallthrough[ \\t]*&quot;&gt; <br>\n*&lt;&quot;[ \\t]*FALLTHR(OUGH|U)[\n\\t]*&quot;&gt;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>*&lt;<b>-Wimplicit-fallthrough=5</b>\ndoesn&rsquo;t recognize any comments\nas&gt;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>fallthrough\ncomments, only attributes disable the\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\ncomment needs to be followed after optional whitespace and\nother comments by &quot;case&quot; or &quot;default&quot;\nkeywords or by a user label that precedes some\n&quot;case&quot; or &quot;default&quot;\nlabel.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>switch\n(cond) <br>\n{ <br>\ncase 1: <br>\nbar (0); <br>\n/* FALLTHRU */ <br>\ndefault: <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\n<b>-Wimplicit-fallthrough=3</b> warning is enabled by\n<b>-Wextra</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-if-not-aligned</b>\n(C, C</big> ++ <big>, Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Control\nif warnings triggered by the &quot;warn_if_not_aligned&quot;\nattribute should be issued. These warnings are enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wignored-qualifiers</b>\n(C and C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif the return type of a function has a type qualifier such\nas &quot;const&quot;. For</big> ISO C <big>such a type\nqualifier has no effect, since the value returned by a\nfunction is not an lvalue. For C</big> ++ <big>, the warning\nis only emitted for scalar types or &quot;void&quot;.</big>\nISO C <big>prohibits qualified &quot;void&quot; return types\non function definitions, so such return types always receive\na warning even without this\noption.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is also enabled by\n<b>-Wextra</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-ignored-attributes</b>\n(C and C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption controls warnings when an attribute is ignored. This\nis different from the <b>-Wattributes</b> option in that it\nwarns whenever the compiler decides to drop an attribute,\nnot that the attribute is either unknown, used in a wrong\nplace, etc. This warning is enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wmain</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif the type of &quot;main&quot; is suspicious.\n&quot;main&quot; should be a function with external linkage,\nreturning int, taking either zero arguments, two, or three\narguments of appropriate types. This warning is enabled by\ndefault in C</big> ++ <big>and is enabled by either\n<b>-Wall</b> or\n<b>-Wpedantic</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wmisleading-indentation</b>\n(C and C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen the indentation of the code does not reflect the block\nstructure. Specifically, a warning is issued for\n&quot;if&quot;, &quot;else&quot;, &quot;while&quot;, and\n&quot;for&quot; clauses with a guarded statement that does\nnot use braces, followed by an unguarded statement with the\nsame\nindentation.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nthe following example, the call to &quot;bar&quot; is\nmisleadingly indented as if it were guarded by the\n&quot;if&quot;\nconditional.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>if\n(some_condition ()) <br>\nfoo (); <br>\nbar (); /* Gotcha: this is not guarded by the\n&quot;if&quot;.\n*/</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nthe case of mixed tabs and spaces, the warning uses the\n<b>-ftabstop=</b> option to determine if the statements line\nup (defaulting to\n8).</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nwarning is not issued for code involving multiline\npreprocessor logic such as the following\nexample.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>if\n(flagA) <br>\nfoo (0); <br>\n#if SOME_CONDITION_THAT_DOES_NOT_HOLD <br>\nif (flagB) <br>\n#endif <br>\nfoo (1);</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nwarning is not issued after a &quot;#line&quot; directive,\nsince this typically indicates autogenerated code, and no\nassumptions can be made about the layout of the file that\nthe directive\nreferences.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by <b>-Wall</b> in C and C</big> ++\n<big>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wmissing-attributes</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen a declaration of a function is missing one or more\nattributes that a related function is declared with and\nwhose absence may adversely affect the correctness or\nefficiency of generated code. For example, the warning is\nissued for declarations of aliases that use attributes to\nspecify less restrictive requirements than those of their\ntargets. This typically represents a potential optimization\nopportunity. By contrast, the <b>-Wattribute-alias=2</b>\noption controls warnings issued when the alias is more\nrestrictive than the target, which could lead to incorrect\ncode generation. Attributes considered include\n&quot;alloc_align&quot;, &quot;alloc_size&quot;,\n&quot;cold&quot;, &quot;const&quot;, &quot;hot&quot;,\n&quot;leaf&quot;, &quot;malloc&quot;, &quot;nonnull&quot;,\n&quot;noreturn&quot;, &quot;nothrow&quot;, &quot;pure&quot;,\n&quot;returns_nonnull&quot;, and\n&quot;returns_twice&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nC</big> ++ <big>, the warning is issued when an explicit\nspecialization of a primary template declared with attribute\n&quot;alloc_align&quot;, &quot;alloc_size&quot;,\n&quot;assume_aligned&quot;, &quot;format&quot;,\n&quot;format_arg&quot;, &quot;malloc&quot;, or\n&quot;nonnull&quot; is declared without it. Attributes\n&quot;deprecated&quot;, &quot;error&quot;, and\n&quot;warning&quot; suppress the\nwarning..</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>You\ncan use the &quot;copy&quot; attribute to apply the same set\nof attributes to a declaration as that on another\ndeclaration without explicitly enumerating the attributes.\nThis attribute can be applied to declarations of functions,\nvariables, or\ntypes.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Wmissing-attributes</b>\nis enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>For\nexample, since the declaration of the primary function\ntemplate below makes use of both attribute\n&quot;malloc&quot; and &quot;alloc_size&quot; the\ndeclaration of the explicit specialization of the template\nis diagnosed because it is missing one of the\nattributes.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>template\n&lt;class T&gt; <br>\nT* __attribute__ ((malloc, alloc_size (1))) <br>\nallocate (size_t); <br>\ntemplate &lt;&gt; <br>\nvoid* __attribute__ ((malloc)) // missing alloc_size <br>\nallocate&lt;void&gt;\n(size_t);</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wmissing-braces</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif an aggregate or union initializer is not fully bracketed.\nIn the following example, the initializer for &quot;a&quot;\nis not fully bracketed, but that for &quot;b&quot; is fully\nbracketed.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>int\na[2][2] = { 0, 1, 2, 3 }; <br>\nint b[2][2] = { { 0, 1 }, { 2, 3 }\n};</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wmissing-include-dirs</b>\n(C, C</big> ++ <big>, Objective-C and Objective-C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif a user-supplied include directory does not\nexist.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-missing-profile</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption controls warnings if feedback profiles are missing\nwhen using the <b>-fprofile-use</b> option. This option\ndiagnoses those cases where a new function or a new file is\nadded between compiling with <b>-fprofile-generate</b> and\nwith <b>-fprofile-use</b>, without regenerating the\nprofiles. In these cases, the profile feedback data files do\nnot contain any profile feedback information for the newly\nadded function or file respectively. Also, in the case when\nprofile count data (.gcda) files are removed,</big> GCC\n<big>cannot use any profile feedback information. In all\nthese cases, warnings are issued to inform you that a\nprofile generation step is due. Ignoring the warning can\nresult in poorly optimized code. <b>-Wno-missing-profile</b>\ncan be used to disable the warning, but this is not\nrecommended and should be done only when non-existent\nprofile data is\njustified.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-mismatched-dealloc</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nfor calls to deallocation functions with pointer arguments\nreturned from from allocations functions for which the\nformer isn&rsquo;t a suitable deallocator. A pair of\nfunctions can be associated as matching allocators and\ndeallocators by use of attribute &quot;malloc&quot;. Unless\ndisabled by the <b>-fno-builtin</b> option the standard\nfunctions &quot;calloc&quot;, &quot;malloc&quot;,\n&quot;realloc&quot;, and &quot;free&quot;, as well as the\ncorresponding forms of C</big> ++ <big>&quot;operator\nnew&quot; and &quot;operator delete&quot; are implicitly\nassociated as matching allocators and deallocators. In the\nfollowing example &quot;mydealloc&quot; is the deallocator\nfor pointers returned from\n&quot;myalloc&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nmydealloc (void*); <br>\n__attribute__ ((malloc (mydealloc, 1))) void* <br>\nmyalloc (size_t); <br>\nvoid f (void) <br>\n{ <br>\nvoid *p = myalloc (32); <br>\n// ...use p... <br>\nfree (p); // warning: not a matching deallocator for myalloc\n<br>\nmydealloc (p); // ok <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nC</big> ++ <big>, the related option\n<b>-Wmismatched-new-delete</b> diagnoses mismatches\ninvolving either &quot;operator new&quot; or &quot;operator\ndelete&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Option\n<b>-Wmismatched-dealloc</b> is enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wmultistatement-macros</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout unsafe multiple statement macros that appear to be\nguarded by a clause such as &quot;if&quot;,\n&quot;else&quot;, &quot;for&quot;, &quot;switch&quot;, or\n&quot;while&quot;, in which only the first statement is\nactually guarded after the macro is\nexpanded.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>For\nexample:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>#define\nDOIT x++; y++ <br>\nif (c) <br>\nDOIT;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>will\nincrement &quot;y&quot; unconditionally, not just when\n&quot;c&quot; holds. The can usually be fixed by wrapping\nthe macro in a do-while\nloop:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>#define\nDOIT do { x++; y++; } while (0) <br>\nif (c) <br>\nDOIT;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by <b>-Wall</b> in C and C</big> ++\n<big>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wparentheses</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif parentheses are omitted in certain contexts, such as when\nthere is an assignment in a context where a truth value is\nexpected, or when operators are nested whose precedence\npeople often get confused\nabout.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Also\nwarn if a comparison like &quot;x&lt;=y&lt;=z&quot; appears;\nthis is equivalent to &quot;(x&lt;=y ? 1 : 0) &lt;= z&quot;,\nwhich is a different interpretation from that of ordinary\nmathematical\nnotation.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Also\nwarn for dangerous uses of the</big> GNU <big>extension to\n&quot;?:&quot; with omitted middle operand. When the\ncondition in the &quot;?&quot;: operator is a boolean\nexpression, the omitted value is always 1. Often programmers\nexpect it to be a value computed inside the conditional\nexpression\ninstead.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>For\nC</big> ++ <big>this also warns for some cases of\nunnecessary parentheses in declarations, which can indicate\nan attempt at a function call instead of a\ndeclaration:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>{\n<br>\n// Declares a local variable called mymutex. <br>\nstd::unique_lock&lt;std::mutex&gt; (mymutex); <br>\n// User meant std::unique_lock&lt;std::mutex&gt; lock\n(mymutex); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wsequence-point</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout code that may have undefined semantics because of\nviolations of sequence point rules in the C and C</big> ++\n<big>standards.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nC and C</big> ++ <big>standards define the order in which\nexpressions in a C/C</big> ++ <big>program are evaluated in\nterms of <i>sequence points</i>, which represent a partial\nordering between the execution of parts of the program:\nthose executed before the sequence point, and those executed\nafter it. These occur after the evaluation of a full\nexpression (one which is not part of a larger expression),\nafter the evaluation of the first operand of a\n&quot;&amp;&amp;&quot;, &quot;||&quot;, &quot;? :&quot; or\n&quot;,&quot; (comma) operator, before a function is called\n(but after the evaluation of its arguments and the\nexpression denoting the called function), and in certain\nother places. Other than as expressed by the sequence point\nrules, the order of evaluation of subexpressions of an\nexpression is not specified. All these rules describe only a\npartial order rather than a total order, since, for example,\nif two functions are called within one expression with no\nsequence point between them, the order in which the\nfunctions are called is not specified. However, the\nstandards committee have ruled that function calls do not\noverlap.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>It\nis not specified when between sequence points modifications\nto the values of objects take effect. Programs whose\nbehavior depends on this have undefined behavior; the C and\nC</big> ++ <big>standards specify that &quot;Between the\nprevious and next sequence point an object shall have its\nstored value modified at most once by the evaluation of an\nexpression. Furthermore, the prior value shall be read only\nto determine the value to be stored.&quot;. If a program\nbreaks these rules, the results on any particular\nimplementation are entirely\nunpredictable.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Examples\nof code with undefined behavior are &quot;a = a++;&quot;,\n&quot;a[n] = b[n++]&quot; and &quot;a[i++] = i;&quot;. Some\nmore complicated cases are not diagnosed by this option, and\nit may give an occasional false positive result, but in\ngeneral it has been found fairly effective at detecting this\nsort of problem in\nprograms.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nC</big> ++ <big>17 standard will define the order of\nevaluation of operands in more cases: in particular it\nrequires that the right-hand side of an assignment be\nevaluated before the left-hand side, so the above examples\nare no longer undefined. But this option will still warn\nabout them, to help people avoid writing code that is\nundefined in C and earlier revisions of C</big> ++\n<big>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nstandard is worded confusingly, therefore there is some\ndebate over the precise meaning of the sequence point rules\nin subtle cases. Links to discussions of the problem,\nincluding proposed formal definitions, may be found on\nthe</big> GCC <big>readings page, at\n&lt;<b>http://gcc.gnu.org/readings.html</b>&gt;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by <b>-Wall</b> for C and C</big> ++\n<big>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-return-local-addr</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn about returning a pointer (or in C</big> ++ <big>,\na reference) to a variable that goes out of scope after the\nfunction\nreturns.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wreturn-type</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a function is defined with a return type that\ndefaults to &quot;int&quot;. Also warn about any\n&quot;return&quot; statement with no return value in a\nfunction whose return type is not &quot;void&quot; (falling\noff the end of the function body is considered returning\nwithout a\nvalue).</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>For\nC only, warn about a &quot;return&quot; statement with an\nexpression in a function whose return type is\n&quot;void&quot;, unless the expression type is also\n&quot;void&quot;. As a</big> GNU <big>extension, the latter\ncase is accepted without a warning unless <b>-Wpedantic</b>\nis used. Attempting to use the return value of a\nnon-&quot;void&quot; function other than &quot;main&quot;\nthat flows off the end by reaching the closing curly brace\nthat terminates the function is\nundefined.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Unlike\nin C, in C</big> ++ <big>, flowing off the end of a\nnon-&quot;void&quot; function other than &quot;main&quot;\nresults in undefined behavior even when the value of the\nfunction is not\nused.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by default in C</big> ++ <big>and by\n<b>-Wall</b>\notherwise.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-shift-count-negative</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Controls\nwarnings if a shift count is negative. This warning is\nenabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-shift-count-overflow</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Controls\nwarnings if a shift count is greater than or equal to the\nbit width of the type. This warning is enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wshift-negative-value</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif left shifting a negative value. This warning is enabled\nby <b>-Wextra</b> in C99 (and newer) and C</big> ++ <big>11\nto C</big> ++ <big>17\nmodes.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-shift-overflow\n<br>\n\n-Wshift-overflow=</b><i>n</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>These\noptions control warnings about left shift overflows. <b><br>\n\n-Wshift-overflow=1</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>This\nis the warning level of <b>-Wshift-overflow</b> and is\nenabled by default in C99 and C</big> ++ <big>11 modes (and\nnewer). This warning level does not warn about left-shifting\n1 into the sign bit. (However, in C, such an overflow is\nstill rejected in contexts where an integer constant\nexpression is required.) No warning is emitted in C</big> ++\n<big>20 mode (and newer), as signed left shifts always\nwrap.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wshift-overflow=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>This\nwarning level also warns about left-shifting 1 into the sign\nbit, unless C</big> ++ <big>14 mode (or newer) is\nactive.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wswitch</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a &quot;switch&quot; statement has an index of\nenumerated type and lacks a &quot;case&quot; for one or more\nof the named codes of that enumeration. (The presence of a\n&quot;default&quot; label prevents this warning.)\n&quot;case&quot; labels outside the enumeration range also\nprovoke warnings when this option is used (even if there is\na &quot;default&quot; label). This warning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wswitch-default</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a &quot;switch&quot; statement does not have a\n&quot;default&quot;\ncase.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wswitch-enum</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a &quot;switch&quot; statement has an index of\nenumerated type and lacks a &quot;case&quot; for one or more\nof the named codes of that enumeration. &quot;case&quot;\nlabels outside the enumeration range also provoke warnings\nwhen this option is used. The only difference between\n<b>-Wswitch</b> and this option is that this option gives a\nwarning about an omitted enumeration code even if there is a\n&quot;default&quot;\nlabel.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-switch-bool</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn when a &quot;switch&quot; statement has an index of\nboolean type and the case values are outside the range of a\nboolean type. It is possible to suppress this warning by\ncasting the controlling expression to a type other than\n&quot;bool&quot;. For\nexample:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>switch\n((int) (a == 4)) <br>\n{ <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by default for C and C</big> ++\n<big>programs.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-switch-outside-range</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption controls warnings when a &quot;switch&quot; case has\na value that is outside of its respective type range. This\nwarning is enabled by default for C and C</big> ++\n<big>programs.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-switch-unreachable</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn when a &quot;switch&quot; statement contains\nstatements between the controlling expression and the first\ncase label, which will never be executed. For\nexample:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>switch\n(cond) <br>\n{ <br>\ni = 15; <br>\n... <br>\ncase 5: <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Wswitch-unreachable</b>\ndoes not warn if the statement between the controlling\nexpression and the first case label is just a\ndeclaration:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>switch\n(cond) <br>\n{ <br>\nint i; <br>\n... <br>\ncase 5: <br>\ni = 5; <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by default for C and C</big> ++\n<big>programs.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wsync-nand</b>\n(C and C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen &quot;__sync_fetch_and_nand&quot; and\n&quot;__sync_nand_and_fetch&quot; built-in functions are\nused. These functions changed semantics in</big> GCC\n4.4.</big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><b><big>-Wunused-but-set-parameter</big></b></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a function parameter is assigned to, but otherwise\nunused (aside from its\ndeclaration).</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>To\nsuppress this warning use the &quot;unused&quot;\nattribute.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is also enabled by <b>-Wunused</b> together with\n<b>-Wextra</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-but-set-variable</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a local variable is assigned to, but otherwise\nunused (aside from its declaration). This warning is enabled\nby\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>To\nsuppress this warning use the &quot;unused&quot;\nattribute.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is also enabled by <b>-Wunused</b>, which is enabled\nby\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-function</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a static function is declared but not defined or a\nnon-inline static function is unused. This warning is\nenabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-label</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a label is declared but not used. This warning is\nenabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>To\nsuppress this warning use the &quot;unused&quot;\nattribute.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-local-typedefs</b>\n(C, Objective-C, C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen a typedef locally defined in a function is not used.\nThis warning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-parameter</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a function parameter is unused aside from its\ndeclaration.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>To\nsuppress this warning use the &quot;unused&quot;\nattribute.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-unused-result</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn if a caller of a function marked with attribute\n&quot;warn_unused_result&quot; does not use its return\nvalue. The default is\n<b>-Wunused-result</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-variable</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a local or static variable is unused aside from its\ndeclaration. This option implies\n<b>-Wunused-const-variable=1</b> for C, but not for C</big>\n++ <big>. This warning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>To\nsuppress this warning use the &quot;unused&quot;\nattribute.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-const-variable\n<br>\n\n-Wunused-const-variable=</b><i>n</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a constant static variable is unused aside from its\ndeclaration. <b>-Wunused-const-variable=1</b> is enabled by\n<b>-Wunused-variable</b> for C, but not for C</big> ++\n<big>. In C this declares variable storage, but in C</big>\n++ <big>this is not an error since const variables take the\nplace of\n&quot;#define&quot;s.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>To\nsuppress this warning use the &quot;unused&quot; attribute.\n<b><br>\n\n-Wunused-const-variable=1</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>This\nis the warning level that is enabled by\n<b>-Wunused-variable</b> for C. It warns only about unused\nstatic const variables defined in the main compilation unit,\nbut not about static const variables declared in any header\nincluded.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wunused-const-variable=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>This\nwarning level also warns for unused constant static\nvariables in headers (excluding system headers). This is the\nwarning level of <b>-Wunused-const-variable</b> and must be\nexplicitly requested since in C</big> ++ <big>this\nisn&rsquo;t an error and in C it might be harder to clean up\nall headers\nincluded.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-value</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a statement computes a result that is explicitly\nnot used. To suppress this warning cast the unused\nexpression to &quot;void&quot;. This includes an\nexpression-statement or the left-hand side of a comma\nexpression that contains no side effects. For example, an\nexpression such as &quot;x[i,j]&quot; causes a warning,\nwhile &quot;x[(void)i,j]&quot; does\nnot.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>All\nthe above <b>-Wunused</b> options\ncombined.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\norder to get a warning about an unused function parameter,\nyou must either specify <b>-Wextra -Wunused</b> (note that\n<b>-Wall</b> implies <b>-Wunused</b>), or separately specify\n<b>-Wunused-parameter</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wuninitialized</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif an object with automatic or allocated storage duration is\nused without having been initialized. In C</big> ++ <big>,\nalso warn if a non-static reference or non-static\n&quot;const&quot; member appears in a class without\nconstructors.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\naddition, passing a pointer (or in C</big> ++ <big>, a\nreference) to an uninitialized object to a\n&quot;const&quot;-qualified argument of a built-in function\nknown to read the object is also diagnosed by this warning.\n(<b>-Wmaybe-uninitialized</b> is issued for ordinary\nfunctions.)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>If\nyou want to warn about code that uses the uninitialized\nvalue of the variable in its own initializer, use the\n<b>-Winit-self</b>\noption.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>These\nwarnings occur for individual uninitialized elements of\nstructure, union or array variables as well as for variables\nthat are uninitialized as a whole. They do not occur for\nvariables or elements declared &quot;volatile&quot;. Because\nthese warnings depend on optimization, the exact variables\nor elements for which there are warnings depend on the\nprecise optimization options and version of</big> GCC\n<big>used.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Note\nthat there may be no warning about a variable that is used\nonly to compute a value that itself is never used, because\nsuch computations may be deleted by data flow analysis\nbefore the warnings are\nprinted.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-invalid-memory-model</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption controls warnings for invocations of <b>__atomic\nBuiltins</b>, <b>__sync Builtins</b>, and the C11 atomic\ngeneric functions with a memory consistency argument that is\neither invalid for the operation or outside the range of\nvalues of the &quot;memory_order&quot; enumeration. For\nexample, since the &quot;__atomic_store&quot; and\n&quot;__atomic_store_n&quot; built-ins are only defined for\nthe relaxed, release, and sequentially consistent memory\norders the following code is\ndiagnosed:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nstore (int *i) <br>\n{ <br>\n__atomic_store_n (i, 0, memory_order_consume); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Winvalid-memory-model</b>\nis enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wmaybe-uninitialized</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>For\nan object with automatic or allocated storage duration, if\nthere exists a path from the function entry to a use of the\nobject that is initialized, but there exist some other paths\nfor which the object is not initialized, the compiler emits\na warning if it cannot prove the uninitialized paths are not\nexecuted at run\ntime.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\naddition, passing a pointer (or in C</big> ++ <big>, a\nreference) to an uninitialized object to a\n&quot;const&quot;-qualified function argument is also\ndiagnosed by this warning. (<b>-Wuninitialized</b> is issued\nfor built-in functions known to read the object.) Annotating\nthe function with attribute &quot;access (none)&quot;\nindicates that the argument isn&rsquo;t used to access the\nobject and avoids the\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>These\nwarnings are only possible in optimizing compilation,\nbecause otherwise</big> GCC <big>does not keep track of the\nstate of\nvariables.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>These\nwarnings are made optional because</big> GCC <big>may not be\nable to determine when the code is correct in spite of\nappearing to have an error. Here is one example of how this\ncan happen:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>{\n<br>\nint x; <br>\nswitch (y) <br>\n{ <br>\ncase 1: x = 1; <br>\nbreak; <br>\ncase 2: x = 4; <br>\nbreak; <br>\ncase 3: x = 5; <br>\n} <br>\nfoo (x); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>If\nthe value of &quot;y&quot; is always 1, 2 or 3, then\n&quot;x&quot; is always initialized, but</big> GCC\n<big>doesn&rsquo;t know this. To suppress the warning, you\nneed to provide a default case with <b>assert</b>(0) or\nsimilar code.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\noption also warns when a non-volatile automatic variable\nmight be changed by a call to &quot;longjmp&quot;. The\ncompiler sees only the calls to &quot;setjmp&quot;. It\ncannot know where &quot;longjmp&quot; will be called; in\nfact, a signal handler could call it at any point in the\ncode. As a result, you may get a warning even when there is\nin fact no problem because &quot;longjmp&quot; cannot in\nfact be called at the place that would cause a\nproblem.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Some\nspurious warnings can be avoided if you declare all the\nfunctions you use that never return as\n&quot;noreturn&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by <b>-Wall</b> or\n<b>-Wextra</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunknown-pragmas</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen a &quot;#pragma&quot; directive is encountered that is\nnot understood by</big> GCC. <big>If this command-line\noption is used, warnings are even issued for unknown pragmas\nin system header files. This is not the case if the warnings\nare only enabled by the <b>-Wall</b> command-line\noption.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-pragmas</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn about misuses of pragmas, such as incorrect\nparameters, invalid syntax, or conflicts between pragmas.\nSee also\n<b>-Wunknown-pragmas</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-prio-ctor-dtor</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn if a priority from 0 to 100 is used for constructor\nor destructor. The use of constructor and destructor\nattributes allow you to assign a priority to the\nconstructor/destructor to control its order of execution\nbefore &quot;main&quot; is called or after it returns. The\npriority values must be greater than 100 as the compiler\nreserves priority values between 0--100 for the\nimplementation.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wstrict-aliasing</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption is only active when <b>-fstrict-aliasing</b> is\nactive. It warns about code that might break the strict\naliasing rules that the compiler is using for optimization.\nThe warning does not catch all cases, but does attempt to\ncatch the more common pitfalls. It is included in\n<b>-Wall</b>. It is equivalent to\n<b>-Wstrict-aliasing=3</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wstrict-aliasing=n</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption is only active when <b>-fstrict-aliasing</b> is\nactive. It warns about code that might break the strict\naliasing rules that the compiler is using for optimization.\nHigher levels correspond to higher accuracy (fewer false\npositives). Higher levels also correspond to more effort,\nsimilar to the way <b>-O</b> works. <b>-Wstrict-aliasing</b>\nis equivalent to\n<b>-Wstrict-aliasing=3</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Level\n1: Most aggressive, quick, least accurate. Possibly useful\nwhen higher levels do not warn but <b>-fstrict-aliasing</b>\nstill breaks the code, as it has very few false negatives.\nHowever, it has many false positives. Warns for all pointer\nconversions between possibly incompatible types, even if\nnever dereferenced. Runs in the front end\nonly.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Level\n2: Aggressive, quick, not too precise. May still have many\nfalse positives (not as many as level 1 though), and few\nfalse negatives (but possibly more than level 1). Unlike\nlevel 1, it only warns when an address is taken. Warns about\nincomplete types. Runs in the front end\nonly.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Level\n3 (default for <b>-Wstrict-aliasing</b>): Should have very\nfew false positives and few false negatives. Slightly slower\nthan levels 1 or 2 when optimization is enabled. Takes care\nof the common pun+dereference pattern in the front end:\n&quot;*(int*)&amp;some_float&quot;. If optimization is\nenabled, it also runs in the back end, where it deals with\nmultiple statement cases using flow-sensitive points-to\ninformation. Only warns when the converted pointer is\ndereferenced. Does not warn about incomplete\ntypes.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wstrict-overflow\n<br>\n\n-Wstrict-overflow=</b><i>n</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption is only active when signed overflow is undefined. It\nwarns about cases where the compiler optimizes based on the\nassumption that signed overflow does not occur. Note that it\ndoes not warn about all cases where the code might overflow:\nit only warns about cases where the compiler implements some\noptimization. Thus this warning depends on the optimization\nlevel.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>An\noptimization that assumes that signed overflow does not\noccur is perfectly safe if the values of the variables\ninvolved are such that overflow never does, in fact, occur.\nTherefore this warning can easily give a false positive: a\nwarning about code that is not actually a problem. To help\nfocus on important issues, several warning levels are\ndefined. No warnings are issued for the use of undefined\nsigned overflow when estimating how many iterations a loop\nrequires, in particular when determining whether a loop will\nbe executed at all. <b><br>\n\n-Wstrict-overflow=1</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Warn\nabout cases that are both questionable and easy to avoid.\nFor example the compiler simplifies &quot;x + 1 &gt; x&quot;\nto 1. This level of <b>-Wstrict-overflow</b> is enabled by\n<b>-Wall</b>; higher levels are not, and must be explicitly\nrequested.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wstrict-overflow=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Also\nwarn about other cases where a comparison is simplified to a\nconstant. For example: &quot;abs (x) &gt;= 0&quot;. This can\nonly be simplified when signed integer overflow is\nundefined, because &quot;abs (INT_MIN)&quot; overflows to\n&quot;INT_MIN&quot;, which is less than zero.\n<b>-Wstrict-overflow</b> (with no level) is the same as\n<b>-Wstrict-overflow=2</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wstrict-overflow=3</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Also\nwarn about other cases where a comparison is simplified. For\nexample: &quot;x + 1 &gt; 1&quot; is simplified to &quot;x\n&gt; 0&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wstrict-overflow=4</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Also\nwarn about other simplifications not covered by the above\ncases. For example: &quot;(x * 10) / 5&quot; is simplified\nto &quot;x *\n2&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wstrict-overflow=5</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Also\nwarn about cases where the compiler reduces the magnitude of\na constant involved in a comparison. For example: &quot;x +\n2 &gt; y&quot; is simplified to &quot;x + 1 &gt;= y&quot;.\nThis is reported only at the highest warning level because\nthis simplification applies to many comparisons, so this\nwarning level gives a very large number of false\npositives.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wstring-compare</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nfor calls to &quot;strcmp&quot; and &quot;strncmp&quot;\nwhose result is determined to be either zero or non-zero in\ntests for such equality owing to the length of one argument\nbeing greater than the size of the array the other argument\nis stored in (or the bound in the case of\n&quot;strncmp&quot;). Such calls could be mistakes. For\nexample, the call to &quot;strcmp&quot; below is diagnosed\nbecause its result is necessarily non-zero irrespective of\nthe contents of the array\n&quot;a&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>extern\nchar a[4]; <br>\nvoid f (char *d) <br>\n{ <br>\nstrcpy (d, &quot;string&quot;); <br>\n... <br>\nif (0 == strcmp (a, d)) // cannot be true <br>\nputs (&quot;a and d are the same&quot;); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Wstring-compare</b>\nis enabled by\n<b>-Wextra</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-stringop-overflow\n<br>\n-Wstringop-overflow <br>\n\n-Wstringop-overflow=</b><i>type</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nfor calls to string manipulation functions such as\n&quot;memcpy&quot; and &quot;strcpy&quot; that are\ndetermined to overflow the destination buffer. The optional\nargument is one greater than the type of Object Size\nChecking to perform to determine the size of the\ndestination. The argument is meaningful only for functions\nthat operate on character arrays but not for raw memory\nfunctions like &quot;memcpy&quot; which always make use of\nObject Size type-0. The option also warns for calls that\nspecify a size in excess of the largest possible object or\nat most &quot;SIZE_MAX / 2&quot; bytes. The option produces\nthe best results with optimization enabled but can detect a\nsmall subset of simple buffer overflows even without\noptimization in calls to the</big> GCC <big>built-in\nfunctions like &quot;__builtin_memcpy&quot; that correspond\nto the standard functions. In any case, the option warns\nabout just a subset of buffer overflows detected by the\ncorresponding overflow checking built-ins. For example, the\noption issues a warning for the &quot;strcpy&quot; call\nbelow because it copies at least 5 characters (the string\n&quot;blue&quot; including the terminating</big> NUL <big>)\ninto the buffer of size\n4.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>enum\nColor { blue, purple, yellow }; <br>\nconst char* f (enum Color clr) <br>\n{ <br>\nstatic char buf [4]; <br>\nconst char *str; <br>\nswitch (clr) <br>\n{ <br>\ncase blue: str = &quot;blue&quot;; break; <br>\ncase purple: str = &quot;purple&quot;; break; <br>\ncase yellow: str = &quot;yellow&quot;; break; <br>\n} <br>\nreturn strcpy (buf, str); // warning here <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Option\n<b>-Wstringop-overflow=2</b> is enabled by default. <b><br>\n-Wstringop-overflow <br>\n\n-Wstringop-overflow=1</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>The\n<b>-Wstringop-overflow=1</b> option uses type-zero Object\nSize Checking to determine the sizes of destination objects.\nAt this setting the option does not warn for writes past the\nend of subobjects of larger objects accessed by pointers\nunless the size of the largest surrounding object is known.\nWhen the destination may be one of several objects it is\nassumed to be the largest one of them. On Linux systems,\nwhen optimization is enabled at this setting the option\nwarns for the same code as when the\n&quot;_FORTIFY_SOURCE&quot; macro is defined to a non-zero\nvalue.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wstringop-overflow=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>The\n<b>-Wstringop-overflow=2</b> option uses type-one Object\nSize Checking to determine the sizes of destination objects.\nAt this setting the option warns about overflows when\nwriting to members of the largest complete objects whose\nexact size is known. However, it does not warn for excessive\nwrites to the same members of unknown objects referenced by\npointers since they may point to arrays containing unknown\nnumbers of elements. This is the default setting of the\noption.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wstringop-overflow=3</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>The\n<b>-Wstringop-overflow=3</b> option uses type-two Object\nSize Checking to determine the sizes of destination objects.\nAt this setting the option warns about overflowing the\nsmallest object or data member. This is the most restrictive\nsetting of the option that may result in warnings for safe\ncode.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wstringop-overflow=4</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>The\n<b>-Wstringop-overflow=4</b> option uses type-three Object\nSize Checking to determine the sizes of destination objects.\nAt this setting the option warns about overflowing any data\nmembers, and when the destination is one of several objects\nit uses the size of the largest of them to decide whether to\nissue a warning. Similarly to <b>-Wstringop-overflow=3</b>\nthis setting of the option may result in warnings for benign\ncode.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-stringop-overread</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nfor calls to string manipulation functions such as\n&quot;memchr&quot;, or &quot;strcpy&quot; that are\ndetermined to read past the end of the source\nsequence.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Option\n<b>-Wstringop-overread</b> is enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-stringop-truncation</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn for calls to bounded string manipulation functions\nsuch as &quot;strncat&quot;, &quot;strncpy&quot;, and\n&quot;stpncpy&quot; that may either truncate the copied\nstring or leave the destination\nunchanged.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nthe following example, the call to &quot;strncat&quot;\nspecifies a bound that is less than the length of the source\nstring. As a result, the copy of the source will be\ntruncated and so the call is diagnosed. To avoid the warning\nuse &quot;bufsize - strlen (buf) - 1)&quot; as the\nbound.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nappend (char *buf, size_t bufsize) <br>\n{ <br>\nstrncat (buf, &quot;.txt&quot;, 3); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>As\nanother example, the following call to &quot;strncpy&quot;\nresults in copying to &quot;d&quot; just the characters\npreceding the terminating</big> NUL, <big>without appending\nthe</big> NUL <big>to the end. Assuming the result of\n&quot;strncpy&quot; is necessarily a NUL-terminated string\nis a common mistake, and so the call is diagnosed. To avoid\nthe warning when the result is not expected to be\nNUL-terminated, call &quot;memcpy&quot;\ninstead.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\ncopy (char *d, const char *s) <br>\n{ <br>\nstrncpy (d, s, strlen (s)); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nthe following example, the call to &quot;strncpy&quot;\nspecifies the size of the destination buffer as the bound.\nIf the length of the source string is equal to or greater\nthan this size the result of the copy will not be\nNUL-terminated. Therefore, the call is also diagnosed. To\navoid the warning, specify &quot;sizeof buf - 1&quot; as the\nbound and set the last element of the buffer to\n&quot;NUL&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\ncopy (const char *s) <br>\n{ <br>\nchar buf[80]; <br>\nstrncpy (buf, s, sizeof buf); <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nsituations where a character array is intended to store a\nsequence of bytes with no terminating &quot;NUL&quot; such\nan array may be annotated with attribute\n&quot;nonstring&quot; to avoid this warning. Such arrays,\nhowever, are not suitable arguments to functions that expect\n&quot;NUL&quot;-terminated strings. To help detect\naccidental misuses of such arrays</big> GCC <big>issues\nwarnings unless it can prove that the use is\nsafe.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wsuggest-attribute=</b>[<b>pure</b>|<b>const</b>|<b>noreturn</b>|<b>format</b>|<b>cold</b>|<b>malloc</b>]</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nfor cases where adding an attribute may be beneficial. The\nattributes currently supported are listed below. <b><br>\n-Wsuggest-attribute=pure <br>\n-Wsuggest-attribute=const <br>\n-Wsuggest-attribute=noreturn <br>\n-Wmissing-noreturn <br>\n\n-Wsuggest-attribute=malloc</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Warn\nabout functions that might be candidates for attributes\n&quot;pure&quot;, &quot;const&quot; or &quot;noreturn&quot;\nor &quot;malloc&quot;. The compiler only warns for functions\nvisible in other compilation units or (in the case of\n&quot;pure&quot; and &quot;const&quot;) if it cannot prove\nthat the function returns normally. A function returns\nnormally if it doesn&rsquo;t contain an infinite loop or\nreturn abnormally by throwing, calling &quot;abort&quot; or\ntrapping. This analysis requires option\n<b>-fipa-pure-const</b>, which is enabled by default at\n<b>-O</b> and higher. Higher optimization levels improve the\naccuracy of the\nanalysis.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wsuggest-attribute=format\n<br>\n\n-Wmissing-format-attribute</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Warn\nabout function pointers that might be candidates for\n&quot;format&quot; attributes. Note these are only possible\ncandidates, not absolute ones.</big> GCC <big>guesses that\nfunction pointers with &quot;format&quot; attributes that\nare used in assignment, initialization, parameter passing or\nreturn statements should have a corresponding\n&quot;format&quot; attribute in the resulting type. I.e. the\nleft-hand side of the assignment or initialization, the type\nof the parameter variable, or the return type of the\ncontaining function respectively should also have a\n&quot;format&quot; attribute to avoid the\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big>GCC\n<big>also warns about function definitions that might be\ncandidates for &quot;format&quot; attributes. Again, these\nare only possible candidates.</big> GCC <big>guesses that\n&quot;format&quot; attributes might be appropriate for any\nfunction that calls a function like &quot;vprintf&quot; or\n&quot;vscanf&quot;, but this might not always be the case,\nand some functions for which &quot;format&quot; attributes\nare appropriate may not be\ndetected.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wsuggest-attribute=cold</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>Warn\nabout functions that might be candidates for\n&quot;cold&quot; attribute. This is based on static\ndetection and generally only warns about functions which\nalways leads to a call to another &quot;cold&quot; function\nsuch as wrappers of C</big> ++ <big>&quot;throw&quot; or\nfatal error reporting functions leading to\n&quot;abort&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Walloc-zero</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout calls to allocation functions decorated with attribute\n&quot;alloc_size&quot; that specify zero bytes, including\nthose to the built-in forms of the functions\n&quot;aligned_alloc&quot;, &quot;alloca&quot;,\n&quot;calloc&quot;, &quot;malloc&quot;, and\n&quot;realloc&quot;. Because the behavior of these functions\nwhen called with a zero size differs among implementations\n(and in the case of &quot;realloc&quot; has been deprecated)\nrelying on it may result in subtle portability bugs and\nshould be\navoided.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Walloc-size-larger-than=</b><i>byte-size</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout calls to functions decorated with attribute\n&quot;alloc_size&quot; that attempt to allocate objects\nlarger than the specified number of bytes, or where the\nresult of the size computation in an integer type with\ninfinite precision would exceed the value of</big>\n<b>PTRDIFF_MAX</b> <big>on the target.\n<b>-Walloc-size-larger-than=</b></big> <b>PTRDIFF_MAX</b>\n<big>is enabled by default. Warnings controlled by the\noption can be disabled either by specifying <i>byte-size</i>\nof</big> <b>SIZE_MAX</b> <big>or more or by\n<b>-Wno-alloc-size-larger-than</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-alloc-size-larger-than</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Disable\n<b>-Walloc-size-larger-than=</b> warnings. The option is\nequivalent to <b>-Walloc-size-larger-than=</b></big>\n<b>SIZE_MAX</b> <big>or\nlarger.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Walloca</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption warns on all uses of &quot;alloca&quot; in the\nsource.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Walloca-larger-than=</b><i>byte-size</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption warns on calls to &quot;alloca&quot; with an integer\nargument whose value is either zero, or that is not bounded\nby a controlling predicate that limits its value to at most\n<i>byte-size</i>. It also warns for calls to\n&quot;alloca&quot; where the bound value is unknown.\nArguments of non-integer types are considered unbounded even\nif they appear to be constrained to the expected\nrange.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>For\nexample, a bounded case of &quot;alloca&quot; could\nbe:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nfunc (size_t n) <br>\n{ <br>\nvoid *p; <br>\nif (n &lt;= 1000) <br>\np = alloca (n); <br>\nelse <br>\np = malloc (n); <br>\nf (p); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nthe above example, passing\n&quot;-Walloca-larger-than=1000&quot; would not issue a\nwarning because the call to &quot;alloca&quot; is known to\nbe at most 1000 bytes. However, if\n&quot;-Walloca-larger-than=500&quot; were passed, the\ncompiler would emit a\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Unbounded\nuses, on the other hand, are uses of &quot;alloca&quot; with\nno controlling predicate constraining its integer argument.\nFor example:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nfunc () <br>\n{ <br>\nvoid *p = alloca (n); <br>\nf (p); <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>If\n&quot;-Walloca-larger-than=500&quot; were passed, the above\nwould trigger a warning, but this time because of the lack\nof bounds\nchecking.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Note,\nthat even seemingly correct code involving signed integers\ncould cause a\nwarning:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nfunc (signed int n) <br>\n{ <br>\nif (n &lt; 500) <br>\n{ <br>\np = alloca (n); <br>\nf (p); <br>\n} <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>In\nthe above example, <i>n</i> could be negative, causing a\nlarger than expected argument to be implicitly cast into the\n&quot;alloca&quot;\ncall.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\noption also warns when &quot;alloca&quot; is used in a\nloop.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Walloca-larger-than=</b></big>\n<b>PTRDIFF_MAX</b> <big>is enabled by default but is usually\nonly effective when <b>-ftree-vrp</b> is active (default for\n<b>-O2</b> and\nabove).</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>See\nalso\n<b>-Wvla-larger-than=byte-size</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-alloca-larger-than</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Disable\n<b>-Walloca-larger-than=</b> warnings. The option is\nequivalent to <b>-Walloca-larger-than=</b></big>\n<b>SIZE_MAX</b> <big>or\nlarger.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Warith-conversion</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nwarn about implicit conversions from arithmetic operations\neven when conversion of the operands to the same type cannot\nchange their values. This affects warnings from\n<b>-Wconversion</b>, <b>-Wfloat-conversion</b>, and\n<b>-Wsign-conversion</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nf (char c, int i) <br>\n{ <br>\nc = c + i; // warns with B&lt;-Wconversion&gt; <br>\nc = c + 1; // only warns with B&lt;-Warith-conversion&gt;\n<br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Warray-bounds\n<br>\n\n-Warray-bounds=</b><i>n</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>This\noption is only active when <b>-ftree-vrp</b> is active\n(default for <b>-O2</b> and above). It warns about\nsubscripts to arrays that are always out of bounds. This\nwarning is enabled by <b>-Wall</b>. <b><br>\n\n-Warray-bounds=1</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>This\nis the warning level of <b>-Warray-bounds</b> and is enabled\nby <b>-Wall</b>; higher levels are not, and must be\nexplicitly\nrequested.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Warray-bounds=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>This\nwarning level also warns about out of bounds access for\narrays at the end of a struct and for arrays accessed\nthrough pointers. This warning level may give a larger\nnumber of false positives and is deactivated by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Warray-parameter\n<br>\n\n-Warray-parameter=</b><i>n</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout redeclarations of functions involving arguments of\narray or pointer types of inconsistent kinds or forms, and\nenable the detection of out-of-bounds accesses to such\nparameters by warnings such as\n<b>-Warray-bounds</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>If\nthe first function declaration uses the array form the bound\nspecified in the array is assumed to be the minimum number\nof elements expected to be provided in calls to the function\nand the maximum number of elements accessed by it. Failing\nto provide arguments of sufficient size or accessing more\nthan the maximum number of elements may be diagnosed by\nwarnings such as <b>-Warray-bounds</b>. At level 1 the\nwarning diagnoses inconsistencies involving array parameters\ndeclared using the &quot;T[static N]&quot;\nform.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>For\nexample, the warning triggers for the following\nredeclarations because the first one allows an array of any\nsize to be passed to &quot;f&quot; while the second one with\nthe keyword &quot;static&quot; specifies that the array\nargument must have at least four\nelements.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nf (int[static 4]); <br>\nvoid f (int[]); // warning (inconsistent array form) <br>\nvoid g (void) <br>\n{ <br>\nint *p = (int *)malloc (4); <br>\nf (p); // warning (array too small) <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>At\nlevel 2 the warning also triggers for redeclarations\ninvolving any other inconsistency in array or pointer\nargument forms denoting array sizes. Pointers and arrays of\nunspecified bound are considered equivalent and do not\ntrigger a\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\ng (int*); <br>\nvoid g (int[]); // no warning <br>\nvoid g (int[8]); // warning (inconsistent array\nbound)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Warray-parameter=2</b>\nis included in <b>-Wall</b>. The <b>-Wvla-parameter</b>\noption triggers warnings for similar inconsistencies\ninvolving Variable Length Array\narguments.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wattribute-alias=</b><i>n</i>\n<b><br>\n\n-Wno-attribute-alias</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout declarations using the &quot;alias&quot; and similar\nattributes whose target is incompatible with the type of the\nalias. <b><br>\n\n-Wattribute-alias=1</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>The\ndefault warning level of the <b>-Wattribute-alias</b> option\ndiagnoses incompatibilities between the type of the alias\ndeclaration and that of its target. Such incompatibilities\nare typically indicative of\nbugs.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big><b>-Wattribute-alias=2</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><big><big><big><big>At\nthis level <b>-Wattribute-alias</b> also diagnoses cases\nwhere the attributes of the alias declaration are more\nrestrictive than the attributes applied to its target. These\nmismatches can potentially result in incorrect code\ngeneration. In other cases they may be benign and could be\nresolved simply by adding the missing attribute to the\ntarget. For comparison, see the <b>-Wmissing-attributes</b>\noption, which controls diagnostics when the alias\ndeclaration is less restrictive than the target, rather than\nmore\nrestrictive.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>Attributes\nconsidered include &quot;alloc_align&quot;,\n&quot;alloc_size&quot;, &quot;cold&quot;, &quot;const&quot;,\n&quot;hot&quot;, &quot;leaf&quot;, &quot;malloc&quot;,\n&quot;nonnull&quot;, &quot;noreturn&quot;,\n&quot;nothrow&quot;, &quot;pure&quot;,\n&quot;returns_nonnull&quot;, and\n&quot;returns_twice&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Wattribute-alias</b>\nis equivalent to <b>-Wattribute-alias=1</b>. This is the\ndefault. You can disable these warnings with either\n<b>-Wno-attribute-alias</b> or\n<b>-Wattribute-alias=0</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wbool-compare</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout boolean expression compared with an integer value\ndifferent from &quot;true&quot;/&quot;false&quot;. For\ninstance, the following comparison is always\nfalse:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>int\nn = 5; <br>\n... <br>\nif ((n &gt; 1) == 2) { ...\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wbool-operation</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout suspicious operations on expressions of a boolean\ntype. For instance, bitwise negation of a boolean is very\nlikely a bug in the program. For C, this warning also warns\nabout incrementing or decrementing a boolean, which rarely\nmakes sense. (In C</big> ++ <big>, decrementing a boolean is\nalways invalid. Incrementing a boolean is invalid in C</big>\n++ <big>17, and deprecated\notherwise.)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wduplicated-branches</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen an if-else has identical branches. This warning detects\ncases like</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>if\n(p != NULL) <br>\nreturn 0; <br>\nelse <br>\nreturn 0;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>It\ndoesn&rsquo;t warn when both branches contain just a null\nstatement. This warning also warn for conditional\noperators:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>int\ni = x ? *p :\n*p;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wduplicated-cond</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout duplicated conditions in an if-else-if chain. For\ninstance, warn for the following\ncode:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>if\n(p-&gt;q != NULL) { ... } <br>\nelse if (p-&gt;q != NULL) { ...\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wframe-address</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen the <b>__builtin_frame_address</b> or\n<b>__builtin_return_address</b> is called with an argument\ngreater than 0. Such calls may return indeterminate values\nor crash the program. The warning is included in\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-discarded-qualifiers</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn if type qualifiers on pointers are being discarded.\nTypically, the compiler warns if a &quot;const char *&quot;\nvariable is passed to a function that takes a &quot;char\n*&quot; parameter. This option can be used to suppress such\na warning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-discarded-array-qualifiers</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn if type qualifiers on arrays which are pointer\ntargets are being discarded. Typically, the compiler warns\nif a &quot;const int (*)[]&quot; variable is passed to a\nfunction that takes a &quot;int (*)[]&quot; parameter. This\noption can be used to suppress such a\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-incompatible-pointer-types</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn when there is a conversion between pointers that\nhave incompatible types. This warning is for cases not\ncovered by <b>-Wno-pointer-sign</b>, which warns for pointer\nargument passing or assignment with different\nsignedness.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-int-conversion</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn about incompatible integer to pointer and pointer\nto integer conversions. This warning is about implicit\nconversions; for explicit conversions the warnings\n<b>-Wno-int-to-pointer-cast</b> and\n<b>-Wno-pointer-to-int-cast</b> may be\nused.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wzero-length-bounds</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout accesses to elements of zero-length array members that\nmight overlap other members of the same object. Declaring\ninterior zero-length arrays is discouraged because accesses\nto them are undefined.\nSee</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>For\nexample, the first two stores in function &quot;bad&quot;\nare diagnosed because the array elements overlap the\nsubsequent members &quot;b&quot; and &quot;c&quot;. The\nthird store is diagnosed by <b>-Warray-bounds</b> because it\nis beyond the bounds of the enclosing\nobject.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>struct\nX { int a[0]; int b, c; }; <br>\nstruct X x; <br>\nvoid bad (void) <br>\n{ <br>\nx.a[0] = 0; // -Wzero-length-bounds <br>\nx.a[1] = 1; // -Wzero-length-bounds <br>\nx.a[2] = 2; // -Warray-bounds <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Option\n<b>-Wzero-length-bounds</b> is enabled by\n<b>-Warray-bounds</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-div-by-zero</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn about compile-time integer division by zero.\nFloating-point division by zero is not warned about, as it\ncan be a legitimate way of obtaining infinities and\nNaNs.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wsystem-headers</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Print\nwarning messages for constructs found in system header\nfiles. Warnings from system headers are normally suppressed,\non the assumption that they usually do not indicate real\nproblems and would only make the compiler output harder to\nread. Using this command-line option tells</big> GCC <big>to\nemit warnings from system headers as if they occurred in\nuser code. However, note that using <b>-Wall</b> in\nconjunction with this option does <i>not</i> warn about\nunknown pragmas in system headers---for that,\n<b>-Wunknown-pragmas</b> must also be\nused.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wtautological-compare</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif a self-comparison always evaluates to true or false. This\nwarning detects various mistakes such\nas:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>int\ni = 1; <br>\n... <br>\nif (i &gt; i) { ...\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning also warns about bitwise comparisons that always\nevaluate to true or false, for\ninstance:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>if\n((a &amp; 16) == 10) { ...\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>will\nalways be\nfalse.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wtrampolines</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout trampolines generated for pointers to nested\nfunctions. A trampoline is a small piece of data or code\nthat is created at run time on the stack when the address of\na nested function is taken, and is used to call the nested\nfunction indirectly. For some targets, it is made up of data\nonly and thus requires no special treatment. But, for most\ntargets, it is made up of code and thus requires the stack\nto be made executable in order for the program to work\nproperly.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wfloat-equal</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif floating-point values are used in equality\ncomparisons.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nidea behind this is that sometimes it is convenient (for the\nprogrammer) to consider floating-point values as\napproximations to infinitely precise real numbers. If you\nare doing this, then you need to compute (by analyzing the\ncode, or in some other way) the maximum or likely maximum\nerror that the computation introduces, and allow for it when\nperforming comparisons (and when producing output, but\nthat&rsquo;s a different problem). In particular, instead of\ntesting for equality, you should check to see whether the\ntwo values have ranges that overlap; and this is done with\nthe relational operators, so equality comparisons are\nprobably\nmistaken.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wtraditional</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout certain constructs that behave differently in\ntraditional and</big> ISO C. <big>Also warn about</big> ISO\nC <big>constructs that have no traditional C equivalent,\nand/or problematic constructs that should be\navoided.</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>Macro parameters that\nappear within string literals in the macro body. In\ntraditional C macro replacement takes place within string\nliterals, but in</big> ISO C <big>it does\nnot.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>In traditional C,\nsome preprocessor directives did not exist. Traditional\npreprocessors only considered a line to be a directive if\nthe <b>#</b> appeared in column 1 on the line. Therefore\n<b>-Wtraditional</b> warns about directives that traditional\nC understands but ignores because the <b>#</b> does not\nappear as the first character on the line. It also suggests\nyou hide directives like &quot;#pragma&quot; not understood\nby traditional C by indenting them. Some traditional\nimplementations do not recognize &quot;#elif&quot;, so this\noption suggests avoiding it\naltogether.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>A function-like macro\nthat appears without\narguments.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>The unary plus\noperator.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>The <b>U</b> integer\nconstant suffix, or the <b>F</b> or <b>L</b> floating-point\nconstant suffixes. (Traditional C does support the <b>L</b>\nsuffix on integer constants.) Note, these suffixes appear in\nmacros defined in the system headers of most modern systems,\ne.g. the <b>_MIN</b>/<b>_MAX</b> macros in\n&quot;&lt;limits.h&gt;&quot;. Use of these macros in user\ncode might normally lead to spurious warnings, however</big>\nGCC <big>&rsquo;s integrated preprocessor has enough context\nto avoid warning in these\ncases.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>A function declared\nexternal in one block and then used after the end of the\nblock.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>A &quot;switch&quot;\nstatement has an operand of type\n&quot;long&quot;.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>A\nnon-&quot;static&quot; function declaration follows a\n&quot;static&quot; one. This construct is not accepted by\nsome traditional C\ncompilers.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>The</big> ISO\n<big>type of an integer constant has a different width or\nsignedness from its traditional type. This warning is only\nissued if the base of the constant is ten. I.e. hexadecimal\nor octal values, which typically represent bit patterns, are\nnot warned\nabout.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>Usage of</big> ISO\n<big>string concatenation is\ndetected.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>Initialization of\nautomatic\naggregates.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>Identifier conflicts\nwith labels. Traditional C lacks a separate namespace for\nlabels.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>Initialization of\nunions. If the initializer is zero, the warning is omitted.\nThis is done under the assumption that the zero initializer\nin user code appears conditioned on e.g.\n&quot;__STDC__&quot; to avoid missing initializer warnings\nand relies on default initialization to zero in the\ntraditional C\ncase.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>Conversions by\nprototypes between fixed/floating-point values and vice\nversa. The absence of these prototypes when compiling with\ntraditional C causes serious problems. This is a subset of\nthe possible conversion warnings; for the full set use\n<b>-Wtraditional-conversion</b>.</big></big></big></big></big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>Use of</big> ISO C\n<big>style function definitions. This warning intentionally\nis <i>not</i> issued for prototype declarations or variadic\nfunctions because these</big> ISO C <big>features appear in\nyour code when using libiberty&rsquo;s traditional C\ncompatibility macros, &quot;PARAMS&quot; and\n&quot;VPARAMS&quot;. This warning is also bypassed for\nnested functions because that feature is already a</big> GCC\n<big>extension and thus not relevant to traditional C\ncompatibility.</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wtraditional-conversion</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif a prototype causes a type conversion that is different\nfrom what would happen to the same argument in the absence\nof a prototype. This includes conversions of fixed point to\nfloating and vice versa, and conversions changing the width\nor signedness of a fixed-point argument except when the same\nas the default\npromotion.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wdeclaration-after-statement</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen a declaration is found after a statement in a block.\nThis construct, known from C</big> ++ <big>, was introduced\nwith</big> ISO C99 <big>and is by default allowed in</big>\nGCC. <big>It is not supported by</big> ISO\nC90.</big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><b><big>-Wshadow</big></b></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a local variable or type declaration shadows\nanother variable, parameter, type, class member (in C</big>\n++ <big>), or instance variable (in Objective-C) or whenever\na built-in function is shadowed. Note that in C</big> ++\n<big>, the compiler warns if a local variable shadows an\nexplicit typedef, but not if it shadows a struct/class/enum.\nIf this warning is enabled, it includes also all instances\nof local shadowing. This means that <b>-Wno-shadow=local</b>\nand <b>-Wno-shadow=compatible-local</b> are ignored when\n<b>-Wshadow</b> is used. Same as\n<b>-Wshadow=global</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-shadow-ivar</b>\n(Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn whenever a local variable shadows an instance\nvariable in an Objective-C\nmethod.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wshadow=global</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nfor any shadowing. Same as\n<b>-Wshadow</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wshadow=local</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen a local variable shadows another local variable or\nparameter.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wshadow=compatible-local</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen a local variable shadows another local variable or\nparameter whose type is compatible with that of the\nshadowing variable. In C</big> ++ <big>, type compatibility\nhere means the type of the shadowing variable can be\nconverted to that of the shadowed variable. The creation of\nthis flag (in addition to <b>-Wshadow=local</b>) is based on\nthe idea that when a local variable shadows another one of\nincompatible type, it is most likely intentional, not a bug\nor typo, as shown in the following\nexample:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>for\n(SomeIterator i = SomeObj.begin(); i != SomeObj.end(); ++i)\n<br>\n{ <br>\nfor (int i = 0; i &lt; N; ++i) <br>\n{ <br>\n... <br>\n} <br>\n... <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Since\nthe two variable &quot;i&quot; in the example above have\nincompatible types, enabling only\n<b>-Wshadow=compatible-local</b> does not emit a warning.\nBecause their types are incompatible, if a programmer\naccidentally uses one in place of the other, type checking\nis expected to catch that and emit an error or warning. Use\nof this flag instead of <b>-Wshadow=local</b> can possibly\nreduce the number of warnings triggered by intentional\nshadowing. Note that this also means that shadowing\n&quot;const char *i&quot; by &quot;char *i&quot; does not\nemit a\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is also enabled by\n<b>-Wshadow=local</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wlarger-than=</b><i>byte-size</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever an object is defined whose size exceeds\n<i>byte-size</i>. <b>-Wlarger-than=</b></big>\n<b>PTRDIFF_MAX</b> <big>is enabled by default. Warnings\ncontrolled by the option can be disabled either by\nspecifying <i>byte-size</i> of</big> <b>SIZE_MAX</b> <big>or\nmore or by\n<b>-Wno-larger-than</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Also\nwarn for calls to bounded functions such as\n&quot;memchr&quot; or &quot;strnlen&quot; that specify a\nbound greater than the largest possible object, which\nis</big> <b>PTRDIFF_MAX</b> <big>bytes by default. These\nwarnings can only be disabled by\n<b>-Wno-larger-than</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-larger-than</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Disable\n<b>-Wlarger-than=</b> warnings. The option is equivalent to\n<b>-Wlarger-than=</b></big> <b>SIZE_MAX</b> <big>or\nlarger.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wframe-larger-than=</b><i>byte-size</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif the size of a function frame exceeds <i>byte-size</i>.\nThe computation done to determine the stack frame size is\napproximate and not conservative. The actual requirements\nmay be somewhat greater than <i>byte-size</i> even if you do\nnot get a warning. In addition, any space allocated via\n&quot;alloca&quot;, variable-length arrays, or related\nconstructs is not included by the compiler when determining\nwhether or not to issue a warning.\n<b>-Wframe-larger-than=</b></big> <b>PTRDIFF_MAX</b> <big>is\nenabled by default. Warnings controlled by the option can be\ndisabled either by specifying <i>byte-size</i> of</big>\n<b>SIZE_MAX</b> <big>or more or by\n<b>-Wno-frame-larger-than</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-frame-larger-than</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Disable\n<b>-Wframe-larger-than=</b> warnings. The option is\nequivalent to <b>-Wframe-larger-than=</b></big>\n<b>SIZE_MAX</b> <big>or\nlarger.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-free-nonheap-object</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen attempting to deallocate an object that was either not\nallocated on the heap, or by using a pointer that was not\nreturned from a prior call to the corresponding allocation\nfunction. For example, because the call to\n&quot;stpcpy&quot; returns a pointer to the terminating nul\ncharacter and not to the begginning of the object, the call\nto &quot;free&quot; below is\ndiagnosed.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>void\nf (char *p) <br>\n{ <br>\np = stpcpy (p, &quot;abc&quot;); <br>\n// ... <br>\nfree (p); // warning <br>\n}</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Wfree-nonheap-object</b>\nis enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wstack-usage=</b><i>byte-size</i></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif the stack usage of a function might exceed\n<i>byte-size</i>. The computation done to determine the\nstack usage is conservative. Any space allocated via\n&quot;alloca&quot;, variable-length arrays, or related\nconstructs is included by the compiler when determining\nwhether or not to issue a\nwarning.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nmessage is in keeping with the output of\n<b>-fstack-usage</b>.</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big><big><big><big><big>If the stack usage is\nfully static but exceeds the specified amount,\nit&rsquo;s:</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>warning:\nstack usage is 1120\nbytes</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>If\nthe stack usage is (partly) dynamic but bounded,\nit&rsquo;s:</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>warning:\nstack usage might be 1648\nbytes</big></big></big></big></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>*</big></big></big></big></big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><big><big><big><big>If\nthe stack usage is (partly) dynamic and not bounded,\nit&rsquo;s:</big></big></big></big></big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><big><big><big><big>warning:\nstack usage might be\nunbounded</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><b>-Wstack-usage=</b></big>\n<b>PTRDIFF_MAX</b> <big>is enabled by default. Warnings\ncontrolled by the option can be disabled either by\nspecifying <i>byte-size</i> of</big> <b>SIZE_MAX</b> <big>or\nmore or by\n<b>-Wno-stack-usage</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-stack-usage</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Disable\n<b>-Wstack-usage=</b> warnings. The option is equivalent to\n<b>-Wstack-usage=</b></big> <b>SIZE_MAX</b> <big>or\nlarger.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunsafe-loop-optimizations</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif the loop cannot be optimized because the compiler cannot\nassume anything on the bounds of the loop indices. With\n<b>-funsafe-loop-optimizations</b> warn if the compiler\nmakes such\nassumptions.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-pedantic-ms-format</b>\n(MinGW targets\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>When\nused in combination with <b>-Wformat</b> and\n<b>-pedantic</b> without</big> GNU <big>extensions, this\noption disables the warnings about non-ISO\n&quot;printf&quot; / &quot;scanf&quot; format width\nspecifiers &quot;I32&quot;, &quot;I64&quot;, and\n&quot;I&quot; used on Windows targets, which depend on\nthe</big> MS\n<big>runtime.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wpointer-arith</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout anything that depends on the &quot;size of&quot; a\nfunction type or of &quot;void&quot;.</big> GNU C\n<big>assigns these types a size of 1, for convenience in\ncalculations with &quot;void *&quot; pointers and pointers\nto functions. In C</big> ++ <big>, warn also when an\narithmetic operation involves &quot;NULL&quot;. This warning\nis also enabled by\n<b>-Wpedantic</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-pointer-compare</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn if a pointer is compared with a zero character\nconstant. This usually means that the pointer was meant to\nbe dereferenced. For\nexample:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>const\nchar *p = foo (); <br>\nif (p == '\\0') <br>\nreturn 42;</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Note\nthat the code above is invalid in C</big> ++\n<big>11.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wtsan</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout unsupported features in\nThreadSanitizer.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>ThreadSanitizer\ndoes not support &quot;std::atomic_thread_fence&quot; and\ncan report false\npositives.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\nwarning is enabled by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wtype-limits</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif a comparison is always true or always false due to the\nlimited range of the data type, but do not warn for constant\nexpressions. For example, warn if an unsigned variable is\ncompared against zero with &quot;&lt;&quot; or\n&quot;&gt;=&quot;. This warning is also enabled by\n<b>-Wextra</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wabsolute-value</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nfor calls to standard functions that compute the absolute\nvalue of an argument when a more appropriate standard\nfunction is available. For example, calling\n&quot;abs(3.14)&quot; triggers the warning because the\nappropriate function to call to compute the absolute value\nof a double argument is &quot;fabs&quot;. The option also\ntriggers warnings when the argument in a call to such a\nfunction has an unsigned type. This warning can be\nsuppressed with an explicit type cast and it is also enabled\nby\n<b>-Wextra</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wcomment\n<br>\n\n-Wcomments</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever a comment-start sequence <b>/*</b> appears in a\n<b>/*</b> comment, or whenever a backslash-newline appears\nin a <b>//</b> comment. This warning is enabled by\n<b>-Wall</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wtrigraphs</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif any trigraphs are encountered that might change the\nmeaning of the program. Trigraphs within comments are not\nwarned about, except those that would form escaped\nnewlines.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>This\noption is implied by <b>-Wall</b>. If <b>-Wall</b> is not\ngiven, this option is still enabled unless trigraphs are\nenabled. To get trigraph conversion without warnings, but\nget the other <b>-Wall</b> warnings, use <b>-trigraphs -Wall\n-Wno-trigraphs</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wundef</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nif an undefined identifier is evaluated in an\n&quot;#if&quot; directive. Such identifiers are replaced\nwith zero.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wexpansion-to-defined</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhenever <b>defined</b> is encountered in the expansion of a\nmacro (including the case where the macro is expanded by an\n<b>#if</b> directive). Such usage is not portable. This\nwarning is also enabled by <b>-Wpedantic</b> and\n<b>-Wextra</b>.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wunused-macros</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout macros defined in the main file that are unused. A\nmacro is <i>used</i> if it is expanded or tested for\nexistence at least once. The preprocessor also warns if the\nmacro has not been used at the time it is redefined or\nundefined.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>Built-in\nmacros, macros defined on the command line, and macros\ndefined in include files are not warned\nabout.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big><i>Note:</i>\nIf a macro is actually used, but only used in skipped\nconditional blocks, then the preprocessor reports it as\nunused. To avoid the warning in such a case, you might\nimprove the scope of the macro&rsquo;s definition by, for\nexample, moving it into the first skipped block.\nAlternatively, you could provide a dummy use with something\nlike:</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>#if\ndefined the_macro_causing_the_warning <br>\n#endif</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wno-endif-labels</b></big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Do\nnot warn whenever an &quot;#else&quot; or an\n&quot;#endif&quot; are followed by text. This sometimes\nhappens in older programs with code of the\nform</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>#if\nFOO <br>\n... <br>\n#else FOO <br>\n... <br>\n#endif FOO</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><big><big><big><big>The\nsecond and third &quot;FOO&quot; should be in comments. This\nwarning is on by\ndefault.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wbad-function-cast</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nwhen a function call is cast to a non-matching type. For\nexample, warn if a call to a function returning an integer\ntype is cast to a pointer\ntype.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wc90-c99-compat</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout features not present in</big> ISO C90, <big>but\npresent in</big> ISO C99. <big>For instance, warn about use\nof variable length arrays, &quot;long long&quot; type,\n&quot;bool&quot; type, compound literals, designated\ninitializers, and so on. This option is independent of the\nstandards mode. Warnings are disabled in the expression that\nfollows\n&quot;__extension__&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wc99-c11-compat</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout features not present in</big> ISO C99, <big>but\npresent in</big> ISO C11. <big>For instance, warn about use\nof anonymous structures and unions, &quot;_Atomic&quot; type\nqualifier, &quot;_Thread_local&quot; storage-class\nspecifier, &quot;_Alignas&quot; specifier,\n&quot;Alignof&quot; operator, &quot;_Generic&quot; keyword,\nand so on. This option is independent of the standards mode.\nWarnings are disabled in the expression that follows\n&quot;__extension__&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wc11-c2x-compat</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout features not present in</big> ISO C11, <big>but\npresent in</big> ISO C2X. <big>For instance, warn about\nomitting the string in &quot;_Static_assert&quot;, use of\n<b>[[]]</b> syntax for attributes, use of decimal\nfloating-point types, and so on. This option is independent\nof the standards mode. Warnings are disabled in the\nexpression that follows\n&quot;__extension__&quot;.</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><big><big><b>-Wc++-compat</b>\n(C and Objective-C\nonly)</big></big></big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout</big> ISO C <big>constructs that are outside of the\ncommon subset of</big> ISO C <big>and</big> ISO C</big> ++\n<big>,</big> e.g. request for implicit conversion from\n&quot;void *&quot; to a pointer to non-&quot;void&quot;\ntype.</big></big></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><big><big><b>-Wc++11-compat</b>\n(C</big> ++ <big>and Objective-C</big> ++\n<big>only)</big></big></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big><big>Warn\nabout C</big> ++ <big>constructs whose meaning differs\nbetween</big> ISO C</big> ++ <big>1998</big> and</big> ISO\nC</big> ++ <big>2011,</big> e.g.,identifiersin</big>\nISOC</big> ++ <big>1998</big> thatarekeywordsin\nISOC++2011.Thiswarningturnson<b>-Wnarrowing</b>andisenabledby<b>-Wall</b>.</big></p>\n\n\n<p style=\"margin-left:11%;\"><big><b>-Wc++14-compat</b>(C++andObjective-C++only)</big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big><big>Warn\nabout C</big> ++ <big>constructs whose meaning differs\nbetween</big> ISO C</big> ++ <big>2011</big> and</big> ISO\nC</big> ++ <big>2014.</big>\nThiswarningisenabledby<b>-Wall</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wc++17-compat</b>(C</big>\n++ <big>andObjective-C</big> ++ <big>only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big><big>Warn\nabout C</big> ++ <big>constructs whose meaning differs\nbetween</big> ISO C</big> ++ <big>2014</big> and</big> ISO\nC</big> ++ <big>2017.</big>\nThiswarningisenabledby<b>-Wall</b>.</big></p>\n\n\n<p style=\"margin-left:11%;\"><big><b>-Wc++20-compat</b>(C</big>\n++ <big>andObjective-C</big> ++ <big>only)</big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><big>Warn about\nC</big> ++ <big>constructs whose meaning differs\nbetween</big> ISO C</big> ++ <big>2017</big> and</big> ISO\nC</big> ++ <big>2020.</big>\nThiswarningisenabledby<b>-Wall</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-Wcast-qual</b></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn whenever a\npointer is cast so as to remove a type qualifier from the\ntarget type. For example, warn if a &quot;const char *&quot;\nis cast to an ordinary &quot;char\n*&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Also\nwarn when making a cast that introduces a type qualifier in\nan unsafe way. For example, casting &quot;char **&quot; to\n&quot;const char **&quot; is unsafe, as in this\nexample:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>/*\np is char ** value. */ <br>\nconst char **q = (const char **) p; <br>\n/* Assignment of readonly string to const char * is OK. */\n<br>\n*q = &quot;string&quot;; <br>\n/* Now char** pointer points to read-only memory. */ <br>\n**p = 'b';</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wcast-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn whenever a\npointer is cast such that the required alignment of the\ntarget is increased. For example, warn if a &quot;char\n*&quot; is cast to an &quot;int *&quot; on machines where\nintegers can only be accessed at two- or four-byte\nboundaries.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wcast-align=strict</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn whenever a\npointer is cast such that the required alignment of the\ntarget is increased. For example, warn if a &quot;char\n*&quot; is cast to an &quot;int *&quot; regardless of the\ntarget machine.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wcast-function-type</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn when a\nfunction pointer is cast to an incompatible function\npointer. In a cast involving function types with a variable\nargument list only the types of initial arguments that are\nprovided are considered. Any parameter of pointer-type\nmatches any other pointer-type. Any benign differences in\nintegral types are ignored, like &quot;int&quot; vs.\n&quot;long&quot; on</big> ILP32 <big>targets. Likewise type\nqualifiers are ignored. The function type &quot;void (*)\n(void)&quot; is special and matches everything, which can be\nused to suppress this warning. In a cast involving pointer\nto member types this warning warns whenever the type cast is\nchanging the pointer to member type. This warning is enabled\nby <b>-Wextra</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wwrite-strings</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When compiling\nC, give string constants the type &quot;const\nchar[<i>length</i>]&quot; so that copying the address of one\ninto a non-&quot;const&quot; &quot;char *&quot; pointer\nproduces a warning. These warnings help you find at compile\ntime code that can try to write into a string constant, but\nonly if you have been very careful about using\n&quot;const&quot; in declarations and prototypes. Otherwise,\nit is just a nuisance. This is why we did not make\n<b>-Wall</b> request these warnings.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\ncompiling C</big> ++ <big>, warn about the deprecated\nconversion from string literals to &quot;char *&quot;. This\nwarning is enabled by default for C</big> ++\n<big>programs.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wclobbered</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nvariables that might be changed by &quot;longjmp&quot; or\n&quot;vfork&quot;. This warning is also enabled by\n<b>-Wextra</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wconversion</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nimplicit conversions that may alter a value. This includes\nconversions between real and integer, like &quot;abs\n(x)&quot; when &quot;x&quot; is &quot;double&quot;;\nconversions between signed and unsigned, like &quot;unsigned\nui = -1&quot;; and conversions to smaller types, like\n&quot;sqrtf (M_PI)&quot;. Do not warn for explicit casts\nlike &quot;abs ((int) x)&quot; and &quot;ui = (unsigned)\n-1&quot;, or if the value is not changed by the conversion\nlike in &quot;abs (2.0)&quot;. Warnings about conversions\nbetween signed and unsigned integers can be disabled by\nusing <b>-Wno-sign-conversion</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nC</big> ++ <big>, also warn for confusing overload\nresolution for user-defined conversions; and conversions\nthat never use a type conversion operator: conversions to\n&quot;void&quot;, the same type, a base class or a reference\nto them. Warnings about conversions between signed and\nunsigned integers are disabled by default in C</big> ++\n<big>unless <b>-Wsign-conversion</b> is explicitly\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Warnings\nabout conversion from arithmetic on a small type back to\nthat type are only given with\n<b>-Warith-conversion</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wdangling-else</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn about\nconstructions where there may be confusion to which\n&quot;if&quot; statement an &quot;else&quot; branch belongs.\nHere is an example of such a case:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>{\n<br>\nif (a) <br>\nif (b) <br>\nfoo (); <br>\nelse <br>\nbar (); <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nC/C</big> ++ <big>, every &quot;else&quot; branch belongs to\nthe innermost possible &quot;if&quot; statement, which in\nthis example is &quot;if (b)&quot;. This is often not what\nthe programmer expected, as illustrated in the above example\nby indentation the programmer chose. When there is the\npotential for this confusion,</big> GCC <big>issues a\nwarning when this flag is specified. To eliminate the\nwarning, add explicit braces around the innermost\n&quot;if&quot; statement so there is no way the\n&quot;else&quot; can belong to the enclosing &quot;if&quot;.\nThe resulting code looks like this:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>{\n<br>\nif (a) <br>\n{ <br>\nif (b) <br>\nfoo (); <br>\nelse <br>\nbar (); <br>\n} <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nwarning is enabled by\n<b>-Wparentheses</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wdate-time</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn when macros\n&quot;__TIME__&quot;, &quot;__DATE__&quot; or\n&quot;__TIMESTAMP__&quot; are encountered as they might\nprevent bit-wise-identical reproducible\ncompilations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wempty-body</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if an empty\nbody occurs in an &quot;if&quot;, &quot;else&quot; or\n&quot;do while&quot; statement. This warning is also enabled\nby <b>-Wextra</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-endif-labels</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not warn\nabout stray tokens after &quot;#else&quot; and\n&quot;#endif&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wenum-compare</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn about a\ncomparison between values of different enumerated types. In\nC</big> ++ <big>enumerated type mismatches in conditional\nexpressions are also diagnosed and the warning is enabled by\ndefault. In C this warning is enabled by\n<b>-Wall</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wenum-conversion</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn when a\nvalue of enumerated type is implicitly converted to a\ndifferent enumerated type. This warning is enabled by\n<b>-Wextra</b> in C.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wjump-misses-init</b>\n(C, Objective-C only)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if a\n&quot;goto&quot; statement or a &quot;switch&quot; statement\njumps forward across the initialization of a variable, or\njumps backward to a label after the variable has been\ninitialized. This only warns about variables that are\ninitialized when they are declared. This warning is only\nsupported for C and Objective-C; in C</big> ++ <big>this\nsort of branch is an error in any\ncase.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-Wjump-misses-init</b>\nis included in <b>-Wc++-compat</b>. It can be disabled with\nthe <b>-Wno-jump-misses-init</b>\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wsign-compare</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn when a\ncomparison between signed and unsigned values could produce\nan incorrect result when the signed value is converted to\nunsigned. In C</big> ++ <big>, this warning is also enabled\nby <b>-Wall</b>. In C, it is also enabled by\n<b>-Wextra</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wsign-conversion</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nimplicit conversions that may change the sign of an integer\nvalue, like assigning a signed integer expression to an\nunsigned integer variable. An explicit cast silences the\nwarning. In C, this option is enabled also by\n<b>-Wconversion</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wfloat-conversion</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nimplicit conversions that reduce the precision of a real\nvalue. This includes conversions from real to integer, and\nfrom higher precision real to lower precision real values.\nThis option is also enabled by\n<b>-Wconversion</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-scalar-storage-order</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not warn on\nsuspicious constructs involving reverse scalar storage\norder.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wsizeof-array-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn about\ndivisions of two sizeof operators when the first one is\napplied to an array and the divisor does not equal the size\nof the array element. In such a case, the computation will\nnot yield the number of elements in the array, which is\nlikely what the user intended. This warning warns e.g.\nabout</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\nfn () <br>\n{ <br>\nint arr[10]; <br>\nreturn sizeof (arr) / sizeof (short); <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nwarning is enabled by <b>-Wall</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wsizeof-pointer-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nsuspicious divisions of two sizeof expressions that divide\nthe pointer size by the element size, which is the usual way\nto compute the array size but won&rsquo;t work out correctly\nwith pointers. This warning warns e.g. about &quot;sizeof\n(ptr) / sizeof (ptr[0])&quot; if &quot;ptr&quot; is not an\narray, but a pointer. This warning is enabled by\n<b>-Wall</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wsizeof-pointer-memaccess</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nsuspicious length parameters to certain string and memory\nbuilt-in functions if the argument uses &quot;sizeof&quot;.\nThis warning triggers for example for &quot;memset (ptr, 0,\nsizeof (ptr));&quot; if &quot;ptr&quot; is not an array, but\na pointer, and suggests a possible fix, or about\n&quot;memcpy (&amp;foo, ptr, sizeof (&amp;foo));&quot;.\n<b>-Wsizeof-pointer-memaccess</b> also warns about calls to\nbounded string copy functions like &quot;strncat&quot; or\n&quot;strncpy&quot; that specify as the bound a\n&quot;sizeof&quot; expression of the source array. For\nexample, in the following function the call to\n&quot;strncat&quot; specifies the size of the source string\nas the bound. That is almost certainly a mistake and so the\ncall is diagnosed.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>void\nmake_file (const char *name) <br>\n{ <br>\nchar path[PATH_MAX]; <br>\nstrncpy (path, name, sizeof path - 1); <br>\nstrncat (path, &quot;.text&quot;, sizeof &quot;.text&quot;);\n<br>\n... <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-Wsizeof-pointer-memaccess</b> option is enabled by\n<b>-Wall</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-sizeof-array-argument</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not warn when\nthe &quot;sizeof&quot; operator is applied to a parameter\nthat is declared as an array in a function definition. This\nwarning is enabled by default for C and C</big> ++\n<big>programs.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wmemset-elt-size</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nsuspicious calls to the &quot;memset&quot; built-in\nfunction, if the first argument references an array, and the\nthird argument is a number equal to the number of elements,\nbut not equal to the size of the array in memory. This\nindicates that the user has omitted a multiplication by the\nelement size. This warning is enabled by\n<b>-Wall</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wmemset-transposed-args</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nsuspicious calls to the &quot;memset&quot; built-in function\nwhere the second argument is not zero and the third argument\nis zero. For example, the call &quot;memset (buf, sizeof\nbuf, 0)&quot; is diagnosed because &quot;memset (buf, 0,\nsizeof buf)&quot; was meant instead. The diagnostic is only\nemitted if the third argument is a literal zero. Otherwise,\nif it is an expression that is folded to zero, or a cast of\nzero to some type, it is far less likely that the arguments\nhave been mistakenly transposed and no warning is emitted.\nThis warning is enabled by\n<b>-Wall</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Waddress</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn about\nsuspicious uses of memory addresses. These include using the\naddress of a function in a conditional expression, such as\n&quot;void func(void); if (func)&quot;, and comparisons\nagainst the memory address of a string literal, such as\n&quot;if (x == &quot;abc&quot;)&quot;. Such uses typically\nindicate a programmer error: the address of a function\nalways evaluates to true, so their use in a conditional\nusually indicate that the programmer forgot the parentheses\nin a function call; and comparisons against string literals\nresult in unspecified behavior and are not portable in C, so\nthey usually indicate that the programmer intended to use\n&quot;strcmp&quot;. This warning is enabled by\n<b>-Wall</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-address-of-packed-member</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not warn when\nthe address of packed member of struct or union is taken,\nwhich usually results in an unaligned pointer value. This is\nenabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wlogical-op</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn about\nsuspicious uses of logical operators in expressions. This\nincludes using logical operators in contexts where a\nbit-wise operator is likely to be expected. Also warns when\nthe operands of a logical operator are the\nsame:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>extern\nint a; <br>\nif (a &lt; 0 &amp;&amp; a &lt; 0) { ...\n}</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wlogical-not-parentheses</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn about\nlogical not used on the left hand side operand of a\ncomparison. This option does not warn if the right operand\nis considered to be a boolean expression. Its purpose is to\ndetect suspicious code like the\nfollowing:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\na; <br>\n... <br>\nif (!a &gt; 1) { ... }</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nis possible to suppress the warning by wrapping the</big>\nLHS <big>into parentheses:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>if\n((!a) &gt; 1) { ... }</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nwarning is enabled by <b>-Wall</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Waggregate-return</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if any\nfunctions that return structures or unions are defined or\ncalled. (In languages where you can return an array, this\nalso elicits a warning.)</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-aggressive-loop-optimizations</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if in a\nloop with constant number of iterations the compiler detects\nundefined behavior in some statement during one or more of\nthe iterations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-attributes</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not warn if\nan unexpected &quot;__attribute__&quot; is used, such as\nunrecognized attributes, function attributes applied to\nvariables, etc. This does not stop errors for incorrect use\nof supported attributes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-builtin-declaration-mismatch</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if a\nbuilt-in function is declared with an incompatible signature\nor as a non-function, or when a built-in function declared\nwith a type that does not include a prototype is called with\narguments whose promoted types do not match those expected\nby the function. When <b>-Wextra</b> is specified, also warn\nwhen a built-in function that takes arguments is declared\nwithout a prototype. The\n<b>-Wbuiltin-declaration-mismatch</b> warning is enabled by\ndefault. To avoid the warning include the appropriate header\nto bring the prototypes of built-in functions into\nscope.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, the call to &quot;memset&quot; below is diagnosed\nby the warning because the function expects a value of type\n&quot;size_t&quot; as its argument but the type of 32 is\n&quot;int&quot;. With <b>-Wextra</b>, the declaration of the\nfunction is diagnosed as well.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>extern\nvoid* memset (); <br>\nvoid f (void *d) <br>\n{ <br>\nmemset (d, '\\0', 32); <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-builtin-macro-redefined</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not warn if\ncertain built-in macros are redefined. This suppresses\nwarnings for redefinition of &quot;__TIMESTAMP__&quot;,\n&quot;__TIME__&quot;, &quot;__DATE__&quot;,\n&quot;__FILE__&quot;, and\n&quot;__BASE_FILE__&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wstrict-prototypes</b>\n(C and Objective-C only)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if a\nfunction is declared or defined without specifying the\nargument types. (An old-style function definition is\npermitted without a warning if preceded by a declaration\nthat specifies the argument types.)</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wold-style-declaration</b>\n(C and Objective-C only)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn for\nobsolescent usages, according to the C Standard, in a\ndeclaration. For example, warn if storage-class specifiers\nlike &quot;static&quot; are not the first things in a\ndeclaration. This warning is also enabled by\n<b>-Wextra</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wold-style-definition</b>\n(C and Objective-C only)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if an\nold-style function definition is used. A warning is given\neven if there is a previous prototype. A definition using\n<b>()</b> is not considered an old-style definition in C2X\nmode, because it is equivalent to <b>(void)</b> in that\ncase, but is considered an old-style definition for older\nstandards.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wmissing-parameter-type</b>\n(C and Objective-C only)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>A function\nparameter is declared without a type specifier in\nK&amp;R-style functions:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>void\nfoo(bar) { }</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nwarning is also enabled by\n<b>-Wextra</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wmissing-prototypes</b>\n(C and Objective-C only)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if a global\nfunction is defined without a previous prototype\ndeclaration. This warning is issued even if the definition\nitself provides a prototype. Use this option to detect\nglobal functions that do not have a matching prototype\ndeclaration in a header file. This option is not valid for\nC</big> ++ <big>because all function declarations provide\nprototypes and a non-matching declaration declares an\noverload rather than conflict with an earlier declaration.\nUse <b>-Wmissing-declarations</b> to detect missing\ndeclarations in C</big> ++ <big>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wmissing-declarations</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if a global\nfunction is defined without a previous declaration. Do so\neven if the definition itself provides a prototype. Use this\noption to detect global functions that are not declared in\nheader files. In C, no warnings are issued for functions\nwith previous non-prototype declarations; use\n<b>-Wmissing-prototypes</b> to detect missing prototypes. In\nC</big> ++ <big>, no warnings are issued for function\ntemplates, or for inline functions, or for functions in\nanonymous namespaces.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wmissing-field-initializers</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if a\nstructure&rsquo;s initializer has some fields missing. For\nexample, the following code causes such a warning, because\n&quot;x.h&quot; is implicitly zero:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>struct\ns { int f, g, h; }; <br>\nstruct s x = { 3, 4 };</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption does not warn about designated initializers, so the\nfollowing modification does not trigger a\nwarning:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>struct\ns { int f, g, h; }; <br>\nstruct s x = { .f = 3, .g = 4 };</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nC this option does not warn about the universal zero\ninitializer <b>{ 0 }</b>:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>struct\ns { int f, g, h; }; <br>\nstruct s x = { 0 };</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Likewise,\nin C</big> ++ <big>this option does not warn about the empty\n{ } initializer, for example:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>struct\ns { int f, g, h; }; <br>\ns x = { };</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nwarning is included in <b>-Wextra</b>. To get other\n<b>-Wextra</b> warnings without this one, use <b>-Wextra\n-Wno-missing-field-initializers</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wno-multichar</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not warn if a\nmulticharacter constant (<b>&rsquo;</b></big> <b>FOOF\n<big>&rsquo;</big></b><big>) is used. Usually they indicate\na typo in the user&rsquo;s code, as they have\nimplementation-defined values, and should not be used in\nportable code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wnormalized=</b>[<b>none</b>|<b>id</b>|<b>nfc</b>|<b>nfkc</b>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>In</big> ISO C\n<big>and</big> ISO C</big> ++ <big>,</big> two identifiers\nare different if they are different sequences of characters.\nHowever, sometimes when characters outside the basic</big>\nASCII <big>character set are used, you can have two\ndifferent character sequences that look the same. To avoid\nconfusion, the</big> ISO 10646 <big>standard sets out some\n<i>normalization rules</i> which when applied ensure that\ntwo sequences that look the same are turned into the same\nsequence.</big> GCC <big>can warn you if you are using\nidentifiers that have not been normalized; this option\ncontrols that warning.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>There are\nfour levels of warning supported by</big> GCC. <big>The\ndefault is <b>-Wnormalized=nfc</b>, which warns about any\nidentifier that is not in the</big> ISO 10646 &quot;C&quot;\n<big>normalized form,</big> <i>NFC</i> <big>.</big> NFC\n<big>is the recommended form for most uses. It is equivalent\nto <b>-Wnormalized</b>.</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Unfortunately,\nthere are some characters allowed in identifiers by</big>\nISO C <big>and</big> ISO C <small>++that,whenturnedinto\n<small>NFC,</small> arenotallowedinidentifiers.\nThatis,there&rsquo;snowaytousethesesymbolsinportable\n<small>ISOC</small> orC <small>++</small> andhaveall\nyouridentifiersin <small>NFC.</small>\n<b>-Wnormalized=id</b>suppressesthewarningforthese\ncharacters.Itishopedthatfutureversionsofthestandardsinvolvedwill\ncorrectthis,whichiswhythisoptionisnotthedefault.</small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>Youcanswitchthewarningoffforallcharactersbywriting<b>-Wnormalized=none</b>\nor<b>-Wno-normalized</b>.Youshouldonlydothisifyouareusingsomeother\nnormalizationscheme(like&quot;D&quot;),becauseotherwiseyoucaneasilycreatebugs\nthatareliterallyimpossibletosee.</small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>Somecharactersin\n<small>ISO10646</small>\nhavedistinctmeaningsbutlookidenticalinsome\nfontsordisplaymethodologies,especiallyonceformattinghasbeenapplied.\nForinstance&quot;\\u207F&quot;,&quot;\n<small>SUPERSCRIPTLATINSMALLLETTERN&quot;,</small>\ndisplaysjustlike\naregular&quot;n&quot;thathasbeenplacedinasuperscript.\n<small>ISO10646</small> definesthe\n<i><small>NFKC</small></i>\nnormalizationschemetoconvertalltheseintoastandardformaswell,and\n<small>GCC</small> warnsifyourcodeisnotin\n<small>NFKC</small>\nifyouuse<b>-Wnormalized=nfkc</b>.Thiswarningis\ncomparabletowarningabouteveryidentifierthatcontainstheletterO\nbecauseitmightbeconfusedwiththedigit0,andsoisnotthedefault,butmaybe\nusefulasalocalcodingconventioniftheprogrammingenvironmentcannotbe\nfixedtodisplaythesecharactersdistinctly.</small></p>\n\n\n<p style=\"margin-left:11%;\"><small><b>-Wno-attribute-warning</b></small></p>\n\n<p style=\"margin-left:17%;\"><big><big>Do not warn about\nusage of functions declared with &quot;warning&quot;\nattribute. By default, this warning is enabled.\n<b>-Wno-attribute-warning</b> can be used to disable the\nwarning or <b>-Wno-error=attribute-warning</b> can be used\nto disable the error when compiled with <b>-Werror</b>\nflag.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-deprecated</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Do not warn about\nusage of deprecated features.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-deprecated-declarations</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Do not warn about\nuses of functions, variables, and types marked as deprecated\nby using the &quot;deprecated&quot;\nattribute.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-overflow</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Do not warn about\ncompile-time overflow in constant\nexpressions.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-odr</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn about One\nDefinition Rule violations during link-time optimization.\nEnabled by default.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wopenmp-simd</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if the\nvectorizer cost model overrides the OpenMP simd directive\nset by user. The <b>-fsimd-cost-model=unlimited</b> option\ncan be used to relax the cost model.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Woverride-init</b>\n(C and Objective-C only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if an\ninitialized field without side effects is overridden when\nusing designated initializers.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\nwarning is included in <b>-Wextra</b>. To get other\n<b>-Wextra</b> warnings without this one, use <b>-Wextra\n-Wno-override-init</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-override-init-side-effects</b>\n(C and Objective-C only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Do not warn if an\ninitialized field with side effects is overridden when using\ndesignated initializers. This warning is enabled by\ndefault.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wpacked</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if a structure\nis given the packed attribute, but the packed attribute has\nno effect on the layout or size of the structure. Such\nstructures may be mis-aligned for little benefit. For\ninstance, in this code, the variable &quot;f.x&quot; in\n&quot;struct bar&quot; is misaligned even though\n&quot;struct bar&quot; does not itself have the packed\nattribute:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>struct\nfoo { <br>\nint x; <br>\nchar a, b, c, d; <br>\n} __attribute__((packed)); <br>\nstruct bar { <br>\nchar z; <br>\nstruct foo f; <br>\n};</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wnopacked-bitfield-compat</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>The 4.1, 4.2 and 4.3\nseries of</big> GCC <big>ignore the &quot;packed&quot;\nattribute on bit-fields of type &quot;char&quot;. This was\nfixed in</big> GCC 4.4 <big>but the change can lead to\ndifferences in the structure layout.</big> GCC <big>informs\nyou when the offset of such a field has changed in</big> GCC\n4.4. <big>For example there is no longer a 4-bit padding\nbetween field &quot;a&quot; and &quot;b&quot; in this\nstructure:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>struct\nfoo <br>\n{ <br>\nchar a:4; <br>\nchar b:8; <br>\n} __attribute__ ((packed));</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\nwarning is enabled by default. Use\n<b>-Wno-packed-bitfield-compat</b> to disable this\nwarning.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wpacked-not-aligned</b>\n(C, C</big> ++ <big>, Objective-C and Objective-C</big> ++\n<big>only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if a structure\nfield with explicitly specified alignment in a packed struct\nor union is misaligned. For example, a warning will be\nissued on &quot;struct S&quot;, like, &quot;warning:\nalignment 1 of 'struct S' is less than 8&quot;, in this\ncode:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>struct\n__attribute__ ((aligned (8))) S8 { char a[8]; }; <br>\nstruct __attribute__ ((packed)) S { <br>\nstruct S8 s8; <br>\n};</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\nwarning is enabled by <b>-Wall</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wpadded</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if padding is\nincluded in a structure, either to align an element of the\nstructure or to align the whole structure. Sometimes when\nthis happens it is possible to rearrange the fields of the\nstructure to reduce the padding and so make the structure\nsmaller.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wredundant-decls</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if anything is\ndeclared more than once in the same scope, even in cases\nwhere multiple declaration is valid and changes\nnothing.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wrestrict</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn when an object\nreferenced by a &quot;restrict&quot;-qualified parameter\n(or, in C</big> ++ <big>, a &quot;__restrict&quot;-qualified\nparameter) is aliased by another argument, or when copies\nbetween such objects overlap. For example, the call to the\n&quot;strcpy&quot; function below attempts to truncate the\nstring by replacing its initial characters with the last\nfour. However, because the call writes the terminating</big>\nNUL <big>into &quot;a[4]&quot;, the copies overlap and the\ncall is diagnosed.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>void\nfoo (void) <br>\n{ <br>\nchar a[] = &quot;abcd1234&quot;; <br>\nstrcpy (a, a + 4); <br>\n... <br>\n}</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\n<b>-Wrestrict</b> option detects some instances of simple\noverlap even without optimization but works best at\n<b>-O2</b> and above. It is included in\n<b>-Wall</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wnested-externs</b>\n(C and Objective-C only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if an\n&quot;extern&quot; declaration is encountered within a\nfunction.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Winline</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if a function\nthat is declared as inline cannot be inlined. Even with this\noption, the compiler does not warn about failures to inline\nfunctions declared in system headers.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\ncompiler uses a variety of heuristics to determine whether\nor not to inline a function. For example, the compiler takes\ninto account the size of the function being inlined and the\namount of inlining that has already been done in the current\nfunction. Therefore, seemingly insignificant changes in the\nsource program can cause the warnings produced by\n<b>-Winline</b> to appear or disappear.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wint-in-bool-context</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn for suspicious\nuse of integer values where boolean values are expected,\nsuch as conditional expressions (?:) using non-boolean\ninteger constants in boolean context, like &quot;if (a &lt;=\nb ? 2 : 3)&quot;. Or left shifting of signed integers in\nboolean context, like &quot;for (a = 0; 1 &lt;&lt; a;\na++);&quot;. Likewise for all kinds of multiplications\nregardless of the data type. This warning is enabled by\n<b>-Wall</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-int-to-pointer-cast</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Suppress warnings\nfrom casts to pointer type of an integer of a different\nsize. In C</big> ++ <big>, casting to a pointer type of\nsmaller size is an error. <b>Wint-to-pointer-cast</b> is\nenabled by default.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-pointer-to-int-cast</b>\n(C and Objective-C only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Suppress warnings\nfrom casts from a pointer to an integer type of a different\nsize.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Winvalid-pch</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if a precompiled\nheader is found in the search path but cannot be\nused.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wlong-long</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if &quot;long\nlong&quot; type is used. This is enabled by either\n<b>-Wpedantic</b> or <b>-Wtraditional</b> in</big> ISO C90\n<big>and C</big> ++ <big>98 modes. To inhibit the warning\nmessages, use <b>-Wno-long-long</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wvariadic-macros</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if variadic\nmacros are used in</big> ISO C90 <big>mode, or if the</big>\nGNU <big>alternate syntax is used in</big> ISO C99\n<big>mode. This is enabled by either <b>-Wpedantic</b> or\n<b>-Wtraditional</b>. To inhibit the warning messages, use\n<b>-Wno-variadic-macros</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-varargs</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Do not warn upon\nquestionable usage of the macros used to handle variable\narguments like &quot;va_start&quot;. These warnings are\nenabled by default.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wvector-operation-performance</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if vector\noperation is not implemented via</big> SIMD\n<big>capabilities of the architecture. Mainly useful for the\nperformance tuning. Vector operation can be implemented\n&quot;piecewise&quot;, which means that the scalar operation\nis performed on every vector element; &quot;in\nparallel&quot;, which means that the vector operation is\nimplemented using scalars of wider type, which normally is\nmore performance efficient; and &quot;as a single\nscalar&quot;, which means that vector fits into a scalar\ntype.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wvla</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if a\nvariable-length array is used in the code. <b>-Wno-vla</b>\nprevents the <b>-Wpedantic</b> warning of the\nvariable-length array.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wvla-larger-than=</b><i>byte-size</i></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>If this option is\nused, the compiler warns for declarations of variable-length\narrays whose size is either unbounded, or bounded by an\nargument that allows the array size to exceed\n<i>byte-size</i> bytes. This is similar to how\n<b>-Walloca-larger-than=</b><i>byte-size</i> works, but with\nvariable-length arrays.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Note\nthat</big> GCC <big>may optimize small variable-length\narrays of a known value into plain arrays, so this warning\nmay not get triggered for such arrays.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-Wvla-larger-than=</b></big>\n<b>PTRDIFF_MAX</b> <big>is enabled by default but is\ntypically only effective when <b>-ftree-vrp</b> is active\n(default for <b>-O2</b> and above).</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>See\nalso\n<b>-Walloca-larger-than=</b><i>byte-size</i>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-vla-larger-than</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Disable\n<b>-Wvla-larger-than=</b> warnings. The option is equivalent\nto <b>-Wvla-larger-than=</b></big> <b>SIZE_MAX</b> <big>or\nlarger.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wvla-parameter</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn about\nredeclarations of functions involving arguments of Variable\nLength Array types of inconsistent kinds or forms, and\nenable the detection of out-of-bounds accesses to such\nparameters by warnings such as\n<b>-Warray-bounds</b>.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>If\nthe first function declaration uses the</big> VLA <big>form\nthe bound specified in the array is assumed to be the\nminimum number of elements expected to be provided in calls\nto the function and the maximum number of elements accessed\nby it. Failing to provide arguments of sufficient size or\naccessing more than the maximum number of elements may be\ndiagnosed.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>For\nexample, the warning triggers for the following\nredeclarations because the first one allows an array of any\nsize to be passed to &quot;f&quot; while the second one\nspecifies that the array argument must have at least\n&quot;n&quot; elements. In addition, calling &quot;f&quot;\nwith the assotiated</big> VLA <big>bound parameter in excess\nof the actual</big> VLA <big>bound triggers a warning as\nwell.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>void\nf (int n, int[n]); <br>\nvoid f (int, int[]); // warning: argument 2 previously\ndeclared as a VLA <br>\nvoid g (int n) <br>\n{ <br>\nif (n &gt; 4) <br>\nreturn; <br>\nint a[n]; <br>\nf (sizeof a, a); // warning: access to a by f may be out of\nbounds <br>\n... <br>\n}</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-Wvla-parameter</b>\nis included in <b>-Wall</b>. The <b>-Warray-parameter</b>\noption triggers warnings for similar problems involving\nordinary array arguments.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wvolatile-register-var</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if a register\nvariable is declared volatile. The volatile modifier does\nnot inhibit all optimizations that may eliminate reads\nand/or writes to register variables. This warning is enabled\nby <b>-Wall</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wdisabled-optimization</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn if a requested\noptimization pass is disabled. This warning does not\ngenerally indicate that there is anything wrong with your\ncode; it merely indicates that</big> GCC <big>&rsquo;s\noptimizers are unable to handle the code effectively. Often,\nthe problem is that your code is too big or too\ncomplex;</big> GCC <big>refuses to optimize programs when\nthe optimization itself is likely to take inordinate amounts\nof time.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wpointer-sign</b>\n(C and Objective-C only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn for pointer\nargument passing or assignment with different signedness.\nThis option is only supported for C and Objective-C. It is\nimplied by <b>-Wall</b> and by <b>-Wpedantic</b>, which can\nbe disabled with <b>-Wno-pointer-sign</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wstack-protector</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option is only\nactive when <b>-fstack-protector</b> is active. It warns\nabout functions that are not protected against stack\nsmashing.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Woverlength-strings</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Warn about string\nconstants that are longer than the &quot;minimum\nmaximum&quot; length specified in the C standard. Modern\ncompilers generally allow string constants that are much\nlonger than the standard&rsquo;s minimum limit, but very\nportable programs should avoid using longer\nstrings.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\nlimit applies <i>after</i> string constant concatenation,\nand does not count the trailing</big> NUL. <big>In C90, the\nlimit was 509 characters; in C99, it was raised to 4095.\nC</big> ++ <big>98 does not specify a normative minimum\nmaximum, so we do not diagnose overlength strings in C</big>\n++ <big>.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption is implied by <b>-Wpedantic</b>, and can be disabled\nwith <b>-Wno-overlength-strings</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wunsuffixed-float-constants</b>\n(C and Objective-C only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Issue a warning for\nany floating constant that does not have a suffix. When used\ntogether with <b>-Wsystem-headers</b> it warns about such\nconstants in system header files. This can be useful when\npreparing code to use with the\n&quot;FLOAT_CONST_DECIMAL64&quot; pragma from the decimal\nfloating-point extension to C99.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-lto-type-mismatch</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>During the link-time\noptimization, do not warn about type mismatches in global\ndeclarations from different compilation units. Requires\n<b>-flto</b> to be enabled. Enabled by\ndefault.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-designated-init</b>\n(C and Objective-C only)</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Suppress warnings\nwhen a positional initializer is used to initialize a\nstructure that has been marked with the\n&quot;designated_init&quot; attribute.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>Options\nThat Control Static Analysis <br>\n-fanalyzer</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option enables\nan static analysis of program flow which looks for\n&quot;interesting&quot; interprocedural paths through the\ncode, and issues warnings for problems found on\nthem.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\nanalysis is much more expensive than other</big> GCC\n<big>warnings.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabling\nthis option effectively enables the following\nwarnings:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-Wanalyzer-double-fclose\n-Wanalyzer-double-free\n-Wanalyzer-exposure-through-output-file -Wanalyzer-file-leak\n-Wanalyzer-free-of-non-heap -Wanalyzer-malloc-leak\n-Wanalyzer-mismatching-deallocation\n-Wanalyzer-possible-null-argument\n-Wanalyzer-possible-null-dereference\n-Wanalyzer-null-argument -Wanalyzer-null-dereference\n-Wanalyzer-shift-count-negative\n-Wanalyzer-shift-count-overflow\n-Wanalyzer-stale-setjmp-buffer\n-Wanalyzer-tainted-array-index\n-Wanalyzer-unsafe-call-within-signal-handler\n-Wanalyzer-use-after-free\n-Wanalyzer-use-of-pointer-in-stale-stack-frame\n-Wanalyzer-write-to-const\n-Wanalyzer-write-to-string-literal</b></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption is only available if</big> GCC <big>was configured\nwith analyzer support enabled.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wanalyzer-too-complex</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>If <b>-fanalyzer</b>\nis enabled, the analyzer uses various heuristics to attempt\nto explore the control flow and data flow in the program,\nbut these can be defeated by sufficiently complicated\ncode.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>By\ndefault, the analysis silently stops if the code is too\ncomplicated for the analyzer to fully explore and it reaches\nan internal limit. The <b>-Wanalyzer-too-complex</b> option\nwarns if this occurs.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-double-fclose</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-double-fclose</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\n&quot;FILE *&quot; can have &quot;fclose&quot; called on it\nmore than once.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-double-free</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-double-free</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\npointer can have a deallocator called on it more than once,\neither &quot;free&quot;, or a deallocator referenced by\nattribute &quot;malloc&quot;.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-exposure-through-output-file</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-exposure-through-output-file</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\nsecurity-sensitive value is written to an output file (such\nas writing a password to a log file).</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-file-leak</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-file-leak</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\n&quot;&lt;stdio.h&gt;&quot; &quot;FILE *&quot; stream object\nis leaked.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-free-of-non-heap</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-free-of-non-heap</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which\n&quot;free&quot; is called on a non-heap pointer (e.g. an\non-stack buffer, or a global).</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-malloc-leak</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-malloc-leak</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\npointer allocated via an allocator is leaked: either\n&quot;malloc&quot;, or a function marked with attribute\n&quot;malloc&quot;.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-mismatching-deallocation</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-mismatching-deallocation</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which the\nwrong deallocation function is called on a pointer value,\nbased on which function was used to allocate the pointer\nvalue. The diagnostic will warn about mismatches between\n&quot;free&quot;, scalar &quot;delete&quot; and vector\n&quot;delete[]&quot;, and those marked as\nallocator/deallocator pairs using attribute\n&quot;malloc&quot;.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-possible-null-argument</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-possible-null-argument</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\npossibly-NULL value is passed to a function argument marked\nwith &quot;__attribute__((nonnull))&quot; as requiring a\nnon-NULL value.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-possible-null-dereference</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-possible-null-dereference</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\npossibly-NULL value is dereferenced.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-null-argument</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-null-argument</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a value\nknown to be</big> NULL <big>is passed to a function argument\nmarked with &quot;__attribute__((nonnull))&quot; as\nrequiring a non-NULL value.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-null-dereference</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-null-dereference</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a value\nknown to be</big> NULL <big>is dereferenced.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-shift-count-negative</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-shift-count-negative</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a shift\nis attempted with a negative count. It is analogous to the\n<b>-Wshift-count-negative</b> diagnostic implemented in the\nC/C</big> ++ <big>front ends, but is implemented based on\nanalyzing interprocedural paths, rather than merely parsing\nthe syntax tree. However, the analyzer does not prioritize\ndetection of such paths, so false negatives are more likely\nrelative to other warnings.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-shift-count-overflow</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-shift-count-overflow</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a shift\nis attempted with a count greater than or equal to the\nprecision of the operand&rsquo;s type. It is analogous to\nthe <b>-Wshift-count-overflow</b> diagnostic implemented in\nthe C/C</big> ++ <big>front ends, but is implemented based\non analyzing interprocedural paths, rather than merely\nparsing the syntax tree. However, the analyzer does not\nprioritize detection of such paths, so false negatives are\nmore likely relative to other warnings.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-stale-setjmp-buffer</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-stale-setjmp-buffer</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which\n&quot;longjmp&quot; is called to rewind to a\n&quot;jmp_buf&quot; relating to a &quot;setjmp&quot; call in\na function that has returned.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>When\n&quot;setjmp&quot; is called on a &quot;jmp_buf&quot; to\nrecord a rewind location, it records the stack frame. The\nstack frame becomes invalid when the function containing the\n&quot;setjmp&quot; call returns. Attempting to rewind to it\nvia &quot;longjmp&quot; would reference a stack frame that\nno longer exists, and likely lead to a crash (or\nworse).</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-tainted-array-index</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\nboth <b>-fanalyzer</b> and <b>-fanalyzer-checker=taint</b>\nto enable it; use <b>-Wno-analyzer-tainted-array-index</b>\nto disable it.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a value\nthat could be under an attacker&rsquo;s control is used as\nthe index of an array access without being\nsanitized.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-unsafe-call-within-signal-handler</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-unsafe-call-within-signal-handler</b> to\ndisable it.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\nfunction known to be async-signal-unsafe (such as\n&quot;fprintf&quot;) is called from a signal\nhandler.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-use-after-free</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-use-after-free</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\npointer is used after a deallocator is called on it: either\n&quot;free&quot;, or a deallocator referenced by attribute\n&quot;malloc&quot;.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-use-of-pointer-in-stale-stack-frame</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-use-of-pointer-in-stale-stack-frame</b> to\ndisable it.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which a\npointer is dereferenced that points to a variable in a stale\nstack frame.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-write-to-const</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-write-to-const</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which the\nanalyzer detects an attempt to write through a pointer to a\n&quot;const&quot; object. However, the analyzer does not\nprioritize detection of such paths, so false negatives are\nmore likely relative to other warnings.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Wno-analyzer-write-to-string-literal</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This warning requires\n<b>-fanalyzer</b>, which enables it; use\n<b>-Wno-analyzer-write-to-string-literal</b> to disable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\ndiagnostic warns for paths through the code in which the\nanalyzer detects an attempt to write through a pointer to a\nstring literal. However, the analyzer does not prioritize\ndetection of such paths, so false negatives are more likely\nrelative to other warnings.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Pertinent\nparameters for controlling the exploration are: <b>--param\nanalyzer-bb-explosion-factor=</b><i>value</i>, <b>--param\nanalyzer-max-enodes-per-program-point=</b><i>value</i>,\n<b>--param analyzer-max-recursion-depth=</b><i>value</i>,\nand <b>--param\nanalyzer-min-snodes-for-call-summary=</b><i>value</i>.</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>The\nfollowing options control the analyzer. <b><br>\n-fanalyzer-call-summaries</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Simplify\ninterprocedural analysis by computing the effect of certain\ncalls, rather than exploring all paths through the function\nfrom callsite to each possible return.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>If\nenabled, call summaries are only used for functions with\nmore than one call site, and that are sufficiently\ncomplicated (as per <b>--param\nanalyzer-min-snodes-for-call-summary=</b><i>value</i>).</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fanalyzer-checker=</b><i>name</i></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Restrict the analyzer\nto run just the named checker, and enable\nit.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Some\ncheckers are disabled by default (even with\n<b>-fanalyzer</b>), such as the &quot;taint&quot; checker\nthat implements <b>-Wanalyzer-tainted-array-index</b>, and\nthis option is required to enable them.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-analyzer-feasibility</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option is\nintended for analyzer developers.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>By\ndefault the analyzer verifies that there is a feasible\ncontrol flow path for each diagnostic it emits: that the\nconditions that hold are not mutually exclusive. Diagnostics\nfor which no feasible path can be found are rejected. This\nfiltering can be suppressed with\n<b>-fno-analyzer-feasibility</b>, for debugging issues in\nthis code.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fanalyzer-fine-grained</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option is\nintended for analyzer developers.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Internally\nthe analyzer builds an &quot;exploded graph&quot; that\ncombines control flow graphs with data flow\ninformation.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>By\ndefault, an edge in this graph can contain the effects of a\nrun of multiple statements within a basic block. With\n<b>-fanalyzer-fine-grained</b>, each statement gets its own\nedge.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fanalyzer-show-duplicate-count</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option is\nintended for analyzer developers: if multiple diagnostics\nhave been detected as being duplicates of each other, it\nemits a note when reporting the best diagnostic, giving the\nnumber of additional diagnostics that were suppressed by the\ndeduplication logic.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-analyzer-state-merge</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option is\nintended for analyzer developers.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>By\ndefault the analyzer attempts to simplify analysis by\nmerging sufficiently similar states at each program point as\nit builds its &quot;exploded graph&quot;. With\n<b>-fno-analyzer-state-merge</b> this merging can be\nsuppressed, for debugging state-handling\nissues.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-analyzer-state-purge</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option is\nintended for analyzer developers.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>By\ndefault the analyzer attempts to simplify analysis by\npurging aspects of state at a program point that appear to\nno longer be relevant e.g. the values of locals that\naren&rsquo;t accessed later in the function and which\naren&rsquo;t relevant to leak analysis.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>With\n<b>-fno-analyzer-state-purge</b> this purging of state can\nbe suppressed, for debugging state-handling\nissues.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fanalyzer-transitivity</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option enables\ntransitivity of constraints within the\nanalyzer.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fanalyzer-verbose-edges</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option is\nintended for analyzer developers. It enables more verbose,\nlower-level detail in the descriptions of control flow\nwithin diagnostic paths.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fanalyzer-verbose-state-changes</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option is\nintended for analyzer developers. It enables more verbose,\nlower-level detail in the descriptions of events relating to\nstate machines within diagnostic paths.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fanalyzer-verbosity=</b><i>level</i></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option controls\nthe complexity of the control flow paths that are emitted\nfor analyzer diagnostics.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\n<i>level</i> can be one of:</big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><b>0</b></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big>At this level, interprocedural call and return\nevents are displayed, along with the most pertinent\nstate-change events relating to a diagnostic. For example,\nfor a double-&quot;free&quot; diagnostic, both calls to\n&quot;free&quot; will be shown.</big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><b>1</b></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big>As per the previous level, but also show\nevents for the entry to each function.</big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><b>2</b></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big>As per the previous level, but also show\nevents relating to control flow that are significant to\ntriggering the issue (e.g. &quot;true path taken&quot; at a\nconditional).</big></big></p> </td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big>This\nlevel is the default.</big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><b>3</b></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><big><big>As per the previous\nlevel, but show all control flow events, not just\nsignificant ones.</big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><b>4</b></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big>This level is intended for analyzer\ndevelopers; it adds various other events intended for\ndebugging the analyzer.</big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump internal details\nabout what the analyzer is doing to\n<i>file.analyzer.txt</i>. This option is overridden by\n<b>-fdump-analyzer-stderr</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-stderr</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump internal details\nabout what the analyzer is doing to stderr. This option\noverrides <b>-fdump-analyzer</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-callgraph</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump a representation\nof the call graph suitable for viewing with GraphViz to\n<i>file.callgraph.dot</i>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-exploded-graph</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump a representation\nof the &quot;exploded graph&quot; suitable for viewing with\nGraphViz to <i>file.eg.dot</i>. Nodes are color-coded based\non state-machine states to emphasize state\nchanges.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-exploded-nodes</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Emit diagnostics\nshowing where nodes in the &quot;exploded graph&quot; are in\nrelation to the program source.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-exploded-nodes-2</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump a textual\nrepresentation of the &quot;exploded graph&quot; to\n<i>file.eg.txt</i>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-exploded-nodes-3</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump a textual\nrepresentation of the &quot;exploded graph&quot; to one dump\nfile per node, to <i>file.eg-id.txt</i>. This is typically a\nlarge number of dump files.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-feasibility</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump internal details\nabout the analyzer&rsquo;s search for feasible paths. The\ndetails are written in a form suitable for viewing with\nGraphViz to filenames of the form <i>file.*.fg.dot</i> and\n<i>file.*.tg.dot</i>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-json</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump a\ncompressed</big> JSON <big>representation of analyzer\ninternals to <i>file.analyzer.json.gz</i>. The precise\nformat is subject to change.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-state-purge</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>As per\n<b>-fdump-analyzer-supergraph</b>, dump a representation of\nthe &quot;supergraph&quot; suitable for viewing with\nGraphViz, but annotate the graph with information on what\nstate will be purged at each node. The graph is written to\n<i>file.state-purge.dot</i>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdump-analyzer-supergraph</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Dump representations\nof the &quot;supergraph&quot; suitable for viewing with\nGraphViz to <i>file.supergraph.dot</i> and to\n<i>file.supergraph-eg.dot</i>. These show all of the control\nflow graphs in the program, with interprocedural edges for\ncalls and returns. The second dump contains annotations\nshowing nodes in the &quot;exploded graph&quot; and\ndiagnostics associated with them.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>Options\nfor Debugging Your Program</b> <br>\nTo tell</big> GCC <big>to emit extra information for use by\na debugger, in almost all cases you need only to add\n<b>-g</b> to your other options.</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>GCC\n<big>allows you to use <b>-g</b> with <b>-O</b>. The\nshortcuts taken by optimized code may occasionally be\nsurprising: some variables you declared may not exist at\nall; flow of control may briefly move where you did not\nexpect it; some statements may not be executed because they\ncompute constant results or their values are already at\nhand; some statements may execute in different places\nbecause they have been moved out of loops. Nevertheless it\nis possible to debug optimized output. This makes it\nreasonable to use the optimizer for programs that might have\nbugs.</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>If\nyou are not using some other optimization option, consider\nusing <b>-Og</b> with <b>-g</b>. With no <b>-O</b> option at\nall, some compiler passes that collect information useful\nfor debugging do not run at all, so that <b>-Og</b> may\nresult in a better debugging experience.</big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><b>-g</b></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big>Produce debugging information in the operating\nsystem&rsquo;s native format (stabs,</big> COFF, XCOFF,\n<big>or</big> DWARF <big>).</big> GDB <big>can work with\nthis debugging information.</big></big></p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>On\nmost systems that use stabs format, <b>-g</b> enables use of\nextra debugging information that only</big> GDB <big>can\nuse; this extra information makes debugging work better\nin</big> GDB <big>but probably makes other debuggers crash\nor refuse to read the program. If you want to control for\ncertain whether to generate the extra information, use\n<b>-gstabs+</b>, <b>-gstabs</b>, <b>-gxcoff+</b>,\n<b>-gxcoff</b>, or <b>-gvms</b> (see below).</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-ggdb</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Produce debugging\ninformation for use by</big> GDB. <big>This means to use the\nmost expressive format available (</big> DWARF, <big>stabs,\nor the native format if neither of those are supported),\nincluding</big> GDB <big>extensions if at all\npossible.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b>-gdwarf <br>\n-gdwarf-</b><i>version</i></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Produce debugging\ninformation in</big> DWARF <big>format (if that is\nsupported). The value of <i>version</i> may be either 2, 3,\n4 or 5; the default version for most targets is 5 (with the\nexception of VxWorks,</big> TPF <big>and Darwin/Mac</big> OS\nX, <big>which default to version 2, and</big> AIX,\n<big>which defaults to version 4).</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Note\nthat with</big> DWARF <big>Version 2, some ports require and\nalways use some non-conflicting</big> DWARF 3\n<big>extensions in the unwind tables.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Version\n4 may require</big> GDB 7.0 <big>and\n<b>-fvar-tracking-assignments</b> for maximum benefit.\nVersion 5 requires</big> GDB 8.0 <big>or\nhigher.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>GCC\n<big>no longer supports</big> DWARF <big>Version 1, which is\nsubstantially different than Version 2 and later. For\nhistorical reasons, some other DWARF-related options such as\n<b>-fno-dwarf2-cfi-asm</b>) retain a reference to</big>\nDWARF <big>Version 2 in their names, but apply to all\ncurrently-supported versions of</big> DWARF.</big></p>\n\n\n<p style=\"margin-left:11%;\"><big><b><big>-gstabs</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Produce debugging\ninformation in stabs format (if that is supported),\nwithout</big> GDB <big>extensions. This is the format used\nby</big> DBX <big>on most</big> BSD <big>systems. On</big>\nMIPS, <big>Alpha and System V Release 4 systems this option\nproduces stabs debugging output that is not understood\nby</big> DBX. <big>On System V Release 4 systems this option\nrequires the</big> GNU <big>assembler.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gstabs+</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Produce debugging\ninformation in stabs format (if that is supported),\nusing</big> GNU <big>extensions understood only by the</big>\nGNU <big>debugger (</big> GDB <big>). The use of these\nextensions is likely to make other debuggers crash or refuse\nto read the program.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gxcoff</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Produce debugging\ninformation in</big> XCOFF <big>format (if that is\nsupported). This is the format used by the</big> DBX\n<big>debugger on</big> IBM RS/6000\n<big>systems.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gxcoff+</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Produce debugging\ninformation in</big> XCOFF <big>format (if that is\nsupported), using</big> GNU <big>extensions understood only\nby the</big> GNU <big>debugger (</big> GDB <big>). The use\nof these extensions is likely to make other debuggers crash\nor refuse to read the program, and may cause assemblers\nother than the</big> GNU <big>assembler (</big> GAS <big>)\nto fail with an error.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gvms</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Produce debugging\ninformation in Alpha/VMS debug format (if that is\nsupported). This is the format used by</big> DEBUG <big>on\nAlpha/VMS systems.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-g</b><i>level</i>\n<b><br>\n-ggdb</b><i>level</i> <b><br>\n-gstabs</b><i>level</i> <b><br>\n-gxcoff</b><i>level</i> <b><br>\n-gvms</b><i>level</i></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Request debugging\ninformation and also use <i>level</i> to specify how much\ninformation. The default level is 2.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Level\n0 produces no debug information at all. Thus, <b>-g0</b>\nnegates <b>-g</b>.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Level\n1 produces minimal information, enough for making backtraces\nin parts of the program that you don&rsquo;t plan to debug.\nThis includes descriptions of functions and external\nvariables, and line number tables, but no information about\nlocal variables.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Level\n3 includes extra information, such as all the macro\ndefinitions present in the program. Some debuggers support\nmacro expansion when you use <b>-g3</b>.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>If\nyou use multiple <b>-g</b> options, with or without level\nnumbers, the last such option is the one that is\neffective.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-gdwarf</b>\ndoes not accept a concatenated debug level, to avoid\nconfusion with <b>-gdwarf-</b><i>level</i>. Instead use an\nadditional <b>-g</b><i>level</i> option to change the debug\nlevel for</big> DWARF.</big></p>\n\n\n<p style=\"margin-left:11%;\"><big><b><big>-fno-eliminate-unused-debug-symbols</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>By default, no debug\ninformation is produced for symbols that are not actually\nused. Use this option if you want debug information for all\nsymbols.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-femit-class-debug-always</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Instead of emitting\ndebugging information for a C</big> ++ <big>class in only\none object file, emit it in all object files using the\nclass. This option should be used only with debuggers that\nare unable to handle the way</big> GCC <big>normally emits\ndebugging information for classes because using this option\nincreases the size of debugging information by as much as a\nfactor of two.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-merge-debug-strings</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Direct the linker to\nnot merge together strings in the debugging information that\nare identical in different object files. Merging is not\nsupported by all assemblers or linkers. Merging decreases\nthe size of the debug information in the output file at the\ncost of increasing link processing time. Merging is enabled\nby default.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdebug-prefix-map=</b><i>old</i><b>=</b><i>new</i></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>When compiling files\nresiding in directory <i>old</i>, record debugging\ninformation describing them as if the files resided in\ndirectory <i>new</i> instead. This can be used to replace a\nbuild-time path with an install-time path in the debug info.\nIt can also be used to change an absolute path to a relative\npath by using <i>.</i> for <i>new</i>. This can give more\nreproducible builds, which are location independent, but may\nrequire an extra command to tell</big> GDB <big>where to\nfind the source files. See also\n<b>-ffile-prefix-map</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fvar-tracking</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Run variable tracking\npass. It computes where variables are stored at each\nposition in code. Better debugging information is then\ngenerated (if the debugging information format supports this\ninformation).</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>It is\nenabled by default when compiling with optimization\n(<b>-Os</b>, <b>-O</b>, <b>-O2</b>, ...), debugging\ninformation (<b>-g</b>) and the debug info format supports\nit.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fvar-tracking-assignments</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Annotate assignments\nto user variables early in the compilation and attempt to\ncarry the annotations over throughout the compilation all\nthe way to the end, in an attempt to improve debug\ninformation while optimizing. Use of <b>-gdwarf-4</b> is\nrecommended along with it.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>It\ncan be enabled even if var-tracking is disabled, in which\ncase annotations are created and maintained, but discarded\nat the end. By default, this flag is enabled together with\n<b>-fvar-tracking</b>, except when selective scheduling is\nenabled.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gsplit-dwarf</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>If</big> DWARF\n<big>debugging information is enabled, separate as much\ndebugging information as possible into a separate output\nfile with the extension <i>.dwo</i>. This option allows the\nbuild system to avoid linking files with debug information.\nTo be useful, this option requires a debugger capable of\nreading <i>.dwo</i> files.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b>-gdwarf32 <br>\n-gdwarf64</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>If</big> DWARF\n<big>debugging information is enabled, the <b>-gdwarf32</b>\nselects the 32-bit</big> DWARF <big>format and the\n<b>-gdwarf64</b> selects the 64-bit</big> DWARF <big>format.\nThe default is target specific, on most targets it is\n<b>-gdwarf32</b> though. The 32-bit</big> DWARF <big>format\nis smaller, but can&rsquo;t support more than 2GiB of debug\ninformation in any of the</big> DWARF <big>debug information\nsections. The 64-bit</big> DWARF <big>format allows larger\ndebug information and might not be well supported by all\nconsumers yet.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gdescribe-dies</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Add description\nattributes to some</big> DWARF <big>DIEs that have no name\nattribute, such as artificial variables, external references\nand call site parameter DIEs.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gpubnames</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Generate</big> DWARF\n<big>&quot;.debug_pubnames&quot; and\n&quot;.debug_pubtypes&quot; sections.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-ggnu-pubnames</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Generate\n&quot;.debug_pubnames&quot; and &quot;.debug_pubtypes&quot;\nsections in a format suitable for conversion into a</big>\nGDB <big>index. This option is only useful with a linker\nthat can produce</big> GDB <big>index version\n7.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdebug-types-section</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>When using</big>\nDWARF <big>Version 4 or higher, type DIEs can be put into\ntheir own &quot;.debug_types&quot; section instead of making\nthem part of the &quot;.debug_info&quot; section. It is more\nefficient to put them in a separate comdat section since the\nlinker can then remove duplicates. But not all</big> DWARF\n<big>consumers support &quot;.debug_types&quot; sections yet\nand on some objects &quot;.debug_types&quot; produces larger\ninstead of smaller debugging information.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-grecord-gcc-switches\n<br>\n-gno-record-gcc-switches</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This switch causes\nthe command-line options used to invoke the compiler that\nmay affect code generation to be appended to the\nDW_AT_producer attribute in</big> DWARF <big>debugging\ninformation. The options are concatenated with spaces\nseparating them from each other and from the compiler\nversion. It is enabled by default. See also\n<b>-frecord-gcc-switches</b> for another way of storing\ncompiler options into the object file.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gstrict-dwarf</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Disallow using\nextensions of later</big> DWARF <big>standard version than\nselected with <b>-gdwarf-</b><i>version</i>. On most targets\nusing non-conflicting</big> DWARF <big>extensions from later\nstandard versions is allowed.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gno-strict-dwarf</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Allow using\nextensions of later</big> DWARF <big>standard version than\nselected with <b>-gdwarf-</b><i>version</i>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gas-loc-support</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Inform the compiler\nthat the assembler supports &quot;.loc&quot; directives. It\nmay then use them for the assembler to generate</big>\nDWARF2+ <big>line number tables.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\nis generally desirable, because assembler-generated\nline-number tables are a lot more compact than those the\ncompiler can generate itself.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption will be enabled by default if, at</big> GCC\n<big>configure time, the assembler was found to support such\ndirectives.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gno-as-loc-support</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Force</big> GCC\n<big>to generate</big> DWARF2+ <big>line number tables\ninternally, if</big> DWARF2+ <big>line number tables are to\nbe generated.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gas-locview-support</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Inform the compiler\nthat the assembler supports &quot;view&quot; assignment and\nreset assertion checking in &quot;.loc&quot;\ndirectives.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption will be enabled by default if, at</big> GCC\n<big>configure time, the assembler was found to support\nthem.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gno-as-locview-support</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Force</big> GCC\n<big>to assign view numbers internally, if\n<b>-gvariable-location-views</b> are explicitly\nrequested.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b>-gcolumn-info <br>\n-gno-column-info</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Emit location column\ninformation into</big> DWARF <big>debugging information,\nrather than just file and line. This option is enabled by\ndefault.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gstatement-frontiers\n<br>\n-gno-statement-frontiers</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option\ncauses</big> GCC <big>to create markers in the internal\nrepresentation at the beginning of statements, and to keep\nthem roughly in place throughout compilation, using them to\nguide the output of &quot;is_stmt&quot; markers in the line\nnumber table. This is enabled by default when compiling with\noptimization (<b>-Os</b>, <b>-O</b>, <b>-O2</b>, ...), and\noutputting</big> DWARF 2 <big>debug information at the\nnormal level.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gvariable-location-views\n<br>\n-gvariable-location-views=incompat5 <br>\n-gno-variable-location-views</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Augment variable\nlocation lists with progressive view numbers implied from\nthe line number table. This enables debug information\nconsumers to inspect state at certain points of the program,\neven if no instructions associated with the corresponding\nsource locations are present at that point. If the assembler\nlacks support for view numbers in line number tables, this\nwill cause the compiler to emit the line number table, which\ngenerally makes them somewhat less compact. The augmented\nline number tables and location lists are fully\nbackward-compatible, so they can be consumed by debug\ninformation consumers that are not aware of these\naugmentations, but they won&rsquo;t derive any benefit from\nthem either.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\nis enabled by default when outputting</big> DWARF 2\n<big>debug information at the normal level, as long as there\nis assembler support, <b>-fvar-tracking-assignments</b> is\nenabled and <b>-gstrict-dwarf</b> is not. When assembler\nsupport is not available, this may still be enabled, but it\nwill force</big> GCC <big>to output internal line number\ntables, and if <b>-ginternal-reset-location-views</b> is not\nenabled, that will most certainly lead to silently\nmismatching location views.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>There\nis a proposed representation for view numbers that is not\nbackward compatible with the location list format introduced\nin</big> DWARF 5, <big>that can be enabled with\n<b>-gvariable-location-views=incompat5</b>. This option may\nbe removed in the future, is only provided as a reference\nimplementation of the proposed representation. Debug\ninformation consumers are not expected to support this\nextended format, and they would be rendered unable to decode\nlocation lists using it.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-ginternal-reset-location-views\n<br>\n-gno-internal-reset-location-views</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Attempt to determine\nlocation views that can be omitted from location view lists.\nThis requires the compiler to have very accurate insn length\nestimates, which isn&rsquo;t always the case, and it may\ncause incorrect view lists to be generated silently when\nusing an assembler that does not support location view\nlists. The</big> GNU <big>assembler will flag any such error\nas a &quot;view number mismatch&quot;. This is only enabled\non ports that define a reliable estimation\nfunction.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b>-ginline-points\n<br>\n-gno-inline-points</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Generate extended\ndebug information for inlined functions. Location view\ntracking markers are inserted at inlined entry points, so\nthat address and view numbers can be computed and output in\ndebug information. This can be enabled independently of\nlocation views, in which case the view numbers won&rsquo;t\nbe output, but it can only be enabled along with statement\nfrontiers, and it is only enabled by default if location\nviews are enabled.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-gz</b>[<b>=</b><i>type</i>]</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Produce compressed\ndebug sections in</big> DWARF <big>format, if that is\nsupported. If <i>type</i> is not given, the default type\ndepends on the capabilities of the assembler and linker\nused. <i>type</i> may be one of <b>none</b> (don&rsquo;t\ncompress debug sections), <b>zlib</b> (use zlib compression\nin</big> ELF <big>gABI format), or <b>zlib-gnu</b> (use zlib\ncompression in traditional</big> GNU <big>format). If the\nlinker doesn&rsquo;t support writing compressed debug\nsections, the option is rejected. Otherwise, if the\nassembler does not support them, <b>-gz</b> is silently\nignored when producing object files.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-femit-struct-debug-baseonly</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Emit debug\ninformation for struct-like types only when the base name of\nthe compilation source file matches the base name of file in\nwhich the struct is defined.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption substantially reduces the size of debugging\ninformation, but at significant potential loss in type\ninformation to the debugger. See\n<b>-femit-struct-debug-reduced</b> for a less aggressive\noption. See <b>-femit-struct-debug-detailed</b> for more\ndetailed control.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption works only with</big> DWARF <big>debug\noutput.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-femit-struct-debug-reduced</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Emit debug\ninformation for struct-like types only when the base name of\nthe compilation source file matches the base name of file in\nwhich the type is defined, unless the struct is a template\nor defined in a system header.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption significantly reduces the size of debugging\ninformation, with some potential loss in type information to\nthe debugger. See <b>-femit-struct-debug-baseonly</b> for a\nmore aggressive option. See\n<b>-femit-struct-debug-detailed</b> for more detailed\ncontrol.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption works only with</big> DWARF <big>debug\noutput.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-femit-struct-debug-detailed</b>[<b>=</b><i>spec-list</i>]</big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Specify the\nstruct-like types for which the compiler generates debug\ninformation. The intent is to reduce duplicate struct debug\ninformation between different object files within the same\nprogram.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption is a detailed version of\n<b>-femit-struct-debug-reduced</b> and\n<b>-femit-struct-debug-baseonly</b>, which serves for most\nneeds.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>A\nspecification has the\nsyntax[<b>dir:</b>|<b>ind:</b>][<b>ord:</b>|<b>gen:</b>](<b>any</b>|<b>sys</b>|<b>base</b>|<b>none</b>)</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\noptional first word limits the specification to structs that\nare used directly (<b>dir:</b>) or used indirectly\n(<b>ind:</b>). A struct type is used directly when it is the\ntype of a variable, member. Indirect uses arise through\npointers to structs. That is, when use of an incomplete\nstruct is valid, the use is indirect. An example is\n<b>struct one direct; struct two *\nindirect;</b>.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\noptional second word limits the specification to ordinary\nstructs (<b>ord:</b>) or generic structs (<b>gen:</b>).\nGeneric structs are a bit complicated to explain. For\nC</big> ++ <big>, these are non-explicit specializations of\ntemplate classes, or non-template classes within the above.\nOther programming languages have generics, but\n<b>-femit-struct-debug-detailed</b> does not yet implement\nthem.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\nthird word specifies the source files for those structs for\nwhich the compiler should emit debug information. The values\n<b>none</b> and <b>any</b> have the normal meaning. The\nvalue <b>base</b> means that the base of name of the file in\nwhich the type declaration appears must match the base of\nthe name of the main compilation file. In practice, this\nmeans that when compiling <i>foo.c</i>, debug information is\ngenerated for types declared in that file and <i>foo.h</i>,\nbut not other header files. The value <b>sys</b> means those\ntypes satisfying <b>base</b> or declared in system or\ncompiler headers.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>You\nmay need to experiment to determine the best settings for\nyour application.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\ndefault is\n<b>-femit-struct-debug-detailed=all</b>.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption works only with</big> DWARF <big>debug\noutput.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-dwarf2-cfi-asm</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Emit</big> DWARF\n<big>unwind info as compiler generated &quot;.eh_frame&quot;\nsection instead of using</big> GAS <big>&quot;.cfi_*&quot;\ndirectives.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-eliminate-unused-debug-types</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Normally, when\nproducing</big> DWARF <big>output,</big> GCC <big>avoids\nproducing debug symbol output for types that are nowhere\nused in the source file being compiled. Sometimes it is\nuseful to have</big> GCC <big>emit debugging information for\nall types declared in a compilation unit, regardless of\nwhether or not they are actually used in that compilation\nunit, for example if, in the debugger, you want to cast a\nvalue to a type that is not actually used in your program\n(but is declared). More often, however, this results in a\nsignificant amount of wasted space.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>Options\nThat Control Optimization</b> <br>\nThese options control various sorts of\noptimizations.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Without\nany optimization option, the compiler&rsquo;s goal is to\nreduce the cost of compilation and to make debugging produce\nthe expected results. Statements are independent: if you\nstop the program with a breakpoint between statements, you\ncan then assign a new value to any variable or change the\nprogram counter to any other statement in the function and\nget exactly the results you expect from the source\ncode.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Turning\non optimization flags makes the compiler attempt to improve\nthe performance and/or code size at the expense of\ncompilation time and possibly the ability to debug the\nprogram.</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>The\ncompiler performs optimization based on the knowledge it has\nof the program. Compiling multiple files at once to a single\noutput file mode allows the compiler to use information\ngained from all of the files when compiling each of\nthem.</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Not\nall optimizations are controlled directly by a flag. Only\noptimizations that have a flag are listed in this\nsection.</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Most\noptimizations are completely disabled at <b>-O0</b> or if an\n<b>-O</b> level is not set on the command line, even if\nindividual optimization flags are specified. Similarly,\n<b>-Og</b> suppresses many optimization\npasses.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Depending\non the target and how</big> GCC <big>was configured, a\nslightly different set of optimizations may be enabled at\neach <b>-O</b> level than those listed here. You can\ninvoke</big> GCC <big>with <b>-Q --help=optimizers</b> to\nfind out the exact set of optimizations that are enabled at\neach level.</big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><b>-O</b></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><b>-O1</b></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big>Optimize. Optimizing compilation takes\nsomewhat more time, and a lot more memory for a large\nfunction.</big></big></p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>With\n<b>-O</b>, the compiler tries to reduce code size and\nexecution time, without performing any optimizations that\ntake a great deal of compilation time.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-O</b>\nturns on the following optimization flags:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-fauto-inc-dec\n-fbranch-count-reg -fcombine-stack-adjustments\n-fcompare-elim -fcprop-registers -fdce -fdefer-pop\n-fdelayed-branch -fdse -fforward-propagate\n-fguess-branch-probability -fif-conversion -fif-conversion2\n-finline-functions-called-once -fipa-modref -fipa-profile\n-fipa-pure-const -fipa-reference -fipa-reference-addressable\n-fmerge-constants -fmove-loop-invariants\n-fomit-frame-pointer -freorder-blocks -fshrink-wrap\n-fshrink-wrap-separate -fsplit-wide-types -fssa-backprop\n-fssa-phiopt -ftree-bit-ccp -ftree-ccp -ftree-ch\n-ftree-coalesce-vars -ftree-copy-prop -ftree-dce\n-ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre\n-ftree-phiprop -ftree-pta -ftree-scev-cprop -ftree-sink\n-ftree-slsr -ftree-sra -ftree-ter\n-funit-at-a-time</b></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><b>-O2</b></big></big></p> </td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big>Optimize even\nmore.</big> GCC <big>performs nearly all supported\noptimizations that do not involve a space-speed tradeoff. As\ncompared to <b>-O</b>, this option increases both\ncompilation time and the performance of the generated\ncode.</big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-O2</b>\nturns on all optimization flags specified by <b>-O</b>. It\nalso turns on the following optimization\nflags:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-falign-functions\n-falign-jumps -falign-labels -falign-loops -fcaller-saves\n-fcode-hoisting -fcrossjumping -fcse-follow-jumps\n-fcse-skip-blocks -fdelete-null-pointer-checks\n-fdevirtualize -fdevirtualize-speculatively\n-fexpensive-optimizations -ffinite-loops -fgcse -fgcse-lm\n-fhoist-adjacent-loads -finline-functions\n-finline-small-functions -findirect-inlining -fipa-bit-cp\n-fipa-cp -fipa-icf -fipa-ra -fipa-sra -fipa-vrp\n-fisolate-erroneous-paths-dereference -flra-remat\n-foptimize-sibling-calls -foptimize-strlen\n-fpartial-inlining -fpeephole2\n-freorder-blocks-algorithm=stc\n-freorder-blocks-and-partition -freorder-functions\n-frerun-cse-after-loop -fschedule-insns -fschedule-insns2\n-fsched-interblock -fsched-spec -fstore-merging\n-fstrict-aliasing -fthread-jumps -ftree-builtin-call-dce\n-ftree-pre -ftree-switch-conversion -ftree-tail-merge\n-ftree-vrp</b></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Please\nnote the warning under <b>-fgcse</b> about invoking\n<b>-O2</b> on programs that use computed\ngotos.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>NOTE:\n<big>In Ubuntu 8.10 and later versions,\n<b>-D_FORTIFY_SOURCE=2</b> is set by default, and is\nactivated when <b>-O</b> is set to 2 or higher. This enables\nadditional compile-time and run-time checks for several libc\nfunctions. To disable, specify either\n<b>-U_FORTIFY_SOURCE</b> or\n<b>-D_FORTIFY_SOURCE=0</b>.</big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><b>-O3</b></big></big></p> </td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big>Optimize yet more.\n<b>-O3</b> turns on all optimizations specified by\n<b>-O2</b> and also turns on the following optimization\nflags:</big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-fgcse-after-reload\n-fipa-cp-clone -floop-interchange -floop-unroll-and-jam\n-fpeel-loops -fpredictive-commoning -fsplit-loops\n-fsplit-paths -ftree-loop-distribution -ftree-loop-vectorize\n-ftree-partial-pre -ftree-slp-vectorize -funswitch-loops\n-fvect-cost-model -fvect-cost-model=dynamic\n-fversion-loops-for-strides</b></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><b>-O0</b></big></big></p> </td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big>Reduce compilation\ntime and make debugging produce the expected results. This\nis the default.</big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><b>-Os</b></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big>Optimize for size. <b>-Os</b> enables all\n<b>-O2</b> optimizations except those that often increase\ncode size:</big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-falign-functions\n-falign-jumps -falign-labels -falign-loops\n-fprefetch-loop-arrays\n-freorder-blocks-algorithm=stc</b></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>It\nalso enables <b>-finline-functions</b>, causes the compiler\nto tune for code size rather than execution speed, and\nperforms further optimizations designed to reduce code\nsize.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-Ofast</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Disregard strict\nstandards compliance. <b>-Ofast</b> enables all <b>-O3</b>\noptimizations. It also enables optimizations that are not\nvalid for all standard-compliant programs. It turns on\n<b>-ffast-math</b>, <b>-fallow-store-data-races</b> and the\nFortran-specific <b>-fstack-arrays</b>, unless\n<b>-fmax-stack-var-size</b> is specified, and\n<b>-fno-protect-parens</b>.</big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><b>-Og</b></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big>Optimize debugging experience. <b>-Og</b>\nshould be the optimization level of choice for the standard\nedit-compile-debug cycle, offering a reasonable level of\noptimization while maintaining fast compilation and a good\ndebugging experience. It is a better choice than <b>-O0</b>\nfor producing debuggable code because some compiler passes\nthat collect debug information are disabled at\n<b>-O0</b>.</big></big></p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Like\n<b>-O0</b>, <b>-Og</b> completely disables a number of\noptimization passes so that individual options controlling\nthem have no effect. Otherwise <b>-Og</b> enables all\n<b>-O1</b> optimization flags except for those that may\ninterfere with debugging:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>-fbranch-count-reg\n-fdelayed-branch -fdse -fif-conversion -fif-conversion2\n-finline-functions-called-once -fmove-loop-invariants\n-fssa-phiopt -ftree-bit-ccp -ftree-dse -ftree-pta\n-ftree-sra</b></big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>If\nyou use multiple <b>-O</b> options, with or without level\nnumbers, the last such option is the one that is\neffective.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Options\nof the form <b>-f</b><i>flag</i> specify machine-independent\nflags. Most flags have both positive and negative forms; the\nnegative form of <b>-ffoo</b> is <b>-fno-foo</b>. In the\ntable below, only one of the forms is listed---the one you\ntypically use. You can figure out the other form by either\nremoving <b>no-</b> or adding it.</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>The\nfollowing options control specific optimizations. They are\neither activated by <b>-O</b> options or are related to ones\nthat are. You can use the following flags in the rare cases\nwhen &quot;fine-tuning&quot; of optimizations to be\nperformed is desired. <b><br>\n-fno-defer-pop</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>For machines that\nmust pop arguments after a function call, always pop the\narguments as soon as each function returns. At levels\n<b>-O1</b> and higher, <b>-fdefer-pop</b> is the default;\nthis allows the compiler to let arguments accumulate on the\nstack for several function calls and pop them all at\nonce.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fforward-propagate</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform a forward\npropagation pass on</big> RTL. <big>The pass tries to\ncombine two instructions and checks if the result can be\nsimplified. If loop unrolling is active, two passes are\nperformed and the second is scheduled after loop\nunrolling.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption is enabled by default at optimization levels\n<b>-O</b>, <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-ffp-contract=</b><i>style</i></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b>-ffp-contract=off</b>\ndisables floating-point expression contraction.\n<b>-ffp-contract=fast</b> enables floating-point expression\ncontraction such as forming of fused multiply-add operations\nif the target has native support for them.\n<b>-ffp-contract=on</b> enables floating-point expression\ncontraction if allowed by the language standard. This is\ncurrently not implemented and treated equal to\n<b>-ffp-contract=off</b>.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\ndefault is <b>-ffp-contract=fast</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fomit-frame-pointer</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Omit the frame\npointer in functions that don&rsquo;t need one. This avoids\nthe instructions to save, set up and restore the frame\npointer; on many targets it also makes an extra register\navailable.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>On\nsome targets this flag has no effect because the standard\ncalling sequence always uses a frame pointer, so it cannot\nbe omitted.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Note\nthat <b>-fno-omit-frame-pointer</b> doesn&rsquo;t guarantee\nthe frame pointer is used in all functions. Several targets\nalways omit the frame pointer in leaf\nfunctions.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nby default at <b>-O</b> and higher.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-foptimize-sibling-calls</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Optimize sibling and\ntail recursive calls.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-foptimize-strlen</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Optimize various\nstandard C string functions (e.g. &quot;strlen&quot;,\n&quot;strchr&quot; or &quot;strcpy&quot;) and their\n&quot;_FORTIFY_SOURCE&quot; counterparts into faster\nalternatives.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-inline</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Do not expand any\nfunctions inline apart from those marked with the\n&quot;always_inline&quot; attribute. This is the default\nwhen not optimizing.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Single\nfunctions can be exempted from inlining by marking them with\nthe &quot;noinline&quot; attribute.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-finline-small-functions</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Integrate functions\ninto their callers when their body is smaller than expected\nfunction call code (so overall size of program gets\nsmaller). The compiler heuristically decides which functions\nare simple enough to be worth integrating in this way. This\ninlining applies to all functions, even those not declared\ninline.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-findirect-inlining</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Inline also indirect\ncalls that are discovered to be known at compile time thanks\nto previous inlining. This option has any effect only when\ninlining itself is turned on by the\n<b>-finline-functions</b> or <b>-finline-small-functions</b>\noptions.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-finline-functions</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Consider all\nfunctions for inlining, even if they are not declared\ninline. The compiler heuristically decides which functions\nare worth integrating in this way.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>If\nall calls to a given function are integrated, and the\nfunction is declared &quot;static&quot;, then the function\nis normally not output as assembler code in its own\nright.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>. Also enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-finline-functions-called-once</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Consider all\n&quot;static&quot; functions called once for inlining into\ntheir caller even if they are not marked &quot;inline&quot;.\nIf a call to a given function is integrated, then the\nfunction is not output as assembler code in its own\nright.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O1</b>, <b>-O2</b>, <b>-O3</b> and <b>-Os</b>,\nbut not <b>-Og</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fearly-inlining</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Inline functions\nmarked by &quot;always_inline&quot; and functions whose body\nseems smaller than the function call overhead early before\ndoing <b>-fprofile-generate</b> instrumentation and real\ninlining pass. Doing so makes profiling significantly\ncheaper and usually inlining faster on programs having large\nchains of nested wrapper functions.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nby default.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fipa-sra</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform\ninterprocedural scalar replacement of aggregates, removal of\nunused parameters and replacement of parameters passed by\nreference by parameters passed by value.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b> and\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-finline-limit=</b><i>n</i></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>By default,</big> GCC\n<big>limits the size of functions that can be inlined. This\nflag allows coarse control of this limit. <i>n</i> is the\nsize of functions that can be inlined in number of pseudo\ninstructions.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Inlining\nis actually controlled by a number of parameters, which may\nbe specified individually by using <b>--param</b>\n<i>name</i><b>=</b><i>value</i>. The\n<b>-finline-limit=</b><i>n</i> option sets some of these\nparameters as follows: <b><br>\nmax-inline-insns-single</b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>is set to\n<i>n</i>/2.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b>max-inline-insns-auto</b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>is set to\n<i>n</i>/2.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>See\nbelow for a documentation of the individual parameters\ncontrolling inlining and for the defaults of these\nparameters.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><i>Note:</i>\nthere may be no value to <b>-finline-limit</b> that results\nin default behavior.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><i>Note:</i>\npseudo instruction represents, in this particular context,\nan abstract measurement of function&rsquo;s size. In no way\ndoes it represent a count of assembly instructions and as\nsuch its exact meaning might change from one release to an\nanother.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-keep-inline-dllexport</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This is a more\nfine-grained version of <b>-fkeep-inline-functions</b>,\nwhich applies only to functions that are declared using the\n&quot;dllexport&quot; attribute or declspec.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fkeep-inline-functions</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>In C, emit\n&quot;static&quot; functions that are declared\n&quot;inline&quot; into the object file, even if the\nfunction has been inlined into all of its callers. This\nswitch does not affect functions using the &quot;extern\ninline&quot; extension in</big> GNU C90. <big>In C</big> ++\n<big>, emit any and all inline functions into the object\nfile.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fkeep-static-functions</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Emit\n&quot;static&quot; functions into the object file, even if\nthe function is never used.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fkeep-static-consts</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Emit variables\ndeclared &quot;static const&quot; when optimization\nisn&rsquo;t turned on, even if the variables aren&rsquo;t\nreferenced.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>GCC\n<big>enables this option by default. If you want to force\nthe compiler to check if a variable is referenced,\nregardless of whether or not optimization is turned on, use\nthe <b>-fno-keep-static-consts</b> option.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fmerge-constants</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Attempt to merge\nidentical constants (string constants and floating-point\nconstants) across compilation units.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption is the default for optimized compilation if the\nassembler and linker support it. Use\n<b>-fno-merge-constants</b> to inhibit this\nbehavior.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fmerge-all-constants</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Attempt to merge\nidentical constants and identical variables.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption implies <b>-fmerge-constants</b>. In addition to\n<b>-fmerge-constants</b> this considers e.g. even constant\ninitialized arrays or initialized constant variables with\nintegral or floating-point types. Languages like C or\nC</big> ++ <big>require each variable, including multiple\ninstances of the same variable in recursive calls, to have\ndistinct locations, so using this option results in\nnon-conforming behavior.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fmodulo-sched</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform swing modulo\nscheduling immediately before the first scheduling pass.\nThis pass looks at innermost loops and reorders their\ninstructions by overlapping different\niterations.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fmodulo-sched-allow-regmoves</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform more\naggressive SMS-based modulo scheduling with register moves\nallowed. By setting this flag certain anti-dependences edges\nare deleted, which triggers the generation of reg-moves\nbased on the life-range analysis. This option is effective\nonly with <b>-fmodulo-sched</b> enabled.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-branch-count-reg</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Disable the\noptimization pass that scans for opportunities to use\n&quot;decrement and branch&quot; instructions on a count\nregister instead of instruction sequences that decrement a\nregister, compare it against zero, and then branch based\nupon the result. This option is only meaningful on\narchitectures that support such instructions, which include\nx86, PowerPC,</big> IA-64 <big>and S/390. Note that the\n<b>-fno-branch-count-reg</b> option doesn&rsquo;t remove the\ndecrement and branch instructions from the generated\ninstruction stream introduced by other optimization\npasses.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\ndefault is <b>-fbranch-count-reg</b> at <b>-O1</b> and\nhigher, except for <b>-Og</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-function-cse</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Do not put function\naddresses in registers; make each instruction that calls a\nconstant function contain the function&rsquo;s address\nexplicitly.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption results in less efficient code, but some strange\nhacks that alter the assembler output may be confused by the\noptimizations performed when this option is not\nused.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\ndefault is <b>-ffunction-cse</b></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fno-zero-initialized-in-bss</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>If the target\nsupports a</big> BSS <big>section,</big> GCC <big>by default\nputs variables that are initialized to zero into</big> BSS.\n<big>This can save space in the resulting\ncode.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\noption turns off this behavior because some programs\nexplicitly rely on variables going to the data\nsection---e.g., so that the resulting executable can find\nthe beginning of that section and/or make assumptions based\non that.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\ndefault is <b>-fzero-initialized-in-bss</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fthread-jumps</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform optimizations\nthat check to see if a jump branches to a location where\nanother comparison subsumed by the first is found. If so,\nthe first branch is redirected to either the destination of\nthe second branch or a point immediately following it,\ndepending on whether the condition is known to be true or\nfalse.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fsplit-wide-types</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>When using a type\nthat occupies multiple registers, such as &quot;long\nlong&quot; on a 32-bit system, split the registers apart and\nallocate them independently. This normally generates better\ncode for those types, but may make debugging more\ndifficult.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fsplit-wide-types-early</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Fully split wide\ntypes early, instead of very late. This option has no effect\nunless <b>-fsplit-wide-types</b> is turned\non.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\nis the default on some targets.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fcse-follow-jumps</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>In common\nsubexpression elimination (</big> CSE <big>), scan through\njump instructions when the target of the jump is not reached\nby any other path. For example, when</big> CSE\n<big>encounters an &quot;if&quot; statement with an\n&quot;else&quot; clause,</big> CSE <big>follows the jump\nwhen the condition tested is false.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fcse-skip-blocks</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This is similar to\n<b>-fcse-follow-jumps</b>, but causes</big> CSE <big>to\nfollow jumps that conditionally skip over blocks. When</big>\nCSE <big>encounters a simple &quot;if&quot; statement with\nno else clause, <b>-fcse-skip-blocks</b> causes</big> CSE\n<big>to follow the jump around the body of the\n&quot;if&quot;.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-frerun-cse-after-loop</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Re-run common\nsubexpression elimination after loop optimizations are\nperformed.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fgcse</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform a global\ncommon subexpression elimination pass. This pass also\nperforms global constant and copy\npropagation.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><i>Note:</i>\nWhen compiling a program using computed gotos, a</big> GCC\n<big>extension, you may get better run-time performance if\nyou disable the global common subexpression elimination pass\nby adding <b>-fno-gcse</b> to the command\nline.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fgcse-lm</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>When <b>-fgcse-lm</b>\nis enabled, global common subexpression elimination attempts\nto move loads that are only killed by stores into\nthemselves. This allows a loop containing a load/store\nsequence to be changed to a load outside the loop, and a\ncopy/store within the loop.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nby default when <b>-fgcse</b> is enabled.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fgcse-sm</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>When <b>-fgcse-sm</b>\nis enabled, a store motion pass is run after global common\nsubexpression elimination. This pass attempts to move stores\nout of loops. When used in conjunction with\n<b>-fgcse-lm</b>, loops containing a load/store sequence can\nbe changed to a load before the loop and a store after the\nloop.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Not\nenabled at any optimization level.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fgcse-las</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>When\n<b>-fgcse-las</b> is enabled, the global common\nsubexpression elimination pass eliminates redundant loads\nthat come after stores to the same memory location (both\npartial and full redundancies).</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Not\nenabled at any optimization level.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fgcse-after-reload</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>When\n<b>-fgcse-after-reload</b> is enabled, a redundant load\nelimination pass is performed after reload. The purpose of\nthis pass is to clean up redundant spilling.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-faggressive-loop-optimizations</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option tells the\nloop optimizer to use language constraints to derive bounds\nfor the number of iterations of a loop. This assumes that\nloop code does not invoke undefined behavior by for example\ncausing signed integer overflows or out-of-bound array\naccesses. The bounds for the number of iterations of a loop\nare used to guide loop unrolling and peeling and loop exit\ntest optimizations. This option is enabled by\ndefault.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-funconstrained-commons</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This option tells the\ncompiler that variables declared in common blocks (e.g.\nFortran) may later be overridden with longer trailing\narrays. This prevents certain optimizations that depend on\nknowing the array bounds.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fcrossjumping</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform cross-jumping\ntransformation. This transformation unifies equivalent code\nand saves code size. The resulting code may or may not\nperform better than without cross-jumping.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fauto-inc-dec</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Combine increments or\ndecrements of addresses with memory accesses. This pass is\nalways skipped on architectures that do not have\ninstructions to support this. Enabled by default at\n<b>-O</b> and higher on architectures that support\nthis.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdce</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform dead code\nelimination (</big> DCE <big>) on</big> RTL. <big>Enabled by\ndefault at <b>-O</b> and higher.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdse</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Perform dead store\nelimination (</big> DSE <big>) on</big> RTL. <big>Enabled by\ndefault at <b>-O</b> and higher.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fif-conversion</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Attempt to transform\nconditional jumps into branch-less equivalents. This\nincludes use of conditional moves, min, max, set flags and\nabs instructions, and some tricks doable by standard\narithmetics. The use of conditional execution on chips where\nit is available is controlled by\n<b>-fif-conversion2</b>.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>, but\nnot with <b>-Og</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fif-conversion2</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Use conditional\nexecution (where available) to transform conditional jumps\ninto branch-less equivalents.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Enabled\nat levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>, but\nnot with <b>-Og</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>-fdeclone-ctor-dtor</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>The C</big> ++\n<big>ABI <big>requires multiple entry points for\nconstructors and destructors: one for a base subobject, one\nfor a complete object, and one for a virtual destructor that\ncalls operator delete afterwards. For a hierarchy with\nvirtual bases, the base and complete variants are clones,\nwhich means two copies of the function. With this option,\nthe base and complete variants are changed to be thunks that\ncall a common implementation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby <b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdelete-null-pointer-checks</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\nprograms cannot safely dereference null pointers, and that\nno code or data element resides at address zero. This option\nenables simple constant folding optimizations at all\noptimization levels. In addition, other optimization passes\nin</big> GCC <big>use this flag to control global dataflow\nanalyses that eliminate useless checks for null pointers;\nthese assume that a memory access to address zero always\nresults in a trap, so that if a pointer is checked after it\nhas already been dereferenced, it cannot be\nnull.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nhowever that in some environments this assumption is not\ntrue. Use <b>-fno-delete-null-pointer-checks</b> to disable\nthis optimization for programs that depend on that\nbehavior.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled by default on most targets. On Nios</big>\nII ELF, <big>it defaults to off. On</big> AVR, CR16,\n<big>and</big> MSP430, <big>this option is completely\ndisabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Passes\nthat use the dataflow information are enabled independently\nat different optimization levels.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdevirtualize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to\nconvert calls to virtual functions to direct calls. This is\ndone both within a procedure and interprocedurally as part\nof indirect inlining (<b>-findirect-inlining</b>) and\ninterprocedural constant propagation (<b>-fipa-cp</b>).\nEnabled at levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdevirtualize-speculatively</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to\nconvert calls to virtual functions to speculative direct\ncalls. Based on the analysis of the type inheritance graph,\ndetermine for a given call the set of likely targets. If the\nset is small, preferably of size 1, change the call into a\nconditional deciding between direct and indirect calls. The\nspeculative calls enable more optimizations, such as\ninlining. When they seem useless after further optimization,\nthey are converted back into original\nform.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdevirtualize-at-ltrans</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Stream extra\ninformation needed for aggressive devirtualization when\nrunning the link-time optimizer in local transformation\nmode. This option enables more devirtualization but\nsignificantly increases the size of streamed data. For this\nreason it is disabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fexpensive-optimizations</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform a number\nof minor optimizations that are relatively\nexpensive.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-free</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to\nremove redundant extension instructions. This is especially\nhelpful for the x86-64 architecture, which implicitly\nzero-extends in 64-bit registers after writing to their\nlower 32-bit half.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nfor Alpha, AArch64 and x86 at levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-lifetime-dse</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>In C</big> ++\n<big>the value of an object is only affected by changes\nwithin its lifetime: when the constructor begins, the object\nhas an indeterminate value, and any changes during the\nlifetime of the object are dead when the object is\ndestroyed. Normally dead store elimination will take\nadvantage of this; if your code relies on the value of the\nobject storage persisting beyond the lifetime of the object,\nyou can use this flag to disable this optimization. To\npreserve stores before the constructor starts (e.g. because\nyour operator new clears the object storage) but still treat\nthe object as dead after the destructor, you can use\n<b>-flifetime-dse=1</b>. The default behavior can be\nexplicitly selected with <b>-flifetime-dse=2</b>.\n<b>-flifetime-dse=0</b> is equivalent to\n<b>-fno-lifetime-dse</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flive-range-shrinkage</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to\ndecrease register pressure through register live range\nshrinkage. This is helpful for fast processors with small or\nmoderate size register sets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fira-algorithm=</b><i>algorithm</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the\nspecified coloring algorithm for the integrated register\nallocator. The <i>algorithm</i> argument can be\n<b>priority</b>, which specifies Chow&rsquo;s priority\ncoloring, or</big> <b>CB</b> <big>, which specifies\nChaitin-Briggs coloring. Chaitin-Briggs coloring is not\nimplemented for all architectures, but for those targets\nthat do support it, it is the default because it generates\nbetter code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fira-region=</b><i>region</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use specified\nregions for the integrated register allocator. The\n<i>region</i> argument should be one of the\nfollowing:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Use all loops as register allocation\nregions. This can give the best results for machines with a\nsmall and/or irregular register set.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>mixed</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Use all loops\nexcept for loops with small register pressure as the\nregions. This value usually gives the best results in most\ncases and for most architectures, and is enabled by default\nwhen compiling with optimization for speed (<b>-O</b>,\n<b>-O2</b>, ...).</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>one</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Use all functions as a single region.\nThis typically results in the smallest code size, and is\nenabled by default for <b>-Os</b> or\n<b>-O0</b>.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fira-hoist-pressure</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use</big> IRA\n<big>to evaluate register pressure in the code hoisting pass\nfor decisions to hoist expressions. This option usually\nresults in smaller code, but it can slow the compiler\ndown.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled at level <b>-Os</b> for all\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fira-loop-pressure</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use</big> IRA\n<big>to evaluate register pressure in loops for decisions to\nmove loop invariants. This option usually results in\ngeneration of faster and smaller code on machines with large\nregister files (&gt;= 32 registers), but it can slow the\ncompiler down.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled at level <b>-O3</b> for some\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-ira-share-save-slots</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable sharing\nof stack slots used for saving call-used hard registers\nliving through a call. Each hard register gets a separate\nstack slot, and as a result function stack frames are\nlarger.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-ira-share-spill-slots</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable sharing\nof stack slots allocated for pseudo-registers. Each\npseudo-register that does not get a hard register gets a\nseparate stack slot, and as a result function stack frames\nare larger.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flra-remat</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nCFG-sensitive rematerialization in</big> LRA. <big>Instead\nof loading values of spilled pseudos,</big> LRA <big>tries\nto rematerialize (recalculate) values if it is\nprofitable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdelayed-branch</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If supported for\nthe target machine, attempt to reorder instructions to\nexploit instruction slots available after delayed branch\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>, but\nnot at <b>-Og</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fschedule-insns</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If supported for\nthe target machine, attempt to reorder instructions to\neliminate execution stalls due to required data being\nunavailable. This helps machines that have slow floating\npoint or memory load instructions by allowing other\ninstructions to be issued until the result of the load or\nfloating-point instruction is\nrequired.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fschedule-insns2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Similar to\n<b>-fschedule-insns</b>, but requests an additional pass of\ninstruction scheduling after register allocation has been\ndone. This is especially useful on machines with a\nrelatively small number of registers and where memory load\ninstructions take more than one cycle.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-sched-interblock</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\ninstruction scheduling across basic blocks, which is\nnormally enabled when scheduling before register allocation,\ni.e. with <b>-fschedule-insns</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-sched-spec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\nspeculative motion of non-load instructions, which is\nnormally enabled when scheduling before register allocation,\ni.e. with <b>-fschedule-insns</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-pressure</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable register\npressure sensitive insn scheduling before register\nallocation. This only makes sense when scheduling before\nregister allocation is enabled, i.e. with\n<b>-fschedule-insns</b> or at <b>-O2</b> or higher. Usage of\nthis option can improve the generated code and decrease its\nsize by preventing register pressure increase above the\nnumber of available hard registers and subsequent spills in\nregister allocation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-spec-load</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow\nspeculative motion of some load instructions. This only\nmakes sense when scheduling before register allocation, i.e.\nwith <b>-fschedule-insns</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-spec-load-dangerous</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow\nspeculative motion of more load instructions. This only\nmakes sense when scheduling before register allocation, i.e.\nwith <b>-fschedule-insns</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-stalled-insns\n<br>\n-fsched-stalled-insns=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Define how many\ninsns (if any) can be moved prematurely from the queue of\nstalled insns into the ready list during the second\nscheduling pass. <b>-fno-sched-stalled-insns</b> means that\nno insns are moved prematurely,\n<b>-fsched-stalled-insns=0</b> means there is no limit on\nhow many queued insns can be moved prematurely.\n<b>-fsched-stalled-insns</b> without a value is equivalent\nto <b>-fsched-stalled-insns=1</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-stalled-insns-dep\n<br>\n\n-fsched-stalled-insns-dep=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Define how many\ninsn groups (cycles) are examined for a dependency on a\nstalled insn that is a candidate for premature removal from\nthe queue of stalled insns. This has an effect only during\nthe second scheduling pass, and only if\n<b>-fsched-stalled-insns</b> is used.\n<b>-fno-sched-stalled-insns-dep</b> is equivalent to\n<b>-fsched-stalled-insns-dep=0</b>.\n<b>-fsched-stalled-insns-dep</b> without a value is\nequivalent to\n<b>-fsched-stalled-insns-dep=1</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched2-use-superblocks</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When scheduling\nafter register allocation, use superblock scheduling. This\nallows motion across basic block boundaries, resulting in\nfaster schedules. This option is experimental, as not all\nmachine descriptions used by</big> GCC <big>model the</big>\nCPU <big>closely enough to avoid unreliable results from the\nalgorithm.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nonly makes sense when scheduling after register allocation,\ni.e. with <b>-fschedule-insns2</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-group-heuristic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the group\nheuristic in the scheduler. This heuristic favors the\ninstruction that belongs to a schedule group. This is\nenabled by default when scheduling is enabled, i.e. with\n<b>-fschedule-insns</b> or <b>-fschedule-insns2</b> or at\n<b>-O2</b> or higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-critical-path-heuristic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\ncritical-path heuristic in the scheduler. This heuristic\nfavors instructions on the critical path. This is enabled by\ndefault when scheduling is enabled, i.e. with\n<b>-fschedule-insns</b> or <b>-fschedule-insns2</b> or at\n<b>-O2</b> or higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-spec-insn-heuristic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nspeculative instruction heuristic in the scheduler. This\nheuristic favors speculative instructions with greater\ndependency weakness. This is enabled by default when\nscheduling is enabled, i.e. with <b>-fschedule-insns</b> or\n<b>-fschedule-insns2</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-rank-heuristic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the rank\nheuristic in the scheduler. This heuristic favors the\ninstruction belonging to a basic block with greater size or\nfrequency. This is enabled by default when scheduling is\nenabled, i.e. with <b>-fschedule-insns</b> or\n<b>-fschedule-insns2</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-last-insn-heuristic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nlast-instruction heuristic in the scheduler. This heuristic\nfavors the instruction that is less dependent on the last\ninstruction scheduled. This is enabled by default when\nscheduling is enabled, i.e. with <b>-fschedule-insns</b> or\n<b>-fschedule-insns2</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-dep-count-heuristic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\ndependent-count heuristic in the scheduler. This heuristic\nfavors the instruction that has more instructions depending\non it. This is enabled by default when scheduling is\nenabled, i.e. with <b>-fschedule-insns</b> or\n<b>-fschedule-insns2</b> or at <b>-O2</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-freschedule-modulo-scheduled-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Modulo\nscheduling is performed before traditional scheduling. If a\nloop is modulo scheduled, later scheduling passes may change\nits schedule. Use this option to control that\nbehavior.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fselective-scheduling</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Schedule\ninstructions using selective scheduling algorithm. Selective\nscheduling runs instead of the first scheduler\npass.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fselective-scheduling2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Schedule\ninstructions using selective scheduling algorithm. Selective\nscheduling runs instead of the second scheduler\npass.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsel-sched-pipelining</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable software\npipelining of innermost loops during selective scheduling.\nThis option has no effect unless one of\n<b>-fselective-scheduling</b> or\n<b>-fselective-scheduling2</b> is turned\non.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsel-sched-pipelining-outer-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When pipelining\nloops during selective scheduling, also pipeline outer\nloops. This option has no effect unless\n<b>-fsel-sched-pipelining</b> is turned\non.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsemantic-interposition</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Some object\nformats, like</big> ELF, <big>allow interposing of symbols\nby the dynamic linker. This means that for symbols exported\nfrom the</big> DSO, <big>the compiler cannot perform\ninterprocedural propagation, inlining and other\noptimizations in anticipation that the function or variable\nin question may change. While this feature is useful, for\nexample, to rewrite memory allocation functions by a\ndebugging implementation, it is expensive in the terms of\ncode quality. With <b>-fno-semantic-interposition</b> the\ncompiler assumes that if interposition happens for functions\nthe overwriting function will have precisely the same\nsemantics (and side effects). Similarly if interposition\nhappens for variables, the constructor of the variable will\nbe the same. The flag has no effect for functions explicitly\ndeclared inline (where it is never allowed for interposition\nto change semantics) and for symbols explicitly declared\nweak.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fshrink-wrap</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit function\nprologues only before parts of the function that need it,\nrather than at the top of the function. This flag is enabled\nby default at <b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fshrink-wrap-separate</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Shrink-wrap\nseparate parts of the prologue and epilogue separately, so\nthat those parts are only executed when needed. This option\nis on by default, but has no effect unless\n<b>-fshrink-wrap</b> is also turned on and the target\nsupports this.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcaller-saves</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nallocation of values to registers that are clobbered by\nfunction calls, by emitting extra instructions to save and\nrestore the registers around such calls. Such allocation is\ndone only when it seems to result in better\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is always enabled by default on certain machines,\nusually those which have no call-preserved registers to use\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcombine-stack-adjustments</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tracks stack\nadjustments (pushes and pops) and stack memory references\nand then tries to find ways to combine\nthem.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby default at <b>-O1</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-ra</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use caller save\nregisters for allocation if those registers are not used by\nany called function. In that case it is not necessary to\nsave and restore them around calls. This is only possible if\ncalled functions are part of same compilation unit as\ncurrent function and they are compiled before\nit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>, however the\noption is disabled if generated code will be instrumented\nfor profiling (<b>-p</b>, or <b>-pg</b>) or if\ncallee&rsquo;s register usage cannot be known exactly (this\nhappens on targets that do not expose prologues and\nepilogues in</big> RTL <big>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fconserve-stack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to\nminimize stack usage. The compiler attempts to use less\nstack space, even if that makes the program slower. This\noption implies setting the <b>large-stack-frame</b>\nparameter to 100 and the <b>large-stack-frame-growth</b>\nparameter to 400.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-reassoc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\nreassociation on trees. This flag is enabled by default at\n<b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcode-hoisting</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform code\nhoisting. Code hoisting tries to move the evaluation of\nexpressions executed on all paths to the function exit as\nearly as possible. This is especially useful as a code size\noptimization, but it often helps for code speed as well.\nThis flag is enabled by default at <b>-O2</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-pre</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform partial\nredundancy elimination (</big> PRE <big>) on trees. This\nflag is enabled by default at <b>-O2</b> and\n<b>-O3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-partial-pre</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make partial\nredundancy elimination (</big> PRE <big>) more aggressive.\nThis flag is enabled by default at\n<b>-O3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-forwprop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform forward\npropagation on trees. This flag is enabled by default at\n<b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-fre</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform full\nredundancy elimination (</big> FRE <big>) on trees. The\ndifference between</big> FRE <big>and</big> PRE <big>is\nthat</big> FRE <big>only considers expressions that are\ncomputed on all paths leading to the redundant computation.\nThis analysis is faster than</big> PRE, <big>though it\nexposes fewer redundancies. This flag is enabled by default\nat <b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-phiprop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform hoisting\nof loads from conditional pointers on trees. This pass is\nenabled by default at <b>-O</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fhoist-adjacent-loads</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Speculatively\nhoist loads from both branches of an if-then-else if the\nloads are from adjacent locations in the same structure and\nthe target architecture has a conditional move instruction.\nThis flag is enabled by default at <b>-O2</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-copy-prop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform copy\npropagation on trees. This pass eliminates unnecessary copy\noperations. This flag is enabled by default at <b>-O</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-pure-const</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Discover which\nfunctions are pure or constant. Enabled by default at\n<b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-reference</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Discover which\nstatic variables do not escape the compilation unit. Enabled\nby default at <b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-reference-addressable</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Discover\nread-only, write-only and non-addressable static variables.\nEnabled by default at <b>-O</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-stack-alignment</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Reduce stack\nalignment on call sites if possible. Enabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-pta</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\ninterprocedural pointer analysis and interprocedural\nmodification and reference analysis. This option can cause\nexcessive memory and compile-time usage on large compilation\nunits. It is not enabled by default at any optimization\nlevel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-profile</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\ninterprocedural profile propagation. The functions called\nonly from cold functions are marked as cold. Also functions\nexecuted once (such as &quot;cold&quot;,\n&quot;noreturn&quot;, static constructors or destructors)\nare identified. Cold functions and loop less parts of\nfunctions executed once are then optimized for size. Enabled\nby default at <b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-modref</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\ninterprocedural mod/ref analysis. This optimization analyzes\nthe side effects of functions (memory locations that are\nmodified or referenced) and enables better optimization\nacross the function call boundary. This flag is enabled by\ndefault at <b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-cp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\ninterprocedural constant propagation. This optimization\nanalyzes the program to determine when values passed to\nfunctions are constants and then optimizes accordingly. This\noptimization can substantially increase performance if the\napplication has constants passed to functions. This flag is\nenabled by default at <b>-O2</b>, <b>-Os</b> and <b>-O3</b>.\nIt is also enabled by <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-cp-clone</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform function\ncloning to make interprocedural constant propagation\nstronger. When enabled, interprocedural constant propagation\nperforms function cloning when externally visible function\ncan be called with constant arguments. Because this\noptimization can create multiple copies of functions, it may\nsignificantly increase code size (see <b>--param\nipa-cp-unit-growth=</b><i>value</i>). This flag is enabled\nby default at <b>-O3</b>. It is also enabled by\n<b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-bit-cp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When enabled,\nperform interprocedural bitwise constant propagation. This\nflag is enabled by default at <b>-O2</b> and by\n<b>-fprofile-use</b> and <b>-fauto-profile</b>. It requires\nthat <b>-fipa-cp</b> is enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-vrp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When enabled,\nperform interprocedural propagation of value ranges. This\nflag is enabled by default at <b>-O2</b>. It requires that\n<b>-fipa-cp</b> is enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fipa-icf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\nIdentical Code Folding for functions and read-only\nvariables. The optimization reduces code size and may\ndisturb unwind stacks by replacing a function by equivalent\none with a different name. The optimization works more\neffectively with link-time optimization\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Although\nthe behavior is similar to the Gold Linker&rsquo;s</big> ICF\n<big>optimization,</big> GCC ICF <big>works on different\nlevels and thus the optimizations are not same - there are\nequivalences that are found only by</big> GCC <big>and\nequivalences found only by Gold.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nflag is enabled by default at <b>-O2</b> and\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flive-patching=</b><i>level</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control</big>\nGCC <big>&rsquo;s optimizations to produce output suitable\nfor live-patching.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthe compiler&rsquo;s optimization uses a function&rsquo;s\nbody or information extracted from its body to\noptimize/change another function, the latter is called an\nimpacted function of the former. If a function is patched,\nits impacted functions should be patched\ntoo.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nimpacted functions are determined by the compiler&rsquo;s\ninterprocedural optimizations. For example, a caller is\nimpacted when inlining a function into its caller, cloning a\nfunction and changing its caller to call this new clone, or\nextracting a function&rsquo;s pureness/constness information\nto optimize its direct or indirect callers,\netc.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Usually,\nthe more</big> IPA <big>optimizations enabled, the larger\nthe number of impacted functions for each function. In order\nto control the number of impacted functions and more easily\ncompute the list of impacted function,</big> IPA\n<big>optimizations can be partially enabled at two different\nlevels.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<i>level</i> argument should be one of the following:\n<b><br>\ninline-clone</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Only enable\ninlining and cloning optimizations, which includes inlining,\ncloning, interprocedural scalar replacement of aggregates\nand partial inlining. As a result, when patching a function,\nall its callers and its clones&rsquo; callers are impacted,\ntherefore need to be patched as well.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><b>-flive-patching=inline-clone</b>\ndisables the following optimization flags:\n<b>-fwhole-program -fipa-pta -fipa-reference -fipa-ra\n-fipa-icf -fipa-icf-functions -fipa-icf-variables\n-fipa-bit-cp -fipa-vrp -fipa-pure-const\n-fipa-reference-addressable -fipa-stack-alignment\n-fipa-modref</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>inline-only-static</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Only enable\ninlining of static functions. As a result, when patching a\nstatic function, all its callers are impacted and so need to\nbe patched as well.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>In\naddition to all the flags that\n<b>-flive-patching=inline-clone</b> disables,\n<b>-flive-patching=inline-only-static</b> disables the\nfollowing additional optimization flags: <b>-fipa-cp-clone\n-fipa-sra -fpartial-inlining\n-fipa-cp</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\n<b>-flive-patching</b> is specified without any value, the\ndefault value is <i>inline-clone</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nflag is disabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat <b>-flive-patching</b> is not supported with link-time\noptimization (<b>-flto</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fisolate-erroneous-paths-dereference</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Detect paths\nthat trigger erroneous or undefined behavior due to\ndereferencing a null pointer. Isolate those paths from the\nmain control flow and turn the statement with erroneous or\nundefined behavior into a trap. This flag is enabled by\ndefault at <b>-O2</b> and higher and depends on\n<b>-fdelete-null-pointer-checks</b> also being\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fisolate-erroneous-paths-attribute</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Detect paths\nthat trigger erroneous or undefined behavior due to a null\nvalue being used in a way forbidden by a\n&quot;returns_nonnull&quot; or &quot;nonnull&quot;\nattribute. Isolate those paths from the main control flow\nand turn the statement with erroneous or undefined behavior\ninto a trap. This is not currently enabled, but may be\nenabled by <b>-O2</b> in the future.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-sink</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform forward\nstore motion on trees. This flag is enabled by default at\n<b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-bit-ccp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform sparse\nconditional bit constant propagation on trees and propagate\npointer alignment information. This pass only operates on\nlocal scalar variables and is enabled by default at\n<b>-O1</b> and higher, except for <b>-Og</b>. It requires\nthat <b>-ftree-ccp</b> is enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-ccp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform sparse\nconditional constant propagation (</big> CCP <big>) on\ntrees. This pass only operates on local scalar variables and\nis enabled by default at <b>-O</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fssa-backprop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Propagate\ninformation about uses of a value up the definition chain in\norder to simplify the definitions. For example, this pass\nstrips sign operations if the sign of a value never matters.\nThe flag is enabled by default at <b>-O</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fssa-phiopt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform pattern\nmatching on</big> SSA PHI <big>nodes to optimize conditional\ncode. This pass is enabled by default at <b>-O1</b> and\nhigher, except for <b>-Og</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-switch-conversion</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\nconversion of simple initializations in a switch to\ninitializations from a scalar array. This flag is enabled by\ndefault at <b>-O2</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-tail-merge</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Look for\nidentical code sequences. When found, replace one with a\njump to the other. This optimization is known as tail\nmerging or cross jumping. This flag is enabled by default at\n<b>-O2</b> and higher. The compilation time in this pass can\nbe limited using <b>max-tail-merge-comparisons</b> parameter\nand <b>max-tail-merge-iterations</b>\nparameter.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-dce</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform dead\ncode elimination (</big> DCE <big>) on trees. This flag is\nenabled by default at <b>-O</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-builtin-call-dce</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\nconditional dead code elimination (</big> DCE <big>) for\ncalls to built-in functions that may set &quot;errno&quot;\nbut are otherwise free of side effects. This flag is enabled\nby default at <b>-O2</b> and higher if <b>-Os</b> is not\nalso specified.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ffinite-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that a\nloop with an exit will eventually take the exit and not loop\nindefinitely. This allows the compiler to remove loops that\notherwise have no side-effects, not considering eventual\nendless looping as such.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled by default at <b>-O2</b> for C</big> ++\n<big>with -std=c++11 or higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-dominator-opts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform a\nvariety of simple scalar cleanups (constant/copy\npropagation, redundancy elimination, range propagation and\nexpression simplification) based on a dominator tree\ntraversal. This also performs jump threading (to reduce\njumps to jumps). This flag is enabled by default at\n<b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-dse</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform dead\nstore elimination (</big> DSE <big>) on trees. A dead store\nis a store into a memory location that is later overwritten\nby another store without any intervening loads. In this case\nthe earlier store can be deleted. This flag is enabled by\ndefault at <b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-ch</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform loop\nheader copying on trees. This is beneficial since it\nincreases effectiveness of code motion optimizations. It\nalso saves one jump. This flag is enabled by default at\n<b>-O</b> and higher. It is not enabled for <b>-Os</b>,\nsince it usually increases code size.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-loop-optimize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform loop\noptimizations on trees. This flag is enabled by default at\n<b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-loop-linear\n<br>\n-floop-strip-mine <br>\n-floop-block</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform loop\nnest optimizations. Same as <b>-floop-nest-optimize</b>. To\nuse this code transformation,</big> GCC <big>has to be\nconfigured with <b>--with-isl</b> to enable the Graphite\nloop transformation infrastructure.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fgraphite-identity</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nidentity transformation for graphite. For every SCoP we\ngenerate the polyhedral representation and transform it back\nto gimple. Using <b>-fgraphite-identity</b> we can check the\ncosts or benefits of the</big> GIMPLE <big>-&gt;</big>\nGRAPHITE <big>-&gt;</big> GIMPLE <big>transformation. Some\nminimal optimizations are also performed by the code\ngenerator isl, like index splitting and dead code\nelimination in loops.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-floop-nest-optimize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the isl\nbased loop nest optimizer. This is a generic loop nest\noptimizer based on the Pluto optimization algorithms. It\ncalculates a loop structure optimized for data-locality and\nparallelism. This option is\nexperimental.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-floop-parallelize-all</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the Graphite\ndata dependence analysis to identify loops that can be\nparallelized. Parallelize all the loops that can be analyzed\nto not contain loop carried dependences without checking\nthat it is profitable to parallelize the\nloops.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-coalesce-vars</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>While\ntransforming the program out of the</big> SSA\n<big>representation, attempt to reduce copying by coalescing\nversions of different user-defined variables, instead of\njust compiler temporaries. This may severely limit the\nability to debug an optimized program compiled with\n<b>-fno-var-tracking-assignments</b>. In the negated form,\nthis flag prevents</big> SSA <big>coalescing of user\nvariables. This option is enabled by default if optimization\nis enabled, and it does very little\notherwise.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-loop-if-convert</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to\ntransform conditional jumps in the innermost loops to\nbranch-less equivalents. The intent is to remove\ncontrol-flow from the innermost loops in order to improve\nthe ability of the vectorization pass to handle these loops.\nThis is enabled by default if vectorization is\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-loop-distribution</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform loop\ndistribution. This flag can improve cache performance on big\nloop bodies and allow further loop optimizations, like\nparallelization or vectorization, to take place. For\nexample, the loop</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>DO\nI = 1, N <br>\nA(I) = B(I) + C <br>\nD(I) = E(I) * F <br>\nENDDO</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>is\ntransformed to</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>DO\nI = 1, N <br>\nA(I) = B(I) + C <br>\nENDDO <br>\nDO I = 1, N <br>\nD(I) = E(I) * F <br>\nENDDO</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nflag is enabled by default at <b>-O3</b>. It is also enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-loop-distribute-patterns</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform loop\ndistribution of patterns that can be code generated with\ncalls to a library. This flag is enabled by default at\n<b>-O2</b> and higher, and by <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\npass distributes the initialization loops and generates a\ncall to memset zero. For example, the\nloop</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>DO\nI = 1, N <br>\nA(I) = 0 <br>\nB(I) = A(I) + I <br>\nENDDO</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>is\ntransformed to</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>DO\nI = 1, N <br>\nA(I) = 0 <br>\nENDDO <br>\nDO I = 1, N <br>\nB(I) = A(I) + I <br>\nENDDO</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>and\nthe initialization loop is transformed into a call to memset\nzero. This flag is enabled by default at <b>-O3</b>. It is\nalso enabled by <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-floop-interchange</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform loop\ninterchange outside of graphite. This flag can improve cache\nperformance on loop nest and allow further loop\noptimizations, like vectorization, to take place. For\nexample, the loop</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>for\n(int i = 0; i &lt; N; i++) <br>\nfor (int j = 0; j &lt; N; j++) <br>\nfor (int k = 0; k &lt; N; k++) <br>\nc[i][j] = c[i][j] + a[i][k]*b[k][j];</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>is\ntransformed to</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>for\n(int i = 0; i &lt; N; i++) <br>\nfor (int k = 0; k &lt; N; k++) <br>\nfor (int j = 0; j &lt; N; j++) <br>\nc[i][j] = c[i][j] + a[i][k]*b[k][j];</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nflag is enabled by default at <b>-O3</b>. It is also enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-floop-unroll-and-jam</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Apply unroll and\njam transformations on feasible loops. In a loop nest this\nunrolls the outer loop by some factor and fuses the\nresulting multiple inner loops. This flag is enabled by\ndefault at <b>-O3</b>. It is also enabled by\n<b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-loop-im</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform loop\ninvariant motion on trees. This pass moves only invariants\nthat are hard to handle at</big> RTL <big>level (function\ncalls, operations that expand to nontrivial sequences of\ninsns). With <b>-funswitch-loops</b> it also moves operands\nof conditions that are invariant out of the loop, so that we\ncan use just trivial invariantness analysis in loop\nunswitching. The pass also includes store\nmotion.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-loop-ivcanon</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Create a\ncanonical counter for number of iterations in loops for\nwhich determining number of iterations requires complicated\nanalysis. Later optimizations then may determine the number\neasily. Useful especially in connection with\nunrolling.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-scev-cprop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform final\nvalue replacement. If a variable is modified in a loop in\nsuch a way that its value when exiting the loop can be\ndetermined using only its initial value and the number of\nloop iterations, replace uses of the final value by such a\ncomputation, provided it is sufficiently cheap. This reduces\ndata dependencies and may allow further simplifications.\nEnabled by default at <b>-O</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fivopts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\ninduction variable optimizations (strength reduction,\ninduction variable merging and induction variable\nelimination) on trees.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-parallelize-loops=n</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Parallelize\nloops, i.e., split their iteration space to run in n\nthreads. This is only possible for loops whose iterations\nare independent and can be arbitrarily reordered. The\noptimization is only profitable on multiprocessor machines,\nfor loops that are CPU-intensive, rather than constrained\ne.g. by memory bandwidth. This option implies\n<b>-pthread</b>, and thus is only supported on targets that\nhave support for <b>-pthread</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-pta</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\nfunction-local points-to analysis on trees. This flag is\nenabled by default at <b>-O1</b> and higher, except for\n<b>-Og</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-sra</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform scalar\nreplacement of aggregates. This pass replaces structure\nreferences with scalars to prevent committing structures to\nmemory too early. This flag is enabled by default at\n<b>-O1</b> and higher, except for\n<b>-Og</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstore-merging</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform merging\nof narrow stores to consecutive memory addresses. This pass\nmerges contiguous stores of immediate values narrower than a\nword into fewer wider stores to reduce the number of\ninstructions. This is enabled by default at <b>-O2</b> and\nhigher as well as <b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-ter</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\ntemporary expression replacement during the</big> SSA-\n<big>&gt;normal phase. Single use/single def temporaries are\nreplaced at their use location with their defining\nexpression. This results in non-GIMPLE code, but gives the\nexpanders much more complex trees to work on resulting in\nbetter</big> RTL <big>generation. This is enabled by default\nat <b>-O</b> and higher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-slsr</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\nstraight-line strength reduction on trees. This recognizes\nrelated expressions involving multiplications and replaces\nthem by less expensive calculations when possible. This is\nenabled by default at <b>-O</b> and\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-vectorize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\nvectorization on trees. This flag enables\n<b>-ftree-loop-vectorize</b> and <b>-ftree-slp-vectorize</b>\nif not explicitly specified.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-loop-vectorize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform loop\nvectorization on trees. This flag is enabled by default at\n<b>-O3</b> and by <b>-ftree-vectorize</b>,\n<b>-fprofile-use</b>, and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-slp-vectorize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform basic\nblock vectorization on trees. This flag is enabled by\ndefault at <b>-O3</b> and by <b>-ftree-vectorize</b>,\n<b>-fprofile-use</b>, and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fvect-cost-model=</b><i>model</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Alter the cost\nmodel used for vectorization. The <i>model</i> argument\nshould be one of <b>unlimited</b>, <b>dynamic</b>,\n<b>cheap</b> or <b>very-cheap</b>. With the <b>unlimited</b>\nmodel the vectorized code-path is assumed to be profitable\nwhile with the <b>dynamic</b> model a runtime check guards\nthe vectorized code-path to enable it only for iteration\ncounts that will likely execute faster than when executing\nthe original scalar loop. The <b>cheap</b> model disables\nvectorization of loops where doing so would be cost\nprohibitive for example due to required runtime checks for\ndata dependence or alignment but otherwise is equal to the\n<b>dynamic</b> model. The <b>very-cheap</b> model only\nallows vectorization if the vector code would entirely\nreplace the scalar code that is being vectorized. For\nexample, if each iteration of a vectorized loop would only\nbe able to handle exactly four iterations of the scalar\nloop, the <b>very-cheap</b> model would only allow\nvectorization if the scalar iteration count is known to be a\nmultiple of four.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault cost model depends on other optimization flags and\nis either <b>dynamic</b> or\n<b>cheap</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsimd-cost-model=</b><i>model</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Alter the cost\nmodel used for vectorization of loops marked with the OpenMP\nsimd directive. The <i>model</i> argument should be one of\n<b>unlimited</b>, <b>dynamic</b>, <b>cheap</b>. All values\nof <i>model</i> have the same meaning as described in\n<b>-fvect-cost-model</b> and by default a cost model defined\nwith <b>-fvect-cost-model</b> is used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftree-vrp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform Value\nRange Propagation on trees. This is similar to the constant\npropagation pass, but instead of values, ranges of values\nare propagated. This allows the optimizers to remove\nunnecessary range checks like array bound checks and null\npointer checks. This is enabled by default at <b>-O2</b> and\nhigher. Null pointer check elimination is only done if\n<b>-fdelete-null-pointer-checks</b> is\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsplit-paths</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Split paths\nleading to loop backedges. This can improve dead code\nelimination and common subexpression elimination. This is\nenabled by default at <b>-O3</b> and\nabove.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsplit-ivs-in-unroller</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables\nexpression of values of induction variables in later\niterations of the unrolled loop using the value in the first\niteration. This breaks long dependency chains, thus\nimproving efficiency of the scheduling\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>A\ncombination of <b>-fweb</b> and</big> CSE <big>is often\nsufficient to obtain the same effect. However, that is not\nreliable in cases where the loop body is more complicated\nthan a single basic block. It also does not work at all on\nsome architectures due to restrictions in the</big> CSE\n<big>pass.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noptimization is enabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fvariable-expansion-in-unroller</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With this\noption, the compiler creates multiple copies of some local\nvariables when unrolling a loop, which can result in\nsuperior code.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noptimization is enabled by default for PowerPC targets, but\ndisabled by default otherwise.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpartial-inlining</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Inline parts of\nfunctions. This option has any effect only when inlining\nitself is turned on by the <b>-finline-functions</b> or\n<b>-finline-small-functions</b>\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpredictive-commoning</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\npredictive commoning optimization, i.e., reusing\ncomputations (especially memory loads and stores) performed\nin previous iterations of loops.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled at level <b>-O3</b>. It is also enabled by\n<b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprefetch-loop-arrays</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If supported by\nthe target machine, generate instructions to prefetch memory\nto improve the performance of loops that access large\narrays.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption may generate better or worse code; results are highly\ndependent on the structure of loops within the source\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Disabled\nat level <b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-printf-return-value</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not\nsubstitute constants for known return value of formatted\noutput functions such as &quot;sprintf&quot;,\n&quot;snprintf&quot;, &quot;vsprintf&quot;, and\n&quot;vsnprintf&quot; (but not &quot;printf&quot; of\n&quot;fprintf&quot;). This transformation allows</big> GCC\n<big>to optimize or even eliminate branches based on the\nknown return value of these functions called with arguments\nthat are either constant, or whose values are known to be in\na range that makes determining the exact return value\npossible. For example, when <b>-fprintf-return-value</b> is\nin effect, both the branch and the body of the\n&quot;if&quot; statement (but not the call to\n&quot;snprint&quot;) can be optimized away when\n&quot;i&quot; is a 32-bit or smaller integer because the\nreturn value is guaranteed to be at most\n8.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>char\nbuf[9]; <br>\nif (snprintf (buf, &quot;%08x&quot;, i) &gt;= sizeof buf)\n<br>\n...</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-fprintf-return-value</b> option relies on other\noptimizations and yields best results with <b>-O2</b> and\nabove. It works in tandem with the <b>-Wformat-overflow</b>\nand <b>-Wformat-truncation</b> options. The\n<b>-fprintf-return-value</b> option is enabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-peephole\n<br>\n-fno-peephole2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable any\nmachine-specific peephole optimizations. The difference\nbetween <b>-fno-peephole</b> and <b>-fno-peephole2</b> is in\nhow they are implemented in the compiler; some targets use\none, some use the other, a few use\nboth.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fpeephole</b>\nis enabled by default. <b>-fpeephole2</b> enabled at levels\n<b>-O2</b>, <b>-O3</b>, <b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-guess-branch-probability</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not guess\nbranch probabilities using heuristics.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>uses heuristics to guess branch probabilities if they\nare not provided by profiling feedback\n(<b>-fprofile-arcs</b>). These heuristics are based on the\ncontrol flow graph. If some branch probabilities are\nspecified by &quot;__builtin_expect&quot;, then the\nheuristics are used to guess branch probabilities for the\nrest of the control flow graph, taking the\n&quot;__builtin_expect&quot; info into account. The\ninteractions between the heuristics and\n&quot;__builtin_expect&quot; can be complex, and in some\ncases, it may be useful to disable the heuristics so that\nthe effects of &quot;__builtin_expect&quot; are easier to\nunderstand.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nis also possible to specify expected probability of the\nexpression with\n&quot;__builtin_expect_with_probability&quot; built-in\nfunction.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-fguess-branch-probability</b> at levels\n<b>-O</b>, <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-freorder-blocks</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Reorder basic\nblocks in the compiled function in order to reduce number of\ntaken branches and improve code\nlocality.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-freorder-blocks-algorithm=</b><i>algorithm</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the\nspecified algorithm for basic block reordering. The\n<i>algorithm</i> argument can be <b>simple</b>, which does\nnot increase code size (except sometimes due to secondary\neffects like alignment), or <b>stc</b>, the &quot;software\ntrace cache&quot; algorithm, which tries to put all often\nexecuted code together, minimizing the number of branches\nexecuted by making extra copies of\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>simple</b> at levels <b>-O</b>, <b>-Os</b>,\nand <b>stc</b> at levels <b>-O2</b>,\n<b>-O3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-freorder-blocks-and-partition</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>In addition to\nreordering basic blocks in the compiled function, in order\nto reduce number of taken branches, partitions hot and cold\nbasic blocks into separate sections of the assembly and\n<i>.o</i> files, to improve paging and cache locality\nperformance.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noptimization is automatically turned off in the presence of\nexception handling or unwind tables (on targets using\nsetjump/longjump or target specific scheme), for linkonce\nsections, for functions with a user-defined section\nattribute and on any architecture that does not support\nnamed sections. When <b>-fsplit-stack</b> is used this\noption is not enabled by default (to avoid linker errors),\nbut may be enabled explicitly (if using a working\nlinker).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nfor x86 at levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-freorder-functions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Reorder\nfunctions in the object file in order to improve code\nlocality. This is implemented by using special subsections\n&quot;.text.hot&quot; for most frequently executed functions\nand &quot;.text.unlikely&quot; for unlikely executed\nfunctions. Reordering is done by the linker so object file\nformat must support named sections and linker must place\nthem in a reasonable way.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption isn&rsquo;t effective unless you either provide\nprofile feedback (see <b>-fprofile-arcs</b> for details) or\nmanually annotate functions with &quot;hot&quot; or\n&quot;cold&quot; attributes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstrict-aliasing</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow the\ncompiler to assume the strictest aliasing rules applicable\nto the language being compiled. For C (and C</big> ++\n<big>), this activates optimizations based on the type of\nexpressions. In particular, an object of one type is assumed\nnever to reside at the same address as an object of a\ndifferent type, unless the types are almost the same. For\nexample, an &quot;unsigned int&quot; can alias an\n&quot;int&quot;, but not a &quot;void*&quot; or a\n&quot;double&quot;. A character type may alias any other\ntype.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Pay\nspecial attention to code like this:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>union\na_union { <br>\nint i; <br>\ndouble d; <br>\n}; <br>\nint f() { <br>\nunion a_union t; <br>\nt.d = 3.0; <br>\nreturn t.i; <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\npractice of reading from a different union member than the\none most recently written to (called\n&quot;type-punning&quot;) is common. Even with\n<b>-fstrict-aliasing</b>, type-punning is allowed, provided\nthe memory is accessed through the union type. So, the code\nabove works as expected. However, this code might\nnot:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\nf() { <br>\nunion a_union t; <br>\nint* ip; <br>\nt.d = 3.0; <br>\nip = &amp;t.i; <br>\nreturn *ip; <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Similarly,\naccess by taking the address, casting the resulting pointer\nand dereferencing the result has undefined behavior, even if\nthe cast uses a union type, e.g.:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\nf() { <br>\ndouble d = 3.0; <br>\nreturn ((union a_union *) &amp;d)-&gt;i; <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-fstrict-aliasing</b> option is enabled at levels\n<b>-O2</b>, <b>-O3</b>, <b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-falign-functions\n<br>\n-falign-functions=</b><i>n</i> <b><br>\n-falign-functions=</b><i>n</i><b>:</b><i>m</i> <b><br>\n\n-falign-functions=</b><i>n</i><b>:</b><i>m</i><b>:</b><i>n2</i>\n<b><br>\n\n-falign-functions=</b><i>n</i><b>:</b><i>m</i><b>:</b><i>n2</i><b>:</b><i>m2</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Align the start\nof functions to the next power-of-two greater than or equal\nto <i>n</i>, skipping up to <i>m</i>-1 bytes. This ensures\nthat at least the first <i>m</i> bytes of the function can\nbe fetched by the</big> CPU <big>without crossing an\n<i>n</i>-byte alignment boundary.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>m</i> is not specified, it defaults to\n<i>n</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Examples:\n<b>-falign-functions=32</b> aligns functions to the next\n32-byte boundary, <b>-falign-functions=24</b> aligns to the\nnext 32-byte boundary only if this can be done by skipping\n23 bytes or less, <b>-falign-functions=32:7</b> aligns to\nthe next 32-byte boundary only if this can be done by\nskipping 6 bytes or less.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nsecond pair of <i>n2</i>:<i>m2</i> values allows you to\nspecify a secondary alignment:\n<b>-falign-functions=64:7:32:3</b> aligns to the next\n64-byte boundary if this can be done by skipping 6 bytes or\nless, otherwise aligns to the next 32-byte boundary if this\ncan be done by skipping 2 bytes or less. If <i>m2</i> is not\nspecified, it defaults to <i>n2</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Some\nassemblers only support this flag when <i>n</i> is a power\nof two; in that case, it is rounded\nup.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fno-align-functions</b>\nand <b>-falign-functions=1</b> are equivalent and mean that\nfunctions are not aligned.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>n</i> is not specified or is zero, use a\nmachine-dependent default. The maximum allowed <i>n</i>\noption value is 65536.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flimit-function-alignment</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If this option\nis enabled, the compiler tries to avoid unnecessarily\noveraligning functions. It attempts to instruct the\nassembler to align by the amount specified by\n<b>-falign-functions</b>, but not to skip more bytes than\nthe size of the function.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-falign-labels\n<br>\n-falign-labels=</b><i>n</i> <b><br>\n-falign-labels=</b><i>n</i><b>:</b><i>m</i> <b><br>\n\n-falign-labels=</b><i>n</i><b>:</b><i>m</i><b>:</b><i>n2</i>\n<b><br>\n\n-falign-labels=</b><i>n</i><b>:</b><i>m</i><b>:</b><i>n2</i><b>:</b><i>m2</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Align all branch\ntargets to a power-of-two boundary.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Parameters\nof this option are analogous to the <b>-falign-functions</b>\noption. <b>-fno-align-labels</b> and <b>-falign-labels=1</b>\nare equivalent and mean that labels are not\naligned.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<b>-falign-loops</b> or <b>-falign-jumps</b> are applicable\nand are greater than this value, then their values are used\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>n</i> is not specified or is zero, use a\nmachine-dependent default which is very likely to be\n<b>1</b>, meaning no alignment. The maximum allowed <i>n</i>\noption value is 65536.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-falign-loops\n<br>\n-falign-loops=</b><i>n</i> <b><br>\n-falign-loops=</b><i>n</i><b>:</b><i>m</i> <b><br>\n-falign-loops=</b><i>n</i><b>:</b><i>m</i><b>:</b><i>n2</i>\n<b><br>\n\n-falign-loops=</b><i>n</i><b>:</b><i>m</i><b>:</b><i>n2</i><b>:</b><i>m2</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Align loops to a\npower-of-two boundary. If the loops are executed many times,\nthis makes up for any execution of the dummy padding\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<b>-falign-labels</b> is greater than this value, then its\nvalue is used instead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Parameters\nof this option are analogous to the <b>-falign-functions</b>\noption. <b>-fno-align-loops</b> and <b>-falign-loops=1</b>\nare equivalent and mean that loops are not aligned. The\nmaximum allowed <i>n</i> option value is\n65536.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>n</i> is not specified or is zero, use a\nmachine-dependent default.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-falign-jumps\n<br>\n-falign-jumps=</b><i>n</i> <b><br>\n-falign-jumps=</b><i>n</i><b>:</b><i>m</i> <b><br>\n-falign-jumps=</b><i>n</i><b>:</b><i>m</i><b>:</b><i>n2</i>\n<b><br>\n\n-falign-jumps=</b><i>n</i><b>:</b><i>m</i><b>:</b><i>n2</i><b>:</b><i>m2</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Align branch\ntargets to a power-of-two boundary, for branch targets where\nthe targets can only be reached by jumping. In this case, no\ndummy operations need be executed.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<b>-falign-labels</b> is greater than this value, then its\nvalue is used instead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Parameters\nof this option are analogous to the <b>-falign-functions</b>\noption. <b>-fno-align-jumps</b> and <b>-falign-jumps=1</b>\nare equivalent and mean that loops are not\naligned.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>n</i> is not specified or is zero, use a\nmachine-dependent default. The maximum allowed <i>n</i>\noption value is 65536.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-allocation-dce</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not remove\nunused C</big> ++ <big>allocations in dead code\nelimination.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fallow-store-data-races</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow the\ncompiler to perform optimizations that may introduce new\ndata races on stores, without proving that the variable\ncannot be concurrently accessed by other threads. Does not\naffect optimization of local data. It is safe to use this\noption if it is known that global data will not be accessed\nby multiple threads.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Examples\nof optimizations enabled by <b>-fallow-store-data-races</b>\ninclude hoisting or if-conversions that may cause a value\nthat was already in memory to be re-written with that same\nvalue. Such re-writing is safe in a single threaded context\nbut may be unsafe in a multi-threaded context. Note that on\nsome processors, if-conversions may be required in order to\nenable vectorization.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat level <b>-Ofast</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-funit-at-a-time</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nleft for compatibility reasons. <b>-funit-at-a-time</b> has\nno effect, while <b>-fno-unit-at-a-time</b> implies\n<b>-fno-toplevel-reorder</b> and\n<b>-fno-section-anchors</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-toplevel-reorder</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not reorder\ntop-level functions, variables, and &quot;asm&quot;\nstatements. Output them in the same order that they appear\nin the input file. When this option is used, unreferenced\nstatic variables are not removed. This option is intended to\nsupport existing code that relies on a particular ordering.\nFor new code, it is better to use attributes when\npossible.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-ftoplevel-reorder</b>\nis the default at <b>-O1</b> and higher, and also at\n<b>-O0</b> if <b>-fsection-anchors</b> is explicitly\nrequested. Additionally <b>-fno-toplevel-reorder</b> implies\n<b>-fno-section-anchors</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fweb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Constructs webs\nas commonly used for register allocation purposes and assign\neach web individual pseudo register. This allows the\nregister allocation pass to operate on pseudos directly, but\nalso strengthens several other optimization passes, such\nas</big> CSE, <big>loop optimizer and trivial dead code\nremover. It can, however, make debugging impossible, since\nvariables no longer stay in a &quot;home\nregister&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby default with <b>-funroll-loops</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fwhole-program</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that the\ncurrent compilation unit represents the whole program being\ncompiled. All public functions and variables with the\nexception of &quot;main&quot; and those merged by attribute\n&quot;externally_visible&quot; become static functions and\nin effect are optimized more aggressively by interprocedural\noptimizers.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption should not be used in combination with <b>-flto</b>.\nInstead relying on a linker plugin should provide safer and\nmore precise information.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flto[=</b><i>n</i><b>]</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option runs\nthe standard link-time optimizer. When invoked with source\ncode, it generates</big> GIMPLE <big>(one of</big> GCC\n<big>&rsquo;s internal representations) and writes it to\nspecial</big> ELF <big>sections in the object file. When the\nobject files are linked together, all the function bodies\nare read from these</big> ELF <big>sections and instantiated\nas if they had been part of the same translation\nunit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\nuse the link-time optimizer, <b>-flto</b> and optimization\noptions should be specified at compile time and during the\nfinal link. It is recommended that you compile all the files\nparticipating in the same link with the same options and\nalso specify those options at link time. For\nexample:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-c -O2 -flto foo.c <br>\ngcc -c -O2 -flto bar.c <br>\ngcc -o myprog -flto -O2 foo.o bar.o</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfirst two invocations to</big> GCC <big>save a bytecode\nrepresentation of</big> GIMPLE <big>into special</big> ELF\n<big>sections inside <i>foo.o</i> and <i>bar.o</i>. The\nfinal invocation reads the</big> GIMPLE <big>bytecode from\n<i>foo.o</i> and <i>bar.o</i>, merges the two files into a\nsingle internal image, and compiles the result as usual.\nSince both <i>foo.o</i> and <i>bar.o</i> are merged into a\nsingle image, this causes all the interprocedural analyses\nand optimizations in</big> GCC <big>to work across the two\nfiles as if they were a single one. This means, for example,\nthat the inliner is able to inline functions in <i>bar.o</i>\ninto functions in <i>foo.o</i> and\nvice-versa.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Another\n(simpler) way to enable link-time optimization\nis:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-o myprog -flto -O2 foo.c bar.c</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nabove generates bytecode for <i>foo.c</i> and <i>bar.c</i>,\nmerges them together into a single</big> GIMPLE\n<big>representation and optimizes them as usual to produce\n<i>myprog</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nimportant thing to keep in mind is that to enable link-time\noptimizations you need to use the</big> GCC <big>driver to\nperform the link step.</big> GCC <big>automatically performs\nlink-time optimization if any of the objects involved were\ncompiled with the <b>-flto</b> command-line option. You can\nalways override the automatic decision to do link-time\noptimization by passing <b>-fno-lto</b> to the link\ncommand.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\nmake whole program optimization effective, it is necessary\nto make certain whole program assumptions. The compiler\nneeds to know what functions and variables can be accessed\nby libraries and runtime outside of the link-time optimized\nunit. When supported by the linker, the linker plugin (see\n<b>-fuse-linker-plugin</b>) passes information to the\ncompiler about used and externally visible symbols. When the\nlinker plugin is not available, <b>-fwhole-program</b>\nshould be used to allow the compiler to make these\nassumptions, which leads to more aggressive optimization\ndecisions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\na file is compiled with <b>-flto</b> without\n<b>-fuse-linker-plugin</b>, the generated object file is\nlarger than a regular object file because it contains</big>\nGIMPLE <big>bytecodes and the usual final code (see\n<b>-ffat-lto-objects</b>). This means that object files\nwith</big> LTO <big>information can be linked as normal\nobject files; if <b>-fno-lto</b> is passed to the linker, no\ninterprocedural optimizations are applied. Note that when\n<b>-fno-fat-lto-objects</b> is enabled the compile stage is\nfaster but you cannot perform a regular, non-LTO link on\nthem.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nproducing the final binary,</big> GCC <big>only applies\nlink-time optimizations to those files that contain\nbytecode. Therefore, you can mix and match object files and\nlibraries with</big> GIMPLE <big>bytecodes and final object\ncode.</big> GCC <big>automatically selects which files to\noptimize in</big> LTO <big>mode and which files to link\nwithout further processing.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Generally,\noptions specified at link time override those specified at\ncompile time, although in some cases</big> GCC <big>attempts\nto infer link-time options from the settings used to compile\nthe input files.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou do not specify an optimization level option <b>-O</b> at\nlink time, then</big> GCC <big>uses the highest optimization\nlevel used when compiling the object files. Note that it is\ngenerally ineffective to specify an optimization level\noption only at link time and not at compile time, for two\nreasons. First, compiling without optimization suppresses\ncompiler passes that gather information needed for effective\noptimization at link time. Second, some early optimization\npasses can be performed only at compile time and not at link\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>There\nare some code generation flags preserved by</big> GCC\n<big>when generating bytecodes, as they need to be used\nduring the final link. Currently, the following options and\ntheir settings are taken from the first object file that\nexplicitly specifies them: <b>-fcommon</b>,\n<b>-fexceptions</b>, <b>-fnon-call-exceptions</b>,\n<b>-fgnu-tm</b> and all the <b>-m</b> target\nflags.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfollowing options <b>-fPIC</b>, <b>-fpic</b>, <b>-fpie</b>\nand <b>-fPIE</b> are combined based on the following\nscheme:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>B&lt;-fPIC&gt;\n+ B&lt;-fpic&gt; = B&lt;-fpic&gt; <br>\nB&lt;-fPIC&gt; + B&lt;-fno-pic&gt; = B&lt;-fno-pic&gt; <br>\nB&lt;-fpic/-fPIC&gt; + (no option) = (no option) <br>\nB&lt;-fPIC&gt; + B&lt;-fPIE&gt; = B&lt;-fPIE&gt; <br>\nB&lt;-fpic&gt; + B&lt;-fPIE&gt; = B&lt;-fpie&gt; <br>\nB&lt;-fPIC/-fpic&gt; + B&lt;-fpie&gt; =\nB&lt;-fpie&gt;</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Certain\nABI-changing flags are required to match in all compilation\nunits, and trying to override this at link time with a\nconflicting value is ignored. This includes options such as\n<b>-freg-struct-return</b> and\n<b>-fpcc-struct-return</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Other\noptions such as <b>-ffp-contract</b>,\n<b>-fno-strict-overflow</b>, <b>-fwrapv</b>,\n<b>-fno-trapv</b> or <b>-fno-strict-aliasing</b> are passed\nthrough to the link stage and merged conservatively for\nconflicting translation units. Specifically\n<b>-fno-strict-overflow</b>, <b>-fwrapv</b> and\n<b>-fno-trapv</b> take precedence; and for example\n<b>-ffp-contract=off</b> takes precedence over\n<b>-ffp-contract=fast</b>. You can override them at link\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Diagnostic\noptions such as <b>-Wstringop-overflow</b> are passed\nthrough to the link stage and their setting matches that of\nthe compile-step at function granularity. Note that this\nmatters only for diagnostics emitted during optimization.\nNote that code transforms such as inlining can lead to\nwarnings being enabled or disabled for regions if code not\nconsistent with the setting at compile\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nyou need to pass options to the assembler via <b>-Wa</b> or\n<b>-Xassembler</b> make sure to either compile such\ntranslation units with <b>-fno-lto</b> or consistently use\nthe same assembler options on all translation units. You can\nalternatively also specify assembler options at</big> LTO\n<big>link time.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\nenable debug info generation you need to supply <b>-g</b> at\ncompile time. If any of the input files at link time were\nbuilt with debug info generation enabled the link will\nenable debug info generation as well. Any elaborate debug\ninfo settings like the dwarf level <b>-gdwarf-5</b> need to\nbe explicitly repeated at the linker command line and mixing\ndifferent settings in different translation units is\ndiscouraged.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If</big>\nLTO <big>encounters objects with C linkage declared with\nincompatible types in separate translation units to be\nlinked together (undefined behavior according to</big> ISO\nC99 6.2.7 <big>), a non-fatal diagnostic may be issued. The\nbehavior is still undefined at run time. Similar diagnostics\nmay be raised for other languages.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Another\nfeature of</big> LTO <big>is that it is possible to apply\ninterprocedural optimizations on files written in different\nlanguages:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-c -flto foo.c <br>\ng++ -c -flto bar.cc <br>\ngfortran -c -flto baz.f90 <br>\ng++ -o myprog -flto -O3 foo.o bar.o baz.o\n-lgfortran</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Notice\nthat the final link is done with <b>g++</b> to get the\nC</big> ++ <big>runtime libraries and <b>-lgfortran</b> is\nadded to get the Fortran runtime libraries. In general, when\nmixing languages in</big> LTO <big>mode, you should use the\nsame link command options as when mixing languages in a\nregular (non-LTO) compilation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nobject files containing</big> GIMPLE <big>bytecode are\nstored in a library archive, say <i>libfoo.a</i>, it is\npossible to extract and use them in an</big> LTO <big>link\nif you are using a linker with plugin support. To create\nstatic libraries suitable for</big> LTO, <big>use\n<b>gcc-ar</b> and <b>gcc-ranlib</b> instead of <b>ar</b> and\n<b>ranlib</b>; to show the symbols of object files\nwith</big> GIMPLE <big>bytecode, use <b>gcc-nm</b>. Those\ncommands require that <b>ar</b>, <b>ranlib</b> and <b>nm</b>\nhave been compiled with plugin support. At link time, use\nthe flag <b>-fuse-linker-plugin</b> to ensure that the\nlibrary participates in the</big> LTO <big>optimization\nprocess:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-o myprog -O2 -flto -fuse-linker-plugin a.o b.o\n-lfoo</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\nthe linker plugin enabled, the linker extracts the\nneeded</big> GIMPLE <big>files from <i>libfoo.a</i> and\npasses them on to the running</big> GCC <big>to make them\npart of the aggregated</big> GIMPLE <big>image to be\noptimized.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou are not using a linker with plugin support and/or do not\nenable the linker plugin, then the objects inside\n<i>libfoo.a</i> are extracted and linked as usual, but they\ndo not participate in the</big> LTO <big>optimization\nprocess. In order to make a static library suitable for\nboth</big> LTO <big>optimization and usual linkage, compile\nits object files with <b>-flto\n-ffat-lto-objects</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Link-time\noptimizations do not require the presence of the whole\nprogram to operate. If the program does not require any\nsymbols to be exported, it is possible to combine\n<b>-flto</b> and <b>-fwhole-program</b> to allow the\ninterprocedural optimizers to use more aggressive\nassumptions which may lead to improved optimization\nopportunities. Use of <b>-fwhole-program</b> is not needed\nwhen linker plugin is active (see\n<b>-fuse-linker-plugin</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ncurrent implementation of</big> LTO <big>makes no attempt to\ngenerate bytecode that is portable between different types\nof hosts. The bytecode files are versioned and there is a\nstrict version check, so bytecode files generated in one\nversion of</big> GCC <big>do not work with an older or newer\nversion of</big> GCC.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Link-time\noptimization does not work well with generation of debugging\ninformation on systems other than those using a combination\nof</big> ELF <big>and</big> DWARF.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou specify the optional <i>n</i>, the optimization and code\ngeneration done at link time is executed in parallel using\n<i>n</i> parallel jobs by utilizing an installed <b>make</b>\nprogram. The environment variable</big> <b>MAKE</b> <big>may\nbe used to override the program used.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan also specify <b>-flto=jobserver</b> to use</big> GNU\n<big>make&rsquo;s job server mode to determine the number of\nparallel jobs. This is useful when the Makefile\ncalling</big> GCC <big>is already executing in parallel. You\nmust prepend a <b>+</b> to the command recipe in the parent\nMakefile for this to work. This option likely only works\nif</big> <b>MAKE</b> <big>is</big> GNU <big>make. Even\nwithout the option value,</big> GCC <big>tries to\nautomatically detect a running</big> GNU <big>make&rsquo;s\njob server.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Use\n<b>-flto=auto</b> to use</big> GNU <big>make&rsquo;s job\nserver, if available, or otherwise fall back to\nautodetection of the number of</big> CPU <big>threads\npresent in your system.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flto-partition=</b><i>alg</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\npartitioning algorithm used by the link-time optimizer. The\nvalue is either <b>1to1</b> to specify a partitioning\nmirroring the original source files or <b>balanced</b> to\nspecify partitioning into equally sized chunks (whenever\npossible) or <b>max</b> to create new partition for every\nsymbol where possible. Specifying <b>none</b> as an\nalgorithm disables partitioning and streaming completely.\nThe default value is <b>balanced</b>. While <b>1to1</b> can\nbe used as an workaround for various code ordering issues,\nthe <b>max</b> partitioning is intended for internal testing\nonly. The value <b>one</b> specifies that exactly one\npartition should be used while the value <b>none</b>\nbypasses partitioning and executes the link-time\noptimization step directly from the</big> WPA\n<big>phase.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flto-compression-level=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nspecifies the level of compression used for intermediate\nlanguage written to</big> LTO <big>object files, and is only\nmeaningful in conjunction with</big> LTO <big>mode\n(<b>-flto</b>).</big> GCC <big>currently supports two</big>\nLTO <big>compression algorithms. For zstd, valid values are\n0 (no compression) to 19 (maximum compression), while zlib\nsupports values from 0 to 9. Values outside this range are\nclamped to either minimum or maximum of the supported\nvalues. If the option is not given, a default balanced\ncompression setting is used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fuse-linker-plugin</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the use\nof a linker plugin during link-time optimization. This\noption relies on plugin support in the linker, which is\navailable in gold or in</big> GNU <big>ld 2.21 or\nnewer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption enables the extraction of object files with</big>\nGIMPLE <big>bytecode out of library archives. This improves\nthe quality of optimization by exposing more code to the\nlink-time optimizer. This information specifies what symbols\ncan be accessed externally (by non-LTO object or during\ndynamic linking). Resulting code quality improvements on\nbinaries (and shared libraries that use hidden visibility)\nare similar to <b>-fwhole-program</b>. See <b>-flto</b> for\na description of the effect of this flag and how to use\nit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled by default when</big> LTO <big>support\nin</big> GCC <big>is enabled and</big> GCC <big>was\nconfigured for use with a linker supporting plugins (</big>\nGNU <big>ld 2.21 or newer or gold).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ffat-lto-objects</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Fat</big> LTO\n<big>objects are object files that contain both the\nintermediate language and the object code. This makes them\nusable for both</big> LTO <big>linking and normal linking.\nThis option is effective only when compiling with\n<b>-flto</b> and is ignored at link\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fno-fat-lto-objects</b>\nimproves compilation time over plain</big> LTO, <big>but\nrequires the complete toolchain to be aware of</big> LTO.\n<big>It requires a linker with linker plugin support for\nbasic functionality. Additionally, <b>nm</b>, <b>ar</b> and\n<b>ranlib</b> need to support linker plugins to allow a\nfull-featured build environment (capable of building static\nlibraries etc).</big> GCC <big>provides the <b>gcc-ar</b>,\n<b>gcc-nm</b>, <b>gcc-ranlib</b> wrappers to pass the right\noptions to these tools. With non fat</big> LTO\n<big>makefiles need to be modified to use\nthem.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat modern binutils provide plugin auto-load mechanism.\nInstalling the linker plugin into <i>$libdir/bfd-plugins</i>\nhas the same effect as usage of the command wrappers\n(<b>gcc-ar</b>, <b>gcc-nm</b> and\n<b>gcc-ranlib</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-fno-fat-lto-objects</b> on targets with\nlinker plugin support.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcompare-elim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>After register\nallocation and post-register allocation instruction\nsplitting, identify arithmetic instructions that compute\nprocessor flags similar to a comparison operation based on\nthat arithmetic. If possible, eliminate the explicit\ncomparison operation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\npass only applies to certain targets that cannot explicitly\nrepresent the comparison operation before register\nallocation is complete.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcprop-registers</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>After register\nallocation and post-register allocation instruction\nsplitting, perform a copy-propagation pass to try to reduce\nscheduling dependencies and occasionally eliminate the\ncopy.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-correction</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Profiles\ncollected using an instrumented binary for multi-threaded\nprograms may be inconsistent due to missed counter updates.\nWhen this option is specified,</big> GCC <big>uses\nheuristics to correct or smooth out such inconsistencies. By\ndefault,</big> GCC <big>emits an error message when an\ninconsistent profile is detected.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled by\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-partial-training</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n&quot;-fprofile-use&quot; all portions of programs not\nexecuted during train run are optimized agressively for size\nrather than speed. In some cases it is not practical to\ntrain all possible hot paths in the program. (For example,\nprogram may contain functions specific for a given hardware\nand trianing may not cover all hardware configurations\nprogram is run on.) With\n&quot;-fprofile-partial-training&quot; profile feedback will\nbe ignored for all functions not executed during the train\nrun leading them to be optimized as if they were compiled\nwithout profile feedback. This leads to better performance\nwhen train run is not representative but also leads to\nsignificantly bigger code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-use\n<br>\n-fprofile-use=</b><i>path</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable profile\nfeedback-directed optimizations, and the following\noptimizations, many of which are generally profitable only\nwith profile feedback available:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fbranch-probabilities\n-fprofile-values -funroll-loops -fpeel-loops -ftracer -fvpt\n-finline-functions -fipa-cp -fipa-cp-clone -fipa-bit-cp\n-fpredictive-commoning -fsplit-loops -funswitch-loops\n-fgcse-after-reload -ftree-loop-vectorize\n-ftree-slp-vectorize -fvect-cost-model=dynamic\n-ftree-loop-distribute-patterns\n-fprofile-reorder-functions</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Before\nyou can use this option, you must first generate profiling\ninformation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>By\ndefault,</big> GCC <big>emits an error message if the\nfeedback profiles do not match the source code. This error\ncan be turned into a warning by using\n<b>-Wno-error=coverage-mismatch</b>. Note this may result in\npoorly optimized code. Additionally, by default,</big> GCC\n<big>also emits a warning message if the feedback profiles\ndo not exist (see\n<b>-Wmissing-profile</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>path</i> is specified,</big> GCC <big>looks at the\n<i>path</i> to find the profile feedback data files. See\n<b>-fprofile-dir</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fauto-profile\n<br>\n-fauto-profile=</b><i>path</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nsampling-based feedback-directed optimizations, and the\nfollowing optimizations, many of which are generally\nprofitable only with profile feedback\navailable:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fbranch-probabilities\n-fprofile-values -funroll-loops -fpeel-loops -ftracer -fvpt\n-finline-functions -fipa-cp -fipa-cp-clone -fipa-bit-cp\n-fpredictive-commoning -fsplit-loops -funswitch-loops\n-fgcse-after-reload -ftree-loop-vectorize\n-ftree-slp-vectorize -fvect-cost-model=dynamic\n-ftree-loop-distribute-patterns\n-fprofile-correction</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><i>path</i>\nis the name of a file containing AutoFDO profile\ninformation. If omitted, it defaults to <i>fbdata.afdo</i>\nin the current directory.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Producing\nan AutoFDO profile data file requires running your program\nwith the <b>perf</b> utility on a supported GNU/Linux target\nsystem. For more information, see\n&lt;<b>https://perf.wiki.kernel.org/</b>&gt;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>E.g.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>perf\nrecord -e br_inst_retired:near_taken -b -o perf.data \\ <br>\n-- your_program</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Then\nuse the <b>create_gcov</b> tool to convert the raw profile\ndata to a format that can be used by</big> GCC. <big>You\nmust also supply the unstripped binary for your program to\nthis tool. See\n&lt;<b>https://github.com/google/autofdo</b>&gt;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>E.g.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>create_gcov\n--binary=your_program.unstripped --profile=perf.data \\ <br>\n--gcov=profile.afdo</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options control compiler behavior regarding\nfloating-point arithmetic. These options trade off between\nspeed and correctness. All must be specifically enabled.\n<b><br>\n-ffloat-store</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not store\nfloating-point variables in registers, and inhibit other\noptions that might change whether a floating-point value is\ntaken from a register or memory.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption prevents undesirable excess precision on machines\nsuch as the 68000 where the floating registers (of the\n68881) keep more precision than a &quot;double&quot; is\nsupposed to have. Similarly for the x86 architecture. For\nmost programs, the excess precision does only good, but a\nfew programs rely on the precise definition of</big> IEEE\n<big>floating point. Use <b>-ffloat-store</b> for such\nprograms, after modifying them to store all pertinent\nintermediate computations into\nvariables.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fexcess-precision=</b><i>style</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nallows further control over excess precision on machines\nwhere floating-point operations occur in a format with more\nprecision or range than the</big> IEEE <big>standard and\ninterchange floating-point types. By default,\n<b>-fexcess-precision=fast</b> is in effect; this means that\noperations may be carried out in a wider precision than the\ntypes specified in the source if that would result in faster\ncode, and it is unpredictable when rounding to the types\nspecified in the source code takes place. When compiling C,\nif <b>-fexcess-precision=standard</b> is specified then\nexcess precision follows the rules specified in</big> ISO\nC99 <big>; in particular, both casts and assignments cause\nvalues to be rounded to their semantic types (whereas\n<b>-ffloat-store</b> only affects assignments). This option\nis enabled by default for C if a strict conformance option\nsuch as <b>-std=c99</b> is used. <b>-ffast-math</b> enables\n<b>-fexcess-precision=fast</b> by default regardless of\nwhether a strict conformance option is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fexcess-precision=standard</b>\nis not implemented for languages other than C. On the x86,\nit has no effect if <b>-mfpmath=sse</b> or\n<b>-mfpmath=sse+387</b> is specified; in the former\ncase,</big> IEEE <big>semantics apply without excess\nprecision, and in the latter, rounding is\nunpredictable.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ffast-math</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Sets the options\n<b>-fno-math-errno</b>, <b>-funsafe-math-optimizations</b>,\n<b>-ffinite-math-only</b>, <b>-fno-rounding-math</b>,\n<b>-fno-signaling-nans</b>, <b>-fcx-limited-range</b> and\n<b>-fexcess-precision=fast</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption causes the preprocessor macro\n&quot;__FAST_MATH__&quot; to be\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is not turned on by any <b>-O</b> option besides\n<b>-Ofast</b> since it can result in incorrect output for\nprograms that depend on an exact implementation of</big>\nIEEE <big>or</big> ISO <big>rules/specifications for math\nfunctions. It may, however, yield faster code for programs\nthat do not require the guarantees of these\nspecifications.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-math-errno</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not set\n&quot;errno&quot; after calling math functions that are\nexecuted with a single instruction, e.g., &quot;sqrt&quot;.\nA program that relies on</big> IEEE <big>exceptions for math\nerror handling may want to use this flag for speed while\nmaintaining</big> IEEE <big>arithmetic\ncompatibility.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is not turned on by any <b>-O</b> option since it can\nresult in incorrect output for programs that depend on an\nexact implementation of</big> IEEE <big>or</big> ISO\n<big>rules/specifications for math functions. It may,\nhowever, yield faster code for programs that do not require\nthe guarantees of these\nspecifications.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-fmath-errno</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nDarwin systems, the math library never sets\n&quot;errno&quot;. There is therefore no reason for the\ncompiler to consider the possibility that it might, and\n<b>-fno-math-errno</b> is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-funsafe-math-optimizations</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow\noptimizations for floating-point arithmetic that (a) assume\nthat arguments and results are valid and (b) may\nviolate</big> IEEE <big>or</big> ANSI <big>standards. When\nused at link time, it may include libraries or startup files\nthat change the default</big> FPU <big>control word or other\nsimilar optimizations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is not turned on by any <b>-O</b> option since it can\nresult in incorrect output for programs that depend on an\nexact implementation of</big> IEEE <big>or</big> ISO\n<big>rules/specifications for math functions. It may,\nhowever, yield faster code for programs that do not require\nthe guarantees of these specifications. Enables\n<b>-fno-signed-zeros</b>, <b>-fno-trapping-math</b>,\n<b>-fassociative-math</b> and\n<b>-freciprocal-math</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is\n<b>-fno-unsafe-math-optimizations</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fassociative-math</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow\nre-association of operands in series of floating-point\noperations. This violates the</big> ISO C <big>and C</big>\n++ <big>language standard by possibly changing computation\nresult.</big> NOTE: <big>re-ordering may change the sign of\nzero as well as ignore NaNs and inhibit or create underflow\nor overflow (and thus cannot be used on code that relies on\nrounding behavior like &quot;(x + 2**52) - 2**52&quot;. May\nalso reorder floating-point comparisons and thus may not be\nused when ordered comparisons are required. This option\nrequires that both <b>-fno-signed-zeros</b> and\n<b>-fno-trapping-math</b> be in effect. Moreover, it\ndoesn&rsquo;t make much sense with <b>-frounding-math</b>.\nFor Fortran the option is automatically enabled when both\n<b>-fno-signed-zeros</b> and <b>-fno-trapping-math</b> are\nin effect.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is\n<b>-fno-associative-math</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-freciprocal-math</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow the\nreciprocal of a value to be used instead of dividing by the\nvalue if this enables optimizations. For example &quot;x /\ny&quot; can be replaced with &quot;x * (1/y)&quot;, which is\nuseful if &quot;(1/y)&quot; is subject to common\nsubexpression elimination. Note that this loses precision\nand increases the number of flops operating on the\nvalue.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is\n<b>-fno-reciprocal-math</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ffinite-math-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow\noptimizations for floating-point arithmetic that assume that\narguments and results are not NaNs or\n+-Infs.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is not turned on by any <b>-O</b> option since it can\nresult in incorrect output for programs that depend on an\nexact implementation of</big> IEEE <big>or</big> ISO\n<big>rules/specifications for math functions. It may,\nhowever, yield faster code for programs that do not require\nthe guarantees of these\nspecifications.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is\n<b>-fno-finite-math-only</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-signed-zeros</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow\noptimizations for floating-point arithmetic that ignore the\nsignedness of zero.</big> IEEE <big>arithmetic specifies the\nbehavior of distinct +0.0 and -0.0 values, which then\nprohibits simplification of expressions such as x+0.0 or\n0.0*x (even with <b>-ffinite-math-only</b>). This option\nimplies that the sign of a zero result isn&rsquo;t\nsignificant.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-fsigned-zeros</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-trapping-math</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile code\nassuming that floating-point operations cannot generate\nuser-visible traps. These traps include division by zero,\noverflow, underflow, inexact result and invalid operation.\nThis option requires that <b>-fno-signaling-nans</b> be in\neffect. Setting this option may allow faster code if one\nrelies on &quot;non-stop&quot;</big> IEEE <big>arithmetic,\nfor example.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption should never be turned on by any <b>-O</b> option\nsince it can result in incorrect output for programs that\ndepend on an exact implementation of</big> IEEE\n<big>or</big> ISO <big>rules/specifications for math\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-ftrapping-math</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-frounding-math</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\ntransformations and optimizations that assume default\nfloating-point rounding behavior. This is round-to-zero for\nall floating point to integer conversions, and\nround-to-nearest for all other arithmetic truncations. This\noption should be specified for programs that change\nthe</big> FP <big>rounding mode dynamically, or that may be\nexecuted with a non-default rounding mode. This option\ndisables constant folding of floating-point expressions at\ncompile time (which may be affected by rounding mode) and\narithmetic transformations that are unsafe in the presence\nof sign-dependent rounding modes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-fno-rounding-math</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is experimental and does not currently guarantee to\ndisable all</big> GCC <big>optimizations that are affected\nby rounding mode. Future versions of</big> GCC <big>may\nprovide finer control of this setting using C99&rsquo;s\n&quot;FENV_ACCESS&quot; pragma. This command-line option\nwill be used to specify the default state for\n&quot;FENV_ACCESS&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsignaling-nans</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile code\nassuming that</big> IEEE <big>signaling NaNs may generate\nuser-visible traps during floating-point operations. Setting\nthis option disables optimizations that may change the\nnumber of exceptions visible with signaling NaNs. This\noption implies <b>-ftrapping-math</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption causes the preprocessor macro\n&quot;__SUPPORT_SNAN__&quot; to be\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-fno-signaling-nans</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is experimental and does not currently guarantee to\ndisable all</big> GCC <big>optimizations that affect\nsignaling NaN behavior.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-fp-int-builtin-inexact</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not allow the\nbuilt-in functions &quot;ceil&quot;, &quot;floor&quot;,\n&quot;round&quot; and &quot;trunc&quot;, and their\n&quot;float&quot; and &quot;long double&quot; variants, to\ngenerate code that raises the &quot;inexact&quot;\nfloating-point exception for noninteger arguments.</big> ISO\nC99 <big>and C11 allow these functions to raise the\n&quot;inexact&quot; exception, but</big> ISO/IEC TS\n18661-1:2014, <big>the C bindings to</big> IEEE 754-2008,\n<big>as integrated into</big> ISO C2X, <big>does not allow\nthese functions to do so.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-ffp-int-builtin-inexact</b>, allowing the\nexception to be raised, unless C2X or a later C standard is\nselected. This option does nothing unless\n<b>-ftrapping-math</b> is in effect.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Even\nif <b>-fno-fp-int-builtin-inexact</b> is used, if the\nfunctions generate a call to a library function then the\n&quot;inexact&quot; exception may be raised if the library\nimplementation does not follow</big> TS\n18661.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-fsingle-precision-constant</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat\nfloating-point constants as single precision instead of\nimplicitly converting them to double-precision\nconstants.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcx-limited-range</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When enabled,\nthis option states that a range reduction step is not needed\nwhen performing complex division. Also, there is no checking\nwhether the result of a complex multiplication or division\nis &quot;NaN + I*NaN&quot;, with an attempt to rescue the\nsituation in that case. The default is\n<b>-fno-cx-limited-range</b>, but is enabled by\n<b>-ffast-math</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption controls the default setting of the</big> ISO C99\n<big>&quot;CX_LIMITED_RANGE&quot; pragma. Nevertheless, the\noption applies to all languages.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcx-fortran-rules</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Complex\nmultiplication and division follow Fortran rules. Range\nreduction is done as part of complex division, but there is\nno checking whether the result of a complex multiplication\nor division is &quot;NaN + I*NaN&quot;, with an attempt to\nrescue the situation in that case.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is\n<b>-fno-cx-fortran-rules</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options control optimizations that may improve\nperformance, but are not enabled by any <b>-O</b> options.\nThis section includes experimental options that may produce\nbroken code. <b><br>\n-fbranch-probabilities</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>After running a\nprogram compiled with <b>-fprofile-arcs</b>, you can compile\nit a second time using <b>-fbranch-probabilities</b>, to\nimprove optimizations based on the number of times each\nbranch was taken. When a program compiled with\n<b>-fprofile-arcs</b> exits, it saves arc execution counts\nto a file called <i>sourcename.gcda</i> for each source\nfile. The information in this data file is very dependent on\nthe structure of the generated code, so you must use the\nsame source code and the same optimization options for both\ncompilations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-fbranch-probabilities</b>,</big> GCC <big>puts a</big>\n<b>REG_BR_PROB</b> <big>note on each</big> <b>JUMP_INSN</b>\n<big>and</big> <b>CALL_INSN</b> <big>. These can be used to\nimprove optimization. Currently, they are only used in one\nplace: in <i>reorg.c</i>, instead of guessing which path a\nbranch is most likely to take, the</big> <b>REG_BR_PROB</b>\n<big>values are used to exactly determine which path is\ntaken more often.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-values</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If combined with\n<b>-fprofile-arcs</b>, it adds code so that some data about\nvalues of expressions in the program is\ngathered.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-fbranch-probabilities</b>, it reads back the data\ngathered from profiling values of expressions for usage in\noptimizations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby <b>-fprofile-generate</b>, <b>-fprofile-use</b>, and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-reorder-functions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Function\nreordering based on profile instrumentation collects first\ntime of execution of a function and orders these functions\nin ascending order.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nwith <b>-fprofile-use</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fvpt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If combined with\n<b>-fprofile-arcs</b>, this option instructs the compiler to\nadd code to gather information about values of\nexpressions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-fbranch-probabilities</b>, it reads back the data\ngathered and actually performs the optimizations based on\nthem. Currently the optimizations include specialization of\ndivision operations using the knowledge about the value of\nthe denominator.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nwith <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-frename-registers</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to avoid\nfalse dependencies in scheduled code by making use of\nregisters left over after register allocation. This\noptimization most benefits processors with lots of\nregisters. Depending on the debug information format adopted\nby the target, however, it can make debugging impossible,\nsince variables no longer stay in a &quot;home\nregister&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby default with <b>-funroll-loops</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fschedule-fusion</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Performs a\ntarget dependent pass over the instruction stream to\nschedule instructions of same type together because target\nmachine can execute them more efficiently if they are\nadjacent to each other in the instruction\nflow.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nat levels <b>-O2</b>, <b>-O3</b>,\n<b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftracer</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform tail\nduplication to enlarge superblock size. This transformation\nsimplifies the control flow of the function allowing other\noptimizations to do a better job.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-funroll-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Unroll loops\nwhose number of iterations can be determined at compile time\nor upon entry to the loop. <b>-funroll-loops</b> implies\n<b>-frerun-cse-after-loop</b>, <b>-fweb</b> and\n<b>-frename-registers</b>. It also turns on complete loop\npeeling (i.e. complete removal of loops with a small\nconstant number of iterations). This option makes code\nlarger, and may or may not make it run\nfaster.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-funroll-all-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Unroll all\nloops, even if their number of iterations is uncertain when\nthe loop is entered. This usually makes programs run more\nslowly. <b>-funroll-all-loops</b> implies the same options\nas <b>-funroll-loops</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpeel-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Peels loops for\nwhich there is enough information that they do not roll much\n(from profile feedback or static analysis). It also turns on\ncomplete loop peeling (i.e. complete removal of loops with\nsmall constant number of iterations).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby <b>-O3</b>, <b>-fprofile-use</b>, and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmove-loop-invariants</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the loop\ninvariant motion pass in the</big> RTL <big>loop optimizer.\nEnabled at level <b>-O1</b> and higher, except for\n<b>-Og</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsplit-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Split a loop\ninto two if it contains a condition that&rsquo;s always true\nfor one side of the iteration space and false for the\nother.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-funswitch-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Move branches\nwith loop invariant conditions out of the loop, with\nduplicates of the loop on both branches (modified according\nto result of the condition).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Enabled\nby <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fversion-loops-for-strides</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If a loop\niterates over an array with a variable stride, create\nanother version of the loop that assumes the stride is\nalways one. For example:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>for\n(int i = 0; i &lt; n; ++i) <br>\nx[i * stride] = ...;</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>becomes:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>if\n(stride == 1) <br>\nfor (int i = 0; i &lt; n; ++i) <br>\nx[i] = ...; <br>\nelse <br>\nfor (int i = 0; i &lt; n; ++i) <br>\nx[i * stride] = ...;</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nis particularly useful for assumed-shape arrays in Fortran\nwhere (for example) it allows better vectorization assuming\ncontiguous accesses. This flag is enabled by default at\n<b>-O3</b>. It is also enabled by <b>-fprofile-use</b> and\n<b>-fauto-profile</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ffunction-sections\n<br>\n-fdata-sections</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Place each\nfunction or data item into its own section in the output\nfile if the target supports arbitrary sections. The name of\nthe function or the name of the data item determines the\nsection&rsquo;s name in the output\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Use\nthese options on systems where the linker can perform\noptimizations to improve locality of reference in the\ninstruction space. Most systems using the</big> ELF\n<big>object format have linkers with such optimizations.\nOn</big> AIX, <big>the linker rearranges sections (CSECTs)\nbased on the call graph. The performance impact\nvaries.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Together\nwith a linker garbage collection (linker\n<b>--gc-sections</b> option) these options may lead to\nsmaller statically-linked executables (after\nstripping).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On</big>\nELF/DWARF <big>systems these options do not degenerate the\nquality of the debug information. There could be issues with\nother object files/debug info formats.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Only\nuse these options when there are significant benefits from\ndoing so. When you specify these options, the assembler and\nlinker create larger object and executable files and are\nalso slower. These options affect code generation. They\nprevent optimizations by the compiler and assembler using\nrelative locations inside a translation unit since the\nlocations are unknown until link time. An example of such an\noptimization is relaxing calls to short call\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstdarg-opt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Optimize the\nprologue of variadic argument functions with respect to\nusage of those arguments.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>NOTE:\n<big>In Ubuntu 14.10 and later versions,\n<b>-fstack-protector-strong</b> is enabled by default for C,\nC</big> ++ <big>, ObjC, ObjC++, if none of\n<b>-fno-stack-protector</b>, <b>-nostdlib</b>, nor\n<b>-ffreestanding</b> are found.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsection-anchors</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Try to reduce\nthe number of symbolic address calculations by using shared\n&quot;anchor&quot; symbols to address nearby objects. This\ntransformation can help to reduce the number of</big> GOT\n<big>entries and</big> GOT <big>accesses on some\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, the implementation of the following function\n&quot;foo&quot;:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>static\nint a, b, c; <br>\nint foo (void) { return a + b + c; }</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>usually\ncalculates the addresses of all three variables, but if you\ncompile it with <b>-fsection-anchors</b>, it accesses the\nvariables from a common anchor point instead. The effect is\nsimilar to the following pseudocode (which isn&rsquo;t valid\nC):</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\nfoo (void) <br>\n{ <br>\nregister int *xr = &amp;x; <br>\nreturn xr[&amp;a - &amp;x] + xr[&amp;b - &amp;x] + xr[&amp;c\n- &amp;x]; <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Not\nall targets support this option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fzero-call-used-regs=</b><i>choice</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Zero call-used\nregisters at function return to increase program security by\neither mitigating Return-Oriented Programming (</big> ROP\n<big>) attacks or preventing information leakage through\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\npossible values of <i>choice</i> are the same as for the\n&quot;zero_call_used_regs&quot; attribute. The default is\n<b>skip</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan control this behavior for a specific function by using\nthe function attribute\n&quot;zero_call_used_regs&quot;.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>--param</b>\n<i>name</i><b>=</b><i>value</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>In some\nplaces,</big> GCC <big>uses various constants to control the\namount of optimization that is done. For example,</big> GCC\n<big>does not inline functions that contain more than a\ncertain number of instructions. You can control some of\nthese constants on the command line using the <b>--param</b>\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nnames of specific parameters, and the meaning of the values,\nare tied to the internals of the compiler, and are subject\nto change without notice in future\nreleases.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\norder to get minimal, maximal and default value of a\nparameter, one can use <b>--help=param -Q</b>\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\neach case, the <i>value</i> is an integer. The following\nchoices of <i>name</i> are recognized for all targets:\n<b><br>\npredictable-branch-outcome</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When branch is\npredicted to be taken with probability lower than this\nthreshold (in percent), then it is considered well\npredictable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-rtl-if-conversion-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>RTL\n<big>if-conversion tries to remove conditional branches\naround a block and replace them with conditionally executed\ninstructions. This parameter gives the maximum number of\ninstructions in a block which should be considered for\nif-conversion. The compiler will also use other heuristics\nto decide whether if-conversion is likely to be\nprofitable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-rtl-if-conversion-predictable-cost</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>RTL\n<big>if-conversion will try to remove conditional branches\naround a block and replace them with conditionally executed\ninstructions. These parameters give the maximum permissible\ncost for the sequence that would be generated by\nif-conversion depending on whether the branch is statically\ndetermined to be predictable or not. The units for this\nparameter are the same as those for the</big> GCC\n<big>internal seq_cost metric. The compiler will try to\nprovide a reasonable default for this parameter using\nthe</big> BRANCH_COST <big>target\nmacro.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-crossjump-edges</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of incoming edges to consider for cross-jumping. The\nalgorithm used by <b>-fcrossjumping</b> is O(N^2) in the\nnumber of edges incoming to each block. Increasing values\nmean more aggressive optimization, making the compilation\ntime increase with probably small improvement in executable\nsize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>min-crossjump-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nnumber of instructions that must be matched at the end of\ntwo blocks before cross-jumping is performed on them. This\nvalue is ignored in the case where all instructions in the\nblock being cross-jumped from are\nmatched.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-grow-copy-bb-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum code\nsize expansion factor when copying basic blocks instead of\njumping. The expansion is relative to a jump\ninstruction.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-goto-duplication-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions to duplicate to a block that jumps to\na computed goto. To avoid O(N^2) behavior in a number of\npasses,</big> GCC <big>factors computed gotos early in the\ncompilation process, and unfactors them as late as possible.\nOnly computed jumps at the end of a basic blocks with no\nmore than max-goto-duplication-insns are\nunfactored.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-delay-slot-insn-search</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions to consider when looking for an\ninstruction to fill a delay slot. If more than this\narbitrary number of instructions are searched, the time\nsavings from filling the delay slot are minimal, so stop\nsearching. Increasing values mean more aggressive\noptimization, making the compilation time increase with\nprobably small improvement in execution\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-delay-slot-live-search</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When trying to\nfill delay slots, the maximum number of instructions to\nconsider when searching for a block with valid live register\ninformation. Increasing this arbitrarily chosen value means\nmore aggressive optimization, increasing the compilation\ntime. This parameter should be removed when the delay slot\ncode is rewritten to maintain the control-flow\ngraph.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-gcse-memory</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The approximate\nmaximum amount of memory in &quot;kB&quot; that can be\nallocated in order to perform the global common\nsubexpression elimination optimization. If more memory than\nspecified is required, the optimization is not\ndone.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-gcse-insertion-ratio</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>If the ratio of\nexpression insertions to deletions is larger than this value\nfor any expression, then</big> RTL PRE <big>inserts or\nremoves the expression and thus leaves partially redundant\ncomputations in the instruction\nstream.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-pending-list-length</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of pending dependencies scheduling allows before\nflushing the current state and starting over. Large\nfunctions with few branches or calls can create excessively\nlarge lists which needlessly consume memory and\nresources.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-modulo-backtrack-attempts</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of backtrack attempts the scheduler should make when\nmodulo scheduling a loop. Larger values can exponentially\nincrease compilation time.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-inline-insns-single</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Several\nparameters control the tree inliner used in</big> GCC.\n<big>This number sets the maximum number of instructions\n(counted in</big> GCC <big>&rsquo;s internal representation)\nin a single function that the tree inliner considers for\ninlining. This only affects functions declared inline and\nmethods implemented in a class declaration (C</big> ++\n<big>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-inline-insns-auto</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When you use\n<b>-finline-functions</b> (included in <b>-O3</b>), a lot of\nfunctions that would otherwise not be considered for\ninlining by the compiler are investigated. To those\nfunctions, a different (more restrictive) limit compared to\nfunctions declared inline can be applied (<b>--param\nmax-inline-insns-auto</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-inline-insns-small</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This is bound\napplied to calls which are considered relevant with\n<b>-finline-small-functions</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-inline-insns-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This is bound\napplied to calls which are optimized for size. Small growth\nmay be desirable to anticipate optimization oppurtunities\nexposed by inlining.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>uninlined-function-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Number of\ninstructions accounted by inliner for function overhead such\nas function prologue and epilogue.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>uninlined-function-time</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Extra time\naccounted by inliner for function overhead such as time\nneeded to execute function prologue and\nepilogue</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>inline-heuristics-hint-percent</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The scale (in\npercents) applied to <b>inline-insns-single</b>,\n<b>inline-insns-single-O2</b>, <b>inline-insns-auto</b> when\ninline heuristics hints that inlining is very profitable\n(will enable later optimizations).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>uninlined-thunk-insns\n<br>\nuninlined-thunk-time</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Same as\n<b>--param uninlined-function-insns</b> and <b>--param\nuninlined-function-time</b> but applied to function\nthunks</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>inline-min-speedup</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When estimated\nperformance improvement of caller + callee runtime exceeds\nthis threshold (in percent), the function can be inlined\nregardless of the limit on <b>--param\nmax-inline-insns-single</b> and <b>--param\nmax-inline-insns-auto</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>large-function-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The limit\nspecifying really large functions. For functions larger than\nthis limit after inlining, inlining is constrained by\n<b>--param large-function-growth</b>. This parameter is\nuseful primarily to avoid extreme compilation time caused by\nnon-linear algorithms used by the back\nend.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>large-function-growth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies\nmaximal growth of large function caused by inlining in\npercents. For example, parameter value 100 limits large\nfunction growth to 2.0 times the original\nsize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>large-unit-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The limit\nspecifying large translation unit. Growth caused by inlining\nof units larger than this limit is limited by <b>--param\ninline-unit-growth</b>. For small units this might be too\ntight. For example, consider a unit consisting of function A\nthat is inline and B that just calls A three times. If B is\nsmall relative to A, the growth of unit is 300\\% and yet\nsuch inlining is very sane. For very large units consisting\nof small inlineable functions, however, the overall unit\ngrowth limit is needed to avoid exponential explosion of\ncode size. Thus for smaller units, the size is increased to\n<b>--param large-unit-insns</b> before applying <b>--param\ninline-unit-growth</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lazy-modules</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof concurrently open C</big> ++ <big>module files when lazy\nloading.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>inline-unit-growth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies\nmaximal overall growth of the compilation unit caused by\ninlining. For example, parameter value 20 limits unit growth\nto 1.2 times the original size. Cold functions (either\nmarked cold via an attribute or by profile feedback) are not\naccounted into the unit size.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-unit-growth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies\nmaximal overall growth of the compilation unit caused by\ninterprocedural constant propagation. For example, parameter\nvalue 10 limits unit growth to 1.1 times the original\nsize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-large-unit-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The size of\ntranslation unit that IPA-CP pass considers\nlarge.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>large-stack-frame</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The limit\nspecifying large stack frames. While inlining the algorithm\nis trying to not grow past this limit too\nmuch.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>large-stack-frame-growth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies\nmaximal growth of large stack frames caused by inlining in\npercents. For example, parameter value 1000 limits large\nstack frame growth to 11 times the original\nsize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-inline-insns-recursive\n<br>\nmax-inline-insns-recursive-auto</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies the\nmaximum number of instructions an out-of-line copy of a\nself-recursive inline function can grow into by performing\nrecursive inlining.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><b>--param\nmax-inline-insns-recursive</b> applies to functions declared\ninline. For functions not declared inline, recursive\ninlining happens only when <b>-finline-functions</b>\n(included in <b>-O3</b>) is enabled; <b>--param\nmax-inline-insns-recursive-auto</b> applies\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-inline-recursive-depth\n<br>\nmax-inline-recursive-depth-auto</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies the\nmaximum recursion depth used for recursive\ninlining.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big><b>--param\nmax-inline-recursive-depth</b> applies to functions declared\ninline. For functions not declared inline, recursive\ninlining happens only when <b>-finline-functions</b>\n(included in <b>-O3</b>) is enabled; <b>--param\nmax-inline-recursive-depth-auto</b> applies\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>min-inline-recursive-probability</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Recursive\ninlining is profitable only for function having deep\nrecursion in average and can hurt for function having little\nrecursion depth by increasing the prologue size or\ncomplexity of function body to other\noptimizers.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>When\nprofile feedback is available (see\n<b>-fprofile-generate</b>) the actual recursion depth can be\nguessed from the probability that function recurses via a\ngiven call expression. This parameter limits inlining only\nto call expressions whose probability exceeds the given\nthreshold (in percents).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>early-inlining-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specify growth\nthat the early inliner can make. In effect it increases the\namount of inlining for code having a large abstraction\npenalty.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-early-inliner-iterations</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Limit of\niterations of the early inliner. This basically bounds the\nnumber of nested indirect calls the early inliner can\nresolve. Deeper chains are still handled by late\ninlining.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>comdat-sharing-probability</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Probability (in\npercent) that C</big> ++ <big>inline function with comdat\nvisibility are shared across multiple compilation\nunits.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>modref-max-bases\n<br>\nmodref-max-refs <br>\nmodref-max-accesses</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies the\nmaximal number of base pointers, references and accesses\nstored for a single function by mod/ref\nanalysis.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>modref-max-tests</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies the\nmaxmal number of tests alias oracle can perform to\ndisambiguate memory locations using the mod/ref information.\nThis parameter ought to be bigger than <b>--param\nmodref-max-bases</b> and <b>--param\nmodref-max-refs</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>modref-max-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies the\nmaximum depth of</big> DFS <big>walk used by modref escape\nanalysis. Setting to 0 disables the analysis\ncompletely.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>modref-max-escape-points</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies the\nmaximum number of escape points tracked by modref per\nSSA-name.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>profile-func-internal-id</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>A parameter to\ncontrol whether to use function internal id in profile\ndatabase lookup. If the value is 0, the compiler uses an id\nthat is based on function assembler name and filename, which\nmakes old profile data more tolerant to source changes such\nas function reordering etc.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>min-vect-loop-bound</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nnumber of iterations under which loops are not vectorized\nwhen <b>-ftree-vectorize</b> is used. The number of\niterations after vectorization needs to be greater than the\nvalue specified by this option to allow\nvectorization.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>gcse-cost-distance-ratio</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Scaling factor\nin calculation of maximum distance an expression can be\nmoved by</big> GCSE <big>optimizations. This is currently\nsupported only in the code hoisting pass. The bigger the\nratio, the more aggressive code hoisting is with simple\nexpressions, i.e., the expressions that have cost less than\n<b>gcse-unrestricted-cost</b>. Specifying 0 disables\nhoisting of simple expressions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>gcse-unrestricted-cost</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Cost, roughly\nmeasured as the cost of a single typical machine\ninstruction, at which</big> GCSE <big>optimizations do not\nconstrain the distance an expression can travel. This is\ncurrently supported only in the code hoisting pass. The\nlesser the cost, the more aggressive code hoisting is.\nSpecifying 0 allows all expressions to travel unrestricted\ndistances.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-hoist-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The depth of\nsearch in the dominator tree for expressions to hoist. This\nis used to avoid quadratic behavior in hoisting algorithm.\nThe value of 0 does not limit on the search, but may slow\ndown compilation of huge functions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-tail-merge-comparisons</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\namount of similar bbs to compare a bb with. This is used to\navoid quadratic behavior in tree tail\nmerging.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-tail-merge-iterations</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\namount of iterations of the pass over the function. This is\nused to limit compilation time in tree tail\nmerging.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>store-merging-allow-unaligned</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Allow the store\nmerging pass to introduce unaligned stores if it is legal to\ndo so.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-stores-to-merge</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of stores to attempt to merge into wider stores in\nthe store merging pass.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-store-chains-to-track</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of store chains to track at the same time in the\nattempt to merge them into wider stores in the store merging\npass.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-stores-to-track</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of stores to track at the same time in the attemt to\nto merge them into wider stores in the store merging\npass.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-unrolled-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions that a loop may have to be unrolled.\nIf a loop is unrolled, this parameter also determines how\nmany times the loop code is unrolled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-average-unrolled-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions biased by probabilities of their\nexecution that a loop may have to be unrolled. If a loop is\nunrolled, this parameter also determines how many times the\nloop code is unrolled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-unroll-times</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of unrollings of a single loop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-peeled-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions that a loop may have to be peeled. If\na loop is peeled, this parameter also determines how many\ntimes the loop code is peeled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-peel-times</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of peelings of a single loop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-peel-branches</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of branches on the hot path through the peeled\nsequence.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-completely-peeled-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of insns of a completely peeled\nloop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-completely-peel-times</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of iterations of a loop to be suitable for complete\npeeling.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-completely-peel-loop-nest-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\ndepth of a loop nest suitable for complete\npeeling.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-unswitch-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of insns of an unswitched loop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-unswitch-level</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of branches unswitched in a single\nloop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lim-expensive</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum cost\nof an expensive expression in the loop invariant\nmotion.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>min-loop-cond-split-prob</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When</big> FDO\n<big>profile information is available,\n<b>min-loop-cond-split-prob</b> specifies minimum threshold\nfor probability of semi-invariant condition statement to\ntrigger loop split.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>iv-consider-all-candidates-bound</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Bound on number\nof candidates for induction variables, below which all\ncandidates are considered for each use in induction variable\noptimizations. If there are more candidates than this, only\nthe most relevant ones are considered to avoid quadratic\ntime complexity.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>iv-max-considered-uses</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The induction\nvariable optimizations give up on loops that contain more\ninduction variable uses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>iv-always-prune-cand-set-bound</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>If the number of\ncandidates in the set is smaller than this value, always try\nto remove unnecessary ivs from the set when adding a new\none.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>avg-loop-niter</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Average number\nof iterations of a loop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>dse-max-object-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum size (in\nbytes) of objects tracked bytewise by dead store\nelimination. Larger values may result in larger compilation\ntimes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>dse-max-alias-queries-per-store</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof queries into the alias oracle per store. Larger values\nresult in larger compilation times and may result in more\nremoved dead stores.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>scev-max-expr-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Bound on size of\nexpressions used in the scalar evolutions analyzer. Large\nexpressions slow the analyzer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>scev-max-expr-complexity</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Bound on the\ncomplexity of the expressions in the scalar evolutions\nanalyzer. Complex expressions slow the\nanalyzer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-tree-if-conversion-phi-args</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof arguments in a</big> PHI <big>supported by</big> TREE\n<big>if conversion unless the loop is marked with simd\npragma.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>vect-max-version-for-alignment-checks</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of run-time checks that can be performed when doing\nloop versioning for alignment in the\nvectorizer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>vect-max-version-for-alias-checks</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of run-time checks that can be performed when doing\nloop versioning for alias in the\nvectorizer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>vect-max-peeling-for-alignment</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of loop peels to enhance access alignment for\nvectorizer. Value -1 means no limit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-iterations-to-track</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of iterations of a loop the brute-force algorithm for\nanalysis of the number of iterations of the loop tries to\nevaluate.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hot-bb-count-fraction</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The denominator\nn of fraction 1/n of the maximal execution count of a basic\nblock in the entire program that a basic block needs to at\nleast have in order to be considered hot. The default is\n10000, which means that a basic block is considered hot if\nits execution count is greater than 1/10000 of the maximal\nexecution count. 0 means that it is never considered hot.\nUsed in non-LTO mode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hot-bb-count-ws-permille</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The number of\nmost executed permilles, ranging from 0 to 1000, of the\nprofiled execution of the entire program to which the\nexecution count of a basic block must be part of in order to\nbe considered hot. The default is 990, which means that a\nbasic block is considered hot if its execution count\ncontributes to the upper 990 permilles, or 99.0%, of the\nprofiled execution of the entire program. 0 means that it is\nnever considered hot. Used in</big> LTO\n<big>mode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hot-bb-frequency-fraction</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The denominator\nn of fraction 1/n of the execution frequency of the entry\nblock of a function that a basic block of this function\nneeds to at least have in order to be considered hot. The\ndefault is 1000, which means that a basic block is\nconsidered hot in a function if it is executed more\nfrequently than 1/1000 of the frequency of the entry block\nof the function. 0 means that it is never considered\nhot.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>unlikely-bb-count-fraction</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The denominator\nn of fraction 1/n of the number of profiled runs of the\nentire program below which the execution count of a basic\nblock must be in order for the basic block to be considered\nunlikely executed. The default is 20, which means that a\nbasic block is considered unlikely executed if it is\nexecuted in fewer than 1/20, or 5%, of the runs of the\nprogram. 0 means that it is always considered unlikely\nexecuted.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-predicted-iterations</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of loop iterations we predict statically. This is\nuseful in cases where a function contains a single loop with\nknown bound and another loop with unknown bound. The known\nnumber of iterations is predicted correctly, while the\nunknown number of iterations average to roughly 10. This\nmeans that the loop without bounds appears artificially cold\nrelative to the other one.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>builtin-expect-probability</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Control the\nprobability of the expression having the specified value.\nThis parameter takes a percentage (i.e. 0 ... 100) as\ninput.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>builtin-string-cmp-inline-length</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nlength of a constant string for a builtin string cmp call\neligible for inlining.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>align-threshold</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Select fraction\nof the maximal frequency of executions of a basic block in a\nfunction to align the basic block.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>align-loop-iterations</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>A loop expected\nto iterate at least the selected number of iterations is\naligned.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tracer-dynamic-coverage\n<br>\ntracer-dynamic-coverage-feedback</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This value is\nused to limit superblock formation once the given percentage\nof executed instructions is covered. This limits unnecessary\ncode size expansion.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>The\n<b>tracer-dynamic-coverage-feedback</b> parameter is used\nonly when profile feedback is available. The real profiles\n(as opposed to statically estimated ones) are much less\nbalanced allowing the threshold to be larger\nvalue.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tracer-max-code-growth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Stop tail\nduplication once code growth has reached given percentage.\nThis is a rather artificial limit, as most of the duplicates\nare eliminated later in cross jumping, so it may be set to\nmuch higher values than is the desired code\ngrowth.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tracer-min-branch-ratio</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Stop reverse\ngrowth when the reverse probability of best edge is less\nthan this threshold (in percent).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tracer-min-branch-probability\n<br>\n\ntracer-min-branch-probability-feedback</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Stop forward\ngrowth if the best edge has probability lower than this\nthreshold.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>Similarly\nto <b>tracer-dynamic-coverage</b> two parameters are\nprovided. <b>tracer-min-branch-probability-feedback</b> is\nused for compilation with profile feedback and\n<b>tracer-min-branch-probability</b> compilation without.\nThe value for compilation with profile feedback needs to be\nmore conservative (higher) in order to make tracer\neffective.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>stack-clash-protection-guard-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specify the size\nof the operating system provided stack guard as 2 raised to\n<i>num</i> bytes. Higher values may reduce the number of\nexplicit probes, but a value larger than the operating\nsystem provided guard will leave code vulnerable to stack\nclash style attacks.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>stack-clash-protection-probe-interval</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Stack clash\nprotection involves probing stack space as it is allocated.\nThis param controls the maximum distance between probes into\nthe stack as 2 raised to <i>num</i> bytes. Higher values may\nreduce the number of explicit probes, but a value larger\nthan the operating system provided guard will leave code\nvulnerable to stack clash style\nattacks.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-cse-path-length</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of basic blocks on path that</big> CSE\n<big>considers.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-cse-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions</big> CSE <big>processes before\nflushing.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ggc-min-expand</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>GCC <big>uses a\ngarbage collector to manage its own memory allocation. This\nparameter specifies the minimum percentage by which the\ngarbage collector&rsquo;s heap should be allowed to expand\nbetween collections. Tuning this may improve compilation\nspeed; it has no effect on code\ngeneration.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>The\ndefault is 30% + 70% * (</big> RAM/1GB <big>) with an upper\nbound of 100% when</big> RAM <big>&gt;= 1GB. If\n&quot;getrlimit&quot; is available, the notion of\n&quot;</big> RAM&quot; <big>is the smallest of actual</big>\nRAM <big>and &quot;RLIMIT_DATA&quot; or\n&quot;RLIMIT_AS&quot;. If</big> GCC <big>is not able to\ncalculate</big> RAM <big>on a particular platform, the lower\nbound of 30% is used. Setting this parameter and\n<b>ggc-min-heapsize</b> to zero causes a full collection to\noccur at every opportunity. This is extremely slow, but can\nbe useful for debugging.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ggc-min-heapsize</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Minimum size of\nthe garbage collector&rsquo;s heap before it begins\nbothering to collect garbage. The first collection occurs\nafter the heap expands by <b>ggc-min-expand</b>% beyond\n<b>ggc-min-heapsize</b>. Again, tuning this may improve\ncompilation speed, and has no effect on code\ngeneration.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>The\ndefault is the smaller of</big> RAM/8, RLIMIT_RSS, <big>or a\nlimit that tries to ensure that</big> RLIMIT_DATA\n<big>or</big> RLIMIT_AS <big>are not exceeded, but with a\nlower bound of 4096 (four megabytes) and an upper bound of\n131072 (128 megabytes). If</big> GCC <big>is not able to\ncalculate</big> RAM <big>on a particular platform, the lower\nbound is used. Setting this parameter very large effectively\ndisables garbage collection. Setting this parameter and\n<b>ggc-min-expand</b> to zero causes a full collection to\noccur at every opportunity.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-reload-search-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instruction reload should look backward for\nequivalent register. Increasing values mean more aggressive\noptimization, making the compilation time increase with\nprobably slightly better performance.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-cselib-memory-locations</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of memory locations cselib should take into account.\nIncreasing values mean more aggressive optimization, making\nthe compilation time increase with probably slightly better\nperformance.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-sched-ready-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions ready to be issued the scheduler\nshould consider at any given time during the first\nscheduling pass. Increasing values mean more thorough\nsearches, making the compilation time increase with probably\nlittle benefit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-sched-region-blocks</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of blocks in a region to be considered for interblock\nscheduling.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-pipeline-region-blocks</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of blocks in a region to be considered for pipelining\nin the selective scheduler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-sched-region-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of insns in a region to be considered for interblock\nscheduling.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-pipeline-region-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of insns in a region to be considered for pipelining\nin the selective scheduler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>min-spec-prob</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nprobability (in percents) of reaching a source block for\ninterblock speculative scheduling.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-sched-extend-regions-iters</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of iterations through</big> CFG <big>to extend\nregions. A value of 0 disables region\nextensions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-sched-insn-conflict-delay</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nconflict delay for an insn to be considered for speculative\nmotion.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sched-spec-prob-cutoff</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimal\nprobability of speculation success (in percents), so that\nspeculative insns are scheduled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sched-state-edge-prob-cutoff</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nprobability an edge must have for the scheduler to save its\nstate across it.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sched-mem-true-dep-cost</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Minimal distance\n(in</big> CPU <big>cycles) between store and load targeting\nsame memory locations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>selsched-max-lookahead</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum size\nof the lookahead window of selective scheduling. It is a\ndepth of search for available\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>selsched-max-sched-times</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of times that an instruction is scheduled during\nselective scheduling. This is the limit on the number of\niterations through which the instruction may be\npipelined.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>selsched-insns-to-rename</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of best instructions in the ready list that are\nconsidered for renaming in the selective\nscheduler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sms-min-sc</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nvalue of stage count that swing modulo scheduler\ngenerates.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-last-value-rtl</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum size\nmeasured as number of RTLs that can be recorded in an\nexpression in combiner for a pseudo register as last known\nvalue of that register.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-combine-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions the</big> RTL <big>combiner tries to\ncombine.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>integer-share-limit</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Small integer\nconstants can use a shared data structure, reducing the\ncompiler&rsquo;s memory usage and increasing its speed. This\nsets the maximum value of a shared integer\nconstant.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ssp-buffer-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum size\nof buffers (i.e. arrays) that receive stack smashing\nprotection when <b>-fstack-protection</b> is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>This\ndefault before Ubuntu 10.10 was &quot;8&quot;. Currently it\nis &quot;4&quot;, to increase the number of functions\nprotected by the stack protector.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>min-size-for-stack-sharing</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum size\nof variables taking part in stack slot sharing when not\noptimizing.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-jump-thread-duplication-stmts</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof statements allowed in a block that needs to be duplicated\nwhen threading jumps.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-fields-for-field-sensitive</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof fields in a structure treated in a field sensitive manner\nduring pointer analysis.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>prefetch-latency</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Estimate on\naverage number of instructions that are executed before\nprefetch finishes. The distance prefetched ahead is\nproportional to this constant. Increasing this number may\nalso lead to less streams being prefetched (see\n<b>simultaneous-prefetches</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>simultaneous-prefetches</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof prefetches that can run at the same\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>l1-cache-line-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The size of\ncache line in L1 data cache, in bytes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>l1-cache-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The size of L1\ndata cache, in kilobytes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>l2-cache-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The size of L2\ndata cache, in kilobytes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>prefetch-dynamic-strides</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Whether the loop\narray prefetch pass should issue software prefetch hints for\nstrides that are non-constant. In some cases this may be\nbeneficial, though the fact the stride is non-constant may\nmake it hard to predict when there is clear benefit to\nissuing these hints.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>Set\nto 1 if the prefetch hints should be issued for non-constant\nstrides. Set to 0 if prefetch hints should be issued only\nfor strides that are known to be constant and below\n<b>prefetch-minimum-stride</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>prefetch-minimum-stride</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Minimum constant\nstride, in bytes, to start using prefetch hints for. If the\nstride is less than this threshold, prefetch hints will not\nbe issued.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>This\nsetting is useful for processors that have hardware\nprefetchers, in which case there may be conflicts between\nthe hardware prefetchers and the software prefetchers. If\nthe hardware prefetchers have a maximum stride they can\nhandle, it should be used here to improve the use of\nsoftware prefetchers.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>A\nvalue of -1 means we don&rsquo;t have a threshold and\ntherefore prefetch hints can be issued for any constant\nstride.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>This\nsetting is only useful for strides that are known and\nconstant.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>loop-interchange-max-num-stmts</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of stmts in a loop to be\ninterchanged.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>loop-interchange-stride-ratio</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nratio between stride of two loops for interchange to be\nprofitable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>min-insn-to-prefetch-ratio</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nratio between the number of instructions and the number of\nprefetches to enable prefetching in a\nloop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>prefetch-min-insn-to-mem-ratio</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nratio between the number of instructions and the number of\nmemory references to enable prefetching in a\nloop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>use-canonical-types</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Whether the\ncompiler should use the &quot;canonical&quot; type system.\nShould always be 1, which uses a more efficient internal\nmechanism for comparing types in C</big> ++ <big>and\nObjective-C</big> ++ <big>. However, if bugs in the\ncanonical type system are causing compilation failures, set\nthis value to 0 to disable canonical\ntypes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>switch-conversion-max-branch-ratio</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Switch\ninitialization conversion refuses to create arrays that are\nbigger than <b>switch-conversion-max-branch-ratio</b> times\nthe number of branches in the switch.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-partial-antic-length</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum length\nof the partial antic set computed during the tree partial\nredundancy elimination optimization (<b>-ftree-pre</b>) when\noptimizing at <b>-O3</b> and above. For some sorts of source\ncode the enhanced partial redundancy elimination\noptimization can run away, consuming all of the memory\navailable on the host machine. This parameter sets a limit\non the length of the sets that are computed, which prevents\nthe runaway behavior. Setting a value of 0 for this\nparameter allows an unlimited set\nlength.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>rpo-vn-max-loop-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum loop\ndepth that is value-numbered optimistically. When the limit\nhits the innermost <i>rpo-vn-max-loop-depth</i> loops and\nthe outermost loop in the loop nest are value-numbered\noptimistically and the remaining ones\nnot.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sccvn-max-alias-queries-per-access</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof alias-oracle queries we perform when looking for\nredundancies for loads and stores. If this limit is hit the\nsearch is aborted and the load or store is not considered\nredundant. The number of queries is algorithmically limited\nto the number of stores on all paths from the load to the\nfunction entry.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ira-max-loops-num</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>IRA <big>uses\nregional register allocation by default. If a function\ncontains more loops than the number given by this parameter,\nonly at most the given number of the most\nfrequently-executed loops form regions for regional register\nallocation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ira-max-conflict-table-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Although</big>\nIRA <big>uses a sophisticated algorithm to compress the\nconflict table, the table can still require excessive\namounts of memory for huge functions. If the conflict table\nfor a function could be more than the size in</big> MB\n<big>given by this parameter, the register allocator instead\nuses a faster, simpler, and lower-quality algorithm that\ndoes not require building a pseudo-register conflict\ntable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ira-loop-reserved-regs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>IRA <big>can be used\nto evaluate more accurate register pressure in loops for\ndecisions to move loop invariants (see <b>-O3</b>). The\nnumber of available registers reserved for some other\npurposes is given by this parameter. Default of the\nparameter is the best found from numerous\nexperiments.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lra-inheritance-ebb-probability-cutoff</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>LRA <big>tries to\nreuse values reloaded in registers in subsequent insns. This\noptimization is called inheritance.</big> EBB <big>is used\nas a region to do this optimization. The parameter defines a\nminimal fall-through edge probability in percentage used to\nadd</big> BB <big>to inheritance</big> EBB <big>in</big>\nLRA. <big>The default value was chosen from numerous runs\nof</big> SPEC2000 <big>on x86-64.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>loop-invariant-max-bbs-in-loop</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Loop invariant\nmotion can be very expensive, both in compilation time and\nin amount of needed compile-time memory, with very large\nloops. Loops with more basic blocks than this parameter\nwon&rsquo;t have loop invariant motion optimization\nperformed on them.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>loop-max-datarefs-for-datadeps</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Building data\ndependencies is expensive for very large loops. This\nparameter limits the number of data references in loops that\nare considered for data dependence analysis. These large\nloops are no handled by the optimizations using loop data\ndependencies.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-vartrack-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Sets a maximum\nnumber of hash table slots to use during variable tracking\ndataflow analysis of any function. If this limit is exceeded\nwith variable tracking at assignments enabled, analysis for\nthat function is retried without it, after removing all\ndebug insns from the function. If the limit is exceeded even\nwithout debug insns, var tracking analysis is completely\ndisabled for the function. Setting the parameter to zero\nmakes it unlimited.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-vartrack-expr-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Sets a maximum\nnumber of recursion levels when attempting to map variable\nnames or debug temporaries to value expressions. This trades\ncompilation time for more complete debug information. If\nthis is set too low, value expressions that are available\nand could be represented in debug information may end up not\nbeing used; setting this higher may enable the compiler to\nfind more complex debug expressions, but compile time and\nmemory use may grow.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-debug-marker-count</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Sets a threshold\non the number of debug markers (e.g. begin stmt markers) to\navoid complexity explosion at inlining or expanding to</big>\nRTL. <big>If a function has more such gimple stmts than the\nset limit, such stmts will be dropped from the inlined copy\nof a function, and from its</big> RTL\n<big>expansion.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>min-nondebug-insn-uid</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Use uids\nstarting at this parameter for nondebug insns. The range\nbelow the parameter is reserved exclusively for debug insns\ncreated by <b>-fvar-tracking-assignments</b>, but debug\ninsns may get (non-overlapping) uids above it if the\nreserved range is exhausted.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-sra-ptr-growth-factor</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>IPA-SRA replaces\na pointer to an aggregate with one or more new parameters\nonly when their cumulative size is less or equal to\n<b>ipa-sra-ptr-growth-factor</b> times the size of the\noriginal pointer parameter.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-sra-max-replacements</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum pieces\nof an aggregate that IPA-SRA tracks. As a consequence, it is\nalso the maximum number of replacements of a formal\nparameter.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sra-max-scalarization-size-Ospeed\n<br>\nsra-max-scalarization-size-Osize</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The two Scalar\nReduction of Aggregates passes (</big> SRA <big>and IPA-SRA)\naim to replace scalar parts of aggregates with uses of\nindependent scalar variables. These parameters control the\nmaximum size, in storage units, of aggregate which is\nconsidered for replacement when compiling for speed\n(<b>sra-max-scalarization-size-Ospeed</b>) or size\n(<b>sra-max-scalarization-size-Osize</b>)\nrespectively.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sra-max-propagations</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of artificial accesses that Scalar Replacement of\nAggregates (</big> SRA <big>) will track, per one local\nvariable, in order to facilitate copy\npropagation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tm-max-aggregate-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When making\ncopies of thread-local variables in a transaction, this\nparameter specifies the size in bytes after which variables\nare saved with the logging functions as opposed to\nsave/restore code sequence pairs. This option only applies\nwhen using <b>-fgnu-tm</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>graphite-max-nb-scop-params</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>To avoid\nexponential effects in the Graphite loop transforms, the\nnumber of parameters in a Static Control Part (SCoP) is\nbounded. A value of zero can be used to lift the bound. A\nvariable whose value is unknown at compilation time and\ndefined outside a SCoP is a parameter of the\nSCoP.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>loop-block-tile-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Loop blocking or\nstrip mining transforms, enabled with <b>-floop-block</b> or\n<b>-floop-strip-mine</b>, strip mine each loop in the loop\nnest by a given number of iterations. The strip length can\nbe changed using the <b>loop-block-tile-size</b>\nparameter.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-jump-function-lookups</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies number\nof statements visited during jump function offset\ndiscovery.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-value-list-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>IPA-CP attempts\nto track all possible values and types passed to a\nfunction&rsquo;s parameter in order to propagate them and\nperform devirtualization. <b>ipa-cp-value-list-size</b> is\nthe maximum number of values and types it stores per one\nformal parameter of a function.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-eval-threshold</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>IPA-CP\ncalculates its own score of cloning profitability heuristics\nand performs those cloning opportunities with scores that\nexceed <b>ipa-cp-eval-threshold</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-max-recursive-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum depth of\nrecursive cloning for self-recursive\nfunction.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-min-recursive-probability</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Recursive\ncloning only when the probability of call being executed\nexceeds the parameter.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-recursion-penalty</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Percentage\npenalty the recursive functions will receive when they are\nevaluated for cloning.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-single-call-penalty</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Percentage\npenalty functions containing a single call to another\nfunction will receive when they are evaluated for\ncloning.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-max-agg-items</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>IPA-CP is also\ncapable to propagate a number of scalar values passed in an\naggregate. <b>ipa-max-agg-items</b> controls the maximum\nnumber of such values per one\nparameter.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-cp-loop-hint-bonus</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When IPA-CP\ndetermines that a cloning candidate would make the number of\niterations of a loop known, it adds a bonus of\n<b>ipa-cp-loop-hint-bonus</b> to the profitability score of\nthe candidate.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-max-loop-predicates</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of different predicates</big> IPA <big>will use to\ndescribe when loops in a function have known\nproperties.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-max-aa-steps</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>During its\nanalysis of function bodies, IPA-CP employs alias analysis\nin order to track values pointed to by function parameters.\nIn order not spend too much time analyzing huge functions,\nit gives up and consider all memory clobbered after\nexamining <b>ipa-max-aa-steps</b> statements modifying\nmemory.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-max-switch-predicate-bounds</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximal number\nof boundary endpoints of case ranges of switch statement.\nFor switch exceeding this limit, IPA-CP will not construct\ncloning cost predicate, which is used to estimate cloning\nbenefit, for default case of the switch\nstatement.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ipa-max-param-expr-ops</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>IPA-CP will\nanalyze conditional statement that references some function\nparameter to estimate benefit for cloning upon certain\nconstant value. But if number of operations in a parameter\nexpression exceeds <b>ipa-max-param-expr-ops</b>, the\nexpression is treated as complicated one, and is not handled\nby</big> IPA <big>analysis.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lto-partitions</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specify desired\nnumber of partitions produced during</big> WHOPR\n<big>compilation. The number of partitions should exceed the\nnumber of CPUs used for compilation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lto-min-partition</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Size of minimal\npartition for</big> WHOPR <big>(in estimated instructions).\nThis prevents expenses of splitting very small programs into\ntoo many partitions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lto-max-partition</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Size of max\npartition for</big> WHOPR <big>(in estimated instructions).\nto provide an upper bound for individual size of partition.\nMeant to be used only with balanced\npartitioning.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lto-max-streaming-parallelism</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximal number\nof parallel processes used for</big> LTO\n<big>streaming.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>cxx-max-namespaces-for-diagnostic-help</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of namespaces to consult for suggestions when C</big>\n++ <big>name lookup fails for an\nidentifier.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sink-frequency-threshold</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nrelative execution frequency (in percents) of the target\nblock relative to a statement&rsquo;s original block to\nallow statement sinking of a statement. Larger numbers\nresult in more aggressive statement sinking. A small\npositive adjustment is applied for statements with memory\noperands as those are even more profitable so\nsink.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-stores-to-sink</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of conditional store pairs that can be sunk. Set to 0\nif either vectorization (<b>-ftree-vectorize</b>) or\nif-conversion (<b>-ftree-loop-if-convert</b>) is\ndisabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>case-values-threshold</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The smallest\nnumber of different values for which it is best to use a\njump-table instead of a tree of conditional branches. If the\nvalue is 0, use the default for the\nmachine.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>jump-table-max-growth-ratio-for-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum code\nsize growth ratio when expanding into a jump table (in\npercent). The parameter is used when optimizing for\nsize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>jump-table-max-growth-ratio-for-speed</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum code\nsize growth ratio when expanding into a jump table (in\npercent). The parameter is used when optimizing for\nspeed.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tree-reassoc-width</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Set the maximum\nnumber of instructions executed in parallel in reassociated\ntree. This parameter overrides target dependent heuristics\nused by default if has non zero value.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sched-pressure-algorithm</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Choose between\nthe two available implementations of\n<b>-fsched-pressure</b>. Algorithm 1 is the original\nimplementation and is the more likely to prevent\ninstructions from being reordered. Algorithm 2 was designed\nto be a compromise between the relatively conservative\napproach taken by algorithm 1 and the rather aggressive\napproach taken by the default scheduler. It relies more\nheavily on having a regular register file and accurate\nregister pressure classes. See <i>haifa-sched.c</i> in\nthe</big> GCC <big>sources for more\ndetails.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>The\ndefault choice depends on the target.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-slsr-cand-scan</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Set the maximum\nnumber of existing candidates that are considered when\nseeking a basis for a new straight-line strength reduction\ncandidate.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asan-globals</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable buffer\noverflow detection for global objects. This kind of\nprotection is enabled by default if you are using\n<b>-fsanitize=address</b> option. To disable global objects\nprotection use <b>--param\nasan-globals=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asan-stack</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable buffer\noverflow detection for stack objects. This kind of\nprotection is enabled by default when using\n<b>-fsanitize=address</b>. To disable stack protection use\n<b>--param asan-stack=0</b> option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asan-instrument-reads</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable buffer\noverflow detection for memory reads. This kind of protection\nis enabled by default when using <b>-fsanitize=address</b>.\nTo disable memory reads protection use <b>--param\nasan-instrument-reads=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asan-instrument-writes</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable buffer\noverflow detection for memory writes. This kind of\nprotection is enabled by default when using\n<b>-fsanitize=address</b>. To disable memory writes\nprotection use <b>--param asan-instrument-writes=0</b>\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asan-memintrin</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable detection\nfor built-in functions. This kind of protection is enabled\nby default when using <b>-fsanitize=address</b>. To disable\nbuilt-in functions protection use <b>--param\nasan-memintrin=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asan-use-after-return</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable detection\nof use-after-return. This kind of protection is enabled by\ndefault when using the <b>-fsanitize=address</b> option. To\ndisable it use <b>--param\nasan-use-after-return=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>Note:\nBy default the check is disabled at run time. To enable it,\nadd &quot;detect_stack_use_after_return=1&quot; to the\nenvironment variable</big> <b>ASAN_OPTIONS</b>\n<big>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asan-instrumentation-with-call-threshold</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>If number of\nmemory accesses in function being instrumented is greater or\nequal to this number, use callbacks instead of inline\nchecks. E.g. to disable inline code use <b>--param\nasan-instrumentation-with-call-threshold=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hwasan-instrument-stack</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable hwasan\ninstrumentation of statically sized stack-allocated\nvariables. This kind of instrumentation is enabled by\ndefault when using <b>-fsanitize=hwaddress</b> and disabled\nby default when using <b>-fsanitize=kernel-hwaddress</b>. To\ndisable stack instrumentation use <b>--param\nhwasan-instrument-stack=0</b>, and to enable it use\n<b>--param\nhwasan-instrument-stack=1</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hwasan-random-frame-tag</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When using stack\ninstrumentation, decide tags for stack variables using a\ndeterministic sequence beginning at a random tag for each\nframe. With this parameter unset tags are chosen using the\nsame sequence but beginning from 1. This is enabled by\ndefault for <b>-fsanitize=hwaddress</b> and unavailable for\n<b>-fsanitize=kernel-hwaddress</b>. To disable it use\n<b>--param\nhwasan-random-frame-tag=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hwasan-instrument-allocas</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable hwasan\ninstrumentation of dynamically sized stack-allocated\nvariables. This kind of instrumentation is enabled by\ndefault when using <b>-fsanitize=hwaddress</b> and disabled\nby default when using <b>-fsanitize=kernel-hwaddress</b>. To\ndisable instrumentation of such variables use <b>--param\nhwasan-instrument-allocas=0</b>, and to enable it use\n<b>--param\nhwasan-instrument-allocas=1</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hwasan-instrument-reads</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable hwasan\nchecks on memory reads. Instrumentation of reads is enabled\nby default for both <b>-fsanitize=hwaddress</b> and\n<b>-fsanitize=kernel-hwaddress</b>. To disable checking\nmemory reads use <b>--param\nhwasan-instrument-reads=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hwasan-instrument-writes</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable hwasan\nchecks on memory writes. Instrumentation of writes is\nenabled by default for both <b>-fsanitize=hwaddress</b> and\n<b>-fsanitize=kernel-hwaddress</b>. To disable checking\nmemory writes use <b>--param\nhwasan-instrument-writes=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hwasan-instrument-mem-intrinsics</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable hwasan\ninstrumentation of builtin functions. Instrumentation of\nthese builtin functions is enabled by default for both\n<b>-fsanitize=hwaddress</b> and\n<b>-fsanitize=kernel-hwaddress</b>. To disable\ninstrumentation of builtin functions use <b>--param\nhwasan-instrument-mem-intrinsics=0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>use-after-scope-direct-emission-threshold</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>If the size of a\nlocal variable in bytes is smaller or equal to this number,\ndirectly poison (or unpoison) shadow memory instead of using\nrun-time callbacks.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tsan-distinguish-volatile</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Emit special\ninstrumentation for accesses to\nvolatiles.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tsan-instrument-func-entry-exit</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Emit\ninstrumentation calls to _<b>_tsan_func_entry()</b> and\n_<b>_tsan_func_exit()</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-fsm-thread-path-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof instructions to copy when duplicating blocks on a finite\nstate automaton jump thread path.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-fsm-thread-length</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof basic blocks on a finite state automaton jump thread\npath.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-fsm-thread-paths</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof new jump thread paths to create for a finite state\nautomaton.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>parloops-chunk-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Chunk size of\nomp schedule for loops parallelized by\nparloops.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>parloops-schedule</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Schedule type of\nomp schedule for loops parallelized by parloops (static,\ndynamic, guided, auto, runtime).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>parloops-min-per-thread</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nnumber of iterations per thread of an innermost parallelized\nloop for which the parallelized variant is preferred over\nthe single threaded one. Note that for a parallelized loop\nnest the minimum number of iterations of the outermost loop\nper thread is two.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-ssa-name-query-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum depth of\nrecursion when querying properties of</big> SSA <big>names\nin things like fold routines. One level of recursion\ncorresponds to following a use-def\nchain.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-speculative-devirt-maydefs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of may-defs we analyze when looking for a must-def\nspecifying the dynamic type of an object that invokes a\nvirtual call we may be able to devirtualize\nspeculatively.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-vrp-switch-assertions</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of assertions to add along the default edge of a\nswitch statement during</big> VRP.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>evrp-mode</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specifies the\nmode Early</big> VRP <big>should operate\nin.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>unroll-jam-min-percent</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\npercentage of memory references that must be optimized away\nfor the unroll-and-jam transformation to be considered\nprofitable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>unroll-jam-max-unroll</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of times the outer loop should be unrolled by the\nunroll-and-jam transformation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-rtl-if-conversion-unpredictable-cost</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum\npermissible cost for the sequence that would be generated by\nthe</big> RTL <big>if-conversion pass for a branch that is\nconsidered unpredictable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-variable-expansions-in-unroller</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>If\n<b>-fvariable-expansion-in-unroller</b> is used, the maximum\nnumber of times that an individual variable will be expanded\nduring loop unrolling.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tracer-min-branch-probability-feedback</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Stop forward\ngrowth if the probability of best edge is less than this\nthreshold (in percent). Used when profile feedback is\navailable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>partial-inlining-entry-probability</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum\nprobability of the entry</big> BB <big>of split region (in\npercent relative to entry</big> BB <big>of the function) to\nmake partial inlining happen.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-tracked-strlens</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof strings for which strlen optimization pass will track\nstring lengths.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>gcse-after-reload-partial-fraction</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The threshold\nratio for performing partial redundancy elimination after\nreload.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>gcse-after-reload-critical-fraction</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The threshold\nratio of critical edges execution count that permit\nperforming redundancy elimination after\nreload.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-loop-header-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of insns in loop header duplicated by the copy loop\nheaders pass.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>vect-epilogues-nomask</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable loop\nepilogue vectorization using smaller vector\nsize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>vect-partial-vector-usage</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Controls when\nthe loop vectorizer considers using partial vector loads and\nstores as an alternative to falling back to scalar code. 0\nstops the vectorizer from ever using partial vector loads\nand stores. 1 allows partial vector loads and stores if\nvectorization removes the need for the code to iterate. 2\nallows partial vector loads and stores in all loops. The\nparameter only has an effect on targets that support partial\nvector loads and stores.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>avoid-fma-max-bits</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof bits for which we avoid creating\nFMAs.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sms-loop-average-count-threshold</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>A threshold on\nthe average loop count considered by the swing modulo\nscheduler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sms-dfa-history</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The number of\ncycles the swing modulo scheduler considers when checking\nconflicts using</big> DFA.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>max-inline-insns-recursive-auto</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions non-inline function can grow to via\nrecursive inlining.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>graphite-allow-codegen-errors</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Whether codegen\nerrors should be ICEs when\n<b>-fchecking</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sms-max-ii-factor</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>A factor for\ntuning the upper bound that swing modulo scheduler uses for\nscheduling a loop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lra-max-considered-reload-pseudos</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The max number\nof reload pseudos which are considered during spilling a\nnon-reload pseudo.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-pow-sqrt-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum depth of\nsqrt chains to use when synthesizing exponentiation by a\nreal constant.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-dse-active-local-stores</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof active local stores in</big> RTL <big>dead store\nelimination.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asan-instrument-allocas</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable asan\nallocas/VLAs protection.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-iterations-computation-cost</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Bound on the\ncost of an expression to compute the number of\niterations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-isl-operations</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof isl operations, 0 means unlimited.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>graphite-max-arrays-per-scop</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof arrays per scop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-vartrack-reverse-op-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Max. size of loc\nlist for which reverse ops should be\nadded.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tracer-dynamic-coverage-feedback</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The percentage\nof function, weighted by execution frequency, that must be\ncovered by trace formation. Used when profile feedback is\navailable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-inline-recursive-depth-auto</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\ndepth of recursive inlining for non-inline\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fsm-scale-path-stmts</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Scale factor to\napply to the number of statements in a threading path when\ncomparing to the number of (scaled)\nblocks.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fsm-maximum-phi-arguments</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof arguments a</big> PHI <big>may have before the</big> FSM\n<big>threader will not try to thread through its\nblock.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>uninit-control-dep-attempts</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof nested calls to search for control dependencies during\nuninitialized variable analysis.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sra-max-scalarization-size-Osize</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum size, in\nstorage units, of an aggregate which should be considered\nfor scalarization when compiling for\nsize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fsm-scale-path-blocks</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Scale factor to\napply to the number of blocks in a threading path when\ncomparing to the number of (scaled)\nstatements.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sched-autopref-queue-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Hardware\nautoprefetcher scheduler model control flag. Number of\nlookahead cycles the model looks into; at &rsquo; &rsquo;\nonly enable instruction sorting\nheuristic.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>loop-versioning-max-inner-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions that an inner loop can have before\nthe loop versioning pass considers it too big to\ncopy.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>loop-versioning-max-outer-insns</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of instructions that an outer loop can have before\nthe loop versioning pass considers it too big to copy,\ndiscounting any instructions in inner loops that directly\nbenefit from versioning.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ssa-name-def-chain-limit</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of</big> SSA_NAME <big>assignments to follow in\ndetermining a property of a variable such as its value. This\nlimits the number of iterations or recursive calls</big> GCC\n<big>performs when optimizing certain statements or when\ndetermining their validity prior to issuing\ndiagnostics.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>store-merging-max-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum size of\na single store merging region in\nbytes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hash-table-verification-limit</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The number of\nelements for which hash table verification is done for each\nsearched element.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>max-find-base-term-values</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum number\nof VALUEs handled during a single find_base_term\ncall.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>analyzer-max-enodes-per-program-point</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of exploded nodes per program point within the\nanalyzer, before terminating analysis of that\npoint.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>analyzer-max-constraints</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of constraints per state.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>analyzer-min-snodes-for-call-summary</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The minimum\nnumber of supernodes within a function for the analyzer to\nconsider summarizing its effects at call\nsites.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>analyzer-max-enodes-for-full-dump</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\ndepth of exploded nodes that should appear in a dot dump\nbefore switching to a less verbose\nformat.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>analyzer-max-recursion-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of times a callsite can appear in a call stack within\nthe analyzer, before terminating analysis of a call that\nwould recurse deeper.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>analyzer-max-svalue-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\ndepth of a symbolic value, before approximating the value as\nunknown.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>analyzer-max-infeasible-edges</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of infeasible edges to reject before declaring a\ndiagnostic as infeasible.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>gimple-fe-computed-hot-bb-threshold</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The number of\nexecutions of a basic block which is considered hot. The\nparameter is used only in</big> GIMPLE FE.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>analyzer-bb-explosion-factor</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The maximum\nnumber of &rsquo;after supernode&rsquo; exploded nodes\nwithin the analyzer per supernode, before terminating\nanalysis.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ranger-logical-depth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Maximum depth of\nlogical expression evaluation ranger will look through when\nevaluating outgoing edge ranges.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>openacc-kernels</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Specify mode of\nOpenACC &rsquo;kernels&rsquo; constructs handling. With\n<b>--param=openacc-kernels=decompose</b>, OpenACC\n&rsquo;kernels&rsquo; constructs are decomposed into parts,\na sequence of compute constructs, each then handled\nindividually. This is work in progress. With\n<b>--param=openacc-kernels=parloops</b>, OpenACC\n&rsquo;kernels&rsquo; constructs are handled by the\n<b>parloops</b> pass, en bloc. This is the current\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfollowing choices of <i>name</i> are available on AArch64\ntargets: <b><br>\naarch64-sve-compare-costs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When vectorizing\nfor</big> SVE, <big>consider using &quot;unpacked&quot;\nvectors for smaller elements and use the cost model to pick\nthe cheapest approach. Also use the cost model to choose\nbetween</big> SVE <big>and Advanced</big> SIMD\n<big>vectorization.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>Using\nunpacked vectors includes storing smaller elements in larger\ncontainers and accessing elements with extending loads and\ntruncating stores.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>aarch64-float-recp-precision</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The number of\nNewton iterations for calculating the reciprocal for float\ntype. The precision of division is proportional to this\nparam when division approximation is enabled. The default\nvalue is 1.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>aarch64-double-recp-precision</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The number of\nNewton iterations for calculating the reciprocal for double\ntype. The precision of division is propotional to this param\nwhen division approximation is enabled. The default value is\n2.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>aarch64-autovec-preference</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Force an</big>\nISA <big>selection strategy for auto-vectorization. Accepts\nvalues from 0 to 4, inclusive.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"2%\">\n\n\n<p><big><big><big><b>0</b></big></big></big></p></td>\n<td width=\"4%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>Use the default\nheuristics.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"2%\">\n\n\n<p><big><big><big><b>1</b></big></big></big></p></td>\n<td width=\"4%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>Use only Advanced</big> SIMD <big>for\nauto-vectorization.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"2%\">\n\n\n<p><big><big><big><b>2</b></big></big></big></p></td>\n<td width=\"4%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>Use only</big> SVE <big>for\nauto-vectorization.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"2%\">\n\n\n<p><big><big><big><b>3</b></big></big></big></p></td>\n<td width=\"4%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>Use both Advanced</big> SIMD\n<big>and</big> SVE. <big>Prefer Advanced</big> SIMD\n<big>when the costs are deemed equal.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"2%\">\n\n\n<p><big><big><big><b>4</b></big></big></big></p></td>\n<td width=\"4%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>Use both Advanced</big> SIMD\n<big>and</big> SVE. <big>Prefer</big> SVE <big>when the\ncosts are deemed equal.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>The\ndefault value is 0.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>aarch64-loop-vect-issue-rate-niters</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The tuning for\nsome AArch64 CPUs tries to take both latencies and issue\nrates into account when deciding whether a loop should be\nvectorized using</big> SVE, <big>vectorized using\nAdvanced</big> SIMD, <big>or not vectorized at all. If this\nparameter is set to <i>n</i>,</big> GCC <big>will not use\nthis heuristic for loops that are known to execute in fewer\nthan <i>n</i> Advanced</big> SIMD\n<big>iterations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><b>Program\nInstrumentation Options</b></big> <br>\nGCC <big>supports a number of command-line options that\ncontrol adding run-time instrumentation to the code it\nnormally generates. For example, one purpose of\ninstrumentation is collect profiling statistics for use in\nfinding program hot spots, code coverage analysis, or\nprofile-guided optimizations. Another class of program\ninstrumentation is adding run-time checking to detect\nprogramming errors like invalid pointer dereferences or\nout-of-bounds array accesses, as well as deliberately\nhostile attacks such as stack smashing or C</big> ++\n<big>vtable hijacking. There is also a general hook which\ncan be used to implement other forms of tracing or\nfunction-level instrumentation for debug or program analysis\npurposes.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-p</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-pg</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Generate extra code to write profile\ninformation suitable for the analysis program <b>prof</b>\n(for <b>-p</b>) or <b>gprof</b> (for <b>-pg</b>). You must\nuse this option when compiling the source files you want\ndata about, and you must also use it when\nlinking.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan use the function attribute\n&quot;no_instrument_function&quot; to suppress profiling of\nindividual functions when compiling with these\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-arcs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Add code so that\nprogram flow <i>arcs</i> are instrumented. During execution\nthe program records how many times each branch and call is\nexecuted and how many times it is taken or returns. On\ntargets that support constructors with priority support,\nprofiling properly handles constructors, destructors and\nC</big> ++ <big>constructors (and destructors) of classes\nwhich are used as a type of a global\nvariable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nthe compiled program exits it saves this data to a file\ncalled <i>auxname.gcda</i> for each source file. The data\nmay be used for profile-directed optimizations\n(<b>-fbranch-probabilities</b>), or for test coverage\nanalysis (<b>-ftest-coverage</b>). Each object file&rsquo;s\n<i>auxname</i> is generated from the name of the output\nfile, if explicitly specified and it is not the final\nexecutable, otherwise it is the basename of the source file.\nIn both cases any suffix is removed (e.g. <i>foo.gcda</i>\nfor input file <i>dir/foo.c</i>, or <i>dir/foo.gcda</i> for\noutput file specified as <b>-o\ndir/foo.o</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>--coverage</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nused to compile and link code instrumented for coverage\nanalysis. The option is a synonym for <b>-fprofile-arcs\n-ftest-coverage</b> (when compiling) and <b>-lgcov</b> (when\nlinking). See the documentation for those options for more\ndetails.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Compile the source files with\n<b>-fprofile-arcs</b> plus optimization and code generation\noptions. For test coverage analysis, use the additional\n<b>-ftest-coverage</b> option. You do not need to profile\nevery source file in a program.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Compile the source files additionally\nwith <b>-fprofile-abs-path</b> to create absolute path names\nin the <i>.gcno</i> files. This allows <b>gcov</b> to find\nthe correct sources in projects where compilations occur\nwith different working directories.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Link your object files with <b>-lgcov</b>\nor <b>-fprofile-arcs</b> (the latter implies the\nformer).</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Run the program on a representative\nworkload to generate the arc profile information. This may\nbe repeated any number of times. You can run concurrent\ninstances of your program, and provided that the file system\nsupports locking, the data files will be correctly updated.\nUnless a strict</big> ISO C <big>dialect option is in\neffect, &quot;fork&quot; calls are detected and correctly\nhandled without double counting.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>For profile-directed optimizations,\ncompile the source files again with the same optimization\nand code generation options plus\n<b>-fbranch-probabilities</b>.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>For test coverage analysis, use\n<b>gcov</b> to produce human readable information from the\n<i>.gcno</i> and <i>.gcda</i> files. Refer to the\n<b>gcov</b> documentation for further\ninformation.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-fprofile-arcs</b>, for each function of your\nprogram</big> GCC <big>creates a program flow graph, then\nfinds a spanning tree for the graph. Only arcs that are not\non the spanning tree have to be instrumented: the compiler\nadds code to count the number of times that these arcs are\nexecuted. When an arc is the only exit or only entrance to a\nblock, the instrumentation code can be added to the block;\notherwise, a new basic block must be created to hold the\ninstrumentation code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftest-coverage</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Produce a notes\nfile that the <b>gcov</b> code-coverage utility can use to\nshow program coverage. Each source file&rsquo;s note file is\ncalled <i>auxname.gcno</i>. Refer to the\n<b>-fprofile-arcs</b> option above for a description of\n<i>auxname</i> and instructions on how to generate test\ncoverage data. Coverage data matches the source files more\nclosely if you do not optimize.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-abs-path</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Automatically\nconvert relative source file names to absolute path names in\nthe <i>.gcno</i> files. This allows <b>gcov</b> to find the\ncorrect sources in projects where compilations occur with\ndifferent working directories.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-dir=</b><i>path</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ndirectory to search for the profile data files in to\n<i>path</i>. This option affects only the profile data\ngenerated by <b>-fprofile-generate</b>,\n<b>-ftest-coverage</b>, <b>-fprofile-arcs</b> and used by\n<b>-fprofile-use</b> and <b>-fbranch-probabilities</b> and\nits related options. Both absolute and relative paths can be\nused. By default,</big> GCC <big>uses the current directory\nas <i>path</i>, thus the profile data file appears in the\nsame directory as the object file. In order to prevent the\nfile name clashing, if the object file name is not an\nabsolute path, we mangle the absolute path of the\n<i>sourcename.gcda</i> file and use it as the file name of a\n<i>.gcda</i> file. See similar option\n<b>-fprofile-note</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nan executable is run in a massive parallel environment, it\nis recommended to save profile to different folders. That\ncan be done with variables in <i>path</i> that are exported\nduring run-time:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>%p</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"17%\">\n\n\n<p><big><big><big>process</big> ID.</big></big></p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><big><big><b><big>%q{</big> VAR\n<big>}</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>value of\nenvironment variable</big> <i>VAR</i></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-fprofile-generate\n<br>\n\n-fprofile-generate=</big></b><big><i>path</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable options\nusually used for instrumenting application to produce\nprofile useful for later recompilation with profile feedback\nbased optimization. You must use <b>-fprofile-generate</b>\nboth when compiling and when linking your\nprogram.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfollowing options are enabled: <b>-fprofile-arcs</b>,\n<b>-fprofile-values</b>, <b>-finline-functions</b>, and\n<b>-fipa-bit-cp</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>path</i> is specified,</big> GCC <big>looks at the\n<i>path</i> to find the profile feedback data files. See\n<b>-fprofile-dir</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\noptimize the program based on the collected profile\ninformation, use <b>-fprofile-use</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-info-section\n<br>\n\n-fprofile-info-section=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Register the\nprofile information in the specified section instead of\nusing a constructor/destructor. The section name is\n<i>name</i> if it is specified, otherwise the section name\ndefaults to &quot;.gcov_info&quot;. A pointer to the profile\ninformation generated by <b>-fprofile-arcs</b> or\n<b>-ftest-coverage</b> is placed in the specified section\nfor each translation unit. This option disables the profile\ninformation registration through a constructor and it\ndisables the profile information processing through a\ndestructor. This option is not intended to be used in hosted\nenvironments such as GNU/Linux. It targets systems with\nlimited resources which do not support constructors and\ndestructors. The linker could collect the input sections in\na continuous memory block and define start and end symbols.\nThe runtime support could dump the profiling information\nregistered in this linker set during program termination to\na serial line for example. A</big> GNU <big>linker script\nexample which defines a linker output section\nfollows:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>.gcov_info\n: <br>\n{ <br>\nPROVIDE (__gcov_info_start = .); <br>\nKEEP (*(.gcov_info)) <br>\nPROVIDE (__gcov_info_end = .); <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-note=</b><i>path</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If <i>path</i>\nis specified,</big> GCC <big>saves <i>.gcno</i> file into\n<i>path</i> location. If you combine the option with\nmultiple source files, the <i>.gcno</i> file will be\noverwritten.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-prefix-path=</b><i>path</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option can\nbe used in combination with\n<b>profile-generate=</b><i>profile_dir</i> and\n<b>profile-use=</b><i>profile_dir</i> to inform</big> GCC\n<big>where is the base directory of built source tree. By\ndefault <i>profile_dir</i> will contain files with mangled\nabsolute paths of all object files in the built project.\nThis is not desirable when directory used to build the\ninstrumented binary differs from the directory used to build\nthe binary optimized with profile feedback because the\nprofile data will not be found during the optimized build.\nIn such setups <b>-fprofile-prefix-path=</b><i>path</i> with\n<i>path</i> pointing to the base directory of the build can\nbe used to strip the irrelevant part of the path and keep\nall file names relative to the main build\ndirectory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-update=</b><i>method</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Alter the update\nmethod for an application instrumented for profile feedback\nbased optimization. The <i>method</i> argument should be one\nof <b>single</b>, <b>atomic</b> or <b>prefer-atomic</b>. The\nfirst one is useful for single-threaded applications, while\nthe second one prevents profile corruption by emitting\nthread-safe code.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nWhen an application does not properly join all threads (or\ncreates an detached thread), a profile file can be still\ncorrupted.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Using\n<b>prefer-atomic</b> would be transformed either to\n<b>atomic</b>, when supported by a target, or to\n<b>single</b> otherwise. The</big> GCC <big>driver\nautomatically selects <b>prefer-atomic</b> when\n<b>-pthread</b> is present in the command\nline.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-filter-files=</b><i>regex</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Instrument only\nfunctions from files whose name matches any of the regular\nexpressions (separated by\nsemi-colons).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, <b>-fprofile-filter-files=main\\.c;module.*\\.c</b>\nwill instrument only <i>main.c</i> and all C files starting\nwith &rsquo;module&rsquo;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-exclude-files=</b><i>regex</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Instrument only\nfunctions from files whose name does not match any of the\nregular expressions (separated by\nsemi-colons).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, <b>-fprofile-exclude-files=/usr/.*</b> will prevent\ninstrumentation of all files that are located in the\n<i>/usr/</i> folder.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-reproducible=</b>[<b>multithreaded</b>|<b>parallel-runs</b>|<b>serial</b>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control level of\nreproducibility of profile gathered by\n&quot;-fprofile-generate&quot;. This makes it possible to\nrebuild program with same outcome which is useful, for\nexample, for distribution packages.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-fprofile-reproducible=serial</b> the profile gathered by\n<b>-fprofile-generate</b> is reproducible provided the\ntrained program behaves the same at each invocation of the\ntrain run, it is not multi-threaded and profile data\nstreaming is always done in the same order. Note that\nprofile streaming happens at the end of program run but also\nbefore &quot;fork&quot; function is\ninvoked.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat it is quite common that execution counts of some part\nof programs depends, for example, on length of temporary\nfile names or memory space randomization (that may affect\nhash-table collision rate). Such non-reproducible part of\nprograms may be annotated by\n&quot;no_instrument_function&quot; function attribute.\n<b>gcov-dump</b> with <b>-l</b> can be used to dump gathered\ndata and verify that they are indeed\nreproducible.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-fprofile-reproducible=parallel-runs</b> collected\nprofile stays reproducible regardless the order of streaming\nof the data into gcda files. This setting makes it possible\nto run multiple instances of instrumented program in\nparallel (such as with &quot;make -j&quot;). This reduces\nquality of gathered data, in particular of indirect call\nprofiling.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=address</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nAddressSanitizer, a fast memory error detector. Memory\naccess instructions are instrumented to detect out-of-bounds\nand use-after-free bugs. The option enables\n<b>-fsanitize-address-use-after-scope</b>. See\n&lt;<b>https://github.com/google/sanitizers/wiki/AddressSanitizer</b>&gt;\nfor more details. The run-time behavior can be influenced\nusing the</big> <b>ASAN_OPTIONS</b> <big>environment\nvariable. When set to &quot;help=1&quot;, the available\noptions are shown at startup of the instrumented program.\nSee\n&lt;<b>https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags</b>&gt;\nfor a list of supported options. The option cannot be\ncombined with <b>-fsanitize=thread</b> or\n<b>-fsanitize=hwaddress</b>. Note that the only target\n<b>-fsanitize=hwaddress</b> is currently supported on is\nAArch64.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=kernel-address</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nAddressSanitizer for Linux kernel. See\n&lt;<b>https://github.com/google/kasan</b>&gt; for more\ndetails.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=hwaddress</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nHardware-assisted AddressSanitizer, which uses a hardware\nability to ignore the top byte of a pointer to allow the\ndetection of memory errors with a low memory overhead.\nMemory access instructions are instrumented to detect\nout-of-bounds and use-after-free bugs. The option enables\n<b>-fsanitize-address-use-after-scope</b>. See\n&lt;<b>https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html</b>&gt;\nfor more details. The run-time behavior can be influenced\nusing the</big> <b>HWASAN_OPTIONS</b> <big>environment\nvariable. When set to &quot;help=1&quot;, the available\noptions are shown at startup of the instrumented program.\nThe option cannot be combined with <b>-fsanitize=thread</b>\nor <b>-fsanitize=address</b>, and is currently only\navailable on AArch64.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=kernel-hwaddress</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nHardware-assisted AddressSanitizer for compilation of the\nLinux kernel. Similar to <b>-fsanitize=kernel-address</b>\nbut using an alternate instrumentation method, and similar\nto <b>-fsanitize=hwaddress</b> but with instrumentation\ndifferences necessary for compiling the Linux kernel. These\ndifferences are to avoid hwasan library initialization calls\nand to account for the stack pointer having a different\nvalue in its top byte.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><i>Note:</i>\nThis option has different defaults to the\n<b>-fsanitize=hwaddress</b>. Instrumenting the stack and\nalloca calls are not on by default but are still possible by\nspecifying the command-line options <b>--param\nhwasan-instrument-stack=1</b> and <b>--param\nhwasan-instrument-allocas=1</b> respectively. Using a random\nframe tag is not implemented for kernel\ninstrumentation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=pointer-compare</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Instrument\ncomparison operation (&lt;, &lt;=, &gt;, &gt;=) with pointer\noperands. The option must be combined with either\n<b>-fsanitize=kernel-address</b> or\n<b>-fsanitize=address</b> The option cannot be combined with\n<b>-fsanitize=thread</b>. Note: By default the check is\ndisabled at run time. To enable it, add\n&quot;detect_invalid_pointer_pairs=2&quot; to the\nenvironment variable</big> <b>ASAN_OPTIONS</b> <big>. Using\n&quot;detect_invalid_pointer_pairs=1&quot; detects invalid\noperation only when both pointers are\nnon-null.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=pointer-subtract</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Instrument\nsubtraction with pointer operands. The option must be\ncombined with either <b>-fsanitize=kernel-address</b> or\n<b>-fsanitize=address</b> The option cannot be combined with\n<b>-fsanitize=thread</b>. Note: By default the check is\ndisabled at run time. To enable it, add\n&quot;detect_invalid_pointer_pairs=2&quot; to the\nenvironment variable</big> <b>ASAN_OPTIONS</b> <big>. Using\n&quot;detect_invalid_pointer_pairs=1&quot; detects invalid\noperation only when both pointers are\nnon-null.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=thread</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nThreadSanitizer, a fast data race detector. Memory access\ninstructions are instrumented to detect data race bugs. See\n&lt;<b>https://github.com/google/sanitizers/wiki#threadsanitizer</b>&gt;\nfor more details. The run-time behavior can be influenced\nusing the</big> <b>TSAN_OPTIONS</b> <big>environment\nvariable; see\n&lt;<b>https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags</b>&gt;\nfor a list of supported options. The option cannot be\ncombined with <b>-fsanitize=address</b>,\n<b>-fsanitize=leak</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat sanitized atomic builtins cannot throw exceptions when\noperating on invalid memory addresses with non-call\nexceptions\n(<b>-fnon-call-exceptions</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=leak</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nLeakSanitizer, a memory leak detector. This option only\nmatters for linking of executables and the executable is\nlinked against a library that overrides &quot;malloc&quot;\nand other allocator functions. See\n&lt;<b>https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer</b>&gt;\nfor more details. The run-time behavior can be influenced\nusing the</big> <b>LSAN_OPTIONS</b> <big>environment\nvariable. The option cannot be combined with\n<b>-fsanitize=thread</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize=undefined</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nUndefinedBehaviorSanitizer, a fast undefined behavior\ndetector. Various computations are instrumented to detect\nundefined behavior at runtime. See\n&lt;<b>https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html</b>&gt;\nfor more details. The run-time behavior can be influenced\nusing the</big> <b>UBSAN_OPTIONS</b> <big>environment\nvariable. Current suboptions are: <b><br>\n-fsanitize=shift</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables checking that the result of a shift operation is not\nundefined. Note that what exactly is considered undefined\ndiffers slightly between C and C</big> ++ <big>, as well as\nbetween</big> ISO C90 <big>and C99, etc. This option has two\nsuboptions, <b>-fsanitize=shift-base</b> and\n<b>-fsanitize=shift-exponent</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=shift-exponent</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables checking that the second argument of a shift\noperation is not negative and is smaller than the precision\nof the promoted first argument.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=shift-base</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>If the second\nargument of a shift operation is within range, check that\nthe result of a shift operation is not undefined. Note that\nwhat exactly is considered undefined differs slightly\nbetween C and C</big> ++ <big>, as well as between</big> ISO\nC90 <big>and C99, etc.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=integer-divide-by-zero</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Detect integer\ndivision by zero as well as &quot;INT_MIN / -1&quot;\ndivision.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=unreachable</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>With this\noption, the compiler turns the\n&quot;__builtin_unreachable&quot; call into a diagnostics\nmessage call instead. When reaching the\n&quot;__builtin_unreachable&quot; call, the behavior is\nundefined.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=vla-bound</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\ninstructs the compiler to check that the size of a variable\nlength array is positive.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=null</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables pointer checking. Particularly, the application\nbuilt with this option turned on will issue an error message\nwhen it tries to dereference a</big> NULL <big>pointer, or\nif a reference (possibly an rvalue reference) is bound to\na</big> NULL <big>pointer, or if a method is invoked on an\nobject pointed by a</big> NULL\n<big>pointer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=return</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables return statement checking. Programs built with this\noption turned on will issue an error message when the end of\na non-void function is reached without actually returning a\nvalue. This option works in C</big> ++\n<big>only.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=signed-integer-overflow</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables signed integer overflow checking. We check that the\nresult of &quot;+&quot;, &quot;*&quot;, and both unary and\nbinary &quot;-&quot; does not overflow in the signed\narithmetics. Note, integer promotion rules must be taken\ninto account. That is, the following is not an\noverflow:</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>signed\nchar a = SCHAR_MAX; <br>\na++;</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=bounds</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of array bounds. Various out of\nbounds accesses are detected. Flexible array members,\nflexible array member-like arrays, and initializers of\nvariables with static storage are not\ninstrumented.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=bounds-strict</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables strict instrumentation of array bounds. Most out of\nbounds accesses are detected, including flexible array\nmembers and flexible array member-like arrays. Initializers\nof variables with static storage are not\ninstrumented.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=alignment</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables checking of alignment of pointers when they are\ndereferenced, or when a reference is bound to insufficiently\naligned target, or when a method or constructor is invoked\non insufficiently aligned object.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=object-size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of memory references using the\n&quot;__builtin_object_size&quot; function. Various out of\nbounds pointer accesses are detected.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=float-divide-by-zero</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Detect\nfloating-point division by zero. Unlike other similar\noptions, <b>-fsanitize=float-divide-by-zero</b> is not\nenabled by <b>-fsanitize=undefined</b>, since floating-point\ndivision by zero can be a legitimate way of obtaining\ninfinities and NaNs.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=float-cast-overflow</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables floating-point type to integer conversion checking.\nWe check that the result of the conversion does not\noverflow. Unlike other similar options,\n<b>-fsanitize=float-cast-overflow</b> is not enabled by\n<b>-fsanitize=undefined</b>. This option does not work well\nwith &quot;FE_INVALID&quot; exceptions\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=nonnull-attribute</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of calls, checking whether null\nvalues are not passed to arguments marked as requiring a\nnon-null value by the &quot;nonnull&quot; function\nattribute.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=returns-nonnull-attribute</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of return statements in functions\nmarked with &quot;returns_nonnull&quot; function attribute,\nto detect returning of null values from such\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=bool</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of loads from bool. If a value other\nthan 0/1 is loaded, a run-time error is\nissued.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=enum</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of loads from an enum type. If a\nvalue outside the range of values for the enum type is\nloaded, a run-time error is issued.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=vptr</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of C</big> ++ <big>member function\ncalls, member accesses and some conversions between pointers\nto base and derived classes, to verify the referenced object\nhas the correct dynamic type.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=pointer-overflow</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of pointer arithmetics. If the\npointer arithmetics overflows, a run-time error is\nissued.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize=builtin</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This option\nenables instrumentation of arguments to selected builtin\nfunctions. If an invalid value is passed to such arguments,\na run-time error is issued. E.g. passing 0 as the argument\nto &quot;__builtin_ctz&quot; or &quot;__builtin_clz&quot;\ninvokes undefined behavior and is diagnosed by this\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>While\n<b>-ftrapv</b> causes traps for signed overflows to be\nemitted, <b>-fsanitize=undefined</b> gives a diagnostic\nmessage. This currently works only for the C family of\nlanguages.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-sanitize=all</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ndisables all previously enabled sanitizers.\n<b>-fsanitize=all</b> is not allowed, as some sanitizers\ncannot be used together.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fasan-shadow-offset=</b><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nforces</big> GCC <big>to use custom shadow offset in\nAddressSanitizer checks. It is useful for experimenting with\ndifferent shadow memory layouts in Kernel\nAddressSanitizer.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize-sections=</b><i>s1</i><b>,</b><i>s2</i><b>,...</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Sanitize global\nvariables in selected user-defined sections. <i>si</i> may\ncontain wildcards.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize-recover</b>[<b>=</b><i>opts</i>]</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fsanitize-recover=</b>\ncontrols error recovery mode for sanitizers mentioned in\ncomma-separated list of <i>opts</i>. Enabling this option\nfor a sanitizer component causes it to attempt to continue\nrunning the program as if no error happened. This means\nmultiple runtime errors can be reported in a single program\nrun, and the exit code of the program may indicate success\neven when errors have been reported. The\n<b>-fno-sanitize-recover=</b> option can be used to alter\nthis behavior: only the first detected error is reported and\nprogram then exits with a non-zero exit\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Currently\nthis feature only works for <b>-fsanitize=undefined</b> (and\nits suboptions except for <b>-fsanitize=unreachable</b> and\n<b>-fsanitize=return</b>),\n<b>-fsanitize=float-cast-overflow</b>,\n<b>-fsanitize=float-divide-by-zero</b>,\n<b>-fsanitize=bounds-strict</b>,\n<b>-fsanitize=kernel-address</b> and\n<b>-fsanitize=address</b>. For these sanitizers error\nrecovery is turned on by default, except\n<b>-fsanitize=address</b>, for which this feature is\nexperimental. <b>-fsanitize-recover=all</b> and\n<b>-fno-sanitize-recover=all</b> is also accepted, the\nformer enables recovery for all sanitizers that support it,\nthe latter disables recovery for all sanitizers that support\nit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Even\nif a recovery mode is turned on the compiler side, it needs\nto be also enabled on the runtime library side, otherwise\nthe failures are still fatal. The runtime library defaults\nto &quot;halt_on_error=0&quot; for ThreadSanitizer and\nUndefinedBehaviorSanitizer, while default value for\nAddressSanitizer is &quot;halt_on_error=1&quot;. This can be\noverridden through setting the &quot;halt_on_error&quot;\nflag in the corresponding environment\nvariable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Syntax\nwithout an explicit <i>opts</i> parameter is deprecated. It\nis equivalent to specifying an <i>opts</i> list\nof:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>undefined,float-cast-overflow,float-divide-by-zero,bounds-strict</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize-address-use-after-scope</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nsanitization of local variables to detect use-after-scope\nbugs. The option sets <b>-fstack-reuse</b> to\n<b>none</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize-undefined-trap-on-error</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The\n<b>-fsanitize-undefined-trap-on-error</b> option instructs\nthe compiler to report undefined behavior using\n&quot;__builtin_trap&quot; rather than a\n&quot;libubsan&quot; library routine. The advantage of this\nis that the &quot;libubsan&quot; library is not needed and\nis not linked in, so this is usable even in freestanding\nenvironments.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize-coverage=trace-pc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ncoverage-guided fuzzing code instrumentation. Inserts a call\nto &quot;__sanitizer_cov_trace_pc&quot; into every basic\nblock.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsanitize-coverage=trace-cmp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable dataflow\nguided fuzzing code instrumentation. Inserts a call to\n&quot;__sanitizer_cov_trace_cmp1&quot;,\n&quot;__sanitizer_cov_trace_cmp2&quot;,\n&quot;__sanitizer_cov_trace_cmp4&quot; or\n&quot;__sanitizer_cov_trace_cmp8&quot; for integral\ncomparison with both operands variable or\n&quot;__sanitizer_cov_trace_const_cmp1&quot;,\n&quot;__sanitizer_cov_trace_const_cmp2&quot;,\n&quot;__sanitizer_cov_trace_const_cmp4&quot; or\n&quot;__sanitizer_cov_trace_const_cmp8&quot; for integral\ncomparison with one operand constant,\n&quot;__sanitizer_cov_trace_cmpf&quot; or\n&quot;__sanitizer_cov_trace_cmpd&quot; for float or double\ncomparisons and &quot;__sanitizer_cov_trace_switch&quot; for\nswitch statements.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcf-protection=</b>[<b>full</b>|<b>branch</b>|<b>return</b>|<b>none</b>|<b>check</b>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable code\ninstrumentation of control-flow transfers to increase\nprogram security by checking that target addresses of\ncontrol-flow transfer instructions (such as indirect\nfunction call, function return, indirect jump) are valid.\nThis prevents diverting the flow of control to an unexpected\ntarget. This is intended to protect against such threats as\nReturn-oriented Programming (</big> ROP <big>), and\nsimilarly call/jmp-oriented programming (</big> COP/JOP\n<big>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalue &quot;branch&quot; tells the compiler to implement\nchecking of validity of control-flow transfer at the point\nof indirect branch instructions, i.e. call/jmp instructions.\nThe value &quot;return&quot; implements checking of validity\nat the point of returning from a function. The value\n&quot;full&quot; is an alias for specifying both\n&quot;branch&quot; and &quot;return&quot;. The value\n&quot;none&quot; turns off\ninstrumentation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalue &quot;check&quot; is used for the final link with\nlink-time optimization (</big> LTO <big>). An error is\nissued if</big> LTO <big>object files are compiled with\ndifferent <b>-fcf-protection</b> values. The value\n&quot;check&quot; is ignored at the compile\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nmacro &quot;__CET__&quot; is defined when\n<b>-fcf-protection</b> is used. The first bit of\n&quot;__CET__&quot; is set to 1 for the value\n&quot;branch&quot; and the second bit of &quot;__CET__&quot;\nis set to 1 for the\n&quot;return&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan also use the &quot;nocf_check&quot; attribute to\nidentify which functions and calls should be skipped from\ninstrumentation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Currently\nthe x86 GNU/Linux target provides an implementation based on\nIntel Control-flow Enforcement Technology (</big> CET <big>)\nwhich works for i686 processor or\nnewer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>NOTE:\n<big>In Ubuntu 19.10 and later versions,\n<b>-fcf-protection</b> is enabled by default for C, C</big>\n++ <big>, ObjC, ObjC++, if none of <b>-fno-cf-protection</b>\nnor <b>-fcf-protection=*</b> are\nfound.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstack-protector</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit extra code\nto check for buffer overflows, such as stack smashing\nattacks. This is done by adding a guard variable to\nfunctions with vulnerable objects. This includes functions\nthat call &quot;alloca&quot;, and functions with buffers\nlarger than or equal to 8 bytes. The guards are initialized\nwhen a function is entered and then checked when the\nfunction exits. If a guard check fails, an error message is\nprinted and the program exits. Only variables that are\nactually allocated on the stack are considered, optimized\naway variables or variables allocated in registers\ndon&rsquo;t count.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstack-protector-all</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like\n<b>-fstack-protector</b> except that all functions are\nprotected.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstack-protector-strong</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like\n<b>-fstack-protector</b> but includes additional functions\nto be protected --- those that have local array definitions,\nor have references to local frame addresses. Only variables\nthat are actually allocated on the stack are considered,\noptimized away variables or variables allocated in registers\ndon&rsquo;t count.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstack-protector-explicit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like\n<b>-fstack-protector</b> but only protects those functions\nwhich have the &quot;stack_protect&quot;\nattribute.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstack-check</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code to\nverify that you do not go beyond the boundary of the stack.\nYou should specify this flag if you are running in an\nenvironment with multiple threads, but you only rarely need\nto specify it in a single-threaded environment since stack\noverflow is automatically detected on nearly all systems if\nthere is only one stack.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat this switch does not actually cause checking to be\ndone; the operating system or the language runtime must do\nthat. The switch causes generation of code to ensure that\nthey see the stack being extended.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan additionally specify a string parameter: <b>no</b> means\nno checking, <b>generic</b> means force the use of old-style\nchecking, <b>specific</b> means use the best checking method\nand is equivalent to bare\n<b>-fstack-check</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Old-style\nchecking is a generic mechanism that requires no specific\ntarget support in the compiler but comes with the following\ndrawbacks:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>1.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Modified allocation strategy for large\nobjects: they are always allocated dynamically if their size\nexceeds a fixed threshold. Note this may change the\nsemantics of some code.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>2.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Fixed limit on the size of the static\nframe of functions: when it is topped by a particular\nfunction, stack checking is not reliable and a warning is\nissued by the compiler.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>3.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Inefficiency: because of both the\nmodified allocation strategy and the generic implementation,\ncode performance is hampered.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat old-style stack checking is also the fallback method\nfor <b>specific</b> if no target support has been added in\nthe compiler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fstack-check=</b>\nis designed for Ada&rsquo;s needs to detect infinite\nrecursion and stack overflows. <b>specific</b> is an\nexcellent choice when compiling Ada code. It is not\ngenerally sufficient to protect against stack-clash attacks.\nTo protect against those you want\n<b>-fstack-clash-protection</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstack-clash-protection</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code to\nprevent stack clash style attacks. When this option is\nenabled, the compiler will only allocate one page of stack\nspace at a time and each page is accessed immediately after\nallocation. Thus, it prevents allocations from jumping over\nany stack guard page provided by the operating\nsystem.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Most\ntargets do not fully support stack clash protection.\nHowever, on those targets <b>-fstack-clash-protection</b>\nwill protect dynamic stack allocations.\n<b>-fstack-clash-protection</b> may also provide limited\nprotection for static stack allocations if the target\nsupports\n<b>-fstack-check=specific</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>NOTE:\n<big>In Ubuntu 19.10 and later versions,\n<b>-fstack-clash-protection</b> is enabled by default for C,\nC</big> ++ <big>, ObjC, ObjC++, unless\n<b>-fno-stack-clash-protection</b> is\nfound.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstack-limit-register=</b><i>reg</i>\n<b><br>\n-fstack-limit-symbol=</b><i>sym</i> <b><br>\n-fno-stack-limit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code to\nensure that the stack does not grow beyond a certain value,\neither the value of a register or the address of a symbol.\nIf a larger stack is required, a signal is raised at run\ntime. For most targets, the signal is raised before the\nstack overruns the boundary, so it is possible to catch the\nsignal without taking special\nprecautions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\ninstance, if the stack starts at absolute address\n<b>0x80000000</b> and grows downwards, you can use the flags\n<b>-fstack-limit-symbol=__stack_limit</b> and\n<b>-Wl,--defsym,__stack_limit=0x7ffe0000</b> to enforce a\nstack limit of 128KB. Note that this may only work with\nthe</big> GNU <big>linker.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan locally override stack limit checking by using the\n&quot;no_stack_limit&quot; function\nattribute.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsplit-stack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code to\nautomatically split the stack before it overflows. The\nresulting program has a discontiguous stack which can only\noverflow if the program is unable to allocate any more\nmemory. This is most useful when running threaded programs,\nas it is no longer necessary to calculate a good stack size\nto use for each thread. This is currently only implemented\nfor the x86 targets running GNU/Linux.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\ncode compiled with <b>-fsplit-stack</b> calls code compiled\nwithout <b>-fsplit-stack</b>, there may not be much stack\nspace available for the latter code to run. If compiling all\ncode, including library code, with <b>-fsplit-stack</b> is\nnot an option, then the linker can fix up these calls so\nthat the code compiled without <b>-fsplit-stack</b> always\nhas a large stack. Support for this is implemented in the\ngold linker in</big> GNU <big>binutils release 2.21 and\nlater.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fvtable-verify=</b>[<b>std</b>|<b>preinit</b>|<b>none</b>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nonly available when compiling C</big> ++ <big>code. It turns\non (or off, if using <b>-fvtable-verify=none</b>) the\nsecurity feature that verifies at run time, for every\nvirtual call, that the vtable pointer through which the call\nis made is valid for the type of the object, and has not\nbeen corrupted or overwritten. If an invalid vtable pointer\nis detected at run time, an error is reported and execution\nof the program is immediately halted.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption causes run-time data structures to be built at\nprogram startup, which are used for verifying the vtable\npointers. The options <b>std</b> and <b>preinit</b> control\nthe timing of when these data structures are built. In both\ncases the data structures are built before execution reaches\n&quot;main&quot;. Using <b>-fvtable-verify=std</b> causes\nthe data structures to be built after shared libraries have\nbeen loaded and initialized. <b>-fvtable-verify=preinit</b>\ncauses them to be built before shared libraries have been\nloaded and initialized.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthis option appears multiple times in the command line with\ndifferent values specified, <b>none</b> takes highest\npriority over both <b>std</b> and <b>preinit</b>;\n<b>preinit</b> takes priority over\n<b>std</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fvtv-debug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When used in\nconjunction with <b>-fvtable-verify=std</b> or\n<b>-fvtable-verify=preinit</b>, causes debug versions of the\nruntime functions for the vtable verification feature to be\ncalled. This flag also causes the compiler to log\ninformation about which vtable pointers it finds for each\nclass. This information is written to a file named\n<i>vtv_set_ptr_data.log</i> in the directory named by the\nenvironment variable</big> <b>VTV_LOGS_DIR</b> <big>if that\nis defined or the current working directory\notherwise.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note:\nThis feature <i>appends</i> data to the log file. If you\nwant a fresh log file, be sure to delete any existing\none.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fvtv-counts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This is a\ndebugging flag. When used in conjunction with\n<b>-fvtable-verify=std</b> or\n<b>-fvtable-verify=preinit</b>, this causes the compiler to\nkeep track of the total number of virtual calls it\nencounters and the number of verifications it inserts. It\nalso counts the number of calls to certain run-time library\nfunctions that it inserts and logs this information for each\ncompilation unit. The compiler writes this information to a\nfile named <i>vtv_count_data.log</i> in the directory named\nby the environment variable</big> <b>VTV_LOGS_DIR</b>\n<big>if that is defined or the current working directory\notherwise. It also counts the size of the vtable pointer\nsets for each class, and writes this information to\n<i>vtv_class_set_sizes.log</i> in the same\ndirectory.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note:\nThis feature <i>appends</i> data to the log files. To get\nfresh log files, be sure to delete any existing\nones.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-finstrument-functions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\ninstrumentation calls for entry and exit to functions. Just\nafter function entry and just before function exit, the\nfollowing profiling functions are called with the address of\nthe current function and its call site. (On some platforms,\n&quot;__builtin_return_address&quot; does not work beyond\nthe current function, so the call site information may not\nbe available to the profiling functions\notherwise.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>void\n__cyg_profile_func_enter (void *this_fn, <br>\nvoid *call_site); <br>\nvoid __cyg_profile_func_exit (void *this_fn, <br>\nvoid *call_site);</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfirst argument is the address of the start of the current\nfunction, which may be looked up exactly in the symbol\ntable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\ninstrumentation is also done for functions expanded inline\nin other functions. The profiling calls indicate where,\nconceptually, the inline function is entered and exited.\nThis means that addressable versions of such functions must\nbe available. If all your uses of a function are expanded\ninline, this may mean an additional expansion of code size.\nIf you use &quot;extern inline&quot; in your C code, an\naddressable version of such functions must be provided.\n(This is normally the case anyway, but if you get lucky and\nthe optimizer always expands the functions inline, you might\nhave gotten away without providing static\ncopies.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>A\nfunction may be given the attribute\n&quot;no_instrument_function&quot;, in which case this\ninstrumentation is not done. This can be used, for example,\nfor the profiling functions listed above, high-priority\ninterrupt routines, and any functions from which the\nprofiling functions cannot safely be called (perhaps signal\nhandlers, if the profiling routines generate output or\nallocate memory).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-finstrument-functions-exclude-file-list=</b><i>file</i><b>,</b><i>file</i><b>,...</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the list of\nfunctions that are excluded from instrumentation (see the\ndescription of <b>-finstrument-functions</b>). If the file\nthat contains a function definition matches with one of\n<i>file</i>, then that function is not instrumented. The\nmatch is done on substrings: if the <i>file</i> parameter is\na substring of the file name, it is considered to be a\nmatch.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>-finstrument-functions-exclude-file-list=/bits/stl,include/sys</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>excludes\nany inline function defined in files whose pathnames contain\n<i>/bits/stl</i> or\n<i>include/sys</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If,\nfor some reason, you want to include letter <b>,</b> in one\nof <i>sym</i>, write <b>,</b>. For example,\n<b>-finstrument-functions-exclude-file-list=&rsquo;,,tmp&rsquo;</b>\n(note the single quote surrounding the\noption).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-finstrument-functions-exclude-function-list=</b><i>sym</i><b>,</b><i>sym</i><b>,...</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This is similar\nto <b>-finstrument-functions-exclude-file-list</b>, but this\noption sets the list of function names to be excluded from\ninstrumentation. The function name to be matched is its\nuser-visible name, such as &quot;vector&lt;int&gt;\nblah(const vector&lt;int&gt; &amp;)&quot;, not the internal\nmangled name (e.g., &quot;_Z4blahRSt6vectorIiSaIiEE&quot;).\nThe match is done on substrings: if the <i>sym</i> parameter\nis a substring of the function name, it is considered to be\na match. For C99 and C</big> ++ <big>extended identifiers,\nthe function name must be given in</big> UTF-8, <big>not\nusing universal character names.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpatchable-function-entry=</b><i>N</i><b>[,</b><i>M</i><b>]</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\n<i>N</i> NOPs right at the beginning of each function, with\nthe function entry point before the <i>M</i>th</big> NOP.\n<big>If <i>M</i> is omitted, it defaults to 0 so the\nfunction entry points to the address just at the first</big>\nNOP. <big>The</big> NOP <big>instructions reserve extra\nspace which can be used to patch in any desired\ninstrumentation at run time, provided that the code segment\nis writable. The amount of space is controllable indirectly\nvia the number of NOPs; the</big> NOP <big>instruction used\ncorresponds to the instruction emitted by the internal</big>\nGCC <big>back-end interface &quot;gen_nop&quot;. This\nbehavior is target-specific and may also depend on the\narchitecture variant and/or other compilation\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nrun-time identification, the starting addresses of these\nareas, which correspond to their respective function entries\nminus <i>M</i>, are additionally collected in the\n&quot;__patchable_function_entries&quot; section of the\nresulting binary.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat the value of &quot;__attribute__\n((patchable_function_entry (N,M)))&quot; takes precedence\nover command-line option\n<b>-fpatchable-function-entry=N,M</b>. This can be used to\nincrease the area size or to remove it completely on a\nsingle function. If &quot;N=0&quot;, no pad location is\nrecorded.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\nNOP <big>instructions are inserted at---and maybe before,\ndepending on <i>M</i>---the function entry address, even\nbefore the prologue.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nmaximum value of <i>N</i> and <i>M</i> is\n65535.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><b>Options\nControlling the Preprocessor</b> <br>\nThese options control the C preprocessor, which is run on\neach C source file before actual\ncompilation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>If\nyou use the <b>-E</b> option, nothing is done except\npreprocessing. Some of these options make sense only\ntogether with <b>-E</b> because they cause the preprocessor\noutput to be unsuitable for actual\ncompilation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>In\naddition to the options listed here, there are a number of\noptions to control search paths for include files documented\nin <b>Directory Options</b>. Options to control preprocessor\ndiagnostics are listed in <b>Warning Options</b>. <b><br>\n-D</b> <i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Predefine\n<i>name</i> as a macro, with definition\n1.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-D</b>\n<i>name</i><b>=</b><i>definition</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The contents of\n<i>definition</i> are tokenized and processed as if they\nappeared during translation phase three in a <b>#define</b>\ndirective. In particular, the definition is truncated by\nembedded newline characters.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou are invoking the preprocessor from a shell or shell-like\nprogram you may need to use the shell&rsquo;s quoting syntax\nto protect characters such as spaces that have a meaning in\nthe shell syntax.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou wish to define a function-like macro on the command\nline, write its argument list with surrounding parentheses\nbefore the equals sign (if any). Parentheses are meaningful\nto most shells, so you should quote the option. With\n<b>sh</b> and <b>csh</b>,\n<b>-D&rsquo;</b><i>name</i><b>(</b><i>args...</i><b>)=</b><i>definition</i><b>&rsquo;</b>\nworks.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-D</b>\nand <b>-U</b> options are processed in the order they are\ngiven on the command line. All <b>-imacros</b> <i>file</i>\nand <b>-include</b> <i>file</i> options are processed after\nall <b>-D</b> and <b>-U</b> options.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-U</b>\n<i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Cancel any\nprevious definition of <i>name</i>, either built in or\nprovided with a <b>-D</b> option.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-include</b>\n<i>file</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Process\n<i>file</i> as if &quot;#include &quot;file&quot;&quot;\nappeared as the first line of the primary source file.\nHowever, the first directory searched for <i>file</i> is the\npreprocessor&rsquo;s working directory <i>instead of</i> the\ndirectory containing the main source file. If not found\nthere, it is searched for in the remainder of the\n&quot;#include &quot;...&quot;&quot; search chain as\nnormal.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nmultiple <b>-include</b> options are given, the files are\nincluded in the order they appear on the command\nline.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-imacros</b>\n<i>file</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Exactly like\n<b>-include</b>, except that any output produced by scanning\n<i>file</i> is thrown away. Macros it defines remain\ndefined. This allows you to acquire all the macros from a\nheader without also processing its\ndeclarations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>All\nfiles specified by <b>-imacros</b> are processed before all\nfiles specified by <b>-include</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-undef</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not predefine\nany system-specific or GCC-specific macros. The standard\npredefined macros remain defined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-pthread</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Define\nadditional macros required for using the</big> POSIX\n<big>threads library. You should use this option\nconsistently for both compilation and linking. This option\nis supported on GNU/Linux targets, most other Unix\nderivatives, and also on x86 Cygwin and MinGW\ntargets.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-M</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Instead of outputting the result of\npreprocessing, output a rule suitable for <b>make</b>\ndescribing the dependencies of the main source file. The\npreprocessor outputs one <b>make</b> rule containing the\nobject file name for that source file, a colon, and the\nnames of all the included files, including those coming from\n<b>-include</b> or <b>-imacros</b> command-line\noptions.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Unless\nspecified explicitly (with <b>-MT</b> or <b>-MQ</b>), the\nobject file name consists of the name of the source file\nwith any suffix replaced with object file suffix and with\nany leading directory parts removed. If there are many\nincluded files then the rule is split into several lines\nusing <b>\\</b>-newline. The rule has no\ncommands.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption does not suppress the preprocessor&rsquo;s debug\noutput, such as <b>-dM</b>. To avoid mixing such debug\noutput with the dependency rules you should explicitly\nspecify the dependency output file with <b>-MF</b>, or use\nan environment variable like</big>\n<b>DEPENDENCIES_OUTPUT</b> <big>. Debug output is still sent\nto the regular output stream as\nnormal.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Passing\n<b>-M</b> to the driver implies <b>-E</b>, and suppresses\nwarnings with an implicit <b>-w</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><b>-MM</b></big></big></big></p> </td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>Like <b>-M</b>\nbut do not mention header files that are found in system\nheader directories, nor header files that are included,\ndirectly or indirectly, from such a\nheader.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nimplies that the choice of angle brackets or double quotes\nin an <b>#include</b> directive does not in itself determine\nwhether that header appears in <b>-MM</b> dependency\noutput.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-MF</b>\n<i>file</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When used with\n<b>-M</b> or <b>-MM</b>, specifies a file to write the\ndependencies to. If no <b>-MF</b> switch is given the\npreprocessor sends the rules to the same place it would send\npreprocessed output.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nused with the driver options <b>-MD</b> or <b>-MMD</b>,\n<b>-MF</b> overrides the default dependency output\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>file</i> is <i>-</i>, then the dependencies are written\nto <i>stdout</i>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-MG</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>In conjunction with an option such as\n<b>-M</b> requesting dependency generation, <b>-MG</b>\nassumes missing header files are generated files and adds\nthem to the dependency list without raising an error. The\ndependency filename is taken directly from the\n&quot;#include&quot; directive without prepending any path.\n<b>-MG</b> also suppresses preprocessed output, as a missing\nheader file renders this useless.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nfeature is used in automatic updating of\nmakefiles.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Mno-modules</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\ndependency generation for compiled module\ninterfaces.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-MP</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>This option instructs</big> CPP <big>to\nadd a phony target for each dependency other than the main\nfile, causing each to depend on nothing. These dummy rules\nwork around errors <b>make</b> gives if you remove header\nfiles without updating the <i>Makefile</i> to\nmatch.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nis typical output:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>test.o:\ntest.c test.h <br>\ntest.h:</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-MT</b>\n<i>target</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Change the\ntarget of the rule emitted by dependency generation. By\ndefault</big> CPP <big>takes the name of the main input\nfile, deletes any directory components and any file suffix\nsuch as <b>.c</b>, and appends the platform&rsquo;s usual\nobject suffix. The result is the\ntarget.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>An\n<b>-MT</b> option sets the target to be exactly the string\nyou specify. If you want multiple targets, you can specify\nthem as a single argument to <b>-MT</b>, or use multiple\n<b>-MT</b> options.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, <b>-MT&nbsp;&rsquo;$(objpfx)foo.o&rsquo;</b> might\ngive</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>$(objpfx)foo.o:\nfoo.c</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-MQ</b>\n<i>target</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Same as\n<b>-MT</b>, but it quotes any characters which are special\nto Make. <b>-MQ&nbsp;&rsquo;$(objpfx)foo.o&rsquo;</b>\ngives</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>$$(objpfx)foo.o:\nfoo.c</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault target is automatically quoted, as if it were given\nwith <b>-MQ</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-MD</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big><b>-MD</b> is equivalent to <b>-M -MF</b>\n<i>file</i>, except that <b>-E</b> is not implied. The\ndriver determines <i>file</i> based on whether an <b>-o</b>\noption is given. If it is, the driver uses its argument but\nwith a suffix of <i>.d</i>, otherwise it takes the name of\nthe input file, removes any directory components and suffix,\nand applies a <i>.d</i> suffix.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<b>-MD</b> is used in conjunction with <b>-E</b>, any\n<b>-o</b> switch is understood to specify the dependency\noutput file, but if used without <b>-E</b>, each <b>-o</b>\nis understood to specify a target object\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Since\n<b>-E</b> is not implied, <b>-MD</b> can be used to generate\na dependency output file as a side effect of the compilation\nprocess.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-MMD</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like <b>-MD</b>\nexcept mention only user header files, not system header\nfiles.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpreprocessed</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Indicate to the\npreprocessor that the input file has already been\npreprocessed. This suppresses things like macro expansion,\ntrigraph conversion, escaped newline splicing, and\nprocessing of most directives. The preprocessor still\nrecognizes and removes comments, so that you can pass a file\npreprocessed with <b>-C</b> to the compiler without\nproblems. In this mode the integrated preprocessor is little\nmore than a tokenizer for the front\nends.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fpreprocessed</b>\nis implicit if the input file has one of the extensions\n<b>.i</b>, <b>.ii</b> or <b>.mi</b>. These are the\nextensions that</big> GCC <big>uses for preprocessed files\ncreated by <b>-save-temps</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdirectives-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\npreprocessing, handle directives, but do not expand\nmacros.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noption&rsquo;s behavior depends on the <b>-E</b> and\n<b>-fpreprocessed</b> options.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-E</b>, preprocessing is limited to the handling of\ndirectives such as &quot;#define&quot;, &quot;#ifdef&quot;,\nand &quot;#error&quot;. Other preprocessor operations, such\nas macro expansion and trigraph conversion are not\nperformed. In addition, the <b>-dD</b> option is implicitly\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-fpreprocessed</b>, predefinition of command line and\nmost builtin macros is disabled. Macros such as\n&quot;__LINE__&quot;, which are contextually dependent, are\nhandled normally. This enables compilation of files\npreviously preprocessed with &quot;-E\n-fdirectives-only&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\nboth <b>-E</b> and <b>-fpreprocessed</b>, the rules for\n<b>-fpreprocessed</b> take precedence. This enables full\npreprocessing of files previously preprocessed with &quot;-E\n-fdirectives-only&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdollars-in-identifiers</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Accept <b>$</b>\nin identifiers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fextended-identifiers</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Accept universal\ncharacter names and extended characters in identifiers. This\noption is enabled by default for C99 (and later C standard\nversions) and C</big> ++ <big>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-canonical-system-headers</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\npreprocessing, do not shorten system header paths with\ncanonicalization.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmax-include-depth=</b><i>depth</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the maximum\ndepth of the nested #include. The default is\n200.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftabstop=</b><i>width</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the distance\nbetween tab stops. This helps the preprocessor report\ncorrect column numbers in warnings or errors, even if tabs\nappear on the line. If the value is less than 1 or greater\nthan 100, the option is ignored. The default is\n8.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftrack-macro-expansion</b>[<b>=</b><i>level</i>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Track locations\nof tokens across macro expansions. This allows the compiler\nto emit diagnostic about the current macro expansion stack\nwhen a compilation error occurs in a macro expansion. Using\nthis option makes the preprocessor and the compiler consume\nmore memory. The <i>level</i> parameter can be used to\nchoose the level of precision of token location tracking\nthus decreasing the memory consumption if necessary. Value\n<b>0</b> of <i>level</i> de-activates this option. Value\n<b>1</b> tracks tokens locations in a degraded mode for the\nsake of minimal memory overhead. In this mode all tokens\nresulting from the expansion of an argument of a\nfunction-like macro have the same location. Value <b>2</b>\ntracks tokens locations completely. This value is the most\nmemory hungry. When this option is given no argument, the\ndefault parameter value is <b>2</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat &quot;-ftrack-macro-expansion=2&quot; is activated by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmacro-prefix-map=</b><i>old</i><b>=</b><i>new</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\npreprocessing files residing in directory <i>old</i>, expand\nthe &quot;__FILE__&quot; and &quot;__BASE_FILE__&quot;\nmacros as if the files resided in directory <i>new</i>\ninstead. This can be used to change an absolute path to a\nrelative path by using <i>.</i> for <i>new</i> which can\nresult in more reproducible builds that are location\nindependent. This option also affects\n&quot;__builtin_FILE()&quot; during compilation. See also\n<b>-ffile-prefix-map</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fexec-charset=</b><i>charset</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\nexecution character set, used for string and character\nconstants. The default is</big> UTF-8.\n<i><big>charset</big></i> <big>can be any encoding supported\nby the system&rsquo;s &quot;iconv&quot; library\nroutine.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fwide-exec-charset=</b><i>charset</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the wide\nexecution character set, used for wide string and character\nconstants. The default is</big> UTF-32 <big>or</big> UTF-16,\n<big>whichever corresponds to the width of\n&quot;wchar_t&quot;. As with <b>-fexec-charset</b>,\n<i>charset</i> can be any encoding supported by the\nsystem&rsquo;s &quot;iconv&quot; library routine; however,\nyou will have problems with encodings that do not fit\nexactly in &quot;wchar_t&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-finput-charset=</b><i>charset</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the input\ncharacter set, used for translation from the character set\nof the input file to the source character set used by</big>\nGCC. <big>If the locale does not specify, or</big> GCC\n<big>cannot get this information from the locale, the\ndefault is</big> UTF-8. <big>This can be overridden by\neither the locale or this command-line option. Currently the\ncommand-line option takes precedence if there&rsquo;s a\nconflict. <i>charset</i> can be any encoding supported by\nthe system&rsquo;s &quot;iconv&quot; library\nroutine.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpch-deps</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When using\nprecompiled headers, this flag causes the dependency-output\nflags to also list the files from the precompiled\nheader&rsquo;s dependencies. If not specified, only the\nprecompiled header are listed and not the files that were\nused to create it, because those files are not consulted\nwhen a precompiled header is used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpch-preprocess</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nallows use of a precompiled header together with <b>-E</b>.\nIt inserts a special &quot;#pragma&quot;, &quot;#pragma GCC\npch_preprocess &quot;<i>filename</i>&quot;&quot; in the\noutput to mark the place where the precompiled header was\nfound, and its <i>filename</i>. When <b>-fpreprocessed</b>\nis in use,</big> GCC <big>recognizes this\n&quot;#pragma&quot; and loads the</big> PCH.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is off by default, because the resulting preprocessed\noutput is only really suitable as input to</big> GCC.\n<big>It is switched on by\n<b>-save-temps</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\nshould not write this &quot;#pragma&quot; in your own code,\nbut it is safe to edit the filename if the</big> PCH\n<big>file is available in a different location. The filename\nmay be absolute or it may be relative to</big> GCC\n<big>&rsquo;s current directory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fworking-directory</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of linemarkers in the preprocessor output that\nlet the compiler know the current working directory at the\ntime of preprocessing. When this option is enabled, the\npreprocessor emits, after the initial linemarker, a second\nlinemarker with the current working directory followed by\ntwo slashes.</big> GCC <big>uses this directory, when\nit&rsquo;s present in the preprocessed input, as the\ndirectory emitted as the current working directory in some\ndebugging information formats. This option is implicitly\nenabled if debugging information is enabled, but this can be\ninhibited with the negated form\n<b>-fno-working-directory</b>. If the <b>-P</b> flag is\npresent in the command line, this option has no effect,\nsince no &quot;#line&quot; directives are emitted\nwhatsoever.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-A</b>\n<i>predicate</i><b>=</b><i>answer</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make an\nassertion with the predicate <i>predicate</i> and answer\n<i>answer</i>. This form is preferred to the older form\n<b>-A</b> <i>predicate</i><b>(</b><i>answer</i><b>)</b>,\nwhich is still supported, because it does not use shell\nspecial characters.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-A\n-</b><i>predicate</i><b>=</b><i>answer</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Cancel an\nassertion with the predicate <i>predicate</i> and answer\n<i>answer</i>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-C</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Do not discard comments. All comments are\npassed through to the output file, except for comments in\nprocessed directives, which are deleted along with the\ndirective.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\nshould be prepared for side effects when using <b>-C</b>; it\ncauses the preprocessor to treat comments as tokens in their\nown right. For example, comments appearing at the start of\nwhat would be a directive line have the effect of turning\nthat line into an ordinary source line, since the first\ntoken on the line is no longer a\n<b>#</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><b>-CC</b></big></big></big></p> </td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>Do not discard\ncomments, including during macro expansion. This is like\n<b>-C</b>, except that comments contained within macros are\nalso passed through to the output file where the macro is\nexpanded.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition to the side effects of the <b>-C</b> option, the\n<b>-CC</b> option causes all C</big> ++ <big>-style comments\ninside a macro to be converted to C-style comments. This is\nto prevent later use of that macro from inadvertently\ncommenting out the remainder of the source\nline.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-CC</b> option is generally used to support lint\ncomments.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><b>-P</b></big></big></big></p> </td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>Inhibit\ngeneration of linemarkers in the output from the\npreprocessor. This might be useful when running the\npreprocessor on something that is not C code, and will be\nsent to a program which might be confused by the\nlinemarkers.</big></big></big></p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-traditional\n<br>\n-traditional-cpp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Try to imitate\nthe behavior of pre-standard C preprocessors, as opposed\nto</big> ISO C <big>preprocessors. See the</big> GNU CPP\n<big>manual for details.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat</big> GCC <big>does not otherwise attempt to emulate a\npre-standard C compiler, and these options are only\nsupported with the <b>-E</b> switch, or when invoking</big>\nCPP <big>explicitly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-trigraphs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Support</big>\nISO C <big>trigraphs. These are three-character sequences,\nall starting with <b>??</b>, that are defined by</big> ISO C\n<big>to stand for single characters. For example, <b>??/</b>\nstands for <b>\\</b>, so <b>&rsquo;??/n&rsquo;</b> is a\ncharacter constant for a newline.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nnine trigraphs and their replacements\nare</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Trigraph:\n??( ??) ??&lt; ??&gt; ??= ??/ ??' ??! ??- <br>\nReplacement: [ ] { } # \\ ^ | ~</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>By\ndefault,</big> GCC <big>ignores trigraphs, but in\nstandard-conforming modes it converts them. See the\n<b>-std</b> and <b>-ansi</b> options.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-remap</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable special\ncode to work around file systems which only permit very\nshort file names, such as MS-DOS.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-H</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Print the name of each header file used,\nin addition to other normal activities. Each name is\nindented to show how deep in the <b>#include</b> stack it\nis. Precompiled header files are also printed, even if they\nare found to be invalid; an invalid precompiled header file\nis printed with <b>...x</b> and a valid one with <b>...!</b>\n.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-d</b><i>letters</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Says to make\ndebugging dumps during compilation as specified by\n<i>letters</i>. The flags documented here are those relevant\nto the preprocessor. Other <i>letters</i> are interpreted by\nthe compiler proper, or reserved for future versions\nof</big> GCC, <big>and so are silently ignored. If you\nspecify <i>letters</i> whose behavior conflicts, the result\nis undefined.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dM</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Instead of the normal output, generate a\nlist of <b>#define</b> directives for all the macros defined\nduring the execution of the preprocessor, including\npredefined macros. This gives you a way of finding out what\nis predefined in your version of the preprocessor. Assuming\nyou have no file <i>foo.h</i>, the\ncommand</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>touch\nfoo.h; cpp -dM foo.h</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>shows\nall the predefined macros.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>If\nyou use <b>-dM</b> without the <b>-E</b> option, <b>-dM</b>\nis interpreted as a synonym for\n<b>-fdump-rtl-mach</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><b>-dD</b></big></big></big></p> </td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>Like <b>-dM</b>\nexcept in two respects: it does <i>not</i> include the\npredefined macros, and it outputs <i>both</i> the\n<b>#define</b> directives and the result of preprocessing.\nBoth kinds of output go to the standard output\nfile.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dN</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Like <b>-dD</b>, but emit only the macro\nnames, not their expansions.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dI</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Output <b>#include</b> directives in\naddition to the result of\npreprocessing.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dU</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Like <b>-dD</b> except that only macros\nthat are expanded, or whose definedness is tested in\npreprocessor directives, are output; the output is delayed\nuntil the use or test of the macro; and <b>#undef</b>\ndirectives are also output for macros tested but undefined\nat the time.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdebug-cpp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nonly useful for debugging</big> GCC. <big>When used\nfrom</big> CPP <big>or with <b>-E</b>, it dumps debugging\ninformation about location maps. Every token in the output\nis preceded by the dump of the map its location belongs\nto.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nused from</big> GCC <big>without <b>-E</b>, this option has\nno effect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wp,</b><i>option</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>You can use\n<b>-Wp,</b><i>option</i> to bypass the compiler driver and\npass <i>option</i> directly through to the preprocessor. If\n<i>option</i> contains commas, it is split into multiple\noptions at the commas. However, many options are modified,\ntranslated or interpreted by the compiler driver before\nbeing passed to the preprocessor, and <b>-Wp</b> forcibly\nbypasses this phase. The preprocessor&rsquo;s direct\ninterface is undocumented and subject to change, so whenever\npossible you should avoid using <b>-Wp</b> and let the\ndriver handle the options instead.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Xpreprocessor</b>\n<i>option</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pass\n<i>option</i> as an option to the preprocessor. You can use\nthis to supply system-specific preprocessor options\nthat</big> GCC <big>does not\nrecognize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou want to pass an option that takes an argument, you must\nuse <b>-Xpreprocessor</b> twice, once for the option and\nonce for the argument.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-no-integrated-cpp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Perform\npreprocessing as a separate pass before compilation. By\ndefault,</big> GCC <big>performs preprocessing as an\nintegrated part of input tokenization and parsing. If this\noption is provided, the appropriate language front end\n(<b>cc1</b>, <b>cc1plus</b>, or <b>cc1obj</b> for C, C</big>\n++ <big>, and Objective-C, respectively) is instead invoked\ntwice, once for preprocessing only and once for actual\ncompilation of the preprocessed input. This option may be\nuseful in conjunction with the <b>-B</b> or <b>-wrapper</b>\noptions to specify an alternate preprocessor or perform\nadditional processing of the program source between normal\npreprocessing and compilation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flarge-source-files</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Adjust</big> GCC\n<big>to expect large source files, at the expense of slower\ncompilation and higher memory usage.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Specifically,</big>\nGCC <big>normally tracks both column numbers and line\nnumbers within source files and it normally prints both of\nthese numbers in diagnostics. However, once it has processed\na certain number of source lines, it stops tracking column\nnumbers and only tracks line numbers. This means that\ndiagnostics for later lines do not include column numbers.\nIt also means that options like\n<b>-Wmisleading-indentation</b> cease to work at that point,\nalthough the compiler prints a note if this happens. Passing\n<b>-flarge-source-files</b> significantly increases the\nnumber of source lines that</big> GCC <big>can process\nbefore it stops tracking columns.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><b>Passing\nOptions to the Assembler</b> <br>\nYou can pass options to the assembler. <b><br>\n-Wa,</b><i>option</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pass\n<i>option</i> as an option to the assembler. If\n<i>option</i> contains commas, it is split into multiple\noptions at the commas.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Xassembler</b>\n<i>option</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pass\n<i>option</i> as an option to the assembler. You can use\nthis to supply system-specific assembler options that</big>\nGCC <big>does not recognize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou want to pass an option that takes an argument, you must\nuse <b>-Xassembler</b> twice, once for the option and once\nfor the argument.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><b>Options\nfor Linking</b> <br>\nThese options come into play when the compiler links object\nfiles into an executable output file. They are meaningless\nif the compiler is not doing a link step. <i><br>\nobject-file-name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>A file name that\ndoes not end in a special recognized suffix is considered to\nname an object file or library. (Object files are\ndistinguished from libraries by the linker according to the\nfile contents.) If linking is done, these object files are\nused as input to the linker.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-c</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-S</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-E</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>If any of these options is used, then the\nlinker is not run, and object file names should not be used\nas arguments.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flinker-output=</b><i>type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols code generation of the link-time optimizer. By\ndefault the linker output is automatically determined by the\nlinker plugin. For debugging the compiler and if incremental\nlinking with a non-LTO object file is desired, it may be\nuseful to control the type manually.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>type</i> is <b>exec</b>, code generation produces a\nstatic binary. In this case <b>-fpic</b> and <b>-fpie</b>\nare both disabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>type</i> is <b>dyn</b>, code generation produces a shared\nlibrary. In this case <b>-fpic</b> or <b>-fPIC</b> is\npreserved, but not enabled automatically. This allows to\nbuild shared libraries without position-independent code on\narchitectures where this is possible, i.e. on\nx86.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>type</i> is <b>pie</b>, code generation produces an\n<b>-fpie</b> executable. This results in similar\noptimizations as <b>exec</b> except that <b>-fpie</b> is not\ndisabled if specified at compilation\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>type</i> is <b>rel</b>, the compiler assumes that\nincremental linking is done. The sections containing\nintermediate code for link-time optimization are merged,\npre-optimized, and output to the resulting object file. In\naddition, if <b>-ffat-lto-objects</b> is specified, binary\ncode is produced for future non-LTO linking. The object file\nproduced by incremental linking is smaller than a static\nlibrary produced from the same object files. At link time\nthe result of incremental linking also loads faster than a\nstatic library assuming that the majority of objects in the\nlibrary are used.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Finally\n<b>nolto-rel</b> configures the compiler for incremental\nlinking where code generation is forced, a final binary is\nproduced, and the intermediate code for later link-time\noptimization is stripped. When multiple object files are\nlinked together the resulting code is better optimized than\nwith link-time optimizations disabled (for example,\ncross-module inlining happens), but most of benefits of\nwhole program optimizations are lost.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>During\nthe incremental link (by <b>-r</b>) the linker plugin\ndefaults to <b>rel</b>. With current interfaces to</big> GNU\n<big>Binutils it is however not possible to incrementally\nlink</big> LTO <big>objects and non-LTO objects into a\nsingle mixed object file. If any of object files in\nincremental link cannot be used for link-time optimization,\nthe linker plugin issues a warning and uses\n<b>nolto-rel</b>. To maintain whole program optimization, it\nis recommended to link such objects into static library\ninstead. Alternatively it is possible to use H.J. Lu&rsquo;s\nbinutils with support for mixed\nobjects.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fuse-ld=bfd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the\n<b>bfd</b> linker instead of the default\nlinker.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fuse-ld=gold</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the\n<b>gold</b> linker instead of the default\nlinker.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fuse-ld=lld</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the</big>\nLLVM <b><big>lld</big></b> <big>linker instead of the\ndefault linker.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fuse-ld=mold</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the Modern\nLinker (<b>mold</b>) instead of the default\nlinker.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-l</b><i>library</i>\n<b><br>\n-l</b> <i>library</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Search the\nlibrary named <i>library</i> when linking. (The second\nalternative with the library as a separate argument is only\nfor</big> POSIX <big>compliance and is not\nrecommended.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-l</b> option is passed directly to the linker by</big>\nGCC. <big>Refer to your linker documentation for exact\ndetails. The general description below applies to the</big>\nGNU <big>linker.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nlinker searches a standard list of directories for the\nlibrary. The directories searched include several standard\nsystem directories plus any that you specify with\n<b>-L</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Static\nlibraries are archives of object files, and have file names\nlike <i>liblibrary.a</i>. Some targets also support shared\nlibraries, which typically have names like\n<i>liblibrary.so</i>. If both static and shared libraries\nare found, the linker gives preference to linking with the\nshared library unless the <b>-static</b> option is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nmakes a difference where in the command you write this\noption; the linker searches and processes libraries and\nobject files in the order they are specified. Thus, <b>foo.o\n-lz bar.o</b> searches library <b>z</b> after file\n<i>foo.o</i> but before <i>bar.o</i>. If <i>bar.o</i> refers\nto functions in <b>z</b>, those functions may not be\nloaded.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-lobjc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>You need this\nspecial case of the <b>-l</b> option in order to link an\nObjective-C or Objective-C</big> ++\n<big>program.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nostartfiles</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use the\nstandard system startup files when linking. The standard\nsystem libraries are used normally, unless <b>-nostdlib</b>,\n<b>-nolibc</b>, or <b>-nodefaultlibs</b> is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nodefaultlibs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use the\nstandard system libraries when linking. Only the libraries\nyou specify are passed to the linker, and options specifying\nlinkage of the system libraries, such as\n<b>-static-libgcc</b> or <b>-shared-libgcc</b>, are ignored.\nThe standard startup files are used normally, unless\n<b>-nostartfiles</b> is used.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ncompiler may generate calls to &quot;memcmp&quot;,\n&quot;memset&quot;, &quot;memcpy&quot; and\n&quot;memmove&quot;. These entries are usually resolved by\nentries in libc. These entry points should be supplied\nthrough some other mechanism when this option is\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nolibc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use the C\nlibrary or system libraries tightly coupled with it when\nlinking. Still link with the startup files, <i>libgcc</i> or\ntoolchain provided language support libraries such as\n<i>libgnat</i>, <i>libgfortran</i> or <i>libstdc++</i>\nunless options preventing their inclusion are used as well.\nThis typically removes <b>-lc</b> from the link command\nline, as well as system libraries that normally go with it\nand become meaningless when absence of a C library is\nassumed, for example <b>-lpthread</b> or <b>-lm</b> in some\nconfigurations. This is intended for bare-board targets when\nthere is indeed no C library\navailable.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nostdlib</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use the\nstandard system startup files or libraries when linking. No\nstartup files and only the libraries you specify are passed\nto the linker, and options specifying linkage of the system\nlibraries, such as <b>-static-libgcc</b> or\n<b>-shared-libgcc</b>, are ignored.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ncompiler may generate calls to &quot;memcmp&quot;,\n&quot;memset&quot;, &quot;memcpy&quot; and\n&quot;memmove&quot;. These entries are usually resolved by\nentries in libc. These entry points should be supplied\nthrough some other mechanism when this option is\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>One\nof the standard libraries bypassed by <b>-nostdlib</b> and\n<b>-nodefaultlibs</b> is <i>libgcc.a</i>, a library of\ninternal subroutines which</big> GCC <big>uses to overcome\nshortcomings of particular machines, or special needs for\nsome languages.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nmost cases, you need <i>libgcc.a</i> even when you want to\navoid other standard libraries. In other words, when you\nspecify <b>-nostdlib</b> or <b>-nodefaultlibs</b> you should\nusually specify <b>-lgcc</b> as well. This ensures that you\nhave no unresolved references to internal</big> GCC\n<big>library subroutines. (An example of such an internal\nsubroutine is &quot;__main&quot;, used to ensure C</big> ++\n<big>constructors are called.)</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-e</b>\n<i>entry</i> <b><br>\n--entry=</b><i>entry</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\nprogram entry point is <i>entry</i>. The argument is\ninterpreted by the linker; the</big> GNU <big>linker accepts\neither a symbol name or an address.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-pie</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Produce a\ndynamically linked position independent executable on\ntargets that support it. For predictable results, you must\nalso specify the same set of options used for compilation\n(<b>-fpie</b>, <b>-fPIE</b>, or model suboptions) when you\nspecify this linker option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-no-pie</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t\nproduce a dynamically linked position independent\nexecutable.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-static-pie</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Produce a static\nposition independent executable on targets that support it.\nA static position independent executable is similar to a\nstatic executable, but can be loaded at any address without\na dynamic linker. For predictable results, you must also\nspecify the same set of options used for compilation\n(<b>-fpie</b>, <b>-fPIE</b>, or model suboptions) when you\nspecify this linker option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-pthread</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link with\nthe</big> POSIX <big>threads library. This option is\nsupported on GNU/Linux targets, most other Unix derivatives,\nand also on x86 Cygwin and MinGW targets. On some targets\nthis option also sets flags for the preprocessor, so it\nshould be used consistently for both compilation and\nlinking.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-r</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Produce a relocatable object as output.\nThis is also known as partial linking.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-rdynamic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pass the flag\n<b>-export-dynamic</b> to the</big> ELF <big>linker, on\ntargets that support it. This instructs the linker to add\nall symbols, not only used ones, to the dynamic symbol\ntable. This option is needed for some uses of\n&quot;dlopen&quot; or to allow obtaining backtraces from\nwithin a program.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-s</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Remove all symbol table and relocation\ninformation from the executable.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-static</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On systems that\nsupport dynamic linking, this overrides <b>-pie</b> and\nprevents linking with the shared libraries. On other\nsystems, this option has no effect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-shared</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Produce a shared\nobject which can then be linked with other objects to form\nan executable. Not all systems support this option. For\npredictable results, you must also specify the same set of\noptions used for compilation (<b>-fpic</b>, <b>-fPIC</b>, or\nmodel suboptions) when you specify this linker\noption.[1]</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-shared-libgcc\n<br>\n-static-libgcc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On systems that\nprovide <i>libgcc</i> as a shared library, these options\nforce the use of either the shared or static version,\nrespectively. If no shared version of <i>libgcc</i> was\nbuilt when the compiler was configured, these options have\nno effect.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>There\nare several situations in which an application should use\nthe shared <i>libgcc</i> instead of the static version. The\nmost common of these is when the application wishes to throw\nand catch exceptions across different shared libraries. In\nthat case, each of the libraries as well as the application\nitself should use the shared\n<i>libgcc</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Therefore,\nthe G++ driver automatically adds <b>-shared-libgcc</b>\nwhenever you build a shared library or a main executable,\nbecause C</big> ++ <big>programs typically use exceptions,\nso this is the right thing to do.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If,\ninstead, you use the</big> GCC <big>driver to create shared\nlibraries, you may find that they are not always linked with\nthe shared <i>libgcc</i>. If</big> GCC <big>finds, at its\nconfiguration time, that you have a non-GNU linker or\na</big> GNU <big>linker that does not support option\n<b>--eh-frame-hdr</b>, it links the shared version of\n<i>libgcc</i> into shared libraries by default. Otherwise,\nit takes advantage of the linker and optimizes away the\nlinking with the shared version of <i>libgcc</i>, linking\nwith the static version of libgcc by default. This allows\nexceptions to propagate through such shared libraries,\nwithout incurring relocation costs at library load\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>However,\nif a library or main executable is supposed to throw or\ncatch exceptions, you must link it using the G++ driver, or\nusing the option <b>-shared-libgcc</b>, such that it is\nlinked with the shared <i>libgcc</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-static-libasan</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When the\n<b>-fsanitize=address</b> option is used to link a program,\nthe</big> GCC <big>driver automatically links against\n<b>libasan</b>. If <i>libasan</i> is available as a shared\nlibrary, and the <b>-static</b> option is not used, then\nthis links against the shared version of <i>libasan</i>. The\n<b>-static-libasan</b> option directs the</big> GCC\n<big>driver to link <i>libasan</i> statically, without\nnecessarily linking other libraries\nstatically.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-static-libtsan</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When the\n<b>-fsanitize=thread</b> option is used to link a program,\nthe</big> GCC <big>driver automatically links against\n<b>libtsan</b>. If <i>libtsan</i> is available as a shared\nlibrary, and the <b>-static</b> option is not used, then\nthis links against the shared version of <i>libtsan</i>. The\n<b>-static-libtsan</b> option directs the</big> GCC\n<big>driver to link <i>libtsan</i> statically, without\nnecessarily linking other libraries\nstatically.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-static-liblsan</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When the\n<b>-fsanitize=leak</b> option is used to link a program,\nthe</big> GCC <big>driver automatically links against\n<b>liblsan</b>. If <i>liblsan</i> is available as a shared\nlibrary, and the <b>-static</b> option is not used, then\nthis links against the shared version of <i>liblsan</i>. The\n<b>-static-liblsan</b> option directs the</big> GCC\n<big>driver to link <i>liblsan</i> statically, without\nnecessarily linking other libraries\nstatically.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-static-libubsan</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When the\n<b>-fsanitize=undefined</b> option is used to link a\nprogram, the</big> GCC <big>driver automatically links\nagainst <b>libubsan</b>. If <i>libubsan</i> is available as\na shared library, and the <b>-static</b> option is not used,\nthen this links against the shared version of\n<i>libubsan</i>. The <b>-static-libubsan</b> option directs\nthe</big> GCC <big>driver to link <i>libubsan</i>\nstatically, without necessarily linking other libraries\nstatically.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-static-libstdc++</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When the\n<b>g++</b> program is used to link a C</big> ++\n<big>program, it normally automatically links against\n<b>libstdc++</b>. If <i>libstdc++</i> is available as a\nshared library, and the <b>-static</b> option is not used,\nthen this links against the shared version of\n<i>libstdc++</i>. That is normally fine. However, it is\nsometimes useful to freeze the version of <i>libstdc++</i>\nused by the program without going all the way to a fully\nstatic link. The <b>-static-libstdc++</b> option directs the\n<b>g++</b> driver to link <i>libstdc++</i> statically,\nwithout necessarily linking other libraries\nstatically.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-symbolic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Bind references\nto global symbols when building a shared object. Warn about\nany unresolved references (unless overridden by the link\neditor option <b>-Xlinker -z -Xlinker defs</b>). Only a few\nsystems support this option.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-T</b>\n<i>script</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use\n<i>script</i> as the linker script. This option is supported\nby most systems using the</big> GNU <big>linker. On some\ntargets, such as bare-board targets without an operating\nsystem, the <b>-T</b> option may be required when linking to\navoid references to undefined symbols.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Xlinker</b>\n<i>option</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pass\n<i>option</i> as an option to the linker. You can use this\nto supply system-specific linker options that</big> GCC\n<big>does not recognize.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou want to pass an option that takes a separate argument,\nyou must use <b>-Xlinker</b> twice, once for the option and\nonce for the argument. For example, to pass <b>-assert\ndefinitions</b>, you must write <b>-Xlinker -assert -Xlinker\ndefinitions</b>. It does not work to write <b>-Xlinker\n&quot;-assert definitions&quot;</b>, because this passes the\nentire string as a single argument, which is not what the\nlinker expects.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nusing the</big> GNU <big>linker, it is usually more\nconvenient to pass arguments to linker options using the\n<i>option</i><b>=</b><i>value</i> syntax than as separate\narguments. For example, you can specify <b>-Xlinker\n-Map=output.map</b> rather than <b>-Xlinker -Map -Xlinker\noutput.map</b>. Other linkers may not support this syntax\nfor command-line options.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wl,</b><i>option</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pass\n<i>option</i> as an option to the linker. If <i>option</i>\ncontains commas, it is split into multiple options at the\ncommas. You can use this syntax to pass an argument to the\noption. For example, <b>-Wl,-Map,output.map</b> passes\n<b>-Map output.map</b> to the linker. When using the</big>\nGNU <big>linker, you can also get the same effect with\n<b>-Wl,-Map=output.map</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>NOTE:\n<big>In Ubuntu 8.10 and later versions, for</big> LDFLAGS,\n<big>the option <b>-Wl,-z,relro</b> is used. To disable, use\n<b>-Wl,-z,norelro</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-u</b>\n<i>symbol</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pretend the\nsymbol <i>symbol</i> is undefined, to force linking of\nlibrary modules to define it. You can use <b>-u</b> multiple\ntimes with different symbols to force loading of additional\nlibrary modules.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-z</b>\n<i>keyword</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-z</b> is\npassed directly on to the linker along with the keyword\n<i>keyword</i>. See the section in the documentation of your\nlinker for permitted values and their\nmeanings.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><b>Options\nfor Directory Search</b> <br>\nThese options specify directories to search for header\nfiles, for libraries and for parts of the compiler: <b><br>\n-I</b> <i>dir</i> <b><br>\n-iquote</b> <i>dir</i> <b><br>\n-isystem</b> <i>dir</i> <b><br>\n-idirafter</b> <i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Add the\ndirectory <i>dir</i> to the list of directories to be\nsearched for header files during preprocessing. If\n<i>dir</i> begins with <b>=</b> or $SYSROOT, then the\n<b>=</b> or $SYSROOT is replaced by the sysroot prefix; see\n<b>--sysroot</b> and <b>-isysroot</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Directories\nspecified with <b>-iquote</b> apply only to the quote form\nof the directive,\n&quot;#include&nbsp;&quot;<i>file</i>&quot;&quot;.\nDirectories specified with <b>-I</b>, <b>-isystem</b>, or\n<b>-idirafter</b> apply to lookup for both the\n&quot;#include&nbsp;&quot;<i>file</i>&quot;&quot; and\n&quot;#include&nbsp;&lt;<i>file</i>&gt;&quot;\ndirectives.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan specify any number or combination of these options on\nthe command line to search for header files in several\ndirectories. The lookup order is as\nfollows:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>1.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>For the quote form of the include\ndirective, the directory of the current file is searched\nfirst.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>2.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>For the quote form of the include\ndirective, the directories specified by <b>-iquote</b>\noptions are searched in left-to-right order, as they appear\non the command line.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>3.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Directories specified with <b>-I</b>\noptions are scanned in left-to-right\norder.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>4.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Directories specified with\n<b>-isystem</b> options are scanned in left-to-right\norder.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>5.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Standard system directories are\nscanned.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>6.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Directories specified with\n<b>-idirafter</b> options are scanned in left-to-right\norder.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan use <b>-I</b> to override a system header file,\nsubstituting your own version, since these directories are\nsearched before the standard system header file directories.\nHowever, you should not use this option to add directories\nthat contain vendor-supplied system header files; use\n<b>-isystem</b> for that.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-isystem</b> and <b>-idirafter</b> options also mark the\ndirectory as a system directory, so that it gets the same\nspecial treatment that is applied to the standard system\ndirectories.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\na standard system include directory, or a directory\nspecified with <b>-isystem</b>, is also specified with\n<b>-I</b>, the <b>-I</b> option is ignored. The directory is\nstill searched but as a system directory at its normal\nposition in the system include chain. This is to ensure\nthat</big> GCC <big>&rsquo;s procedure to fix buggy system\nheaders and the ordering for the &quot;#include_next&quot;\ndirective are not inadvertently changed. If you really need\nto change the search order for system directories, use the\n<b>-nostdinc</b> and/or <b>-isystem</b>\noptions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><b>-I-</b></big></big></big></p> </td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>Split the include\npath. This option has been deprecated. Please use\n<b>-iquote</b> instead for <b>-I</b> directories before the\n<b>-I-</b> and remove the <b>-I-</b>\noption.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Any\ndirectories specified with <b>-I</b> options before\n<b>-I-</b> are searched only for headers requested with\n&quot;#include&nbsp;&quot;<i>file</i>&quot;&quot;; they are\nnot searched for\n&quot;#include&nbsp;&lt;<i>file</i>&gt;&quot;. If additional\ndirectories are specified with <b>-I</b> options after the\n<b>-I-</b>, those directories are searched for all\n<b>#include</b> directives.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition, <b>-I-</b> inhibits the use of the directory of\nthe current file directory as the first search directory for\n&quot;#include&nbsp;&quot;<i>file</i>&quot;&quot;. There is\nno way to override this effect of\n<b>-I-</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-iprefix</b>\n<i>prefix</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\n<i>prefix</i> as the prefix for subsequent\n<b>-iwithprefix</b> options. If the prefix represents a\ndirectory, you should include the final\n<b>/</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-iwithprefix</b>\n<i>dir</i> <b><br>\n-iwithprefixbefore</b> <i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Append\n<i>dir</i> to the prefix specified previously with\n<b>-iprefix</b>, and add the resulting directory to the\ninclude search path. <b>-iwithprefixbefore</b> puts it in\nthe same place <b>-I</b> would; <b>-iwithprefix</b> puts it\nwhere <b>-idirafter</b> would.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-isysroot</b>\n<i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nlike the <b>--sysroot</b> option, but applies only to header\nfiles (except for Darwin targets, where it applies to both\nheader files and libraries). See the <b>--sysroot</b> option\nfor more information.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-imultilib</b>\n<i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use <i>dir</i>\nas a subdirectory of the directory containing\ntarget-specific C</big> ++\n<big>headers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nostdinc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not search\nthe standard system directories for header files. Only the\ndirectories explicitly specified with <b>-I</b>,\n<b>-iquote</b>, <b>-isystem</b>, and/or <b>-idirafter</b>\noptions (and the directory of the current file, if\nappropriate) are searched.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nostdinc++</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not search\nfor header files in the C</big> ++ <big>-specific standard\ndirectories, but do still search the other standard\ndirectories. (This option is used when building the C</big>\n++ <big>library.)</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-iplugindir=</b><i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ndirectory to search for plugins that are passed by\n<b>-fplugin=</b><i>name</i> instead of\n<b>-fplugin=</b><i>path</i><b>/</b><i>name</i><b>.so</b>.\nThis option is not meant to be used by the user, but only\npassed by the driver.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-L</b><i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Add directory\n<i>dir</i> to the list of directories to be searched for\n<b>-l</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-B</b><i>prefix</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nspecifies where to find the executables, libraries, include\nfiles, and data files of the compiler\nitself.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ncompiler driver program runs one or more of the subprograms\n<b>cpp</b>, <b>cc1</b>, <b>as</b> and <b>ld</b>. It tries\n<i>prefix</i> as a prefix for each program it tries to run,\nboth with and without\n<i>machine</i><b>/</b><i>version</i><b>/</b> for the\ncorresponding target machine and compiler\nversion.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\neach subprogram to be run, the compiler driver first tries\nthe <b>-B</b> prefix, if any. If that name is not found, or\nif <b>-B</b> is not specified, the driver tries two standard\nprefixes, <i>/usr/lib/gcc/</i> and\n<i>/usr/local/lib/gcc/</i>. If neither of those results in a\nfile name that is found, the unmodified program name is\nsearched for using the directories specified in your</big>\n<b>PATH</b> <big>environment variable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ncompiler checks to see if the path provided by <b>-B</b>\nrefers to a directory, and if necessary it adds a directory\nseparator character at the end of the\npath.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-B</b>\nprefixes that effectively specify directory names also apply\nto libraries in the linker, because the compiler translates\nthese options into <b>-L</b> options for the linker. They\nalso apply to include files in the preprocessor, because the\ncompiler translates these options into <b>-isystem</b>\noptions for the preprocessor. In this case, the compiler\nappends <b>include</b> to the prefix.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nruntime support file <i>libgcc.a</i> can also be searched\nfor using the <b>-B</b> prefix, if needed. If it is not\nfound there, the two standard prefixes above are tried, and\nthat is all. The file is left out of the link if it is not\nfound by those means.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Another\nway to specify a prefix much like the <b>-B</b> prefix is to\nuse the environment variable</big> <b>GCC_EXEC_PREFIX</b>\n<big>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>As\na special kludge, if the path provided by <b>-B</b> is\n<i>[dir/]stageN/</i>, where <i>N</i> is a number in the\nrange 0 to 9, then it is replaced by <i>[dir/]include</i>.\nThis is to help with boot-strapping the\ncompiler.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-no-canonical-prefixes</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not expand\nany symbolic links, resolve references to <b>/../</b> or\n<b>/./</b>, or make the path absolute when generating a\nrelative prefix.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>--sysroot=</b><i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use <i>dir</i>\nas the logical root directory for headers and libraries. For\nexample, if the compiler normally searches for headers in\n<i>/usr/include</i> and libraries in <i>/usr/lib</i>, it\ninstead searches <i>dir/usr/include</i> and\n<i>dir/usr/lib</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou use both this option and the <b>-isysroot</b> option,\nthen the <b>--sysroot</b> option applies to libraries, but\nthe <b>-isysroot</b> option applies to header\nfiles.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\nGNU <big>linker (beginning with version 2.16) has the\nnecessary support for this option. If your linker does not\nsupport this option, the header file aspect of\n<b>--sysroot</b> still works, but the library aspect does\nnot.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>--no-sysroot-suffix</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>For some\ntargets, a suffix is added to the root directory specified\nwith <b>--sysroot</b>, depending on the other options used,\nso that headers may for example be found in\n<i>dir/suffix/usr/include</i> instead of\n<i>dir/usr/include</i>. This option disables the addition of\nsuch a suffix.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><b>Options\nfor Code Generation Conventions</b> <br>\nThese machine-independent options control the interface\nconventions used in code generation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Most\nof them have both positive and negative forms; the negative\nform of <b>-ffoo</b> is <b>-fno-foo</b>. In the table below,\nonly one of the forms is listed---the one that is not the\ndefault. You can figure out the other form by either\nremoving <b>no-</b> or adding it. <b><br>\n-fstack-reuse=</b><i>reuse-level</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols stack space reuse for user declared local/auto\nvariables and compiler generated temporaries.\n<i>reuse_level</i> can be <b>all</b>, <b>named_vars</b>, or\n<b>none</b>. <b>all</b> enables stack reuse for all local\nvariables and temporaries, <b>named_vars</b> enables the\nreuse only for user defined local variables with names, and\n<b>none</b> disables stack reuse completely. The default\nvalue is <b>all</b>. The option is needed when the program\nextends the lifetime of a scoped local variable or a\ncompiler generated temporary beyond the end point defined by\nthe language. When a lifetime of a variable ends, and if the\nvariable lives in memory, the optimizing compiler has the\nfreedom to reuse its stack space with other temporaries or\nscoped local variables whose live range does not overlap\nwith it. Legacy code extending local lifetime is likely to\nbreak with the stack reuse\noptimization.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample,</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\n*p; <br>\n{ <br>\nint local1; <br>\np = &amp;local1; <br>\nlocal1 = 10; <br>\n.... <br>\n} <br>\n{ <br>\nint local2; <br>\nlocal2 = 20; <br>\n... <br>\n} <br>\nif (*p == 10) // out of scope use of local1 <br>\n{ <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Another\nexample:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>struct\nA <br>\n{ <br>\nA(int k) : i(k), j(k) { } <br>\nint i; <br>\nint j; <br>\n}; <br>\nA *ap; <br>\nvoid foo(const A&amp; ar) <br>\n{ <br>\nap = &amp;ar; <br>\n} <br>\nvoid bar() <br>\n{ <br>\nfoo(A(10)); // temp object's lifetime ends when foo returns\n<br>\n{ <br>\nA a(20); <br>\n.... <br>\n} <br>\nap-&gt;i+= 10; // ap references out of scope temp whose\nspace <br>\n// is reused with a. What is the value of ap-&gt;i? <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nlifetime of a compiler generated temporary is well defined\nby the C</big> ++ <big>standard. When a lifetime of a\ntemporary ends, and if the temporary lives in memory, the\noptimizing compiler has the freedom to reuse its stack space\nwith other temporaries or scoped local variables whose live\nrange does not overlap with it. However some of the legacy\ncode relies on the behavior of older compilers in which\ntemporaries&rsquo; stack space is not reused, the aggressive\nstack reuse can lead to runtime errors. This option is used\nto control the temporary stack reuse\noptimization.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftrapv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ngenerates traps for signed overflow on addition,\nsubtraction, multiplication operations. The options\n<b>-ftrapv</b> and <b>-fwrapv</b> override each other, so\nusing <b>-ftrapv -fwrapv</b> on the command-line results in\n<b>-fwrapv</b> being effective. Note that only active\noptions override, so using <b>-ftrapv -fwrapv -fno-wrapv</b>\non the command-line results in <b>-ftrapv</b> being\neffective.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fwrapv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs the compiler to assume that signed arithmetic\noverflow of addition, subtraction and multiplication wraps\naround using twos-complement representation. This flag\nenables some optimizations and disables others. The options\n<b>-ftrapv</b> and <b>-fwrapv</b> override each other, so\nusing <b>-ftrapv -fwrapv</b> on the command-line results in\n<b>-fwrapv</b> being effective. Note that only active\noptions override, so using <b>-ftrapv -fwrapv -fno-wrapv</b>\non the command-line results in <b>-ftrapv</b> being\neffective.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fwrapv-pointer</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs the compiler to assume that pointer arithmetic\noverflow on addition and subtraction wraps around using\ntwos-complement representation. This flag disables some\noptimizations which assume pointer overflow is\ninvalid.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstrict-overflow</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nimplies <b>-fno-wrapv -fno-wrapv-pointer</b> and when\nnegated implies <b>-fwrapv\n-fwrapv-pointer</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fexceptions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable exception\nhandling. Generates extra code needed to propagate\nexceptions. For some targets, this implies</big> GCC\n<big>generates frame unwind information for all functions,\nwhich can produce significant data size overhead, although\nit does not affect execution. If you do not specify this\noption,</big> GCC <big>enables it by default for languages\nlike C</big> ++ <big>that normally require exception\nhandling, and disables it for languages like C that do not\nnormally require it. However, you may need to enable this\noption when compiling C code that needs to interoperate\nproperly with exception handlers written in C</big> ++\n<big>. You may also wish to disable this option if you are\ncompiling older C</big> ++ <big>programs that don&rsquo;t\nuse exception handling.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fnon-call-exceptions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat allows trapping instructions to throw exceptions. Note\nthat this requires platform-specific runtime support that\ndoes not exist everywhere. Moreover, it only allows\n<i>trapping</i> instructions to throw exceptions, i.e.\nmemory references or floating-point instructions. It does\nnot allow exceptions to be thrown from arbitrary signal\nhandlers such as &quot;SIGALRM&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdelete-dead-exceptions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Consider that\ninstructions that may throw exceptions but don&rsquo;t\notherwise contribute to the execution of the program can be\noptimized away. This option is enabled by default for the\nAda compiler, as permitted by the Ada language\nspecification. Optimization passes that cause dead\nexceptions to be removed are enabled independently at\ndifferent optimization levels.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-funwind-tables</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Similar to\n<b>-fexceptions</b>, except that it just generates any\nneeded static data, but does not affect the generated code\nin any other way. You normally do not need to enable this\noption; instead, a language processor that needs this\nhandling enables it on your behalf.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fasynchronous-unwind-tables</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate unwind\ntable in</big> DWARF <big>format, if supported by target\nmachine. The table is exact at each instruction boundary, so\nit can be used for stack unwinding from asynchronous events\n(such as debugger or garbage\ncollector).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-gnu-unique</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On systems with\nrecent</big> GNU <big>assembler and C library, the C</big>\n++ <big>compiler uses the &quot;STB_GNU_UNIQUE&quot; binding\nto make sure that definitions of template static data\nmembers and static local variables in inline functions are\nunique even in the presence of &quot;RTLD_LOCAL&quot;; this\nis necessary to avoid problems with a library used by two\ndifferent &quot;RTLD_LOCAL&quot; plugins depending on a\ndefinition in one of them and therefore disagreeing with the\nother one about the binding of the symbol. But this causes\n&quot;dlclose&quot; to be ignored for affected DSOs; if your\nprogram relies on reinitialization of a</big> DSO <big>via\n&quot;dlclose&quot; and &quot;dlopen&quot;, you can use\n<b>-fno-gnu-unique</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpcc-struct-return</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Return\n&quot;short&quot; &quot;struct&quot; and &quot;union&quot;\nvalues in memory like longer ones, rather than in registers.\nThis convention is less efficient, but it has the advantage\nof allowing intercallability between GCC-compiled files and\nfiles compiled with other compilers, particularly the\nPortable C Compiler (pcc).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nprecise convention for returning structures in memory\ndepends on the target configuration\nmacros.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Short\nstructures and unions are those whose size and alignment\nmatch that of some integer type.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\ncode compiled with the <b>-fpcc-struct-return</b> switch is\nnot binary compatible with code compiled with the\n<b>-freg-struct-return</b> switch. Use it to conform to a\nnon-default application binary\ninterface.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-freg-struct-return</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Return\n&quot;struct&quot; and &quot;union&quot; values in registers\nwhen possible. This is more efficient for small structures\nthan <b>-fpcc-struct-return</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou specify neither <b>-fpcc-struct-return</b> nor\n<b>-freg-struct-return</b>,</big> GCC <big>defaults to\nwhichever convention is standard for the target. If there is\nno standard convention,</big> GCC <big>defaults to\n<b>-fpcc-struct-return</b>, except on targets where</big>\nGCC <big>is the principal compiler. In those cases, we can\nchoose the standard, and we chose the more efficient\nregister return alternative.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\ncode compiled with the <b>-freg-struct-return</b> switch is\nnot binary compatible with code compiled with the\n<b>-fpcc-struct-return</b> switch. Use it to conform to a\nnon-default application binary\ninterface.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fshort-enums</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allocate to an\n&quot;enum&quot; type only as many bytes as it needs for the\ndeclared range of possible values. Specifically, the\n&quot;enum&quot; type is equivalent to the smallest integer\ntype that has enough room.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nthe <b>-fshort-enums</b> switch causes</big> GCC <big>to\ngenerate code that is not binary compatible with code\ngenerated without that switch. Use it to conform to a\nnon-default application binary\ninterface.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fshort-wchar</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Override the\nunderlying type for &quot;wchar_t&quot; to be &quot;short\nunsigned int&quot; instead of the default for the target.\nThis option is useful for building programs to run\nunder</big> WINE.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b><big>Warning:</big></b>\n<big>the <b>-fshort-wchar</b> switch causes</big> GCC\n<big>to generate code that is not binary compatible with\ncode generated without that switch. Use it to conform to a\nnon-default application binary\ninterface.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcommon</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>In C code, this\noption controls the placement of global variables defined\nwithout an initializer, known as <i>tentative\ndefinitions</i> in the C standard. Tentative definitions are\ndistinct from declarations of a variable with the\n&quot;extern&quot; keyword, which do not allocate\nstorage.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-fno-common</b>, which specifies that the\ncompiler places uninitialized global variables in the</big>\nBSS <big>section of the object file. This inhibits the\nmerging of tentative definitions by the linker so you get a\nmultiple-definition error if the same variable is\naccidentally defined in more than one compilation\nunit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-fcommon</b> places uninitialized global variables in a\ncommon block. This allows the linker to resolve all\ntentative definitions of the same variable in different\ncompilation units to the same object, or to a non-tentative\ndefinition. This behavior is inconsistent with C</big> ++\n<big>, and on many targets implies a speed and code size\npenalty on global variable references. It is mainly useful\nto enable legacy code to link without\nerrors.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-ident</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Ignore the\n&quot;#ident&quot; directive.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-finhibit-size-directive</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t\noutput a &quot;.size&quot; assembler directive, or anything\nelse that would cause trouble if the function is split in\nthe middle, and the two halves are placed at locations far\napart in memory. This option is used when compiling\n<i>crtstuff.c</i>; you should not need to use it for\nanything else.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fverbose-asm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put extra\ncommentary information in the generated assembly code to\nmake it more readable. This option is generally only of use\nto those who actually need to read the generated assembly\ncode (perhaps while debugging the compiler\nitself).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fno-verbose-asm</b>,\nthe default, causes the extra information to be omitted and\nis useful when comparing two assembler\nfiles.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nadded comments include:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>information on the compiler version and\ncommand-line options,</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the source code lines associated with the\nassembly instructions, in the form</big>\nFILENAME:LINENUMBER:CONTENT OF LINE,</big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>hints on which high-level expressions\ncorrespond to the various assembly instruction\noperands.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, given this C source file:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\ntest (int n) <br>\n{ <br>\nint i; <br>\nint total = 0; <br>\nfor (i = 0; i &lt; n; i++) <br>\ntotal += i * i; <br>\nreturn total; <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>compiling\nto (x86_64) assembly via <b>-S</b> and emitting the result\ndirect to stdout via <b>-o -</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-S test.c -fverbose-asm -Os -o -</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gives\noutput similar to this:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>.file\n&quot;test.c&quot; <br>\n# GNU C11 (GCC) version 7.0.0 20160809 (experimental)\n(x86_64-pc-linux-gnu) <br>\n[...snip...] <br>\n# options passed: <br>\n[...snip...] <br>\n.text <br>\n.globl test <br>\n.type test, @function <br>\ntest: <br>\n.LFB0: <br>\n.cfi_startproc <br>\n# test.c:4: int total = 0; <br>\nxorl %eax, %eax # &lt;retval&gt; <br>\n# test.c:6: for (i = 0; i &lt; n; i++) <br>\nxorl %edx, %edx # i <br>\n.L2: <br>\n# test.c:6: for (i = 0; i &lt; n; i++) <br>\ncmpl %edi, %edx # n, i <br>\njge .L5 #, <br>\n# test.c:7: total += i * i; <br>\nmovl %edx, %ecx # i, tmp92 <br>\nimull %edx, %ecx # i, tmp92 <br>\n# test.c:6: for (i = 0; i &lt; n; i++) <br>\nincl %edx # i <br>\n# test.c:7: total += i * i; <br>\naddl %ecx, %eax # tmp92, &lt;retval&gt; <br>\njmp .L2 # <br>\n.L5: <br>\n# test.c:10: } <br>\nret <br>\n.cfi_endproc <br>\n.LFE0: <br>\n.size test, .-test <br>\n.ident &quot;GCC: (GNU) 7.0.0 20160809 (experimental)&quot;\n<br>\n.section\n.note.GNU-stack,&quot;&quot;,@progbits</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ncomments are intended for humans rather than machines and\nhence the precise format of the comments is subject to\nchange.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-frecord-gcc-switches</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This switch\ncauses the command line used to invoke the compiler to be\nrecorded into the object file that is being created. This\nswitch is only implemented on some targets and the exact\nformat of the recording is target and binary file format\ndependent, but it usually takes the form of a section\ncontaining</big> ASCII <big>text. This switch is related to\nthe <b>-fverbose-asm</b> switch, but that switch only\nrecords information in the assembler output file as\ncomments, so it never reaches the object file. See also\n<b>-grecord-gcc-switches</b> for another way of storing\ncompiler options into the object file.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nposition-independent code (</big> PIC <big>) suitable for\nuse in a shared library, if supported for the target\nmachine. Such code accesses all constant addresses through a\nglobal offset table (</big> GOT <big>). The dynamic loader\nresolves the</big> GOT <big>entries when the program starts\n(the dynamic loader is not part of</big> GCC <big>; it is\npart of the operating system). If the</big> GOT <big>size\nfor the linked executable exceeds a machine-specific maximum\nsize, you get an error message from the linker indicating\nthat <b>-fpic</b> does not work; in that case, recompile\nwith <b>-fPIC</b> instead. (These maximums are 8k on\nthe</big> SPARC, <big>28k on AArch64 and 32k on the m68k\nand</big> RS/6000. <big>The x86 has no such\nlimit.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Position-independent\ncode requires special support, and therefore works only on\ncertain machines. For the x86,</big> GCC <big>supports</big>\nPIC <big>for System V but not for the Sun 386i. Code\ngenerated for the</big> IBM RS/6000 <big>is always\nposition-independent.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nthis flag is set, the macros &quot;__pic__&quot; and\n&quot;__PIC__&quot; are defined to 1.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fPIC</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If supported for\nthe target machine, emit position-independent code, suitable\nfor dynamic linking and avoiding any limit on the size of\nthe global offset table. This option makes a difference on\nAArch64, m68k, PowerPC and</big> SPARC.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Position-independent\ncode requires special support, and therefore works only on\ncertain machines.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nthis flag is set, the macros &quot;__pic__&quot; and\n&quot;__PIC__&quot; are defined to 2.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpie <br>\n-fPIE</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\nare similar to <b>-fpic</b> and <b>-fPIC</b>, but the\ngenerated position-independent code can be only linked into\nexecutables. Usually these options are used to compile code\nthat will be linked using the <b>-pie</b></big> GCC\n<big>option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fpie</b>\nand <b>-fPIE</b> both define the macros &quot;__pie__&quot;\nand &quot;__PIE__&quot;. The macros have the value 1 for\n<b>-fpie</b> and 2 for <b>-fPIE</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-plt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\nthe</big> PLT <big>for external function calls in\nposition-independent code. Instead, load the callee address\nat call sites from the</big> GOT <big>and branch to it. This\nleads to more efficient code by eliminating</big> PLT\n<big>stubs and exposing</big> GOT <big>loads to\noptimizations. On architectures such as 32-bit x86\nwhere</big> PLT <big>stubs expect the</big> GOT <big>pointer\nin a specific register, this gives more register allocation\nfreedom to the compiler. Lazy binding requires use of\nthe</big> PLT <big>; with <b>-fno-plt</b> all external\nsymbols are resolved at load time.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Alternatively,\nthe function attribute &quot;noplt&quot; can be used to\navoid calls through the</big> PLT <big>for specific external\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nposition-dependent code, a few targets also convert calls to\nfunctions that are marked to not use the</big> PLT <big>to\nuse the</big> GOT <big>instead.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-jump-tables</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use jump\ntables for switch statements even where it would be more\nefficient than other code generation strategies. This option\nis of use in conjunction with <b>-fpic</b> or <b>-fPIC</b>\nfor building code that forms part of a dynamic linker and\ncannot reference the address of a jump table. On some\ntargets, jump tables do not require a</big> GOT <big>and\nthis option is not needed.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-bit-tests</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use bit\ntests for switch statements even where it would be more\nefficient than other code generation\nstrategies.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ffixed-</b><i>reg</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat the\nregister named <i>reg</i> as a fixed register; generated\ncode should never refer to it (except perhaps as a stack\npointer, frame pointer or in some other fixed\nrole).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><i>reg</i>\nmust be the name of a register. The register names accepted\nare machine-specific and are defined in the\n&quot;REGISTER_NAMES&quot; macro in the machine description\nmacro file.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nflag does not have a negative form, because it specifies a\nthree-way choice.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcall-used-</b><i>reg</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat the\nregister named <i>reg</i> as an allocable register that is\nclobbered by function calls. It may be allocated for\ntemporaries or variables that do not live across a call.\nFunctions compiled this way do not save and restore the\nregister <i>reg</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nis an error to use this flag with the frame pointer or stack\npointer. Use of this flag for other registers that have\nfixed pervasive roles in the machine&rsquo;s execution model\nproduces disastrous results.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nflag does not have a negative form, because it specifies a\nthree-way choice.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcall-saved-</b><i>reg</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat the\nregister named <i>reg</i> as an allocable register saved by\nfunctions. It may be allocated even for temporaries or\nvariables that live across a call. Functions compiled this\nway save and restore the register <i>reg</i> if they use\nit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nis an error to use this flag with the frame pointer or stack\npointer. Use of this flag for other registers that have\nfixed pervasive roles in the machine&rsquo;s execution model\nproduces disastrous results.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>A\ndifferent sort of disaster results from the use of this flag\nfor a register in which function values may be\nreturned.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nflag does not have a negative form, because it specifies a\nthree-way choice.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpack-struct[=</b><i>n</i><b>]</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Without a value\nspecified, pack all structure members together without\nholes. When a value is specified (which must be a small\npower of two), pack structure members according to this\nvalue, representing the maximum alignment (that is, objects\nwith default alignment requirements larger than this are\noutput potentially unaligned at the next fitting\nlocation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nthe <b>-fpack-struct</b> switch causes</big> GCC <big>to\ngenerate code that is not binary compatible with code\ngenerated without that switch. Additionally, it makes the\ncode suboptimal. Use it to conform to a non-default\napplication binary interface.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fleading-underscore</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option and\nits counterpart, <b>-fno-leading-underscore</b>, forcibly\nchange the way C symbols are represented in the object file.\nOne use is to help link with legacy assembly\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nthe <b>-fleading-underscore</b> switch causes</big> GCC\n<big>to generate code that is not binary compatible with\ncode generated without that switch. Use it to conform to a\nnon-default application binary interface. Not all targets\nprovide complete support for this\nswitch.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftls-model=</b><i>model</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Alter the\nthread-local storage model to be used. The <i>model</i>\nargument should be one of <b>global-dynamic</b>,\n<b>local-dynamic</b>, <b>initial-exec</b> or\n<b>local-exec</b>. Note that the choice is subject to\noptimization: the compiler may use a more efficient model\nfor symbols not visible outside of the translation unit, or\nif <b>-fpic</b> is not given on the command\nline.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault without <b>-fpic</b> is <b>initial-exec</b>; with\n<b>-fpic</b> the default is\n<b>global-dynamic</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftrampolines</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>For targets that\nnormally need trampolines for nested functions, always\ngenerate them instead of using descriptors. Otherwise, for\ntargets that do not need them, like for example HP-PA\nor</big> IA-64, <big>do nothing.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>A\ntrampoline is a small piece of code that is created at run\ntime on the stack when the address of a nested function is\ntaken, and is used to call the nested function indirectly.\nTherefore, it requires the stack to be made executable in\norder for the program to work\nproperly.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fno-trampolines</b>\nis enabled by default on a language by language basis to let\nthe compiler avoid generating them, if it computes that this\nis safe, and replace them with descriptors. Descriptors are\nmade up of data only, but the generated code must be\nprepared to deal with them. As of this writing,\n<b>-fno-trampolines</b> is enabled by default only for\nAda.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Moreover,\ncode compiled with <b>-ftrampolines</b> and code compiled\nwith <b>-fno-trampolines</b> are not binary compatible if\nnested functions are present. This option must therefore be\nused on a program-wide basis and be manipulated with extreme\ncare.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fvisibility=</b>[<b>default</b>|<b>internal</b>|<b>hidden</b>|<b>protected</b>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ndefault</big> ELF <big>image symbol visibility to the\nspecified option---all symbols are marked with this unless\noverridden within the code. Using this feature can very\nsubstantially improve linking and load times of shared\nobject libraries, produce more optimized code, provide\nnear-perfect</big> API <big>export and prevent symbol\nclashes. It is <b>strongly</b> recommended that you use this\nin any shared objects you distribute.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Despite\nthe nomenclature, <b>default</b> always means public; i.e.,\navailable to be linked against from outside the shared\nobject. <b>protected</b> and <b>internal</b> are pretty\nuseless in real-world usage so the only other commonly used\noption is <b>hidden</b>. The default if <b>-fvisibility</b>\nisn&rsquo;t specified is <b>default</b>, i.e., make every\nsymbol public.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>A\ngood explanation of the benefits offered by ensuring</big>\nELF <big>symbols have the correct visibility is given by\n&quot;How To Write Shared Libraries&quot; by Ulrich Drepper\n(which can be found at\n&lt;<b>https://www.akkadia.org/drepper/</b>&gt;)---however a\nsuperior solution made possible by this option to marking\nthings hidden when the default is public is to make the\ndefault hidden and mark things public. This is the norm with\nDLLs on Windows and with <b>-fvisibility=hidden</b> and\n&quot;__attribute__\n((visibility(&quot;default&quot;)))&quot; instead of\n&quot;__declspec(dllexport)&quot; you get almost identical\nsemantics with identical syntax. This is a great boon to\nthose working with cross-platform\nprojects.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nthose adding visibility support to existing code, you may\nfind &quot;#pragma GCC visibility&quot; of use. This works\nby you enclosing the declarations you wish to set visibility\nfor with (for example) &quot;#pragma GCC visibility\npush(hidden)&quot; and &quot;#pragma GCC visibility\npop&quot;. Bear in mind that symbol visibility should be\nviewed <b>as part of the</b></big> <b>API <big>interface\ncontract</big></b> <big>and thus all new code should always\nspecify visibility when it is not the default; i.e.,\ndeclarations only for use within the local</big> DSO\n<big>should <b>always</b> be marked explicitly as hidden as\nso to avoid</big> PLT <big>indirection overheads---making\nthis abundantly clear also aids readability and\nself-documentation of the code. Note that due to</big> ISO\nC</big> ++ specification requirements, &quot;operator\nnew&quot; and &quot;operator delete&quot; must always be of\ndefault visibility.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Be aware\nthat headers from outside your project, in particular system\nheaders and headers from any other library you use, may not\nbe expecting to be compiled with visibility other than the\ndefault. You may need to explicitly say &quot;#pragma GCC\nvisibility push(default)&quot; before including any such\nheaders.</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&quot;extern&quot;\ndeclarations are not affected by <b>-fvisibility</b>, so a\nlot of code can be recompiled with\n<b>-fvisibility=hidden</b> with no modifications. However,\nthis means that calls to &quot;extern&quot; functions with\nno explicit visibility use the</big> PLT, <big>so it is more\neffective to use &quot;__attribute ((visibility))&quot;\nand/or &quot;#pragma GCC visibility&quot; to tell the\ncompiler which &quot;extern&quot; declarations should be\ntreated as hidden.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Note that\n<b>-fvisibility</b> does affect C</big> ++ <big>vague\nlinkage entities. This means that, for instance, an\nexception class that is be thrown between DSOs must be\nexplicitly marked with default visibility so that the\n<b>type_info</b> nodes are unified between the\nDSOs.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>An\noverview of these techniques, their benefits and how to use\nthem is at\n&lt;<b>http://gcc.gnu.org/wiki/Visibility</b>&gt;.</big></p>\n\n\n<p style=\"margin-left:11%;\"><big><b>-fstrict-volatile-bitfields</b></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nshould be used if accesses to volatile bit-fields (or other\nstructure fields, although the compiler usually honors those\ntypes anyway) should use a single access of the width of the\nfield&rsquo;s type, aligned to a natural alignment if\npossible. For example, targets with memory-mapped peripheral\nregisters might require all such accesses to be 16 bits\nwide; with this flag you can declare all peripheral\nbit-fields as &quot;unsigned short&quot; (assuming short is\n16 bits on these targets) to force</big> GCC <big>to use\n16-bit accesses instead of, perhaps, a more efficient 32-bit\naccess.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthis option is disabled, the compiler uses the most\nefficient instruction. In the previous example, that might\nbe a 32-bit load instruction, even though that accesses\nbytes that do not contain any portion of the bit-field, or\nmemory-mapped registers unrelated to the one being\nupdated.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nsome cases, such as when the &quot;packed&quot; attribute is\napplied to a structure field, it may not be possible to\naccess the field with a single read or write that is\ncorrectly aligned for the target machine. In this case</big>\nGCC <big>falls back to generating multiple accesses rather\nthan code that will fault or truncate the result at run\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note:\nDue to restrictions of the C/C</big> ++ <big>11 memory\nmodel, write accesses are not allowed to touch non bit-field\nmembers. It is therefore recommended to define all bits of\nthe field&rsquo;s type as bit-field\nmembers.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault value of this option is determined by the\napplication binary interface for the target\nprocessor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsync-libcalls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols whether any out-of-line instance of the\n&quot;__sync&quot; family of functions may be used to\nimplement the C</big> ++ <big>11 &quot;__atomic&quot; family\nof functions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault value of this option is enabled, thus the only\nuseful form of the option is <b>-fno-sync-libcalls</b>. This\noption is used in the implementation of the <i>libatomic</i>\nruntime library.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>GCC\n<big>Developer Options</big></b> <big><br>\nThis section describes command-line options that are\nprimarily of interest to</big> GCC <big>developers,\nincluding options to support compiler testing and\ninvestigation of compiler bugs and compile-time performance\nproblems. This includes options that produce debug dumps at\nvarious points in the compilation; that print statistics\nsuch as memory use and execution time; and that print\ninformation about</big> GCC <big>&rsquo;s configuration,\nsuch as where it searches for libraries. You should rarely\nneed to use any of these options for ordinary compilation\nand linking tasks.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Many\ndeveloper options that cause</big> GCC <big>to dump output\nto a file take an optional <b>=</b><i>filename</i> suffix.\nYou can specify <b>stdout</b> or <b>-</b> to dump to\nstandard output, and <b>stderr</b> for standard\nerror.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>If\n<b>=</b><i>filename</i> is omitted, a default dump file name\nis constructed by concatenating the base dump file name, a\npass number, phase letter, and pass name. The base dump file\nname is the name of output file produced by the compiler if\nexplicitly specified and not an executable; otherwise it is\nthe source file name. The pass number is determined by the\norder passes are registered with the compiler&rsquo;s pass\nmanager. This is generally the same as the order of\nexecution, but passes registered by plugins, target-specific\npasses, or passes that are otherwise registered late are\nnumbered higher than the pass named <b>final</b>, even if\nthey are executed earlier. The phase letter is one of\n<b>i</b> (inter-procedural analysis), <b>l</b>\n(language-specific), <b>r</b> (</big> RTL <big>), or\n<b>t</b> (tree). The files are created in the directory of\nthe output file. <b><br>\n-fcallgraph-info <br>\n-fcallgraph-info=</b></big> <i>MARKERS</i></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the\ncompiler output callgraph information for the program, on a\nper-object-file basis. The information is generated in the\ncommon</big> VCG <big>format. It can be decorated with\nadditional, per-node and/or per-edge information, if a list\nof comma-separated markers is additionally specified. When\nthe &quot;su&quot; marker is specified, the callgraph is\ndecorated with stack usage information; it is equivalent to\n<b>-fstack-usage</b>. When the &quot;da&quot; marker is\nspecified, the callgraph is decorated with information about\ndynamically allocated objects.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\ncompiling with <b>-flto</b>, no callgraph information is\noutput along with the object file. At</big> LTO <big>link\ntime, <b>-fcallgraph-info</b> may generate multiple\ncallgraph information files next to intermediate</big> LTO\n<big>output files.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-d</b><i>letters</i>\n<b><br>\n-fdump-rtl-</b><i>pass</i> <b><br>\n\n-fdump-rtl-</b><i>pass</i><b>=</b><i>filename</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Says to make\ndebugging dumps during compilation at times specified by\n<i>letters</i>. This is used for debugging the RTL-based\npasses of the compiler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Some\n<b>-d</b><i>letters</i> switches have different meaning when\n<b>-E</b> is used for preprocessing.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Debug\ndumps can be enabled with a <b>-fdump-rtl</b> switch or some\n<b>-d</b> option <i>letters</i>. Here are the possible\nletters for use in <i>pass</i> and <i>letters</i>, and their\nmeanings: <b><br>\n-fdump-rtl-alignments</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nbranch alignments have been computed.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-asmcons</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nfixing rtl statements that have unsatisfied in/out\nconstraints.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-auto_inc_dec</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nauto-inc-dec discovery. This pass is only run on\narchitectures that have auto inc or auto dec\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-barriers</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\ncleaning up the barrier instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-bbpart</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\npartitioning hot and cold basic\nblocks.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-bbro</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after block\nreordering.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-btl1\n<br>\n-fdump-rtl-btl2</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-btl1</b>\nand <b>-fdump-rtl-btl2</b> enable dumping after the two\nbranch target load optimization\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-bypass</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after jump\nbypassing and control flow\noptimizations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-combine</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nthe</big> RTL <big>instruction combination\npass.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-compgotos</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nduplicating the computed gotos.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-ce1\n<br>\n-fdump-rtl-ce2 <br>\n-fdump-rtl-ce3</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-ce1</b>,\n<b>-fdump-rtl-ce2</b>, and <b>-fdump-rtl-ce3</b> enable\ndumping after the three if conversion\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-cprop_hardreg</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after hard\nregister copy propagation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-csa</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\ncombining stack adjustments.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-cse1\n<br>\n-fdump-rtl-cse2</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-cse1</b>\nand <b>-fdump-rtl-cse2</b> enable dumping after the two\ncommon subexpression elimination\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-dce</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after the\nstandalone dead code elimination\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-dbr</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\ndelayed branch scheduling.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-dce1\n<br>\n-fdump-rtl-dce2</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-dce1</b>\nand <b>-fdump-rtl-dce2</b> enable dumping after the two dead\nstore elimination passes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-eh</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nfinalization of</big> EH <big>handling\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-eh_ranges</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nconversion of</big> EH <big>handling range\nregions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-expand</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after</big>\nRTL <big>generation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-fwprop1\n<br>\n-fdump-rtl-fwprop2</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-fwprop1</b>\nand <b>-fdump-rtl-fwprop2</b> enable dumping after the two\nforward propagation passes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-gcse1\n<br>\n-fdump-rtl-gcse2</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-gcse1</b>\nand <b>-fdump-rtl-gcse2</b> enable dumping after global\ncommon subexpression elimination.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-init-regs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after the\ninitialization of the registers.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-initvals</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after the\ncomputation of the initial value sets.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-into_cfglayout</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nconverting to cfglayout mode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-ira</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\niterated register allocation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-jump</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after the\nsecond jump optimization.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-loop2</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-loop2</b>\nenables dumping after the rtl loop optimization\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-mach</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nperforming the machine dependent reorganization pass, if\nthat pass exists.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-mode_sw</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nremoving redundant mode switches.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-rnreg</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nregister renumbering.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-outof_cfglayout</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nconverting from cfglayout mode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-peephole2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after the\npeephole pass.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-postreload</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\npost-reload optimizations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-pro_and_epilogue</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\ngenerating the function prologues and\nepilogues.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-sched1\n<br>\n-fdump-rtl-sched2</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-sched1</b>\nand <b>-fdump-rtl-sched2</b> enable dumping after the basic\nblock scheduling passes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-ree</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nsign/zero extension elimination.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-seqabstr</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\ncommon sequence discovery.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-shorten</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nshortening branches.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-sibling</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nsibling call optimizations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-split1\n<br>\n-fdump-rtl-split2 <br>\n-fdump-rtl-split3 <br>\n-fdump-rtl-split4 <br>\n-fdump-rtl-split5</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>These options\nenable dumping after five rounds of instruction\nsplitting.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-sms</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nmodulo scheduling. This pass is only run on some\narchitectures.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-stack</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nconversion from</big> GCC <big>&rsquo;s &quot;flat register\nfile&quot; registers to the x87&rsquo;s stack-like\nregisters. This pass is only run on x86\nvariants.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-subreg1\n<br>\n-fdump-rtl-subreg2</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>-fdump-rtl-subreg1</b>\nand <b>-fdump-rtl-subreg2</b> enable dumping after the two\nsubreg expansion passes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-unshare</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after all\nrtl has been unshared.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-vartrack</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nvariable tracking.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-vregs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nconverting virtual registers to hard\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-web</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after live\nrange splitting.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-regclass\n<br>\n-fdump-rtl-subregs_of_mode_init <br>\n-fdump-rtl-subregs_of_mode_finish <br>\n-fdump-rtl-dfinit <br>\n-fdump-rtl-dfinish</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>These dumps are\ndefined but always produce empty\nfiles.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-da</b></big></big></big></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdump-rtl-all</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Produce all the\ndumps listed above.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dA</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Annotate the assembler output with\nmiscellaneous debugging information.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dD</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Dump all macro definitions, at the end of\npreprocessing, in addition to normal\noutput.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dH</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Produce a core dump whenever an error\noccurs.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Annotate the assembler output with a\ncomment indicating which pattern and alternative is used.\nThe length and cost of each instruction are also\nprinted.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dP</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Dump the</big> RTL <big>in the assembler\noutput as a comment before each instruction. Also turns on\n<b>-dp</b> annotation.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>-dx</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Just generate</big> RTL <big>for a\nfunction instead of compiling it. Usually used with\n<b>-fdump-rtl-expand</b>.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-debug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Dump debugging\ninformation generated during the debug generation\nphase.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-earlydebug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Dump debugging\ninformation generated during the early debug generation\nphase.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-noaddr</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When doing\ndebugging dumps, suppress address output. This makes it more\nfeasible to use diff on debugging dumps for compiler\ninvocations with different compiler binaries and/or\ndifferent text / bss / data / heap / stack / dso start\nlocations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-freport-bug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Collect and dump\ndebug information into a temporary file if an internal\ncompiler error (</big> ICE <big>)\noccurs.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-unnumbered</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When doing\ndebugging dumps, suppress instruction numbers and address\noutput. This makes it more feasible to use diff on debugging\ndumps for compiler invocations with different options, in\nparticular with and without <b>-g</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-unnumbered-links</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When doing\ndebugging dumps (see <b>-d</b> option above), suppress\ninstruction numbers for the links to the previous and next\ninstructions in a sequence.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-ipa-</b><i>switch</i>\n<b><br>\n\n-fdump-ipa-</b><i>switch</i><b>-</b><i>options</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control the\ndumping at various stages of inter-procedural analysis\nlanguage tree to a file. The file name is generated by\nappending a switch specific suffix to the source file name,\nand the file is created in the same directory as the output\nfile. The following dumps are\npossible:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p><big><big><big>Enables all inter-procedural analysis\ndumps.</big></big></big></p> </td>\n<td width=\"9%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>cgraph</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dumps\ninformation about call-graph optimization, unused function\nremoval, and inlining decisions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>inline</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump after\nfunction inlining.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Additionally,\nthe options <b>-optimized</b>, <b>-missed</b>, <b>-note</b>,\nand <b>-all</b> can be provided, with the same meaning as\nfor <b>-fopt-info</b>, defaulting to\n<b>-optimized</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, <b>-fdump-ipa-inline-optimized-missed</b> will emit\ninformation on callsites that were inlined, along with\ncallsites that were not inlined.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>By\ndefault, the dump will contain messages about successful\noptimizations (equivalent to <b>-optimized</b>) together\nwith low-level details about the\nanalysis.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-lang</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Dump\nlanguage-specific information. The file name is made by\nappending <i>.lang</i> to the source file\nname.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-lang-all\n<br>\n-fdump-lang-</b><i>switch</i> <b><br>\n-fdump-lang-</b><i>switch</i><b>-</b><i>options</i> <b><br>\n\n-fdump-lang-</b><i>switch</i><b>-</b><i>options</i><b>=</b><i>filename</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control the\ndumping of language-specific information. The <i>options</i>\nand <i>filename</i> portions behave as described in the\n<b>-fdump-tree</b> option. The following <i>switch</i>\nvalues are accepted:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p><big><big><big>Enable all language-specific\ndumps.</big></big></big></p> </td>\n<td width=\"23%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>class</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump class\nhierarchy information. Virtual table information is emitted\nunless &rsquo;<b>slim</b>&rsquo; is specified. This option\nis applicable to C</big> ++ <big>only.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>module</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Dump module\ninformation. Options <b>lineno</b> (locations), <b>graph</b>\n(reachability), <b>blocks</b> (clusters), <b>uid</b>\n(serialization), <b>alias</b> (mergeable), <b>asmname</b>\n(Elrond), <b>eh</b> (mapper) &amp; <b>vops</b> (macros) may\nprovide additional information. This option is applicable to\nC</big> ++ <big>only.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>raw</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Dump the raw internal tree data. This\noption is applicable to C</big> ++\n<big>only.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-passes</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print on\n<i>stderr</i> the list of optimization passes that are\nturned on and off by the current command-line\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-statistics-</b><i>option</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable and\ncontrol dumping of pass statistics in a separate file. The\nfile name is generated by appending a suffix ending in\n<b>.statistics</b> to the source file name, and the file is\ncreated in the same directory as the output file. If the\n<b>-</b><i>option</i> form is used, <b>-stats</b> causes\ncounters to be summed over the whole compilation unit while\n<b>-details</b> dumps every event as the passes generate\nthem. The default with no option is to sum counters for each\nfunction compiled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-tree-all\n<br>\n-fdump-tree-</b><i>switch</i> <b><br>\n-fdump-tree-</b><i>switch</i><b>-</b><i>options</i> <b><br>\n\n-fdump-tree-</b><i>switch</i><b>-</b><i>options</i><b>=</b><i>filename</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control the\ndumping at various stages of processing the intermediate\nlanguage tree to a file. If the <b>-</b><i>options</i> form\nis used, <i>options</i> is a list of <b>-</b> separated\noptions which control the details of the dump. Not all\noptions are applicable to all dumps; those that are not\nmeaningful are ignored. The following options are available\n<b><br>\naddress</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Print the\naddress of each node. Usually this is not meaningful as it\nchanges according to the environment and source file. Its\nprimary use is for tying up a dump file with a debug\nenvironment.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>asmname</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>If\n&quot;DECL_ASSEMBLER_NAME&quot; has been set for a given\ndecl, use that in the dump instead of &quot;DECL_NAME&quot;.\nIts primary use is ease of use working backward from mangled\nnames in the assembly file.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>slim</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When dumping\nfront-end intermediate representations, inhibit dumping of\nmembers of a scope or body of a function merely because that\nscope has been reached. Only dump such items when they are\ndirectly reachable by some other path.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>When\ndumping pretty-printed trees, this option inhibits dumping\nthe bodies of control structures.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>When\ndumping</big> RTL, <big>print the</big> RTL <big>in slim\n(condensed) form instead of the default LISP-like\nrepresentation.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>raw</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Print a raw representation of the tree.\nBy default, trees are pretty-printed into a C-like\nrepresentation.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>details</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable more\ndetailed dumps (not honored by every dump option). Also\ninclude information from the optimization\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>stats</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable dumping\nvarious statistics about the pass (not honored by every dump\noption).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>blocks</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable showing\nbasic block boundaries (disabled in raw\ndumps).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>graph</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>For each of the\nother indicated dump files (<b>-fdump-rtl-</b><i>pass</i>),\ndump a representation of the control flow graph suitable for\nviewing with GraphViz to <i>file.passid.pass.dot</i>. Each\nfunction in the file is pretty-printed as a subgraph, so\nthat GraphViz can render them all in a single\nplot.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>This\noption currently only works for</big> RTL <big>dumps, and\nthe</big> RTL <big>is always dumped in slim\nform.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>vops</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable showing\nvirtual operands for every statement.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lineno</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable showing\nline numbers for statements.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>uid</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Enable showing the unique</big> ID\n<big>(&quot;DECL_UID&quot;) for each\nvariable.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>verbose</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable showing\nthe tree dump for each statement.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>eh</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Enable showing the</big> EH <big>region\nnumber holding each statement.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>scev</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable showing\nscalar evolution analysis details.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>optimized</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable showing\noptimization information (only available in certain\npasses).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>missed</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable showing\nmissed optimization information (only available in certain\npasses).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>note</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable other\ndetailed optimization information (only available in certain\npasses).</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Turn on all options, except <b>raw</b>,\n<b>slim</b>, <b>verbose</b> and\n<b>lineno</b>.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>optall</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Turn on all\noptimization options, i.e., <b>optimized</b>, <b>missed</b>,\nand <b>note</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\ndetermine what tree dumps are available or find the dump for\na pass of interest follow the steps\nbelow.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>1.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Invoke</big> GCC <big>with\n<b>-fdump-passes</b> and in the <i>stderr</i> output look\nfor a code that corresponds to the pass you are interested\nin. For example, the codes &quot;tree-evrp&quot;,\n&quot;tree-vrp1&quot;, and &quot;tree-vrp2&quot; correspond\nto the three Value Range Propagation passes. The number at\nthe end distinguishes distinct invocations of the same\npass.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>2.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>To enable the creation of the dump file,\nappend the pass code to the <b>-fdump-</b> option prefix and\ninvoke</big> GCC <big>with it. For example, to enable the\ndump from the Early Value Range Propagation pass,\ninvoke</big> GCC <big>with the <b>-fdump-tree-evrp</b>\noption. Optionally, you may specify the name of the dump\nfile. If you don&rsquo;t specify one,</big> GCC <big>creates\nas described below.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>3.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Find the pass dump in a file whose name\nis composed of three components separated by a period: the\nname of the source file</big> GCC <big>was invoked to\ncompile, a numeric suffix indicating the pass number\nfollowed by the letter <b>t</b> for tree passes (and the\nletter <b>r</b> for</big> RTL <big>passes), and finally the\npass code. For example, the Early</big> VRP <big>pass dump\nmight be in a file named <i>myfile.c.038t.evrp</i> in the\ncurrent working directory. Note that the numeric codes are\nnot stable and may change from one version of</big> GCC\n<big>to another.</big></big></big></p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fopt-info\n<br>\n-fopt-info-</b><i>options</i> <b><br>\n\n-fopt-info-</b><i>options</i><b>=</b><i>filename</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Controls\noptimization dumps from various optimization passes. If the\n<b>-</b><i>options</i> form is used, <i>options</i> is a\nlist of <b>-</b> separated option keywords to select the\ndump details and optimizations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<i>options</i> can be divided into three\ngroups:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>1.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>options describing what kinds of messages\nshould be emitted,</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>2.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>options describing the verbosity of the\ndump, and</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>3.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>options describing which optimizations\nshould be included.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noptions from each group can be freely mixed as they are\nnon-overlapping. However, in case of any conflicts, the\nlater options override the earlier options on the command\nline.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfollowing options control which kinds of messages should be\nemitted: <b><br>\noptimized</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Print\ninformation when an optimization is successfully applied. It\nis up to a pass to decide which information is relevant. For\nexample, the vectorizer passes print the source location of\nloops which are successfully\nvectorized.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>missed</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Print\ninformation about missed optimizations. Individual passes\ncontrol which information to include in the\noutput.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>note</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Print verbose\ninformation about optimizations, such as certain\ntransformations, more detailed messages about decisions\netc.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Print detailed optimization information.\nThis includes <b>optimized</b>, <b>missed</b>, and\n<b>note</b>.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfollowing option controls the dump verbosity: <b><br>\ninternals</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>By default, only\n&quot;high-level&quot; messages are emitted. This option\nenables additional, more detailed, messages, which are\nlikely to only be of interest to</big> GCC\n<big>developers.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>One\nor more of the following option keywords can be used to\ndescribe a group of optimizations:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>ipa</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Enable dumps from all interprocedural\noptimizations.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>loop</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable dumps\nfrom all loop optimizations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>inline</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable dumps\nfrom all inlining optimizations.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>omp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Enable dumps from all</big> OMP\n<big>(Offloading and Multi Processing)\noptimizations.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>vec</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Enable dumps from all vectorization\noptimizations.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>optall</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable dumps\nfrom all optimizations. This is a superset of the\noptimization groups listed above.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>options</i> is omitted, it defaults to\n<b>optimized-optall</b>, which means to dump messages about\nsuccessful optimizations from all the passes, omitting\nmessages that are treated as\n&quot;internals&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthe <i>filename</i> is provided, then the dumps from all the\napplicable optimizations are concatenated into the\n<i>filename</i>. Otherwise the dump is output onto\n<i>stderr</i>. Though multiple <b>-fopt-info</b> options are\naccepted, only one of them can include a <i>filename</i>. If\nother filenames are provided then all but the first such\noption are ignored.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat the output <i>filename</i> is overwritten in case of\nmultiple translation units. If a combined output from\nmultiple translation units is desired, <i>stderr</i> should\nbe used instead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nthe following example, the optimization info is output to\n<i>stderr</i>:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-O3 -fopt-info</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nexample:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-O3 -fopt-info-missed=missed.all</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>outputs\nmissed optimization report from all the passes into\n<i>missed.all</i>, and this one:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-O2 -ftree-vectorize\n-fopt-info-vec-missed</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>prints\ninformation about missed optimization opportunities from\nvectorization passes on <i>stderr</i>. Note that\n<b>-fopt-info-vec-missed</b> is equivalent to\n<b>-fopt-info-missed-vec</b>. The order of the optimization\ngroup names and message types listed after <b>-fopt-info</b>\ndoes not matter.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>As\nanother example,</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-O3\n-fopt-info-inline-optimized-missed=inline.txt</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>outputs\ninformation about missed optimizations as well as optimized\nlocations from all the inlining passes into\n<i>inline.txt</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Finally,\nconsider:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-fopt-info-vec-missed=vec.miss\n-fopt-info-loop-optimized=loop.opt</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Here\nthe two output filenames <i>vec.miss</i> and <i>loop.opt</i>\nare in conflict since only one output file is allowed. In\nthis case, only the first option takes effect and the\nsubsequent options are ignored. Thus only <i>vec.miss</i> is\nproduced which contains dumps from the vectorizer about\nmissed opportunities.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsave-optimization-record</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Write a</big>\nSRCFILE <big>.opt-record.json.gz file detailing what\noptimizations were performed, for those optimizations that\nsupport <b>-fopt-info</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is experimental and the format of the data within the\ncompressed</big> JSON <big>file is subject to\nchange.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nis roughly equivalent to a machine-readable version of\n<b>-fopt-info-all</b>, as a collection of messages with\nsource file, line number and column number, with the\nfollowing additional data for each\nmessage:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the execution count of the code being\noptimized, along with metadata about whether this was from\nactual profile data, or just an estimate, allowing consumers\nto prioritize messages by code\nhotness,</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the function name of the code being\noptimized, where applicable,</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the &quot;inlining chain&quot; for the\ncode being optimized, so that when a function is inlined\ninto several different places (which might themselves be\ninlined), the reader can distinguish between the\ncopies,</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>objects identifying those parts of the\nmessage that refer to expressions, statements or\nsymbol-table nodes, which of these categories they are, and,\nwhen available, their source code\nlocation,</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the</big> GCC <big>pass that emitted the\nmessage, and</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the location in</big> GCC <big>&rsquo;s\nown code from which the message was\nemitted</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Additionally,\nsome messages are logically nested within other messages,\nreflecting implementation details of the optimization\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fsched-verbose=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On targets that\nuse instruction scheduling, this option controls the amount\nof debugging output the scheduler prints to the dump\nfiles.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\n<i>n</i> greater than zero, <b>-fsched-verbose</b> outputs\nthe same information as <b>-fdump-rtl-sched1</b> and\n<b>-fdump-rtl-sched2</b>. For <i>n</i> greater than one, it\nalso output basic block probabilities, detailed ready list\ninformation and unit/insn info. For <i>n</i> greater than\ntwo, it includes</big> RTL <big>at abort point, control-flow\nand regions info. And for <i>n</i> over four,\n<b>-fsched-verbose</b> also includes dependence\ninfo.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fenable-</b><i>kind</i><b>-</b><i>pass</i>\n<b><br>\n\n-fdisable-</b><i>kind</i><b>-</b><i>pass</i><b>=</b><i>range-list</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This is a set of\noptions that are used to explicitly disable/enable\noptimization passes. These options are intended for use for\ndebugging</big> GCC. <big>Compiler users should use regular\noptions for enabling/disabling passes instead. <b><br>\n-fdisable-ipa-</b><i>pass</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disable</big>\nIPA <big>pass <i>pass</i>. <i>pass</i> is the pass name. If\nthe same pass is statically invoked in the compiler multiple\ntimes, the pass name should be appended with a sequential\nnumber starting from 1.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdisable-rtl-</b><i>pass</i>\n<b><br>\n\n-fdisable-rtl-</b><i>pass</i><b>=</b><i>range-list</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disable</big>\nRTL <big>pass <i>pass</i>. <i>pass</i> is the pass name. If\nthe same pass is statically invoked in the compiler multiple\ntimes, the pass name should be appended with a sequential\nnumber starting from 1. <i>range-list</i> is a\ncomma-separated list of function ranges or assembler names.\nEach range is a number pair separated by a colon. The range\nis inclusive in both ends. If the range is trivial, the\nnumber pair can be simplified as a single number. If the\nfunction&rsquo;s call graph node&rsquo;s <i>uid</i> falls\nwithin one of the specified ranges, the <i>pass</i> is\ndisabled for that function. The <i>uid</i> is shown in the\nfunction header of a dump file, and the pass names can be\ndumped by using option\n<b>-fdump-passes</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fdisable-tree-</b><i>pass</i>\n<b><br>\n\n-fdisable-tree-</b><i>pass</i><b>=</b><i>range-list</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disable tree\npass <i>pass</i>. See <b>-fdisable-rtl</b> for the\ndescription of option arguments.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fenable-ipa-</b><i>pass</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable</big> IPA\n<big>pass <i>pass</i>. <i>pass</i> is the pass name. If the\nsame pass is statically invoked in the compiler multiple\ntimes, the pass name should be appended with a sequential\nnumber starting from 1.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fenable-rtl-</b><i>pass</i>\n<b><br>\n\n-fenable-rtl-</b><i>pass</i><b>=</b><i>range-list</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable</big> RTL\n<big>pass <i>pass</i>. See <b>-fdisable-rtl</b> for option\nargument description and examples.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-fenable-tree-</b><i>pass</i>\n<b><br>\n\n-fenable-tree-</b><i>pass</i><b>=</b><i>range-list</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable tree pass\n<i>pass</i>. See <b>-fdisable-rtl</b> for the description of\noption arguments.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Here\nare some examples showing uses of these\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>#\ndisable ccp1 for all functions <br>\n-fdisable-tree-ccp1 <br>\n# disable complete unroll for function whose cgraph node uid\nis 1 <br>\n-fenable-tree-cunroll=1 <br>\n# disable gcse2 for functions at the following ranges [1,1],\n<br>\n# [300,400], and [400,1000] <br>\n# disable gcse2 for functions foo and foo2 <br>\n-fdisable-rtl-gcse2=foo,foo2 <br>\n# disable early inlining <br>\n-fdisable-tree-einline <br>\n# disable ipa inlining <br>\n-fdisable-ipa-inline <br>\n# enable tree full unroll <br>\n-fenable-tree-unroll</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fchecking\n<br>\n-fchecking=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable internal\nconsistency checking. The default depends on the compiler\nconfiguration. <b>-fchecking=2</b> enables further internal\nconsistency checking that might affect code\ngeneration.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-frandom-seed=</b><i>string</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nprovides a seed that</big> GCC <big>uses in place of random\nnumbers in generating certain symbol names that have to be\ndifferent in every compiled file. It is also used to place\nunique stamps in coverage data files and the object files\nthat produce them. You can use the <b>-frandom-seed</b>\noption to produce reproducibly identical object\nfiles.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<i>string</i> can either be a number (decimal, octal or hex)\nor an arbitrary string (in which case it&rsquo;s converted\nto a number by computing</big> CRC32\n<big>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<i>string</i> should be different for every file you\ncompile.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-save-temps</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Store the usual\n&quot;temporary&quot; intermediate files permanently; name\nthem as auxiliary output files, as specified described under\n<b>-dumpbase</b> and <b>-dumpdir</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nused in combination with the <b>-x</b> command-line option,\n<b>-save-temps</b> is sensible enough to avoid overwriting\nan input source file with the same extension as an\nintermediate file. The corresponding intermediate file may\nbe obtained by renaming the source file before using\n<b>-save-temps</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-save-temps=cwd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-save-temps -dumpdir ./</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-save-temps=obj</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-save-temps -dumpdir</b> <b><i>outdir/</i></b>, where\n<i>outdir/</i> is the directory of the output file specified\nafter the <b>-o</b> option, including any directory\nseparators. If the <b>-o</b> option is not used, the\n<b>-save-temps=obj</b> switch behaves like\n<b>-save-temps=cwd</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-time</b>[<b>=</b><i>file</i>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Report the</big>\nCPU <big>time taken by each subprocess in the compilation\nsequence. For C source files, this is the compiler proper\nand assembler (plus the linker if linking is\ndone).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Without\nthe specification of an output file, the output looks like\nthis:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>#\ncc1 0.12 0.01 <br>\n# as 0.00 0.01</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfirst number on each line is the &quot;user time&quot;, that\nis time spent executing the program itself. The second\nnumber is &quot;system time&quot;, time spent executing\noperating system routines on behalf of the program. Both\nnumbers are in seconds.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\nthe specification of an output file, the output is appended\nto the named file, and it looks like\nthis:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>0.12\n0.01 cc1 &lt;options&gt; <br>\n0.00 0.01 as &lt;options&gt;</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n&quot;user time&quot; and the &quot;system time&quot; are\nmoved before the program name, and the options passed to the\nprogram are displayed, so that one can later tell what file\nwas being compiled, and with which\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdump-final-insns</b>[<b>=</b><i>file</i>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Dump the final\ninternal representation (</big> RTL <big>) to <i>file</i>.\nIf the optional argument is omitted (or if <i>file</i> is\n&quot;.&quot;), the name of the dump file is determined by\nappending &quot;.gkd&quot; to the dump base name, see\n<b>-dumpbase</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcompare-debug</b>[<b>=</b><i>opts</i>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If no error\noccurs during compilation, run the compiler a second time,\nadding <i>opts</i> and <b>-fcompare-debug-second</b> to the\narguments passed to the second compilation. Dump the final\ninternal representation in both compilations, and print an\nerror if they differ.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthe equal sign is omitted, the default <b>-gtoggle</b> is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nenvironment variable</big> <b>GCC_COMPARE_DEBUG</b> <big>,\nif defined, non-empty and nonzero, implicitly enables\n<b>-fcompare-debug</b>. If</big> <b>GCC_COMPARE_DEBUG</b>\n<big>is defined to a string starting with a dash, then it is\nused for <i>opts</i>, otherwise the default <b>-gtoggle</b>\nis used.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-fcompare-debug=</b>,\nwith the equal sign but without <i>opts</i>, is equivalent\nto <b>-fno-compare-debug</b>, which disables the dumping of\nthe final representation and the second compilation,\npreventing even</big> <b>GCC_COMPARE_DEBUG</b> <big>from\ntaking effect.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\nverify full coverage during <b>-fcompare-debug</b> testing,\nset</big> <b>GCC_COMPARE_DEBUG</b> <big>to say\n<b>-fcompare-debug-not-overridden</b>, which</big> GCC\n<big>rejects as an invalid option in any actual compilation\n(rather than preprocessing, assembly or linking). To get\njust a warning, setting</big> <b>GCC_COMPARE_DEBUG</b>\n<big>to <b>-w%n-fcompare-debug not overridden</b> will\ndo.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fcompare-debug-second</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nimplicitly passed to the compiler for the second compilation\nrequested by <b>-fcompare-debug</b>, along with options to\nsilence warnings, and omitting other options that would\ncause the compiler to produce output to files or to standard\noutput as a side effect. Dump files and preserved temporary\nfiles are renamed so as to contain the &quot;.gk&quot;\nadditional extension during the second compilation, to avoid\noverwriting those generated by the\nfirst.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nthis option is passed to the compiler driver, it causes the\n<i>first</i> compilation to be skipped, which makes it\nuseful for little other than debugging the compiler\nproper.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-gtoggle</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Turn off\ngeneration of debug info, if leaving out this option\ngenerates it, or turn it on at level 2 otherwise. The\nposition of this argument in the command line does not\nmatter; it takes effect after all other options are\nprocessed, and it does so only once, no matter how many\ntimes it is given. This is mainly intended to be used with\n<b>-fcompare-debug</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fvar-tracking-assignments-toggle</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Toggle\n<b>-fvar-tracking-assignments</b>, in the same way that\n<b>-gtoggle</b> toggles <b>-g</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>-Q</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Makes the compiler print out each\nfunction name as it is compiled, and print some statistics\nabout each pass when it finishes.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftime-report</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the\ncompiler print some statistics about the time consumed by\neach pass when it finishes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ftime-report-details</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Record the time\nconsumed by infrastructure parts separately for each\npass.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fira-verbose=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control the\nverbosity of the dump file for the integrated register\nallocator. The default value is 5. If the value <i>n</i> is\ngreater or equal to 10, the dump output is sent to stderr\nusing the same format as <i>n</i> minus\n10.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flto-report</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Prints a report\nwith internal details on the workings of the link-time\noptimizer. The contents of this report vary from version to\nversion. It is meant to be useful to</big> GCC\n<big>developers when processing object files in</big> LTO\n<big>mode (via <b>-flto</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Disabled\nby default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-flto-report-wpa</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like\n<b>-flto-report</b>, but only print for the</big> WPA\n<big>phase of link-time optimization.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmem-report</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the\ncompiler print some statistics about permanent memory\nallocation when it finishes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fmem-report-wpa</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the\ncompiler print some statistics about permanent memory\nallocation for the</big> WPA <big>phase\nonly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpre-ipa-mem-report\n<br>\n-fpost-ipa-mem-report</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the\ncompiler print some statistics about permanent memory\nallocation before or after interprocedural\noptimization.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fprofile-report</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the\ncompiler print some statistics about consistency of the\n(estimated) profile and effect of individual\npasses.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstack-usage</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the\ncompiler output stack usage information for the program, on\na per-function basis. The filename for the dump is made by\nappending <i>.su</i> to the <i>auxname</i>. <i>auxname</i>\nis generated from the name of the output file, if explicitly\nspecified and it is not an executable, otherwise it is the\nbasename of the source file. An entry is made up of three\nfields:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>The name of the\nfunction.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>A number of bytes.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>One or more qualifiers:\n&quot;static&quot;, &quot;dynamic&quot;,\n&quot;bounded&quot;.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nqualifier &quot;static&quot; means that the function\nmanipulates the stack statically: a fixed number of bytes\nare allocated for the frame on function entry and released\non function exit; no stack adjustments are otherwise made in\nthe function. The second field is this fixed number of\nbytes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nqualifier &quot;dynamic&quot; means that the function\nmanipulates the stack dynamically: in addition to the static\nallocation described above, stack adjustments are made in\nthe body of the function, for example to push/pop arguments\naround function calls. If the qualifier &quot;bounded&quot;\nis also present, the amount of these adjustments is bounded\nat compile time and the second field is an upper bound of\nthe total amount of stack used by the function. If it is not\npresent, the amount of these adjustments is not bounded at\ncompile time and the second field only represents the\nbounded part.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fstats</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit statistics\nabout front-end processing at the end of the compilation.\nThis option is supported only by the C</big> ++ <big>front\nend, and the information is generally only useful to the G++\ndevelopment team.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdbg-cnt-list</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the name\nand the counter upper bound for all debug\ncounters.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fdbg-cnt=</b><i>counter-value-list</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the internal\ndebug counter lower and upper bound.\n<i>counter-value-list</i> is a comma-separated list of\n<i>name</i>:<i>lower_bound1</i>-<i>upper_bound1</i>\n[:<i>lower_bound2</i>-<i>upper_bound2</i>...] tuples which\nsets the name of the counter and list of closed intervals.\nThe <i>lower_bound</i> is optional and is zero initialized\nif not set. For example, with\n<b>-fdbg-cnt=dce:2-4:10-11,tail_call:10</b>,\n&quot;dbg_cnt(dce)&quot; returns true only for second,\nthird, fourth, tenth and eleventh invocation. For\n&quot;dbg_cnt(tail_call)&quot; true is returned for first 10\ninvocations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-file-name=</b><i>library</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the full\nabsolute name of the library file <i>library</i> that would\nbe used when linking---and don&rsquo;t do anything else.\nWith this option,</big> GCC <big>does not compile or link\nanything; it just prints the file\nname.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-multi-directory</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the\ndirectory name corresponding to the multilib selected by any\nother switches present in the command line. This directory\nis supposed to exist in</big> <b>GCC_EXEC_PREFIX</b>\n<big>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-multi-lib</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the\nmapping from multilib directory names to compiler switches\nthat enable them. The directory name is separated from the\nswitches by <b>;</b>, and each switch starts with an\n<b>@</b> instead of the <b>-</b>, without spaces between\nmultiple switches. This is supposed to ease shell\nprocessing.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-multi-os-directory</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the path\nto</big> OS <big>libraries for the selected multilib,\nrelative to some <i>lib</i> subdirectory. If</big> OS\n<big>libraries are present in the <i>lib</i> subdirectory\nand no multilibs are used, this is usually just <i>.</i>,\nif</big> OS <big>libraries are present in <i>libsuffix</i>\nsibling directories this prints e.g. <i>../lib64</i>,\n<i>../lib</i> or <i>../lib32</i>, or if</big> OS\n<big>libraries are present in <i>lib/subdir</i>\nsubdirectories it prints e.g. <i>amd64</i>, <i>sparcv9</i>\nor <i>ev6</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-multiarch</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the path\nto</big> OS <big>libraries for the selected multiarch,\nrelative to some <i>lib</i>\nsubdirectory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-prog-name=</b><i>program</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like\n<b>-print-file-name</b>, but searches for a program such as\n<b>cpp</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-libgcc-file-name</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Same as\n<b>-print-file-name=libgcc.a</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nis useful when you use <b>-nostdlib</b> or\n<b>-nodefaultlibs</b> but you do want to link with\n<i>libgcc.a</i>. You can do:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>gcc\n-nostdlib &lt;files&gt;... `gcc\n-print-libgcc-file-name`</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-search-dirs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the name\nof the configured installation directory and a list of\nprogram and library directories <b>gcc</b> searches---and\ndon&rsquo;t do anything else.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nis useful when <b>gcc</b> prints the error message\n<b>installation problem, cannot exec cpp0: No such file or\ndirectory</b>. To resolve this you either need to put\n<i>cpp0</i> and the other compiler components where\n<b>gcc</b> expects to find them, or you can set the\nenvironment variable</big> <b>GCC_EXEC_PREFIX</b> <big>to\nthe directory where you installed them. Don&rsquo;t forget\nthe trailing <b>/</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-sysroot</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the target\nsysroot directory that is used during compilation. This is\nthe target sysroot specified either at configure time or\nusing the <b>--sysroot</b> option, possibly with an extra\nsuffix that depends on compilation options. If no target\nsysroot is specified, the option prints\nnothing.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-print-sysroot-headers-suffix</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the suffix\nadded to the target sysroot when searching for headers, or\ngive an error if the compiler is not configured with such a\nsuffix---and don&rsquo;t do anything\nelse.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-dumpmachine</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the\ncompiler&rsquo;s target machine (for example,\n<b>i686-pc-linux-gnu</b>)---and don&rsquo;t do anything\nelse.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-dumpversion</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the\ncompiler version (for example, 3.0, 6.3.0 or 7)---and\ndon&rsquo;t do anything else. This is the compiler version\nused in filesystem paths and specs. Depending on how the\ncompiler has been configured it can be just a single number\n(major version), two numbers separated by a dot (major and\nminor version) or three numbers separated by dots (major,\nminor and patchlevel version).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-dumpfullversion</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the full\ncompiler version---and don&rsquo;t do anything else. The\noutput is always three numbers separated by dots, major,\nminor and patchlevel version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-dumpspecs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print the\ncompiler&rsquo;s built-in specs---and don&rsquo;t do\nanything else. (This is used when</big> GCC <big>itself is\nbeing built.)</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><b>Machine-Dependent\nOptions</b> <br>\nEach target machine supported by</big> GCC <big>can have its\nown options---for example, to allow you to compile for a\nparticular processor variant or</big> ABI, <big>or to\ncontrol optimizations specific to that machine. By\nconvention, the names of machine-specific options start with\n<b>-m</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Some\nconfigurations of the compiler also support additional\ntarget-specific options, usually for compatibility with\nother compilers on the same platform.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>AArch64\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for AArch64 implementations: <b><br>\n-mabi=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the specified data model. Permissible values are\n<b>ilp32</b> for SysV-like data model where int, long int\nand pointers are 32 bits, and <b>lp64</b> for SysV-like data\nmodel where int is 32 bits, but long int and pointers are 64\nbits.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault depends on the specific target configuration. Note\nthat the</big> LP64 <big>and</big> ILP32 <big>ABIs are not\nlink-compatible; you must compile your entire program with\nthe same</big> ABI, <big>and link with a compatible set of\nlibraries.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nbig-endian code. This is the default when</big> GCC <big>is\nconfigured for an <b>aarch64_be-*-*</b>\ntarget.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgeneral-regs-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nwhich uses only the general-purpose registers. This will\nprevent the compiler from using floating-point and\nAdvanced</big> SIMD <big>registers but will not impose any\nrestrictions on the assembler.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nlittle-endian code. This is the default when</big> GCC\n<big>is configured for an <b>aarch64-*-*</b> but not an\n<b>aarch64_be-*-*</b> target.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=tiny</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the tiny code model. The program and its statically\ndefined symbols must be within 1MB of each other. Programs\ncan be statically or dynamically\nlinked.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=small</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the small code model. The program and its statically\ndefined symbols must be within 4GB of each other. Programs\ncan be statically or dynamically linked. This is the default\ncode model.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=large</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the large code model. This makes no assumptions about\naddresses and sizes of sections. Programs can be statically\nlinked only. The <b>-mcmodel=large</b> option is\nincompatible with <b>-mabi=ilp32</b>, <b>-fpic</b> and\n<b>-fPIC</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstrict-align\n<br>\n-mno-strict-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Avoid or allow\ngenerating memory accesses that may not be aligned on a\nnatural object boundary as described in the architecture\nspecification.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-momit-leaf-frame-pointer\n<br>\n-mno-omit-leaf-frame-pointer</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Omit or keep the\nframe pointer in leaf functions. The former behavior is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-protector-guard=</b><i>guard</i>\n<b><br>\n-mstack-protector-guard-reg=</b><i>reg</i> <b><br>\n\n-mstack-protector-guard-offset=</b><i>offset</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate stack\nprotection code using canary at <i>guard</i>. Supported\nlocations are <b>global</b> for a global canary or\n<b>sysreg</b> for a canary in an appropriate system\nregister.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\nthe latter choice the options\n<b>-mstack-protector-guard-reg=</b><i>reg</i> and\n<b>-mstack-protector-guard-offset=</b><i>offset</i>\nfurthermore specify which system register to use as base\nregister for reading the canary, and from what offset from\nthat base register. There is no default register or offset\nas this is entirely for use within the Linux\nkernel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls-dialect=desc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use</big> TLS\n<big>descriptors as the thread-local storage mechanism for\ndynamic accesses of</big> TLS <big>variables. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls-dialect=traditional</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use\ntraditional</big> TLS <big>as the thread-local storage\nmechanism for dynamic accesses of</big> TLS\n<big>variables.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls-size=</b><i>size</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify bit size\nof immediate</big> TLS <big>offsets. Valid values are 12,\n24, 32, 48. This option requires binutils 2.26 or\nnewer.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-cortex-a53-835769\n<br>\n-mno-fix-cortex-a53-835769</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable the workaround for the</big> ARM <big>Cortex-A53\nerratum number 835769. This involves inserting a</big> NOP\n<big>instruction between memory instructions and 64-bit\ninteger multiply-accumulate\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-cortex-a53-843419\n<br>\n-mno-fix-cortex-a53-843419</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable the workaround for the</big> ARM <big>Cortex-A53\nerratum number 843419. This erratum workaround is made at\nlink time and this will only pass the corresponding flag to\nthe linker.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlow-precision-recip-sqrt\n<br>\n-mno-low-precision-recip-sqrt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable the reciprocal square root approximation. This\noption only has an effect if <b>-ffast-math</b> or\n<b>-funsafe-math-optimizations</b> is used as well. Enabling\nthis reduces precision of reciprocal square root results to\nabout 16 bits for single precision and to 32 bits for double\nprecision.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlow-precision-sqrt\n<br>\n-mno-low-precision-sqrt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable the square root approximation. This option only has\nan effect if <b>-ffast-math</b> or\n<b>-funsafe-math-optimizations</b> is used as well. Enabling\nthis reduces precision of square root results to about 16\nbits for single precision and to 32 bits for double\nprecision. If enabled, it implies\n<b>-mlow-precision-recip-sqrt</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlow-precision-div\n<br>\n-mno-low-precision-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable the division approximation. This option only has an\neffect if <b>-ffast-math</b> or\n<b>-funsafe-math-optimizations</b> is used as well. Enabling\nthis reduces precision of division results to about 16 bits\nfor single precision and to 32 bits for double\nprecision.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtrack-speculation\n<br>\n-mno-track-speculation</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable generation of additional code to track speculative\nexecution through conditional branches. The tracking state\ncan then be used by the compiler when expanding calls to\n&quot;__builtin_speculation_safe_copy&quot; to permit a more\nefficient code sequence to be\ngenerated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-moutline-atomics\n<br>\n-mno-outline-atomics</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable calls to out-of-line helpers to implement atomic\noperations. These helpers will, at runtime, determine if\nthe</big> LSE <big>instructions from ARMv8.1-A can be used;\nif not, they will use the load/store-exclusive instructions\nthat are present in the base ARMv8.0</big>\nISA.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is only applicable when compiling for the base\nARMv8.0 instruction set. If using a later revision, e.g.\n<b>-march=armv8.1-a</b> or <b>-march=armv8-a+lse</b>, the\nARMv8.1-Atomics instructions will be used directly. The same\napplies when using <b>-mcpu=</b> when the selected cpu\nsupports the <b>lse</b> feature. This option is on by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-march=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the name\nof the target architecture and, optionally, one or more\nfeature modifiers. This option has the form\n<b>-march=</b><i>arch</i>{<b>+</b>[<b>no</b>]<i>feature</i>}*.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ntable below summarizes the permissible values for\n<i>arch</i> and the features that they enable by default:\n<i><br>\narch value</i> : <i>Architecture</i> : <i>Includes by\ndefault</i> <b><br>\narmv8-a</b> : Armv8-A : <b>+fp</b>, <b>+simd <br>\narmv8.1-a</b> : Armv8.1-A : <b>armv8-a</b>, <b>+crc</b>,\n<b>+lse</b>, <b>+rdma <br>\narmv8.2-a</b> : Armv8.2-A : <b>armv8.1-a <br>\narmv8.3-a</b> : Armv8.3-A : <b>armv8.2-a</b>, <b>+pauth <br>\narmv8.4-a</b> : Armv8.4-A : <b>armv8.3-a</b>, <b>+flagm</b>,\n<b>+fp16fml</b>, <b>+dotprod <br>\narmv8.5-a</b> : Armv8.5-A : <b>armv8.4-a</b>, <b>+sb</b>,\n<b>+ssbs</b>, <b>+predres <br>\narmv8.6-a</b> : Armv8.6-A : <b>armv8.5-a</b>, <b>+bf16</b>,\n<b>+i8mm <br>\narmv8-r</b> : Armv8-R : <b>armv8-r</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalue <b>native</b> is available on native AArch64 GNU/Linux\nand causes the compiler to pick the architecture of the host\nsystem. This option has no effect if the compiler is unable\nto recognize the architecture of the host\nsystem,</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\npermissible values for <i>feature</i> are listed in the\nsub-section on <b>aarch64-feature-modifiers,,-march and\n-mcpu Feature Modifiers</b>. Where conflicting feature\nmodifiers are specified, the right-most feature is\nused.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>uses <i>name</i> to determine what kind of instructions\nit can emit when generating assembly code. If <b>-march</b>\nis specified without either of <b>-mtune</b> or <b>-mcpu</b>\nalso being specified, the code is tuned to perform well\nacross a range of target processors implementing the target\narchitecture.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the name\nof the target processor for which</big> GCC <big>should tune\nthe performance of the code. Permissible values for this\noption are: <b>generic</b>, <b>cortex-a35</b>,\n<b>cortex-a53</b>, <b>cortex-a55</b>, <b>cortex-a57</b>,\n<b>cortex-a72</b>, <b>cortex-a73</b>, <b>cortex-a75</b>,\n<b>cortex-a76</b>, <b>cortex-a76ae</b>, <b>cortex-a77</b>,\n<b>cortex-a65</b>, <b>cortex-a65ae</b>, <b>cortex-a34</b>,\n<b>cortex-a78</b>, <b>cortex-a78ae</b>, <b>cortex-a78c</b>,\n<b>ares</b>, <b>exynos-m1</b>, <b>emag</b>, <b>falkor</b>,\n<b>neoverse-512tvb</b>, <b>neoverse-e1</b>,\n<b>neoverse-n1</b>, <b>neoverse-n2</b>, <b>neoverse-v1</b>,\n<b>qdf24xx</b>, <b>saphira</b>, <b>phecda</b>,\n<b>xgene1</b>, <b>vulcan</b>, <b>octeontx</b>,\n<b>octeontx81</b>, <b>octeontx83</b>, <b>octeontx2</b>,\n<b>octeontx2t98</b>, <b>octeontx2t96 octeontx2t93</b>,\n<b>octeontx2f95</b>, <b>octeontx2f95n</b>,\n<b>octeontx2f95mm</b>, <b>a64fx</b>, <b>thunderx</b>,\n<b>thunderxt88</b>, <b>thunderxt88p1</b>,\n<b>thunderxt81</b>, <b>tsv110</b>, <b>thunderxt83</b>,\n<b>thunderx2t99</b>, <b>thunderx3t110</b>, <b>zeus</b>,\n<b>cortex-a57.cortex-a53</b>, <b>cortex-a72.cortex-a53</b>,\n<b>cortex-a73.cortex-a35</b>, <b>cortex-a73.cortex-a53</b>,\n<b>cortex-a75.cortex-a55</b>, <b>cortex-a76.cortex-a55</b>,\n<b>cortex-r82</b>, <b>cortex-x1</b>, <b>ampere1</b>,\n<b>native</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalues <b>cortex-a57.cortex-a53</b>,\n<b>cortex-a72.cortex-a53</b>, <b>cortex-a73.cortex-a35</b>,\n<b>cortex-a73.cortex-a53</b>, <b>cortex-a75.cortex-a55</b>,\n<b>cortex-a76.cortex-a55</b> specify that</big> GCC\n<big>should tune for a big.LITTLE\nsystem.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalue <b>neoverse-512tvb</b> specifies that</big> GCC\n<big>should tune for Neoverse cores that (a) implement</big>\nSVE <big>and (b) have a total vector bandwidth of 512 bits\nper cycle. In other words, the option tells</big> GCC\n<big>to tune for Neoverse cores that can execute 4 128-bit\nAdvanced</big> SIMD <big>arithmetic instructions a cycle and\nthat can execute an equivalent number of</big> SVE\n<big>arithmetic instructions per cycle (2 for 256-bit</big>\nSVE, 4 <big>for 128-bit</big> SVE <big>). This is more\ngeneral than tuning for a specific core like Neoverse V1 but\nis more specific than the default tuning described\nbelow.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Additionally\non native AArch64 GNU/Linux systems the value <b>native</b>\ntunes performance to the host system. This option has no\neffect if the compiler is unable to recognize the processor\nof the host system.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Where\nnone of <b>-mtune=</b>, <b>-mcpu=</b> or <b>-march=</b> are\nspecified, the code is tuned to perform well across a range\nof target processors.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption cannot be suffixed by feature\nmodifiers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the name\nof the target processor, optionally suffixed by one or more\nfeature modifiers. This option has the form\n<b>-mcpu=</b><i>cpu</i>{<b>+</b>[<b>no</b>]<i>feature</i>}*,\nwhere the permissible values for <i>cpu</i> are the same as\nthose available for <b>-mtune</b>. The permissible values\nfor <i>feature</i> are documented in the sub-section on\n<b>aarch64-feature-modifiers,,-march and -mcpu Feature\nModifiers</b>. Where conflicting feature modifiers are\nspecified, the right-most feature is\nused.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>uses <i>name</i> to determine what kind of instructions\nit can emit when generating assembly code (as if by\n<b>-march</b>) and to determine the target processor for\nwhich to tune for performance (as if by <b>-mtune</b>).\nWhere this option is used in conjunction with <b>-march</b>\nor <b>-mtune</b>, those options take precedence over the\nappropriate part of this option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcpu=neoverse-512tvb</b>\nis special in that it does not refer to a specific core, but\ninstead refers to all Neoverse cores that (a)\nimplement</big> SVE <big>and (b) have a total vector\nbandwidth of 512 bits a cycle. Unless overridden by\n<b>-march</b>, <b>-mcpu=neoverse-512tvb</b> generates code\nthat can run on a Neoverse V1 core, since Neoverse V1 is the\nfirst Neoverse core with these properties. Unless overridden\nby <b>-mtune</b>, <b>-mcpu=neoverse-512tvb</b> tunes code in\nthe same way as for\n<b>-mtune=neoverse-512tvb</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-moverride=</b><i>string</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Override tuning\ndecisions made by the back-end in response to a\n<b>-mtune=</b> switch. The syntax, semantics, and accepted\nvalues for <i>string</i> in this option are not guaranteed\nto be consistent across releases.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is only intended to be useful when developing</big>\nGCC.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mverbose-cost-dump</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable verbose\ncost model dumping in the debug dump files. This option is\nprovided for use in debugging the\ncompiler.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpc-relative-literal-loads\n<br>\n-mno-pc-relative-literal-loads</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable PC-relative literal loads. With this option literal\npools are accessed using a single instruction and emitted\nafter each function. This limits the maximum size of\nfunctions to 1MB. This is enabled by default for\n<b>-mcmodel=tiny</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msign-return-address=</b><i>scope</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the\nfunction scope on which return address signing will be\napplied. Permissible values are <b>none</b>, which disables\nreturn address signing, <b>non-leaf</b>, which enables\npointer signing for functions which are not leaf functions,\nand <b>all</b>, which enables pointer signing for all\nfunctions. The default value is <b>none</b>. This option has\nbeen deprecated by\n-mbranch-protection.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-protection=</b><i>none</i><b>|</b><i>standard</i><b>|</b><i>pac-ret</i><b>[+</b><i>leaf</i><b>+</b><i>b-key</i><b>]|</b><i>bti</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the\nbranch protection features to use. <b>none</b> is the\ndefault and turns off all types of branch protection.\n<b>standard</b> turns on all types of branch protection\nfeatures. If a feature has additional tuning options, then\n<b>standard</b> sets it to its standard level.\n<b>pac-ret[+</b><i>leaf</i><b>]</b> turns on return address\nsigning to its standard level: signing functions that save\nthe return address to memory (non-leaf functions will\npractically always do this) using the a-key. The optional\nargument <b>leaf</b> can be used to extend the signing to\ninclude leaf functions. The optional argument <b>b-key</b>\ncan be used to sign the functions with the B-key instead of\nthe A-key. <b>bti</b> turns on branch target identification\nmechanism.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mharden-sls=</b><i>opts</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable compiler\nhardening against straight line speculation (</big> SLS\n<big>). <i>opts</i> is a comma-separated list of the\nfollowing options: <b><br>\nretbr</b></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>blr</b></big></big></big></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><big><big><big>In addition,\n<b>-mharden-sls=all</b> enables all</big> SLS <big>hardening\nwhile <b>-mharden-sls=none</b> disables all</big> SLS\n<big>hardening.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msve-vector-bits=</b><i>bits</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\nnumber of bits in an</big> SVE <big>vector register. This\noption only has an effect when</big> SVE <big>is\nenabled.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>supports two forms of</big> SVE <big>code generation:\n&quot;vector-length agnostic&quot; output that works with\nany size of vector register and &quot;vector-length\nspecific&quot; output that allows</big> GCC <big>to make\nassumptions about the vector length when it is useful for\noptimization reasons. The possible values of <b>bits</b>\nare: <b>scalable</b>, <b>128</b>, <b>256</b>, <b>512</b>,\n<b>1024</b> and <b>2048</b>. Specifying <b>scalable</b>\nselects vector-length agnostic output. At present\n<b>-msve-vector-bits=128</b> also generates vector-length\nagnostic output for big-endian targets. All other values\ngenerate vector-length specific code. The behavior of these\nvalues may change in future releases and no value except\n<b>scalable</b> should be relied on for producing code that\nis portable across different hardware</big> SVE <big>vector\nlengths.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-msve-vector-bits=scalable</b>, which produces\nvector-length agnostic code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><b>-march</b>\nand <b>-mcpu</b> Feature Modifiers</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Feature\nmodifiers used with <b>-march</b> and <b>-mcpu</b> can be\nany of the following and their inverses\n<b>no</b><i>feature</i>:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>crc</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Enable</big> CRC <big>extension. This is\non by default for\n<b>-march=armv8.1-a</b>.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>crypto</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable Crypto\nextension. This also enables Advanced</big> SIMD <big>and\nfloating-point instructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>fp</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Enable floating-point instructions. This\nis on by default for all possible values for options\n<b>-march</b> and <b>-mcpu</b>.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>simd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nAdvanced</big> SIMD <big>instructions. This also enables\nfloating-point instructions. This is on by default for all\npossible values for options <b>-march</b> and\n<b>-mcpu</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>sve</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Enable Scalable Vector Extension\ninstructions. This also enables Advanced</big> SIMD <big>and\nfloating-point instructions.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>lse</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Enable Large System Extension\ninstructions. This is on by default for\n<b>-march=armv8.1-a</b>.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>rdma</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable Round\nDouble Multiply Accumulate instructions. This is on by\ndefault for <b>-march=armv8.1-a</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>fp16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable</big>\nFP16 <big>extension. This also enables floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>fp16fml</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable</big>\nFP16 <big>fmla extension. This also enables</big> FP16\n<big>extensions and floating-point instructions. This option\nis enabled by default for <b>-march=armv8.4-a</b>. Use of\nthis option with architectures prior to Armv8.2-A is not\nsupported.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>rcpc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the RcPc\nextension. This does not change code generation from</big>\nGCC, <big>but is passed on to the assembler, enabling inline\nasm statements to use instructions from the RcPc\nextension.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>dotprod</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the Dot\nProduct extension. This also enables Advanced</big> SIMD\n<big>instructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>aes</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Enable the Armv8-a aes and pmull crypto\nextension. This also enables Advanced</big> SIMD\n<big>instructions.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>sha2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nArmv8-a sha2 crypto extension. This also enables\nAdvanced</big> SIMD <big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>sha3</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nsha512 and sha3 crypto extension. This also enables\nAdvanced</big> SIMD <big>instructions. Use of this option\nwith architectures prior to Armv8.2-A is not\nsupported.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>sm4</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Enable the sm3 and sm4 crypto extension.\nThis also enables Advanced</big> SIMD <big>instructions. Use\nof this option with architectures prior to Armv8.2-A is not\nsupported.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>profile</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nStatistical Profiling extension. This option is only to\nenable the extension at the assembler level and does not\naffect code generation.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>rng</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Enable the Armv8.5-a Random Number\ninstructions. This option is only to enable the extension at\nthe assembler level and does not affect code\ngeneration.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>memtag</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nArmv8.5-a Memory Tagging Extensions. Use of this option with\narchitectures prior to Armv8.5-A is not\nsupported.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>sb</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Enable the Armv8-a Speculation Barrier\ninstruction. This option is only to enable the extension at\nthe assembler level and does not affect code generation.\nThis option is enabled by default for\n<b>-march=armv8.5-a</b>.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>ssbs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nArmv8-a Speculative Store Bypass Safe instruction. This\noption is only to enable the extension at the assembler\nlevel and does not affect code generation. This option is\nenabled by default for\n<b>-march=armv8.5-a</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>predres</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nArmv8-a Execution and Data Prediction Restriction\ninstructions. This option is only to enable the extension at\nthe assembler level and does not affect code generation.\nThis option is enabled by default for\n<b>-march=armv8.5-a</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>sve2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nArmv8-a Scalable Vector Extension 2. This also enables</big>\nSVE <big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>sve2-bitperm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable</big>\nSVE2 <big>bitperm instructions. This also enables</big> SVE2\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>sve2-sm4</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable</big>\nSVE2 <big>sm4 instructions. This also enables</big> SVE2\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>sve2-aes</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable</big>\nSVE2 <big>aes instructions. This also enables</big> SVE2\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>sve2-sha3</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable</big>\nSVE2 <big>sha3 instructions. This also enables</big> SVE2\n<big>instructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>tme</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"65%\">\n\n\n<p><big><big><big>Enable the Transactional Memory\nExtension.</big></big></big></p> </td>\n<td width=\"18%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>i8mm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable 8-bit\nInteger Matrix Multiply instructions. This also enables\nAdvanced</big> SIMD <big>and floating-point instructions.\nThis option is enabled by default for\n<b>-march=armv8.6-a</b>. Use of this option with\narchitectures prior to Armv8.2-A is not\nsupported.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>f32mm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable 32-bit\nFloating point Matrix Multiply instructions. This also\nenables</big> SVE <big>instructions. Use of this option with\narchitectures prior to Armv8.2-A is not\nsupported.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>f64mm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable 64-bit\nFloating point Matrix Multiply instructions. This also\nenables</big> SVE <big>instructions. Use of this option with\narchitectures prior to Armv8.2-A is not\nsupported.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>bf16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable brain\nhalf-precision floating-point instructions. This also\nenables Advanced</big> SIMD <big>and floating-point\ninstructions. This option is enabled by default for\n<b>-march=armv8.6-a</b>. Use of this option with\narchitectures prior to Armv8.2-A is not\nsupported.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>flagm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the Flag\nManipulation instructions Extension.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>pauth</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nPointer Authentication Extension.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Feature\n<b>crypto</b> implies <b>aes</b>, <b>sha2</b>, and\n<b>simd</b>, which implies <b>fp</b>. Conversely,\n<b>nofp</b> implies <b>nosimd</b>, which implies\n<b>nocrypto</b>, <b>noaes</b> and\n<b>nosha2</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Adapteva\nEpiphany Options</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for Adapteva Epiphany: <b><br>\n-mhalf-reg-file</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t\nallocate any register in the range\n&quot;r32&quot;...&quot;r63&quot;. That allows code to run\non hardware variants that lack these\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprefer-short-insn-regs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Preferentially\nallocate registers that allow short instruction generation.\nThis can result in increased instruction count, so this may\neither reduce or increase overall code\nsize.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-cost=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the cost of\nbranches to roughly <i>num</i> &quot;simple&quot;\ninstructions. This cost is only a heuristic and is not\nguaranteed to produce consistent results across\nreleases.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmove</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\ngeneration of conditional moves.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnops=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit <i>num</i>\nNOPs before every other generated\ninstruction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-soft-cmpsf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>For\nsingle-precision floating-point comparisons, emit an\n&quot;fsub&quot; instruction and test the flags. This is\nfaster than a software comparison, but can get incorrect\nresults in the presence of NaNs, or when two different small\nnumbers are compared such that their difference is\ncalculated as zero. The default is <b>-msoft-cmpsf</b>,\nwhich uses slower, but IEEE-compliant, software\ncomparisons.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-offset=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the offset\nbetween the top of the stack and the stack pointer. E.g., a\nvalue of 8 means that the eight bytes in the range\n&quot;sp+0...sp+7&quot; can be used by leaf functions\nwithout stack allocation. Values other than <b>8</b> or\n<b>16</b> are untested and unlikely to work. Note also that\nthis option changes the</big> ABI <big>; compiling a program\nwith a different stack offset than the libraries have been\ncompiled with generally does not work. This option can be\nuseful if you want to evaluate if a different stack offset\nwould give you better code, but to actually use a different\nstack offset to build working programs, it is recommended to\nconfigure the toolchain with the appropriate\n<b>--with-stack-offset=</b><i>num</i>\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-round-nearest</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make the\nscheduler assume that the rounding mode has been set to\ntruncating. The default is\n<b>-mround-nearest</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If not otherwise\nspecified by an attribute, assume all calls might be beyond\nthe offset range of the &quot;b&quot; / &quot;bl&quot;\ninstructions, and therefore load the function address into a\nregister before performing a (otherwise direct) call. This\nis the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshort-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If not otherwise\nspecified by an attribute, assume all direct calls are in\nthe range of the &quot;b&quot; / &quot;bl&quot;\ninstructions, so use these instructions for direct calls.\nThe default is <b>-mlong-calls</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmall16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume addresses\ncan be loaded as 16-bit unsigned values. This does not apply\nto function addresses for which <b>-mlong-calls</b>\nsemantics are in effect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfp-mode=</b><i>mode</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\nprevailing mode of the floating-point unit. This determines\nthe floating-point mode that is provided and expected at\nfunction call and return time. Making this mode match the\nmode you predominantly need at function start can make your\nprograms smaller and faster by avoiding unnecessary mode\nswitches.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><i>mode</i>\ncan be set to one the following values: <b><br>\ncaller</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Any mode at\nfunction entry is valid, and retained or restored when the\nfunction returns, and when it calls other functions. This\nmode is useful for compiling libraries or other compilation\nunits you might want to incorporate into different programs\nwith different prevailing</big> FPU <big>modes, and the\nconvenience of being able to use a single object file\noutweighs the size and speed overhead for any extra mode\nswitching that might be needed, compared with what would be\nneeded with a more specific choice of prevailing</big> FPU\n<big>mode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>truncate</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This is the mode\nused for floating-point calculations with truncating (i.e.\nround towards zero) rounding mode. That includes conversion\nfrom floating point to integer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>round-nearest</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This is the mode\nused for floating-point calculations with\nround-to-nearest-or-even rounding\nmode.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>int</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>This is the mode used to perform integer\ncalculations in the</big> FPU, <big>e.g. integer multiply,\nor integer multiply-and-accumulate.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-mfp-mode=caller</b></big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-split-lohi\n<br>\n-mno-postinc <br>\n-mno-postmodify</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Code generation\ntweaks that disable, respectively, splitting of 32-bit\nloads, generation of post-increment addresses, and\ngeneration of post-modify addresses. The defaults are\n<b>msplit-lohi</b>, <b>-mpost-inc</b>, and\n<b>-mpost-modify</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnovect-double</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Change the\npreferred</big> SIMD <big>mode to SImode. The default is\n<b>-mvect-double</b>, which uses DImode as preferred</big>\nSIMD <big>mode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-max-vect-align=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The maximum\nalignment for</big> SIMD <big>vector mode types. <i>num</i>\nmay be 4 or 8. The default is 8. Note that this is an</big>\nABI <big>change, even though many library function\ninterfaces are unaffected if they don&rsquo;t use</big> SIMD\n<big>vector modes in places that affect size and/or\nalignment of relevant types.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msplit-vecmove-early</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Split vector\nmoves into single word moves before reload. In theory this\ncan give better register allocation, but so far the reverse\nseems to be generally the case.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m1reg-</b><i>reg</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify a\nregister to hold the constant -1, which makes loading small\nnegative constants and certain bitmasks faster. Allowable\nvalues for <i>reg</i> are <b>r43</b> and <b>r63</b>, which\nspecify use of that register as a fixed register, and\n<b>none</b>, which means that no register is used for this\npurpose. The default is\n<b>-m1reg-none</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>AMD\nGCN <big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined specifically for the</big> AMD GCN\n<big>port. <b><br>\n-march=</b><i>gpu</i> <b><br>\n-mtune=</b><i>gpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set architecture\ntype or tuning for <i>gpu</i>. Supported values for\n<i>gpu</i> are <b><br>\nfiji</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> GCN3 <big>Fiji devices\n(gfx803).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>gfx900</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> GCN5 <big>Vega 10 devices\n(gfx900).</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>gfx906</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> GCN5 <big>Vega 20 devices\n(gfx906).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msram-ecc=on\n<br>\n-msram-ecc=off <br>\n-msram-ecc=any</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile binaries\nsuitable for devices with the SRAM-ECC feature enabled,\ndisabled, or either mode. This feature can be enabled\nper-process on some devices. The compiled code must match\nthe device mode. The default is <b>any</b>, for devices that\nsupport it.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-size=</b><i>bytes</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify how many\n<i>bytes</i> of stack space will be requested for each</big>\nGPU <big>thread (wave-front). Beware that there may be many\nthreads and limited memory available. The size of the stack\nallocation may also have an impact on run-time performance.\nThe default is 32KB when using OpenACC or OpenMP, and 1MB\notherwise.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxnack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile binaries\nsuitable for devices with the</big> XNACK <big>feature\nenabled. Some devices always require</big> XNACK <big>and\nsome allow the user to configure</big> XNACK. <big>The\ncompiled code must match the device mode. The default is\n<b>-mno-xnack</b>. At present this option is a placeholder\nfor support that is not yet\nimplemented.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>ARC\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options control the architecture variant for which\ncode is being compiled: <b><br>\n-mbarrel-shifter</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\ninstructions supported by barrel shifter. This is the\ndefault unless <b>-mcpu=ARC601</b> or <b>-mcpu=ARCEM</b> is\nin effect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mjli-always</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force to call a\nfunction using jli_s instruction. This option is valid only\nfor ARCv2 architecture.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set architecture\ntype, register usage, and instruction scheduling parameters\nfor <i>cpu</i>. There are also shortcut alias options\navailable for backward compatibility and convenience.\nSupported values for <i>cpu</i> are <b><br>\narc600</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC600. <big>Aliases: <b>-mA6</b>,\n<b>-mARC600</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arc601</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC601. <big>Alias:\n<b>-mARC601</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arc700</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC700. <big>Aliases: <b>-mA7</b>,\n<b>-mARC700</b>. This is the default when configured with\n<b>--with-cpu=arc700</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arcem</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC EM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>archs</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC HS.</big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><b><big>em</big></b></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Compile for</big> ARC EM CPU <big>with no\nhardware extensions.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>em4</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Compile for</big> ARC EM4\nCPU.</big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>em4_dmips</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC EM4 DMIPS CPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>em4_fpus</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC EM4 DMIPS CPU <big>with the single-precision\nfloating-point extension.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>em4_fpuda</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC EM4 DMIPS CPU <big>with single-precision\nfloating-point and double assist\ninstructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>hs</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Compile for</big> ARC HS CPU <big>with no\nhardware extensions except the atomic\ninstructions.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hs34</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC HS34 CPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>hs38</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC HS38 CPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>hs38_linux</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC HS38 CPU <big>with all hardware extensions\non.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arc600_norm</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC 600 CPU <big>with &quot;norm&quot;\ninstructions enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arc600_mul32x16</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC 600 CPU <big>with &quot;norm&quot; and\n32x16-bit multiply instructions\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arc600_mul64</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC 600 CPU <big>with &quot;norm&quot; and\n&quot;mul64&quot;-family instructions\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arc601_norm</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC 601 CPU <big>with &quot;norm&quot;\ninstructions enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arc601_mul32x16</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC 601 CPU <big>with &quot;norm&quot; and\n32x16-bit multiply instructions\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>arc601_mul64</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC 601 CPU <big>with &quot;norm&quot; and\n&quot;mul64&quot;-family instructions\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nps400</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC 700 <big>on</big> NPS400\n<big>chip.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>em_mini</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Compile\nfor</big> ARC EM <big>minimalist configuration featuring\nreduced register set.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdpfp <br>\n-mdpfp-compact</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\ndouble-precision</big> FPX <big>instructions, tuned for the\ncompact implementation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdpfp-fast</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\ndouble-precision</big> FPX <big>instructions, tuned for the\nfast implementation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-dpfp-lrsr</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\n&quot;lr&quot; and &quot;sr&quot; instructions from\nusing</big> FPX <big>extension aux\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mea</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nextended arithmetic instructions. Currently only\n&quot;divaw&quot;, &quot;adds&quot;, &quot;subs&quot;, and\n&quot;sat16&quot; are supported. Only valid for\n<b>-mcpu=ARC700</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-mpy</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\n&quot;mpy&quot;-family instructions for</big> ARC700.\n<big>This option is deprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmul32x16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\n32x16-bit multiply and multiply-accumulate\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmul64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\n&quot;mul64&quot; and &quot;mulu64&quot; instructions. Only\nvalid for <b>-mcpu=ARC600</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnorm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\n&quot;norm&quot; instructions. This is the default if\n<b>-mcpu=ARC700</b> is in effect.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mspfp <br>\n-mspfp-compact</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nsingle-precision</big> FPX <big>instructions, tuned for the\ncompact implementation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mspfp-fast</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nsingle-precision</big> FPX <big>instructions, tuned for the\nfast implementation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msimd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of</big> ARC SIMD <big>instructions via\ntarget-specific builtins. Only valid for\n<b>-mcpu=ARC700</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nignored; it is provided for compatibility purposes only.\nSoftware floating-point code is emitted by default, and this\ndefault can overridden by</big> FPX <big>options;\n<b>-mspfp</b>, <b>-mspfp-compact</b>, or <b>-mspfp-fast</b>\nfor single precision, and <b>-mdpfp</b>,\n<b>-mdpfp-compact</b>, or <b>-mdpfp-fast</b> for double\nprecision.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mswap</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\n&quot;swap&quot; instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-matomic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This enables use\nof the locked load/store conditional extension to implement\natomic memory built-in functions. Not available for</big>\nARC <big>6xx or</big> ARC EM\n<big>cores.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdiv-rem</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\n&quot;div&quot; and &quot;rem&quot; instructions for ARCv2\ncores.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcode-density</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable code\ndensity instructions for</big> ARC EM. <big>This option is\non by default for</big> ARC HS.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mll64</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable double\nload/store operations for</big> ARC HS\n<big>cores.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtp-regno=</b><i>regno</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify thread\npointer register number.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmpy-option=</b><i>multo</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile ARCv2\ncode with a multiplier design option. You can specify the\noption using either a string or numeric value for\n<i>multo</i>. <b>wlh1</b> is the default value. The\nrecognized values are:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>0</b></big></big></big></p></td>\n<td width=\"82%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>none</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>No multiplier\navailable.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>1</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>w</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>16x16 multiplier, fully pipelined. The\nfollowing instructions are enabled: &quot;mpyw&quot; and\n&quot;mpyuw&quot;.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>2</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>wlh1</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>32x32\nmultiplier, fully pipelined (1 stage). The following\ninstructions are additionally enabled: &quot;mpy&quot;,\n&quot;mpyu&quot;, &quot;mpym&quot;, &quot;mpymu&quot;, and\n&quot;mpy_s&quot;.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>3</b></big></big></big></p></td>\n<td width=\"82%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>wlh2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>32x32\nmultiplier, fully pipelined (2 stages). The following\ninstructions are additionally enabled: &quot;mpy&quot;,\n&quot;mpyu&quot;, &quot;mpym&quot;, &quot;mpymu&quot;, and\n&quot;mpy_s&quot;.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>4</b></big></big></big></p></td>\n<td width=\"82%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>wlh3</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Two 16x16\nmultipliers, blocking, sequential. The following\ninstructions are additionally enabled: &quot;mpy&quot;,\n&quot;mpyu&quot;, &quot;mpym&quot;, &quot;mpymu&quot;, and\n&quot;mpy_s&quot;.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>5</b></big></big></big></p></td>\n<td width=\"82%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>wlh4</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>One 16x16\nmultiplier, blocking, sequential. The following instructions\nare additionally enabled: &quot;mpy&quot;, &quot;mpyu&quot;,\n&quot;mpym&quot;, &quot;mpymu&quot;, and\n&quot;mpy_s&quot;.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>6</b></big></big></big></p></td>\n<td width=\"82%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>wlh5</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>One 32x4\nmultiplier, blocking, sequential. The following instructions\nare additionally enabled: &quot;mpy&quot;, &quot;mpyu&quot;,\n&quot;mpym&quot;, &quot;mpymu&quot;, and\n&quot;mpy_s&quot;.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>7</b></big></big></big></p></td>\n<td width=\"82%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>plus_dmpy</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>ARC HS SIMD\n<big>support.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>8</b></big></big></big></p></td>\n<td width=\"82%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>plus_macd</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>ARC HS SIMD\n<big>support.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>9</b></big></big></big></p></td>\n<td width=\"82%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>plus_qmacw</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>ARC HS SIMD\n<big>support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is only available for ARCv2\ncores.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfpu=</b><i>fpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables support\nfor specific floating-point hardware extensions for ARCv2\ncores. Supported values for <i>fpu</i> are: <b><br>\nfpus</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor single-precision floating-point hardware\nextensions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fpud</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor double-precision floating-point hardware extensions. The\nsingle-precision floating-point extension is also enabled.\nNot available for</big> ARC EM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>fpuda</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor double-precision floating-point hardware extensions\nusing double-precision assist instructions. The\nsingle-precision floating-point extension is also enabled.\nThis option is only available for</big> ARC\nEM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>fpuda_div</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor double-precision floating-point hardware extensions\nusing double-precision assist instructions. The\nsingle-precision floating-point, square-root, and divide\nextensions are also enabled. This option is only available\nfor</big> ARC EM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>fpuda_fma</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor double-precision floating-point hardware extensions\nusing double-precision assist instructions. The\nsingle-precision floating-point and fused multiply and add\nhardware extensions are also enabled. This option is only\navailable for</big> ARC EM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>fpuda_all</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor double-precision floating-point hardware extensions\nusing double-precision assist instructions. All\nsingle-precision floating-point hardware extensions are also\nenabled. This option is only available for</big> ARC\nEM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>fpus_div</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor single-precision floating-point, square-root and divide\nhardware extensions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fpud_div</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor double-precision floating-point, square-root and divide\nhardware extensions. This option includes option\n<b>fpus_div</b>. Not available for</big> ARC\nEM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>fpus_fma</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor single-precision floating-point and fused multiply and\nadd hardware extensions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fpud_fma</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor double-precision floating-point and fused multiply and\nadd hardware extensions. This option includes option\n<b>fpus_fma</b>. Not available for</big> ARC\nEM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>fpus_all</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor all single-precision floating-point hardware\nextensions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fpud_all</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables support\nfor all single- and double-precision floating-point hardware\nextensions. Not available for</big> ARC EM.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mirq-ctrl-saved=</big></b><big><i>register-range</i><b>,</b>\n<i>blink</i><b>,</b> <i>lp_count</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies\ngeneral-purposes registers that the processor automatically\nsaves/restores on interrupt entry and exit.\n<i>register-range</i> is specified as two registers\nseparated by a dash. The register range always starts with\n&quot;r0&quot;, the upper limit is &quot;fp&quot; register.\n<i>blink</i> and <i>lp_count</i> are optional. This option\nis only valid for</big> ARC EM <big>and</big> ARC HS\n<big>cores.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrgf-banked-regs=</b><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nnumber of registers replicated in second register bank on\nentry to fast interrupt. Fast interrupts are interrupts with\nthe highest priority level P0. These interrupts save\nonly</big> PC <big>and</big> STATUS32 <big>registers to\navoid memory transactions during interrupt entry and exit\nsequences. Use this option when you are using fast\ninterrupts in an</big> ARC V2 <big>family processor.\nPermitted values are 4, 8, 16, and 32.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlpc-width=</b><i>width</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\nwidth of the &quot;lp_count&quot; register. Valid values for\n<i>width</i> are 8, 16, 20, 24, 28 and 32 bits. The default\nwidth is fixed to 32 bits. If the width is less than 32, the\ncompiler does not attempt to transform loops in your program\nto use the zero-delay loop mechanism unless it is known that\nthe &quot;lp_count&quot; register can hold the required\nloop-counter value. Depending on the width specified, the\ncompiler and run-time library might continue to use the loop\nmechanism for various needs. This option defines macro\n&quot;__ARC_LPC_WIDTH__&quot; with the value of\n<i>width</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrf16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs the compiler to generate code for a 16-entry\nregister file. This option defines the\n&quot;__ARC_RF16__&quot; preprocessor\nmacro.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-index</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable use of\n&quot;bi&quot; or &quot;bih&quot; instructions to implement\njump tables.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options are passed through to the assembler, and\nalso define preprocessor macro symbols. <b><br>\n-mdsp-packa</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler to enable the</big> DSP <big>Pack A\nextensions. Also sets the preprocessor symbol\n&quot;__Xdsp_packa&quot;. This option is\ndeprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdvbf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler to enable the dual Viterbi butterfly\nextension. Also sets the preprocessor symbol\n&quot;__Xdvbf&quot;. This option is\ndeprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlock</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler to enable the locked load/store conditional\nextension. Also sets the preprocessor symbol\n&quot;__Xlock&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmac-d16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler. Also sets the preprocessor symbol\n&quot;__Xxmac_d16&quot;. This option is\ndeprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmac-24</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler. Also sets the preprocessor symbol\n&quot;__Xxmac_24&quot;. This option is\ndeprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrtsc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler to enable the 64-bit time-stamp counter\nextension instruction. Also sets the preprocessor symbol\n&quot;__Xrtsc&quot;. This option is\ndeprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mswape</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler to enable the swap byte ordering extension\ninstruction. Also sets the preprocessor symbol\n&quot;__Xswape&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtelephony</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler to enable dual- and single-operand\ninstructions for telephony. Also sets the preprocessor\nsymbol &quot;__Xtelephony&quot;. This option is\ndeprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxy</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed down to\nthe assembler to enable the</big> XY <big>memory extension.\nAlso sets the preprocessor symbol\n&quot;__Xxy&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options control how the assembly code is\nannotated: <b><br>\n-misize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Annotate\nassembler instructions with estimated\naddresses.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mannotate-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Explain what\nalignment considerations lead to the decision to make an\ninstruction short or long.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options are passed through to the linker: <b><br>\n-marclinux</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed through\nto the linker, to specify use of the &quot;arclinux&quot;\nemulation. This option is enabled by default in tool chains\nbuilt for &quot;arc-linux-uclibc&quot; and\n&quot;arceb-linux-uclibc&quot; targets when profiling is not\nrequested.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-marclinux_prof</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Passed through\nto the linker, to specify use of the\n&quot;arclinux_prof&quot; emulation. This option is enabled\nby default in tool chains built for\n&quot;arc-linux-uclibc&quot; and\n&quot;arceb-linux-uclibc&quot; targets when profiling is\nrequested.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options control the semantics of generated code:\n<b><br>\n-mlong-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate calls\nas register indirect calls, thus providing access to the\nfull 32-bit address range.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmedium-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t use\nless than 25-bit addressing range for calls, which is the\noffset available for an unconditional branch-and-link\ninstruction. Conditional execution of function calls is\nsuppressed, to allow use of the 25-bit range, rather than\nthe 21-bit range with conditional branch-and-link. This is\nthe default for tool chains built for\n&quot;arc-linux-uclibc&quot; and\n&quot;arceb-linux-uclibc&quot;\ntargets.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-G</b>\n<i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put definitions\nof externally-visible data in a small data section if that\ndata is no bigger than <i>num</i> bytes. The default value\nof <i>num</i> is 4 for any</big> ARC <big>configuration, or\n8 when we have double load/store\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\nsdata references. This is the default for tool chains built\nfor &quot;arc-linux-uclibc&quot; and\n&quot;arceb-linux-uclibc&quot;\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvolatile-cache</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use ordinarily\ncached memory accesses for volatile references. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-volatile-cache</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable cache\nbypass for volatile references.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options fine tune code generation: <b><br>\n-malign-call</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do alignment\noptimizations for call instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mauto-modify-reg</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof pre/post modify with register\ndisplacement.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbbit-peephole</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable bbit\npeephole2.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-brcc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ndisables a target-specific pass in <i>arc_reorg</i> to\ngenerate compare-and-branch (&quot;br<i>cc</i>&quot;)\ninstructions. It has no effect on generation of these\ninstructions driven by the combiner\npass.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcase-vector-pcrel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use PC-relative\nswitch case tables to enable case table shortening. This is\nthe default for <b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcompact-casesi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable compact\n&quot;casesi&quot; pattern. This is the default for\n<b>-Os</b>, and only available for ARCv1 cores. This option\nis deprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-cond-exec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable the\nARCompact-specific pass to generate conditional execution\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Due\nto delay slot scheduling and interactions between operand\nnumbers, literal sizes, instruction lengths, and the support\nfor conditional execution, the target-independent pass to\ngenerate conditional execution is often lacking, so\nthe</big> ARC <big>port has kept a special pass around that\ntries to find more conditional execution generation\nopportunities after register allocation, branch shortening,\nand delay slot scheduling have been done. This pass\ngenerally, but not always, improves performance and code\nsize, at the cost of extra compilation time, which is why\nthere is an option to switch it off. If you have a problem\nwith call instructions exceeding their allowable offset\nrange because they are conditionalized, you should consider\nusing <b>-mmedium-calls</b> instead.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mearly-cbranchsi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\npre-reload use of the &quot;cbranchsi&quot;\npattern.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mexpand-adddi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Expand\n&quot;adddi3&quot; and &quot;subdi3&quot; at</big> RTL\n<big>generation time into &quot;add.f&quot;, &quot;adc&quot;\netc. This option is deprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mindexed-loads</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof indexed loads. This can be problematic because some\noptimizers then assume that indexed stores exist, which is\nnot the case.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlra</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable Local\nRegister Allocation. This is still experimental for</big>\nARC, <big>so by default the compiler uses standard reload\n(i.e. <b>-mno-lra</b>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlra-priority-none</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t\nindicate any priority for target\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlra-priority-compact</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Indicate target\nregister priority for r0..r3 /\nr12..r15.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlra-priority-noncompact</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Reduce target\nregister priority for r0..r3 /\nr12..r15.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmillicode</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When optimizing\nfor size (using <b>-Os</b>), prologues and epilogues that\nhave to save or restore a large number of registers are\noften shortened by using call to a special function in\nlibgcc; this is referred to as a <i>millicode</i> call. As\nthese calls can pose performance issues, and/or cause\nlinking issues when linking in a nonstandard way, this\noption is provided to turn on or off millicode call\ngeneration.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcode-density-frame</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenable the compiler to emit &quot;enter&quot; and\n&quot;leave&quot; instructions. These instructions are only\nvalid for CPUs with code-density\nfeature.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmixed-code</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tweak register\nallocation to help 16-bit instruction generation. This\ngenerally has the effect of decreasing the average\ninstruction size while increasing the instruction\ncount.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mq-class</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Ths option is\ndeprecated. Enable <b>q</b> instruction alternatives. This\nis the default for <b>-Os</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mRcq</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\n<b>Rcq</b> constraint handling. Most short code generation\ndepends on this. This is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mRcw</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\n<b>Rcw</b> constraint handling. Most ccfsm condexec mostly\ndepends on this. This is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msize-level=</b><i>level</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Fine-tune size\noptimization with regards to instruction lengths and\nalignment. The recognized values for <i>level</i>\nare:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>0</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>No size optimization. This level is\ndeprecated and treated like <b>1</b>.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>1</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Short instructions are used\nopportunistically.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>2</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>In addition, alignment of loops and of\ncode after barriers are dropped.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>3</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>In addition, optional data alignment is\ndropped, and the option <b>Os</b> is\nenabled.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\ndefaults to <b>3</b> when <b>-Os</b> is in effect.\nOtherwise, the behavior when this is not set is equivalent\nto level <b>1</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set instruction\nscheduling parameters for <i>cpu</i>, overriding any implied\nby <b>-mcpu=</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Supported\nvalues for <i>cpu</i> are</big> <b><br>\nARC600</b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Tune for</big>\nARC600 CPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b>ARC601</b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Tune for</big>\nARC601 CPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b>ARC700</b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Tune for</big>\nARC700 CPU <big>with standard multiplier\nblock.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ARC700-xmac</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Tune for</big>\nARC700 CPU <big>with</big> XMAC\n<big>block.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b>ARC725D</b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Tune for</big>\nARC725D CPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b>ARC750D</b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Tune for</big>\nARC750D CPU.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mmultcost=</big></b><big><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Cost to assume\nfor a multiply instruction, with <b>4</b> being equal to a\nnormal instruction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-munalign-prob-threshold=</b><i>probability</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set probability\nthreshold for unaligning branches. When tuning for</big>\n<b>ARC700</b> <big>and optimizing for speed, branches\nwithout filled delay slot are preferably emitted unaligned\nand long, unless profiling indicates that the probability\nfor the branch to be taken is below <i>probability</i>. The\ndefault is (</big> REG_BR_PROB_BASE/2 <big>), i.e.\n5000.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nfollowing options are maintained for backward compatibility,\nbut are now deprecated and will be removed in a future\nrelease: <b><br>\n-margonaut</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Obsolete</big>\nFPX.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mbig-endian</big></b></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><b><big>-EB</big></b></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Compile code for big-endian targets. Use\nof these options is now deprecated. Big-endian code is\nsupported by configuring</big> GCC <big>to build\n&quot;arceb-elf32&quot; and &quot;arceb-linux-uclibc&quot;\ntargets, for which big endian is the\ndefault.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-EL</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Compile code for little-endian targets.\nUse of these options is now deprecated. Little-endian code\nis supported by configuring</big> GCC <big>to build\n&quot;arc-elf32&quot; and &quot;arc-linux-uclibc&quot;\ntargets, for which little endian is the\ndefault.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbarrel_shifter</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mbarrel-shifter</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdpfp_compact</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mdpfp-compact</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdpfp_fast</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mdpfp-fast</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdsp_packa</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mdsp-packa</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mEA</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mea</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmac_24</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mmac-24</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmac_d16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mmac-d16</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mspfp_compact</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mspfp-compact</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mspfp_fast</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mspfp-fast</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Values\n<b>arc600</b>, <b>arc601</b>, <b>arc700</b> and\n<b>arc700-xmac</b> for <i>cpu</i> are replaced by</big>\n<b>ARC600</b> <big>,</big> <b>ARC601</b> <big>,</big>\n<b>ARC700</b> <big>and <b>ARC700-xmac</b>\nrespectively.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-multcost=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Replaced by\n<b>-mmultcost</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>ARM\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the</big> ARM <big>port:\n<b><br>\n-mabi=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the specified</big> ABI. <big>Permissible values are:\n<b>apcs-gnu</b>, <b>atpcs</b>, <b>aapcs</b>,\n<b>aapcs-linux</b> and <b>iwmmxt</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mapcs-frame</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate a stack\nframe that is compliant with the</big> ARM <big>Procedure\nCall Standard for all functions, even if this is not\nstrictly necessary for correct execution of the code.\nSpecifying <b>-fomit-frame-pointer</b> with this option\ncauses the stack frames not to be generated for leaf\nfunctions. The default is <b>-mno-apcs-frame</b>. This\noption is deprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mapcs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This is a\nsynonym for <b>-mapcs-frame</b> and is\ndeprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mthumb-interwork</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat supports calling between the</big> ARM <big>and Thumb\ninstruction sets. Without this option, on pre-v5\narchitectures, the two instruction sets cannot be reliably\nused inside one program. The default is\n<b>-mno-thumb-interwork</b>, since slightly larger code is\ngenerated when <b>-mthumb-interwork</b> is specified.\nIn</big> AAPCS <big>configurations this option is\nmeaningless.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sched-prolog</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Prevent the\nreordering of instructions in the function prologue, or the\nmerging of those instruction with the instructions in the\nfunction&rsquo;s body. This means that all functions start\nwith a recognizable set of instructions (or in fact one of a\nchoice from a small set of different function prologues),\nand this information can be used to locate the start of\nfunctions inside an executable piece of code. The default is\n<b>-msched-prolog</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfloat-abi=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies which\nfloating-point</big> ABI <big>to use. Permissible values\nare: <b>soft</b>, <b>softfp</b> and\n<b>hard</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Specifying\n<b>soft</b> causes</big> GCC <big>to generate output\ncontaining library calls for floating-point operations.\n<b>softfp</b> allows the generation of code using hardware\nfloating-point instructions, but still uses the soft-float\ncalling conventions. <b>hard</b> allows generation of\nfloating-point instructions and uses FPU-specific calling\nconventions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault depends on the specific target configuration. Note\nthat the hard-float and soft-float ABIs are not\nlink-compatible; you must compile your entire program with\nthe same</big> ABI, <big>and link with a compatible set of\nlibraries.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgeneral-regs-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nwhich uses only the general-purpose registers. This will\nprevent the compiler from using floating-point and\nAdvanced</big> SIMD <big>registers but will not impose any\nrestrictions on the assembler.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a processor running in little-endian mode. This is the\ndefault for all standard\nconfigurations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a processor running in big-endian mode; the default is\nto compile code for a little-endian\nprocessor.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbe8 <br>\n-mbe32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When linking a\nbig-endian image select between</big> BE8 <big>and</big>\nBE32 <big>formats. The option has no effect for\nlittle-endian images and is ignored. The default is\ndependent on the selected target architecture. For ARMv6 and\nlater architectures the default is</big> BE8, <big>for older\narchitectures the default is</big> BE32. BE32 <big>format\nhas been deprecated by</big> ARM.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-march=</big></b><big><i>name</i>[<b>+extension...</b>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This specifies\nthe name of the target</big> ARM <big>architecture.</big>\nGCC <big>uses this name to determine what kind of\ninstructions it can emit when generating assembly code. This\noption can be used in conjunction with or instead of the\n<b>-mcpu=</b> option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Permissible\nnames are: <b>armv4t</b>, <b>armv5t</b>, <b>armv5te</b>,\n<b>armv6</b>, <b>armv6j</b>, <b>armv6k</b>, <b>armv6kz</b>,\n<b>armv6t2</b>, <b>armv6z</b>, <b>armv6zk</b>, <b>armv7</b>,\n<b>armv7-a</b>, <b>armv7ve</b>, <b>armv8-a</b>,\n<b>armv8.1-a</b>, <b>armv8.2-a</b>, <b>armv8.3-a</b>,\n<b>armv8.4-a</b>, <b>armv8.5-a</b>, <b>armv8.6-a</b>,\n<b>armv7-r</b>, <b>armv8-r</b>, <b>armv6-m</b>,\n<b>armv6s-m</b>, <b>armv7-m</b>, <b>armv7e-m</b>,\n<b>armv8-m.base</b>, <b>armv8-m.main</b>,\n<b>armv8.1-m.main</b>, <b>iwmmxt</b> and\n<b>iwmmxt2</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Additionally,\nthe following architectures, which lack support for the\nThumb execution state, are recognized but support is\ndeprecated: <b>armv4</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Many\nof the architectures support extensions. These can be added\nby appending <b>+</b><i>extension</i> to the architecture\nname. Extension options are processed in order and\ncapabilities accumulate. An extension will also enable any\nnecessary base extensions upon which it depends. For\nexample, the <b>+crypto</b> extension will always enable the\n<b>+simd</b> extension. The exception to the additive\nconstruction is for extensions that are prefixed with\n<b>+no...</b>: these extensions disable the specified option\nand any other extensions that may depend on the presence of\nthat extension.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, <b>-march=armv7-a+simd+nofp+vfpv4</b> is equivalent\nto writing <b>-march=armv7-a+vfpv4</b> since the\n<b>+simd</b> option is entirely disabled by the <b>+nofp</b>\noption that follows it.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Most\nextension names are generically named, but have an effect\nthat is dependent upon the architecture to which it is\napplied. For example, the <b>+simd</b> option can be applied\nto both <b>armv7-a</b> and <b>armv8-a</b> architectures, but\nwill enable the original ARMv7-A Advanced</big> SIMD\n<big>(Neon) extensions for <b>armv7-a</b> and the ARMv8-A\nvariant for <b>armv8-a</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ntable below lists the supported extensions for each\narchitecture. Architectures not mentioned do not support any\nextensions. <b><br>\narmv5te <br>\narmv6 <br>\narmv6j <br>\narmv6k <br>\narmv6kz <br>\narmv6t2 <br>\narmv6z <br>\narmv6zk</b></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+fp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>The VFPv2 floating-point instructions.\nThe extension <b>+vfpv2</b> can be used as an alias for this\nextension.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv7</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The common\nsubset of the ARMv7-A, ARMv7-R and ARMv7-M\narchitectures.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+fp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>The VFPv3 floating-point instructions,\nwith 16 double-precision registers. The extension\n<b>+vfpv3-d16</b> can be used as an alias for this\nextension. Note that floating-point is not supported by the\nbase ARMv7-M architecture, but is compatible with both the\nARMv7-A and ARMv7-R architectures.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv7-a</b></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+mp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"46%\">\n\n\n<p><big><big><big>The multiprocessing\nextension.</big></big></big></p> </td>\n<td width=\"25%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+sec</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The security\nextension.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+fp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>The VFPv3 floating-point instructions,\nwith 16 double-precision registers. The extension\n<b>+vfpv3-d16</b> can be used as an alias for this\nextension.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nAdvanced</big> SIMD <big>(Neon) v1 and the VFPv3\nfloating-point instructions. The extensions <b>+neon</b> and\n<b>+neon-vfpv3</b> can be used as aliases for this\nextension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv3\nfloating-point instructions, with 32 double-precision\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3-d16-fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv3\nfloating-point instructions, with 16 double-precision\nregisters and the half-precision floating-point conversion\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3-fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv3\nfloating-point instructions, with 32 double-precision\nregisters and the half-precision floating-point conversion\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv4-d16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv4\nfloating-point instructions, with 16 double-precision\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv4</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv4\nfloating-point instructions, with 32 double-precision\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+neon-fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nAdvanced</big> SIMD <big>(Neon) v1 and the VFPv3\nfloating-point instructions, with the half-precision\nfloating-point conversion operations.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+neon-vfpv4</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nAdvanced</big> SIMD <big>(Neon) v2 and the VFPv4\nfloating-point instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nosimd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nAdvanced</big> SIMD <big>instructions (does not disable\nfloating point).</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point and Advanced</big> SIMD\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv7ve</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The extended\nversion of the ARMv7-A architecture with support for\nvirtualization.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+fp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>The VFPv4 floating-point instructions,\nwith 16 double-precision registers. The extension\n<b>+vfpv4-d16</b> can be used as an alias for this\nextension.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nAdvanced</big> SIMD <big>(Neon) v2 and the VFPv4\nfloating-point instructions. The extension\n<b>+neon-vfpv4</b> can be used as an alias for this\nextension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3-d16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv3\nfloating-point instructions, with 16 double-precision\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv3\nfloating-point instructions, with 32 double-precision\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3-d16-fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv3\nfloating-point instructions, with 16 double-precision\nregisters and the half-precision floating-point conversion\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3-fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv3\nfloating-point instructions, with 32 double-precision\nregisters and the half-precision floating-point conversion\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv4-d16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv4\nfloating-point instructions, with 16 double-precision\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv4</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv4\nfloating-point instructions, with 32 double-precision\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+neon</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nAdvanced</big> SIMD <big>(Neon) v1 and the VFPv3\nfloating-point instructions. The extension\n<b>+neon-vfpv3</b> can be used as an alias for this\nextension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+neon-fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nAdvanced</big> SIMD <big>(Neon) v1 and the VFPv3\nfloating-point instructions, with the half-precision\nfloating-point conversion operations.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nosimd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nAdvanced</big> SIMD <big>instructions (does not disable\nfloating point).</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point and Advanced</big> SIMD\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8-a</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crc</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The Cyclic\nRedundancy Check (</big> CRC <big>)\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The ARMv8-A\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\ncryptographic instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nocrypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\ncryptographic instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point, Advanced</big> SIMD <big>and cryptographic\ninstructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+sb</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"49%\">\n\n\n<p><big><big><big>Speculation Barrier\nInstruction.</big></big></big></p> </td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+predres</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Execution and\nData Prediction Restriction\nInstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8.1-a</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The ARMv8.1-A\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\ncryptographic instructions. This also enables the\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nocrypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\ncryptographic instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point, Advanced</big> SIMD <big>and cryptographic\ninstructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+sb</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"49%\">\n\n\n<p><big><big><big>Speculation Barrier\nInstruction.</big></big></big></p> </td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+predres</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Execution and\nData Prediction Restriction\nInstructions.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8.2-a\n<br>\narmv8.3-a</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nhalf-precision floating-point data processing instructions.\nThis also enables the Advanced</big> SIMD <big>and\nfloating-point instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp16fml</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nhalf-precision floating-point fmla extension. This also\nenables the half-precision floating-point extension and\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The ARMv8.1-A\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\ncryptographic instructions. This also enables the\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+dotprod</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Enable the Dot\nProduct extension. This also enables Advanced</big> SIMD\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nocrypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\ncryptographic extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point, Advanced</big> SIMD <big>and cryptographic\ninstructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+sb</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"49%\">\n\n\n<p><big><big><big>Speculation Barrier\nInstruction.</big></big></big></p> </td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+predres</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Execution and\nData Prediction Restriction\nInstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+i8mm</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>8-bit Integer\nMatrix Multiply instructions. This also enables\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+bf16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Brain\nhalf-precision floating-point instructions. This also\nenables Advanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8.4-a</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nhalf-precision floating-point data processing instructions.\nThis also enables the Advanced</big> SIMD <big>and\nfloating-point instructions as well as the Dot Product\nextension and the half-precision floating-point fmla\nextension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The ARMv8.3-A\nAdvanced</big> SIMD <big>and floating-point instructions as\nwell as the Dot Product extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\ncryptographic instructions. This also enables the\nAdvanced</big> SIMD <big>and floating-point instructions as\nwell as the Dot Product extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nocrypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\ncryptographic extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point, Advanced</big> SIMD <big>and cryptographic\ninstructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+sb</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"49%\">\n\n\n<p><big><big><big>Speculation Barrier\nInstruction.</big></big></big></p> </td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+predres</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Execution and\nData Prediction Restriction\nInstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+i8mm</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>8-bit Integer\nMatrix Multiply instructions. This also enables\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+bf16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Brain\nhalf-precision floating-point instructions. This also\nenables Advanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8.5-a</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nhalf-precision floating-point data processing instructions.\nThis also enables the Advanced</big> SIMD <big>and\nfloating-point instructions as well as the Dot Product\nextension and the half-precision floating-point fmla\nextension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The ARMv8.3-A\nAdvanced</big> SIMD <big>and floating-point instructions as\nwell as the Dot Product extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\ncryptographic instructions. This also enables the\nAdvanced</big> SIMD <big>and floating-point instructions as\nwell as the Dot Product extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nocrypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\ncryptographic extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point, Advanced</big> SIMD <big>and cryptographic\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+i8mm</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>8-bit Integer\nMatrix Multiply instructions. This also enables\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+bf16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Brain\nhalf-precision floating-point instructions. This also\nenables Advanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8.6-a</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nhalf-precision floating-point data processing instructions.\nThis also enables the Advanced</big> SIMD <big>and\nfloating-point instructions as well as the Dot Product\nextension and the half-precision floating-point fmla\nextension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The ARMv8.3-A\nAdvanced</big> SIMD <big>and floating-point instructions as\nwell as the Dot Product extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\ncryptographic instructions. This also enables the\nAdvanced</big> SIMD <big>and floating-point instructions as\nwell as the Dot Product extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nocrypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\ncryptographic extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point, Advanced</big> SIMD <big>and cryptographic\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+i8mm</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>8-bit Integer\nMatrix Multiply instructions. This also enables\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+bf16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Brain\nhalf-precision floating-point instructions. This also\nenables Advanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv7-r</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp.sp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nsingle-precision VFPv3 floating-point instructions. The\nextension <b>+vfpv3xd</b> can be used as an alias for this\nextension.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+fp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>The VFPv3 floating-point instructions\nwith 16 double-precision registers. The extension +vfpv3-d16\ncan be used as an alias for this\nextension.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3xd-d16-fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nsingle-precision VFPv3 floating-point instructions with 16\ndouble-precision registers and the half-precision\nfloating-point conversion operations.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+vfpv3-d16-fp16</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The VFPv3\nfloating-point instructions with 16 double-precision\nregisters and the half-precision floating-point conversion\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point extension.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+idiv</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The ARM-state\ninteger division instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+noidiv</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nARM-state integer division extension.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv7e-m</b></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+fp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>The single-precision VFPv4 floating-point\ninstructions.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fpv5</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nsingle-precision FPv5 floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp.dp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The single- and\ndouble-precision FPv5 floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point extensions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8.1-m.main</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+dsp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The</big> DSP\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+mve</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The M-Profile\nVector Extension (</big> MVE <big>) integer\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+mve.fp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The M-Profile\nVector Extension (</big> MVE <big>) integer and single\nprecision floating-point instructions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+fp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>The single-precision floating-point\ninstructions.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp.dp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The single- and\ndouble-precision floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point extension.</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+cdecp0,\n+cdecp1, ... , +cdecp7</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Enable the\nCustom Datapath Extension (</big> CDE <big>) on selected\ncoprocessors according to the numbers given in the options\nin the range 0 to 7.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8-m.main</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+dsp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The</big> DSP\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nodsp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable\nthe</big> DSP <big>extension.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>+fp</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p><big><big><big>The single-precision floating-point\ninstructions.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp.dp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The single- and\ndouble-precision floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point extension.</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+cdecp0,\n+cdecp1, ... , +cdecp7</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Enable the\nCustom Datapath Extension (</big> CDE <big>) on selected\ncoprocessors according to the numbers given in the options\nin the range 0 to 7.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>armv8-r</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crc</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The Cyclic\nRedundancy Check (</big> CRC <big>)\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+fp.sp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\nsingle-precision FPv5 floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+simd</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The ARMv8-A\nAdvanced</big> SIMD <big>and floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+crypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>The\ncryptographic instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nocrypto</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\ncryptographic instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>Disable the\nfloating-point, Advanced</big> SIMD <big>and cryptographic\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-march=native</b>\ncauses the compiler to auto-detect the architecture of the\nbuild computer. At present, this feature is only supported\non GNU/Linux, and not all architectures are recognized. If\nthe auto-detect is unsuccessful the option has no\neffect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nspecifies the name of the target</big> ARM <big>processor\nfor which</big> GCC <big>should tune the performance of the\ncode. For some</big> ARM <big>implementations better\nperformance can be obtained by using this option.\nPermissible names are: <b>arm7tdmi</b>, <b>arm7tdmi-s</b>,\n<b>arm710t</b>, <b>arm720t</b>, <b>arm740t</b>,\n<b>strongarm</b>, <b>strongarm110</b>, <b>strongarm1100</b>,\n0<b>strongarm1110</b>, <b>arm8</b>, <b>arm810</b>,\n<b>arm9</b>, <b>arm9e</b>, <b>arm920</b>, <b>arm920t</b>,\n<b>arm922t</b>, <b>arm946e-s</b>, <b>arm966e-s</b>,\n<b>arm968e-s</b>, <b>arm926ej-s</b>, <b>arm940t</b>,\n<b>arm9tdmi</b>, <b>arm10tdmi</b>, <b>arm1020t</b>,\n<b>arm1026ej-s</b>, <b>arm10e</b>, <b>arm1020e</b>,\n<b>arm1022e</b>, <b>arm1136j-s</b>, <b>arm1136jf-s</b>,\n<b>mpcore</b>, <b>mpcorenovfp</b>, <b>arm1156t2-s</b>,\n<b>arm1156t2f-s</b>, <b>arm1176jz-s</b>,\n<b>arm1176jzf-s</b>, <b>generic-armv7-a</b>,\n<b>cortex-a5</b>, <b>cortex-a7</b>, <b>cortex-a8</b>,\n<b>cortex-a9</b>, <b>cortex-a12</b>, <b>cortex-a15</b>,\n<b>cortex-a17</b>, <b>cortex-a32</b>, <b>cortex-a35</b>,\n<b>cortex-a53</b>, <b>cortex-a55</b>, <b>cortex-a57</b>,\n<b>cortex-a72</b>, <b>cortex-a73</b>, <b>cortex-a75</b>,\n<b>cortex-a76</b>, <b>cortex-a76ae</b>, <b>cortex-a77</b>,\n<b>cortex-a78</b>, <b>cortex-a78ae</b>, <b>cortex-a78c</b>,\n<b>ares</b>, <b>cortex-r4</b>, <b>cortex-r4f</b>,\n<b>cortex-r5</b>, <b>cortex-r7</b>, <b>cortex-r8</b>,\n<b>cortex-r52</b>, <b>cortex-m0</b>, <b>cortex-m0plus</b>,\n<b>cortex-m1</b>, <b>cortex-m3</b>, <b>cortex-m4</b>,\n<b>cortex-m7</b>, <b>cortex-m23</b>, <b>cortex-m33</b>,\n<b>cortex-m35p</b>, <b>cortex-m55</b>, <b>cortex-x1</b>,\n<b>cortex-m1.small-multiply</b>,\n<b>cortex-m0.small-multiply</b>,\n<b>cortex-m0plus.small-multiply</b>, <b>exynos-m1</b>,\n<b>marvell-pj4</b>, <b>neoverse-n1</b>, <b>neoverse-n2</b>,\n<b>neoverse-v1</b>, <b>xscale</b>, <b>iwmmxt</b>,\n<b>iwmmxt2</b>, <b>ep9312</b>, <b>fa526</b>, <b>fa626</b>,\n<b>fa606te</b>, <b>fa626te</b>, <b>fmp626</b>,\n<b>fa726te</b>, <b>xgene1</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Additionally,\nthis option can specify that</big> GCC <big>should tune the\nperformance of the code for a big.LITTLE system. Permissible\nnames are: <b>cortex-a15.cortex-a7</b>,\n<b>cortex-a17.cortex-a7</b>, <b>cortex-a57.cortex-a53</b>,\n<b>cortex-a72.cortex-a53</b>, <b>cortex-a72.cortex-a35</b>,\n<b>cortex-a73.cortex-a53</b>, <b>cortex-a75.cortex-a55</b>,\n<b>cortex-a76.cortex-a55</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mtune=generic-</b><i>arch</i>\nspecifies that</big> GCC <big>should tune the performance\nfor a blend of processors within architecture <i>arch</i>.\nThe aim is to generate code that run well on the current\nmost popular processors, balancing between optimizations\nthat benefit some CPUs in the range, and avoiding\nperformance pitfalls of other CPUs. The effects of this\noption may change in future</big> GCC <big>versions as</big>\nCPU <big>models come and go.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mtune</b>\npermits the same extension options as <b>-mcpu</b>, but the\nextension options do not affect the tuning of the generated\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mtune=native</b>\ncauses the compiler to auto-detect the</big> CPU <big>of the\nbuild computer. At present, this feature is only supported\non GNU/Linux, and not all architectures are recognized. If\nthe auto-detect is unsuccessful the option has no\neffect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>name</i>[<b>+extension...</b>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This specifies\nthe name of the target</big> ARM <big>processor.</big> GCC\n<big>uses this name to derive the name of the target</big>\nARM <big>architecture (as if specified by <b>-march</b>) and\nthe</big> ARM <big>processor type for which to tune for\nperformance (as if specified by <b>-mtune</b>). Where this\noption is used in conjunction with <b>-march</b> or\n<b>-mtune</b>, those options take precedence over the\nappropriate part of this option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Many\nof the supported CPUs implement optional architectural\nextensions. Where this is so the architectural extensions\nare normally enabled by default. If implementations that\nlack the extension exist, then the extension syntax can be\nused to disable those extensions that have been omitted. For\nfloating-point and Advanced</big> SIMD <big>(Neon)\ninstructions, the settings of the options <b>-mfloat-abi</b>\nand <b>-mfpu</b> must also be considered: floating-point and\nAdvanced</big> SIMD <big>instructions will only be used if\n<b>-mfloat-abi</b> is not set to <b>soft</b>; and any\nsetting of <b>-mfpu</b> other than <b>auto</b> will override\nthe available floating-point and</big> SIMD <big>extension\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, <b>cortex-a9</b> can be found in three major\nconfigurations: integer only, with just a floating-point\nunit or with floating-point and Advanced</big> SIMD.\n<big>The default is to enable all the instructions, but the\nextensions <b>+nosimd</b> and <b>+nofp</b> can be used to\ndisable just the</big> SIMD <big>or both the</big> SIMD\n<big>and floating-point instructions\nrespectively.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Permissible\nnames for this option are the same as those for\n<b>-mtune</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfollowing extension options are common to the listed CPUs:\n<b><br>\n+nodsp</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disable\nthe</big> DSP <big>instructions on <b>cortex-m33</b>,\n<b>cortex-m35p</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>+nofp</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disables the\nfloating-point instructions on <b>arm9e</b>,\n<b>arm946e-s</b>, <b>arm966e-s</b>, <b>arm968e-s</b>,\n<b>arm10e</b>, <b>arm1020e</b>, <b>arm1022e</b>,\n<b>arm926ej-s</b>, <b>arm1026ej-s</b>, <b>cortex-r5</b>,\n<b>cortex-r7</b>, <b>cortex-r8</b>, <b>cortex-m4</b>,\n<b>cortex-m7</b>, <b>cortex-m33</b> and <b>cortex-m35p</b>.\nDisables the floating-point and</big> SIMD <big>instructions\non <b>generic-armv7-a</b>, <b>cortex-a5</b>,\n<b>cortex-a7</b>, <b>cortex-a8</b>, <b>cortex-a9</b>,\n<b>cortex-a12</b>, <b>cortex-a15</b>, <b>cortex-a17</b>,\n<b>cortex-a15.cortex-a7</b>, <b>cortex-a17.cortex-a7</b>,\n<b>cortex-a32</b>, <b>cortex-a35</b>, <b>cortex-a53</b> and\n<b>cortex-a55</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>+nofp.dp</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disables the\ndouble-precision component of the floating-point\ninstructions on <b>cortex-r5</b>, <b>cortex-r7</b>,\n<b>cortex-r8</b>, <b>cortex-r52</b> and\n<b>cortex-m7</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>+nosimd</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disables\nthe</big> SIMD <big>(but not floating-point) instructions on\n<b>generic-armv7-a</b>, <b>cortex-a5</b>, <b>cortex-a7</b>\nand <b>cortex-a9</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>+crypto</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enables the\ncryptographic instructions on <b>cortex-a32</b>,\n<b>cortex-a35</b>, <b>cortex-a53</b>, <b>cortex-a55</b>,\n<b>cortex-a57</b>, <b>cortex-a72</b>, <b>cortex-a73</b>,\n<b>cortex-a75</b>, <b>exynos-m1</b>, <b>xgene1</b>,\n<b>cortex-a57.cortex-a53</b>, <b>cortex-a72.cortex-a53</b>,\n<b>cortex-a73.cortex-a35</b>, <b>cortex-a73.cortex-a53</b>\nand <b>cortex-a75.cortex-a55</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Additionally\nthe <b>generic-armv7-a</b> pseudo target defaults to VFPv3\nwith 16 double-precision registers. It supports the\nfollowing extension options: <b>mp</b>, <b>sec</b>,\n<b>vfpv3-d16</b>, <b>vfpv3</b>, <b>vfpv3-d16-fp16</b>,\n<b>vfpv3-fp16</b>, <b>vfpv4-d16</b>, <b>vfpv4</b>,\n<b>neon</b>, <b>neon-vfpv3</b>, <b>neon-fp16</b>,\n<b>neon-vfpv4</b>. The meanings are the same as for the\nextensions to <b>-march=armv7-a</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcpu=generic-</b><i>arch</i>\nis also permissible, and is equivalent to\n<b>-march=</b><i>arch</i> <b>-mtune=generic-</b><i>arch</i>.\nSee <b>-mtune</b> for more\ninformation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcpu=native</b>\ncauses the compiler to auto-detect the</big> CPU <big>of the\nbuild computer. At present, this feature is only supported\non GNU/Linux, and not all architectures are recognized. If\nthe auto-detect is unsuccessful the option has no\neffect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfpu=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This specifies\nwhat floating-point hardware (or hardware emulation) is\navailable on the target. Permissible names are: <b>auto</b>,\n<b>vfpv2</b>, <b>vfpv3</b>, <b>vfpv3-fp16</b>,\n<b>vfpv3-d16</b>, <b>vfpv3-d16-fp16</b>, <b>vfpv3xd</b>,\n<b>vfpv3xd-fp16</b>, <b>neon-vfpv3</b>, <b>neon-fp16</b>,\n<b>vfpv4</b>, <b>vfpv4-d16</b>, <b>fpv4-sp-d16</b>,\n<b>neon-vfpv4</b>, <b>fpv5-d16</b>, <b>fpv5-sp-d16</b>,\n<b>fp-armv8</b>, <b>neon-fp-armv8</b> and\n<b>crypto-neon-fp-armv8</b>. Note that <b>neon</b> is an\nalias for <b>neon-vfpv3</b> and <b>vfp</b> is an alias for\n<b>vfpv2</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nsetting <b>auto</b> is the default and is special. It causes\nthe compiler to select the floating-point and Advanced</big>\nSIMD <big>instructions based on the settings of <b>-mcpu</b>\nand <b>-march</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthe selected floating-point hardware includes the</big> NEON\n<big>extension (e.g. <b>-mfpu=neon</b>), note that\nfloating-point operations are not generated by</big> GCC\n<big>&rsquo;s auto-vectorization pass unless\n<b>-funsafe-math-optimizations</b> is also specified. This\nis because</big> NEON <big>hardware does not fully implement\nthe</big> IEEE 754 <big>standard for floating-point\narithmetic (in particular denormal values are treated as\nzero), so the use of</big> NEON <big>instructions may lead\nto a loss of precision.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan also set the fpu name at function level by using the\n&quot;target(&quot;fpu=&quot;)&quot; function attributes or\npragmas.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfp16-format=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\nformat of the &quot;__fp16&quot; half-precision\nfloating-point type. Permissible names are <b>none</b>,\n<b>ieee</b>, and <b>alternative</b>; the default is\n<b>none</b>, in which case the &quot;__fp16&quot; type is\nnot defined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstructure-size-boundary=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The sizes of all\nstructures and unions are rounded up to a multiple of the\nnumber of bits set by this option. Permissible values are 8,\n32 and 64. The default value varies for different\ntoolchains. For the</big> COFF <big>targeted toolchain the\ndefault value is 8. A value of 64 is only allowed if the\nunderlying</big> ABI <big>supports it.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Specifying\na larger number can produce faster, more efficient code, but\ncan also increase the size of the program. Different values\nare potentially incompatible. Code compiled with one value\ncannot necessarily expect to work with code or libraries\ncompiled with another value, if they exchange information\nusing structures or unions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is deprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabort-on-noreturn</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate a call\nto the function &quot;abort&quot; at the end of a\n&quot;noreturn&quot; function. It is executed if the\nfunction tries to return.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-calls\n<br>\n-mno-long-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tells the\ncompiler to perform function calls by first loading the\naddress of the function into a register and then performing\na subroutine call on this register. This switch is needed if\nthe target function lies outside of the 64-megabyte\naddressing range of the offset-based version of subroutine\ncall instruction.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Even\nif this switch is enabled, not all function calls are turned\ninto long calls. The heuristic is that static functions,\nfunctions that have the &quot;short_call&quot; attribute,\nfunctions that are inside the scope of a &quot;#pragma\nno_long_calls&quot; directive, and functions whose\ndefinitions have already been compiled within the current\ncompilation unit are not turned into long calls. The\nexceptions to this rule are that weak function definitions,\nfunctions with the &quot;long_call&quot; attribute or the\n&quot;section&quot; attribute, and functions that are within\nthe scope of a &quot;#pragma long_calls&quot; directive are\nalways turned into long calls.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nfeature is not enabled by default. Specifying\n<b>-mno-long-calls</b> restores the default behavior, as\ndoes placing the function calls within the scope of a\n&quot;#pragma long_calls_off&quot; directive. Note these\nswitches have no effect on how the compiler generates code\nto handle function calls via function\npointers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msingle-pic-base</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat the\nregister used for</big> PIC <big>addressing as read-only,\nrather than loading it in the prologue for each function.\nThe runtime system is responsible for initializing this\nregister with an appropriate value before execution\nbegins.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpic-register=</b><i>reg</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\nregister to be used for</big> PIC <big>addressing. For\nstandard</big> PIC <big>base case, the default is any\nsuitable register determined by compiler. For single</big>\nPIC <big>base case, the default is <b>R9</b> if target\nis</big> EABI <big>based or stack-checking is enabled,\notherwise the default is <b>R10</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpic-data-is-text-relative</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that the\ndisplacement between the text and data segments is fixed at\nstatic link time. This permits using PC-relative addressing\noperations to access data known to be in the data segment.\nFor non-VxWorks</big> RTP <big>targets, this option is\nenabled by default. When disabled on such targets, it will\nenable <b>-msingle-pic-base</b> by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpoke-function-name</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Write the name\nof each function into the text section, directly preceding\nthe function prologue. The generated code is similar to\nthis:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>t0\n<br>\n.ascii &quot;arm_poke_function_name&quot;, 0 <br>\n.align <br>\nt1 <br>\n.word 0xff000000 + (t1 - t0) <br>\narm_poke_function_name <br>\nmov ip, sp <br>\nstmfd sp!, {fp, ip, lr, pc} <br>\nsub fp, ip, #4</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nperforming a stack backtrace, code can inspect the value of\n&quot;pc&quot; stored at &quot;fp + 0&quot;. If the trace\nfunction then looks at location &quot;pc - 12&quot; and the\ntop 8 bits are set, then we know that there is a function\nname embedded immediately preceding this location and has\nlength &quot;((pc[-3]) &amp;\n0xff000000)&quot;.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mthumb <br>\n-marm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select between\ngenerating code that executes in</big> ARM <big>and Thumb\nstates. The default for most configurations is to generate\ncode that executes in</big> ARM <big>state, but the default\ncan be changed by configuring</big> GCC <big>with the\n<b>--with-mode=</b><i>state</i> configure\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan also override the</big> ARM <big>and Thumb mode for each\nfunction by using the &quot;target(&quot;thumb&quot;)&quot;\nand &quot;target(&quot;arm&quot;)&quot; function attributes\nor pragmas.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mflip-thumb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Switch ARM/Thumb\nmodes on alternating functions. This option is provided for\nregression testing of mixed Thumb/ARM code generation, and\nis not intended for ordinary use in compiling\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtpcs-frame</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate a stack\nframe that is compliant with the Thumb Procedure Call\nStandard for all non-leaf functions. (A leaf function is one\nthat does not call any other functions.) The default is\n<b>-mno-tpcs-frame</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtpcs-leaf-frame</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate a stack\nframe that is compliant with the Thumb Procedure Call\nStandard for all leaf functions. (A leaf function is one\nthat does not call any other functions.) The default is\n<b>-mno-apcs-leaf-frame</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcallee-super-interworking</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Gives all\nexternally visible functions in the file being compiled\nan</big> ARM <big>instruction set header which switches to\nThumb mode before executing the rest of the function. This\nallows these functions to be called from non-interworking\ncode. This option is not valid in</big> AAPCS\n<big>configurations because interworking is enabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcaller-super-interworking</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allows calls via\nfunction pointers (including virtual functions) to execute\ncorrectly regardless of whether the target code has been\ncompiled for interworking or not. There is a small overhead\nin the cost of executing a function pointer if this option\nis enabled. This option is not valid in</big> AAPCS\n<big>configurations because interworking is enabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtp=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\naccess model for the thread local storage pointer. The valid\nmodels are <b>soft</b>, which generates calls to\n&quot;__aeabi_read_tp&quot;, <b>cp15</b>, which fetches the\nthread pointer from &quot;cp15&quot; directly (supported in\nthe arm6k architecture), and <b>auto</b>, which uses the\nbest available method for the selected processor. The\ndefault setting is <b>auto</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls-dialect=</b><i>dialect</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\ndialect to use for accessing thread local storage. Two\n<i>dialect</i>s are supported---<b>gnu</b> and <b>gnu2</b>.\nThe <b>gnu</b> dialect selects the original</big> GNU\n<big>scheme for supporting local and global dynamic</big>\nTLS <big>models. The <b>gnu2</b> dialect selects the</big>\nGNU <big>descriptor scheme, which provides better\nperformance for shared libraries. The</big> GNU\n<big>descriptor scheme is compatible with the original\nscheme, but does require new assembler, linker and library\nsupport. Initial and local exec</big> TLS <big>models are\nunaffected by this option and always use the original\nscheme.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mword-relocations</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Only generate\nabsolute relocations on word-sized values (i.e.\nR_ARM_ABS32). This is enabled by default on targets\n(uClinux, SymbianOS) where the runtime loader imposes this\nrestriction, and when <b>-fpic</b> or <b>-fPIC</b> is\nspecified. This option conflicts with\n<b>-mslow-flash-data</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-cortex-m3-ldrd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Some Cortex-M3\ncores can cause data corruption when &quot;ldrd&quot;\ninstructions with overlapping destination and base registers\nare used. This option avoids generating these instructions.\nThis option is enabled by default when\n<b>-mcpu=cortex-m3</b> is specified.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-munaligned-access\n<br>\n-mno-unaligned-access</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables (or\ndisables) reading and writing of 16- and 32- bit values from\naddresses that are not 16- or 32- bit aligned. By default\nunaligned access is disabled for all pre-ARMv6, all ARMv6-M\nand for ARMv8-M Baseline architectures, and enabled for all\nother architectures. If unaligned access is not enabled then\nwords in packed data structures are accessed a byte at a\ntime.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\nARM <big>attribute &quot;Tag_CPU_unaligned_access&quot; is\nset in the generated object file to either true or false,\ndepending upon the setting of this option. If unaligned\naccess is enabled then the preprocessor symbol\n&quot;__ARM_FEATURE_UNALIGNED&quot; is also\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mneon-for-64bits</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\ndeprecated and has no effect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mslow-flash-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume loading\ndata from flash is slower than fetching instruction.\nTherefore literal load is minimized for better performance.\nThis option is only supported when compiling for ARMv7\nM-profile and off by default. It conflicts with\n<b>-mword-relocations</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-masm-syntax-unified</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume inline\nassembler is using unified asm syntax. The default is\ncurrently off which implies divided syntax. This option has\nno impact on Thumb2. However, this may change in future\nreleases of</big> GCC. <big>Divided syntax should be\nconsidered deprecated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrestrict-it</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Restricts\ngeneration of</big> IT <big>blocks to conform to the rules\nof ARMv8-A.</big> IT <big>blocks can only contain a single\n16-bit instruction from a select set of instructions. This\noption is on by default for ARMv8-A Thumb\nmode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprint-tune-info</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print</big> CPU\n<big>tuning information as comment in assembler file. This\nis an option used only for regression testing of the\ncompiler and not intended for ordinary use in compiling\ncode. This option is disabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mverbose-cost-dump</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable verbose\ncost model dumping in the debug dump files. This option is\nprovided for use in debugging the\ncompiler.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpure-code</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not allow\nconstant data to be placed in code sections. Additionally,\nwhen compiling for</big> ELF <big>object format give all\ntext sections the</big> ELF <big>processor-specific section\nattribute &quot;SHF_ARM_PURECODE&quot;. This option is only\navailable when generating non-pic code for M-profile\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmse</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate secure\ncode as per the &quot;ARMv8-M Security Extensions:\nRequirements on Development Tools Engineering\nSpecification&quot;, which can be found on\n&lt;<b>https://developer.arm.com/documentation/ecm0359818/latest/</b>&gt;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-cmse-cve-2021-35465</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Mitigate against\na potential security issue with the &quot;VLLDM&quot;\ninstruction in some M-profile devices when using</big> CMSE\n<big>(</big> CVE-2021-365465 <big>). This option is enabled\nby default when the option <b>-mcpu=</b> is used with\n&quot;cortex-m33&quot;, &quot;cortex-m35p&quot; or\n&quot;cortex-m55&quot;. The option\n<b>-mno-fix-cmse-cve-2021-35465</b> can be used to disable\nthe mitigation.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfdpic <br>\n-mno-fdpic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the</big>\nFDPIC ABI, <big>which uses 64-bit function descriptors to\nrepresent pointers to functions. When the compiler is\nconfigured for &quot;arm-*-uclinuxfdpiceabi&quot; targets,\nthis option is on by default and implies <b>-fPIE</b> if\nnone of the PIC/PIE-related options is provided. On other\ntargets, it only enables the FDPIC-specific code generation\nfeatures, and the user should explicitly provide the\nPIC/PIE-related options as needed.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat static linking is not supported because it would still\ninvolve the dynamic linker when the program self-relocates.\nIf such behavior is acceptable, use -static and\n-Wl,-dynamic-linker options.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nopposite <b>-mno-fdpic</b> option is useful (and required)\nto build the Linux kernel using the same\n(&quot;arm-*-uclinuxfdpiceabi&quot;) toolchain as the one\nused to build the userland programs.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>AVR\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for</big> AVR <big>implementations:\n<b><br>\n-mmcu=</b><i>mcu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nAtmel</big> AVR <big>instruction set architectures (</big>\nISA <big>) or</big> MCU <big>type.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault for this option is\n<b>avr2</b>.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>supports the following</big> AVR <big>devices and ISAs:\n<br>\n&quot;avr2&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Classic&quot;\ndevices with up to 8 KiB of program memory. <i>mcu</i> =\n&quot;attiny22&quot;, &quot;attiny26&quot;,\n&quot;at90s2313&quot;, &quot;at90s2323&quot;,\n&quot;at90s2333&quot;, &quot;at90s2343&quot;,\n&quot;at90s4414&quot;, &quot;at90s4433&quot;,\n&quot;at90s4434&quot;, &quot;at90c8534&quot;,\n&quot;at90s8515&quot;,\n&quot;at90s8535&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr25&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Classic&quot;\ndevices with up to 8 KiB of program memory and with the\n&quot;MOVW&quot; instruction. <i>mcu</i> =\n&quot;attiny13&quot;, &quot;attiny13a&quot;,\n&quot;attiny24&quot;, &quot;attiny24a&quot;,\n&quot;attiny25&quot;, &quot;attiny261&quot;,\n&quot;attiny261a&quot;, &quot;attiny2313&quot;,\n&quot;attiny2313a&quot;, &quot;attiny43u&quot;,\n&quot;attiny44&quot;, &quot;attiny44a&quot;,\n&quot;attiny45&quot;, &quot;attiny48&quot;,\n&quot;attiny441&quot;, &quot;attiny461&quot;,\n&quot;attiny461a&quot;, &quot;attiny4313&quot;,\n&quot;attiny84&quot;, &quot;attiny84a&quot;,\n&quot;attiny85&quot;, &quot;attiny87&quot;,\n&quot;attiny88&quot;, &quot;attiny828&quot;,\n&quot;attiny841&quot;, &quot;attiny861&quot;,\n&quot;attiny861a&quot;, &quot;ata5272&quot;,\n&quot;ata6616c&quot;,\n&quot;at86rf401&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr3&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Classic&quot;\ndevices with 16 KiB up to 64 KiB of program memory.\n<i>mcu</i> = &quot;at76c711&quot;,\n&quot;at43usb355&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr31&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Classic&quot;\ndevices with 128 KiB of program memory. <i>mcu</i> =\n&quot;atmega103&quot;,\n&quot;at43usb320&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr35&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Classic&quot;\ndevices with 16 KiB up to 64 KiB of program memory and with\nthe &quot;MOVW&quot; instruction. <i>mcu</i> =\n&quot;attiny167&quot;, &quot;attiny1634&quot;,\n&quot;atmega8u2&quot;, &quot;atmega16u2&quot;,\n&quot;atmega32u2&quot;, &quot;ata5505&quot;,\n&quot;ata6617c&quot;, &quot;ata664251&quot;,\n&quot;at90usb82&quot;,\n&quot;at90usb162&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr4&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Enhanced&quot;\ndevices with up to 8 KiB of program memory. <i>mcu</i> =\n&quot;atmega48&quot;, &quot;atmega48a&quot;,\n&quot;atmega48p&quot;, &quot;atmega48pa&quot;,\n&quot;atmega48pb&quot;, &quot;atmega8&quot;,\n&quot;atmega8a&quot;, &quot;atmega8hva&quot;,\n&quot;atmega88&quot;, &quot;atmega88a&quot;,\n&quot;atmega88p&quot;, &quot;atmega88pa&quot;,\n&quot;atmega88pb&quot;, &quot;atmega8515&quot;,\n&quot;atmega8535&quot;, &quot;ata6285&quot;,\n&quot;ata6286&quot;, &quot;ata6289&quot;,\n&quot;ata6612c&quot;, &quot;at90pwm1&quot;,\n&quot;at90pwm2&quot;, &quot;at90pwm2b&quot;,\n&quot;at90pwm3&quot;, &quot;at90pwm3b&quot;,\n&quot;at90pwm81&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr5&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Enhanced&quot;\ndevices with 16 KiB up to 64 KiB of program memory.\n<i>mcu</i> = &quot;atmega16&quot;, &quot;atmega16a&quot;,\n&quot;atmega16hva&quot;, &quot;atmega16hva2&quot;,\n&quot;atmega16hvb&quot;, &quot;atmega16hvbrevb&quot;,\n&quot;atmega16m1&quot;, &quot;atmega16u4&quot;,\n&quot;atmega161&quot;, &quot;atmega162&quot;,\n&quot;atmega163&quot;, &quot;atmega164a&quot;,\n&quot;atmega164p&quot;, &quot;atmega164pa&quot;,\n&quot;atmega165&quot;, &quot;atmega165a&quot;,\n&quot;atmega165p&quot;, &quot;atmega165pa&quot;,\n&quot;atmega168&quot;, &quot;atmega168a&quot;,\n&quot;atmega168p&quot;, &quot;atmega168pa&quot;,\n&quot;atmega168pb&quot;, &quot;atmega169&quot;,\n&quot;atmega169a&quot;, &quot;atmega169p&quot;,\n&quot;atmega169pa&quot;, &quot;atmega32&quot;,\n&quot;atmega32a&quot;, &quot;atmega32c1&quot;,\n&quot;atmega32hvb&quot;, &quot;atmega32hvbrevb&quot;,\n&quot;atmega32m1&quot;, &quot;atmega32u4&quot;,\n&quot;atmega32u6&quot;, &quot;atmega323&quot;,\n&quot;atmega324a&quot;, &quot;atmega324p&quot;,\n&quot;atmega324pa&quot;, &quot;atmega325&quot;,\n&quot;atmega325a&quot;, &quot;atmega325p&quot;,\n&quot;atmega325pa&quot;, &quot;atmega328&quot;,\n&quot;atmega328p&quot;, &quot;atmega328pb&quot;,\n&quot;atmega329&quot;, &quot;atmega329a&quot;,\n&quot;atmega329p&quot;, &quot;atmega329pa&quot;,\n&quot;atmega3250&quot;, &quot;atmega3250a&quot;,\n&quot;atmega3250p&quot;, &quot;atmega3250pa&quot;,\n&quot;atmega3290&quot;, &quot;atmega3290a&quot;,\n&quot;atmega3290p&quot;, &quot;atmega3290pa&quot;,\n&quot;atmega406&quot;, &quot;atmega64&quot;,\n&quot;atmega64a&quot;, &quot;atmega64c1&quot;,\n&quot;atmega64hve&quot;, &quot;atmega64hve2&quot;,\n&quot;atmega64m1&quot;, &quot;atmega64rfr2&quot;,\n&quot;atmega640&quot;, &quot;atmega644&quot;,\n&quot;atmega644a&quot;, &quot;atmega644p&quot;,\n&quot;atmega644pa&quot;, &quot;atmega644rfr2&quot;,\n&quot;atmega645&quot;, &quot;atmega645a&quot;,\n&quot;atmega645p&quot;, &quot;atmega649&quot;,\n&quot;atmega649a&quot;, &quot;atmega649p&quot;,\n&quot;atmega6450&quot;, &quot;atmega6450a&quot;,\n&quot;atmega6450p&quot;, &quot;atmega6490&quot;,\n&quot;atmega6490a&quot;, &quot;atmega6490p&quot;,\n&quot;ata5795&quot;, &quot;ata5790&quot;,\n&quot;ata5790n&quot;, &quot;ata5791&quot;,\n&quot;ata6613c&quot;, &quot;ata6614q&quot;,\n&quot;ata5782&quot;, &quot;ata5831&quot;,\n&quot;ata8210&quot;, &quot;ata8510&quot;,\n&quot;ata5702m322&quot;, &quot;at90pwm161&quot;,\n&quot;at90pwm216&quot;, &quot;at90pwm316&quot;,\n&quot;at90can32&quot;, &quot;at90can64&quot;,\n&quot;at90scr100&quot;, &quot;at90usb646&quot;,\n&quot;at90usb647&quot;, &quot;at94k&quot;,\n&quot;m3000&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr51&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Enhanced&quot;\ndevices with 128 KiB of program memory. <i>mcu</i> =\n&quot;atmega128&quot;, &quot;atmega128a&quot;,\n&quot;atmega128rfa1&quot;, &quot;atmega128rfr2&quot;,\n&quot;atmega1280&quot;, &quot;atmega1281&quot;,\n&quot;atmega1284&quot;, &quot;atmega1284p&quot;,\n&quot;atmega1284rfr2&quot;, &quot;at90can128&quot;,\n&quot;at90usb1286&quot;,\n&quot;at90usb1287&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr6&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;Enhanced&quot;\ndevices with 3-byte</big> PC, <big>i.e. with more than 128\nKiB of program memory. <i>mcu</i> =\n&quot;atmega256rfr2&quot;, &quot;atmega2560&quot;,\n&quot;atmega2561&quot;,\n&quot;atmega2564rfr2&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avrxmega2&quot;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;</big>\nXMEGA&quot; <big>devices with more than 8 KiB and up to 64\nKiB of program memory. <i>mcu</i> = &quot;atxmega8e5&quot;,\n&quot;atxmega16a4&quot;, &quot;atxmega16a4u&quot;,\n&quot;atxmega16c4&quot;, &quot;atxmega16d4&quot;,\n&quot;atxmega16e5&quot;, &quot;atxmega32a4&quot;,\n&quot;atxmega32a4u&quot;, &quot;atxmega32c3&quot;,\n&quot;atxmega32c4&quot;, &quot;atxmega32d3&quot;,\n&quot;atxmega32d4&quot;,\n&quot;atxmega32e5&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avrxmega3&quot;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;</big>\nXMEGA&quot; <big>devices with up to 64 KiB of combined\nprogram memory and</big> RAM, <big>and with program memory\nvisible in the</big> RAM <big>address space. <i>mcu</i> =\n&quot;attiny202&quot;, &quot;attiny204&quot;,\n&quot;attiny212&quot;, &quot;attiny214&quot;,\n&quot;attiny402&quot;, &quot;attiny404&quot;,\n&quot;attiny406&quot;, &quot;attiny412&quot;,\n&quot;attiny414&quot;, &quot;attiny416&quot;,\n&quot;attiny417&quot;, &quot;attiny804&quot;,\n&quot;attiny806&quot;, &quot;attiny807&quot;,\n&quot;attiny814&quot;, &quot;attiny816&quot;,\n&quot;attiny817&quot;, &quot;attiny1604&quot;,\n&quot;attiny1606&quot;, &quot;attiny1607&quot;,\n&quot;attiny1614&quot;, &quot;attiny1616&quot;,\n&quot;attiny1617&quot;, &quot;attiny3214&quot;,\n&quot;attiny3216&quot;, &quot;attiny3217&quot;,\n&quot;atmega808&quot;, &quot;atmega809&quot;,\n&quot;atmega1608&quot;, &quot;atmega1609&quot;,\n&quot;atmega3208&quot;, &quot;atmega3209&quot;,\n&quot;atmega4808&quot;,\n&quot;atmega4809&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avrxmega4&quot;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;</big>\nXMEGA&quot; <big>devices with more than 64 KiB and up to 128\nKiB of program memory. <i>mcu</i> = &quot;atxmega64a3&quot;,\n&quot;atxmega64a3u&quot;, &quot;atxmega64a4u&quot;,\n&quot;atxmega64b1&quot;, &quot;atxmega64b3&quot;,\n&quot;atxmega64c3&quot;, &quot;atxmega64d3&quot;,\n&quot;atxmega64d4&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avrxmega5&quot;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;</big>\nXMEGA&quot; <big>devices with more than 64 KiB and up to 128\nKiB of program memory and more than 64 KiB of</big> RAM.\n<i><big>mcu</big></i> <big>= &quot;atxmega64a1&quot;,\n&quot;atxmega64a1u&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avrxmega6&quot;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;</big>\nXMEGA&quot; <big>devices with more than 128 KiB of program\nmemory. <i>mcu</i> = &quot;atxmega128a3&quot;,\n&quot;atxmega128a3u&quot;, &quot;atxmega128b1&quot;,\n&quot;atxmega128b3&quot;, &quot;atxmega128c3&quot;,\n&quot;atxmega128d3&quot;, &quot;atxmega128d4&quot;,\n&quot;atxmega192a3&quot;, &quot;atxmega192a3u&quot;,\n&quot;atxmega192c3&quot;, &quot;atxmega192d3&quot;,\n&quot;atxmega256a3&quot;, &quot;atxmega256a3b&quot;,\n&quot;atxmega256a3bu&quot;, &quot;atxmega256a3u&quot;,\n&quot;atxmega256c3&quot;, &quot;atxmega256d3&quot;,\n&quot;atxmega384c3&quot;,\n&quot;atxmega384d3&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avrxmega7&quot;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;</big>\nXMEGA&quot; <big>devices with more than 128 KiB of program\nmemory and more than 64 KiB of</big> RAM.\n<i><big>mcu</big></i> <big>= &quot;atxmega128a1&quot;,\n&quot;atxmega128a1u&quot;,\n&quot;atxmega128a4u&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avrtiny&quot;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>&quot;</big>\nTINY&quot; <big>Tiny core devices with 512 B up to 4 KiB of\nprogram memory. <i>mcu</i> = &quot;attiny4&quot;,\n&quot;attiny5&quot;, &quot;attiny9&quot;,\n&quot;attiny10&quot;, &quot;attiny20&quot;,\n&quot;attiny40&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>&quot;avr1&quot;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This</big> ISA\n<big>is implemented by the minimal</big> AVR <big>core and\nsupported for assembler only. <i>mcu</i> =\n&quot;attiny11&quot;, &quot;attiny12&quot;,\n&quot;attiny15&quot;, &quot;attiny28&quot;,\n&quot;at90s1200&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabsdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that all\ndata in static storage can be accessed by</big> LDS / STS\n<big>instructions. This option has only an effect on reduced\nTiny devices like ATtiny40. See also the\n&quot;absdata&quot;</big> <b>AVR <big>Variable\nAttributes,variable\nattribute</big></b><big>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maccumulate-args</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Accumulate\noutgoing function arguments and acquire/release the needed\nstack space for outgoing function arguments once in function\nprologue/epilogue. Without this option, outgoing arguments\nare pushed before calling a function and popped\nafterwards.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Popping\nthe arguments after the function call can be expensive\non</big> AVR <big>so that accumulating the stack space might\nlead to smaller executables because arguments need not be\nremoved from the stack after such a function\ncall.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption can lead to reduced code size for functions that\nperform several calls to functions that get their arguments\non the stack like calls to printf-like\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-cost=</b><i>cost</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the branch\ncosts for conditional branch instructions to <i>cost</i>.\nReasonable values for <i>cost</i> are small, non-negative\nintegers. The default branch cost is\n0.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-prologues</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Functions\nprologues/epilogues are expanded as calls to appropriate\nsubroutines. Code size is smaller.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdouble=</b><i>bits</i>\n<b><br>\n-mlong-double=</b><i>bits</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the size (in\nbits) of the &quot;double&quot; or &quot;long double&quot;\ntype, respectively. Possible values for <i>bits</i> are 32\nand 64. Whether or not a specific value for <i>bits</i> is\nallowed depends on the &quot;--with-double=&quot; and\n&quot;--with-long-double=&quot; configure&nbsp;options\n(&quot;https://gcc.gnu.org/install/configure.html#avr&quot;),\nand the same applies for the default values of the\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgas-isr-prologues</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Interrupt\nservice routines (ISRs) may use the &quot;__gcc_isr&quot;\npseudo instruction supported by</big> GNU <big>Binutils. If\nthis option is on, the feature can still be disabled for\nindividual ISRs by means of the</big> <b>AVR <big>Function\nAttributes,,&quot;no_gccisr&quot;</big></b> <big>function\nattribute. This feature is activated per default if\noptimization is on (but not with <b>-Og</b>, @pxref{Optimize\nOptions}), and if</big> GNU <big>Binutils support</big>\nPR21683\n<big>(&quot;https://sourceware.org/PR21683&quot;).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mint8</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume\n&quot;int&quot; to be 8-bit integer. This affects the sizes\nof all types: a &quot;char&quot; is 1 byte, an\n&quot;int&quot; is 1 byte, a &quot;long&quot; is 2 bytes,\nand &quot;long long&quot; is 4 bytes. Please note that this\noption does not conform to the C standards, but it results\nin smaller code size.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmain-is-OS_task</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not save\nregisters in &quot;main&quot;. The effect is the same like\nattaching attribute</big> <b>AVR <big>Function\nAttributes,,&quot;OS_task&quot;</big></b> <big>to\n&quot;main&quot;. It is activated per default if\noptimization is on.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mn-flash=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that the\nflash memory has a size of <i>num</i> times 64\nKiB.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-interrupts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generated code\nis not compatible with hardware interrupts. Code size is\nsmaller.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Try to replace\n&quot;CALL&quot; resp. &quot;JMP&quot; instruction by the\nshorter &quot;RCALL&quot; resp. &quot;RJMP&quot; instruction\nif applicable. Setting <b>-mrelax</b> just adds the\n<b>--mlink-relax</b> option to the assembler&rsquo;s command\nline and the <b>--relax</b> option to the linker&rsquo;s\ncommand line.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Jump\nrelaxing is performed by the linker because jump offsets are\nnot known before code is located. Therefore, the assembler\ncode generated by the compiler is the same, but the\ninstructions in the executable may differ from instructions\nin the assembler code.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Relaxing\nmust be turned on if linker stubs are needed, see the\nsection on &quot;EIND&quot; and linker stubs\nbelow.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrmw</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that the\ndevice supports the Read-Modify-Write instructions\n&quot;XCH&quot;, &quot;LAC&quot;, &quot;LAS&quot; and\n&quot;LAT&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshort-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\n&quot;RJMP&quot; and &quot;RCALL&quot; can target the whole\nprogram memory.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is used internally for multilib selection. It is not\nan optimization option, and you don&rsquo;t need to set it\nby hand.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msp8</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat the stack\npointer register as an 8-bit register, i.e. assume the high\nbyte of the stack pointer is zero. In general, you\ndon&rsquo;t need to set this option by\nhand.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is used internally by the compiler to select and\nbuild multilibs for architectures &quot;avr2&quot; and\n&quot;avr25&quot;. These architectures mix devices with and\nwithout &quot;SPH&quot;. For any setting other than\n<b>-mmcu=avr2</b> or <b>-mmcu=avr25</b> the compiler driver\nadds or removes this option from the compiler proper&rsquo;s\ncommand line, because the compiler then knows if the device\nor architecture has an 8-bit stack pointer and thus no\n&quot;SPH&quot; register or not.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstrict-X</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use address\nregister &quot;X&quot; in a way proposed by the hardware.\nThis means that &quot;X&quot; is only used in indirect,\npost-increment or pre-decrement\naddressing.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Without\nthis option, the &quot;X&quot; register may be used in the\nsame way as &quot;Y&quot; or &quot;Z&quot; which then is\nemulated by additional instructions. For example, loading a\nvalue with &quot;X+const&quot; addressing with a small\nnon-negative &quot;const &lt; 64&quot; to a register\n<i>Rn</i> is performed as</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>adiw\nr26, const ; X += const <br>\nld &lt;Rn&gt;, X ; &lt;Rn&gt; = *X <br>\nsbiw r26, const ; X -= const</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtiny-stack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Only change the\nlower 8 bits of the stack pointer.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfract-convert-truncate</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow to use\ntruncation instead of rounding towards zero for fractional\nfixed-point types.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nodevicelib</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t link\nagainst AVR-LibC&rsquo;s device specific library\n&quot;lib&lt;mcu&gt;.a&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nodevicespecs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t add\n<b>-specs=device-specs/specs-</b><i>mcu</i> to the compiler\ndriver&rsquo;s command line. The user takes responsibility\nfor supplying the sub-processes like compiler proper,\nassembler and linker with appropriate command line options.\nThis means that the user has to supply her private device\nspecs file by means of\n<b>-specs=</b><i>path-to-specs-file</i>. There is no more\nneed for option\n<b>-mmcu=</b><i>mcu</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption can also serve as a replacement for the older way of\nspecifying custom device-specs files that needed <b>-B</b>\n<i>some-path</i> to point to a directory which contains a\nfolder named &quot;device-specs&quot; which contains a specs\nfile named &quot;specs-<i>mcu</i>&quot;, where <i>mcu</i>\nwas specified by\n<b>-mmcu=</b><i>mcu</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Waddr-space-convert</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn about\nconversions between address spaces in the case where the\nresulting address space is not contained in the incoming\naddress space.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Wmisspelled-isr</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if\nthe</big> ISR <big>is misspelled, i.e. without __vector\nprefix. Enabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>&quot;EIND&quot;\nand Devices with More Than 128 Ki Bytes of\nFlash</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Pointers\nin the implementation are 16 bits wide. The address of a\nfunction or label is represented as word address so that\nindirect jumps and calls can target any code address in the\nrange of 64 Ki words.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>In\norder to facilitate indirect jump on devices with more than\n128 Ki bytes of program memory space, there is a special\nfunction register called &quot;EIND&quot; that serves as\nmost significant part of the target address when\n&quot;EICALL&quot; or &quot;EIJMP&quot; instructions are\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Indirect\njumps and calls on these devices are handled as follows by\nthe compiler and are subject to some\nlimitations:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>The compiler never sets\n&quot;EIND&quot;.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>The compiler uses &quot;EIND&quot;\nimplicitly in &quot;EICALL&quot;/&quot;EIJMP&quot;\ninstructions or might read &quot;EIND&quot; directly in\norder to emulate an indirect call/jump by means of a\n&quot;RET&quot; instruction.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>The compiler assumes that\n&quot;EIND&quot; never changes during the startup code or\nduring the application. In particular, &quot;EIND&quot; is\nnot saved/restored in function or interrupt service routine\nprologue/epilogue.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>For indirect calls to functions and\ncomputed goto, the linker generates <i>stubs</i>. Stubs are\njump pads sometimes also called <i>trampolines</i>. Thus,\nthe indirect call/jump jumps to such a stub. The stub\ncontains a direct jump to the desired\naddress.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Linker relaxation must be turned on so\nthat the linker generates the stubs correctly in all\nsituations. See the compiler option <b>-mrelax</b> and the\nlinker option <b>--relax</b>. There are corner cases where\nthe linker is supposed to generate stubs but aborts without\nrelaxation and without a helpful error\nmessage.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>The default linker script is arranged for\ncode with &quot;EIND = 0&quot;. If code is supposed to work\nfor a setup with &quot;EIND != 0&quot;, a custom linker\nscript has to be used in order to place the sections whose\nname start with &quot;.trampolines&quot; into the segment\nwhere &quot;EIND&quot; points to.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>The startup code from libgcc never sets\n&quot;EIND&quot;. Notice that startup code is a blend of\ncode from libgcc and AVR-LibC. For the impact of AVR-LibC on\n&quot;EIND&quot;, see the AVR-LibC&nbsp;user&nbsp;manual\n(&quot;http://nongnu.org/avr-libc/user-manual/&quot;).</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>It is legitimate for user-specific\nstartup code to set up &quot;EIND&quot; early, for example\nby means of initialization code located in section\n&quot;.init3&quot;. Such code runs prior to general startup\ncode that initializes</big> RAM <big>and calls constructors,\nbut after the bit of startup code from AVR-LibC that sets\n&quot;EIND&quot; to the segment where the vector table is\nlocated.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>#include\n&lt;avr/io.h&gt; <br>\nstatic void <br>\n\n__attribute__((section(&quot;.init3&quot;),naked,used,no_instrument_function))\n<br>\ninit3_set_eind (void) <br>\n{ <br>\n__asm volatile (&quot;ldi\nr24,pm_hh8(__trampolines_start)\\n\\t&quot; <br>\n&quot;out %i0,r24&quot; :: &quot;n&quot; (&amp;EIND) :\n&quot;r24&quot;,&quot;memory&quot;); <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n&quot;__trampolines_start&quot; symbol is defined in the\nlinker script.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big>*</big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>Stubs are\ngenerated automatically by the linker if the following two\nconditions are met:</big></big></big></p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><big><big><big>-&lt;The address\nof a label is taken by means of the &quot;gs&quot;\nmodifier&gt;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>(short for\n<i>generate stubs</i>) like so:</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>LDI\nr24, lo8(gs(&lt;func&gt;)) <br>\nLDI r25, hi8(gs(&lt;func&gt;))</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>-&lt;The final\nlocation of that label is in a code\nsegment&gt;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big><i>outside</i>\nthe segment where the stubs are\nlocated.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>The compiler emits such &quot;gs&quot;\nmodifiers for code labels in the following\nsituations:</big></big></big></p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><big><big><big>-&lt;Taking\naddress of a function or code label.&gt; <br>\n-&lt;Computed goto.&gt; <br>\n-&lt;If prologue-save function is used, see\n<b>-mcall-prologues</b>&gt;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>command-line\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>-&lt;Switch/case\ndispatch tables. If you do not want such\ndispatch&gt;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>tables you can\nspecify the <b>-fno-jump-tables</b> command-line\noption.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>-&lt;C and\nC</big> ++ <big>constructors/destructors called during <br>\nstartup/shutdown.&gt; <br>\n-&lt;If the tools hit a &quot;gs()&quot; modifier explained\nabove.&gt;</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Jumping to non-symbolic addresses like so\nis <i>not</i> supported:</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\nmain (void) <br>\n{ <br>\n/* Call function at word address 0x2 */ <br>\nreturn ((int(*)(void)) 0x2)(); <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Instead,\na stub has to be set up, i.e. the function has to be called\nthrough a symbol (&quot;func_4&quot; in the\nexample):</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>int\nmain (void) <br>\n{ <br>\nextern int func_4 (void); <br>\n/* Call function at byte address 0x4 */ <br>\nreturn func_4(); <br>\n}</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>and\nthe application be linked with\n<b>-Wl,--defsym,func_4=0x4</b>. Alternatively,\n&quot;func_4&quot; can be defined in the linker\nscript.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Handling\nof the &quot;RAMPD&quot;, &quot;RAMPX&quot;,\n&quot;RAMPY&quot; and &quot;RAMPZ&quot; Special Function\nRegisters</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Some</big>\nAVR <big>devices support memories larger than the 64 KiB\nrange that can be accessed with 16-bit pointers. To access\nmemory locations outside this 64 KiB range, the content of a\n&quot;RAMP&quot; register is used as high part of the\naddress: The &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;\naddress register is concatenated with the &quot;RAMPX&quot;,\n&quot;RAMPY&quot;, &quot;RAMPZ&quot; special function\nregister, respectively, to get a wide address. Similarly,\n&quot;RAMPD&quot; is used together with direct\naddressing.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big>*</big></big></big></p> </td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>The startup code\ninitializes the &quot;RAMP&quot; special function registers\nwith zero.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>If a</big> <b>AVR <big>Named Address\nSpaces,named address space</big></b> <big>other than generic\nor &quot;__flash&quot; is used, then &quot;RAMPZ&quot; is\nset as needed before the operation.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>If the device supports</big> RAM\n<big>larger than 64 KiB and the compiler needs to change\n&quot;RAMPZ&quot; to accomplish an operation,\n&quot;RAMPZ&quot; is reset to zero after the\noperation.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>If the device comes with a specific\n&quot;RAMP&quot; register, the</big> ISR\n<big>prologue/epilogue saves/restores that</big> SFR\n<big>and initializes it with zero in case the</big> ISR\n<big>code might (implicitly) use it.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big>RAM <big>larger than 64 KiB is not supported\nby</big> GCC <big>for</big> AVR <big>targets. If you use\ninline assembler to read from locations outside the 16-bit\naddress range and change one of the &quot;RAMP&quot;\nregisters, you must reset it to zero after the\naccess.</big></big></big></p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>AVR\n<big>Built-in Macros</big></big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>GCC\n<big>defines several built-in macros so that the user code\ncan test for the presence or absence of features. Almost any\nof the following built-in macros are deduced from device\ncapabilities and thus triggered by the <b>-mmcu=</b>\ncommand-line option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>For\neven more AVR-specific built-in macros see</big> <b>AVR\n<big>Named Address Spaces</big></b> <big>and</big> <b>AVR\n<big>Built-in Functions</big></b><big>. <br>\n&quot;__AVR_ARCH__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Build-in macro\nthat resolves to a decimal number that identifies the\narchitecture and depends on the <b>-mmcu=</b><i>mcu</i>\noption. Possible values are:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>2,\n25, 3, 31, 35, 4, 5, 51, 6</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>for\n<i>mcu</i>=&quot;avr2&quot;, &quot;avr25&quot;,\n&quot;avr3&quot;, &quot;avr31&quot;, &quot;avr35&quot;,\n&quot;avr4&quot;, &quot;avr5&quot;, &quot;avr51&quot;,\n&quot;avr6&quot;,</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>respectively\nand</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>100,\n102, 103, 104, 105, 106, 107</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>for\n<i>mcu</i>=&quot;avrtiny&quot;, &quot;avrxmega2&quot;,\n&quot;avrxmega3&quot;, &quot;avrxmega4&quot;,\n&quot;avrxmega5&quot;, &quot;avrxmega6&quot;,\n&quot;avrxmega7&quot;, respectively. If <i>mcu</i> specifies\na device, this built-in macro is set accordingly. For\nexample, with <b>-mmcu=atmega8</b> the macro is defined to\n4.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_<i>Device</i>__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Setting\n<b>-mmcu=</b><i>device</i> defines this built-in macro which\nreflects the device&rsquo;s name. For example,\n<b>-mmcu=atmega8</b> defines the built-in macro\n&quot;__AVR_ATmega8__&quot;, <b>-mmcu=attiny261a</b> defines\n&quot;__AVR_ATtiny261A__&quot;, etc.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nbuilt-in macros&rsquo; names follow the scheme\n&quot;__AVR_<i>Device</i>__&quot; where <i>Device</i> is the\ndevice name as from the</big> AVR <big>user manual. The\ndifference between <i>Device</i> in the built-in macro and\n<i>device</i> in <b>-mmcu=</b><i>device</i> is that the\nlatter is always lowercase.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>device</i> is not a device but only a core architecture\nlike <b>avr51</b>, this macro is not\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_DEVICE_NAME__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Setting\n<b>-mmcu=</b><i>device</i> defines this built-in macro to\nthe device&rsquo;s name. For example, with\n<b>-mmcu=atmega8</b> the macro is defined to\n&quot;atmega8&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n<i>device</i> is not a device but only a core architecture\nlike <b>avr51</b>, this macro is not\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_XMEGA__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device /\narchitecture belongs to the</big> XMEGA <big>family of\ndevices.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_ELPM__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nthe &quot;ELPM&quot; instruction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_ELPMX__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nthe &quot;ELPM R<i>n</i>,Z&quot; and &quot;ELPM\nR<i>n</i>,Z+&quot; instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_MOVW__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nthe &quot;MOVW&quot; instruction to perform 16-bit\nregister-register moves.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_LPMX__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nthe &quot;LPM R<i>n</i>,Z&quot; and &quot;LPM\nR<i>n</i>,Z+&quot; instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_MUL__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has a\nhardware multiplier.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_JMP_CALL__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nthe &quot;JMP&quot; and &quot;CALL&quot; instructions. This\nis the case for devices with more than 8 KiB of program\nmemory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_EIJMP_EICALL__&quot;\n<br>\n&quot;__AVR_3_BYTE_PC__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nthe &quot;EIJMP&quot; and &quot;EICALL&quot; instructions.\nThis is the case for devices with more than 128 KiB of\nprogram memory. This also means that the program counter\n(</big> PC <big>) is 3 bytes wide.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_2_BYTE_PC__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The program\ncounter (</big> PC <big>) is 2 bytes wide. This is the case\nfor devices with up to 128 KiB of program\nmemory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_8BIT_SP__&quot;\n<br>\n&quot;__AVR_HAVE_16BIT_SP__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The stack\npointer (</big> SP <big>) register is treated as 8-bit\nrespectively 16-bit register by the compiler. The definition\nof these macros is affected by\n<b>-mtiny-stack</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_SPH__&quot;\n<br>\n&quot;__AVR_SP8__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nthe</big> SPH <big>(high part of stack pointer) special\nfunction register or has an 8-bit stack pointer,\nrespectively. The definition of these macros is affected by\n<b>-mmcu=</b> and in the cases of <b>-mmcu=avr2</b> and\n<b>-mmcu=avr25</b> also by\n<b>-msp8</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_HAVE_RAMPD__&quot;\n<br>\n&quot;__AVR_HAVE_RAMPX__&quot; <br>\n&quot;__AVR_HAVE_RAMPY__&quot; <br>\n&quot;__AVR_HAVE_RAMPZ__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nthe &quot;RAMPD&quot;, &quot;RAMPX&quot;, &quot;RAMPY&quot;,\n&quot;RAMPZ&quot; special function register,\nrespectively.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__NO_INTERRUPTS__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This macro\nreflects the <b>-mno-interrupts</b> command-line\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_ERRATA_SKIP__&quot;\n<br>\n\n&quot;__AVR_ERRATA_SKIP_JMP_CALL__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Some</big> AVR\n<big>devices (</big> AT90S8515, <big>ATmega103) must not\nskip 32-bit instructions because of a hardware erratum. Skip\ninstructions are &quot;SBRS&quot;, &quot;SBRC&quot;,\n&quot;SBIS&quot;, &quot;SBIC&quot; and &quot;CPSE&quot;. The\nsecond macro is only defined if\n&quot;__AVR_HAVE_JMP_CALL__&quot; is also\nset.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_ISA_RMW__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The device has\nRead-Modify-Write instructions (</big> XCH, LAC, LAS\n<big>and</big> LAT <big>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_SFR_OFFSET__=<i>offset</i>&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Instructions\nthat can address I/O special function registers directly\nlike &quot;IN&quot;, &quot;OUT&quot;, &quot;SBI&quot;, etc.\nmay use a different address as if addressed by an\ninstruction to access</big> RAM <big>like &quot;LD&quot; or\n&quot;STS&quot;. This offset depends on the device\narchitecture and has to be subtracted from the</big> RAM\n<big>address in order to get the respective I/O\naddress.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_SHORT_CALLS__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The\n<b>-mshort-calls</b> command line option is\nset.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__AVR_PM_BASE_ADDRESS__=<i>addr</i>&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Some devices\nsupport reading from flash memory by means of\n&quot;LD*&quot; instructions. The flash memory is seen in\nthe data address space at an offset of\n&quot;__AVR_PM_BASE_ADDRESS__&quot;. If this macro is not\ndefined, this feature is not available. If defined, the\naddress space is linear and there is no need to put\n&quot;.rodata&quot; into</big> RAM. <big>This is handled by\nthe default linker description file, and is currently\navailable for &quot;avrtiny&quot; and &quot;avrxmega3&quot;.\nEven more convenient, there is no need to use address spaces\nlike &quot;__flash&quot; or features like attribute\n&quot;progmem&quot; and\n&quot;pgm_read_*&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__WITH_AVRLIBC__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The compiler is\nconfigured to be used together with AVR-Libc. See the\n<b>--with-avrlibc</b> configure\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__HAVE_DOUBLE_MULTILIB__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Defined if\n<b>-mdouble=</b> acts as a multilib\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__HAVE_DOUBLE32__&quot;\n<br>\n&quot;__HAVE_DOUBLE64__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Defined if the\ncompiler supports 32-bit double resp. 64-bit double. The\nactual layout is specified by option\n<b>-mdouble=</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__DEFAULT_DOUBLE__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The size in bits\nof &quot;double&quot; if <b>-mdouble=</b> is not set. To\ntest the layout of &quot;double&quot; in a program, use the\nbuilt-in macro\n&quot;__SIZEOF_DOUBLE__&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__HAVE_LONG_DOUBLE32__&quot;\n<br>\n&quot;__HAVE_LONG_DOUBLE64__&quot; <br>\n&quot;__HAVE_LONG_DOUBLE_MULTILIB__&quot; <br>\n&quot;__DEFAULT_LONG_DOUBLE__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Same as above,\nbut for &quot;long double&quot; instead of\n&quot;double&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__WITH_DOUBLE_COMPARISON__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Reflects the\n&quot;--with-double-comparison={tristate|bool|libf7}&quot;\nconfigure&nbsp;option\n(&quot;https://gcc.gnu.org/install/configure.html#avr&quot;)\nand is defined to 2 or 3.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big>&quot;__WITH_LIBF7_LIBGCC__&quot;\n<br>\n&quot;__WITH_LIBF7_MATH__&quot; <br>\n\n&quot;__WITH_LIBF7_MATH_SYMBOLS__&quot;</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Reflects the\n&quot;--with-libf7={libgcc|math|math-symbols}&quot;\nconfigure&nbsp;option\n(&quot;https://gcc.gnu.org/install/configure.html#avr&quot;).</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Blackfin\nOptions</i> <b><br>\n\n-mcpu=</b><i>cpu</i>[<b>-</b><i>sirevision</i>]</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nname of the target Blackfin processor. Currently, <i>cpu</i>\ncan be one of <b>bf512</b>, <b>bf514</b>, <b>bf516</b>,\n<b>bf518</b>, <b>bf522</b>, <b>bf523</b>, <b>bf524</b>,\n<b>bf525</b>, <b>bf526</b>, <b>bf527</b>, <b>bf531</b>,\n<b>bf532</b>, <b>bf533</b>, <b>bf534</b>, <b>bf536</b>,\n<b>bf537</b>, <b>bf538</b>, <b>bf539</b>, <b>bf542</b>,\n<b>bf544</b>, <b>bf547</b>, <b>bf548</b>, <b>bf549</b>,\n<b>bf542m</b>, <b>bf544m</b>, <b>bf547m</b>, <b>bf548m</b>,\n<b>bf549m</b>, <b>bf561</b>,\n<b>bf592</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noptional <i>sirevision</i> specifies the silicon revision of\nthe target Blackfin processor. Any workarounds available for\nthe targeted silicon revision are enabled. If\n<i>sirevision</i> is <b>none</b>, no workarounds are\nenabled. If <i>sirevision</i> is <b>any</b>, all workarounds\nfor the targeted processor are enabled. The\n&quot;__SILICON_REVISION__&quot; macro is defined to two\nhexadecimal digits representing the major and minor numbers\nin the silicon revision. If <i>sirevision</i> is\n<b>none</b>, the &quot;__SILICON_REVISION__&quot; is not\ndefined. If <i>sirevision</i> is <b>any</b>, the\n&quot;__SILICON_REVISION__&quot; is defined to be 0xffff. If\nthis optional <i>sirevision</i> is not used,</big> GCC\n<big>assumes the latest known silicon revision of the\ntargeted Blackfin processor.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>defines a preprocessor macro for the specified\n<i>cpu</i>. For the <b>bfin-elf</b> toolchain, this option\ncauses the hardware</big> BSP <big>provided by libgloss to\nbe linked in if <b>-msim</b> is not\ngiven.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Without\nthis option, <b>bf532</b> is used as the processor by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat support for <b>bf561</b> is incomplete. For\n<b>bf561</b>, only the preprocessor macro is\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies that\nthe program will be run on the simulator. This causes the\nsimulator</big> BSP <big>provided by libgloss to be linked\nin. This option has effect only for <b>bfin-elf</b>\ntoolchain. Certain other options, such as\n<b>-mid-shared-library</b> and <b>-mfdpic</b>, imply\n<b>-msim</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-momit-leaf-frame-pointer</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t keep\nthe frame pointer in a register for leaf functions. This\navoids the instructions to save, set up and restore frame\npointers and makes an extra register available in leaf\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mspecld-anomaly</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When enabled,\nthe compiler ensures that the generated code does not\ncontain speculative loads after jump instructions. If this\noption is used, &quot;__WORKAROUND_SPECULATIVE_LOADS&quot;\nis defined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-specld-anomaly</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t\ngenerate extra code to prevent speculative loads from\noccurring.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcsync-anomaly</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When enabled,\nthe compiler ensures that the generated code does not\ncontain</big> CSYNC <big>or</big> SSYNC <big>instructions\ntoo soon after conditional branches. If this option is used,\n&quot;__WORKAROUND_SPECULATIVE_SYNCS&quot; is\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-csync-anomaly</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t\ngenerate extra code to prevent</big> CSYNC <big>or</big>\nSSYNC <big>instructions from occurring too soon after a\nconditional branch.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlow64k</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When enabled,\nthe compiler is free to take advantage of the knowledge that\nthe entire program fits into the low 64k of\nmemory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-low64k</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that the\nprogram is arbitrarily large. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-check-l1</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do stack\nchecking using information placed into L1 scratchpad memory\nby the uClinux kernel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mid-shared-library</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat supports shared libraries via the library</big> ID\n<big>method. This allows for execute in place and shared\nlibraries in an environment without virtual memory\nmanagement. This option implies <b>-fPIC</b>. With a\n<b>bfin-elf</b> target, this option implies\n<b>-msim</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-id-shared-library</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat doesn&rsquo;t assume ID-based shared libraries are\nbeing used. This is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mleaf-id-shared-library</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat supports shared libraries via the library</big> ID\n<big>method, but assumes that this library or executable\nwon&rsquo;t link against any other</big> ID <big>shared\nlibraries. That allows the compiler to use faster code for\njumps and calls.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-leaf-id-shared-library</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not assume\nthat the code being compiled won&rsquo;t link against\nany</big> ID <big>shared libraries. Slower code is generated\nfor jump and call insns.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshared-library-id=n</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nidentification number of the ID-based shared library being\ncompiled. Specifying a value of 0 generates more compact\ncode; specifying other values forces the allocation of that\nnumber to the current library but is no more space- or\ntime-efficient than omitting this\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msep-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat allows the data segment to be located in a different\narea of memory from the text segment. This allows for\nexecute in place in an environment without virtual memory\nmanagement by eliminating relocations against the text\nsection.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sep-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat assumes that the data segment follows the text segment.\nThis is the default.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-calls\n<br>\n-mno-long-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tells the\ncompiler to perform function calls by first loading the\naddress of the function into a register and then performing\na subroutine call on this register. This switch is needed if\nthe target function lies outside of the 24-bit addressing\nrange of the offset-based version of subroutine call\ninstruction.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nfeature is not enabled by default. Specifying\n<b>-mno-long-calls</b> restores the default behavior. Note\nthese switches have no effect on how the compiler generates\ncode to handle function calls via function\npointers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfast-fp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link with the\nfast floating-point library. This library relaxes some of\nthe</big> IEEE <big>floating-point standard&rsquo;s rules\nfor checking inputs against Not-a-Number (</big> NAN <big>),\nin the interest of performance.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-plt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable inlining\nof</big> PLT <big>entries in function calls to functions\nthat are not known to bind locally. It has no effect without\n<b>-mfdpic</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmulticore</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Build a\nstandalone application for multicore Blackfin processors.\nThis option causes proper start files and link scripts\nsupporting multicore to be used, and defines the macro\n&quot;__BFIN_MULTICORE&quot;. It can only be used with\n<b>-mcpu=bf561</b>[<b>-</b><i>sirevision</i>].</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption can be used with <b>-mcorea</b> or <b>-mcoreb</b>,\nwhich selects the one-application-per-core programming\nmodel. Without <b>-mcorea</b> or <b>-mcoreb</b>, the\nsingle-application/dual-core programming model is used. In\nthis model, the main function of Core B should be named as\n&quot;coreb_main&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthis option is not used, the single-core application\nprogramming model is used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcorea</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Build a\nstandalone application for Core A of</big> BF561 <big>when\nusing the one-application-per-core programming model. Proper\nstart files and link scripts are used to support Core A, and\nthe macro &quot;__BFIN_COREA&quot; is defined. This option\ncan only be used in conjunction with\n<b>-mmulticore</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcoreb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Build a\nstandalone application for Core B of</big> BF561 <big>when\nusing the one-application-per-core programming model. Proper\nstart files and link scripts are used to support Core B, and\nthe macro &quot;__BFIN_COREB&quot; is defined. When this\noption is used, &quot;coreb_main&quot; should be used\ninstead of &quot;main&quot;. This option can only be used in\nconjunction with <b>-mmulticore</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdram</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Build a\nstandalone application for</big> SDRAM. <big>Proper start\nfiles and link scripts are used to put the application\ninto</big> SDRAM, <big>and the macro\n&quot;__BFIN_SDRAM&quot; is defined. The loader should\ninitialize</big> SDRAM <big>before loading the\napplication.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-micplb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\nICPLBs are enabled at run time. This has an effect on\ncertain anomaly workarounds. For Linux targets, the default\nis to assume ICPLBs are enabled; for standalone applications\nthe default is off.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>C6X\nOptions</i> <b><br>\n-march=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This specifies\nthe name of the target architecture.</big> GCC <big>uses\nthis name to determine what kind of instructions it can emit\nwhen generating assembly code. Permissible names are:\n<b>c62x</b>, <b>c64x</b>, <b>c64x+</b>, <b>c67x</b>,\n<b>c67x+</b>, <b>c674x</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a big-endian target.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a little-endian target. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Choose startup\nfiles and linker script suitable for the\nsimulator.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=default</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put small global\nand static data in the &quot;.neardata&quot; section, which\nis pointed to by register &quot;B14&quot;. Put small\nuninitialized global and static data in the &quot;.bss&quot;\nsection, which is adjacent to the &quot;.neardata&quot;\nsection. Put small read-only data into the\n&quot;.rodata&quot; section. The corresponding sections used\nfor large pieces of data are &quot;.fardata&quot;,\n&quot;.far&quot; and\n&quot;.const&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=all</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put all data,\nnot just small objects, into the sections reserved for small\ndata, and use addressing relative to the &quot;B14&quot;\nregister to access them.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=none</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make no use of\nthe sections reserved for small data, and use absolute\naddresses to access all data. Put all initialized global and\nstatic data in the &quot;.fardata&quot; section, and all\nuninitialized data in the &quot;.far&quot; section. Put all\nconstant data into the &quot;.const&quot;\nsection.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>CRIS\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined specifically for the</big> CRIS\n<big>ports. <b><br>\n-march=</b><i>architecture-type</i> <b><br>\n-mcpu=</b><i>architecture-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the specified architecture. The choices for\n<i>architecture-type</i> are <b>v3</b>, <b>v8</b> and\n<b>v10</b> for respectively</big> ETRAX&nbsp; <big>4,</big>\nETRAX&nbsp; <big>100, and</big> ETRAX&nbsp;\n<big>100&nbsp;</big> LX. <big>Default is\n<b>v0</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>architecture-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tune to\n<i>architecture-type</i> everything applicable about the\ngenerated code, except for the</big> ABI <big>and the set of\navailable instructions. The choices for\n<i>architecture-type</i> are the same as for\n<b>-march=</b><i>architecture-type</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmax-stack-frame=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn when the\nstack frame of a function exceeds <i>n</i>\nbytes.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-metrax4 <br>\n-metrax100</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The options\n<b>-metrax4</b> and <b>-metrax100</b> are synonyms for\n<b>-march=v3</b> and <b>-march=v8</b>\nrespectively.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmul-bug-workaround\n<br>\n-mno-mul-bug-workaround</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around a\nbug in the &quot;muls&quot; and &quot;mulu&quot;\ninstructions for</big> CPU <big>models where it applies.\nThis option is active by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpdebug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nCRIS-specific verbose debug-related information in the\nassembly code. This option also has the effect of turning\noff the <b>#NO_APP</b> formatted-code indicator to the\nassembler at the beginning of the assembly\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcc-init</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\ncondition-code results from previous instruction; always\nemit compare and test instructions before use of condition\ncodes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-side-effects</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not emit\ninstructions with side effects in addressing modes other\nthan post-increment.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-align\n<br>\n-mno-stack-align <br>\n-mdata-align <br>\n-mno-data-align <br>\n-mconst-align <br>\n-mno-const-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\n(<b>no-</b> options) arrange (eliminate arrangements) for\nthe stack frame, individual data and constants to be aligned\nfor the maximum single data access size for the chosen</big>\nCPU <big>model. The default is to arrange for 32-bit\nalignment.</big> ABI <big>details such as structure layout\nare not affected by these options.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m32-bit <br>\n-m16-bit <br>\n-m8-bit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Similar to the\nstack- data- and const-align options above, these options\narrange for stack frame, writable data and constants to all\nbe 32-bit, 16-bit or 8-bit aligned. The default is 32-bit\nalignment.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-prologue-epilogue\n<br>\n-mprologue-epilogue</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mno-prologue-epilogue</b>, the normal function prologue\nand epilogue which set up the stack frame are omitted and no\nreturn instructions or return sequences are generated in the\ncode. Use this option only together with visual inspection\nof the compiled code: no warnings or errors are generated\nwhen call-saved registers must be saved, or storage for\nlocal variables needs to be allocated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-melf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Legacy no-op\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-sim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\narranges to link with input-output functions from a\nsimulator library. Code, initialized data and\nzero-initialized data are allocated\nconsecutively.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-sim2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like\n<b>-sim</b>, but pass linker options to locate initialized\ndata at 0x40000000 and zero-initialized data at\n0x80000000.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>CR16\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined specifically for the</big> CR16\n<big>ports. <b><br>\n-mmac</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof multiply-accumulate instructions. Disabled by\ndefault.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcr16cplus\n<br>\n-mcr16c</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> CR16C <big>or</big> CR16C+\n<big>architecture.</big> CR16C+ <big>architecture is\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Links the\nlibrary libsim.a which is in compatible with simulator.\nApplicable to</big> ELF <big>compiler\nonly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mint32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Choose integer\ntype as 32-bit wide.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbit-ops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generates\n&quot;sbit&quot;/&quot;cbit&quot; instructions for bit\nmanipulations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdata-model=</b><i>model</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Choose a data\nmodel. The choices for <i>model</i> are <b>near</b>,\n<b>far</b> or <b>medium</b>. <b>medium</b> is default.\nHowever, <b>far</b> is not valid with <b>-mcr16c</b>, as\nthe</big> CR16C <big>architecture does not support the far\ndata model.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>C-SKY\nOptions</i></big></big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>GCC\n<big>supports these options when compiling for C-SKY V2\nprocessors. <b><br>\n-march=</b><i>arch</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\nC-SKY target architecture. Valid values for <i>arch</i> are:\n<b>ck801</b>, <b>ck802</b>, <b>ck803</b>, <b>ck807</b>, and\n<b>ck810</b>. The default is\n<b>ck810</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\nC-SKY target processor. Valid values for <i>cpu</i> are:\n<b>ck801</b>, <b>ck801t</b>, <b>ck802</b>, <b>ck802t</b>,\n<b>ck802j</b>, <b>ck803</b>, <b>ck803h</b>, <b>ck803t</b>,\n<b>ck803ht</b>, <b>ck803f</b>, <b>ck803fh</b>,\n<b>ck803e</b>, <b>ck803eh</b>, <b>ck803et</b>,\n<b>ck803eht</b>, <b>ck803ef</b>, <b>ck803efh</b>,\n<b>ck803ft</b>, <b>ck803eft</b>, <b>ck803efht</b>,\n<b>ck803r1</b>, <b>ck803hr1</b>, <b>ck803tr1</b>,\n<b>ck803htr1</b>, <b>ck803fr1</b>, <b>ck803fhr1</b>,\n<b>ck803er1</b>, <b>ck803ehr1</b>, <b>ck803etr1</b>,\n<b>ck803ehtr1</b>, <b>ck803efr1</b>, <b>ck803efhr1</b>,\n<b>ck803ftr1</b>, <b>ck803eftr1</b>, <b>ck803efhtr1</b>,\n<b>ck803s</b>, <b>ck803st</b>, <b>ck803se</b>,\n<b>ck803sf</b>, <b>ck803sef</b>, <b>ck803seft</b>,\n<b>ck807e</b>, <b>ck807ef</b>, <b>ck807</b>, <b>ck807f</b>,\n<b>ck810e</b>, <b>ck810et</b>, <b>ck810ef</b>,\n<b>ck810eft</b>, <b>ck810</b>, <b>ck810v</b>, <b>ck810f</b>,\n<b>ck810t</b>, <b>ck810fv</b>, <b>ck810tv</b>,\n<b>ck810ft</b>, and <b>ck810ftv</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian</b></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-EB</b></big></big></big></p></td>\n<td width=\"85%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-EL</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Select big- or little-endian code. The\ndefault is little-endian.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfloat-abi=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies which\nfloating-point</big> ABI <big>to use. Permissible values\nare: <b>soft</b>, <b>softfp</b> and\n<b>hard</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Specifying\n<b>soft</b> causes</big> GCC <big>to generate output\ncontaining library calls for floating-point operations.\n<b>softfp</b> allows the generation of code using hardware\nfloating-point instructions, but still uses the soft-float\ncalling conventions. <b>hard</b> allows generation of\nfloating-point instructions and uses FPU-specific calling\nconventions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault depends on the specific target configuration. Note\nthat the hard-float and soft-float ABIs are not\nlink-compatible; you must compile your entire program with\nthe same</big> ABI, <big>and link with a compatible set of\nlibraries.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhard-float\n<br>\n-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select hardware\nor software floating-point implementations. The default is\nsoft float.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdouble-float\n<br>\n-mno-double-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\n<b>-mhard-float</b> is in effect, enable generation of\ndouble-precision float instructions. This is the default\nexcept when compiling for</big> CK803.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mfdivdu <br>\n-mno-fdivdu</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\n<b>-mhard-float</b> is in effect, enable generation of\n&quot;frecipd&quot;, &quot;fsqrtd&quot;, and\n&quot;fdivd&quot; instructions. This is the default except\nwhen compiling for</big> CK803.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mfpu=</big></b><big><i>fpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the\nfloating-point processor. This option can only be used with\n<b>-mhard-float</b>. Values for <i>fpu</i> are\n<b>fpv2_sf</b> (equivalent to <b>-mno-double-float\n-mno-fdivdu</b>), <b>fpv2</b> (<b>-mdouble-float\n-mno-divdu</b>), and <b>fpv2_divd</b> (<b>-mdouble-float\n-mdivdu</b>).</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-melrw <br>\n-mno-elrw</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\nextended &quot;lrw&quot; instruction. This option defaults\nto on for</big> CK801 <big>and off\notherwise.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mistack <br>\n-mno-istack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable interrupt\nstack instructions; the default is\noff.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mistack</b> option is required to handle the\n&quot;interrupt&quot; and &quot;isr&quot; function\nattributes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nmultiprocessor instructions; the default is\noff.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ncoprocessor instructions; the default is\noff.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcache</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ncoprocessor instructions; the default is\noff.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msecurity</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable C-SKY\nsecurity instructions; the default is\noff.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtrust</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable C-SKY\ntrust instructions; the default is\noff.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdsp <br>\n-medsp <br>\n-mvdsp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nC-SKY</big> DSP, <big>Enhanced</big> DSP, <big>or\nVector</big> DSP <big>instructions, respectively. All of\nthese options default to off.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdiv <br>\n-mno-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate divide\ninstructions. Default is off.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmart <br>\n-mno-smart</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor Smart Mode, using only registers numbered 0-7 to allow\nuse of 16-bit instructions. This option is ignored for</big>\nCK801 <big>where this is the required behavior, and it\ndefaults to on for</big> CK802. <big>For other targets, the\ndefault is off.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhigh-registers\n<br>\n-mno-high-registers</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nusing the high registers numbered 16-31. This option is not\nsupported on</big> CK801, CK802, <big>or</big> CK803,\n<big>and is enabled by default for other\nprocessors.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-manchor <br>\n-mno-anchor</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nusing global anchor symbol addresses.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpushpop\n<br>\n-mno-pushpop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nusing &quot;push&quot; and &quot;pop&quot; instructions.\nThis option defaults to on.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmultiple-stld\n<br>\n-mstm <br>\n-mno-multiple-stld <br>\n-mno-stm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nusing &quot;stm&quot; and &quot;ldm&quot; instructions. This\noption isn&rsquo;t supported on</big> CK801 <big>but is\nenabled by default on other\nprocessors.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mconstpool\n<br>\n-mno-constpool</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Create constant\npools in the compiler instead of deferring it to the\nassembler. This option is the default and required for\ncorrect code generation on</big> CK801 <big>and</big> CK802,\n<big>and is optional on other\nprocessors.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-size\n<br>\n-mno-stack-size</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit\n&quot;.stack_size&quot; directives for each function in the\nassembly output. This option defaults to\noff.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mccrt <br>\n-mno-ccrt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the C-SKY compiler runtime instead of libgcc. This\noption defaults to off.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-cost=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the branch\ncosts to roughly &quot;n&quot; instructions. The default is\n1.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-prolog\n<br>\n-mno-sched-prolog</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Permit\nscheduling of function prologue and epilogue sequences.\nUsing this option can result in code that is not compliant\nwith the C-SKY V2</big> ABI <big>prologue requirements and\nthat cannot be debugged or backtraced. It is disabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Links the\nlibrary libsemi.a which is in compatible with simulator.\nApplicable to</big> ELF <big>compiler\nonly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Darwin\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for all architectures running the Darwin\noperating system.</big></big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>FSF\nGCC <big>on Darwin does not create &quot;fat&quot; object\nfiles; it creates an object file for the single architecture\nthat</big> GCC <big>was built to target. Apple&rsquo;s</big>\nGCC <big>on Darwin does create &quot;fat&quot; files if\nmultiple <b>-arch</b> options are used; it does so by\nrunning the compiler or linker multiple times and joining\nthe results together with <i>lipo</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nsubtype of the file created (like <b>ppc7400</b> or\n<b>ppc970</b> or <b>i686</b>) is determined by the flags\nthat specify the</big> ISA <big>that</big> GCC <big>is\ntargeting, like <b>-mcpu</b> or <b>-march</b>. The\n<b>-force_cpusubtype_ALL</b> option can be used to override\nthis.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\nDarwin tools vary in their behavior when presented with\nan</big> ISA <big>mismatch. The assembler, <i>as</i>, only\npermits instructions to be used that are valid for the\nsubtype of the file it is generating, so you cannot put\n64-bit instructions in a <b>ppc750</b> object file. The\nlinker for shared libraries, <i>/usr/bin/libtool</i>, fails\nand prints an error if asked to create a shared library with\na less restrictive subtype than its input files (for\ninstance, trying to put a <b>ppc970</b> object file in a\n<b>ppc7400</b> library). The linker for executables,\n<b>ld</b>, quietly gives the executable the most restrictive\nsubtype of any of its input files. <b><br>\n-F</b><i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Add the\nframework directory <i>dir</i> to the head of the list of\ndirectories to be searched for header files. These\ndirectories are interleaved with those specified by\n<b>-I</b> options and are scanned in a left-to-right\norder.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>A\nframework directory is a directory with frameworks in it. A\nframework is a directory with a <i>Headers</i> and/or\n<i>PrivateHeaders</i> directory contained directly in it\nthat ends in <i>.framework</i>. The name of a framework is\nthe name of this directory excluding the <i>.framework</i>.\nHeaders associated with the framework are found in one of\nthose two directories, with <i>Headers</i> being searched\nfirst. A subframework is a framework directory that is in a\nframework&rsquo;s <i>Frameworks</i> directory. Includes of\nsubframework headers can only appear in a header of a\nframework that contains the subframework, or in a sibling\nsubframework header. Two subframeworks are siblings if they\noccur in the same framework. A subframework should not have\nthe same name as a framework; a warning is issued if this is\nviolated. Currently a subframework cannot have\nsubframeworks; in the future, the mechanism may be extended\nto support this. The standard frameworks can be found in\n<i>/System/Library/Frameworks</i> and\n<i>/Library/Frameworks</i>. An example include looks like\n&quot;#include &lt;Framework/header.h&gt;&quot;, where\n<i>Framework</i> denotes the name of the framework and\n<i>header.h</i> is found in the <i>PrivateHeaders</i> or\n<i>Headers</i> directory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-iframework</b><i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like <b>-F</b>\nexcept the directory is a treated as a system directory. The\nmain difference between this <b>-iframework</b> and\n<b>-F</b> is that with <b>-iframework</b> the compiler does\nnot warn about constructs contained within header files\nfound via <i>dir</i>. This option is valid only for the C\nfamily of languages.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-gused</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit debugging\ninformation for symbols that are used. For stabs debugging\nformat, this enables\n<b>-feliminate-unused-debug-symbols</b>. This is by\ndefault</big> ON.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-gfull</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit debugging\ninformation for all symbols and types.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmacosx-version-min=</b><i>version</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The earliest\nversion of MacOS X that this executable will run on is\n<i>version</i>. Typical values of <i>version</i> include\n10.1, 10.2, and 10.3.9.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthe compiler was built to use the system&rsquo;s headers by\ndefault, then the default for this option is the system\nversion on which the compiler is running, otherwise the\ndefault is to make choices that are compatible with as many\nsystems and code bases as possible.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mkernel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable kernel\ndevelopment mode. The <b>-mkernel</b> option sets\n<b>-static</b>, <b>-fno-common</b>,\n<b>-fno-use-cxa-atexit</b>, <b>-fno-exceptions</b>,\n<b>-fno-non-call-exceptions</b>, <b>-fapple-kext</b>,\n<b>-fno-weak</b> and <b>-fno-rtti</b> where applicable. This\nmode also sets <b>-mno-altivec</b>, <b>-msoft-float</b>,\n<b>-fno-builtin</b> and <b>-mlong-branch</b> for PowerPC\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mone-byte-bool</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Override the\ndefaults for &quot;bool&quot; so that\n&quot;sizeof(bool)==1&quot;. By default\n&quot;sizeof(bool)&quot; is 4 when compiling for\nDarwin/PowerPC and 1 when compiling for Darwin/x86, so this\noption has no effect on x86.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nThe <b>-mone-byte-bool</b> switch causes</big> GCC <big>to\ngenerate code that is not binary compatible with code\ngenerated without that switch. Using this switch may require\nrecompiling all other modules in a program, including system\nlibraries. Use this switch to conform to a non-default data\nmodel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-and-continue\n<br>\n-ffix-and-continue <br>\n-findirect-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nsuitable for fast turnaround development, such as to\nallow</big> GDB <big>to dynamically load <i>.o</i> files\ninto already-running programs. <b>-findirect-data</b> and\n<b>-ffix-and-continue</b> are provided for backwards\ncompatibility.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-all_load</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Loads all\nmembers of static archive libraries. See man <a href=\"https://man.page/1/ld\">ld(1)</a>\nfor more information.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-arch_errors_fatal</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Cause the errors\nhaving to do with files that have the wrong architecture to\nbe fatal.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-bind_at_load</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Causes the\noutput file to be marked such that the dynamic linker will\nbind all undefined references when the file is loaded or\nlaunched.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-bundle</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Produce a Mach-o\nbundle format file. See man <a href=\"https://man.page/1/ld\">ld(1)</a> for more\ninformation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-bundle_loader</b>\n<i>executable</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nspecifies the <i>executable</i> that will load the build\noutput file being linked. See man <a href=\"https://man.page/1/ld\">ld(1)</a> for more\ninformation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-dynamiclib</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When passed this\noption,</big> GCC <big>produces a dynamic library instead of\nan executable when linking, using the Darwin <i>libtool</i>\ncommand.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-force_cpusubtype_ALL</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This\ncauses</big> GCC <big>&rsquo;s output file to have the</big>\n<b>ALL</b> <big>subtype, instead of one controlled by the\n<b>-mcpu</b> or <b>-march</b> option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-allowable_client</b>\n<i>client_name</i> <b><br>\n-client_name <br>\n-compatibility_version <br>\n-current_version <br>\n-dead_strip <br>\n-dependency-file <br>\n-dylib_file <br>\n-dylinker_install_name <br>\n-dynamic <br>\n-exported_symbols_list <br>\n-filelist <br>\n-flat_namespace <br>\n-force_flat_namespace <br>\n-headerpad_max_install_names <br>\n-image_base <br>\n-init <br>\n-install_name <br>\n-keep_private_externs <br>\n-multi_module <br>\n-multiply_defined <br>\n-multiply_defined_unused <br>\n-noall_load <br>\n-no_dead_strip_inits_and_terms <br>\n-nofixprebinding <br>\n-nomultidefs <br>\n-noprebind <br>\n-noseglinkedit <br>\n-pagezero_size <br>\n-prebind <br>\n-prebind_all_twolevel_modules <br>\n-private_bundle <br>\n-read_only_relocs <br>\n-sectalign <br>\n-sectobjectsymbols <br>\n-whyload <br>\n-seg1addr <br>\n-sectcreate <br>\n-sectobjectsymbols <br>\n-sectorder <br>\n-segaddr <br>\n-segs_read_only_addr <br>\n-segs_read_write_addr <br>\n-seg_addr_table <br>\n-seg_addr_table_filename <br>\n-seglinkedit <br>\n-segprot <br>\n-segs_read_only_addr <br>\n-segs_read_write_addr <br>\n-single_module <br>\n-static <br>\n-sub_library <br>\n-sub_umbrella <br>\n-twolevel_namespace <br>\n-umbrella <br>\n-undefined <br>\n-unexported_symbols_list <br>\n-weak_reference_mismatches <br>\n-whatsloaded</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\nare passed to the Darwin linker. The Darwin linker man page\ndescribes them in detail.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>DEC\n<big>Alpha Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the</big> DEC <big>Alpha\nimplementations: <b><br>\n-mno-soft-float <br>\n-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe hardware floating-point instructions for floating-point\noperations. When <b>-msoft-float</b> is specified, functions\nin <i>libgcc.a</i> are used to perform floating-point\noperations. Unless they are replaced by routines that\nemulate the floating-point operations, or compiled in such a\nway as to call such emulations routines, these routines\nissue floating-point operations. If you are compiling for an\nAlpha without floating-point operations, you must ensure\nthat the library is built so as not to call\nthem.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat Alpha implementations without floating-point operations\nare required to have floating-point\nregisters.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfp-reg <br>\n-mno-fp-regs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the floating-point register set.\n<b>-mno-fp-regs</b> implies <b>-msoft-float</b>. If the\nfloating-point register set is not used, floating-point\noperands are passed in integer registers as if they were\nintegers and floating-point results are passed in $0 instead\nof $f0. This is a non-standard calling sequence, so any\nfunction with a floating-point argument or return value\ncalled by code compiled with <b>-mno-fp-regs</b> must also\nbe compiled with that option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>A\ntypical use of this option is building a kernel that does\nnot use, and hence need not save and restore, any\nfloating-point registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mieee</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The Alpha\narchitecture implements floating-point hardware optimized\nfor maximum performance. It is mostly compliant with\nthe</big> IEEE <big>floating-point standard. However, for\nfull compliance, software assistance is required. This\noption generates code fully IEEE-compliant code\n<i>except</i> that the <i>inexact-flag</i> is not maintained\n(see below). If this option is turned on, the preprocessor\nmacro &quot;_IEEE_FP&quot; is defined during compilation.\nThe resulting code is less efficient but is able to\ncorrectly support denormalized numbers and exceptional</big>\nIEEE <big>values such as not-a-number and plus/minus\ninfinity. Other Alpha compilers call this option\n<b>-ieee_with_no_inexact</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mieee-with-inexact</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This is like\n<b>-mieee</b> except the generated code also maintains\nthe</big> IEEE <i><big>inexact-flag</big></i><big>. Turning\non this option causes the generated code to implement\nfully-compliant</big> IEEE <big>math. In addition to\n&quot;_IEEE_FP&quot;, &quot;_IEEE_FP_EXACT&quot; is defined\nas a preprocessor macro. On some Alpha implementations the\nresulting code may execute significantly slower than the\ncode generated by default. Since there is very little code\nthat depends on the <i>inexact-flag</i>, you should normally\nnot specify this option. Other Alpha compilers call this\noption <b>-ieee_with_inexact</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfp-trap-mode=</b><i>trap-mode</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols what floating-point related traps are enabled.\nOther Alpha compilers call this option <b>-fptm</b>\n<i>trap-mode</i>. The trap mode can be set to one of four\nvalues:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>n</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>This is the default (normal) setting. The\nonly traps that are enabled are the ones that cannot be\ndisabled in software (e.g., division by zero\ntrap).</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>u</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>In addition to the traps enabled by\n<b>n</b>, underflow traps are enabled as\nwell.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>su</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Like <b>u</b>, but the instructions are\nmarked to be safe for software completion (see Alpha\narchitecture manual for details).</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>sui</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Like <b>su</b>, but inexact traps are\nenabled as well.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfp-rounding-mode=</b><i>rounding-mode</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Selects\nthe</big> IEEE <big>rounding mode. Other Alpha compilers\ncall this option <b>-fprm</b> <i>rounding-mode</i>. The\n<i>rounding-mode</i> can be one of:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>n</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Normal</big> IEEE <big>rounding mode.\nFloating-point numbers are rounded towards the nearest\nmachine number or towards the even machine number in case of\na tie.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>m</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Round towards minus\ninfinity.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>c</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Chopped rounding mode. Floating-point\nnumbers are rounded towards zero.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>d</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Dynamic rounding mode. A field in the\nfloating-point control register (<i>fpcr</i>, see Alpha\narchitecture reference manual) controls the rounding mode in\neffect. The C library initializes this register for rounding\ntowards plus infinity. Thus, unless your program modifies\nthe <i>fpcr</i>, <b>d</b> corresponds to round towards plus\ninfinity.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtrap-precision=</b><i>trap-precision</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>In the Alpha\narchitecture, floating-point traps are imprecise. This means\nwithout software assistance it is impossible to recover from\na floating trap and program execution normally needs to be\nterminated.</big> GCC <big>can generate code that can assist\noperating system trap handlers in determining the exact\nlocation that caused a floating-point trap. Depending on the\nrequirements of an application, different levels of\nprecisions can be selected:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>p</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Program precision. This option is the\ndefault and means a trap handler can only identify which\nprogram caused a floating-point\nexception.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>f</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Function precision. The trap handler can\ndetermine the function that caused a floating-point\nexception.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big><b>i</b></big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Instruction precision. The trap handler\ncan determine the exact instruction that caused a\nfloating-point exception.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Other\nAlpha compilers provide the equivalent options called\n<b>-scope_safe</b> and\n<b>-resumption_safe</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mieee-conformant</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nmarks the generated code as</big> IEEE <big>conformant. You\nmust not use this option unless you also specify\n<b>-mtrap-precision=i</b> and either\n<b>-mfp-trap-mode=su</b> or <b>-mfp-trap-mode=sui</b>. Its\nonly effect is to emit the line <b>.eflag 48</b> in the\nfunction prologue of the generated assembly\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbuild-constants</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Normally</big>\nGCC <big>examines a 32- or 64-bit integer constant to see if\nit can construct it from smaller constants in two or three\ninstructions. If it cannot, it outputs the constant as a\nliteral and generates code to load it from the data segment\nat run time.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Use\nthis option to require</big> GCC <big>to construct\n<i>all</i> integer constants using code, even if it takes\nmore instructions (the maximum is\nsix).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ntypically use this option to build a shared library dynamic\nloader. Itself a shared library, it must relocate itself in\nmemory before it can find the variables and constants in its\nown data segment.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbwx <br>\n-mno-bwx <br>\n-mcix <br>\n-mno-cix <br>\n-mfix <br>\n-mno-fix <br>\n-mmax <br>\n-mno-max</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Indicate\nwhether</big> GCC <big>should generate code to use the\noptional</big> BWX, CIX, FIX <big>and</big> MAX\n<big>instruction sets. The default is to use the instruction\nsets supported by the</big> CPU <big>type specified via\n<b>-mcpu=</b> option or that of the</big> CPU <big>on\nwhich</big> GCC <big>was built if none is\nspecified.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfloat-vax\n<br>\n-mfloat-ieee</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use)</big> VAX F <big>and G\nfloating-point arithmetic instead of</big> IEEE <big>single\nand double precision.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mexplicit-relocs\n<br>\n-mno-explicit-relocs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Older Alpha\nassemblers provided no way to generate symbol relocations\nexcept via assembler macros. Use of these macros does not\nallow optimal instruction scheduling.</big> GNU\n<big>binutils as of version 2.12 supports a new syntax that\nallows the compiler to explicitly mark which relocations\nshould apply to which instructions. This option is mostly\nuseful for debugging, as</big> GCC <big>detects the\ncapabilities of the assembler when it is built and sets the\ndefault accordingly.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmall-data\n<br>\n-mlarge-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\n<b>-mexplicit-relocs</b> is in effect, static data is\naccessed via <i>gp-relative</i> relocations. When\n<b>-msmall-data</b> is used, objects 8 bytes long or smaller\nare placed in a <i>small data area</i> (the\n&quot;.sdata&quot; and &quot;.sbss&quot; sections) and are\naccessed via 16-bit relocations off of the $gp register.\nThis limits the size of the small data area to 64KB, but\nallows the variables to be directly accessed via a single\ninstruction.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-mlarge-data</b>. With this option the data\narea is limited to just below 2GB. Programs that require\nmore than 2GB of data must use &quot;malloc&quot; or\n&quot;mmap&quot; to allocate the data in the heap instead of\nin the program&rsquo;s data segment.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\ngenerating code for shared libraries, <b>-fpic</b> implies\n<b>-msmall-data</b> and <b>-fPIC</b> implies\n<b>-mlarge-data</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmall-text\n<br>\n-mlarge-text</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\n<b>-msmall-text</b> is used, the compiler assumes that the\ncode of the entire program (or shared library) fits in 4MB,\nand is thus reachable with a branch instruction. When\n<b>-msmall-data</b> is used, the compiler can assume that\nall local symbols share the same $gp value, and thus reduce\nthe number of instructions required for a function call from\n4 to 1.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-mlarge-text</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ninstruction set and instruction scheduling parameters for\nmachine type <i>cpu_type</i>. You can specify either\nthe</big> <b>EV</b> <big>style name or the corresponding\nchip number.</big> GCC <big>supports scheduling parameters\nfor the</big> EV4, EV5 <big>and</big> EV6 <big>family of\nprocessors and chooses the default values for the\ninstruction set from the processor you specify. If you do\nnot specify a processor type,</big> GCC <big>defaults to the\nprocessor on which the compiler was\nbuilt.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Supported\nvalues for <i>cpu_type</i> are</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>ev4</b></big></big></big></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ev45 <br>\n21064</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Schedules as\nan</big> EV4 <big>and has no instruction set\nextensions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>ev5</b></big></big></big></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>21164</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Schedules as\nan</big> EV5 <big>and has no instruction set\nextensions.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ev56 <br>\n21164a</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Schedules as\nan</big> EV5 <big>and supports the</big> BWX\n<big>extension.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>pca56 <br>\n21164pc <br>\n21164PC</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Schedules as\nan</big> EV5 <big>and supports the</big> BWX <big>and</big>\nMAX <big>extensions.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>ev6</b></big></big></big></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>21264</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Schedules as\nan</big> EV6 <big>and supports the</big> BWX, FIX,\n<big>and</big> MAX <big>extensions.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ev67 <br>\n21264a</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Schedules as\nan</big> EV6 <big>and supports the</big> BWX, CIX, FIX,\n<big>and</big> MAX <big>extensions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Native\ntoolchains also support the value <b>native</b>, which\nselects the best architecture option for the host processor.\n<b>-mcpu=native</b> has no effect if</big> GCC <big>does not\nrecognize the processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set only the\ninstruction scheduling parameters for machine type\n<i>cpu_type</i>. The instruction set is not\nchanged.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Native\ntoolchains also support the value <b>native</b>, which\nselects the best architecture option for the host processor.\n<b>-mtune=native</b> has no effect if</big> GCC <big>does\nnot recognize the processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmemory-latency=</b><i>time</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Sets the latency\nthe scheduler should assume for typical memory references as\nseen by the application. This number is highly dependent on\nthe memory access patterns used by the application and the\nsize of the external cache on the\nmachine.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Valid\noptions for <i>time</i> are <i><br>\nnumber</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>A decimal number\nrepresenting clock cycles.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>L1</b></big></big></big></p></td>\n<td width=\"80%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>L2</b></big></big></big></p></td>\n<td width=\"80%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>L3</b></big></big></big></p></td>\n<td width=\"80%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>main</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The compiler\ncontains estimates of the number of clock cycles for\n&quot;typical&quot;</big> EV4 &amp; EV5 <big>hardware for\nthe Level 1, 2 &amp; 3 caches (also called Dcache, Scache,\nand Bcache), as well as to main memory. Note that L3 is only\nvalid for</big> EV5.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i><big>eBPF\nOptions</big></i> <big><b><br>\n-mframe-limit=</b><i>bytes</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This specifies\nthe hard limit for frame sizes, in bytes. Currently, the\nvalue that can be specified should be less than or equal to\n<b>32767</b>. Defaults to whatever limit is imposed by the\nversion of the Linux kernel targeted.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mkernel=</b><i>version</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This specifies\nthe minimum version of the kernel that will run the compiled\nprogram.</big> GCC <big>uses this version to determine which\ninstructions to use, what kernel helpers to allow, etc.\nCurrently, <i>version</i> can be one of <b>4.0</b>,\n<b>4.1</b>, <b>4.2</b>, <b>4.3</b>, <b>4.4</b>, <b>4.5</b>,\n<b>4.6</b>, <b>4.7</b>, <b>4.8</b>, <b>4.9</b>, <b>4.10</b>,\n<b>4.11</b>, <b>4.12</b>, <b>4.13</b>, <b>4.14</b>,\n<b>4.15</b>, <b>4.16</b>, <b>4.17</b>, <b>4.18</b>,\n<b>4.19</b>, <b>4.20</b>, <b>5.0</b>, <b>5.1</b>,\n<b>5.2</b>, <b>latest</b> and\n<b>native</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a big-endian target.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a little-endian target. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxbpf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor an expanded version of</big> BPF, <big>which relaxes\nsome of the restrictions imposed by the</big> BPF\n<big>architecture: <br>\n-&lt;Save and restore callee-saved registers at function\nentry and&gt;</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>exit,\nrespectively.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>FR30\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined specifically for the</big> FR30\n<big>port. <b><br>\n-msmall-model</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the small\naddress space model. This can produce smaller code, but it\ndoes assume that all symbolic values and addresses fit into\na 20-bit range.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-lsim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\nruntime support has been provided and so there is no need to\ninclude the simulator library (<i>libsim.a</i>) on the\nlinker command line.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>FT32\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined specifically for the</big> FT32\n<big>port. <b><br>\n-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies that\nthe program will be run on the simulator. This causes an\nalternate runtime startup and library to be linked. You must\nnot use this option when generating programs that will run\non real hardware; you must provide your own runtime library\nfor whatever I/O functions are needed.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlra</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable Local\nRegister Allocation. This is still experimental for</big>\nFT32, <big>so by default the compiler uses standard\nreload.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnodiv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use div\nand mod instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mft32b</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable use of\nthe extended instructions of the</big> FT32B\n<big>processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcompress</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compress all\ncode using the Ft32B code compression\nscheme.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnopm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\ncode that reads program memory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>FRV\n<big>Options</big></i> <big><b><br>\n-mgpr-32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Only use the\nfirst 32 general-purpose registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgpr-64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use all 64\ngeneral-purpose registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfpr-32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use only the\nfirst 32 floating-point registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfpr-64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use all 64\nfloating-point registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use hardware\ninstructions for floating-point\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use library\nroutines for floating-point\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malloc-cc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Dynamically\nallocate condition code registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfixed-cc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not try to\ndynamically allocate condition code registers, only use\n&quot;icc0&quot; and &quot;fcc0&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdword</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Change</big> ABI\n<big>to use double word insns.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-dword</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\ndouble word instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdouble</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use\nfloating-point double instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-double</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\nfloating-point double instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmedia</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use media\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-media</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use media\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmuladd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use multiply and\nadd/subtract instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-muladd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\nmultiply and add/subtract\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfdpic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the</big>\nFDPIC ABI, <big>which uses function descriptors to represent\npointers to functions. Without any PIC/PIE-related options,\nit implies <b>-fPIE</b>. With <b>-fpic</b> or <b>-fpie</b>,\nit assumes</big> GOT <big>entries and small data are within\na 12-bit range from the</big> GOT <big>base address; with\n<b>-fPIC</b> or <b>-fPIE</b>,</big> GOT <big>offsets are\ncomputed with 32 bits. With a <b>bfin-elf</b> target, this\noption implies <b>-msim</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-plt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable inlining\nof</big> PLT <big>entries in function calls to functions\nthat are not known to bind locally. It has no effect without\n<b>-mfdpic</b>. It&rsquo;s enabled by default if optimizing\nfor speed and compiling for shared libraries (i.e.,\n<b>-fPIC</b> or <b>-fpic</b>), or when an optimization\noption such as <b>-O3</b> or above is present in the command\nline.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mTLS</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume a\nlarge</big> TLS <big>segment when generating thread-local\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not assume a\nlarge</big> TLS <big>segment when generating thread-local\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgprel-ro</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof &quot;GPREL&quot; relocations in the</big> FDPIC ABI\n<big>for data that is known to be in read-only sections.\nIt&rsquo;s enabled by default, except for <b>-fpic</b> or\n<b>-fpie</b>: even though it may help make the global offset\ntable smaller, it trades 1 instruction for 4. With\n<b>-fPIC</b> or <b>-fPIE</b>, it trades 3 instructions for\n4, one of which may be shared by multiple symbols, and it\navoids the need for a</big> GOT <big>entry for the\nreferenced symbol, so it&rsquo;s more likely to be a win. If\nit is not, <b>-mno-gprel-ro</b> can be used to disable\nit.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-multilib-library-pic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link with the\n(library, not</big> FD <big>) pic libraries. It&rsquo;s\nimplied by <b>-mlibrary-pic</b>, as well as by <b>-fPIC</b>\nand <b>-fpic</b> without <b>-mfdpic</b>. You should never\nhave to use it explicitly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlinked-fp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Follow the</big>\nEABI <big>requirement of always creating a frame pointer\nwhenever a stack frame is allocated. This option is enabled\nby default and can be disabled with\n<b>-mno-linked-fp</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use indirect\naddressing to call functions outside the current compilation\nunit. This allows the functions to be placed anywhere within\nthe 32-bit address space.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malign-labels</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Try to align\nlabels to an 8-byte boundary by inserting NOPs into the\nprevious packet. This option only has an effect when</big>\nVLIW <big>packing is enabled. It doesn&rsquo;t create new\npackets; it merely adds NOPs to existing\nones.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlibrary-pic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nposition-independent</big> EABI\n<big>code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-macc-4</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use only the\nfirst four media accumulator\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-macc-8</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use all eight\nmedia accumulator registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pack</big> VLIW\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-pack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not\npack</big> VLIW <big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-eflags</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not\nmark</big> ABI <big>switches in\ne_flags.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcond-move</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof conditional-move instructions\n(default).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-cond-move</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable the use\nof conditional-move instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mscc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof conditional set instructions\n(default).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-scc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable the use\nof conditional set instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcond-exec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof conditional execution (default).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-cond-exec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable the use\nof conditional execution.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvliw-branch</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Run a pass to\npack branches into</big> VLIW <big>instructions\n(default).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-vliw-branch</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not run a\npass to pack branches into</big> VLIW\n<big>instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmulti-cond-exec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\noptimization of &quot;&amp;&amp;&quot; and &quot;||&quot; in\nconditional execution (default).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-multi-cond-exec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\noptimization of &quot;&amp;&amp;&quot; and &quot;||&quot; in\nconditional execution.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnested-cond-exec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable nested\nconditional execution optimizations\n(default).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-nested-cond-exec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable nested\nconditional execution optimizations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nswitch is mainly for debugging the compiler and will likely\nbe removed in a future version.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-moptimize-membar</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This switch\nremoves redundant &quot;membar&quot; instructions from the\ncompiler-generated code. It is enabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-optimize-membar</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This switch\ndisables the automatic removal of redundant\n&quot;membar&quot; instructions from the generated\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtomcat-stats</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Cause gas to\nprint out tomcat statistics.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the\nprocessor type for which to generate code. Possible values\nare <b>frv</b>, <b>fr550</b>, <b>tomcat</b>, <b>fr500</b>,\n<b>fr450</b>, <b>fr405</b>, <b>fr400</b>, <b>fr300</b> and\n<b>simple</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>GNU/Linux\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for GNU/Linux targets: <b><br>\n-mglibc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the</big>\nGNU C <big>library. This is the default except on\n<b>*-*-linux-*uclibc*</b>, <b>*-*-linux-*musl*</b> and\n<b>*-*-linux-*android*</b> targets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-muclibc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use uClibc C\nlibrary. This is the default on <b>*-*-linux-*uclibc*</b>\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmusl</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the musl C\nlibrary. This is the default on <b>*-*-linux-*musl*</b>\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbionic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use Bionic C\nlibrary. This is the default on <b>*-*-linux-*android*</b>\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mandroid</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile code\ncompatible with Android platform. This is the default on\n<b>*-*-linux-*android*</b> targets.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\ncompiling, this option enables <b>-mbionic</b>,\n<b>-fPIC</b>, <b>-fno-exceptions</b> and <b>-fno-rtti</b> by\ndefault. When linking, this option makes the</big> GCC\n<big>driver pass Android-specific options to the linker.\nFinally, this option causes the preprocessor macro\n&quot;__ANDROID__&quot; to be defined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-tno-android-cc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\ncompilation effects of <b>-mandroid</b>, i.e., do not enable\n<b>-mbionic</b>, <b>-fPIC</b>, <b>-fno-exceptions</b> and\n<b>-fno-rtti</b> by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-tno-android-ld</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable linking\neffects of <b>-mandroid</b>, i.e., pass standard Linux\nlinking options to the linker.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>H8/300\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the H8/300\nimplementations: <b><br>\n-mrelax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Shorten some\naddress references at link time, when possible; uses the\nlinker option <b>-relax</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-mh</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Generate code for the\nH8/300H.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-ms</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Generate code for the\nH8S.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-mn</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Generate code for the H8S and H8/300H in\nthe normal mode. This switch must be used either with\n<b>-mh</b> or <b>-ms</b>.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-ms2600</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the H8S/2600. This switch must be used with\n<b>-ms</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mexr</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Extended\nregisters are stored on stack before execution of function\nwith monitor attribute. Default option is <b>-mexr</b>. This\noption is valid only for H8S targets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-exr</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Extended\nregisters are not stored on stack before execution of\nfunction with monitor attribute. Default option is\n<b>-mno-exr</b>. This option is valid only for H8S\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mint32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make\n&quot;int&quot; data 32 bits by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malign-300</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On the H8/300H\nand H8S, use the same alignment rules as for the H8/300. The\ndefault for the H8/300H and H8S is to align longs and floats\non 4-byte boundaries. <b>-malign-300</b> causes them to be\naligned on 2-byte boundaries. This option has no effect on\nthe H8/300.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>HPPA\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the</big> HPPA <big>family\nof computers: <b><br>\n-march=</b><i>architecture-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the specified architecture. The choices for\n<i>architecture-type</i> are <b>1.0</b> for</big> PA 1.0,\n<b><big>1.1</big></b> <big>for</big> PA 1.1, <big>and\n<b>2.0</b> for</big> PA 2.0 <big>processors. Refer to\n<i>/usr/lib/sched.models</i> on an HP-UX system to determine\nthe proper architecture option for your machine. Code\ncompiled for lower numbered architectures runs on higher\nnumbered architectures, but not the other way\naround.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpa-risc-1-0\n<br>\n-mpa-risc-1-1 <br>\n-mpa-risc-2-0</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Synonyms for\n<b>-march=1.0</b>, <b>-march=1.1</b>, and <b>-march=2.0</b>\nrespectively.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcaller-copies</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The caller\ncopies function arguments passed by hidden reference. This\noption should be used with care as it is not compatible with\nthe default 32-bit runtime. However, only aggregates larger\nthan eight bytes are passed by hidden reference and the\noption provides better compatibility with\nOpenMP.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mjump-in-delay</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nignored and provided for compatibility purposes\nonly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdisable-fpregs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Prevent\nfloating-point registers from being used in any manner. This\nis necessary for compiling kernels that perform lazy context\nswitching of floating-point registers. If you use this\noption and attempt to perform floating-point operations, the\ncompiler aborts.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdisable-indexing</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Prevent the\ncompiler from using indexing address modes. This avoids some\nrather obscure problems when compiling</big> MIG\n<big>generated code under</big> MACH.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mno-space-regs</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat assumes the target has no space registers. This\nallows</big> GCC <big>to generate faster indirect calls and\nuse unscaled index address modes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Such\ncode is suitable for level 0</big> PA <big>systems and\nkernels.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfast-indirect-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat assumes calls never cross space boundaries. This\nallows</big> GCC <big>to emit code that performs faster\nindirect calls.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption does not work in the presence of shared libraries or\nnested functions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfixed-range=</b><i>register-range</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\ntreating the given register range as fixed registers. A\nfixed register is one that the register allocator cannot\nuse. This is useful when compiling kernel code. A register\nrange is specified as two registers separated by a dash.\nMultiple register ranges can be specified separated by a\ncomma.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-load-store</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\n3-instruction load and store sequences as sometimes required\nby the HP-UX 10 linker. This is equivalent to the <b>+k</b>\noption to the</big> HP <big>compilers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mportable-runtime</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the portable\ncalling conventions proposed by</big> HP <big>for</big> ELF\n<big>systems.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgas</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof assembler directives only</big> GAS\n<big>understands.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mschedule=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Schedule code\naccording to the constraints for the machine type\n<i>cpu-type</i>. The choices for <i>cpu-type</i> are <b>700\n7100</b>, <b>7100LC</b>, <b>7200</b>, <b>7300</b> and\n<b>8000</b>. Refer to <i>/usr/lib/sched.models</i> on an\nHP-UX system to determine the proper scheduling option for\nyour machine. The default scheduling is\n<b>8000</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlinker-opt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\noptimization pass in the HP-UX linker. Note this makes\nsymbolic debugging impossible. It also triggers a bug in the\nHP-UX 8 and HP-UX 9 linkers in which they give bogus error\nmessages when linking some programs.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\ncontaining library calls for floating point. <b>Warning:</b>\nthe requisite libraries are not available for all</big> HPPA\n<big>targets. Normally the facilities of the machine&rsquo;s\nusual C compiler are used, but this cannot be done directly\nin cross-compilation. You must make your own arrangements to\nprovide suitable library functions for\ncross-compilation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-msoft-float</b>\nchanges the calling convention in the output file;\ntherefore, it is only useful if you compile <i>all</i> of a\nprogram with this option. In particular, you need to compile\n<i>libgcc.a</i>, the library that comes with</big> GCC,\n<big>with <b>-msoft-float</b> in order for this to\nwork.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msio</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate the\npredefine, &quot;_SIO&quot;, for server</big> IO. <big>The\ndefault is <b>-mwsio</b>. This generates the predefines,\n&quot;__hp9000s700&quot;, &quot;__hp9000s700__&quot; and\n&quot;_WSIO&quot;, for workstation</big> IO. <big>These\noptions are available under HP-UX and\nHI-UX.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgnu-ld</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use options\nspecific to</big> GNU <b><big>ld</big></b><big>. This passes\n<b>-shared</b> to <b>ld</b> when building a shared library.\nIt is the default when</big> GCC <big>is configured,\nexplicitly or implicitly, with the</big> GNU <big>linker.\nThis option does not affect which <b>ld</b> is called; it\nonly changes what parameters are passed to that <b>ld</b>.\nThe <b>ld</b> that is called is determined by the\n<b>--with-ld</b> configure option,</big> GCC <big>&rsquo;s\nprogram search path, and finally by the user&rsquo;s</big>\n<b>PATH</b> <big>. The linker used by</big> GCC <big>can be\nprinted using <b>which &rsquo;gcc\n-print-prog-name=ld&rsquo;</b>. This option is only\navailable on the 64-bit HP-UX</big> GCC, <big>i.e.\nconfigured with\n<b>hppa*64*-*-hpux*</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhp-ld</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use options\nspecific to</big> HP <b><big>ld</big></b><big>. This passes\n<b>-b</b> to <b>ld</b> when building a shared library and\npasses <b>+Accept TypeMismatch</b> to <b>ld</b> on all\nlinks. It is the default when</big> GCC <big>is configured,\nexplicitly or implicitly, with the</big> HP <big>linker.\nThis option does not affect which <b>ld</b> is called; it\nonly changes what parameters are passed to that <b>ld</b>.\nThe <b>ld</b> that is called is determined by the\n<b>--with-ld</b> configure option,</big> GCC <big>&rsquo;s\nprogram search path, and finally by the user&rsquo;s</big>\n<b>PATH</b> <big>. The linker used by</big> GCC <big>can be\nprinted using <b>which &rsquo;gcc\n-print-prog-name=ld&rsquo;</b>. This option is only\navailable on the 64-bit HP-UX</big> GCC, <big>i.e.\nconfigured with\n<b>hppa*64*-*-hpux*</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses long call sequences. This ensures that a call is\nalways able to reach linker generated stubs. The default is\nto generate long calls only when the distance from the call\nsite to the beginning of the function or translation unit,\nas the case may be, exceeds a predefined limit set by the\nbranch type being used. The limits for normal calls are\n7,600,000 and 240,000 bytes, respectively for the</big> PA\n2.0 <big>and</big> PA 1.X <big>architectures. Sibcalls are\nalways limited at 240,000 bytes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Distances\nare measured from the beginning of functions when using the\n<b>-ffunction-sections</b> option, or when using the\n<b>-mgas</b> and <b>-mno-portable-runtime</b> options\ntogether under HP-UX with the</big> SOM\n<big>linker.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nis normally not desirable to use this option as it degrades\nperformance. However, it may be useful in large\napplications, particularly when partial linking is used to\nbuild the application.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ntypes of long calls used depends on the capabilities of the\nassembler and linker, and the type of code being generated.\nThe impact on systems that support long absolute calls, and\nlong pic symbol-difference or pc-relative calls should be\nrelatively small. However, an indirect call is used on\n32-bit</big> ELF <big>systems in pic code and it is quite\nlong.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-munix=</b><i>unix-std</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\ncompiler predefines and select a startfile for the\nspecified</big> UNIX <big>standard. The choices for\n<i>unix-std</i> are <b>93</b>, <b>95</b> and <b>98</b>.\n<b>93</b> is supported on all HP-UX versions. <b>95</b> is\navailable on HP-UX 10.10 and later. <b>98</b> is available\non HP-UX 11.11 and later. The default values are <b>93</b>\nfor HP-UX 10.00, <b>95</b> for HP-UX 10.10 though to 11.00,\nand <b>98</b> for HP-UX 11.11 and\nlater.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-munix=93</b>\nprovides the same predefines as</big> GCC 3.3 <big>and 3.4.\n<b>-munix=95</b> provides additional predefines for\n&quot;XOPEN_UNIX&quot; and\n&quot;_XOPEN_SOURCE_EXTENDED&quot;, and the startfile\n<i>unix95.o</i>. <b>-munix=98</b> provides additional\npredefines for &quot;_XOPEN_UNIX&quot;,\n&quot;_XOPEN_SOURCE_EXTENDED&quot;,\n&quot;_INCLUDE__STDC_A1_SOURCE&quot; and\n&quot;_INCLUDE_XOPEN_SOURCE_500&quot;, and the startfile\n<i>unix98.o</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nis <i>important</i> to note that this option changes the\ninterfaces for various library routines. It also affects the\noperational behavior of the C library. Thus, <i>extreme</i>\ncare is needed in using this option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Library\ncode that is intended to operate with more than one</big>\nUNIX <big>standard must test, set and restore the variable\n&quot;__xpg4_extended_mask&quot; as appropriate. Most</big>\nGNU <big>software doesn&rsquo;t provide this\ncapability.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nolibdld</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Suppress the\ngeneration of link options to search libdld.sl when the\n<b>-static</b> option is specified on HP-UX 10 and\nlater.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-static</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The HP-UX\nimplementation of setlocale in libc has a dependency on\nlibdld.sl. There isn&rsquo;t an archive version of\nlibdld.sl. Thus, when the <b>-static</b> option is\nspecified, special link options are needed to resolve this\ndependency.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nHP-UX 10 and later, the</big> GCC <big>driver adds the\nnecessary options to link with libdld.sl when the\n<b>-static</b> option is specified. This causes the\nresulting binary to be dynamic. On the 64-bit port, the\nlinkers generate dynamic binaries by default in any case.\nThe <b>-nolibdld</b> option can be used to prevent the</big>\nGCC <big>driver from adding these link\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-threads</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Add support for\nmultithreading with the <i>dce thread</i> library under\nHP-UX. This option sets flags for both the preprocessor and\nlinker.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>IA-64\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nare the <b>-m</b> options defined for the Intel</big> IA-64\n<big>architecture. <b><br>\n-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a big-endian target. This is the default for\nHP-UX.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a little-endian target. This is the default for</big>\nAIX5 <big>and GNU/Linux.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgnu-as <br>\n-mno-gnu-as</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (or\ndon&rsquo;t) code for the</big> GNU <big>assembler. This is\nthe default.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgnu-ld <br>\n-mno-gnu-ld</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (or\ndon&rsquo;t) code for the</big> GNU <big>linker. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-pic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat does not use a global pointer register. The result is\nnot position independent code, and violates the</big> IA-64\nABI.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mvolatile-asm-stop\n<br>\n-mno-volatile-asm-stop</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (or\ndon&rsquo;t) a stop bit immediately before and after\nvolatile asm statements.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mregister-names\n<br>\n-mno-register-names</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (or\ndon&rsquo;t) <b>in</b>, <b>loc</b>, and <b>out</b> register\nnames for the stacked registers. This may make assembler\noutput more readable.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sdata\n<br>\n-msdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable (or\nenable) optimizations that use the small data section. This\nmay be useful for working around optimizer\nbugs.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mconstant-gp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses a single constant global pointer value. This is\nuseful when compiling kernel code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mauto-pic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat is self-relocatable. This implies <b>-mconstant-gp</b>.\nThis is useful when compiling firmware\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-float-divide-min-latency</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor inline divides of floating-point values using the\nminimum latency algorithm.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-float-divide-max-throughput</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor inline divides of floating-point values using the\nmaximum throughput algorithm.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-inline-float-divide</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\ninline code for divides of floating-point\nvalues.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-int-divide-min-latency</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor inline divides of integer values using the minimum\nlatency algorithm.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-int-divide-max-throughput</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor inline divides of integer values using the maximum\nthroughput algorithm.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-inline-int-divide</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\ninline code for divides of integer\nvalues.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-sqrt-min-latency</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor inline square roots using the minimum latency\nalgorithm.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-sqrt-max-throughput</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor inline square roots using the maximum throughput\nalgorithm.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-inline-sqrt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\ninline code for &quot;sqrt&quot;.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfused-madd\n<br>\n-mno-fused-madd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do (don&rsquo;t)\ngenerate code that uses the fused multiply/add or\nmultiply/subtract instructions. The default is to use these\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-dwarf2-asm\n<br>\n-mdwarf2-asm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t (or\ndo) generate assembler code for the</big> DWARF <big>line\nnumber debugging info. This may be useful when not using\nthe</big> GNU <big>assembler.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mearly-stop-bits\n<br>\n-mno-early-stop-bits</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow stop bits\nto be placed earlier than immediately preceding the\ninstruction that triggered the stop bit. This can improve\ninstruction scheduling, but does not always do\nso.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfixed-range=</b><i>register-range</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\ntreating the given register range as fixed registers. A\nfixed register is one that the register allocator cannot\nuse. This is useful when compiling kernel code. A register\nrange is specified as two registers separated by a dash.\nMultiple register ranges can be specified separated by a\ncomma.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls-size=</b><i>tls-size</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify bit size\nof immediate</big> TLS <big>offsets. Valid values are 14,\n22, and 64.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tune the\ninstruction scheduling for a particular</big> CPU,\n<big>Valid values are <b>itanium</b>, <b>itanium1</b>,\n<b>merced</b>, <b>itanium2</b>, and\n<b>mckinley</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-milp32 <br>\n-mlp64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a 32-bit or 64-bit environment. The 32-bit environment\nsets int, long and pointer to 32 bits. The 64-bit\nenvironment sets int to 32 bits and long and pointer to 64\nbits. These are HP-UX specific flags.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sched-br-data-spec\n<br>\n-msched-br-data-spec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>(Dis/En)able\ndata speculative scheduling before reload. This results in\ngeneration of &quot;ld.a&quot; instructions and the\ncorresponding check instructions (&quot;ld.c&quot; /\n&quot;chk.a&quot;). The default setting is\ndisabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-ar-data-spec\n<br>\n-mno-sched-ar-data-spec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>(En/Dis)able\ndata speculative scheduling after reload. This results in\ngeneration of &quot;ld.a&quot; instructions and the\ncorresponding check instructions (&quot;ld.c&quot; /\n&quot;chk.a&quot;). The default setting is\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sched-control-spec\n<br>\n-msched-control-spec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>(Dis/En)able\ncontrol speculative scheduling. This feature is available\nonly during region scheduling (i.e. before reload). This\nresults in generation of the &quot;ld.s&quot; instructions\nand the corresponding check instructions &quot;chk.s&quot;.\nThe default setting is disabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-br-in-data-spec\n<br>\n-mno-sched-br-in-data-spec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>(En/Dis)able\nspeculative scheduling of the instructions that are\ndependent on the data speculative loads before reload. This\nis effective only with <b>-msched-br-data-spec</b> enabled.\nThe default setting is enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-ar-in-data-spec\n<br>\n-mno-sched-ar-in-data-spec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>(En/Dis)able\nspeculative scheduling of the instructions that are\ndependent on the data speculative loads after reload. This\nis effective only with <b>-msched-ar-data-spec</b> enabled.\nThe default setting is enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-in-control-spec\n<br>\n-mno-sched-in-control-spec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>(En/Dis)able\nspeculative scheduling of the instructions that are\ndependent on the control speculative loads. This is\neffective only with <b>-msched-control-spec</b> enabled. The\ndefault setting is enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sched-prefer-non-data-spec-insns\n<br>\n\n-msched-prefer-non-data-spec-insns</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If enabled,\ndata-speculative instructions are chosen for schedule only\nif there are no other choices at the moment. This makes the\nuse of the data speculation much more conservative. The\ndefault setting is disabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sched-prefer-non-control-spec-insns\n<br>\n\n-msched-prefer-non-control-spec-insns</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If enabled,\ncontrol-speculative instructions are chosen for schedule\nonly if there are no other choices at the moment. This makes\nthe use of the control speculation much more conservative.\nThe default setting is disabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sched-count-spec-in-critical-path\n<br>\n\n-msched-count-spec-in-critical-path</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If enabled,\nspeculative dependencies are considered during computation\nof the instructions priorities. This makes the use of the\nspeculation a bit more conservative. The default setting is\ndisabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-spec-ldc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use a simple\ndata speculation check. This option is on by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-control-spec-ldc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use a simple\ncheck for control speculation. This option is on by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-stop-bits-after-every-cycle</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Place a stop bit\nafter every cycle when scheduling. This option is on by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-fp-mem-deps-zero-cost</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\nfloating-point stores and loads are not likely to cause a\nconflict when placed into the same instruction group. This\noption is disabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msel-sched-dont-check-control-spec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate checks\nfor control speculation in selective scheduling. This flag\nis disabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-max-memory-insns=</b><i>max-insns</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Limit on the\nnumber of memory insns per instruction group, giving lower\npriority to subsequent memory insns attempting to schedule\nin the same instruction group. Frequently useful to prevent\ncache bank conflicts. The default value is\n1.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-max-memory-insns-hard-limit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the limit\nspecified by <b>msched-max-memory-insns</b> a hard limit,\ndisallowing more than that number in an instruction group.\nOtherwise, the limit is &quot;soft&quot;, meaning that\nnon-memory operations are preferred when the limit is\nreached, but memory operations may still be\nscheduled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>LM32\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the LatticeMico32\narchitecture: <b><br>\n-mbarrel-shift-enabled</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nbarrel-shift instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdivide-enabled</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable divide\nand modulus instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmultiply-enabled</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable multiply\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msign-extend-enabled</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable sign\nextend instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-muser-enabled</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nuser-defined instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>M32C\nOptions</i> <b><br>\n-mcpu=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the</big>\nCPU <big>for which code is generated. <i>name</i> may be one\nof <b>r8c</b> for the R8C/Tiny series, <b>m16c</b> for the\nM16C (up to /60) series, <b>m32cm</b> for the M16C/80\nseries, or <b>m32c</b> for the M32C/80\nseries.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies that\nthe program will be run on the simulator. This causes an\nalternate runtime library to be linked in which supports,\nfor example, file I/O. You must not use this option when\ngenerating programs that will run on real hardware; you must\nprovide your own runtime library for whatever I/O functions\nare needed.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-memregs=</b><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nnumber of memory-based pseudo-registers</big> GCC <big>uses\nduring code generation. These pseudo-registers are used like\nreal registers, so there is a tradeoff between</big> GCC\n<big>&rsquo;s ability to fit the code into available\nregisters, and the performance penalty of using memory\ninstead of registers. Note that all modules in a program\nmust be compiled with the same value for this option.\nBecause of that, you must not use this option with</big> GCC\n<big>&rsquo;s default runtime\nlibraries.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>M32R/D\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for Renesas M32R/D\narchitectures: <b><br>\n-m32r2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the M32R/2.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m32rx</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the M32R/X.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m32r</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the M32R. This is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmodel=small</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume all\nobjects live in the lower 16MB of memory (so that their\naddresses can be loaded with the &quot;ld24&quot;\ninstruction), and assume all subroutines are reachable with\nthe &quot;bl&quot; instruction. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\naddressability of a particular object can be set with the\n&quot;model&quot; attribute.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmodel=medium</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume objects\nmay be anywhere in the 32-bit address space (the compiler\ngenerates &quot;seth/add3&quot; instructions to load their\naddresses), and assume all subroutines are reachable with\nthe &quot;bl&quot; instruction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmodel=large</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume objects\nmay be anywhere in the 32-bit address space (the compiler\ngenerates &quot;seth/add3&quot; instructions to load their\naddresses), and assume subroutines may not be reachable with\nthe &quot;bl&quot; instruction (the compiler generates the\nmuch slower &quot;seth/add3/jl&quot; instruction\nsequence).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=none</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable use of\nthe small data area. Variables are put into one of\n&quot;.data&quot;, &quot;.bss&quot;, or &quot;.rodata&quot;\n(unless the &quot;section&quot; attribute has been\nspecified). This is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nsmall data area consists of sections &quot;.sdata&quot; and\n&quot;.sbss&quot;. Objects may be explicitly put in the\nsmall data area with the &quot;section&quot; attribute using\none of these sections.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=sdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put small global\nand static data in the small data area, but do not generate\nspecial code to reference them.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=use</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put small global\nand static data in the small data area, and generate special\ninstructions to reference them.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-G</b>\n<i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put global and\nstatic objects less than or equal to <i>num</i> bytes into\nthe small data or</big> BSS <big>sections instead of the\nnormal data or</big> BSS <big>sections. The default value of\n<i>num</i> is 8. The <b>-msdata</b> option must be set to\none of <b>sdata</b> or <b>use</b> for this option to have\nany effect.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>All\nmodules should be compiled with the same <b>-G</b>\n<i>num</i> value. Compiling with different values of\n<i>num</i> may or may not work; if it doesn&rsquo;t the\nlinker gives an error message---incorrect code is not\ngenerated.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdebug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Makes the\nM32R-specific code in the compiler display some statistics\nthat might help in debugging programs.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malign-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Align all loops\nto a 32-byte boundary.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-align-loops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not enforce a\n32-byte alignment for loops. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-missue-rate=</b><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Issue\n<i>number</i> instructions per cycle. <i>number</i> can only\nbe 1 or 2.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-cost=</b><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><i>number</i>\ncan only be 1 or 2. If it is 1 then branches are preferred\nover conditional code, if it is 2, then the opposite\napplies.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mflush-trap=</b><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\ntrap number to use to flush the cache. The default is 12.\nValid numbers are between 0 and 15\ninclusive.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-flush-trap</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies that\nthe cache cannot be flushed by using a\ntrap.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mflush-func=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nname of the operating system function to call to flush the\ncache. The default is <b>_flush_cache</b>, but a function\ncall is only used if a trap is not\navailable.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-flush-func</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Indicates that\nthere is no</big> OS <big>function for flushing the\ncache.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>M680x0\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nare the <b>-m</b> options defined for M680x0 and ColdFire\nprocessors. The default settings depend on which\narchitecture was selected when the compiler was configured;\nthe defaults for the most common choices are given below.\n<b><br>\n-march=</b><i>arch</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a specific M680x0 or ColdFire instruction set\narchitecture. Permissible values of <i>arch</i> for M680x0\narchitectures are: <b>68000</b>, <b>68010</b>, <b>68020</b>,\n<b>68030</b>, <b>68040</b>, <b>68060</b> and <b>cpu32</b>.\nColdFire architectures are selected according to\nFreescale&rsquo;s</big> ISA <big>classification and the\npermissible values are: <b>isaa</b>, <b>isaaplus</b>,\n<b>isab</b> and <b>isac</b>.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>defines a macro &quot;__mcf<i>arch</i>__&quot; whenever\nit is generating code for a ColdFire target. The <i>arch</i>\nin this macro is one of the <b>-march</b> arguments given\nabove.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nused together, <b>-march</b> and <b>-mtune</b> select code\nthat runs on a family of similar processors but that is\noptimized for a particular\nmicroarchitecture.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a specific M680x0 or ColdFire processor. The M680x0\n<i>cpu</i>s are: <b>68000</b>, <b>68010</b>, <b>68020</b>,\n<b>68030</b>, <b>68040</b>, <b>68060</b>, <b>68302</b>,\n<b>68332</b> and <b>cpu32</b>. The ColdFire <i>cpu</i>s are\ngiven by the table below, which also classifies the CPUs\ninto families: <br>\nFamily : <b>-mcpu</b> arguments <b><br>\n51</b> : <b>51 51ac 51ag 51cn 51em 51je 51jf 51jg 51jm 51mm\n51qe 51qm <br>\n5206</b> : <b>5202 5204 5206 <br>\n5206e</b> : <b>5206e <br>\n5208</b> : <b>5207 5208 <br>\n5211a</b> : <b>5210a 5211a <br>\n5213</b> : <b>5211 5212 5213 <br>\n5216</b> : <b>5214 5216 <br>\n52235</b> : <b>52230 52231 52232 52233 52234 52235 <br>\n5225</b> : <b>5224 5225 <br>\n52259</b> : <b>52252 52254 52255 52256 52258 52259 <br>\n5235</b> : <b>5232 5233 5234 5235 523x <br>\n5249</b> : <b>5249 <br>\n5250</b> : <b>5250 <br>\n5271</b> : <b>5270 5271 <br>\n5272</b> : <b>5272 <br>\n5275</b> : <b>5274 5275 <br>\n5282</b> : <b>5280 5281 5282 528x <br>\n53017</b> : <b>53011 53012 53013 53014 53015 53016 53017\n<br>\n5307</b> : <b>5307 <br>\n5329</b> : <b>5327 5328 5329 532x <br>\n5373</b> : <b>5372 5373 537x <br>\n5407</b> : <b>5407 <br>\n5475</b> : <b>5470 5471 5472 5473 5474 5475 547x 5480 5481\n5482 5483 5484 <br>\n5485</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcpu=</b><i>cpu</i>\noverrides <b>-march=</b><i>arch</i> if <i>arch</i> is\ncompatible with <i>cpu</i>. Other combinations of\n<b>-mcpu</b> and <b>-march</b> are\nrejected.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>defines the macro &quot;__mcf_cpu_<i>cpu</i>&quot; when\nColdFire target <i>cpu</i> is selected. It also defines\n&quot;__mcf_family_<i>family</i>&quot;, where the value of\n<i>family</i> is given by the table\nabove.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>tune</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tune the code\nfor a particular microarchitecture within the constraints\nset by <b>-march</b> and <b>-mcpu</b>. The M680x0\nmicroarchitectures are: <b>68000</b>, <b>68010</b>,\n<b>68020</b>, <b>68030</b>, <b>68040</b>, <b>68060</b> and\n<b>cpu32</b>. The ColdFire microarchitectures are:\n<b>cfv1</b>, <b>cfv2</b>, <b>cfv3</b>, <b>cfv4</b> and\n<b>cfv4e</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan also use <b>-mtune=68020-40</b> for code that needs to\nrun relatively well on 68020, 68030 and 68040 targets.\n<b>-mtune=68020-60</b> is similar but includes 68060 targets\nas well. These two options select the same tuning decisions\nas <b>-m68020-40</b> and <b>-m68020-60</b>\nrespectively.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>defines the macros &quot;__mc<i>arch</i>&quot; and\n&quot;__mc<i>arch</i>__&quot; when tuning for 680x0\narchitecture <i>arch</i>. It also defines\n&quot;mc<i>arch</i>&quot; unless either <b>-ansi</b> or a\nnon-GNU <b>-std</b> option is used. If</big> GCC <big>is\ntuning for a range of architectures, as selected by\n<b>-mtune=68020-40</b> or <b>-mtune=68020-60</b>, it defines\nthe macros for every architecture in the\nrange.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>also defines the macro &quot;__m<i>uarch</i>__&quot;\nwhen tuning for ColdFire microarchitecture <i>uarch</i>,\nwhere <i>uarch</i> is one of the arguments given\nabove.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m68000 <br>\n-mc68000</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 68000. This is the default when the compiler is\nconfigured for 68000-based systems. It is equivalent to\n<b>-march=68000</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Use\nthis option for microcontrollers with a 68000 or</big> EC000\n<big>core, including the 68008, 68302, 68306, 68307, 68322,\n68328 and 68356.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m68010</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 68010. This is the default when the compiler is\nconfigured for 68010-based systems. It is equivalent to\n<b>-march=68010</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m68020 <br>\n-mc68020</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 68020. This is the default when the compiler is\nconfigured for 68020-based systems. It is equivalent to\n<b>-march=68020</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m68030</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 68030. This is the default when the compiler is\nconfigured for 68030-based systems. It is equivalent to\n<b>-march=68030</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m68040</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 68040. This is the default when the compiler is\nconfigured for 68040-based systems. It is equivalent to\n<b>-march=68040</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption inhibits the use of 68881/68882 instructions that\nhave to be emulated by software on the 68040. Use this\noption if your 68040 does not have code to emulate those\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m68060</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 68060. This is the default when the compiler is\nconfigured for 68060-based systems. It is equivalent to\n<b>-march=68060</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption inhibits the use of 68020 and 68881/68882\ninstructions that have to be emulated by software on the\n68060. Use this option if your 68060 does not have code to\nemulate those instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a</big> CPU32. <big>This is the default when the\ncompiler is configured for CPU32-based systems. It is\nequivalent to <b>-march=cpu32</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Use\nthis option for microcontrollers with a</big> CPU32\n<big>or</big> CPU32+ <big>core, including the 68330, 68331,\n68332, 68333, 68334, 68336, 68340, 68341, 68349 and\n68360.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m5200</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 520X ColdFire</big> CPU. <big>This is the default when\nthe compiler is configured for 520X-based systems. It is\nequivalent to <b>-mcpu=5206</b>, and is now deprecated in\nfavor of that option.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Use\nthis option for microcontroller with a 5200 core, including\nthe</big> MCF5202, MCF5203, MCF5204 <big>and</big>\nMCF5206.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-m5206e</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 5206e ColdFire</big> CPU. <big>The option is now\ndeprecated in favor of the equivalent\n<b>-mcpu=5206e</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m528x</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a member of the ColdFire 528X family. The option is now\ndeprecated in favor of the equivalent\n<b>-mcpu=528x</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m5307</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a ColdFire 5307</big> CPU. <big>The option is now\ndeprecated in favor of the equivalent\n<b>-mcpu=5307</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m5407</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a ColdFire 5407</big> CPU. <big>The option is now\ndeprecated in favor of the equivalent\n<b>-mcpu=5407</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcfv4e</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a ColdFire V4e family</big> CPU <big>(e.g. 547x/548x).\nThis includes use of hardware floating-point instructions.\nThe option is equivalent to <b>-mcpu=547x</b>, and is now\ndeprecated in favor of that option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m68020-40</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 68040, without using any of the new instructions. This\nresults in code that can run relatively efficiently on\neither a 68020/68881 or a 68030 or a 68040. The generated\ncode does use the 68881 instructions that are emulated on\nthe 68040.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noption is equivalent to <b>-march=68020\n-mtune=68020-40</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m68020-60</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\nfor a 68060, without using any of the new instructions. This\nresults in code that can run relatively efficiently on\neither a 68020/68881 or a 68030 or a 68040. The generated\ncode does use the 68881 instructions that are emulated on\nthe 68060.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noption is equivalent to <b>-march=68020\n-mtune=68020-60</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhard-float\n<br>\n-m68881</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nfloating-point instructions. This is the default for 68020\nand above, and for ColdFire devices that have an</big> FPU.\n<big>It defines the macro &quot;__HAVE_68881__&quot; on\nM680x0 targets and &quot;__mcffpu__&quot; on ColdFire\ntargets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\nfloating-point instructions; use library calls instead. This\nis the default for 68000, 68010, and 68832 targets. It is\nalso the default for ColdFire devices that have no</big>\nFPU.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mdiv <br>\n-mno-div</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) ColdFire hardware divide and remainder\ninstructions. If <b>-march</b> is used without <b>-mcpu</b>,\nthe default is &quot;on&quot; for ColdFire architectures and\n&quot;off&quot; for M680x0 architectures. Otherwise, the\ndefault is taken from the target</big> CPU <big>(either the\ndefault</big> CPU, <big>or the one specified by\n<b>-mcpu</b>). For example, the default is &quot;off&quot;\nfor <b>-mcpu=5206</b> and &quot;on&quot; for\n<b>-mcpu=5206e</b>.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>defines the macro &quot;__mcfhwdiv__&quot; when this\noption is enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshort</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Consider type\n&quot;int&quot; to be 16 bits wide, like &quot;short\nint&quot;. Additionally, parameters passed on the stack are\nalso aligned to a 16-bit boundary even on targets\nwhose</big> API <big>mandates promotion to\n32-bit.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-short</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not consider\ntype &quot;int&quot; to be 16 bits wide. This is the\ndefault.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnobitfield\n<br>\n-mno-bitfield</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use the\nbit-field instructions. The <b>-m68000</b>, <b>-mcpu32</b>\nand <b>-m5200</b> options imply\n<b>-mnobitfield</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbitfield</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do use the\nbit-field instructions. The <b>-m68020</b> option implies\n<b>-mbitfield</b>. This is the default if you use a\nconfiguration designed for a 68020.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrtd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use a different\nfunction-calling convention, in which functions that take a\nfixed number of arguments return with the &quot;rtd&quot;\ninstruction, which pops their arguments while returning.\nThis saves one instruction in the caller since there is no\nneed to pop the arguments there.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\ncalling convention is incompatible with the one normally\nused on Unix, so you cannot use it if you need to call\nlibraries compiled with the Unix\ncompiler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Also,\nyou must provide function prototypes for all functions that\ntake variable numbers of arguments (including\n&quot;printf&quot;); otherwise incorrect code is generated\nfor calls to those functions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition, seriously incorrect code results if you call a\nfunction with too many arguments. (Normally, extra arguments\nare harmlessly ignored.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n&quot;rtd&quot; instruction is supported by the 68010,\n68020, 68030, 68040, 68060 and</big> CPU32 <big>processors,\nbut not by the 68000 or 5200.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-mno-rtd</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malign-int\n<br>\n-mno-align-int</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control\nwhether</big> GCC <big>aligns &quot;int&quot;,\n&quot;long&quot;, &quot;long long&quot;, &quot;float&quot;,\n&quot;double&quot;, and &quot;long double&quot; variables on\na 32-bit boundary (<b>-malign-int</b>) or a 16-bit boundary\n(<b>-mno-align-int</b>). Aligning variables on 32-bit\nboundaries produces code that runs somewhat faster on\nprocessors with 32-bit busses at the expense of more\nmemory.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nif you use the <b>-malign-int</b> switch,</big> GCC\n<big>aligns structures containing the above types\ndifferently than most published application binary interface\nspecifications for the m68k.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Use\nthe pc-relative addressing mode of the 68000 directly,\ninstead of using a global offset table. At present, this\noption implies <b>-fpic</b>, allowing at most a 16-bit\noffset for pc-relative addressing. <b>-fPIC</b> is not\npresently supported with <b>-mpcrel</b>, though this could\nbe supported for 68020 and higher\nprocessors.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-strict-align\n<br>\n-mstrict-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not (do)\nassume that unaligned memory references are handled by the\nsystem.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msep-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat allows the data segment to be located in a different\narea of memory from the text segment. This allows for\nexecute-in-place in an environment without virtual memory\nmanagement. This option implies\n<b>-fPIC</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-sep-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat assumes that the data segment follows the text segment.\nThis is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mid-shared-library</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat supports shared libraries via the library</big> ID\n<big>method. This allows for execute-in-place and shared\nlibraries in an environment without virtual memory\nmanagement. This option implies\n<b>-fPIC</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-id-shared-library</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat doesn&rsquo;t assume ID-based shared libraries are\nbeing used. This is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshared-library-id=n</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nidentification number of the ID-based shared library being\ncompiled. Specifying a value of 0 generates more compact\ncode; specifying other values forces the allocation of that\nnumber to the current library, but is no more space- or\ntime-efficient than omitting this\noption.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxgot <br>\n-mno-xgot</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When generating\nposition-independent code for ColdFire, generate code that\nworks if the</big> GOT <big>has more than 8192 entries. This\ncode is larger and slower than code generated without this\noption. On M680x0 processors, this option is not needed;\n<b>-fPIC</b> suffices.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>normally uses a single instruction to load values from\nthe</big> GOT. <big>While this is relatively efficient, it\nonly works if the</big> GOT <big>is smaller than about 64k.\nAnything larger causes the linker to report an error such\nas:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>relocation\ntruncated to fit: R_68K_GOT16O foobar</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthis happens, you should recompile your code with\n<b>-mxgot</b>. It should then work with very large GOTs.\nHowever, code generated with <b>-mxgot</b> is less\nefficient, since it takes 4 instructions to fetch the value\nof a global symbol.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat some linkers, including newer versions of the</big> GNU\n<big>linker, can create multiple GOTs and sort</big> GOT\n<big>entries. If you have such a linker, you should only\nneed to use <b>-mxgot</b> when compiling a single object\nfile that accesses more than 8192</big> GOT <big>entries.\nVery few do.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>These\noptions have no effect unless</big> GCC <big>is generating\nposition-independent code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-jump-table-offsets</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use 32-bit\noffsets in &quot;switch&quot; tables. The default is to use\n16-bit offsets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>MCore\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nare the <b>-m</b> options defined for the Motorola M*Core\nprocessors. <b><br>\n-mhardlit <br>\n-mno-hardlit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Inline constants\ninto the code stream if it can be done in two instructions\nor less.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdiv <br>\n-mno-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the divide\ninstruction. (Enabled by default).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax-immediate\n<br>\n-mno-relax-immediate</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow\narbitrary-sized immediates in bit\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mwide-bitfields\n<br>\n-mno-wide-bitfields</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Always treat\nbit-fields as &quot;int&quot;-sized.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4byte-functions\n<br>\n-mno-4byte-functions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force all\nfunctions to be aligned to a 4-byte\nboundary.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcallgraph-data\n<br>\n-mno-callgraph-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit callgraph\ninformation.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mslow-bytes\n<br>\n-mno-slow-bytes</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Prefer word\naccess when reading byte quantities.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian\n<br>\n-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a little-endian target.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m210 <br>\n-m340</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the 210 processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-lsim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\nruntime support has been provided and so omit the simulator\nlibrary (<i>libsim.a)</i> from the linker command\nline.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-increment=</b><i>size</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the maximum\namount for a single stack increment operation. Large values\ncan increase the speed of programs that contain functions\nthat need a large amount of stack space, but they can also\ntrigger a segmentation fault if the stack is extended too\nmuch. The default value is 0x1000.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>MeP\nOptions</i> <b><br>\n-mabsdiff</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n&quot;abs&quot; instruction, which is the absolute\ndifference between two registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mall-opts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables all the\noptional instructions---average, multiply, divide, bit\noperations, leading zero, absolute difference, min/max,\nclip, and saturation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maverage</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n&quot;ave&quot; instruction, which computes the average of\ntwo registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbased=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Variables of\nsize <i>n</i> bytes or smaller are placed in the\n&quot;.based&quot; section by default. Based variables use\nthe $tp register as a base register, and there is a 128-byte\nlimit to the &quot;.based&quot;\nsection.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbitops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the bit\noperation instructions---bit test (&quot;btstm&quot;), set\n(&quot;bsetm&quot;), clear (&quot;bclrm&quot;), invert\n(&quot;bnotm&quot;), and test-and-set\n(&quot;tas&quot;).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mc=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Selects which\nsection constant data is placed in. <i>name</i> may be\n<b>tiny</b>, <b>near</b>, or\n<b>far</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mclip</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n&quot;clip&quot; instruction. Note that <b>-mclip</b> is not\nuseful unless you also provide\n<b>-mminmax</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mconfig=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Selects one of\nthe built-in core configurations. Each MeP chip has one or\nmore modules in it; each module has a core</big> CPU\n<big>and a variety of coprocessors, optional instructions,\nand peripherals. The &quot;MeP-Integrator&quot; tool, not\npart of</big> GCC, <big>provides these configurations\nthrough this option; using this option is the same as using\nall the corresponding command-line options. The default\nconfiguration is <b>default</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\ncoprocessor instructions. By default, this is a 32-bit\ncoprocessor. Note that the coprocessor is normally enabled\nvia the <b>-mconfig=</b> option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcop32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n32-bit coprocessor&rsquo;s\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcop64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n64-bit coprocessor&rsquo;s\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mivc2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables</big>\nIVC2 <big>scheduling.</big> IVC2 <big>is a 64-bit</big> VLIW\n<big>coprocessor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Causes constant\nvariables to be placed in the &quot;.near&quot;\nsection.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdiv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n&quot;div&quot; and &quot;divu&quot;\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-meb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nbig-endian code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nlittle-endian code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mio-volatile</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tells the\ncompiler that any variable marked with the &quot;io&quot;\nattribute is to be considered\nvolatile.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-ml</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Causes variables to be assigned to the\n&quot;.far&quot; section by default.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mleadz</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n&quot;leadz&quot; (leading zero)\ninstruction.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-mm</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Causes variables to be assigned to the\n&quot;.near&quot; section by default.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mminmax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n&quot;min&quot; and &quot;max&quot;\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmult</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\nmultiplication and multiply-accumulate\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-opts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disables all the\noptional instructions enabled by\n<b>-mall-opts</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrepeat</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\n&quot;repeat&quot; and &quot;erepeat&quot; instructions,\nused for low-overhead looping.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-ms</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Causes all variables to default to the\n&quot;.tiny&quot; section. Note that there is a 65536-byte\nlimit to this section. Accesses to these variables use the\n%gp base register.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msatur</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\nsaturation instructions. Note that the compiler does not\ncurrently generate these itself, but this option is included\nfor compatibility with other tools, like\n&quot;as&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdram</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link the\nSDRAM-based runtime instead of the default ROM-based\nruntime.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link the\nsimulator run-time libraries.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msimnovec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link the\nsimulator runtime libraries, excluding built-in support for\nreset and exception vectors and\ntables.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Causes all\nfunctions to default to the &quot;.far&quot; section.\nWithout this option, functions default to the\n&quot;.near&quot; section.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtiny=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Variables that\nare <i>n</i> bytes or smaller are allocated to the\n&quot;.tiny&quot; section. These variables use the $gp base\nregister. The default for this option is 4, but note that\nthere&rsquo;s a 65536-byte limit to the &quot;.tiny&quot;\nsection.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>MicroBlaze\nOptions</i> <b><br>\n-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use software\nemulation for floating point\n(default).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use hardware\nfloating-point instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmemcpy</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not optimize\nblock moves, use &quot;memcpy&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-clearbss</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\ndeprecated. Use <b>-fno-zero-initialized-in-bss</b>\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use features of,\nand schedule code for, the given</big> CPU. <big>Supported\nvalues are in the format <b>v</b><i>X</i><b>.</b></big>\n<i>YY</i> <b><big>.</big></b><big><i>Z</i>, where <i>X</i>\nis a major version,</big> <i>YY</i> <big>is the minor\nversion, and <i>Z</i> is compatibility code. Example values\nare <b>v3.00.a</b>, <b>v4.00.b</b>, <b>v5.00.a</b>,\n<b>v5.00.b</b>, <b>v6.00.a</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-soft-mul</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use software\nmultiply emulation (default).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-soft-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use software\nemulation for divides (default).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-barrel-shift</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the hardware\nbarrel shifter.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-pattern-compare</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use pattern\ncompare instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmall-divides</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use table lookup\noptimization for small signed integer\ndivisions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-stack-check</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\ndeprecated. Use <b>-fstack-check</b>\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-gp-opt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use GP-relative\n&quot;.sdata&quot;/&quot;.sbss&quot;\nsections.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-multiply-high</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use multiply\nhigh instructions for high part of 32x32\nmultiply.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-float-convert</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use hardware\nfloating-point conversion\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-float-sqrt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use hardware\nfloating-point square root\ninstruction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a big-endian target.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a little-endian target.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-reorder</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use reorder\ninstructions (swap and byte reversed\nload/store).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-mode-</b><i>app-model</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select\napplication model <i>app-model</i>. Valid models are <b><br>\nexecutable</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>normal\nexecutable (default), uses startup code\n<i>crt0.o</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-mpic-data-is-text-relative</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Assume that the\ndisplacement between the text and data segments is fixed at\nstatic link time. This allows data to be referenced by\noffset from start of text address instead of</big> GOT\n<big>since PC-relative addressing is not\nsupported.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>xmdstub</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>for use with\nXilinx Microprocessor Debugger (</big> XMD <big>) based\nsoftware intrusive debug agent called xmdstub. This uses\nstartup file <i>crt1.o</i> and sets the start address of the\nprogram to 0x800.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>bootstrap</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>for applications\nthat are loaded using a bootloader. This model uses startup\nfile <i>crt2.o</i> which does not contain a processor reset\nvector handler. This is suitable for transferring control on\na processor reset to the bootloader rather than the\napplication.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>novectors</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>for applications\nthat do not require any of the MicroBlaze vectors. This\noption may be useful for applications running within a\nmonitoring application. This model uses <i>crt3.o</i> as a\nstartup file.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Option\n<b>-xl-mode-</b><i>app-model</i> is a deprecated alias for\n<b>-mxl-mode-</b><i>app-model</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>MIPS\n<big>Options</big></i></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-EB</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Generate big-endian\ncode.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-EL</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Generate little-endian code. This is the\ndefault for <b>mips*el-*-*</b>\nconfigurations.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-march=</b><i>arch</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat runs on <i>arch</i>, which can be the name of a\ngeneric</big> MIPS ISA, <big>or the name of a particular\nprocessor. The</big> ISA <big>names are: <b>mips1</b>,\n<b>mips2</b>, <b>mips3</b>, <b>mips4</b>, <b>mips32</b>,\n<b>mips32r2</b>, <b>mips32r3</b>, <b>mips32r5</b>,\n<b>mips32r6</b>, <b>mips64</b>, <b>mips64r2</b>,\n<b>mips64r3</b>, <b>mips64r5</b> and <b>mips64r6</b>. The\nprocessor names are: <b>4kc</b>, <b>4km</b>, <b>4kp</b>,\n<b>4ksc</b>, <b>4kec</b>, <b>4kem</b>, <b>4kep</b>,\n<b>4ksd</b>, <b>5kc</b>, <b>5kf</b>, <b>20kc</b>,\n<b>24kc</b>, <b>24kf2_1</b>, <b>24kf1_1</b>, <b>24kec</b>,\n<b>24kef2_1</b>, <b>24kef1_1</b>, <b>34kc</b>,\n<b>34kf2_1</b>, <b>34kf1_1</b>, <b>34kn</b>, <b>74kc</b>,\n<b>74kf2_1</b>, <b>74kf1_1</b>, <b>74kf3_2</b>,\n<b>1004kc</b>, <b>1004kf2_1</b>, <b>1004kf1_1</b>,\n<b>i6400</b>, <b>i6500</b>, <b>interaptiv</b>,\n<b>loongson2e</b>, <b>loongson2f</b>, <b>loongson3a</b>,\n<b>gs464</b>, <b>gs464e</b>, <b>gs264e</b>, <b>m4k</b>,\n<b>m14k</b>, <b>m14kc</b>, <b>m14ke</b>, <b>m14kec</b>,\n<b>m5100</b>, <b>m5101</b>, <b>octeon</b>, <b>octeon+</b>,\n<b>octeon2</b>, <b>octeon3</b>, <b>orion</b>, <b>p5600</b>,\n<b>p6600</b>, <b>r2000</b>, <b>r3000</b>, <b>r3900</b>,\n<b>r4000</b>, <b>r4400</b>, <b>r4600</b>, <b>r4650</b>,\n<b>r4700</b>, <b>r5900</b>, <b>r6000</b>, <b>r8000</b>,\n<b>rm7000</b>, <b>rm9000</b>, <b>r10000</b>, <b>r12000</b>,\n<b>r14000</b>, <b>r16000</b>, <b>sb1</b>, <b>sr71000</b>,\n<b>vr4100</b>, <b>vr4111</b>, <b>vr4120</b>, <b>vr4130</b>,\n<b>vr4300</b>, <b>vr5000</b>, <b>vr5400</b>, <b>vr5500</b>,\n<b>xlr</b> and <b>xlp</b>. The special value <b>from-abi</b>\nselects the most compatible architecture for the\nselected</big> ABI <big>(that is, <b>mips1</b> for 32-bit\nABIs and <b>mips3</b> for 64-bit\nABIs).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nnative Linux/GNU toolchain also supports the value\n<b>native</b>, which selects the best architecture option\nfor the host processor. <b>-march=native</b> has no effect\nif</big> GCC <big>does not recognize the\nprocessor.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nprocessor names, a final <b>000</b> can be abbreviated as\n<b>k</b> (for example, <b>-march=r2k</b>). Prefixes are\noptional, and <b>vr</b> may be written\n<b>r</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Names\nof the form <i>n</i><b>f2_1</b> refer to processors with\nFPUs clocked at half the rate of the core, names of the form\n<i>n</i><b>f1_1</b> refer to processors with FPUs clocked at\nthe same rate as the core, and names of the form\n<i>n</i><b>f3_2</b> refer to processors with FPUs clocked a\nratio of 3:2 with respect to the core. For compatibility\nreasons, <i>n</i><b>f</b> is accepted as a synonym for\n<i>n</i><b>f2_1</b> while <i>n</i><b>x</b> and\n<i>b</i><b>fx</b> are accepted as synonyms for\n<i>n</i><b>f1_1</b>.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>defines two macros based on the value of this option.\nThe first is &quot;_MIPS_ARCH&quot;, which gives the name of\ntarget architecture, as a string. The second has the form\n&quot;_MIPS_ARCH_<i>foo</i>&quot;, where <i>foo</i> is the\ncapitalized value of &quot;_MIPS_ARCH&quot;. For example,\n<b>-march=r2000</b> sets &quot;_MIPS_ARCH&quot; to\n&quot;r2000&quot; and defines the macro\n&quot;_MIPS_ARCH_R2000&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat the &quot;_MIPS_ARCH&quot; macro uses the processor\nnames given above. In other words, it has the full prefix\nand does not abbreviate <b>000</b> as <b>k</b>. In the case\nof <b>from-abi</b>, the macro names the resolved\narchitecture (either &quot;mips1&quot; or\n&quot;mips3&quot;). It names the default architecture when\nno <b>-march</b> option is given.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>arch</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Optimize for\n<i>arch</i>. Among other things, this option controls the\nway instructions are scheduled, and the perceived cost of\narithmetic operations. The list of <i>arch</i> values is the\nsame as for <b>-march</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nthis option is not used,</big> GCC <big>optimizes for the\nprocessor specified by <b>-march</b>. By using <b>-march</b>\nand <b>-mtune</b> together, it is possible to generate code\nthat runs on a family of processors, but optimize the code\nfor one particular member of that\nfamily.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mtune</b>\ndefines the macros &quot;_MIPS_TUNE&quot; and\n&quot;_MIPS_TUNE_<i>foo</i>&quot;, which work in the same\nway as the <b>-march</b> ones described\nabove.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips1</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips1</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips2</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips3</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips4</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips4</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips32</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips32r3</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips32r3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips32r5</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips32r5</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips32r6</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips32r6</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips64</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips64r2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips64r2</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips64r3</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips64r3</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips64r5</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips64r5</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips64r6</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-march=mips64r6</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips16 <br>\n-mno-mips16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate)</big> MIPS16 <big>code. If</big> GCC <big>is\ntargeting a</big> MIPS32 <big>or</big> MIPS64\n<big>architecture, it makes use of the MIPS16e</big>\nASE.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>MIPS16\n<big>code generation can also be controlled on a\nper-function basis by means of &quot;mips16&quot; and\n&quot;nomips16&quot; attributes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mflip-mips16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate</big>\nMIPS16 <big>code on alternating functions. This option is\nprovided for regression testing of mixed MIPS16/non-MIPS16\ncode generation, and is not intended for ordinary use in\ncompiling user code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minterlink-compressed\n<br>\n-mno-interlink-compressed</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Require (do not\nrequire) that code using the standard (uncompressed)</big>\nMIPS ISA <big>be link-compatible with</big> MIPS16 <big>and\nmicroMIPS code, and vice versa.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, code using the standard</big> ISA <big>encoding\ncannot jump directly to</big> MIPS16 <big>or microMIPS code;\nit must either use a call or an indirect jump.\n<b>-minterlink-compressed</b> therefore disables direct\njumps unless</big> GCC <big>knows that the target of the\njump is not compressed.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minterlink-mips16\n<br>\n-mno-interlink-mips16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Aliases of\n<b>-minterlink-compressed</b> and\n<b>-mno-interlink-compressed</b>. These options predate the\nmicroMIPS</big> ASE <big>and are retained for backwards\ncompatibility.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=32 <br>\n-mabi=o64 <br>\n-mabi=n32 <br>\n-mabi=64 <br>\n-mabi=eabi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the given</big> ABI.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat the</big> EABI <big>has a 32-bit and a 64-bit\nvariant.</big> GCC <big>normally generates 64-bit code when\nyou select a 64-bit architecture, but you can use\n<b>-mgp32</b> to get 32-bit code\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\ninformation about the O64</big> ABI, <big>see\n&lt;<b>http://gcc.gnu.org/projects/mipso64-abi.html</b>&gt;.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>supports a variant of the o32</big> ABI <big>in which\nfloating-point registers are 64 rather than 32 bits wide.\nYou can select this combination with <b>-mabi=32 -mfp64</b>.\nThis</big> ABI <big>relies on the &quot;mthc1&quot; and\n&quot;mfhc1&quot; instructions and is therefore only\nsupported for</big> MIPS32R2, MIPS32R3 <big>and</big>\nMIPS32R5 <big>processors.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nregister assignments for arguments and return values remain\nthe same, but each scalar value is passed in a single 64-bit\nregister rather than a pair of 32-bit registers. For\nexample, scalar floating-point values are returned in\n<b>$f0</b> only, not a <b>$f0</b>/<b>$f1</b> pair. The set\nof call-saved registers also remains the same in that the\neven-numbered double-precision registers are\nsaved.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Two\nadditional variants of the o32</big> ABI <big>are supported\nto enable a transition from 32-bit to 64-bit registers.\nThese are</big> FPXX <big>(<b>-mfpxx</b>) and</big> FP64A\n<big>(<b>-mfp64 -mno-odd-spreg</b>). The</big> FPXX\n<big>extension mandates that all code must execute correctly\nwhen run using 32-bit or 64-bit registers. The code can be\ninterlinked with either</big> FP32 <big>or</big> FP64,\n<big>but not both. The</big> FP64A <big>extension is similar\nto the</big> FP64 <big>extension but forbids the use of\nodd-numbered single-precision registers. This can be used in\nconjunction with the &quot;FRE&quot; mode of FPUs in</big>\nMIPS32R5 <big>processors and allows both</big> FP32\n<big>and</big> FP64A <big>code to interlink and run in the\nsame process without changing</big> FPU\n<big>modes.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabicalls\n<br>\n-mno-abicalls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) code that is suitable for SVR4-style dynamic\nobjects. <b>-mabicalls</b> is the default for SVR4-based\nsystems.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshared <br>\n-mno-shared</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) code that is fully position-independent, and that\ncan therefore be linked into shared libraries. This option\nonly affects <b>-mabicalls</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>All\n<b>-mabicalls</b> code has traditionally been\nposition-independent, regardless of options like\n<b>-fPIC</b> and <b>-fpic</b>. However, as an extension,\nthe</big> GNU <big>toolchain allows executables to use\nabsolute accesses for locally-binding symbols. It can also\nuse shorter</big> GP <big>initialization sequences and\ngenerate direct calls to locally-defined functions. This\nmode is selected by\n<b>-mno-shared</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mno-shared</b>\ndepends on binutils 2.16 or higher and generates objects\nthat can only be linked by the</big> GNU <big>linker.\nHowever, the option does not affect the</big> ABI <big>of\nthe final executable; it only affects the</big> ABI <big>of\nrelocatable objects. Using <b>-mno-shared</b> generally\nmakes executables both smaller and\nquicker.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mshared</b>\nis the default.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mplt <br>\n-mno-plt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume (do not\nassume) that the static and dynamic linkers support PLTs and\ncopy relocations. This option only affects <b>-mno-shared\n-mabicalls</b>. For the n64</big> ABI, <big>this option has\nno effect without <b>-msym32</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan make <b>-mplt</b> the default by configuring</big> GCC\n<big>with <b>--with-mips-plt</b>. The default is\n<b>-mno-plt</b> otherwise.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxgot <br>\n-mno-xgot</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Lift (do not\nlift) the usual restrictions on the size of the global\noffset table.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>normally uses a single instruction to load values from\nthe</big> GOT. <big>While this is relatively efficient, it\nonly works if the</big> GOT <big>is smaller than about 64k.\nAnything larger causes the linker to report an error such\nas:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>relocation\ntruncated to fit: R_MIPS_GOT16 foobar</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthis happens, you should recompile your code with\n<b>-mxgot</b>. This works with very large GOTs, although the\ncode is also less efficient, since it takes three\ninstructions to fetch the value of a global\nsymbol.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat some linkers can create multiple GOTs. If you have such\na linker, you should only need to use <b>-mxgot</b> when a\nsingle object file accesses more than 64k&rsquo;s worth\nof</big> GOT <big>entries. Very few\ndo.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>These\noptions have no effect unless</big> GCC <big>is generating\nposition independent code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgp32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\ngeneral-purpose registers are 32 bits\nwide.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgp64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\ngeneral-purpose registers are 64 bits\nwide.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfp32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\nfloating-point registers are 32 bits\nwide.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfp64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\nfloating-point registers are 64 bits\nwide.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfpxx</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not assume\nthe width of floating-point registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use\nfloating-point coprocessor\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\nfloating-point coprocessor instructions. Implement\nfloating-point calculations using library calls\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Equivalent to\n<b>-msoft-float</b>, but additionally asserts that the\nprogram being compiled does not perform any floating-point\noperations. This option is presently supported only by some\nbare-metal</big> MIPS <big>configurations, where it may\nselect a special set of libraries that lack all\nfloating-point support (including, for example, the\nfloating-point &quot;printf&quot; formats). If code compiled\nwith <b>-mno-float</b> accidentally contains floating-point\noperations, it is likely to suffer a link-time or run-time\nfailure.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msingle-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that the\nfloating-point coprocessor only supports single-precision\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdouble-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that the\nfloating-point coprocessor supports double-precision\noperations. This is the default.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-modd-spreg\n<br>\n-mno-odd-spreg</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof odd-numbered single-precision floating-point registers\nfor the o32</big> ABI. <big>This is the default for\nprocessors that are known to support these registers. When\nusing the o32</big> FPXX ABI,\n<b><big>-mno-odd-spreg</big></b> <big>is set by\ndefault.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabs=2008\n<br>\n-mabs=legacy</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\ncontrol the treatment of the special not-a-number\n(NaN)</big> IEEE 754 <big>floating-point data with the\n&quot;abs.<i>fmt</i>&quot; and &quot;neg.<i>fmt</i>&quot;\nmachine instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>By\ndefault or when <b>-mabs=legacy</b> is used the legacy\ntreatment is selected. In this case these instructions are\nconsidered arithmetic and avoided where correct operation is\nrequired and the input operand might be a NaN. A longer\nsequence of instructions that manipulate the sign bit of\nfloating-point datum manually is used instead unless the\n<b>-ffinite-math-only</b> option has also been\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mabs=2008</b> option selects the</big> IEEE 754-2008\n<big>treatment. In this case these instructions are\nconsidered non-arithmetic and therefore operating correctly\nin all cases, including in particular where the input\noperand is a NaN. These instructions are therefore always\nused for the respective operations.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnan=2008\n<br>\n-mnan=legacy</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\ncontrol the encoding of the special not-a-number (NaN)</big>\nIEEE 754 <big>floating-point data.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mnan=legacy</b> option selects the legacy encoding. In\nthis case quiet NaNs (qNaNs) are denoted by the first bit of\ntheir trailing significand field being 0, whereas signaling\nNaNs (sNaNs) are denoted by the first bit of their trailing\nsignificand field being 1.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mnan=2008</b> option selects the</big> IEEE 754-2008\n<big>encoding. In this case qNaNs are denoted by the first\nbit of their trailing significand field being 1, whereas\nsNaNs are denoted by the first bit of their trailing\nsignificand field being 0.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-mnan=legacy</b> unless</big> GCC <big>has\nbeen configured with\n<b>--with-nan=2008</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mllsc <br>\n-mno-llsc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\n<b>ll</b>, <b>sc</b>, and <b>sync</b> instructions to\nimplement atomic memory built-in functions. When neither\noption is specified,</big> GCC <big>uses the instructions if\nthe target architecture supports them.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mllsc</b>\nis useful if the runtime environment can emulate the\ninstructions and <b>-mno-llsc</b> can be useful when\ncompiling for nonstandard ISAs. You can make either option\nthe default by configuring</big> GCC <big>with\n<b>--with-llsc</b> and <b>--without-llsc</b> respectively.\n<b>--with-llsc</b> is the default for some configurations;\nsee the installation documentation for\ndetails.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdsp <br>\n-mno-dsp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nrevision 1 of the</big> MIPS DSP ASE. <big><br>\nThis option defines the preprocessor macro\n&quot;__mips_dsp&quot;. It also defines\n&quot;__mips_dsp_rev&quot; to 1.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdspr2 <br>\n-mno-dspr2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nrevision 2 of the</big> MIPS DSP ASE. <big><br>\nThis option defines the preprocessor macros\n&quot;__mips_dsp&quot; and &quot;__mips_dspr2&quot;. It also\ndefines &quot;__mips_dsp_rev&quot; to\n2.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmartmips\n<br>\n-mno-smartmips</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>SmartMIPS</big> ASE.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mpaired-single\n<br>\n-mno-paired-single</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\npaired-single floating-point instructions. <br>\nThis option requires hardware floating-point support to be\nenabled.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdmx <br>\n-mno-mdmx</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not\nuse)</big> MIPS <big>Digital Media Extension instructions.\nThis option can only be used when generating 64-bit code and\nrequires hardware floating-point support to be\nenabled.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mips3d <br>\n-mno-mips3d</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS-3D ASE. <big>The option <b>-mips3d</b>\nimplies <b>-mpaired-single</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmicromips\n<br>\n-mno-micromips</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) microMIPS code.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>MicroMIPS\ncode generation can also be controlled on a per-function\nbasis by means of &quot;micromips&quot; and\n&quot;nomicromips&quot; attributes.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmt <br>\n-mno-mt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not\nuse)</big> MT <big>Multithreading\ninstructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmcu <br>\n-mno-mcu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS MCU ASE\n<big>instructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-meva <br>\n-mno-eva</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>Enhanced Virtual Addressing\ninstructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvirt <br>\n-mno-virt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>Virtualization (</big> VZ <big>)\ninstructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxpa <br>\n-mno-xpa</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>eXtended Physical Address (</big> XPA\n<big>) instructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcrc <br>\n-mno-crc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>Cyclic Redundancy Check (</big> CRC\n<big>) instructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mginv <br>\n-mno-ginv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>Global INValidate (</big> GINV <big>)\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mloongson-mmi\n<br>\n-mno-loongson-mmi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>Loongson MultiMedia extensions\nInstructions (</big> MMI <big>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mloongson-ext\n<br>\n-mno-loongson-ext</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>Loongson EXTensions (</big> EXT <big>)\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mloongson-ext2\n<br>\n-mno-loongson-ext2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe</big> MIPS <big>Loongson EXTensions r2 (</big> EXT2\n<big>) instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force\n&quot;long&quot; types to be 64 bits wide. See\n<b>-mlong32</b> for an explanation of the default and the\nway that the pointer size is\ndetermined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force\n&quot;long&quot;, &quot;int&quot;, and pointer types to be\n32 bits wide.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault size of &quot;int&quot;s, &quot;long&quot;s and\npointers depends on the</big> ABI. <big>All the supported\nABIs use 32-bit &quot;int&quot;s. The n64</big> ABI\n<big>uses 64-bit &quot;long&quot;s, as does the 64-bit</big>\nEABI <big>; the others use 32-bit &quot;long&quot;s.\nPointers are the same size as &quot;long&quot;s, or the same\nsize as integer registers, whichever is\nsmaller.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msym32 <br>\n-mno-sym32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume (do not\nassume) that all symbols have 32-bit values, regardless of\nthe selected</big> ABI. <big>This option is useful in\ncombination with <b>-mabi=64</b> and <b>-mno-abicalls</b>\nbecause it allows</big> GCC <big>to generate shorter and\nfaster references to symbolic\naddresses.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-G</b>\n<i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put definitions\nof externally-visible data in a small data section if that\ndata is no bigger than <i>num</i> bytes.</big> GCC <big>can\nthen generate more efficient accesses to the data; see\n<b>-mgpopt</b> for details.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault <b>-G</b> option depends on the\nconfiguration.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlocal-sdata\n<br>\n-mno-local-sdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Extend (do not\nextend) the <b>-G</b> behavior to local data too, such as to\nstatic variables in C. <b>-mlocal-sdata</b> is the default\nfor all configurations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthe linker complains that an application is using too much\nsmall data, you might want to try rebuilding the less\nperformance-critical parts with <b>-mno-local-sdata</b>. You\nmight also want to build large libraries with\n<b>-mno-local-sdata</b>, so that the libraries leave more\nroom for the main program.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mextern-sdata\n<br>\n-mno-extern-sdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume (do not\nassume) that externally-defined data is in a small data\nsection if the size of that data is within the <b>-G</b>\nlimit. <b>-mextern-sdata</b> is the default for all\nconfigurations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou compile a module <i>Mod</i> with <b>-mextern-sdata\n-G</b> <i>num</i> <b>-mgpopt</b>, and <i>Mod</i> references\na variable <i>Var</i> that is no bigger than <i>num</i>\nbytes, you must make sure that <i>Var</i> is placed in a\nsmall data section. If <i>Var</i> is defined by another\nmodule, you must either compile that module with a\nhigh-enough <b>-G</b> setting or attach a\n&quot;section&quot; attribute to <i>Var</i>&rsquo;s\ndefinition. If <i>Var</i> is common, you must link the\napplication with a high-enough <b>-G</b>\nsetting.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\neasiest way of satisfying these restrictions is to compile\nand link every module with the same <b>-G</b> option.\nHowever, you may wish to build a library that supports\nseveral different small data limits. You can do this by\ncompiling the library with the highest supported <b>-G</b>\nsetting and additionally using <b>-mno-extern-sdata</b> to\nstop the library from making assumptions about\nexternally-defined data.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgpopt <br>\n-mno-gpopt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nGP-relative accesses for symbols that are known to be in a\nsmall data section; see <b>-G</b>, <b>-mlocal-sdata</b> and\n<b>-mextern-sdata</b>. <b>-mgpopt</b> is the default for all\nconfigurations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mno-gpopt</b>\nis useful for cases where the $gp register might not hold\nthe value of &quot;_gp&quot;. For example, if the code is\npart of a library that might be used in a boot monitor,\nprograms that call boot monitor routines pass an unknown\nvalue in $gp. (In such situations, the boot monitor itself\nis usually compiled with <b>-G0</b>.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mno-gpopt</b>\nimplies <b>-mno-local-sdata</b> and\n<b>-mno-extern-sdata</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-membedded-data\n<br>\n-mno-embedded-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allocate\nvariables to the read-only data section first if possible,\nthen next in the small data section if possible, otherwise\nin data. This gives slightly slower code than the default,\nbut reduces the amount of</big> RAM <big>required when\nexecuting, and thus may be preferred for some embedded\nsystems.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-muninit-const-in-rodata\n<br>\n-mno-uninit-const-in-rodata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put\nuninitialized &quot;const&quot; variables in the read-only\ndata section. This option is only meaningful in conjunction\nwith <b>-membedded-data</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcode-readable=</b><i>setting</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nwhether</big> GCC <big>may generate code that reads from\nexecutable sections. There are three possible settings:\n<b><br>\n-mcode-readable=yes</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Instructions may\nfreely access executable sections. This is the default\nsetting.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-mcode-readable=pcrel</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>MIPS16\n<big>PC-relative load instructions can access executable\nsections, but other instructions must not do so. This option\nis useful on 4KSc and 4KSd processors when the code TLBs\nhave the Read Inhibit bit set. It is also useful on\nprocessors that can be configured to have a dual\ninstruction/data</big> SRAM <big>interface and that, like\nthe M4K, automatically redirect PC-relative loads to the\ninstruction</big> RAM.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>-mcode-readable=no</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Instructions\nmust not access executable sections. This option can be\nuseful on targets that are configured to have a dual\ninstruction/data</big> SRAM <big>interface but that (unlike\nthe M4K) do not automatically redirect PC-relative loads to\nthe instruction</big> RAM.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-msplit-addresses\n<br>\n-mno-split-addresses</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable (disable)\nuse of the &quot;%hi()&quot; and &quot;%lo()&quot; assembler\nrelocation operators. This option has been superseded by\n<b>-mexplicit-relocs</b> but is retained for backwards\ncompatibility.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mexplicit-relocs\n<br>\n-mno-explicit-relocs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nassembler relocation operators when dealing with symbolic\naddresses. The alternative, selected by\n<b>-mno-explicit-relocs</b>, is to use assembler macros\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mexplicit-relocs</b>\nis the default if</big> GCC <big>was configured to use an\nassembler that supports relocation\noperators.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcheck-zero-division\n<br>\n-mno-check-zero-division</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Trap (do not\ntrap) on integer division by zero.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is\n<b>-mcheck-zero-division</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdivide-traps\n<br>\n-mdivide-breaks</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>MIPS <big>systems\ncheck for division by zero by generating either a\nconditional trap or a break instruction. Using traps results\nin smaller code, but is only supported on</big> MIPS II\n<big>and later. Also, some versions of the Linux kernel have\na bug that prevents trap from generating the proper signal\n(&quot;SIGFPE&quot;). Use <b>-mdivide-traps</b> to allow\nconditional traps on architectures that support them and\n<b>-mdivide-breaks</b> to force the use of\nbreaks.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is usually <b>-mdivide-traps</b>, but this can be\noverridden at configure time using\n<b>--with-divide=breaks</b>. Divide-by-zero checks can be\ncompletely disabled using\n<b>-mno-check-zero-division</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mload-store-pairs\n<br>\n-mno-load-store-pairs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable (disable)\nan optimization that pairs consecutive load or store\ninstructions to enable load/store bonding. This option is\nenabled by default but only takes effect when the selected\narchitecture is known to support\nbonding.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmemcpy <br>\n-mno-memcpy</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force (do not\nforce) the use of &quot;memcpy&quot; for non-trivial block\nmoves. The default is <b>-mno-memcpy</b>, which allows</big>\nGCC <big>to inline most constant-sized\ncopies.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-calls\n<br>\n-mno-long-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable (do not\ndisable) use of the &quot;jal&quot; instruction. Calling\nfunctions using &quot;jal&quot; is more efficient but\nrequires the caller and callee to be in the same 256\nmegabyte segment.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption has no effect on abicalls code. The default is\n<b>-mno-long-calls</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmad <br>\n-mno-mad</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable (disable)\nuse of the &quot;mad&quot;, &quot;madu&quot; and\n&quot;mul&quot; instructions, as provided by the R4650</big>\nISA.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mimadd <br>\n-mno-imadd</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable (disable)\nuse of the &quot;madd&quot; and &quot;msub&quot; integer\ninstructions. The default is <b>-mimadd</b> on architectures\nthat support &quot;madd&quot; and &quot;msub&quot; except\nfor the 74k architecture where it was found to generate\nslower code.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfused-madd\n<br>\n-mno-fused-madd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable (disable)\nuse of the floating-point multiply-accumulate instructions,\nwhen they are available. The default is\n<b>-mfused-madd</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nthe R8000</big> CPU <big>when multiply-accumulate\ninstructions are used, the intermediate product is\ncalculated to infinite precision and is not subject to\nthe</big> FCSR <big>Flush to Zero bit. This may be\nundesirable in some circumstances. On other processors the\nresult is numerically identical to the equivalent\ncomputation using separate multiply, add, subtract and\nnegate instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-nocpp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tell the</big>\nMIPS <big>assembler to not run its preprocessor over user\nassembler files (with a <b>.s</b> suffix) when assembling\nthem.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-24k\n<br>\n-mno-fix-24k</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around the\n24K E48 (lost data on stores during refill) errata. The\nworkarounds are implemented by the assembler rather than\nby</big> GCC.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mfix-r4000\n<br>\n-mno-fix-r4000</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around\ncertain R4000</big> CPU <big>errata:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>-</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>A double-word or a variable shift may\ngive an incorrect result if executed immediately after\nstarting an integer division.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>-</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>A double-word or a variable shift may\ngive an incorrect result if executed while an integer\nmultiplication is in progress.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>-</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>An integer division may give an incorrect\nresult if started in a delay slot of a taken branch or a\njump.</big></big></big></p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-r4400\n<br>\n-mno-fix-r4400</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around\ncertain R4400</big> CPU <big>errata:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>-</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>A double-word or a variable shift may\ngive an incorrect result if executed immediately after\nstarting an integer division.</big></big></big></p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-r10000\n<br>\n-mno-fix-r10000</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around\ncertain R10000 errata:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>-</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>&quot;ll&quot;/&quot;sc&quot; sequences\nmay not behave atomically on revisions prior to 3.0. They\nmay deadlock on revisions 2.6 and\nearlier.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption can only be used if the target architecture supports\nbranch-likely instructions. <b>-mfix-r10000</b> is the\ndefault when <b>-march=r10000</b> is used;\n<b>-mno-fix-r10000</b> is the default\notherwise.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-r5900\n<br>\n-mno-fix-r5900</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not attempt\nto schedule the preceding instruction into the delay slot of\na branch instruction placed at the end of a short loop of\nsix instructions or fewer and always schedule a\n&quot;nop&quot; instruction there instead. The short loop\nbug under certain conditions causes loops to execute only\nonce or twice, due to a hardware bug in the R5900 chip. The\nworkaround is implemented by the assembler rather than\nby</big> GCC.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mfix-rm7000\n<br>\n-mno-fix-rm7000</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around\nthe</big> RM7000 <big>&quot;dmult&quot;/&quot;dmultu&quot;\nerrata. The workarounds are implemented by the assembler\nrather than by</big> GCC.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mfix-vr4120\n<br>\n-mno-fix-vr4120</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around\ncertain</big> VR4120 <big>errata:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>-</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>&quot;dmultu&quot; does not always\nproduce the correct result.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>-</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>&quot;div&quot; and &quot;ddiv&quot; do\nnot always produce the correct result if one of the operands\nis negative.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nworkarounds for the division errata rely on special\nfunctions in <i>libgcc.a</i>. At present, these functions\nare only provided by the &quot;mips64vr*-elf&quot;\nconfigurations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Other</big>\nVR4120 <big>errata require a</big> NOP <big>to be inserted\nbetween certain pairs of instructions. These errata are\nhandled by the assembler, not by</big> GCC\n<big>itself.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-vr4130</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around\nthe</big> VR4130 <big>&quot;mflo&quot;/&quot;mfhi&quot;\nerrata. The workarounds are implemented by the assembler\nrather than by</big> GCC, <big>although</big> GCC\n<big>avoids using &quot;mflo&quot; and &quot;mfhi&quot; if\nthe</big> VR4130 <big>&quot;macc&quot;, &quot;macchi&quot;,\n&quot;dmacc&quot; and &quot;dmacchi&quot; instructions are\navailable instead.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-sb1\n<br>\n-mno-fix-sb1</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Work around\ncertain</big> SB-1 CPU <big>core errata. (This flag\ncurrently works around the</big> SB-1 <big>revision 2\n&quot;F1&quot; and &quot;F2&quot; floating-point\nerrata.)</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mr10k-cache-barrier=</b><i>setting</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nwhether</big> GCC <big>should insert cache barriers to avoid\nthe side effects of speculation on R10K\nprocessors.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\ncommon with many processors, the R10K tries to predict the\noutcome of a conditional branch and speculatively executes\ninstructions from the &quot;taken&quot; branch. It later\naborts these instructions if the predicted outcome is wrong.\nHowever, on the R10K, even aborted instructions can have\nside effects.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nproblem only affects kernel stores and, depending on the\nsystem, kernel loads. As an example, a\nspeculatively-executed store may load the target memory into\ncache and mark the cache line as dirty, even if the store\nitself is later aborted. If a</big> DMA <big>operation\nwrites to the same area of memory before the\n&quot;dirty&quot; line is flushed, the cached data\noverwrites the DMA-ed data. See the R10K processor manual\nfor a full description, including other potential\nproblems.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>One\nworkaround is to insert cache barrier instructions before\nevery memory access that might be speculatively executed and\nthat might have side effects even if aborted.\n<b>-mr10k-cache-barrier=</b><i>setting</i> controls</big>\nGCC <big>&rsquo;s implementation of this workaround. It\nassumes that aborted accesses to any byte in the following\nregions does not have side effects:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>1.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the memory occupied by the current\nfunction&rsquo;s stack frame;</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>2.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the memory occupied by an incoming stack\nargument;</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>3.</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>the memory occupied by an object with a\nlink-time-constant address.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>It\nis the kernel&rsquo;s responsibility to ensure that\nspeculative accesses to these regions are indeed\nsafe.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthe input program contains a function declaration such\nas:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>void\nfoo (void);</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>then\nthe implementation of &quot;foo&quot; must allow &quot;j\nfoo&quot; and &quot;jal foo&quot; to be executed\nspeculatively.</big> GCC <big>honors this restriction for\nfunctions it compiles itself. It expects non-GCC functions\n(such as hand-written assembly code) to do the\nsame.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noption has three forms: <b><br>\n-mr10k-cache-barrier=load-store</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Insert a cache\nbarrier before a load or store that might be speculatively\nexecuted and that might have side effects even if\naborted.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-mr10k-cache-barrier=store</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Insert a cache\nbarrier before a store that might be speculatively executed\nand that might have side effects even if\naborted.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-mr10k-cache-barrier=none</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disable the\ninsertion of cache barriers. This is the default\nsetting.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mflush-func=</b><i>func</i>\n<b><br>\n-mno-flush-func</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nfunction to call to flush the I and D caches, or to not call\nany such function. If called, the function must take the\nsame arguments as the common &quot;_flush_func&quot;, that\nis, the address of the memory range for which the cache is\nbeing flushed, the size of the memory range, and the number\n3 (to flush both caches). The default depends on the\ntarget</big> GCC <big>was configured for, but commonly is\neither &quot;_flush_func&quot; or\n&quot;__cpu_flush&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>mbranch-cost=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the cost of\nbranches to roughly <i>num</i> &quot;simple&quot;\ninstructions. This cost is only a heuristic and is not\nguaranteed to produce consistent results across releases. A\nzero cost redundantly selects the default, which is based on\nthe <b>-mtune</b> setting.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-likely\n<br>\n-mno-branch-likely</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable use of Branch Likely instructions, regardless of the\ndefault for the selected architecture. By default, Branch\nLikely instructions may be generated if they are supported\nby the selected architecture. An exception is for the</big>\nMIPS32 <big>and</big> MIPS64 <big>architectures and\nprocessors that implement those architectures; for those,\nBranch Likely instructions are not be generated by default\nbecause the</big> MIPS32 <big>and</big> MIPS64\n<big>architectures specifically deprecate their\nuse.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcompact-branches=never\n<br>\n-mcompact-branches=optimal <br>\n-mcompact-branches=always</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\ncontrol which form of branches will be generated. The\ndefault is\n<b>-mcompact-branches=optimal</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mcompact-branches=never</b> option ensures that compact\nbranch instructions will never be\ngenerated.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mcompact-branches=always</b> option ensures that a\ncompact branch instruction will be generated if available.\nIf a compact branch instruction is not available, a delay\nslot form of the branch will be used\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is supported from</big> MIPS <big>Release 6\nonwards.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mcompact-branches=optimal</b> option will cause a delay\nslot branch to be used if one is available in the\ncurrent</big> ISA <big>and the delay slot is successfully\nfilled. If the delay slot is not filled, a compact branch\nwill be chosen if one is available.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfp-exceptions\n<br>\n-mno-fp-exceptions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies\nwhether</big> FP <big>exceptions are enabled. This affects\nhow</big> FP <big>instructions are scheduled for some\nprocessors. The default is that</big> FP <big>exceptions are\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\ninstance, on the</big> SB-1, <big>if</big> FP\n<big>exceptions are disabled, and we are emitting 64-bit\ncode, then we can use both</big> FP <big>pipes. Otherwise,\nwe can only use one</big> FP\n<big>pipe.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvr4130-align\n<br>\n-mno-vr4130-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The</big> VR4130\n<big>pipeline is two-way superscalar, but can only issue two\ninstructions together if the first one is 8-byte aligned.\nWhen this option is enabled,</big> GCC <big>aligns pairs of\ninstructions that it thinks should execute in\nparallel.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption only has an effect when optimizing for the</big>\nVR4130. <big>It normally makes code faster, but at the\nexpense of making it bigger. It is enabled by default at\noptimization level <b>-O3</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msynci <br>\n-mno-synci</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable (disable)\ngeneration of &quot;synci&quot; instructions on\narchitectures that support it. The &quot;synci&quot;\ninstructions (if enabled) are generated when\n&quot;__builtin___clear_cache&quot; is\ncompiled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption defaults to <b>-mno-synci</b>, but the default can be\noverridden by configuring</big> GCC <big>with\n<b>--with-synci</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\ncompiling code for single processor systems, it is generally\nsafe to use &quot;synci&quot;. However, on many multi-core\n(</big> SMP <big>) systems, it does not invalidate the\ninstruction caches on all cores and may lead to undefined\nbehavior.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax-pic-calls\n<br>\n-mno-relax-pic-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Try to\nturn</big> PIC <big>calls that are normally dispatched via\nregister $25 into direct calls. This is only possible if the\nlinker can resolve the destination at link time and if the\ndestination is within range for a direct\ncall.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mrelax-pic-calls</b>\nis the default if</big> GCC <big>was configured to use an\nassembler and a linker that support the &quot;.reloc&quot;\nassembly directive and <b>-mexplicit-relocs</b> is in\neffect. With <b>-mno-explicit-relocs</b>, this optimization\ncan be performed by the assembler and the linker alone\nwithout help from the compiler.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmcount-ra-address\n<br>\n-mno-mcount-ra-address</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit (do not\nemit) code that allows &quot;_mcount&quot; to modify the\ncalling function&rsquo;s return address. When enabled, this\noption extends the usual &quot;_mcount&quot; interface with\na new <i>ra-address</i> parameter, which has type\n&quot;intptr_t *&quot; and is passed in register $12.\n&quot;_mcount&quot; can then modify the return address by\ndoing both of the following:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Returning the new address in register\n$31.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Storing the new address in\n&quot;*<i>ra-address</i>&quot;, if <i>ra-address</i> is\nnonnull.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is\n<b>-mno-mcount-ra-address</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mframe-header-opt\n<br>\n-mno-frame-header-opt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable (disable)\nframe header optimization in the o32</big> ABI. <big>When\nusing the o32</big> ABI, <big>calling functions will\nallocate 16 bytes on the stack for the called function to\nwrite out register arguments. When enabled, this\noptimization will suppress the allocation of the frame\nheader if it can be determined that it is\nunused.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noptimization is off by default at all optimization\nlevels.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlxc1-sxc1\n<br>\n-mno-lxc1-sxc1</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When applicable,\nenable (disable) the generation of &quot;lwxc1&quot;,\n&quot;swxc1&quot;, &quot;ldxc1&quot;, &quot;sdxc1&quot;\ninstructions. Enabled by default.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmadd4 <br>\n-mno-madd4</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When applicable,\nenable (disable) the generation of 4-operand\n&quot;madd.s&quot;, &quot;madd.d&quot; and related\ninstructions. Enabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>MMIX\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for the</big> MMIX: <b><big><br>\n-mlibfuncs <br>\n-mno-libfuncs</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that\nintrinsic library functions are being compiled, passing all\nvalues in registers, no matter the\nsize.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mepsilon\n<br>\n-mno-epsilon</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nfloating-point comparison instructions that compare with\nrespect to the &quot;rE&quot; epsilon\nregister.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=mmixware\n<br>\n-mabi=gnu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat passes function parameters and return values that (in\nthe called function) are seen as registers $0 and up, as\nopposed to the</big> GNU ABI <big>which uses global\nregisters $231 and up.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mzero-extend\n<br>\n-mno-zero-extend</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When reading\ndata from memory in sizes shorter than 64 bits, use (do not\nuse) zero-extending load instructions by default, rather\nthan sign-extending ones.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mknuthdiv\n<br>\n-mno-knuthdiv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make the result\nof a division yielding a remainder have the same sign as the\ndivisor. With the default, <b>-mno-knuthdiv</b>, the sign of\nthe remainder follows the sign of the dividend. Both methods\nare arithmetically valid, the latter being almost\nexclusively used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtoplevel-symbols\n<br>\n-mno-toplevel-symbols</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Prepend (do not\nprepend) a <b>:</b> to all global symbols, so the assembly\ncode can be used with the &quot;PREFIX&quot; assembly\ndirective.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-melf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate an\nexecutable in the</big> ELF <big>format, rather than the\ndefault <b>mmo</b> format used by the <b>mmix</b>\nsimulator.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-predict\n<br>\n-mno-branch-predict</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe probable-branch instructions, when static branch\nprediction indicates a probable\nbranch.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbase-addresses\n<br>\n-mno-base-addresses</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) code that uses <i>base addresses</i>. Using a base\naddress automatically generates a request (handled by the\nassembler and the linker) for a constant to be set up in a\nglobal register. The register is used for one or more base\naddress requests within the range 0 to 255 from the value\nheld in the register. The generally leads to short and fast\ncode, but the number of different data items that can be\naddressed is limited. This means that a program that uses\nlots of static data may require\n<b>-mno-base-addresses</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msingle-exit\n<br>\n-mno-single-exit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force (do not\nforce) generated code to have a single exit point in each\nfunction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>MN10300\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for Matsushita</big> MN10300\n<big>architectures: <b><br>\n-mmult-bug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code to\navoid bugs in the multiply instructions for the</big>\nMN10300 <big>processors. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-mult-bug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\ncode to avoid bugs in the multiply instructions for\nthe</big> MN10300 <big>processors.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mam33</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nusing features specific to the</big> AM33\n<big>processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-am33</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\ncode using features specific to the</big> AM33\n<big>processor. This is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mam33-2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nusing features specific to the</big> AM33/2.0\n<big>processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mam34</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nusing features specific to the</big> AM34\n<big>processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the timing\ncharacteristics of the indicated</big> CPU <big>type when\nscheduling instructions. This does not change the targeted\nprocessor type. The</big> CPU <big>type must be one of\n<b>mn10300</b>, <b>am33</b>, <b>am33-2</b> or\n<b>am34</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mreturn-pointer-on-d0</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When generating\na function that returns a pointer, return the pointer in\nboth &quot;a0&quot; and &quot;d0&quot;. Otherwise, the\npointer is returned only in &quot;a0&quot;, and attempts to\ncall such functions without a prototype result in errors.\nNote that this option is on by default; use\n<b>-mno-return-pointer-on-d0</b> to disable\nit.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-crt0</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not link in\nthe C run-time initialization object\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Indicate to the\nlinker that it should perform a relaxation optimization pass\nto shorten branches, calls and absolute memory addresses.\nThis option only has an effect when used on the command line\nfor the final link step.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption makes symbolic debugging\nimpossible.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mliw</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow the\ncompiler to generate <i>Long Instruction Word</i>\ninstructions if the target is the</big> <b>AM33</b> <big>or\nlater. This is the default. This option defines the\npreprocessor macro\n&quot;__LIW__&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-liw</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not allow the\ncompiler to generate <i>Long Instruction Word</i>\ninstructions. This option defines the preprocessor macro\n&quot;__NO_LIW__&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msetlb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow the\ncompiler to generate the</big> <i>SETLB</i> <big>and\n<i>Lcc</i> instructions if the target is the</big>\n<b>AM33</b> <big>or later. This is the default. This option\ndefines the preprocessor macro\n&quot;__SETLB__&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-setlb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not allow the\ncompiler to generate</big> <i>SETLB</i> <big>or <i>Lcc</i>\ninstructions. This option defines the preprocessor macro\n&quot;__NO_SETLB__&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Moxie\nOptions</i> <b><br>\n-meb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nbig-endian code. This is the default for <b>moxie-*-*</b>\nconfigurations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nlittle-endian code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmul.x</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate mul.x\nand umul.x instructions. This is the default for\n<b>moxiebox-*-*</b> configurations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-crt0</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not link in\nthe C run-time initialization object\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>MSP430\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for the</big> MSP430: <b><big><br>\n-masm-hex</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force assembly\noutput to always use hex constants. Normally such constants\nare signed decimals, but this option is available for\ntestsuite and/or aesthetic purposes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmcu=</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the</big>\nMCU <big>to target. This is used to create a C preprocessor\nsymbol based upon the</big> MCU <big>name, converted to\nupper case and pre- and post-fixed with <b>__</b>. This in\nturn is used by the <i>msp430.h</i> header file to select an\nMCU-specific supplementary header\nfile.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noption also sets the</big> ISA <big>to use. If the</big> MCU\n<big>name is one that is known to only support the 430</big>\nISA <big>then that is selected, otherwise the 430X</big> ISA\n<big>is selected. A generic</big> MCU <big>name of\n<b>msp430</b> can also be used to select the 430</big> ISA.\n<big>Similarly the generic <b>msp430x</b></big> MCU\n<big>name selects the 430X</big> ISA.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition an MCU-specific linker script is added to the\nlinker command line. The script&rsquo;s name is the name of\nthe</big> MCU <big>with <i>.ld</i> appended. Thus specifying\n<b>-mmcu=xxx</b> on the <b>gcc</b> command line defines the\nC preprocessor symbol &quot;__XXX__&quot; and cause the\nlinker to search for a script called\n<i>xxx.ld</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\nISA <big>and hardware multiply supported for the different\nMCUs is hard-coded into</big> GCC. <big>However, an external\n<b>devices.csv</b> file can be used to extend device support\nbeyond those that have been\nhard-coded.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>searches for the <b>devices.csv</b> file using the\nfollowing methods in the given precedence order, where the\nfirst method takes precendence over the second which takes\nprecedence over the third. <br>\nInclude path specified with &quot;-I&quot; and\n&quot;-L&quot;</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big><b>devices.csv</b>\nwill be searched for in each of the directories specified by\ninclude paths and linker library search\npaths.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Path specified\nby the environment variable</big>\n<b>MSP430_GCC_INCLUDE_DIR</b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Define the value\nof the global environment variable</big>\n<b>MSP430_GCC_INCLUDE_DIR</b> <big>to the full path to the\ndirectory containing devices.csv, and</big> GCC <big>will\nsearch this directory for devices.csv. If devices.csv is\nfound, this directory will also be registered as an include\npath, and linker library path. Header files and linker\nscripts in this directory can therefore be used without\nmanually specifying &quot;-I&quot; and &quot;-L&quot; on the\ncommand line.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The\n<b>msp430-elf{,bare}/include/devices</b>\ndirectory</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Finally,</big>\nGCC <big>will examine\n<b>msp430-elf{,bare}/include/devices</b> from the toolchain\nroot directory. This directory does not exist in a default\ninstallation, but if the user has created it and copied\n<b>devices.csv</b> there, then the</big> MCU <big>data will\nbe read. As above, this directory will also be registered as\nan include path, and linker library\npath.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nnone of the above search methods find <b>devices.csv</b>,\nthen the hard-coded</big> MCU <big>data is\nused.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mwarn-mcu\n<br>\n-mno-warn-mcu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables or disables warnings about conflicts between\nthe</big> MCU <big>name specified by the <b>-mmcu</b> option\nand the</big> ISA <big>set by the <b>-mcpu</b> option and/or\nthe hardware multiply support set by the <b>-mhwmult</b>\noption. It also toggles warnings about unrecognized</big>\nMCU <big>names. This option is on by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies\nthe</big> ISA <big>to use. Accepted values are\n<b>msp430</b>, <b>msp430x</b> and <b>msp430xv2</b>. This\noption is deprecated. The <b>-mmcu=</b> option should be\nused to select the</big> ISA.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-msim</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link to the\nsimulator runtime libraries and linker script. Overrides any\nscripts that would be selected by the <b>-mmcu=</b>\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlarge</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use large-model\naddressing (20-bit pointers, 20-bit\n&quot;size_t&quot;).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmall</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use small-model\naddressing (16-bit pointers, 16-bit\n&quot;size_t&quot;).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\npassed to the assembler and linker, and allows the linker to\nperform certain optimizations that cannot be done until the\nfinal link.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>mhwmult=</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Describes the\ntype of hardware multiply supported by the target. Accepted\nvalues are <b>none</b> for no hardware multiply,\n<b>16bit</b> for the original 16-bit-only multiply supported\nby early MCUs. <b>32bit</b> for the 16/32-bit multiply\nsupported by later MCUs and <b>f5series</b> for the\n16/32-bit multiply supported by F5-series MCUs. A value of\n<b>auto</b> can also be given. This tells</big> GCC <big>to\ndeduce the hardware multiply support based upon the</big>\nMCU <big>name provided by the <b>-mmcu</b> option. If no\n<b>-mmcu</b> option is specified or if the</big> MCU\n<big>name is not recognized then no hardware multiply\nsupport is assumed. &quot;auto&quot; is the default\nsetting.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Hardware\nmultiplies are normally performed by calling a library\nroutine. This saves space in the generated code. When\ncompiling at <b>-O3</b> or higher however the hardware\nmultiplier is invoked inline. This makes for bigger, but\nfaster code.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nhardware multiply routines disable interrupts whilst running\nand restore the previous interrupt state when they finish.\nThis makes them safe to use inside interrupt handlers as\nwell as in normal code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minrt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof a minimum runtime environment - no static initializers or\nconstructors. This is intended for memory-constrained\ndevices. The compiler includes special symbols in some\nobjects that tell the linker and runtime which code\nfragments are required.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtiny-printf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable reduced\ncode size &quot;printf&quot; and &quot;puts&quot; library\nfunctions. The <b>tiny</b> implementations of these\nfunctions are not reentrant, so must be used with caution in\nmulti-threaded applications.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Support\nfor streams has been removed and the string to be printed\nwill always be sent to stdout via the &quot;write&quot;\nsyscall. The string is not buffered before it is sent to\nwrite.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption requires Newlib Nano</big> IO, <big>so</big> GCC\n<big>must be configured with\n<b>--enable-newlib-nano-formatted-io</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmax-inline-shift=</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ntakes an integer between 0 and 64 inclusive, and sets the\nmaximum number of inline shift instructions which should be\nemitted to perform a shift operation by a constant amount.\nWhen this value needs to be exceeded, an mspabi helper\nfunction is used instead. The default value is\n4.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nonly affects cases where a shift by multiple positions\ncannot be completed with a single instruction (e.g. all\nshifts &gt;1 on the 430</big> ISA\n<big>).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Shifts\nof a 32-bit value are at least twice as costly, so the value\npassed for this option is divided by 2 and the resulting\nvalue used instead.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcode-region=\n<br>\n-mdata-region=</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\ntell the compiler where to place functions and data that do\nnot have one of the &quot;lower&quot;, &quot;upper&quot;,\n&quot;either&quot; or &quot;section&quot; attributes.\nPossible values are &quot;lower&quot;, &quot;upper&quot;,\n&quot;either&quot; or &quot;any&quot;. The first three\nbehave like the corresponding attribute. The fourth possible\nvalue - &quot;any&quot; - is the default. It leaves\nplacement entirely up to the linker script and how it\nassigns the standard sections (&quot;.text&quot;,\n&quot;.data&quot;, etc) to the memory\nregions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msilicon-errata=</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\npasses on a request to assembler to enable the fixes for the\nnamed silicon errata.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msilicon-errata-warn=</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\npasses on a request to the assembler to enable warning\nmessages when a silicon errata might need to be\napplied.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mwarn-devices-csv\n<br>\n-mno-warn-devices-csv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Warn if\n<b>devices.csv</b> is not found or there are problem parsing\nit (default: on).</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>NDS32\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for</big> NDS32 <big>implementations:\n<b><br>\n-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code in\nbig-endian mode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code in\nlittle-endian mode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mreduced-regs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use reduced-set\nregisters for register allocation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfull-regs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use full-set\nregisters for register allocation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmov</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nconditional move instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-cmov</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\nconditional move instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mext-perf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nperformance extension instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-ext-perf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\nperformance extension instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mext-perf2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nperformance extension 2 instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-ext-perf2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\nperformance extension 2 instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mext-string</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate string\nextension instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-ext-string</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\nstring extension instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv3push</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate v3\npush25/pop25 instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-v3push</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\nv3 push25/pop25 instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m16-bit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate 16-bit\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-16-bit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\n16-bit instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-misr-vector-size=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the size\nof each interrupt vector, which must be 4 or\n16.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcache-block-size=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the size\nof each cache block, which must be a power of 2 between 4\nand 512.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-march=</b><i>arch</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the name\nof the target architecture.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=</b><i>code-model</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the code\nmodel to one of <b><br>\nsmall</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>All the data and\nread-only data segments must be within 512KB addressing\nspace. The text segment must be within 16MB addressing\nspace.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>medium</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The data segment\nmust be within 512KB while the read-only data segment can be\nwithin 4GB addressing space. The text segment should be\nstill within 16MB addressing space.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>large</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>All the text and\ndata segments can be within 4GB addressing\nspace.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mctor-dtor</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\nconstructor/destructor feature.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Guide linker to\nrelax instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Nios</i></big>\n<i>II <big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nare the options defined for the Altera Nios</big> II\n<big>processor. <b><br>\n-G</b> <i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put global and\nstatic objects less than or equal to <i>num</i> bytes into\nthe small data or</big> BSS <big>sections instead of the\nnormal data or</big> BSS <big>sections. The default value of\n<i>num</i> is 8.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgpopt=</b><i>option</i>\n<b><br>\n-mgpopt <br>\n-mno-gpopt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) GP-relative accesses. The following <i>option</i>\nnames are recognized: <b><br>\nnone</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Do not generate\nGP-relative accesses.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>local</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Generate\nGP-relative accesses for small data objects that are not\nexternal, weak, or uninitialized common symbols. Also use\nGP-relative addressing for objects that have been explicitly\nplaced in a small data section via a &quot;section&quot;\nattribute.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>global</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>As for\n<b>local</b>, but also generate GP-relative accesses for\nsmall data objects that are external, weak, or common. If\nyou use this option, you must ensure that all parts of your\nprogram (including libraries) are compiled with the same\n<b>-G</b> setting.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>data</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Generate\nGP-relative accesses for all data objects in the program. If\nyou use this option, the entire data and</big> BSS\n<big>segments of your program must fit in 64K of memory and\nyou must use an appropriate linker script to allocate them\nwithin the addressable range of the global\npointer.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Generate GP-relative addresses for\nfunction pointers as well as data pointers. If you use this\noption, the entire text, data, and</big> BSS <big>segments\nof your program must fit in 64K of memory and you must use\nan appropriate linker script to allocate them within the\naddressable range of the global\npointer.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mgpopt</b>\nis equivalent to <b>-mgpopt=local</b>, and <b>-mno-gpopt</b>\nis equivalent to <b>-mgpopt=none</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-mgpopt</b> except when <b>-fpic</b> or\n<b>-fPIC</b> is specified to generate position-independent\ncode. Note that the Nios</big> II ABI <big>does not permit\nGP-relative accesses from shared\nlibraries.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\nmay need to specify <b>-mno-gpopt</b> explicitly when\nbuilding programs that include large amounts of small data,\nincluding large</big> GOT <big>data sections. In this case,\nthe 16-bit offset for GP-relative addressing may not be\nlarge enough to allow access to the entire small data\nsection.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgprel-sec=</b><i>regexp</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nspecifies additional section names that can be accessed via\nGP-relative addressing. It is most useful in conjunction\nwith &quot;section&quot; attributes on variable declarations\nand a custom linker script. The <i>regexp</i> is a</big>\nPOSIX <big>Extended Regular\nExpression.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption does not affect the behavior of the <b>-G</b> option,\nand the specified sections are in addition to the standard\n&quot;.sdata&quot; and &quot;.sbss&quot; small-data sections\nthat are recognized by <b>-mgpopt</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mr0rel-sec=</b><i>regexp</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nspecifies names of sections that can be accessed via a\n16-bit offset from &quot;r0&quot;; that is, in the low 32K\nor high 32K of the 32-bit address space. It is most useful\nin conjunction with &quot;section&quot; attributes on\nvariable declarations and a custom linker script. The\n<i>regexp</i> is a</big> POSIX <big>Extended Regular\nExpression.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\ncontrast to the use of GP-relative addressing for small\ndata, zero-based addressing is never generated by default\nand there are no conventional section names used in standard\nlinker scripts for sections in the low or high areas of\nmemory.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mel <br>\n-meb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nlittle-endian (default) or big-endian (experimental) code,\nrespectively.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-march=</b><i>arch</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This specifies\nthe name of the target Nios</big> II\n<big>architecture.</big> GCC <big>uses this name to\ndetermine what kind of instructions it can emit when\ngenerating assembly code. Permissible names are: <b>r1</b>,\n<b>r2</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\npreprocessor macro &quot;__nios2_arch__&quot; is available\nto programs, with value 1 or 2, indicating the\ntargeted</big> ISA <big>level.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbypass-cache\n<br>\n-mno-bypass-cache</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force all load\nand store instructions to always bypass cache by using I/O\nvariants of the instructions. The default is not to bypass\nthe cache.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-cache-volatile\n<br>\n-mcache-volatile</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Volatile memory\naccess bypass the cache using the I/O variants of the load\nand store instructions. The default is not to bypass the\ncache.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-fast-sw-div\n<br>\n-mfast-sw-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\ntable-based fast divide for small numbers. The default is to\nuse the fast divide at <b>-O3</b> and\nabove.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-hw-mul\n<br>\n-mhw-mul <br>\n-mno-hw-mulx <br>\n-mhw-mulx <br>\n-mno-hw-div <br>\n-mhw-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable emitting &quot;mul&quot;, &quot;mulx&quot; and\n&quot;div&quot; family of instructions by the compiler. The\ndefault is to emit &quot;mul&quot; and not emit\n&quot;div&quot; and &quot;mulx&quot;.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbmx <br>\n-mno-bmx <br>\n-mcdx <br>\n-mno-cdx</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable generation of Nios</big> II R2 BMX <big>(bit\nmanipulation) and</big> CDX <big>(code density)\ninstructions. Enabling these instructions also requires\n<b>-march=r2</b>. Since these instructions are optional\nextensions to the R2 architecture, the default is not to\nemit them.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcustom-</b><i>insn</i><b>=</b><i>N</i>\n<b><br>\n-mno-custom-</b><i>insn</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Each\n<b>-mcustom-</b><i>insn</i><b>=</b><i>N</i> option enables\nuse of a custom instruction with encoding <i>N</i> when\ngenerating code that uses <i>insn</i>. For example,\n<b>-mcustom-fadds=253</b> generates custom instruction 253\nfor single-precision floating-point add operations instead\nof the default behavior of using a library\ncall.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nfollowing values of <i>insn</i> are supported. Except as\notherwise noted, floating-point operations are expected to\nbe implemented with normal</big> IEEE 754 <big>semantics and\ncorrespond directly to the C operators or the\nequivalent</big> GCC <big>built-in\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Single-precision\nfloating point: <b><br>\nfadds</b>, <b>fsubs</b>, <b>fdivs</b>,\n<b>fmuls</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Binary\narithmetic operations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fnegs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Unary\nnegation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fabss</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Unary absolute\nvalue.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fcmpeqs</b>,\n<b>fcmpges</b>, <b>fcmpgts</b>, <b>fcmples</b>,\n<b>fcmplts</b>, <b>fcmpnes</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Comparison\noperations.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fmins</b>,\n<b>fmaxs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Floating-point\nminimum and maximum. These instructions are only generated\nif <b>-ffinite-math-only</b> is\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fsqrts</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Unary square\nroot operation.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fcoss</b>,\n<b>fsins</b>, <b>ftans</b>, <b>fatans</b>, <b>fexps</b>,\n<b>flogs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Floating-point\ntrigonometric and exponential functions. These instructions\nare only generated if <b>-funsafe-math-optimizations</b> is\nalso specified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Double-precision\nfloating point: <b><br>\nfaddd</b>, <b>fsubd</b>, <b>fdivd</b>,\n<b>fmuld</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Binary\narithmetic operations.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fnegd</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Unary\nnegation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fabsd</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Unary absolute\nvalue.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fcmpeqd</b>,\n<b>fcmpged</b>, <b>fcmpgtd</b>, <b>fcmpled</b>,\n<b>fcmpltd</b>, <b>fcmpned</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Comparison\noperations.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fmind</b>,\n<b>fmaxd</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>Double-precision\nminimum and maximum. These instructions are only generated\nif <b>-ffinite-math-only</b> is\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fsqrtd</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Unary square\nroot operation.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fcosd</b>,\n<b>fsind</b>, <b>ftand</b>, <b>fatand</b>, <b>fexpd</b>,\n<b>flogd</b></big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>Double-precision\ntrigonometric and exponential functions. These instructions\nare only generated if <b>-funsafe-math-optimizations</b> is\nalso specified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Conversions:\n<b><br>\nfextsd</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Conversion from\nsingle precision to double precision.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ftruncds</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Conversion from\ndouble precision to single precision.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fixsi</b>,\n<b>fixsu</b>, <b>fixdi</b>,\n<b>fixdu</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Conversion from\nfloating point to signed or unsigned integer types, with\ntruncation towards zero.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>round</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Conversion from\nsingle-precision floating point to signed integer, rounding\nto the nearest integer and ties away from zero. This\ncorresponds to the &quot;__builtin_lroundf&quot; function\nwhen <b>-fno-math-errno</b> is used.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>floatis</b>,\n<b>floatus</b>, <b>floatid</b>,\n<b>floatud</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Conversion from\nsigned or unsigned integer types to floating-point\ntypes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition, all of the following transfer instructions for\ninternal registers X and Y must be provided to use any of\nthe double-precision floating-point instructions. Custom\ninstructions taking two double-precision source operands\nexpect the first operand in the 64-bit register X. The other\noperand (or only operand of a unary operation) is given to\nthe custom arithmetic instruction with the least significant\nhalf in source register <i>src1</i> and the most significant\nhalf in <i>src2</i>. A custom instruction that returns a\ndouble-precision result returns the most significant 32 bits\nin the destination register and the other half in 32-bit\nregister Y.</big> GCC <big>automatically generates the\nnecessary code sequences to write register X and/or read\nregister Y when double-precision floating-point instructions\nare used. <b><br>\nfwrx</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Write\n<i>src1</i> into the least significant half of X and\n<i>src2</i> into the most significant half of\nX.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fwry</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Write\n<i>src1</i> into Y.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>frdxhi</b>,\n<b>frdxlo</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Read the most or\nleast (respectively) significant half of X and store it in\n<i>dest</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>frdy</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Read the value\nof Y and store it into <i>dest</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat you can gain more local control over generation of\nNios</big> II <big>custom instructions by using the\n&quot;target(&quot;custom-<i>insn</i>=<i>N</i>&quot;)&quot;\nand &quot;target(&quot;no-custom-<i>insn</i>&quot;)&quot;\nfunction attributes or pragmas.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcustom-fpu-cfg=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables a predefined, named set of custom instruction\nencodings (see <b>-mcustom-</b><i>insn</i> above).\nCurrently, the following sets are\ndefined:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcustom-fpu-cfg=60-1</b>\nis equivalent to: <b>-mcustom-fmuls=252 -mcustom-fadds=253\n-mcustom-fsubs=254\n-fsingle-precision-constant</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcustom-fpu-cfg=60-2</b>\nis equivalent to: <b>-mcustom-fmuls=252 -mcustom-fadds=253\n-mcustom-fsubs=254 -mcustom-fdivs=255\n-fsingle-precision-constant</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcustom-fpu-cfg=72-3</b>\nis equivalent to: <b>-mcustom-floatus=243 -mcustom-fixsi=244\n-mcustom-floatis=245 -mcustom-fcmpgts=246\n-mcustom-fcmples=249 -mcustom-fcmpeqs=250\n-mcustom-fcmpnes=251 -mcustom-fmuls=252 -mcustom-fadds=253\n-mcustom-fsubs=254 -mcustom-fdivs=255\n-fsingle-precision-constant</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcustom-fpu-cfg=fph2</b>\nis equivalent to: <b>-mcustom-fabss=224 -mcustom-fnegs=225\n-mcustom-fcmpnes=226 -mcustom-fcmpeqs=227\n-mcustom-fcmpges=228 -mcustom-fcmpgts=229\n-mcustom-fcmples=230 -mcustom-fcmplts=231 -mcustom-fmaxs=232\n-mcustom-fmins=233 -mcustom-round=248 -mcustom-fixsi=249\n-mcustom-floatis=250 -mcustom-fsqrts=251 -mcustom-fmuls=252\n-mcustom-fadds=253 -mcustom-fsubs=254\n-mcustom-fdivs=255</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Custom\ninstruction assignments given by individual\n<b>-mcustom-</b><i>insn</i><b>=</b> options override those\ngiven by <b>-mcustom-fpu-cfg=</b>, regardless of the order\nof the options on the command line.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat you can gain more local control over selection of\na</big> FPU <big>configuration by using the\n&quot;target(&quot;custom-fpu-cfg=<i>name</i>&quot;)&quot;\nfunction attribute or pragma.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nname <i>fph2</i> is an abbreviation for <i>Nios</i></big>\n<i>II <big>Floating Point Hardware 2\nComponent</big></i><big>. Please note that the custom\ninstructions enabled by <b>-mcustom-fmins=233</b> and\n<b>-mcustom-fmaxs=234</b> are only generated if\n<b>-ffinite-math-only</b> is specified. The custom\ninstruction enabled by <b>-mcustom-round=248</b> is only\ngenerated if <b>-fno-math-errno</b> is specified. In\ncontrast to the other configurations,\n<b>-fsingle-precision-constant</b> is not\nset.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nadditional <b>-m</b> options are available for the Altera\nNios</big> II ELF <big>(bare-metal) target: <b><br>\n-mhal</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link with</big>\nHAL BSP. <big>This suppresses linking with the GCC-provided\nC runtime startup and termination code, and is typically\nused in conjunction with <b>-msys-crt0=</b> to specify the\nlocation of the alternate startup code provided by the</big>\nHAL BSP.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-msmallc</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link with a\nlimited version of the C library, <b>-lsmallc</b>, rather\nthan Newlib.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msys-crt0=</b><i>startfile</i></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><i>startfile</i>\nis the file name of the startfile (crt0) to use when\nlinking. This option is only useful in conjunction with\n<b>-mhal</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msys-lib=</b><i>systemlib</i></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><i>systemlib</i>\nis the library name of the library that provides low-level\nsystem calls required by the C library, e.g.\n&quot;read&quot; and &quot;write&quot;. This option is\ntypically used to link with a library provided by a</big>\nHAL BSP.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i><big>Nvidia</big>\nPTX <big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for Nvidia</big> PTX: <b><big><br>\n-m64</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Ignored, but\npreserved for backward compatibility. Only 64-bit</big> ABI\n<big>is supported.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-misa=</b><i>ISA-string</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor given the specified</big> PTX ISA <big>(e.g.\n<b>sm_35</b>).</big> ISA <big>strings must be lower-case.\nValid</big> ISA <big>strings include <b>sm_30</b> and\n<b>sm_35</b>. The default</big> ISA <big>is\nsm_35.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmainkernel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link in code for\na __main kernel. This is for stand-alone instead of\noffloading execution.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-moptimize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Apply\npartitioned execution optimizations. This is the default\nwhen any level of optimization is\nselected.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-stack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat does not use &quot;.local&quot; memory directly for\nstack storage. Instead, a per-warp stack pointer is\nmaintained explicitly. This enables variable-length stack\nallocation (with variable-length arrays or\n&quot;alloca&quot;), and when global memory is used for\nunderlying storage, makes it possible to access automatic\nvariables from other threads, or with atomic instructions.\nThis code generation variant is used for OpenMP offloading,\nbut the option is exposed on its own for the purpose of\ntesting the compiler; to generate code suitable for linking\ninto programs using OpenMP offloading, use option\n<b>-mgomp</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-muniform-simt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Switch to code\ngeneration variant that allows to execute all threads in\neach warp, while maintaining memory state and side effects\nas if only one thread in each warp was active outside of\nOpenMP</big> SIMD <big>regions. All atomic operations and\ncalls to runtime (malloc, free, vprintf) are conditionally\nexecuted (iff current lane index equals the master lane\nindex), and the register being assigned is copied via a\nshuffle instruction from the master lane. Outside of</big>\nSIMD <big>regions lane 0 is the master; inside, each thread\nsees itself as the master. Shared memory array &quot;int\n__nvptx_uni[]&quot; stores all-zeros or all-ones bitmasks\nfor each warp, indicating current mode (0 outside of</big>\nSIMD <big>regions). Each thread can bitwise-and the bitmask\nat position &quot;tid.y&quot; with current lane index to\ncompute the master lane index.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgomp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor use in OpenMP offloading: enables <b>-msoft-stack</b>\nand <b>-muniform-simt</b> options, and selects corresponding\nmultilib variant.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>OpenRISC\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for OpenRISC: <b><br>\n-mboard=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Configure a\nboard specific runtime. This will be passed to the linker\nfor newlib board library linking. The default is\n&quot;or1ksim&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnewlib</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nignored; it is for compatibility purposes only. This used to\nselect linker and preprocessor options for use with\nnewlib.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-div\n<br>\n-mhard-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select software\nor hardware divide (&quot;l.div&quot;, &quot;l.divu&quot;)\ninstructions. This default is hardware\ndivide.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-mul\n<br>\n-mhard-mul</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select software\nor hardware multiply (&quot;l.mul&quot;, &quot;l.muli&quot;)\ninstructions. This default is hardware\nmultiply.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float\n<br>\n-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select software\nor hardware for floating point operations. The default is\nsoftware.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdouble-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\n<b>-mhard-float</b> is selected, enables generation of\ndouble-precision floating point instructions. By default\nfunctions from <i>libgcc</i> are used to perform\ndouble-precision floating point\noperations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-munordered-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\n<b>-mhard-float</b> is selected, enables generation of\nunordered floating point compare and set flag\n(&quot;lf.sfun*&quot;) instructions. By default functions\nfrom <i>libgcc</i> are used to perform unordered floating\npoint compare and set flag operations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmov</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of conditional move (&quot;l.cmov&quot;)\ninstructions. By default the equivalent will be generated\nusing set and branch.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mror</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of rotate right (&quot;l.ror&quot;) instructions.\nBy default functions from <i>libgcc</i> are used to perform\nrotate right operations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrori</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of rotate right with immediate\n(&quot;l.rori&quot;) instructions. By default functions from\n<i>libgcc</i> are used to perform rotate right with\nimmediate operations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msext</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of sign extension (&quot;l.ext*&quot;)\ninstructions. By default memory loads are used to perform\nsign extension.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msfimm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of compare and set flag with immediate\n(&quot;l.sf*i&quot;) instructions. By default extra\ninstructions will be generated to store the immediate to a\nregister first.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshftimm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of shift with immediate (&quot;l.srai&quot;,\n&quot;l.srli&quot;, &quot;l.slli&quot;) instructions. By\ndefault extra instructions will be generated to store the\nimmediate to a register first.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>PDP-11\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for the</big> PDP-11: <b><big><br>\n-mfpu</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use\nhardware</big> FPP <big>floating point. This is the default.\n(</big> FIS <big>floating point on the</big> PDP-11/40\n<big>is not supported.) Implies -m45.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\nhardware floating point.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mac0</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Return\nfloating-point results in ac0 (fr0 in Unix assembler\nsyntax).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-ac0</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Return\nfloating-point results in memory. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m40</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a</big> PDP-11/40. <big>Implies -msoft-float\n-mno-split.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m45</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a</big> PDP-11/45. <big>This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m10</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a</big> PDP-11/10. <big>Implies -msoft-float\n-mno-split.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mint16 <br>\n-mno-int32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use 16-bit\n&quot;int&quot;. This is the default.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mint32 <br>\n-mno-int16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use 32-bit\n&quot;int&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msplit</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Target has split\ninstruction and data space. Implies\n-m45.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-munix-asm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use Unix\nassembler syntax.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdec-asm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use</big> DEC\n<big>assembler syntax.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgnu-asm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use</big> GNU\n<big>assembler syntax. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlra</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the\nnew</big> LRA <big>register allocator. By default, the old\n&quot;reload&quot; allocator is used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>picoChip\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for picoChip implementations:\n<b><br>\n-mae=</b><i>ae_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ninstruction set, register set, and instruction scheduling\nparameters for array element type <i>ae_type</i>. Supported\nvalues for <i>ae_type</i> are</big> <b>ANY</b> <big>,</big>\n<b>MUL</b> <big>, and</big> <b>MAC</b>\n<big>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mae=ANY</b>\nselects a completely generic</big> AE <big>type. Code\ngenerated with this option runs on any of the other</big> AE\n<big>types. The code is not as efficient as it would be if\ncompiled for a specific</big> AE <big>type, and some types\nof operation (e.g., multiplication) do not work properly on\nall types of</big> AE.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b><big>-mae=MUL</big></b>\n<big>selects a</big> MUL AE <big>type. This is the most\nuseful</big> AE <big>type for compiled code, and is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mae=MAC</b>\nselects a DSP-style</big> MAC AE. <big>Code compiled with\nthis option may suffer from poor performance of byte (char)\nmanipulation, since the</big> DSP AE <big>does not provide\nhardware support for byte load/stores.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msymbol-as-address</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\ncompiler to directly use a symbol name as an address in a\nload/store instruction, without first loading it into a\nregister. Typically, the use of this option generates larger\nprograms, which run faster than when the option isn&rsquo;t\nused. However, the results vary from program to program, so\nit is left as a user option, rather than being permanently\nenabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-inefficient-warnings</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disables\nwarnings about the generation of inefficient code. These\nwarnings can be generated, for example, when compiling code\nthat performs byte-level memory operations on the</big> MAC\nAE <big>type. The</big> MAC AE <big>has no hardware support\nfor byte-level memory operations, so all byte load/stores\nmust be synthesized from word load/store operations. This is\ninefficient and a warning is generated to indicate that you\nshould rewrite the code to avoid byte operations, or to\ntarget an</big> AE <big>type that has the necessary hardware\nsupport. This option disables these\nwarnings.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>PowerPC\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nare listed under</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>PRU\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\ncommand-line options are defined for</big> PRU <big>target:\n<b><br>\n-minrt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link with a\nminimum runtime environment, with no support for static\ninitializers and constructors. Using this option can\nsignificantly reduce the size of the final</big> ELF\n<big>binary. Beware that the compiler could still generate\ncode with static initializers and constructors. It is up to\nthe programmer to ensure that the source program will not\nuse those features.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmcu=</b><i>mcu</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nthe</big> PRU MCU <big>variant to use. Check Newlib for the\nexact list of supported MCUs.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-relax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make</big> GCC\n<big>pass the <b>--no-relax</b> command-line option to the\nlinker instead of the <b>--relax</b>\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mloop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow (or do not\nallow)</big> GCC <big>to use the</big> LOOP\n<big>instruction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=</b><i>variant</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nthe</big> ABI <big>variant to output code for.\n<b>-mabi=ti</b> selects the unmodified</big> TI ABI\n<big>while <b>-mabi=gnu</b> selects a</big> GNU <big>variant\nthat copes more naturally with certain</big> GCC\n<big>assumptions. These are the differences: <b><br>\nFunction Pointer Size</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>TI ABI <big>specifies\nthat function (code) pointers are 16-bit, whereas</big> GNU\n<big>supports only 32-bit data and code\npointers.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>Optional\nReturn Value Pointer</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Function return\nvalues larger than 64 bits are passed by using a hidden\npointer as the first argument of the function.</big> TI ABI,\n<big>though, mandates that the pointer can be</big> NULL\n<big>in case the caller is not using the returned\nvalue.</big> GNU <big>always passes and expects a valid\nreturn value pointer.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ncurrent <b>-mabi=ti</b> implementation simply raises a\ncompile error when any of the above code constructs is\ndetected. As a consequence the standard C library cannot be\nbuilt and it is omitted when linking with\n<b>-mabi=ti</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Relaxation\nis a</big> GNU <big>feature and for safety reasons is\ndisabled when using <b>-mabi=ti</b>. The</big> TI\n<big>toolchain does not emit relocations for QBBx\ninstructions, so the</big> GNU <big>linker cannot adjust\nthem when shortening adjacent</big> LDI32 <big>pseudo\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>RISC-V\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\ncommand-line options are defined for RISC-V targets: <b><br>\n-mbranch-cost=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the cost of\nbranches to roughly <i>n</i>\ninstructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mplt <br>\n-mno-plt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\ngenerating</big> PIC <big>code, do or don&rsquo;t allow the\nuse of PLTs. Ignored for non-PIC. The default is\n<b>-mplt</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=</b><i>ABI-string</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify integer\nand floating-point calling convention. <i>ABI-string</i>\ncontains two parts: the size of integer types and the\nregisters used for floating-point types. For example\n<b>-march=rv64ifd -mabi=lp64d</b> means that <b>long</b> and\npointers are 64-bit (implicitly defining <b>int</b> to be\n32-bit), and that floating-point values up to 64 bits wide\nare passed in F registers. Contrast this with\n<b>-march=rv64ifd -mabi=lp64f</b>, which still allows the\ncompiler to generate code that uses the F and D extensions\nbut only allows floating-point values up to 32 bits long to\nbe passed in registers; or <b>-march=rv64ifd -mabi=lp64</b>,\nin which no floating-point arguments will be passed in\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault for this argument is system dependent, users who\nwant a specific calling convention should specify one\nexplicitly. The valid calling conventions are: <b>ilp32</b>,\n<b>ilp32f</b>, <b>ilp32d</b>, <b>lp64</b>, <b>lp64f</b>, and\n<b>lp64d</b>. Some calling conventions are impossible to\nimplement on some ISAs: for example, <b>-march=rv32if\n-mabi=ilp32d</b> is invalid because the</big> ABI\n<big>requires 64-bit values be passed in F registers, but F\nregisters are only 32 bits wide. There is also the\n<b>ilp32e</b></big> ABI <big>that can only be used with the\n<b>rv32e</b> architecture. This</big> ABI <big>is not well\nspecified at present, and is subject to\nchange.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfdiv <br>\n-mno-fdiv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do or\ndon&rsquo;t use hardware floating-point divide and square\nroot instructions. This requires the F or D extensions for\nfloating-point registers. The default is to use them if the\nspecified architecture has these\ninstructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdiv <br>\n-mno-div</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do or\ndon&rsquo;t use hardware instructions for integer division.\nThis requires the M extension. The default is to use them if\nthe specified architecture has these\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-march=</b><i>ISA-string</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor given RISC-V</big> ISA <big>(e.g. <b>rv64im</b>).</big>\nISA <big>strings must be lower-case. Examples include\n<b>rv64i</b>, <b>rv32g</b>, <b>rv32e</b>, and\n<b>rv32imaf</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\n<b>-march=</b> is not specified, use the setting from\n<b>-mcpu</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nboth <b>-march</b> and <b>-mcpu=</b> are not specified, the\ndefault for this argument is system dependent, users who\nwant a specific architecture extensions should specify one\nexplicitly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>processor-string</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use architecture\nof and optimize the output for the given processor,\nspecified by particular</big> CPU <big>name. Permissible\nvalues for this option are: <b>sifive-e20</b>,\n<b>sifive-e21</b>, <b>sifive-e24</b>, <b>sifive-e31</b>,\n<b>sifive-e34</b>, <b>sifive-e76</b>, <b>sifive-s21</b>,\n<b>sifive-s51</b>, <b>sifive-s54</b>, <b>sifive-s76</b>,\n<b>sifive-u54</b>, and\n<b>sifive-u74</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>processor-string</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Optimize the\noutput for the given processor, specified by\nmicroarchitecture or particular</big> CPU <big>name.\nPermissible values for this option are: <b>rocket</b>,\n<b>sifive-3-series</b>, <b>sifive-5-series</b>,\n<b>sifive-7-series</b>, <b>size</b>, and all valid options\nfor <b>-mcpu=</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\n<b>-mtune=</b> is not specified, use the setting from\n<b>-mcpu</b>, the default is <b>rocket</b> if both are not\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>size</b> choice is not intended for use by end-users.\nThis is used when <b>-Os</b> is specified. It overrides the\ninstruction cost info provided by <b>-mtune=</b>, but does\nnot override the pipeline info. This helps reduce code size\nwhile still giving good performance.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpreferred-stack-boundary=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to keep\nthe stack boundary aligned to a 2 raised to <i>num</i> byte\nboundary. If <b>-mpreferred-stack-boundary</b> is not\nspecified, the default is 4 (16 bytes or\n128-bits).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nIf you use this switch, then you must build all modules with\nthe same value, including any libraries. This includes the\nsystem libraries and startup modules.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmall-data-limit=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put global and\nstatic data smaller than <i>n</i> bytes into a special\nsection (on some targets).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msave-restore\n<br>\n-mno-save-restore</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do or\ndon&rsquo;t use smaller but slower prologue and epilogue\ncode that uses library function calls. The default is to use\nfast inline prologues and epilogues.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshorten-memrefs\n<br>\n-mno-shorten-memrefs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do or do not\nattempt to make more use of compressed load/store\ninstructions by replacing a load/store of &rsquo;base\nregister + large offset&rsquo; with a new load/store of\n&rsquo;new base + small offset&rsquo;. If the new base gets\nstored in a compressed register, then the new load/store can\nbe compressed. Currently targets 32-bit integer load/stores\nonly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstrict-align\n<br>\n-mno-strict-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not or do\ngenerate unaligned memory accesses. The default is set\ndepending on whether the processor we are optimizing for\nsupports fast unaligned access or not.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=medlow</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the medium-low code model. The program and its\nstatically defined symbols must lie within a single 2 GiB\naddress range and must lie between absolute addresses -2 GiB\nand +2 GiB. Programs can be statically or dynamically\nlinked. This is the default code\nmodel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=medany</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the medium-any code model. The program and its\nstatically defined symbols must be within any single 2 GiB\naddress range. Programs can be statically or dynamically\nlinked.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mexplicit-relocs\n<br>\n-mno-exlicit-relocs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use or do not\nuse assembler relocation operators when dealing with\nsymbolic addresses. The alternative is to use assembler\nmacros instead, which may limit\noptimization.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax <br>\n-mno-relax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Take advantage\nof linker relaxations to reduce the number of instructions\nrequired to materialize symbol addresses. The default is to\ntake advantage of linker relaxations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-memit-attribute\n<br>\n-mno-emit-attribute</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit (do not\nemit) RISC-V attribute to record extra information\ninto</big> ELF <big>objects. This feature requires at least\nbinutils 2.32.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malign-data=</b><i>type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control\nhow</big> GCC <big>aligns variables and constants of array,\nstructure, or union types. Supported values for <i>type</i>\nare <b>xlen</b> which uses x register width as the alignment\nvalue, and <b>natural</b> which uses natural alignment.\n<b>xlen</b> is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nbig-endian code. This is the default when</big> GCC <big>is\nconfigured for a <b>riscv64be-*-*</b> or\n<b>riscv32be-*-*</b> target.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nlittle-endian code. This is the default when</big> GCC\n<big>is configured for a <b>riscv64-*-*</b> or\n<b>riscv32-*-*</b> but not a <b>riscv64be-*-*</b> or\n<b>riscv32be-*-*</b> target.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-protector-guard=</b><i>guard</i>\n<b><br>\n-mstack-protector-guard-reg=</b><i>reg</i> <b><br>\n\n-mstack-protector-guard-offset=</b><i>offset</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate stack\nprotection code using canary at <i>guard</i>. Supported\nlocations are <b>global</b> for a global canary or\n<b>tls</b> for per-thread canary in the</big> TLS\n<big>block.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\nthe latter choice the options\n<b>-mstack-protector-guard-reg=</b><i>reg</i> and\n<b>-mstack-protector-guard-offset=</b><i>offset</i>\nfurthermore specify which register to use as base register\nfor reading the canary, and from what offset from that base\nregister. There is no default register or offset as this is\nentirely for use within the Linux\nkernel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>RL78\n<big>Options</big></i> <big><b><br>\n-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Links in\nadditional target libraries to support operation within a\nsimulator.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmul=none\n<br>\n-mmul=g10 <br>\n-mmul=g13 <br>\n-mmul=g14 <br>\n-mmul=rl78</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\ntype of hardware multiplication and division support to be\nused. The simplest is &quot;none&quot;, which uses software\nfor both multiplication and division. This is the default.\nThe &quot;g13&quot; value is for the hardware\nmultiply/divide peripheral found on the</big> RL78/G13\n<big>(S2 core) targets. The &quot;g14&quot; value selects\nthe use of the multiplication and division instructions\nsupported by the</big> RL78/G14 <big>(S3 core) parts. The\nvalue &quot;rl78&quot; is an alias for &quot;g14&quot; and\nthe value &quot;mg10&quot; is an alias for\n&quot;none&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition a C preprocessor macro is defined, based upon the\nsetting of this option. Possible values are:\n&quot;__RL78_MUL_NONE__&quot;, &quot;__RL78_MUL_G13__&quot;\nor &quot;__RL78_MUL_G14__&quot;.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=g10\n<br>\n-mcpu=g13 <br>\n-mcpu=g14 <br>\n-mcpu=rl78</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies\nthe</big> RL78 <big>core to target. The default is the G14\ncore, also known as an S3 core or just</big> RL78. <big>The\nG13 or S2 core does not have multiply or divide\ninstructions, instead it uses a hardware peripheral for\nthese operations. The G10 or S1 core does not have register\nbanks, so it uses a different calling\nconvention.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthis option is set it also selects the type of hardware\nmultiply support to use, unless this is overridden by an\nexplicit <b>-mmul=none</b> option on the command line. Thus\nspecifying <b>-mcpu=g13</b> enables the use of the G13\nhardware multiply peripheral and specifying <b>-mcpu=g10</b>\ndisables the use of hardware multiplications\naltogether.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note,\nalthough the</big> RL78/G14 <big>core is the default target,\nspecifying <b>-mcpu=g14</b> or <b>-mcpu=rl78</b> on the\ncommand line does change the behavior of the toolchain since\nit also enables G14 hardware multiply support. If these\noptions are not specified on the command line then software\nmultiplication routines will be used even though the code\ntargets the</big> RL78 <big>core. This is for backwards\ncompatibility with older toolchains which did not have\nhardware multiply and divide support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition a C preprocessor macro is defined, based upon the\nsetting of this option. Possible values are:\n&quot;__RL78_G10__&quot;, &quot;__RL78_G13__&quot; or\n&quot;__RL78_G14__&quot;.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mg10 <br>\n-mg13 <br>\n-mg14 <br>\n-mrl78</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These are\naliases for the corresponding <b>-mcpu=</b> option. They are\nprovided for backwards compatibility.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mallregs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow the\ncompiler to use all of the available registers. By default\nregisters &quot;r24..r31&quot; are reserved for use in\ninterrupt handlers. With this option enabled these registers\ncan be used in ordinary functions as\nwell.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m64bit-doubles\n<br>\n-m32bit-doubles</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make the\n&quot;double&quot; data type be 64 bits\n(<b>-m64bit-doubles</b>) or 32 bits (<b>-m32bit-doubles</b>)\nin size. The default is\n<b>-m32bit-doubles</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msave-mduc-in-interrupts\n<br>\n-mno-save-mduc-in-interrupts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies that\ninterrupt handler functions should preserve the</big> MDUC\n<big>registers. This is only necessary if normal code might\nuse the</big> MDUC <big>registers, for example because it\nperforms multiplication and division operations. The default\nis to ignore the</big> MDUC <big>registers as this makes the\ninterrupt handlers faster. The target option -mg13 needs to\nbe passed for this to work as this feature is only available\non the G13 target (S2 core). The</big> MDUC <big>registers\nwill only be saved if the interrupt handler performs a\nmultiplication or division operation or it calls another\nfunction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>IBM\nRS/6000 <big>and PowerPC Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the</big> IBM RS/6000\n<big>and PowerPC: <b><br>\n-mpowerpc-gpopt <br>\n-mno-powerpc-gpopt <br>\n-mpowerpc-gfxopt <br>\n-mno-powerpc-gfxopt <br>\n-mpowerpc64 <br>\n-mno-powerpc64 <br>\n-mmfcrf <br>\n-mno-mfcrf <br>\n-mpopcntb <br>\n-mno-popcntb <br>\n-mpopcntd <br>\n-mno-popcntd <br>\n-mfprnd <br>\n-mno-fprnd <br>\n-mcmpb <br>\n-mno-cmpb <br>\n-mhard-dfp <br>\n-mno-hard-dfp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>You use these\noptions to specify which instructions are available on the\nprocessor you are using. The default value of these options\nis determined when configuring</big> GCC. <big>Specifying\nthe <b>-mcpu=</b><i>cpu_type</i> overrides the specification\nof these options. We recommend you use the\n<b>-mcpu=</b><i>cpu_type</i> option rather than the options\nlisted above.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Specifying\n<b>-mpowerpc-gpopt</b> allows</big> GCC <big>to use the\noptional PowerPC architecture instructions in the General\nPurpose group, including floating-point square root.\nSpecifying <b>-mpowerpc-gfxopt</b> allows</big> GCC <big>to\nuse the optional PowerPC architecture instructions in the\nGraphics group, including floating-point\nselect.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mmfcrf</b> option allows</big> GCC <big>to generate the\nmove from condition register field instruction implemented\non the</big> POWER4 <big>processor and other processors that\nsupport the PowerPC V2.01 architecture. The <b>-mpopcntb</b>\noption allows</big> GCC <big>to generate the popcount and\ndouble-precision</big> FP <big>reciprocal estimate\ninstruction implemented on the</big> POWER5 <big>processor\nand other processors that support the PowerPC V2.02\narchitecture. The <b>-mpopcntd</b> option allows</big> GCC\n<big>to generate the popcount instruction implemented on\nthe</big> POWER7 <big>processor and other processors that\nsupport the PowerPC V2.06 architecture. The <b>-mfprnd</b>\noption allows</big> GCC <big>to generate the</big> FP\n<big>round to integer instructions implemented on the</big>\nPOWER5+ <big>processor and other processors that support the\nPowerPC V2.03 architecture. The <b>-mcmpb</b> option\nallows</big> GCC <big>to generate the compare bytes\ninstruction implemented on the</big> POWER6 <big>processor\nand other processors that support the PowerPC V2.05\narchitecture. The <b>-mhard-dfp</b> option allows</big> GCC\n<big>to generate the decimal floating-point instructions\nimplemented on some</big> POWER\n<big>processors.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mpowerpc64</b> option allows</big> GCC <big>to generate\nthe additional 64-bit instructions that are found in the\nfull PowerPC64 architecture and to treat GPRs as 64-bit,\ndoubleword quantities.</big> GCC <big>defaults to\n<b>-mno-powerpc64</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set architecture\ntype, register usage, and instruction scheduling parameters\nfor machine type <i>cpu_type</i>. Supported values for\n<i>cpu_type</i> are <b>401</b>, <b>403</b>, <b>405</b>,\n<b>405fp</b>, <b>440</b>, <b>440fp</b>, <b>464</b>,\n<b>464fp</b>, <b>476</b>, <b>476fp</b>, <b>505</b>,\n<b>601</b>, <b>602</b>, <b>603</b>, <b>603e</b>, <b>604</b>,\n<b>604e</b>, <b>620</b>, <b>630</b>, <b>740</b>,\n<b>7400</b>, <b>7450</b>, <b>750</b>, <b>801</b>,\n<b>821</b>, <b>823</b>, <b>860</b>, <b>970</b>, <b>8540</b>,\n<b>a2</b>, <b>e300c2</b>, <b>e300c3</b>, <b>e500mc</b>,\n<b>e500mc64</b>, <b>e5500</b>, <b>e6500</b>, <b>ec603e</b>,\n<b>G3</b>, <b>G4</b>, <b>G5</b>, <b>titan</b>,\n<b>power3</b>, <b>power4</b>, <b>power5</b>, <b>power5+</b>,\n<b>power6</b>, <b>power6x</b>, <b>power7</b>, <b>power8</b>,\n<b>power9</b>, <b>power10</b>, <b>powerpc</b>,\n<b>powerpc64</b>, <b>powerpc64le</b>, <b>rs64</b>, and\n<b>native</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mcpu=powerpc</b>,\n<b>-mcpu=powerpc64</b>, and <b>-mcpu=powerpc64le</b> specify\npure 32-bit PowerPC (either endian), 64-bit big endian\nPowerPC and 64-bit little endian PowerPC architecture\nmachine types, with an appropriate, generic processor model\nassumed for scheduling purposes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Specifying\n<b>native</b> as cpu type detects and selects the\narchitecture option that corresponds to the host processor\nof the system performing the compilation.\n<b>-mcpu=native</b> has no effect if</big> GCC <big>does not\nrecognize the processor.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nother options specify a specific processor. Code generated\nunder those options runs best on that processor, and may not\nrun at all on others.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mcpu</b> options automatically enable or disable the\nfollowing options:</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-maltivec\n-mfprnd -mhard-float -mmfcrf -mmultiple -mpopcntb -mpopcntd\n-mpowerpc64 -mpowerpc-gpopt -mpowerpc-gfxopt -mmulhw -mdlmzb\n-mmfpgpr -mvsx -mcrypto -mhtm -mpower8-fusion\n-mpower8-vector -mquad-memory -mquad-memory-atomic\n-mfloat128 -mfloat128-hardware -mprefixed -mpcrel -mmma\n-mrop-protect</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nparticular options set for any particular</big> CPU\n<big>varies between compiler versions, depending on what\nsetting seems to produce optimal code for that</big> CPU\n<big>; it doesn&rsquo;t necessarily reflect the actual\nhardware&rsquo;s capabilities. If you wish to set an\nindividual option to a particular value, you may specify it\nafter the <b>-mcpu</b> option, like <b>-mcpu=970\n-mno-altivec</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On</big>\nAIX, <big>the <b>-maltivec</b> and <b>-mpowerpc64</b>\noptions are not enabled or disabled by the <b>-mcpu</b>\noption at present because</big> AIX <big>does not have full\nsupport for these options. You may still enable or disable\nthem individually if you&rsquo;re sure it&rsquo;ll work in\nyour environment.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ninstruction scheduling parameters for machine type\n<i>cpu_type</i>, but do not set the architecture type or\nregister usage, as <b>-mcpu=</b><i>cpu_type</i> does. The\nsame values for <i>cpu_type</i> are used for <b>-mtune</b>\nas for <b>-mcpu</b>. If both are specified, the code\ngenerated uses the architecture and registers set by\n<b>-mcpu</b>, but the scheduling parameters set by\n<b>-mtune</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=small</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nPowerPC64 code for the small model: The</big> TOC <big>is\nlimited to 64k.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=medium</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nPowerPC64 code for the medium model: The</big> TOC <big>and\nother static data may be up to a total of 4G in size. This\nis the default for 64-bit Linux.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=large</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nPowerPC64 code for the large model: The</big> TOC <big>may\nbe up to 4G in size. Other data and code is only limited by\nthe 64-bit address space.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maltivec\n<br>\n-mno-altivec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) AltiVec instructions, and also\nenable the use of built-in functions that allow more direct\naccess to the AltiVec instruction set. You may also need to\nset <b>-mabi=altivec</b> to adjust the current</big> ABI\n<big>with AltiVec</big> ABI\n<big>enhancements.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\n<b>-maltivec</b> is used, the element order for AltiVec\nintrinsics such as &quot;vec_splat&quot;,\n&quot;vec_extract&quot;, and &quot;vec_insert&quot; match\narray element order corresponding to the endianness of the\ntarget. That is, element zero identifies the leftmost\nelement in a vector register when targeting a big-endian\nplatform, and identifies the rightmost element in a vector\nregister when targeting a little-endian\nplatform.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvrsave <br>\n-mno-vrsave</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate</big>\nVRSAVE <big>instructions when generating AltiVec\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msecure-plt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat allows <b>ld</b> and <b>ld.so</b> to build executables\nand shared libraries with non-executable &quot;.plt&quot;\nand &quot;.got&quot; sections. This is a PowerPC\n32-bit</big> SYSV ABI <big>option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbss-plt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses a</big> BSS <big>&quot;.plt&quot; section that\n<b>ld.so</b> fills in, and requires &quot;.plt&quot; and\n&quot;.got&quot; sections that are both writable and\nexecutable. This is a PowerPC 32-bit</big> SYSV ABI\n<big>option.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-misel <br>\n-mno-isel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This switch\nenables or disables the generation of</big> ISEL\n<big>instructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvsx <br>\n-mno-vsx</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) vector/scalar (</big> VSX <big>)\ninstructions, and also enable the use of built-in functions\nthat allow more direct access to the</big> VSX\n<big>instruction set.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcrypto <br>\n-mno-crypto</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\n(disable) of the built-in functions that allow direct access\nto the cryptographic instructions that were added in version\n2.07 of the PowerPC</big> ISA.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mhtm <br>\n-mno-htm</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable (disable)\nthe use of the built-in functions that allow direct access\nto the Hardware Transactional Memory (</big> HTM <big>)\ninstructions that were added in version 2.07 of the\nPowerPC</big> ISA.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mpower8-fusion\n<br>\n-mno-power8-fusion</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat keeps (does not keeps) some integer operations adjacent\nso that the instructions can be fused together on power8 and\nlater processors.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpower8-vector\n<br>\n-mno-power8-vector</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the vector and scalar instructions\nthat were added in version 2.07 of the PowerPC</big> ISA.\n<big>Also enable the use of built-in functions that allow\nmore direct access to the vector\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mquad-memory\n<br>\n-mno-quad-memory</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the non-atomic quad word memory\ninstructions. The <b>-mquad-memory</b> option requires use\nof 64-bit mode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mquad-memory-atomic\n<br>\n-mno-quad-memory-atomic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the atomic quad word memory\ninstructions. The <b>-mquad-memory-atomic</b> option\nrequires use of 64-bit mode.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfloat128\n<br>\n-mno-float128</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable/disable\nthe <i>__float128</i> keyword for</big> IEEE <big>128-bit\nfloating point and use either software emulation for</big>\nIEEE <big>128-bit floating point or hardware\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\nVSX <big>instruction set (<b>-mvsx</b>) must be enabled to\nuse the</big> IEEE <big>128-bit floating point support.\nThe</big> IEEE <big>128-bit floating point is only supported\non Linux.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault for <b>-mfloat128</b> is enabled on PowerPC Linux\nsystems using the</big> VSX <big>instruction set, and\ndisabled on other systems.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou use the</big> ISA 3.0 <big>instruction set\n(<b>-mpower9-vector</b> or <b>-mcpu=power9</b>) on a 64-bit\nsystem, the</big> IEEE <big>128-bit floating point support\nwill also enable the generation of</big> ISA 3.0 IEEE\n<big>128-bit floating point instructions. Otherwise, if you\ndo not specify to generate</big> ISA 3.0 <big>instructions\nor you are targeting a 32-bit big endian system,</big> IEEE\n<big>128-bit floating point will be done with software\nemulation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfloat128-hardware\n<br>\n-mno-float128-hardware</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable/disable\nusing</big> ISA 3.0 <big>hardware instructions to support\nthe <i>__float128</i> data type.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault for <b>-mfloat128-hardware</b> is enabled on PowerPC\nLinux systems using the</big> ISA 3.0 <big>instruction set,\nand disabled on other systems.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m32 <br>\n-m64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor 32-bit or 64-bit environments of Darwin and</big> SVR4\n<big>targets (including GNU/Linux). The 32-bit environment\nsets int, long and pointer to 32 bits and generates code\nthat runs on any PowerPC variant. The 64-bit environment\nsets int to 32 bits and long and pointer to 64 bits, and\ngenerates code for PowerPC64, as for\n<b>-mpowerpc64</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfull-toc\n<br>\n-mno-fp-in-toc <br>\n-mno-sum-in-toc <br>\n-mminimal-toc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Modify\ngeneration of the</big> TOC <big>(Table Of Contents), which\nis created for every executable file. The <b>-mfull-toc</b>\noption is selected by default. In that case,</big> GCC\n<big>allocates at least one</big> TOC <big>entry for each\nunique non-automatic variable reference in your\nprogram.</big> GCC <big>also places floating-point constants\nin the</big> TOC. <big>However, only 16,384 entries are\navailable in the</big> TOC.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou receive a linker error message that saying you have\noverflowed the available</big> TOC <big>space, you can\nreduce the amount of</big> TOC <big>space used with the\n<b>-mno-fp-in-toc</b> and <b>-mno-sum-in-toc</b> options.\n<b>-mno-fp-in-toc</b> prevents</big> GCC <big>from putting\nfloating-point constants in the</big> TOC <big>and\n<b>-mno-sum-in-toc</b> forces</big> GCC <big>to generate\ncode to calculate the sum of an address and a constant at\nrun time instead of putting that sum into the</big> TOC.\n<big>You may specify one or both of these options. Each\ncauses</big> GCC <big>to produce very slightly slower and\nlarger code at the expense of conserving</big> TOC\n<big>space.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nyou still run out of space in the</big> TOC <big>even when\nyou specify both of these options, specify\n<b>-mminimal-toc</b> instead. This option causes</big> GCC\n<big>to make only one</big> TOC <big>entry for every file.\nWhen you specify this option,</big> GCC <big>produces code\nthat is slower and larger but which uses extremely\nlittle</big> TOC <big>space. You may wish to use this option\nonly on files that contain less frequently-executed\ncode.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maix64 <br>\n-maix32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\n64-bit</big> AIX ABI <big>and calling convention: 64-bit\npointers, 64-bit &quot;long&quot; type, and the\ninfrastructure needed to support them. Specifying\n<b>-maix64</b> implies <b>-mpowerpc64</b>, while\n<b>-maix32</b> disables the 64-bit</big> ABI <big>and\nimplies <b>-mno-powerpc64</b>.</big> GCC <big>defaults to\n<b>-maix32</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mxl-compat\n<br>\n-mno-xl-compat</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Produce code\nthat conforms more closely to</big> IBM XL <big>compiler\nsemantics when using AIX-compatible</big> ABI. <big>Pass\nfloating-point arguments to prototyped functions beyond the\nregister save area (</big> RSA <big>) on the stack in\naddition to argument FPRs. Do not assume that most\nsignificant double in 128-bit long double value is properly\nrounded when comparing values and converting to double.\nUse</big> XL <big>symbol names for long double support\nroutines.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\nAIX <big>calling convention was extended but not initially\ndocumented to handle an obscure K&amp;R C case of calling a\nfunction that takes the address of its arguments with fewer\narguments than declared.</big> IBM XL <big>compilers access\nfloating-point arguments that do not fit in the</big> RSA\n<big>from the stack when a subroutine is compiled without\noptimization. Because always storing floating-point\narguments on the stack is inefficient and rarely needed,\nthis option is not enabled by default and only is necessary\nwhen calling subroutines compiled by</big> IBM XL\n<big>compilers without optimization.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpe</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Support</big>\n<i>IBM RS/6000 SP <big>Parallel Environment</big></i>\n<big>(</big> PE <big>). Link an application written to use\nmessage passing with special startup code to enable the\napplication to run. The system must have</big> PE\n<big>installed in the standard location\n(<i>/usr/lpp/ppe.poe/</i>), or the <i>specs</i> file must be\noverridden with the <b>-specs=</b> option to specify the\nappropriate directory location. The Parallel Environment\ndoes not support threads, so the <b>-mpe</b> option and the\n<b>-pthread</b> option are\nincompatible.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malign-natural\n<br>\n-malign-power</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On</big> AIX,\n<big>32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option\n<b>-malign-natural</b> overrides the ABI-defined alignment\nof larger types, such as floating-point doubles, on their\nnatural size-based boundary. The option <b>-malign-power</b>\ninstructs</big> GCC <big>to follow the ABI-specified\nalignment rules.</big> GCC <big>defaults to the standard\nalignment defined in the</big> ABI.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\n64-bit Darwin, natural alignment is the default, and\n<b>-malign-power</b> is not supported.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float\n<br>\n-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat does not use (uses) the floating-point register set.\nSoftware floating-point emulation is provided if you use the\n<b>-msoft-float</b> option, and pass the option to</big> GCC\n<big>when linking.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmultiple\n<br>\n-mno-multiple</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the load multiple word instructions\nand the store multiple word instructions. These instructions\nare generated by default on</big> POWER <big>systems, and\nnot generated on PowerPC systems. Do not use\n<b>-mmultiple</b> on little-endian PowerPC systems, since\nthose instructions do not work when the processor is in\nlittle-endian mode. The exceptions are</big> PPC740\n<big>and</big> PPC750 <big>which permit these instructions\nin little-endian mode.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mupdate <br>\n-mno-update</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the load or store instructions that\nupdate the base register to the address of the calculated\nmemory location. These instructions are generated by\ndefault. If you use <b>-mno-update</b>, there is a small\nwindow between the time that the stack pointer is updated\nand the address of the previous frame is stored, which means\ncode that walks the stack frame across interrupts or signals\nmay get corrupted data.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mavoid-indexed-addresses\n<br>\n-mno-avoid-indexed-addresses</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat tries to avoid (not avoid) the use of indexed load or\nstore instructions. These instructions can incur a\nperformance penalty on Power6 processors in certain\nsituations, such as when stepping through large arrays that\ncross a 16M boundary. This option is enabled by default when\ntargeting Power6 and disabled\notherwise.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfused-madd\n<br>\n-mno-fused-madd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the floating-point multiply and\naccumulate instructions. These instructions are generated by\ndefault if hardware floating point is used. The\nmachine-dependent <b>-mfused-madd</b> option is now mapped\nto the machine-independent <b>-ffp-contract=fast</b> option,\nand <b>-mno-fused-madd</b> is mapped to\n<b>-ffp-contract=off</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmulhw <br>\n-mno-mulhw</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the half-word multiply and\nmultiply-accumulate instructions on the</big> IBM 405, 440,\n464 <big>and 476 processors. These instructions are\ngenerated by default when targeting those\nprocessors.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdlmzb <br>\n-mno-dlmzb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the string-search <b>dlmzb</b>\ninstruction on the</big> IBM 405, 440, 464 <big>and 476\nprocessors. This instruction is generated by default when\ntargeting those processors.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-bit-align\n<br>\n-mbit-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems do not (do) force structures\nand unions that contain bit-fields to be aligned to the base\ntype of the bit-field.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nexample, by default a structure containing nothing but 8\n&quot;unsigned&quot; bit-fields of length 1 is aligned to a\n4-byte boundary and has a size of 4 bytes. By using\n<b>-mno-bit-align</b>, the structure is aligned to a 1-byte\nboundary and is 1 byte in size.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-strict-align\n<br>\n-mstrict-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems do not (do) assume that\nunaligned memory references are handled by the\nsystem.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelocatable\n<br>\n-mno-relocatable</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat allows (does not allow) a static executable to be\nrelocated to a different address at run time. A simple\nembedded PowerPC system loader should relocate the entire\ncontents of &quot;.got2&quot; and 4-byte locations listed in\nthe &quot;.fixup&quot; section, a table of 32-bit addresses\ngenerated by this option. For this to work, all objects\nlinked together must be compiled with <b>-mrelocatable</b>\nor <b>-mrelocatable-lib</b>. <b>-mrelocatable</b> code\naligns the stack to an 8-byte\nboundary.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelocatable-lib\n<br>\n-mno-relocatable-lib</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Like\n<b>-mrelocatable</b>, <b>-mrelocatable-lib</b> generates a\n&quot;.fixup&quot; section to allow static executables to be\nrelocated at run time, but <b>-mrelocatable-lib</b> does not\nuse the smaller stack alignment of <b>-mrelocatable</b>.\nObjects compiled with <b>-mrelocatable-lib</b> may be linked\nwith objects compiled with any combination of the\n<b>-mrelocatable</b> options.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-toc <br>\n-mtoc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems do not (do) assume that\nregister 2 contains a pointer to a global area pointing to\nthe addresses used in the program.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlittle <br>\n-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems compile code for the processor\nin little-endian mode. The <b>-mlittle-endian</b> option is\nthe same as <b>-mlittle</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig <br>\n-mbig-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems compile code for the processor\nin big-endian mode. The <b>-mbig-endian</b> option is the\nsame as <b>-mbig</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdynamic-no-pic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On Darwin and\nMac</big> OS X <big>systems, compile code so that it is not\nrelocatable, but that its external references are\nrelocatable. The resulting code is suitable for\napplications, but not shared\nlibraries.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msingle-pic-base</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat the\nregister used for</big> PIC <big>addressing as read-only,\nrather than loading it in the prologue for each function.\nThe runtime system is responsible for initializing this\nregister with an appropriate value before execution\nbegins.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprioritize-restricted-insns=</b><i>priority</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols the priority that is assigned to dispatch-slot\nrestricted instructions during the second scheduling pass.\nThe argument <i>priority</i> takes the value <b>0</b>,\n<b>1</b>, or <b>2</b> to assign no, highest, or\nsecond-highest (respectively) priority to dispatch-slot\nrestricted instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msched-costly-dep=</b><i>dependence_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols which dependences are considered costly by the\ntarget during instruction scheduling. The argument\n<i>dependence_type</i> takes one of the following\nvalues:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>no</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"42%\">\n\n\n<p><big><big><big>No dependence is\ncostly.</big></big></big></p> </td>\n<td width=\"35%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"42%\">\n\n\n<p><big><big><big>All dependences are\ncostly.</big></big></big></p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>true_store_to_load</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>A true\ndependence from store to load is\ncostly.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>store_to_load</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Any dependence\nfrom store to load is costly.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Any dependence\nfor which the latency is greater than or equal to\n<i>number</i> is costly.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minsert-sched-nops=</b><i>scheme</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols which</big> NOP <big>insertion scheme is used\nduring the second scheduling pass. The argument\n<i>scheme</i> takes one of the following\nvalues:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>no</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Don&rsquo;t insert\nNOPs.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>pad</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Pad with NOPs any dispatch group that has\nvacant issue slots, according to the scheduler&rsquo;s\ngrouping.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>regroup_exact</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Insert NOPs to\nforce costly dependent insns into separate groups. Insert\nexactly as many NOPs as needed to force an insn to a new\ngroup, according to the estimated processor\ngrouping.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Insert NOPs to\nforce costly dependent insns into separate groups. Insert\n<i>number</i> NOPs to force an insn to a new\ngroup.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-sysv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems compile code using calling\nconventions that adhere to the March 1995 draft of the\nSystem V Application Binary Interface, PowerPC processor\nsupplement. This is the default unless you configured</big>\nGCC <big>using\n<b>powerpc-*-eabiaix</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-sysv-eabi\n<br>\n-mcall-eabi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify both\n<b>-mcall-sysv</b> and <b>-meabi</b>\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-sysv-noeabi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify both\n<b>-mcall-sysv</b> and <b>-mno-eabi</b>\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-aixdesc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems compile code for the</big> AIX\n<big>operating system.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-linux</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems compile code for the\nLinux-based</big> GNU <big>system.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-freebsd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems compile code for the FreeBSD\noperating system.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-netbsd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems compile code for the NetBSD\noperating system.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-openbsd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems compile code for the OpenBSD\noperating system.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtraceback=</b><i>traceback_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Select the type\nof traceback table. Valid values for <i>traceback_type</i>\nare <b>full</b>, <b>part</b>, and\n<b>no</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maix-struct-return</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Return all\nstructures in memory (as specified by the</big> AIX ABI\n<big>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msvr4-struct-return</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Return\nstructures smaller than 8 bytes in registers (as specified\nby the</big> SVR4 ABI <big>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=</b><i>abi-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Extend the\ncurrent</big> ABI <big>with a particular extension, or\nremove such extension. Valid values are: <b>altivec</b>,\n<b>no-altivec</b>, <b>ibmlongdouble</b>,\n<b>ieeelongdouble</b>, <b>elfv1</b>, <b>elfv2</b>, and\nfor</big> AIX: <b><big>vec-extabi</big></b><big>,\n<b>vec-default</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=ibmlongdouble</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Change the\ncurrent</big> ABI <big>to use</big> IBM\n<big>extended-precision long double. This is not likely to\nwork if your system defaults to using</big> IEEE\n<big>extended-precision long double. If you change the long\ndouble type from</big> IEEE <big>extended-precision, the\ncompiler will issue a warning unless you use the\n<b>-Wno-psabi</b> option. Requires <b>-mlong-double-128</b>\nto be enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=ieeelongdouble</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Change the\ncurrent</big> ABI <big>to use</big> IEEE\n<big>extended-precision long double. This is not likely to\nwork if your system defaults to using</big> IBM\n<big>extended-precision long double. If you change the long\ndouble type from</big> IBM <big>extended-precision, the\ncompiler will issue a warning unless you use the\n<b>-Wno-psabi</b> option. Requires <b>-mlong-double-128</b>\nto be enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=elfv1</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Change the\ncurrent</big> ABI <big>to use the ELFv1</big> ABI. <big>This\nis the default</big> ABI <big>for big-endian PowerPC 64-bit\nLinux. Overriding the default</big> ABI <big>requires\nspecial system support and is likely to fail in spectacular\nways.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=elfv2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Change the\ncurrent</big> ABI <big>to use the ELFv2</big> ABI. <big>This\nis the default</big> ABI <big>for little-endian PowerPC\n64-bit Linux. Overriding the default</big> ABI <big>requires\nspecial system support and is likely to fail in spectacular\nways.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgnu-attribute\n<br>\n-mno-gnu-attribute</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit\n.gnu_attribute assembly directives to set tag/value pairs in\na .gnu.attributes section that specify</big> ABI\n<big>variations in function parameters or return\nvalues.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprototype\n<br>\n-mno-prototype</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems assume that all calls to\nvariable argument functions are properly prototyped.\nOtherwise, the compiler must insert an instruction before\nevery non-prototyped call to set or clear bit 6 of the\ncondition code register (&quot;CR&quot;) to indicate whether\nfloating-point values are passed in the floating-point\nregisters in case the function takes variable arguments.\nWith <b>-mprototype</b>, only calls to prototyped variable\nargument functions set or clear the\nbit.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On embedded\nPowerPC systems, assume that the startup module is called\n<i>sim-crt0.o</i> and that the standard C libraries are\n<i>libsim.a</i> and <i>libc.a</i>. This is the default for\n<b>powerpc-*-eabisim</b>\nconfigurations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmvme</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On embedded\nPowerPC systems, assume that the startup module is called\n<i>crt0.o</i> and the standard C libraries are\n<i>libmvme.a</i> and <i>libc.a</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mads</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On embedded\nPowerPC systems, assume that the startup module is called\n<i>crt0.o</i> and the standard C libraries are\n<i>libads.a</i> and <i>libc.a</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-myellowknife</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On embedded\nPowerPC systems, assume that the startup module is called\n<i>crt0.o</i> and the standard C libraries are\n<i>libyk.a</i> and <i>libc.a</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvxworks</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems, specify that you are compiling\nfor a VxWorks system.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-memb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On embedded\nPowerPC systems, set the &quot;PPC_EMB&quot; bit in\nthe</big> ELF <big>flags header to indicate that <b>eabi</b>\nextended relocations are used.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-meabi <br>\n-mno-eabi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems do (do not) adhere to the\nEmbedded Applications Binary Interface (</big> EABI <big>),\nwhich is a set of modifications to the System V.4\nspecifications. Selecting <b>-meabi</b> means that the stack\nis aligned to an 8-byte boundary, a function\n&quot;__eabi&quot; is called from &quot;main&quot; to set up\nthe</big> EABI <big>environment, and the <b>-msdata</b>\noption can use both &quot;r2&quot; and &quot;r13&quot; to\npoint to two separate small data areas. Selecting\n<b>-mno-eabi</b> means that the stack is aligned to a\n16-byte boundary, no</big> EABI <big>initialization function\nis called from &quot;main&quot;, and the <b>-msdata</b>\noption only uses &quot;r13&quot; to point to a single small\ndata area. The <b>-meabi</b> option is on by default if you\nconfigured</big> GCC <big>using one of the\n<b>powerpc*-*-eabi*</b> options.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=eabi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems, put small initialized\n&quot;const&quot; global and static data in the\n&quot;.sdata2&quot; section, which is pointed to by register\n&quot;r2&quot;. Put small initialized non-&quot;const&quot;\nglobal and static data in the &quot;.sdata&quot; section,\nwhich is pointed to by register &quot;r13&quot;. Put small\nuninitialized global and static data in the\n&quot;.sbss&quot; section, which is adjacent to the\n&quot;.sdata&quot; section. The <b>-msdata=eabi</b> option\nis incompatible with the <b>-mrelocatable</b> option. The\n<b>-msdata=eabi</b> option also sets the <b>-memb</b>\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=sysv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems, put small global and static\ndata in the &quot;.sdata&quot; section, which is pointed to\nby register &quot;r13&quot;. Put small uninitialized global\nand static data in the &quot;.sbss&quot; section, which is\nadjacent to the &quot;.sdata&quot; section. The\n<b>-msdata=sysv</b> option is incompatible with the\n<b>-mrelocatable</b> option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=default\n<br>\n-msdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems, if <b>-meabi</b> is used,\ncompile code the same as <b>-msdata=eabi</b>, otherwise\ncompile code the same as\n<b>-msdata=sysv</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems, put small global data in the\n&quot;.sdata&quot; section. Put small uninitialized global\ndata in the &quot;.sbss&quot; section. Do not use register\n&quot;r13&quot; to address small data however. This is the\ndefault behavior unless other <b>-msdata</b> options are\nused.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msdata=none\n<br>\n-mno-sdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On embedded\nPowerPC systems, put all initialized global and static data\nin the &quot;.data&quot; section, and all uninitialized data\nin the &quot;.bss&quot; section.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mreadonly-in-sdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put read-only\nobjects in the &quot;.sdata&quot; section as well. This is\nthe default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mblock-move-inline-limit=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Inline all block\nmoves (such as calls to &quot;memcpy&quot; or structure\ncopies) less than or equal to <i>num</i> bytes. The minimum\nvalue for <i>num</i> is 32 bytes on 32-bit targets and 64\nbytes on 64-bit targets. The default value is\ntarget-specific.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mblock-compare-inline-limit=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nnon-looping inline code for all block compares (such as\ncalls to &quot;memcmp&quot; or structure compares) less than\nor equal to <i>num</i> bytes. If <i>num</i> is 0, all inline\nexpansion (non-loop and loop) of block compare is disabled.\nThe default value is target-specific.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mblock-compare-inline-loop-limit=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate an\ninline expansion using loop code for all block compares that\nare less than or equal to <i>num</i> bytes, but greater than\nthe limit for non-loop inline block compare expansion. If\nthe block length is not constant, at most <i>num</i> bytes\nwill be compared before &quot;memcmp&quot; is called to\ncompare the remainder of the block. The default value is\ntarget-specific.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstring-compare-inline-limit=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compare at most\n<i>num</i> string bytes with inline code. If the difference\nor end of string is not found at the end of the inline\ncompare a call to &quot;strcmp&quot; or &quot;strncmp&quot;\nwill take care of the rest of the comparison. The default is\n64 bytes.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-G</b>\n<i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On embedded\nPowerPC systems, put global and static items less than or\nequal to <i>num</i> bytes into the small data or</big> BSS\n<big>sections instead of the normal data or</big> BSS\n<big>section. By default, <i>num</i> is 8. The <b>-G</b>\n<i>num</i> switch is also passed to the linker. All modules\nshould be compiled with the same <b>-G</b> <i>num</i>\nvalue.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mregnames\n<br>\n-mno-regnames</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On System V.4\nand embedded PowerPC systems do (do not) emit register names\nin the assembly language output using symbolic\nforms.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlongcall\n<br>\n-mno-longcall</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>By default\nassume that all calls are far away so that a longer and more\nexpensive calling sequence is required. This is required for\ncalls farther than 32 megabytes (33,554,432 bytes) from the\ncurrent location. A short call is generated if the compiler\nknows the call cannot be that far away. This setting can be\noverridden by the &quot;shortcall&quot; function attribute,\nor by &quot;#pragma longcall(0)&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Some\nlinkers are capable of detecting out-of-range calls and\ngenerating glue code on the fly. On these systems, long\ncalls are unnecessary and generate slower code. As of this\nwriting, the</big> AIX <big>linker can do this, as can\nthe</big> GNU <big>linker for PowerPC/64. It is planned to\nadd this feature to the</big> GNU <big>linker for 32-bit\nPowerPC systems as well.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nPowerPC64 ELFv2 and 32-bit PowerPC systems with newer</big>\nGNU <big>linkers,</big> GCC <big>can generate long calls\nusing an inline</big> PLT <big>call sequence (see\n<b>-mpltseq</b>). PowerPC with <b>-mbss-plt</b> and\nPowerPC64 ELFv1 (big-endian) do not support inline</big> PLT\n<big>calls.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nDarwin/PPC systems, &quot;#pragma longcall&quot; generates\n&quot;jbsr callee, L42&quot;, plus a <i>branch island</i>\n(glue code). The two target addresses represent the callee\nand the branch island. The Darwin/PPC linker prefers the\nfirst address and generates a &quot;bl callee&quot; if\nthe</big> PPC <big>&quot;bl&quot; instruction reaches the\ncallee directly; otherwise, the linker generates &quot;bl\nL42&quot; to call the branch island. The branch island is\nappended to the body of the calling function; it computes\nthe full 32-bit address of the callee and jumps to\nit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nMach-O (Darwin) systems, this option directs the compiler\nemit to the glue for every direct call, and the Darwin\nlinker decides whether to use or discard\nit.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nthe future,</big> GCC <big>may ignore all longcall\nspecifications when the linker is known to generate\nglue.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpltseq <br>\n-mno-pltseq</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Implement (do\nnot implement) -fno-plt and long calls using an inline</big>\nPLT <big>call sequence that supports lazy linking and long\ncalls to functions in dlopen&rsquo;d shared libraries.\nInline</big> PLT <big>calls are only supported on PowerPC64\nELFv2 and 32-bit PowerPC systems with newer</big> GNU\n<big>linkers, and are enabled by default if the support is\ndetected when configuring</big> GCC, <big>and, in the case\nof 32-bit PowerPC, if</big> GCC <big>is configured with\n<b>--enable-secureplt</b>. <b>-mpltseq</b> code and\n<b>-mbss-plt</b> 32-bit PowerPC relocatable objects may not\nbe linked together.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls-markers\n<br>\n-mno-tls-markers</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Mark (do not\nmark) calls to &quot;__tls_get_addr&quot; with a relocation\nspecifying the function argument. The relocation allows the\nlinker to reliably associate function call with argument\nsetup instructions for</big> TLS <big>optimization, which in\nturn allows</big> GCC <big>to better schedule the\nsequence.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrecip <br>\n-mno-recip</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables use of the reciprocal estimate and reciprocal square\nroot estimate instructions with additional Newton-Raphson\nsteps to increase precision instead of doing a divide or\nsquare root and divide for floating-point arguments. You\nshould use the <b>-ffast-math</b> option when using\n<b>-mrecip</b> (or at least\n<b>-funsafe-math-optimizations</b>,\n<b>-ffinite-math-only</b>, <b>-freciprocal-math</b> and\n<b>-fno-trapping-math</b>). Note that while the throughput\nof the sequence is generally higher than the throughput of\nthe non-reciprocal instruction, the precision of the\nsequence can be decreased by up to 2 ulp (i.e. the inverse\nof 1.0 equals 0.99999994) for reciprocal square\nroots.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrecip=</b><i>opt</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols which reciprocal estimate instructions may be used.\n<i>opt</i> is a comma-separated list of options, which may\nbe preceded by a &quot;!&quot; to invert the\noption:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"51%\">\n\n\n<p><big><big><big>Enable all estimate\ninstructions.</big></big></big></p> </td>\n<td width=\"26%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>default</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\ndefault instructions, equivalent to\n<b>-mrecip</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>none</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disable all\nestimate instructions, equivalent to\n<b>-mno-recip</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>div</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Enable the reciprocal approximation\ninstructions for both single and double\nprecision.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>divf</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\nsingle-precision reciprocal approximation\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>divd</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\ndouble-precision reciprocal approximation\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>rsqrt</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\nreciprocal square root approximation instructions for both\nsingle and double precision.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>rsqrtf</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\nsingle-precision reciprocal square root approximation\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>rsqrtd</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\ndouble-precision reciprocal square root approximation\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>So,\nfor example, <b>-mrecip=all,!rsqrtd</b> enables all of the\nreciprocal estimate instructions, except for the\n&quot;FRSQRTE&quot;, &quot;XSRSQRTEDP&quot;, and\n&quot;XVRSQRTEDP&quot; instructions which handle the\ndouble-precision reciprocal square root\ncalculations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrecip-precision\n<br>\n-mno-recip-precision</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume (do not\nassume) that the reciprocal estimate instructions provide\nhigher-precision estimates than is mandated by the\nPowerPC</big> ABI. <big>Selecting <b>-mcpu=power6</b>,\n<b>-mcpu=power7</b> or <b>-mcpu=power8</b> automatically\nselects <b>-mrecip-precision</b>. The double-precision\nsquare root estimate instructions are not generated by\ndefault on low-precision machines, since they do not provide\nan estimate that converges after three\nsteps.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mveclibabi=</b><i>type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies\nthe</big> ABI <big>type to use for vectorizing intrinsics\nusing an external library. The only type supported at\npresent is <b>mass</b>, which specifies to use</big> IBM\n<big>&rsquo;s Mathematical Acceleration Subsystem (</big>\nMASS <big>) libraries for vectorizing intrinsics using\nexternal libraries.</big> GCC <big>currently emits calls to\n&quot;acosd2&quot;, &quot;acosf4&quot;, &quot;acoshd2&quot;,\n&quot;acoshf4&quot;, &quot;asind2&quot;, &quot;asinf4&quot;,\n&quot;asinhd2&quot;, &quot;asinhf4&quot;,\n&quot;atan2d2&quot;, &quot;atan2f4&quot;,\n&quot;atand2&quot;, &quot;atanf4&quot;, &quot;atanhd2&quot;,\n&quot;atanhf4&quot;, &quot;cbrtd2&quot;, &quot;cbrtf4&quot;,\n&quot;cosd2&quot;, &quot;cosf4&quot;, &quot;coshd2&quot;,\n&quot;coshf4&quot;, &quot;erfcd2&quot;, &quot;erfcf4&quot;,\n&quot;erfd2&quot;, &quot;erff4&quot;, &quot;exp2d2&quot;,\n&quot;exp2f4&quot;, &quot;expd2&quot;, &quot;expf4&quot;,\n&quot;expm1d2&quot;, &quot;expm1f4&quot;,\n&quot;hypotd2&quot;, &quot;hypotf4&quot;,\n&quot;lgammad2&quot;, &quot;lgammaf4&quot;,\n&quot;log10d2&quot;, &quot;log10f4&quot;,\n&quot;log1pd2&quot;, &quot;log1pf4&quot;,\n&quot;log2d2&quot;, &quot;log2f4&quot;, &quot;logd2&quot;,\n&quot;logf4&quot;, &quot;powd2&quot;, &quot;powf4&quot;,\n&quot;sind2&quot;, &quot;sinf4&quot;, &quot;sinhd2&quot;,\n&quot;sinhf4&quot;, &quot;sqrtd2&quot;, &quot;sqrtf4&quot;,\n&quot;tand2&quot;, &quot;tanf4&quot;, &quot;tanhd2&quot;,\nand &quot;tanhf4&quot; when generating code for power7. Both\n<b>-ftree-vectorize</b> and\n<b>-funsafe-math-optimizations</b> must also be enabled.\nThe</big> MASS <big>libraries must be specified at link\ntime.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfriz <br>\n-mno-friz</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) the &quot;friz&quot; instruction when the\n<b>-funsafe-math-optimizations</b> option is used to\noptimize rounding of floating-point values to 64-bit integer\nand back to floating point. The &quot;friz&quot; instruction\ndoes not return the same value if the floating-point number\nis too large to fit in an integer.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpointers-to-nested-functions\n<br>\n-mno-pointers-to-nested-functions</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) code to load up the static chain register\n(&quot;r11&quot;) when calling through a pointer on</big>\nAIX <big>and 64-bit Linux systems where a function pointer\npoints to a 3-word descriptor giving the function\naddress,</big> TOC <big>value to be loaded in register\n&quot;r2&quot;, and static chain value to be loaded in\nregister &quot;r11&quot;. The\n<b>-mpointers-to-nested-functions</b> is on by default. You\ncannot call through pointers to nested functions or pointers\nto functions compiled in other languages that use the static\nchain if you use\n<b>-mno-pointers-to-nested-functions</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msave-toc-indirect\n<br>\n-mno-save-toc-indirect</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) code to save the</big> TOC <big>value in the\nreserved stack location in the function prologue if the\nfunction calls through a pointer on</big> AIX <big>and\n64-bit Linux systems. If the</big> TOC <big>value is not\nsaved in the prologue, it is saved just before the call\nthrough the pointer. The <b>-mno-save-toc-indirect</b>\noption is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcompat-align-parm\n<br>\n-mno-compat-align-parm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) code to pass structure parameters with a maximum\nalignment of 64 bits, for compatibility with older versions\nof</big> GCC.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Older\nversions of</big> GCC <big>(prior to 4.9.0) incorrectly did\nnot align a structure parameter on a 128-bit boundary when\nthat structure contained a member requiring 128-bit\nalignment. This is corrected in more recent versions\nof</big> GCC. <big>This option may be used to generate code\nthat is compatible with functions compiled with older\nversions of</big> GCC.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mno-compat-align-parm</b> option is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-protector-guard=</b><i>guard</i>\n<b><br>\n-mstack-protector-guard-reg=</b><i>reg</i> <b><br>\n-mstack-protector-guard-offset=</b><i>offset</i> <b><br>\n\n-mstack-protector-guard-symbol=</b><i>symbol</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate stack\nprotection code using canary at <i>guard</i>. Supported\nlocations are <b>global</b> for global canary or <b>tls</b>\nfor per-thread canary in the</big> TLS <big>block (the\ndefault with</big> GNU <big>libc version 2.4 or\nlater).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\nthe latter choice the options\n<b>-mstack-protector-guard-reg=</b><i>reg</i> and\n<b>-mstack-protector-guard-offset=</b><i>offset</i>\nfurthermore specify which register to use as base register\nfor reading the canary, and from what offset from that base\nregister. The default for those is as specified in the\nrelevant</big> ABI.\n<b><big>-mstack-protector-guard-symbol=</big></b><big><i>symbol</i>\noverrides the offset with a symbol reference to a canary in\nthe</big> TLS <big>block.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpcrel <br>\n-mno-pcrel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) pc-relative addressing. The <b>-mpcrel</b> option\nrequires that the medium code model (<b>-mcmodel=medium</b>)\nand prefixed addressing (<b>-mprefixed</b>) options are\nenabled.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprefixed\n<br>\n-mno-prefixed</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) addressing modes using prefixed load and store\ninstructions. The <b>-mprefixed</b> option requires that the\noption <b>-mcpu=power10</b> (or later) is\nenabled.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmma <br>\n-mno-mma</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) the</big> MMA <big>instructions. The <b>-mma</b>\noption requires that the option <b>-mcpu=power10</b> (or\nlater) is enabled.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrop-protect\n<br>\n-mno-rop-protect</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate)</big> ROP <big>protection instructions when the\ntarget processor supports them. Currently this option\ndisables the shrink-wrap optimization\n(<b>-fshrink-wrap</b>).</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprivileged\n<br>\n-mno-privileged</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) code that will run in privileged\nstate.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mblock-ops-unaligned-vsx\n<br>\n-mno-block-ops-unaligned-vsx</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (do not\ngenerate) unaligned vsx loads and stores for inline\nexpansion of &quot;memcpy&quot; and\n&quot;memmove&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>RX\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\ncommand-line options are defined for</big> RX <big>targets:\n<b><br>\n-m64bit-doubles <br>\n-m32bit-doubles</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Make the\n&quot;double&quot; data type be 64 bits\n(<b>-m64bit-doubles</b>) or 32 bits (<b>-m32bit-doubles</b>)\nin size. The default is <b>-m32bit-doubles</b>.\n<i>Note</i></big> RX <big>floating-point hardware only works\non 32-bit values, which is why the default is\n<b>-m32bit-doubles</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fpu <br>\n-nofpu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables\n(<b>-fpu</b>) or disables (<b>-nofpu</b>) the use of</big>\nRX <big>floating-point hardware. The default is enabled for\nthe</big> RX600 <big>series and disabled for the</big> RX200\n<big>series.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Floating-point\ninstructions are only generated for 32-bit floating-point\nvalues, however, so the</big> FPU <big>hardware is not used\nfor doubles if the <b>-m64bit-doubles</b> option is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><i>Note</i>\nIf the <b>-fpu</b> option is enabled then\n<b>-funsafe-math-optimizations</b> is also enabled\nautomatically. This is because the</big> RX FPU\n<big>instructions are themselves\nunsafe.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Selects the type\nof</big> RX CPU <big>to be targeted. Currently three types\nare supported, the generic</big> <b>RX600</b> <big>and</big>\n<b>RX200</b> <big>series hardware and the specific</big>\n<b>RX610</b> CPU. <big>The default is</big> <b>RX600</b>\n<big>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nonly difference between</big> <b>RX600</b> <big>and</big>\n<b>RX610</b> <big>is that the</big> <b>RX610</b> <big>does\nnot support the &quot;MVTIPL&quot;\ninstruction.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\n<b>RX200</b> <big>series does not have a hardware\nfloating-point unit and so <b>-nofpu</b> is enabled by\ndefault when this type is selected.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian-data\n<br>\n-mlittle-endian-data</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Store data (but\nnot code) in the big-endian format. The default is\n<b>-mlittle-endian-data</b>, i.e. to store data in the\nlittle-endian format.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmall-data-limit=</b><i>N</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nmaximum size in bytes of global and static variables which\ncan be placed into the small data area. Using the small data\narea can lead to smaller and faster code, but the size of\narea is limited and it is up to the programmer to ensure\nthat the area does not overflow. Also when the small data\narea is used one of the</big> RX <big>&rsquo;s registers\n(usually &quot;r13&quot;) is reserved for use pointing to\nthis area, so it is no longer available for use by the\ncompiler. This could result in slower and/or larger code if\nvariables are pushed onto the stack instead of being held in\nthis register.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note,\ncommon variables (variables that have not been initialized)\nand constants are not placed into the small data area as\nthey are assigned to other sections in the output\nexecutable.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault value is zero, which disables this feature. Note,\nthis feature is not enabled by default with higher\noptimization levels (<b>-O2</b> etc) because of the\npotentially detrimental effects of reserving a register. It\nis up to the programmer to experiment and discover whether\nthis feature is of benefit to their program. See the\ndescription of the <b>-mpid</b> option for a description of\nhow the actual register to hold the small data area pointer\nis chosen.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim <br>\n-mno-sim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use the\nsimulator runtime. The default is to use the libgloss\nboard-specific runtime.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mas100-syntax\n<br>\n-mno-as100-syntax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When generating\nassembler output use a syntax that is compatible with\nRenesas&rsquo;s</big> AS100 <big>assembler. This syntax can\nalso be handled by the</big> GAS <big>assembler, but it has\nsome restrictions so it is not generated by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmax-constant-size=</b><i>N</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies the\nmaximum size, in bytes, of a constant that can be used as an\noperand in a</big> RX <big>instruction. Although the</big>\nRX <big>instruction set does allow constants of up to 4\nbytes in length to be used in instructions, a longer value\nequates to a longer instruction. Thus in some circumstances\nit can be beneficial to restrict the size of constants that\nare used in instructions. Constants that are too big are\ninstead placed into a constant pool and referenced via\nregister indirection.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalue <i>N</i> can be between 0 and 4. A value of 0 (the\ndefault) or 4 means that constants of any size are\nallowed.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable linker\nrelaxation. Linker relaxation is a process whereby the\nlinker attempts to reduce the size of a program by finding\nshorter versions of various instructions. Disabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mint-register=</b><i>N</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify the\nnumber of registers to reserve for fast interrupt handler\nfunctions. The value <i>N</i> can be between 0 and 4. A\nvalue of 1 means that register &quot;r13&quot; is reserved\nfor the exclusive use of fast interrupt handlers. A value of\n2 reserves &quot;r13&quot; and &quot;r12&quot;. A value of 3\nreserves &quot;r13&quot;, &quot;r12&quot; and\n&quot;r11&quot;, and a value of 4 reserves &quot;r13&quot;\nthrough &quot;r10&quot;. A value of 0, the default, does not\nreserve any registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msave-acc-in-interrupts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies that\ninterrupt handler functions should preserve the accumulator\nregister. This is only necessary if normal code might use\nthe accumulator register, for example because it performs\n64-bit multiplications. The default is to ignore the\naccumulator as this makes the interrupt handlers\nfaster.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpid <br>\n-mno-pid</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the\ngeneration of position independent data. When enabled any\naccess to constant data is done via an offset from a base\naddress held in a register. This allows the location of\nconstant data to be determined at run time without requiring\nthe executable to be relocated, which is a benefit to\nembedded applications with tight memory constraints. Data\nthat can be modified is not affected by this\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note,\nusing this feature reserves a register, usually\n&quot;r13&quot;, for the constant data base address. This\ncan result in slower and/or larger code, especially in\ncomplicated functions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nactual register chosen to hold the constant data base\naddress depends upon whether the <b>-msmall-data-limit</b>\nand/or the <b>-mint-register</b> command-line options are\nenabled. Starting with register &quot;r13&quot; and\nproceeding downwards, registers are allocated first to\nsatisfy the requirements of <b>-mint-register</b>, then\n<b>-mpid</b> and finally <b>-msmall-data-limit</b>. Thus it\nis possible for the small data area register to be\n&quot;r8&quot; if both <b>-mint-register=4</b> and\n<b>-mpid</b> are specified on the command\nline.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>By\ndefault this feature is not enabled. The default can be\nrestored via the <b>-mno-pid</b> command-line\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-warn-multiple-fast-interrupts\n<br>\n-mwarn-multiple-fast-interrupts</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Prevents</big>\nGCC <big>from issuing a warning message if it finds more\nthan one fast interrupt handler when it is compiling a file.\nThe default is to issue a warning for each extra fast\ninterrupt handler found, as the</big> RX <big>only supports\none such interrupt.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mallow-string-insns\n<br>\n-mno-allow-string-insns</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables or\ndisables the use of the string manipulation instructions\n&quot;SMOVF&quot;, &quot;SCMPU&quot;, &quot;SMOVB&quot;,\n&quot;SMOVU&quot;, &quot;SUNTIL&quot; &quot;SWHILE&quot; and\nalso the &quot;RMPA&quot; instruction. These instructions\nmay prefetch data, which is not safe to do if accessing an\nI/O register. (See section 12.2.7 of the</big> RX62N\n<big>Group User&rsquo;s Manual for more\ninformation).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is to allow these instructions, but it is not\npossible for</big> GCC <big>to reliably detect all\ncircumstances where a string instruction might be used to\naccess an I/O register, so their use cannot be disabled\nautomatically. Instead it is reliant upon the programmer to\nuse the <b>-mno-allow-string-insns</b> option if their\nprogram accesses I/O space.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nthe instructions are enabled</big> GCC <big>defines the C\npreprocessor symbol &quot;__RX_ALLOW_STRING_INSNS__&quot;,\notherwise it defines the symbol\n&quot;__RX_DISALLOW_STRING_INSNS__&quot;.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mjsr <br>\n-mno-jsr</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use only (or not\nonly) &quot;JSR&quot; instructions to access functions. This\noption can be used when code size exceeds the range of\n&quot;BSR&quot; instructions. Note that <b>-mno-jsr</b> does\nnot mean to not use &quot;JSR&quot; but instead means that\nany type of branch may be used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Note:</i>\nThe generic</big> GCC <big>command-line option\n<b>-ffixed-</b><i>reg</i> has special significance to\nthe</big> RX <big>port when used with the\n&quot;interrupt&quot; function attribute. This attribute\nindicates a function intended to process fast\ninterrupts.</big> GCC <big>ensures that it only uses the\nregisters &quot;r10&quot;, &quot;r11&quot;, &quot;r12&quot;\nand/or &quot;r13&quot; and only provided that the normal use\nof the corresponding registers have been restricted via the\n<b>-ffixed-</b><i>reg</i> or <b>-mint-register</b>\ncommand-line options.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>S/390\nand zSeries Options</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nare the <b>-m</b> options defined for the S/390 and zSeries\narchitecture. <b><br>\n-mhard-float <br>\n-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe hardware floating-point instructions and registers for\nfloating-point operations. When <b>-msoft-float</b> is\nspecified, functions in <i>libgcc.a</i> are used to perform\nfloating-point operations. When <b>-mhard-float</b> is\nspecified, the compiler generates</big> IEEE\n<big>floating-point instructions. This is the\ndefault.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhard-dfp\n<br>\n-mno-hard-dfp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe hardware decimal-floating-point instructions for\ndecimal-floating-point operations. When <b>-mno-hard-dfp</b>\nis specified, functions in <i>libgcc.a</i> are used to\nperform decimal-floating-point operations. When\n<b>-mhard-dfp</b> is specified, the compiler generates\ndecimal-floating-point hardware instructions. This is the\ndefault for <b>-march=z9-ec</b> or\nhigher.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-double-64\n<br>\n-mlong-double-128</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These switches\ncontrol the size of &quot;long double&quot; type. A size of\n64 bits makes the &quot;long double&quot; type equivalent to\nthe &quot;double&quot; type. This is the\ndefault.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbackchain\n<br>\n-mno-backchain</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Store (do not\nstore) the address of the caller&rsquo;s frame as backchain\npointer into the callee&rsquo;s stack frame. A backchain may\nbe needed to allow debugging using tools that do not\nunderstand</big> DWARF <big>call frame information. When\n<b>-mno-packed-stack</b> is in effect, the backchain pointer\nis stored at the bottom of the stack frame; when\n<b>-mpacked-stack</b> is in effect, the backchain is placed\ninto the topmost word of the 96/160 byte register save\narea.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\ngeneral, code compiled with <b>-mbackchain</b> is\ncall-compatible with code compiled with\n<b>-mno-backchain</b>; however, use of the backchain for\ndebugging purposes usually requires that the whole binary is\nbuilt with <b>-mbackchain</b>. Note that the combination of\n<b>-mbackchain</b>, <b>-mpacked-stack</b> and\n<b>-mhard-float</b> is not supported. In order to build a\nlinux kernel use <b>-msoft-float</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is to not maintain the\nbackchain.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpacked-stack\n<br>\n-mno-packed-stack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use (do not use)\nthe packed stack layout. When <b>-mno-packed-stack</b> is\nspecified, the compiler uses the all fields of the 96/160\nbyte register save area only for their default purpose;\nunused fields still take up stack space. When\n<b>-mpacked-stack</b> is specified, register save slots are\ndensely packed at the top of the register save area; unused\nspace is reused for other purposes, allowing for more\nefficient use of the available stack space. However, when\n<b>-mbackchain</b> is also in effect, the topmost word of\nthe save area is always used to store the backchain, and the\nreturn address register is always saved two words below the\nbackchain.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>As\nlong as the stack frame backchain is not used, code\ngenerated with <b>-mpacked-stack</b> is call-compatible with\ncode generated with <b>-mno-packed-stack</b>. Note that some\nnon-FSF releases of</big> GCC 2.95 <big>for S/390 or zSeries\ngenerated code that uses the stack frame backchain at run\ntime, not just for debugging purposes. Such code is not\ncall-compatible with code compiled with\n<b>-mpacked-stack</b>. Also, note that the combination of\n<b>-mbackchain</b>, <b>-mpacked-stack</b> and\n<b>-mhard-float</b> is not supported. In order to build a\nlinux kernel use <b>-msoft-float</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is to not use the packed stack\nlayout.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msmall-exec\n<br>\n-mno-small-exec</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (or do\nnot generate) code using the &quot;bras&quot; instruction to\ndo subroutine calls. This only works reliably if the total\nexecutable size does not exceed 64k. The default is to use\nthe &quot;basr&quot; instruction instead, which does not\nhave this limitation.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m64 <br>\n-m31</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When <b>-m31</b>\nis specified, generate code compliant to the GNU/Linux for\nS/390</big> ABI. <big>When <b>-m64</b> is specified,\ngenerate code compliant to the GNU/Linux for zSeries</big>\nABI. <big>This allows</big> GCC <big>in particular to\ngenerate 64-bit instructions. For the <b>s390</b> targets,\nthe default is <b>-m31</b>, while the <b>s390x</b> targets\ndefault to <b>-m64</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mzarch <br>\n-mesa</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\n<b>-mzarch</b> is specified, generate code using the\ninstructions available on z/Architecture. When <b>-mesa</b>\nis specified, generate code using the instructions available\non</big> ESA/390. <big>Note that <b>-mesa</b> is not\npossible with <b>-m64</b>. When generating code compliant to\nthe GNU/Linux for S/390</big> ABI, <big>the default is\n<b>-mesa</b>. When generating code compliant to the\nGNU/Linux for zSeries</big> ABI, <big>the default is\n<b>-mzarch</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhtm <br>\n-mno-htm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The <b>-mhtm</b>\noption enables a set of builtins making use of instructions\navailable with the transactional execution facility\nintroduced with the</big> IBM <big>zEnterprise</big> EC12\n<big>machine generation <b>S/390 System z Built-in\nFunctions</b>. <b>-mhtm</b> is enabled by default when using\n<b>-march=zEC12</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvx <br>\n-mno-vx</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When <b>-mvx</b>\nis specified, generate code using the instructions available\nwith the vector extension facility introduced with the</big>\nIBM <big>z13 machine generation. This option changes\nthe</big> ABI <big>for some vector type values with regard\nto alignment and calling conventions. In case vector type\nvalues are being used in an ABI-relevant context a</big> GAS\n<b><big>.gnu_attribute</big></b> <big>command will be added\nto mark the resulting binary with the</big> ABI <big>used.\n<b>-mvx</b> is enabled by default when using\n<b>-march=z13</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mzvector\n<br>\n-mno-zvector</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The\n<b>-mzvector</b> option enables vector language extensions\nand builtins using instructions available with the vector\nextension facility introduced with the</big> IBM <big>z13\nmachine generation. This option adds support for\n<b>vector</b> to be used as a keyword to define vector type\nvariables and arguments. <b>vector</b> is only available\nwhen</big> GNU <big>extensions are enabled. It will not be\nexpanded when requesting strict standard compliance e.g.\nwith <b>-std=c99</b>. In addition to the</big> GCC\n<big>low-level builtins <b>-mzvector</b> enables a set of\nbuiltins added for compatibility with AltiVec-style\nimplementations like Power and Cell. In order to make use of\nthese builtins the header file <i>vecintrin.h</i> needs to\nbe included. <b>-mzvector</b> is disabled by\ndefault.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmvcle <br>\n-mno-mvcle</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate (or do\nnot generate) code using the &quot;mvcle&quot; instruction\nto perform block moves. When <b>-mno-mvcle</b> is specified,\nuse a &quot;mvc&quot; loop instead. This is the default\nunless optimizing for size.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdebug <br>\n-mno-debug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Print (or do not\nprint) additional debug information when compiling. The\ndefault is to not print debug\ninformation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-march=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat runs on <i>cpu-type</i>, which is the name of a system\nrepresenting a certain processor type. Possible values for\n<i>cpu-type</i> are <b>z900</b>/<b>arch5</b>,\n<b>z990</b>/<b>arch6</b>, <b>z9-109</b>,\n<b>z9-ec</b>/<b>arch7</b>, <b>z10</b>/<b>arch8</b>,\n<b>z196</b>/<b>arch9</b>, <b>zEC12</b>,\n<b>z13</b>/<b>arch11</b>, <b>z14</b>/<b>arch12</b>,\n<b>z15</b>/<b>arch13</b>, <b>z16</b>/<b>arch14</b>, and\n<b>native</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-march=z900</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Specifying\n<b>native</b> as cpu type can be used to select the best\narchitecture option for the host processor.\n<b>-march=native</b> has no effect if</big> GCC <big>does\nnot recognize the processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tune to\n<i>cpu-type</i> everything applicable about the generated\ncode, except for the</big> ABI <big>and the set of available\ninstructions. The list of <i>cpu-type</i> values is the same\nas for <b>-march</b>. The default is the value used for\n<b>-march</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtpf-trace\n<br>\n-mno-tpf-trace</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat adds (does not add) in</big> TPF OS <big>specific\nbranches to trace routines in the operating system. This\noption is off by default, even when compiling for the</big>\nTPF OS.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mtpf-trace-skip\n<br>\n-mno-tpf-trace-skip</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat changes (does not change) the default branch targets\nenabled by <b>-mtpf-trace</b> to point to specialized trace\nroutines providing the ability of selectively skipping\nfunction trace entries for the</big> TPF OS. <big>This\noption is off by default, even when compiling for the</big>\nTPF OS <big>and specifying\n<b>-mtpf-trace</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfused-madd\n<br>\n-mno-fused-madd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the floating-point multiply and\naccumulate instructions. These instructions are generated by\ndefault if hardware floating point is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mwarn-framesize=</b><i>framesize</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit a warning\nif the current function exceeds the given frame size.\nBecause this is a compile-time check it doesn&rsquo;t need\nto be a real problem when the program runs. It is intended\nto identify functions that most probably cause a stack\noverflow. It is useful to be used in an environment with\nlimited stack size e.g. the linux\nkernel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mwarn-dynamicstack</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit a warning\nif the function calls &quot;alloca&quot; or uses\ndynamically-sized arrays. This is generally a bad idea with\na limited stack size.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-guard=</b><i>stack-guard</i>\n<b><br>\n-mstack-size=</b><i>stack-size</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If these options\nare provided the S/390 back end emits additional\ninstructions in the function prologue that trigger a trap if\nthe stack size is <i>stack-guard</i> bytes above the\n<i>stack-size</i> (remember that the stack on S/390 grows\ndownward). If the <i>stack-guard</i> option is omitted the\nsmallest power of 2 larger than the frame size of the\ncompiled function is chosen. These options are intended to\nbe used to help debugging stack overflow problems. The\nadditionally emitted code causes only little overhead and\nhence can also be used in production-like systems without\ngreater performance degradation. The given values have to be\nexact powers of 2 and <i>stack-size</i> has to be greater\nthan <i>stack-guard</i> without exceeding 64k. In order to\nbe efficient the extra code makes the assumption that the\nstack starts at an address aligned to the value given by\n<i>stack-size</i>. The <i>stack-guard</i> option can only be\nused in conjunction with\n<i>stack-size</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhotpatch=</b><i>pre-halfwords</i><b>,</b><i>post-halfwords</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If the hotpatch\noption is enabled, a &quot;hot-patching&quot; function\nprologue is generated for all functions in the compilation\nunit. The funtion label is prepended with the given number\nof two-byte</big> NOP <big>instructions\n(<i>pre-halfwords</i>, maximum 1000000). After the label, 2\n* <i>post-halfwords</i> bytes are appended, using the\nlargest</big> NOP <big>like instructions the architecture\nallows (maximum 1000000).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nboth arguments are zero, hotpatching is\ndisabled.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption can be overridden for individual functions with the\n&quot;hotpatch&quot; attribute.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Score\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for Score implementations: <b><br>\n-meb</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile code for\nbig-endian mode. This is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Compile code for\nlittle-endian mode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnhwloop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable\ngeneration of &quot;bcnz&quot;\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-muls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable\ngeneration of unaligned load and store\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmac</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof multiply-accumulate instructions. Disabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mscore5</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nthe</big> SCORE5 <big>as the target\narchitecture.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mscore5u</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nthe</big> SCORE5U <big>of the target\narchitecture.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mscore7</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nthe</big> SCORE7 <big>as the target architecture. This is\nthe default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mscore7d</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\nthe</big> SCORE7D <big>as the target\narchitecture.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>SH\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the</big> SH\n<big>implementations:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-m1</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"40%\">\n\n\n<p><big><big><big>Generate code for the</big>\nSH1.</big></big></p> </td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><b><big>-m2</big></b></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"40%\">\n\n\n<p><big><big><big>Generate code for the</big>\nSH2.</big></big></p> </td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-m2e</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH2e.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m2a-nofpu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH2a without</big> FPU, <big>or for a SH2a-FPU in\nsuch a way that the floating-point unit is not\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m2a-single-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH2a-FPU, in such a way that no double-precision\nfloating-point operations are used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m2a-single</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH2a-FPU assuming the floating-point unit is in\nsingle-precision mode by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m2a</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH2a-FPU assuming the floating-point unit is in\ndouble-precision mode by default.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-m3</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"40%\">\n\n\n<p><big><big><big>Generate code for the</big>\nSH3.</big></big></p> </td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-m3e</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH3e.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-nofpu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the</big> SH4 <big>without a floating-point\nunit.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-single-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the</big> SH4 <big>with a floating-point unit that only\nsupports single-precision arithmetic.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-single</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the</big> SH4 <big>assuming the floating-point unit is\nin single-precision mode by default.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-m4</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"40%\">\n\n\n<p><big><big><big>Generate code for the</big>\nSH4.</big></big></p> </td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-m4-100</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-100.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-m4-100-nofpu</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-100 <big>in such a way that the floating-point\nunit is not used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-100-single</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-100 <big>assuming the floating-point unit is\nin single-precision mode by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-100-single-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-100 <big>in such a way that no\ndouble-precision floating-point operations are\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-200</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-200.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-m4-200-nofpu</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-200 <big>without in such a way that the\nfloating-point unit is not used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-200-single</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-200 <big>assuming the floating-point unit is\nin single-precision mode by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-200-single-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-200 <big>in such a way that no\ndouble-precision floating-point operations are\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-300</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-300.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-m4-300-nofpu</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-300 <big>without in such a way that the\nfloating-point unit is not used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-300-single</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-300 <big>in such a way that no\ndouble-precision floating-point operations are\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-300-single-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-300 <big>in such a way that no\ndouble-precision floating-point operations are\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-340</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-340 <big>(no</big> MMU, <big>no</big> FPU\n<big>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4-500</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor</big> SH4-500 <big>(no</big> FPU <big>). Passes\n<b>-isa=sh4-nofpu</b> to the\nassembler.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4a-nofpu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH4al-dsp, or for a SH4a in such a way that the\nfloating-point unit is not used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4a-single-only</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH4a, in such a way that no double-precision\nfloating-point operations are used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4a-single</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH4a assuming the floating-point unit is in\nsingle-precision mode by default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4a</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the SH4a.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m4al</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Same as\n<b>-m4a-nofpu</b>, except that it implicitly passes\n<b>-dsp</b> to the assembler.</big> GCC <big>doesn&rsquo;t\ngenerate any</big> DSP <big>instructions at the\nmoment.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-mb</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"81%\">\n\n\n<p><big><big><big>Compile code for the processor in\nbig-endian mode.</big></big></big></p></td>\n<td width=\"2%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-ml</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"81%\">\n\n\n<p><big><big><big>Compile code for the processor in\nlittle-endian mode.</big></big></big></p></td>\n<td width=\"2%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdalign</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Align doubles at\n64-bit boundaries. Note that this changes the calling\nconventions, and thus some functions from the standard C\nlibrary do not work unless you recompile it first with\n<b>-mdalign</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Shorten some\naddress references at link time, when possible; uses the\nlinker option <b>-relax</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbigtable</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use 32-bit\noffsets in &quot;switch&quot; tables. The default is to use\n16-bit offsets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbitops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof bit manipulation instructions on</big>\nSH2A.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mfmovd</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the use\nof the instruction &quot;fmovd&quot;. Check <b>-mdalign</b>\nfor alignment constraints.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrenesas</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Comply with the\ncalling conventions defined by\nRenesas.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-renesas</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Comply with the\ncalling conventions defined for</big> GCC <big>before the\nRenesas conventions were available. This option is the\ndefault for all targets of the</big> SH\n<big>toolchain.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnomacsave</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Mark the\n&quot;MAC&quot; register as call-clobbered, even if\n<b>-mrenesas</b> is given.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mieee <br>\n-mno-ieee</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control\nthe</big> IEEE <big>compliance of floating-point\ncomparisons, which affects the handling of cases where the\nresult of a comparison is unordered. By default\n<b>-mieee</b> is implicitly enabled. If\n<b>-ffinite-math-only</b> is enabled <b>-mno-ieee</b> is\nimplicitly set, which results in faster floating-point\ngreater-equal and less-equal comparisons. The implicit\nsettings can be overridden by specifying either\n<b>-mieee</b> or <b>-mno-ieee</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-ic_invalidate</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Inline code to\ninvalidate instruction cache entries after setting up nested\nfunction trampolines. This option has no effect if\n<b>-musermode</b> is in effect and the selected code\ngeneration option (e.g. <b>-m4</b>) does not allow the use\nof the &quot;icbi&quot; instruction. If the selected code\ngeneration option does not allow the use of the\n&quot;icbi&quot; instruction, and <b>-musermode</b> is not\nin effect, the inlined code manipulates the instruction\ncache address array directly with an associative write. This\nnot only requires privileged mode at run time, but it also\nfails if the cache line had been mapped via the</big> TLB\n<big>and has become unmapped.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-misize</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Dump instruction\nsize and location in the assembly\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpadstruct</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\ndeprecated. It pads structures to multiple of 4 bytes, which\nis incompatible with the</big> SH ABI.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-matomic-model=</big></b><big><i>model</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Sets the model\nof atomic operations and additional parameters as a comma\nseparated list. For details on the atomic built-in functions\nsee <b>__atomic Builtins</b>. The following models and\nparameters are supported: <b><br>\nnone</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disable compiler\ngenerated atomic sequences and emit library calls for atomic\noperations. This is the default if the target is not\n&quot;sh*-*-linux*&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>soft-gusa</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Generate\nGNU/Linux compatible gUSA software atomic sequences for the\natomic built-in functions. The generated atomic sequences\nrequire additional support from the interrupt/exception\nhandling code of the system and are only suitable for SH3*\nand SH4* single-core systems. This option is enabled by\ndefault when the target is &quot;sh*-*-linux*&quot; and SH3*\nor SH4*. When the target is</big> SH4A, <big>this option\nalso partially utilizes the hardware atomic instructions\n&quot;movli.l&quot; and &quot;movco.l&quot; to create more\nefficient code, unless <b>strict</b> is\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>soft-tcb</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Generate\nsoftware atomic sequences that use a variable in the thread\ncontrol block. This is a variation of the gUSA sequences\nwhich can also be used on SH1* and SH2* targets. The\ngenerated atomic sequences require additional support from\nthe interrupt/exception handling code of the system and are\nonly suitable for single-core systems. When using this\nmodel, the <b>gbr-offset=</b> parameter has to be specified\nas well.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>soft-imask</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Generate\nsoftware atomic sequences that temporarily disable\ninterrupts by setting &quot;SR.IMASK = 1111&quot;. This\nmodel works only when the program runs in privileged mode\nand is only suitable for single-core systems. Additional\nsupport from the interrupt/exception handling code of the\nsystem is not required. This model is enabled by default\nwhen the target is &quot;sh*-*-linux*&quot; and SH1* or\nSH2*.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>hard-llcs</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Generate\nhardware atomic sequences using the &quot;movli.l&quot; and\n&quot;movco.l&quot; instructions only. This is only\navailable on</big> SH4A <big>and is suitable for multi-core\nsystems. Since the hardware instructions support only 32 bit\natomic variables access to 8 or 16 bit variables is emulated\nwith 32 bit accesses. Code compiled with this option is also\ncompatible with other software atomic model\ninterrupt/exception handling systems if executed on an</big>\nSH4A <big>system. Additional support from the\ninterrupt/exception handling code of the system is not\nrequired for this model.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>gbr-offset=</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This parameter\nspecifies the offset in bytes of the variable in the thread\ncontrol block structure that should be used by the generated\natomic sequences when the <b>soft-tcb</b> model has been\nselected. For other models this parameter is ignored. The\nspecified value must be an integer multiple of four and in\nthe range 0-1020.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>strict</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This parameter\nprevents mixed usage of multiple atomic models, even if they\nare compatible, and makes the compiler generate atomic\nsequences of the specified model only.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtas</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate the\n&quot;tas.b&quot; opcode for\n&quot;__atomic_test_and_set&quot;. Notice that depending on\nthe particular hardware and software configuration this can\ndegrade overall performance due to the operand cache line\nflushes that are implied by the &quot;tas.b&quot;\ninstruction. On multi-core</big> SH4A <big>processors the\n&quot;tas.b&quot; instruction must be used with caution\nsince it can result in data corruption for certain cache\nconfigurations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprefergot</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When generating\nposition-independent code, emit function calls using the\nGlobal Offset Table instead of the Procedure Linkage\nTable.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-musermode\n<br>\n-mno-usermode</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t\nallow (allow) the compiler generating privileged mode code.\nSpecifying <b>-musermode</b> also implies\n<b>-mno-inline-ic_invalidate</b> if the inlined code would\nnot work in user mode. <b>-musermode</b> is the default when\nthe target is &quot;sh*-*-linux*&quot;. If the target is\nSH1* or SH2* <b>-musermode</b> has no effect, since there is\nno user mode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-multcost=</b><i>number</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the cost to\nassume for a multiply insn.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdiv=</b><i>strategy</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the division\nstrategy to be used for integer division operations.\n<i>strategy</i> can be one of: <b><br>\ncall-div1</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Calls a library\nfunction that uses the single-step division instruction\n&quot;div1&quot; to perform the operation. Division by zero\ncalculates an unspecified result and does not trap. This is\nthe default except for</big> SH4, SH2A <big>and\nSHcompact.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>call-fp</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Calls a library\nfunction that performs the operation in double precision\nfloating point. Division by zero causes a floating-point\nexception. This is the default for SHcompact with</big> FPU.\n<big>Specifying this for targets that do not have a double\nprecision</big> FPU <big>defaults to\n&quot;call-div1&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>call-table</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Calls a library\nfunction that uses a lookup table for small divisors and the\n&quot;div1&quot; instruction with case distinction for\nlarger divisors. Division by zero calculates an unspecified\nresult and does not trap. This is the default for</big> SH4.\n<big>Specifying this for targets that do not have dynamic\nshift instructions defaults to\n&quot;call-div1&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\na division strategy has not been specified the default\nstrategy is selected based on the current target. For</big>\nSH2A <big>the default strategy is to use the\n&quot;divs&quot; and &quot;divu&quot; instructions instead\nof library function calls.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maccumulate-outgoing-args</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Reserve space\nonce for outgoing arguments in the function prologue rather\nthan around each call. Generally beneficial for performance\nand size. Also needed for unwinding to avoid changing the\nstack frame around conditional code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdivsi3_libfunc=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the name of\nthe library function used for 32-bit signed division to\n<i>name</i>. This only affects the name used in the\n<b>call</b> division strategies, and the compiler still\nexpects the same sets of input/output/clobbered registers as\nif this option were not present.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfixed-range=</b><i>register-range</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\ntreating the given register range as fixed registers. A\nfixed register is one that the register allocator cannot\nuse. This is useful when compiling kernel code. A register\nrange is specified as two registers separated by a dash.\nMultiple register ranges can be specified separated by a\ncomma.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbranch-cost=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume\n<i>num</i> to be the cost for a branch instruction. Higher\nnumbers make the compiler try to generate more branch-free\ncode if possible. If not specified the value is selected\ndepending on the processor type that is being compiled\nfor.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mzdcbranch\n<br>\n-mno-zdcbranch</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume (do not\nassume) that zero displacement conditional branch\ninstructions &quot;bt&quot; and &quot;bf&quot; are fast. If\n<b>-mzdcbranch</b> is specified, the compiler prefers zero\ndisplacement branch code sequences. This is enabled by\ndefault when generating code for</big> SH4 <big>and</big>\nSH4A. <big>It can be explicitly disabled by specifying\n<b>-mno-zdcbranch</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcbranch-force-delay-slot</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force the usage\nof delay slots for conditional branches, which stuffs the\ndelay slot with a &quot;nop&quot; if a suitable instruction\ncannot be found. By default this option is disabled. It can\nbe enabled to work around hardware bugs as found in the\noriginal</big> SH7055.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mfused-madd\n<br>\n-mno-fused-madd</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses (does not use) the floating-point multiply and\naccumulate instructions. These instructions are generated by\ndefault if hardware floating point is used. The\nmachine-dependent <b>-mfused-madd</b> option is now mapped\nto the machine-independent <b>-ffp-contract=fast</b> option,\nand <b>-mno-fused-madd</b> is mapped to\n<b>-ffp-contract=off</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfsca <br>\n-mno-fsca</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow or\ndisallow the compiler to emit the &quot;fsca&quot;\ninstruction for sine and cosine approximations. The option\n<b>-mfsca</b> must be used in combination with\n<b>-funsafe-math-optimizations</b>. It is enabled by default\nwhen generating code for</big> SH4A. <big>Using\n<b>-mno-fsca</b> disables sine and cosine approximations\neven if <b>-funsafe-math-optimizations</b> is in\neffect.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfsrra <br>\n-mno-fsrra</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Allow or\ndisallow the compiler to emit the &quot;fsrra&quot;\ninstruction for reciprocal square root approximations. The\noption <b>-mfsrra</b> must be used in combination with\n<b>-funsafe-math-optimizations</b> and\n<b>-ffinite-math-only</b>. It is enabled by default when\ngenerating code for</big> SH4A. <big>Using <b>-mno-fsrra</b>\ndisables reciprocal square root approximations even if\n<b>-funsafe-math-optimizations</b> and\n<b>-ffinite-math-only</b> are in\neffect.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpretend-cmove</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Prefer\nzero-displacement conditional branches for conditional move\ninstruction patterns. This can result in faster code on\nthe</big> SH4 <big>processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfdpic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nusing the</big> FDPIC ABI.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i><big>Solaris\n2 Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are supported on Solaris 2: <b><br>\n-mclear-hwcap</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-mclear-hwcap</b>\ntells the compiler to remove the hardware capabilities\ngenerated by the Solaris assembler. This is only necessary\nwhen object files use</big> ISA <big>extensions not\nsupported by the current machine, but check at runtime\nwhether or not to use them.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mimpure-text</b></big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>-mimpure-text</b>,\nused in addition to <b>-shared</b>, tells the compiler to\nnot pass <b>-z text</b> to the linker when linking a shared\nobject. Using this option, you can link position-dependent\ncode into a shared object.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-mimpure-text</b>\nsuppresses the &quot;relocations remain against allocatable\nbut non-writable sections&quot; linker error message.\nHowever, the necessary relocations trigger copy-on-write,\nand the shared object is not actually shared across\nprocesses. Instead of using <b>-mimpure-text</b>, you should\ncompile all source code with <b>-fpic</b> or\n<b>-fPIC</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nswitches are supported in addition to the above on Solaris\n2: <b><br>\n-pthreads</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This is a\nsynonym for <b>-pthread</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>SPARC\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are supported on the</big> SPARC:\n<b><big><br>\n-mno-app-regs <br>\n-mapp-regs</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify\n<b>-mapp-regs</b> to generate output using the global\nregisters 2 through 4, which the</big> SPARC SVR4 ABI\n<big>reserves for applications. Like the global register 1,\neach global register 2 through 4 is then treated as an\nallocable register that is clobbered by function calls. This\nis the default.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\nbe fully</big> SVR4 <big>ABI-compliant at the cost of some\nperformance loss, specify <b>-mno-app-regs</b>. You should\ncompile libraries and system software with this\noption.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mflat <br>\n-mno-flat</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mflat</b>, the compiler does not generate save/restore\ninstructions and uses a &quot;flat&quot; or single register\nwindow model. This model is compatible with the regular\nregister window model. The local registers and the input\nregisters (0--5) are still treated as &quot;call-saved&quot;\nregisters and are saved on the stack as\nneeded.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-mno-flat</b> (the default), the compiler generates\nsave/restore instructions (except for leaf functions). This\nis the normal operating mode.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfpu <br>\n-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\ncontaining floating-point instructions. This is the\ndefault.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-fpu <br>\n-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\ncontaining library calls for floating point. <b>Warning:</b>\nthe requisite libraries are not available for all</big>\nSPARC <big>targets. Normally the facilities of the\nmachine&rsquo;s usual C compiler are used, but this cannot\nbe done directly in cross-compilation. You must make your\nown arrangements to provide suitable library functions for\ncross-compilation. The embedded targets <b>sparc-*-aout</b>\nand <b>sparclite-*-*</b> do provide software floating-point\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-msoft-float</b>\nchanges the calling convention in the output file;\ntherefore, it is only useful if you compile <i>all</i> of a\nprogram with this option. In particular, you need to compile\n<i>libgcc.a</i>, the library that comes with</big> GCC,\n<big>with <b>-msoft-float</b> in order for this to\nwork.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mhard-quad-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\ncontaining quad-word (long double) floating-point\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-quad-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\ncontaining library calls for quad-word (long double)\nfloating-point instructions. The functions called are those\nspecified in the</big> SPARC ABI. <big>This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>As\nof this writing, there are no</big> SPARC\n<big>implementations that have hardware support for the\nquad-word floating-point instructions. They all invoke a\ntrap handler for one of these instructions, and then the\ntrap handler emulates the effect of the instruction. Because\nof the trap handler overhead, this is much slower than\ncalling the</big> ABI <big>library routines. Thus the\n<b>-msoft-quad-float</b> option is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-unaligned-doubles\n<br>\n-munaligned-doubles</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume that\ndoubles have 8-byte alignment. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-munaligned-doubles</b>,</big> GCC <big>assumes that\ndoubles have 8-byte alignment only if they are contained in\nanother type, or if they have an absolute address.\nOtherwise, it assumes they have 4-byte alignment. Specifying\nthis option avoids some rare compatibility problems with\ncode generated by other compilers. It is not the default\nbecause it results in a performance loss, especially for\nfloating-point code.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-muser-mode\n<br>\n-mno-user-mode</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not generate\ncode that can only run in supervisor mode. This is relevant\nonly for the &quot;casa&quot; instruction emitted for\nthe</big> LEON3 <big>processor. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfaster-structs\n<br>\n-mno-faster-structs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mfaster-structs</b>, the compiler assumes that\nstructures should have 8-byte alignment. This enables the\nuse of pairs of &quot;ldd&quot; and &quot;std&quot;\ninstructions for copies in structure assignment, in place of\ntwice as many &quot;ld&quot; and &quot;st&quot; pairs.\nHowever, the use of this changed alignment directly violates\nthe</big> SPARC ABI. <big>Thus, it&rsquo;s intended only for\nuse on targets where the developer acknowledges that their\nresulting code is not directly in line with the rules of\nthe</big> ABI.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mstd-struct-return\n<br>\n-mno-std-struct-return</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mstd-struct-return</b>, the compiler generates checking\ncode in functions returning structures or unions to detect\nsize mismatches between the two sides of function calls, as\nper the 32-bit</big> ABI.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault is <b>-mno-std-struct-return</b>. This option has no\neffect in 64-bit mode.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlra <br>\n-mno-lra</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable Local\nRegister Allocation. This is the default for</big> SPARC\n<big>since</big> GCC 7 <big>so <b>-mno-lra</b> needs to be\npassed to get old Reload.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ninstruction set, register set, and instruction scheduling\nparameters for machine type <i>cpu_type</i>. Supported\nvalues for <i>cpu_type</i> are <b>v7</b>, <b>cypress</b>,\n<b>v8</b>, <b>supersparc</b>, <b>hypersparc</b>,\n<b>leon</b>, <b>leon3</b>, <b>leon3v7</b>, <b>leon5</b>,\n<b>sparclite</b>, <b>f930</b>, <b>f934</b>,\n<b>sparclite86x</b>, <b>sparclet</b>, <b>tsc701</b>,\n<b>v9</b>, <b>ultrasparc</b>, <b>ultrasparc3</b>,\n<b>niagara</b>, <b>niagara2</b>, <b>niagara3</b>,\n<b>niagara4</b>, <b>niagara7</b> and\n<b>m8</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Native\nSolaris and GNU/Linux toolchains also support the value\n<b>native</b>, which selects the best architecture option\nfor the host processor. <b>-mcpu=native</b> has no effect\nif</big> GCC <big>does not recognize the\nprocessor.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Default\ninstruction scheduling parameters are used for values that\nselect an architecture and not an implementation. These are\n<b>v7</b>, <b>v8</b>, <b>sparclite</b>, <b>sparclet</b>,\n<b>v9</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Here\nis a list of each supported architecture and their supported\nimplementations.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>v7</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p><big><big><big>cypress, leon3v7</big></big></big></p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>v8</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p><big><big><big>supersparc, hypersparc, leon, leon3,\nleon5</big></big></big></p> </td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>sparclite</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>f930, f934,\nsparclite86x</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big>sparclet</big></big></big></p>\n\n\n<p style=\"margin-left:23%;\"><big><big><big>tsc701</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big>v9</big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>ultrasparc, ultrasparc3, niagara,\nniagara2, niagara3, niagara4, niagara7,\nm8</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>By\ndefault (unless configured otherwise),</big> GCC\n<big>generates code for the V7 variant of the</big> SPARC\n<big>architecture. With <b>-mcpu=cypress</b>, the compiler\nadditionally optimizes it for the Cypress</big> CY7C602\n<big>chip, as used in the SPARCStation/SPARCServer 3xx\nseries. This is also appropriate for the older SPARCStation\n1, 2,</big> IPX <big>etc.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-mcpu=v8</b>,</big> GCC <big>generates code for the V8\nvariant of the</big> SPARC <big>architecture. The only\ndifference from V7 code is that the compiler emits the\ninteger multiply and integer divide instructions which exist\nin</big> SPARC-V8 <big>but not in</big> SPARC-V7. <big>With\n<b>-mcpu=supersparc</b>, the compiler additionally optimizes\nit for the SuperSPARC chip, as used in the SPARCStation 10,\n1000 and 2000 series.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-mcpu=sparclite</b>,</big> GCC <big>generates code for\nthe SPARClite variant of the</big> SPARC <big>architecture.\nThis adds the integer multiply, integer divide step and scan\n(&quot;ffs&quot;) instructions which exist in SPARClite but\nnot in</big> SPARC-V7. <big>With <b>-mcpu=f930</b>, the\ncompiler additionally optimizes it for the Fujitsu</big>\nMB86930 <big>chip, which is the original SPARClite, with\nno</big> FPU. <big>With <b>-mcpu=f934</b>, the compiler\nadditionally optimizes it for the Fujitsu</big> MB86934\n<big>chip, which is the more recent SPARClite with</big>\nFPU.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-mcpu=sparclet</b>,</big> GCC <big>generates code for the\nSPARClet variant of the</big> SPARC <big>architecture. This\nadds the integer multiply, multiply/accumulate, integer\ndivide step and scan (&quot;ffs&quot;) instructions which\nexist in SPARClet but not in</big> SPARC-V7. <big>With\n<b>-mcpu=tsc701</b>, the compiler additionally optimizes it\nfor the</big> TEMIC <big>SPARClet\nchip.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-mcpu=v9</b>,</big> GCC <big>generates code for the V9\nvariant of the</big> SPARC <big>architecture. This adds\n64-bit integer and floating-point move instructions, 3\nadditional floating-point condition code registers and\nconditional move instructions. With <b>-mcpu=ultrasparc</b>,\nthe compiler additionally optimizes it for the Sun\nUltraSPARC I/II/IIi chips. With <b>-mcpu=ultrasparc3</b>,\nthe compiler additionally optimizes it for the Sun\nUltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips. With\n<b>-mcpu=niagara</b>, the compiler additionally optimizes it\nfor Sun UltraSPARC T1 chips. With <b>-mcpu=niagara2</b>, the\ncompiler additionally optimizes it for Sun UltraSPARC T2\nchips. With <b>-mcpu=niagara3</b>, the compiler additionally\noptimizes it for Sun UltraSPARC T3 chips. With\n<b>-mcpu=niagara4</b>, the compiler additionally optimizes\nit for Sun UltraSPARC T4 chips. With <b>-mcpu=niagara7</b>,\nthe compiler additionally optimizes it for Oracle</big>\nSPARC M7 <big>chips. With <b>-mcpu=m8</b>, the compiler\nadditionally optimizes it for Oracle M8\nchips.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ninstruction scheduling parameters for machine type\n<i>cpu_type</i>, but do not set the instruction set or\nregister set that the option <b>-mcpu=</b><i>cpu_type</i>\ndoes.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nsame values for <b>-mcpu=</b><i>cpu_type</i> can be used for\n<b>-mtune=</b><i>cpu_type</i>, but the only useful values\nare those that select a particular</big> CPU\n<big>implementation. Those are <b>cypress</b>,\n<b>supersparc</b>, <b>hypersparc</b>, <b>leon</b>,\n<b>leon3</b>, <b>leon3v7</b>, <b>leon5</b>, <b>f930</b>,\n<b>f934</b>, <b>sparclite86x</b>, <b>tsc701</b>,\n<b>ultrasparc</b>, <b>ultrasparc3</b>, <b>niagara</b>,\n<b>niagara2</b>, <b>niagara3</b>, <b>niagara4</b>,\n<b>niagara7</b> and <b>m8</b>. With native Solaris and\nGNU/Linux toolchains, <b>native</b> can also be\nused.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv8plus <br>\n-mno-v8plus</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mv8plus</b>,</big> GCC <big>generates code for the</big>\nSPARC-V8+ ABI. <big>The difference from the V8</big> ABI\n<big>is that the global and out registers are considered 64\nbits wide. This is enabled by default on Solaris in 32-bit\nmode for all</big> SPARC-V9\n<big>processors.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvis <br>\n-mno-vis</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mvis</b>,</big> GCC <big>generates code that takes\nadvantage of the UltraSPARC Visual Instruction Set\nextensions. The default is\n<b>-mno-vis</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvis2 <br>\n-mno-vis2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mvis2</b>,</big> GCC <big>generates code that takes\nadvantage of version 2.0 of the UltraSPARC Visual\nInstruction Set extensions. The default is <b>-mvis2</b>\nwhen targeting a cpu that supports such instructions, such\nas UltraSPARC-III and later. Setting <b>-mvis2</b> also sets\n<b>-mvis</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvis3 <br>\n-mno-vis3</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mvis3</b>,</big> GCC <big>generates code that takes\nadvantage of version 3.0 of the UltraSPARC Visual\nInstruction Set extensions. The default is <b>-mvis3</b>\nwhen targeting a cpu that supports such instructions, such\nas niagara-3 and later. Setting <b>-mvis3</b> also sets\n<b>-mvis2</b> and <b>-mvis</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvis4 <br>\n-mno-vis4</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mvis4</b>,</big> GCC <big>generates code that takes\nadvantage of version 4.0 of the UltraSPARC Visual\nInstruction Set extensions. The default is <b>-mvis4</b>\nwhen targeting a cpu that supports such instructions, such\nas niagara-7 and later. Setting <b>-mvis4</b> also sets\n<b>-mvis3</b>, <b>-mvis2</b> and\n<b>-mvis</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvis4b <br>\n-mno-vis4b</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mvis4b</b>,</big> GCC <big>generates code that takes\nadvantage of version 4.0 of the UltraSPARC Visual\nInstruction Set extensions, plus the additional</big> VIS\n<big>instructions introduced in the Oracle</big> SPARC\n<big>Architecture 2017. The default is <b>-mvis4b</b> when\ntargeting a cpu that supports such instructions, such as m8\nand later. Setting <b>-mvis4b</b> also sets <b>-mvis4</b>,\n<b>-mvis3</b>, <b>-mvis2</b> and\n<b>-mvis</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcbcond <br>\n-mno-cbcond</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mcbcond</b>,</big> GCC <big>generates code that takes\nadvantage of the UltraSPARC Compare-and-Branch-on-Condition\ninstructions. The default is <b>-mcbcond</b> when targeting\na</big> CPU <big>that supports such instructions, such as\nNiagara-4 and later.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfmaf <br>\n-mno-fmaf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mfmaf</b>,</big> GCC <big>generates code that takes\nadvantage of the UltraSPARC Fused Multiply-Add\nFloating-point instructions. The default is <b>-mfmaf</b>\nwhen targeting a</big> CPU <big>that supports such\ninstructions, such as Niagara-3 and\nlater.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfsmuld <br>\n-mno-fsmuld</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mfsmuld</b>,</big> GCC <big>generates code that takes\nadvantage of the Floating-point Multiply Single to Double\n(FsMULd) instruction. The default is <b>-mfsmuld</b> when\ntargeting a</big> CPU <big>supporting the architecture\nversions V8 or V9 with</big> FPU <big>except\n<b>-mcpu=leon</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpopc <br>\n-mno-popc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mpopc</b>,</big> GCC <big>generates code that takes\nadvantage of the UltraSPARC Population Count instruction.\nThe default is <b>-mpopc</b> when targeting a</big> CPU\n<big>that supports such an instruction, such as Niagara-2\nand later.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msubxc <br>\n-mno-subxc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-msubxc</b>,</big> GCC <big>generates code that takes\nadvantage of the UltraSPARC Subtract-Extended-with-Carry\ninstruction. The default is <b>-msubxc</b> when targeting\na</big> CPU <big>that supports such an instruction, such as\nNiagara-7 and later.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-at697f</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\ndocumented workaround for the single erratum of the\nAtmel</big> AT697F <big>processor (which corresponds to\nerratum #13 of the</big> AT697E\n<big>processor).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-ut699</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\ndocumented workarounds for the floating-point errata and the\ndata cache nullify errata of the</big> UT699\n<big>processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-ut700</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\ndocumented workaround for the back-to-back store errata of\nthe</big> UT699E/UT700 <big>processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfix-gr712rc</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable the\ndocumented workaround for the back-to-back store errata of\nthe</big> GR712RC <big>processor.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are supported in addition to the above\non</big> SPARC-V9 <big>processors in 64-bit environments:\n<b><br>\n-m32 <br>\n-m64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a 32-bit or 64-bit environment. The 32-bit environment\nsets int, long and pointer to 32 bits. The 64-bit\nenvironment sets int to 32 bits and long and pointer to 64\nbits.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=</b><i>which</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the code\nmodel to one of <b><br>\nmedlow</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The Medium/Low\ncode model: 64-bit addresses, programs must be linked in the\nlow 32 bits of memory. Programs can be statically or\ndynamically linked.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>medmid</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The\nMedium/Middle code model: 64-bit addresses, programs must be\nlinked in the low 44 bits of memory, the text and data\nsegments must be less than 2GB in size and the data segment\nmust be located within 2GB of the text\nsegment.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>medany</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The\nMedium/Anywhere code model: 64-bit addresses, programs may\nbe linked anywhere in memory, the text and data segments\nmust be less than 2GB in size and the data segment must be\nlocated within 2GB of the text\nsegment.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>embmedany</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The\nMedium/Anywhere code model for embedded systems: 64-bit\naddresses, the text and data segments must be less than 2GB\nin size, both starting anywhere in memory (determined at\nlink time). The global register %g4 points to the base of\nthe data segment. Programs are statically linked and</big>\nPIC <big>is not supported.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmemory-model=</b><i>mem-model</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the memory\nmodel in force on the processor to one of <b><br>\ndefault</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>The default\nmemory model for the processor and operating\nsystem.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>rmo</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"34%\">\n\n\n<p><big><big><big>Relaxed Memory\nOrder</big></big></big></p> </td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>pso</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"34%\">\n\n\n<p><big><big><big>Partial Store Order</big></big></big></p></td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>tso</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"34%\">\n\n\n<p><big><big><big>Total Store Order</big></big></big></p></td>\n<td width=\"43%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>sc</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"34%\">\n\n\n<p><big><big><big>Sequential\nConsistency</big></big></big></p> </td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>These\nmemory models are formally defined in Appendix D of\nthe</big> SPARC-V9 <big>architecture manual, as set in the\nprocessor&rsquo;s &quot;PSTATE.MM&quot;\nfield.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-bias\n<br>\n-mno-stack-bias</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>With\n<b>-mstack-bias</b>,</big> GCC <big>assumes that the stack\npointer, and frame pointer if present, are offset by -2047\nwhich must be added back when making stack frame references.\nThis is the default in 64-bit mode. Otherwise, assume no\nsuch offset is present.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Options\nfor System V</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nadditional options are available on System V Release 4 for\ncompatibility with other compilers on those\nsystems:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-G</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Create a shared object. It is recommended\nthat <b>-symbolic</b> or <b>-shared</b> be used\ninstead.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-Qy</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Identify the versions of each tool used\nby the compiler, in a &quot;.ident&quot; assembler directive\nin the output.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-Qn</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Refrain from adding &quot;.ident&quot;\ndirectives to the output file (this is the\ndefault).</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-YP,</b><i>dirs</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Search the\ndirectories <i>dirs</i>, and no others, for libraries\nspecified with <b>-l</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Ym,</b><i>dir</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Look in the\ndirectory <i>dir</i> to find the M4 preprocessor. The\nassembler uses this option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>TILE-Gx\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are supported on the TILE-Gx: <b><br>\n-mcmodel=small</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the small model. The distance for direct calls is\nlimited to 500M in either direction. PC-relative addresses\nare 32 bits. Absolute addresses support the full address\nrange.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=large</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the large model. There is no limitation on call\ndistance, pc-relative addresses, or absolute\naddresses.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Selects the type\nof</big> CPU <big>to be targeted. Currently the only\nsupported type is <b>tilegx</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m32 <br>\n-m64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a 32-bit or 64-bit environment. The 32-bit environment\nsets int, long, and pointer to 32 bits. The 64-bit\nenvironment sets int to 32 bits and long and pointer to 64\nbits.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-endian\n<br>\n-mlittle-endian</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code in\nbig/little endian mode, respectively.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>TILEPro\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are supported on the TILEPro: <b><br>\n-mcpu=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Selects the type\nof</big> CPU <big>to be targeted. Currently the only\nsupported type is <b>tilepro</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a 32-bit environment, which sets int, long, and pointer\nto 32 bits. This is the only supported behavior so the flag\nis essentially ignored.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>V850\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for V850 implementations:\n<b><br>\n-mlong-calls <br>\n-mno-long-calls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Treat all calls\nas being far away (near). If calls are assumed to be far\naway, the compiler always loads the function&rsquo;s address\ninto a register, and calls indirect through the\npointer.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-ep <br>\n-mep</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not optimize\n(do optimize) basic blocks that use the same index pointer 4\nor more times to copy pointer into the &quot;ep&quot;\nregister, and use the shorter &quot;sld&quot; and\n&quot;sst&quot; instructions. The <b>-mep</b> option is on\nby default if you optimize.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-prolog-function\n<br>\n-mprolog-function</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use (do\nuse) external functions to save and restore registers at the\nprologue and epilogue of a function. The external functions\nare slower, but use less code space if more than one\nfunction saves the same number of registers. The\n<b>-mprolog-function</b> option is on by default if you\noptimize.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mspace</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Try to make the\ncode as small as possible. At present, this just turns on\nthe <b>-mep</b> and <b>-mprolog-function</b>\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtda=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put static or\nglobal variables whose size is <i>n</i> bytes or less into\nthe tiny data area that register &quot;ep&quot; points to.\nThe tiny data area can hold up to 256 bytes in total (128\nbytes for byte references).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msda=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put static or\nglobal variables whose size is <i>n</i> bytes or less into\nthe small data area that register &quot;gp&quot; points to.\nThe small data area can hold up to 64\nkilobytes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mzda=</b><i>n</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Put static or\nglobal variables whose size is <i>n</i> bytes or less into\nthe first 32 kilobytes of memory.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv850</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\ntarget processor is the V850.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv850e3v5</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\ntarget processor is the V850E3V5. The preprocessor constant\n&quot;__v850e3v5__&quot; is defined if this option is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv850e2v4</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\ntarget processor is the V850E3V5. This is an alias for the\n<b>-mv850e3v5</b> option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv850e2v3</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\ntarget processor is the V850E2V3. The preprocessor constant\n&quot;__v850e2v3__&quot; is defined if this option is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv850e2</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\ntarget processor is the V850E2. The preprocessor constant\n&quot;__v850e2__&quot; is defined if this option is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv850e1</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\ntarget processor is the V850E1. The preprocessor constants\n&quot;__v850e1__&quot; and &quot;__v850e__&quot; are defined\nif this option is used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv850es</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\ntarget processor is the V850ES. This is an alias for the\n<b>-mv850e1</b> option.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mv850e</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\ntarget processor is the V850E. The preprocessor constant\n&quot;__v850e__&quot; is defined if this option is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nneither <b>-mv850</b> nor <b>-mv850e</b> nor <b>-mv850e1</b>\nnor <b>-mv850e2</b> nor <b>-mv850e2v3</b> nor\n<b>-mv850e3v5</b> are defined then a default target\nprocessor is chosen and the relevant <b>__v850*__</b>\npreprocessor constant is defined.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\npreprocessor constants &quot;__v850&quot; and\n&quot;__v851__&quot; are always defined, regardless of which\nprocessor variant is the target.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdisable-callt\n<br>\n-mno-disable-callt</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nsuppresses generation of the &quot;CALLT&quot; instruction\nfor the v850e, v850e1, v850e2, v850e2v3 and v850e3v5 flavors\nof the v850 architecture.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled by default when the</big> RH850 ABI\n<big>is in use (see <b>-mrh850-abi</b>), and disabled by\ndefault when the</big> GCC ABI <big>is in use. If\n&quot;CALLT&quot; instructions are being generated then the\nC preprocessor symbol &quot;__V850_CALLT__&quot; is\ndefined.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrelax <br>\n-mno-relax</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Pass on (or do\nnot pass on) the <b>-mrelax</b> command-line option to the\nassembler.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-jumps\n<br>\n-mno-long-jumps</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable (or\nre-enable) the generation of PC-relative jump\ninstructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msoft-float\n<br>\n-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable (or\nre-enable) the generation of hardware floating point\ninstructions. This option is only significant when the\ntarget architecture is <b>V850E2V3</b> or higher. If\nhardware floating point instructions are being generated\nthen the C preprocessor symbol &quot;__FPU_OK__&quot; is\ndefined, otherwise the symbol &quot;__NO_FPU__&quot; is\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mloop</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables the use\nof the e3v5</big> LOOP <big>instruction. The use of this\ninstruction is not enabled by default when the e3v5\narchitecture is selected because its use is still\nexperimental.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrh850-abi\n<br>\n-mghs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables support\nfor the</big> RH850 <big>version of the V850</big> ABI.\n<big>This is the default. With this version of the</big> ABI\n<big>the following rules apply:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Integer sized structures and unions are\nreturned via a memory pointer rather than a\nregister.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Large structures and unions (more than 8\nbytes in size) are passed by value.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Functions are aligned to 16-bit\nboundaries.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>The <b>-m8byte-align</b> command-line\noption is supported.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>The <b>-mdisable-callt</b> command-line\noption is enabled by default. The <b>-mno-disable-callt</b>\ncommand-line option is not supported.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nthis version of the</big> ABI <big>is enabled the C\npreprocessor symbol &quot;__V850_RH850_ABI__&quot; is\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgcc-abi</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables support\nfor the old</big> GCC <big>version of the V850</big> ABI.\n<big>With this version of the</big> ABI <big>the following\nrules apply:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Integer sized structures and unions are\nreturned in register &quot;r10&quot;.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Large structures and unions (more than 8\nbytes in size) are passed by\nreference.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Functions are aligned to 32-bit\nboundaries, unless optimizing for\nsize.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>The <b>-m8byte-align</b> command-line\noption is not supported.</big></big></big></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p><big><big><big>*</big></big></big></p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>The <b>-mdisable-callt</b> command-line\noption is supported but not enabled by\ndefault.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>When\nthis version of the</big> ABI <big>is enabled the C\npreprocessor symbol &quot;__V850_GCC_ABI__&quot; is\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m8byte-align\n<br>\n-mno-8byte-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enables support\nfor &quot;double&quot; and &quot;long long&quot; types to be\naligned on 8-byte boundaries. The default is to restrict the\nalignment of all objects to at most 4-bytes. When\n<b>-m8byte-align</b> is in effect the C preprocessor symbol\n&quot;__V850_8BYTE_ALIGN__&quot; is\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mbig-switch</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nsuitable for big switch tables. Use this option only if the\nassembler/linker complain about out of range branches within\na switch table.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mapp-regs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncauses r2 and r5 to be used in the code generated by the\ncompiler. This setting is the default.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-app-regs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncauses r2 and r5 to be treated as fixed\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>VAX\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the</big> VAX:\n<b><big><br>\n-munix</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not output\ncertain jump instructions (&quot;aobleq&quot; and so on)\nthat the Unix assembler for the</big> VAX <big>cannot handle\nacross long ranges.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mgnu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do output those\njump instructions, on the assumption that the</big> GNU\n<big>assembler is being used.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><big><big><big><b>-mg</b></big></big></big></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><big><big><big>Output code for G-format floating-point\nnumbers instead of D-format.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Visium\nOptions</i> <b><br>\n-mdebug</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>A program which\nperforms file I/O and is destined to run on an</big> MCM\n<big>target should be linked with this option. It causes the\nlibraries libc.a and libdebug.a to be linked. The program\nshould be run on the target under the control of the</big>\nGDB <big>remote debugging stub.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>A program which\nperforms file I/O and is destined to run on the simulator\nshould be linked with option. This causes libraries libc.a\nand libsim.a to be linked.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfpu <br>\n-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\ncontaining floating-point instructions. This is the\ndefault.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-fpu <br>\n-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\ncontaining library calls for\nfloating-point.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>-msoft-float</b>\nchanges the calling convention in the output file;\ntherefore, it is only useful if you compile <i>all</i> of a\nprogram with this option. In particular, you need to compile\n<i>libgcc.a</i>, the library that comes with</big> GCC,\n<big>with <b>-msoft-float</b> in order for this to\nwork.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ninstruction set, register set, and instruction scheduling\nparameters for machine type <i>cpu_type</i>. Supported\nvalues for <i>cpu_type</i> are <b>mcm</b>, <b>gr5</b> and\n<b>gr6</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>mcm</b>\nis a synonym of <b>gr5</b> present for backward\ncompatibility.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>By\ndefault (unless configured otherwise),</big> GCC\n<big>generates code for the</big> GR5 <big>variant of the\nVisium architecture.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\n<b>-mcpu=gr6</b>,</big> GCC <big>generates code for\nthe</big> GR6 <big>variant of the Visium architecture. The\nonly difference from</big> GR5 <big>code is that the\ncompiler will generate block move\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu_type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the\ninstruction scheduling parameters for machine type\n<i>cpu_type</i>, but do not set the instruction set or\nregister set that the option <b>-mcpu=</b><i>cpu_type</i>\nwould.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msv-mode</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the supervisor mode, where there are no restrictions on\nthe access to general registers. This is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-muser-mode</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the user mode, where the access to some general\nregisters is forbidden: on the</big> GR5, <big>registers r24\nto r31 cannot be accessed in this mode; on the</big> GR6,\n<big>only registers r29 to r31 are\naffected.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><i>VMS\n<big>Options</big></i></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the</big> VMS\n<big>implementations: <b><br>\n-mvms-return-codes</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Return</big> VMS\n<big>condition codes from &quot;main&quot;. The default is\nto return POSIX-style condition (e.g. error)\ncodes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdebug-main=</b><i>prefix</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Flag the first\nroutine whose name starts with <i>prefix</i> as the main\nroutine for the debugger.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmalloc64</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Default to\n64-bit memory allocation routines.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpointer-size=</b><i>size</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set the default\nsize of pointers. Possible options for <i>size</i> are\n<b>32</b> or <b>short</b> for 32 bit pointers, <b>64</b> or\n<b>long</b> for 64 bit pointers, and <b>no</b> for\nsupporting only 32 bit pointers. The later option disables\n&quot;pragma pointer_size&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>VxWorks\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>The\noptions in this section are defined for all VxWorks targets.\nOptions specific to the target hardware are listed with the\nother options for that target. <b><br>\n-mrtp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>GCC <big>can generate\ncode for both VxWorks kernels and real time processes\n(RTPs). This option switches from the former to the latter.\nIt also defines the preprocessor macro\n&quot;__RTP__&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-non-static</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Link an</big>\nRTP <big>executable against shared libraries rather than\nstatic libraries. The options <b>-static</b> and\n<b>-shared</b> can also be used for RTPs; <b>-static</b> is\nthe default.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Bstatic <br>\n-Bdynamic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\nare passed down to the linker. They are defined for\ncompatibility with Diab.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Xbind-lazy</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable lazy\nbinding of function calls. This option is equivalent to\n<b>-Wl,-z,now</b> and is defined for compatibility with\nDiab.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-Xbind-now</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Disable lazy\nbinding of function calls. This option is the default and is\ndefined for compatibility with Diab.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>x86\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> options are defined for the x86 family of\ncomputers. <b><br>\n-march=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\ninstructions for the machine type <i>cpu-type</i>. In\ncontrast to <b>-mtune=</b><i>cpu-type</i>, which merely\ntunes the generated code for the specified <i>cpu-type</i>,\n<b>-march=</b><i>cpu-type</i> allows</big> GCC <big>to\ngenerate code that may not run at all on processors other\nthan the one indicated. Specifying\n<b>-march=</b><i>cpu-type</i> implies\n<b>-mtune=</b><i>cpu-type</i>, except where noted\notherwise.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nchoices for <i>cpu-type</i> are: <b><br>\nnative</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>This selects\nthe</big> CPU <big>to generate code for at compilation time\nby determining the processor type of the compiling machine.\nUsing <b>-march=native</b> enables all instruction subsets\nsupported by the local machine (hence the result might not\nrun on different machines). Using <b>-mtune=native</b>\nproduces code optimized for the local machine under the\nconstraints of the selected instruction\nset.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>x86-64</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>A generic</big>\nCPU <big>with 64-bit extensions.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>x86-64-v2\n<br>\nx86-64-v3 <br>\nx86-64-v4</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>These choices\nfor <i>cpu-type</i> select the corresponding\nmicro-architecture level from the x86-64 psABI. On ABIs\nother than the x86-64 psABI they select the same</big> CPU\n<big>features as the x86-64 psABI documents for the\nparticular micro-architecture level.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>Since\nthese <i>cpu-type</i> values do not have a corresponding\n<b>-mtune</b> setting, using <b>-march</b> with these values\nenables generic tuning. Specific tuning can be enabled using\nthe <b>-mtune=</b><i>other-cpu-type</i> option with an\nappropriate <i>other-cpu-type</i>\nvalue.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>i386</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Original Intel\ni386</big> CPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>i486</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel i486</big>\nCPU. <big>(No scheduling is implemented for this\nchip.)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>i586 <br>\npentium</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nPentium</big> CPU <big>with no</big> MMX\n<big>support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>lakemont</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nLakemont</big> MCU, <big>based on Intel Pentium</big>\nCPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>pentium-mmx</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nPentium</big> MMX CPU, <big>based on Pentium core with</big>\nMMX <big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>pentiumpro</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Pentium\nPro</big> CPU.</big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><b><big>i686</big></b></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>When used with\n<b>-march</b>, the Pentium Pro instruction set is used, so\nthe code runs on all i686 family chips. When used with\n<b>-mtune</b>, it has the same meaning as\n<b>generic</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>pentium2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nPentium</big> II CPU, <big>based on Pentium Pro core\nwith</big> MMX <big>instruction set\nsupport.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>pentium3 <br>\npentium3m</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nPentium</big> III CPU, <big>based on Pentium Pro core\nwith</big> MMX <big>and</big> SSE <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>pentium-m</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Pentium M;\nlow-power version of Intel Pentium</big> III CPU\n<big>with</big> MMX, SSE <big>and</big> SSE2\n<big>instruction set support. Used by Centrino\nnotebooks.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>pentium4 <br>\npentium4m</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Pentium\n4</big> CPU <big>with</big> MMX, SSE <big>and</big> SSE2\n<big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>prescott</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Improved version\nof Intel Pentium 4</big> CPU <big>with</big> MMX, SSE, SSE2\n<big>and</big> SSE3 <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nocona</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Improved version\nof Intel Pentium 4</big> CPU <big>with 64-bit\nextensions,</big> MMX, SSE, SSE2 <big>and</big> SSE3\n<big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>core2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Core\n2</big> CPU <big>with 64-bit extensions,</big> MMX, SSE,\nSSE2, SSE3 <big>and</big> SSSE3 <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nehalem</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nNehalem</big> CPU <big>with 64-bit extensions,</big> MMX,\nSSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 <big>and</big> POPCNT\n<big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>westmere</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nWestmere</big> CPU <big>with 64-bit extensions,</big> MMX,\nSSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES\n<big>and</big> PCLMUL <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sandybridge</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Sandy\nBridge</big> CPU <big>with 64-bit extensions,</big> MMX,\nSSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES\n<big>and</big> PCLMUL <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>ivybridge</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Ivy\nBridge</big> CPU <big>with 64-bit extensions,</big> MMX,\nSSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES,\nPCLMUL, FSGSBASE, RDRND <big>and F16C instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>haswell</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nHaswell</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX,\nAVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2 <big>and\nF16C instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>broadwell</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nBroadwell</big> CPU <big>with 64-bit extensions,</big>\nMOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,\nAVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2,\nF16C, RDSEED ADCX <big>and</big> PREFETCHW <big>instruction\nset support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>skylake</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nSkylake</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX,\nAVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C,\nRDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC <big>and</big>\nXSAVES <big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>bonnell</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nBonnell</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3 <big>and</big> SSSE3 <big>instruction\nset support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>silvermont</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nSilvermont</big> CPU <big>with 64-bit extensions,</big>\nMOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,\nAES, PREFETCHW, PCLMUL <big>and</big> RDRND <big>instruction\nset support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>goldmont</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nGoldmont</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES,\nPREFETCHW, PCLMUL, RDRND, XSAVE, XSAVEC, XSAVES, XSAVEOPT\n<big>and</big> FSGSBASE <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>goldmont-plus</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Goldmont\nPlus</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES,\nPREFETCHW, PCLMUL, RDRND, XSAVE, XSAVEC, XSAVES, XSAVEOPT,\nFSGSBASE, PTWRITE, RDPID, SGX <big>and</big> UMIP\n<big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tremont</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nTremont</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES,\nPREFETCHW, PCLMUL, RDRND, XSAVE, XSAVEC, XSAVES, XSAVEOPT,\nFSGSBASE, PTWRITE, RDPID, SGX, UMIP, <big>GFNI-SSE,</big>\nCLWB, MOVDIRI, MOVDIR64B, CLDEMOTE <big>and</big> WAITPKG\n<big>instruction set support.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>knl</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Intel Knight&rsquo;s Landing</big> CPU\n<big>with 64-bit extensions,</big> MOVBE, MMX, SSE, SSE2,\nSSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL,\nFSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX,\nPREFETCHW, PREFETCHWT1, AVX512F, AVX512PF, AVX512ER\n<big>and</big> AVX512CD <big>instruction set\nsupport.</big></big></big></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>knm</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Intel Knights Mill</big> CPU <big>with\n64-bit extensions,</big> MOVBE, MMX, SSE, SSE2, SSE3, SSSE3,\nSSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE,\nRDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX, PREFETCHW,\nPREFETCHWT1, AVX512F, AVX512PF, AVX512ER, AVX512CD,\nAVX5124VNNIW, AVX5124FMAPS <big>and</big> AVX512VPOPCNTDQ\n<big>instruction set support.</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>skylake-avx512</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Skylake\nServer</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU,\nAVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2,\nF16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES,\nAVX512F, CLWB, AVX512VL, AVX512BW, AVX512DQ <big>and</big>\nAVX512CD <big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>cannonlake</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Cannonlake\nServer</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU,\nAVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2,\nF16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES,\nAVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI,\nAVX512IFMA, SHA <big>and</big> UMIP <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>icelake-client</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Icelake\nClient</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU,\nAVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2,\nF16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES,\nAVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI,\nAVX512IFMA, SHA, CLWB, UMIP, RDPID, GFNI, AVX512VBMI2,\nAVX512VPOPCNTDQ, AVX512BITALG, AVX512VNNI, VPCLMULQDQ, VAES\n<big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>icelake-server</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel Icelake\nServer</big> CPU <big>with 64-bit extensions,</big> MOVBE,\nMMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU,\nAVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2,\nF16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES,\nAVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI,\nAVX512IFMA, SHA, CLWB, UMIP, RDPID, GFNI, AVX512VBMI2,\nAVX512VPOPCNTDQ, AVX512BITALG, AVX512VNNI, VPCLMULQDQ, VAES,\nPCONFIG <big>and</big> WBNOINVD <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>cascadelake</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nCascadelake</big> CPU <big>with 64-bit extensions,</big>\nMOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,\nPKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI,\nBMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC,\nXSAVES, AVX512F, CLWB, AVX512VL, AVX512BW, AVX512DQ,\nAVX512CD <big>and</big> AVX512VNNI <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>cooperlake</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\ncooperlake</big> CPU <big>with 64-bit extensions,</big>\nMOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,\nPKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI,\nBMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC,\nXSAVES, AVX512F, CLWB, AVX512VL, AVX512BW, AVX512DQ,\nAVX512CD, AVX512VNNI <big>and</big> AVX512BF16\n<big>instruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>tigerlake</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nTigerlake</big> CPU <big>with 64-bit extensions,</big>\nMOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,\nPKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI,\nBMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC,\nXSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD,\nAVX512VBMI, AVX512IFMA, SHA, CLWB, UMIP, RDPID, GFNI,\nAVX512VBMI2, AVX512VPOPCNTDQ, AVX512BITALG, AVX512VNNI,\nVPCLMULQDQ, VAES, PCONFIG, WBNOINVD, MOVDIRI, MOVDIR64B,\nAVX512VP2INTERSECT <big>and</big> KEYLOCKER <big>instruction\nset support.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sapphirerapids</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nsapphirerapids</big> CPU <big>with 64-bit extensions,</big>\nMOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,\nCX16, SAHF, FXSR, AVX, XSAVE, PCLMUL, FSGSBASE, RDRND, F16C,\nAVX2, BMI, BMI2, LZCNT, FMA, MOVBE, HLE, RDSEED, ADCX,\nPREFETCHW, AES, CLFLUSHOPT, XSAVEC, XSAVES, SGX, AVX512F,\nAVX512VL, AVX512BW, AVX512DQ, AVX512CD, PKU, AVX512VBMI,\nAVX512IFMA, SHA, AVX512VNNI, GFNI, VAES, AVX512VBMI2\nVPCLMULQDQ, AVX512BITALG, RDPID, AVX512VPOPCNTDQ, PCONFIG,\nWBNOINVD, CLWB, MOVDIRI, MOVDIR64B, AVX512VP2INTERSECT,\nENQCMD, CLDEMOTE, PTWRITE, WAITPKG, SERIALIZE, TSXLDTRK,\nUINTR, AMX-BF16, <big>AMX-TILE,</big> AMX-INT8,\n<big>AVX-VNNI and</big> AVX512BF16 <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>alderlake</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nAlderlake</big> CPU <big>with 64-bit extensions,</big>\nMOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,\nAES, PREFETCHW, PCLMUL, RDRND, XSAVE, XSAVEC, XSAVES,\nXSAVEOPT, FSGSBASE, PTWRITE, RDPID, SGX, UMIP,\n<big>GFNI-SSE,</big> CLWB, MOVDIRI, MOVDIR64B, CLDEMOTE,\nWAITPKG, ADCX, AVX, AVX2, BMI, BMI2, F16C, FMA, LZCNT,\nPCONFIG, PKU, VAES, VPCLMULQDQ, SERIALIZE, HRESET, KL,\nWIDEKL <big>and AVX-VNNI instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>rocketlake</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Intel\nRocketlake</big> CPU <big>with 64-bit extensions,</big>\nMOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT,\nPKU, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI,\nBMI2, F16C, RDSEED, ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC,\nXSAVES, AVX512F, AVX512VL, AVX512BW, AVX512DQ, AVX512CD,\nAVX512VBMI, AVX512IFMA, SHA, CLWB, UMIP, RDPID, GFNI,\nAVX512VBMI2, AVX512VPOPCNTDQ, AVX512BITALG, AVX512VNNI,\nVPCLMULQDQ, VAES <big>instruction set\nsupport.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>k6</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p><big><big>AMD K6 CPU <big>with</big> MMX\n<big>instruction set support.</big></big></big></p></td>\n<td width=\"9%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>k6-2 <br>\nk6-3</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Improved\nversions of</big> AMD K6 CPU <big>with</big> MMX <big>and\n3DNow! instruction set support.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>athlon <br>\nathlon-tbird</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>AMD <big>Athlon</big>\nCPU <big>with</big> MMX, <big>3dNOW!, enhanced 3DNow!\nand</big> SSE <big>prefetch instructions\nsupport.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>athlon-4 <br>\nathlon-xp <br>\nathlon-mp</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Improved</big>\nAMD <big>Athlon</big> CPU <big>with</big> MMX, <big>3DNow!,\nenhanced 3DNow! and full</big> SSE <big>instruction set\nsupport.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>k8</b></big></big></big></p></td>\n<td width=\"80%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>opteron <br>\nathlon64 <br>\nathlon-fx</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Processors based\non the</big> AMD K8 <big>core with x86-64 instruction set\nsupport, including the</big> AMD <big>Opteron, Athlon 64,\nand Athlon 64</big> FX <big>processors. (This\nsupersets</big> MMX, SSE, SSE2, <big>3DNow!, enhanced 3DNow!\nand 64-bit instruction set\nextensions.)</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>k8-sse3 <br>\nopteron-sse3 <br>\nathlon64-sse3</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Improved\nversions of</big> AMD K8 <big>cores with</big> SSE3\n<big>instruction set support.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>amdfam10 <br>\nbarcelona</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>CPUs based\non</big> AMD <big>Family 10h cores with x86-64 instruction\nset support. (This supersets</big> MMX, SSE, SSE2, SSE3,\nSSE4A, <big>3DNow!, enhanced 3DNow!,</big> ABM <big>and\n64-bit instruction set extensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>bdver1</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>CPUs based\non</big> AMD <big>Family 15h cores with x86-64 instruction\nset support. (This supersets</big> FMA4, AVX, XOP, LWP, AES,\nPCLMUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1,\nSSE4.2, ABM <big>and 64-bit instruction set\nextensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>bdver2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>AMD <big>Family 15h\ncore based CPUs with x86-64 instruction set support. (This\nsupersets</big> BMI, TBM, F16C, FMA, FMA4, AVX, XOP, LWP,\nAES, PCLMUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3,\nSSE4.1, SSE4.2, ABM <big>and 64-bit instruction set\nextensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>bdver3</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>AMD <big>Family 15h\ncore based CPUs with x86-64 instruction set support. (This\nsupersets</big> BMI, TBM, F16C, FMA, FMA4, FSGSBASE, AVX,\nXOP, LWP, AES, PCLMUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A,\nSSSE3, SSE4.1, SSE4.2, ABM <big>and 64-bit instruction set\nextensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>bdver4</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>AMD <big>Family 15h\ncore based CPUs with x86-64 instruction set support. (This\nsupersets</big> BMI, BMI2, TBM, F16C, FMA, FMA4, FSGSBASE,\nAVX, AVX2, XOP, LWP, AES, PCLMUL, CX16, MOVBE, MMX, SSE,\nSSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM <big>and\n64-bit instruction set extensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>znver1</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>AMD <big>Family 17h\ncore based CPUs with x86-64 instruction set support. (This\nsupersets</big> BMI, BMI2, F16C, FMA, FSGSBASE, AVX, AVX2,\nADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCLMUL, CX16, MOVBE,\nMMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM,\nXSAVEC, XSAVES, CLFLUSHOPT, POPCNT, <big>and 64-bit\ninstruction set extensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>znver2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>AMD <big>Family 17h\ncore based CPUs with x86-64 instruction set support. (This\nsupersets</big> BMI, BMI2, CLWB, F16C, FMA, FSGSBASE, AVX,\nAVX2, ADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCLMUL, CX16,\nMOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2,\nABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, RDPID, WBNOINVD,\n<big>and 64-bit instruction set\nextensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>znver3</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>AMD <big>Family 19h\ncore based CPUs with x86-64 instruction set support. (This\nsupersets</big> BMI, BMI2, CLWB, F16C, FMA, FSGSBASE, AVX,\nAVX2, ADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCLMUL, CX16,\nMOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2,\nABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, RDPID, WBNOINVD,\nPKU, VPCLMULQDQ, VAES, <big>and 64-bit instruction set\nextensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>btver1</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>CPUs based\non</big> AMD <big>Family 14h cores with x86-64 instruction\nset support. (This supersets</big> MMX, SSE, SSE2, SSE3,\nSSSE3, SSE4A, CX16, ABM <big>and 64-bit instruction set\nextensions.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>btver2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>CPUs based\non</big> AMD <big>Family 16h cores with x86-64 instruction\nset support. This includes</big> MOVBE, F16C, BMI, AVX,\nPCLMUL, AES, SSE4.2, SSE4.1, CX16, ABM, SSE4A, SSSE3, SSE3,\nSSE2, SSE, MMX <big>and 64-bit instruction set\nextensions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>winchip-c6</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>IDT <big>WinChip\nC6</big> CPU, <big>dealt in same way as i486 with\nadditional</big> MMX <big>instruction set\nsupport.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>winchip2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>IDT <big>WinChip\n2</big> CPU, <big>dealt in same way as i486 with\nadditional</big> MMX <big>and 3DNow! instruction set\nsupport.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>c3</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big>VIA C3 CPU <big>with</big> MMX <big>and 3DNow!\ninstruction set support. (No scheduling is implemented for\nthis chip.)</big></big></big></p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>c3-2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA C3-2\n<big>(Nehemiah/C5XL)</big> CPU <big>with</big> MMX\n<big>and</big> SSE <big>instruction set support. (No\nscheduling is implemented for this\nchip.)</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p><big><big><big><b>c7</b></big></big></big></p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big>VIA C7 <big>(Esther)</big> CPU <big>with</big>\nMMX, SSE, SSE2 <big>and</big> SSE3 <big>instruction set\nsupport. (No scheduling is implemented for this\nchip.)</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>samuel-2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Eden Samuel\n2</big> CPU <big>with</big> MMX <big>and 3DNow! instruction\nset support. (No scheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nehemiah</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Eden\nNehemiah</big> CPU <big>with</big> MMX <big>and</big> SSE\n<big>instruction set support. (No scheduling is implemented\nfor this chip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>esther</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Eden\nEsther</big> CPU <big>with</big> MMX, SSE, SSE2\n<big>and</big> SSE3 <big>instruction set support. (No\nscheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>eden-x2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Eden\nX2</big> CPU <big>with x86-64,</big> MMX, SSE, SSE2\n<big>and</big> SSE3 <big>instruction set support. (No\nscheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>eden-x4</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Eden\nX4</big> CPU <big>with x86-64,</big> MMX, SSE, SSE2, SSE3,\nSSSE3, SSE4.1, SSE4.2, AVX <big>and</big> AVX2\n<big>instruction set support. (No scheduling is implemented\nfor this chip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nano</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Generic</big>\nVIA <big>Nano</big> CPU <big>with x86-64,</big> MMX, SSE,\nSSE2, SSE3 <big>and</big> SSSE3 <big>instruction set\nsupport. (No scheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nano-1000</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Nano\n1xxx</big> CPU <big>with x86-64,</big> MMX, SSE, SSE2, SSE3\n<big>and</big> SSSE3 <big>instruction set support. (No\nscheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nano-2000</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Nano\n2xxx</big> CPU <big>with x86-64,</big> MMX, SSE, SSE2, SSE3\n<big>and</big> SSSE3 <big>instruction set support. (No\nscheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nano-3000</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Nano\n3xxx</big> CPU <big>with x86-64,</big> MMX, SSE, SSE2, SSE3,\nSSSE3 <big>and</big> SSE4.1 <big>instruction set support.\n(No scheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nano-x2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Nano Dual\nCore</big> CPU <big>with x86-64,</big> MMX, SSE, SSE2, SSE3,\nSSSE3 <big>and</big> SSE4.1 <big>instruction set support.\n(No scheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>nano-x4</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>VIA <big>Nano Quad\nCore</big> CPU <big>with x86-64,</big> MMX, SSE, SSE2, SSE3,\nSSSE3 <big>and</big> SSE4.1 <big>instruction set support.\n(No scheduling is implemented for this\nchip.)</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>geode</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>AMD <big>Geode\nembedded processor with</big> MMX <big>and 3DNow!\ninstruction set support.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Tune to\n<i>cpu-type</i> everything applicable about the generated\ncode, except for the</big> ABI <big>and the set of available\ninstructions. While picking a specific <i>cpu-type</i>\nschedules things appropriately for that particular chip, the\ncompiler does not generate any code that cannot run on the\ndefault machine type unless you use a\n<b>-march=</b><i>cpu-type</i> option. For example, if</big>\nGCC <big>is configured for i686-pc-linux-gnu then\n<b>-mtune=pentium4</b> generates code that is tuned for\nPentium 4 but still runs on i686\nmachines.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nchoices for <i>cpu-type</i> are the same as for\n<b>-march</b>. In addition, <b>-mtune</b> supports 2 extra\nchoices for <i>cpu-type</i>: <b><br>\ngeneric</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Produce code\noptimized for the most common</big> IA32/AMD64/EM64T\n<big>processors. If you know the</big> CPU <big>on which\nyour code will run, then you should use the corresponding\n<b>-mtune</b> or <b>-march</b> option instead of\n<b>-mtune=generic</b>. But, if you do not know exactly\nwhat</big> CPU <big>users of your application will have,\nthen you should use this option.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>As\nnew processors are deployed in the marketplace, the behavior\nof this option will change. Therefore, if you upgrade to a\nnewer version of</big> GCC, <big>code generation controlled\nby this option will change to reflect the processors that\nare most common at the time that version of</big> GCC\n<big>is released.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>There\nis no <b>-march=generic</b> option because <b>-march</b>\nindicates the instruction set the compiler can use, and\nthere is no generic instruction set applicable to all\nprocessors. In contrast, <b>-mtune</b> indicates the\nprocessor (or, in this case, collection of processors) for\nwhich the code is optimized.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>intel</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Produce code\noptimized for the most current Intel processors, which are\nHaswell and Silvermont for this version of</big> GCC.\n<big>If you know the</big> CPU <big>on which your code will\nrun, then you should use the corresponding <b>-mtune</b> or\n<b>-march</b> option instead of <b>-mtune=intel</b>. But, if\nyou want your application performs better on both Haswell\nand Silvermont, then you should use this\noption.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>As\nnew Intel processors are deployed in the marketplace, the\nbehavior of this option will change. Therefore, if you\nupgrade to a newer version of</big> GCC, <big>code\ngeneration controlled by this option will change to reflect\nthe most current Intel processors at the time that version\nof</big> GCC <big>is released.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>There\nis no <b>-march=intel</b> option because <b>-march</b>\nindicates the instruction set the compiler can use, and\nthere is no common instruction set applicable to all\nprocessors. In contrast, <b>-mtune</b> indicates the\nprocessor (or, in this case, collection of processors) for\nwhich the code is optimized.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcpu=</b><i>cpu-type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>A deprecated\nsynonym for <b>-mtune</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfpmath=</b><i>unit</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate\nfloating-point arithmetic for selected unit <i>unit</i>. The\nchoices for <i>unit</i> are:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>387</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p><big><big><big>Use the standard 387 floating-point\ncoprocessor present on the majority of chips and emulated\notherwise. Code compiled with this option runs almost\neverywhere. The temporary results are computed in 80-bit\nprecision instead of the precision specified by the type,\nresulting in slightly different results compared to most of\nother chips. See <b>-ffloat-store</b> for more detailed\ndescription.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>This\nis the default choice for non-Darwin x86-32\ntargets.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big><b>sse</b></big></big></big></p> </td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>Use scalar\nfloating-point instructions present in the</big> SSE\n<big>instruction set. This instruction set is supported by\nPentium</big> III <big>and newer chips, and in the</big> AMD\n<big>line by Athlon-4, Athlon</big> XP <big>and Athlon</big>\nMP <big>chips. The earlier version of the</big> SSE\n<big>instruction set supports only single-precision\narithmetic, thus the double and extended-precision\narithmetic are still done using 387. A later version,\npresent only in Pentium 4 and</big> AMD <big>x86-64 chips,\nsupports double-precision arithmetic\ntoo.</big></big></big></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>For\nthe x86-32 compiler, you must use\n<b>-march=</b><i>cpu-type</i>, <b>-msse</b> or <b>-msse2</b>\nswitches to enable</big> SSE <big>extensions and make this\noption effective. For the x86-64 compiler, these extensions\nare enabled by default.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>The\nresulting code should be considerably faster in the majority\nof cases and avoid the numerical instability problems of 387\ncode, but may break some existing code that expects\ntemporaries to be 80 bits.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>This\nis the default choice for the x86-64 compiler, Darwin x86-32\ntargets, and the default choice for x86-32 targets with\nthe</big> SSE2 <big>instruction set when <b>-ffast-math</b>\nis enabled.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sse,387 <br>\nsse+387 <br>\nboth</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Attempt to\nutilize both instruction sets at once. This effectively\ndoubles the amount of available registers, and on chips with\nseparate execution units for 387 and</big> SSE <big>the\nexecution resources too. Use this option with care, as it is\nstill experimental, because the</big> GCC <big>register\nallocator does not model separate functional units well,\nresulting in unstable performance.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-masm=</b><i>dialect</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Output assembly\ninstructions using selected <i>dialect</i>. Also affects\nwhich dialect is used for basic &quot;asm&quot; and extended\n&quot;asm&quot;. Supported choices (in dialect order) are\n<b>att</b> or <b>intel</b>. The default is <b>att</b>.\nDarwin does not support <b>intel</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mieee-fp\n<br>\n-mno-ieee-fp</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control whether\nor not the compiler uses</big> IEEE <big>floating-point\ncomparisons. These correctly handle the case where the\nresult of a comparison is unordered.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m80387 <br>\n-mhard-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\ncontaining 80387 instructions for floating\npoint.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-80387\n<br>\n-msoft-float</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate output\ncontaining library calls for floating\npoint.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nthe requisite libraries are not part of</big> GCC.\n<big>Normally the facilities of the machine&rsquo;s usual C\ncompiler are used, but this cannot be done directly in\ncross-compilation. You must make your own arrangements to\nprovide suitable library functions for\ncross-compilation.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nmachines where a function returns floating-point results in\nthe 80387 register stack, some floating-point opcodes may be\nemitted even if <b>-msoft-float</b> is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-fp-ret-in-387</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use\nthe</big> FPU <big>registers for return values of\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nusual calling convention has functions return values of\ntypes &quot;float&quot; and &quot;double&quot; in an</big>\nFPU <big>register, even if there is no</big> FPU. <big>The\nidea is that the operating system should emulate an</big>\nFPU.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\noption <b>-mno-fp-ret-in-387</b> causes such values to be\nreturned in ordinary</big> CPU <big>registers\ninstead.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-fancy-math-387</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Some 387\nemulators do not support the &quot;sin&quot;,\n&quot;cos&quot; and &quot;sqrt&quot; instructions for the\n387. Specify this option to avoid generating those\ninstructions. This option is overridden when <b>-march</b>\nindicates that the target</big> CPU <big>always has an</big>\nFPU <big>and so the instruction does not need emulation.\nThese instructions are not generated unless you also use the\n<b>-funsafe-math-optimizations</b>\nswitch.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malign-double\n<br>\n-mno-align-double</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control\nwhether</big> GCC <big>aligns &quot;double&quot;, &quot;long\ndouble&quot;, and &quot;long long&quot; variables on a\ntwo-word boundary or a one-word boundary. Aligning\n&quot;double&quot; variables on a two-word boundary produces\ncode that runs somewhat faster on a Pentium at the expense\nof more memory.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nx86-64, <b>-malign-double</b> is enabled by\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nif you use the <b>-malign-double</b> switch, structures\ncontaining the above types are aligned differently than the\npublished application binary interface specifications for\nthe x86-32 and are not binary compatible with structures in\ncode compiled without that switch.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m96bit-long-double\n<br>\n-m128bit-long-double</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These switches\ncontrol the size of &quot;long double&quot; type. The x86-32\napplication binary interface specifies the size to be 96\nbits, so <b>-m96bit-long-double</b> is the default in 32-bit\nmode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Modern\narchitectures (Pentium and newer) prefer &quot;long\ndouble&quot; to be aligned to an 8- or 16-byte boundary. In\narrays or structures conforming to the</big> ABI, <big>this\nis not possible. So specifying <b>-m128bit-long-double</b>\naligns &quot;long double&quot; to a 16-byte boundary by\npadding the &quot;long double&quot; with an additional\n32-bit zero.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nthe x86-64 compiler, <b>-m128bit-long-double</b> is the\ndefault choice as its</big> ABI <big>specifies that\n&quot;long double&quot; is aligned on 16-byte\nboundary.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Notice\nthat neither of these options enable any extra precision\nover the x87 standard of 80 bits for a &quot;long\ndouble&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nif you override the default value for your target</big> ABI,\n<big>this changes the size of structures and arrays\ncontaining &quot;long double&quot; variables, as well as\nmodifying the function calling convention for functions\ntaking &quot;long double&quot;. Hence they are not\nbinary-compatible with code compiled without that\nswitch.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlong-double-64\n<br>\n-mlong-double-80 <br>\n-mlong-double-128</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These switches\ncontrol the size of &quot;long double&quot; type. A size of\n64 bits makes the &quot;long double&quot; type equivalent to\nthe &quot;double&quot; type. This is the default for 32-bit\nBionic C library. A size of 128 bits makes the &quot;long\ndouble&quot; type equivalent to the &quot;__float128&quot;\ntype. This is the default for 64-bit Bionic C\nlibrary.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nif you override the default value for your target</big> ABI,\n<big>this changes the size of structures and arrays\ncontaining &quot;long double&quot; variables, as well as\nmodifying the function calling convention for functions\ntaking &quot;long double&quot;. Hence they are not\nbinary-compatible with code compiled without that\nswitch.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-malign-data=</b><i>type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control\nhow</big> GCC <big>aligns variables. Supported values for\n<i>type</i> are <b>compat</b> uses increased alignment value\ncompatible uses</big> GCC 4.8 <big>and earlier, <b>abi</b>\nuses alignment value as specified by the psABI, and\n<b>cacheline</b> uses increased alignment value to match the\ncache line size. <b>compat</b> is the\ndefault.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlarge-data-threshold=</b><i>threshold</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When\n<b>-mcmodel=medium</b> is specified, data objects larger\nthan <i>threshold</i> are placed in the large data section.\nThis value must be the same across all objects linked into\nthe binary, and defaults to 65535.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrtd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use a different\nfunction-calling convention, in which functions that take a\nfixed number of arguments return with the &quot;ret\n<i>num</i>&quot; instruction, which pops their arguments\nwhile returning. This saves one instruction in the caller\nsince there is no need to pop the arguments\nthere.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>You\ncan specify that an individual function is called with this\ncalling sequence with the function attribute\n&quot;stdcall&quot;. You can also override the <b>-mrtd</b>\noption by using the function attribute\n&quot;cdecl&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nthis calling convention is incompatible with the one\nnormally used on Unix, so you cannot use it if you need to\ncall libraries compiled with the Unix\ncompiler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Also,\nyou must provide function prototypes for all functions that\ntake variable numbers of arguments (including\n&quot;printf&quot;); otherwise incorrect code is generated\nfor calls to those functions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition, seriously incorrect code results if you call a\nfunction with too many arguments. (Normally, extra arguments\nare harmlessly ignored.)</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mregparm=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Control how many\nregisters are used to pass integer arguments. By default, no\nregisters are used to pass arguments, and at most 3\nregisters can be used. You can control this behavior for a\nspecific function by using the function attribute\n&quot;regparm&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nif you use this switch, and <i>num</i> is nonzero, then you\nmust build all modules with the same value, including any\nlibraries. This includes the system libraries and startup\nmodules.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msseregparm</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use</big> SSE\n<big>register passing conventions for float and double\narguments and return values. You can control this behavior\nfor a specific function by using the function attribute\n&quot;sseregparm&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nif you use this switch then you must build all modules with\nthe same value, including any libraries. This includes the\nsystem libraries and startup modules.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvect8-ret-in-mem</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Return 8-byte\nvectors in memory instead of</big> MMX <big>registers. This\nis the default on VxWorks to match the</big> ABI <big>of the\nSun Studio compilers until version 12. <i>Only</i> use this\noption if you need to remain compatible with existing code\nproduced by those previous compiler versions or older\nversions of</big> GCC.</big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mpc32 <br>\n-mpc64 <br>\n-mpc80</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set 80387\nfloating-point precision to 32, 64 or 80 bits. When\n<b>-mpc32</b> is specified, the significands of results of\nfloating-point operations are rounded to 24 bits (single\nprecision); <b>-mpc64</b> rounds the significands of results\nof floating-point operations to 53 bits (double precision)\nand <b>-mpc80</b> rounds the significands of results of\nfloating-point operations to 64 bits (extended double\nprecision), which is the default. When this option is used,\nfloating-point operations in higher precisions are not\navailable to the programmer without setting the</big> FPU\n<big>control word explicitly.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Setting\nthe rounding of floating-point operations to less than the\ndefault 80 bits can speed some programs by 2% or more. Note\nthat some mathematical libraries assume that\nextended-precision (80-bit) floating-point operations are\nenabled by default; routines in such libraries could suffer\nsignificant loss of accuracy, typically through so-called\n&quot;catastrophic cancellation&quot;, when this option is\nused to set the precision to less than extended\nprecision.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstackrealign</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Realign the\nstack at entry. On the x86, the <b>-mstackrealign</b> option\ngenerates an alternate prologue and epilogue that realigns\nthe run-time stack if necessary. This supports mixing legacy\ncodes that keep 4-byte stack alignment with modern codes\nthat keep 16-byte stack alignment for</big> SSE\n<big>compatibility. See also the attribute\n&quot;force_align_arg_pointer&quot;, applicable to\nindividual functions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpreferred-stack-boundary=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Attempt to keep\nthe stack boundary aligned to a 2 raised to <i>num</i> byte\nboundary. If <b>-mpreferred-stack-boundary</b> is not\nspecified, the default is 4 (16 bytes or 128\nbits).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nWhen generating code for the x86-64 architecture with</big>\nSSE <big>extensions disabled,\n<b>-mpreferred-stack-boundary=3</b> can be used to keep the\nstack boundary aligned to 8 byte boundary. Since\nx86-64</big> ABI <big>require 16 byte stack alignment, this\nis</big> ABI <big>incompatible and intended to be used in\ncontrolled environment where stack space is important\nlimitation. This option leads to wrong code when functions\ncompiled with 16 byte stack alignment (such as functions\nfrom a standard library) are called with misaligned stack.\nIn this case,</big> SSE <big>instructions may lead to\nmisaligned memory access traps. In addition, variable\narguments are handled incorrectly for 16 byte aligned\nobjects (including x87 long double and __int128), leading to\nwrong results. You must build all modules with\n<b>-mpreferred-stack-boundary=3</b>, including any\nlibraries. This includes the system libraries and startup\nmodules.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mincoming-stack-boundary=</b><i>num</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Assume the\nincoming stack is aligned to a 2 raised to <i>num</i> byte\nboundary. If <b>-mincoming-stack-boundary</b> is not\nspecified, the one specified by\n<b>-mpreferred-stack-boundary</b> is\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>On\nPentium and Pentium Pro, &quot;double&quot; and &quot;long\ndouble&quot; values should be aligned to an 8-byte boundary\n(see <b>-malign-double</b>) or suffer significant run time\nperformance penalties. On Pentium</big> III, <big>the\nStreaming</big> SIMD <big>Extension (</big> SSE <big>) data\ntype &quot;__m128&quot; may not work properly if it is not\n16-byte aligned.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\nensure proper alignment of this values on the stack, the\nstack boundary must be as aligned as that required by any\nvalue stored on the stack. Further, every function must be\ngenerated such that it keeps the stack aligned. Thus calling\na function compiled with a higher preferred stack boundary\nfrom a function compiled with a lower preferred stack\nboundary most likely misaligns the stack. It is recommended\nthat libraries that use callbacks always use the default\nsetting.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nextra alignment does consume extra stack space, and\ngenerally increases code size. Code that is sensitive to\nstack space usage, such as embedded systems and operating\nsystem kernels, may want to reduce the preferred alignment\nto\n<b>-mpreferred-stack-boundary=2</b>.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmmx <br>\n-msse <br>\n-msse2 <br>\n-msse3 <br>\n-mssse3 <br>\n-msse4 <br>\n-msse4a <br>\n-msse4.1 <br>\n-msse4.2 <br>\n-mavx <br>\n-mavx2 <br>\n-mavx512f <br>\n-mavx512pf <br>\n-mavx512er <br>\n-mavx512cd <br>\n-mavx512vl <br>\n-mavx512bw <br>\n-mavx512dq <br>\n-mavx512ifma <br>\n-mavx512vbmi <br>\n-msha <br>\n-maes <br>\n-mpclmul <br>\n-mclflushopt <br>\n-mclwb <br>\n-mfsgsbase <br>\n-mptwrite <br>\n-mrdrnd <br>\n-mf16c <br>\n-mfma <br>\n-mpconfig <br>\n-mwbnoinvd <br>\n-mfma4 <br>\n-mprfchw <br>\n-mrdpid <br>\n-mprefetchwt1 <br>\n-mrdseed <br>\n-msgx <br>\n-mxop <br>\n-mlwp <br>\n-m3dnow <br>\n-m3dnowa <br>\n-mpopcnt <br>\n-mabm <br>\n-madx <br>\n-mbmi <br>\n-mbmi2 <br>\n-mlzcnt <br>\n-mfxsr <br>\n-mxsave <br>\n-mxsaveopt <br>\n-mxsavec <br>\n-mxsaves <br>\n-mrtm <br>\n-mhle <br>\n-mtbm <br>\n-mmwaitx <br>\n-mclzero <br>\n-mpku <br>\n-mavx512vbmi2 <br>\n-mavx512bf16 <br>\n-mgfni <br>\n-mvaes <br>\n-mwaitpkg <br>\n-mvpclmulqdq <br>\n-mavx512bitalg <br>\n-mmovdiri <br>\n-mmovdir64b <br>\n-menqcmd <br>\n-muintr <br>\n-mtsxldtrk <br>\n-mavx512vpopcntdq <br>\n-mavx512vp2intersect <br>\n-mavx5124fmaps <br>\n-mavx512vnni <br>\n-mavxvnni <br>\n-mavx5124vnniw <br>\n-mcldemote <br>\n-mserialize <br>\n-mamx-tile <br>\n-mamx-int8 <br>\n-mamx-bf16 <br>\n-mhreset <br>\n-mkl <br>\n-mwidekl</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These switches\nenable the use of instructions in the</big> MMX, SSE, SSE2,\nSSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2,\nAVX512F, AVX512PF, AVX512ER, AVX512CD, AVX512VL, AVX512BW,\nAVX512DQ, AVX512IFMA, AVX512VBMI, SHA, AES, PCLMUL,\nCLFLUSHOPT, CLWB, FSGSBASE, PTWRITE, RDRND, F16C, FMA,\nPCONFIG, WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1,\nRDSEED, SGX, XOP, LWP, <big>3DNow!, enhanced 3DNow!,</big>\nPOPCNT, ABM, ADX, BMI, BMI2, LZCNT, FXSR, XSAVE, XSAVEOPT,\nXSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU,\nAVX512VBMI2, GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG,\nMOVDIRI, MOVDIR64B, AVX512BF16, ENQCMD, AVX512VPOPCNTDQ,\nAVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE, UINTR,\nHRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI\n<big>or</big> CLDEMOTE <big>extended instruction sets. Each\nhas a corresponding <b>-mno-</b> option to disable use of\nthese instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>These\nextensions are also available as built-in functions: see\n<b>x86 Built-in Functions</b>, for details of the functions\nenabled and disabled by these\nswitches.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>To\ngenerate</big> SSE/SSE2 <big>instructions automatically from\nfloating-point code (as opposed to 387 instructions), see\n<b>-mfpmath=sse</b>.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>depresses SSEx instructions when <b>-mavx</b> is used.\nInstead, it generates new</big> AVX <big>instructions\nor</big> AVX <big>equivalence for all SSEx instructions when\nneeded.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>These\noptions enable</big> GCC <big>to use these extended\ninstructions in generated code, even without\n<b>-mfpmath=sse</b>. Applications that perform\nrun-time</big> CPU <big>detection must compile separate\nfiles for each supported architecture, using the appropriate\nflags. In particular, the file containing the</big> CPU\n<big>detection code should be compiled without these\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdump-tune-features</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs</big> GCC <big>to dump the names of the x86\nperformance tuning features and default settings. The names\ncan be used in\n<b>-mtune-ctrl=</b><i>feature-list</i>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtune-ctrl=</b><i>feature-list</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\nused to do fine grain control of x86 code generation\nfeatures. <i>feature-list</i> is a comma separated list of\n<i>feature</i> names. See also <b>-mdump-tune-features</b>.\nWhen specified, the <i>feature</i> is turned on if it is not\npreceded with <b>^</b>, otherwise, it is turned off.\n<b>-mtune-ctrl=</b><i>feature-list</i> is intended to be\nused by</big> GCC <big>developers. Using it may lead to code\npaths not covered by testing and can potentially result in\ncompiler ICEs or runtime errors.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-default</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs</big> GCC <big>to turn off all tunable features.\nSee also <b>-mtune-ctrl=</b><i>feature-list</i> and\n<b>-mdump-tune-features</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcld</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs</big> GCC <big>to emit a &quot;cld&quot;\ninstruction in the prologue of functions that use string\ninstructions. String instructions depend on the</big> DF\n<big>flag to select between autoincrement or autodecrement\nmode. While the</big> ABI <big>specifies the</big> DF\n<big>flag to be cleared on function entry, some operating\nsystems violate this specification by not clearing the</big>\nDF <big>flag in their exception dispatchers. The exception\nhandler can be invoked with the</big> DF <big>flag set,\nwhich leads to wrong direction mode when string instructions\nare used. This option can be enabled by default on 32-bit\nx86 targets by configuring</big> GCC <big>with the\n<b>--enable-cld</b> configure option. Generation of\n&quot;cld&quot; instructions can be suppressed with the\n<b>-mno-cld</b> compiler option in this\ncase.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mvzeroupper</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs</big> GCC <big>to emit a &quot;vzeroupper&quot;\ninstruction before a transfer of control flow out of the\nfunction to minimize the</big> AVX <big>to</big> SSE\n<big>transition penalty as well as remove unnecessary\n&quot;zeroupper&quot; intrinsics.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprefer-avx128</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs</big> GCC <big>to use 128-bit</big> AVX\n<big>instructions instead of 256-bit</big> AVX\n<big>instructions in the\nauto-vectorizer.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mprefer-vector-width=</b><i>opt</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ninstructs</big> GCC <big>to use <i>opt</i>-bit vector width\nin instructions instead of default on the selected platform.\n<b><br>\nnone</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>No extra\nlimitations applied to</big> GCC <big>other than defined by\nthe selected platform.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>128</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"69%\">\n\n\n<p><big><big><big>Prefer 128-bit vector width for\ninstructions.</big></big></big></p> </td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>256</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"69%\">\n\n\n<p><big><big><big>Prefer 256-bit vector width for\ninstructions.</big></big></big></p> </td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>512</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"69%\">\n\n\n<p><big><big><big>Prefer 512-bit vector width for\ninstructions.</big></big></big></p> </td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcx16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables</big> GCC <big>to generate &quot;CMPXCHG16B&quot;\ninstructions in 64-bit code to implement\ncompare-and-exchange operations on 16-byte aligned 128-bit\nobjects. This is useful for atomic updates of data\nstructures exceeding one machine word in size. The compiler\nuses this instruction to implement <b>__sync Builtins</b>.\nHowever, for <b>__atomic Builtins</b> operating on 128-bit\nintegers, a library call is always\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msahf</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables generation of &quot;SAHF&quot; instructions in\n64-bit code. Early Intel Pentium 4 CPUs with Intel 64\nsupport, prior to the introduction of Pentium 4 G1 step in\nDecember 2005, lacked the &quot;LAHF&quot; and\n&quot;SAHF&quot; instructions which are supported by</big>\nAMD64. <big>These are load and store instructions,\nrespectively, for certain status flags. In 64-bit mode, the\n&quot;SAHF&quot; instruction is used to optimize\n&quot;fmod&quot;, &quot;drem&quot;, and\n&quot;remainder&quot; built-in functions; see <b>Other\nBuiltins</b> for details.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmovbe</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables use of the &quot;movbe&quot; instruction to\nimplement &quot;__builtin_bswap32&quot; and\n&quot;__builtin_bswap64&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mshstk</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The\n<b>-mshstk</b> option enables shadow stack built-in\nfunctions from x86 Control-flow Enforcement Technology\n(</big> CET <big>).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcrc32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables built-in functions\n&quot;__builtin_ia32_crc32qi&quot;,\n&quot;__builtin_ia32_crc32hi&quot;,\n&quot;__builtin_ia32_crc32si&quot; and\n&quot;__builtin_ia32_crc32di&quot; to generate the\n&quot;crc32&quot; machine instruction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmwait</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables built-in functions\n&quot;__builtin_ia32_monitor&quot;, and\n&quot;__builtin_ia32_mwait&quot; to generate the\n&quot;monitor&quot; and &quot;mwait&quot; machine\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrecip</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nenables use of &quot;RCPSS&quot; and &quot;RSQRTSS&quot;\ninstructions (and their vectorized variants\n&quot;RCPPS&quot; and &quot;RSQRTPS&quot;) with an\nadditional Newton-Raphson step to increase precision instead\nof &quot;DIVSS&quot; and &quot;SQRTSS&quot; (and their\nvectorized variants) for single-precision floating-point\narguments. These instructions are generated only when\n<b>-funsafe-math-optimizations</b> is enabled together with\n<b>-ffinite-math-only</b> and <b>-fno-trapping-math</b>.\nNote that while the throughput of the sequence is higher\nthan the throughput of the non-reciprocal instruction, the\nprecision of the sequence can be decreased by up to 2 ulp\n(i.e. the inverse of 1.0 equals\n0.99999994).</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat</big> GCC <big>implements\n&quot;1.0f/sqrtf(<i>x</i>)&quot; in terms of\n&quot;RSQRTSS&quot; (or &quot;RSQRTPS&quot;) already with\n<b>-ffast-math</b> (or the above option combination), and\ndoesn&rsquo;t need <b>-mrecip</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Also\nnote that</big> GCC <big>emits the above sequence with\nadditional Newton-Raphson step for vectorized single-float\ndivision and vectorized &quot;sqrtf(<i>x</i>)&quot; already\nwith <b>-ffast-math</b> (or the above option combination),\nand doesn&rsquo;t need <b>-mrecip</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrecip=</b><i>opt</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\ncontrols which reciprocal estimate instructions may be used.\n<i>opt</i> is a comma-separated list of options, which may\nbe preceded by a <b>!</b> to invert the\noption:</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>all</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"51%\">\n\n\n<p><big><big><big>Enable all estimate\ninstructions.</big></big></big></p> </td>\n<td width=\"26%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>default</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\ndefault instructions, equivalent to\n<b>-mrecip</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>none</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Disable all\nestimate instructions, equivalent to\n<b>-mno-recip</b>.</big></big></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><big><big><big><b>div</b></big></big></big></p></td>\n<td width=\"1%\"></td>\n<td width=\"69%\">\n\n\n<p><big><big><big>Enable the approximation for scalar\ndivision.</big></big></big></p> </td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>vec-div</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\napproximation for vectorized division.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>sqrt</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\napproximation for scalar square root.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>vec-sqrt</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Enable the\napproximation for vectorized square\nroot.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>So,\nfor example, <b>-mrecip=all,!sqrt</b> enables all of the\nreciprocal approximations, except for square\nroot.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mveclibabi=</b><i>type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specifies\nthe</big> ABI <big>type to use for vectorizing intrinsics\nusing an external library. Supported values for <i>type</i>\nare <b>svml</b> for the Intel short vector math library and\n<b>acml</b> for the</big> AMD <big>math core library. To use\nthis option, both <b>-ftree-vectorize</b> and\n<b>-funsafe-math-optimizations</b> have to be enabled, and\nan</big> SVML <big>or</big> ACML <big>ABI-compatible library\nmust be specified at link time.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>GCC\n<big>currently emits calls to &quot;vmldExp2&quot;,\n&quot;vmldLn2&quot;, &quot;vmldLog102&quot;,\n&quot;vmldPow2&quot;, &quot;vmldTanh2&quot;,\n&quot;vmldTan2&quot;, &quot;vmldAtan2&quot;,\n&quot;vmldAtanh2&quot;, &quot;vmldCbrt2&quot;,\n&quot;vmldSinh2&quot;, &quot;vmldSin2&quot;,\n&quot;vmldAsinh2&quot;, &quot;vmldAsin2&quot;,\n&quot;vmldCosh2&quot;, &quot;vmldCos2&quot;,\n&quot;vmldAcosh2&quot;, &quot;vmldAcos2&quot;,\n&quot;vmlsExp4&quot;, &quot;vmlsLn4&quot;,\n&quot;vmlsLog104&quot;, &quot;vmlsPow4&quot;,\n&quot;vmlsTanh4&quot;, &quot;vmlsTan4&quot;,\n&quot;vmlsAtan4&quot;, &quot;vmlsAtanh4&quot;,\n&quot;vmlsCbrt4&quot;, &quot;vmlsSinh4&quot;,\n&quot;vmlsSin4&quot;, &quot;vmlsAsinh4&quot;,\n&quot;vmlsAsin4&quot;, &quot;vmlsCosh4&quot;,\n&quot;vmlsCos4&quot;, &quot;vmlsAcosh4&quot; and\n&quot;vmlsAcos4&quot; for corresponding function type when\n<b>-mveclibabi=svml</b> is used, and &quot;__vrd2_sin&quot;,\n&quot;__vrd2_cos&quot;, &quot;__vrd2_exp&quot;,\n&quot;__vrd2_log&quot;, &quot;__vrd2_log2&quot;,\n&quot;__vrd2_log10&quot;, &quot;__vrs4_sinf&quot;,\n&quot;__vrs4_cosf&quot;, &quot;__vrs4_expf&quot;,\n&quot;__vrs4_logf&quot;, &quot;__vrs4_log2f&quot;,\n&quot;__vrs4_log10f&quot; and &quot;__vrs4_powf&quot; for\nthe corresponding function type when <b>-mveclibabi=acml</b>\nis used.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the specified calling convention. Permissible values are\n<b>sysv</b> for the</big> ABI <big>used on GNU/Linux and\nother systems, and <b>ms</b> for the Microsoft</big> ABI.\n<big>The default is to use the Microsoft</big> ABI <big>when\ntargeting Microsoft Windows and the SysV</big> ABI <big>on\nall other systems. You can control this behavior for\nspecific functions by using the function attributes\n&quot;ms_abi&quot; and\n&quot;sysv_abi&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mforce-indirect-call</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force all calls\nto functions to be indirect. This is useful when using Intel\nProcessor Trace where it generates more precise timing\ninformation for function calls.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmanual-endbr</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Insert</big>\nENDBR <big>instruction at function entry only via the\n&quot;cf_check&quot; function attribute. This is useful when\nused with the option <b>-fcf-protection=branch</b> to\ncontrol</big> ENDBR <big>insertion at the function\nentry.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcall-ms2sysv-xlogues</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Due to\ndifferences in 64-bit ABIs, any Microsoft</big> ABI\n<big>function that calls a System V</big> ABI <big>function\nmust consider</big> RSI, RDI <big>and</big> XMM6-15 <big>as\nclobbered. By default, the code for saving and restoring\nthese registers is emitted inline, resulting in fairly\nlengthy prologues and epilogues. Using\n<b>-mcall-ms2sysv-xlogues</b> emits prologues and epilogues\nthat use stubs in the static portion of libgcc to perform\nthese saves and restores, thus reducing function size at the\ncost of a few extra instructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls-dialect=</b><i>type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code to\naccess thread-local storage using the <b>gnu</b> or\n<b>gnu2</b> conventions. <b>gnu</b> is the conservative\ndefault; <b>gnu2</b> is more efficient, but it may add\ncompile- and run-time requirements that cannot be satisfied\non all systems.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpush-args\n<br>\n-mno-push-args</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Use</big> PUSH\n<big>operations to store outgoing parameters. This method is\nshorter and usually equally fast as method using</big>\nSUB/MOV <big>operations and is enabled by default. In some\ncases disabling it may improve performance because of\nimproved scheduling and reduced\ndependencies.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maccumulate-outgoing-args</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If enabled, the\nmaximum amount of space required for outgoing arguments is\ncomputed in the function prologue. This is faster on most\nmodern CPUs because of reduced dependencies, improved\nscheduling and reduced stack usage when the preferred stack\nboundary is not equal to 2. The drawback is a notable\nincrease in code size. This switch implies\n<b>-mno-push-args</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mthreads</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Support\nthread-safe exception handling on MinGW. Programs that rely\non thread-safe exception handling must compile and link all\ncode with the <b>-mthreads</b> option. When compiling,\n<b>-mthreads</b> defines <b>-D_MT</b>; when linking, it\nlinks in a special thread helper library <b>-lmingwthrd</b>\nwhich cleans up per-thread exception-handling\ndata.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mms-bitfields\n<br>\n-mno-ms-bitfields</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable/disable\nbit-field layout compatible with the native Microsoft\nWindows compiler.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\n&quot;packed&quot; is used on a structure, or if bit-fields\nare used, it may be that the Microsoft</big> ABI <big>lays\nout the structure differently than the way</big> GCC\n<big>normally does. Particularly when moving packed data\nbetween functions compiled with</big> GCC <big>and the\nnative Microsoft compiler (either via function call or as\ndata in a file), it may be necessary to access either\nformat.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\noption is enabled by default for Microsoft Windows targets.\nThis behavior can also be controlled locally by use of\nvariable or type attributes. For more information, see\n<b>x86 Variable Attributes</b> and <b>x86 Type\nAttributes</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nMicrosoft structure layout algorithm is fairly simple with\nthe exception of the bit-field packing. The padding and\nalignment of members of structures and whether a bit-field\ncan straddle a storage-unit boundary are determine by these\nrules: <br>\n1. Structure members are stored sequentially in the order in\nwhich <br>\nthey are</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>declared: the\nfirst member has the lowest memory address and the last\nmember the highest.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>2. Every data\nobject has an alignment requirement. The alignment <br>\nrequirement</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>for all data\nexcept structures, unions, and arrays is either the size of\nthe object or the current packing size (specified with\neither the &quot;aligned&quot; attribute or the\n&quot;pack&quot; pragma), whichever is less. For structures,\nunions, and arrays, the alignment requirement is the largest\nalignment requirement of its members. Every object is\nallocated an offset so that:</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>offset\n% alignment_requirement == 0</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>3. Adjacent\nbit-fields are packed into the same 1-, 2-, or 4-byte <br>\nallocation</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>unit if the\nintegral types are the same size and if the next bit-field\nfits into the current allocation unit without crossing the\nboundary imposed by the common alignment requirements of the\nbit-fields.</big></big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>MSVC\n<big>interprets zero-length bit-fields in the following\nways: <br>\n1. If a zero-length bit-field is inserted between two\nbit-fields <br>\nthat</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>are normally\ncoalesced, the bit-fields are not\ncoalesced.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>For\nexample:</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>struct\n<br>\n{ <br>\nunsigned long bf_1 : 12; <br>\nunsigned long : 0; <br>\nunsigned long bf_2 : 12; <br>\n} t1;</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>The\nsize of &quot;t1&quot; is 8 bytes with the zero-length\nbit-field. If the zero-length bit-field were removed,\n&quot;t1&quot;&rsquo;s size would be 4\nbytes.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>2. If a\nzero-length bit-field is inserted after a bit-field,\n&quot;foo&quot;, <br>\nand the</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>alignment of the\nzero-length bit-field is greater than the member that\nfollows it, &quot;bar&quot;, &quot;bar&quot; is aligned as\nthe type of the zero-length bit-field.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>For\nexample:</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>struct\n<br>\n{ <br>\nchar foo : 4; <br>\nshort : 0; <br>\nchar bar; <br>\n} t2; <br>\nstruct <br>\n{ <br>\nchar foo : 4; <br>\nshort : 0; <br>\ndouble bar; <br>\n} t3;</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>For\n&quot;t2&quot;, &quot;bar&quot; is placed at offset 2,\nrather than offset 1. Accordingly, the size of\n&quot;t2&quot; is 4. For &quot;t3&quot;, the zero-length\nbit-field does not affect the alignment of &quot;bar&quot;\nor, as a result, the size of the\nstructure.</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>Taking\nthis into account, it is important to note the following:\n<br>\n1. If a zero-length bit-field follows a normal bit-field,\nthe <br>\ntype of the</big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>zero-length\nbit-field may affect the alignment of the structure as\nwhole. For example, &quot;t2&quot; has a size of 4 bytes,\nsince the zero-length bit-field follows a normal bit-field,\nand is of type short.</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>2. Even if a\nzero-length bit-field is not followed by a normal <br>\nbit-field, it may</big></big></big></p>\n\n<p style=\"margin-left:29%;\"><big><big><big>still affect the\nalignment of the structure:</big></big></big></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><big><big><big>struct\n<br>\n{ <br>\nchar foo : 6; <br>\nlong : 0; <br>\n} t4;</big></big></big></p>\n\n\n<p style=\"margin-left:29%; margin-top: 1em\"><big><big><big>Here,\n&quot;t4&quot; takes up 4 bytes.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>3. Zero-length\nbit-fields following non-bit-field members are <br>\nignored:</big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>struct <br>\n{ <br>\nchar foo; <br>\nlong : 0; <br>\nchar bar; <br>\n} t5;</big></big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big><big>Here,\n&quot;t5&quot; takes up 2 bytes.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-align-stringops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not align the\ndestination of inlined string operations. This switch\nreduces code size and improves performance in case the\ndestination is already aligned, but</big> GCC\n<big>doesn&rsquo;t know about it.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-all-stringops</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>By default</big>\nGCC <big>inlines string operations only when the destination\nis known to be aligned to least a 4-byte boundary. This\nenables more inlining and increases code size, but may\nimprove performance of code that depends on fast\n&quot;memcpy&quot; and &quot;memset&quot; for short lengths.\nThe option enables inline expansion of &quot;strlen&quot;\nfor all pointer alignments.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minline-stringops-dynamically</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>For string\noperations of unknown size, use run-time checks with inline\ncode for small blocks and a library call for large\nblocks.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstringop-strategy=</b><i>alg</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Override the\ninternal decision heuristic for the particular algorithm to\nuse for inlining string operations. The allowed values for\n<i>alg</i> are: <b><br>\nrep_byte <br>\nrep_4byte <br>\nrep_8byte</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Expand using\ni386 &quot;rep&quot; prefix of the specified\nsize.</big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big><b>byte_loop\n<br>\nloop <br>\nunrolled_loop</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Expand into an\ninline loop.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>libcall</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Always use a\nlibrary call.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmemcpy-strategy=</b><i>strategy</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Override the\ninternal decision heuristic to decide if\n&quot;__builtin_memcpy&quot; should be inlined and what\ninline algorithm to use when the expected size of the copy\noperation is known. <i>strategy</i> is a comma-separated\nlist of <i>alg</i>:<i>max_size</i>:<i>dest_align</i>\ntriplets. <i>alg</i> is specified in\n<b>-mstringop-strategy</b>, <i>max_size</i> specifies the\nmax byte size with which inline algorithm <i>alg</i> is\nallowed. For the last triplet, the <i>max_size</i> must be\n&quot;-1&quot;. The <i>max_size</i> of the triplets in the\nlist must be specified in increasing order. The minimal byte\nsize for <i>alg</i> is 0 for the first triplet and\n&quot;<i>max_size</i> + 1&quot; of the preceding\nrange.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mmemset-strategy=</b><i>strategy</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The option is\nsimilar to <b>-mmemcpy-strategy=</b> except that it is to\ncontrol &quot;__builtin_memset&quot;\nexpansion.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-momit-leaf-frame-pointer</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Don&rsquo;t keep\nthe frame pointer in a register for leaf functions. This\navoids the instructions to save, set up, and restore frame\npointers and makes an extra register available in leaf\nfunctions. The option <b>-fomit-leaf-frame-pointer</b>\nremoves the frame pointer for leaf functions, which might\nmake debugging harder.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtls-direct-seg-refs\n<br>\n-mno-tls-direct-seg-refs</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Controls\nwhether</big> TLS <big>variables may be accessed with\noffsets from the</big> TLS <big>segment register (%gs for\n32-bit, %fs for 64-bit), or whether the thread base pointer\nmust be added. Whether or not this is valid depends on the\noperating system, and whether it maps the segment to cover\nthe entire</big> TLS <big>area.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>For\nsystems that use the</big> GNU C <big>Library, the default\nis on.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-msse2avx\n<br>\n-mno-sse2avx</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Specify that the\nassembler should encode</big> SSE <big>instructions\nwith</big> VEX <big>prefix. The option <b>-mavx</b> turns\nthis on by default.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfentry <br>\n-mno-fentry</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If profiling is\nactive (<b>-pg</b>), put the profiling counter call before\nthe prologue. Note: On x86 architectures the attribute\n&quot;ms_hook_prologue&quot; isn&rsquo;t possible at the\nmoment for <b>-mfentry</b> and\n<b>-pg</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrecord-mcount\n<br>\n-mno-record-mcount</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If profiling is\nactive (<b>-pg</b>), generate a __mcount_loc section that\ncontains pointers to each profiling call. This is useful for\nautomatically patching and out calls.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnop-mcount\n<br>\n-mno-nop-mcount</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If profiling is\nactive (<b>-pg</b>), generate the calls to the profiling\nfunctions as NOPs. This is useful when they should be\npatched in later dynamically. This is likely only useful\ntogether with <b>-mrecord-mcount</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-minstrument-return=</b><i>type</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Instrument\nfunction exit in -pg -mfentry instrumented functions with\ncall to specified function. This only instruments true\nreturns ending with ret, but not sibling calls ending with\njump. Valid types are <i>none</i> to not instrument,\n<i>call</i> to generate a call to __return__, or <i>nop5</i>\nto generate a 5 byte nop.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mrecord-return\n<br>\n-mno-record-return</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate a\n__return_loc section pointing to all return instrumentation\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfentry-name=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set name of\n__fentry__ symbol called at function entry for -pg -mfentry\nfunctions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfentry-section=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Set name of\nsection to record -mrecord-mcount calls (default\n__mcount_loc).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mskip-rax-setup\n<br>\n-mno-skip-rax-setup</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When generating\ncode for the x86-64 architecture with</big> SSE\n<big>extensions disabled, <b>-mskip-rax-setup</b> can be\nused to skip setting up</big> RAX <big>register when there\nare no variable arguments passed in vector\nregisters.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big><b>Warning:</b>\nSince</big> RAX <big>register is used to avoid unnecessarily\nsaving vector registers on stack when passing variable\narguments, the impacts of this option are callees may waste\nsome stack space, misbehave or jump to a random\nlocation.</big> GCC 4.4 <big>or newer don&rsquo;t have those\nissues, regardless the</big> RAX <big>register\nvalue.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-m8bit-idiv\n<br>\n-mno-8bit-idiv</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>On some\nprocessors, like Intel Atom, 8-bit unsigned integer divide\nis much faster than 32-bit/64-bit integer divide. This\noption generates a run-time check. If both dividend and\ndivisor are within range of 0 to 255, 8-bit unsigned integer\ndivide is used instead of 32-bit/64-bit integer\ndivide.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mavx256-split-unaligned-load\n<br>\n-mavx256-split-unaligned-store</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Split\n32-byte</big> AVX <big>unaligned load and\nstore.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mstack-protector-guard=</b><i>guard</i>\n<b><br>\n-mstack-protector-guard-reg=</b><i>reg</i> <b><br>\n\n-mstack-protector-guard-offset=</b><i>offset</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate stack\nprotection code using canary at <i>guard</i>. Supported\nlocations are <b>global</b> for global canary or <b>tls</b>\nfor per-thread canary in the</big> TLS <big>block (the\ndefault). This option has effect only when\n<b>-fstack-protector</b> or <b>-fstack-protector-all</b> is\nspecified.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>With\nthe latter choice the options\n<b>-mstack-protector-guard-reg=</b><i>reg</i> and\n<b>-mstack-protector-guard-offset=</b><i>offset</i>\nfurthermore specify which segment register (%fs or %gs) to\nuse as base register for reading the canary, and from what\noffset from that base register. The default for those is as\nspecified in the relevant</big> ABI.</big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b><big>-mgeneral-regs-only</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nthat uses only the general-purpose registers. This prevents\nthe compiler from using floating-point, vector, mask and\nbound registers.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mindirect-branch=</b><i>choice</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Convert indirect\ncall and jump with <i>choice</i>. The default is\n<b>keep</b>, which keeps indirect call and jump unmodified.\n<b>thunk</b> converts indirect call and jump to call and\nreturn thunk. <b>thunk-inline</b> converts indirect call and\njump to inlined call and return thunk. <b>thunk-extern</b>\nconverts indirect call and jump to external call and return\nthunk provided in a separate object file. You can control\nthis behavior for a specific function by using the function\nattribute &quot;indirect_branch&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat <b>-mcmodel=large</b> is incompatible with\n<b>-mindirect-branch=thunk</b> and\n<b>-mindirect-branch=thunk-extern</b> since the thunk\nfunction may not be reachable in the large code\nmodel.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat <b>-mindirect-branch=thunk-extern</b> is compatible\nwith <b>-fcf-protection=branch</b> since the external thunk\ncan be made to enable control-flow\ncheck.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfunction-return=</b><i>choice</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Convert function\nreturn with <i>choice</i>. The default is <b>keep</b>, which\nkeeps function return unmodified. <b>thunk</b> converts\nfunction return to call and return thunk.\n<b>thunk-inline</b> converts function return to inlined call\nand return thunk. <b>thunk-extern</b> converts function\nreturn to external call and return thunk provided in a\nseparate object file. You can control this behavior for a\nspecific function by using the function attribute\n&quot;function_return&quot;.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat <b>-mindirect-return=thunk-extern</b> is compatible\nwith <b>-fcf-protection=branch</b> since the external thunk\ncan be made to enable control-flow\ncheck.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Note\nthat <b>-mcmodel=large</b> is incompatible with\n<b>-mfunction-return=thunk</b> and\n<b>-mfunction-return=thunk-extern</b> since the thunk\nfunction may not be reachable in the large code\nmodel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mindirect-branch-register</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Force indirect\ncall and jump via register.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mharden-sls=</b><i>choice</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code to\nmitigate against straight line speculation (</big> SLS\n<big>) with <i>choice</i>. The default is <b>none</b> which\ndisables all</big> SLS <big>hardening. <b>return</b>\nenables</big> SLS <big>hardening for function returns.\n<b>indirect-jmp</b> enables</big> SLS <big>hardening for\nindirect jumps. <b>all</b> enables all</big> SLS\n<big>hardening.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mindirect-branch-cs-prefix</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Add</big> CS\n<big>prefix to call and jmp to indirect thunk with branch\ntarget in r8-r15 registers so that the call and jmp\ninstruction length is 6 bytes to allow them to be replaced\nwith <b>lfence; call *%r8-r15</b> or <b>lfence; jmp\n*%r8-r15</b> at run-time.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\n<b>-m</b> switches are supported in addition to the above on\nx86-64 processors in 64-bit environments. <b><br>\n-m32 <br>\n-m64 <br>\n-mx32 <br>\n-m16 <br>\n-miamcu</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor a 16-bit, 32-bit or 64-bit environment. The <b>-m32</b>\noption sets &quot;int&quot;, &quot;long&quot;, and pointer\ntypes to 32 bits, and generates code that runs on any i386\nsystem.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-m64</b> option sets &quot;int&quot; to 32 bits and\n&quot;long&quot; and pointer types to 64 bits, and generates\ncode for the x86-64 architecture. For Darwin only the\n<b>-m64</b> option also turns off the <b>-fno-pic</b> and\n<b>-mdynamic-no-pic</b> options.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-mx32</b> option sets &quot;int&quot;, &quot;long&quot;,\nand pointer types to 32 bits, and generates code for the\nx86-64 architecture.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-m16</b> option is the same as <b>-m32</b>, except for\nthat it outputs the &quot;.code16gcc&quot; assembly\ndirective at the beginning of the assembly output so that\nthe binary can run in 16-bit mode.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\n<b>-miamcu</b> option generates code which conforms to\nIntel</big> MCU <big>psABI. It requires the <b>-m32</b>\noption to be turned on.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mno-red-zone</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Do not use a\nso-called &quot;red zone&quot; for x86-64 code. The red zone\nis mandated by the x86-64</big> ABI <big>; it is a 128-byte\narea beyond the location of the stack pointer that is not\nmodified by signal or interrupt handlers and therefore can\nbe used for temporary data without adjusting the stack\npointer. The flag <b>-mno-red-zone</b> disables this red\nzone.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=small</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the small code model: the program and its symbols must\nbe linked in the lower 2</big> GB <big>of the address space.\nPointers are 64 bits. Programs can be statically or\ndynamically linked. This is the default code\nmodel.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=kernel</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the kernel code model. The kernel runs in the negative\n2</big> GB <big>of the address space. This model has to be\nused for Linux kernel code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=medium</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the medium model: the program is linked in the lower\n2</big> GB <big>of the address space. Small symbols are also\nplaced there. Symbols with sizes larger than\n<b>-mlarge-data-threshold</b> are put into large data\nor</big> BSS <big>sections and can be located above 2GB.\nPrograms can be statically or dynamically\nlinked.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mcmodel=large</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the large model. This model makes no assumptions about\naddresses and sizes of sections.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maddress-mode=long</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor long address mode. This is only supported for 64-bit and\nx32 environments. It is the default address mode for 64-bit\nenvironments.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-maddress-mode=short</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor short address mode. This is only supported for 32-bit\nand x32 environments. It is the default address mode for\n32-bit and x32 environments.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mneeded <br>\n-mno-needed</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Emit</big>\nGNU_PROPERTY_X86_ISA_1_NEEDED GNU <big>property for Linux\ntarget to indicate the micro-architecture</big> ISA\n<big>level required to execute the\nbinary.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>x86\nWindows Options</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nadditional options are available for Microsoft Windows\ntargets: <b><br>\n-mconsole</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option\nspecifies that a console application is to be generated, by\ninstructing the linker to set the</big> PE <big>header\nsubsystem type required for console applications. This\noption is available for Cygwin and MinGW targets and is\nenabled by default on those targets.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mdll</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for Cygwin and MinGW targets. It specifies that a\nDLL---a dynamic link library---is to be generated, enabling\nthe selection of the required runtime startup object and\nentry point.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mnop-fun-dllimport</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for Cygwin and MinGW targets. It specifies that\nthe &quot;dllimport&quot; attribute should be\nignored.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mthread</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for MinGW targets. It specifies that\nMinGW-specific thread support is to be\nused.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-municode</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for MinGW-w64 targets. It causes the\n&quot;UNICODE&quot; preprocessor macro to be predefined, and\nchooses Unicode-capable runtime startup\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mwin32</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for Cygwin and MinGW targets. It specifies that\nthe typical Microsoft Windows predefined macros are to be\nset in the pre-processor, but does not influence the choice\nof runtime library/startup code.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mwindows</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for Cygwin and MinGW targets. It specifies that\na</big> GUI <big>application is to be generated by\ninstructing the linker to set the</big> PE <big>header\nsubsystem type appropriately.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fno-set-stack-executable</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for MinGW targets. It specifies that the\nexecutable flag for the stack used by nested functions\nisn&rsquo;t set. This is necessary for binaries running in\nkernel mode of Microsoft Windows, as there the User32</big>\nAPI, <big>which is used to set executable privileges,\nisn&rsquo;t available.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-fwritable-relocated-rdata</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for MinGW and Cygwin targets. It specifies that\nrelocated-data in read-only section is put into the\n&quot;.data&quot; section. This is a necessary for older\nruntimes not supporting modification of &quot;.rdata&quot;\nsections for pseudo-relocation.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mpe-aligned-commons</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This option is\navailable for Cygwin and MinGW targets. It specifies that\nthe</big> GNU <big>extension to the</big> PE <big>file\nformat that permits the correct alignment of</big> COMMON\n<big>variables should be used when generating code. It is\nenabled by default if</big> GCC <big>detects that the target\nassembler found during configuration supports the\nfeature.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>See\nalso under <b>x86 Options</b> for standard\noptions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Xstormy16\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are defined for Xstormy16: <b><br>\n-msim</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Choose startup\nfiles and linker script suitable for the\nsimulator.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>Xtensa\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\noptions are supported for Xtensa targets: <b><br>\n-mconst16 <br>\n-mno-const16</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable use of &quot;CONST16&quot; instructions for loading\nconstant values. The &quot;CONST16&quot; instruction is\ncurrently not a standard option from Tensilica. When\nenabled, &quot;CONST16&quot; instructions are always used in\nplace of the standard &quot;L32R&quot; instructions. The use\nof &quot;CONST16&quot; is enabled by default only if the\n&quot;L32R&quot; instruction is not\navailable.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mfused-madd\n<br>\n-mno-fused-madd</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Enable or\ndisable use of fused multiply/add and multiply/subtract\ninstructions in the floating-point option. This has no\neffect if the floating-point option is not also enabled.\nDisabling fused multiply/add and multiply/subtract\ninstructions forces the compiler to use separate\ninstructions for the multiply and add/subtract operations.\nThis may be desirable in some cases where strict</big> IEEE\n<big>754-compliant results are required: the fused multiply\nadd/subtract instructions do not round the intermediate\nresult, thereby producing results with <i>more</i> bits of\nprecision than specified by the</big> IEEE <big>standard.\nDisabling fused multiply add/subtract instructions also\nensures that the program output is not sensitive to the\ncompiler&rsquo;s ability to combine multiply and\nadd/subtract operations.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mserialize-volatile\n<br>\n-mno-serialize-volatile</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When this option\nis enabled,</big> GCC <big>inserts &quot;MEMW&quot;\ninstructions before &quot;volatile&quot; memory references\nto guarantee sequential consistency. The default is\n<b>-mserialize-volatile</b>. Use\n<b>-mno-serialize-volatile</b> to omit the &quot;MEMW&quot;\ninstructions.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mforce-no-pic</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>For targets,\nlike GNU/Linux, where all user-mode Xtensa code must be\nposition-independent code (</big> PIC <big>), this option\ndisables</big> PIC <big>for compiling kernel\ncode.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtext-section-literals\n<br>\n-mno-text-section-literals</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\ncontrol the treatment of literal pools. The default is\n<b>-mno-text-section-literals</b>, which places literals in\na separate section in the output file. This allows the\nliteral pool to be placed in a data</big> RAM/ROM, <big>and\nit also allows the linker to combine literal pools from\nseparate object files to remove redundant literals and\nimprove code size. With <b>-mtext-section-literals</b>, the\nliterals are interspersed in the text section in order to\nkeep them as close as possible to their references. This may\nbe necessary for large assembly files. Literals for each\nfunction are placed right before that\nfunction.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mauto-litpools\n<br>\n-mno-auto-litpools</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These options\ncontrol the treatment of literal pools. The default is\n<b>-mno-auto-litpools</b>, which places literals in a\nseparate section in the output file unless\n<b>-mtext-section-literals</b> is used. With\n<b>-mauto-litpools</b> the literals are interspersed in the\ntext section by the assembler. Compiler does not produce\nexplicit &quot;.literal&quot; directives and loads literals\ninto registers with &quot;MOVI&quot; instructions instead of\n&quot;L32R&quot; to let the assembler do relaxation and\nplace literals as necessary. This option allows assembler to\ncreate several literal pools per function and assemble very\nbig functions, which may not be possible with\n<b>-mtext-section-literals</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mtarget-align\n<br>\n-mno-target-align</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When this option\nis enabled,</big> GCC <big>instructs the assembler to\nautomatically align instructions to reduce branch penalties\nat the expense of some code density. The assembler attempts\nto widen density instructions to align branch targets and\nthe instructions following call instructions. If there are\nnot enough preceding safe density instructions to align a\ntarget, no widening is performed. The default is\n<b>-mtarget-align</b>. These options do not affect the\ntreatment of auto-aligned instructions like\n&quot;LOOP&quot;, which the assembler always aligns, either\nby widening density instructions or by inserting</big> NOP\n<big>instructions.</big></big></big></p>\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mlongcalls\n<br>\n-mno-longcalls</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When this option\nis enabled,</big> GCC <big>instructs the assembler to\ntranslate direct calls to indirect calls unless it can\ndetermine that the target of a direct call is in the range\nallowed by the call instruction. This translation typically\noccurs for calls to functions in other source files.\nSpecifically, the assembler translates a direct\n&quot;CALL&quot; instruction into an &quot;L32R&quot;\nfollowed by a &quot;CALLX&quot; instruction. The default is\n<b>-mno-longcalls</b>. This option should be used in\nprograms where the call target can potentially be out of\nrange. This option is implemented in the assembler, not the\ncompiler, so the assembly code generated by</big> GCC\n<big>still shows direct call instructions---look at the\ndisassembled object code to see the actual instructions.\nNote that the assembler uses an indirect call for every\ncross-file call, not just those that really are out of\nrange.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=</b><i>name</i></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Generate code\nfor the specified</big> ABI. <big>Permissible values are:\n<b>call0</b>, <b>windowed</b>. Default</big> ABI <big>is\nchosen by the Xtensa core\nconfiguration.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=call0</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When this option\nis enabled function parameters are passed in registers\n&quot;a2&quot; through &quot;a7&quot;, registers\n&quot;a12&quot; through &quot;a15&quot; are caller-saved,\nand register &quot;a15&quot; may be used as a frame pointer.\nWhen this version of the</big> ABI <big>is enabled the C\npreprocessor symbol &quot;__XTENSA_CALL0_ABI__&quot; is\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><big><b>-mabi=windowed</b></big></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>When this option\nis enabled function parameters are passed in registers\n&quot;a10&quot; through &quot;a15&quot;, and called function\nrotates register window by 8 registers on entry so that its\narguments are found in registers &quot;a2&quot; through\n&quot;a7&quot;. Register &quot;a7&quot; may be used as a\nframe pointer. Register window is rotated 8 registers back\nupon return. When this version of the</big> ABI <big>is\nenabled the C preprocessor symbol\n&quot;__XTENSA_WINDOWED_ABI__&quot; is\ndefined.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><i>zSeries\nOptions</i></big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>These\nare listed under</big></big></big></p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>This\nsection describes several environment variables that affect\nhow</big> GCC <big>operates. Some of them work by specifying\ndirectories or prefixes to use when searching for various\nkinds of files. Some are used to specify other aspects of\nthe compilation environment.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Note\nthat you can also specify places to search using options\nsuch as <b>-B</b>, <b>-I</b> and <b>-L</b>. These take\nprecedence over places specified using environment\nvariables, which in turn take precedence over those\nspecified by the configuration of</big> GCC. <b><br>\nLANG <br>\nLC_CTYPE <br>\nLC_MESSAGES <br>\nLC_ALL</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>These\nenvironment variables control the way that</big> GCC\n<big>uses localization information which allows</big> GCC\n<big>to work with different national conventions.</big> GCC\n<big>inspects the locale categories</big> <b>LC_CTYPE</b>\n<big>and</big> <b>LC_MESSAGES</b> <big>if it has been\nconfigured to do so. These locale categories can be set to\nany value supported by your installation. A typical value is\n<b>en_GB.UTF-8</b> for English in the United Kingdom encoded\nin</big> UTF-8.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\n<b>LC_CTYPE</b> <big>environment variable specifies\ncharacter classification.</big> GCC <big>uses it to\ndetermine the character boundaries in a string; this is\nneeded for some multibyte encodings that contain quote and\nescape characters that are otherwise interpreted as a string\nend or escape.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The</big>\n<b>LC_MESSAGES</b> <big>environment variable specifies the\nlanguage to use in diagnostic\nmessages.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If\nthe</big> <b>LC_ALL</b> <big>environment variable is set, it\noverrides the value of</big> <b>LC_CTYPE</b> <big>and</big>\n<b>LC_MESSAGES</b> <big>; otherwise,</big> <b>LC_CTYPE</b>\n<big>and</big> <b>LC_MESSAGES</b> <big>default to the value\nof the</big> <b>LANG</b> <big>environment variable. If none\nof these variables are set,</big> GCC <big>defaults to\ntraditional C English behavior.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>TMPDIR</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If</big>\n<b>TMPDIR</b> <big>is set, it specifies the directory to use\nfor temporary files.</big> GCC <big>uses temporary files to\nhold the output of one stage of compilation which is to be\nused as input to the next stage: for example, the output of\nthe preprocessor, which is the input to the compiler\nproper.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>GCC_COMPARE_DEBUG</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Setting</big>\n<b>GCC_COMPARE_DEBUG</b> <big>is nearly equivalent to\npassing <b>-fcompare-debug</b> to the compiler driver. See\nthe documentation of this option for more\ndetails.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>GCC_EXEC_PREFIX</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If</big>\n<b>GCC_EXEC_PREFIX</b> <big>is set, it specifies a prefix to\nuse in the names of the subprograms executed by the\ncompiler. No slash is added when this prefix is combined\nwith the name of a subprogram, but you can specify a prefix\nthat ends with a slash if you wish.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If</big>\n<b>GCC_EXEC_PREFIX</b> <big>is not set,</big> GCC\n<big>attempts to figure out an appropriate prefix to use\nbased on the pathname it is invoked\nwith.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If</big>\nGCC <big>cannot find the subprogram using the specified\nprefix, it tries looking in the usual places for the\nsubprogram.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\ndefault value of</big> <b>GCC_EXEC_PREFIX</b> <big>is\n<i>prefix/lib/gcc/</i> where <i>prefix</i> is the prefix to\nthe installed compiler. In many cases <i>prefix</i> is the\nvalue of &quot;prefix&quot; when you ran the\n<i>configure</i> script.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>Other\nprefixes specified with <b>-B</b> take precedence over this\nprefix.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>This\nprefix is also used for finding files such as <i>crt0.o</i>\nthat are used for linking.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\naddition, the prefix is used in an unusual way in finding\nthe directories to search for header files. For each of the\nstandard directories whose name normally begins with\n<b>/usr/local/lib/gcc</b> (more precisely, with the value\nof</big> <b>GCC_INCLUDE_DIR</b> <big>),</big> GCC <big>tries\nreplacing that beginning with the specified prefix to\nproduce an alternate directory name. Thus, with\n<b>-Bfoo/</b>,</big> GCC <big>searches <i>foo/bar</i> just\nbefore it searches the standard directory\n<i>/usr/local/lib/bar</i>. If a standard directory begins\nwith the configured <i>prefix</i> then the value of\n<i>prefix</i> is replaced by</big> <b>GCC_EXEC_PREFIX</b>\n<big>when looking for header files.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>COMPILER_PATH</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The value\nof</big> <b>COMPILER_PATH</b> <big>is a colon-separated list\nof directories, much like</big> <b>PATH</b> <big>.</big> GCC\n<big>tries the directories thus specified when searching for\nsubprograms, if it cannot find the subprograms using</big>\n<b>GCC_EXEC_PREFIX</b> <big>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>LIBRARY_PATH</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>The value\nof</big> <b>LIBRARY_PATH</b> <big>is a colon-separated list\nof directories, much like</big> <b>PATH</b> <big>. When\nconfigured as a native compiler,</big> GCC <big>tries the\ndirectories thus specified when searching for special linker\nfiles, if it cannot find them using</big>\n<b>GCC_EXEC_PREFIX</b> <big>. Linking using</big> GCC\n<big>also uses these directories when searching for ordinary\nlibraries for the <b>-l</b> option (but directories\nspecified with <b>-L</b> come first).</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>LANG</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This variable is\nused to pass locale information to the compiler. One way in\nwhich this information is used is to determine the character\nset to be used when character literals, string literals and\ncomments are parsed in C and C</big> ++ <big>. When the\ncompiler is configured to allow multibyte characters, the\nfollowing values for</big> <b>LANG</b> <big>are recognized:\n<b><br>\nC-JIS</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Recognize</big>\nJIS <big>characters.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>C-SJIS</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Recognize</big>\nSJIS <big>characters.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>C-EUCJP</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Recognize</big>\nEUCJP <big>characters.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>If</big>\n<b>LANG</b> <big>is not defined, or if it has some other\nvalue, then the compiler uses &quot;mblen&quot; and\n&quot;mbtowc&quot; as defined by the default locale to\nrecognize and translate multibyte\ncharacters.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>GCC_EXTRA_DIAGNOSTIC_OUTPUT</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If</big>\n<b>GCC_EXTRA_DIAGNOSTIC_OUTPUT</b> <big>is set to one of the\nfollowing values, then additional text will be emitted to\nstderr when fix-it hints are emitted.\n<b>-fdiagnostics-parseable-fixits</b> and\n<b>-fno-diagnostics-parseable-fixits</b> take precedence\nover this environment variable. <b><br>\nfixits-v1</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>Emit parseable\nfix-it hints, equivalent to\n<b>-fdiagnostics-parseable-fixits</b>. In particular,\ncolumns are expressed as a count of bytes, starting at byte\n1 for the initial column.</big></big></big></p>\n\n\n<p style=\"margin-left:17%;\"><big><big><big><b>fixits-v2</b></big></big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big><big>As\n&quot;fixits-v1&quot;, but columns are expressed as display\ncolumns, as per\n<b>-fdiagnostics-column-unit=display</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Some\nadditional environment variables affect the behavior of the\npreprocessor.</big> <b><br>\nCPATH <big><br>\nC_INCLUDE_PATH</big> <br>\nCPLUS_INCLUDE_PATH <br>\nOBJC_INCLUDE_PATH</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>Each\nvariable&rsquo;s value is a list of directories separated by\na special character, much like</big> <b>PATH</b> <big>, in\nwhich to look for header files. The special character,\n&quot;PATH_SEPARATOR&quot;, is target-dependent and\ndetermined at</big> GCC <big>build time. For Microsoft\nWindows-based targets it is a semicolon, and for almost all\nother targets it is a colon.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><b>CPATH</b>\n<big>specifies a list of directories to be searched as if\nspecified with <b>-I</b>, but after any paths given with\n<b>-I</b> options on the command line. This environment\nvariable is used regardless of which language is being\npreprocessed.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nremaining environment variables apply only when\npreprocessing the particular language indicated. Each\nspecifies a list of directories to be searched as if\nspecified with <b>-isystem</b>, but after any paths given\nwith <b>-isystem</b> options on the command\nline.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nall these variables, an empty element instructs the compiler\nto search its current working directory. Empty elements can\nappear at the beginning or end of a path. For instance, if\nthe value of</big> <b>CPATH</b> <big>is\n&quot;:/special/include&quot;, that has the same effect as\n<b>-I.&nbsp;-I/special/include</b>.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>DEPENDENCIES_OUTPUT</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If this variable\nis set, its value specifies how to output dependencies for\nMake based on the non-system header files processed by the\ncompiler. System header files are ignored in the dependency\noutput.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalue of</big> <b>DEPENDENCIES_OUTPUT</b> <big>can be just a\nfile name, in which case the Make rules are written to that\nfile, guessing the target name from the source file name. Or\nthe value can have the form <i>file target</i>, in which\ncase the rules are written to file <i>file</i> using\n<i>target</i> as the target name.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>In\nother words, this environment variable is equivalent to\ncombining the options <b>-MM</b> and <b>-MF</b>, with an\noptional <b>-MT</b> switch too.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>SUNPRO_DEPENDENCIES</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>This variable is\nthe same as</big> <b>DEPENDENCIES_OUTPUT</b> <big>(see\nabove), except that system header files are not ignored, so\nit implies <b>-M</b> rather than <b>-MM</b>. However, the\ndependence on the main input file is\nomitted.</big></big></big></p>\n\n\n<p style=\"margin-left:11%;\"><big><big><b>SOURCE_DATE_EPOCH</b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big><big>If this variable\nis set, its value specifies a</big> UNIX <big>timestamp to\nbe used in replacement of the current date and time in the\n&quot;__DATE__&quot; and &quot;__TIME__&quot; macros, so\nthat the embedded timestamps become\nreproducible.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalue of</big> <b>SOURCE_DATE_EPOCH</b> <big>must be a</big>\nUNIX <big>timestamp, defined as the number of seconds\n(excluding leap seconds) since 01 Jan 1970 00:00:00\nrepresented in</big> ASCII <big>; identical to the output of\n&quot;date +%s&quot; on GNU/Linux and other systems that\nsupport the %s extension in the &quot;date&quot;\ncommand.</big></big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big><big>The\nvalue should be a known timestamp such as the last\nmodification time of the source or package and it should be\nset by the build process.</big></big></big></p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>For\ninstructions on reporting bugs, see\n&lt;<b>file:///usr/share/doc/gcc-11/README.Bugs</b>&gt;.</big></big></big></p>\n\n<h2>FOOTNOTES\n<a name=\"FOOTNOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><big><big>1.</big></big></big></p> </td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><big><big><big>On some systems,\n<b>gcc -shared</b> needs to build supplementary stub code\nfor constructors to work. On multi-libbed systems, <b>gcc\n-shared</b> must select the correct support libraries to\nlink against. Failing to supply the correct flags may lead\nto subtle defects. Supplying them in cases where they are\nnot necessary is innocuous.</big></big></big></p></td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big><a href=\"https://man.page/7/gpl\">gpl(7)</a>,\n<a href=\"https://man.page/7/gfdl\">gfdl(7)</a>, <a href=\"https://man.page/7/fsf-funding\">fsf-funding(7)</a>, <a href=\"https://man.page/1/cpp\">cpp(1)</a>,\n<a href=\"https://man.page/1/gcov\">gcov(1)</a>, <a href=\"https://man.page/1/as\">as(1)</a>, <a href=\"https://man.page/1/ld\">ld(1)</a>, <a href=\"https://man.page/1/gdb\">gdb(1)</a>,\n<a href=\"https://man.page/1/dbx\">dbx(1)</a> and the Info entries for <i>gcc</i>,\n<i>cpp</i>, <i>as</i>, <i>ld</i>, <i>binutils</i> and\n<i>gdb</i>.</big></big></big></p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>See\nthe Info entry for <b>gcc</b>, or\n&lt;<b>http://gcc.gnu.org/onlinedocs/gcc/Contributors.html</b>&gt;,\nfor contributors to</big> GCC.</big></big></p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Copyright\n(c) 1988-2021 Free Software Foundation,\nInc.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>Permission\nis granted to copy, distribute and/or modify this document\nunder the terms of the</big> GNU <big>Free Documentation\nLicense, Version 1.3 or any later version published by the\nFree Software Foundation; with the Invariant Sections being\n&quot;</big> GNU <big>General Public License&quot; and\n&quot;Funding Free Software&quot;, the Front-Cover texts\nbeing (a) (see below), and with the Back-Cover Texts being\n(b) (see below). A copy of the license is included in the\n<a href=\"https://man.page/7/gfdl\">gfdl(7)</a> man page.</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>(a)\nThe</big> FSF <big>&rsquo;s Front-Cover Text\nis:</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>A\nGNU Manual</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>(b)\nThe</big> FSF <big>&rsquo;s Back-Cover Text\nis:</big></big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><big>You\nhave freedom to copy and modify this GNU Manual, like GNU\n<br>\nsoftware. Copies published by the Free Software Foundation\nraise <br>\nfunds for GNU development.</big></big></big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#FOOTNOTES\">FOOTNOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"]}