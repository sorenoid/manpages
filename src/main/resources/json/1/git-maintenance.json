{"name":"git-maintenance","body":"\n\n<h1 align=\"center\">GIT-MAINTENANCE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-maintenance\n- Run tasks to optimize Git repository data</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nmaintenance</i> run [&lt;options&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Run tasks to\noptimize Git repository data, speeding up other Git commands\nand reducing storage requirements for the repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git commands\nthat add repository data, such as <b>git add</b> or <b>git\nfetch</b>, are optimized for a responsive user experience.\nThese commands do not take time to optimize the Git data,\nsince such optimizations scale with the full size of the\nrepository while these user commands each perform a\nrelatively small action.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>git\nmaintenance</b> command provides flexibility for how to\noptimize the Git repository.</p>\n\n<h2>SUBCOMMANDS\n<a name=\"SUBCOMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">register</p>\n\n<p style=\"margin-left:17%;\">Initialize Git config values so\nany scheduled maintenance will start running on this\nrepository. This adds the repository to the\n<b>maintenance.repo</b> config variable in the current\nuser&rsquo;s global config and enables some recommended\nconfiguration values for\n<b>maintenance.&lt;task&gt;.schedule</b>. The tasks that are\nenabled are safe for running in the background without\ndisrupting foreground processes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>register</b> subcommand will also set the\n<b>maintenance.strategy</b> config value to\n<b>incremental</b>, if this value is not previously set. The\n<b>incremental</b> strategy uses the following schedule for\neach maintenance task:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>gc</b>: disabled.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>commit-graph</b>: hourly.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>prefetch</b>: hourly.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>loose-objects</b>: daily.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>incremental-repack</b>: daily.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>git\nmaintenance register</b> will also disable foreground\nmaintenance by setting <b>maintenance.auto = false</b> in\nthe current repository. This config setting will remain\nafter a <b>git maintenance unregister</b> command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">run</p>\n\n<p style=\"margin-left:17%;\">Run one or more maintenance\ntasks. If one or more <b>--task</b> options are specified,\nthen those tasks are run in that order. Otherwise, the tasks\nare determined by which\n<b>maintenance.&lt;task&gt;.enabled</b> config options are\ntrue. By default, only <b>maintenance.gc.enabled</b> is\ntrue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">start</p>\n\n<p style=\"margin-left:17%;\">Start running maintenance on\nthe current repository. This performs the same config\nupdates as the <b>register</b> subcommand, then updates the\nbackground scheduler to run <b>git maintenance run\n--scheduled</b> on an hourly basis.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">stop</p>\n\n<p style=\"margin-left:17%;\">Halt the background maintenance\nschedule. The current repository is not removed from the\nlist of maintained repositories, in case the background\nmaintenance is restarted later.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">unregister</p>\n\n<p style=\"margin-left:17%;\">Remove the current repository\nfrom background maintenance. This only removes the\nrepository from the configured list. It does not stop the\nbackground maintenance processes from running.</p>\n\n<h2>TASKS\n<a name=\"TASKS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">commit-graph</p>\n\n<p style=\"margin-left:17%;\">The <b>commit-graph</b> job\nupdates the <b>commit-graph</b> files incrementally, then\nverifies that the written data is correct. The incremental\nwrite is safe to run alongside concurrent Git processes\nsince it will not expire <b>.graph</b> files that were in\nthe previous <b>commit-graph-chain</b> file. They will be\ndeleted by a later run based on the expiration delay.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prefetch</p>\n\n<p style=\"margin-left:17%;\">The <b>prefetch</b> task\nupdates the object directory with the latest objects from\nall registered remotes. For each remote, a <b>git fetch</b>\ncommand is run. The configured refspec is modified to place\nall requested refs within <b>refs/prefetch/</b>. Also, tags\nare not updated.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is done to\navoid disrupting the remote-tracking branches. The end users\nexpect these refs to stay unmoved unless they initiate a\nfetch. With prefetch task, however, the objects necessary to\ncomplete a later real fetch would already be obtained, so\nthe real fetch would go faster. In the ideal case, it will\njust become an update to a bunch of remote-tracking branches\nwithout any object transfer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc</p>\n\n<p style=\"margin-left:17%;\">Clean up unnecessary files and\noptimize the local repository. &quot;GC&quot; stands for\n&quot;garbage collection,&quot; but this task performs many\nsmaller tasks. This task can be expensive for large\nrepositories, as it repacks all Git objects into a single\npack-file. It can also be disruptive in some situations, as\nit deletes stale data. See <a href=\"https://man.page/1/git-gc\">git-gc(1)</a> for more details\non garbage collection in Git.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">loose-objects</p>\n\n<p style=\"margin-left:17%;\">The <b>loose-objects</b> job\ncleans up loose objects and places them into pack-files. In\norder to prevent race conditions with concurrent Git\ncommands, it follows a two-step process. First, it deletes\nany loose objects that already exist in a pack-file;\nconcurrent Git processes will examine the pack-file for the\nobject data instead of the loose object. Second, it creates\na new pack-file (starting with &quot;loose-&quot;)\ncontaining a batch of loose objects. The batch size is\nlimited to 50 thousand objects to prevent the job from\ntaking too long on a repository with many loose objects. The\n<b>gc</b> task writes unreachable objects as loose objects\nto be cleaned up by a later step only if they are not\nre-added to a pack-file; for this reason it is not advisable\nto enable both the <b>loose-objects</b> and <b>gc</b> tasks\nat the same time.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">incremental-repack</p>\n\n<p style=\"margin-left:17%;\">The <b>incremental-repack</b>\njob repacks the object directory using the\n<b>multi-pack-index</b> feature. In order to prevent race\nconditions with concurrent Git commands, it follows a\ntwo-step process. First, it calls <b>git multi-pack-index\nexpire</b> to delete pack-files unreferenced by the\n<b>multi-pack-index</b> file. Second, it calls <b>git\nmulti-pack-index repack</b> to select several small\npack-files and repack them into a bigger one, and then\nupdate the <b>multi-pack-index</b> entries that refer to the\nsmall pack-files to refer to the new pack-file. This\nprepares those small pack-files for deletion upon the next\nrun of <b>git multi-pack-index expire</b>. The selection of\nthe small pack-files is such that the expected size of the\nbig pack-file is at least the batch size; see the\n<b>--batch-size</b> option for the <b>repack</b> subcommand\nin <a href=\"https://man.page/1/git-multi-pack-index\">git-multi-pack-index(1)</a>. The default batch-size is\nzero, which is a special case that attempts to repack all\npack-files into a single pack-file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pack-refs</p>\n\n<p style=\"margin-left:17%;\">The <b>pack-refs</b> task\ncollects the loose reference files and collects them into a\nsingle file. This speeds up operations that need to iterate\nacross many references. See <a href=\"https://man.page/1/git-pack-refs\">git-pack-refs(1)</a> for more\ninformation.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--auto</p>\n\n<p style=\"margin-left:17%;\">When combined with the\n<b>run</b> subcommand, run maintenance tasks only if certain\nthresholds are met. For example, the <b>gc</b> task runs\nwhen the number of loose objects exceeds the number stored\nin the <b>gc.auto</b> config setting, or when the number of\npack-files exceeds the <b>gc.autoPackLimit</b> config\nsetting. Not compatible with the <b>--schedule</b>\noption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--schedule</p>\n\n<p style=\"margin-left:17%;\">When combined with the\n<b>run</b> subcommand, run maintenance tasks only if certain\ntime conditions are met, as specified by the\n<b>maintenance.&lt;task&gt;.schedule</b> config value for\neach <b>&lt;task&gt;</b>. This config value specifies a\nnumber of seconds since the last time that task ran,\naccording to the <b>maintenance.&lt;task&gt;.lastRun</b>\nconfig value. The tasks that are tested are those provided\nby the <b>--task=&lt;task&gt;</b> option(s) or those with\n<b>maintenance.&lt;task&gt;.enabled</b> set to true.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--quiet</p>\n\n<p style=\"margin-left:17%;\">Do not report progress or other\ninformation over <b>stderr</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--task=&lt;task&gt;</p>\n\n<p style=\"margin-left:17%;\">If this option is specified one\nor more times, then only run the specified tasks in the\nspecified order. If no <b>--task=&lt;task&gt;</b> arguments\nare specified, then only the tasks with\n<b>maintenance.&lt;task&gt;.enabled</b> configured as\n<b>true</b> are considered. See the <i>TASKS</i> section for\nthe list of accepted <b>&lt;task&gt;</b> values.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--scheduler=auto|crontab|systemd-timer|launchctl|schtasks</p>\n\n<p style=\"margin-left:17%;\">When combined with the\n<b>start</b> subcommand, specify the scheduler for running\nthe hourly, daily and weekly executions of <b>git\nmaintenance run</b>. Possible values for\n<b>&lt;scheduler&gt;</b> are <b>auto</b>, <b>crontab</b>\n(POSIX), <b>systemd-timer</b> (Linux), <b>launchctl</b>\n(macOS), and <b>schtasks</b> (Windows). When <b>auto</b> is\nspecified, the appropriate platform-specific scheduler is\nused; on Linux, <b>systemd-timer</b> is used if available,\notherwise <b>crontab</b>. Default is <b>auto</b>.</p>\n\n<h2>TROUBLESHOOTING\n<a name=\"TROUBLESHOOTING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>git\nmaintenance</b> command is designed to simplify the\nrepository maintenance patterns while minimizing user wait\ntime during Git commands. A variety of configuration options\nare available to allow customizing this process. The default\nmaintenance options focus on operations that complete\nquickly, even on large repositories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Users may find\nsome cases where scheduled maintenance tasks do not run as\nfrequently as intended. Each <b>git maintenance run</b>\ncommand takes a lock on the repository&rsquo;s object\ndatabase, and this prevents other concurrent <b>git\nmaintenance run</b> commands from running on the same\nrepository. Without this safeguard, competing processes\ncould leave the repository in an unpredictable state.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The background\nmaintenance schedule runs <b>git maintenance run</b>\nprocesses on an hourly basis. Each run executes the\n&quot;hourly&quot; tasks. At midnight, that process also\nexecutes the &quot;daily&quot; tasks. At midnight on the\nfirst day of the week, that process also executes the\n&quot;weekly&quot; tasks. A single process iterates over\neach registered repository, performing the scheduled tasks\nfor that frequency. Depending on the number of registered\nrepositories and their sizes, this process may take longer\nthan an hour. In this case, multiple <b>git maintenance\nrun</b> commands may run on the same repository at the same\ntime, colliding on the object database lock. This results in\none of the two tasks not running.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you find\nthat some maintenance windows are taking longer than one\nhour to complete, then consider reducing the complexity of\nyour maintenance tasks. For example, the <b>gc</b> task is\nmuch slower than the <b>incremental-repack</b> task.\nHowever, this comes at a cost of a slightly larger object\ndatabase. Consider moving more expensive tasks to be run\nless frequently.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Expert users\nmay consider scheduling their own maintenance tasks using a\ndifferent schedule than is available through <b>git\nmaintenance start</b> and Git configuration options. These\nusers should be aware of the object database lock and how\nconcurrent <b>git maintenance run</b> commands behave.\nFurther, the <b>git gc</b> command should not be combined\nwith <b>git maintenance run</b> commands. <b>git gc</b>\nmodifies the object database but does not take the lock in\nthe same way as <b>git maintenance run</b>. If possible, use\n<b>git maintenance run --task=gc</b> instead of <b>git\ngc</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nsections describe the mechanisms put in place to run\nbackground maintenance by <b>git maintenance start</b> and\nhow to customize them.</p>\n\n<h2>BACKGROUND MAINTENANCE ON POSIX SYSTEMS\n<a name=\"BACKGROUND MAINTENANCE ON POSIX SYSTEMS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The standard\nmechanism for scheduling background tasks on POSIX systems\nis cron(8). This tool executes commands based on a given\nschedule. The current list of user-scheduled tasks can be\nfound by running <b>crontab -l</b>. The schedule written by\n<b>git maintenance start</b> is similar to this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># BEGIN GIT\nMAINTENANCE SCHEDULE <br>\n# The following schedule was created by Git <br>\n# Any edits made in this region might be <br>\n# replaced in the future by a Git command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">0 1-23 * * *\n&quot;/&lt;path&gt;/git&quot;\n--exec-path=&quot;/&lt;path&gt;&quot; for-each-repo\n--config=maintenance.repo maintenance run --schedule=hourly\n<br>\n0 0 * * 1-6 &quot;/&lt;path&gt;/git&quot;\n--exec-path=&quot;/&lt;path&gt;&quot; for-each-repo\n--config=maintenance.repo maintenance run --schedule=daily\n<br>\n0 0 * * 0 &quot;/&lt;path&gt;/git&quot;\n--exec-path=&quot;/&lt;path&gt;&quot; for-each-repo\n--config=maintenance.repo maintenance run\n--schedule=weekly</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># END GIT\nMAINTENANCE SCHEDULE</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The comments\nare used as a region to mark the schedule as written by Git.\nAny modifications within this region will be completely\ndeleted by <b>git maintenance stop</b> or overwritten by\n<b>git maintenance start</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>crontab</b> entry specifies the full path of the\n<b>git</b> executable to ensure that the executed <b>git</b>\ncommand is the same one with which <b>git maintenance\nstart</b> was issued independent of <b>PATH</b>. If the same\nuser runs <b>git maintenance start</b> with multiple Git\nexecutables, then only the latest executable is used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These commands\nuse <b>git for-each-repo --config=maintenance.repo</b> to\nrun <b>git maintenance run --schedule=&lt;frequency&gt;</b>\non each repository listed in the multi-valued\n<b>maintenance.repo</b> config option. These are typically\nloaded from the user-specific global config. The <b>git\nmaintenance</b> process then determines which maintenance\ntasks are configured to run on each repository with each\n<b>&lt;frequency&gt;</b> using the\n<b>maintenance.&lt;task&gt;.schedule</b> config options.\nThese values are loaded from the global or repository config\nvalues.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the config\nvalues are insufficient to achieve your desired background\nmaintenance schedule, then you can create your own schedule.\nIf you run <b>crontab -e</b>, then an editor will load with\nyour user-specific <b>cron</b> schedule. In that editor, you\ncan add your own schedule lines. You could start by adapting\nthe default schedule listed earlier, or you could read the\ncrontab(5) documentation for advanced scheduling techniques.\nPlease do use the full path and <b>--exec-path</b>\ntechniques from the default schedule to ensure you are\nexecuting the correct binaries in your schedule.</p>\n\n<h2>BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS\n<a name=\"BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">While Linux\nsupports <b>cron</b>, depending on the distribution,\n<b>cron</b> may be an optional package not necessarily\ninstalled. On modern Linux distributions, systemd timers are\nsuperseding it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If user systemd\ntimers are available, they will be used as a replacement of\n<b>cron</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this case,\n<b>git maintenance start</b> will create user systemd timer\nunits and start the timers. The current list of\nuser-scheduled tasks can be found by running <b>systemctl\n--user list-timers</b>. The timers written by <b>git\nmaintenance start</b> are similar to this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ systemctl\n--user list-timers <br>\nNEXT LEFT LAST PASSED UNIT ACTIVATES <br>\nThu 2021-04-29 19:00:00 CEST 42min left Thu 2021-04-29\n18:00:11 CEST 17min ago git-maintenance@hourly.timer\ngit-maintenance@hourly.service <br>\nFri 2021-04-30 00:00:00 CEST 5h 42min left Thu 2021-04-29\n00:00:11 CEST 18h ago git-maintenance@daily.timer\ngit-maintenance@daily.service <br>\nMon 2021-05-03 00:00:00 CEST 3 days left Mon 2021-04-26\n00:00:11 CEST 3 days ago git-maintenance@weekly.timer\ngit-maintenance@weekly.service</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One timer is\nregistered for each <b>--schedule=&lt;frequency&gt;</b>\noption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The definition\nof the systemd units can be inspected in the following\nfiles:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">~/.config/systemd/user/git-maintenance@.timer\n<br>\n~/.config/systemd/user/git-maintenance@.service <br>\n\n~/.config/systemd/user/timers.target.wants/git-maintenance@hourly.timer\n<br>\n\n~/.config/systemd/user/timers.target.wants/git-maintenance@daily.timer\n<br>\n\n~/.config/systemd/user/timers.target.wants/git-maintenance@weekly.timer</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\nmaintenance start</b> will overwrite these files and start\nthe timer again with <b>systemctl --user</b>, so any\ncustomization should be done by creating a drop-in file,\ni.e. a <b>.conf</b> suffixed file in the\n<b>~/.config/systemd/user/git-maintenance@.service.d</b>\ndirectory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\nmaintenance stop</b> will stop the user systemd timers and\ndelete the above mentioned files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For more\ndetails, see <b>systemd.timer(5)</b>.</p>\n\n<h2>BACKGROUND MAINTENANCE ON MACOS SYSTEMS\n<a name=\"BACKGROUND MAINTENANCE ON MACOS SYSTEMS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">While macOS\ntechnically supports <b>cron</b>, using <b>crontab -e</b>\nrequires elevated privileges and the executed process does\nnot have a full user context. Without a full user context,\nGit and its credential helpers cannot access stored\ncredentials, so some maintenance tasks are not\nfunctional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Instead, <b>git\nmaintenance start</b> interacts with the <b>launchctl</b>\ntool, which is the recommended way to schedule timed jobs in\nmacOS. Scheduling maintenance through <b>git maintenance\n(start|stop)</b> requires some <b>launchctl</b> features\navailable only in macOS 10.11 or later.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Your\nuser-specific scheduled tasks are stored as XML-formatted\n<b>.plist</b> files in <b>~/Library/LaunchAgents/</b>. You\ncan see the currently-registered tasks using the following\ncommand:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ ls\n~/Library/LaunchAgents/org.git-scm.git* <br>\norg.git-scm.git.daily.plist <br>\norg.git-scm.git.hourly.plist <br>\norg.git-scm.git.weekly.plist</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One task is\nregistered for each <b>--schedule=&lt;frequency&gt;</b>\noption. To inspect how the XML format describes each\nschedule, open one of these <b>.plist</b> files in an editor\nand inspect the <b>&lt;array&gt;</b> element following the\n<b>&lt;key&gt;StartCalendarInterval&lt;/key&gt;</b>\nelement.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\nmaintenance start</b> will overwrite these files and\nregister the tasks again with <b>launchctl</b>, so any\ncustomizations should be done by creating your own\n<b>.plist</b> files with distinct names. Similarly, the\n<b>git maintenance stop</b> command will unregister the\ntasks with <b>launchctl</b> and delete the <b>.plist</b>\nfiles.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To create more\nadvanced customizations to your background tasks, see\nlaunchctl.plist(5) for more information.</p>\n\n<h2>BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS\n<a name=\"BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Windows does\nnot support <b>cron</b> and instead has its own system for\nscheduling background tasks. The <b>git maintenance\nstart</b> command uses the <b>schtasks</b> command to submit\ntasks to this system. You can inspect all background tasks\nusing the Task Scheduler application. The tasks added by Git\nhave names of the form <b>Git Maintenance\n(&lt;frequency&gt;)</b>. The Task Scheduler GUI has ways to\ninspect these tasks, but you can also export the tasks to\nXML files and view the details there.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that since\nGit is a console application, these background tasks create\na console window visible to the current user. This can be\nchanged manually by selecting the &quot;Run whether user is\nlogged in or not&quot; option in Task Scheduler. This change\nrequires a password input, which is why <b>git maintenance\nstart</b> does not select it by default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\ncustomize the background tasks, please rename the tasks so\nfuture calls to <b>git maintenance (start|stop)</b> do not\noverwrite your custom tasks.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SUBCOMMANDS\">SUBCOMMANDS</a>","<a href=\"#TASKS\">TASKS</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#TROUBLESHOOTING\">TROUBLESHOOTING</a>","<a href=\"#BACKGROUND MAINTENANCE ON POSIX SYSTEMS\">BACKGROUND MAINTENANCE ON POSIX SYSTEMS</a>","<a href=\"#BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS\">BACKGROUND MAINTENANCE ON LINUX SYSTEMD SYSTEMS</a>","<a href=\"#BACKGROUND MAINTENANCE ON MACOS SYSTEMS\">BACKGROUND MAINTENANCE ON MACOS SYSTEMS</a>","<a href=\"#BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS\">BACKGROUND MAINTENANCE ON WINDOWS SYSTEMS</a>","<a href=\"#GIT\">GIT</a>"]}