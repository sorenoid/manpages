{"name":"git-worktree","body":"\n\n<h1 align=\"center\">GIT-WORKTREE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-worktree -\nManage multiple working trees</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git worktree\nadd</i> [-f] [--detach] [--checkout] [--lock [--reason\n&lt;string&gt;]] [-b &lt;new-branch&gt;] &lt;path&gt;\n[&lt;commit-ish&gt;] <i><br>\ngit worktree list</i> [--porcelain] <i><br>\ngit worktree lock</i> [--reason &lt;string&gt;]\n&lt;worktree&gt; <i><br>\ngit worktree move</i> &lt;worktree&gt; &lt;new-path&gt;\n<i><br>\ngit worktree prune</i> [-n] [-v] [--expire &lt;expire&gt;]\n<i><br>\ngit worktree remove</i> [-f] &lt;worktree&gt; <i><br>\ngit worktree repair</i> [&lt;path&gt;...] <i><br>\ngit worktree unlock</i> &lt;worktree&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Manage multiple\nworking trees attached to the same repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A git\nrepository can support multiple working trees, allowing you\nto check out more than one branch at a time. With <b>git\nworktree add</b> a new working tree is associated with the\nrepository. This new working tree is called a &quot;linked\nworking tree&quot; as opposed to the &quot;main working\ntree&quot; prepared by <a href=\"https://man.page/1/git-init\">git-init(1)</a> or\n<a href=\"https://man.page/1/git-clone\">git-clone(1)</a>. A repository has one main working tree\n(if it&rsquo;s not a bare repository) and zero or more\nlinked working trees. When you are done with a linked\nworking tree, remove it with <b>git worktree remove</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In its simplest\nform, <b>git worktree add &lt;path&gt;</b> automatically\ncreates a new branch whose name is the final component of\n<b>&lt;path&gt;</b>, which is convenient if you plan to work\non a new topic. For instance, <b>git worktree add\n../hotfix</b> creates new branch <b>hotfix</b> and checks it\nout at path <b>../hotfix</b>. To instead work on an existing\nbranch in a new working tree, use <b>git worktree add\n&lt;path&gt; &lt;branch&gt;</b>. On the other hand, if you\njust plan to make some experimental changes or do testing\nwithout disturbing existing development, it is often\nconvenient to create a <i>throwaway</i> working tree not\nassociated with any branch. For instance, <b>git worktree\nadd -d &lt;path&gt;</b> creates a new working tree with a\ndetached <b>HEAD</b> at the same commit as the current\nbranch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a working\ntree is deleted without using <b>git worktree remove</b>,\nthen its associated administrative files, which reside in\nthe repository (see &quot;DETAILS&quot; below), will\neventually be removed automatically (see\n<b>gc.worktreePruneExpire</b> in <a href=\"https://man.page/1/git-config\">git-config(1)</a>), or\nyou can run <b>git worktree prune</b> in the main or any\nlinked working tree to clean up any stale administrative\nfiles.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a linked\nworking tree is stored on a portable device or network share\nwhich is not always mounted, you can prevent its\nadministrative files from being pruned by issuing the <b>git\nworktree lock</b> command, optionally specifying\n<b>--reason</b> to explain why the working tree is\nlocked.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">add\n&lt;path&gt; [&lt;commit-ish&gt;]</p>\n\n<p style=\"margin-left:17%;\">Create <b>&lt;path&gt;</b> and\ncheckout <b>&lt;commit-ish&gt;</b> into it. The new working\ndirectory is linked to the current repository, sharing\neverything except working directory specific files such as\n<b>HEAD</b>, <b>index</b>, etc. As a convenience,\n<b>&lt;commit-ish&gt;</b> may be a bare\n&quot;<b>-</b>&quot;, which is synonymous with\n<b>@{-1}</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>&lt;commit-ish&gt;</b> is a branch name (call it\n<b>&lt;branch&gt;</b>) and is not found, and neither\n<b>-b</b> nor <b>-B</b> nor <b>--detach</b> are used, but\nthere does exist a tracking branch in exactly one remote\n(call it <b>&lt;remote&gt;</b>) with a matching name, treat\nas equivalent to:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git worktree\nadd --track -b &lt;branch&gt; &lt;path&gt;\n&lt;remote&gt;/&lt;branch&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the branch\nexists in multiple remotes and one of them is named by the\n<b>checkout.defaultRemote</b> configuration variable,\nwe&rsquo;ll use that one for the purposes of disambiguation,\neven if the <b>&lt;branch&gt;</b> isn&rsquo;t unique across\nall remotes. Set it to e.g.\n<b>checkout.defaultRemote=origin</b> to always checkout\nremote branches from there if <b>&lt;branch&gt;</b> is\nambiguous but exists on the <b>origin</b> remote. See also\n<b>checkout.defaultRemote</b> in <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>&lt;commit-ish&gt;</b> is omitted and neither <b>-b</b>\nnor <b>-B</b> nor <b>--detach</b> used, then, as a\nconvenience, the new working tree is associated with a\nbranch (call it <b>&lt;branch&gt;</b>) named after\n<b>$(basename &lt;path&gt;)</b>. If <b>&lt;branch&gt;</b>\ndoesn&rsquo;t exist, a new branch based on <b>HEAD</b> is\nautomatically created as if <b>-b &lt;branch&gt;</b> was\ngiven. If <b>&lt;branch&gt;</b> does exist, it will be\nchecked out in the new working tree, if it&rsquo;s not\nchecked out anywhere else, otherwise the command will refuse\nto create the working tree (unless <b>--force</b> is\nused).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">list</p>\n\n<p style=\"margin-left:17%;\">List details of each working\ntree. The main working tree is listed first, followed by\neach of the linked working trees. The output details include\nwhether the working tree is bare, the revision currently\nchecked out, the branch currently checked out (or\n&quot;detached HEAD&quot; if none), &quot;locked&quot; if\nthe worktree is locked, &quot;prunable&quot; if the worktree\ncan be pruned by <b>prune</b> command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">lock</p>\n\n<p style=\"margin-left:17%;\">If a working tree is on a\nportable device or network share which is not always\nmounted, lock it to prevent its administrative files from\nbeing pruned automatically. This also prevents it from being\nmoved or deleted. Optionally, specify a reason for the lock\nwith <b>--reason</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">move</p>\n\n<p style=\"margin-left:17%;\">Move a working tree to a new\nlocation. Note that the main working tree or linked working\ntrees containing submodules cannot be moved with this\ncommand. (The <b>git worktree repair</b> command, however,\ncan reestablish the connection with linked working trees if\nyou move the main working tree manually.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prune</p>\n\n<p style=\"margin-left:17%;\">Prune working tree information\nin <b>$GIT_DIR/worktrees</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">remove</p>\n\n<p style=\"margin-left:17%;\">Remove a working tree. Only\nclean working trees (no untracked files and no modification\nin tracked files) can be removed. Unclean working trees or\nones with submodules can be removed with <b>--force</b>. The\nmain working tree cannot be removed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">repair\n[&lt;path&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Repair working tree\nadministrative files, if possible, if they have become\ncorrupted or outdated due to external factors.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For instance,\nif the main working tree (or bare repository) is moved,\nlinked working trees will be unable to locate it. Running\n<b>repair</b> in the main working tree will reestablish the\nconnection from linked working trees back to the main\nworking tree.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Similarly, if a\nlinked working tree is moved without using <b>git worktree\nmove</b>, the main working tree (or bare repository) will be\nunable to locate it. Running <b>repair</b> within the\nrecently-moved working tree will reestablish the connection.\nIf multiple linked working trees are moved, running\n<b>repair</b> from any working tree with each tree&rsquo;s\nnew <b>&lt;path&gt;</b> as an argument, will reestablish the\nconnection to all the specified paths.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If both the\nmain working tree and linked working trees have been moved\nmanually, then running <b>repair</b> in the main working\ntree and specifying the new <b>&lt;path&gt;</b> of each\nlinked working tree will reestablish all connections in both\ndirections.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">unlock</p>\n\n<p style=\"margin-left:17%;\">Unlock a working tree, allowing\nit to be pruned, moved or deleted.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f, --force</p>\n\n<p style=\"margin-left:17%;\">By default, <b>add</b> refuses\nto create a new working tree when <b>&lt;commit-ish&gt;</b>\nis a branch name and is already checked out by another\nworking tree, or if <b>&lt;path&gt;</b> is already assigned\nto some working tree but is missing (for instance, if\n<b>&lt;path&gt;</b> was deleted manually). This option\noverrides these safeguards. To add a missing but locked\nworking tree path, specify <b>--force</b> twice.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>move</b>\nrefuses to move a locked working tree unless <b>--force</b>\nis specified twice. If the destination is already assigned\nto some other working tree but is missing (for instance, if\n<b>&lt;new-path&gt;</b> was deleted manually), then\n<b>--force</b> allows the move to proceed; use\n<b>--force</b> twice if the destination is locked.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>remove</b>\nrefuses to remove an unclean working tree unless\n<b>--force</b> is used. To remove a locked working tree,\nspecify <b>--force</b> twice.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-b\n&lt;new-branch&gt;, -B &lt;new-branch&gt;</p>\n\n<p style=\"margin-left:17%;\">With <b>add</b>, create a new\nbranch named <b>&lt;new-branch&gt;</b> starting at\n<b>&lt;commit-ish&gt;</b>, and check out\n<b>&lt;new-branch&gt;</b> into the new working tree. If\n<b>&lt;commit-ish&gt;</b> is omitted, it defaults to\n<b>HEAD</b>. By default, <b>-b</b> refuses to create a new\nbranch if it already exists. <b>-B</b> overrides this\nsafeguard, resetting <b>&lt;new-branch&gt;</b> to\n<b>&lt;commit-ish&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-d,\n--detach</p>\n\n<p style=\"margin-left:17%;\">With <b>add</b>, detach\n<b>HEAD</b> in the new working tree. See &quot;DETACHED\nHEAD&quot; in <a href=\"https://man.page/1/git-checkout\">git-checkout(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]checkout</p>\n\n<p style=\"margin-left:17%;\">By default, <b>add</b> checks\nout <b>&lt;commit-ish&gt;</b>, however, <b>--no-checkout</b>\ncan be used to suppress checkout in order to make\ncustomizations, such as configuring sparse-checkout. See\n&quot;Sparse checkout&quot; in <a href=\"https://man.page/1/git-read-tree\">git-read-tree(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]guess-remote</p>\n\n<p style=\"margin-left:17%;\">With <b>worktree add\n&lt;path&gt;</b>, without <b>&lt;commit-ish&gt;</b>, instead\nof creating a new branch from <b>HEAD</b>, if there exists a\ntracking branch in exactly one remote matching the basename\nof <b>&lt;path&gt;</b>, base the new branch on the\nremote-tracking branch, and mark the remote-tracking branch\nas &quot;upstream&quot; from the new branch.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This can also\nbe set up as the default behaviour by using the\n<b>worktree.guessRemote</b> config option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]track</p>\n\n<p style=\"margin-left:17%;\">When creating a new branch, if\n<b>&lt;commit-ish&gt;</b> is a branch, mark it as\n&quot;upstream&quot; from the new branch. This is the\ndefault if <b>&lt;commit-ish&gt;</b> is a remote-tracking\nbranch. See <b>--track</b> in <a href=\"https://man.page/1/git-branch\">git-branch(1)</a> for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--lock</p>\n\n<p style=\"margin-left:17%;\">Keep the working tree locked\nafter creation. This is the equivalent of <b>git worktree\nlock</b> after <b>git worktree add</b>, but without a race\ncondition.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--dry-run</p>\n\n<p style=\"margin-left:17%;\">With <b>prune</b>, do not\nremove anything; just report what it would remove.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--porcelain</p>\n\n<p style=\"margin-left:17%;\">With <b>list</b>, output in an\neasy-to-parse format for scripts. This format will remain\nstable across Git versions and regardless of user\nconfiguration. See below for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">With <b>add</b>, suppress\nfeedback messages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v,\n--verbose</p>\n\n<p style=\"margin-left:17%;\">With <b>prune</b>, report all\nremovals.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>list</b>, output additional information about worktrees\n(see below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--expire\n&lt;time&gt;</p>\n\n<p style=\"margin-left:17%;\">With <b>prune</b>, only expire\nunused working trees older than <b>&lt;time&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>list</b>, annotate missing working trees as prunable if\nthey are older than <b>&lt;time&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reason\n&lt;string&gt;</p>\n\n<p style=\"margin-left:17%;\">With <b>lock</b> or with <b>add\n--lock</b>, an explanation why the working tree is\nlocked.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;worktree&gt;</p>\n\n<p style=\"margin-left:17%;\">Working trees can be identified\nby path, either relative or absolute.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the last\npath components in the working tree&rsquo;s path is unique\namong working trees, it can be used to identify a working\ntree. For example if you only have two working trees, at\n<b>/abc/def/ghi</b> and <b>/abc/def/ggg</b>, then <b>ghi</b>\nor <b>def/ghi</b> is enough to point to the former working\ntree.</p>\n\n<h2>REFS\n<a name=\"REFS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In multiple\nworking trees, some refs may be shared between all working\ntrees and some refs are local. One example is <b>HEAD</b>\nwhich is different for each working tree. This section is\nabout the sharing rules and how to access refs of one\nworking tree from another.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general, all\npseudo refs are per working tree and all refs starting with\n<b>refs/</b> are shared. Pseudo refs are ones like\n<b>HEAD</b> which are directly under <b>$GIT_DIR</b> instead\nof inside <b>$GIT_DIR/refs</b>. There are exceptions,\nhowever: refs inside <b>refs/bisect</b> and\n<b>refs/worktree</b> are not shared.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Refs that are\nper working tree can still be accessed from another working\ntree via two special paths, <b>main-worktree</b> and\n<b>worktrees</b>. The former gives access to per-working\ntree refs of the main working tree, while the latter to all\nlinked working trees.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\n<b>main-worktree/HEAD</b> or\n<b>main-worktree/refs/bisect/good</b> resolve to the same\nvalue as the main working tree&rsquo;s <b>HEAD</b> and\n<b>refs/bisect/good</b> respectively. Similarly,\n<b>worktrees/foo/HEAD</b> or\n<b>worktrees/bar/refs/bisect/bad</b> are the same as\n<b>$GIT_COMMON_DIR/worktrees/foo/HEAD</b> and\n<b>$GIT_COMMON_DIR/worktrees/bar/refs/bisect/bad</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To access refs,\nit&rsquo;s best not to look inside <b>$GIT_DIR</b> directly.\nInstead use commands such as <a href=\"https://man.page/1/git-rev-parse\">git-rev-parse(1)</a> or\n<a href=\"https://man.page/1/git-update-ref\">git-update-ref(1)</a> which will handle refs\ncorrectly.</p>\n\n<h2>CONFIGURATION FILE\n<a name=\"CONFIGURATION FILE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, the\nrepository <b>config</b> file is shared across all working\ntrees. If the config variables <b>core.bare</b> or\n<b>core.worktree</b> are already present in the config file,\nthey will be applied to the main working trees only.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\nhave configuration specific to working trees, you can turn\non the <b>worktreeConfig</b> extension, e.g.:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git config\nextensions.worktreeConfig true</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this mode,\nspecific configuration stays in the path pointed by <b>git\nrev-parse --git-path config.worktree</b>. You can add or\nupdate configuration in this file with <b>git config\n--worktree</b>. Older Git versions will refuse to access\nrepositories with this extension.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that in\nthis file, the exception for <b>core.bare</b> and\n<b>core.worktree</b> is gone. If they exist in\n<b>$GIT_DIR/config</b>, you must move them to the\n<b>config.worktree</b> of the main working tree. You may\nalso take this opportunity to review and move other\nconfiguration that you do not want to share to all working\ntrees:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<b>core.worktree</b> and <b>core.bare</b> should never be\nshared</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<b>core.sparseCheckout</b> is recommended per working tree,\nunless you are sure you always use sparse checkout for all\nworking trees.</p>\n\n<h2>DETAILS\n<a name=\"DETAILS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each linked\nworking tree has a private sub-directory in the\nrepository&rsquo;s <b>$GIT_DIR/worktrees</b> directory. The\nprivate sub-directory&rsquo;s name is usually the base name\nof the linked working tree&rsquo;s path, possibly appended\nwith a number to make it unique. For example, when\n<b>$GIT_DIR=/path/main/.git</b> the command <b>git worktree\nadd /path/other/test-next next</b> creates the linked\nworking tree in <b>/path/other/test-next</b> and also\ncreates a <b>$GIT_DIR/worktrees/test-next</b> directory (or\n<b>$GIT_DIR/worktrees/test-next1</b> if <b>test-next</b> is\nalready taken).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Within a linked\nworking tree, <b>$GIT_DIR</b> is set to point to this\nprivate directory (e.g.\n<b>/path/main/.git/worktrees/test-next</b> in the example)\nand <b>$GIT_COMMON_DIR</b> is set to point back to the main\nworking tree&rsquo;s <b>$GIT_DIR</b> (e.g.\n<b>/path/main/.git</b>). These settings are made in a\n<b>.git</b> file located at the top directory of the linked\nworking tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Path resolution\nvia <b>git rev-parse --git-path</b> uses either\n<b>$GIT_DIR</b> or <b>$GIT_COMMON_DIR</b> depending on the\npath. For example, in the linked working tree <b>git\nrev-parse --git-path HEAD</b> returns\n<b>/path/main/.git/worktrees/test-next/HEAD</b> (not\n<b>/path/other/test-next/.git/HEAD</b> or\n<b>/path/main/.git/HEAD</b>) while <b>git rev-parse\n--git-path refs/heads/master</b> uses <b>$GIT_COMMON_DIR</b>\nand returns <b>/path/main/.git/refs/heads/master</b>, since\nrefs are shared across all working trees, except\n<b>refs/bisect</b> and <b>refs/worktree</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/5/gitrepository-layout\">gitrepository-layout(5)</a> for more information. The\nrule of thumb is do not make any assumption about whether a\npath belongs to <b>$GIT_DIR</b> or <b>$GIT_COMMON_DIR</b>\nwhen you need to directly access something inside\n<b>$GIT_DIR</b>. Use <b>git rev-parse --git-path</b> to get\nthe final path.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you manually\nmove a linked working tree, you need to update the\n<b>gitdir</b> file in the entry&rsquo;s directory. For\nexample, if a linked working tree is moved to\n<b>/newpath/test-next</b> and its <b>.git</b> file points to\n<b>/path/main/.git/worktrees/test-next</b>, then update\n<b>/path/main/.git/worktrees/test-next/gitdir</b> to\nreference <b>/newpath/test-next</b> instead. Better yet, run\n<b>git worktree repair</b> to reestablish the connection\nautomatically.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To prevent a\n<b>$GIT_DIR/worktrees</b> entry from being pruned (which can\nbe useful in some situations, such as when the entry&rsquo;s\nworking tree is stored on a portable device), use the <b>git\nworktree lock</b> command, which adds a file named\n<b>locked</b> to the entry&rsquo;s directory. The file\ncontains the reason in plain text. For example, if a linked\nworking tree&rsquo;s <b>.git</b> file points to\n<b>/path/main/.git/worktrees/test-next</b> then a file named\n<b>/path/main/.git/worktrees/test-next/locked</b> will\nprevent the <b>test-next</b> entry from being pruned. See\n<a href=\"https://man.page/5/gitrepository-layout\">gitrepository-layout(5)</a> for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>extensions.worktreeConfig</b> is enabled, the config file\n<b>.git/worktrees/&lt;id&gt;/config.worktree</b> is read\nafter <b>.git/config</b> is.</p>\n\n<h2>LIST OUTPUT FORMAT\n<a name=\"LIST OUTPUT FORMAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>worktree\nlist</b> command has two output formats. The default format\nshows the details on a single line with columns. For\nexample:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git worktree\nlist <br>\n/path/to/bare-source (bare) <br>\n/path/to/linked-worktree abcd1234 [master] <br>\n/path/to/other-linked-worktree 1234abc (detached HEAD)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nalso shows annotations for each working tree, according to\nits state. These annotations are:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<b>locked</b>, if the working tree is locked.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<b>prunable</b>, if the working tree can be pruned via\n<b>git worktree prune</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git worktree\nlist <br>\n/path/to/linked-worktree abcd1234 [master] <br>\n/path/to/locked-worktree acbd5678 (brancha) locked <br>\n/path/to/prunable-worktree 5678abc (detached HEAD)\nprunable</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For these\nannotations, a reason might also be available and this can\nbe seen using the verbose mode. The annotation is then moved\nto the next line indented followed by the additional\ninformation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git worktree\nlist --verbose <br>\n/path/to/linked-worktree abcd1234 [master] <br>\n/path/to/locked-worktree-no-reason abcd5678 (detached HEAD)\nlocked <br>\n/path/to/locked-worktree-with-reason 1234abcd (brancha) <br>\nlocked: working tree path is mounted on a portable device\n<br>\n/path/to/prunable-worktree 5678abc1 (detached HEAD) <br>\nprunable: gitdir file points to non-existent location</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nannotation is moved to the next line if the additional\ninformation is available, otherwise it stays on the same\nline as the working tree itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Porcelain\nFormat</b> <br>\nThe porcelain format has a line per attribute. Attributes\nare listed with a label and value separated by a single\nspace. Boolean attributes (like <b>bare</b> and\n<b>detached</b>) are listed as a label only, and are present\nonly if the value is true. Some attributes (like\n<b>locked</b>) can be listed as a label only or with a value\ndepending upon whether a reason is available. The first\nattribute of a working tree is always <b>worktree</b>, an\nempty line indicates the end of the record. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git worktree\nlist --porcelain <br>\nworktree /path/to/bare-source <br>\nbare</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">worktree\n/path/to/linked-worktree <br>\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234 <br>\nbranch refs/heads/master</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">worktree\n/path/to/other-linked-worktree <br>\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a <br>\ndetached</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">worktree\n/path/to/linked-worktree-locked-no-reason <br>\nHEAD 5678abc5678abc5678abc5678abc5678abc5678c <br>\nbranch refs/heads/locked-no-reason <br>\nlocked</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">worktree\n/path/to/linked-worktree-locked-with-reason <br>\nHEAD 3456def3456def3456def3456def3456def3456b <br>\nbranch refs/heads/locked-with-reason <br>\nlocked reason why is locked</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">worktree\n/path/to/linked-worktree-prunable <br>\nHEAD 1233def1234def1234def1234def1234def1234b <br>\ndetached <br>\nprunable gitdir file points to non-existent location</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the lock\nreason contains &quot;unusual&quot; characters such as\nnewline, they are escaped and the entire reason is quoted as\nexplained for the configuration variable\n<b>core.quotePath</b> (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>). For\nExample:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git worktree\nlist --porcelain <br>\n... <br>\nlocked &quot;reason\\nwhy is locked&quot; <br>\n...</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You are in the\nmiddle of a refactoring session and your boss comes in and\ndemands that you fix something immediately. You might\ntypically use <a href=\"https://man.page/1/git-stash\">git-stash(1)</a> to store your changes away\ntemporarily, however, your working tree is in such a state\nof disarray (with new, moved, and removed files, and other\nbits and pieces strewn around) that you don&rsquo;t want to\nrisk disturbing any of it. Instead, you create a temporary\nlinked working tree to make the emergency fix, remove it\nwhen done, and then resume your earlier refactoring\nsession.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git worktree\nadd -b emergency-fix ../temp master <br>\n$ pushd ../temp <br>\n# ... hack hack hack ... <br>\n$ git commit -a -m 'emergency fix for boss' <br>\n$ popd <br>\n$ git worktree remove ../temp</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Multiple\ncheckout in general is still experimental, and the support\nfor submodules is incomplete. It is NOT recommended to make\nmultiple checkouts of a superproject.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#REFS\">REFS</a>","<a href=\"#CONFIGURATION FILE\">CONFIGURATION FILE</a>","<a href=\"#DETAILS\">DETAILS</a>","<a href=\"#LIST OUTPUT FORMAT\">LIST OUTPUT FORMAT</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#GIT\">GIT</a>"]}