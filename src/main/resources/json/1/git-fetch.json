{"name":"git-fetch","body":"\n\n<h1 align=\"center\">GIT-FETCH</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-fetch -\nDownload objects and refs from another repository</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nfetch</i> [&lt;options&gt;] [&lt;repository&gt;\n[&lt;refspec&gt;...]] <i><br>\ngit fetch</i> [&lt;options&gt;] &lt;group&gt; <i><br>\ngit fetch</i> --multiple [&lt;options&gt;]\n[(&lt;repository&gt; | &lt;group&gt;)...] <i><br>\ngit fetch</i> --all [&lt;options&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Fetch branches\nand/or tags (collectively, &quot;refs&quot;) from one or\nmore other repositories, along with the objects necessary to\ncomplete their histories. Remote-tracking branches are\nupdated (see the description of &lt;refspec&gt; below for\nways to control this behavior).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, any\ntag that points into the histories being fetched is also\nfetched; the effect is to fetch tags that point at branches\nthat you are interested in. This default behavior can be\nchanged by using the --tags or --no-tags options or by\nconfiguring remote.&lt;name&gt;.tagOpt. By using a refspec\nthat fetches tags explicitly, you can fetch tags that do not\npoint into branches you are interested in as well.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nfetch</i> can fetch from either a single named repository or\nURL, or from several repositories at once if &lt;group&gt;\nis given and there is a remotes.&lt;group&gt; entry in the\nconfiguration file. (See <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When no remote\nis specified, by default the <b>origin</b> remote will be\nused, unless there&rsquo;s an upstream branch configured for\nthe current branch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The names of\nrefs that are fetched, together with the object names they\npoint at, are written to <b>.git/FETCH_HEAD</b>. This\ninformation may be used by scripts or other git commands,\nsuch as <a href=\"https://man.page/1/git-pull\">git-pull(1)</a>.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all</p>\n\n<p style=\"margin-left:17%;\">Fetch all remotes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-a,\n--append</p>\n\n<p style=\"margin-left:17%;\">Append ref names and object\nnames of fetched refs to the existing contents of\n<b>.git/FETCH_HEAD</b>. Without this option old data in\n<b>.git/FETCH_HEAD</b> will be overwritten.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--atomic</p>\n\n<p style=\"margin-left:17%;\">Use an atomic transaction to\nupdate local refs. Either all refs are updated, or on error,\nno refs are updated.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--depth=&lt;depth&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit fetching to the specified\nnumber of commits from the tip of each remote branch\nhistory. If fetching to a <i>shallow</i> repository created\nby <b>git clone</b> with <b>--depth=&lt;depth&gt;</b> option\n(see <a href=\"https://man.page/1/git-clone\">git-clone(1)</a>), deepen or shorten the history to\nthe specified number of commits. Tags for the deepened\ncommits are not fetched.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--deepen=&lt;depth&gt;</p>\n\n<p style=\"margin-left:17%;\">Similar to --depth, except it\nspecifies the number of commits from the current shallow\nboundary instead of from the tip of each remote branch\nhistory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--shallow-since=&lt;date&gt;</p>\n\n<p style=\"margin-left:17%;\">Deepen or shorten the history\nof a shallow repository to include all reachable commits\nafter &lt;date&gt;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--shallow-exclude=&lt;revision&gt;</p>\n\n<p style=\"margin-left:17%;\">Deepen or shorten the history\nof a shallow repository to exclude commits reachable from a\nspecified remote branch or tag. This option can be specified\nmultiple times.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--unshallow</p>\n\n<p style=\"margin-left:17%;\">If the source repository is\ncomplete, convert a shallow repository to a complete one,\nremoving all the limitations imposed by shallow\nrepositories.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the source\nrepository is shallow, fetch as much as possible so that the\ncurrent repository has the same history as the source\nrepository.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--update-shallow</p>\n\n<p style=\"margin-left:17%;\">By default when fetching from a\nshallow repository, <b>git fetch</b> refuses refs that\nrequire updating .git/shallow. This option updates\n.git/shallow and accept such refs.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--negotiation-tip=&lt;commit|glob&gt;</p>\n\n<p style=\"margin-left:17%;\">By default, Git will report, to\nthe server, commits reachable from all local refs to find\ncommon commits in an attempt to reduce the size of the\nto-be-received packfile. If specified, Git will only report\ncommits reachable from the given tips. This is useful to\nspeed up fetches when the user knows which local ref is\nlikely to have commits in common with the upstream ref being\nfetched.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option may\nbe specified more than once; if so, Git will report commits\nreachable from any of the given commits.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The argument to\nthis option may be a glob on ref names, a ref, or the\n(possibly abbreviated) SHA-1 of a commit. Specifying a glob\nis equivalent to specifying this option multiple times, one\nfor each matching ref name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See also the\n<b>fetch.negotiationAlgorithm</b> and <b>push.negotiate</b>\nconfiguration variables documented in <a href=\"https://man.page/1/git-config\">git-config(1)</a>,\nand the <b>--negotiate-only</b> option below.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--negotiate-only</p>\n\n<p style=\"margin-left:17%;\">Do not fetch anything from the\nserver, and instead print the ancestors of the provided\n<b>--negotiation-tip=*</b> arguments, which we have in\ncommon with the server.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Internally this\nis used to implement the <b>push.negotiate</b> option, see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dry-run</p>\n\n<p style=\"margin-left:17%;\">Show what would be done,\nwithout making any changes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]write-fetch-head</p>\n\n<p style=\"margin-left:17%;\">Write the list of remote refs\nfetched in the <b>FETCH_HEAD</b> file directly under\n<b>$GIT_DIR</b>. This is the default. Passing\n<b>--no-write-fetch-head</b> from the command line tells Git\nnot to write the file. Under <b>--dry-run</b> option, the\nfile is never written.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f, --force</p>\n\n<p style=\"margin-left:17%;\">When <i>git fetch</i> is used\nwith <b>&lt;src&gt;:&lt;dst&gt;</b> refspec it may refuse to\nupdate the local branch as discussed in the\n<b>&lt;refspec&gt;</b> part below. This option overrides\nthat check.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-k, --keep</p>\n\n<p style=\"margin-left:17%;\">Keep downloaded pack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--multiple</p>\n\n<p style=\"margin-left:17%;\">Allow several\n&lt;repository&gt; and &lt;group&gt; arguments to be\nspecified. No &lt;refspec&gt;s may be specified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]auto-maintenance,\n--[no-]auto-gc</p>\n\n<p style=\"margin-left:17%;\">Run <b>git maintenance run\n--auto</b> at the end to perform automatic repository\nmaintenance if needed. (<b>--[no-]auto-gc</b> is a synonym.)\nThis is enabled by default.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]write-commit-graph</p>\n\n<p style=\"margin-left:17%;\">Write a commit-graph after\nfetching. This overrides the config setting\n<b>fetch.writeCommitGraph</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--prefetch</p>\n\n<p style=\"margin-left:17%;\">Modify the configured refspec\nto place all refs into the <b>refs/prefetch/</b> namespace.\nSee the <b>prefetch</b> task in\n<a href=\"https://man.page/1/git-maintenance\">git-maintenance(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-p, --prune</p>\n\n<p style=\"margin-left:17%;\">Before fetching, remove any\nremote-tracking references that no longer exist on the\nremote. Tags are not subject to pruning if they are fetched\nonly because of the default tag auto-following or due to a\n--tags option. However, if tags are fetched due to an\nexplicit refspec (either on the command line or in the\nremote configuration, for example if the remote was cloned\nwith the --mirror option), then they are also subject to\npruning. Supplying <b>--prune-tags</b> is a shorthand for\nproviding the tag refspec.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the PRUNING\nsection below for more details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-P,\n--prune-tags</p>\n\n<p style=\"margin-left:17%;\">Before fetching, remove any\nlocal tags that no longer exist on the remote if\n<b>--prune</b> is enabled. This option should be used more\ncarefully, unlike <b>--prune</b> it will remove any local\nreferences (local tags) that have been created. This option\nis a shorthand for providing the explicit tag refspec along\nwith <b>--prune</b>, see the discussion about that in its\ndocumentation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the PRUNING\nsection below for more details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--no-tags</p>\n\n<p style=\"margin-left:17%;\">By default, tags that point at\nobjects that are downloaded from the remote repository are\nfetched and stored locally. This option disables this\nautomatic tag following. The default behavior for a remote\nmay be specified with the remote.&lt;name&gt;.tagOpt\nsetting. See <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--refmap=&lt;refspec&gt;</p>\n\n<p style=\"margin-left:17%;\">When fetching refs listed on\nthe command line, use the specified refspec (can be given\nmore than once) to map the refs to remote-tracking branches,\ninstead of the values of <b>remote.*.fetch</b> configuration\nvariables for the remote repository. Providing an empty\n<b>&lt;refspec&gt;</b> to the <b>--refmap</b> option causes\nGit to ignore the configured refspecs and rely entirely on\nthe refspecs supplied as command-line arguments. See section\non &quot;Configured Remote-tracking Branches&quot; for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-t, --tags</p>\n\n<p style=\"margin-left:17%;\">Fetch all tags from the remote\n(i.e., fetch remote tags <b>refs/tags/*</b> into local tags\nwith the same name), in addition to whatever else would\notherwise be fetched. Using this option alone does not\nsubject tags to pruning, even if --prune is used (though\ntags may be pruned anyway if they are also the destination\nof an explicit refspec; see <b>--prune</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--recurse-submodules[=yes|on-demand|no]</p>\n\n<p style=\"margin-left:17%;\">This option controls if and\nunder what conditions new commits of populated submodules\nshould be fetched too. It can be used as a boolean option to\ncompletely disable recursion when set to <i>no</i> or to\nunconditionally recurse into all populated submodules when\nset to <i>yes</i>, which is the default when this option is\nused without any value. Use <i>on-demand</i> to only recurse\ninto a populated submodule when the superproject retrieves a\ncommit that updates the submodule&rsquo;s reference to a\ncommit that isn&rsquo;t already in the local submodule\nclone. By default, <i>on-demand</i> is used, unless\n<b>fetch.recurseSubmodules</b> is set (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-j,\n--jobs=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Number of parallel children to\nbe used for all forms of fetching.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\n<b>--multiple</b> option was specified, the different\nremotes will be fetched in parallel. If multiple submodules\nare fetched, they will be fetched in parallel. To control\nthem independently, use the config settings\n<b>fetch.parallel</b> and <b>submodule.fetchJobs</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Typically,\nparallel recursive and multi-remote fetches will be faster.\nBy default fetches are performed sequentially, not in\nparallel.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-recurse-submodules</p>\n\n<p style=\"margin-left:17%;\">Disable recursive fetching of\nsubmodules (this has the same effect as using the\n<b>--recurse-submodules=no</b> option).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--set-upstream</p>\n\n<p style=\"margin-left:17%;\">If the remote is fetched\nsuccessfully, add upstream (tracking) reference, used by\nargument-less <a href=\"https://man.page/1/git-pull\">git-pull(1)</a> and other commands. For\nmore information, see <b>branch.&lt;name&gt;.merge</b> and\n<b>branch.&lt;name&gt;.remote</b> in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--submodule-prefix=&lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">Prepend &lt;path&gt; to paths\nprinted in informative messages such as &quot;Fetching\nsubmodule foo&quot;. This option is used internally when\nrecursing over submodules.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--recurse-submodules-default=[yes|on-demand]</p>\n\n<p style=\"margin-left:17%;\">This option is used internally\nto temporarily provide a non-negative default value for the\n--recurse-submodules option. All other methods of\nconfiguring fetch&rsquo;s submodule recursion (such as\nsettings in <a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a> and <a href=\"https://man.page/1/git-config\">git-config(1)</a>)\noverride this option, as does specifying\n--[no-]recurse-submodules directly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-u,\n--update-head-ok</p>\n\n<p style=\"margin-left:17%;\">By default <i>git fetch</i>\nrefuses to update the head which corresponds to the current\nbranch. This flag disables the check. This is purely for the\ninternal use for <i>git pull</i> to communicate with <i>git\nfetch</i>, and unless you are implementing your own\nPorcelain you are not supposed to use it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--upload-pack\n&lt;upload-pack&gt;</p>\n\n<p style=\"margin-left:17%;\">When given, and the repository\nto fetch from is handled by <i>git fetch-pack</i>,\n<b>--exec=&lt;upload-pack&gt;</b> is passed to the command\nto specify non-default path for the command run on the other\nend.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">Pass --quiet to git-fetch-pack\nand silence any other internally used git commands. Progress\nis not reported to the standard error stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v,\n--verbose</p>\n\n<p style=\"margin-left:17%;\">Be verbose.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--progress</p>\n\n<p style=\"margin-left:17%;\">Progress status is reported on\nthe standard error stream by default when it is attached to\na terminal, unless -q is specified. This flag forces\nprogress status even if the standard error stream is not\ndirected to a terminal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-o\n&lt;option&gt;, --server-option=&lt;option&gt;</p>\n\n<p style=\"margin-left:17%;\">Transmit the given string to\nthe server when communicating using protocol version 2. The\ngiven string must not contain a NUL or LF character. The\nserver&rsquo;s handling of server options, including unknown\nones, is server-specific. When multiple\n<b>--server-option=&lt;option&gt;</b> are given, they are\nall sent to the other side in the order listed on the\ncommand line.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-forced-updates</p>\n\n<p style=\"margin-left:17%;\">By default, git checks if a\nbranch is force-updated during fetch. This can be disabled\nthrough fetch.showForcedUpdates, but the\n--show-forced-updates option guarantees this check occurs.\nSee <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-show-forced-updates</p>\n\n<p style=\"margin-left:17%;\">By default, git checks if a\nbranch is force-updated during fetch. Pass\n--no-show-forced-updates or set fetch.showForcedUpdates to\nfalse to skip this check for performance reasons. If used\nduring <i>git-pull</i> the --ff-only option will still check\nfor forced updates before attempting a fast-forward update.\nSee <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-4, --ipv4</p>\n\n<p style=\"margin-left:17%;\">Use IPv4 addresses only,\nignoring IPv6 addresses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-6, --ipv6</p>\n\n<p style=\"margin-left:17%;\">Use IPv6 addresses only,\nignoring IPv4 addresses.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;repository&gt;</p>\n\n<p style=\"margin-left:17%;\">The &quot;remote&quot;\nrepository that is the source of a fetch or pull operation.\nThis parameter can be either a URL (see the section GIT URLS\nbelow) or the name of a remote (see the section REMOTES\nbelow).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;group&gt;</p>\n\n<p style=\"margin-left:17%;\">A name referring to a list of\nrepositories as the value of remotes.&lt;group&gt; in the\nconfiguration file. (See <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;refspec&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies which refs to fetch\nand which local refs to update. When no &lt;refspec&gt;s\nappear on the command line, the refs to fetch are read from\n<b>remote.&lt;repository&gt;.fetch</b> variables instead\n(see CONFIGURED REMOTE-TRACKING BRANCHES below).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The format of a\n&lt;refspec&gt; parameter is an optional plus <b>+</b>,\nfollowed by the source &lt;src&gt;, followed by a colon\n<b>:</b>, followed by the destination ref &lt;dst&gt;. The\ncolon can be omitted when &lt;dst&gt; is empty. &lt;src&gt;\nis typically a ref, but it can also be a fully spelled hex\nobject name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A\n&lt;refspec&gt; may contain a <b>*</b> in its &lt;src&gt; to\nindicate a simple pattern match. Such a refspec functions\nlike a glob that matches any ref with the same prefix. A\npattern &lt;refspec&gt; must have a <b>*</b> in both the\n&lt;src&gt; and &lt;dst&gt;. It will map refs to the\ndestination by replacing the <b>*</b> with the contents\nmatched from the source.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a refspec is\nprefixed by <b>^</b>, it will be interpreted as a negative\nrefspec. Rather than specifying which refs to fetch or which\nlocal refs to update, such a refspec will instead specify\nrefs to exclude. A ref will be considered to match if it\nmatches at least one positive refspec, and does not match\nany negative refspec. Negative refspecs can be useful to\nrestrict the scope of a pattern refspec so that it will not\ninclude specific refs. Negative refspecs can themselves be\npattern refspecs. However, they may only contain a\n&lt;src&gt; and do not specify a &lt;dst&gt;. Fully spelled\nout hex object names are also not supported.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>tag\n&lt;tag&gt;</b> means the same as\n<b>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</b>; it\nrequests fetching everything up to the given tag.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The remote ref\nthat matches &lt;src&gt; is fetched, and if &lt;dst&gt; is\nnot an empty string, an attempt is made to update the local\nref that matches it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Whether that\nupdate is allowed without <b>--force</b> depends on the ref\nnamespace it&rsquo;s being fetched to, the type of object\nbeing fetched, and whether the update is considered to be a\nfast-forward. Generally, the same rules apply for fetching\nas when pushing, see the <b>&lt;refspec&gt;...</b> section\nof <a href=\"https://man.page/1/git-push\">git-push(1)</a> for what those are. Exceptions to\nthose rules particular to <i>git fetch</i> are noted\nbelow.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Until Git\nversion 2.20, and unlike when pushing with\n<a href=\"https://man.page/1/git-push\">git-push(1)</a>, any updates to <b>refs/tags/*</b> would\nbe accepted without <b>+</b> in the refspec (or\n<b>--force</b>). When fetching, we promiscuously considered\nall tag updates from a remote to be forced fetches. Since\nGit version 2.20, fetching to update <b>refs/tags/*</b>\nworks the same way as when pushing. I.e. any updates will be\nrejected without <b>+</b> in the refspec (or\n<b>--force</b>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unlike when\npushing with <a href=\"https://man.page/1/git-push\">git-push(1)</a>, any updates outside of\n<b>refs/{tags,heads}/*</b> will be accepted without <b>+</b>\nin the refspec (or <b>--force</b>), whether that&rsquo;s\nswapping e.g. a tree object for a blob, or a commit for\nanother commit that&rsquo;s doesn&rsquo;t have the previous\ncommit as an ancestor etc.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unlike when\npushing with <a href=\"https://man.page/1/git-push\">git-push(1)</a>, there is no configuration\nwhich&rsquo;ll amend these rules, and nothing like a\n<b>pre-fetch</b> hook analogous to the <b>pre-receive</b>\nhook.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As with pushing\nwith <a href=\"https://man.page/1/git-push\">git-push(1)</a>, all of the rules described above\nabout what&rsquo;s not allowed as an update can be\noverridden by adding an the optional leading <b>+</b> to a\nrefspec (or using <b>--force</b> command line option). The\nonly exception to this is that no amount of forcing will\nmake the <b>refs/heads/*</b> namespace accept a non-commit\nobject.</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nWhen the remote branch you want to fetch is known to be\nrewound and rebased regularly, it is expected that its new\ntip will not be descendant of its previous tip (as stored in\nyour remote-tracking branch the last time you fetched). You\nwould want to use the <b>+</b> sign to indicate\nnon-fast-forward updates will be needed for such branches.\nThere is no way to determine or declare that a branch will\nbe made available in a repository with this behavior; the\npulling user simply must know this is the expected usage\npattern for a branch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>--stdin</big></p>\n\n<p style=\"margin-left:17%;\"><big>Read refspecs, one per\nline, from stdin in addition to those provided as arguments.\nThe &quot;tag &lt;name&gt;&quot; format is not\nsupported.</big></p>\n\n<h2>GIT URLS\n<a name=\"GIT URLS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>In\ngeneral, URLs contain information about the transport\nprotocol, the address of the remote server, and the path to\nthe repository. Depending on the transport protocol, some of\nthis information may be absent.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Git\nsupports ssh, git, http, and https protocols (in addition,\nftp, and ftps can be used for fetching, but this is\ninefficient and deprecated; do not use it).</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The native\ntransport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\nfollowing syntaxes may be used with them:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nssh://[user@]host.xz[:port]/path/to/repo.git/</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\ngit://host.xz[:port]/path/to/repo.git/</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nhttp[s]://host.xz[:port]/path/to/repo.git/</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nftp[s]://host.xz[:port]/path/to/repo.git/</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>An\nalternative scp-like syntax may also be used with the ssh\nprotocol:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\n[user@]host.xz:path/to/repo.git/</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>This\nsyntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that\ncontains a colon. For example the local path <b>foo:bar</b>\ncould be specified as an absolute path or <b>./foo:bar</b>\nto avoid being misinterpreted as an ssh url.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The ssh\nand git protocols additionally support ~username\nexpansion:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\ngit://host.xz[:port]/~[user]/path/to/repo.git/</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\n[user@]host.xz:/~[user]/path/to/repo.git/</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>For local\nrepositories, also supported by Git natively, the following\nsyntaxes may be used:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\n/path/to/repo.git/</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nfile:///path/to/repo.git/</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>These two\nsyntaxes are mostly equivalent, except when cloning, when\nthe former implies --local option. See <a href=\"https://man.page/1/git-clone\">git-clone(1)</a>\nfor details.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>git\nclone</i>, <i>git fetch</i> and <i>git pull</i>, but not\n<i>git push</i>, will also accept a suitable bundle file.\nSee <a href=\"https://man.page/1/git-bundle\">git-bundle(1)</a>.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>When Git\ndoesn&rsquo;t know how to handle a certain transport\nprotocol, it attempts to use the\n<i>remote-&lt;transport&gt;</i> remote helper, if one\nexists. To explicitly request a remote helper, the following\nsyntax may be used:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\n&lt;transport&gt;::&lt;address&gt;</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>where\n&lt;address&gt; may be a path, a server and path, or an\narbitrary URL-like string recognized by the specific remote\nhelper being invoked. See <a href=\"https://man.page/7/gitremote-helpers\">gitremote-helpers(7)</a> for\ndetails.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>If there\nare a large number of similarly-named remote repositories\nand you want to use a different format for them (such that\nthe URLs you use will be rewritten into URLs that work), you\ncan create a configuration section of the form:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>[url\n&quot;&lt;actual url base&gt;&quot;] <br>\ninsteadOf = &lt;other url base&gt;</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>For\nexample, with this:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>[url\n&quot;git://git.host.xz/&quot;] <br>\ninsteadOf = host.xz:/path/to/ <br>\ninsteadOf = work:</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>a URL like\n&quot;work:repo.git&quot; or like\n&quot;host.xz:/path/to/repo.git&quot; will be rewritten in\nany context that takes a URL to be\n&quot;git://git.host.xz/repo.git&quot;.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>If you\nwant to rewrite URLs for push only, you can create a\nconfiguration section of the form:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>[url\n&quot;&lt;actual url base&gt;&quot;] <br>\npushInsteadOf = &lt;other url base&gt;</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>For\nexample, with this:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>[url\n&quot;ssh://example.org/&quot;] <br>\npushInsteadOf = git://example.org/</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>a URL like\n&quot;git://example.org/path/to/repo.git&quot; will be\nrewritten to &quot;ssh://example.org/path/to/repo.git&quot;\nfor pushes, but pulls will still use the original\nURL.</big></p>\n\n<h2>REMOTES\n<a name=\"REMOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The name\nof one of the following can be used instead of a URL as\n<b>&lt;repository&gt;</b> argument:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull; a\nremote in the Git configuration file:\n<b>$GIT_DIR/config</b>,</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull; a\nfile in the <b>$GIT_DIR/remotes</b> directory, or</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull; a\nfile in the <b>$GIT_DIR/branches</b> directory.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>All of\nthese also allow you to omit the refspec from the command\nline because they each contain a refspec which git will use\nby default.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Named\nremote in configuration file</b> <br>\nYou can choose to provide the name of a remote which you had\npreviously configured using <a href=\"https://man.page/1/git-remote\">git-remote(1)</a>,\n<a href=\"https://man.page/1/git-config\">git-config(1)</a> or even by a manual edit to the\n<b>$GIT_DIR/config</b> file. The URL of this remote will be\nused to access the repository. The refspec of this remote\nwill be used by default when you do not provide a refspec on\nthe command line. The entry in the config file would appear\nlike this:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>[remote\n&quot;&lt;name&gt;&quot;] <br>\nurl = &lt;url&gt; <br>\npushurl = &lt;pushurl&gt; <br>\npush = &lt;refspec&gt; <br>\nfetch = &lt;refspec&gt;</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\n<b>&lt;pushurl&gt;</b> is used for pushes only. It is\noptional and defaults to <b>&lt;url&gt;</b>.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Named\nfile in $GIT_DIR/remotes</b> <br>\nYou can choose to provide the name of a file in\n<b>$GIT_DIR/remotes</b>. The URL in this file will be used\nto access the repository. The refspec in this file will be\nused as default when you do not provide a refspec on the\ncommand line. This file should have the following\nformat:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>URL: one\nof the above URL format <br>\nPush: &lt;refspec&gt; <br>\nPull: &lt;refspec&gt;</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Push:</b>\nlines are used by <i>git push</i> and <b>Pull:</b> lines are\nused by <i>git pull</i> and <i>git fetch</i>. Multiple\n<b>Push:</b> and <b>Pull:</b> lines may be specified for\nadditional branch mappings.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Named\nfile in $GIT_DIR/branches</b> <br>\nYou can choose to provide the name of a file in\n<b>$GIT_DIR/branches</b>. The URL in this file will be used\nto access the repository. This file should have the\nfollowing format:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&lt;url&gt;#&lt;head&gt;</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>&lt;url&gt;</b>\nis required; <b>#&lt;head&gt;</b> is optional.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Depending\non the operation, git will use one of the following\nrefspecs, if you don&rsquo;t provide one on the command\nline. <b>&lt;branch&gt;</b> is the name of this file in\n<b>$GIT_DIR/branches</b> and <b>&lt;head&gt;</b> defaults to\n<b>master</b>.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>git fetch\nuses:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>git push\nuses:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>HEAD:refs/heads/&lt;head&gt;</big></p>\n\n<h2>CONFIGURED REMOTE-TRACKING BRANCHES\n<a name=\"CONFIGURED REMOTE-TRACKING BRANCHES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>You often\ninteract with the same remote repository by regularly and\nrepeatedly fetching from it. In order to keep track of the\nprogress of such a remote repository, <b>git fetch</b>\nallows you to configure\n<b>remote.&lt;repository&gt;.fetch</b> configuration\nvariables.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Typically\nsuch a variable may look like this:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>[remote\n&quot;origin&quot;] <br>\nfetch = +refs/heads/*:refs/remotes/origin/*</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>This\nconfiguration is used in two ways:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nWhen <b>git fetch</b> is run without specifying what\nbranches and/or tags to fetch on the command line, e.g.\n<b>git fetch origin</b> or <b>git fetch</b>,\n<b>remote.&lt;repository&gt;.fetch</b> values are used as\nthe refspecs&mdash;they specify which refs to fetch and\nwhich local refs to update. The example above will fetch all\nbranches that exist in the <b>origin</b> (i.e. any ref that\nmatches the left-hand side of the value,\n<b>refs/heads/*</b>) and update the corresponding\nremote-tracking branches in the <b>refs/remotes/origin/*</b>\nhierarchy.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nWhen <b>git fetch</b> is run with explicit branches and/or\ntags to fetch on the command line, e.g. <b>git fetch origin\nmaster</b>, the &lt;refspec&gt;s given on the command line\ndetermine what are to be fetched (e.g. <b>master</b> in the\nexample, which is a short-hand for <b>master:</b>, which in\nturn means &quot;fetch the <i>master</i> branch but I do not\nexplicitly say what remote-tracking branch to update with it\nfrom the command line&quot;), and the example command will\nfetch <i>only</i> the <i>master</i> branch. The\n<b>remote.&lt;repository&gt;.fetch</b> values determine\nwhich remote-tracking branch, if any, is updated. When used\nin this way, the <b>remote.&lt;repository&gt;.fetch</b>\nvalues do not have any effect in deciding <i>what</i> gets\nfetched (i.e. the values are not used as refspecs when the\ncommand-line lists refspecs); they are only used to decide\n<i>where</i> the refs that are fetched are stored by acting\nas a mapping.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The latter\nuse of the <b>remote.&lt;repository&gt;.fetch</b> values can\nbe overridden by giving the <b>--refmap=&lt;refspec&gt;</b>\nparameter(s) on the command line.</big></p>\n\n<h2>PRUNING\n<a name=\"PRUNING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Git has a\ndefault disposition of keeping data unless it&rsquo;s\nexplicitly thrown away; this extends to holding onto local\nreferences to branches on remotes that have themselves\ndeleted those branches.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>If left to\naccumulate, these stale references might make performance\nworse on big and busy repos that have a lot of branch churn,\nand e.g. make the output of commands like <b>git branch -a\n--contains &lt;commit&gt;</b> needlessly verbose, as well as\nimpacting anything else that&rsquo;ll work with the complete\nset of known references.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>These\nremote-tracking references can be deleted as a one-off with\neither of:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big># While\nfetching <br>\n$ git fetch --prune &lt;name&gt;</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big># Only\nprune, don't fetch <br>\n$ git remote prune &lt;name&gt;</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>To prune\nreferences as part of your normal workflow without needing\nto remember to run that, set <b>fetch.prune</b> globally, or\n<b>remote.&lt;name&gt;.prune</b> per-remote in the config.\nSee <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Here&rsquo;s\nwhere things get tricky and more specific. The pruning\nfeature doesn&rsquo;t actually care about branches, instead\nit&rsquo;ll prune local &larr;&rarr; remote-references as a\nfunction of the refspec of the remote (see\n<b>&lt;refspec&gt;</b> and CONFIGURED REMOTE-TRACKING\nBRANCHES above).</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Therefore\nif the refspec for the remote includes e.g.\n<b>refs/tags/*:refs/tags/*</b>, or you manually run e.g.\n<b>git fetch --prune &lt;name&gt;\n&quot;refs/tags/*:refs/tags/*&quot;</b> it won&rsquo;t be\nstale remote tracking branches that are deleted, but any\nlocal tag that doesn&rsquo;t exist on the remote.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>This might\nnot be what you expect, i.e. you want to prune remote\n<b>&lt;name&gt;</b>, but also explicitly fetch tags from it,\nso when you fetch from it you delete all your local tags,\nmost of which may not have come from the <b>&lt;name&gt;</b>\nremote in the first place.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>So be\ncareful when using this with a refspec like\n<b>refs/tags/*:refs/tags/*</b>, or any other refspec which\nmight map references from multiple remotes to the same local\nnamespace.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Since\nkeeping up-to-date with both branches and tags on the remote\nis a common use-case the <b>--prune-tags</b> option can be\nsupplied along with <b>--prune</b> to prune local tags that\ndon&rsquo;t exist on the remote, and force-update those tags\nthat differ. Tag pruning can also be enabled with\n<b>fetch.pruneTags</b> or\n<b>remote.&lt;name&gt;.pruneTags</b> in the config. See\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\n<b>--prune-tags</b> option is equivalent to having\n<b>refs/tags/*:refs/tags/*</b> declared in the refspecs of\nthe remote. This can lead to some seemingly strange\ninteractions:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big># These\nboth fetch tags <br>\n$ git fetch --no-tags origin 'refs/tags/*:refs/tags/*' <br>\n$ git fetch --no-tags --prune-tags origin</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The reason\nit doesn&rsquo;t error out when provided without\n<b>--prune</b> or its config versions is for flexibility of\nthe configured versions, and to maintain a 1=1 mapping\nbetween what the command line flags do, and what the\nconfiguration versions do.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>It&rsquo;s\nreasonable to e.g. configure <b>fetch.pruneTags=true</b> in\n<b>~/.gitconfig</b> to have tags pruned whenever <b>git\nfetch --prune</b> is run, without making every invocation of\n<b>git fetch</b> without <b>--prune</b> an error.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Pruning\ntags with <b>--prune-tags</b> also works when fetching a URL\ninstead of a named remote. These will all prune tags not\nfound on origin:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ git\nfetch origin --prune --prune-tags <br>\n$ git fetch origin --prune 'refs/tags/*:refs/tags/*' <br>\n$ git fetch &lt;url of origin&gt; --prune --prune-tags <br>\n$ git fetch &lt;url of origin&gt; --prune\n'refs/tags/*:refs/tags/*'</big></p>\n\n<h2>OUTPUT\n<a name=\"OUTPUT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The output\nof &quot;git fetch&quot; depends on the transport method\nused; this section describes the output when fetching over\nthe Git protocol (either locally or via ssh) and Smart HTTP\nprotocol.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The status\nof the fetch is output in tabular form, with each line\nrepresenting the status of a single ref. Each line is of the\nform:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&lt;flag&gt;\n&lt;summary&gt; &lt;from&gt; -&gt; &lt;to&gt;\n[&lt;reason&gt;]</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The status\nof up-to-date refs is shown only if the --verbose option is\nused.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>In compact\noutput mode, specified with configuration variable\nfetch.output, if either entire <b>&lt;from&gt;</b> or\n<b>&lt;to&gt;</b> is found in the other string, it will be\nsubstituted with <b>*</b> in the other string. For example,\n<b>master -&gt; origin/master</b> becomes <b>master -&gt;\norigin/*</b>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>flag</big></p>\n\n<p style=\"margin-left:17%;\"><big>A single character\nindicating the status of the ref:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>(space)</big></p>\n\n<p style=\"margin-left:23%;\"><big>for a successfully fetched\nfast-forward;</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><b>+</b></big></p>\n\n<p style=\"margin-left:23%;\"><big>for a successful forced\nupdate;</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><b>-</b></big></p>\n\n<p style=\"margin-left:23%;\"><big>for a successfully pruned\nref;</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><b>t</b></big></p>\n\n<p style=\"margin-left:23%;\"><big>for a successful tag\nupdate;</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><b>*</b></big></p>\n\n<p style=\"margin-left:23%;\"><big>for a successfully fetched\nnew ref;</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><b>!</b></big></p>\n\n<p style=\"margin-left:23%;\"><big>for a ref that was\nrejected or failed to update; and</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><b>=</b></big></p>\n\n<p style=\"margin-left:23%;\"><big>for a ref that was up to\ndate and did not need fetching.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>summary</big></p>\n\n<p style=\"margin-left:17%;\"><big>For a successfully fetched\nref, the summary shows the old and new values of the ref in\na form suitable for using as an argument to <b>git log</b>\n(this is <b>&lt;old&gt;..&lt;new&gt;</b> in most cases, and\n<b>&lt;old&gt;...&lt;new&gt;</b> for forced non-fast-forward\nupdates).</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>from</big></p>\n\n<p style=\"margin-left:17%;\"><big>The name of the remote ref\nbeing fetched from, minus its <b>refs/&lt;type&gt;/</b>\nprefix. In the case of deletion, the name of the remote ref\nis &quot;(none)&quot;.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>to</big></p>\n\n<p style=\"margin-left:17%;\"><big>The name of the local ref\nbeing updated, minus its <b>refs/&lt;type&gt;/</b>\nprefix.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>reason</big></p>\n\n<p style=\"margin-left:17%;\"><big>A human-readable\nexplanation. In the case of successfully fetched refs, no\nexplanation is needed. For a failed ref, the reason for\nfailure is described.</big></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nUpdate the remote-tracking branches:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nfetch origin</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>The above\ncommand copies all branches from the remote refs/heads/\nnamespace and stores them to the local refs/remotes/origin/\nnamespace, unless the branch.&lt;name&gt;.fetch option is\nused to specify a non-default refspec.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nUsing refspecs explicitly:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nfetch origin +seen:seen maint:tmp</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>This\nupdates (or creates, as necessary) branches <b>seen</b> and\n<b>tmp</b> in the local repository by fetching from the\nbranches (respectively) <b>seen</b> and <b>maint</b> from\nthe remote repository.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>The\n<b>seen</b> branch will be updated even if it does not\nfast-forward, because it is prefixed with a plus sign;\n<b>tmp</b> will not be.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPeek at a remote&rsquo;s branch, without configuring the\nremote in your local repository:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nfetch git://git.kernel.org/pub/scm/git/git.git maint <br>\n$ git log FETCH_HEAD</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>The first\ncommand fetches the <b>maint</b> branch from the repository\nat <b>git://git.kernel.org/pub/scm/git/git.git</b> and the\nsecond command uses <b>FETCH_HEAD</b> to examine the branch\nwith <a href=\"https://man.page/1/git-log\">git-log(1)</a>. The fetched objects will eventually\nbe removed by git&rsquo;s built-in housekeeping (see\n<a href=\"https://man.page/1/git-gc\">git-gc(1)</a>).</big></p>\n\n<h2>SECURITY\n<a name=\"SECURITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The fetch\nand push protocols are not designed to prevent one side from\nstealing data from the other repository that was not\nintended to be shared. If you have private data that you\nneed to protect from a malicious peer, your best option is\nto store it in another repository. This applies to both\nclients and servers. In particular, namespaces on a server\nare not effective for read access control; you should only\ngrant read access to a namespace to clients that you would\ntrust with read access to the entire repository.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The known\nattack vectors are as follows:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>1. The\nvictim sends &quot;have&quot; lines advertising the IDs of\nobjects it has that are not explicitly intended to be shared\nbut can be used to optimize the transfer if the peer also\nhas them. The attacker chooses an object ID X to steal and\nsends a ref to X, but isn&rsquo;t required to send the\ncontent of X because the victim already has it. Now the\nvictim believes that the attacker has X, and it sends the\ncontent of X back to the attacker later. (This attack is\nmost straightforward for a client to perform on a server, by\ncreating a ref to X in the namespace the client has access\nto and then fetching it. The most likely way for a server to\nperform it on a client is to &quot;merge&quot; X into a\npublic branch and hope that the user does additional work on\nthis branch and pushes it back to the server without\nnoticing the merge.)</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>2. As in\n#1, the attacker chooses an object ID X to steal. The victim\nsends an object Y that the attacker already has, and the\nattacker falsely claims to have X and not Y, so the victim\nsends Y as a delta against X. The delta reveals regions of X\nthat are similar to Y to the attacker.</big></p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Using\n--recurse-submodules can only fetch new commits in already\nchecked out submodules right now. When e.g. upstream added a\nnew submodule in the just fetched commits of the\nsuperproject the submodule itself cannot be fetched, making\nit impossible to check out that submodule later without\nhaving to do a fetch again. This is expected to be fixed in\na future Git version.</big></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><a href=\"https://man.page/1/git-pull\">git-pull(1)</a></big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#GIT URLS\">GIT URLS</a>","<a href=\"#REMOTES\">REMOTES</a>","<a href=\"#CONFIGURED REMOTE-TRACKING BRANCHES\">CONFIGURED REMOTE-TRACKING BRANCHES</a>","<a href=\"#PRUNING\">PRUNING</a>","<a href=\"#OUTPUT\">OUTPUT</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SECURITY\">SECURITY</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}