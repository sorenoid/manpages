{"name":"git-stash","body":"\n\n<h1 align=\"center\">GIT-STASH</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-stash -\nStash the changes in a dirty working directory away</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nstash</i> list [&lt;log-options&gt;] <i><br>\ngit stash</i> show [-u|--include-untracked|--only-untracked]\n[&lt;diff-options&gt;] [&lt;stash&gt;] <i><br>\ngit stash</i> drop [-q|--quiet] [&lt;stash&gt;] <i><br>\ngit stash</i> ( pop | apply ) [--index] [-q|--quiet]\n[&lt;stash&gt;] <i><br>\ngit stash</i> branch &lt;branchname&gt; [&lt;stash&gt;]\n<i><br>\ngit stash</i> [push [-p|--patch] [-k|--[no-]keep-index]\n[-q|--quiet] <br>\n[-u|--include-untracked] [-a|--all] [-m|--message\n&lt;message&gt;] <br>\n[--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]]\n<br>\n[--] [&lt;pathspec&gt;...]] <i><br>\ngit stash</i> clear <i><br>\ngit stash</i> create [&lt;message&gt;] <i><br>\ngit stash</i> store [-m|--message &lt;message&gt;]\n[-q|--quiet] &lt;commit&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use <b>git\nstash</b> when you want to record the current state of the\nworking directory and the index, but want to go back to a\nclean working directory. The command saves your local\nmodifications away and reverts the working directory to\nmatch the <b>HEAD</b> commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nmodifications stashed away by this command can be listed\nwith <b>git stash list</b>, inspected with <b>git stash\nshow</b>, and restored (potentially on top of a different\ncommit) with <b>git stash apply</b>. Calling <b>git\nstash</b> without any arguments is equivalent to <b>git\nstash push</b>. A stash is by default listed as &quot;WIP on\n<i>branchname</i> ...&quot;, but you can give a more\ndescriptive message on the command line when you create\none.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The latest\nstash you created is stored in <b>refs/stash</b>; older\nstashes are found in the reflog of this reference and can be\nnamed using the usual reflog syntax (e.g. <b>stash@{0}</b>\nis the most recently created stash, <b>stash@{1}</b> is the\none before it, <b>stash@{2.hours.ago}</b> is also possible).\nStashes may also be referenced by specifying just the stash\nindex (e.g. the integer <b>n</b> is equivalent to\n<b>stash@{n}</b>).</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">push\n[-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked]\n[-a|--all] [-q|--quiet] [-m|--message &lt;message&gt;]\n[--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]]\n[--] [&lt;pathspec&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Save your local modifications\nto a new <i>stash entry</i> and roll them back to HEAD (in\nthe working tree and in the index). The &lt;message&gt; part\nis optional and gives the description along with the stashed\nstate.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For quickly\nmaking a snapshot, you can omit &quot;push&quot;. In this\nmode, non-option arguments are not allowed to prevent a\nmisspelled subcommand from making an unwanted stash entry.\nThe two exceptions to this are <b>stash -p</b> which acts as\nalias for <b>stash push -p</b> and pathspec elements, which\nare allowed after a double hyphen <b>--</b> for\ndisambiguation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">save\n[-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked]\n[-a|--all] [-q|--quiet] [&lt;message&gt;]</p>\n\n<p style=\"margin-left:17%;\">This option is deprecated in\nfavour of <i>git stash push</i>. It differs from &quot;stash\npush&quot; in that it cannot take pathspec. Instead, all\nnon-option arguments are concatenated to form the stash\nmessage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">list\n[&lt;log-options&gt;]</p>\n\n<p style=\"margin-left:17%;\">List the stash entries that you\ncurrently have. Each <i>stash entry</i> is listed with its\nname (e.g. <b>stash@{0}</b> is the latest entry,\n<b>stash@{1}</b> is the one before, etc.), the name of the\nbranch that was current when the entry was made, and a short\ndescription of the commit the entry was based on.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">stash@{0}: WIP\non submit: 6ebd0e2... Update git-stash documentation <br>\nstash@{1}: On master: 9cc0589... Add git-stash</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The command\ntakes options applicable to the <i>git log</i> command to\ncontrol what is shown and how. See <a href=\"https://man.page/1/git-log\">git-log(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">show\n[-u|--include-untracked|--only-untracked]\n[&lt;diff-options&gt;] [&lt;stash&gt;]</p>\n\n<p style=\"margin-left:17%;\">Show the changes recorded in\nthe stash entry as a diff between the stashed contents and\nthe commit back when the stash entry was first created. By\ndefault, the command shows the diffstat, but it will accept\nany format known to <i>git diff</i> (e.g., <b>git stash show\n-p stash@{1}</b> to view the second most recent entry in\npatch form). If no <b>&lt;diff-option&gt;</b> is provided,\nthe default behavior will be given by the\n<b>stash.showStat</b>, and <b>stash.showPatch</b> config\nvariables. You can also use\n<b>stash.showIncludeUntracked</b> to set whether\n<b>--include-untracked</b> is enabled by default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pop [--index]\n[-q|--quiet] [&lt;stash&gt;]</p>\n\n<p style=\"margin-left:17%;\">Remove a single stashed state\nfrom the stash list and apply it on top of the current\nworking tree state, i.e., do the inverse operation of <b>git\nstash push</b>. The working directory must match the\nindex.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Applying the\nstate can fail with conflicts; in this case, it is not\nremoved from the stash list. You need to resolve the\nconflicts by hand and call <b>git stash drop</b> manually\nafterwards.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">apply [--index]\n[-q|--quiet] [&lt;stash&gt;]</p>\n\n<p style=\"margin-left:17%;\">Like <b>pop</b>, but do not\nremove the state from the stash list. Unlike <b>pop</b>,\n<b>&lt;stash&gt;</b> may be any commit that looks like a\ncommit created by <b>stash push</b> or <b>stash\ncreate</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">branch\n&lt;branchname&gt; [&lt;stash&gt;]</p>\n\n<p style=\"margin-left:17%;\">Creates and checks out a new\nbranch named <b>&lt;branchname&gt;</b> starting from the\ncommit at which the <b>&lt;stash&gt;</b> was originally\ncreated, applies the changes recorded in\n<b>&lt;stash&gt;</b> to the new working tree and index. If\nthat succeeds, and <b>&lt;stash&gt;</b> is a reference of\nthe form <b>stash@{&lt;revision&gt;}</b>, it then drops the\n<b>&lt;stash&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is useful\nif the branch on which you ran <b>git stash push</b> has\nchanged enough that <b>git stash apply</b> fails due to\nconflicts. Since the stash entry is applied on top of the\ncommit that was HEAD at the time <b>git stash</b> was run,\nit restores the originally stashed state with no\nconflicts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">clear</p>\n\n<p style=\"margin-left:17%;\">Remove all the stash entries.\nNote that those entries will then be subject to pruning, and\nmay be impossible to recover (see <i>Examples</i> below for\na possible strategy).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">drop\n[-q|--quiet] [&lt;stash&gt;]</p>\n\n<p style=\"margin-left:17%;\">Remove a single stash entry\nfrom the list of stash entries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">create</p>\n\n<p style=\"margin-left:17%;\">Create a stash entry (which is\na regular commit object) and return its object name, without\nstoring it anywhere in the ref namespace. This is intended\nto be useful for scripts. It is probably not the command you\nwant to use; see &quot;push&quot; above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">store</p>\n\n<p style=\"margin-left:17%;\">Store a given stash created via\n<i>git stash create</i> (which is a dangling merge commit)\nin the stash ref, updating the stash reflog. This is\nintended to be useful for scripts. It is probably not the\ncommand you want to use; see &quot;push&quot; above.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-a, --all</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>push</b> and <b>save</b> commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">All ignored and\nuntracked files are also stashed and then cleaned up with\n<b>git clean</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-u,\n--include-untracked, --no-include-untracked</p>\n\n<p style=\"margin-left:17%;\">When used with the <b>push</b>\nand <b>save</b> commands, all untracked files are also\nstashed and then cleaned up with <b>git clean</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When used with\nthe <b>show</b> command, show the untracked files in the\nstash entry as part of the diff.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--only-untracked</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe <b>show</b> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Show only the\nuntracked files in the stash entry as part of the diff.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--index</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>pop</b> and <b>apply</b> commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Tries to\nreinstate not only the working tree&rsquo;s changes, but\nalso the index&rsquo;s ones. However, this can fail, when\nyou have conflicts (which are stored in the index, where you\ntherefore can no longer apply the changes as they were\noriginally).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-k,\n--keep-index, --no-keep-index</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>push</b> and <b>save</b> commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">All changes\nalready added to the index are left intact.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-p, --patch</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>push</b> and <b>save</b> commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Interactively\nselect hunks from the diff between HEAD and the working tree\nto be stashed. The stash entry is constructed such that its\nindex state is the same as the index state of your\nrepository, and its worktree contains only the changes you\nselected interactively. The selected changes are then rolled\nback from your worktree. See the &ldquo;Interactive\nMode&rdquo; section of <a href=\"https://man.page/1/git-add\">git-add(1)</a> to learn how to\noperate the <b>--patch</b> mode.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>--patch</b> option implies <b>--keep-index</b>. You can\nuse <b>--no-keep-index</b> to override this.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pathspec-from-file=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>push</b> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Pathspec is\npassed in <b>&lt;file&gt;</b> instead of commandline args.\nIf <b>&lt;file&gt;</b> is exactly <b>-</b> then standard\ninput is used. Pathspec elements are separated by LF or\nCR/LF. Pathspec elements can be quoted as explained for the\nconfiguration variable <b>core.quotePath</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). See also <b>--pathspec-file-nul</b>\nand global <b>--literal-pathspecs</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pathspec-file-nul</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>push</b> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Only meaningful\nwith <b>--pathspec-from-file</b>. Pathspec elements are\nseparated with NUL character and all other characters are\ntaken literally (including newlines and quotes).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>apply</b>, <b>drop</b>, <b>pop</b>, <b>push</b>,\n<b>save</b>, <b>store</b> commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Quiet, suppress\nfeedback messages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>push</b> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Separates\npathspec from options for disambiguation purposes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;pathspec&gt;...</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>push</b> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The new stash\nentry records the modified states only for the files that\nmatch the pathspec. The index entries and working tree files\nare then rolled back to the state in HEAD only for these\nfiles, too, leaving files that do not match the pathspec\nintact.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails, see the <i>pathspec</i> entry in\n<a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;stash&gt;</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\n<b>apply</b>, <b>branch</b>, <b>drop</b>, <b>pop</b>,\n<b>show</b> commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A reference of\nthe form <b>stash@{&lt;revision&gt;}</b>. When no\n<b>&lt;stash&gt;</b> is given, the latest stash is assumed\n(that is, <b>stash@{0}</b>).</p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A stash entry\nis represented as a commit whose tree records the state of\nthe working directory, and its first parent is the commit at\n<b>HEAD</b> when the entry was created. The tree of the\nsecond parent records the state of the index when the entry\nis made, and it is made a child of the <b>HEAD</b> commit.\nThe ancestry graph looks like this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">.----W <br>\n/ / <br>\n-----H----I</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where <b>H</b>\nis the <b>HEAD</b> commit, <b>I</b> is a commit that records\nthe state of the index, and <b>W</b> is a commit that\nrecords the state of the working tree.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Pulling into a\ndirty tree</p>\n\n<p style=\"margin-left:17%;\">When you are in the middle of\nsomething, you learn that there are upstream changes that\nare possibly relevant to what you are doing. When your local\nchanges do not conflict with the changes in the upstream, a\nsimple <b>git pull</b> will let you move forward.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">However, there\nare cases in which your local changes do conflict with the\nupstream changes, and <b>git pull</b> refuses to overwrite\nyour changes. In such a case, you can stash your changes\naway, perform a pull, and then unstash, like this:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git pull <br>\n... <br>\nfile foobar not up to date, cannot merge. <br>\n$ git stash <br>\n$ git pull <br>\n$ git stash pop</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Interrupted\nworkflow</p>\n\n<p style=\"margin-left:17%;\">When you are in the middle of\nsomething, your boss comes in and demands that you fix\nsomething immediately. Traditionally, you would make a\ncommit to a temporary branch to store your changes away, and\nreturn to your original branch to make the emergency fix,\nlike this:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"># ... hack hack\nhack ... <br>\n$ git switch -c my_wip <br>\n$ git commit -a -m &quot;WIP&quot; <br>\n$ git switch master <br>\n$ edit emergency fix <br>\n$ git commit -a -m &quot;Fix in a hurry&quot; <br>\n$ git switch my_wip <br>\n$ git reset --soft HEAD^ <br>\n# ... continue hacking ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can use\n<i>git stash</i> to simplify the above, like this:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"># ... hack hack\nhack ... <br>\n$ git stash <br>\n$ edit emergency fix <br>\n$ git commit -a -m &quot;Fix in a hurry&quot; <br>\n$ git stash pop <br>\n# ... continue hacking ...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Testing partial\ncommits</p>\n\n<p style=\"margin-left:17%;\">You can use <b>git stash push\n--keep-index</b> when you want to make two or more commits\nout of the changes in the work tree, and you want to test\neach change before committing:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"># ... hack hack\nhack ... <br>\n$ git add --patch foo # add just first part to the index\n<br>\n$ git stash push --keep-index # save all other changes to\nthe stash <br>\n$ edit/build/test first part <br>\n$ git commit -m 'First part' # commit fully tested change\n<br>\n$ git stash pop # prepare to work on all other changes <br>\n# ... repeat above five steps until one commit remains ...\n<br>\n$ edit/build/test remaining parts <br>\n$ git commit foo -m 'Remaining parts'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Recovering\nstash entries that were cleared/dropped erroneously</p>\n\n<p style=\"margin-left:17%;\">If you mistakenly drop or clear\nstash entries, they cannot be recovered through the normal\nsafety mechanisms. However, you can try the following\nincantation to get a list of stash entries that are still in\nyour repository, but not reachable any more:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">git fsck\n--unreachable | <br>\ngrep commit | cut -d\\ -f3 | <br>\nxargs git log --merges --no-walk --grep=WIP</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-checkout\">git-checkout(1)</a>,\n<a href=\"https://man.page/1/git-commit\">git-commit(1)</a>, <a href=\"https://man.page/1/git-reflog\">git-reflog(1)</a>,\n<a href=\"https://man.page/1/git-reset\">git-reset(1)</a>, <a href=\"https://man.page/1/git-switch\">git-switch(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}