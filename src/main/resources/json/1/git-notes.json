{"name":"git-notes","description":"git-notes - Add or inspect object notes","body":"\n\n<h1 align=\"center\">GIT-NOTES</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-notes - Add\nor inspect object notes</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nnotes</i> [list [&lt;object&gt;]] <i><br>\ngit notes</i> add [-f] [--allow-empty] [-F &lt;file&gt; | -m\n&lt;msg&gt; | (-c | -C) &lt;object&gt;] [&lt;object&gt;]\n<i><br>\ngit notes</i> copy [-f] ( --stdin | &lt;from-object&gt;\n[&lt;to-object&gt;] ) <i><br>\ngit notes</i> append [--allow-empty] [-F &lt;file&gt; | -m\n&lt;msg&gt; | (-c | -C) &lt;object&gt;] [&lt;object&gt;]\n<i><br>\ngit notes</i> edit [--allow-empty] [&lt;object&gt;] <i><br>\ngit notes</i> show [&lt;object&gt;] <i><br>\ngit notes</i> merge [-v | -q] [-s &lt;strategy&gt; ]\n&lt;notes-ref&gt; <i><br>\ngit notes</i> merge --commit [-v | -q] <i><br>\ngit notes</i> merge --abort [-v | -q] <i><br>\ngit notes</i> remove [--ignore-missing] [--stdin]\n[&lt;object&gt;...] <i><br>\ngit notes</i> prune [-n] [-v] <i><br>\ngit notes</i> get-ref</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Adds, removes,\nor reads notes attached to objects, without touching the\nobjects themselves.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\nnotes are saved to and read from <b>refs/notes/commits</b>,\nbut this default can be overridden. See the OPTIONS,\nCONFIGURATION, and ENVIRONMENT sections below. If this ref\ndoes not exist, it will be quietly created when it is first\nneeded to store a note.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A typical use\nof notes is to supplement a commit message without changing\nthe commit itself. Notes can be shown by <i>git log</i>\nalong with the original commit message. To distinguish these\nnotes from the message stored in the commit object, the\nnotes are indented like the message, after an unindented\nline saying &quot;Notes (&lt;refname&gt;):&quot; (or\n&quot;Notes:&quot; for <b>refs/notes/commits</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Notes can also\nbe added to patches prepared with <b>git format-patch</b> by\nusing the <b>--notes</b> option. Such notes are added as a\npatch commentary after a three dash separator line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To change which\nnotes are shown by <i>git log</i>, see the\n&quot;notes.displayRef&quot; configuration in\n<a href=\"https://man.page/1/git-log\">git-log(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the\n&quot;notes.rewrite.&lt;command&gt;&quot; configuration for\na way to carry notes across commands that rewrite\ncommits.</p>\n\n<h2>SUBCOMMANDS\n<a name=\"SUBCOMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">list</p>\n\n<p style=\"margin-left:17%;\">List the notes object for a\ngiven object. If no object is given, show a list of all note\nobjects and the objects they annotate (in the format\n&quot;&lt;note object&gt; &lt;annotated object&gt;&quot;).\nThis is the default subcommand if no subcommand is\ngiven.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">add</p>\n\n<p style=\"margin-left:17%;\">Add notes for a given object\n(defaults to HEAD). Abort if the object already has notes\n(use <b>-f</b> to overwrite existing notes). However, if\nyou&rsquo;re using <b>add</b> interactively (using an editor\nto supply the notes contents), then - instead of aborting -\nthe existing notes will be opened in the editor (like the\n<b>edit</b> subcommand).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">copy</p>\n\n<p style=\"margin-left:17%;\">Copy the notes for the first\nobject onto the second object (defaults to HEAD). Abort if\nthe second object already has notes, or if the first object\nhas none (use -f to overwrite existing notes to the second\nobject). This subcommand is equivalent to: <b>git notes add\n[-f] -C $(git notes list &lt;from-object&gt;)\n&lt;to-object&gt;</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In\n<b>--stdin</b> mode, take lines in the format</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;from-object&gt;\nSP &lt;to-object&gt; [ SP &lt;rest&gt; ] LF</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">on standard\ninput, and copy the notes from each &lt;from-object&gt; to\nits corresponding &lt;to-object&gt;. (The optional\n<b>&lt;rest&gt;</b> is ignored so that the command can read\nthe input given to the <b>post-rewrite</b> hook.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">append</p>\n\n<p style=\"margin-left:17%;\">Append to the notes of an\nexisting object (defaults to HEAD). Creates a new notes\nobject if needed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">edit</p>\n\n<p style=\"margin-left:17%;\">Edit the notes for a given\nobject (defaults to HEAD).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">show</p>\n\n<p style=\"margin-left:17%;\">Show the notes for a given\nobject (defaults to HEAD).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">merge</p>\n\n<p style=\"margin-left:17%;\">Merge the given notes ref into\nthe current notes ref. This will try to merge the changes\nmade by the given notes ref (called &quot;remote&quot;)\nsince the merge-base (if any) into the current notes ref\n(called &quot;local&quot;).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If conflicts\narise and a strategy for automatically resolving conflicting\nnotes (see the &quot;NOTES MERGE STRATEGIES&quot; section)\nis not given, the &quot;manual&quot; resolver is used. This\nresolver checks out the conflicting notes in a special\nworktree (<b>.git/NOTES_MERGE_WORKTREE</b>), and instructs\nthe user to manually resolve the conflicts there. When done,\nthe user can either finalize the merge with <i>git notes\nmerge --commit</i>, or abort the merge with <i>git notes\nmerge --abort</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">remove</p>\n\n<p style=\"margin-left:17%;\">Remove the notes for given\nobjects (defaults to HEAD). When giving zero or one object\nfrom the command line, this is equivalent to specifying an\nempty note message to the <b>edit</b> subcommand.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prune</p>\n\n<p style=\"margin-left:17%;\">Remove all notes for\nnon-existing/unreachable objects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">get-ref</p>\n\n<p style=\"margin-left:17%;\">Print the current notes ref.\nThis provides an easy way to retrieve the current notes ref\n(e.g. from scripts).</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f, --force</p>\n\n<p style=\"margin-left:17%;\">When adding notes to an object\nthat already has notes, overwrite the existing notes\n(instead of aborting).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-m &lt;msg&gt;,\n--message=&lt;msg&gt;</p>\n\n<p style=\"margin-left:17%;\">Use the given note message\n(instead of prompting). If multiple <b>-m</b> options are\ngiven, their values are concatenated as separate paragraphs.\nLines starting with <b>#</b> and empty lines other than a\nsingle line between paragraphs will be stripped out.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-F\n&lt;file&gt;, --file=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Take the note message from the\ngiven file. Use <i>-</i> to read the note message from the\nstandard input. Lines starting with <b>#</b> and empty lines\nother than a single line between paragraphs will be stripped\nout.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-C\n&lt;object&gt;, --reuse-message=&lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">Take the given blob object (for\nexample, another note) as the note message. (Use <b>git\nnotes copy &lt;object&gt;</b> instead to copy notes between\nobjects.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-c\n&lt;object&gt;, --reedit-message=&lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">Like <i>-C</i>, but with\n<b>-c</b> the editor is invoked, so that the user can\nfurther edit the note message.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--allow-empty</p>\n\n<p style=\"margin-left:17%;\">Allow an empty note object to\nbe stored. The default behavior is to automatically remove\nempty notes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ref\n&lt;ref&gt;</p>\n\n<p style=\"margin-left:17%;\">Manipulate the notes tree in\n&lt;ref&gt;. This overrides <b>GIT_NOTES_REF</b> and the\n&quot;core.notesRef&quot; configuration. The ref specifies\nthe full refname when it begins with <b>refs/notes/</b>;\nwhen it begins with <b>notes/</b>, <b>refs/</b> and\notherwise <b>refs/notes/</b> is prefixed to form a full name\nof the ref.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-missing</p>\n\n<p style=\"margin-left:17%;\">Do not consider it an error to\nrequest removing notes from an object that does not have\nnotes attached to it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdin</p>\n\n<p style=\"margin-left:17%;\">Also read the object names to\nremove notes from the standard input (there is no reason you\ncannot combine this with object names from the command\nline).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--dry-run</p>\n\n<p style=\"margin-left:17%;\">Do not remove anything; just\nreport the object names whose notes would be removed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s\n&lt;strategy&gt;, --strategy=&lt;strategy&gt;</p>\n\n<p style=\"margin-left:17%;\">When merging notes, resolve\nnotes conflicts using the given strategy. The following\nstrategies are recognized: &quot;manual&quot; (default),\n&quot;ours&quot;, &quot;theirs&quot;, &quot;union&quot; and\n&quot;cat_sort_uniq&quot;. This option overrides the\n&quot;notes.mergeStrategy&quot; configuration setting. See\nthe &quot;NOTES MERGE STRATEGIES&quot; section below for\nmore information on each notes merge strategy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--commit</p>\n\n<p style=\"margin-left:17%;\">Finalize an in-progress <i>git\nnotes merge</i>. Use this option when you have resolved the\nconflicts that <i>git notes merge</i> stored in\n.git/NOTES_MERGE_WORKTREE. This amends the partial merge\ncommit created by <i>git notes merge</i> (stored in\n.git/NOTES_MERGE_PARTIAL) by adding the notes in\n.git/NOTES_MERGE_WORKTREE. The notes ref stored in the\n.git/NOTES_MERGE_REF symref is updated to the resulting\ncommit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--abort</p>\n\n<p style=\"margin-left:17%;\">Abort/reset an in-progress\n<i>git notes merge</i>, i.e. a notes merge with conflicts.\nThis simply removes all files related to the notes\nmerge.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">When merging notes, operate\nquietly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v,\n--verbose</p>\n\n<p style=\"margin-left:17%;\">When merging notes, be more\nverbose. When pruning notes, report all object names whose\nnotes are removed.</p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Commit notes\nare blobs containing extra information about an object\n(usually information to supplement a commit&rsquo;s\nmessage). These blobs are taken from notes refs. A notes ref\nis usually a branch which contains &quot;files&quot; whose\npaths are the object names for the objects they describe,\nwith some directory separators included for performance\nreasons <small>[1]</small> .</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Every notes\nchange creates a new commit at the specified notes ref. You\ncan therefore inspect the history of the notes by invoking,\ne.g., <b>git log -p notes/commits</b>. Currently the commit\nmessage only records which operation triggered the update,\nand the commit authorship is determined according to the\nusual rules (see <a href=\"https://man.page/1/git-commit\">git-commit(1)</a>). These details may\nchange in the future.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is also\npermitted for a notes ref to point directly to a tree\nobject, in which case the history of the notes can be read\nwith <b>git log -p -g &lt;refname&gt;</b>.</p>\n\n<h2>NOTES MERGE STRATEGIES\n<a name=\"NOTES MERGE STRATEGIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\nnotes merge strategy is &quot;manual&quot;, which checks out\nconflicting notes in a special work tree for resolving notes\nconflicts (<b>.git/NOTES_MERGE_WORKTREE</b>), and instructs\nthe user to resolve the conflicts in that work tree. When\ndone, the user can either finalize the merge with <i>git\nnotes merge --commit</i>, or abort the merge with <i>git\nnotes merge --abort</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Users may\nselect an automated merge strategy from among the following\nusing either -s/--strategy option or configuring\nnotes.mergeStrategy accordingly:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;ours&quot;\nautomatically resolves conflicting notes in favor of the\nlocal version (i.e. the current notes ref).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;theirs&quot;\nautomatically resolves notes conflicts in favor of the\nremote version (i.e. the given notes ref being merged into\nthe current notes ref).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;union&quot;\nautomatically resolves notes conflicts by concatenating the\nlocal and remote versions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;cat_sort_uniq&quot;\nis similar to &quot;union&quot;, but in addition to\nconcatenating the local and remote versions, this strategy\nalso sorts the resulting lines, and removes duplicate lines\nfrom the result. This is equivalent to applying the\n&quot;cat | sort | uniq&quot; shell pipeline to the local\nand remote versions. This strategy is useful if the notes\nfollow a line-based format where one wants to avoid\nduplicated lines in the merge result. Note that if either\nthe local or remote version contain duplicate lines prior to\nthe merge, these will also be removed by this notes merge\nstrategy.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can use\nnotes to add annotations with information that was not\navailable at the time a commit was written.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git notes add\n-m 'Tested-by: Johannes Sixt &lt;j6t@kdbg.org&gt;' 72a144e2\n<br>\n$ git show -s 72a144e <br>\n[...] <br>\nSigned-off-by: Junio C Hamano &lt;gitster@pobox.com&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Notes: <br>\nTested-by: Johannes Sixt &lt;j6t@kdbg.org&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In principle, a\nnote is a regular Git blob, and any kind of (non-)format is\naccepted. You can binary-safely create notes from arbitrary\nfiles using <i>git hash-object</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ cc *.c <br>\n$ blob=$(git hash-object -w a.out) <br>\n$ git notes --ref=built add --allow-empty -C\n&quot;$blob&quot; HEAD</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(You cannot\nsimply use <b>git notes --ref=built add -F a.out HEAD</b>\nbecause that is not binary-safe.) Of course, it\ndoesn&rsquo;t make much sense to display non-text-format\nnotes with <i>git log</i>, so if you use such notes,\nyou&rsquo;ll probably need to write some special-purpose\ntools to do something useful with them.</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">core.notesRef</p>\n\n<p style=\"margin-left:17%;\">Notes ref to read and\nmanipulate instead of <b>refs/notes/commits</b>. Must be an\nunabbreviated ref name. This setting can be overridden\nthrough the environment and command line.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">notes.mergeStrategy</p>\n\n<p style=\"margin-left:17%;\">Which merge strategy to choose\nby default when resolving notes conflicts. Must be one of\n<b>manual</b>, <b>ours</b>, <b>theirs</b>, <b>union</b>, or\n<b>cat_sort_uniq</b>. Defaults to <b>manual</b>. See\n&quot;NOTES MERGE STRATEGIES&quot; section above for more\ninformation on each strategy.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This setting\ncan be overridden by passing the <b>--strategy</b>\noption.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">notes.&lt;name&gt;.mergeStrategy</p>\n\n<p style=\"margin-left:17%;\">Which merge strategy to choose\nwhen doing a notes merge into refs/notes/&lt;name&gt;. This\noverrides the more general &quot;notes.mergeStrategy&quot;.\nSee the &quot;NOTES MERGE STRATEGIES&quot; section above for\nmore information on each available strategy.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">notes.displayRef</p>\n\n<p style=\"margin-left:17%;\">Which ref (or refs, if a glob\nor specified more than once), in addition to the default set\nby <b>core.notesRef</b> or <b>GIT_NOTES_REF</b>, to read\nnotes from when showing commit messages with the <i>git\nlog</i> family of commands. This setting can be overridden\non the command line or by the <b>GIT_NOTES_DISPLAY_REF</b>\nenvironment variable. See <a href=\"https://man.page/1/git-log\">git-log(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">notes.rewrite.&lt;command&gt;</p>\n\n<p style=\"margin-left:17%;\">When rewriting commits with\n&lt;command&gt; (currently <b>amend</b> or <b>rebase</b>),\nif this variable is <b>false</b>, git will not copy notes\nfrom the original to the rewritten commit. Defaults to\n<b>true</b>. See also &quot;<b>notes.rewriteRef</b>&quot;\nbelow.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This setting\ncan be overridden by the <b>GIT_NOTES_REWRITE_REF</b>\nenvironment variable.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">notes.rewriteMode</p>\n\n<p style=\"margin-left:17%;\">When copying notes during a\nrewrite, what to do if the target commit already has a note.\nMust be one of <b>overwrite</b>, <b>concatenate</b>,\n<b>cat_sort_uniq</b>, or <b>ignore</b>. Defaults to\n<b>concatenate</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This setting\ncan be overridden with the <b>GIT_NOTES_REWRITE_MODE</b>\nenvironment variable.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">notes.rewriteRef</p>\n\n<p style=\"margin-left:17%;\">When copying notes during a\nrewrite, specifies the (fully qualified) ref whose notes\nshould be copied. May be a glob, in which case notes in all\nmatching refs will be copied. You may also specify this\nconfiguration several times.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Does not have a\ndefault value; you must configure this variable to enable\nnote rewriting.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Can be\noverridden with the <b>GIT_NOTES_REWRITE_REF</b> environment\nvariable.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_NOTES_REF</b></p>\n\n<p style=\"margin-left:17%;\">Which ref to manipulate notes\nfrom, instead of <b>refs/notes/commits</b>. This overrides\nthe <b>core.notesRef</b> setting.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_NOTES_DISPLAY_REF</b></p>\n\n<p style=\"margin-left:17%;\">Colon-delimited list of refs or\nglobs indicating which refs, in addition to the default from\n<b>core.notesRef</b> or <b>GIT_NOTES_REF</b>, to read notes\nfrom when showing commit messages. This overrides the\n<b>notes.displayRef</b> setting.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A warning will\nbe issued for refs that do not exist, but a glob that does\nnot match any refs is silently ignored.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_NOTES_REWRITE_MODE</b></p>\n\n<p style=\"margin-left:17%;\">When copying notes during a\nrewrite, what to do if the target commit already has a note.\nMust be one of <b>overwrite</b>, <b>concatenate</b>,\n<b>cat_sort_uniq</b>, or <b>ignore</b>. This overrides the\n<b>core.rewriteMode</b> setting.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GIT_NOTES_REWRITE_REF</b></p>\n\n<p style=\"margin-left:17%;\">When rewriting commits, which\nnotes to copy from the original to the rewritten commit.\nMust be a colon-delimited list of refs or globs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If not set in\nthe environment, the list of notes to copy depends on the\n<b>notes.rewrite.&lt;command&gt;</b> and\n<b>notes.rewriteRef</b> settings.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Permitted pathnames have the\nform\n<i>bf</i><b>/</b><i>fe</i><b>/</b><i>30</i><b>/</b><i>...</i><b>/</b><i>680d5a...</i>:\na sequence of directory names of two hexadecimal digits each\nfollowed by a filename with the rest of the object ID.</p></td></tr>\n </table>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SUBCOMMANDS\">SUBCOMMANDS</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#NOTES MERGE STRATEGIES\">NOTES MERGE STRATEGIES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"]}