{"name":"capsh","description":"capsh -\ncapability shell wrapper","body":"\n\n<h1 align=\"center\">CAPSH</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">capsh -\ncapability shell wrapper</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>capsh</b>\n[<i>OPTION</i>]...</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux\ncapability support and use can be explored and constrained\nwith this tool. This tool provides a handy wrapper for\ncertain types of capability testing and environment\ncreation. It also provides some debugging features useful\nfor summarizing capability state.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>capsh</b>\ntakes a number of optional arguments, acting on them in the\norder they are provided. They are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>--help</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"73%\">\n\n\n<p>Display the list of commands supported by\n<b>capsh</b>.</p> </td>\n<td width=\"5%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>--print</b></p>\n\n<p style=\"margin-left:22%;\">Display prevailing capability\nand related state.</p>\n\n<p style=\"margin-left:11%;\"><b>--</b> <i>[args]</i></p>\n\n<p style=\"margin-left:22%;\">Execute <b>/bin/bash</b> with\ntrailing arguments. Note, you can use <b>-c &rsquo;command\nto execute&rsquo;</b> for specific commands.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>==</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Execute <b>capsh</b> again with the remaining arguments.\nUseful for testing <b>exec</b>() behavior.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>--caps=</b><i>cap-set</i></p>\n\n<p style=\"margin-left:22%;\">Set the prevailing process\ncapabilities to those specified by <i>cap-set</i>. Where\n<i>cap-set</i> is a text-representation of capability state\nas per <a href=\"https://man.page/3/cap_from_text\">cap_from_text(3)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--drop=</b><i>cap-list</i></p>\n\n<p style=\"margin-left:22%;\">Remove the listed capabilities\nfrom the prevailing bounding set. The capabilities are a\ncomma-separated list of capabilities as recognized by the\n<a href=\"https://man.page/3/cap_from_name\">cap_from_name(3)</a> function. Use of this feature\nrequires that <b>capsh</b> is operating with\n<b>CAP_SETPCAP</b> in its effective set.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--inh=</b><i>cap-list</i></p>\n\n<p style=\"margin-left:22%;\">Set the inheritable set of\ncapabilities for the current process to equal those provided\nin the comma separated list. For this action to succeed, the\nprevailing process should already have each of these\ncapabilities in the union of the current inheritable and\npermitted capability sets, or <b>capsh</b> should be\noperating with <b>CAP_SETPCAP</b> in its effective set.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--user=</b><i>username</i></p>\n\n<p style=\"margin-left:22%;\">Assume the identity of the\nnamed user. That is, look up the user&rsquo;s UID and GID\nwith <a href=\"https://man.page/3/getpwuid\">getpwuid(3)</a> and their group memberships with\n<a href=\"https://man.page/3/getgrouplist\">getgrouplist(3)</a> and set them all using\n<a href=\"https://man.page/3/cap_setuid\">cap_setuid(3)</a> and <a href=\"https://man.page/3/cap_setgroups\">cap_setgroups(3)</a>. Following\nthis command, the effective capabilities will be cleared,\nbut the permitted set will not be, so the running program is\nstill privileged.</p>\n\n<p style=\"margin-left:11%;\"><b>--modes</b></p>\n\n<p style=\"margin-left:22%;\">Lists all of the libcap modes\nsupported by <b>--mode</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>--mode=</b>&lt;mode&gt;</p>\n\n<p style=\"margin-left:22%;\">Force the program into a\n<a href=\"https://man.page/3/cap_set_mode\">cap_set_mode(3)</a> security mode. This is a set of\nsecurebits and prevailing capability arrangement recommended\nfor its pre-determined security stance.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--inmode=</b>&lt;mode&gt;</p>\n\n<p style=\"margin-left:22%;\">Confirm that the prevailing\nmode is that specified in <i>&lt;mode&gt;</i>, or exit with\na status 1.</p>\n\n<p style=\"margin-left:11%;\"><b>--uid=</b><i>id</i></p>\n\n<p style=\"margin-left:22%;\">Force all UID values to equal\n<i>id</i> using the <a href=\"https://man.page/2/setuid\">setuid(2)</a> system call. This\nargument may require explicit preparation of the effective\nset.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--cap-uid=</b>&lt;uid&gt;</p>\n\n<p style=\"margin-left:22%;\">use the <a href=\"https://man.page/3/cap_setuid\">cap_setuid(3)</a>\nfunction to set the UID of the current process. This\nperforms all preparations for setting the UID without\ndropping capabilities in the process. Following this command\nthe prevailing effective capabilities will be lowered.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--is-uid=</b><i>&lt;id&gt;</i></p>\n\n<p style=\"margin-left:22%;\">Exit with status 1 unless the\ncurrent UID equals <i>&lt;id&gt;</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--gid=</b><i>&lt;id&gt;</i></p>\n\n<p style=\"margin-left:22%;\">Force all GID values to equal\n<i>id</i> using the <a href=\"https://man.page/2/setgid\">setgid(2)</a> system call.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--is-gid=</b><i>&lt;id&gt;</i></p>\n\n<p style=\"margin-left:22%;\">Exit with status 1 unless the\ncurrent GIQ equals <i>&lt;id&gt;</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--groups=</b><i>&lt;gid-list&gt;</i></p>\n\n<p style=\"margin-left:22%;\">Set the supplementary groups to\nthe numerical list provided. The groups are set with the\n<a href=\"https://man.page/2/setgroups\">setgroups(2)</a> system call. See <b>--user</b> for a\nmore convenient way of doing this.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--keep=</b><i>&lt;0|1&gt;</i></p>\n\n<p style=\"margin-left:22%;\">In a non-pure capability mode,\nthe kernel provides liberal privilege to the super-user.\nHowever, it is normally the case that when the super-user\nchanges UID to some lesser user, then capabilities are\ndropped. For these situations, the kernel can permit the\nprocess to retain its capabilities after a <a href=\"https://man.page/2/setuid\">setuid(2)</a>\nsystem call. This feature is known as <i>keep-caps</i>\nsupport. The way to activate it using this program is with\nthis argument. Setting the value to 1 will cause\n<i>keep-caps</i> to be active. Setting it to 0 will cause\nkeep-caps to deactivate for the current process. In all\ncases, <i>keep-caps</i> is deactivated when an <b>exec</b>()\nis performed. See <b>--secbits</b> for ways to disable this\nfeature.</p>\n\n<p style=\"margin-left:11%;\"><b>--secbits=</b><i>N</i></p>\n\n<p style=\"margin-left:22%;\">Set the security-bits for the\nprogram. This is done using the <a href=\"https://man.page/2/prctl\">prctl(2)</a>\n<b>PR_SET_SECUREBITS</b> operation. The list of supported\nbits and their meaning can be found in the\n<b>&lt;sys/secbits.h&gt;</b> header file. The program will\nlist these bits via the <b>--print</b> command. The argument\nis expressed as a numeric bitmask, in any of the formats\npermitted by <a href=\"https://man.page/3/strtoul\">strtoul(3)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--chroot=</b><i>path</i></p>\n\n<p style=\"margin-left:22%;\">Execute the <a href=\"https://man.page/2/chroot\">chroot(2)</a>\nsystem call with the new root-directory (/) equal to\n<i>path</i>. This operation requires <b>CAP_SYS_CHROOT</b>\nto be in effect.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--forkfor=</b><i>sec</i></p>\n\n<p style=\"margin-left:22%;\">This command causes the program\nto fork a child process for so many seconds. The child will\nsleep that long and then exit with status 0. The purpose of\nthis command is to support exploring the way processes are\nkillable in the face of capability changes. See the\n<b>--killit</b> command. Only one fork can be active at a\ntime.</p>\n\n<p style=\"margin-left:11%;\"><b>--killit=</b><i>sig</i></p>\n\n<p style=\"margin-left:22%;\">This commands causes a\n<b>--forkfor</b> child to be <a href=\"https://man.page/2/kill\">kill(2)</a>d with the\nspecified signal. The command then waits for the child to\nexit. If the exit status does not match the signal being\nused to kill it, the <b>capsh</b> program exits with status\n1.</p>\n\n<p style=\"margin-left:11%;\"><b>--decode=</b><i>N</i></p>\n\n<p style=\"margin-left:22%;\">This is a convenience feature.\nIf you look at <b>/proc/1/status</b> there are some\ncapability related fields of the following form:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">CapInh:\n0000000000000000</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>CapPrm:</p></td>\n<td width=\"77%\">\n\n\n<p>0000003fffffffff</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>CapEff:</p></td>\n<td width=\"77%\">\n\n\n<p>0000003fffffffff</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>CapBnd:</p></td>\n<td width=\"77%\">\n\n\n<p>0000003fffffffff</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>CapAmb:</p></td>\n<td width=\"77%\">\n\n\n<p>0000000000000000</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nprovides a quick way to decode a capability vector\nrepresented in this hexadecimal form. Here&rsquo;s an\nexample that decodes the two lowest capability bits:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$ <b>capsh\n--decode=3</b> <br>\n0x0000000000000003=cap_chown,cap_dac_override</p>\n\n\n<p style=\"margin-left:11%;\"><b>--supports=</b><i>xxx</i></p>\n\n<p style=\"margin-left:22%;\">As the kernel evolves, more\ncapabilities are added. This option can be used to verify\nthe existence of a capability on the system. For example,\n<b>--supports=</b><i>cap_syslog</i> will cause <b>capsh</b>\nto promptly exit with a status of 1 when run on kernel\n2.6.27. However, when run on kernel 2.6.38 it will silently\nsucceed.</p>\n\n<p style=\"margin-left:11%;\"><b>--has-p=</b><i>xxx</i></p>\n\n<p style=\"margin-left:22%;\">Exit with status 1 unless the\n<i>permitted</i> vector has capability <b>xxx</b>\nraised.</p>\n\n<p style=\"margin-left:11%;\"><b>--has-ambient</b></p>\n\n<p style=\"margin-left:22%;\">Performs a check to see if the\nrunning kernel supports ambient capabilities. If not,\n<b>capsh</b> exits with status 1.</p>\n\n<p style=\"margin-left:11%;\"><b>--has-a=</b><i>xxx</i></p>\n\n<p style=\"margin-left:22%;\">Exit with status 1 unless the\n<i>ambient</i> vector has capability <b>xxx</b> raised.</p>\n\n<p style=\"margin-left:11%;\"><b>--addamb=</b><i>xxx</i></p>\n\n<p style=\"margin-left:22%;\">Adds the specified ambient\ncapability to the running process.</p>\n\n<p style=\"margin-left:11%;\"><b>--delamb=</b><i>xxx</i></p>\n\n<p style=\"margin-left:22%;\">Removes the specified ambient\ncapability from the running process.</p>\n\n<p style=\"margin-left:11%;\"><b>--noamb</b></p>\n\n<p style=\"margin-left:22%;\">Drops all ambient capabilities\nfrom the running process.</p>\n\n<h2>EXIT STATUS\n<a name=\"EXIT STATUS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Following\nsuccessful execution, <b>capsh</b> exits with status 0.\nFollowing an error, <b>capsh</b> immediately exits with\nstatus 1.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Written by\nAndrew G. Morgan &lt;morgan@kernel.org&gt;.</p>\n\n<h2>REPORTING BUGS\n<a name=\"REPORTING BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please report\nbugs via: <br>\n\nhttps://bugzilla.kernel.org/buglist.cgi?component=libcap&amp;list_id=1047723&amp;product=Tools&amp;resolution=---</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/libcap\">libcap(3)</a>,\n<b>getcap</b>(8), <b>setcap</b>(8) and\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXIT STATUS\">EXIT STATUS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#REPORTING BUGS\">REPORTING BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"]}