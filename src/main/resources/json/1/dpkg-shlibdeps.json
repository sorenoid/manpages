{"name":"dpkg-shlibdeps","body":"\n\n<h1 align=\"center\">dpkg-shlibdeps</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dpkg-shlibdeps\n- generate shared library substvar dependencies</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dpkg-shlibdeps</b>\n[<i>option</i>...] [<b>-e</b>] <i>executable</i>\n[<i>option</i>...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dpkg-shlibdeps</b>\ncalculates shared library dependencies for executables named\nin its arguments. The dependencies are added to the\nsubstitution variables file <b>debian/substvars</b> as\nvariable names <b>shlibs:</b><i>dependency-field</i> where\n<i>dependency-field</i> is a dependency field name. Any\nother variables starting with <b>shlibs:</b> are removed\nfrom the file.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dpkg-shlibdeps</b>\nhas two possible sources of information to generate\ndependency information. Either <i>symbols</i> files or\n<i>shlibs</i> files. For each binary that\n<b>dpkg-shlibdeps</b> analyzes, it finds out the list of\nlibraries that it&rsquo;s linked with. Then, for each\nlibrary, it looks up either the <i>symbols</i> file, or the\n<i>shlibs</i> file (if the former doesn&rsquo;t exist or if\ndebian/shlibs.local contains the relevant dependency). Both\nfiles are supposed to be provided by the library package and\nshould thus be available as\n/var/lib/dpkg/info/<i>package</i>.<i>symbols</i> or\n/var/lib/dpkg/info/<i>package</i>.<i>shlibs</i>. The package\nname is identified in two steps: find the library file on\nthe system (looking in the same directories that\n<b>ld.so</b> would use), then use <b>dpkg -S</b>\n<i>library-file</i> to lookup the package providing the\nlibrary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Symbols\nfiles</b> <br>\nSymbols files contain finer-grained dependency information\nby providing the minimum dependency for each symbol that the\nlibrary exports. The script tries to find a symbols file\nassociated to a library package in the following places\n(first match is used): <br>\ndebian/*/DEBIAN/symbols</p>\n\n<p style=\"margin-left:17%;\">Shared library information\ngenerated by the current build process that also invoked\n<b>dpkg-shlibdeps</b>. They are generated by\n<a href=\"https://man.page/1/dpkg-gensymbols\">dpkg-gensymbols(1)</a>. They are only used if the library\nis found in a package&rsquo;s build tree. The symbols file\nin that build tree takes precedence over symbols files from\nother binary packages.</p>\n\n\n<p style=\"margin-left:11%;\">/etc/dpkg/symbols/<i>package</i>.symbols.<i>arch</i>\n<br>\n/etc/dpkg/symbols/<i>package</i>.symbols</p>\n\n<p style=\"margin-left:17%;\">Per-system overriding shared\nlibrary dependency information. <i>arch</i> is the\narchitecture of the current system (obtained by\n<b>dpkg-architecture -qDEB_HOST_ARCH</b>).</p>\n\n<p style=\"margin-left:11%;\">Output from\n&ldquo;<b>dpkg-query --control-path</b> <i>package</i>\nsymbols&rdquo;</p>\n\n<p style=\"margin-left:17%;\">Package-provided shared library\ndependency information. Unless overridden by\n<b>--admindir</b>, those files are located in\n/var/lib/dpkg.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While scanning\nthe symbols used by all binaries, <b>dpkg-shlibdeps</b>\nremembers the (biggest) minimal version needed for each\nlibrary. At the end of the process, it is able to write out\nthe minimal dependency for every library used (provided that\nthe information of the <i>symbols</i> files are\naccurate).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As a safe-guard\nmeasure, a symbols file can provide a\n<b>Build-Depends-Package</b> meta-information field and\n<b>dpkg-shlibdeps</b> will extract the minimal version\nrequired by the corresponding package in the\n<b>Build-Depends</b> field and use this version if\nit&rsquo;s higher than the minimal version computed by\nscanning symbols.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Shlibs\nfiles</b> <br>\nShlibs files associate directly a library to a dependency\n(without looking at the symbols). It&rsquo;s thus often\nstronger than really needed but very safe and easy to\nhandle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ndependencies for a library are looked up in several places.\nThe first file providing information for the library of\ninterest is used: <br>\ndebian/shlibs.local</p>\n\n<p style=\"margin-left:17%;\">Package-local overriding shared\nlibrary dependency information.</p>\n\n<p style=\"margin-left:11%;\">/etc/dpkg/shlibs.override</p>\n\n<p style=\"margin-left:17%;\">Per-system overriding shared\nlibrary dependency information.</p>\n\n<p style=\"margin-left:11%;\">debian/*/DEBIAN/shlibs</p>\n\n<p style=\"margin-left:17%;\">Shared library information\ngenerated by the current build process that also invoked\n<b>dpkg-shlibdeps</b>. They are only used if the library is\nfound in a package&rsquo;s build tree. The shlibs file in\nthat build tree takes precedence over shlibs files from\nother binary packages.</p>\n\n<p style=\"margin-left:11%;\">Output from\n&ldquo;<b>dpkg-query --control-path</b> <i>package</i>\nshlibs&rdquo;</p>\n\n<p style=\"margin-left:17%;\">Package-provided shared library\ndependency information. Unless overridden by\n<b>--admindir</b>, those files are located in\n/var/lib/dpkg.</p>\n\n<p style=\"margin-left:11%;\">/etc/dpkg/shlibs.default</p>\n\n<p style=\"margin-left:17%;\">Per-system default shared\nlibrary dependency information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The extracted\ndependencies are then directly used (except if they are\nfiltered out because they have been identified as duplicate,\nor as weaker than another dependency).</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dpkg-shlibdeps</b>\ninterprets non-option arguments as executable names, just as\nif they&rsquo;d been supplied as <b>-e</b><i>executable</i>.\n<b><br>\n-e</b><i>executable</i></p>\n\n<p style=\"margin-left:17%;\">Include dependencies\nappropriate for the shared libraries required by\n<i>executable</i>. This option can be used multiple\ntimes.</p>\n\n<p style=\"margin-left:11%;\"><b>-l</b><i>directory</i></p>\n\n<p style=\"margin-left:17%;\">Prepend <i>directory</i> to the\nlist of directories to search for private shared libraries\n(since dpkg 1.17.0). This option can be used multiple\ntimes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Note:</b>\nUse this option instead of setting\n<b><small>LD_LIBRARY_PATH</small></b> , as that environment\nvariable is used to control the run-time linker and abusing\nit to set the shared library paths at build-time can be\nproblematic when cross-compiling for example.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-d</b><i>dependency-field</i></p>\n\n<p style=\"margin-left:17%;\">Add dependencies to be added to\nthe control file dependency field <i>dependency-field</i>.\n(The dependencies for this field are placed in the variable\n<b>shlibs:</b><i>dependency-field</i>.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>-d</b><i>dependency-field</i> option takes effect for all\nexecutables after the option, until the next\n<b>-d</b><i>dependency-field</i>. The default\n<i>dependency-field</i> is <b>Depends</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the same\ndependency entry (or set of alternatives) appears in more\nthan one of the recognized dependency field names\n<b>Pre-Depends</b>, <b>Depends</b>, <b>Recommends</b>,\n<b>Enhances</b> or <b>Suggests</b> then\n<b>dpkg-shlibdeps</b> will automatically remove the\ndependency from all fields except the one representing the\nmost important dependencies.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-p</b><i>varname-prefix</i></p>\n\n<p style=\"margin-left:17%;\">Start substitution variables\nwith <i>varname-prefix</i><b>:</b> instead of\n<b>shlibs:</b>. Likewise, any existing substitution\nvariables starting with <i>varname-prefix</i><b>:</b>\n(rather than <b>shlibs:</b>) are removed from the\nsubstitution variables file.</p>\n\n<p style=\"margin-left:11%;\"><b>-O</b>[<i>filename</i>]</p>\n\n<p style=\"margin-left:17%;\">Print substitution variable\nsettings to standard output (or <i>filename</i> if\nspecified, since dpkg 1.17.2), rather than being added to\nthe substitution variables file (<b>debian/substvars</b> by\ndefault).</p>\n\n<p style=\"margin-left:11%;\"><b>-t</b><i>type</i></p>\n\n<p style=\"margin-left:17%;\">Prefer shared library\ndependency information tagged for the given package type. If\nno tagged information is available, falls back to untagged\ninformation. The default package type is <b>deb</b>. Shared\nlibrary dependency information is tagged for a given type by\nprefixing it with the name of the type, a colon, and\nwhitespace.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-L</b><i>local-shlibs-file</i></p>\n\n<p style=\"margin-left:17%;\">Read overriding shared library\ndependency information from <i>local-shlibs-file</i> instead\nof <b>debian/shlibs.local</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-T</b><i>substvars-file</i></p>\n\n<p style=\"margin-left:17%;\">Write substitution variables in\n<i>substvars-file</i>; the default is\n<b>debian/substvars</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Enable verbose mode (since dpkg 1.14.8). Numerous\nmessages are displayed to explain what <b>dpkg-shlibdeps</b>\ndoes.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-x</b><i>package</i></p>\n\n<p style=\"margin-left:17%;\">Exclude the package from the\ngenerated dependencies (since dpkg 1.14.8). This is useful\nto avoid self-dependencies for packages which provide\n<small>ELF</small> binaries (executables or library plugins)\nusing a library contained in the same package. This option\ncan be used multiple times to exclude several packages.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-S</b><i>package-build-dir</i></p>\n\n<p style=\"margin-left:17%;\">Look into\n<i>package-build-dir</i> first when trying to find a library\n(since dpkg 1.14.15). This is useful when the source package\nbuilds multiple flavors of the same library and you want to\nensure that you get the dependency from a given binary\npackage. You can use this option multiple times: directories\nwill be tried in the same order before directories of other\nbinary packages.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-I</b><i>package-build-dir</i></p>\n\n<p style=\"margin-left:17%;\">Ignore <i>package-build-dir</i>\nwhen looking for shlibs, symbols, and shared library files\n(since dpkg 1.18.5). You can use this option multiple\ntimes.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--ignore-missing-info</b></p>\n\n<p style=\"margin-left:17%;\">Do not fail if dependency\ninformation can&rsquo;t be found for a shared library (since\ndpkg 1.14.8). Usage of this option is discouraged, all\nlibraries should provide dependency information (either with\nshlibs files, or with symbols files) even if they are not\nyet used by other packages.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--warnings=</b><i>value</i></p>\n\n<p style=\"margin-left:17%;\"><i>value</i> is a bit field\ndefining the set of warnings that can be emitted by\n<b>dpkg-shlibdeps</b> (since dpkg 1.14.17). Bit 0 (value=1)\nenables the warning &ldquo;symbol <i>sym</i> used by\n<i>binary</i> found in none of the libraries&rdquo;, bit 1\n(value=2) enables the warning &ldquo;package could avoid a\nuseless dependency&rdquo; and bit 2 (value=4) enables the\nwarning &ldquo;<i>binary</i> should not be linked against\n<i>library</i>&rdquo;. The default <i>value</i> is 3: the\nfirst two warnings are active by default, the last one is\nnot. Set <i>value</i> to 7 if you want all warnings to be\nactive.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--admindir=</b><i>dir</i></p>\n\n<p style=\"margin-left:17%;\">Change the location of the\n<b>dpkg</b> database (since dpkg 1.14.0). The default\nlocation is <i>/var/lib/dpkg</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>-?</b>, <b>--help</b></p>\n\n<p style=\"margin-left:17%;\">Show the usage message and\nexit.</p>\n\n<p style=\"margin-left:11%;\"><b>--version</b></p>\n\n<p style=\"margin-left:17%;\">Show the version and exit.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>DPKG_COLORS</small></b></p>\n\n<p style=\"margin-left:17%;\">Sets the color mode (since dpkg\n1.18.5). The currently accepted values are: <b>auto</b>\n(default), <b>always</b> and <b>never</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>DPKG_NLS</small></b></p>\n\n<p style=\"margin-left:17%;\">If set, it will be used to\ndecide whether to activate Native Language Support, also\nknown as internationalization (or i18n) support (since dpkg\n1.19.0). The accepted values are: <b>0</b> and <b>1</b>\n(default).</p>\n\n<h2>DIAGNOSTICS\n<a name=\"DIAGNOSTICS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Warnings</b>\n<br>\nSince <b>dpkg-shlibdeps</b> analyzes the set of symbols used\nby each binary of the generated package, it is able to emit\nwarnings in several cases. They inform you of things that\ncan be improved in the package. In most cases, those\nimprovements concern the upstream sources directly. By order\nof decreasing importance, here are the various warnings that\nyou can encounter: <b><br>\nsymbol</b> <i>sym</i> <b>used by</b> <i>binary</i> <b>found\nin none of the libraries.</b></p>\n\n<p style=\"margin-left:17%;\">The indicated symbol has not\nbeen found in the libraries linked with the binary. The\n<i>binary</i> is most likely a library and it needs to be\nlinked with an additional library during the build process\n(option <b>-l</b><i>library</i> of the linker).</p>\n\n<p style=\"margin-left:11%;\"><i>binary</i> <b>contains an\nunresolvable reference to symbol</b> <i>sym</i><b>:\nit&rsquo;s probably <br>\na plugin</b></p>\n\n<p style=\"margin-left:17%;\">The indicated symbol has not\nbeen found in the libraries linked with the binary. The\n<i>binary</i> is most likely a plugin and the symbol is\nprobably provided by the program that loads this plugin. In\ntheory a plugin doesn&rsquo;t have any <small>SONAME</small>\nbut this binary does have one and as such it could not be\nclearly identified as such. However the fact that the binary\nis stored in a non-public directory is a strong indication\nthat&rsquo;s it&rsquo;s not a normal shared library. If the\nbinary is really a plugin, then disregard this warning. But\nthere&rsquo;s always the possibility that it&rsquo;s a real\nlibrary and that programs linking to it are using an\n<small>RPATH</small> so that the dynamic loader finds it. In\nthat case, the library is broken and needs to be fixed.</p>\n\n<p style=\"margin-left:11%;\"><b>package could avoid a\nuseless dependency if</b> <i>binary</i> <b>was not linked\n<br>\nagainst</b> <i>library</i> <b>(it uses none of the\nlibrary&rsquo;s symbols)</b></p>\n\n<p style=\"margin-left:17%;\">None of the <i>binaries</i>\nthat are linked with <i>library</i> use any of the symbols\nprovided by the library. By fixing all the binaries, you\nwould avoid the dependency associated to this library\n(unless the same dependency is also generated by another\nlibrary that is really used).</p>\n\n<p style=\"margin-left:11%;\"><b>package could avoid a\nuseless dependency if</b> <i>binaries</i> <b>were not linked\n<br>\nagainst</b> <i>library</i> <b>(they use none of the\nlibrary&rsquo;s symbols)</b></p>\n\n<p style=\"margin-left:17%;\">Exactly the same as the above\nwarning, but for multiple binaries.</p>\n\n<p style=\"margin-left:11%;\"><i>binary</i> <b>should not be\nlinked against</b> <i>library</i> <b>(it uses none of the\n<br>\nlibrary&rsquo;s symbols)</b></p>\n\n<p style=\"margin-left:17%;\">The <i>binary</i> is linked to\na library that it doesn&rsquo;t need. It&rsquo;s not a\nproblem but some small performance improvements in binary\nload time can be obtained by not linking this library to\nthis binary. This warning checks the same information as the\nprevious one but does it for each binary instead of doing\nthe check globally on all binaries analyzed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Errors <br>\ndpkg-shlibdeps</b> will fail if it can&rsquo;t find a public\nlibrary used by a binary or if this library has no\nassociated dependency information (either shlibs file or\nsymbols file). A public library has a <small>SONAME</small>\nand is versioned (libsomething.so.<i>X</i>). A private\nlibrary (like a plugin) should not have a\n<small>SONAME</small> and doesn&rsquo;t need to be\nversioned. <b><br>\ncouldn&rsquo;t find library</b> <i>library-soname</i>\n<b>needed by</b> <i>binary</i> <b>(its <small>RPATH</small>\nis <br>\n&rsquo;</b><i>rpath</i><b>&rsquo;)</b></p>\n\n<p style=\"margin-left:17%;\">The <i>binary</i> uses a\nlibrary called <i>library-soname</i> but\n<b>dpkg-shlibdeps</b> has been unable to find the library.\n<b>dpkg-shlibdeps</b> creates a list of directories to check\nas following: directories listed in the <small>RPATH</small>\nof the binary, directories added by the <b>-l</b> option,\ndirectories listed in the\n<b><small>LD_LIBRARY_PATH</small></b> environment variable,\ncross multiarch directories (ex. /lib/arm64-linux-gnu,\n/usr/lib/arm64-linux-gnu), standard public directories\n(/lib, /usr/lib), directories listed in /etc/ld.so.conf, and\nobsolete multilib directories (/lib32, /usr/lib32, /lib64,\n/usr/lib64). Then it checks those directories in the\npackage&rsquo;s build tree of the binary being analyzed, in\nthe packages&rsquo; build trees indicated with the <b>-S</b>\ncommand-line option, in other packages&rsquo; build trees\nthat contains a DEBIAN/shlibs or DEBIAN/symbols file and\nfinally in the root directory. If the library is not found\nin any of those directories, then you get this error.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the library\nnot found is in a private directory of the same package,\nthen you want to add the directory with <b>-l</b>. If\nit&rsquo;s in another binary package being built, you want\nto make sure that the shlibs/symbols file of this package is\nalready created and that <b>-l</b> contains the appropriate\ndirectory if it also is in a private directory.</p>\n\n<p style=\"margin-left:11%;\"><b>no dependency information\nfound for</b> <i>library-file</i> <b>(used by</b>\n<i>binary</i><b>).</b></p>\n\n<p style=\"margin-left:17%;\">The library needed by\n<i>binary</i> has been found by <b>dpkg-shlibdeps</b> in\n<i>library-file</i> but <b>dpkg-shlibdeps</b> has been\nunable to find any dependency information for that library.\nTo find out the dependency, it has tried to map the library\nto a Debian package with the help of <b>dpkg -S</b>\n<i>library-file</i>. Then it checked the corresponding\nshlibs and symbols files in /var/lib/dpkg/info/, and in the\nvarious package&rsquo;s build trees (debian/*/DEBIAN/).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This failure\ncan be caused by a bad or missing shlibs or symbols file in\nthe package of the library. It might also happen if the\nlibrary is built within the same source package and if the\nshlibs files has not yet been created (in which case you\nmust fix debian/rules to create the shlibs before calling\n<b>dpkg-shlibdeps</b>). Bad <small>RPATH</small> can also\nlead to the library being found under a non-canonical name\n(example: /usr/lib/openoffice.org/../lib/libssl.so.0.9.8\ninstead of /usr/lib/libssl.so.0.9.8) that&rsquo;s not\nassociated to any package, <b>dpkg-shlibdeps</b> tries to\nwork around this by trying to fallback on a canonical name\n(using <a href=\"https://man.page/3/realpath\">realpath(3)</a>) but it might not always work.\nIt&rsquo;s always best to clean up the <small>RPATH</small>\nof the binary to avoid problems.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Calling\n<b>dpkg-shlibdeps</b> in verbose mode (<b>-v</b>) will\nprovide much more information about where it tried to find\nthe dependency information. This might be useful if you\ndon&rsquo;t understand why it&rsquo;s giving you this\nerror.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/5/deb-shlibs\">deb-shlibs(5)</a>,\n<a href=\"https://man.page/5/deb-symbols\">deb-symbols(5)</a>, <a href=\"https://man.page/1/dpkg-gensymbols\">dpkg-gensymbols(1)</a>.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#DIAGNOSTICS\">DIAGNOSTICS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"]}