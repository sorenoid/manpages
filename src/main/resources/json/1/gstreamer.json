{"name":"gstreamer","description":"gst-launch-1.0\n- build and run a GStreamer pipeline","body":"\n\n<h1 align=\"center\">GStreamer</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gst-launch-1.0\n- build and run a GStreamer pipeline</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>gst-launch-1.0</b>\n<i>[OPTION...]</i> PIPELINE-DESCRIPTION</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>gst-launch-1.0</i>\nis a tool that builds and runs basic <i>GStreamer</i>\npipelines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In simple form,\na PIPELINE-DESCRIPTION is a list of elements separated by\nexclamation marks (!). Properties may be appended to\nelements, in the form <i>property=value</i>. A\n&quot;preset&quot; can also be set using the\n<i>@preset=&lt;preset name&gt;</i> syntax.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a complete\ndescription of possible PIPELINE-DESCRIPTIONS see the\nsection <i>pipeline description</i> below or consult the\nGStreamer documentation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat <i>gst-launch-1.0</i> is primarily a debugging tool for\ndevelopers and users. You should not build applications on\ntop of it. For applications, use the gst_parse_launch()\nfunction of the GStreamer API as an easy way to construct\npipelines from pipeline descriptions.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>gst-launch-1.0</i>\naccepts the following options:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>--help</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"60%\">\n\n\n<p>Print help synopsis and available FLAGS</p></td>\n<td width=\"17%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-v, --verbose</b></p>\n\n<p style=\"margin-left:23%;\">Output status information and\nproperty notifications</p>\n\n<p style=\"margin-left:11%;\"><b>-q, --quiet</b></p>\n\n<p style=\"margin-left:23%;\">Do not print any progress\ninformation</p>\n\n<p style=\"margin-left:11%;\"><b>-m, --messages</b></p>\n\n<p style=\"margin-left:23%;\">Output messages posted on the\npipeline&rsquo;s bus</p>\n\n<p style=\"margin-left:11%;\"><b>-t, --tags</b></p>\n\n<p style=\"margin-left:23%;\">Output tags (also known as\nmetadata)</p>\n\n<p style=\"margin-left:11%;\"><b>-e,\n--eos-on-shutdown</b></p>\n\n<p style=\"margin-left:23%;\">Force an EOS event on sources\nbefore shutting the pipeline down. This is useful to make\nsure muxers create readable files when a muxing pipeline is\nshut down forcefully via Control-C.</p>\n\n<p style=\"margin-left:11%;\"><b>-i, --index</b></p>\n\n<p style=\"margin-left:23%;\">Gather and print index\nstatistics. This is mostly useful for playback or recording\npipelines.</p>\n\n<p style=\"margin-left:11%;\"><b>-f, --no-fault</b></p>\n\n<p style=\"margin-left:23%;\">Do not install a fault\nhandler</p>\n\n<p style=\"margin-left:11%;\"><b>-T, --trace</b></p>\n\n<p style=\"margin-left:23%;\">Print memory allocation traces.\nThe feature must be enabled at compile time to work.</p>\n\n<p style=\"margin-left:11%;\"><b>--no-position</b></p>\n\n<p style=\"margin-left:23%;\">Do not print current position\nof pipeline. If this option is unspecified, the position\nwill be printed when stdout is a TTY. To enable printing\nposition when stdout is not a TTY, use\n&quot;force-position&quot; option.</p>\n\n<p style=\"margin-left:11%;\"><b>--force-position</b></p>\n\n<p style=\"margin-left:23%;\">Allow printing current position\nof pipeline even if stdout is not a TTY. This option has no\neffect if the &quot;no-position&quot; option is\nspecified.</p>\n\n<h2>GSTREAMER OPTIONS\n<a name=\"GSTREAMER OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>gst-launch-1.0</i>\nalso accepts the following options that are common to all\nGStreamer applications:</p>\n\n<p style=\"margin-left:11%;\"><b>--gst-version</b></p>\n\n<p style=\"margin-left:23%;\">Prints the version string of\nthe <i>GStreamer</i> core library.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--gst-fatal-warnings</b></p>\n\n<p style=\"margin-left:23%;\">Causes <i>GStreamer</i> to\nabort if a warning message occurs. This is equivalent to\nsetting the environment variable G_DEBUG to\n&rsquo;fatal_warnings&rsquo; (see the section <i>environment\nvariables</i> below for further information).</p>\n\n<p style=\"margin-left:11%;\"><b>--gst-debug=STRING</b></p>\n\n<p style=\"margin-left:23%;\">A comma separated list of\ncategory_name:level pairs to specify debugging levels for\neach category. Level is in the range 0-9 where 0 will show\nno messages, and 9 will show all messages. The wildcard *\ncan be used to match category names. Note that the order of\ncategories and levels is important, wildcards at the end may\noverride levels set earlier. The log levels are: 1=ERROR,\n2=WARNING, 3=FIXME, 4=INFO, 5=DEBUG, 6=LOG, 7=TRACE,\n9=MEMDUMP. Since GStreamer 1.2 one can also use the debug\nlevel names, e.g. --gst-debug=*sink:LOG. A full description\nof the various debug levels can be found in the GStreamer\ncore library API documentation, in the &quot;Running\nGStreamer Applications&quot; section.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Use\n--gst-debug-help to show category names</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Example:\nGST_CAT:5,GST_ELEMENT_*:3,oggdemux:5</p>\n\n\n<p style=\"margin-left:11%;\"><b>--gst-debug-level=LEVEL</b></p>\n\n<p style=\"margin-left:23%;\">Sets the threshold for printing\ndebugging messages. A higher level will print more messages.\nThe useful range is 0-9, with the default being 0. Level 6\n(LOG level) will show all information that is usually\nrequired for debugging purposes. Higher levels are only\nuseful in very specific cases. See above for the full list\nof levels.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--gst-debug-no-color</b></p>\n\n<p style=\"margin-left:23%;\"><i>GStreamer</i> normally\nprints debugging messages so that the messages are\ncolor-coded when printed to a terminal that handles ANSI\nescape sequences. Using this option causes <i>GStreamer</i>\nto print messages without color. Setting the\n<b>GST_DEBUG_NO_COLOR</b> environment variable will achieve\nthe same thing.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--gst-debug-color-mode</b></p>\n\n<p style=\"margin-left:23%;\"><i>GStreamer</i> normally\nprints debugging messages so that the messages are\ncolor-coded when printed to a terminal that handles ANSI\nescape sequences (on *nix), or uses W32 console API to color\nthe messages printed into a console (on W32). Using this\noption causes <i>GStreamer</i> to print messages without\ncolor (&rsquo;off&rsquo; or &rsquo;disable&rsquo;), print\nmessages with default colors (&rsquo;on&rsquo; or\n&rsquo;auto&rsquo;), or print messages using ANSI escape\nsequences for coloring (&rsquo;unix&rsquo;). Setting the\n<b>GST_DEBUG_COLOR_MODE</b> environment variable will\nachieve the same thing.</p>\n\n<p style=\"margin-left:11%;\"><b>--gst-debug-disable</b></p>\n\n<p style=\"margin-left:23%;\">Disables debugging.</p>\n\n<p style=\"margin-left:11%;\"><b>--gst-debug-help</b></p>\n\n<p style=\"margin-left:23%;\">Prints a list of available\ndebug categories and their default debugging level.</p>\n\n<p style=\"margin-left:11%;\"><b>--gst-plugin-spew</b></p>\n\n<p style=\"margin-left:23%;\"><i>GStreamer</i> info flags to\nset Enable printout of errors while loading <i>GStreamer</i>\nplugins</p>\n\n\n<p style=\"margin-left:11%;\"><b>--gst-plugin-path=PATH</b></p>\n\n<p style=\"margin-left:23%;\">Add directories separated with\n&rsquo;:&rsquo; to the plugin search path</p>\n\n\n<p style=\"margin-left:11%;\"><b>--gst-plugin-load=PLUGINS</b></p>\n\n<p style=\"margin-left:23%;\">Preload plugins specified in a\ncomma-separated list. Another way to specify plugins to\npreload is to use the environment variable\nGST_PLUGIN_PATH</p>\n\n<h2>PIPELINE DESCRIPTION\n<a name=\"PIPELINE DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A pipeline\nconsists <i>elements</i> and <i>links</i>. <i>Elements</i>\ncan be put into <i>bins</i> of different sorts.\n<i>Elements</i>, <i>links</i> and <i>bins</i> can be\nspecified in a pipeline description in any order.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Elements</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ELEMENTTYPE\n<i>[PROPERTY1 ...]</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Creates an\nelement of type ELEMENTTYPE and sets the PROPERTIES.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Properties</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">PROPERTY=VALUE\n...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sets the\nproperty to the specified value. You can use\n<b>gst-inspect-1.0</b>(1) to find out about properties and\nallowed values of different elements. <br>\nEnumeration properties can be set by name, nick or\nvalue.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Presets</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">@preset=&lt;preset\nname&gt; ...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sets the preset\non the element. you can use gst-inspect-1.0(1) to find out\nwhat presets are available for a specific element.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bins</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>[BINTYPE.]</i>\n( <i>[PROPERTY1 ...]</i> PIPELINE-DESCRIPTION )</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Specifies that\na bin of type BINTYPE is created and the given properties\nare set. Every element between the braces is put into the\nbin. Please note the dot that has to be used after the\nBINTYPE. You will almost never need this functionality, it\nis only really useful for applications using the\ngst_launch_parse() API with &rsquo;bin&rsquo; as bintype.\nThat way it is possible to build partial pipelines instead\nof a full-fledged top-level pipeline.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Links</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>[[SRCELEMENT].[PAD1,...]]</i>\n! <i>[[SINKELEMENT].[PAD1,...]]\n[[SRCELEMENT].[PAD1,...]]</i> ! CAPS !\n<i>[[SINKELEMENT].[PAD1,...]] [[SRCELEMENT].[PAD1,...]]</i>\n: <i>[[SINKELEMENT].[PAD1,...]]\n[[SRCELEMENT].[PAD1,...]]</i> : CAPS :\n<i>[[SINKELEMENT].[PAD1,...]]</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Links the\nelement with name SRCELEMENT to the element with name\nSINKELEMENT, using the caps specified in CAPS as a filter.\nNames can be set on elements with the name property. If the\nname is omitted, the element that was specified directly in\nfront of or after the link is used. This works across bins.\nIf a padname is given, the link is done with these pads. If\nno pad names are given all possibilities are tried and a\nmatching pad is used. If multiple padnames are given, both\nsides must have the same number of pads specified and\nmultiple links are done in the given order. <br>\nSo the simplest link is a simple exclamation mark, that\nlinks the element to the left of it to the element right of\nit. <br>\nLinking using the : operator attempts to link all possible\npads between the elements</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Caps</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">MEDIATYPE <i>[,\nPROPERTY[, PROPERTY ...]]] [; CAPS[; CAPS ...]]</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Creates a\ncapability with the given media type and optionally with\ngiven properties. The media type can be escaped using &quot;\nor &rsquo;. If you want to chain caps, you can add more caps\nin the same format afterwards.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Properties</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">NAME=<i>[(TYPE)]</i>VALUE\n<br>\nin lists and ranges: <i>[(TYPE)]</i>VALUE</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sets the\nrequested property in capabilities. The name is an\nalphanumeric value and the type can have the following\ncase-insensitive values: <br>\n- <b>i</b> or <b>int</b> for integer values or ranges <br>\n- <b>f</b> or <b>float</b> for float values or ranges <br>\n- <b>b</b>, <b>bool</b> or <b>boolean</b> for boolean values\n<br>\n- <b>s</b>, <b>str</b> or <b>string</b> for strings <br>\n- <b>fraction</b> for fractions (framerate,\npixel-aspect-ratio) <br>\n- <b>l</b> or <b>list</b> for lists <br>\nIf no type was given, the following order is tried: integer,\nfloat, boolean, string. <br>\nInteger values must be parsable by <b>strtol()</b>, floats\nby <b>strtod()</b>. FOURCC values may either be integers or\nstrings. Boolean values are (case insensitive) <i>yes</i>,\n<i>no</i>, <i>true</i> or <i>false</i> and may like strings\nbe escaped with &quot; or &rsquo;. <br>\nRanges are in this format: [ VALUE, VALUE ] <br>\nLists use this format: { VALUE <i>[, VALUE ...]</i> }</p>\n\n<h2>PIPELINE EXAMPLES\n<a name=\"PIPELINE EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The examples\nbelow assume that you have the correct plug-ins available.\nIn general, &quot;pulsesink&quot; can be substituted with\nanother audio output plug-in such as &quot;alsasink&quot; or\n&quot;osxaudiosink&quot; Likewise, &quot;xvimagesink&quot;\ncan be substituted with &quot;ximagesink&quot;,\n&quot;glimagesink&quot;, or &quot;osxvideosink&quot;. Keep\nin mind though that different sinks might accept different\nformats and even the same sink might accept different\nformats on different machines, so you might need to add\nconverter elements like audioconvert and audioresample (for\naudio) or videoconvert (for video) in front of the sink to\nmake things work.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Audio\nplayback</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Play the mp3\nmusic file &quot;music.mp3&quot; using a libmpg123-based\nplug-in and output to an Pulseaudio device <b><br>\ngst-launch-1.0 filesrc location=music.mp3 ! mpegaudioparse !\nmpg123audiodec ! audioconvert ! audioresample !\npulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Play an Ogg\nVorbis format file <b><br>\ngst-launch-1.0 filesrc location=music.ogg ! oggdemux !\nvorbisdec ! audioconvert ! audioresample ! pulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Play an mp3\nfile or an http stream using GIO <b><br>\ngst-launch-1.0 giosrc location=music.mp3 ! mpegaudioparse !\nmpg123audiodec ! audioconvert ! pulsesink <br>\ngst-launch-1.0 giosrc location=http://domain.com/music.mp3 !\nmpegaudioparse ! mpg123audiodec ! audioconvert !\naudioresample ! pulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use GIO to play\nan mp3 file located on an SMB server <b><br>\ngst-launch-1.0 giosrc location=smb://computer/music.mp3 !\nmpegaudioparse ! mpg123audiodec ! audioconvert !\naudioresample ! pulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Format\nconversion</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Convert an mp3\nmusic file to an Ogg Vorbis file <b><br>\ngst-launch-1.0 filesrc location=music.mp3 ! mpegaudioparse !\nmpg123audiodec ! audioconvert ! vorbisenc ! oggmux !\nfilesink location=music.ogg</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Convert to the\nFLAC format <b><br>\ngst-launch-1.0 filesrc location=music.mp3 ! mpegaudioparse !\nmpg123audiodec ! audioconvert ! flacenc ! filesink\nlocation=test.flac</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Other</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Plays a .WAV\nfile that contains raw audio data (PCM). <b><br>\ngst-launch-1.0 filesrc location=music.wav ! wavparse !\naudioconvert ! audioresample ! pulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Convert a .WAV\nfile containing raw audio data into an Ogg Vorbis or mp3\nfile <b><br>\ngst-launch-1.0 filesrc location=music.wav ! wavparse !\naudioconvert ! vorbisenc ! oggmux ! filesink\nlocation=music.ogg <br>\ngst-launch-1.0 filesrc location=music.wav ! wavparse !\naudioconvert ! lamemp3enc ! filesink\nlocation=music.mp3</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rips all tracks\nfrom compact disc and convert them into a single mp3 file\n<b><br>\ngst-launch-1.0 cdparanoiasrc mode=continuous ! audioconvert\n! lamemp3enc ! mpegaudioparse ! id3v2mux ! filesink\nlocation=cd.mp3</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rips track 5\nfrom the CD and converts it into a single mp3 file <b><br>\ngst-launch-1.0 cdparanoiasrc track=5 ! audioconvert !\nlamemp3enc ! mpegaudioparse ! id3v2mux ! filesink\nlocation=track5.mp3</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using\n<b>gst-inspect-1.0</b>(1), it is possible to discover\nsettings like the above for cdparanoiasrc that will tell it\nto rip the entire cd or only tracks of it. Alternatively,\nyou can use an URI and gst-launch-1.0 will find an element\n(such as cdparanoia) that supports that protocol for you,\ne.g.: <b><br>\ngst-launch-1.0 cdda://5 ! lamemp3enc vbr=new vbr-quality=6 !\nfilesink location=track5.mp3</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Records sound\nfrom your audio input and encodes it into an ogg file\n<b><br>\ngst-launch-1.0 pulsesrc ! audioconvert ! vorbisenc ! oggmux\n! filesink location=input.ogg</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Video</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Display only\nthe video portion of an MPEG-1 video file, outputting to an\nX display window <b><br>\ngst-launch-1.0 filesrc location=JB_FF9_TheGravityOfLove.mpg\n! dvddemux ! mpegvideoparse ! mpeg2dec ! xvimagesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Display the\nvideo portion of a .vob file (used on DVDs), outputting to\nan SDL window <b><br>\ngst-launch-1.0 filesrc location=/flflfj.vob ! dvddemux !\nmpegvideoparse ! mpeg2dec ! sdlvideosink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Play both video\nand audio portions of an MPEG movie <b><br>\ngst-launch-1.0 filesrc location=movie.mpg ! dvddemux\nname=demuxer demuxer. ! queue ! mpegvideoparse ! mpeg2dec !\nsdlvideosink demuxer. ! queue ! mpegaudioparse !\nmpg123audiodec ! audioconvert ! audioresample !\npulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Play an AVI\nmovie with an external text subtitle stream <b><br>\ngst-launch-1.0 filesrc location=movie.mpg ! mpegdemux\nname=demuxer demuxer. ! queue ! mpegvideoparse ! mpeg2dec !\nvideoconvert ! sdlvideosink demuxer. ! queue !\nmpegaudioparse ! mpg123audiodec ! audioconvert !\naudioresample ! pulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\nalso shows how to refer to specific pads by name if an\nelement (here: textoverlay) has multiple sink or source\npads. <b><br>\ngst-launch-1.0 textoverlay name=overlay ! videoconvert !\nvideoscale ! autovideosink filesrc location=movie.avi !\ndecodebin ! videoconvert ! overlay.video_sink filesrc\nlocation=movie.srt ! subparse ! overlay.text_sink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Play an AVI\nmovie with an external text subtitle stream using playbin\n<b><br>\ngst-launch-1.0 playbin uri=file:///path/to/movie.avi\nsuburi=file:///path/to/movie.srt</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Network\nstreaming</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Stream video\nusing RTP and network elements.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command\nwould be run on the transmitter <b><br>\ngst-launch-1.0 v4l2src !\nvideo/x-raw,width=128,height=96,format=UYVY ! videoconvert !\nffenc_h263 ! video/x-h263 ! rtph263ppay pt=96 ! udpsink\nhost=192.168.1.1 port=5000</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use this\ncommand on the receiver <b><br>\ngst-launch-1.0 udpsrc port=5000 ! application/x-rtp,\nclock-rate=90000,payload=96 ! rtph263pdepay queue-delay=0 !\nffdec_h263 ! xvimagesink</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Diagnostic</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generate a null\nstream and ignore it (and print out details). <b><br>\ngst-launch-1.0 -v fakesrc num-buffers=16 ! fakesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generate a pure\nsine tone to test the audio output <b><br>\ngst-launch-1.0 audiotestsrc ! audioconvert ! audioresample !\npulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generate a\nfamiliar test pattern to test the video output <b><br>\ngst-launch-1.0 videotestsrc ! xvimagesink <br>\ngst-launch-1.0 videotestsrc ! ximagesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Automatic\nlinking</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can use the\ndecodebin element to automatically select the right elements\nto get a working pipeline.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Play any\nsupported audio format <b><br>\ngst-launch-1.0 filesrc location=musicfile ! decodebin !\naudioconvert ! audioresample ! pulsesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Play any\nsupported video format with video and audio output. Threads\nare used automatically. To make this even easier, you can\nuse the playbin element: <b><br>\ngst-launch-1.0 filesrc location=videofile ! decodebin\nname=decoder decoder. ! queue ! audioconvert ! audioresample\n! pulsesink decoder. ! videoconvert ! xvimagesink <br>\ngst-launch-1.0 playbin uri=file:///home/joe/foo.avi</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Filtered\nconnections</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These examples\nshow you how to use filtered caps.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Show a test\nimage and use the YUY2 or YV12 video format for this.\n<b><br>\ngst-launch-1.0 videotestsrc !\n&rsquo;video/x-raw,format=YUY2;video/x-raw,format=YV12&rsquo;\n! xvimagesink</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Record audio\nand write it to a .wav file. Force usage of signed 16 to 32\nbit samples and a sample rate between 32kHz and 64KHz.\n<b><br>\ngst-launch-1.0 pulsesrc !\n&rsquo;audio/x-raw,rate=[32000,64000],format={S16LE,S24LE,S32LE}&rsquo;\n! wavenc ! filesink location=recording.wav</b></p>\n\n<h2>ENVIRONMENT VARIABLES\n<a name=\"ENVIRONMENT VARIABLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GST_DEBUG</b></p>\n\n<p style=\"margin-left:22%;\">Comma-separated list of debug\ncategories and levels (e.g. GST_DEBUG=totem:4,typefind:5).\n&rsquo;*&rsquo; is allowed as a wildcard as part of debug\ncategory names (e.g. GST_DEBUG=*sink:6,*audio*:6). Since\n1.2.0 it is also possible to specify the log level by name\n(1=ERROR, 2=WARN, 3=FIXME, 4=INFO, 5=DEBUG, 6=LOG, 7=TRACE,\n9=MEMDUMP) (e.g. GST_DEBUG=*audio*:LOG)</p>\n\n<p style=\"margin-left:11%;\"><b>GST_DEBUG_NO_COLOR</b></p>\n\n<p style=\"margin-left:22%;\">When this environment variable\nis set, coloured debug output is disabled.</p>\n\n\n<p style=\"margin-left:11%;\"><b>GST_DEBUG_DUMP_DOT_DIR</b></p>\n\n<p style=\"margin-left:22%;\">When set to a filesystem path,\nstore &rsquo;dot&rsquo; files of pipeline graphs there.\nThese can then later be converted into an image using the\n&rsquo;dot&rsquo; utility from the graphviz set of tools,\nlike this: dot foo.dot -Tsvg -o foo.svg (png or jpg are also\npossible as output format). There is also a utility called\n&rsquo;xdot&rsquo; which allows you to view the .dot file\ndirectly without converting it first. <br>\nWhen the pipeline changes state through NULL to PLAYING and\nback to NULL, a dot file is generated on each state change.\nTo write a snapshot of the pipeline state, send a SIGHUP to\nthe process.</p>\n\n<p style=\"margin-left:11%;\"><b>GST_REGISTRY</b></p>\n\n<p style=\"margin-left:22%;\">Path of the plugin registry\nfile. Default is ~/.cache/gstreamer-1.0/registry-CPU.bin\nwhere CPU is the machine/cpu type GStreamer was compiled\nfor, e.g. &rsquo;i486&rsquo;, &rsquo;i686&rsquo;,\n&rsquo;x86-64&rsquo;, &rsquo;ppc&rsquo;, etc. (check the\noutput of &quot;uname -i&quot; and &quot;uname -m&quot; for\ndetails).</p>\n\n<p style=\"margin-left:11%;\"><b>GST_REGISTRY_UPDATE</b></p>\n\n<p style=\"margin-left:22%;\">Set to &quot;no&quot; to force\nGStreamer to assume that no plugins have changed, been added\nor been removed. This will make GStreamer skip the initial\ncheck whether a rebuild of the registry cache is required or\nnot. This may be useful in embedded environments where the\ninstalled plugins never change. Do not use this option in\nany other setup.</p>\n\n<p style=\"margin-left:11%;\"><b>GST_PLUGIN_PATH</b></p>\n\n<p style=\"margin-left:22%;\">Specifies a list of directories\nto scan for additional plugins. These take precedence over\nthe system plugins.</p>\n\n\n<p style=\"margin-left:11%;\"><b>GST_PLUGIN_SYSTEM_PATH</b></p>\n\n<p style=\"margin-left:22%;\">Specifies a list of plugins\nthat are always loaded by default. If not set, this defaults\nto the system-installed path, and the plugins installed in\nthe user&rsquo;s home directory</p>\n\n<p style=\"margin-left:11%;\"><b>GST_DEBUG_FILE</b></p>\n\n<p style=\"margin-left:22%;\">Set this variable to a file\npath to redirect all GStreamer debug messages to this file.\nIf left unset, debug messages with be output unto the\nstandard error.</p>\n\n<p style=\"margin-left:11%;\"><b>ORC_CODE</b></p>\n\n<p style=\"margin-left:22%;\">Useful Orc environment\nvariable. Set ORC_CODE=debug to enable debuggers such as gdb\nto create useful backtraces from Orc-generated code. Set\nORC_CODE=backup or ORC_CODE=emulate if you suspect\nOrc&rsquo;s SIMD code generator is producing incorrect code.\n(Quite a few important GStreamer plugins like videotestsrc,\naudioconvert or audioresample use Orc).</p>\n\n<p style=\"margin-left:11%;\"><b>G_DEBUG</b></p>\n\n<p style=\"margin-left:22%;\">Useful GLib environment\nvariable. Set G_DEBUG=fatal_warnings to make GStreamer\nprograms abort when a critical warning such as an assertion\nfailure occurs. This is useful if you want to find out which\npart of the code caused that warning to be triggered and\nunder what circumstances. Simply set G_DEBUG as mentioned\nabove and run the program in gdb (or let it core dump). Then\nget a stack trace in the usual way.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">~/.cache/gstreamer-1.0/registry-*.bin</p>\n\n<p style=\"margin-left:23%;\">The plugin cache; can be\ndeleted at any time, will be re-created automatically when\nit does not exist yet or plugins change. Based on\nXDG_CACHE_DIR, so may be in a different location than the\none suggested.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>gst-inspect-1.0</b>(1),\n<b>gst-launch-1.0</b>(1),</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The GStreamer\nteam at http://gstreamer.freedesktop.org/</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#GSTREAMER OPTIONS\">GSTREAMER OPTIONS</a>","<a href=\"#PIPELINE DESCRIPTION\">PIPELINE DESCRIPTION</a>","<a href=\"#PIPELINE EXAMPLES\">PIPELINE EXAMPLES</a>","<a href=\"#ENVIRONMENT VARIABLES\">ENVIRONMENT VARIABLES</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>"]}