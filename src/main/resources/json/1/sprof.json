{"name":"sprof","body":"\n\n<h1 align=\"center\">SPROF</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sprof - read\nand display shared object profiling data</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sprof</b>\n[<i>option</i>]... <i>shared-object-path</i>\n[<i>profile-data-path</i>]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>sprof</b> command displays a profiling summary for the\nshared object (shared library) specified as its first\ncommand-line argument. The profiling summary is created\nusing previously generated profiling data in the (optional)\nsecond command-line argument. If the profiling data pathname\nis omitted, then <b>sprof</b> will attempt to deduce it\nusing the soname of the shared object, looking for a file\nwith the name <i>&lt;soname&gt;.profile</i> in the current\ndirectory.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncommand-line options specify the profile output to be\nproduced: <b><br>\n-c</b>, <b>--call-pairs</b></p>\n\n<p style=\"margin-left:22%;\">Print a list of pairs of call\npaths for the interfaces exported by the shared object,\nalong with the number of times each path is used.</p>\n\n<p style=\"margin-left:11%;\"><b>-p</b>,\n<b>--flat-profile</b></p>\n\n<p style=\"margin-left:22%;\">Generate a flat profile of all\nof the functions in the monitored object, with counts and\nticks.</p>\n\n<p style=\"margin-left:11%;\"><b>-q</b>, <b>--graph</b></p>\n\n<p style=\"margin-left:22%;\">Generate a call graph.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If none of the\nabove options is specified, then the default behavior is to\ndisplay a flat profile and a call graph.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nadditional command-line options are available: <b><br>\n-?</b>, <b>--help</b></p>\n\n<p style=\"margin-left:22%;\">Display a summary of\ncommand-line options and arguments and exit.</p>\n\n<p style=\"margin-left:11%;\"><b>--usage</b></p>\n\n<p style=\"margin-left:22%;\">Display a short usage message\nand exit.</p>\n\n<p style=\"margin-left:11%;\"><b>-V</b>, <b>--version</b></p>\n\n<p style=\"margin-left:22%;\">Display the program version and\nexit.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>sprof</b> command is a GNU extension, not present in\nPOSIX.1.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nexample demonstrates the use of <b>sprof</b>. The example\nconsists of a main program that calls two functions in a\nshared object. First, the code of the main program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat\nprog.c</b> <br>\n#include &lt;stdlib.h&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void x1(void);\n<br>\nvoid x2(void);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nx1(); <br>\nx2(); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<i>x1</i>() and <i>x2</i>() are defined in the following\nsource file that is used to construct the shared object:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat\nlibdemo.c</b> <br>\n#include &lt;unistd.h&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void <br>\nconsumeCpu1(int lim) <br>\n{ <br>\nfor (int j = 0; j &lt; lim; j++)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n\n\n<p>getppid();</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void <br>\nx1(void) { <br>\nfor (int j = 0; j &lt; 100; j++)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>consumeCpu1(200000);</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void <br>\nconsumeCpu2(int lim) <br>\n{ <br>\nfor (int j = 0; j &lt; lim; j++)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>getppid();</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void <br>\nx2(void) <br>\n{ <br>\nfor (int j = 0; j &lt; 1000; j++)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>consumeCpu2(10000);</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now we\nconstruct the shared object with the real name\n<i>libdemo.so.1.0.1</i>, and the soname\n<i>libdemo.so.1</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cc -g\n-fPIC -shared -Wl,-soname,libdemo.so.1 \\ <br>\n-o libdemo.so.1.0.1 libdemo.c</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then we\nconstruct symbolic links for the library soname and the\nlibrary linker name:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>ln -sf\nlibdemo.so.1.0.1 libdemo.so.1</b> <br>\n$ <b>ln -sf libdemo.so.1 libdemo.so</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Next, we\ncompile the main program, linking it against the shared\nobject, and then list the dynamic dependencies of the\nprogram:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cc -g -o\nprog prog.c -L. -ldemo</b> <br>\n$ <b>ldd prog</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>linux-vdso.so.1 =&gt; (0x00007fff86d66000)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>libdemo.so.1 =&gt; not found</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>libc.so.6 =&gt; /lib64/libc.so.6\n(0x00007fd4dc138000)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>/lib64/ld-linux-x86-64.so.2 (0x00007fd4dc51f000)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to get\nprofiling information for the shared object, we define the\nenvironment variable <b>LD_PROFILE</b> with the soname of\nthe library:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>export\nLD_PROFILE=libdemo.so.1</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We then define\nthe environment variable <b>LD_PROFILE_OUTPUT</b> with the\npathname of the directory where profile output should be\nwritten, and create that directory if it does not exist\nalready:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>export\nLD_PROFILE_OUTPUT=$(pwd)/prof_data</b> <br>\n$ <b>mkdir -p $LD_PROFILE_OUTPUT</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>LD_PROFILE</b>\ncauses profiling output to be <i>appended</i> to the output\nfile if it already exists, so we ensure that there is no\npreexisting profiling data:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>rm -f\n$LD_PROFILE_OUTPUT/$LD_PROFILE.profile</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We then run the\nprogram to produce the profiling output, which is written to\na file in the directory specified in\n<b>LD_PROFILE_OUTPUT</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>LD_LIBRARY_PATH=. ./prog</b> <br>\n$ <b>ls prof_data</b> <br>\nlibdemo.so.1.profile</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We then use the\n<b>sprof -p</b> option to generate a flat profile with\ncounts and ticks:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>sprof -p\nlibdemo.so.1 $LD_PROFILE_OUTPUT/libdemo.so.1.profile</b>\n<br>\nFlat profile:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Each sample\ncounts as 0.01 seconds. <br>\n% cumulative self self total <br>\ntime seconds seconds calls us/call us/call name <br>\n60.00 0.06 0.06 100 600.00 consumeCpu1 <br>\n40.00 0.10 0.04 1000 40.00 consumeCpu2 <br>\n0.00 0.10 0.00 1 0.00 x1 <br>\n0.00 0.10 0.00 1 0.00 x2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>sprof\n-q</b> option generates a call graph:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>sprof -q\nlibdemo.so.1 $LD_PROFILE_OUTPUT/libdemo.so.1.profile</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">index % time\nself children called name</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">0.00 0.00\n100/100 x1 [1] <br>\n[0] 100.0 0.00 0.00 100 consumeCpu1 [0] <br>\n----------------------------------------------- <br>\n0.00 0.00 1/1 &lt;UNKNOWN&gt; <br>\n[1] 0.0 0.00 0.00 1 x1 [1] <br>\n0.00 0.00 100/100 consumeCpu1 [0] <br>\n----------------------------------------------- <br>\n0.00 0.00 1000/1000 x2 [3] <br>\n[2] 0.0 0.00 0.00 1000 consumeCpu2 [2] <br>\n----------------------------------------------- <br>\n0.00 0.00 1/1 &lt;UNKNOWN&gt; <br>\n[3] 0.0 0.00 0.00 1 x2 [3] <br>\n0.00 0.00 1000/1000 consumeCpu2 [2] <br>\n-----------------------------------------------</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Above and\nbelow, the &quot;&lt;UNKNOWN&gt;&quot; strings represent\nidentifiers that are outside of the profiled object (in this\nexample, these are instances of <i>main()</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>sprof\n-c</b> option generates a list of call pairs and the number\nof their occurrences:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>sprof -c\nlibdemo.so.1 $LD_PROFILE_OUTPUT/libdemo.so.1.profile</b>\n<br>\n&lt;UNKNOWN&gt; x1 1 <br>\nx1 consumeCpu1 100 <br>\n&lt;UNKNOWN&gt; x2 1 <br>\nx2 consumeCpu2 1000</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/gprof\">gprof(1)</a>,\n<a href=\"https://man.page/1/ldd\">ldd(1)</a>, <b>ld.so</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"]}