{"name":"axfer-transfer","description":"axfer-transfer\n- transferrer of audio data frame for sound devices and\nnodes.","body":"\n\n<h1 align=\"center\">AXFER-TRANSFER</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">axfer-transfer\n- transferrer of audio data frame for sound devices and\nnodes.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>axfer\ntransfer</b> <i>direction</i> [ <i>common-options</i> ] [\n<i>backend-options</i> ] [ <i>filepath</i> ]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>axfer\ntransfer</b> <i>direction</i> [ <i>common-options</i> ] [\n<i>backend-options</i> ] <i>-I</i> | <i>--separate-channels\nfilepath ...</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">direction =\n<b>capture</b> | <b>playback</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">common-options\n= ( read <i>OPTIONS</i> section )</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">backend-options\n= ( read <i>OPTIONS</i> section )</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">filepaths = (\nread <i>OPTIONS</i> section )</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>transfer</b> subcommand of <b>axfer</b> performs\ntransmission of audio data frames for devices available in\nsupported backends. This program is essentially designed to\nuse alsa-lib APIs (libasound backend) to handle sound\ndevices supported by Linux sound subsystem (ALSA).</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Direction\n<br>\ncapture</b></p>\n\n<p style=\"margin-left:22%;\">Operates for capture\ntransmission.</p>\n\n<p style=\"margin-left:11%;\"><b>playback</b></p>\n\n<p style=\"margin-left:22%;\">Operates for playback\ntransmission.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Filepath</b>\n<br>\nFilepath is handled as a path relative to current working\ndirectory of run time if it's not full path from root\ndirectory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The standard\ninput or output is used if filepath is not specified or\ngiven as <i>'-'</i> .</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For playback\ntransmission, container format of given <i>filepath</i> is\ndetected automatically and metadata is used for parameters\nof sample format, channels, rate, duration. If nothing\ndetected, content of given file path is handled as raw data.\nIn this case, the parameters should be indicated as\noptions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Multiple\n<i>filepaths</i> are allowed with <i>-I</i> |\n<i>--separate-channels</i> option. In this case, standard\ninput and output is not available. The same <i>filepath</i>\nis not allowed except for paths listed below: <br>\n- /dev/null <br>\n- /dev/zero <br>\n- /dev/full <br>\n- /dev/random <br>\n- /dev/urandom</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Common\noptions <br>\n-h, --help</b></p>\n\n<p style=\"margin-left:22%;\">Print help messages and finish\nrun time.</p>\n\n<p style=\"margin-left:11%;\"><b>-q, --quiet</b></p>\n\n<p style=\"margin-left:22%;\">Quiet mode. Suppress messages\n(not sound :))</p>\n\n<p style=\"margin-left:11%;\"><b>-v, --verbose</b></p>\n\n<p style=\"margin-left:22%;\">Verbose mode. Runtime dumps\nsupplemental information according to the number of this\noption given in command line.</p>\n\n<p style=\"margin-left:11%;\"><b>-d, --duration=#</b></p>\n\n<p style=\"margin-left:22%;\">Interrupt after # seconds. A\nvalue of zero means infinity. The default is zero, so if\nthis option is omitted then the transmission process will\nrun until it is killed. Either <i>-d</i> or <i>-s</i> option\nis available exclusively.</p>\n\n<p style=\"margin-left:11%;\"><b>-s, --samples=#</b></p>\n\n<p style=\"margin-left:22%;\">Interrupt after transmission of\n# number of data frames. A value of zero means infinity. The\ndefault is zero, so if this options is omitted then the\ntransmission process will run until it is killed. Either\n<i>-d</i> or <i>-s</i> option is available exclusively.</p>\n\n<p style=\"margin-left:11%;\"><b>-f, --format=FORMAT</b></p>\n\n<p style=\"margin-left:22%;\">Indicate format of audio\nsample. This is required for capture transmission, or\nplayback transmission with files including raw audio\ndata.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Available\nsample format is listed below: <br>\n- [S8|U8|S16|U16|S32|U32][_LE|_BE] <br>\n- [S24|U24][_LE|_BE] <br>\n- FLOAT[_LE|_BE] <br>\n- FLOAT64[_LE|_BE] <br>\n- IEC958_SUBFRAME[_LE|_BE] <br>\n- MU_LAW <br>\n- A_LAW <br>\n- [S20|U20][_LE|_BE] <br>\n- [S24|U24][_3LE|_3BE] <br>\n- [S20|U20][_3LE|_3BE] <br>\n- [S18|U18][_3LE|_3BE] <br>\n- DSD_U8 <br>\n- DSD_[U16|U32][_LE|_BE]</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If endian-ness\nis omitted, host endian-ness is used.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Some special\nformats are available: <br>\n- cd (16 bit little endian, 44100, stereo) [= -f S16_LE -c 2\n-r 44100] <br>\n- cdr (16 bit big endian, 44100, stereo) [= -f S16_BE -c 2\n-f 44100] <br>\n- dat (16 bit little endian, 48000, stereo) [= -f S16_LE -c\n2 -r 48000]</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If omitted,\n<i>U8</i> is used as a default. Actual available formats are\nrestricted by each transmission backend.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Unavailable\nsample format is listed below. These format has size of data\nframe unaligned to byte unit.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">- IMA_ADPCM\n<br>\n- MPEG <br>\n- GSM <br>\n- SPECIAL <br>\n- G723_24 <br>\n- G723_24_1B <br>\n- G723_40 <br>\n- G723_40_1B</p>\n\n<p style=\"margin-left:11%;\"><b>-c, --channels=#</b></p>\n\n<p style=\"margin-left:22%;\">Indicate the number of audio\ndata samples per frame. This is required for capture\ntransmission, or playback transmission with files including\nraw audio data. The value should be between <i>1 to 256</i>\n. If omitted, <i>1</i> is used as a default.</p>\n\n<p style=\"margin-left:11%;\"><b>-r, --rate=#</b></p>\n\n<p style=\"margin-left:22%;\">Indicate the number of audio\ndata frame per second. This is required for capture\ntransmission, or playback transmission with files including\nraw audio data. If the value is less than <i>1000</i> , it's\ninterpreted by <i>kHz</i> unit. The value should be between\n<i>2000</i> and <i>192000</i> . If omitted, <i>8000</i> is\nused as a default.</p>\n\n<p style=\"margin-left:11%;\"><b>-t, --file-type=TYPE</b></p>\n\n<p style=\"margin-left:22%;\">Indicate the type of file. This\nis required for capture transmission. Available types are\nlisted below: <br>\n- wav: Microsoft/IBM RIFF/Wave format <br>\n- au, sparc: Sparc AU format <br>\n- voc: Creative Tech. voice format <br>\n- raw: raw data</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When nothing is\nindicated, for capture transmission, the type is decided\naccording to suffix of <i>filepath</i> , and <i>raw</i> type\nis used for fallback.</p>\n\n<p style=\"margin-left:11%;\"><b>-I,\n--separate-channels</b></p>\n\n<p style=\"margin-left:22%;\">Indicate this option when\nseveral files are going to be handled. For capture\ntransmission, if one filepath is given as <i>filepath</i> ,\na list of <i>filepaths</i> is generated in a formula\n'&lt;filepath&gt;-&lt;sequential number&gt;[.suffix]'. The\nsuffix is omitted when raw format of container is used.</p>\n\n<p style=\"margin-left:11%;\"><b>--dump-hw-params</b></p>\n\n<p style=\"margin-left:22%;\">Dump hardware parameters and\nfinish run time if backend supports it.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--xfer-backend=BACKEND</b></p>\n\n<p style=\"margin-left:22%;\">Select backend of transmission\nfrom a list below. The default is libasound. <br>\n- libasound <br>\n- libffado (optional if compiled)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Backend\noptions for libasound <br>\n-D, --device=NODE</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option is\nused to select PCM node in libasound configuration space.\nAvailable nodes are listed by <i>pcm</i> operation of\n<i>list</i> subcommand.</p>\n\n<p style=\"margin-left:11%;\"><b>-N, --nonblock</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">With this\noption, PCM substream is opened in non-blocking mode. When\naudio data frame is not available in buffer of the PCM\nsubstream, I/O operation immediately returns without\nblocking process. This option implicitly uses\n<i>--waiter-type</i> option as well to prevent heavy\nconsumption of CPU time.</p>\n\n<p style=\"margin-left:11%;\"><b>-M, --mmap</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">With this\noption, audio data frame is processed directly in buffer of\nPCM substream if selected node supports this operation.\nWithout the option, temporary buffers are used to copy audio\ndata frame for buffer of PCM substream. This option\nimplicitly uses <i>--waiter-type</i> option as well to\nprevent heavy consumption of CPU time.</p>\n\n<p style=\"margin-left:11%;\"><b>-F, --period-size=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nconfigures given value to <i>period_size</i> hardware\nparameter of PCM substream. The parameter indicates the\nnumber of audio data frame per period in buffer of the PCM\nsubstream. Actual number is decided as a result of\ninteraction between each implementation of PCM plugin\nchained from the selected PCM node, and in-kernel driver or\nPCM I/O plugins.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Ideally, the\nsame amount of audio data frame as the value should be\nhandled in one I/O operation. Actually, it is not, depending\non implementation of the PCM plugins, in-kernel driver, PCM\nI/O plugins and scheduling model. For 'hw' PCM plugin in\n'irq' scheduling model, the value is used to decide\nintervals of hardware interrupt, thus the same amount of\naudio data frame as the value is expected to be available\nfor one I/O operation.</p>\n\n<p style=\"margin-left:11%;\"><b>--period-time=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nconfigures given value to <i>period_time</i> hardware\nparameter of PCM substream. This option is similar to\n<i>--period-size</i> option, however its unit is\nmicro-second.</p>\n\n<p style=\"margin-left:11%;\"><b>-B, --buffer-size=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nconfigures given value to <i>buffer_size</i> hardware\nparameter of PCM substream. The parameter indicates the\nnumber of audio data frame in buffer of PCM substream.\nActual number is decided as a result of interaction between\neach implementation of PCM plugin chained from the selected\nPCM node, and in-kernel driver or PCM I/O plugins.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Ideally, this\nis multiples of the number of audio data frame per period,\nthus the size of period. Actually, it is not, depending on\nimplementation of the PCM plugins, in-kernel driver and PCM\nI/O plugins.</p>\n\n<p style=\"margin-left:11%;\"><b>--buffer-time=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nconfigures given value to <i>buffer_time</i> hardware\nparameter of PCM substream. This option is similar to\n<i>--buffer-size</i> option, however its unit is\nmicro-second.</p>\n\n<p style=\"margin-left:11%;\"><b>--waiter-type=TYPE</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nindicates the type of waiter for event notification. At\npresent, four types are available; <i>default</i> ,\n<i>select</i> , <i>poll</i> and <i>epoll</i> . With\n<i>default</i> type, 'snd_pcm_wait()' is used. With\n<i>select</i> type, 'select(2)' system call is used. With\n<i>poll</i> type, 'poll(2)' system call is used. With\n<i>epoll</i> type, Linux-specific 'epoll(7)' system call is\nused.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nshould correspond to one of <i>--nonblock</i> or\n<i>--mmap</i> options, or <i>timer</i> value of\n<i>--sched-model</i> option. Neither this option nor\n<i>--test-nowait</i> is available at the same time.</p>\n\n<p style=\"margin-left:11%;\"><b>--sched-model=MODEL</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nselects scheduling model for process of this program. One of\n<i>irq</i> or <i>timer</i> is available. In detail, please\nread 'SCHEDULING MODEL' section.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When nothing\nspecified, <i>irq</i> model is used.</p>\n\n<p style=\"margin-left:11%;\"><b>-A, --avail-min=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nconfigures given value to <i>avail-min</i> software\nparameter of PCM substream. In blocking mode, the value is\nused as threshold of the number of available audio data\nframes in buffer of PCM substream to wake up process blocked\nby I/O operation. In non-blocking mode, any I/O operation\nreturns -EAGAIN until the available number of audio data\nframe reaches the threshold.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option has\nan effect in cases neither <i>--mmap</i> nor <i>timer</i>\nvalue of <i>--sched-model</i> option is used.</p>\n\n<p style=\"margin-left:11%;\"><b>-R, --start-delay=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nconfigures given value to <i>start_threshold</i> software\nparameter of PCM substream. The value is used as threshold\nto start PCM substream automatically. At present, this\noption has an effect in cases neither <i>--mmap</i> nor\n<i>timer</i> value of <i>--sched-model</i> option is\nused.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For playback\ntransmission, when the number of accumulated audio data\nframe in buffer of PCM substream to which this program\nwrites out reaches the threshold, the PCM substream starts\nautomatically without an explicit call of\n<i>snd_pcm_start()</i> to the PCM substream.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For capture\ntransmission, this option is useless. The number of\naccumulated audio data frame is not increased without an\nexplicit call of <i>snd_pcm_start()</i> to the PCM\nsubstream.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option has\nan effect in cases neither <i>--mmap</i> nor <i>timer</i>\nvalue of <i>--sched-model</i> option is used.</p>\n\n<p style=\"margin-left:11%;\"><b>-T, --stop-delay=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nconfigures given value to <i>stop_threshold</i> software\nparameter of PCM substream. The value is used as threshold\nto stop PCM substream automatically. At present, this option\nhas an effect in cases neither <i>--mmap</i> nor\n<i>timer</i> value of <i>--sched-model</i> option is\nused.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For capture\ntransmission, when the number of accumulated audio data\nframe in buffer of PCM substream to which a driver or\nalsa-lib PCM plugins write reaches the threshold, the PCM\nsubstream stops automatically without an explicit call of\n<i>snd_pcm_stop()</i> to the PCM substream. This is a case\nthat this program leaves the audio data frames without\nreading for a while.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For playback\ntransmission, when the number available audio data frame in\nbuffer of PCM substream from which a driver or alsa-lib PCM\nplugins read reaches the threshold, the PCM substream stops\nautomatically without an explicit call of\n<i>snd_pcm_stop()</i> to the PCM substream. This is a case\nthat this program leaves the audio data frames without\nwriting for a while.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option has\nan effect in cases neither <i>--mmap</i> nor <i>timer</i>\nvalue of <i>--sched-model</i> option is used.</p>\n\n<p style=\"margin-left:11%;\"><b>--disable-resample</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option has\nan effect for 'plug' plugin in alsa-lib to suppress\nconversion of sampling rate for audio data frame.</p>\n\n<p style=\"margin-left:11%;\"><b>--disable-channels</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option has\nan effect for 'plug' plugin in alsa-lib to suppress\nconversion of channels for audio data frame.</p>\n\n<p style=\"margin-left:11%;\"><b>--disable-format</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option has\nan effect for 'plug' plugin in alsa-lib to suppress\nconversion of sample format for audio data frame.</p>\n\n<p style=\"margin-left:11%;\"><b>--disable-softvol</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option has\nan effect for 'softvol' plugin in alsa-lib to suppress\nconversion of samples for audio data frame via additional\ncontrol element.</p>\n\n<p style=\"margin-left:11%;\"><b>--fatal-errors</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nsuppresses recovery operation from XRUN state of running PCM\nsubstream, then process of this program is going to finish\nas usual.</p>\n\n<p style=\"margin-left:11%;\"><b>--test-nowait</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\ndisables any waiter for I/O event notification. I/O\noperations are iterated till any of audio data frame is\navailable. The option brings heavy load in consumption of\nCPU time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Backend\noptions for libffado</b> <br>\nThis backend is automatically available when configure\nscript detects <i>ffado_streaming_init()</i> symbol in\nlibffado shared object. <b><br>\n-p, --port=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nuses given value to decide which 1394 OHCI controller is\nused to communicate. When Linux system has two 1394 OHCI\ncontrollers, <i>0</i> or <i>1</i> are available. Neither\nthis option nor <i>-g</i> is available at the same time. If\nnothing specified, libffado performs to communicate to units\non IEEE 1394 bus managed by all of 1394 OHCI controller\navailable in Linux system.</p>\n\n<p style=\"margin-left:11%;\"><b>-n, --node=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nuses given value to decide which unit is used to\ncommunicate. This option requires <i>-p</i> option to\nindicate which 1394 OHCI controller is used to communicate\nto the specified unit.</p>\n\n<p style=\"margin-left:11%;\"><b>-g,\n--guid=HEXADECIMAL</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nuses given value to decide a target unit to communicate. The\nvalue should be prefixed with &rsquo;0x&rsquo; and consists\nof hexadecimal literal letters (0-9, a-f, A-F). Neither this\noption nor <i>-p</i> is available at the same time. If\nnothing specified, libffado performs to communicate to units\non IEEE 1394 bus managed by all of 1394 OHCI controller\navailable in Linux system.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--frames-per-period=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nuses given value to decide the number of audio data frame in\none read/write operation. The operation is blocked till the\nnumber of available audio data frame exceeds the given\nvalue. As a default, 512 audio data frames is used.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--periods-per-buffer=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nuses given value to decide the size of intermediate buffer\nbetween this program and libffado. As a default, 2 periods\nper buffer is used.</p>\n\n<p style=\"margin-left:11%;\"><b>--slave</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nallows this program to run slave mode. In this mode,\nlibffado adds unit directory into configuration ROM of 1394\nOHCI controller where Linux system runs. The unit directory\ncan be found by the other node on the same bus. Linux system\nrunning on the node can transfer isochronous packet with\naudio data frame to the unit. This program can receive the\npacket and demultiplex the audio data frame.</p>\n\n<p style=\"margin-left:11%;\"><b>--snoop</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nallows this program to run snoop mode. In this mode,\nlibffado listens isochronous channels to which device\ntransfers isochronous packet. When isochronous communication\nstarts by any unit on the same bus, the packets can be\nhandled by this program.</p>\n\n<p style=\"margin-left:11%;\"><b>--sched-priority=#</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option\nexecutes <i>pthread_setschedparam()</i> in a call of\n<i>ffado_streaming_init()</i> to configure scheduling policy\nand given value as its priority for threads related to\nisochronous communication. The given value should be within\n<i>RLIMIT_RTPRIO</i> parameter of process. Please read\n<i>getrlimit(2)</i> for details.</p>\n\n<h2>POSIX SIGNALS\n<a name=\"POSIX SIGNALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">During\ntransmission, <i>SIGINT</i> and <i>SIGTERM</i> will close\nhandled files and PCM substream to be going to finish run\ntime.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>SIGTSTP</i>\nwill suspend PCM substream and <i>SIGCONT</i> will resume\nit. No XRUNs are expected. With libffado backend, the\nsuspend/resume is not supported and runtime is aboeted\nimmediately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The other\nsignals perform default behaviours.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>$ axfer\ntransfer playback -d 1 something</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above will\ntransfer audio data frame in 'something' file for playback\nduring 1 second. The sample format is detected automatically\nas a result to parse 'something' as long as it's compliant\nto one of Microsoft/IBM RIFF/Wave, Sparc AU, Creative Tech.\nvoice formats. If nothing detected, <i>-r</i> , <i>-c</i>\nand <i>-f</i> should be given, or <i>-f</i> should be given\nwith special format.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>$ axfer\ntransfer playback -r 22050 -c 1 -f S16_LE -t raw\nsomething</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above will\ntransfer audio data frame in 'something' file including no\ninformation of sample format, as sample format of 22050 Hz,\nmonaural, signed 16 bit little endian PCM for playback. The\ntransmission continues till catching <i>SIGINT</i> from\nkeyboard or <i>SIGTERM</i> by <i>kill(1)</i> .</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>$ axfer\ntransfer capture -d 10 -f cd something.wav</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above will\ntransfer audio data frame to 'something.wav' file as sample\nformat of 44.1 kHz, 2 channels, signed 16 bit little endian\nPCM, during 10 seconds. The file format is Microsoft/IBM\nRIFF/Wave according to suffix of the given <i>filepath</i>\n.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>$ axfer\ntransfer capture -s 1024 -r 48000 -c 2 -f S32_BE -I -t au\nchannels</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above will\ntransfer audio data frame as sample format of 48.0 kHz, 2\nchannels, signed 32 bit big endian PCM for 1,024 number of\ndata frames to files named 'channels-1.au' and\n'channels-2.au'.</p>\n\n<h2>SCHEDULING MODEL\n<a name=\"SCHEDULING MODEL\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a design of\nALSA PCM core, runtime of PCM substream supports two modes;\n<i>period-wakeup</i> and <i>no-period-wakeup.</i> These two\nmodes are for different scheduling models.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>IRQ-based\nscheduling model</b> <br>\nAs a default, <i>period-wakeup</i> mode is used. In this\nmode, in-kernel drivers should operate hardware to generate\nperiodical notification for transmission of audio data\nframe. The interval of notification is equivalent to the\nsame amount of audio data frame as one period of buffer,\nagainst actual time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a handler\nassigned to the notification, a helper function of ALSA PCM\ncore is called to update a position to head of hardware\ntransmission, then compare it with a position to head of\napplication operation to judge overrun/underrun (XRUN) and\nto wake up blocked processes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For this\npurpose, hardware IRQ of controller for serial audio bus\nsuch as Inter-IC sound is typically used. In this case, the\ncontroller generates the IRQ according to transmission on\nthe serial audio bus. In the handler assigned to the IRQ,\ndirect media access (DMA) transmission is requested between\ndedicated host memory and device memory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If target\nhardware doesn&rsquo;t support this kind of mechanism, the\nperiodical notification should be emulated by any timer;\ne.g. hrtimer, kernel timer. External PCM plugins generated\nby PCM plugin SDK in alsa-lib should also emulate the above\nbehaviour.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this mode,\nPCM applications are programmed according to typical way of\nI/O operations. They execute blocking system calls to\nread/write audio data frame in buffer of PCM substream, or\nblocking system calls to wait until any audio data frame is\navailable. In <i>axfer</i> , this is called <i>IRQ-based</i>\nscheduling model and a default behaviour. Users can\nexplicitly configure this mode by usage of\n<i>--sched-model</i> option with <i>irq</i> value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Timer-based\nscheduling model</b> <br>\nThe <i>no-period-wakeup</i> mode is an optional mode of\nruntime of PCM substream. The mode assumes a specific\nfeature of hardware and assist of in-kernel driver and PCM\napplications. In this mode, in-kernel drivers don&rsquo;t\noperate hardware to generate periodical notification for\ntransmission of audio data frame. The hardware should\nautomatically continue transmission of audio data frame\nwithout periodical operation of the drivers; e.g. according\nto auto-triggered DMA transmission, a chain of registered\ndescriptors.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this mode,\nnothing wakes up blocked processes, therefore PCM\napplications should be programmed without any blocking\noperation. For this reason, this mode is enabled when the\nPCM applications explicitly configure hardware parameter to\nruntime of PCM substream, to prevent disorder of existing\napplications. Additionally, nothing maintains timing for\ntransmission of audio data frame, therefore the PCM\napplications should voluntarily handle any timer to queue\naudio data frame in buffer of the PCM substream for lapse of\ntime. Furthermore, instead of driver, the PCM application\nshould call a helper function of ALSA PCM core to update a\nposition to head of hardware transmission and to check\nXRUN.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In <i>axfer</i>\n, this is called <i>timer-based</i> scheduling model and\navailable as long as hardware/driver assists\n<i>no-period-wakeup</i> runtime. Users should explicitly set\nthis mode by usage of <i>--sched-model</i> option with\n<i>timer</i> value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nscheduling model, PCM applications need to care of available\nspace on PCM buffer by lapse of time, typically by yielding\nCPU and wait for rescheduling. For the yielding, timeout is\ncalculated for preferable amount of PCM frames to process.\nThis is convenient to a kind of applications, like sound\nservers. when an I/O thread of the server wait for the\ntimeout, the other threads can process audio data frames for\nserver clients. Furthermore, with usage of\nrewinding/forwarding, applications can achieve low latency\nbetween transmission position and handling position even if\nthey uses large size of PCM buffers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Advantages\nand issues</b> <br>\nIdeally, timer-based scheduling model has some advantages\nthan IRQ-based scheduling model. At first, no interrupt\ncontext runs for PCM substream. The PCM substream is handled\nin any process context only. No need to care of race\nconditions between IRQ and process contexts. This reduces\nsome concerns for some developers of drivers and\napplications. Secondary, CPU time is not used for handlers\non the interrupt context. The CPU time can be dedicated for\nthe other tasks. This is good in a point of Time Sharing\nSystem. Thirdly, hardware is not configured to generate\ninterrupts. This is good in a point of reduction of overall\npower consumption possibly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In either\nscheduling model, the hardware should allow drivers to read\nthe number of audio data frame transferred between the\ndedicated memory and the device memory for audio serial bus.\nHowever, in timer-based scheduling model, fine granularity\nand accuracy of the value is important. Actually hardware\nperforms transmission between dedicated memory and device\nmemory for a small batch of audio data frames or bytes. In a\nview of PCM applications, the granularity in current\ntransmission is required to decide correct timeout for each\nI/O operation. As of Linux kernel v4.21, ALSA PCM interface\nbetween kernel/userspace has no feature to report it.</p>\n\n<h2>COMPATIBILITY TO APLAY\n<a name=\"COMPATIBILITY TO APLAY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>transfer</b> subcommand of <b>axfer</b> is designed to\nkeep compatibility to aplay(1). However some options below\nare not compatible due to several technical reasons. <i><br>\n-I, --separate-channels</i></p>\n\n<p style=\"margin-left:22%;\">This option is supported just\nfor files to store audio data frames corresponding to each\nchannel. In aplay(1) implementation, this option has an\nadditional effect to use PCM buffer aligned to\nnon-interleaved order if a target device supports. As of\n2018, PCM buffer of non-interleaved order is hardly used by\nsound devices.</p>\n\n<p style=\"margin-left:11%;\"><i>-A, --avail-min=#</i></p>\n\n<p style=\"margin-left:22%;\">This option indicates threshold\nto wake up blocked process in a unit of audio data frame.\nAgainst aplay(1) implementation, this option has no effect\nwith <i>--mmap</i> option as well as <i>timer</i> of\n<i>--sched-model</i> option.</p>\n\n<p style=\"margin-left:11%;\"><i>-R, --start-delay=#</i></p>\n\n<p style=\"margin-left:22%;\">This option indicates threshold\nto start prepared PCM substream in a unit of audio data\nframe. Against aplay(1) implementation, this option has no\neffect with <i>--mmap</i> option as well as <i>timer</i> of\n<i>--sched-model</i> option.</p>\n\n<p style=\"margin-left:11%;\"><i>-T, --stop-delay=#</i></p>\n\n<p style=\"margin-left:22%;\">This option indicates threshold\nto stop running PCM substream in a unit of audio data frame.\nAgainst aplay(1) implementation, this option has no effect\nwith <i>--mmap</i> option as well as <i>timer</i> of\n<i>--sched-model</i> option.</p>\n\n<p style=\"margin-left:11%;\"><i>--max-file-time=#</i></p>\n\n<p style=\"margin-left:22%;\">This option is unsupported. In\naplay(1) implementation, the option has an effect for\ncapture transmission to save files up to the same number of\ndata frames as the given value by second unit, or the\nmaximum number of data frames supported by used file format.\nWhen reaching to the limitation, used file is closed, then\nnew file is opened and audio data frames are written.\nHowever, this option requires extra handling of files and\nshall increase complexity of main loop of axfer.</p>\n\n\n<p style=\"margin-left:11%;\"><i>--use-strftime=FORMAT</i></p>\n\n<p style=\"margin-left:22%;\">This option is unsupported. In\naplay(1) implementation, the option has an effect for\ncapture transmission to generate file paths according to\ngiven format in which some extra formats are available as\nwell as formats supported by strftime(3). However, this\noption requires extra string processing for file paths and\nit's bothersome if written in C language.</p>\n\n\n<p style=\"margin-left:11%;\"><i>--process-id-file=FILEPATH</i></p>\n\n<p style=\"margin-left:22%;\">This option is unsupported. In\naplay(1) implementation, the option has an effect to create\na file for given value and write out process ID to it. This\nfile allows users to get process ID and send any POSIX\nsignal to aplay process. However, this idea has some\ntroubles for file locking when multiple aplay processes run\nwith the same file.</p>\n\n<p style=\"margin-left:11%;\"><i>-V, --vumeter=TYPE</i></p>\n\n<p style=\"margin-left:22%;\">This option is not supported at\npresent. In aplay(1) implementation, this option has an\neffect to occupy stdout with some terminal control\ncharacters and display vumeter for monaural and stereo\nchannels. However, some problems lay; this feature is just\nfor audio data frames with PCM format, this feature brings\ndisorder of terminal after aborting, stdout is not available\nfor pipeline.</p>\n\n<p style=\"margin-left:11%;\"><i>-i, --interactive</i></p>\n\n<p style=\"margin-left:22%;\">This option is not supported at\npresent. In aplay(1) implementation, this option has an\neffect to occupy stdin for key input and suspend/resume PCM\nsubstream according to pushed enter key. However, this\nfeature requires an additional input handling in main loop\nand leave bothersome operation to maintain PCM\nsubstream.</p>\n\n<p style=\"margin-left:11%;\"><i>-m,\n--chmap=CH1,CH2,...</i></p>\n\n<p style=\"margin-left:22%;\">ALSA PCM core and control core\ndoesn&rsquo;t support this feature, therefore remapping\nshould be done in userspace. This brings overhead to align\naudio data frames, especially for mmap operation.\nFurthermore, as of alsa-lib v1.1.8, some plugins don&rsquo;t\nsupport this feature expectedly, thus this option is a lack\nof transparent operation. At present, this option is not\nsupported yet not to confuse users.</p>\n\n<p style=\"margin-left:11%;\"><i>SIGTSTP, SIGCONT</i></p>\n\n<p style=\"margin-left:22%;\">This performs suspend/resume of\nPCM substream. In aplay(1) implementation, these operations\nbring XRUN state to the substream, and suspend/resume is\ndone in interactive mode in the above. Some developers use\nthe signal for recovery test from XRUN. At present, no\nalternative is supported for the test.</p>\n\n<p style=\"margin-left:11%;\"><i>SIGUSR1</i></p>\n\n<p style=\"margin-left:22%;\">This is not supported. In\naplay(1) implementation, this signal is assigned to a\nhandler to close a current file to store audio data frame\nand open a new file to continue processing. However, as well\nas <i>--max-file-time</i> option, this option should\nincrease complexity of main loop of axfer.</p>\n\n<h2>DESIGN\n<a name=\"DESIGN\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Modular\nstructure</b> <br>\nThis program consists of three modules; <i>xfer</i> ,\n<i>mapper</i> and <i>container</i> . Each module has an\nabstraction layer to enable actual implementation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--------\n---------- ------------- <br>\ndevice &lt;-&gt; | xfer | &lt;-&gt; | mapper | &lt;-&gt; |\ncontainer | &lt;-&gt; file <br>\n-------- ---------- ------------- <br>\nlibasound single wav <br>\nlibffado multiple au <br>\nvoc <br>\nraw</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>xfer</i>\nmodule performs actual transmission to devices and nodes.\nThe module can have several transmission backends. As a\ndefault backend, <i>libasound</i> backend is used to perform\ntransmission via alsa-lib APIs. The module allows each\nbackend to parse own command line options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>container</i> module performs to read/write audio data\nframe via descriptor for file/stream of multimedia container\nor raw data. The module automatically detect type of\nmultimedia container and parse parameters in its metadata of\ndata header. At present, three types of multimedia\ncontainers are supported; Microsoft/IBM RIFF/Wave (\n<i>wav</i> ), Sparc AU ( <i>au</i> ) and Creative Technology\nvoice ( <i>voc</i> ). Additionally, a special container is\nprepared for raw audio data ( <i>raw</i> ).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>mapper</i> module handles buffer layout and alignment for\ntransmission of audio data frame. The module has two\nimplementations; <i>single</i> and <i>multiple</i> . The\n<i>single</i> backend uses one container to construct the\nbuffer. The <i>multiple</i> backend uses several containers\nto construct it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Care of\ncopying audio data frame</b> <br>\nBetween the <i>xfer</i> module and <i>mapper</i> module, a\npointer to buffer including audio data frames is passed.\nThis buffer has two shapes for interleaved and\nnon-interleaved order. For the former, the pointer points to\none buffer. For the latter, the pointer points to an array\nin which each element points to one buffer. Between the\n<i>mapper</i> module and <i>container</i> module, a pointer\nto one buffer is passed because supported media containers\nincluding raw type store audio data frames in interleaved\norder.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In passing\naudio data frame between the modules, axfer is programmed to\navoid copying between a buffer to another buffer as much as\npossible. For example, in some scenarios below, no copying\noccurs between modules.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-\nxfer(mmap/interleaved), mapper(single), container(any) <br>\n- xfer(mmap/non-interleaved), mapper(multiple),\ncontainers(any)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Unit\ntest</b> <br>\nFor each of the <i>mapper</i> and <i>container</i> module,\nunit test is available. To run the tests, execute below\ncommand:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$ make test</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each test\niterates writing to file and reading to the file for many\ntimes and it takes long time to finish. Please take care of\nthe execution time if running on any CI environment.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>axfer(1),\naxfer-list(1), alsamixer(1), amixer(1)</b></p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Takashi\nSakamoto &lt;o-takashi@sakamocchi.jp&gt;</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#POSIX SIGNALS\">POSIX SIGNALS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SCHEDULING MODEL\">SCHEDULING MODEL</a>","<a href=\"#COMPATIBILITY TO APLAY\">COMPATIBILITY TO APLAY</a>","<a href=\"#DESIGN\">DESIGN</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>"]}