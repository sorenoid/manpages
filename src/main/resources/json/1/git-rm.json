{"name":"git-rm","body":"\n\n<h1 align=\"center\">GIT-RM</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-rm - Remove\nfiles from the working tree and from the index</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git rm</i>\n[-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] <br>\n[--quiet] [--pathspec-from-file=&lt;file&gt;\n[--pathspec-file-nul]] <br>\n[--] [&lt;pathspec&gt;...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Remove files\nmatching pathspec from the index, or from the working tree\nand the index. <b>git rm</b> will not remove a file from\njust your working directory. (There is no option to remove a\nfile only from the working tree and yet keep it in the\nindex; use <b>/bin/rm</b> if you want to do that.) The files\nbeing removed have to be identical to the tip of the branch,\nand no updates to their contents can be staged in the index,\nthough that default behavior can be overridden with the\n<b>-f</b> option. When <b>--cached</b> is given, the staged\ncontent has to match either the tip of the branch or the\nfile on disk, allowing the file to be removed from just the\nindex. When sparse-checkouts are in use (see\n<a href=\"https://man.page/1/git-sparse-checkout\">git-sparse-checkout(1)</a>), <b>git rm</b> will only\nremove paths within the sparse-checkout patterns.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;pathspec&gt;...</p>\n\n<p style=\"margin-left:17%;\">Files to remove. A leading\ndirectory name (e.g. <b>dir</b> to remove <b>dir/file1</b>\nand <b>dir/file2</b>) can be given to remove all files in\nthe directory, and recursively all sub-directories, but this\nrequires the <b>-r</b> option to be explicitly given.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The command\nremoves only the paths that are known to Git.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">File globbing\nmatches across directory boundaries. Thus, given two\ndirectories <b>d</b> and <b>d2</b>, there is a difference\nbetween using <b>git rm 'd*'</b> and <b>git rm 'd/*'</b>, as\nthe former will also remove all of directory <b>d2</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails, see the <i>pathspec</i> entry in\n<a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f, --force</p>\n\n<p style=\"margin-left:17%;\">Override the up-to-date\ncheck.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--dry-run</p>\n\n<p style=\"margin-left:17%;\">Don&rsquo;t actually remove any\nfile(s). Instead, just show if they exist in the index and\nwould otherwise be removed by the command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-r</p>\n\n<p style=\"margin-left:17%;\">Allow recursive removal when a\nleading directory name is given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--</p>\n\n<p style=\"margin-left:17%;\">This option can be used to\nseparate command-line options from the list of files,\n(useful when filenames might be mistaken for command-line\noptions).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cached</p>\n\n<p style=\"margin-left:17%;\">Use this option to unstage and\nremove paths only from the index. Working tree files,\nwhether modified or not, will be left alone.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-unmatch</p>\n\n<p style=\"margin-left:17%;\">Exit with a zero status even if\nno files matched.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sparse</p>\n\n<p style=\"margin-left:17%;\">Allow updating index entries\noutside of the sparse-checkout cone. Normally, <b>git rm</b>\nrefuses to update index entries whose paths do not fit\nwithin the sparse-checkout cone. See\n<a href=\"https://man.page/1/git-sparse-checkout\">git-sparse-checkout(1)</a> for more.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\"><b>git rm</b> normally outputs\none line (in the form of an <b>rm</b> command) for each file\nremoved. This option suppresses that output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pathspec-from-file=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Pathspec is passed in\n<b>&lt;file&gt;</b> instead of commandline args. If\n<b>&lt;file&gt;</b> is exactly <b>-</b> then standard input\nis used. Pathspec elements are separated by LF or CR/LF.\nPathspec elements can be quoted as explained for the\nconfiguration variable <b>core.quotePath</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). See also <b>--pathspec-file-nul</b>\nand global <b>--literal-pathspecs</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pathspec-file-nul</p>\n\n<p style=\"margin-left:17%;\">Only meaningful with\n<b>--pathspec-from-file</b>. Pathspec elements are separated\nwith NUL character and all other characters are taken\nliterally (including newlines and quotes).</p>\n\n<h2>REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM\n<a name=\"REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is no\noption for <b>git rm</b> to remove from the index only the\npaths that have disappeared from the filesystem. However,\ndepending on the use case, there are several ways that can\nbe done.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using\n&ldquo;git commit -a&rdquo;</b> <br>\nIf you intend that your next commit should record all\nmodifications of tracked files in the working tree and\nrecord all removals of files that have been removed from the\nworking tree with <b>rm</b> (as opposed to <b>git rm</b>),\nuse <b>git commit -a</b>, as it will automatically notice\nand record all removals. You can also have a similar effect\nwithout committing by using <b>git add -u</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using\n&ldquo;git add -A&rdquo;</b> <br>\nWhen accepting a new code drop for a vendor branch, you\nprobably want to record both the removal of paths and\nadditions of new paths as well as modifications of existing\npaths.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Typically you\nwould first remove all tracked files from the working tree\nusing this command:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git ls-files -z\n| xargs -0 rm -f</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and then untar\nthe new code in the working tree. Alternately you could\n<i>rsync</i> the changes into the working tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After that, the\neasiest way to record all removals, additions, and\nmodifications in the working tree is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git add -A</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/1/git-add\">git-add(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Other\nways</b> <br>\nIf all you really want to do is to remove from the index the\nfiles that are no longer present in the working tree\n(perhaps because your working tree is dirty so that you\ncannot use <b>git commit -a</b>), use the following\ncommand:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git diff\n--name-only --diff-filter=D -z | xargs -0 git rm\n--cached</p>\n\n<h2>SUBMODULES\n<a name=\"SUBMODULES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only submodules\nusing a gitfile (which means they were cloned with a Git\nversion 1.7.8 or newer) will be removed from the work tree,\nas their repository lives inside the .git directory of the\nsuperproject. If a submodule (or one of those nested inside\nit) still uses a .git directory, <b>git rm</b> will move the\nsubmodules git directory into the superprojects git\ndirectory to protect the submodule&rsquo;s history. If it\nexists the submodule.&lt;name&gt; section in the\n<a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a> file will also be removed and that file\nwill be staged (unless --cached or -n are used).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A submodule is\nconsidered up to date when the HEAD is the same as recorded\nin the index, no tracked files are modified and no untracked\nfiles that aren&rsquo;t ignored are present in the\nsubmodules work tree. Ignored files are deemed expendable\nand won&rsquo;t stop a submodule&rsquo;s work tree from\nbeing removed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you only\nwant to remove the local checkout of a submodule from your\nwork tree without committing the removal, use\n<a href=\"https://man.page/1/git-submodule\">git-submodule(1)</a> <b>deinit</b> instead. Also see\n<a href=\"https://man.page/7/gitsubmodules\">gitsubmodules(7)</a> for details on submodule\nremoval.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git rm\nDocumentation/\\*.txt</b></p>\n\n<p style=\"margin-left:17%;\">Removes all <b>*.txt</b> files\nfrom the index that are under the <b>Documentation</b>\ndirectory and any of its subdirectories.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\nasterisk <b>*</b> is quoted from the shell in this example;\nthis lets Git, and not the shell, expand the pathnames of\nfiles and subdirectories under the <b>Documentation/</b>\ndirectory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git rm -f\ngit-*.sh</b></p>\n\n<p style=\"margin-left:17%;\">Because this example lets the\nshell expand the asterisk (i.e. you are listing the files\nexplicitly), it does not remove\n<b>subdir/git-foo.sh</b>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each time a\nsuperproject update removes a populated submodule (e.g. when\nswitching between commits before and after the removal) a\nstale submodule checkout will remain in the old location.\nRemoving the old directory is only safe when it uses a\ngitfile, as otherwise the history of the submodule will be\ndeleted too. This step will be obsolete when recursive\nsubmodule update has been implemented.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-add\">git-add(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM\">REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM</a>","<a href=\"#SUBMODULES\">SUBMODULES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}