{"name":"git-upload-archive","description":"git-upload-archive - Send archive back to git-archive","body":"\n\n<h1 align=\"center\">GIT-UPLOAD-ARCHIVE</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-upload-archive\n- Send archive back to git-archive</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nupload-archive</i> &lt;directory&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Invoked by\n<i>git archive --remote</i> and sends a generated archive to\nthe other end over the Git protocol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command is\nusually not invoked directly by the end user. The UI for the\nprotocol is on the <i>git archive</i> side, and the program\npair is meant to be used to get an archive from a remote\nrepository.</p>\n\n<h2>SECURITY\n<a name=\"SECURITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\nprotect the privacy of objects that have been removed from\nhistory but may not yet have been pruned,\n<b>git-upload-archive</b> avoids serving archives for\ncommits and trees that are not reachable from the\nrepository&rsquo;s refs. However, because calculating object\nreachability is computationally expensive,\n<b>git-upload-archive</b> implements a stricter but\neasier-to-check set of rules:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. Clients may\nrequest a commit or tree that is pointed to directly by a\nref. E.g., <b>git archive --remote=origin v1.0</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Clients may\nrequest a sub-tree within a commit or tree using the\n<b>ref:path</b> syntax. E.g., <b>git archive --remote=origin\nv1.0:Documentation</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. Clients may\n<i>not</i> use other sha1 expressions, even if the end\nresult is reachable. E.g., neither a relative commit like\n<b>master^</b> nor a literal sha1 like <b>abcd1234</b> is\nallowed, even if the result is reachable from the refs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that rule\n3 disallows many cases that do not have any privacy\nimplications. These rules are subject to change in future\nversions of git, and the server accessed by <b>git archive\n--remote</b> may or may not follow these exact rules.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the config\noption <b>uploadArchive.allowUnreachable</b> is true, these\nrules are ignored, and clients may use arbitrary sha1\nexpressions. This is useful if you do not care about the\nprivacy of unreachable objects, or if your object database\nis already publicly available for access via\nnon-smart-http.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;directory&gt;</p>\n\n<p style=\"margin-left:17%;\">The repository to get a tar\narchive from.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SECURITY\">SECURITY</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#GIT\">GIT</a>"]}