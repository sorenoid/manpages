{"name":"make","description":"make - GNU make\nutility to maintain groups of programs","body":"\n\n<h1 align=\"center\">MAKE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">make - GNU make\nutility to maintain groups of programs</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>make</b>\n[<i>OPTION</i>]... [<i>TARGET</i>]...</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>make</i>\nutility will determine automatically which pieces of a large\nprogram need to be recompiled, and issue the commands to\nrecompile them. The manual describes the GNU implementation\nof <b>make</b>, which was written by Richard Stallman and\nRoland McGrath, and is currently maintained by Paul Smith.\nOur examples show C programs, since they are very common,\nbut you can use <b>make</b> with any programming language\nwhose compiler can be run with a shell command. In fact,\n<b>make</b> is not limited to programs. You can use it to\ndescribe any task where some files must be updated\nautomatically from others whenever the others change.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To prepare to\nuse <b>make</b>, you must write a file called the\n<i>makefile</i> that describes the relationships among files\nin your program, and the states the commands for updating\neach file. In a program, typically the executable file is\nupdated from object files, which are in turn made by\ncompiling source files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once a suitable\nmakefile exists, each time you change some source files,\nthis simple shell command:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>make</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">suffices to\nperform all necessary recompilations. The <b>make</b>\nprogram uses the makefile description and the\nlast-modification times of the files to decide which of the\nfiles need to be updated. For each of those files, it issues\nthe commands recorded in the makefile.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>make</b>\nexecutes commands in the <i>makefile</i> to update one or\nmore target <i>names</i>, where <i>name</i> is typically a\nprogram. If no <b>-f</b> option is present, <b>make</b> will\nlook for the makefiles <i>GNUmakefile</i>, <i>makefile</i>,\nand <i>Makefile</i>, in that order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Normally you\nshould call your makefile either <i>makefile</i> or\n<i>Makefile</i>. (We recommend <i>Makefile</i> because it\nappears prominently near the beginning of a directory\nlisting, right near other important files such as\n<i>README</i>.) The first name checked, <i>GNUmakefile</i>,\nis not recommended for most makefiles. You should use this\nname if you have a makefile that is specific to GNU\n<b>make</b>, and will not be understood by other versions of\n<b>make</b>. If <i>makefile</i> is &rsquo;-&rsquo;, the\nstandard input is read.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>make</b>\nupdates a target if it depends on prerequisite files that\nhave been modified since the target was last modified, or if\nthe target does not exist.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-b</b>,\n<b>-m</b></p>\n\n<p style=\"margin-left:18%;\">These options are ignored for\ncompatibility with other versions of <b>make</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-B</b>,\n<b>--always-make</b></p>\n\n<p style=\"margin-left:18%;\">Unconditionally make all\ntargets.</p>\n\n<p style=\"margin-left:11%;\"><b>-C</b> <i>dir</i>,\n<b>--directory</b>=<i>dir</i></p>\n\n<p style=\"margin-left:18%;\">Change to directory <i>dir</i>\nbefore reading the makefiles or doing anything else. If\nmultiple <b>-C</b> options are specified, each is\ninterpreted relative to the previous one: <b>-C</b> /\n<b>-C</b> etc is equivalent to <b>-C</b> /etc. This is\ntypically used with recursive invocations of\n<b>make</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-d</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"82%\">\n\n\n<p>Print debugging information in addition to normal\nprocessing. The debugging information says which files are\nbeing considered for remaking, which file-times are being\ncompared and with what results, which files actually need to\nbe remade, which implicit rules are considered and which are\napplied---everything interesting about how <b>make</b>\ndecides what to do.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>--debug</b><i>[=FLAGS]</i></p>\n\n<p style=\"margin-left:18%;\">Print debugging information in\naddition to normal processing. If the <i>FLAGS</i> are\nomitted, then the behavior is the same as if <b>-d</b> was\nspecified. <i>FLAGS</i> may be <i>a</i> for all debugging\noutput (same as using <b>-d</b>), <i>b</i> for basic\ndebugging, <i>v</i> for more verbose basic debugging,\n<i>i</i> for showing implicit rules, <i>j</i> for details on\ninvocation of commands, and <i>m</i> for debugging while\nremaking makefiles. Use <i>n</i> to disable all previous\ndebugging flags.</p>\n\n<p style=\"margin-left:11%;\"><b>-e</b>,\n<b>--environment-overrides</b></p>\n\n<p style=\"margin-left:18%;\">Give variables taken from the\nenvironment precedence over variables from makefiles.</p>\n\n<p style=\"margin-left:11%;\"><b>-f</b> <i>file</i>,\n<b>--file</b>=<i>file</i>, <b>--makefile</b>=<i>FILE</i></p>\n\n<p style=\"margin-left:18%;\">Use <i>file</i> as a\nmakefile.</p>\n\n<p style=\"margin-left:11%;\"><b>-i</b>,\n<b>--ignore-errors</b></p>\n\n<p style=\"margin-left:18%;\">Ignore all errors in commands\nexecuted to remake files.</p>\n\n<p style=\"margin-left:11%;\"><b>-I</b> <i>dir</i>,\n<b>--include-dir</b>=<i>dir</i></p>\n\n<p style=\"margin-left:18%;\">Specifies a directory\n<i>dir</i> to search for included makefiles. If several\n<b>-I</b> options are used to specify several directories,\nthe directories are searched in the order specified. Unlike\nthe arguments to other flags of <b>make</b>, directories\ngiven with <b>-I</b> flags may come directly after the flag:\n<b>-I</b><i>dir</i> is allowed, as well as <b>-I</b>\n<i>dir</i>. This syntax is allowed for compatibility with\nthe C preprocessor&rsquo;s <b>-I</b> flag.</p>\n\n<p style=\"margin-left:11%;\"><b>-j</b> [<i>jobs</i>],\n<b>--jobs</b>[=<i>jobs</i>]</p>\n\n<p style=\"margin-left:18%;\">Specifies the number of\n<i>jobs</i> (commands) to run simultaneously. If there is\nmore than one <b>-j</b> option, the last one is effective.\nIf the <b>-j</b> option is given without an argument,\n<b>make</b> will not limit the number of jobs that can run\nsimultaneously. When <b>make</b> invokes a <b>sub-make,</b>\nall instances of make will coordinate to run the specified\nnumber of jobs at a time; see the section <b>PARALLEL MAKE\nAND THE JOBSERVER</b> for details.</p>\n\n<p style=\"margin-left:11%;\"><b>--jobserver-fds</b>\n[<i>R,W</i>]</p>\n\n<p style=\"margin-left:18%;\">Internal option <b>make</b>\nuses to pass the jobserver pipe read and write file\ndescriptor numbers to <b>sub-makes;</b> see the section\n<b>PARALLEL MAKE AND THE JOBSERVER</b> for details</p>\n\n<p style=\"margin-left:11%;\"><b>-k</b>,\n<b>--keep-going</b></p>\n\n<p style=\"margin-left:18%;\">Continue as much as possible\nafter an error. While the target that failed, and those that\ndepend on it, cannot be remade, the other dependencies of\nthese targets can be processed all the same.</p>\n\n<p style=\"margin-left:11%;\"><b>-l</b> [<i>load</i>],\n<b>--load-average</b>[=<i>load</i>]</p>\n\n<p style=\"margin-left:18%;\">Specifies that no new jobs\n(commands) should be started if there are others jobs\nrunning and the load average is at least <i>load</i> (a\nfloating-point number). With no argument, removes a previous\nload limit.</p>\n\n<p style=\"margin-left:11%;\"><b>-L</b>,\n<b>--check-symlink-times</b></p>\n\n<p style=\"margin-left:18%;\">Use the latest mtime between\nsymlinks and target.</p>\n\n<p style=\"margin-left:11%;\"><b>-n</b>, <b>--just-print</b>,\n<b>--dry-run</b>, <b>--recon</b></p>\n\n<p style=\"margin-left:18%;\">Print the commands that would\nbe executed, but do not execute them (except in certain\ncircumstances).</p>\n\n<p style=\"margin-left:11%;\"><b>-o</b> <i>file</i>,\n<b>--old-file</b>=<i>file</i>,\n<b>--assume-old</b>=<i>file</i></p>\n\n<p style=\"margin-left:18%;\">Do not remake the file\n<i>file</i> even if it is older than its dependencies, and\ndo not remake anything on account of changes in <i>file</i>.\nEssentially the file is treated as very old and its rules\nare ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>-O</b>[<i>type</i>],\n<b>--output-sync</b>[=<i>type</i>]</p>\n\n<p style=\"margin-left:18%;\">When running multiple jobs in\nparallel with <b>-j</b>, ensure the output of each job is\ncollected together rather than interspersed with output from\nother jobs. If <i>type</i> is not specified or is\n<b>target</b> the output from the entire recipe for each\ntarget is grouped together. If <i>type</i> is <b>line</b>\nthe output from each command line within a recipe is grouped\ntogether. If <i>type</i> is <b>recurse</b> output from an\nentire recursive make is grouped together. If <i>type</i> is\n<b>none</b> output synchronization is disabled.</p>\n\n<p style=\"margin-left:11%;\"><b>-p</b>,\n<b>--print-data-base</b></p>\n\n<p style=\"margin-left:18%;\">Print the data base (rules and\nvariable values) that results from reading the makefiles;\nthen execute as usual or as otherwise specified. This also\nprints the version information given by the <b>-v</b> switch\n(see below). To print the data base without trying to remake\nany files, use <i>make -p -f/dev/null</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>-q</b>,\n<b>--question</b></p>\n\n<p style=\"margin-left:18%;\">&rsquo;&rsquo;Question\nmode&rsquo;&rsquo;. Do not run any commands, or print\nanything; just return an exit status that is zero if the\nspecified targets are already up to date, nonzero\notherwise.</p>\n\n<p style=\"margin-left:11%;\"><b>-r</b>,\n<b>--no-builtin-rules</b></p>\n\n<p style=\"margin-left:18%;\">Eliminate use of the built-in\nimplicit rules. Also clear out the default list of suffixes\nfor suffix rules.</p>\n\n<p style=\"margin-left:11%;\"><b>-R</b>,\n<b>--no-builtin-variables</b></p>\n\n<p style=\"margin-left:18%;\">Don&rsquo;t define any built-in\nvariables.</p>\n\n<p style=\"margin-left:11%;\"><b>-s</b>, <b>--silent</b>,\n<b>--quiet</b></p>\n\n<p style=\"margin-left:18%;\">Silent operation; do not print\nthe commands as they are executed.</p>\n\n<p style=\"margin-left:11%;\"><b>-S</b>,\n<b>--no-keep-going</b>, <b>--stop</b></p>\n\n<p style=\"margin-left:18%;\">Cancel the effect of the\n<b>-k</b> option. This is never necessary except in a\nrecursive <b>make</b> where <b>-k</b> might be inherited\nfrom the top-level <b>make</b> via MAKEFLAGS or if you set\n<b>-k</b> in MAKEFLAGS in your environment.</p>\n\n<p style=\"margin-left:11%;\"><b>-t</b>, <b>--touch</b></p>\n\n<p style=\"margin-left:18%;\">Touch files (mark them up to\ndate without really changing them) instead of running their\ncommands. This is used to pretend that the commands were\ndone, in order to fool future invocations of\n<b>make</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>--trace</b></p>\n\n<p style=\"margin-left:18%;\">Information about the\ndisposition of each target is printed (why the target is\nbeing rebuilt and what commands are run to rebuild it).</p>\n\n<p style=\"margin-left:11%;\"><b>-v</b>, <b>--version</b></p>\n\n<p style=\"margin-left:18%;\">Print the version of the\n<b>make</b> program plus a copyright, a list of authors and\na notice that there is no warranty.</p>\n\n<p style=\"margin-left:11%;\"><b>-w</b>,\n<b>--print-directory</b></p>\n\n<p style=\"margin-left:18%;\">Print a message containing the\nworking directory before and after other processing. This\nmay be useful for tracking down errors from complicated\nnests of recursive <b>make</b> commands.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--no-print-directory</b></p>\n\n<p style=\"margin-left:18%;\">Turn off <b>-w</b>, even if it\nwas turned on implicitly.</p>\n\n<p style=\"margin-left:11%;\"><b>-W</b> <i>file</i>,\n<b>--what-if</b>=<i>file</i>, <b>--new-file</b>=<i>file</i>,\n<b>--assume-new</b>=<i>file</i></p>\n\n<p style=\"margin-left:18%;\">Pretend that the target\n<i>file</i> has just been modified. When used with the\n<b>-n</b> flag, this shows you what would happen if you were\nto modify that file. Without <b>-n</b>, it is almost the\nsame as running a <i>touch</i> command on the given file\nbefore running <b>make</b>, except that the modification\ntime is changed only in the imagination of <b>make</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--warn-undefined-variables</b></p>\n\n<p style=\"margin-left:18%;\">Warn when an undefined variable\nis referenced.</p>\n\n<h2>EXIT STATUS\n<a name=\"EXIT STATUS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GNU <b>make</b>\nexits with a status of zero if all makefiles were\nsuccessfully parsed and no targets that were built failed. A\nstatus of one will be returned if the <b>-q</b> flag was\nused and <b>make</b> determines that a target needs to be\nrebuilt. A status of two will be returned if any errors were\nencountered.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The full\ndocumentation for <b>make</b> is maintained as a Texinfo\nmanual. If the <b>info</b> and <b>make</b> programs are\nproperly installed at your site, the command</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>info\nmake</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">should give you\naccess to the complete manual. Additionally, the manual is\nalso available online at\n<i>https://www.gnu.org/software/make/manual/html_node/index.html</i></p>\n\n<h2>PARALLEL MAKE AND THE JOBSERVER\n<a name=\"PARALLEL MAKE AND THE JOBSERVER\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\n<i>-j</i> option, the user can instruct <b>make</b> to\nexecute tasks in parallel. By specifying a numeric argument\nto <i>-j</i> the user may specify an upper limit of the\nnumber of parallel tasks to be run.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the build\nenvironment is such that a top level <b>make</b> invokes\n<b>sub-makes</b> (for instance, a style in which each\nsub-directory contains its own <i>Makefile</i> ), no\nindividual instance of <b>make</b> knows how many tasks are\nrunning in parallel, so keeping the number of tasks under\nthe upper limit would be impossible without communication\nbetween all the <b>make</b> instances running. While\nsolutions like having the top level <b>make</b> serve as a\ncentral controller are feasible, or using other\nsynchronization mechanisms like shared memory or sockets can\nbe created, the current implementation uses a simple shared\npipe.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This pipe is\ncreated by the top-level <b>make</b> process, and passed on\nto all the <b>sub-makes.</b> The top level\n<b>make</b>process<b>writes N-1</b> one-byte tokens into the\npipe (The top level <b>make</b> is assumed to reserve one\ntoken for itself). Whenever any of the <b>make</b> processes\n(including the top-level <b>make</b> ) needs to run a new\ntask, it reads a byte from the shared pipe. If there are no\ntokens left, it must wait for a token to be written back to\nthe pipe. Once the task is completed, the <b>make</b>\nprocess writes a token back to the pipe (and thus, if the\ntokens had been exhausted, unblocking the first <b>make</b>\nprocess that was waiting to read a token). Since only\n<b>N-1</b> tokens were written into the pipe, no more than\n<b>N</b> tasks can be running at any given time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the job to\nbe run is not a <b>sub-make</b> then <b>make</b> will close\nthe jobserver pipe file descriptors before invoking the\ncommands, so that the command can not interfere with the\n<i>jobserver,</i> and the command does not find any unusual\nfile descriptors.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the chapter\n&rsquo;&rsquo;Problems and Bugs&rsquo;&rsquo; in <i>The GNU\nMake Manual</i>.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage contributed by Dennis Morse of Stanford University.\nFurther updates contributed by Mike Frysinger. It has been\nreworked by Roland McGrath. Maintained by Paul Smith.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n&copy; 1992-1993, 1996-2016 Free Software Foundation, Inc.\nThis file is part of <i>GNU make</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">GNU Make is\nfree software; you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as\npublished by the Free Software Foundation; either version 3\nof the License, or (at your option) any later version.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">GNU Make is\ndistributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You should have\nreceived a copy of the GNU General Public License along with\nthis program. If not, see\n<i>http://www.gnu.org/licenses/</i>.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXIT STATUS\">EXIT STATUS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#PARALLEL MAKE AND THE JOBSERVER\">PARALLEL MAKE AND THE JOBSERVER</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"]}