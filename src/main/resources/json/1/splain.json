{"name":"splain","description":"diagnostics, splain - produce verbose warning diagnostics","body":"\n\n<h1 align=\"center\">SPLAIN</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">diagnostics,\nsplain - produce verbose warning diagnostics</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\n&quot;diagnostics&quot; pragma:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\ndiagnostics; <br>\nuse diagnostics -verbose; <br>\nenable diagnostics; <br>\ndisable diagnostics;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\n&quot;splain&quot; standalone filter program:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl program\n2&gt;diag.out <br>\nsplain [-v] [-p] diag.out</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using\ndiagnostics to get stack traces from a misbehaving\nscript:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl\n-Mdiagnostics=-traceonly my_script.pl</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The\n&quot;diagnostics&quot; Pragma</b> <br>\nThis module extends the terse diagnostics normally emitted\nby both the perl compiler and the perl interpreter (from\nrunning perl with a -w switch or &quot;use warnings&quot;),\naugmenting them with the more explicative and endearing\ndescriptions found in perldiag. Like the other pragmata, it\naffects the compilation phase of your program rather than\nmerely the execution phase.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To use in your\nprogram as a pragma, merely invoke</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\ndiagnostics;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">at the start\n(or near the start) of your program. (Note that this\n<i>does</i> enable perl&rsquo;s <b>-w</b> flag.) Your whole\ncompilation will then be subject(ed :-) to the enhanced\ndiagnostics. These still go out <b><small>STDERR</small></b>\n.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Due to the\ninteraction between runtime and compiletime issues, and\nbecause it&rsquo;s probably not a very good idea anyway, you\nmay not use &quot;no diagnostics&quot; to turn them off at\ncompiletime. However, you may control their behaviour at\nruntime using the <b>disable()</b> and <b>enable()</b>\nmethods to turn them off and on respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>-verbose</b> flag first prints out the perldiag\nintroduction before any other diagnostics. The\n$diagnostics::PRETTY variable can generate nicer escape\nsequences for pagers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Warnings\ndispatched from perl itself (or more accurately, those that\nmatch descriptions found in perldiag) are only displayed\nonce (no duplicate descriptions). User code generated\nwarnings a la <b>warn()</b> are unaffected, allowing\nduplicate user messages to be displayed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nalso adds a stack trace to the error message when perl dies.\nThis is useful for pinpointing what caused the death. The\n<b>-traceonly</b> (or just <b>-t</b>) flag turns off the\nexplanations of warning messages leaving just the stack\ntraces. So if your script is dieing, run it again with</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl\n-Mdiagnostics=-traceonly my_bad_script</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">to see the call\nstack at the time of death. By supplying the\n<b>-warntrace</b> (or just <b>-w</b>) flag, any warnings\nemitted will also come with a stack trace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The</b>\n<i>splain</i> <b>Program</b> <br>\nWhile apparently a whole nuther program, <i>splain</i> is\nactually nothing more than a link to the (executable)\n<i>diagnostics.pm</i> module, as well as a link to the\n<i>diagnostics.pod</i> documentation. The <b>-v</b> flag is\nlike the &quot;use diagnostics -verbose&quot; directive. The\n<b>-p</b> flag is like the $diagnostics::PRETTY variable.\nSince you&rsquo;re post-processing with <i>splain</i>,\nthere&rsquo;s no sense in being able to <b>enable()</b> or\n<b>disable()</b> processing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Output from\n<i>splain</i> is directed to <b><small>STDOUT</small></b> ,\nunlike the pragma.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfile is certain to trigger a few errors at both runtime and\ncompiletime:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\ndiagnostics; <br>\nprint NOWHERE &quot;nothing\\n&quot;; <br>\nprint STDERR &quot;\\n\\tThis message should be\nunadorned.\\n&quot;; <br>\nwarn &quot;\\tThis is a user warning&quot;; <br>\nprint &quot;\\nDIAGNOSTIC TESTER: Please enter a &lt;CR&gt;\nhere: &quot;; <br>\nmy $a, $b = scalar &lt;STDIN&gt;; <br>\nprint &quot;\\n&quot;; <br>\nprint $x/$y;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you prefer\nto run your program first and look at its problem\nafterwards, do this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl -w test.pl\n2&gt;test.out <br>\n./splain &lt; test.out</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that this\nis not in general possible in shells of more dubious\nheritage, as the theoretical</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(perl -w\ntest.pl &gt;/dev/tty) &gt;&amp; test.out <br>\n./splain &lt; test.out</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because you\njust moved the existing <b>stdout</b> to somewhere else.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you\ndon&rsquo;t want to modify your source code, but still have\non-the-fly warnings, do this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">exec\n3&gt;&amp;1; perl -w test.pl 2&gt;&amp;1 1&gt;&amp;3\n3&gt;&amp;- | splain 1&gt;&amp;2 3&gt;&amp;-</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Nifty, eh?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\ncontrol warnings on the fly, do something like this. Make\nsure you do the &quot;use&quot; first, or you won&rsquo;t be\nable to get at the <b>enable()</b> or <b>disable()</b>\nmethods.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\ndiagnostics; # checks entire compilation phase <br>\nprint &quot;\\ntime for 1st bogus diags: SQUAWKINGS\\n&quot;;\n<br>\nprint BOGUS1 'nada'; <br>\nprint &quot;done with 1st bogus\\n&quot;; <br>\ndisable diagnostics; # only turns off runtime warnings <br>\nprint &quot;\\ntime for 2nd bogus: (squelched)\\n&quot;; <br>\nprint BOGUS2 'nada'; <br>\nprint &quot;done with 2nd bogus\\n&quot;; <br>\nenable diagnostics; # turns back on runtime warnings <br>\nprint &quot;\\ntime for 3rd bogus: SQUAWKINGS\\n&quot;; <br>\nprint BOGUS3 'nada'; <br>\nprint &quot;done with 3rd bogus\\n&quot;; <br>\ndisable diagnostics; <br>\nprint &quot;\\ntime for 4th bogus: (squelched)\\n&quot;; <br>\nprint BOGUS4 'nada'; <br>\nprint &quot;done with 4th bogus\\n&quot;;</p>\n\n<h2>INTERNALS\n<a name=\"INTERNALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Diagnostic\nmessages derive from the <i>perldiag.pod</i> file when\navailable at runtime. Otherwise, they may be embedded in the\nfile itself when the splain package is built. See the\n<i>Makefile</i> for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If an extant\n$SIG{__WARN__} handler is discovered, it will continue to be\nhonored, but only after the <b>diagnostics::splainthis()</b>\nfunction (the module&rsquo;s $SIG{__WARN__} interceptor) has\nhad its way with your warnings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is a\n$diagnostics::DEBUG variable you may set if you&rsquo;re\ndesperately curious what sorts of things are being\nintercepted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">BEGIN {\n$diagnostics::DEBUG = 1 }</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Not being able\nto say &quot;no diagnostics&quot; is annoying, but may not\nbe insurmountable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;-pretty&quot; directive is called too late to affect\nmatters. You have to do this instead, and <i>before</i> you\nload the module.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">BEGIN {\n$diagnostics::PRETTY = 1 }</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">I could start\nup faster by delaying compilation until it should be needed,\nbut this gets a &quot;panic: top_level&quot; when using the\npragma form in Perl 5.001e.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While\nit&rsquo;s true that this documentation is somewhat\nsubserious, if you use a program named <i>splain</i>, you\nshould expect a bit of whimsy.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Tom\nChristiansen &lt;<i>tchrist@mox.perl.com</i>&gt;, 25 June\n1995.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#INTERNALS\">INTERNALS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>"]}