{"name":"git-shortlog","description":"git-shortlog -\nSummarize 'git log' output","body":"\n\n<h1 align=\"center\">GIT-SHORTLOG</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-shortlog -\nSummarize 'git log' output</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nshortlog</i> [&lt;options&gt;] [&lt;revision range&gt;]\n[[--] &lt;path&gt;...] <br>\ngit log --pretty=short | <i>git shortlog</i>\n[&lt;options&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Summarizes\n<i>git log</i> output in a format suitable for inclusion in\nrelease announcements. Each commit will be grouped by author\nand title.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additionally,\n&quot;[PATCH]&quot; will be stripped from the commit\ndescription.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no revisions\nare passed on the command line and either standard input is\nnot a terminal or there is no current branch, <i>git\nshortlog</i> will output a summary of the log read from\nstandard input, without reference to the current\nrepository.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--numbered</p>\n\n<p style=\"margin-left:17%;\">Sort output according to the\nnumber of commits per author instead of author alphabetic\norder.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-s,\n--summary</p>\n\n<p style=\"margin-left:17%;\">Suppress commit description and\nprovide a commit count summary only.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-e, --email</p>\n\n<p style=\"margin-left:17%;\">Show the email address of each\nauthor.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--format[=&lt;format&gt;]</p>\n\n<p style=\"margin-left:17%;\">Instead of the commit subject,\nuse some other information to describe each commit.\n<i>&lt;format&gt;</i> can be any string accepted by the\n<b>--format</b> option of <i>git log</i>, such as <i>* [%h]\n%s</i>. (See the &quot;PRETTY FORMATS&quot; section of\n<a href=\"https://man.page/1/git-log\">git-log(1)</a>.)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Each\npretty-printed commit will be rewrapped before it is\nshown.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--group=&lt;type&gt;</p>\n\n<p style=\"margin-left:17%;\">Group commits based on\n<b>&lt;type&gt;</b>. If no <b>--group</b> option is\nspecified, the default is <b>author</b>. <b>&lt;type&gt;</b>\nis one of:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>author</b>, commits are grouped by author</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>committer</b>, commits are grouped by committer (the same\nas <b>-c</b>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>trailer:&lt;field&gt;</b>, the <b>&lt;field&gt;</b> is\ninterpreted as a case-insensitive commit message trailer\n(see <a href=\"https://man.page/1/git-interpret-trailers\">git-interpret-trailers(1)</a>). For example, if your\nproject uses <b>Reviewed-by</b> trailers, you might want to\nsee who has been reviewing with <b>git shortlog -ns\n--group=trailer:reviewed-by</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Note that\ncommits that do not include the trailer will not be counted.\nLikewise, commits with multiple trailers (e.g., multiple\nsignoffs) may be counted more than once (but only once per\nunique trailer value in that commit).</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Shortlog will\nattempt to parse each trailer value as a <b>name\n&lt;email&gt;</b> identity. If successful, the mailmap is\napplied and the email is omitted unless the <b>--email</b>\noption is specified. If the value cannot be parsed as an\nidentity, it will be taken literally and completely.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>--group</b> is specified multiple times, commits are\ncounted under each value (but again, only once per unique\nvalue in that commit). For example, <b>git shortlog\n--group=author --group=trailer:co-authored-by</b> counts\nboth authors and co-authors.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-c,\n--committer</p>\n\n<p style=\"margin-left:17%;\">This is an alias for\n<b>--group=committer</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-w[&lt;width&gt;[,&lt;indent1&gt;[,&lt;indent2&gt;]]]</p>\n\n<p style=\"margin-left:17%;\">Linewrap the output by wrapping\neach line at <b>width</b>. The first line of each entry is\nindented by <b>indent1</b> spaces, and the second and\nsubsequent lines are indented by <b>indent2</b> spaces.\n<b>width</b>, <b>indent1</b>, and <b>indent2</b> default to\n76, 6 and 9 respectively.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If width is\n<b>0</b> (zero) then indent the lines of the output without\nwrapping them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;revision\nrange&gt;</p>\n\n<p style=\"margin-left:17%;\">Show only commits in the\nspecified revision range. When no &lt;revision range&gt; is\nspecified, it defaults to <b>HEAD</b> (i.e. the whole\nhistory leading to the current commit). <b>origin..HEAD</b>\nspecifies all the commits reachable from the current commit\n(i.e. <b>HEAD</b>), but not from <b>origin</b>. For a\ncomplete list of ways to spell &lt;revision range&gt;, see\nthe &quot;Specifying Ranges&quot; section of\n<a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">[--]\n&lt;path&gt;...</p>\n\n<p style=\"margin-left:17%;\">Consider only commits that are\nenough to explain how the files that match the specified\npaths came to be.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Paths may need\nto be prefixed with <b>--</b> to separate them from options\nor the revision range, when confusion arises.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commit\nLimiting</b> <br>\nBesides specifying a range of commits that should be listed\nusing the special notations explained in the description,\nadditional commit limiting may be applied.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using more\noptions generally further limits the output (e.g.\n<b>--since=&lt;date1&gt;</b> limits to commits newer than\n<b>&lt;date1&gt;</b>, and using it with\n<b>--grep=&lt;pattern&gt;</b> further limits to commits\nwhose log message has a line that matches\n<b>&lt;pattern&gt;</b>), unless otherwise noted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that these\nare applied before commit ordering and formatting options,\nsuch as <b>--reverse</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-&lt;number&gt;,\n-n &lt;number&gt;, --max-count=&lt;number&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the number of commits to\noutput.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--skip=&lt;number&gt;</p>\n\n<p style=\"margin-left:17%;\">Skip <i>number</i> commits\nbefore starting to show the commit output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--since=&lt;date&gt;,\n--after=&lt;date&gt;</p>\n\n<p style=\"margin-left:17%;\">Show commits more recent than a\nspecific date.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--until=&lt;date&gt;,\n--before=&lt;date&gt;</p>\n\n<p style=\"margin-left:17%;\">Show commits older than a\nspecific date.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--author=&lt;pattern&gt;,\n--committer=&lt;pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones with author/committer header lines that match the\nspecified pattern (regular expression). With more than one\n<b>--author=&lt;pattern&gt;</b>, commits whose author\nmatches any of the given patterns are chosen (similarly for\nmultiple <b>--committer=&lt;pattern&gt;</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--grep-reflog=&lt;pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones with reflog entries that match the specified pattern\n(regular expression). With more than one\n<b>--grep-reflog</b>, commits whose reflog message matches\nany of the given patterns are chosen. It is an error to use\nthis option unless <b>--walk-reflogs</b> is in use.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--grep=&lt;pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones with log message that matches the specified pattern\n(regular expression). With more than one\n<b>--grep=&lt;pattern&gt;</b>, commits whose message matches\nany of the given patterns are chosen (but see\n<b>--all-match</b>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\n<b>--notes</b> is in effect, the message from the notes is\nmatched as if it were part of the log message.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all-match</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones that match all given <b>--grep</b>, instead of ones\nthat match at least one.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--invert-grep</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones with log message that do not match the pattern\nspecified with <b>--grep=&lt;pattern&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-i,\n--regexp-ignore-case</p>\n\n<p style=\"margin-left:17%;\">Match the regular expression\nlimiting patterns without regard to letter case.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--basic-regexp</p>\n\n<p style=\"margin-left:17%;\">Consider the limiting patterns\nto be basic regular expressions; this is the default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-E,\n--extended-regexp</p>\n\n<p style=\"margin-left:17%;\">Consider the limiting patterns\nto be extended regular expressions instead of the default\nbasic regular expressions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-F,\n--fixed-strings</p>\n\n<p style=\"margin-left:17%;\">Consider the limiting patterns\nto be fixed strings (don&rsquo;t interpret pattern as a\nregular expression).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-P,\n--perl-regexp</p>\n\n<p style=\"margin-left:17%;\">Consider the limiting patterns\nto be Perl-compatible regular expressions.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Support for\nthese types of regular expressions is an optional\ncompile-time dependency. If Git wasn&rsquo;t compiled with\nsupport for them providing this option will cause it to\ndie.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--remove-empty</p>\n\n<p style=\"margin-left:17%;\">Stop when a given path\ndisappears from the tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--merges</p>\n\n<p style=\"margin-left:17%;\">Print only merge commits. This\nis exactly the same as <b>--min-parents=2</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-merges</p>\n\n<p style=\"margin-left:17%;\">Do not print commits with more\nthan one parent. This is exactly the same as\n<b>--max-parents=1</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--min-parents=&lt;number&gt;,\n--max-parents=&lt;number&gt;, --no-min-parents,\n--no-max-parents</p>\n\n<p style=\"margin-left:17%;\">Show only commits which have at\nleast (or at most) that many parent commits. In particular,\n<b>--max-parents=1</b> is the same as <b>--no-merges</b>,\n<b>--min-parents=2</b> is the same as <b>--merges</b>.\n<b>--max-parents=0</b> gives all root commits and\n<b>--min-parents=3</b> all octopus merges.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--no-min-parents</b>\nand <b>--no-max-parents</b> reset these limits (to no limit)\nagain. Equivalent forms are <b>--min-parents=0</b> (any\ncommit has 0 or more parents) and <b>--max-parents=-1</b>\n(negative numbers denote no upper limit).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--first-parent</p>\n\n<p style=\"margin-left:17%;\">Follow only the first parent\ncommit upon seeing a merge commit. This option can give a\nbetter overview when viewing the evolution of a particular\ntopic branch, because merges into a topic branch tend to be\nonly about adjusting to updated upstream from time to time,\nand this option allows you to ignore the individual commits\nbrought in to your history by such a merge.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--not</p>\n\n<p style=\"margin-left:17%;\">Reverses the meaning of the\n<i>^</i> prefix (or lack thereof) for all following revision\nspecifiers, up to the next <b>--not</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs in\n<b>refs/</b>, along with <b>HEAD</b>, are listed on the\ncommand line as <i>&lt;commit&gt;</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--branches[=&lt;pattern&gt;]</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs in\n<b>refs/heads</b> are listed on the command line as\n<i>&lt;commit&gt;</i>. If <i>&lt;pattern&gt;</i> is given,\nlimit branches to ones matching given shell glob. If pattern\nlacks <i>?</i>, <i>*</i>, or <i>[</i>, <i>/*</i> at the end\nis implied.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--tags[=&lt;pattern&gt;]</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs in\n<b>refs/tags</b> are listed on the command line as\n<i>&lt;commit&gt;</i>. If <i>&lt;pattern&gt;</i> is given,\nlimit tags to ones matching given shell glob. If pattern\nlacks <i>?</i>, <i>*</i>, or <i>[</i>, <i>/*</i> at the end\nis implied.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--remotes[=&lt;pattern&gt;]</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs in\n<b>refs/remotes</b> are listed on the command line as\n<i>&lt;commit&gt;</i>. If <i>&lt;pattern&gt;</i> is given,\nlimit remote-tracking branches to ones matching given shell\nglob. If pattern lacks <i>?</i>, <i>*</i>, or <i>[</i>,\n<i>/*</i> at the end is implied.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--glob=&lt;glob-pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs\nmatching shell glob <i>&lt;glob-pattern&gt;</i> are listed\non the command line as <i>&lt;commit&gt;</i>. Leading\n<i>refs/</i>, is automatically prepended if missing. If\npattern lacks <i>?</i>, <i>*</i>, or <i>[</i>, <i>/*</i> at\nthe end is implied.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--exclude=&lt;glob-pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Do not include refs matching\n<i>&lt;glob-pattern&gt;</i> that the next <b>--all</b>,\n<b>--branches</b>, <b>--tags</b>, <b>--remotes</b>, or\n<b>--glob</b> would otherwise consider. Repetitions of this\noption accumulate exclusion patterns up to the next\n<b>--all</b>, <b>--branches</b>, <b>--tags</b>,\n<b>--remotes</b>, or <b>--glob</b> option (other options or\narguments do not clear accumulated patterns).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The patterns\ngiven should not begin with <b>refs/heads</b>,\n<b>refs/tags</b>, or <b>refs/remotes</b> when applied to\n<b>--branches</b>, <b>--tags</b>, or <b>--remotes</b>,\nrespectively, and they must begin with <b>refs/</b> when\napplied to <b>--glob</b> or <b>--all</b>. If a trailing\n<i>/*</i> is intended, it must be given explicitly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reflog</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all objects\nmentioned by reflogs are listed on the command line as\n<b>&lt;commit&gt;</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--alternate-refs</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all objects\nmentioned as ref tips of alternate repositories were listed\non the command line. An alternate repository is any\nrepository whose object directory is specified in\n<b>objects/info/alternates</b>. The set of included objects\nmay be modified by <b>core.alternateRefsCommand</b>, etc.\nSee <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--single-worktree</p>\n\n<p style=\"margin-left:17%;\">By default, all working trees\nwill be examined by the following options when there are\nmore than one (see <a href=\"https://man.page/1/git-worktree\">git-worktree(1)</a>): <b>--all</b>,\n<b>--reflog</b> and <b>--indexed-objects</b>. This option\nforces them to examine the current working tree only.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-missing</p>\n\n<p style=\"margin-left:17%;\">Upon seeing an invalid object\nname in the input, pretend as if the bad input was not\ngiven.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--bisect</p>\n\n<p style=\"margin-left:17%;\">Pretend as if the bad bisection\nref <b>refs/bisect/bad</b> was listed and as if it was\nfollowed by <b>--not</b> and the good bisection refs\n<b>refs/bisect/good-*</b> on the command line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdin</p>\n\n<p style=\"margin-left:17%;\">In addition to the\n<i>&lt;commit&gt;</i> listed on the command line, read them\nfrom the standard input. If a <b>--</b> separator is seen,\nstop reading commits and start reading paths to limit the\nresult.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cherry-mark</p>\n\n<p style=\"margin-left:17%;\">Like <b>--cherry-pick</b> (see\nbelow) but mark equivalent commits with <b>=</b> rather than\nomitting them, and inequivalent ones with <b>+</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cherry-pick</p>\n\n<p style=\"margin-left:17%;\">Omit any commit that introduces\nthe same change as another commit on the &ldquo;other\nside&rdquo; when the set of commits are limited with\nsymmetric difference.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example, if\nyou have two branches, <b>A</b> and <b>B</b>, a usual way to\nlist all commits on only one side of them is with\n<b>--left-right</b> (see the example below in the\ndescription of the <b>--left-right</b> option). However, it\nshows the commits that were cherry-picked from the other\nbranch (for example, &ldquo;3rd on b&rdquo; may be\ncherry-picked from branch A). With this option, such pairs\nof commits are excluded from the output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--left-only,\n--right-only</p>\n\n<p style=\"margin-left:17%;\">List only commits on the\nrespective side of a symmetric difference, i.e. only those\nwhich would be marked <b>&lt;</b> resp. <b>&gt;</b> by\n<b>--left-right</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example,\n<b>--cherry-pick --right-only A...B</b> omits those commits\nfrom <b>B</b> which are in <b>A</b> or are patch-equivalent\nto a commit in <b>A</b>. In other words, this lists the\n<b>+</b> commits from <b>git cherry A B</b>. More precisely,\n<b>--cherry-pick --right-only --no-merges</b> gives the\nexact list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cherry</p>\n\n<p style=\"margin-left:17%;\">A synonym for <b>--right-only\n--cherry-mark --no-merges</b>; useful to limit the output to\nthe commits on our side and mark those that have been\napplied to the other side of a forked history with <b>git\nlog --cherry upstream...mybranch</b>, similar to <b>git\ncherry upstream mybranch</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-g,\n--walk-reflogs</p>\n\n<p style=\"margin-left:17%;\">Instead of walking the commit\nancestry chain, walk reflog entries from the most recent one\nto older ones. When this option is used you cannot specify\ncommits to exclude (that is, <i>^commit</i>,\n<i>commit1..commit2</i>, and <i>commit1...commit2</i>\nnotations cannot be used).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>--pretty</b> format other than <b>oneline</b> and\n<b>reference</b> (for obvious reasons), this causes the\noutput to have two extra lines of information taken from the\nreflog. The reflog designator in the output may be shown as\n<b>ref@{Nth}</b> (where <b>Nth</b> is the\nreverse-chronological index in the reflog) or as\n<b>ref@{timestamp}</b> (with the timestamp for that entry),\ndepending on a few rules:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">1. If the\nstarting point is specified as <b>ref@{Nth}</b>, show the\nindex format.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">2. If the\nstarting point was specified as <b>ref@{now}</b>, show the\ntimestamp format.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">3. If neither\nwas used, but <b>--date</b> was given on the command line,\nshow the timestamp in the format requested by\n<b>--date</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">4. Otherwise,\nshow the index format.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Under\n<b>--pretty=oneline</b>, the commit message is prefixed with\nthis information on the same line. This option cannot be\ncombined with <b>--reverse</b>. See also\n<a href=\"https://man.page/1/git-reflog\">git-reflog(1)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Under\n<b>--pretty=reference</b>, this information will not be\nshown at all.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--merge</p>\n\n<p style=\"margin-left:17%;\">After a failed merge, show refs\nthat touch files having a conflict and don&rsquo;t exist on\nall heads to merge.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--boundary</p>\n\n<p style=\"margin-left:17%;\">Output excluded boundary\ncommits. Boundary commits are prefixed with <b>-</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>History\nSimplification</b> <br>\nSometimes you are only interested in parts of the history,\nfor example the commits modifying a particular &lt;path&gt;.\nBut there are two parts of <i>History Simplification</i>,\none part is selecting the commits and the other is how to do\nit, as there are various strategies to simplify the\nhistory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions select the commits to be shown:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;paths&gt;</p>\n\n<p style=\"margin-left:17%;\">Commits modifying the given\n&lt;paths&gt; are selected.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--simplify-by-decoration</p>\n\n<p style=\"margin-left:17%;\">Commits that are referred by\nsome branch or tag are selected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that extra\ncommits can be shown to give a meaningful history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions affect the way the simplification is performed:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Default\nmode</p>\n\n<p style=\"margin-left:17%;\">Simplifies the history to the\nsimplest history explaining the final state of the tree.\nSimplest because it prunes some side branches if the end\nresult is the same (i.e. merging branches with the same\ncontent)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-pulls</p>\n\n<p style=\"margin-left:17%;\">Include all commits from the\ndefault mode, but also any merge commits that are not\nTREESAME to the first parent but are TREESAME to a later\nparent. This mode is helpful for showing the merge commits\nthat &quot;first introduced&quot; a change to a branch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--full-history</p>\n\n<p style=\"margin-left:17%;\">Same as the default mode, but\ndoes not prune some history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dense</p>\n\n<p style=\"margin-left:17%;\">Only the selected commits are\nshown, plus some to have a meaningful history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sparse</p>\n\n<p style=\"margin-left:17%;\">All commits in the simplified\nhistory are shown.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--simplify-merges</p>\n\n<p style=\"margin-left:17%;\">Additional option to\n<b>--full-history</b> to remove some needless merges from\nthe resulting history, as there are no selected commits\ncontributing to this merge.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ancestry-path</p>\n\n<p style=\"margin-left:17%;\">When given a range of commits\nto display (e.g. <i>commit1..commit2</i> or <i>commit2\n^commit1</i>), only display commits that exist directly on\nthe ancestry chain between the <i>commit1</i> and\n<i>commit2</i>, i.e. commits that are both descendants of\n<i>commit1</i>, and ancestors of <i>commit2</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A more detailed\nexplanation follows.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Suppose you\nspecified <b>foo</b> as the &lt;paths&gt;. We shall call\ncommits that modify <b>foo</b> !TREESAME, and the rest\nTREESAME. (In a diff filtered for <b>foo</b>, they look\ndifferent and equal, respectively.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing, we will always refer to the same example history\nto illustrate the differences between simplification\nsettings. We assume that you are filtering for a file\n<b>foo</b> in this commit graph:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">.-A---M---N---O---P---Q\n<br>\n/ / / / / / <br>\nI B C D E Y <br>\n\\ / / / / / <br>\n&rsquo;-------------' X</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The horizontal\nline of history A---Q is taken to be the first parent of\neach merge. The commits are:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>I</b>\nis the initial commit, in which <b>foo</b> exists with\ncontents &ldquo;asdf&rdquo;, and a file <b>quux</b> exists\nwith contents &ldquo;quux&rdquo;. Initial commits are\ncompared to an empty tree, so <b>I</b> is !TREESAME.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; In\n<b>A</b>, <b>foo</b> contains just &ldquo;foo&rdquo;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>B</b>\ncontains the same change as <b>A</b>. Its merge <b>M</b> is\ntrivial and hence TREESAME to all parents.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>C</b>\ndoes not change <b>foo</b>, but its merge <b>N</b> changes\nit to &ldquo;foobar&rdquo;, so it is not TREESAME to any\nparent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>D</b>\nsets <b>foo</b> to &ldquo;baz&rdquo;. Its merge <b>O</b>\ncombines the strings from <b>N</b> and <b>D</b> to\n&ldquo;foobarbaz&rdquo;; i.e., it is not TREESAME to any\nparent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>E</b>\nchanges <b>quux</b> to &ldquo;xyzzy&rdquo;, and its merge\n<b>P</b> combines the strings to &ldquo;quux xyzzy&rdquo;.\n<b>P</b> is TREESAME to <b>O</b>, but not to <b>E</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>X</b>\nis an independent root commit that added a new file\n<b>side</b>, and <b>Y</b> modified it. <b>Y</b> is TREESAME\nto <b>X</b>. Its merge <b>Q</b> added <b>side</b> to\n<b>P</b>, and <b>Q</b> is TREESAME to <b>P</b>, but not to\n<b>Y</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>rev-list</b>\nwalks backwards through history, including or excluding\ncommits based on whether <b>--full-history</b> and/or parent\nrewriting (via <b>--parents</b> or <b>--children</b>) are\nused. The following settings are available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Default\nmode</p>\n\n<p style=\"margin-left:17%;\">Commits are included if they\nare not TREESAME to any parent (though this can be changed,\nsee <b>--sparse</b> below). If the commit was a merge, and\nit was TREESAME to one parent, follow only that parent.\n(Even if there are several TREESAME parents, follow only one\nof them.) Otherwise, follow all parents.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This results\nin:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">.-A---N---O\n<br>\n/ / / <br>\nI---------D</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note how the\nrule to only follow the TREESAME parent, if one is\navailable, removed <b>B</b> from consideration entirely.\n<b>C</b> was considered via <b>N</b>, but is TREESAME. Root\ncommits are compared to an empty tree, so <b>I</b> is\n!TREESAME.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Parent/child\nrelations are only visible with <b>--parents</b>, but that\ndoes not affect the commits selected in default mode, so we\nhave shown the parent lines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--full-history\nwithout parent rewriting</p>\n\n<p style=\"margin-left:17%;\">This mode differs from the\ndefault in one point: always follow all parents of a merge,\neven if it is TREESAME to one of them. Even if more than one\nside of the merge has commits that are included, this does\nnot imply that the merge itself is! In the example, we\nget</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">I A B N D O P\nQ</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>M</b> was\nexcluded because it is TREESAME to both parents. <b>E</b>,\n<b>C</b> and <b>B</b> were all walked, but only <b>B</b> was\n!TREESAME, so the others do not appear.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nwithout parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so\nwe show them disconnected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--full-history\nwith parent rewriting</p>\n\n<p style=\"margin-left:17%;\">Ordinary commits are only\nincluded if they are !TREESAME (though this can be changed,\nsee <b>--sparse</b> below).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Merges are\nalways included. However, their parent list is rewritten:\nAlong each parent, prune away commits that are not included\nthemselves. This results in</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">.-A---M---N---O---P---Q\n<br>\n/ / / / / <br>\nI B / D / <br>\n\\ / / / / <br>\n&rsquo;-------------'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Compare to\n<b>--full-history</b> without rewriting above. Note that\n<b>E</b> was pruned away because it is TREESAME, but the\nparent list of P was rewritten to contain <b>E</b>'s parent\n<b>I</b>. The same happened for <b>C</b> and <b>N</b>, and\n<b>X</b>, <b>Y</b> and <b>Q</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe above settings, you can change whether TREESAME affects\ninclusion:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dense</p>\n\n<p style=\"margin-left:17%;\">Commits that are walked are\nincluded if they are not TREESAME to any parent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sparse</p>\n\n<p style=\"margin-left:17%;\">All commits that are walked are\nincluded.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nwithout <b>--full-history</b>, this still simplifies merges:\nif one of the parents is TREESAME, we follow only that one,\nso the other sides of the merge are never walked.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--simplify-merges</p>\n\n<p style=\"margin-left:17%;\">First, build a history graph in\nthe same way that <b>--full-history</b> with parent\nrewriting does (see above).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Then simplify\neach commit <b>C</b> to its replacement <b>C'</b> in the\nfinal history according to the following rules:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Set\n<b>C'</b> to <b>C</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Replace\neach parent <b>P</b> of <b>C'</b> with its simplification\n<b>P'</b>. In the process, drop parents that are ancestors\nof other parents or that are root commits TREESAME to an\nempty tree, and remove duplicates, but take care to never\ndrop all parents that we are TREESAME to.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; If after\nthis parent rewriting, <b>C'</b> is a root or merge commit\n(has zero or &gt;1 parents), a boundary commit, or\n!TREESAME, it remains. Otherwise, it is replaced with its\nonly parent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The effect of\nthis is best shown by way of comparing to\n<b>--full-history</b> with parent rewriting. The example\nturns into:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">.-A---M---N---O\n<br>\n/ / / <br>\nI B D <br>\n\\ / / <br>\n&rsquo;---------'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note the major\ndifferences in <b>N</b>, <b>P</b>, and <b>Q</b> over\n<b>--full-history</b>:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>N</b>'s parent list had <b>I</b> removed, because it is\nan ancestor of the other parent <b>M</b>. Still, <b>N</b>\nremained because it is !TREESAME.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>P</b>'s parent list similarly had <b>I</b> removed.\n<b>P</b> was then removed completely, because it had one\nparent and is TREESAME.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>Q</b>'s parent list had <b>Y</b> simplified to <b>X</b>.\n<b>X</b> was then removed, because it was a TREESAME root.\n<b>Q</b> was then removed completely, because it had one\nparent and is TREESAME.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is\nanother simplification mode available:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ancestry-path</p>\n\n<p style=\"margin-left:17%;\">Limit the displayed commits to\nthose directly on the ancestry chain between the\n&ldquo;from&rdquo; and &ldquo;to&rdquo; commits in the given\ncommit range. I.e. only display commits that are ancestor of\nthe &ldquo;to&rdquo; commit and descendants of the\n&ldquo;from&rdquo; commit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As an example\nuse case, consider the following commit history:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">D---E-------F\n<br>\n/ \\ \\ <br>\nB---C---G---H---I---J <br>\n/ \\ <br>\nA-------K---------------L--M</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A regular\n<i>D..M</i> computes the set of commits that are ancestors\nof <b>M</b>, but excludes the ones that are ancestors of\n<b>D</b>. This is useful to see what happened to the history\nleading to <b>M</b> since <b>D</b>, in the sense that\n&ldquo;what does <b>M</b> have that did not exist in\n<b>D</b>&rdquo;. The result in this example would be all the\ncommits, except <b>A</b> and <b>B</b> (and <b>D</b> itself,\nof course).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When we want to\nfind out what commits in <b>M</b> are contaminated with the\nbug introduced by <b>D</b> and need fixing, however, we\nmight want to view only the subset of <i>D..M</i> that are\nactually descendants of <b>D</b>, i.e. excluding <b>C</b>\nand <b>K</b>. This is exactly what the\n<b>--ancestry-path</b> option does. Applied to the\n<i>D..M</i> range, it results in:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">E-------F <br>\n\\ \\ <br>\nG---H---I---J <br>\n\\ <br>\nL--M</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before\ndiscussing another option, <b>--show-pulls</b>, we need to\ncreate a new example history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A common\nproblem users face when looking at simplified history is\nthat a commit they know changed a file somehow does not\nappear in the file&rsquo;s simplified history. Let&rsquo;s\ndemonstrate a new example and show how options such as\n<b>--full-history</b> and <b>--simplify-merges</b> works in\nthat case:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">.-A---M-----C--N---O---P\n<br>\n/ / \\ \\ \\/ / / <br>\nI B \\ R-'&rsquo;-Z' / <br>\n\\ / \\/ / <br>\n\\ / /\\ / <br>\n&rsquo;---X--' &rsquo;---Y--'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For this\nexample, suppose <b>I</b> created <b>file.txt</b> which was\nmodified by <b>A</b>, <b>B</b>, and <b>X</b> in different\nways. The single-parent commits <b>C</b>, <b>Z</b>, and\n<b>Y</b> do not change <b>file.txt</b>. The merge commit\n<b>M</b> was created by resolving the merge conflict to\ninclude both changes from <b>A</b> and <b>B</b> and hence is\nnot TREESAME to either. The merge commit <b>R</b>, however,\nwas created by ignoring the contents of <b>file.txt</b> at\n<b>M</b> and taking only the contents of <b>file.txt</b> at\n<b>X</b>. Hence, <b>R</b> is TREESAME to <b>X</b> but not\n<b>M</b>. Finally, the natural merge resolution to create\n<b>N</b> is to take the contents of <b>file.txt</b> at\n<b>R</b>, so <b>N</b> is TREESAME to <b>R</b> but not\n<b>C</b>. The merge commits <b>O</b> and <b>P</b> are\nTREESAME to their first parents, but not to their second\nparents, <b>Z</b> and <b>Y</b> respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using the\ndefault mode, <b>N</b> and <b>R</b> both have a TREESAME\nparent, so those edges are walked and the others are\nignored. The resulting history graph is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">I---X</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using\n<b>--full-history</b>, Git walks every edge. This will\ndiscover the commits <b>A</b> and <b>B</b> and the merge\n<b>M</b>, but also will reveal the merge commits <b>O</b>\nand <b>P</b>. With parent rewriting, the resulting graph\nis:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">.-A---M--------N---O---P\n<br>\n/ / \\ \\ \\/ / / <br>\nI B \\ R-'&rsquo;--' / <br>\n\\ / \\/ / <br>\n\\ / /\\ / <br>\n&rsquo;---X--' &rsquo;------'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, the merge\ncommits <b>O</b> and <b>P</b> contribute extra noise, as\nthey did not actually contribute a change to\n<b>file.txt</b>. They only merged a topic that was based on\nan older version of <b>file.txt</b>. This is a common issue\nin repositories using a workflow where many contributors\nwork in parallel and merge their topic branches along a\nsingle trunk: manu unrelated merges appear in the\n<b>--full-history</b> results.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using the\n<b>--simplify-merges</b> option, the commits <b>O</b> and\n<b>P</b> disappear from the results. This is because the\nrewritten second parents of <b>O</b> and <b>P</b> are\nreachable from their first parents. Those edges are removed\nand then the commits look like single-parent commits that\nare TREESAME to their parent. This also happens to the\ncommit <b>N</b>, resulting in a history view as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">.-A---M--. <br>\n/ / \\ <br>\nI B R <br>\n\\ / / <br>\n\\ / / <br>\n&rsquo;---X--'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this view,\nwe see all of the important single-parent changes from\n<b>A</b>, <b>B</b>, and <b>X</b>. We also see the\ncarefully-resolved merge <b>M</b> and the\nnot-so-carefully-resolved merge <b>R</b>. This is usually\nenough information to determine why the commits <b>A</b> and\n<b>B</b> &quot;disappeared&quot; from history in the default\nview. However, there are a few issues with this\napproach.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first issue\nis performance. Unlike any previous option, the\n<b>--simplify-merges</b> option requires walking the entire\ncommit history before returning a single result. This can\nmake the option difficult to use for very large\nrepositories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The second\nissue is one of auditing. When many contributors are working\non the same repository, it is important which merge commits\nintroduced a change into an important branch. The\nproblematic merge <b>R</b> above is not likely to be the\nmerge commit that was used to merge into an important\nbranch. Instead, the merge <b>N</b> was used to merge\n<b>R</b> and <b>X</b> into the important branch. This commit\nmay have information about why the change <b>X</b> came to\noverride the changes from <b>A</b> and <b>B</b> in its\ncommit message.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-pulls</p>\n\n<p style=\"margin-left:17%;\">In addition to the commits\nshown in the default history, show each merge commit that is\nnot TREESAME to its first parent but is TREESAME to a later\nparent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When a merge\ncommit is included by <b>--show-pulls</b>, the merge is\ntreated as if it &quot;pulled&quot; the change from another\nbranch. When using <b>--show-pulls</b> on this example (and\nno other options) the resulting graph is:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">I---X---R---N</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Here, the merge\ncommits <b>R</b> and <b>N</b> are included because they\npulled the commits <b>X</b> and <b>R</b> into the base\nbranch, respectively. These merges are the reason the\ncommits <b>A</b> and <b>B</b> do not appear in the default\nhistory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\n<b>--show-pulls</b> is paired with <b>--simplify-merges</b>,\nthe graph includes all of the necessary information:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">.-A---M--. N\n<br>\n/ / \\ / <br>\nI B R <br>\n\\ / / <br>\n\\ / / <br>\n&rsquo;---X--'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Notice that\nsince <b>M</b> is reachable from <b>R</b>, the edge from\n<b>N</b> to <b>M</b> was simplified away. However, <b>N</b>\nstill appears in the history as an important commit because\nit &quot;pulled&quot; the change <b>R</b> into the main\nbranch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>--simplify-by-decoration</b> option allows you to view\nonly the big picture of the topology of the history, by\nomitting commits that are not referenced by tags. Commits\nare marked as !TREESAME (in other words, kept after history\nsimplification rules described above) if (1) they are\nreferenced by tags, or (2) they change the contents of the\npaths given on the command line. All other commits are\nmarked as TREESAME (subject to be simplified away).</p>\n\n<h2>MAPPING AUTHORS\n<a name=\"MAPPING AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/5/gitmailmap\">gitmailmap(5)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that if\n<b>git shortlog</b> is run outside of a repository (to\nprocess log contents on standard input), it will look for a\n<b>.mailmap</b> file in the current directory.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#MAPPING AUTHORS\">MAPPING AUTHORS</a>","<a href=\"#GIT\">GIT</a>"]}