{"name":"git-rev-parse","description":"git-rev-parse - Pick out and massage parameters","body":"\n\n<h1 align=\"center\">GIT-REV-PARSE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-rev-parse -\nPick out and massage parameters</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nrev-parse</i> [&lt;options&gt;] &lt;args&gt;...</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many Git\nporcelainish commands take mixture of flags (i.e. parameters\nthat begin with a dash <i>-</i>) and parameters meant for\nthe underlying <i>git rev-list</i> command they use\ninternally and flags and parameters for the other commands\nthey use downstream of <i>git rev-list</i>. This command is\nused to distinguish between them.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Operation\nModes</b> <br>\nEach of these options must appear first on the command\nline.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--parseopt</p>\n\n<p style=\"margin-left:17%;\">Use <i>git rev-parse</i> in\noption parsing mode (see PARSEOPT section below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sq-quote</p>\n\n<p style=\"margin-left:17%;\">Use <i>git rev-parse</i> in\nshell quoting mode (see SQ-QUOTE section below). In contrast\nto the <b>--sq</b> option below, this mode does only\nquoting. Nothing else is done to command input.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options for\n--parseopt</b> <br>\n--keep-dashdash</p>\n\n<p style=\"margin-left:17%;\">Only meaningful in\n<b>--parseopt</b> mode. Tells the option parser to echo out\nthe first <b>--</b> met instead of skipping it.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stop-at-non-option</p>\n\n<p style=\"margin-left:17%;\">Only meaningful in\n<b>--parseopt</b> mode. Lets the option parser stop at the\nfirst non-option argument. This can be used to parse\nsub-commands that take options themselves.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stuck-long</p>\n\n<p style=\"margin-left:17%;\">Only meaningful in\n<b>--parseopt</b> mode. Output the options in their long\nform if available, and with their arguments stuck.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options for\nFiltering</b> <br>\n--revs-only</p>\n\n<p style=\"margin-left:17%;\">Do not output flags and\nparameters not meant for <i>git rev-list</i> command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-revs</p>\n\n<p style=\"margin-left:17%;\">Do not output flags and\nparameters meant for <i>git rev-list</i> command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--flags</p>\n\n<p style=\"margin-left:17%;\">Do not output non-flag\nparameters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-flags</p>\n\n<p style=\"margin-left:17%;\">Do not output flag\nparameters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options for\nOutput</b> <br>\n--default &lt;arg&gt;</p>\n\n<p style=\"margin-left:17%;\">If there is no parameter given\nby the user, use <b>&lt;arg&gt;</b> instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--prefix\n&lt;arg&gt;</p>\n\n<p style=\"margin-left:17%;\">Behave as if <i>git\nrev-parse</i> was invoked from the <b>&lt;arg&gt;</b>\nsubdirectory of the working tree. Any relative filenames are\nresolved as if they are prefixed by <b>&lt;arg&gt;</b> and\nwill be printed in that form.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This can be\nused to convert arguments to a command run in a subdirectory\nso that they can still be used after moving to the top-level\nof the repository. For example:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">prefix=$(git\nrev-parse --show-prefix) <br>\ncd &quot;$(git rev-parse --show-toplevel)&quot; <br>\n# rev-parse provides the -- needed for 'set' <br>\neval &quot;set $(git rev-parse --sq --prefix\n&quot;$prefix&quot; -- &quot;$@&quot;)&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--verify</p>\n\n<p style=\"margin-left:17%;\">Verify that exactly one\nparameter is provided, and that it can be turned into a raw\n20-byte SHA-1 that can be used to access the object\ndatabase. If so, emit it to the standard output; otherwise,\nerror out.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nmake sure that the output actually names an object in your\nobject database and/or can be used as a specific type of\nobject you require, you can add the <b>^{type}</b> peeling\noperator to the parameter. For example, <b>git rev-parse\n&quot;$VAR^{commit}&quot;</b> will make sure <b>$VAR</b>\nnames an existing object that is a commit-ish (i.e. a\ncommit, or an annotated tag that points at a commit). To\nmake sure that <b>$VAR</b> names an existing object of any\ntype, <b>git rev-parse &quot;$VAR^{object}&quot;</b> can be\nused.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that if\nyou are verifying a name from an untrusted source, it is\nwise to use <b>--end-of-options</b> so that the name\nargument is not mistaken for another option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">Only meaningful in\n<b>--verify</b> mode. Do not output an error message if the\nfirst argument is not a valid object name; instead exit with\nnon-zero status silently. SHA-1s for valid object names are\nprinted to stdout on success.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sq</p>\n\n<p style=\"margin-left:17%;\">Usually the output is made one\nline per flag and parameter. This option makes output a\nsingle line, properly quoted for consumption by shell.\nUseful when you expect your parameter to contain whitespaces\nand newlines (e.g. when using pickaxe <b>-S</b> with <i>git\ndiff-*</i>). In contrast to the <b>--sq-quote</b> option,\nthe command input is still interpreted as usual.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--short[=length]</p>\n\n<p style=\"margin-left:17%;\">Same as <b>--verify</b> but\nshortens the object name to a unique prefix with at least\n<b>length</b> characters. The minimum length is 4, the\ndefault is the effective value of the <b>core.abbrev</b>\nconfiguration variable (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--not</p>\n\n<p style=\"margin-left:17%;\">When showing object names,\nprefix them with <i>^</i> and strip <i>^</i> prefix from the\nobject names that already have one.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--abbrev-ref[=(strict|loose)]</p>\n\n<p style=\"margin-left:17%;\">A non-ambiguous short name of\nthe objects name. The option core.warnAmbiguousRefs is used\nto select the strict abbreviation mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--symbolic</p>\n\n<p style=\"margin-left:17%;\">Usually the object names are\noutput in SHA-1 form (with possible <i>^</i> prefix); this\noption makes them output in a form as close to the original\ninput as possible.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--symbolic-full-name</p>\n\n<p style=\"margin-left:17%;\">This is similar to --symbolic,\nbut it omits input that are not refs (i.e. branch or tag\nnames; or more explicitly disambiguating\n&quot;heads/master&quot; form, when you want to name the\n&quot;master&quot; branch when there is an unfortunately\nnamed tag &quot;master&quot;), and show them as full\nrefnames (e.g. &quot;refs/heads/master&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options for\nObjects</b> <br>\n--all</p>\n\n<p style=\"margin-left:17%;\">Show all refs found in\n<b>refs/</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--branches[=pattern],\n--tags[=pattern], --remotes[=pattern]</p>\n\n<p style=\"margin-left:17%;\">Show all branches, tags, or\nremote-tracking branches, respectively (i.e., refs found in\n<b>refs/heads</b>, <b>refs/tags</b>, or <b>refs/remotes</b>,\nrespectively).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a\n<b>pattern</b> is given, only refs matching the given shell\nglob are shown. If the pattern does not contain a globbing\ncharacter (<b>?</b>, <b>*</b>, or <b>[</b>), it is turned\ninto a prefix match by appending <b>/*</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--glob=pattern</p>\n\n<p style=\"margin-left:17%;\">Show all refs matching the\nshell glob pattern <b>pattern</b>. If the pattern does not\nstart with <b>refs/</b>, this is automatically prepended. If\nthe pattern does not contain a globbing character (<b>?</b>,\n<b>*</b>, or <b>[</b>), it is turned into a prefix match by\nappending <b>/*</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--exclude=&lt;glob-pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Do not include refs matching\n<i>&lt;glob-pattern&gt;</i> that the next <b>--all</b>,\n<b>--branches</b>, <b>--tags</b>, <b>--remotes</b>, or\n<b>--glob</b> would otherwise consider. Repetitions of this\noption accumulate exclusion patterns up to the next\n<b>--all</b>, <b>--branches</b>, <b>--tags</b>,\n<b>--remotes</b>, or <b>--glob</b> option (other options or\narguments do not clear accumulated patterns).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The patterns\ngiven should not begin with <b>refs/heads</b>,\n<b>refs/tags</b>, or <b>refs/remotes</b> when applied to\n<b>--branches</b>, <b>--tags</b>, or <b>--remotes</b>,\nrespectively, and they must begin with <b>refs/</b> when\napplied to <b>--glob</b> or <b>--all</b>. If a trailing\n<i>/*</i> is intended, it must be given explicitly.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--disambiguate=&lt;prefix&gt;</p>\n\n<p style=\"margin-left:17%;\">Show every object whose name\nbegins with the given prefix. The &lt;prefix&gt; must be at\nleast 4 hexadecimal digits long to avoid listing each and\nevery object in the repository by mistake.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options for\nFiles</b> <br>\n--local-env-vars</p>\n\n<p style=\"margin-left:17%;\">List the GIT_* environment\nvariables that are local to the repository (e.g. GIT_DIR or\nGIT_WORK_TREE, but not GIT_EDITOR). Only the names of the\nvariables are listed, not their value, even if they are\nset.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--path-format=(absolute|relative)</p>\n\n<p style=\"margin-left:17%;\">Controls the behavior of\ncertain other options. If specified as absolute, the paths\nprinted by those options will be absolute and canonical. If\nspecified as relative, the paths will be relative to the\ncurrent working directory if that is possible. The default\nis option specific.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option may\nbe specified multiple times and affects only the arguments\nthat follow it on the command line, either to the end of the\ncommand line or the next instance of this option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions are modified by <b>--path-format</b>:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--git-dir</p>\n\n<p style=\"margin-left:17%;\">Show <b>$GIT_DIR</b> if\ndefined. Otherwise show the path to the .git directory. The\npath shown, when relative, is relative to the current\nworking directory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>$GIT_DIR</b> is not defined and the current directory is\nnot detected to lie in a Git repository or work tree print a\nmessage to stderr and exit with nonzero status.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--git-common-dir</p>\n\n<p style=\"margin-left:17%;\">Show <b>$GIT_COMMON_DIR</b> if\ndefined, else <b>$GIT_DIR</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--resolve-git-dir\n&lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">Check if &lt;path&gt; is a\nvalid repository or a gitfile that points at a valid\nrepository, and print the location of the repository. If\n&lt;path&gt; is a gitfile then the resolved path to the real\nrepository is printed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--git-path\n&lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">Resolve\n&quot;$GIT_DIR/&lt;path&gt;&quot; and takes other path\nrelocation variables such as $GIT_OBJECT_DIRECTORY,\n$GIT_INDEX_FILE... into account. For example, if\n$GIT_OBJECT_DIRECTORY is set to /foo/bar then &quot;git\nrev-parse --git-path objects/abc&quot; returns\n/foo/bar/abc.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-toplevel</p>\n\n<p style=\"margin-left:17%;\">Show the (by default, absolute)\npath of the top-level directory of the working tree. If\nthere is no working tree, report an error.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-superproject-working-tree</p>\n\n<p style=\"margin-left:17%;\">Show the absolute path of the\nroot of the superproject&rsquo;s working tree (if exists)\nthat uses the current repository as its submodule. Outputs\nnothing if the current repository is not used as a submodule\nby any project.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--shared-index-path</p>\n\n<p style=\"margin-left:17%;\">Show the path to the shared\nindex file in split index mode, or empty if not in\nsplit-index mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions are unaffected by <b>--path-format</b>:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--absolute-git-dir</p>\n\n<p style=\"margin-left:17%;\">Like <b>--git-dir</b>, but its\noutput is always the canonicalized absolute path.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--is-inside-git-dir</p>\n\n<p style=\"margin-left:17%;\">When the current working\ndirectory is below the repository directory print\n&quot;true&quot;, otherwise &quot;false&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--is-inside-work-tree</p>\n\n<p style=\"margin-left:17%;\">When the current working\ndirectory is inside the work tree of the repository print\n&quot;true&quot;, otherwise &quot;false&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--is-bare-repository</p>\n\n<p style=\"margin-left:17%;\">When the repository is bare\nprint &quot;true&quot;, otherwise &quot;false&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--is-shallow-repository</p>\n\n<p style=\"margin-left:17%;\">When the repository is shallow\nprint &quot;true&quot;, otherwise &quot;false&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-cdup</p>\n\n<p style=\"margin-left:17%;\">When the command is invoked\nfrom a subdirectory, show the path of the top-level\ndirectory relative to the current directory (typically a\nsequence of &quot;../&quot;, or an empty string).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-prefix</p>\n\n<p style=\"margin-left:17%;\">When the command is invoked\nfrom a subdirectory, show the path of the current directory\nrelative to the top-level directory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-object-format[=(storage|input|output)]</p>\n\n<p style=\"margin-left:17%;\">Show the object format (hash\nalgorithm) used for the repository for storage inside the\n<b>.git</b> directory, input, or output. For input, multiple\nalgorithms may be printed, space-separated. If not\nspecified, the default is &quot;storage&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Other\nOptions</b> <br>\n--since=datestring, --after=datestring</p>\n\n<p style=\"margin-left:17%;\">Parse the date string, and\noutput the corresponding --max-age= parameter for <i>git\nrev-list</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--until=datestring,\n--before=datestring</p>\n\n<p style=\"margin-left:17%;\">Parse the date string, and\noutput the corresponding --min-age= parameter for <i>git\nrev-list</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;args&gt;...</p>\n\n<p style=\"margin-left:17%;\">Flags and parameters to be\nparsed.</p>\n\n<h2>SPECIFYING REVISIONS\n<a name=\"SPECIFYING REVISIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A revision\nparameter <i>&lt;rev&gt;</i> typically, but not necessarily,\nnames a commit object. It uses what is called an <i>extended\nSHA-1</i> syntax. Here are various ways to spell object\nnames. The ones listed near the end of this list name trees\nand blobs contained in a commit.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nThis document shows the &quot;raw&quot; syntax as seen by\ngit. The shell and other UIs might require additional\nquoting to protect special characters and to avoid word\nsplitting.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><big>&lt;sha1&gt;</big></i><big>,\ne.g. <i>dae86e1950b1277e545cee180551750029cfe735</i>,\n<i>dae86e</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>The full SHA-1 object name\n(40-byte hexadecimal string), or a leading substring that is\nunique within the repository. E.g.\ndae86e1950b1277e545cee180551750029cfe735 and dae86e both\nname the same commit object if there is no other object in\nyour repository whose object name starts with\ndae86e.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;describeOutput&gt;</i>,\ne.g. <i>v1.7.4.2-679-g3bee7fb</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Output from <b>git\ndescribe</b>; i.e. a closest tag, optionally followed by a\ndash and a number of commits, followed by a dash, a\n<i>g</i>, and an abbreviated object name.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;refname&gt;</i>,\ne.g. <i>master</i>, <i>heads/master</i>,\n<i>refs/heads/master</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A symbolic ref name. E.g.\n<i>master</i> typically means the commit object referenced\nby <i>refs/heads/master</i>. If you happen to have both\n<i>heads/master</i> and <i>tags/master</i>, you can\nexplicitly say <i>heads/master</i> to tell Git which one you\nmean. When ambiguous, a <i>&lt;refname&gt;</i> is\ndisambiguated by taking the first match in the following\nrules:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>1. If\n<i>$GIT_DIR/&lt;refname&gt;</i> exists, that is what you\nmean (this is usually useful only for <b>HEAD</b>,\n<b>FETCH_HEAD</b>, <b>ORIG_HEAD</b>, <b>MERGE_HEAD</b> and\n<b>CHERRY_PICK_HEAD</b>);</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>2.\notherwise, <i>refs/&lt;refname&gt;</i> if it\nexists;</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>3.\notherwise, <i>refs/tags/&lt;refname&gt;</i> if it\nexists;</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>4.\notherwise, <i>refs/heads/&lt;refname&gt;</i> if it\nexists;</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>5.\notherwise, <i>refs/remotes/&lt;refname&gt;</i> if it\nexists;</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>6.\notherwise, <i>refs/remotes/&lt;refname&gt;/HEAD</i> if it\nexists.</big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><b>HEAD</b>\nnames the commit on which you based the changes in the\nworking tree. <b>FETCH_HEAD</b> records the branch which you\nfetched from a remote repository with your last <b>git\nfetch</b> invocation. <b>ORIG_HEAD</b> is created by\ncommands that move your <b>HEAD</b> in a drastic way, to\nrecord the position of the <b>HEAD</b> before their\noperation, so that you can easily change the tip of the\nbranch back to the state before you ran them.\n<b>MERGE_HEAD</b> records the commit(s) which you are\nmerging into your branch when you run <b>git merge</b>.\n<b>CHERRY_PICK_HEAD</b> records the commit which you are\ncherry-picking when you run <b>git\ncherry-pick</b>.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>Note that\nany of the <i>refs/*</i> cases above may come either from\nthe <b>$GIT_DIR/refs</b> directory or from the\n<b>$GIT_DIR/packed-refs</b> file. While the ref name\nencoding is unspecified, UTF-8 is preferred as some output\nprocessing may assume ref names in UTF-8.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>@</i></big></p>\n\n<p style=\"margin-left:17%;\"><big><i>@</i> alone is a\nshortcut for <b>HEAD</b>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>[&lt;refname&gt;]@{&lt;date&gt;}</i>,\ne.g. <i>master@{yesterday}</i>, <i>HEAD@{5 minutes\nago}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A ref followed by the\nsuffix <i>@</i> with a date specification enclosed in a\nbrace pair (e.g. <i>{yesterday}</i>, <i>{1 month 2 weeks 3\ndays 1 hour 1 second ago}</i> or <i>{1979-02-26\n18:30:00}</i>) specifies the value of the ref at a prior\npoint in time. This suffix may only be used immediately\nfollowing a ref name and the ref must have an existing log\n(<i>$GIT_DIR/logs/&lt;ref&gt;</i>). Note that this looks up\nthe state of your <b>local</b> ref at a given time; e.g.,\nwhat was in your local <i>master</i> branch last week. If\nyou want to look at commits made during certain times, see\n<b>--since</b> and <b>--until</b>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;refname&gt;@{&lt;n&gt;}</i>,\ne.g. <i>master@{1}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A ref followed by the\nsuffix <i>@</i> with an ordinal specification enclosed in a\nbrace pair (e.g. <i>{1}</i>, <i>{15}</i>) specifies the n-th\nprior value of that ref. For example <i>master@{1}</i> is\nthe immediate prior value of <i>master</i> while\n<i>master@{5}</i> is the 5th prior value of <i>master</i>.\nThis suffix may only be used immediately following a ref\nname and the ref must have an existing log\n(<i>$GIT_DIR/logs/&lt;refname&gt;</i>).</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>@{&lt;n&gt;}</i>,\ne.g. <i>@{1}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>You can use the <i>@</i>\nconstruct with an empty ref part to get at a reflog entry of\nthe current branch. For example, if you are on branch\n<i>blabla</i> then <i>@{1}</i> means the same as\n<i>blabla@{1}</i>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>@{-&lt;n&gt;}</i>,\ne.g. <i>@{-1}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>The construct\n<i>@{-&lt;n&gt;}</i> means the &lt;n&gt;th branch/commit\nchecked out before the current one.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>[&lt;branchname&gt;]@{upstream}</i>,\ne.g. <i>master@{upstream}</i>, <i>@{u}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>The suffix\n<i>@{upstream}</i> to a branchname (short form\n<i>&lt;branchname&gt;@{u}</i>) refers to the branch that the\nbranch specified by branchname is set to build on top of\n(configured with <b>branch.&lt;name&gt;.remote</b> and\n<b>branch.&lt;name&gt;.merge</b>). A missing branchname\ndefaults to the current one. These suffixes are also\naccepted when spelled in uppercase, and they mean the same\nthing no matter the case.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>[&lt;branchname&gt;]@{push}</i>,\ne.g. <i>master@{push}</i>, <i>@{push}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>The suffix <i>@{push}</i>\nreports the branch &quot;where we would push to&quot; if\n<b>git push</b> were run while <b>branchname</b> was checked\nout (or the current <b>HEAD</b> if no branchname is\nspecified). Since our push destination is in a remote\nrepository, of course, we report the local tracking branch\nthat corresponds to that branch (i.e., something in\n<b>refs/remotes/</b>).</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Here&rsquo;s\nan example to make it more clear:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nconfig push.default current <br>\n$ git config remote.pushdefault myfork <br>\n$ git switch -c mybranch origin/master</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nrev-parse --symbolic-full-name @{upstream} <br>\nrefs/remotes/origin/master</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nrev-parse --symbolic-full-name @{push} <br>\nrefs/remotes/myfork/mybranch</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Note in\nthe example that we set up a triangular workflow, where we\npull from one location and push to another. In a\nnon-triangular workflow, <i>@{push}</i> is the same as\n<i>@{upstream}</i>, and there is no need for it.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>This\nsuffix is also accepted when spelled in uppercase, and means\nthe same thing no matter the case.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;^[&lt;n&gt;]</i>,\ne.g. <i>HEAD^, v1.5.1^0</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A suffix <i>^</i> to a\nrevision parameter means the first parent of that commit\nobject. <i>^&lt;n&gt;</i> means the &lt;n&gt;th parent (i.e.\n<i>&lt;rev&gt;^</i> is equivalent to <i>&lt;rev&gt;^1</i>).\nAs a special rule, <i>&lt;rev&gt;^0</i> means the commit\nitself and is used when <i>&lt;rev&gt;</i> is the object\nname of a tag object that refers to a commit\nobject.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;~[&lt;n&gt;]</i>,\ne.g. <i>HEAD~, master~3</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A suffix <i>~</i> to a\nrevision parameter means the first parent of that commit\nobject. A suffix <i>~&lt;n&gt;</i> to a revision parameter\nmeans the commit object that is the &lt;n&gt;th generation\nancestor of the named commit object, following only the\nfirst parents. I.e. <i>&lt;rev&gt;~3</i> is equivalent to\n<i>&lt;rev&gt;^^^</i> which is equivalent to\n<i>&lt;rev&gt;^1^1^1</i>. See below for an illustration of\nthe usage of this form.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;^{&lt;type&gt;}</i>,\ne.g. <i>v0.99.8^{commit}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A suffix <i>^</i> followed\nby an object type name enclosed in brace pair means\ndereference the object at <i>&lt;rev&gt;</i> recursively\nuntil an object of type <i>&lt;type&gt;</i> is found or the\nobject cannot be dereferenced anymore (in which case, barf).\nFor example, if <i>&lt;rev&gt;</i> is a commit-ish,\n<i>&lt;rev&gt;^{commit}</i> describes the corresponding\ncommit object. Similarly, if <i>&lt;rev&gt;</i> is a\ntree-ish, <i>&lt;rev&gt;^{tree}</i> describes the\ncorresponding tree object. <i>&lt;rev&gt;^0</i> is a\nshort-hand for <i>&lt;rev&gt;^{commit}</i>.</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><i>&lt;rev&gt;^{object}</i>\ncan be used to make sure <i>&lt;rev&gt;</i> names an object\nthat exists, without requiring <i>&lt;rev&gt;</i> to be a\ntag, and without dereferencing <i>&lt;rev&gt;</i>; because a\ntag is already an object, it does not have to be\ndereferenced even once to get to an object.</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><i>&lt;rev&gt;^{tag}</i>\ncan be used to ensure that <i>&lt;rev&gt;</i> identifies an\nexisting tag object.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;^{}</i>,\ne.g. <i>v0.99.8^{}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A suffix <i>^</i> followed\nby an empty brace pair means the object could be a tag, and\ndereference the tag recursively until a non-tag object is\nfound.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;^{/&lt;text&gt;}</i>,\ne.g. <i>HEAD^{/fix nasty bug}</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A suffix <i>^</i> to a\nrevision parameter, followed by a brace pair that contains a\ntext led by a slash, is the same as the <i>:/fix nasty\nbug</i> syntax below except that it returns the youngest\nmatching commit which is reachable from the\n<i>&lt;rev&gt;</i> before <i>^</i>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>:/&lt;text&gt;</i>,\ne.g. <i>:/fix nasty bug</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A colon, followed by a\nslash, followed by a text, names a commit whose commit\nmessage matches the specified regular expression. This name\nreturns the youngest matching commit which is reachable from\nany ref, including HEAD. The regular expression can match\nany part of the commit message. To match messages starting\nwith a string, one can use e.g. <i>:/^foo</i>. The special\nsequence <i>:/!</i> is reserved for modifiers to what is\nmatched. <i>:/!-foo</i> performs a negative match, while\n<i>:/!!foo</i> matches a literal <i>!</i> character,\nfollowed by <i>foo</i>. Any other sequence beginning with\n<i>:/!</i> is reserved for now. Depending on the given text,\nthe shell&rsquo;s word splitting rules might require\nadditional quoting.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;:&lt;path&gt;</i>,\ne.g. <i>HEAD:README</i>, <i>master:./README</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A suffix <i>:</i> followed\nby a path names the blob or tree at the given path in the\ntree-ish object named by the part before the colon. A path\nstarting with <i>./</i> or <i>../</i> is relative to the\ncurrent working directory. The given path will be converted\nto be relative to the working tree&rsquo;s root directory.\nThis is most useful to address a blob or tree from a commit\nor tree that has the same tree structure as the working\ntree.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>:[&lt;n&gt;:]&lt;path&gt;</i>,\ne.g. <i>:0:README</i>, <i>:README</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A colon, optionally\nfollowed by a stage number (0 to 3) and a colon, followed by\na path, names a blob object in the index at the given path.\nA missing stage number (and the colon that follows it) names\na stage 0 entry. During a merge, stage 1 is the common\nancestor, stage 2 is the target branch&rsquo;s version\n(typically the current branch), and stage 3 is the version\nfrom the branch which is being merged.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Here is an\nillustration, by Jon Loeliger. Both commit nodes B and C are\nparents of commit node A. Parent commits are ordered\nleft-to-right.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>G H I J\n<br>\n\\ / \\ / <br>\nD E F <br>\n\\ | / \\ <br>\n\\ | / | <br>\n\\|/ | <br>\nB C <br>\n\\ / <br>\n\\ / <br>\nA</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>A = = A^0\n<br>\nB = A^ = A^1 = A~1 <br>\nC = = A^2 <br>\nD = A^^ = A^1^1 = A~2 <br>\nE = B^2 = A^^2 <br>\nF = B^3 = A^^3 <br>\nG = A^^^ = A^1^1^1 = A~3 <br>\nH = D^2 = B^^2 = A^^^2 = A~2^2 <br>\nI = F^ = B^3^ = A^^3^ <br>\nJ = F^2 = B^3^2 = A^^3^2</big></p>\n\n<h2>SPECIFYING RANGES\n<a name=\"SPECIFYING RANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>History\ntraversing commands such as <b>git log</b> operate on a set\nof commits, not just a single commit.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>For these\ncommands, specifying a single revision, using the notation\ndescribed in the previous section, means the set of commits\n<b>reachable</b> from the given commit.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Specifying\nseveral revisions means the set of commits reachable from\nany of the given commits.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>A\ncommit&rsquo;s reachable set is the commit itself and the\ncommits in its ancestry chain.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>There are\nseveral notations to specify a set of connected commits\n(called a &quot;revision range&quot;), illustrated\nbelow.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Commit\nExclusions</b> <i><br>\n^&lt;rev&gt;</i> (caret) Notation</big></p>\n\n<p style=\"margin-left:17%;\"><big>To exclude commits\nreachable from a commit, a prefix <i>^</i> notation is used.\nE.g. <i>^r1 r2</i> means commits reachable from <i>r2</i>\nbut exclude the ones reachable from <i>r1</i> (i.e.\n<i>r1</i> and its ancestors).</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Dotted\nRange Notations</b> <br>\nThe <i>..</i> (two-dot) Range Notation</big></p>\n\n<p style=\"margin-left:17%;\"><big>The <i>^r1 r2</i> set\noperation appears so often that there is a shorthand for it.\nWhen you have two commits <i>r1</i> and <i>r2</i> (named\naccording to the syntax explained in SPECIFYING REVISIONS\nabove), you can ask for commits that are reachable from r2\nexcluding those that are reachable from r1 by <i>^r1 r2</i>\nand it can be written as <i>r1..r2</i>.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\n<i>...</i> (three-dot) Symmetric Difference\nNotation</big></p>\n\n<p style=\"margin-left:17%;\"><big>A similar notation\n<i>r1...r2</i> is called symmetric difference of <i>r1</i>\nand <i>r2</i> and is defined as <i>r1 r2 --not $(git\nmerge-base --all r1 r2)</i>. It is the set of commits that\nare reachable from either one of <i>r1</i> (left side) or\n<i>r2</i> (right side) but not from both.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>In these\ntwo shorthand notations, you can omit one end and let it\ndefault to HEAD. For example, <i>origin..</i> is a shorthand\nfor <i>origin..HEAD</i> and asks &quot;What did I do since I\nforked from the origin branch?&quot; Similarly,\n<i>..origin</i> is a shorthand for <i>HEAD..origin</i> and\nasks &quot;What did the origin do since I forked from\nthem?&quot; Note that <i>..</i> would mean <i>HEAD..HEAD</i>\nwhich is an empty range that is both reachable and\nunreachable from HEAD.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Commands\nthat are specifically designed to take two distinct ranges\n(e.g. &quot;git range-diff R1 R2&quot; to compare two\nranges) do exist, but they are exceptions. Unless otherwise\nnoted, all &quot;git&quot; commands that operate on a set of\ncommits work on a single revision range. In other words,\nwriting two &quot;two-dot range notation&quot; next to each\nother, e.g.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ git log\nA..B C..D</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>does\n<b>not</b> specify two revision ranges for most commands.\nInstead it will name a single connected set of commits, i.e.\nthose that are reachable from either B or D but are\nreachable from neither A or C. In a linear history like\nthis:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>---A---B---o---o---C---D</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>because A\nand B are reachable from C, the revision range specified by\nthese two dotted ranges is a single commit D.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Other\n&lt;rev&gt;^ Parent Shorthand Notations</b> <br>\nThree other shorthands exist, particularly useful for merge\ncommits, for naming a set that is formed by a commit and its\nparent commits.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\n<i>r1^@</i> notation means all parents of\n<i>r1</i>.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\n<i>r1^!</i> notation includes commit <i>r1</i> but excludes\nall of its parents. By itself, this notation denotes the\nsingle commit <i>r1</i>.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\n<i>&lt;rev&gt;^-[&lt;n&gt;]</i> notation includes\n<i>&lt;rev&gt;</i> but excludes the &lt;n&gt;th parent (i.e.\na shorthand for <i>&lt;rev&gt;^&lt;n&gt;..&lt;rev&gt;</i>),\nwith <i>&lt;n&gt;</i> = 1 if not given. This is typically\nuseful for merge commits where you can just pass\n<i>&lt;commit&gt;^-</i> to get all the commits in the branch\nthat was merged in merge commit <i>&lt;commit&gt;</i>\n(including <i>&lt;commit&gt;</i> itself).</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>While\n<i>&lt;rev&gt;^&lt;n&gt;</i> was about specifying a single\ncommit parent, these three notations also consider its\nparents. For example you can say <i>HEAD^2^@</i>, however\nyou cannot say <i>HEAD^@^2</i>.</big></p>\n\n<h2>REVISION RANGE SUMMARY\n<a name=\"REVISION RANGE SUMMARY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Include commits that are\nreachable from &lt;rev&gt; (i.e. &lt;rev&gt; and its\nancestors).</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>^&lt;rev&gt;</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Exclude commits that are\nreachable from &lt;rev&gt; (i.e. &lt;rev&gt; and its\nancestors).</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev1&gt;..&lt;rev2&gt;</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Include commits that are\nreachable from &lt;rev2&gt; but exclude those that are\nreachable from &lt;rev1&gt;. When either &lt;rev1&gt; or\n&lt;rev2&gt; is omitted, it defaults to\n<b>HEAD</b>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev1&gt;...&lt;rev2&gt;</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Include commits that are\nreachable from either &lt;rev1&gt; or &lt;rev2&gt; but\nexclude those that are reachable from both. When either\n&lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to\n<b>HEAD</b>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;^@</i>,\ne.g. <i>HEAD^@</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A suffix <i>^</i> followed\nby an at sign is the same as listing all parents of\n<i>&lt;rev&gt;</i> (meaning, include anything reachable from\nits parents, but not the commit itself).</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;^!</i>,\ne.g. <i>HEAD^!</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>A suffix <i>^</i> followed\nby an exclamation mark is the same as giving commit\n<i>&lt;rev&gt;</i> and then all its parents prefixed with\n<i>^</i> to exclude them (and their ancestors).</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><i>&lt;rev&gt;^-&lt;n&gt;</i>,\ne.g. <i>HEAD^-, HEAD^-2</i></big></p>\n\n<p style=\"margin-left:17%;\"><big>Equivalent to\n<i>&lt;rev&gt;^&lt;n&gt;..&lt;rev&gt;</i>, with\n<i>&lt;n&gt;</i> = 1 if not given.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Here are a\nhandful of examples using the Loeliger illustration above,\nwith each step in the notation&rsquo;s expansion and\nselection carefully spelt out:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Args\nExpanded arguments Selected commits <br>\nD G H D <br>\nD F G H I J D F <br>\n^G D H D <br>\n^D B E I J F B <br>\n^D B C E I J F B C <br>\nC I J F C <br>\nB..C = ^B C C <br>\nB...C = B ^F C G H D E B C <br>\nB^- = B^..B <br>\n= ^B^1 B E I J F B <br>\nC^@ = C^1 <br>\n= F I J F <br>\nB^@ = B^1 B^2 B^3 <br>\n= D E F D G H E F I J <br>\nC^! = C ^C^@ <br>\n= C ^C^1 <br>\n= C ^F C <br>\nB^! = B ^B^@ <br>\n= B ^B^1 ^B^2 ^B^3 <br>\n= B ^D ^E ^F B <br>\nF^! D = F ^I ^J D G H D F</big></p>\n\n<h2>PARSEOPT\n<a name=\"PARSEOPT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>In\n<b>--parseopt</b> mode, <i>git rev-parse</i> helps massaging\noptions to bring to shell scripts the same facilities C\nbuiltins have. It works as an option normalizer (e.g. splits\nsingle switches aggregate values), a bit like\n<b>getopt(1)</b> does.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>It takes\non the standard input the specification of the options to\nparse and understand, and echoes on the standard output a\nstring suitable for <b>sh(1) eval</b> to replace the\narguments with normalized ones. In case of error, it outputs\nusage on the standard error stream, and exits with code\n129.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Note: Make\nsure you quote the result when passing it to <b>eval</b>.\nSee below for an example.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Input\nFormat</b> <i><br>\ngit rev-parse --parseopt</i> input format is fully text\nbased. It has two parts, separated by a line that contains\nonly <b>--</b>. The lines before the separator (should be\none or more) are used for the usage. The lines after the\nseparator describe the options.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Each line\nof options has this format:</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&lt;opt-spec&gt;&lt;flags&gt;*&lt;arg-hint&gt;?\nSP+ help LF</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>&lt;opt-spec&gt;</b></big></p>\n\n<p style=\"margin-left:17%;\"><big>its format is the short\noption character, then the long option name separated by a\ncomma. Both parts are not required, though at least one is\nnecessary. May not contain any of the <b>&lt;flags&gt;</b>\ncharacters. <b>h,help</b>, <b>dry-run</b> and <b>f</b> are\nexamples of correct <b>&lt;opt-spec&gt;</b>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>&lt;flags&gt;</b></big></p>\n\n<p style=\"margin-left:17%;\"><big><b>&lt;flags&gt;</b> are\nof <b>*</b>, <b>=</b>, <b>?</b> or <b>!</b>.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull; Use\n<b>=</b> if the option takes an argument.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull; Use\n<b>?</b> to mean that the option takes an optional argument.\nYou probably want to use the <b>--stuck-long</b> mode to be\nable to unambiguously parse the optional argument.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull; Use\n<b>*</b> to mean that this option should not be listed in\nthe usage generated for the <b>-h</b> argument. It&rsquo;s\nshown for <b>--help-all</b> as documented in\n<a href=\"https://man.page/7/gitcli\">gitcli(7)</a>.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull; Use\n<b>!</b> to not make the corresponding negated long option\navailable.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>&lt;arg-hint&gt;</b></big></p>\n\n<p style=\"margin-left:17%;\"><big><b>&lt;arg-hint&gt;</b>,\nif specified, is used as a name of the argument in the help\noutput, for options that take arguments.\n<b>&lt;arg-hint&gt;</b> is terminated by the first\nwhitespace. It is customary to use a dash to separate words\nin a multi-word argument hint.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>The\nremainder of the line, after stripping the spaces, is used\nas the help associated to the option.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Blank\nlines are ignored, and lines that don&rsquo;t match this\nspecification are used as option group headers (start the\nline with a space to create such lines on\npurpose).</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Example</b></big></p>\n\n<p style=\"margin-left:17%;\"><big>OPTS_SPEC=&quot;\\ <br>\nsome-command [&lt;options&gt;] &lt;args&gt;...</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>some-command\ndoes foo and bar! <br>\n-- <br>\nh,help show the help</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>foo some\nnifty option --foo <br>\nbar= some cool option --bar with an argument <br>\nbaz=arg another cool option --baz with a named argument <br>\nqux?path qux may take a path argument but has meaning by\nitself</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>An option\ngroup Header <br>\nC? option C with an optional argument&quot;</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>eval\n&quot;$(echo &quot;$OPTS_SPEC&quot; | git rev-parse\n--parseopt -- &quot;$@&quot; || echo exit\n$?)&quot;</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Usage\ntext</b> <br>\nWhen <b>&quot;$@&quot;</b> is <b>-h</b> or <b>--help</b> in\nthe above example, the following usage text would be\nshown:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>usage:\nsome-command [&lt;options&gt;] &lt;args&gt;...</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>some-command\ndoes foo and bar!</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>-h, --help\nshow the help <br>\n--foo some nifty option --foo <br>\n--bar ... some cool option --bar with an argument <br>\n--baz &lt;arg&gt; another cool option --baz with a named\nargument <br>\n--qux[=&lt;path&gt;] qux may take a path argument but has\nmeaning by itself</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>An option\ngroup Header <br>\n-C[...] option C with an optional argument</big></p>\n\n<h2>SQ-QUOTE\n<a name=\"SQ-QUOTE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>In\n<b>--sq-quote</b> mode, <i>git rev-parse</i> echoes on the\nstandard output a single line suitable for <b>sh(1)\neval</b>. This line is made by normalizing the arguments\nfollowing <b>--sq-quote</b>. Nothing other than quoting the\narguments is done.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>If you\nwant command input to still be interpreted as usual by\n<i>git rev-parse</i> before the output is shell quoted, see\nthe <b>--sq</b> option.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Example</b></big></p>\n\n<p style=\"margin-left:17%;\"><big>$ cat\n&gt;your-git-script.sh &lt;&lt;\\EOF <br>\n#!/bin/sh <br>\nargs=$(git rev-parse --sq-quote &quot;$@&quot;) # quote\nuser-supplied arguments <br>\ncommand=&quot;git frotz -n24 $args&quot; # and use it inside\na handcrafted <br>\n# command line <br>\neval &quot;$command&quot; <br>\nEOF</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ sh\nyour-git-script.sh &quot;a b'c&quot;</big></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPrint the object name of the current commit:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nrev-parse --verify HEAD</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPrint the commit object name from the revision in the $REV\nshell variable:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nrev-parse --verify --end-of-options $REV^{commit}</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>This will\nerror out if $REV is empty or not a valid\nrevision.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nSimilar to above:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>$ git\nrev-parse --default master --verify --end-of-options\n$REV</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>but if\n$REV is empty, the commit object name from master will be\nprinted.</big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SPECIFYING REVISIONS\">SPECIFYING REVISIONS</a>","<a href=\"#SPECIFYING RANGES\">SPECIFYING RANGES</a>","<a href=\"#REVISION RANGE SUMMARY\">REVISION RANGE SUMMARY</a>","<a href=\"#PARSEOPT\">PARSEOPT</a>","<a href=\"#SQ-QUOTE\">SQ-QUOTE</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#GIT\">GIT</a>"]}