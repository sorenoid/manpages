{"name":"git-hash-object","description":"git-hash-object\n- Compute object ID and optionally creates a blob from a\nfile","body":"\n\n<h1 align=\"center\">GIT-HASH-OBJECT</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-hash-object\n- Compute object ID and optionally creates a blob from a\nfile</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nhash-object</i> [-t &lt;type&gt;] [-w]\n[--path=&lt;file&gt;|--no-filters] [--stdin [--literally]]\n[--] &lt;file&gt;... <i><br>\ngit hash-object</i> [-t &lt;type&gt;] [-w] --stdin-paths\n[--no-filters]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Computes the\nobject ID value for an object with specified type with the\ncontents of the named file (which can be outside of the work\ntree), and optionally writes the resulting object into the\nobject database. Reports its object ID to its standard\noutput. When &lt;type&gt; is not specified, it defaults to\n&quot;blob&quot;.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-t\n&lt;type&gt;</p>\n\n<p style=\"margin-left:17%;\">Specify the type (default:\n&quot;blob&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-w</p>\n\n<p style=\"margin-left:17%;\">Actually write the object into\nthe object database.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdin</p>\n\n<p style=\"margin-left:17%;\">Read the object from standard\ninput instead of from a file.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdin-paths</p>\n\n<p style=\"margin-left:17%;\">Read file names from the\nstandard input, one per line, instead of from the\ncommand-line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--path</p>\n\n<p style=\"margin-left:17%;\">Hash object as it were located\nat the given path. The location of file does not directly\ninfluence on the hash value, but path is used to determine\nwhat Git filters should be applied to the object before it\ncan be placed to the object database, and, as result of\napplying filters, the actual blob put into the object\ndatabase may differ from the given file. This option is\nmainly useful for hashing temporary files located outside of\nthe working directory or files read from stdin.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-filters</p>\n\n<p style=\"margin-left:17%;\">Hash the contents as is,\nignoring any input filter that would have been chosen by the\nattributes mechanism, including the end-of-line conversion.\nIf the file is read from standard input then this is always\nimplied, unless the <b>--path</b> option is given.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--literally</p>\n\n<p style=\"margin-left:17%;\">Allow <b>--stdin</b> to hash\nany garbage into a loose object which might not otherwise\npass standard object parsing or git-fsck checks. Useful for\nstress-testing Git itself or reproducing characteristics of\ncorrupt or bogus objects encountered in the wild.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#GIT\">GIT</a>"]}