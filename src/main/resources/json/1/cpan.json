{"name":"cpan","body":"\n\n<h1 align=\"center\">CPAN</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">cpan - easily\ninteract with CPAN from the command line</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"># with\narguments and no switches, installs specified modules <br>\ncpan module_name [ module_name ... ] <br>\n# with switches, installs modules with extra behavior <br>\ncpan [-cfFimtTw] module_name [ module_name ... ] <br>\n# use local::lib <br>\ncpan -I module_name [ module_name ... ] <br>\n# one time mirror override for faster mirrors <br>\ncpan -p ... <br>\n# with just the dot, install from the distribution in the\n<br>\n# current directory <br>\ncpan . <br>\n# without arguments, starts CPAN.pm shell <br>\ncpan <br>\n# without arguments, but some switches <br>\ncpan [-ahpruvACDLOPX]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This script\nprovides a command interface (not a shell) to\n<small>CPAN.</small> At the moment it uses\n<small>CPAN</small> .pm to do the work, but it is not a\none-shot command runner for <small>CPAN</small> .pm.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Options</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-a</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Creates a <small>CPAN</small> .pm autobundle with\nCPAN::Shell-&gt;autobundle.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">-A module [ module ... ]</p>\n\n<p style=\"margin-left:17%;\">Shows the primary maintainers\nfor the specified modules.</p>\n\n<p style=\"margin-left:11%;\">-c module</p>\n\n<p style=\"margin-left:17%;\">Runs a &rsquo;make clean&rsquo;\nin the specified module&rsquo;s directories.</p>\n\n<p style=\"margin-left:11%;\">-C module [ module ... ]</p>\n\n<p style=\"margin-left:17%;\">Show the <i>Changes</i> files\nfor the specified modules</p>\n\n<p style=\"margin-left:11%;\">-D module [ module ... ]</p>\n\n<p style=\"margin-left:17%;\">Show the module details. This\nprints one line for each out-of-date module (meaning,\nmodules locally installed but have newer versions on\n<small>CPAN</small> ). Each line has three columns: module\nname, local version, and <small>CPAN</small> version.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-f</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Force the specified action, when it normally would have\nfailed. Use this to install a module even if its tests fail.\nWhen you use this option, -i is not optional for installing\na module when you need to force it:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">% cpan -f -i\nModule::Foo</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">-F</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Turn off <small>CPAN</small>\n.pm&rsquo;s attempts to lock anything. You should be careful\nwith this since you might end up with multiple scripts\ntrying to muck in the same directory. This isn&rsquo;t so\nmuch of a concern if you&rsquo;re loading a special config\nwith &quot;-j&quot;, and that config sets up its own work\ndirectories.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">-g module [ module ... ]</p>\n\n<p style=\"margin-left:17%;\">Downloads to the current\ndirectory the latest distribution of the module.</p>\n\n<p style=\"margin-left:11%;\">-G module [ module ... ]</p>\n\n\n<p style=\"margin-left:17%;\"><small>UNIMPLEMENTED</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Download to the\ncurrent directory the latest distribution of the modules,\nunpack each distribution, and create a git repository for\neach distribution.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want\nthis feature, check out Yanick Champoux&rsquo;s\n&quot;Git::CPAN::Patch&quot; distribution.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-h</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Print a help message and exit. When you specify\n&quot;-h&quot;, it ignores all of the other options and\narguments.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">-i module [ module ... ]</p>\n\n<p style=\"margin-left:17%;\">Install the specified modules.\nWith no other switches, this switch is implied.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-I</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Load &quot;local::lib&quot; (think like &quot;-I&quot;\nfor loading lib paths). Too bad &quot;-l&quot; was already\ntaken.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">-j Config.pm</p>\n\n<p style=\"margin-left:17%;\">Load the file that has the\n<small>CPAN</small> configuration data. This should have the\nsame format as the standard <i>CPAN/Config.pm</i> file,\nwhich defines $CPAN::Config as an anonymous hash.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-J</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Dump the configuration in the same format that\n<small>CPAN</small> .pm uses. This is useful for checking\nthe configuration as well as using the dump as a starting\npoint for a new, custom configuration.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-l</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>List all installed modules with their versions</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">-L author [ author ... ]</p>\n\n<p style=\"margin-left:17%;\">List the modules by the\nspecified authors.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-m</p></td>\n<td width=\"3%\"></td>\n<td width=\"41%\">\n\n\n<p>Make the specified modules.</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">-M mirror1,mirror2,...</p>\n\n<p style=\"margin-left:17%;\">A comma-separated list of\nmirrors to use for just this run. The &quot;-P&quot; option\ncan find them for you automatically.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-n</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Do a dry run, but don&rsquo;t actually install anything.\n(unimplemented)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-O</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Show the out-of-date modules.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-p</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Ping the configured mirrors and print a report</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-P</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Find the best mirrors you could be using and use them\nfor the current session.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-r</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Recompiles dynamically loaded modules with\nCPAN::Shell-&gt;recompile.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-s</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Drop in the <small>CPAN</small> .pm shell. This command\ndoes this automatically if you don&rsquo;t specify any\narguments.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">-t module [ module ... ]</p>\n\n<p style=\"margin-left:17%;\">Run a &rsquo;make test&rsquo;\non the specified modules.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-T</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Do not test modules. Simply install them.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-u</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Upgrade all installed modules. Blindly doing this can\nreally break things, so keep a backup.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-v</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Print the script version and <small>CPAN</small> .pm\nversion then exit.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-V</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Print detailed information about the cpan client.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-w</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p><small>UNIMPLEMENTED</small></p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Turn on cpan\nwarnings. This checks various things, like directory\npermissions, and tells you about problems you might\nhave.</p>\n\n<p style=\"margin-left:11%;\">-x module [ module ... ]</p>\n\n<p style=\"margin-left:17%;\">Find close matches to the named\nmodules that you think you might have mistyped. This\nrequires the optional installation of Text::Levenshtein or\nText::Levenshtein::Damerau.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-X</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>Dump all the namespaces to standard output.</p></td>\n<td width=\"17%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Examples</b>\n<br>\n# print a help message <br>\ncpan -h <br>\n# print the version numbers <br>\ncpan -v <br>\n# create an autobundle <br>\ncpan -a <br>\n# recompile modules <br>\ncpan -r <br>\n# upgrade all installed modules <br>\ncpan -u <br>\n# install modules ( sole -i is optional ) <br>\ncpan -i Netscape::Booksmarks Business::ISBN <br>\n# force install modules ( must use -i ) <br>\ncpan -fi CGI::Minimal URI <br>\n# install modules but without testing them <br>\ncpan -Ti CGI::Minimal URI</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Environment\nvariables</b> <br>\nThere are several components in <small>CPAN</small> .pm that\nuse environment variables. The build tools,\nExtUtils::MakeMaker and Module::Build use some, while others\nmatter to the levels above them. Some of these are specified\nby the Perl Toolchain Gang:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Lancaster\nConcensus:\n&lt;https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Oslo Concensus:\n&lt;https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/oslo-consensus.md&gt;\n<small><br>\nNONINTERACTIVE_TESTING</small></p>\n\n<p style=\"margin-left:17%;\">Assume no one is paying\nattention and skips prompts for distributions that do that\ncorrectly. cpan(1) sets this to 1 unless it already has a\nvalue (even if that value is false).</p>\n\n\n<p style=\"margin-left:11%;\"><small>PERL_MM_USE_DEFAULT</small></p>\n\n<p style=\"margin-left:17%;\">Use the default answer for a\nprompted questions. cpan(1) sets this to 1 unless it already\nhas a value (even if that value is false).</p>\n\n<p style=\"margin-left:11%;\"><small>CPAN_OPTS</small></p>\n\n<p style=\"margin-left:17%;\">As with &quot;PERL5OPT&quot;, a\nstring of additional cpan(1) options to add to those you\nspecify on the command line.</p>\n\n\n<p style=\"margin-left:11%;\"><small>CPANSCRIPT_LOGLEVEL</small></p>\n\n<p style=\"margin-left:17%;\">The log level to use, with\neither the embedded, minimal logger or Log::Log4perl if it\nis installed. Possible values are the same as the\n&quot;Log::Log4perl&quot; levels: &quot;TRACE&quot;,\n&quot;DEBUG&quot;, &quot;INFO&quot;, &quot;WARN&quot;,\n&quot;ERROR&quot;, and &quot;FATAL&quot;. The default is\n&quot;INFO&quot;.</p>\n\n<p style=\"margin-left:11%;\"><small>GIT_COMMAND</small></p>\n\n<p style=\"margin-left:17%;\">The path to the &quot;git&quot;\nbinary to use for the Git features. The default is\n&quot;/usr/local/bin/git&quot;.</p>\n\n<h2>EXIT VALUES\n<a name=\"EXIT VALUES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The script\nexits with zero if it thinks that everything worked, or a\npositive number if it thinks that something failed. Note,\nhowever, that in some cases it has to divine a failure by\nthe output of things it does not control. For now, the exit\ncodes are vague:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">1 An unknown\nerror <br>\n2 The was an external problem <br>\n4 There was an internal problem with the script <br>\n8 A module failed to install</p>\n\n<h2>TO DO\n<a name=\"TO DO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">* one shot\nconfiguration values from the command line</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">* none\nnoted</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most behaviour,\nincluding environment variables and configuration, comes\ndirectly from <small>CPAN</small> .pm.</p>\n\n<h2>SOURCE AVAILABILITY\n<a name=\"SOURCE AVAILABILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This code is in\nGithub in the <small>CPAN</small> .pm repository:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">https://github.com/andk/cpanpm</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The source used\nto be tracked separately in another GitHub repo, but the\ncanonical source is now in the above repo.</p>\n\n<h2>CREDITS\n<a name=\"CREDITS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Japheth Cleaver\nadded the bits to allow a forced install (-f).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Jim Brandt\nsuggest and provided the initial implementation for the\nup-to-date and Changes features.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Adam Kennedy\npointed out that <b>exit()</b> causes problems on Windows\nwhere this script ends up with a .bat extension</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">brian d foy,\n&quot;&lt;bdfoy@cpan.org&gt;&quot;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2001-2015, brian d foy, All Rights Reserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You may\nredistribute this under the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXIT VALUES\">EXIT VALUES</a>","<a href=\"#TO DO\">TO DO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#SOURCE AVAILABILITY\">SOURCE AVAILABILITY</a>","<a href=\"#CREDITS\">CREDITS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"]}