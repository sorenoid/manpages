{"name":"fakeroot","description":"fakeroot - run a command in an environment faking root privileges for file manipulation","body":"\n\n<h1 align=\"center\">fakeroot</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fakeroot - run\na command in an environment faking root privileges for file\nmanipulation</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fakeroot\n[-l|--lib</b> <i>library]</i> <b>[--faked</b>\n<i>faked-binary</i><b>] [-i</b> <i>load-file</i><b>] [-s</b>\n<i>save-file</i><b>] [-u|--unknown-is-real ] [-b|--fd-base ]\n[-h|--help ] [-v|--version ] [--] [command]</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fakeroot</b>\nruns a command in an environment wherein it appears to have\nroot privileges for file manipulation. This is useful for\nallowing users to create archives (tar, ar, .deb etc.) with\nfiles in them with root permissions/ownership. Without\n<b>fakeroot</b> one would need to have root privileges to\ncreate the constituent files of the archives with the\ncorrect permissions and ownership, and then pack them up, or\none would have to construct the archives directly, without\nusing the archiver.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fakeroot</b>\nworks by replacing the file manipulation library functions\n(chmod(2), stat(2) etc.) by ones that simulate the effect\nthe real library functions would have had, had the user\nreally been root. These wrapper functions are in a shared\nlibrary <b>/usr/lib/*/libfakeroot-*.so</b> or similar\nlocation on your platform. The shared object is loaded\nthrough the <b>LD_PRELOAD</b> mechanism of the dynamic\nloader. (See <b>ld.so</b>(8))</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you intend\nto build packages with <b>fakeroot</b>, please try building\nthe fakeroot package first: the &quot;debian/rules\nbuild&quot; stage has a few tests (testing mostly for bugs\nin old fakeroot versions). If those tests fail (for example\nbecause you have certain libc5 programs on your system),\nother packages you build with fakeroot will quite likely\nfail too, but possibly in much more subtle ways.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also, note that\nit&rsquo;s best not to do the building of the binaries\nthemselves under fakeroot. Especially configure and friends\ndon&rsquo;t like it when the system suddenly behaves\ndifferently from what they expect. (or, they randomly unset\nsome environment variables, some of which fakeroot\nneeds).</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>-l</b>\n<i>library</i>, <b>--lib</b> <i>library</i></p>\n\n<p style=\"margin-left:22%;\">Specify an alternative wrapper\nlibrary.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--faked&nbsp;</b><i>binary</i></p>\n\n<p style=\"margin-left:22%;\">Specify an alternative binary\nto use as faked.</p>\n\n\n<p style=\"margin-left:11%;\"><b>[--]&nbsp;</b><i>command</i></p>\n\n<p style=\"margin-left:22%;\">Any command you want to be ran\nas fakeroot. Use &rsquo;--&rsquo; if in the command you have\nother options that may confuse fakeroot&rsquo;s option\nparsing.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-s&nbsp;</b><i>save-file</i></p>\n\n<p style=\"margin-left:22%;\">Save the fakeroot environment\nto save-file on exit. This file can be used to restore the\nenvironment later using -i. However, this file will leak and\nfakeroot will behave in odd ways unless you leave the files\ntouched inside the fakeroot alone when outside the\nenvironment. Still, this can be useful. For example, it can\nbe used with rsync(1) to back up and restore whole directory\ntrees complete with user, group and device information\nwithout needing to be root. See\n<i>/usr/share/doc/fakeroot/README.saving</i> for more\ndetails.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-i&nbsp;</b><i>load-file</i></p>\n\n<p style=\"margin-left:22%;\">Load a fakeroot environment\npreviously saved using -s from load-file. Note that this\ndoes not implicitly save the file, use -s as well for that\nbehaviour. Using the same file for both -i and -s in a\nsingle <b>fakeroot</b> invocation is safe.</p>\n\n<p style=\"margin-left:11%;\"><b>-u</b>,\n<b>--unknown-is-real</b></p>\n\n<p style=\"margin-left:22%;\">Use the real ownership of files\npreviously unknown to fakeroot instead of pretending they\nare owned by root:root.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>-b&nbsp;</b><i>fd</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Specify fd base (TCP mode only). fd is the minimum file\ndescriptor number to use for TCP connections; this may be\nimportant to avoid conflicts with the file descriptors used\nby the programs being run under fakeroot.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>-h</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Display help.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>-v</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Display version.</p></td></tr>\n</table>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here is an\nexample session with <b>fakeroot</b>. Notice that inside the\nfake root environment file manipulation that requires root\nprivileges succeeds, but is not really happening.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$ whoami <br>\njoost <br>\n$ fakeroot /bin/bash <br>\n# whoami <br>\nroot <br>\n# mknod hda3 b 3 1 <br>\n# ls -ld hda3 <br>\nbrw-r--r-- 1 root root 3, 1 Jul 2 22:58 hda3 <br>\n# chown joost:root hda3 <br>\n# ls -ld hda3 <br>\nbrw-r--r-- 1 joost root 3, 1 Jul 2 22:58 hda3 <br>\n# ls -ld / <br>\ndrwxr-xr-x 20 root root 1024 Jun 17 21:50 / <br>\n# chown joost:users / <br>\n# chmod a+w / <br>\n# ls -ld / <br>\ndrwxrwxrwx 20 joost users 1024 Jun 17 21:50 / <br>\n# exit <br>\n$ ls -ld / <br>\ndrwxr-xr-x 20 root root 1024 Jun 17 21:50 // <br>\n$ ls -ld hda3 <br>\n-rw-r--r-- 1 joost users 0 Jul 2 22:58 hda3</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only the\neffects that user <b>joost</b> could do anyway happen for\nreal.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fakeroot</b>\nwas specifically written to enable users to create Debian\nGNU/Linux packages (in the <b>deb(5)</b> format) without\ngiving them root privileges. This can be done by commands\nlike <b>dpkg-buildpackage -rfakeroot</b> or <b>debuild\n-rfakeroot</b> (actually, -rfakeroot is default in debuild\nnowadays, so you don&rsquo;t need that argument).</p>\n\n<h2>SECURITY ASPECTS\n<a name=\"SECURITY ASPECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fakeroot</b>\nis a regular, non-setuid program. It does not enhance a\nuser&rsquo;s privileges, or decrease the system&rsquo;s\nsecurity.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/usr/lib/*/libfakeroot-*.so</i>\nThe shared library containing the wrapper functions.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FAKEROOTKEY</b></p>\n\n<p style=\"margin-left:22%;\">The key used to communicate\nwith the fakeroot daemon. Any program started with the right\n<b>LD_PRELOAD</b> and a <b>FAKEROOTKEY</b> of a running\ndaemon will automatically connect to that daemon, and have\nthe same &quot;fake&quot; view of the file system&rsquo;s\npermissions/ownerships. (assuming the daemon and connecting\nprogram were started by the same user).</p>\n\n<p style=\"margin-left:11%;\"><b>LD_LIBRARY_PATH <br>\nLD_PRELOAD</b></p>\n\n<p style=\"margin-left:22%;\">Fakeroot is implemented by\nwrapping system calls. This is accomplished by setting\nLD_LIBRARY_PATH=/usr/lib/fakeroot and\nLD_PRELOAD=libfakeroot.so.0. That library is loaded before\nthe system&rsquo;s C library, and so most of the library\nfunctions are intercepted by it. If you need to set either\n<b>LD_LIBRARY_PATH</b> or <b>LD_PRELOAD</b> from within a\nfakeroot environment, it should be set relative to the given\npaths, as in\n<b>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/foo/bar/</b></p>\n\n<h2>LIMITATIONS\n<a name=\"LIMITATIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Library\nversions</b></p>\n\n<p style=\"margin-left:22%;\">Every command executed within\n<b>fakeroot</b> needs to be linked to the same version of\nthe C library as <b>fakeroot</b> itself.</p>\n\n<p style=\"margin-left:11%;\"><b>open()/create()</b></p>\n\n<p style=\"margin-left:22%;\">fakeroot doesn&rsquo;t wrap\nopen(), create(), etc. So, if user <b>joost</b> does\neither</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">touch foo <br>\nfakeroot <br>\nls -al foo</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">or the other\nway around,</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">fakeroot <br>\ntouch foo <br>\nls -al foo</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">fakeroot has no\nway of knowing that in the first case, the owner of foo\nreally should be <b>joost</b> while the second case it\nshould have been <b>root</b>. For the Debian packaging,\ndefaulting to giving all &quot;unknown&quot; files\nuid=gid=0, is always OK. The real way around this is to wrap\n<b>open()</b> and <b>create()</b>, but that creates other\nproblems, as demonstrated by the libtricks package. This\npackage wrapped many more functions, and tried to do a lot\nmore than <b>fakeroot .</b> It turned out that a minor\nupgrade of libc (from one where the <b>stat()</b> function\ndidn&rsquo;t use <b>open()</b> to one with a <b>stat()</b>\nfunction that did (in some cases) use <b>open()</b>), would\ncause unexplainable segfaults (that is, the libc6\n<b>stat()</b> called the wrapped <b>open()</b>, which would\nthen call the libc6 <b>stat()</b>, etc). Fixing them\nwasn&rsquo;t all that easy, but once fixed, it was just a\nmatter of time before another function started to use\nopen(), never mind trying to port it to a different\noperating system. Thus I decided to keep the number of\nfunctions wrapped by fakeroot as small as possible, to limit\nthe likelihood of &rsquo;collisions&rsquo;.</p>\n\n<p style=\"margin-left:11%;\"><b>GNU configure (and other\nsuch programs)</b></p>\n\n<p style=\"margin-left:22%;\">fakeroot, in effect, is\nchanging the way the system behaves. Programs that probe the\nsystem like GNU configure may get confused by this (or if\nthey don&rsquo;t, they may stress fakeroot so much that\nfakeroot itself becomes confused). So, it&rsquo;s advisable\nnot to run &quot;configure&quot; from within fakeroot. As\nconfigure should be called in the &quot;debian/rules\nbuild&quot; target, running &quot;dpkg-buildpackage\n-rfakeroot&quot; correctly takes care of this.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">It\ndoesn&rsquo;t wrap open(). This isn&rsquo;t bad by itself,\nbut if a program does open(&quot;file&quot;, O_WRONLY, 000),\nwrites to file &quot;file&quot;, closes it, and then again\ntries to open to read the file, then that open fails, as the\nmode of the file will be 000. The bug is that if root does\nthe same, open() will succeed, as the file permissions\naren&rsquo;t checked at all for root. I choose not to wrap\nopen(), as open() is used by many other functions in libc\n(also those that are already wrapped), thus creating loops\n(or possible future loops, when the implementation of\nvarious libc functions slightly change).</p>\n\n<h2>COPYING\n<a name=\"COPYING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fakeroot</b>\nis distributed under the GNU General Public License. (GPL\n2.0 or greater).</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">joost\nwitteveen</p>\n\n\n<p style=\"margin-left:22%;\">&lt;<i>joostje@debian.org</i>&gt;</p>\n\n<p style=\"margin-left:11%;\">Clint Adams</p>\n\n\n<p style=\"margin-left:22%;\">&lt;<i>clint@debian.org</i>&gt;</p>\n\n<p style=\"margin-left:11%;\">Timo Savola</p>\n\n<h2>MANUAL PAGE\n<a name=\"MANUAL PAGE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mostly by\nJ.H.M. Dassen &lt;jdassen@debian.org&gt; Rather a lot\nmods/additions by joost and Clint.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/faked\">faked(1)</a>\n<a href=\"https://man.page/1/dpkg-buildpackage\">dpkg-buildpackage(1)</a>, <a href=\"https://man.page/1/debuild\">debuild(1)</a>\n<b>/usr/share/doc/fakeroot/DEBUG</b></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SECURITY ASPECTS\">SECURITY ASPECTS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#LIMITATIONS\">LIMITATIONS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#COPYING\">COPYING</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#MANUAL PAGE\">MANUAL PAGE</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"]}