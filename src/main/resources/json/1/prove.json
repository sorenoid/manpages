{"name":"prove","description":"prove - Run tests through a TAP harness.","body":"\n\n<h1 align=\"center\">PROVE</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove - Run\ntests through a TAP harness.</p>\n\n<h2>USAGE\n<a name=\"USAGE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove [options]\n[files or directories]</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Boolean\noptions:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v, --verbose\nPrint all test lines. <br>\n-l, --lib Add 'lib' to the path for your tests (-Ilib). <br>\n-b, --blib Add 'blib/lib' and 'blib/arch' to the path for\n<br>\nyour tests <br>\n-s, --shuffle Run the tests in random order. <br>\n-c, --color Colored test output (default). <br>\n--nocolor Do not color test output. <br>\n--count Show the X/Y test count when not verbose <br>\n(default) <br>\n--nocount Disable the X/Y test count. <br>\n-D --dry Dry run. Show test that would have run. <br>\n-f, --failures Show failed tests. <br>\n-o, --comments Show comments. <br>\n--ignore-exit Ignore exit status from test scripts. <br>\n-m, --merge Merge test scripts' STDERR with their STDOUT.\n<br>\n-r, --recurse Recursively descend into directories. <br>\n--reverse Run the tests in reverse order. <br>\n-q, --quiet Suppress some test output while running tests.\n<br>\n-Q, --QUIET Only print summary results. <br>\n-p, --parse Show full list of TAP parse errors, if any. <br>\n--directives Only show results with TODO or SKIP directives.\n<br>\n--timer Print elapsed time after each test. <br>\n--trap Trap Ctrl-C and print summary on interrupt. <br>\n--normalize Normalize TAP output in verbose output <br>\n-T Enable tainting checks. <br>\n-t Enable tainting warnings. <br>\n-W Enable fatal warnings. <br>\n-w Enable warnings. <br>\n-h, --help Display this help <br>\n-?, Display this help <br>\n-V, --version Display the version <br>\n-H, --man Longer manpage for prove <br>\n--norc Don't process default .proverc</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Options that\ntake arguments:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-I Library\npaths to include. <br>\n-P Load plugin (searches App::Prove::Plugin::*.) <br>\n-M Load a module. <br>\n-e, --exec Interpreter to run the tests ('' for compiled\n<br>\ntests.) <br>\n--ext Set the extension for tests (default '.t') <br>\n--harness Define test harness to use. See TAP::Harness. <br>\n--formatter Result formatter to use. See FORMATTERS. <br>\n--source Load and/or configure a SourceHandler. See <br>\nSOURCE HANDLERS. <br>\n-a, --archive out.tgz Store the resulting TAP in an archive\nfile. <br>\n-j, --jobs N Run N test jobs in parallel (try 9.) <br>\n--state=opts Control prove's persistent state. <br>\n--statefile=file Use `file` instead of `.prove` for state\n<br>\n--rc=rcfile Process options from rcfile <br>\n--rules Rules for parallel vs sequential processing.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>.proverc</b>\n<br>\nIf <i>~/.proverc</i> or <i>./.proverc</i> exist they will be\nread and any options they contain processed before the\ncommand line options. Options in <i>.proverc</i> are\nspecified in the same way as command line options:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># .proverc <br>\n--state=hot,fast,save <br>\n-j9</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additional\noption files may be specified with the &quot;--rc&quot;\noption. Default option file processing is disabled by the\n&quot;--norc&quot; option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Under Windows\nand <small>VMS</small> the option file is named\n<i>_proverc</i> rather than <i>.proverc</i> and is sought\nonly in the current directory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Reading from\n&quot;STDIN&quot;</b> <br>\nIf you have a list of tests (or URLs, or anything else you\nwant to test) in a file, you can add them to your tests by\nusing a &rsquo;-&rsquo;:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove - &lt;\nmy_list_of_things_to_test.txt</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the\n&quot;README&quot; in the &quot;examples&quot; directory of\nthis distribution.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Default Test\nDirectory</b> <br>\nIf no files or directories are supplied, &quot;prove&quot;\nlooks for all files matching the pattern\n&quot;t/*.t&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Colored Test\nOutput</b> <br>\nColored test output using TAP::Formatter::Color is the\ndefault, but if output is not to a terminal, color is\ndisabled. You can override this by adding the\n&quot;--color&quot; switch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Color support\nrequires Term::ANSIColor and, on windows platforms, also\nWin32::Console::ANSI. If the necessary module(s) are not\ninstalled colored output will not be available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Exit\nCode</b> <br>\nIf the tests fail &quot;prove&quot; will exit with non-zero\nstatus.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Arguments to\nTests</b> <br>\nIt is possible to supply arguments to tests. To do so\nseparate them from prove&rsquo;s own arguments with the\narisdottle, &rsquo;::&rsquo;. For example</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove -v\nt/mytest.t :: --url http://example.com</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">would run\n<i>t/mytest.t</i> with the options &rsquo;--url\nhttp://example.com&rsquo;. When running multiple tests they\nwill each receive the same arguments.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&quot;--exec&quot;</b>\n<br>\nNormally you can just pass a list of Perl tests and the\nharness will know how to execute them. However, if your\ntests are not written in Perl or if you want all tests\ninvoked exactly the same way, use the &quot;-e&quot;, or\n&quot;--exec&quot; switch:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove --exec\n'/usr/bin/ruby -w' t/ <br>\nprove --exec '/usr/bin/perl -Tw -mstrict -Ilib' t/ <br>\nprove --exec '/path/to/my/customer/exec'</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&quot;--merge&quot;</b>\n<br>\nIf you need to make sure your diagnostics are displayed in\nthe correct order relative to test results you can use the\n&quot;--merge&quot; option to merge the test scripts&rsquo;\n<small>STDERR</small> into their <small>STDOUT.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This guarantees\nthat <small>STDOUT</small> (where the test results appear)\nand <small>STDERR</small> (where the diagnostics appear)\nwill stay in sync. The harness will display any diagnostics\nyour tests emit on <small>STDERR.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Caveat: this is\na bit of a kludge. In particular note that if anything that\nappears on <small>STDERR</small> looks like a test result\nthe test harness will get confused. Use this option only if\nyou understand the consequences and can live with the\nrisk.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&quot;--trap&quot;</b>\n<br>\nThe &quot;--trap&quot; option will attempt to trap\n<small>SIGINT</small> (Ctrl-C) during a test run and display\nthe test summary even if the run is interrupted</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&quot;--state&quot;</b>\n<br>\nYou can ask &quot;prove&quot; to remember the state of\nprevious test runs and select and/or order the tests to be\nrun based on that saved state.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;--state&quot; switch requires an argument which must\nbe a comma separated list of one or more of the following\noptions. <br>\n&quot;last&quot;</p>\n\n<p style=\"margin-left:17%;\">Run the same tests as the last\ntime the state was saved. This makes it possible, for\nexample, to recreate the ordering of a shuffled test.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Run all tests\nin random order <br>\n$ prove -b --state=save --shuffle <br>\n# Run them again in the same order <br>\n$ prove -b --state=last</p>\n\n<p style=\"margin-left:11%;\">&quot;failed&quot;</p>\n\n<p style=\"margin-left:17%;\">Run only the tests that failed\non the last run.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Run all tests\n<br>\n$ prove -b --state=save <br>\n# Run failures <br>\n$ prove -b --state=failed</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you also\nspecify the &quot;save&quot; option newly passing tests will\nbe excluded from subsequent runs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Repeat until\nno more failures <br>\n$ prove -b --state=failed,save</p>\n\n<p style=\"margin-left:11%;\">&quot;passed&quot;</p>\n\n<p style=\"margin-left:17%;\">Run only the passed tests from\nlast time. Useful to make sure that no new problems have\nbeen introduced.</p>\n\n<p style=\"margin-left:11%;\">&quot;all&quot;</p>\n\n<p style=\"margin-left:17%;\">Run all tests in normal order.\nMultple options may be specified, so to run all tests with\nthe failures from last time first:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ prove -b\n--state=failed,all,save</p>\n\n<p style=\"margin-left:11%;\">&quot;hot&quot;</p>\n\n<p style=\"margin-left:17%;\">Run the tests that most\nrecently failed first. The last failure time of each test is\nstored. The &quot;hot&quot; option causes tests to be run in\nmost-recent- failure order.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ prove -b\n--state=hot,save</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Tests that have\nnever failed will not be selected. To run all tests with the\nmost recently failed first use</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ prove -b\n--state=hot,all,save</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This\ncombination of options may also be specified thus</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ prove -b\n--state=adrian</p>\n\n<p style=\"margin-left:11%;\">&quot;todo&quot;</p>\n\n<p style=\"margin-left:17%;\">Run any tests with todos.</p>\n\n<p style=\"margin-left:11%;\">&quot;slow&quot;</p>\n\n<p style=\"margin-left:17%;\">Run the tests in slowest to\nfastest order. This is useful in conjunction with the\n&quot;-j&quot; parallel testing switch to ensure that your\nslowest tests start running first.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ prove -b\n--state=slow -j9</p>\n\n<p style=\"margin-left:11%;\">&quot;fast&quot;</p>\n\n<p style=\"margin-left:17%;\">Run test tests in fastest to\nslowest order.</p>\n\n<p style=\"margin-left:11%;\">&quot;new&quot;</p>\n\n<p style=\"margin-left:17%;\">Run the tests in newest to\noldest order based on the modification times of the test\nscripts.</p>\n\n<p style=\"margin-left:11%;\">&quot;old&quot;</p>\n\n<p style=\"margin-left:17%;\">Run the tests in oldest to\nnewest order.</p>\n\n<p style=\"margin-left:11%;\">&quot;fresh&quot;</p>\n\n<p style=\"margin-left:17%;\">Run those test scripts that\nhave been modified since the last test run.</p>\n\n<p style=\"margin-left:11%;\">&quot;save&quot;</p>\n\n<p style=\"margin-left:17%;\">Save the state on exit. The\nstate is stored in a file called <i>.prove</i>\n(<i>_prove</i> on Windows and <small>VMS</small> ) in the\ncurrent directory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;--state&quot; switch may be used more than once.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$ prove -b\n--state=hot --state=all,save</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--rules</b>\n<br>\nThe &quot;--rules&quot; option is used to control which\ntests are run sequentially and which are run in parallel, if\nthe &quot;--jobs&quot; option is specified. The option may\nbe specified multiple times, and the order matters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The most\npractical use is likely to specify that some tests are not\n&quot;parallel-ready&quot;. Since mentioning a file with\n--rules doesn&rsquo;t cause it to be selected to run as a\ntest, you can &quot;set and forget&quot; some rules\npreferences in your .proverc file. Then you&rsquo;ll be able\nto take maximum advantage of the performance benefits of\nparallel testing, while some exceptions are still run in\nparallel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>--rules\nexamples</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># All tests are\nallowed to run in parallel, except those starting with\n&quot;p&quot; <br>\n--rules='seq=t/p*.t' --rules='par=**' <br>\n# All tests must run in sequence except those starting with\n&quot;p&quot;, which should be run parallel <br>\n--rules='par=t/p*.t'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>--rules\nresolution</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>By default, all tests are eligible to be run in\nparallel. Specifying any of your own rules removes this\none.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>&quot;First match wins&quot;. The first rule that\nmatches a test will be the one that applies.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Any test which does not match a rule will be run in\nsequence at the end of the run.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The existence of a rule does not imply selecting a test.\nYou must still specify the tests to run.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Specifying a rule to allow tests to run in parallel does\nnot make them run in parallel. You still need specify the\nnumber of parallel &quot;jobs&quot; in your Harness\nobject.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>--rules\nGlob-style pattern matching</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We implement\nour own glob-style pattern matching for --rules. Here are\nthe supported patterns:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">** is any\nnumber of characters, including /, within a pathname <br>\n* is zero or more characters within a filename/directory\nname <br>\n? is exactly one character within a filename/directory name\n<br>\n{foo,bar,baz} is any of foo, bar or baz. <br>\n\\ is an escape character</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>More\nadvanced specifications for parallel vs sequence run\nrules</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you need\nmore advanced management of what runs in parallel vs in\nsequence, see the associated &rsquo;rules&rsquo;\ndocumentation in TAP::Harness and TAP::Parser::Scheduler. If\nwhat&rsquo;s possible directly through &quot;prove&quot; is\nnot sufficient, you can write your own harness to access\nthese features directly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>@INC</b>\n<br>\nprove introduces a separation between &quot;options passed\nto the perl which runs prove&quot; and &quot;options passed\nto the perl which runs tests&quot;; this distinction is by\ndesign. Thus the perl which is running a test starts with\nthe default @INC. Additional library directories can be\nadded via the &quot;PERL5LIB&quot; environment variable, via\n-Ifoo in &quot;PERL5OPT&quot; or via the &quot;-Ilib&quot;\noption to <i>prove</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Taint\nMode</b> <br>\nNormally when a Perl program is run in taint mode the\ncontents of the &quot;PERL5LIB&quot; environment variable do\nnot appear in @INC.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because\n&quot;PERL5LIB&quot; is often used during testing to add\nbuild directories to @INC prove passes the names of any\ndirectories found in &quot;PERL5LIB&quot; as -I switches.\nThe net effect of this is that &quot;PERL5LIB&quot; is\nhonoured even when prove is run in taint mode.</p>\n\n<h2>FORMATTERS\n<a name=\"FORMATTERS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can load a\ncustom TAP::Parser::Formatter:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove\n--formatter MyFormatter</p>\n\n<h2>SOURCE HANDLERS\n<a name=\"SOURCE HANDLERS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can load\ncustom TAP::Parser::SourceHandlers, to change the way the\nparser interprets particular <i>sources</i> of\n<small>TAP.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove --source\nMyHandler --source YetAnother t</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nprovide config to the source you can use:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove --source\nMyCustom \\ <br>\n--source Perl --perl-option 'foo=bar baz' --perl-option\navg=0.278 \\ <br>\n--source File --file-option extensions=.txt --file-option\nextensions=.tmp t <br>\n--source pgTAP --pgtap-option pset=format=html\n--pgtap-option pset=border=2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each\n&quot;--$source-option&quot; option must specify a key/value\npair separated by an &quot;=&quot;. If an option can take\nmultiple values, just specify it multiple times, as with the\n&quot;extensions=&quot; examples above. If the option should\nbe a hash reference, specify the value as a second pair\nseparated by a &quot;=&quot;, as in the &quot;pset=&quot;\nexamples above (escape &quot;=&quot; with a backslash).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\n&quot;--sources&quot; are combined into a hash, and passed\nto &quot;new&quot; in TAP::Harness&rsquo;s\n&quot;sources&quot; parameter.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\nTAP::Parser::IteratorFactory for more details on how\nconfiguration is passed to <i>SourceHandlers</i>.</p>\n\n<h2>PLUGINS\n<a name=\"PLUGINS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Plugins can be\nloaded using the &quot;-P<i>plugin</i>&quot; syntax, eg:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove\n-PMyPlugin</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This will\nsearch for a module named\n&quot;App::Prove::Plugin::MyPlugin&quot;, or failing that,\n&quot;MyPlugin&quot;. If the plugin can&rsquo;t be found,\n&quot;prove&quot; will complain &amp; exit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can pass\narguments to your plugin by appending\n&quot;=arg1,arg2,etc&quot; to the plugin name:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">prove\n-PMyPlugin=fou,du,fafa</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please check\nindividual plugin documentation for more details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Available\nPlugins</b> <br>\nFor an up-to-date list of plugins available, please check\n<small>CPAN:</small></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;http://search.cpan.org/search?query=App%3A%3AProve+Plugin&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Writing\nPlugins</b> <br>\nPlease see &quot; <small>PLUGINS&quot;</small> in\nApp::Prove.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#USAGE\">USAGE</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#FORMATTERS\">FORMATTERS</a>","<a href=\"#SOURCE HANDLERS\">SOURCE HANDLERS</a>","<a href=\"#PLUGINS\">PLUGINS</a>"]}