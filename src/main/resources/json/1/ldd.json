{"name":"ldd","description":"ldd - print\nshared object dependencies","body":"\n\n<h1 align=\"center\">LDD</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ldd - print\nshared object dependencies</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ldd</b>\n[<i>option</i>]... <i>file</i>...</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ldd</b>\nprints the shared objects (shared libraries) required by\neach program or shared object specified on the command line.\nAn example of its use and output (using <a href=\"https://man.page/1/sed\">sed(1)</a> to\ntrim leading white space for readability in this page) is\nthe following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>ldd\n/bin/ls | sed 's/^ */ /'</b> <br>\nlinux-vdso.so.1 (0x00007ffcc3563000) <br>\nlibselinux.so.1 =&gt; /lib64/libselinux.so.1\n(0x00007f87e5459000) <br>\nlibcap.so.2 =&gt; /lib64/libcap.so.2 (0x00007f87e5254000)\n<br>\nlibc.so.6 =&gt; /lib64/libc.so.6 (0x00007f87e4e92000) <br>\nlibpcre.so.1 =&gt; /lib64/libpcre.so.1 (0x00007f87e4c22000)\n<br>\nlibdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f87e4a1e000) <br>\n/lib64/ld-linux-x86-64.so.2 (0x00005574bf12e000) <br>\nlibattr.so.1 =&gt; /lib64/libattr.so.1 (0x00007f87e4817000)\n<br>\nlibpthread.so.0 =&gt; /lib64/libpthread.so.0\n(0x00007f87e45fa000)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the usual\ncase, <b>ldd</b> invokes the standard dynamic linker (see\n<b>ld.so</b>(8)) with the <b>LD_TRACE_LOADED_OBJECTS</b>\nenvironment variable set to 1. This causes the dynamic\nlinker to inspect the program&rsquo;s dynamic dependencies,\nand find (according to the rules described in\n<b>ld.so</b>(8)) and load the objects that satisfy those\ndependencies. For each dependency, <b>ldd</b> displays the\nlocation of the matching object and the (hexadecimal)\naddress at which it is loaded. (The <i>linux-vdso</i> and\n<i>ld-linux</i> shared dependencies are special; see\n<a href=\"https://man.page/7/vdso\">vdso(7)</a> and <b>ld.so</b>(8).)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Security</b>\n<br>\nBe aware that in some circumstances (e.g., where the program\nspecifies an ELF interpreter other than <i>ld-linux.so</i>),\nsome versions of <b>ldd</b> may attempt to obtain the\ndependency information by attempting to directly execute the\nprogram, which may lead to the execution of whatever code is\ndefined in the program&rsquo;s ELF interpreter, and perhaps\nto execution of the program itself. (In glibc versions\nbefore 2.27, the upstream <b>ldd</b> implementation did this\nfor example, although most distributions provided a modified\nversion that did not.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thus, you\nshould <i>never</i> employ <b>ldd</b> on an untrusted\nexecutable, since this may result in the execution of\narbitrary code. A safer alternative when dealing with\nuntrusted executables is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>objdump -p\n/path/to/program | grep NEEDED</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note, however,\nthat this alternative shows only the direct dependencies of\nthe executable, while <b>ldd</b> shows the entire dependency\ntree of the executable.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--version</b></p>\n\n<p style=\"margin-left:22%;\">Print the version number of\n<b>ldd</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-v</b>, <b>--verbose</b></p>\n\n<p style=\"margin-left:22%;\">Print all information,\nincluding, for example, symbol versioning information.</p>\n\n<p style=\"margin-left:11%;\"><b>-u</b>, <b>--unused</b></p>\n\n<p style=\"margin-left:22%;\">Print unused direct\ndependencies. (Since glibc 2.3.4.)</p>\n\n<p style=\"margin-left:11%;\"><b>-d</b>,\n<b>--data-relocs</b></p>\n\n<p style=\"margin-left:22%;\">Perform relocations and report\nany missing objects (ELF only).</p>\n\n<p style=\"margin-left:11%;\"><b>-r</b>,\n<b>--function-relocs</b></p>\n\n<p style=\"margin-left:22%;\">Perform relocations for both\ndata objects and functions, and report any missing objects\nor functions (ELF only).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>--help</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"27%\">\n\n\n<p>Usage information.</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ldd</b> does\nnot work on a.out shared libraries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ldd</b> does\nnot work with some extremely old a.out programs which were\nbuilt before <b>ldd</b> support was added to the compiler\nreleases. If you use <b>ldd</b> on one of these programs,\nthe program will attempt to run with <i>argc</i> = 0 and the\nresults will be unpredictable.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/pldd\">pldd(1)</a>,\n<a href=\"https://man.page/1/sprof\">sprof(1)</a>, <b>ld.so</b>(8), <b>ldconfig</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"]}