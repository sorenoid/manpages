{"name":"bc","description":"bc - An arbitrary precision calculator language","body":"\n\n<h1 align=\"center\">bc</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">bc - An\narbitrary precision calculator language</p>\n\n<h2>SYNTAX\n<a name=\"SYNTAX\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bc</b> [\n<b>-hlwsqv</b> ] [long-options] [ <i>file ...</i> ]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bc</b> is a\nlanguage that supports arbitrary precision numbers with\ninteractive execution of statements. There are some\nsimilarities in the syntax to the C programming language. A\nstandard math library is available by command line option.\nIf requested, the math library is defined before processing\nany files. <b>bc</b> starts by processing code from all the\nfiles listed on the command line in the order listed. After\nall files have been processed, <b>bc</b> reads from the\nstandard input. All code is executed as it is read. (If a\nfile contains a command to halt the processor, <b>bc</b>\nwill never read from the standard input.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This version of\n<b>bc</b> contains several extensions beyond traditional\n<b>bc</b> implementations and the POSIX draft standard.\nCommand line options can cause these extensions to print a\nwarning or to be rejected. This document describes the\nlanguage accepted by this processor. Extensions will be\nidentified as such.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OPTIONS</b>\n<br>\n-h, --help</p>\n\n<p style=\"margin-left:22%;\">Print the usage and exit.</p>\n\n<p style=\"margin-left:11%;\">-i, --interactive</p>\n\n<p style=\"margin-left:22%;\">Force interactive mode.</p>\n\n<p style=\"margin-left:11%;\">-l, --mathlib</p>\n\n<p style=\"margin-left:22%;\">Define the standard math\nlibrary.</p>\n\n<p style=\"margin-left:11%;\">-w, --warn</p>\n\n<p style=\"margin-left:22%;\">Give warnings for extensions to\nPOSIX <b>bc</b>.</p>\n\n<p style=\"margin-left:11%;\">-s, --standard</p>\n\n<p style=\"margin-left:22%;\">Process exactly the POSIX\n<b>bc</b> language.</p>\n\n<p style=\"margin-left:11%;\">-q, --quiet</p>\n\n<p style=\"margin-left:22%;\">Do not print the normal GNU bc\nwelcome.</p>\n\n<p style=\"margin-left:11%;\">-v, --version</p>\n\n<p style=\"margin-left:22%;\">Print the version number and\ncopyright and quit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>NUMBERS</b>\n<br>\nThe most basic element in <b>bc</b> is the number. Numbers\nare arbitrary precision numbers. This precision is both in\nthe integer part and the fractional part. All numbers are\nrepresented internally in decimal and all computation is\ndone in decimal. (This version truncates results from divide\nand multiply operations.) There are two attributes of\nnumbers, the length and the scale. The length is the total\nnumber of decimal digits used by <b>bc</b> to represent a\nnumber and the scale is the total number of decimal digits\nafter the decimal point. For example:</p>\n\n<p style=\"margin-left:22%;\">.000001 has a length of 6 and\nscale of 6. <br>\n1935.000 has a length of 7 and a scale of 3.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>VARIABLES</b>\n<br>\nNumbers are stored in two types of variables, simple\nvariables and arrays. Both simple variables and array\nvariables are named. Names begin with a letter followed by\nany number of letters, digits and underscores. All letters\nmust be lower case. (Full alpha-numeric names are an\nextension. In POSIX <b>bc</b> all names are a single lower\ncase letter.) The type of variable is clear by the context\nbecause all array variable names will be followed by\nbrackets ([]).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are four\nspecial variables, <b>scale, ibase, obase,</b> and\n<b>last</b>. <b>scale</b> defines how some operations use\ndigits after the decimal point. The default value of\n<b>scale</b> is 0. <b>ibase</b> and <b>obase</b> define the\nconversion base for input and output numbers. The default\nfor both input and output is base 10. <b>last</b> (an\nextension) is a variable that has the value of the last\nprinted number. These will be discussed in further detail\nwhere appropriate. All of these variables may have values\nassigned to them as well as used in expressions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>COMMENTS</b>\n<br>\nComments in <b>bc</b> start with the characters <b>/*</b>\nand end with the characters <b>*/</b>. Comments may start\nanywhere and appear as a single space in the input. (This\ncauses comments to delimit other input items. For example, a\ncomment can not be found in the middle of a variable name.)\nComments include any newlines (end of line) between the\nstart and the end of the comment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To support the\nuse of scripts for <b>bc</b>, a single line comment has been\nadded as an extension. A single line comment starts at a\n<b>#</b> character and continues to the next end of the\nline. The end of line character is not part of the comment\nand is processed normally.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>EXPRESSIONS</b>\n<br>\nThe numbers are manipulated by expressions and statements.\nSince the language was designed to be interactive,\nstatements and expressions are executed as soon as possible.\nThere is no &quot;main&quot; program. Instead, code is\nexecuted as it is encountered. (Functions, discussed in\ndetail later, are defined when encountered.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A simple\nexpression is just a constant. <b>bc</b> converts constants\ninto internal decimal numbers using the current input base,\nspecified by the variable <b>ibase</b>. (There is an\nexception in functions.) The legal values of <b>ibase</b>\nare 2 through 36. (Bases greater than 16 are an extension.)\nAssigning a value outside this range to <b>ibase</b> will\nresult in a value of 2 or 36. Input numbers may contain the\ncharacters 0&ndash;9 and A&ndash;Z. (Note: They must be\ncapitals. Lower case letters are variable names.) Single\ndigit numbers always have the value of the digit regardless\nof the value of <b>ibase</b>. (i.e. A = 10.) For multi-digit\nnumbers, <b>bc</b> changes all input digits greater or equal\nto ibase to the value of <b>ibase</b>-1. This makes the\nnumber <b>ZZZ</b> always be the largest 3 digit number of\nthe input base.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Full\nexpressions are similar to many other high level languages.\nSince there is only one kind of number, there are no rules\nfor mixing types. Instead, there are rules on the scale of\nexpressions. Every expression has a scale. This is derived\nfrom the scale of original numbers, the operation performed\nand in many cases, the value of the variable <b>scale</b>.\nLegal values of the variable <b>scale</b> are 0 to the\nmaximum number representable by a C integer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing descriptions of legal expressions,\n&quot;expr&quot; refers to a complete expression and\n&quot;var&quot; refers to a simple or an array variable. A\nsimple variable is just a</p>\n\n<p style=\"margin-left:22%;\"><i>name</i></p>\n\n<p style=\"margin-left:11%;\">and an array variable is\nspecified as</p>\n\n<p style=\"margin-left:22%;\"><i>name</i>[<i>expr</i>]</p>\n\n<p style=\"margin-left:11%;\">Unless specifically mentioned\nthe scale of the result is the maximum scale of the\nexpressions involved.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>- expr</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The result is the negation of the expression.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>++ var</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The variable is incremented by one and the new value is\nthe result of the expression.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>-- var</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The variable is decremented by one and the new value is\nthe result of the expression.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>var ++</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The result of the expression is the value of the\nvariable and then the variable is incremented by one.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>var --</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The result of the expression is the value of the\nvariable and then the variable is decremented by one.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">expr + expr</p>\n\n<p style=\"margin-left:22%;\">The result of the expression is\nthe sum of the two expressions.</p>\n\n<p style=\"margin-left:11%;\">expr - expr</p>\n\n<p style=\"margin-left:22%;\">The result of the expression is\nthe difference of the two expressions.</p>\n\n<p style=\"margin-left:11%;\">expr * expr</p>\n\n<p style=\"margin-left:22%;\">The result of the expression is\nthe product of the two expressions.</p>\n\n<p style=\"margin-left:11%;\">expr / expr</p>\n\n<p style=\"margin-left:22%;\">The result of the expression is\nthe quotient of the two expressions. The scale of the result\nis the value of the variable <b>scale</b>.</p>\n\n<p style=\"margin-left:11%;\">expr % expr</p>\n\n<p style=\"margin-left:22%;\">The result of the expression is\nthe &quot;remainder&quot; and it is computed in the\nfollowing way. To compute a%b, first a/b is computed to\n<b>scale</b> digits. That result is used to compute\na-(a/b)*b to the scale of the maximum of\n<b>scale</b>+scale(b) and scale(a). If <b>scale</b> is set\nto zero and both expressions are integers this expression is\nthe integer remainder function.</p>\n\n<p style=\"margin-left:11%;\">expr ^ expr</p>\n\n<p style=\"margin-left:22%;\">The result of the expression is\nthe value of the first raised to the second. The second\nexpression must be an integer. (If the second expression is\nnot an integer, a warning is generated and the expression is\ntruncated to get an integer value.) The scale of the result\nis <b>scale</b> if the exponent is negative. If the exponent\nis positive the scale of the result is the minimum of the\nscale of the first expression times the value of the\nexponent and the maximum of <b>scale</b> and the scale of\nthe first expression. (e.g. scale(a^b) = min(scale(a)*b,\nmax( <b>scale,</b> scale(a))).) It should be noted that\nexpr^0 will always return the value of 1.</p>\n\n<p style=\"margin-left:11%;\">( expr )</p>\n\n<p style=\"margin-left:22%;\">This alters the standard\nprecedence to force the evaluation of the expression.</p>\n\n<p style=\"margin-left:11%;\">var = expr</p>\n\n<p style=\"margin-left:22%;\">The variable is assigned the\nvalue of the expression.</p>\n\n<p style=\"margin-left:11%;\">var &lt;op&gt;= expr</p>\n\n<p style=\"margin-left:22%;\">This is equivalent to &quot;var\n= var &lt;op&gt; expr&quot; with the exception that the\n&quot;var&quot; part is evaluated only once. This can make a\ndifference if &quot;var&quot; is an array.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Relational\nexpressions are a special kind of expression that always\nevaluate to 0 or 1, 0 if the relation is false and 1 if the\nrelation is true. These may appear in any legal expression.\n(POSIX bc requires that relational expressions are used only\nin if, while, and for statements and that only one\nrelational test may be done in them.) The relational\noperators are <br>\nexpr1 &lt; expr2</p>\n\n<p style=\"margin-left:22%;\">The result is 1 if expr1 is\nstrictly less than expr2.</p>\n\n<p style=\"margin-left:11%;\">expr1 &lt;= expr2</p>\n\n<p style=\"margin-left:22%;\">The result is 1 if expr1 is\nless than or equal to expr2.</p>\n\n<p style=\"margin-left:11%;\">expr1 &gt; expr2</p>\n\n<p style=\"margin-left:22%;\">The result is 1 if expr1 is\nstrictly greater than expr2.</p>\n\n<p style=\"margin-left:11%;\">expr1 &gt;= expr2</p>\n\n<p style=\"margin-left:22%;\">The result is 1 if expr1 is\ngreater than or equal to expr2.</p>\n\n<p style=\"margin-left:11%;\">expr1 == expr2</p>\n\n<p style=\"margin-left:22%;\">The result is 1 if expr1 is\nequal to expr2.</p>\n\n<p style=\"margin-left:11%;\">expr1 != expr2</p>\n\n<p style=\"margin-left:22%;\">The result is 1 if expr1 is not\nequal to expr2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Boolean\noperations are also legal. (POSIX <b>bc</b> does NOT have\nboolean operations). The result of all boolean operations\nare 0 and 1 (for false and true) as in relational\nexpressions. The boolean operators are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>!expr</p></td>\n<td width=\"4%\"></td>\n<td width=\"44%\">\n\n\n<p>The result is 1 if expr is 0.</p></td>\n<td width=\"34%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">expr &amp;&amp; expr</p>\n\n<p style=\"margin-left:22%;\">The result is 1 if both\nexpressions are non-zero.</p>\n\n<p style=\"margin-left:11%;\">expr || expr</p>\n\n<p style=\"margin-left:22%;\">The result is 1 if either\nexpression is non-zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The expression\nprecedence is as follows: (lowest to highest)</p>\n\n<p style=\"margin-left:22%;\">|| operator, left associative\n<br>\n&amp;&amp; operator, left associative <br>\n! operator, nonassociative <br>\nRelational operators, left associative <br>\nAssignment operator, right associative <br>\n+ and - operators, left associative <br>\n*, / and % operators, left associative <br>\n^ operator, right associative <br>\nunary - operator, nonassociative <br>\n++ and -- operators, nonassociative</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This precedence\nwas chosen so that POSIX compliant <b>bc</b> programs will\nrun correctly. This will cause the use of the relational and\nlogical operators to have some unusual behavior when used\nwith assignment expressions. Consider the expression:</p>\n\n<p style=\"margin-left:22%;\">a = 3 &lt; 5</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most C\nprogrammers would assume this would assign the result of\n&quot;3 &lt; 5&quot; (the value 1) to the variable\n&quot;a&quot;. What this does in <b>bc</b> is assign the\nvalue 3 to the variable &quot;a&quot; and then compare 3 to\n5. It is best to use parenthesis when using relational and\nlogical operators with the assignment operators.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are a few\nmore special expressions that are provided in <b>bc</b>.\nThese have to do with user defined functions and standard\nfunctions. They all appear as\n&quot;<i>name</i><b>(</b><i>parameters</i><b>)</b>&quot;.\nSee the section on functions for user defined functions. The\nstandard functions are: <br>\nlength ( expression )</p>\n\n<p style=\"margin-left:22%;\">The value of the length\nfunction is the number of significant digits in the\nexpression.</p>\n\n<p style=\"margin-left:11%;\">read ( )</p>\n\n<p style=\"margin-left:22%;\">The read function (an\nextension) will read a number from the standard input,\nregardless of where the function occurs. Beware, this can\ncause problems with the mixing of data and program in the\nstandard input. The best use for this function is in a\npreviously written program that needs input from the user,\nbut never allows program code to be input from the user. The\nvalue of the read function is the number read from the\nstandard input using the current value of the variable\n<b>ibase</b> for the conversion base.</p>\n\n<p style=\"margin-left:11%;\">scale ( expression )</p>\n\n<p style=\"margin-left:22%;\">The value of the scale function\nis the number of digits after the decimal point in the\nexpression.</p>\n\n<p style=\"margin-left:11%;\">sqrt ( expression )</p>\n\n<p style=\"margin-left:22%;\">The value of the sqrt function\nis the square root of the expression. If the expression is\nnegative, a run time error is generated.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>STATEMENTS</b>\n<br>\nStatements (as in most algebraic languages) provide the\nsequencing of expression evaluation. In <b>bc</b> statements\nare executed &quot;as soon as possible.&quot; Execution\nhappens when a newline in encountered and there is one or\nmore complete statements. Due to this immediate execution,\nnewlines are very important in <b>bc</b>. In fact, both a\nsemicolon and a newline are used as statement separators. An\nimproperly placed newline will cause a syntax error. Because\nnewlines are statement separators, it is possible to hide a\nnewline by using the backslash character. The sequence\n&quot;\\&lt;nl&gt;&quot;, where &lt;nl&gt; is the newline\nappears to <b>bc</b> as whitespace instead of a newline. A\nstatement list is a series of statements separated by\nsemicolons and newlines. The following is a list of\n<b>bc</b> statements and what they do: (Things enclosed in\nbrackets ([]) are optional parts of the statement.) <br>\nexpression</p>\n\n<p style=\"margin-left:22%;\">This statement does one of two\nthings. If the expression starts with &quot;&lt;variable&gt;\n&lt;assignment&gt; ...&quot;, it is considered to be an\nassignment statement. If the expression is not an assignment\nstatement, the expression is evaluated and printed to the\noutput. After the number is printed, a newline is printed.\nFor example, &quot;a=1&quot; is an assignment statement and\n&quot;(a=1)&quot; is an expression that has an embedded\nassignment. All numbers that are printed are printed in the\nbase specified by the variable <b>obase</b>. The legal\nvalues for <b>obase</b> are 2 through BC_BASE_MAX. (See the\nsection LIMITS.) For bases 2 through 16, the usual method of\nwriting numbers is used. For bases greater than 16,\n<b>bc</b> uses a multi-character digit method of printing\nthe numbers where each higher base digit is printed as a\nbase 10 number. The multi-character digits are separated by\nspaces. Each digit contains the number of characters\nrequired to represent the base ten value of\n&quot;obase-1&quot;. Since numbers are of arbitrary\nprecision, some numbers may not be printable on a single\noutput line. These long numbers will be split across lines\nusing the &quot;\\&quot; as the last character on a line. The\nmaximum number of characters printed per line is 70. Due to\nthe interactive nature of <b>bc</b>, printing a number\ncauses the side effect of assigning the printed value to the\nspecial variable <b>last</b>. This allows the user to\nrecover the last value printed without having to retype the\nexpression that printed the number. Assigning to <b>last</b>\nis legal and will overwrite the last printed value with the\nassigned value. The newly assigned value will remain until\nthe next number is printed or another value is assigned to\n<b>last</b>. (Some installations may allow the use of a\nsingle period (.) which is not part of a number as a short\nhand notation for for <b>last</b>.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>string</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The string is printed to the output. Strings start with\na double quote character and contain all characters until\nthe next double quote character. All characters are take\nliterally, including any newline. No newline character is\nprinted after the string.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>print</b> list</p>\n\n<p style=\"margin-left:22%;\">The print statement (an\nextension) provides another method of output. The\n&quot;list&quot; is a list of strings and expressions\nseparated by commas. Each string or expression is printed in\nthe order of the list. No terminating newline is printed.\nExpressions are evaluated and their value is printed and\nassigned to the variable <b>last</b>. Strings in the print\nstatement are printed to the output and may contain special\ncharacters. Special characters start with the backslash\ncharacter (\\). The special characters recognized by\n<b>bc</b> are &quot;a&quot; (alert or bell), &quot;b&quot;\n(backspace), &quot;f&quot; (form feed), &quot;n&quot;\n(newline), &quot;r&quot; (carriage return), &quot;q&quot;\n(double quote), &quot;t&quot; (tab), and &quot;\\&quot;\n(backslash). Any other character following the backslash\nwill be ignored.</p>\n\n<p style=\"margin-left:11%;\">{ statement_list }</p>\n\n<p style=\"margin-left:22%;\">This is the compound statement.\nIt allows multiple statements to be grouped together for\nexecution.</p>\n\n<p style=\"margin-left:11%;\"><b>if</b> ( expression )\nstatement1 [<b>else</b> statement2]</p>\n\n<p style=\"margin-left:22%;\">The if statement evaluates the\nexpression and executes statement1 or statement2 depending\non the value of the expression. If the expression is\nnon-zero, statement1 is executed. If statement2 is present\nand the value of the expression is 0, then statement2 is\nexecuted. (The else clause is an extension.)</p>\n\n<p style=\"margin-left:11%;\"><b>while</b> ( expression )\nstatement</p>\n\n<p style=\"margin-left:22%;\">The while statement will\nexecute the statement while the expression is non-zero. It\nevaluates the expression before each execution of the\nstatement. Termination of the loop is caused by a zero\nexpression value or the execution of a break statement.</p>\n\n<p style=\"margin-left:11%;\"><b>for</b> ( [expression1] ;\n[expression2] ; [expression3] ) statement</p>\n\n<p style=\"margin-left:22%;\">The for statement controls\nrepeated execution of the statement. Expression1 is\nevaluated before the loop. Expression2 is evaluated before\neach execution of the statement. If it is non-zero, the\nstatement is evaluated. If it is zero, the loop is\nterminated. After each execution of the statement,\nexpression3 is evaluated before the reevaluation of\nexpression2. If expression1 or expression3 are missing,\nnothing is evaluated at the point they would be evaluated.\nIf expression2 is missing, it is the same as substituting\nthe value 1 for expression2. (The optional expressions are\nan extension. POSIX <b>bc</b> requires all three\nexpressions.) The following is equivalent code for the for\nstatement: <br>\nexpression1; <br>\nwhile (expression2) { <br>\nstatement; <br>\nexpression3; <br>\n}</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>break</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This statement causes a forced exit of the most recent\nenclosing while statement or for statement.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>continue</b></p>\n\n<p style=\"margin-left:22%;\">The continue statement (an\nextension) causes the most recent enclosing for statement to\nstart the next iteration.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>halt</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The halt statement (an extension) is an executed\nstatement that causes the <b>bc</b> processor to quit only\nwhen it is executed. For example, &quot;if (0 == 1)\nhalt&quot; will not cause <b>bc</b> to terminate because the\nhalt is not executed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>return</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Return the value 0 from a function. (See the section on\nfunctions.)</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>return</b> ( expression\n)</p>\n\n<p style=\"margin-left:22%;\">Return the value of the\nexpression from a function. (See the section on functions.)\nAs an extension, the parenthesis are not required.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>PSEUDO\nSTATEMENTS</b> <br>\nThese statements are not statements in the traditional\nsense. They are not executed statements. Their function is\nperformed at &quot;compile&quot; time.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>limits</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Print the local limits enforced by the local version of\n<b>bc</b>. This is an extension.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>quit</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>When the quit statement is read, the <b>bc</b> processor\nis terminated, regardless of where the quit statement is\nfound. For example, &quot;if (0 == 1) quit&quot; will cause\n<b>bc</b> to terminate.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>warranty</b></p>\n\n<p style=\"margin-left:22%;\">Print a longer warranty notice.\nThis is an extension.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FUNCTIONS</b>\n<br>\nFunctions provide a method of defining a computation that\ncan be executed later. Functions in <b>bc</b> always compute\na value and return it to the caller. Function definitions\nare &quot;dynamic&quot; in the sense that a function is\nundefined until a definition is encountered in the input.\nThat definition is then used until another definition\nfunction for the same name is encountered. The new\ndefinition then replaces the older definition. A function is\ndefined as follows:</p>\n\n<p style=\"margin-left:22%;\"><b>define</b> <i>name</i>\n<b>(</b> <i>parameters</i> <b>) {</b> <i>newline <br>\nauto_list statement_list</i> <b>}</b></p>\n\n<p style=\"margin-left:11%;\">A function call is just an\nexpression of the form\n&quot;<i>name</i><b>(</b><i>parameters</i><b>)</b>&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parameters are\nnumbers or arrays (an extension). In the function\ndefinition, zero or more parameters are defined by listing\ntheir names separated by commas. All parameters are call by\nvalue parameters. Arrays are specified in the parameter\ndefinition by the notation &quot;<i>name</i><b>[]</b>&quot;.\nIn the function call, actual parameters are full expressions\nfor number parameters. The same notation is used for passing\narrays as for defining array parameters. The named array is\npassed by value to the function. Since function definitions\nare dynamic, parameter numbers and types are checked when a\nfunction is called. Any mismatch in number or types of\nparameters will cause a runtime error. A runtime error will\nalso occur for the call to an undefined function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>auto_list</i> is an optional list of variables that are\nfor &quot;local&quot; use. The syntax of the auto list (if\npresent) is &quot;<b>auto</b> <i>name</i>, ... ;&quot;. (The\nsemicolon is optional.) Each <i>name</i> is the name of an\nauto variable. Arrays may be specified by using the same\nnotation as used in parameters. These variables have their\nvalues pushed onto a stack at the start of the function. The\nvariables are then initialized to zero and used throughout\nthe execution of the function. At function exit, these\nvariables are popped so that the original value (at the time\nof the function call) of these variables are restored. The\nparameters are really auto variables that are initialized to\na value provided in the function call. Auto variables are\ndifferent than traditional local variables because if\nfunction A calls function B, B may access function A&rsquo;s\nauto variables by just using the same name, unless function\nB has called them auto variables. Due to the fact that auto\nvariables and parameters are pushed onto a stack, <b>bc</b>\nsupports recursive functions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\nbody is a list of <b>bc</b> statements. Again, statements\nare separated by semicolons or newlines. Return statements\ncause the termination of a function and the return of a\nvalue. There are two versions of the return statement. The\nfirst form, &quot;<b>return</b>&quot;, returns the value 0\nto the calling expression. The second form, &quot;<b>return\n(</b> <i>expression</i> <b>)</b>&quot;, computes the value\nof the expression and returns that value to the calling\nexpression. There is an implied &quot;<b>return\n(0)</b>&quot; at the end of every function. This allows a\nfunction to terminate and return 0 without an explicit\nreturn statement.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Functions also\nchange the usage of the variable <b>ibase</b>. All constants\nin the function body will be converted using the value of\n<b>ibase</b> at the time of the function call. Changes of\n<b>ibase</b> will be ignored during the execution of the\nfunction except for the standard function <b>read</b>, which\nwill always use the current value of <b>ibase</b> for\nconversion of numbers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Several\nextensions have been added to functions. First, the format\nof the definition has been slightly relaxed. The standard\nrequires the opening brace be on the same line as the\n<b>define</b> keyword and all other parts must be on\nfollowing lines. This version of <b>bc</b> will allow any\nnumber of newlines before and after the opening brace of the\nfunction. For example, the following definitions are\nlegal.</p>\n\n<p style=\"margin-left:22%;\">define d (n) { return (2*n); }\n<br>\ndefine d (n) <br>\n{ return (2*n); }</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Functions may\nbe defined as <b>void</b>. A void function returns no value\nand thus may not be used in any place that needs a value. A\nvoid function does not produce any output when called by\nitself on an input line. The key word <b>void</b> is placed\nbetween the key word <b>define</b> and the function name.\nFor example, consider the following session.</p>\n\n<p style=\"margin-left:22%;\">define py (y) { print\n&quot;---&gt;&quot;, y, &quot;&lt;---&quot;, &quot;\\n&quot;;\n} <br>\ndefine void px (x) { print &quot;---&gt;&quot;, x,\n&quot;&lt;---&quot;, &quot;\\n&quot;; } <br>\npy(1) <br>\n---&gt;1&lt;--- <br>\n0 <br>\npx(1) <br>\n---&gt;1&lt;---</p>\n\n<p style=\"margin-left:11%;\">Since <b>py</b> is not a void\nfunction, the call of <b>py(1)</b> prints the desired output\nand then prints a second line that is the value of the\nfunction. Since the value of a function that is not given an\nexplicit return statement is zero, the zero is printed. For\n<b>px(1)</b>, no zero is printed because the function is a\nvoid function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also, call by\nvariable for arrays was added. To declare a call by variable\narray, the declaration of the array parameter in the\nfunction definition looks like\n&quot;<i>*name</i><b>[]</b>&quot;. The call to the function\nremains the same as call by value arrays.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MATH\nLIBRARY</b> <br>\nIf <b>bc</b> is invoked with the <b>-l</b> option, a math\nlibrary is preloaded and the default scale is set to 20. The\nmath functions will calculate their results to the scale set\nat the time of their call. The math library defines the\nfollowing functions:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>s (<i>x</i>)</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The sine of x, x is in radians.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>c (<i>x</i>)</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The cosine of x, x is in radians.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>a (<i>x</i>)</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The arctangent of x, arctangent returns radians.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>l (<i>x</i>)</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The natural logarithm of x.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>e (<i>x</i>)</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The exponential function of raising e to the value\nx.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">j (<i>n,x</i>)</p>\n\n<p style=\"margin-left:22%;\">The Bessel function of integer\norder n of x.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>EXAMPLES</b>\n<br>\nIn /bin/sh, the following will assign the value of\n&quot;pi&quot; to the shell variable <b>pi</b>.</p>\n\n<p style=\"margin-left:22%;\">pi=$(echo &quot;scale=10;\n4*a(1)&quot; | bc -l)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nis the definition of the exponential function used in the\nmath library. This function is written in POSIX\n<b>bc</b>.</p>\n\n<p style=\"margin-left:22%;\">scale = 20</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">/* Uses the\nfact that e^x = (e^(x/2))^2 <br>\nWhen x is small enough, we use the series: <br>\ne^x = 1 + x + x^2/2! + x^3/3! + ... <br>\n*/</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">define e(x) {\n<br>\nauto a, d, e, f, i, m, v, z</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">/* Check the\nsign of x. */ <br>\nif (x&lt;0) { <br>\nm = 1 <br>\nx = -x <br>\n}</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">/* Precondition\nx. */ <br>\nz = scale; <br>\nscale = 4 + z + .44*x; <br>\nwhile (x &gt; 1) { <br>\nf += 1; <br>\nx /= 2; <br>\n}</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">/* Initialize\nthe variables. */ <br>\nv = 1+x <br>\na = x <br>\nd = 1</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">for (i=2; 1;\ni++) { <br>\ne = (a *= x) / (d *= i) <br>\nif (e == 0) { <br>\nif (f&gt;0) while (f--) v = v*v; <br>\nscale = z <br>\nif (m) return (1/v); <br>\nreturn (v/1); <br>\n} <br>\nv += e <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nis code that uses the extended features of <b>bc</b> to\nimplement a simple program for calculating checkbook\nbalances. This program is best kept in a file so that it can\nbe used many times without having to retype it at every\nuse.</p>\n\n<p style=\"margin-left:22%;\">scale=2 <br>\nprint &quot;\\nCheck book program!\\n&quot; <br>\nprint &quot; Remember, deposits are negative\ntransactions.\\n&quot; <br>\nprint &quot; Exit by a 0 transaction.\\n\\n&quot;</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">print\n&quot;Initial balance? &quot;; bal = read() <br>\nbal /= 1 <br>\nprint &quot;\\n&quot; <br>\nwhile (1) { <br>\n&quot;current balance = &quot;; bal <br>\n&quot;transaction? &quot;; trans = read() <br>\nif (trans == 0) break; <br>\nbal -= trans <br>\nbal /= 1 <br>\n} <br>\nquit</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nis the definition of the recursive factorial function.</p>\n\n<p style=\"margin-left:22%;\">define f (x) { <br>\nif (x &lt;= 1) return (1); <br>\nreturn (f(x-1) * x); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>READLINE AND\nLIBEDIT OPTIONS</b> <br>\nGNU <b>bc</b> can be compiled (via a configure option) to\nuse the GNU <b>readline</b> input editor library or the BSD\n<b>libedit</b> library. This allows the user to do editing\nof lines before sending them to <b>bc</b>. It also allows\nfor a history of previous lines typed. When this option is\nselected, <b>bc</b> has one more special variable. This\nspecial variable, <b>history</b> is the number of lines of\nhistory retained. For <b>readline</b>, a value of -1 means\nthat an unlimited number of history lines are retained.\nSetting the value of <b>history</b> to a positive number\nrestricts the number of history lines to the number given.\nThe value of 0 disables the history feature. The default\nvalue is 100. For more information, read the user manuals\nfor the GNU <b>readline</b>, <b>history</b> and BSD\n<b>libedit</b> libraries. One can not enable both\n<b>readline</b> and <b>libedit</b> at the same time.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>DIFFERENCES</b>\n<br>\nThis version of <b>bc</b> was implemented from the POSIX\nP1003.2/D11 draft and contains several differences and\nextensions relative to the draft and traditional\nimplementations. It is not implemented in the traditional\nway using <i>dc(1).</i> This version is a single process\nwhich parses and runs a byte code translation of the\nprogram. There is an &quot;undocumented&quot; option (-c)\nthat causes the program to output the byte code to the\nstandard output instead of running it. It was mainly used\nfor debugging the parser and preparing the math library.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A major source\nof differences is extensions, where a feature is extended to\nadd more functionality and additions, where new features are\nadded. The following is the list of differences and\nextensions. <br>\nLANG environment</p>\n\n<p style=\"margin-left:22%;\">This version does not conform\nto the POSIX standard in the processing of the LANG\nenvironment variable and all environment variables starting\nwith LC_.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>names</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Traditional and POSIX <b>bc</b> have single letter names\nfor functions, variables and arrays. They have been extended\nto be multi-character names that start with a letter and may\ncontain letters, numbers and the underscore character.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">Strings</p>\n\n<p style=\"margin-left:22%;\">Strings are not allowed to\ncontain NUL characters. POSIX says all characters must be\nincluded in strings.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p>last</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>POSIX <b>bc</b> does not have a <b>last</b> variable.\nSome implementations of <b>bc</b> use the period (.) in a\nsimilar way.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">comparisons</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> allows\ncomparisons only in the if statement, the while statement,\nand the second expression of the for statement. Also, only\none relational operation is allowed in each of those\nstatements.</p>\n\n<p style=\"margin-left:11%;\">if statement, else clause</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> does not have\nan else clause.</p>\n\n<p style=\"margin-left:11%;\">for statement</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> requires all\nexpressions to be present in the for statement.</p>\n\n<p style=\"margin-left:11%;\">&amp;&amp;, ||, !</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> does not have\nthe logical operators.</p>\n\n<p style=\"margin-left:11%;\">read function</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> does not have a\nread function.</p>\n\n<p style=\"margin-left:11%;\">print statement</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> does not have a\nprint statement.</p>\n\n<p style=\"margin-left:11%;\">continue statement</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> does not have a\ncontinue statement.</p>\n\n<p style=\"margin-left:11%;\">return statement</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> requires\nparentheses around the return expression.</p>\n\n<p style=\"margin-left:11%;\">array parameters</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> does not\n(currently) support array parameters in full. The POSIX\ngrammar allows for arrays in function definitions, but does\nnot provide a method to specify an array as an actual\nparameter. (This is most likely an oversight in the\ngrammar.) Traditional implementations of <b>bc</b> have only\ncall by value array parameters.</p>\n\n<p style=\"margin-left:11%;\">function format</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> requires the\nopening brace on the same line as the <b>define</b> key word\nand the <b>auto</b> statement on the next line.</p>\n\n<p style=\"margin-left:11%;\">=+, =-, =*, =/, =%, =^</p>\n\n<p style=\"margin-left:22%;\">POSIX <b>bc</b> does not\nrequire these &quot;old style&quot; assignment operators to\nbe defined. This version may allow these &quot;old\nstyle&quot; assignments. Use the limits statement to see if\nthe installed version supports them. If it does support the\n&quot;old style&quot; assignment operators, the statement\n&quot;a =- 1&quot; will decrement <b>a</b> by 1 instead of\nsetting <b>a</b> to the value -1.</p>\n\n<p style=\"margin-left:11%;\">spaces in numbers</p>\n\n<p style=\"margin-left:22%;\">Other implementations of\n<b>bc</b> allow spaces in numbers. For example, &quot;x=1\n3&quot; would assign the value 13 to the variable x. The\nsame statement would cause a syntax error in this version of\n<b>bc</b>.</p>\n\n<p style=\"margin-left:11%;\">errors and execution</p>\n\n<p style=\"margin-left:22%;\">This implementation varies from\nother implementations in terms of what code will be executed\nwhen syntax and other errors are found in the program. If a\nsyntax error is found in a function definition, error\nrecovery tries to find the beginning of a statement and\ncontinue to parse the function. Once a syntax error is found\nin the function, the function will not be callable and\nbecomes undefined. Syntax errors in the interactive\nexecution code will invalidate the current execution block.\nThe execution block is terminated by an end of line that\nappears after a complete sequence of statements. For\nexample, <br>\na = 1 <br>\nb = 2</p>\n\n<p style=\"margin-left:11%;\">has two execution blocks\nand</p>\n\n<p style=\"margin-left:22%;\">{ a = 1 <br>\nb = 2 }</p>\n\n<p style=\"margin-left:11%;\">has one execution block. Any\nruntime error will terminate the execution of the current\nexecution block. A runtime warning will not terminate the\ncurrent execution block. <br>\nInterrupts</p>\n\n<p style=\"margin-left:22%;\">During an interactive session,\nthe SIGINT signal (usually generated by the control-C\ncharacter from the terminal) will cause execution of the\ncurrent execution block to be interrupted. It will display a\n&quot;runtime&quot; error indicating which function was\ninterrupted. After all runtime structures have been cleaned\nup, a message will be printed to notify the user that\n<b>bc</b> is ready for more input. All previously defined\nfunctions remain defined and the value of all non-auto\nvariables are the value at the point of interruption. All\nauto variables and function parameters are removed during\nthe clean up process. During a non-interactive session, the\nSIGINT signal will terminate the entire run of\n<b>bc</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>LIMITS</b>\n<br>\nThe following are the limits currently in place for this\n<b>bc</b> processor. Some of them may have been changed by\nan installation. Use the limits statement to see the actual\nvalues. <br>\nBC_BASE_MAX</p>\n\n<p style=\"margin-left:22%;\">The maximum output base is\ncurrently set at 999. The maximum input base is 16.</p>\n\n<p style=\"margin-left:11%;\">BC_DIM_MAX</p>\n\n<p style=\"margin-left:22%;\">This is currently an arbitrary\nlimit of 65535 as distributed. Your installation may be\ndifferent.</p>\n\n<p style=\"margin-left:11%;\">BC_SCALE_MAX</p>\n\n<p style=\"margin-left:22%;\">The number of digits after the\ndecimal point is limited to INT_MAX digits. Also, the number\nof digits before the decimal point is limited to INT_MAX\ndigits.</p>\n\n<p style=\"margin-left:11%;\">BC_STRING_MAX</p>\n\n<p style=\"margin-left:22%;\">The limit on the number of\ncharacters in a string is INT_MAX characters.</p>\n\n<p style=\"margin-left:11%;\">exponent</p>\n\n<p style=\"margin-left:22%;\">The value of the exponent in\nthe raise operation (^) is limited to LONG_MAX.</p>\n\n<p style=\"margin-left:11%;\">variable names</p>\n\n<p style=\"margin-left:22%;\">The current limit on the number\nof unique names is 32767 for each of simple variables,\narrays and functions.</p>\n\n<h2>ENVIRONMENT VARIABLES\n<a name=\"ENVIRONMENT VARIABLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nenvironment variables are processed by <b>bc</b>: <br>\nPOSIXLY_CORRECT</p>\n\n<p style=\"margin-left:22%;\">This is the same as the\n<b>-s</b> option.</p>\n\n<p style=\"margin-left:11%;\">BC_ENV_ARGS</p>\n\n<p style=\"margin-left:22%;\">This is another mechanism to\nget arguments to <b>bc</b>. The format is the same as the\ncommand line arguments. These arguments are processed first,\nso any files listed in the environment arguments are\nprocessed before any command line argument files. This\nallows the user to set up &quot;standard&quot; options and\nfiles to be processed at every invocation of <b>bc</b>. The\nfiles in the environment variables would typically contain\nfunction definitions for functions the user wants defined\nevery time <b>bc</b> is run.</p>\n\n<p style=\"margin-left:11%;\">BC_LINE_LENGTH</p>\n\n<p style=\"margin-left:22%;\">This should be an integer\nspecifying the number of characters in an output line for\nnumbers. This includes the backslash and newline characters\nfor long numbers. As an extension, the value of zero\ndisables the multi-line feature. Any other value of this\nvariable that is less than 3 sets the line length to 70.</p>\n\n<h2>DIAGNOSTICS\n<a name=\"DIAGNOSTICS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If any file on\nthe command line can not be opened, <b>bc</b> will report\nthat the file is unavailable and terminate. Also, there are\ncompile and run time diagnostics that should be\nself-explanatory.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Error recovery\nis not very good yet.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Email bug\nreports to <b>bug-bc@gnu.org</b>. Be sure to include the\nword &rsquo;&rsquo;bc&rsquo;&rsquo; somewhere in the\n&rsquo;&rsquo;Subject:&rsquo;&rsquo; field.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Philip A.\nNelson <br>\nphilnelson@acm.org</p>\n\n<h2>ACKNOWLEDGEMENTS\n<a name=\"ACKNOWLEDGEMENTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The author\nwould like to thank Steve Sommars (Steve.Sommars@att.com)\nfor his extensive help in testing the implementation. Many\ngreat suggestions were given. This is a much better product\ndue to his involvement.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNTAX\">SYNTAX</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ENVIRONMENT VARIABLES\">ENVIRONMENT VARIABLES</a>","<a href=\"#DIAGNOSTICS\">DIAGNOSTICS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#ACKNOWLEDGEMENTS\">ACKNOWLEDGEMENTS</a>"]}