{"name":"git-sh-setup","body":"\n\n<h1 align=\"center\">GIT-SH-SETUP</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-sh-setup -\nCommon Git shell script setup code</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>.\n&quot;$(git --exec-path)/git-sh-setup&quot;</i></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is not a\ncommand the end user would want to run. Ever. This\ndocumentation is meant for people who are studying the\nPorcelain-ish scripts and/or are writing new ones.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>git\nsh-setup</i> scriptlet is designed to be sourced (using\n<b>.</b>) by other shell scripts to set up some variables\npointing at the normal Git directories and a few helper\nshell functions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before sourcing\nit, your script should set up a few variables; <b>USAGE</b>\n(and <b>LONG_USAGE</b>, if any) is used to define message\ngiven by <b>usage()</b> shell function.\n<b>SUBDIRECTORY_OK</b> can be set if the script can run from\na subdirectory of the working tree (some commands do\nnot).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The scriptlet\nsets <b>GIT_DIR</b> and <b>GIT_OBJECT_DIRECTORY</b> shell\nvariables, but does <b>not</b> export them to the\nenvironment.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">die</p>\n\n<p style=\"margin-left:17%;\">exit after emitting the\nsupplied error message to the standard error stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">usage</p>\n\n<p style=\"margin-left:17%;\">die with the usage message.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">set_reflog_action</p>\n\n<p style=\"margin-left:17%;\">Set <b>GIT_REFLOG_ACTION</b>\nenvironment to a given string (typically the name of the\nprogram) unless it is already set. Whenever the script runs\na <b>git</b> command that updates refs, a reflog entry is\ncreated using the value of this string to leave the record\nof what command updated the ref.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">git_editor</p>\n\n<p style=\"margin-left:17%;\">runs an editor of user&rsquo;s\nchoice (GIT_EDITOR, core.editor, VISUAL or EDITOR) on a\ngiven file, but error out if no editor is specified and the\nterminal is dumb.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">is_bare_repository</p>\n\n<p style=\"margin-left:17%;\">outputs <b>true</b> or\n<b>false</b> to the standard output stream to indicate if\nthe repository is a bare repository (i.e. without an\nassociated working tree).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">cd_to_toplevel</p>\n\n<p style=\"margin-left:17%;\">runs chdir to the toplevel of\nthe working tree.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">require_work_tree</p>\n\n<p style=\"margin-left:17%;\">checks if the current directory\nis within the working tree of the repository, and otherwise\ndies.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">require_work_tree_exists</p>\n\n<p style=\"margin-left:17%;\">checks if the working tree\nassociated with the repository exists, and otherwise dies.\nOften done before calling cd_to_toplevel, which is\nimpossible to do if there is no working tree.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">require_clean_work_tree\n&lt;action&gt; [&lt;hint&gt;]</p>\n\n<p style=\"margin-left:17%;\">checks that the working tree\nand index associated with the repository have no uncommitted\nchanges to tracked files. Otherwise it emits an error\nmessage of the form <b>Cannot &lt;action&gt;:\n&lt;reason&gt;. &lt;hint&gt;</b>, and dies. Example:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">require_clean_work_tree\nrebase &quot;Please commit or stash them.&quot;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">get_author_ident_from_commit</p>\n\n<p style=\"margin-left:17%;\">outputs code for use with eval\nto set the GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL and\nGIT_AUTHOR_DATE variables for a given commit.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">create_virtual_base</p>\n\n<p style=\"margin-left:17%;\">modifies the first file so only\nlines in common with the second file remain. If there is\ninsufficient common material, then the first file is left\nempty. The result is suitable as a virtual base input for a\n3-way merge.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#GIT\">GIT</a>"]}