{"name":"git-daemon","description":"git-daemon - A\nreally simple server for Git repositories","body":"\n\n<h1 align=\"center\">GIT-DAEMON</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-daemon - A\nreally simple server for Git repositories</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ndaemon</i> [--verbose] [--syslog] [--export-all] <br>\n[--timeout=&lt;n&gt;] [--init-timeout=&lt;n&gt;]\n[--max-connections=&lt;n&gt;] <br>\n[--strict-paths] [--base-path=&lt;path&gt;]\n[--base-path-relaxed] <br>\n[--user-path | --user-path=&lt;path&gt;] <br>\n[--interpolated-path=&lt;pathtemplate&gt;] <br>\n[--reuseaddr] [--detach] [--pid-file=&lt;file&gt;] <br>\n[--enable=&lt;service&gt;] [--disable=&lt;service&gt;] <br>\n[--allow-override=&lt;service&gt;]\n[--forbid-override=&lt;service&gt;] <br>\n[--access-hook=&lt;path&gt;] [--[no-]informative-errors]\n<br>\n[--inetd | <br>\n[--listen=&lt;host_or_ipaddr&gt;] [--port=&lt;n&gt;] <br>\n[--user=&lt;user&gt; [--group=&lt;group&gt;]]] <br>\n[--log-destination=(stderr|syslog|none)] <br>\n[&lt;directory&gt;...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A really simple\nTCP Git daemon that normally listens on port\n&quot;DEFAULT_GIT_PORT&quot; aka 9418. It waits for a\nconnection asking for a service, and will serve that service\nif it is enabled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It verifies\nthat the directory has the magic file\n&quot;git-daemon-export-ok&quot;, and it will refuse to\nexport any Git directory that hasn&rsquo;t explicitly been\nmarked for export this way (unless the <b>--export-all</b>\nparameter is specified). If you pass some directory paths as\n<i>git daemon</i> arguments, you can further restrict the\noffers to a whitelist comprising of those.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\nonly <b>upload-pack</b> service is enabled, which serves\n<i>git fetch-pack</i> and <i>git ls-remote</i> clients,\nwhich are invoked from <i>git fetch</i>, <i>git pull</i>,\nand <i>git clone</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is ideally\nsuited for read-only updates, i.e., pulling from Git\nrepositories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n<b>upload-archive</b> also exists to serve <i>git\narchive</i>.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--strict-paths</p>\n\n<p style=\"margin-left:17%;\">Match paths exactly (i.e.\ndon&rsquo;t allow &quot;/foo/repo&quot; when the real path\nis &quot;/foo/repo.git&quot; or &quot;/foo/repo/.git&quot;)\nand don&rsquo;t do user-relative paths. <i>git daemon</i>\nwill refuse to start when this option is enabled and no\nwhitelist is specified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--base-path=&lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">Remap all the path requests as\nrelative to the given path. This is sort of &quot;Git\nroot&quot; - if you run <i>git daemon</i> with\n<i>--base-path=/srv/git</i> on example.com, then if you\nlater try to pull <i>git://example.com/hello.git</i>, <i>git\ndaemon</i> will interpret the path as\n<b>/srv/git/hello.git</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--base-path-relaxed</p>\n\n<p style=\"margin-left:17%;\">If --base-path is enabled and\nrepo lookup fails, with this option <i>git daemon</i> will\nattempt to lookup without prefixing the base path. This is\nuseful for switching to --base-path usage, while still\nallowing the old paths.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--interpolated-path=&lt;pathtemplate&gt;</p>\n\n<p style=\"margin-left:17%;\">To support virtual hosting, an\ninterpolated path template can be used to dynamically\nconstruct alternate paths. The template supports %H for the\ntarget hostname as supplied by the client but converted to\nall lowercase, %CH for the canonical hostname, %IP for the\nserver&rsquo;s IP address, %P for the port number, and %D\nfor the absolute path of the named repository. After\ninterpolation, the path is validated against the directory\nwhitelist.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--export-all</p>\n\n<p style=\"margin-left:17%;\">Allow pulling from all\ndirectories that look like Git repositories (have the\n<i>objects</i> and <i>refs</i> subdirectories), even if they\ndo not have the <i>git-daemon-export-ok</i> file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--inetd</p>\n\n<p style=\"margin-left:17%;\">Have the server run as an inetd\nservice. Implies --syslog (may be overridden with\n<b>--log-destination=</b>). Incompatible with --detach,\n--port, --listen, --user and --group options.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--listen=&lt;host_or_ipaddr&gt;</p>\n\n<p style=\"margin-left:17%;\">Listen on a specific IP address\nor hostname. IP addresses can be either an IPv4 address or\nan IPv6 address if supported. If IPv6 is not supported, then\n--listen=hostname is also not supported and --listen must be\ngiven an IPv4 address. Can be given more than once.\nIncompatible with <b>--inetd</b> option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--port=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Listen on an alternative port.\nIncompatible with <b>--inetd</b> option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--init-timeout=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Timeout (in seconds) between\nthe moment the connection is established and the client\nrequest is received (typically a rather low value, since\nthat should be basically immediate).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--timeout=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Timeout (in seconds) for\nspecific client sub-requests. This includes the time it\ntakes for the server to process the sub-request and the time\nspent waiting for the next client&rsquo;s request.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--max-connections=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Maximum number of concurrent\nclients, defaults to 32. Set it to zero for no limit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--syslog</p>\n\n<p style=\"margin-left:17%;\">Short for\n<b>--log-destination=syslog</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--log-destination=&lt;destination&gt;</p>\n\n<p style=\"margin-left:17%;\">Send log messages to the\nspecified destination. Note that this option does not imply\n--verbose, thus by default only error conditions will be\nlogged. The &lt;destination&gt; must be one of:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">stderr</p>\n\n<p style=\"margin-left:23%;\">Write to standard error. Note\nthat if <b>--detach</b> is specified, the process\ndisconnects from the real standard error, making this\ndestination effectively equivalent to <b>none</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">syslog</p>\n\n<p style=\"margin-left:23%;\">Write to syslog, using the\n<b>git-daemon</b> identifier.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">none</p>\n\n<p style=\"margin-left:23%;\">Disable all logging.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\ndestination is <b>syslog</b> if <b>--inetd</b> or\n<b>--detach</b> is specified, otherwise <b>stderr</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--user-path,\n--user-path=&lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">Allow ~user notation to be used\nin requests. When specified with no parameter, requests to\ngit://host/~alice/foo is taken as a request to access\n<i>foo</i> repository in the home directory of user\n<b>alice</b>. If <b>--user-path=path</b> is specified, the\nsame request is taken as a request to access <b>path/foo</b>\nrepository in the home directory of user <b>alice</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--verbose</p>\n\n<p style=\"margin-left:17%;\">Log details about the incoming\nconnections and requested files.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reuseaddr</p>\n\n<p style=\"margin-left:17%;\">Use SO_REUSEADDR when binding\nthe listening socket. This allows the server to restart\nwithout waiting for old connections to time out.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--detach</p>\n\n<p style=\"margin-left:17%;\">Detach from the shell. Implies\n--syslog.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pid-file=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Save the process id in\n<i>file</i>. Ignored when the daemon is run under\n<b>--inetd</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--user=&lt;user&gt;,\n--group=&lt;group&gt;</p>\n\n<p style=\"margin-left:17%;\">Change daemon&rsquo;s uid and\ngid before entering the service loop. When only\n<b>--user</b> is given without <b>--group</b>, the primary\ngroup ID for the user is used. The values of the option are\ngiven to <b>getpwnam(3)</b> and <b>getgrnam(3)</b> and\nnumeric IDs are not supported.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Giving these\noptions is an error when used with <b>--inetd</b>; use the\nfacility of inet daemon to achieve the same before spawning\n<i>git daemon</i> if needed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Like many\nprograms that switch user id, the daemon does not reset\nenvironment variables such as <b>$HOME</b> when it runs git\nprograms, e.g. <b>upload-pack</b> and <b>receive-pack</b>.\nWhen using this option, you may also want to set and export\n<b>HOME</b> to point at the home directory of\n<b>&lt;user&gt;</b> before starting the daemon, and make\nsure any Git configuration files in that directory are\nreadable by <b>&lt;user&gt;</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--enable=&lt;service&gt;,\n--disable=&lt;service&gt;</p>\n\n<p style=\"margin-left:17%;\">Enable/disable the service\nsite-wide per default. Note that a service disabled\nsite-wide can still be enabled per repository if it is\nmarked overridable and the repository enables the service\nwith a configuration item.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--allow-override=&lt;service&gt;,\n--forbid-override=&lt;service&gt;</p>\n\n<p style=\"margin-left:17%;\">Allow/forbid overriding the\nsite-wide default with per repository configuration. By\ndefault, all the services may be overridden.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]informative-errors</p>\n\n<p style=\"margin-left:17%;\">When informative errors are\nturned on, git-daemon will report more verbose errors to the\nclient, differentiating conditions like &quot;no such\nrepository&quot; from &quot;repository not exported&quot;.\nThis is more convenient for clients, but may leak\ninformation about the existence of unexported repositories.\nWhen informative errors are not enabled, all errors report\n&quot;access denied&quot; to the client. The default is\n--no-informative-errors.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--access-hook=&lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">Every time a client connects,\nfirst run an external command specified by the &lt;path&gt;\nwith service name (e.g. &quot;upload-pack&quot;), path to\nthe repository, hostname (%H), canonical hostname (%CH), IP\naddress (%IP), and TCP port (%P) as its command-line\narguments. The external command can decide to decline the\nservice by exiting with a non-zero status (or to allow it by\nexiting with a zero status). It can also look at the\n$REMOTE_ADDR and <b>$REMOTE_PORT</b> environment variables\nto learn about the requestor when making this decision.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The external\ncommand can optionally write a single line to its standard\noutput to be sent to the requestor as an error message when\nit declines the service.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;directory&gt;</p>\n\n<p style=\"margin-left:17%;\">A directory to add to the\nwhitelist of allowed directories. Unless --strict-paths is\nspecified this will also include subdirectories of each\nnamed directory.</p>\n\n<h2>SERVICES\n<a name=\"SERVICES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These services\ncan be globally enabled/disabled using the command-line\noptions of this command. If finer-grained control is desired\n(e.g. to allow <i>git archive</i> to be run against only in\na few selected repositories the daemon serves), the\nper-repository configuration file can be used to enable or\ndisable them.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">upload-pack</p>\n\n<p style=\"margin-left:17%;\">This serves <i>git\nfetch-pack</i> and <i>git ls-remote</i> clients. It is\nenabled by default, but a repository can disable it by\nsetting <b>daemon.uploadpack</b> configuration item to\n<b>false</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">upload-archive</p>\n\n<p style=\"margin-left:17%;\">This serves <i>git archive\n--remote</i>. It is disabled by default, but a repository\ncan enable it by setting <b>daemon.uploadarch</b>\nconfiguration item to <b>true</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">receive-pack</p>\n\n<p style=\"margin-left:17%;\">This serves <i>git\nsend-pack</i> clients, allowing anonymous push. It is\ndisabled by default, as there is <i>no</i> authentication in\nthe protocol (in other words, anybody can push anything into\nthe repository, including removal of refs). This is solely\nmeant for a closed LAN setting where everybody is friendly.\nThis service can be enabled by setting\n<b>daemon.receivepack</b> configuration item to\n<b>true</b>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">We assume the\nfollowing in /etc/services</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ grep 9418\n/etc/services <br>\ngit 9418/tcp # Git Version Control System</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ndaemon</i> as inetd server</p>\n\n<p style=\"margin-left:17%;\">To set up <i>git daemon</i> as\nan inetd service that handles any repository under the\nwhitelisted set of directories, /pub/foo and /pub/bar, place\nan entry like the following into /etc/inetd all on one\nline:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">git stream tcp\nnowait nobody /usr/bin/git <br>\ngit daemon --inetd --verbose --export-all <br>\n/pub/foo /pub/bar</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ndaemon</i> as inetd server for virtual hosts</p>\n\n<p style=\"margin-left:17%;\">To set up <i>git daemon</i> as\nan inetd service that handles repositories for different\nvirtual hosts, <b>www.example.com</b> and\n<b>www.example.org</b>, place an entry like the following\ninto <b>/etc/inetd</b> all on one line:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">git stream tcp\nnowait nobody /usr/bin/git <br>\ngit daemon --inetd --verbose --export-all <br>\n--interpolated-path=/pub/%H%D <br>\n/pub/www.example.org/software <br>\n/pub/www.example.com/software <br>\n/software</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In this\nexample, the root-level directory <b>/pub</b> will contain a\nsubdirectory for each virtual host name supported. Further,\nboth hosts advertise repositories simply as\n<b>git://www.example.com/software/repo.git</b>. For\npre-1.4.0 clients, a symlink from <b>/software</b> into the\nappropriate default repository could be made as well.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ndaemon</i> as regular daemon for virtual hosts</p>\n\n<p style=\"margin-left:17%;\">To set up <i>git daemon</i> as\na regular, non-inetd service that handles repositories for\nmultiple virtual hosts based on their IP addresses, start\nthe daemon like this:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">git daemon\n--verbose --export-all <br>\n--interpolated-path=/pub/%IP/%D <br>\n/pub/192.168.1.200/software <br>\n/pub/10.10.220.23/software</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In this\nexample, the root-level directory <b>/pub</b> will contain a\nsubdirectory for each virtual host IP address supported.\nRepositories can still be accessed by hostname though,\nassuming they correspond to these IP addresses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">selectively\nenable/disable services per repository</p>\n\n<p style=\"margin-left:17%;\">To enable <i>git archive\n--remote</i> and disable <i>git fetch</i> against a\nrepository, have the following in the configuration file in\nthe repository (that is the file <i>config</i> next to\n<b>HEAD</b>, <i>refs</i> and <i>objects</i>).</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">[daemon] <br>\nuploadpack = false <br>\nuploadarch = true</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ndaemon</i> will set REMOTE_ADDR to the IP address of the\nclient that connected to it, if the IP address is available.\nREMOTE_ADDR will be available in the environment of hooks\ncalled when services are performed.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SERVICES\">SERVICES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#GIT\">GIT</a>"]}