{"name":"pnmtojpeg","body":"\n\n<h1 align=\"center\">PNMTOJPEG</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pnmtojpeg -\nconvert PNM image to a JFIF (&quot;JPEG&quot;) image</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pnmtojpeg</b>\n[ <i>options</i> ] [ <i>filename</i> ]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pnmtojpeg</b>\nconverts the named PBM, PGM, or PPM image file, or the\nstandard input if no file is named, to a JFIF file on the\nstandard output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pnmtojpeg</b>\nuses the Independent JPEG Group&rsquo;s JPEG library to\ncreate the output file. See <b>http://www.ijg.org</b> for\ninformation on the library.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;JFIF&quot;\nis the correct name for the image format commonly known as\n&quot;JPEG.&quot; Strictly speaking, JPEG is a method of\ncompression. The image format using JPEG compression that is\nby far the most common is JFIF. There is also a subformat of\nTIFF that uses JPEG compression.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EXIF is an\nimage format that is a subformat of JFIF (to wit, a JFIF\nfile that contains an EXIF header as an APP1 marker).\n<b>pnmtojpeg</b> creates an EXIF image when you specify the\n<b>-exif</b> option.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The basic\noptions are: <b><br>\n--exif=</b><i>filespec</i></p>\n\n<p style=\"margin-left:22%;\">This option specifies that the\noutput image is to be EXIF (a subformat of JFIF), i.e. it\nwill have an EXIF header as a JFIF APP1 marker. The contents\nof that marker are the contents of the specified file. The\nspecial value <b>-</b> means to read the EXIF header\ncontents from standard input. It is invalid to specify\nstandard input for both the EXIF header and the input\nimage.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The EXIF file\nstarts with a two byte field which is the length of the\nfile, including the length field, in pure binary, most\nsignificant byte first. The special value of zero for the\nlength field means there is to be no EXIF header, i.e. the\nsame as no <b>-exif</b> option. This is useful for when you\nconvert a file from JFIF to PNM using <b>jpegtopnm</b>, then\ntransform it, then convert it back to JFIF with\n<b>pnmtojpeg</b>, and you don&rsquo;t know whether or not it\nincludes an EXIF header. <b>jpegtopnm</b> creates an EXIF\nfile containing nothing but two bytes of zero when the input\nJFIF file has no EXIF header. Thus, you can transfer any\nEXIF header from the input JFIF to the output JFIF without\nworrying about whether an EXIF header actually exists.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The contents of\nthe EXIF file after the length field are the exact byte for\nbyte contents of the APP1 marker, not counting the length\nfield, that constitutes the EXIF header.</p>\n\n<p style=\"margin-left:11%;\"><b>--quality=</b><i>n</i></p>\n\n<p style=\"margin-left:22%;\">Scale quantization tables to\nadjust image quality. <i>n</i> is 0 (worst) to 100 (best);\ndefault is 75. (See below for more info.)</p>\n\n<p style=\"margin-left:11%;\"><b>--grayscale <br>\n--greyscale</b></p>\n\n<p style=\"margin-left:22%;\">Create gray scale JFIF file.\nWith this option, <b>pnmtojpeg</b> converts color input to\ngray scale. If you don&rsquo;t specify this option, The\noutput file is in color format if the input is PPM, and\ngrayscale format if the input is PBM or PGM.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In the PPM\ninput case, even if all the colors in the image are gray,\nthe output is in color format. Of course, the colors in it\nare still gray. The difference is that color format takes up\na lot more space and takes longer to create and process.</p>\n\n<p style=\"margin-left:11%;\"><b>--optimize</b></p>\n\n<p style=\"margin-left:22%;\">Perform optimization of entropy\nencoding parameters. Without this, <b>pnmtojpeg</b> uses\ndefault encoding parameters. <b>--optimize</b> usually makes\nthe JFIF file a little smaller, but <b>pnmtojpeg</b> runs\nsomewhat slower and needs much more memory. Image quality\nand speed of decompression are unaffected by\n<b>--optimize</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>--progressive</b></p>\n\n<p style=\"margin-left:22%;\">Create a progressive JPEG file\n(see below).</p>\n\n\n<p style=\"margin-left:11%;\"><b>--comment=</b><i>text</i></p>\n\n<p style=\"margin-left:22%;\">Include a comment marker in the\nJFIF output, with comment text <i>text</i>. Without this\noption, there are no comment markers in the output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>--quality</b> option lets you trade off compressed file\nsize against quality of the reconstructed image: the higher\nthe quality setting, the larger the JFIF file, and the\ncloser the output image will be to the original input.\nNormally you want to use the lowest quality setting\n(smallest file) that decompresses into something visually\nindistinguishable from the original image. For this purpose\nthe quality setting should be between 50 and 95; the default\nof 75 is often about right. If you see defects at\n<b>--quality=75</b>, then go up 5 or 10 counts at a time\nuntil you are happy with the output image. (The optimal\nsetting will vary from one image to another.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>--quality=100</b>\ngenerates a quantization table of all 1&rsquo;s, minimizing\nloss in the quantization step (but there is still\ninformation loss in subsampling, as well as roundoff error).\nThis setting is mainly of interest for experimental\npurposes. Quality values above about 95 are <i>not</i>\nrecommended for normal use; the compressed file size goes up\ndramatically for hardly any gain in output image\nquality.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the other\ndirection, quality values below 50 will produce very small\nfiles of low image quality. Settings around 5 to 10 might be\nuseful in preparing an index of a large image library, for\nexample. Try <b>--quality=2</b> (or so) for some amusing\nCubist effects. (Note: quality values below about 25\ngenerate 2-byte quantization tables, which are considered\noptional in the JFIF standard. <b>pnmtojpeg</b> emits a\nwarning message when you give such a quality value, because\nsome other JFIF programs may be unable to decode the\nresulting file. Use <b>--baseline</b> if you need to ensure\ncompatibility at low quality values.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>--progressive</b> option creates a &quot;progressive\nJPEG&quot; file. In this type of JFIF file, the data is\nstored in multiple scans of increasing quality. If the file\nis being transmitted over a slow communications link, the\ndecoder can use the first scan to display a low-quality\nimage very quickly, and can then improve the display with\neach subsequent scan. The final image is exactly equivalent\nto a standard JFIF file of the same quality setting, and the\ntotal file size is about the same -- often a little smaller.\n<b>Caution:</b> progressive JPEG is not yet widely\nimplemented, so many decoders will be unable to view a\nprogressive JPEG file at all.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Options for\nadvanced users: <b><br>\n--dct=int</b></p>\n\n<p style=\"margin-left:22%;\">Use integer DCT method\n(default).</p>\n\n<p style=\"margin-left:11%;\"><b>--dct=fast</b></p>\n\n<p style=\"margin-left:22%;\">Use fast integer DCT (less\naccurate).</p>\n\n<p style=\"margin-left:11%;\"><b>--dct=float</b></p>\n\n<p style=\"margin-left:22%;\">Use floating-point DCT method.\nThe float method is very slightly more accurate than the int\nmethod, but is much slower unless your machine has very fast\nfloating-point hardware. Also note that results of the\nfloating-point method may vary slightly across machines,\nwhile the integer methods should give the same results\neverywhere. The fast integer method is much less accurate\nthan the other two.</p>\n\n<p style=\"margin-left:11%;\"><b>--restart=</b><i>n</i></p>\n\n<p style=\"margin-left:22%;\">Emit a JPEG restart marker\nevery <i>n</i> MCU rows, or every <i>n</i> MCU blocks if you\nappend <b>B</b> to the number. <b>--restart 0</b> (the\ndefault) means no restart markers.</p>\n\n<p style=\"margin-left:11%;\"><b>--smooth=</b><i>n</i></p>\n\n<p style=\"margin-left:22%;\">Smooth the input image to\neliminate dithering noise. <i>n</i>, ranging from 1 to 100,\nindicates the strength of smoothing. 0 (the default) means\nno smoothing.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--maxmemory=</b><i>n</i></p>\n\n<p style=\"margin-left:22%;\">Set a limit for amount of\nmemory to use in processing large images. Value is in\nthousands of bytes, or millions of bytes if you append\n<b>M</b> to the number. For example, <b>--max=4m</b> selects\n4,000,000 bytes. If <b>pnmtojpeg</b> needs more space, it\nwill use temporary files.</p>\n\n<p style=\"margin-left:11%;\"><b>--verbose</b></p>\n\n<p style=\"margin-left:22%;\">Print to the Standard Error\nfile messages about the conversion process. This can be\nhelpful in debugging problems.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>--restart</b> option tells <b>pnmtojpeg</b> to insert\nextra markers that allow a JPEG decoder to resynchronize\nafter a transmission error. Without restart markers, any\ndamage to a compressed file will usually ruin the image from\nthe point of the error to the end of the image; with restart\nmarkers, the damage is usually confined to the portion of\nthe image up to the next restart marker. Of course, the\nrestart markers occupy extra space. We recommend\n<b>--restart=1</b> for images that will be transmitted\nacross unreliable networks such as Usenet.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>--smooth</b> option filters the input to eliminate\nfine-scale noise. This is often useful when converting\ndithered images to JFIF: a moderate smoothing factor of 10\nto 50 gets rid of dithering patterns in the input file,\nresulting in a smaller JFIF file and a better-looking image.\nToo large a smoothing factor will visibly blur the image,\nhowever.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Options for\nwizards: <b><br>\n--baseline</b></p>\n\n<p style=\"margin-left:22%;\">Force baseline-compatible\nquantization tables to be generated. This clamps\nquantization values to 8 bits even at low quality settings.\n(This switch is poorly named, since it does not ensure that\nthe output is actually baseline JPEG. For example, you can\nuse <b>--baseline</b> and <b>--progressive</b>\ntogether.)</p>\n\n\n<p style=\"margin-left:11%;\"><b>--qtables=</b><i>filespec</i></p>\n\n<p style=\"margin-left:22%;\">Use the quantization tables\ngiven in the specified text file.</p>\n\n<p style=\"margin-left:11%;\"><b>--qslots=n[,...]</b></p>\n\n<p style=\"margin-left:22%;\">Select which quantization table\nto use for each color component.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--sample=</b><i>HxV[,...]</i></p>\n\n<p style=\"margin-left:22%;\">Set JPEG sampling factors for\neach color component.</p>\n\n\n<p style=\"margin-left:11%;\"><b>--scans=</b><i>filespec</i></p>\n\n<p style=\"margin-left:22%;\">Use the scan script given in\nthe specified text file. See below for information on scan\nscripts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;wizard&quot; options are intended for experimentation\nwith JPEG. If you don&rsquo;t know what you are doing,\n<b>don&rsquo;t use them</b>. These switches are documented\nfurther in the file wizard.doc that comes with the\nIndependent JPEG Group&rsquo;s JPEG library.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\ncompresses the PPM file foo.ppm with a quality factor of 60\nand saves the output as foo.jpg:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>pnmtojpeg\n--quality=60 foo.ppm &gt; foo.jpg</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>cat foo.bmp\n| bmptoppm | pnmtojpeg &gt; foo.jpg</b></p>\n\n<h2>HINTS\n<a name=\"HINTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">JFIF is not\nideal for cartoons, line drawings, and other images that\nhave only a few distinct colors. For those, try instead\n<b>pnmtopng</b> or <b>ppmtobmp</b>. If you need to convert\nsuch an image to JFIF, though, you should experiment with\n<b>pnmtojpeg</b>&rsquo;s <b>--quality</b> and\n<b>--smooth</b> options to get a satisfactory conversion.\n<b>--smooth 10</b> or so is often helpful.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">JPEG\ncompression is notable for being a &quot;lossy.&quot; This\nmeans that, unlike with most graphics conversions, you lose\ninformation, which means image quality, when you convert to\nJFIF. If you convert from PPM to JFIF and back repeatedly,\nimage quality loss will accumulate. After ten or so cycles\nthe image may be noticeably worse than it was after one\ncycle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because of\nthis, you should do all the manipulation you have to do on\nthe image in some other format and convert to JFIF as the\nlast step. And if you can keep a copy in the original\nformat, so much the better. PNG is a good choice for a\nformat that is lossless, yet fairly compact. GIF is another\nway to go, but chances are you can&rsquo;t create a GIF\nimage without owing a lot of money to Unisys and IBM,\nholders of patents on the LZW compression used in the GIF\nformat.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>--optimize</b> option to <b>pnmtojpeg</b> is worth using\nwhen you are making a &quot;final&quot; version for posting\nor archiving. It&rsquo;s also a win when you are using low\nquality settings to make very small JFIF files; the\npercentage improvement is often a lot more than it is on\nlarger files. (At present, <b>--optimize</b> mode is\nautomatically in effect when you generate a progressive JPEG\nfile).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Another\nprogram, <b>cjpeg</b>, is similar. <b>cjpeg</b> is\nmaintained by the Independent JPEG Group and packaged with\nthe JPEG library which <b>pnmtojpeg</b> uses for all its\nJPEG work. Because of that, you may expect it to exploit\nmore current JPEG features. Also, since you have to have the\nlibrary to run <b>pnmtojpeg</b>, but not vice versa,\n<b>cjpeg</b> may be more commonly available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On the other\nhand, <b>cjpeg</b> does not use the NetPBM libraries to\nprocess its input, as all the NetPBM tools such as\n<b>pnmtojpeg</b> do. This means it is less likely to be\nconsistent with all the other programs that deal with the\nNetPBM formats. Also, the command syntax of <b>pnmtojpeg</b>\nis consistent with that of the other Netpbm tools, unlike\n<b>cjpeg</b>.</p>\n\n<h2>SCAN SCRIPTS\n<a name=\"SCAN SCRIPTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use the\n<b>-scan</b> option to specify a scan script. Or use the\n<b>-progressive</b> option to specify a particular built-in\nscan script.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Just what a\nscan script is, and the basic format of the scan script\nfile, is covered in the <b>wizard.doc</b> file that comes\nwith the Independent JPEG Group&rsquo;s JPEG library. Scan\nscripts are same for <b>pnmtojpeg</b> as the are for\n<b>cjpeg</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This section\ncontains additional information that isn&rsquo;t, but\nprobably should be, in that document.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, there\nare many restrictions on what is a valid scan script. The\nJPEG library, and thus <b>pnmtojpeg</b>, checks thoroughly\nfor any lack of compliance with these restrictions, but does\nlittle to tell you how the script fails to comply. The\nmessages are very general and sometimes untrue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To start with,\nthe entries for the DC coefficient must come before any\nentries for the AC coefficients. The DC coefficient is\nCoefficient 0; all the other coefficients are AC\ncoefficients. So in an entry for the DC coefficient, the two\nnumbers after the colon must be 0 and 0. In an entry for AC\ncoefficients, the first number after the colon must not be\n0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a DC entry,\nthe color components must be in increasing order. E.g.\n&quot;0,2,1&quot; before the colon is wrong. So is\n&quot;0,0,0&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In an entry for\nan AC coeffient, you must specify only one color component.\nI.e. there can be only one number before the colon.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the first\nentry for a particular coefficient for a particular color\ncomponent, the &quot;Ah&quot; value must be zero, but the Al\nvalue can be any valid bit number. In subsequent entries, Ah\nmust be the Al value from the previous entry (for that\ncoefficient for that color component), and the Al value must\nbe one less than the Ah value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The script must\nultimately specify at least some of the DC coefficent for\nevery color component. Otherwise, you get the error message\n&quot;Script does not transmit all the data.&quot; You need\nnot specify all of the bits of the DC coefficient, or any of\nthe AC coefficients.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is a\nstandard option in building the JPEG library to omit scan\nscript capability. If for some reason your library was built\nwith this option, you get the message &quot;Requested\nfeature was omitted at compile time.&quot;</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>JPEGMEM</b></p>\n\n<p style=\"margin-left:22%;\">If this environment variable is\nset, its value is the default memory limit. The value is\nspecified as described for the <b>--maxmemory</b> option. An\nexplicit <b>--maxmemory</b> option overrides any\n<b>JPEGMEM</b>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/cjpeg\">cjpeg(1)</a>,\n<a href=\"https://man.page/1/djpeg\">djpeg(1)</a>, <a href=\"https://man.page/1/jpegtran\">jpegtran(1)</a>, <a href=\"https://man.page/1/rdjpgcom\">rdjpgcom(1)</a>,\n<a href=\"https://man.page/1/wrjpgcom\">wrjpgcom(1)</a> <b><br>\nppm</b>(5), <a href=\"https://man.page/5/pgm\">pgm(5)</a>, <a href=\"https://man.page/1/jpegtopnm\">jpegtopnm(1)</a> <br>\nWallace, Gregory K. &quot;The JPEG Still Picture Compression\nStandard&quot;, Communications of the ACM, April 1991 (vol.\n34, no. 4), pp. 30-44.</p>\n\n<h2>LIMITATIONS\n<a name=\"LIMITATIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Arithmetic\ncoding is not supported for legal reasons.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\ncould be much faster.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pnmtojpeg</b>\nand this man page were derived in large part from\n<b>cjpeg</b>, by the Independent JPEG Group. The program is\notherwise by Bryan Henderson on March 07, 2000.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#HINTS\">HINTS</a>","<a href=\"#SCAN SCRIPTS\">SCAN SCRIPTS</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#LIMITATIONS\">LIMITATIONS</a>","<a href=\"#AUTHOR\">AUTHOR</a>"]}