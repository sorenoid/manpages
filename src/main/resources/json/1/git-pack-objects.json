{"name":"git-pack-objects","body":"\n\n<h1 align=\"center\">GIT-PACK-OBJECTS</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-pack-objects\n- Create a packed archive of objects</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\npack-objects</i> [-q | --progress | --all-progress]\n[--all-progress-implied] <br>\n[--no-reuse-delta] [--delta-base-offset] [--non-empty] <br>\n[--local] [--incremental] [--window=&lt;n&gt;]\n[--depth=&lt;n&gt;] <br>\n[--revs [--unpacked | --all]]\n[--keep-pack=&lt;pack-name&gt;] <br>\n[--stdout [--filter=&lt;filter-spec&gt;] | base-name] <br>\n[--shallow] [--keep-true-parents] [--[no-]sparse] &lt;\nobject-list</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Reads list of\nobjects from the standard input, and writes either one or\nmore packed archives with the specified base-name to disk,\nor a packed archive to the standard output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A packed\narchive is an efficient way to transfer a set of objects\nbetween two repositories as well as an access efficient\narchival format. In a packed archive, an object is either\nstored as a compressed whole or as a difference from some\nother object. The latter is often called a delta.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The packed\narchive format (.pack) is designed to be self-contained so\nthat it can be unpacked without any further information.\nTherefore, each object that a delta depends upon must be\npresent within the pack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A pack index\nfile (.idx) is generated for fast, random access to the\nobjects in the pack. Placing both the index file (.idx) and\nthe packed archive (.pack) in the pack/ subdirectory of\n$GIT_OBJECT_DIRECTORY (or any of the directories on\n$GIT_ALTERNATE_OBJECT_DIRECTORIES) enables Git to read from\nthe pack archive.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>git\nunpack-objects</i> command can read the packed archive and\nexpand the objects contained in the pack into &quot;one-file\none-object&quot; format; this is typically done by the\nsmart-pull commands when a pack is created on-the-fly for\nefficient network transport by their peers.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">base-name</p>\n\n<p style=\"margin-left:17%;\">Write into pairs of files\n(.pack and .idx), using &lt;base-name&gt; to determine the\nname of the created file. When this option is used, the two\nfiles in a pair are written in\n&lt;base-name&gt;-&lt;SHA-1&gt;.{pack,idx} files.\n&lt;SHA-1&gt; is a hash based on the pack content and is\nwritten to the standard output of the command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdout</p>\n\n<p style=\"margin-left:17%;\">Write the pack contents (what\nwould have been written to .pack file) out to the standard\noutput.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--revs</p>\n\n<p style=\"margin-left:17%;\">Read the revision arguments\nfrom the standard input, instead of individual object names.\nThe revision arguments are processed the same way as <i>git\nrev-list</i> with the <b>--objects</b> flag uses its\n<b>commit</b> arguments to build the list of objects it\noutputs. The objects on the resulting list are packed.\nBesides revisions, <b>--not</b> or <b>--shallow\n&lt;SHA-1&gt;</b> lines are also accepted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--unpacked</p>\n\n<p style=\"margin-left:17%;\">This implies <b>--revs</b>.\nWhen processing the list of revision arguments read from the\nstandard input, limit the objects packed to those that are\nnot already packed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all</p>\n\n<p style=\"margin-left:17%;\">This implies <b>--revs</b>. In\naddition to the list of revision arguments read from the\nstandard input, pretend as if all refs under <b>refs/</b>\nare specified to be included.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--include-tag</p>\n\n<p style=\"margin-left:17%;\">Include unasked-for annotated\ntags if the object they reference was included in the\nresulting packfile. This can be useful to send new tags to\nnative Git clients.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdin-packs</p>\n\n<p style=\"margin-left:17%;\">Read the basenames of packfiles\n(e.g., <b>pack-1234abcd.pack</b>) from the standard input,\ninstead of object names or revision arguments. The resulting\npack contains all objects listed in the included packs\n(those not beginning with <b>^</b>), excluding any objects\nlisted in the excluded packs (beginning with <b>^</b>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Incompatible\nwith <b>--revs</b>, or options that imply <b>--revs</b>\n(such as <b>--all</b>), with the exception of\n<b>--unpacked</b>, which is compatible.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--window=&lt;n&gt;,\n--depth=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">These two options affect how\nthe objects contained in the pack are stored using delta\ncompression. The objects are first internally sorted by\ntype, size and optionally names and compared against the\nother objects within --window to see if using delta\ncompression saves space. --depth limits the maximum delta\ndepth; making it too deep affects the performance on the\nunpacker side, because delta data needs to be applied that\nmany times to get to the necessary object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\nvalue for --window is 10 and --depth is 50. The maximum\ndepth is 4095.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--window-memory=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">This option provides an\nadditional limit on top of <b>--window</b>; the window size\nwill dynamically scale down so as to not take up more than\n<i>&lt;n&gt;</i> bytes in memory. This is useful in\nrepositories with a mix of large and small objects to not\nrun out of memory with a large window, but still be able to\ntake advantage of the large window for the smaller objects.\nThe size can be suffixed with &quot;k&quot;, &quot;m&quot;,\nor &quot;g&quot;. <b>--window-memory=0</b> makes memory\nusage unlimited. The default is taken from the\n<b>pack.windowMemory</b> configuration variable.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--max-pack-size=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">In unusual scenarios, you may\nnot be able to create files larger than a certain size on\nyour filesystem, and this option can be used to tell the\ncommand to split the output packfile into multiple\nindependent packfiles, each not larger than the given size.\nThe size can be suffixed with &quot;k&quot;, &quot;m&quot;,\nor &quot;g&quot;. The minimum size allowed is limited to 1\nMiB. The default is unlimited, unless the config variable\n<b>pack.packSizeLimit</b> is set. Note that this option may\nresult in a larger and slower repository; see the discussion\nin <b>pack.packSizeLimit</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--honor-pack-keep</p>\n\n<p style=\"margin-left:17%;\">This flag causes an object\nalready in a local pack that has a .keep file to be ignored,\neven if it would have otherwise been packed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--keep-pack=&lt;pack-name&gt;</p>\n\n<p style=\"margin-left:17%;\">This flag causes an object\nalready in the given pack to be ignored, even if it would\nhave otherwise been packed. <b>&lt;pack-name&gt;</b> is the\npack file name without leading directory (e.g.\n<b>pack-123.pack</b>). The option could be specified\nmultiple times to keep multiple packs.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--incremental</p>\n\n<p style=\"margin-left:17%;\">This flag causes an object\nalready in a pack to be ignored even if it would have\notherwise been packed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--local</p>\n\n<p style=\"margin-left:17%;\">This flag causes an object that\nis borrowed from an alternate object store to be ignored\neven if it would have otherwise been packed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--non-empty</p>\n\n<p style=\"margin-left:17%;\">Only create a packed archive if\nit would contain at least one object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--progress</p>\n\n<p style=\"margin-left:17%;\">Progress status is reported on\nthe standard error stream by default when it is attached to\na terminal, unless -q is specified. This flag forces\nprogress status even if the standard error stream is not\ndirected to a terminal.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all-progress</p>\n\n<p style=\"margin-left:17%;\">When --stdout is specified then\nprogress report is displayed during the object count and\ncompression phases but inhibited during the write-out phase.\nThe reason is that in some cases the output stream is\ndirectly linked to another command which may wish to display\nprogress status of its own as it processes incoming pack\ndata. This flag is like --progress except that it forces\nprogress report for the write-out phase as well even if\n--stdout is used.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all-progress-implied</p>\n\n<p style=\"margin-left:17%;\">This is used to imply\n--all-progress whenever progress display is activated.\nUnlike --all-progress this flag doesn&rsquo;t actually force\nany progress display by itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q</p>\n\n<p style=\"margin-left:17%;\">This flag makes the command not\nto report its progress on the standard error stream.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-reuse-delta</p>\n\n<p style=\"margin-left:17%;\">When creating a packed archive\nin a repository that has existing packs, the command reuses\nexisting deltas. This sometimes results in a slightly\nsuboptimal pack. This flag tells the command not to reuse\nexisting deltas but compute them from scratch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-reuse-object</p>\n\n<p style=\"margin-left:17%;\">This flag tells the command not\nto reuse existing object data at all, including non\ndeltified object, forcing recompression of everything. This\nimplies --no-reuse-delta. Useful only in the obscure case\nwhere wholesale enforcement of a different compression level\non the packed data is desired.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--compression=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies compression level for\nnewly-compressed data in the generated pack. If not\nspecified, pack compression level is determined first by\npack.compression, then by core.compression, and defaults to\n-1, the zlib default, if neither is set. Add\n--no-reuse-object if you want to force a uniform compression\nlevel on all data no matter the source.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]sparse</p>\n\n<p style=\"margin-left:17%;\">Toggle the &quot;sparse&quot;\nalgorithm to determine which objects to include in the pack,\nwhen combined with the &quot;--revs&quot; option. This\nalgorithm only walks trees that appear in paths that\nintroduce new objects. This can have significant performance\nbenefits when computing a pack to send a small change.\nHowever, it is possible that extra objects are added to the\npack-file if the included commits contain certain types of\ndirect renames. If this option is not included, it defaults\nto the value of <b>pack.useSparse</b>, which is true unless\notherwise specified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--thin</p>\n\n<p style=\"margin-left:17%;\">Create a &quot;thin&quot; pack\nby omitting the common objects between a sender and a\nreceiver in order to reduce network transfer. This option\nonly makes sense in conjunction with --stdout.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: A thin\npack violates the packed archive format by omitting required\nobjects and is thus unusable by Git without making it\nself-contained. Use <b>git index-pack --fix-thin</b> (see\n<a href=\"https://man.page/1/git-index-pack\">git-index-pack(1)</a>) to restore the self-contained\nproperty.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--shallow</p>\n\n<p style=\"margin-left:17%;\">Optimize a pack that will be\nprovided to a client with a shallow repository. This option,\ncombined with --thin, can result in a smaller pack at the\ncost of speed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--delta-base-offset</p>\n\n<p style=\"margin-left:17%;\">A packed archive can express\nthe base object of a delta as either a 20-byte object name\nor as an offset in the stream, but ancient versions of Git\ndon&rsquo;t understand the latter. By default, <i>git\npack-objects</i> only uses the former format for better\ncompatibility. This option allows the command to use the\nlatter format for compactness. Depending on the average\ndelta chain length, this option typically shrinks the\nresulting packfile by 3-5 per-cent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: Porcelain\ncommands such as <b>git gc</b> (see <a href=\"https://man.page/1/git-gc\">git-gc(1)</a>),\n<b>git repack</b> (see <a href=\"https://man.page/1/git-repack\">git-repack(1)</a>) pass this\noption by default in modern Git when they put objects in\nyour repository into pack files. So does <b>git bundle</b>\n(see <a href=\"https://man.page/1/git-bundle\">git-bundle(1)</a>) when it creates a bundle.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--threads=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies the number of threads\nto spawn when searching for best delta matches. This\nrequires that pack-objects be compiled with pthreads\notherwise this option is ignored with a warning. This is\nmeant to reduce packing time on multiprocessor machines. The\nrequired amount of memory for the delta search window is\nhowever multiplied by the number of threads. Specifying 0\nwill cause Git to auto-detect the number of CPU&rsquo;s and\nset the number of threads accordingly.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--index-version=&lt;version&gt;[,&lt;offset&gt;]</p>\n\n<p style=\"margin-left:17%;\">This is intended to be used by\nthe test suite only. It allows to force the version for the\ngenerated pack index, and to force 64-bit index entries on\nobjects located above the given offset.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--keep-true-parents</p>\n\n<p style=\"margin-left:17%;\">With this option, parents that\nare hidden by grafts are packed nevertheless.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--filter=&lt;filter-spec&gt;</p>\n\n<p style=\"margin-left:17%;\">Requires <b>--stdout</b>. Omits\ncertain objects (usually blobs) from the resulting packfile.\nSee <a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a> for valid\n<b>&lt;filter-spec&gt;</b> forms.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-filter</p>\n\n<p style=\"margin-left:17%;\">Turns off any previous\n<b>--filter=</b> argument.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--missing=&lt;missing-action&gt;</p>\n\n<p style=\"margin-left:17%;\">A debug option to help with\nfuture &quot;partial clone&quot; development. This option\nspecifies how missing objects are handled.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--missing=error</i> requests that pack-objects stop with\nan error if a missing object is encountered. If the\nrepository is a partial clone, an attempt to fetch missing\nobjects will be made before declaring them missing. This is\nthe default action.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--missing=allow-any</i> will allow object traversal to\ncontinue if a missing object is encountered. No fetch of a\nmissing object will occur. Missing objects will silently be\nomitted from the results.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--missing=allow-promisor</i> is like <i>allow-any</i>,\nbut will only allow object traversal to continue for\nEXPECTED promisor missing objects. No fetch of a missing\nobject will occur. An unexpected missing object will raise\nan error.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--exclude-promisor-objects</p>\n\n<p style=\"margin-left:17%;\">Omit objects that are known to\nbe in the promisor remote. (This option has the purpose of\noperating only on locally created objects, so that when we\nrepack, we still maintain a distinction between locally\ncreated objects [without .promisor] and objects from the\npromisor remote [with .promisor].) This is used with partial\nclone.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--keep-unreachable</p>\n\n<p style=\"margin-left:17%;\">Objects unreachable from the\nrefs in packs named with --unpacked= option are added to the\nresulting pack, in addition to the reachable objects that\nare not in packs marked with *.keep files. This implies\n<b>--revs</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pack-loose-unreachable</p>\n\n<p style=\"margin-left:17%;\">Pack unreachable loose objects\n(and their loose counterparts removed). This implies\n<b>--revs</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--unpack-unreachable</p>\n\n<p style=\"margin-left:17%;\">Keep unreachable objects in\nloose form. This implies <b>--revs</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--delta-islands</p>\n\n<p style=\"margin-left:17%;\">Restrict delta matches based on\n&quot;islands&quot;. See DELTA ISLANDS below.</p>\n\n<h2>DELTA ISLANDS\n<a name=\"DELTA ISLANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When possible,\n<b>pack-objects</b> tries to reuse existing on-disk deltas\nto avoid having to search for new ones on the fly. This is\nan important optimization for serving fetches, because it\nmeans the server can avoid inflating most objects at all and\njust send the bytes directly from disk. This optimization\ncan&rsquo;t work when an object is stored as a delta against\na base which the receiver does not have (and which we are\nnot already sending). In that case the server\n&quot;breaks&quot; the delta and has to find a new one,\nwhich has a high CPU cost. Therefore it&rsquo;s important\nfor performance that the set of objects in on-disk delta\nrelationships match what a client would fetch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a normal\nrepository, this tends to work automatically. The objects\nare mostly reachable from the branches and tags, and\nthat&rsquo;s what clients fetch. Any deltas we find on the\nserver are likely to be between objects the client has or\nwill have.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">But in some\nrepository setups, you may have several related but separate\ngroups of ref tips, with clients tending to fetch those\ngroups independently. For example, imagine that you are\nhosting several &quot;forks&quot; of a repository in a\nsingle shared object store, and letting clients view them as\nseparate repositories through <b>GIT_NAMESPACE</b> or\nseparate repos using the alternates mechanism. A naive\nrepack may find that the optimal delta for an object is\nagainst a base that is only found in another fork. But when\na client fetches, they will not have the base object, and\nwe&rsquo;ll have to find a new delta on the fly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A similar\nsituation may exist if you have many refs outside of\n<b>refs/heads/</b> and <b>refs/tags/</b> that point to\nrelated objects (e.g., <b>refs/pull</b> or\n<b>refs/changes</b> used by some hosting providers). By\ndefault, clients fetch only heads and tags, and deltas\nagainst objects found only in those other groups cannot be\nsent as-is.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Delta islands\nsolve this problem by allowing you to group your refs into\ndistinct &quot;islands&quot;. Pack-objects computes which\nobjects are reachable from which islands, and refuses to\nmake a delta from an object <b>A</b> against a base which is\nnot present in all of <b>A</b>'s islands. This results in\nslightly larger packs (because we miss some delta\nopportunities), but guarantees that a fetch of one island\nwill not have to recompute deltas on the fly due to crossing\nisland boundaries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When repacking\nwith delta islands the delta window tends to get clogged\nwith candidates that are forbidden by the config. Repacking\nwith a big --window helps (and doesn&rsquo;t take as long as\nit otherwise might because we can reject some object pairs\nbased on islands before doing any computation on the\ncontent).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Islands are\nconfigured via the <b>pack.island</b> option, which can be\nspecified multiple times. Each value is a left-anchored\nregular expressions matching refnames. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[pack] <br>\nisland = refs/heads/ <br>\nisland = refs/tags/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">puts heads and\ntags into an island (whose name is the empty string; see\nbelow for more on naming). Any refs which do not match those\nregular expressions (e.g., <b>refs/pull/123</b>) is not in\nany island. Any object which is reachable only from\n<b>refs/pull/</b> (but not heads or tags) is therefore not a\ncandidate to be used as a base for <b>refs/heads/</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Refs are\ngrouped into islands based on their &quot;names&quot;, and\ntwo regexes that produce the same name are considered to be\nin the same island. The names are computed from the regexes\nby concatenating any capture groups from the regex, with a\n<i>-</i> dash in between. (And if there are no capture\ngroups, then the name is the empty string, as in the above\nexample.) This allows you to create arbitrary numbers of\nislands. Only up to 14 such capture groups are supported\nthough.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nimagine you store the refs for each fork in\n<b>refs/virtual/ID</b>, where <b>ID</b> is a numeric\nidentifier. You might then configure:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[pack] <br>\nisland = refs/virtual/([0-9]+)/heads/ <br>\nisland = refs/virtual/([0-9]+)/tags/ <br>\nisland = refs/virtual/([0-9]+)/(pull)/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">That puts the\nheads and tags for each fork in their own island (named\n&quot;1234&quot; or similar), and the pull refs for each go\ninto their own &quot;1234-pull&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that we\npick a single island for each regex to go into, using\n&quot;last one wins&quot; ordering (which allows\nrepo-specific config to take precedence over user-wide\nconfig, and so forth).</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various\nconfiguration variables affect packing, see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a> (search for &quot;pack&quot; and\n&quot;delta&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Notably, delta\ncompression is not used on objects larger than the\n<b>core.bigFileThreshold</b> configuration variable and on\nfiles with the attribute <b>delta</b> set to false.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a>\n<a href=\"https://man.page/1/git-repack\">git-repack(1)</a> <a href=\"https://man.page/1/git-prune-packed\">git-prune-packed(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#DELTA ISLANDS\">DELTA ISLANDS</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}