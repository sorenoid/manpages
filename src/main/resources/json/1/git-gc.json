{"name":"git-gc","body":"\n\n<h1 align=\"center\">GIT-GC</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-gc -\nCleanup unnecessary files and optimize the local\nrepository</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git gc</i>\n[--aggressive] [--auto] [--quiet] [--prune=&lt;date&gt; |\n--no-prune] [--force] [--keep-largest-pack]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Runs a number\nof housekeeping tasks within the current repository, such as\ncompressing file revisions (to reduce disk space and\nincrease performance), removing unreachable objects which\nmay have been created from prior invocations of <i>git\nadd</i>, packing refs, pruning reflog, rerere metadata or\nstale working trees. May also update ancillary indexes such\nas the commit-graph.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When common\nporcelain operations that create objects are run, they will\ncheck whether the repository has grown substantially since\nthe last maintenance, and if so run <b>git gc</b>\nautomatically. See <b>gc.auto</b> below for how to disable\nthis behavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Running <b>git\ngc</b> manually should only be needed when adding objects to\na repository without regularly running such porcelain\ncommands, to do a one-off repository optimization, or e.g.\nto clean up a suboptimal mass-import. See the &quot;PACKFILE\nOPTIMIZATION&quot; section in <a href=\"https://man.page/1/git-fast-import\">git-fast-import(1)</a> for\nmore details on the import case.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--aggressive</p>\n\n<p style=\"margin-left:17%;\">Usually <i>git gc</i> runs very\nquickly while providing good disk space utilization and\nperformance. This option will cause <i>git gc</i> to more\naggressively optimize the repository at the expense of\ntaking much more time. The effects of this optimization are\nmostly persistent. See the &quot;AGGRESSIVE&quot; section\nbelow for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--auto</p>\n\n<p style=\"margin-left:17%;\">With this option, <i>git gc</i>\nchecks whether any housekeeping is required; if not, it\nexits without performing any work.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the\n<b>gc.auto</b> option in the &quot;CONFIGURATION&quot;\nsection below for how this heuristic works.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Once\nhousekeeping is triggered by exceeding the limits of\nconfiguration options such as <b>gc.auto</b> and\n<b>gc.autoPackLimit</b>, all other housekeeping tasks (e.g.\nrerere, working trees, reflog...) will be performed as\nwell.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--prune=&lt;date&gt;</p>\n\n<p style=\"margin-left:17%;\">Prune loose objects older than\ndate (default is 2 weeks ago, overridable by the config\nvariable <b>gc.pruneExpire</b>). --prune=now prunes loose\nobjects regardless of their age and increases the risk of\ncorruption if another process is writing to the repository\nconcurrently; see &quot;NOTES&quot; below. --prune is on by\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-prune</p>\n\n<p style=\"margin-left:17%;\">Do not prune any loose\nobjects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--quiet</p>\n\n<p style=\"margin-left:17%;\">Suppress all progress\nreports.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--force</p>\n\n<p style=\"margin-left:17%;\">Force <b>git gc</b> to run even\nif there may be another <b>git gc</b> instance running on\nthis repository.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--keep-largest-pack</p>\n\n<p style=\"margin-left:17%;\">All packs except the largest\npack and those marked with a <b>.keep</b> files are\nconsolidated into a single pack. When this option is used,\n<b>gc.bigPackThreshold</b> is ignored.</p>\n\n<h2>AGGRESSIVE\n<a name=\"AGGRESSIVE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n<b>--aggressive</b> option is supplied, <a href=\"https://man.page/1/git-repack\">git-repack(1)</a>\nwill be invoked with the <b>-f</b> flag, which in turn will\npass <b>--no-reuse-delta</b> to <a href=\"https://man.page/1/git-pack-objects\">git-pack-objects(1)</a>.\nThis will throw away any existing deltas and re-compute\nthem, at the expense of spending much more time on the\nrepacking.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The effects of\nthis are mostly persistent, e.g. when packs and loose\nobjects are coalesced into one another pack the existing\ndeltas in that pack might get re-used, but there are also\nvarious cases where we might pick a sub-optimal delta from a\nnewer pack instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Furthermore,\nsupplying <b>--aggressive</b> will tweak the <b>--depth</b>\nand <b>--window</b> options passed to <a href=\"https://man.page/1/git-repack\">git-repack(1)</a>.\nSee the <b>gc.aggressiveDepth</b> and\n<b>gc.aggressiveWindow</b> settings below. By using a larger\nwindow size we&rsquo;re more likely to find more optimal\ndeltas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It&rsquo;s\nprobably not worth it to use this option on a given\nrepository without running tailored performance benchmarks\non it. It takes a lot more time, and the resulting\nspace/delta optimization may or may not be worth it. Not\nusing this at all is the right trade-off for most users and\ntheir repositories.</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The below\ndocumentation is the same as what&rsquo;s found in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.aggressiveDepth</p>\n\n<p style=\"margin-left:17%;\">The depth parameter used in the\ndelta compression algorithm used by <i>git gc\n--aggressive</i>. This defaults to 50, which is the default\nfor the <b>--depth</b> option when <b>--aggressive</b>\nisn&rsquo;t in use.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the\ndocumentation for the <b>--depth</b> option in\n<a href=\"https://man.page/1/git-repack\">git-repack(1)</a> for more details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.aggressiveWindow</p>\n\n<p style=\"margin-left:17%;\">The window size parameter used\nin the delta compression algorithm used by <i>git gc\n--aggressive</i>. This defaults to 250, which is a much more\naggressive window size than the default <b>--window</b> of\n10.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the\ndocumentation for the <b>--window</b> option in\n<a href=\"https://man.page/1/git-repack\">git-repack(1)</a> for more details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.auto</p>\n\n<p style=\"margin-left:17%;\">When there are approximately\nmore than this many loose objects in the repository, <b>git\ngc --auto</b> will pack them. Some Porcelain commands use\nthis command to perform a light-weight garbage collection\nfrom time to time. The default value is 6700.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Setting this to\n0 disables not only automatic packing based on the number of\nloose objects, but any other heuristic <b>git gc --auto</b>\nwill otherwise use to determine if there&rsquo;s work to do,\nsuch as <b>gc.autoPackLimit</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.autoPackLimit</p>\n\n<p style=\"margin-left:17%;\">When there are more than this\nmany packs that are not marked with <b>*.keep</b> file in\nthe repository, <b>git gc --auto</b> consolidates them into\none larger pack. The default value is 50. Setting this to 0\ndisables it. Setting <b>gc.auto</b> to 0 will also disable\nthis.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the\n<b>gc.bigPackThreshold</b> configuration variable below.\nWhen in use, it&rsquo;ll affect how the auto pack limit\nworks.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.autoDetach</p>\n\n<p style=\"margin-left:17%;\">Make <b>git gc --auto</b>\nreturn immediately and run in background if the system\nsupports it. Default is true.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.bigPackThreshold</p>\n\n<p style=\"margin-left:17%;\">If non-zero, all packs larger\nthan this limit are kept when <b>git gc</b> is run. This is\nvery similar to <b>--keep-largest-pack</b> except that all\npacks that meet the threshold are kept, not just the largest\npack. Defaults to zero. Common unit suffixes of <i>k</i>,\n<i>m</i>, or <i>g</i> are supported.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that if\nthe number of kept packs is more than gc.autoPackLimit, this\nconfiguration variable is ignored, all packs except the base\npack will be repacked. After this the number of packs should\ngo below gc.autoPackLimit and gc.bigPackThreshold should be\nrespected again.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the amount\nof memory estimated for <b>git repack</b> to run smoothly is\nnot available and <b>gc.bigPackThreshold</b> is not set, the\nlargest pack will also be excluded (this is the equivalent\nof running <b>git gc</b> with\n<b>--keep-largest-pack</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.writeCommitGraph</p>\n\n<p style=\"margin-left:17%;\">If true, then gc will rewrite\nthe commit-graph file when <a href=\"https://man.page/1/git-gc\">git-gc(1)</a> is run. When\nusing <b>git gc --auto</b> the commit-graph will be updated\nif housekeeping is required. Default is true. See\n<a href=\"https://man.page/1/git-commit-graph\">git-commit-graph(1)</a> for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.logExpiry</p>\n\n<p style=\"margin-left:17%;\">If the file gc.log exists, then\n<b>git gc --auto</b> will print its content and exit with\nstatus zero instead of running unless that file is more than\n<i>gc.logExpiry</i> old. Default is &quot;1.day&quot;. See\n<b>gc.pruneExpire</b> for more ways to specify its\nvalue.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.packRefs</p>\n\n<p style=\"margin-left:17%;\">Running <b>git pack-refs</b> in\na repository renders it unclonable by Git versions prior to\n1.5.1.2 over dumb transports such as HTTP. This variable\ndetermines whether <i>git gc</i> runs <b>git pack-refs</b>.\nThis can be set to <b>notbare</b> to enable it within all\nnon-bare repos or it can be set to a boolean value. The\ndefault is <b>true</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.pruneExpire</p>\n\n<p style=\"margin-left:17%;\">When <i>git gc</i> is run, it\nwill call <i>prune --expire 2.weeks.ago</i>. Override the\ngrace period with this config variable. The value\n&quot;now&quot; may be used to disable this grace period and\nalways prune unreachable objects immediately, or\n&quot;never&quot; may be used to suppress pruning. This\nfeature helps prevent corruption when <i>git gc</i> runs\nconcurrently with another process writing to the repository;\nsee the &quot;NOTES&quot; section of <a href=\"https://man.page/1/git-gc\">git-gc(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.worktreePruneExpire</p>\n\n<p style=\"margin-left:17%;\">When <i>git gc</i> is run, it\ncalls <i>git worktree prune --expire 3.months.ago</i>. This\nconfig variable can be used to set a different grace period.\nThe value &quot;now&quot; may be used to disable the grace\nperiod and prune <b>$GIT_DIR/worktrees</b> immediately, or\n&quot;never&quot; may be used to suppress pruning.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.reflogExpire,\ngc.&lt;pattern&gt;.reflogExpire</p>\n\n<p style=\"margin-left:17%;\"><i>git reflog expire</i>\nremoves reflog entries older than this time; defaults to 90\ndays. The value &quot;now&quot; expires all entries\nimmediately, and &quot;never&quot; suppresses expiration\naltogether. With &quot;&lt;pattern&gt;&quot; (e.g.\n&quot;refs/stash&quot;) in the middle the setting applies\nonly to the refs that match the &lt;pattern&gt;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.reflogExpireUnreachable,\ngc.&lt;pattern&gt;.reflogExpireUnreachable</p>\n\n<p style=\"margin-left:17%;\"><i>git reflog expire</i>\nremoves reflog entries older than this time and are not\nreachable from the current tip; defaults to 30 days. The\nvalue &quot;now&quot; expires all entries immediately, and\n&quot;never&quot; suppresses expiration altogether. With\n&quot;&lt;pattern&gt;&quot; (e.g. &quot;refs/stash&quot;) in\nthe middle, the setting applies only to the refs that match\nthe &lt;pattern&gt;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These types of\nentries are generally created as a result of using <b>git\ncommit --amend</b> or <b>git rebase</b> and are the commits\nprior to the amend or rebase occurring. Since these changes\nare not part of the current project most users will want to\nexpire them sooner, which is why the default is more\naggressive than <b>gc.reflogExpire</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.rerereResolved</p>\n\n<p style=\"margin-left:17%;\">Records of conflicted merge you\nresolved earlier are kept for this many days when <i>git\nrerere gc</i> is run. You can also use more human-readable\n&quot;1.month.ago&quot;, etc. The default is 60 days. See\n<a href=\"https://man.page/1/git-rerere\">git-rerere(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gc.rerereUnresolved</p>\n\n<p style=\"margin-left:17%;\">Records of conflicted merge you\nhave not resolved are kept for this many days when <i>git\nrerere gc</i> is run. You can also use more human-readable\n&quot;1.month.ago&quot;, etc. The default is 15 days. See\n<a href=\"https://man.page/1/git-rerere\">git-rerere(1)</a>.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git gc</i>\ntries very hard not to delete objects that are referenced\nanywhere in your repository. In particular, it will keep not\nonly objects referenced by your current set of branches and\ntags, but also objects referenced by the index,\nremote-tracking branches, reflogs (which may reference\ncommits in branches that were later amended or rewound), and\nanything else in the refs/* namespace. Note that a note (of\nthe kind created by <i>git notes</i>) attached to an object\ndoes not contribute in keeping the object alive. If you are\nexpecting some objects to be deleted and they aren&rsquo;t,\ncheck all of those locations and decide whether it makes\nsense in your case to remove those references.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On the other\nhand, when <i>git gc</i> runs concurrently with another\nprocess, there is a risk of it deleting an object that the\nother process is using but hasn&rsquo;t created a reference\nto. This may just cause the other process to fail or may\ncorrupt the repository if the other process later adds a\nreference to the deleted object. Git has two features that\nsignificantly mitigate this problem:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. Any object\nwith modification time newer than the <b>--prune</b> date is\nkept, along with everything reachable from it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Most\noperations that add an object to the database update the\nmodification time of the object if it is already present so\nthat #1 applies.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However, these\nfeatures fall short of a complete solution, so users who run\ncommands concurrently have to live with some risk of\ncorruption (which seems to be low in practice).</p>\n\n<h2>HOOKS\n<a name=\"HOOKS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>git gc\n--auto</i> command will run the <i>pre-auto-gc</i> hook. See\n<a href=\"https://man.page/5/githooks\">githooks(5)</a> for more information.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-prune\">git-prune(1)</a>\n<a href=\"https://man.page/1/git-reflog\">git-reflog(1)</a> <a href=\"https://man.page/1/git-repack\">git-repack(1)</a>\n<a href=\"https://man.page/1/git-rerere\">git-rerere(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#AGGRESSIVE\">AGGRESSIVE</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#HOOKS\">HOOKS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}