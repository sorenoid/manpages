{"name":"git-describe","description":"git-describe - Give an object a human readable name based on an available ref","body":"\n\n<h1 align=\"center\">GIT-DESCRIBE</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-describe -\nGive an object a human readable name based on an available\nref</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ndescribe</i> [--all] [--tags] [--contains]\n[--abbrev=&lt;n&gt;] [&lt;commit-ish&gt;...] <i><br>\ngit describe</i> [--all] [--tags] [--contains]\n[--abbrev=&lt;n&gt;] --dirty[=&lt;mark&gt;] <i><br>\ngit describe</i> &lt;blob&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nfinds the most recent tag that is reachable from a commit.\nIf the tag points to the commit, then only the tag is shown.\nOtherwise, it suffixes the tag name with the number of\nadditional commits on top of the tagged object and the\nabbreviated object name of the most recent commit. The\nresult is a &quot;human-readable&quot; object name which can\nalso be used to identify the commit to other git\ncommands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default\n(without --all or --tags) <b>git describe</b> only shows\nannotated tags. For more information about creating\nannotated tags see the -a and -s options to\n<a href=\"https://man.page/1/git-tag\">git-tag(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the given\nobject refers to a blob, it will be described as\n<b>&lt;commit-ish&gt;:&lt;path&gt;</b>, such that the blob\ncan be found at <b>&lt;path&gt;</b> in the\n<b>&lt;commit-ish&gt;</b>, which itself describes the first\ncommit in which this blob occurs in a reverse revision walk\nfrom HEAD.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;commit-ish&gt;...</p>\n\n<p style=\"margin-left:17%;\">Commit-ish object names to\ndescribe. Defaults to HEAD if omitted.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dirty[=&lt;mark&gt;],\n--broken[=&lt;mark&gt;]</p>\n\n<p style=\"margin-left:17%;\">Describe the state of the\nworking tree. When the working tree matches HEAD, the output\nis the same as &quot;git describe HEAD&quot;. If the working\ntree has local modification &quot;-dirty&quot; is appended\nto it. If a repository is corrupt and Git cannot determine\nif there is local modification, Git will error out, unless\n&rsquo;--broken&rsquo; is given, which appends the suffix\n&quot;-broken&quot; instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all</p>\n\n<p style=\"margin-left:17%;\">Instead of using only the\nannotated tags, use any ref found in <b>refs/</b> namespace.\nThis option enables matching any known branch,\nremote-tracking branch, or lightweight tag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--tags</p>\n\n<p style=\"margin-left:17%;\">Instead of using only the\nannotated tags, use any tag found in <b>refs/tags</b>\nnamespace. This option enables matching a lightweight\n(non-annotated) tag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--contains</p>\n\n<p style=\"margin-left:17%;\">Instead of finding the tag that\npredates the commit, find the tag that comes after the\ncommit, and thus contains it. Automatically implies\n--tags.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--abbrev=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of using the default\nnumber of hexadecimal digits (which will vary according to\nthe number of objects in the repository with a default of 7)\nof the abbreviated object name, use &lt;n&gt; digits, or as\nmany digits as needed to form a unique object name. An\n&lt;n&gt; of 0 will suppress long format, only showing the\nclosest tag.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--candidates=&lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Instead of considering only the\n10 most recent tags as candidates to describe the input\ncommit-ish consider up to &lt;n&gt; candidates. Increasing\n&lt;n&gt; above 10 will take slightly longer but may produce\na more accurate result. An &lt;n&gt; of 0 will cause only\nexact matches to be output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--exact-match</p>\n\n<p style=\"margin-left:17%;\">Only output exact matches (a\ntag directly references the supplied commit). This is a\nsynonym for --candidates=0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--debug</p>\n\n<p style=\"margin-left:17%;\">Verbosely display information\nabout the searching strategy being employed to standard\nerror. The tag name will still be printed to standard\nout.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--long</p>\n\n<p style=\"margin-left:17%;\">Always output the long format\n(the tag, the number of commits and the abbreviated commit\nname) even when it matches a tag. This is useful when you\nwant to see parts of the commit object name in\n&quot;describe&quot; output, even when the commit in\nquestion happens to be a tagged version. Instead of just\nemitting the tag name, it will describe such a commit as\nv1.2-0-gdeadbee (0th commit since tag v1.2 that points at\nobject deadbee....).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--match\n&lt;pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Only consider tags matching the\ngiven <b>glob(7)</b> pattern, excluding the\n&quot;refs/tags/&quot; prefix. If used with <b>--all</b>, it\nalso considers local branches and remote-tracking references\nmatching the pattern, excluding respectively\n&quot;refs/heads/&quot; and &quot;refs/remotes/&quot;\nprefix; references of other types are never considered. If\ngiven multiple times, a list of patterns will be\naccumulated, and tags matching any of the patterns will be\nconsidered. Use <b>--no-match</b> to clear and reset the\nlist of patterns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--exclude\n&lt;pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Do not consider tags matching\nthe given <b>glob(7)</b> pattern, excluding the\n&quot;refs/tags/&quot; prefix. If used with <b>--all</b>, it\nalso does not consider local branches and remote-tracking\nreferences matching the pattern, excluding respectively\n&quot;refs/heads/&quot; and &quot;refs/remotes/&quot;\nprefix; references of other types are never considered. If\ngiven multiple times, a list of patterns will be accumulated\nand tags matching any of the patterns will be excluded. When\ncombined with --match a tag will be considered when it\nmatches at least one --match pattern and does not match any\nof the --exclude patterns. Use <b>--no-exclude</b> to clear\nand reset the list of patterns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--always</p>\n\n<p style=\"margin-left:17%;\">Show uniquely abbreviated\ncommit object as fallback.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--first-parent</p>\n\n<p style=\"margin-left:17%;\">Follow only the first parent\ncommit upon seeing a merge commit. This is useful when you\nwish to not match tags on branches merged in the history of\nthe target commit.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">With something\nlike git.git current tree, I get:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[torvalds@g5\ngit]$ git describe parent <br>\nv1.0.4-14-g2414721</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">i.e. the\ncurrent head of my &quot;parent&quot; branch is based on\nv1.0.4, but since it has a few commits on top of that,\ndescribe has added the number of additional commits\n(&quot;14&quot;) and an abbreviated object name for the\ncommit itself (&quot;2414721&quot;) at the end.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The number of\nadditional commits is the number of commits which would be\ndisplayed by &quot;git log v1.0.4..parent&quot;. The hash\nsuffix is &quot;-g&quot; + an unambigous abbreviation for\nthe tip commit of parent (which was\n<b>2414721b194453f058079d897d13c4e377f92dc6</b>). The length\nof the abbreviation scales as the repository grows, using\nthe approximate number of objects in the repository and a\nbit of math around the birthday paradox, and defaults to a\nminimum of 7. The &quot;g&quot; prefix stands for\n&quot;git&quot; and is used to allow describing the version\nof a software depending on the SCM the software is managed\nwith. This is useful in an environment where people may use\ndifferent SCMs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Doing a <i>git\ndescribe</i> on a tag-name will just show the tag name:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[torvalds@g5\ngit]$ git describe v1.0.4 <br>\nv1.0.4</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With --all, the\ncommand can use branch heads as references, so the output\nshows the reference path as well:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[torvalds@g5\ngit]$ git describe --all --abbrev=4 v1.0.5^2 <br>\ntags/v1.0.0-21-g975b</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[torvalds@g5\ngit]$ git describe --all --abbrev=4 HEAD^ <br>\nheads/lt/describe-7-g975b</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With --abbrev\nset to 0, the command can be used to find the closest\ntagname without any suffix:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[torvalds@g5\ngit]$ git describe --abbrev=0 v1.0.5^2 <br>\ntags/v1.0.0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nsuffix you get if you type these commands today may be\nlonger than what Linus saw above when he ran these commands,\nas your Git repository may have new commits whose object\nnames begin with 975b that did not exist back then, and\n&quot;-g975b&quot; suffix alone may not be sufficient to\ndisambiguate these commits.</p>\n\n<h2>SEARCH STRATEGY\n<a name=\"SEARCH STRATEGY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For each\ncommit-ish supplied, <i>git describe</i> will first look for\na tag which tags exactly that commit. Annotated tags will\nalways be preferred over lightweight tags, and tags with\nnewer dates will always be preferred over tags with older\ndates. If an exact match is found, its name will be output\nand searching will stop.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If an exact\nmatch was not found, <i>git describe</i> will walk back\nthrough the commit history to locate an ancestor commit\nwhich has been tagged. The ancestor&rsquo;s tag will be\noutput along with an abbreviation of the input\ncommit-ish&rsquo;s SHA-1. If <b>--first-parent</b> was\nspecified then the walk will only consider the first parent\nof each commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If multiple\ntags were found during the walk then the tag which has the\nfewest commits different from the input commit-ish will be\nselected and output. Here fewest commits different is\ndefined as the number of commits which would be shown by\n<b>git log tag..input</b> will be the smallest number of\ncommits possible.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Tree objects as\nwell as tag objects not pointing at commits, cannot be\ndescribed. When describing blobs, the lightweight tags\npointing at blobs are ignored, but the blob is still\ndescribed as &lt;committ-ish&gt;:&lt;path&gt; despite the\nlightweight tag being favorable.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEARCH STRATEGY\">SEARCH STRATEGY</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#GIT\">GIT</a>"]}