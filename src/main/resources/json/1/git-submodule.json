{"name":"git-submodule","description":"git-submodule - Initialize, update or inspect submodules","body":"\n\n<h1 align=\"center\">GIT-SUBMODULE</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-submodule -\nInitialize, update or inspect submodules</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nsubmodule</i> [--quiet] [--cached] <i><br>\ngit submodule</i> [--quiet] add [&lt;options&gt;] [--]\n&lt;repository&gt; [&lt;path&gt;] <i><br>\ngit submodule</i> [--quiet] status [--cached] [--recursive]\n[--] [&lt;path&gt;...] <i><br>\ngit submodule</i> [--quiet] init [--] [&lt;path&gt;...]\n<i><br>\ngit submodule</i> [--quiet] deinit [-f|--force] (--all|[--]\n&lt;path&gt;...) <i><br>\ngit submodule</i> [--quiet] update [&lt;options&gt;] [--]\n[&lt;path&gt;...] <i><br>\ngit submodule</i> [--quiet] set-branch [&lt;options&gt;]\n[--] &lt;path&gt; <i><br>\ngit submodule</i> [--quiet] set-url [--] &lt;path&gt;\n&lt;newurl&gt; <i><br>\ngit submodule</i> [--quiet] summary [&lt;options&gt;] [--]\n[&lt;path&gt;...] <i><br>\ngit submodule</i> [--quiet] foreach [--recursive]\n&lt;command&gt; <i><br>\ngit submodule</i> [--quiet] sync [--recursive] [--]\n[&lt;path&gt;...] <i><br>\ngit submodule</i> [--quiet] absorbgitdirs [--]\n[&lt;path&gt;...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Inspects,\nupdates and manages submodules.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For more\ninformation about submodules, see\n<a href=\"https://man.page/7/gitsubmodules\">gitsubmodules(7)</a>.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">With no\narguments, shows the status of existing submodules. Several\nsubcommands are available to perform operations on the\nsubmodules.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">add [-b\n&lt;branch&gt;] [-f|--force] [--name &lt;name&gt;]\n[--reference &lt;repository&gt;] [--depth &lt;depth&gt;]\n[--] &lt;repository&gt; [&lt;path&gt;]</p>\n\n<p style=\"margin-left:17%;\">Add the given repository as a\nsubmodule at the given path to the changeset to be committed\nnext to the current project: the current project is termed\nthe &quot;superproject&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;repository&gt;\nis the URL of the new submodule&rsquo;s origin repository.\nThis may be either an absolute URL, or (if it begins with ./\nor ../), the location relative to the superproject&rsquo;s\ndefault remote repository (Please note that to specify a\nrepository <i>foo.git</i> which is located right next to a\nsuperproject <i>bar.git</i>, you&rsquo;ll have to use\n<b>../foo.git</b> instead of <b>./foo.git</b> - as one might\nexpect when following the rules for relative URLs - because\nthe evaluation of relative URLs in Git is identical to that\nof relative directories).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\nremote is the remote of the remote-tracking branch of the\ncurrent branch. If no such remote-tracking branch exists or\nthe HEAD is detached, &quot;origin&quot; is assumed to be\nthe default remote. If the superproject doesn&rsquo;t have a\ndefault remote configured the superproject is its own\nauthoritative upstream and the current working directory is\nused instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The optional\nargument &lt;path&gt; is the relative location for the\ncloned submodule to exist in the superproject. If\n&lt;path&gt; is not given, the canonical part of the source\nrepository is used (&quot;repo&quot; for\n&quot;/path/to/repo.git&quot; and &quot;foo&quot; for\n&quot;host.xz:foo/.git&quot;). If &lt;path&gt; exists and is\nalready a valid Git repository, then it is staged for commit\nwithout cloning. The &lt;path&gt; is also used as the\nsubmodule&rsquo;s logical name in its configuration entries\nunless <b>--name</b> is used to specify a logical name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The given URL\nis recorded into <b>.gitmodules</b> for use by subsequent\nusers cloning the superproject. If the URL is given relative\nto the superproject&rsquo;s repository, the presumption is\nthe superproject and submodule repositories will be kept\ntogether in the same relative location, and only the\nsuperproject&rsquo;s URL needs to be provided. git-submodule\nwill correctly locate the submodule using the relative URL\nin <b>.gitmodules</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">status\n[--cached] [--recursive] [--] [&lt;path&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Show the status of the\nsubmodules. This will print the SHA-1 of the currently\nchecked out commit for each submodule, along with the\nsubmodule path and the output of <i>git describe</i> for the\nSHA-1. Each SHA-1 will possibly be prefixed with <b>-</b> if\nthe submodule is not initialized, <b>+</b> if the currently\nchecked out submodule commit does not match the SHA-1 found\nin the index of the containing repository and <b>U</b> if\nthe submodule has merge conflicts.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>--cached</b> is specified, this command will instead\nprint the SHA-1 recorded in the superproject for each\nsubmodule.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>--recursive</b> is specified, this command will recurse\ninto nested submodules, and show their status as well.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you are only\ninterested in changes of the currently initialized\nsubmodules with respect to the commit recorded in the index\nor the HEAD, <a href=\"https://man.page/1/git-status\">git-status(1)</a> and <a href=\"https://man.page/1/git-diff\">git-diff(1)</a>\nwill provide that information too (and can also report\nchanges to a submodule&rsquo;s work tree).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">init [--]\n[&lt;path&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Initialize the submodules\nrecorded in the index (which were added and committed\nelsewhere) by setting <b>submodule.$name.url</b> in\n.git/config. It uses the same setting from\n<b>.gitmodules</b> as a template. If the URL is relative, it\nwill be resolved using the default remote. If there is no\ndefault remote, the current repository will be assumed to be\nupstream.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Optional\n&lt;path&gt; arguments limit which submodules will be\ninitialized. If no path is specified and submodule.active\nhas been configured, submodules configured to be active will\nbe initialized, otherwise all submodules are\ninitialized.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When present,\nit will also copy the value of\n<b>submodule.$name.update</b>. This command does not alter\nexisting information in .git/config. You can then customize\nthe submodule clone URLs in .git/config for your local setup\nand proceed to <b>git submodule update</b>; you can also\njust use <b>git submodule update --init</b> without the\nexplicit <i>init</i> step if you do not intend to customize\nany submodule locations.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the add\nsubcommand for the definition of default remote.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">deinit\n[-f|--force] (--all|[--] &lt;path&gt;...)</p>\n\n<p style=\"margin-left:17%;\">Unregister the given\nsubmodules, i.e. remove the whole <b>submodule.$name</b>\nsection from .git/config together with their work tree.\nFurther calls to <b>git submodule update</b>, <b>git\nsubmodule foreach</b> and <b>git submodule sync</b> will\nskip any unregistered submodules until they are initialized\nagain, so use this command if you don&rsquo;t want to have a\nlocal checkout of the submodule in your working tree\nanymore.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When the\ncommand is run without pathspec, it errors out, instead of\ndeinit-ing everything, to prevent mistakes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>--force</b> is specified, the submodule&rsquo;s working\ntree will be removed even if it contains local\nmodifications.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you really\nwant to remove a submodule from the repository and commit\nthat use <a href=\"https://man.page/1/git-rm\">git-rm(1)</a> instead. See\n<a href=\"https://man.page/7/gitsubmodules\">gitsubmodules(7)</a> for removal options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">update [--init]\n[--remote] [-N|--no-fetch] [--[no-]recommend-shallow]\n[-f|--force] [--checkout|--rebase|--merge] [--reference\n&lt;repository&gt;] [--depth &lt;depth&gt;] [--recursive]\n[--jobs &lt;n&gt;] [--[no-]single-branch] [--]\n[&lt;path&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Update the registered\nsubmodules to match what the superproject expects by cloning\nmissing submodules, fetching missing commits in submodules\nand updating the working tree of the submodules. The\n&quot;updating&quot; can be done in several ways depending\non command line options and the value of\n<b>submodule.&lt;name&gt;.update</b> configuration variable.\nThe command line option takes precedence over the\nconfiguration variable. If neither is given, a\n<i>checkout</i> is performed. The <i>update</i> procedures\nsupported both from the command line as well as through the\n<b>submodule.&lt;name&gt;.update</b> configuration are:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">checkout</p>\n\n<p style=\"margin-left:23%;\">the commit recorded in the\nsuperproject will be checked out in the submodule on a\ndetached HEAD.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">If\n<b>--force</b> is specified, the submodule will be checked\nout (using <b>git checkout --force</b>), even if the commit\nspecified in the index of the containing repository already\nmatches the commit checked out in the submodule.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">rebase</p>\n\n<p style=\"margin-left:23%;\">the current branch of the\nsubmodule will be rebased onto the commit recorded in the\nsuperproject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">merge</p>\n\n<p style=\"margin-left:23%;\">the commit recorded in the\nsuperproject will be merged into the current branch in the\nsubmodule.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The following\n<i>update</i> procedures are only available via the\n<b>submodule.&lt;name&gt;.update</b> configuration\nvariable:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">custom\ncommand</p>\n\n<p style=\"margin-left:23%;\">arbitrary shell command that\ntakes a single argument (the sha1 of the commit recorded in\nthe superproject) is executed. When\n<b>submodule.&lt;name&gt;.update</b> is set to\n<i>!command</i>, the remainder after the exclamation mark is\nthe custom command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">none</p>\n\n<p style=\"margin-left:23%;\">the submodule is not\nupdated.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\nsubmodule is not yet initialized, and you just want to use\nthe setting as stored in <b>.gitmodules</b>, you can\nautomatically initialize the submodule with the\n<b>--init</b> option.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>--recursive</b> is specified, this command will recurse\ninto the registered submodules, and update any nested\nsubmodules within.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">set-branch\n(-b|--branch) &lt;branch&gt; [--] &lt;path&gt;, set-branch\n(-d|--default) [--] &lt;path&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the default remote\ntracking branch for the submodule. The <b>--branch</b>\noption allows the remote branch to be specified. The\n<b>--default</b> option removes the\nsubmodule.&lt;name&gt;.branch configuration key, which\ncauses the tracking branch to default to the remote\n<i>HEAD</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">set-url [--]\n&lt;path&gt; &lt;newurl&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the URL of the specified\nsubmodule to &lt;newurl&gt;. Then, it will automatically\nsynchronize the submodule&rsquo;s new remote URL\nconfiguration.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">summary\n[--cached|--files] [(-n|--summary-limit) &lt;n&gt;] [commit]\n[--] [&lt;path&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Show commit summary between the\ngiven commit (defaults to HEAD) and working tree/index. For\na submodule in question, a series of commits in the\nsubmodule between the given super project commit and the\nindex or working tree (switched by <b>--cached</b>) are\nshown. If the option <b>--files</b> is given, show the\nseries of commits in the submodule between the index of the\nsuper project and the working tree of the submodule (this\noption doesn&rsquo;t allow to use the <b>--cached</b> option\nor to provide an explicit commit).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Using the\n<b>--submodule=log</b> option with <a href=\"https://man.page/1/git-diff\">git-diff(1)</a> will\nprovide that information too.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">foreach\n[--recursive] &lt;command&gt;</p>\n\n<p style=\"margin-left:17%;\">Evaluates an arbitrary shell\ncommand in each checked out submodule. The command has\naccess to the variables $name, $sm_path, $displaypath, $sha1\nand $toplevel: $name is the name of the relevant submodule\nsection in <b>.gitmodules</b>, $sm_path is the path of the\nsubmodule as recorded in the immediate superproject,\n$displaypath contains the relative path from the current\nworking directory to the submodules root directory, $sha1 is\nthe commit as recorded in the immediate superproject, and\n$toplevel is the absolute path to the top-level of the\nimmediate superproject. Note that to avoid conflicts with\n<i>$PATH</i> on Windows, the <i>$path</i> variable is now a\ndeprecated synonym of <i>$sm_path</i> variable. Any\nsubmodules defined in the superproject but not checked out\nare ignored by this command. Unless given <b>--quiet</b>,\nforeach prints the name of each submodule before evaluating\nthe command. If <b>--recursive</b> is given, submodules are\ntraversed recursively (i.e. the given shell command is\nevaluated in nested submodules as well). A non-zero return\nfrom the command in any submodule causes the processing to\nterminate. This can be overridden by adding <i>|| :</i> to\nthe end of the command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As an example,\nthe command below will show the path and currently checked\nout commit for each submodule:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">git submodule\nforeach 'echo $sm_path &rsquo;git rev-parse HEAD&rsquo;'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sync\n[--recursive] [--] [&lt;path&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Synchronizes submodules' remote\nURL configuration setting to the value specified in\n<b>.gitmodules</b>. It will only affect those submodules\nwhich already have a URL entry in .git/config (that is the\ncase when they are initialized or freshly added). This is\nuseful when submodule URLs change upstream and you need to\nupdate your local repositories accordingly.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>git\nsubmodule sync</b> synchronizes all submodules while <b>git\nsubmodule sync -- A</b> synchronizes submodule &quot;A&quot;\nonly.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>--recursive</b> is specified, this command will recurse\ninto the registered submodules, and sync any nested\nsubmodules within.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">absorbgitdirs</p>\n\n<p style=\"margin-left:17%;\">If a git directory of a\nsubmodule is inside the submodule, move the git directory of\nthe submodule into its superproject&rsquo;s\n<b>$GIT_DIR/modules</b> path and then connect the git\ndirectory and its working directory by setting the\n<b>core.worktree</b> and adding a .git file pointing to the\ngit directory embedded in the superprojects git\ndirectory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A repository\nthat was cloned independently and later added as a submodule\nor old setups have the submodules git directory inside the\nsubmodule instead of embedded into the superprojects git\ndirectory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This command is\nrecursive by default.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet</p>\n\n<p style=\"margin-left:17%;\">Only print error messages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--progress</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nadd and update commands. Progress status is reported on the\nstandard error stream by default when it is attached to a\nterminal, unless -q is specified. This flag forces progress\nstatus even if the standard error stream is not directed to\na terminal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe deinit command. Unregister all submodules in the working\ntree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-b\n&lt;branch&gt;, --branch &lt;branch&gt;</p>\n\n<p style=\"margin-left:17%;\">Branch of repository to add as\nsubmodule. The name of the branch is recorded as\n<b>submodule.&lt;name&gt;.branch</b> in <b>.gitmodules</b>\nfor <b>update --remote</b>. A special value of <b>.</b> is\nused to indicate that the name of the branch in the\nsubmodule should be the same name as the current branch in\nthe current repository. If the option is not specified, it\ndefaults to the remote <i>HEAD</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f, --force</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nadd, deinit and update commands. When running add, allow\nadding an otherwise ignored submodule path. When running\ndeinit the submodule working trees will be removed even if\nthey contain local changes. When running update (only\neffective with the checkout procedure), throw away local\nchanges in submodules when switching to a different commit;\nand always run a checkout operation in the submodule, even\nif the commit listed in the index of the containing\nrepository matches the commit checked out in the\nsubmodule.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cached</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nstatus and summary commands. These commands typically use\nthe commit found in the submodule HEAD, but with this\noption, the commit stored in the index is used instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--files</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe summary command. This command compares the commit in the\nindex with that in the submodule HEAD when this option is\nused.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--summary-limit</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe summary command. Limit the summary size (number of\ncommits shown in total). Giving 0 will disable the summary;\na negative number means unlimited (the default). This limit\nonly applies to modified submodules. The size is always\nlimited to 1 for added/deleted/typechanged submodules.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--remote</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. Instead of using the\nsuperproject&rsquo;s recorded SHA-1 to update the submodule,\nuse the status of the submodule&rsquo;s remote-tracking\nbranch. The remote used is branch&rsquo;s remote\n(<b>branch.&lt;name&gt;.remote</b>), defaulting to\n<b>origin</b>. The remote branch used defaults to the remote\n<b>HEAD</b>, but the branch name may be overridden by\nsetting the <b>submodule.&lt;name&gt;.branch</b> option in\neither <b>.gitmodules</b> or <b>.git/config</b> (with\n<b>.git/config</b> taking precedence).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This works for\nany of the supported update procedures (<b>--checkout</b>,\n<b>--rebase</b>, etc.). The only change is the source of the\ntarget SHA-1. For example, <b>submodule update --remote\n--merge</b> will merge upstream submodule changes into the\nsubmodules, while <b>submodule update --merge</b> will merge\nsuperproject gitlink changes into the submodules.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In order to\nensure a current tracking branch state, <b>update\n--remote</b> fetches the submodule&rsquo;s remote repository\nbefore calculating the SHA-1. If you don&rsquo;t want to\nfetch, you should use <b>submodule update --remote\n--no-fetch</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Use this option\nto integrate changes from the upstream subproject with your\nsubmodule&rsquo;s current HEAD. Alternatively, you can run\n<b>git pull</b> from the submodule, which is equivalent\nexcept for the remote branch name: <b>update --remote</b>\nuses the default upstream repository and\n<b>submodule.&lt;name&gt;.branch</b>, while <b>git pull</b>\nuses the submodule&rsquo;s <b>branch.&lt;name&gt;.merge</b>.\nPrefer <b>submodule.&lt;name&gt;.branch</b> if you want to\ndistribute the default upstream branch with the superproject\nand <b>branch.&lt;name&gt;.merge</b> if you want a more\nnative feel while working in the submodule itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-N,\n--no-fetch</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. Don&rsquo;t fetch new objects from the\nremote site.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--checkout</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. Checkout the commit recorded in the\nsuperproject on a detached HEAD in the submodule. This is\nthe default behavior, the main use of this option is to\noverride <b>submodule.$name.update</b> when set to a value\nother than <b>checkout</b>. If the key\n<b>submodule.$name.update</b> is either not explicitly set\nor set to <b>checkout</b>, this option is implicit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--merge</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. Merge the commit recorded in the\nsuperproject into the current branch of the submodule. If\nthis option is given, the submodule&rsquo;s HEAD will not be\ndetached. If a merge failure prevents this process, you will\nhave to resolve the resulting conflicts within the submodule\nwith the usual conflict resolution tools. If the key\n<b>submodule.$name.update</b> is set to <b>merge</b>, this\noption is implicit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--rebase</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. Rebase the current branch onto the\ncommit recorded in the superproject. If this option is\ngiven, the submodule&rsquo;s HEAD will not be detached. If a\nmerge failure prevents this process, you will have to\nresolve these failures with <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a>. If the key\n<b>submodule.$name.update</b> is set to <b>rebase</b>, this\noption is implicit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--init</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. Initialize all submodules for which\n&quot;git submodule init&quot; has not been called so far\nbefore updating.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--name</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe add command. It sets the submodule&rsquo;s name to the\ngiven string instead of defaulting to its path. The name\nmust be valid as a directory name and may not end with a\n<i>/</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reference\n&lt;repository&gt;</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nadd and update commands. These commands sometimes need to\nclone a remote repository. In this case, this option will be\npassed to the <a href=\"https://man.page/1/git-clone\">git-clone(1)</a> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>NOTE</b>: Do\n<b>not</b> use this option unless you have read the note for\n<a href=\"https://man.page/1/git-clone\">git-clone(1)</a>'s <b>--reference</b>, <b>--shared</b>,\nand <b>--dissociate</b> options carefully.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dissociate</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nadd and update commands. These commands sometimes need to\nclone a remote repository. In this case, this option will be\npassed to the <a href=\"https://man.page/1/git-clone\">git-clone(1)</a> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>NOTE</b>:\nsee the NOTE for the <b>--reference</b> option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--recursive</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nforeach, update, status and sync commands. Traverse\nsubmodules recursively. The operation is performed not only\nin the submodules of the current repo, but also in any\nnested submodules inside those submodules (and so on).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--depth</p>\n\n<p style=\"margin-left:17%;\">This option is valid for add\nand update commands. Create a <i>shallow</i> clone with a\nhistory truncated to the specified number of revisions. See\n<a href=\"https://man.page/1/git-clone\">git-clone(1)</a></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]recommend-shallow</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. The initial clone of a submodule will\nuse the recommended <b>submodule.&lt;name&gt;.shallow</b> as\nprovided by the <b>.gitmodules</b> file by default. To\nignore the suggestions use\n<b>--no-recommend-shallow</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-j &lt;n&gt;,\n--jobs &lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. Clone new submodules in parallel with as\nmany jobs. Defaults to the <b>submodule.fetchJobs</b>\noption.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]single-branch</p>\n\n<p style=\"margin-left:17%;\">This option is only valid for\nthe update command. Clone only one branch during update:\nHEAD or one specified by --branch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;path&gt;...</p>\n\n<p style=\"margin-left:17%;\">Paths to submodule(s). When\nspecified this will restrict the command to only operate on\nthe submodules found at the specified paths. (This argument\nis required with add).</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\ninitializing submodules, a <b>.gitmodules</b> file in the\ntop-level directory of the containing repository is used to\nfind the url of each submodule. This file should be\nformatted in the same way as <b>$GIT_DIR/config</b>. The key\nto each submodule url is &quot;submodule.$name.url&quot;.\nSee <a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a> for details.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/gitsubmodules\">gitsubmodules(7)</a>,\n<a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a>.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"]}