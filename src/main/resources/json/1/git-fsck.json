{"name":"git-fsck","description":"git-fsck -\nVerifies the connectivity and validity of the objects in the\ndatabase","body":"\n\n<h1 align=\"center\">GIT-FSCK</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-fsck -\nVerifies the connectivity and validity of the objects in the\ndatabase</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git fsck</i>\n[--tags] [--root] [--unreachable] [--cache] [--no-reflogs]\n<br>\n[--[no-]full] [--strict] [--verbose] [--lost-found] <br>\n[--[no-]dangling] [--[no-]progress] [--connectivity-only]\n<br>\n[--[no-]name-objects] [&lt;object&gt;*]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Verifies the\nconnectivity and validity of the objects in the\ndatabase.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">An object to treat as the head\nof an unreachability trace.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If no objects\nare given, <i>git fsck</i> defaults to using the index file,\nall SHA-1 references in <b>refs</b> namespace, and all\nreflogs (unless --no-reflogs is given) as heads.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--unreachable</p>\n\n<p style=\"margin-left:17%;\">Print out objects that exist\nbut that aren&rsquo;t reachable from any of the reference\nnodes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]dangling</p>\n\n<p style=\"margin-left:17%;\">Print objects that exist but\nthat are never <i>directly</i> used (default).\n<b>--no-dangling</b> can be used to omit this information\nfrom the output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--root</p>\n\n<p style=\"margin-left:17%;\">Report root nodes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--tags</p>\n\n<p style=\"margin-left:17%;\">Report tags.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cache</p>\n\n<p style=\"margin-left:17%;\">Consider any object recorded in\nthe index also as a head node for an unreachability\ntrace.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-reflogs</p>\n\n<p style=\"margin-left:17%;\">Do not consider commits that\nare referenced only by an entry in a reflog to be reachable.\nThis option is meant only to search for commits that used to\nbe in a ref, but now aren&rsquo;t, but are still in that\ncorresponding reflog.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--full</p>\n\n<p style=\"margin-left:17%;\">Check not just objects in\nGIT_OBJECT_DIRECTORY ($GIT_DIR/objects), but also the ones\nfound in alternate object pools listed in\nGIT_ALTERNATE_OBJECT_DIRECTORIES or\n$GIT_DIR/objects/info/alternates, and in packed Git archives\nfound in $GIT_DIR/objects/pack and corresponding pack\nsubdirectories in alternate object pools. This is now\ndefault; you can turn it off with --no-full.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--connectivity-only</p>\n\n<p style=\"margin-left:17%;\">Check only the connectivity of\nreachable objects, making sure that any objects referenced\nby a reachable tag, commit, or tree is present. This speeds\nup the operation by avoiding reading blobs entirely (though\nit does still check that referenced blobs exist). This will\ndetect corruption in commits and trees, but not do any\nsemantic checks (e.g., for format errors). Corruption in\nblob objects will not be detected at all.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unreachable\ntags, commits, and trees will also be accessed to find the\ntips of dangling segments of history. Use\n<b>--no-dangling</b> if you don&rsquo;t care about this\noutput and want to speed it up further.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--strict</p>\n\n<p style=\"margin-left:17%;\">Enable more strict checking,\nnamely to catch a file mode recorded with g+w bit set, which\nwas created by older versions of Git. Existing repositories,\nincluding the Linux kernel, Git itself, and sparse\nrepository have old objects that triggers this check, but it\nis recommended to check new projects with this flag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--verbose</p>\n\n<p style=\"margin-left:17%;\">Be chatty.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--lost-found</p>\n\n<p style=\"margin-left:17%;\">Write dangling objects into\n.git/lost-found/commit/ or .git/lost-found/other/, depending\non type. If the object is a blob, the contents are written\ninto the file, rather than its object name.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--name-objects</p>\n\n<p style=\"margin-left:17%;\">When displaying names of\nreachable objects, in addition to the SHA-1 also display a\nname that describes <b>how</b> they are reachable,\ncompatible with <a href=\"https://man.page/1/git-rev-parse\">git-rev-parse(1)</a>, e.g.\n<b>HEAD@{1234567890}~25^2:src/</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--[no-]progress</p>\n\n<p style=\"margin-left:17%;\">Progress status is reported on\nthe standard error stream by default when it is attached to\na terminal, unless --no-progress or --verbose is specified.\n--progress forces progress status even if the standard error\nstream is not directed to a terminal.</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fsck.&lt;msg-id&gt;</p>\n\n<p style=\"margin-left:17%;\">During fsck git may find issues\nwith legacy data which wouldn&rsquo;t be generated by\ncurrent versions of git, and which wouldn&rsquo;t be sent\nover the wire if <b>transfer.fsckObjects</b> was set. This\nfeature is intended to support working with legacy\nrepositories containing such data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Setting\n<b>fsck.&lt;msg-id&gt;</b> will be picked up by\n<a href=\"https://man.page/1/git-fsck\">git-fsck(1)</a>, but to accept pushes of such data set\n<b>receive.fsck.&lt;msg-id&gt;</b> instead, or to clone or\nfetch it set <b>fetch.fsck.&lt;msg-id&gt;</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The rest of the\ndocumentation discusses <b>fsck.*</b> for brevity, but the\nsame applies for the corresponding <b>receive.fsck.*</b> and\n<b>fetch.&lt;msg-id&gt;.*</b>. variables.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unlike\nvariables like <b>color.ui</b> and <b>core.editor</b> the\n<b>receive.fsck.&lt;msg-id&gt;</b> and\n<b>fetch.fsck.&lt;msg-id&gt;</b> variables will not fall\nback on the <b>fsck.&lt;msg-id&gt;</b> configuration if they\naren&rsquo;t set. To uniformly configure the same fsck\nsettings in different circumstances all three of them they\nmust all set to the same values.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\n<b>fsck.&lt;msg-id&gt;</b> is set, errors can be switched to\nwarnings and vice versa by configuring the\n<b>fsck.&lt;msg-id&gt;</b> setting where the\n<b>&lt;msg-id&gt;</b> is the fsck message ID and the value\nis one of <b>error</b>, <b>warn</b> or <b>ignore</b>. For\nconvenience, fsck prefixes the error/warning with the\nmessage ID, e.g. &quot;missingEmail: invalid\nauthor/committer line - missing email&quot; means that\nsetting <b>fsck.missingEmail = ignore</b> will hide that\nissue.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In general, it\nis better to enumerate existing objects with problems with\n<b>fsck.skipList</b>, instead of listing the kind of\nbreakages these problematic objects share to be ignored, as\ndoing the latter will allow new instances of the same\nbreakages go unnoticed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Setting an\nunknown <b>fsck.&lt;msg-id&gt;</b> value will cause fsck to\ndie, but doing the same for\n<b>receive.fsck.&lt;msg-id&gt;</b> and\n<b>fetch.fsck.&lt;msg-id&gt;</b> will only cause git to\nwarn.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fsck.skipList</p>\n\n<p style=\"margin-left:17%;\">The path to a list of object\nnames (i.e. one unabbreviated SHA-1 per line) that are known\nto be broken in a non-fatal way and should be ignored. On\nversions of Git 2.20 and later comments (<i>#</i>), empty\nlines, and any leading and trailing whitespace is ignored.\nEverything but a SHA-1 per line will error out on older\nversions.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This feature is\nuseful when an established project should be accepted\ndespite early commits containing errors that can be safely\nignored such as invalid committer email addresses. Note:\ncorrupt objects cannot be skipped with this setting.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Like\n<b>fsck.&lt;msg-id&gt;</b> this variable has corresponding\n<b>receive.fsck.skipList</b> and <b>fetch.fsck.skipList</b>\nvariants.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unlike\nvariables like <b>color.ui</b> and <b>core.editor</b> the\n<b>receive.fsck.skipList</b> and <b>fetch.fsck.skipList</b>\nvariables will not fall back on the <b>fsck.skipList</b>\nconfiguration if they aren&rsquo;t set. To uniformly\nconfigure the same fsck settings in different circumstances\nall three of them they must all set to the same values.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Older versions\nof Git (before 2.20) documented that the object names list\nshould be sorted. This was never a requirement, the object\nnames could appear in any order, but when reading the list\nwe tracked whether the list was sorted for the purposes of\nan internal binary search implementation, which could save\nitself some work with an already sorted list. Unless you had\na humongous list there was no reason to go out of your way\nto pre-sort the list. After Git version 2.20 a hash\nimplementation is used instead, so there&rsquo;s now no\nreason to pre-sort the list.</p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-fsck tests\nSHA-1 and general object sanity, and it does full tracking\nof the resulting reachability and everything else. It prints\nout any corruption it finds (missing or bad objects), and if\nyou use the <b>--unreachable</b> flag it will also print out\nobjects that exist but that aren&rsquo;t reachable from any\nof the specified head nodes (or the default set, as\nmentioned above).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any corrupt\nobjects you will have to find in backups or other archives\n(i.e., you can just remove them and do an <i>rsync</i> with\nsome other site in the hopes that somebody else has the\nobject you have corrupted).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\ncore.commitGraph is true, the commit-graph file will also be\ninspected using <i>git commit-graph verify</i>. See\n<a href=\"https://man.page/1/git-commit-graph\">git-commit-graph(1)</a>.</p>\n\n<h2>EXTRACTED DIAGNOSTICS\n<a name=\"EXTRACTED DIAGNOSTICS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">unreachable\n&lt;type&gt; &lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">The &lt;type&gt; object\n&lt;object&gt;, isn&rsquo;t actually referred to directly or\nindirectly in any of the trees or commits seen. This can\nmean that there&rsquo;s another root node that you&rsquo;re\nnot specifying or that the tree is corrupt. If you\nhaven&rsquo;t missed a root node then you might as well\ndelete unreachable nodes since they can&rsquo;t be used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">missing\n&lt;type&gt; &lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">The &lt;type&gt; object\n&lt;object&gt;, is referred to but isn&rsquo;t present in\nthe database.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">dangling\n&lt;type&gt; &lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">The &lt;type&gt; object\n&lt;object&gt;, is present in the database but never\n<i>directly</i> used. A dangling commit could be a root\nnode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">hash mismatch\n&lt;object&gt;</p>\n\n<p style=\"margin-left:17%;\">The database has an object\nwhose hash doesn&rsquo;t match the object database value.\nThis indicates a serious data integrity problem.</p>\n\n<h2>ENVIRONMENT VARIABLES\n<a name=\"ENVIRONMENT VARIABLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GIT_OBJECT_DIRECTORY</p>\n\n<p style=\"margin-left:17%;\">used to specify the object\ndatabase root (usually $GIT_DIR/objects)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GIT_INDEX_FILE</p>\n\n<p style=\"margin-left:17%;\">used to specify the index file\nof the index</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GIT_ALTERNATE_OBJECT_DIRECTORIES</p>\n\n<p style=\"margin-left:17%;\">used to specify additional\nobject database roots (usually unset)</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#EXTRACTED DIAGNOSTICS\">EXTRACTED DIAGNOSTICS</a>","<a href=\"#ENVIRONMENT VARIABLES\">ENVIRONMENT VARIABLES</a>","<a href=\"#GIT\">GIT</a>"]}