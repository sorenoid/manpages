{"name":"cpp","description":"cpp - The C\nPreprocessor","body":"\n\n<h1 align=\"center\">CPP</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">cpp - The C\nPreprocessor</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">cpp\n[<b>-D</b><i>macro</i>[=<i>defn</i>]...]\n[<b>-U</b><i>macro</i>] <br>\n[<b>-I</b><i>dir</i>...] [<b>-iquote</b><i>dir</i>...] <br>\n[<b>-M</b>|<b>-MM</b>] [<b>-MG</b>] [<b>-MF</b>\n<i>filename</i>] <br>\n[<b>-MP</b>] [<b>-MQ</b> <i>target</i>...] <br>\n[<b>-MT</b> <i>target</i>...] <i><br>\ninfile</i> [[<b>-o</b>] <i>outfile</i>]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only the most\nuseful options are given above; see below for a more\ncomplete list of preprocessor-specific options. In addition,\n<b>cpp</b> accepts most <b>gcc</b> driver options, which are\nnot listed here. Refer to the <small>GCC</small>\ndocumentation for details.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The C\npreprocessor, often known as <i>cpp</i>, is a <i>macro\nprocessor</i> that is used automatically by the C compiler\nto transform your program before compilation. It is called a\nmacro processor because it allows you to define\n<i>macros</i>, which are brief abbreviations for longer\nconstructs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The C\npreprocessor is intended to be used only with C, C\n<small>++</small> , and Objective-C source code. In the\npast, it has been abused as a general text processor. It\nwill choke on input which does not obey C&rsquo;s lexical\nrules. For example, apostrophes will be interpreted as the\nbeginning of character constants, and cause errors. Also,\nyou cannot rely on it preserving characteristics of the\ninput which are not significant to C-family languages. If a\nMakefile is preprocessed, all the hard tabs will be removed,\nand the Makefile will not work.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Having said\nthat, you can often get away with using cpp on things which\nare not C. Other Algol-ish programming languages are often\nsafe (Ada, etc.) So is assembly, with caution.\n<b>-traditional-cpp</b> mode preserves more white space, and\nis otherwise more permissive. Many of the problems can be\navoided by writing C or C <small>++</small> style comments\ninstead of native language comments, and keeping macros\nsimple.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Wherever\npossible, you should use a preprocessor geared to the\nlanguage you are writing in. Modern versions of the\n<small>GNU</small> assembler have macro facilities. Most\nhigh level programming languages have their own conditional\ncompilation and inclusion mechanism. If all else fails, try\na true general text processor, such as <small>GNU\nM4.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">C preprocessors\nvary in some details. This manual discusses the <small>GNU\nC</small> preprocessor, which provides a small superset of\nthe features of <small>ISO</small> Standard C. In its\ndefault mode, the <small>GNU C</small> preprocessor does not\ndo a few things required by the standard. These are features\nwhich are rarely, if ever, used, and may cause surprising\nchanges to the meaning of a program which does not expect\nthem. To get strict <small>ISO</small> Standard C, you\nshould use the <b>-std=c90</b>, <b>-std=c99</b>,\n<b>-std=c11</b> or <b>-std=c17</b> options, depending on\nwhich version of the standard you want. To get all the\nmandatory diagnostics, you must also use\n<b>-pedantic</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\ndescribes the behavior of the <small>ISO</small>\npreprocessor. To minimize gratuitous differences, where the\n<small>ISO</small> preprocessor&rsquo;s behavior does not\nconflict with traditional semantics, the traditional\npreprocessor should behave the same way. The various\ndifferences that do exist are detailed in the section\n<b>Traditional Mode</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For clarity,\nunless noted otherwise, references to\n<b><small>CPP</small></b> in this manual refer to <small>GNU\nCPP.</small></p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>cpp</b>\ncommand expects two file names as arguments, <i>infile</i>\nand <i>outfile</i>. The preprocessor reads <i>infile</i>\ntogether with any other files it specifies with\n<b>#include</b>. All the output generated by the combined\ninput files is written in <i>outfile</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Either\n<i>infile</i> or <i>outfile</i> may be <b>-</b>, which as\n<i>infile</i> means to read from standard input and as\n<i>outfile</i> means to write to standard output. If either\nfile is omitted, it means the same as if <b>-</b> had been\nspecified for that file. You can also use the <b>-o</b>\n<i>outfile</i> option to specify the output file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unless\notherwise noted, or the option ends in <b>=</b>, all options\nwhich take an argument may have that argument appear either\nimmediately after the option, or with a space between option\nand argument: <b>-Ifoo</b> and <b>-I foo</b> have the same\neffect.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many options\nhave multi-letter names; therefore multiple single-letter\noptions may <i>not</i> be grouped: <b>-dM</b> is very\ndifferent from <b>-d&nbsp;-M</b>. <b><br>\n-D</b> <i>name</i></p>\n\n<p style=\"margin-left:17%;\">Predefine <i>name</i> as a\nmacro, with definition 1.</p>\n\n<p style=\"margin-left:11%;\"><b>-D</b>\n<i>name</i><b>=</b><i>definition</i></p>\n\n<p style=\"margin-left:17%;\">The contents of\n<i>definition</i> are tokenized and processed as if they\nappeared during translation phase three in a <b>#define</b>\ndirective. In particular, the definition is truncated by\nembedded newline characters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you are\ninvoking the preprocessor from a shell or shell-like program\nyou may need to use the shell&rsquo;s quoting syntax to\nprotect characters such as spaces that have a meaning in the\nshell syntax.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you wish to\ndefine a function-like macro on the command line, write its\nargument list with surrounding parentheses before the equals\nsign (if any). Parentheses are meaningful to most shells, so\nyou should quote the option. With <b>sh</b> and <b>csh</b>,\n<b>-D&rsquo;</b><i>name</i><b>(</b><i>args...</i><b>)=</b><i>definition</i><b>&rsquo;</b>\nworks.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>-D</b> and\n<b>-U</b> options are processed in the order they are given\non the command line. All <b>-imacros</b> <i>file</i> and\n<b>-include</b> <i>file</i> options are processed after all\n<b>-D</b> and <b>-U</b> options.</p>\n\n<p style=\"margin-left:11%;\"><b>-U</b> <i>name</i></p>\n\n<p style=\"margin-left:17%;\">Cancel any previous definition\nof <i>name</i>, either built in or provided with a <b>-D</b>\noption.</p>\n\n<p style=\"margin-left:11%;\"><b>-include</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">Process <i>file</i> as if\n&quot;#include &quot;file&quot;&quot; appeared as the first\nline of the primary source file. However, the first\ndirectory searched for <i>file</i> is the\npreprocessor&rsquo;s working directory <i>instead of</i> the\ndirectory containing the main source file. If not found\nthere, it is searched for in the remainder of the\n&quot;#include &quot;...&quot;&quot; search chain as\nnormal.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If multiple\n<b>-include</b> options are given, the files are included in\nthe order they appear on the command line.</p>\n\n<p style=\"margin-left:11%;\"><b>-imacros</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">Exactly like <b>-include</b>,\nexcept that any output produced by scanning <i>file</i> is\nthrown away. Macros it defines remain defined. This allows\nyou to acquire all the macros from a header without also\nprocessing its declarations.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">All files\nspecified by <b>-imacros</b> are processed before all files\nspecified by <b>-include</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-undef</b></p>\n\n<p style=\"margin-left:17%;\">Do not predefine any\nsystem-specific or GCC-specific macros. The standard\npredefined macros remain defined.</p>\n\n<p style=\"margin-left:11%;\"><b>-pthread</b></p>\n\n<p style=\"margin-left:17%;\">Define additional macros\nrequired for using the <small>POSIX</small> threads library.\nYou should use this option consistently for both compilation\nand linking. This option is supported on GNU/Linux targets,\nmost other Unix derivatives, and also on x86 Cygwin and\nMinGW targets.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-M</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Instead of outputting the result of preprocessing,\noutput a rule suitable for <b>make</b> describing the\ndependencies of the main source file. The preprocessor\noutputs one <b>make</b> rule containing the object file name\nfor that source file, a colon, and the names of all the\nincluded files, including those coming from <b>-include</b>\nor <b>-imacros</b> command-line options.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unless\nspecified explicitly (with <b>-MT</b> or <b>-MQ</b>), the\nobject file name consists of the name of the source file\nwith any suffix replaced with object file suffix and with\nany leading directory parts removed. If there are many\nincluded files then the rule is split into several lines\nusing <b>\\</b>-newline. The rule has no commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option\ndoes not suppress the preprocessor&rsquo;s debug output,\nsuch as <b>-dM</b>. To avoid mixing such debug output with\nthe dependency rules you should explicitly specify the\ndependency output file with <b>-MF</b>, or use an\nenvironment variable like\n<b><small>DEPENDENCIES_OUTPUT</small></b> . Debug output is\nstill sent to the regular output stream as normal.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Passing\n<b>-M</b> to the driver implies <b>-E</b>, and suppresses\nwarnings with an implicit <b>-w</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><b>-MM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Like <b>-M</b> but do not\nmention header files that are found in system header\ndirectories, nor header files that are included, directly or\nindirectly, from such a header.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This implies\nthat the choice of angle brackets or double quotes in an\n<b>#include</b> directive does not in itself determine\nwhether that header appears in <b>-MM</b> dependency\noutput.</p>\n\n<p style=\"margin-left:11%;\"><b>-MF</b> <i>file</i></p>\n\n<p style=\"margin-left:17%;\">When used with <b>-M</b> or\n<b>-MM</b>, specifies a file to write the dependencies to.\nIf no <b>-MF</b> switch is given the preprocessor sends the\nrules to the same place it would send preprocessed\noutput.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When used with\nthe driver options <b>-MD</b> or <b>-MMD</b>, <b>-MF</b>\noverrides the default dependency output file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If <i>file</i>\nis <i>-</i>, then the dependencies are written to\n<i>stdout</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-MG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>In conjunction with an option such as <b>-M</b>\nrequesting dependency generation, <b>-MG</b> assumes missing\nheader files are generated files and adds them to the\ndependency list without raising an error. The dependency\nfilename is taken directly from the &quot;#include&quot;\ndirective without prepending any path. <b>-MG</b> also\nsuppresses preprocessed output, as a missing header file\nrenders this useless.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This feature is\nused in automatic updating of makefiles.</p>\n\n<p style=\"margin-left:11%;\"><b>-Mno-modules</b></p>\n\n<p style=\"margin-left:17%;\">Disable dependency generation\nfor compiled module interfaces.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-MP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>This option instructs <small>CPP</small> to add a phony\ntarget for each dependency other than the main file, causing\neach to depend on nothing. These dummy rules work around\nerrors <b>make</b> gives if you remove header files without\nupdating the <i>Makefile</i> to match.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is typical\noutput:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">test.o: test.c\ntest.h <br>\ntest.h:</p>\n\n<p style=\"margin-left:11%;\"><b>-MT</b> <i>target</i></p>\n\n<p style=\"margin-left:17%;\">Change the target of the rule\nemitted by dependency generation. By default\n<small>CPP</small> takes the name of the main input file,\ndeletes any directory components and any file suffix such as\n<b>.c</b>, and appends the platform&rsquo;s usual object\nsuffix. The result is the target.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">An <b>-MT</b>\noption sets the target to be exactly the string you specify.\nIf you want multiple targets, you can specify them as a\nsingle argument to <b>-MT</b>, or use multiple <b>-MT</b>\noptions.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example,\n<b>-MT&nbsp;&rsquo;$(objpfx)foo.o&rsquo;</b> might give</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$(objpfx)foo.o:\nfoo.c</p>\n\n<p style=\"margin-left:11%;\"><b>-MQ</b> <i>target</i></p>\n\n<p style=\"margin-left:17%;\">Same as <b>-MT</b>, but it\nquotes any characters which are special to Make.\n<b>-MQ&nbsp;&rsquo;$(objpfx)foo.o&rsquo;</b> gives</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$$(objpfx)foo.o:\nfoo.c</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\ntarget is automatically quoted, as if it were given with\n<b>-MQ</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-MD</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><b>-MD</b> is equivalent to <b>-M -MF</b> <i>file</i>,\nexcept that <b>-E</b> is not implied. The driver determines\n<i>file</i> based on whether an <b>-o</b> option is given.\nIf it is, the driver uses its argument but with a suffix of\n<i>.d</i>, otherwise it takes the name of the input file,\nremoves any directory components and suffix, and applies a\n<i>.d</i> suffix.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If <b>-MD</b>\nis used in conjunction with <b>-E</b>, any <b>-o</b> switch\nis understood to specify the dependency output file, but if\nused without <b>-E</b>, each <b>-o</b> is understood to\nspecify a target object file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Since <b>-E</b>\nis not implied, <b>-MD</b> can be used to generate a\ndependency output file as a side effect of the compilation\nprocess.</p>\n\n<p style=\"margin-left:11%;\"><b>-MMD</b></p>\n\n<p style=\"margin-left:17%;\">Like <b>-MD</b> except mention\nonly user header files, not system header files.</p>\n\n<p style=\"margin-left:11%;\"><b>-fpreprocessed</b></p>\n\n<p style=\"margin-left:17%;\">Indicate to the preprocessor\nthat the input file has already been preprocessed. This\nsuppresses things like macro expansion, trigraph conversion,\nescaped newline splicing, and processing of most directives.\nThe preprocessor still recognizes and removes comments, so\nthat you can pass a file preprocessed with <b>-C</b> to the\ncompiler without problems. In this mode the integrated\npreprocessor is little more than a tokenizer for the front\nends.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>-fpreprocessed</b>\nis implicit if the input file has one of the extensions\n<b>.i</b>, <b>.ii</b> or <b>.mi</b>. These are the\nextensions that <small>GCC</small> uses for preprocessed\nfiles created by <b>-save-temps</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-fdirectives-only</b></p>\n\n<p style=\"margin-left:17%;\">When preprocessing, handle\ndirectives, but do not expand macros.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\noption&rsquo;s behavior depends on the <b>-E</b> and\n<b>-fpreprocessed</b> options.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With <b>-E</b>,\npreprocessing is limited to the handling of directives such\nas &quot;#define&quot;, &quot;#ifdef&quot;, and\n&quot;#error&quot;. Other preprocessor operations, such as\nmacro expansion and trigraph conversion are not performed.\nIn addition, the <b>-dD</b> option is implicitly\nenabled.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>-fpreprocessed</b>, predefinition of command line and\nmost builtin macros is disabled. Macros such as\n&quot;__LINE__&quot;, which are contextually dependent, are\nhandled normally. This enables compilation of files\npreviously preprocessed with &quot;-E\n-fdirectives-only&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With both\n<b>-E</b> and <b>-fpreprocessed</b>, the rules for\n<b>-fpreprocessed</b> take precedence. This enables full\npreprocessing of files previously preprocessed with &quot;-E\n-fdirectives-only&quot;.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fdollars-in-identifiers</b></p>\n\n<p style=\"margin-left:17%;\">Accept <b>$</b> in\nidentifiers.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fextended-identifiers</b></p>\n\n<p style=\"margin-left:17%;\">Accept universal character\nnames and extended characters in identifiers. This option is\nenabled by default for C99 (and later C standard versions)\nand C <small>++</small> .</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fno-canonical-system-headers</b></p>\n\n<p style=\"margin-left:17%;\">When preprocessing, do not\nshorten system header paths with canonicalization.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fmax-include-depth=</b><i>depth</i></p>\n\n<p style=\"margin-left:17%;\">Set the maximum depth of the\nnested #include. The default is 200.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-ftabstop=</b><i>width</i></p>\n\n<p style=\"margin-left:17%;\">Set the distance between tab\nstops. This helps the preprocessor report correct column\nnumbers in warnings or errors, even if tabs appear on the\nline. If the value is less than 1 or greater than 100, the\noption is ignored. The default is 8.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-ftrack-macro-expansion</b>[<b>=</b><i>level</i>]</p>\n\n<p style=\"margin-left:17%;\">Track locations of tokens\nacross macro expansions. This allows the compiler to emit\ndiagnostic about the current macro expansion stack when a\ncompilation error occurs in a macro expansion. Using this\noption makes the preprocessor and the compiler consume more\nmemory. The <i>level</i> parameter can be used to choose the\nlevel of precision of token location tracking thus\ndecreasing the memory consumption if necessary. Value\n<b>0</b> of <i>level</i> de-activates this option. Value\n<b>1</b> tracks tokens locations in a degraded mode for the\nsake of minimal memory overhead. In this mode all tokens\nresulting from the expansion of an argument of a\nfunction-like macro have the same location. Value <b>2</b>\ntracks tokens locations completely. This value is the most\nmemory hungry. When this option is given no argument, the\ndefault parameter value is <b>2</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\n&quot;-ftrack-macro-expansion=2&quot; is activated by\ndefault.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fmacro-prefix-map=</b><i>old</i><b>=</b><i>new</i></p>\n\n<p style=\"margin-left:17%;\">When preprocessing files\nresiding in directory <i>old</i>, expand the\n&quot;__FILE__&quot; and &quot;__BASE_FILE__&quot; macros as\nif the files resided in directory <i>new</i> instead. This\ncan be used to change an absolute path to a relative path by\nusing <i>.</i> for <i>new</i> which can result in more\nreproducible builds that are location independent. This\noption also affects &quot;__builtin_FILE()&quot; during\ncompilation. See also <b>-ffile-prefix-map</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fexec-charset=</b><i>charset</i></p>\n\n<p style=\"margin-left:17%;\">Set the execution character\nset, used for string and character constants. The default is\n<small>UTF-8.</small> <i>charset</i> can be any encoding\nsupported by the system&rsquo;s &quot;iconv&quot; library\nroutine.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-fwide-exec-charset=</b><i>charset</i></p>\n\n<p style=\"margin-left:17%;\">Set the wide execution\ncharacter set, used for wide string and character constants.\nThe default is <small>UTF-32</small> or\n<small>UTF-16,</small> whichever corresponds to the width of\n&quot;wchar_t&quot;. As with <b>-fexec-charset</b>,\n<i>charset</i> can be any encoding supported by the\nsystem&rsquo;s &quot;iconv&quot; library routine; however,\nyou will have problems with encodings that do not fit\nexactly in &quot;wchar_t&quot;.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-finput-charset=</b><i>charset</i></p>\n\n<p style=\"margin-left:17%;\">Set the input character set,\nused for translation from the character set of the input\nfile to the source character set used by <small>GCC.</small>\nIf the locale does not specify, or <small>GCC</small> cannot\nget this information from the locale, the default is\n<small>UTF-8.</small> This can be overridden by either the\nlocale or this command-line option. Currently the\ncommand-line option takes precedence if there&rsquo;s a\nconflict. <i>charset</i> can be any encoding supported by\nthe system&rsquo;s &quot;iconv&quot; library routine.</p>\n\n<p style=\"margin-left:11%;\"><b>-fworking-directory</b></p>\n\n<p style=\"margin-left:17%;\">Enable generation of\nlinemarkers in the preprocessor output that let the compiler\nknow the current working directory at the time of\npreprocessing. When this option is enabled, the preprocessor\nemits, after the initial linemarker, a second linemarker\nwith the current working directory followed by two slashes.\n<small>GCC</small> uses this directory, when it&rsquo;s\npresent in the preprocessed input, as the directory emitted\nas the current working directory in some debugging\ninformation formats. This option is implicitly enabled if\ndebugging information is enabled, but this can be inhibited\nwith the negated form <b>-fno-working-directory</b>. If the\n<b>-P</b> flag is present in the command line, this option\nhas no effect, since no &quot;#line&quot; directives are\nemitted whatsoever.</p>\n\n<p style=\"margin-left:11%;\"><b>-A</b>\n<i>predicate</i><b>=</b><i>answer</i></p>\n\n<p style=\"margin-left:17%;\">Make an assertion with the\npredicate <i>predicate</i> and answer <i>answer</i>. This\nform is preferred to the older form <b>-A</b>\n<i>predicate</i><b>(</b><i>answer</i><b>)</b>, which is\nstill supported, because it does not use shell special\ncharacters.</p>\n\n<p style=\"margin-left:11%;\"><b>-A\n-</b><i>predicate</i><b>=</b><i>answer</i></p>\n\n<p style=\"margin-left:17%;\">Cancel an assertion with the\npredicate <i>predicate</i> and answer <i>answer</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-C</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Do not discard comments. All comments are passed through\nto the output file, except for comments in processed\ndirectives, which are deleted along with the directive.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You should be\nprepared for side effects when using <b>-C</b>; it causes\nthe preprocessor to treat comments as tokens in their own\nright. For example, comments appearing at the start of what\nwould be a directive line have the effect of turning that\nline into an ordinary source line, since the first token on\nthe line is no longer a <b>#</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><b>-CC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Do not discard comments,\nincluding during macro expansion. This is like <b>-C</b>,\nexcept that comments contained within macros are also passed\nthrough to the output file where the macro is expanded.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In addition to\nthe side effects of the <b>-C</b> option, the <b>-CC</b>\noption causes all C <small>++</small> -style comments inside\na macro to be converted to C-style comments. This is to\nprevent later use of that macro from inadvertently\ncommenting out the remainder of the source line.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The <b>-CC</b>\noption is generally used to support lint comments.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>-P</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Inhibit generation of\nlinemarkers in the output from the preprocessor. This might\nbe useful when running the preprocessor on something that is\nnot C code, and will be sent to a program which might be\nconfused by the linemarkers.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-traditional <br>\n-traditional-cpp</b></p>\n\n<p style=\"margin-left:17%;\">Try to imitate the behavior of\npre-standard C preprocessors, as opposed to <small>ISO\nC</small> preprocessors.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\n<small>GCC</small> does not otherwise attempt to emulate a\npre-standard C compiler, and these options are only\nsupported with the <b>-E</b> switch, or when invoking\n<small>CPP</small> explicitly.</p>\n\n<p style=\"margin-left:11%;\"><b>-trigraphs</b></p>\n\n<p style=\"margin-left:17%;\">Support <small>ISO C</small>\ntrigraphs. These are three-character sequences, all starting\nwith <b>??</b>, that are defined by <small>ISO C</small> to\nstand for single characters. For example, <b>??/</b> stands\nfor <b>\\</b>, so <b>&rsquo;??/n&rsquo;</b> is a character\nconstant for a newline.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By default,\n<small>GCC</small> ignores trigraphs, but in\nstandard-conforming modes it converts them. See the\n<b>-std</b> and <b>-ansi</b> options.</p>\n\n<p style=\"margin-left:11%;\"><b>-remap</b></p>\n\n<p style=\"margin-left:17%;\">Enable special code to work\naround file systems which only permit very short file names,\nsuch as MS-DOS.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>-H</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Print the name of each header file used, in addition to\nother normal activities. Each name is indented to show how\ndeep in the <b>#include</b> stack it is. Precompiled header\nfiles are also printed, even if they are found to be\ninvalid; an invalid precompiled header file is printed with\n<b>...x</b> and a valid one with <b>...!</b> .</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-d</b><i>letters</i></p>\n\n<p style=\"margin-left:17%;\">Says to make debugging dumps\nduring compilation as specified by <i>letters</i>. The flags\ndocumented here are those relevant to the preprocessor.\nOther <i>letters</i> are interpreted by the compiler proper,\nor reserved for future versions of <small>GCC,</small> and\nso are silently ignored. If you specify <i>letters</i> whose\nbehavior conflicts, the result is undefined.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>-dM</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Instead of the normal output, generate a list of\n<b>#define</b> directives for all the macros defined during\nthe execution of the preprocessor, including predefined\nmacros. This gives you a way of finding out what is\npredefined in your version of the preprocessor. Assuming you\nhave no file <i>foo.h</i>, the command</p></td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">touch foo.h;\ncpp -dM foo.h</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">shows all the\npredefined macros.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\"><b>-dD</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">Like <b>-dM</b> except in two\nrespects: it does <i>not</i> include the predefined macros,\nand it outputs <i>both</i> the <b>#define</b> directives and\nthe result of preprocessing. Both kinds of output go to the\nstandard output file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>-dN</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Like <b>-dD</b>, but emit only the macro names, not\ntheir expansions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>-dI</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Output <b>#include</b> directives in addition to the\nresult of preprocessing.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p><b>-dU</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Like <b>-dD</b> except that only macros that are\nexpanded, or whose definedness is tested in preprocessor\ndirectives, are output; the output is delayed until the use\nor test of the macro; and <b>#undef</b> directives are also\noutput for macros tested but undefined at the time.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-fdebug-cpp</b></p>\n\n<p style=\"margin-left:17%;\">This option is only useful for\ndebugging <small>GCC.</small> When used from\n<small>CPP</small> or with <b>-E</b>, it dumps debugging\ninformation about location maps. Every token in the output\nis preceded by the dump of the map its location belongs\nto.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When used from\n<small>GCC</small> without <b>-E</b>, this option has no\neffect.</p>\n\n<p style=\"margin-left:11%;\"><b>-I</b> <i>dir</i> <b><br>\n-iquote</b> <i>dir</i> <b><br>\n-isystem</b> <i>dir</i> <b><br>\n-idirafter</b> <i>dir</i></p>\n\n<p style=\"margin-left:17%;\">Add the directory <i>dir</i> to\nthe list of directories to be searched for header files\nduring preprocessing.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If <i>dir</i>\nbegins with <b>=</b> or $SYSROOT, then the <b>=</b> or\n$SYSROOT is replaced by the sysroot prefix; see\n<b>--sysroot</b> and <b>-isysroot</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Directories\nspecified with <b>-iquote</b> apply only to the quote form\nof the directive,\n&quot;#include&nbsp;&quot;<i>file</i>&quot;&quot;.\nDirectories specified with <b>-I</b>, <b>-isystem</b>, or\n<b>-idirafter</b> apply to lookup for both the\n&quot;#include&nbsp;&quot;<i>file</i>&quot;&quot; and\n&quot;#include&nbsp;&lt;<i>file</i>&gt;&quot;\ndirectives.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can specify\nany number or combination of these options on the command\nline to search for header files in several directories. The\nlookup order is as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>For the quote form of the include directive, the\ndirectory of the current file is searched first.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>For the quote form of the include directive, the\ndirectories specified by <b>-iquote</b> options are searched\nin left-to-right order, as they appear on the command\nline.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Directories specified with <b>-I</b> options are scanned\nin left-to-right order.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>4.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Directories specified with <b>-isystem</b> options are\nscanned in left-to-right order.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>5.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Standard system directories are scanned.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>6.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Directories specified with <b>-idirafter</b> options are\nscanned in left-to-right order.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can use\n<b>-I</b> to override a system header file, substituting\nyour own version, since these directories are searched\nbefore the standard system header file directories. However,\nyou should not use this option to add directories that\ncontain vendor-supplied system header files; use\n<b>-isystem</b> for that.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>-isystem</b> and <b>-idirafter</b> options also mark the\ndirectory as a system directory, so that it gets the same\nspecial treatment that is applied to the standard system\ndirectories.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a standard\nsystem include directory, or a directory specified with\n<b>-isystem</b>, is also specified with <b>-I</b>, the\n<b>-I</b> option is ignored. The directory is still searched\nbut as a system directory at its normal position in the\nsystem include chain. This is to ensure that\n<small>GCC</small> &rsquo;s procedure to fix buggy system\nheaders and the ordering for the &quot;#include_next&quot;\ndirective are not inadvertently changed. If you really need\nto change the search order for system directories, use the\n<b>-nostdinc</b> and/or <b>-isystem</b> options.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><b>-I-</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Split the include path. This\noption has been deprecated. Please use <b>-iquote</b>\ninstead for <b>-I</b> directories before the <b>-I-</b> and\nremove the <b>-I-</b> option.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Any directories\nspecified with <b>-I</b> options before <b>-I-</b> are\nsearched only for headers requested with\n&quot;#include&nbsp;&quot;<i>file</i>&quot;&quot;; they are\nnot searched for\n&quot;#include&nbsp;&lt;<i>file</i>&gt;&quot;. If additional\ndirectories are specified with <b>-I</b> options after the\n<b>-I-</b>, those directories are searched for all\n<b>#include</b> directives.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In addition,\n<b>-I-</b> inhibits the use of the directory of the current\nfile directory as the first search directory for\n&quot;#include&nbsp;&quot;<i>file</i>&quot;&quot;. There is\nno way to override this effect of <b>-I-</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-iprefix</b>\n<i>prefix</i></p>\n\n<p style=\"margin-left:17%;\">Specify <i>prefix</i> as the\nprefix for subsequent <b>-iwithprefix</b> options. If the\nprefix represents a directory, you should include the final\n<b>/</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-iwithprefix</b> <i>dir</i>\n<b><br>\n-iwithprefixbefore</b> <i>dir</i></p>\n\n<p style=\"margin-left:17%;\">Append <i>dir</i> to the prefix\nspecified previously with <b>-iprefix</b>, and add the\nresulting directory to the include search path.\n<b>-iwithprefixbefore</b> puts it in the same place\n<b>-I</b> would; <b>-iwithprefix</b> puts it where\n<b>-idirafter</b> would.</p>\n\n<p style=\"margin-left:11%;\"><b>-isysroot</b> <i>dir</i></p>\n\n<p style=\"margin-left:17%;\">This option is like the\n<b>--sysroot</b> option, but applies only to header files\n(except for Darwin targets, where it applies to both header\nfiles and libraries). See the <b>--sysroot</b> option for\nmore information.</p>\n\n<p style=\"margin-left:11%;\"><b>-imultilib</b>\n<i>dir</i></p>\n\n<p style=\"margin-left:17%;\">Use <i>dir</i> as a\nsubdirectory of the directory containing target-specific C\n<small>++</small> headers.</p>\n\n<p style=\"margin-left:11%;\"><b>-nostdinc</b></p>\n\n<p style=\"margin-left:17%;\">Do not search the standard\nsystem directories for header files. Only the directories\nexplicitly specified with <b>-I</b>, <b>-iquote</b>,\n<b>-isystem</b>, and/or <b>-idirafter</b> options (and the\ndirectory of the current file, if appropriate) are\nsearched.</p>\n\n<p style=\"margin-left:11%;\"><b>-nostdinc++</b></p>\n\n<p style=\"margin-left:17%;\">Do not search for header files\nin the C <small>++</small> -specific standard directories,\nbut do still search the other standard directories. (This\noption is used when building the C <small>++</small>\nlibrary.)</p>\n\n<p style=\"margin-left:11%;\"><b>-Wcomment <br>\n-Wcomments</b></p>\n\n<p style=\"margin-left:17%;\">Warn whenever a comment-start\nsequence <b>/*</b> appears in a <b>/*</b> comment, or\nwhenever a backslash-newline appears in a <b>//</b> comment.\nThis warning is enabled by <b>-Wall</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-Wtrigraphs</b></p>\n\n<p style=\"margin-left:17%;\">Warn if any trigraphs are\nencountered that might change the meaning of the program.\nTrigraphs within comments are not warned about, except those\nthat would form escaped newlines.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option is\nimplied by <b>-Wall</b>. If <b>-Wall</b> is not given, this\noption is still enabled unless trigraphs are enabled. To get\ntrigraph conversion without warnings, but get the other\n<b>-Wall</b> warnings, use <b>-trigraphs -Wall\n-Wno-trigraphs</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-Wundef</b></p>\n\n<p style=\"margin-left:17%;\">Warn if an undefined identifier\nis evaluated in an &quot;#if&quot; directive. Such\nidentifiers are replaced with zero.</p>\n\n\n<p style=\"margin-left:11%;\"><b>-Wexpansion-to-defined</b></p>\n\n<p style=\"margin-left:17%;\">Warn whenever <b>defined</b> is\nencountered in the expansion of a macro (including the case\nwhere the macro is expanded by an <b>#if</b> directive).\nSuch usage is not portable. This warning is also enabled by\n<b>-Wpedantic</b> and <b>-Wextra</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>-Wunused-macros</b></p>\n\n<p style=\"margin-left:17%;\">Warn about macros defined in\nthe main file that are unused. A macro is <i>used</i> if it\nis expanded or tested for existence at least once. The\npreprocessor also warns if the macro has not been used at\nthe time it is redefined or undefined.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Built-in\nmacros, macros defined on the command line, and macros\ndefined in include files are not warned about.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Note:</i> If\na macro is actually used, but only used in skipped\nconditional blocks, then the preprocessor reports it as\nunused. To avoid the warning in such a case, you might\nimprove the scope of the macro&rsquo;s definition by, for\nexample, moving it into the first skipped block.\nAlternatively, you could provide a dummy use with something\nlike:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#if defined\nthe_macro_causing_the_warning <br>\n#endif</p>\n\n<p style=\"margin-left:11%;\"><b>-Wno-endif-labels</b></p>\n\n<p style=\"margin-left:17%;\">Do not warn whenever an\n&quot;#else&quot; or an &quot;#endif&quot; are followed by\ntext. This sometimes happens in older programs with code of\nthe form</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#if FOO <br>\n... <br>\n#else FOO <br>\n... <br>\n#endif FOO</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The second and\nthird &quot;FOO&quot; should be in comments. This warning is\non by default.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This section\ndescribes the environment variables that affect how\n<small>CPP</small> operates. You can use them to specify\ndirectories or prefixes to use when searching for include\nfiles, or to control dependency output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that you\ncan also specify places to search using options such as\n<b>-I</b>, and control dependency output with options like\n<b>-M</b>. These take precedence over environment variables,\nwhich in turn take precedence over the configuration of\n<small>GCC. <b><br>\nCPATH</b></small> <b><br>\nC_INCLUDE_PATH <small><br>\nCPLUS_INCLUDE_PATH <br>\nOBJC_INCLUDE_PATH</small></b></p>\n\n<p style=\"margin-left:17%;\">Each variable&rsquo;s value is\na list of directories separated by a special character, much\nlike <b><small>PATH</small></b> , in which to look for\nheader files. The special character,\n&quot;PATH_SEPARATOR&quot;, is target-dependent and\ndetermined at <small>GCC</small> build time. For Microsoft\nWindows-based targets it is a semicolon, and for almost all\nother targets it is a colon.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>CPATH</small></b>\nspecifies a list of directories to be searched as if\nspecified with <b>-I</b>, but after any paths given with\n<b>-I</b> options on the command line. This environment\nvariable is used regardless of which language is being\npreprocessed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The remaining\nenvironment variables apply only when preprocessing the\nparticular language indicated. Each specifies a list of\ndirectories to be searched as if specified with\n<b>-isystem</b>, but after any paths given with\n<b>-isystem</b> options on the command line.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In all these\nvariables, an empty element instructs the compiler to search\nits current working directory. Empty elements can appear at\nthe beginning or end of a path. For instance, if the value\nof <b><small>CPATH</small></b> is\n&quot;:/special/include&quot;, that has the same effect as\n<b>-I.&nbsp;-I/special/include</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>DEPENDENCIES_OUTPUT</small></b></p>\n\n<p style=\"margin-left:17%;\">If this variable is set, its\nvalue specifies how to output dependencies for Make based on\nthe non-system header files processed by the compiler.\nSystem header files are ignored in the dependency\noutput.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The value of\n<b><small>DEPENDENCIES_OUTPUT</small></b> can be just a file\nname, in which case the Make rules are written to that file,\nguessing the target name from the source file name. Or the\nvalue can have the form <i>file target</i>, in which case\nthe rules are written to file <i>file</i> using\n<i>target</i> as the target name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In other words,\nthis environment variable is equivalent to combining the\noptions <b>-MM</b> and <b>-MF</b>, with an optional\n<b>-MT</b> switch too.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>SUNPRO_DEPENDENCIES</small></b></p>\n\n<p style=\"margin-left:17%;\">This variable is the same as\n<b><small>DEPENDENCIES_OUTPUT</small></b> (see above),\nexcept that system header files are not ignored, so it\nimplies <b>-M</b> rather than <b>-MM</b>. However, the\ndependence on the main input file is omitted.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>SOURCE_DATE_EPOCH</small></b></p>\n\n<p style=\"margin-left:17%;\">If this variable is set, its\nvalue specifies a <small>UNIX</small> timestamp to be used\nin replacement of the current date and time in the\n&quot;__DATE__&quot; and &quot;__TIME__&quot; macros, so\nthat the embedded timestamps become reproducible.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The value of\n<b><small>SOURCE_DATE_EPOCH</small></b> must be a\n<small>UNIX</small> timestamp, defined as the number of\nseconds (excluding leap seconds) since 01 Jan 1970 00:00:00\nrepresented in <small>ASCII</small> ; identical to the\noutput of &quot;date +%s&quot; on GNU/Linux and other\nsystems that support the %s extension in the\n&quot;date&quot; command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The value\nshould be a known timestamp such as the last modification\ntime of the source or package and it should be set by the\nbuild process.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/gpl\">gpl(7)</a>,\n<a href=\"https://man.page/7/gfdl\">gfdl(7)</a>, <a href=\"https://man.page/7/fsf-funding\">fsf-funding(7)</a>, <a href=\"https://man.page/1/gcc\">gcc(1)</a>, and\nthe Info entries for <i>cpp</i> and <i>gcc</i>.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n1987-2021 Free Software Foundation, Inc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission is\ngranted to copy, distribute and/or modify this document\nunder the terms of the <small>GNU</small> Free Documentation\nLicense, Version 1.3 or any later version published by the\nFree Software Foundation. A copy of the license is included\nin the man page <a href=\"https://man.page/7/gfdl\">gfdl(7)</a>. This manual contains no\nInvariant Sections. The Front-Cover Texts are (a) (see\nbelow), and the Back-Cover Texts are (b) (see below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(a) The\n<small>FSF</small> &rsquo;s Front-Cover Text is:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A GNU\nManual</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(b) The\n<small>FSF</small> &rsquo;s Back-Cover Text is:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You have\nfreedom to copy and modify this GNU Manual, like GNU <br>\nsoftware. Copies published by the Free Software Foundation\nraise <br>\nfunds for GNU development.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"]}