{"name":"git-rev-list","description":"git-rev-list -\nLists commit objects in reverse chronological order","body":"\n\n<h1 align=\"center\">GIT-REV-LIST</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-rev-list -\nLists commit objects in reverse chronological order</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nrev-list</i> [&lt;options&gt;] &lt;commit&gt;... [[--]\n&lt;path&gt;...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">List commits\nthat are reachable by following the <b>parent</b> links from\nthe given commit(s), but exclude commits that are reachable\nfrom the one(s) given with a <i>^</i> in front of them. The\noutput is given in reverse chronological order by\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can think\nof this as a set operation. Commits reachable from any of\nthe commits given on the command line form a set, and then\ncommits reachable from any of the ones given with <i>^</i>\nin front are subtracted from that set. The remaining commits\nare what comes out in the command&rsquo;s output. Various\nother options and paths parameters can be used to further\nlimit the result.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thus, the\nfollowing command:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git rev-list\nfoo bar ^baz</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">means\n&quot;list all the commits which are reachable from\n<i>foo</i> or <i>bar</i>, but not from <i>baz</i>&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A special\nnotation\n&quot;<i>&lt;commit1&gt;</i>..<i>&lt;commit2&gt;</i>&quot;\ncan be used as a short-hand for &quot;^<i>&lt;commit1&gt;\n&lt;commit2&gt;</i>&quot;. For example, either of the\nfollowing may be used interchangeably:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git rev-list\norigin..HEAD <br>\n$ git rev-list HEAD ^origin</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Another special\nnotation is\n&quot;<i>&lt;commit1&gt;</i>...<i>&lt;commit2&gt;</i>&quot;\nwhich is useful for merges. The resulting set of commits is\nthe symmetric difference between the two operands. The\nfollowing two commands are equivalent:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git rev-list\nA B --not $(git merge-base --all A B) <br>\n$ git rev-list A...B</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>rev-list</i>\nis a very essential Git command, since it provides the\nability to build and traverse commit ancestry graphs. For\nthis reason, it has a lot of different options that enables\nit to be used by commands as different as <i>git bisect</i>\nand <i>git repack</i>.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commit\nLimiting</b> <br>\nBesides specifying a range of commits that should be listed\nusing the special notations explained in the description,\nadditional commit limiting may be applied.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using more\noptions generally further limits the output (e.g.\n<b>--since=&lt;date1&gt;</b> limits to commits newer than\n<b>&lt;date1&gt;</b>, and using it with\n<b>--grep=&lt;pattern&gt;</b> further limits to commits\nwhose log message has a line that matches\n<b>&lt;pattern&gt;</b>), unless otherwise noted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that these\nare applied before commit ordering and formatting options,\nsuch as <b>--reverse</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-&lt;number&gt;,\n-n &lt;number&gt;, --max-count=&lt;number&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the number of commits to\noutput.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--skip=&lt;number&gt;</p>\n\n<p style=\"margin-left:17%;\">Skip <i>number</i> commits\nbefore starting to show the commit output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--since=&lt;date&gt;,\n--after=&lt;date&gt;</p>\n\n<p style=\"margin-left:17%;\">Show commits more recent than a\nspecific date.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--until=&lt;date&gt;,\n--before=&lt;date&gt;</p>\n\n<p style=\"margin-left:17%;\">Show commits older than a\nspecific date.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--max-age=&lt;timestamp&gt;,\n--min-age=&lt;timestamp&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nspecified time range.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--author=&lt;pattern&gt;,\n--committer=&lt;pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones with author/committer header lines that match the\nspecified pattern (regular expression). With more than one\n<b>--author=&lt;pattern&gt;</b>, commits whose author\nmatches any of the given patterns are chosen (similarly for\nmultiple <b>--committer=&lt;pattern&gt;</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--grep-reflog=&lt;pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones with reflog entries that match the specified pattern\n(regular expression). With more than one\n<b>--grep-reflog</b>, commits whose reflog message matches\nany of the given patterns are chosen. It is an error to use\nthis option unless <b>--walk-reflogs</b> is in use.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--grep=&lt;pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones with log message that matches the specified pattern\n(regular expression). With more than one\n<b>--grep=&lt;pattern&gt;</b>, commits whose message matches\nany of the given patterns are chosen (but see\n<b>--all-match</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all-match</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones that match all given <b>--grep</b>, instead of ones\nthat match at least one.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--invert-grep</p>\n\n<p style=\"margin-left:17%;\">Limit the commits output to\nones with log message that do not match the pattern\nspecified with <b>--grep=&lt;pattern&gt;</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-i,\n--regexp-ignore-case</p>\n\n<p style=\"margin-left:17%;\">Match the regular expression\nlimiting patterns without regard to letter case.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--basic-regexp</p>\n\n<p style=\"margin-left:17%;\">Consider the limiting patterns\nto be basic regular expressions; this is the default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-E,\n--extended-regexp</p>\n\n<p style=\"margin-left:17%;\">Consider the limiting patterns\nto be extended regular expressions instead of the default\nbasic regular expressions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-F,\n--fixed-strings</p>\n\n<p style=\"margin-left:17%;\">Consider the limiting patterns\nto be fixed strings (don&rsquo;t interpret pattern as a\nregular expression).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-P,\n--perl-regexp</p>\n\n<p style=\"margin-left:17%;\">Consider the limiting patterns\nto be Perl-compatible regular expressions.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Support for\nthese types of regular expressions is an optional\ncompile-time dependency. If Git wasn&rsquo;t compiled with\nsupport for them providing this option will cause it to\ndie.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--remove-empty</p>\n\n<p style=\"margin-left:17%;\">Stop when a given path\ndisappears from the tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--merges</p>\n\n<p style=\"margin-left:17%;\">Print only merge commits. This\nis exactly the same as <b>--min-parents=2</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-merges</p>\n\n<p style=\"margin-left:17%;\">Do not print commits with more\nthan one parent. This is exactly the same as\n<b>--max-parents=1</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--min-parents=&lt;number&gt;,\n--max-parents=&lt;number&gt;, --no-min-parents,\n--no-max-parents</p>\n\n<p style=\"margin-left:17%;\">Show only commits which have at\nleast (or at most) that many parent commits. In particular,\n<b>--max-parents=1</b> is the same as <b>--no-merges</b>,\n<b>--min-parents=2</b> is the same as <b>--merges</b>.\n<b>--max-parents=0</b> gives all root commits and\n<b>--min-parents=3</b> all octopus merges.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--no-min-parents</b>\nand <b>--no-max-parents</b> reset these limits (to no limit)\nagain. Equivalent forms are <b>--min-parents=0</b> (any\ncommit has 0 or more parents) and <b>--max-parents=-1</b>\n(negative numbers denote no upper limit).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--first-parent</p>\n\n<p style=\"margin-left:17%;\">Follow only the first parent\ncommit upon seeing a merge commit. This option can give a\nbetter overview when viewing the evolution of a particular\ntopic branch, because merges into a topic branch tend to be\nonly about adjusting to updated upstream from time to time,\nand this option allows you to ignore the individual commits\nbrought in to your history by such a merge.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--not</p>\n\n<p style=\"margin-left:17%;\">Reverses the meaning of the\n<i>^</i> prefix (or lack thereof) for all following revision\nspecifiers, up to the next <b>--not</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--all</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs in\n<b>refs/</b>, along with <b>HEAD</b>, are listed on the\ncommand line as <i>&lt;commit&gt;</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--branches[=&lt;pattern&gt;]</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs in\n<b>refs/heads</b> are listed on the command line as\n<i>&lt;commit&gt;</i>. If <i>&lt;pattern&gt;</i> is given,\nlimit branches to ones matching given shell glob. If pattern\nlacks <i>?</i>, <i>*</i>, or <i>[</i>, <i>/*</i> at the end\nis implied.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--tags[=&lt;pattern&gt;]</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs in\n<b>refs/tags</b> are listed on the command line as\n<i>&lt;commit&gt;</i>. If <i>&lt;pattern&gt;</i> is given,\nlimit tags to ones matching given shell glob. If pattern\nlacks <i>?</i>, <i>*</i>, or <i>[</i>, <i>/*</i> at the end\nis implied.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--remotes[=&lt;pattern&gt;]</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs in\n<b>refs/remotes</b> are listed on the command line as\n<i>&lt;commit&gt;</i>. If <i>&lt;pattern&gt;</i> is given,\nlimit remote-tracking branches to ones matching given shell\nglob. If pattern lacks <i>?</i>, <i>*</i>, or <i>[</i>,\n<i>/*</i> at the end is implied.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--glob=&lt;glob-pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all the refs\nmatching shell glob <i>&lt;glob-pattern&gt;</i> are listed\non the command line as <i>&lt;commit&gt;</i>. Leading\n<i>refs/</i>, is automatically prepended if missing. If\npattern lacks <i>?</i>, <i>*</i>, or <i>[</i>, <i>/*</i> at\nthe end is implied.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--exclude=&lt;glob-pattern&gt;</p>\n\n<p style=\"margin-left:17%;\">Do not include refs matching\n<i>&lt;glob-pattern&gt;</i> that the next <b>--all</b>,\n<b>--branches</b>, <b>--tags</b>, <b>--remotes</b>, or\n<b>--glob</b> would otherwise consider. Repetitions of this\noption accumulate exclusion patterns up to the next\n<b>--all</b>, <b>--branches</b>, <b>--tags</b>,\n<b>--remotes</b>, or <b>--glob</b> option (other options or\narguments do not clear accumulated patterns).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The patterns\ngiven should not begin with <b>refs/heads</b>,\n<b>refs/tags</b>, or <b>refs/remotes</b> when applied to\n<b>--branches</b>, <b>--tags</b>, or <b>--remotes</b>,\nrespectively, and they must begin with <b>refs/</b> when\napplied to <b>--glob</b> or <b>--all</b>. If a trailing\n<i>/*</i> is intended, it must be given explicitly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reflog</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all objects\nmentioned by reflogs are listed on the command line as\n<b>&lt;commit&gt;</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--alternate-refs</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all objects\nmentioned as ref tips of alternate repositories were listed\non the command line. An alternate repository is any\nrepository whose object directory is specified in\n<b>objects/info/alternates</b>. The set of included objects\nmay be modified by <b>core.alternateRefsCommand</b>, etc.\nSee <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--single-worktree</p>\n\n<p style=\"margin-left:17%;\">By default, all working trees\nwill be examined by the following options when there are\nmore than one (see <a href=\"https://man.page/1/git-worktree\">git-worktree(1)</a>): <b>--all</b>,\n<b>--reflog</b> and <b>--indexed-objects</b>. This option\nforces them to examine the current working tree only.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ignore-missing</p>\n\n<p style=\"margin-left:17%;\">Upon seeing an invalid object\nname in the input, pretend as if the bad input was not\ngiven.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--stdin</p>\n\n<p style=\"margin-left:17%;\">In addition to the\n<i>&lt;commit&gt;</i> listed on the command line, read them\nfrom the standard input. If a <b>--</b> separator is seen,\nstop reading commits and start reading paths to limit the\nresult.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--quiet</p>\n\n<p style=\"margin-left:17%;\">Don&rsquo;t print anything to\nstandard output. This form is primarily meant to allow the\ncaller to test the exit status to see if a range of objects\nis fully connected (or not). It is faster than redirecting\nstdout to <b>/dev/null</b> as the output does not have to be\nformatted.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--disk-usage</p>\n\n<p style=\"margin-left:17%;\">Suppress normal output;\ninstead, print the sum of the bytes used for on-disk storage\nby the selected commits or objects. This is equivalent to\npiping the output into <b>git cat-file\n--batch-check='%(objectsize:disk)'</b>, except that it runs\nmuch faster (especially with <b>--use-bitmap-index</b>). See\nthe <b>CAVEATS</b> section in <a href=\"https://man.page/1/git-cat-file\">git-cat-file(1)</a> for the\nlimitations of what &quot;on-disk storage&quot; means.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cherry-mark</p>\n\n<p style=\"margin-left:17%;\">Like <b>--cherry-pick</b> (see\nbelow) but mark equivalent commits with <b>=</b> rather than\nomitting them, and inequivalent ones with <b>+</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cherry-pick</p>\n\n<p style=\"margin-left:17%;\">Omit any commit that introduces\nthe same change as another commit on the &ldquo;other\nside&rdquo; when the set of commits are limited with\nsymmetric difference.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example, if\nyou have two branches, <b>A</b> and <b>B</b>, a usual way to\nlist all commits on only one side of them is with\n<b>--left-right</b> (see the example below in the\ndescription of the <b>--left-right</b> option). However, it\nshows the commits that were cherry-picked from the other\nbranch (for example, &ldquo;3rd on b&rdquo; may be\ncherry-picked from branch A). With this option, such pairs\nof commits are excluded from the output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--left-only,\n--right-only</p>\n\n<p style=\"margin-left:17%;\">List only commits on the\nrespective side of a symmetric difference, i.e. only those\nwhich would be marked <b>&lt;</b> resp. <b>&gt;</b> by\n<b>--left-right</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example,\n<b>--cherry-pick --right-only A...B</b> omits those commits\nfrom <b>B</b> which are in <b>A</b> or are patch-equivalent\nto a commit in <b>A</b>. In other words, this lists the\n<b>+</b> commits from <b>git cherry A B</b>. More precisely,\n<b>--cherry-pick --right-only --no-merges</b> gives the\nexact list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--cherry</p>\n\n<p style=\"margin-left:17%;\">A synonym for <b>--right-only\n--cherry-mark --no-merges</b>; useful to limit the output to\nthe commits on our side and mark those that have been\napplied to the other side of a forked history with <b>git\nlog --cherry upstream...mybranch</b>, similar to <b>git\ncherry upstream mybranch</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-g,\n--walk-reflogs</p>\n\n<p style=\"margin-left:17%;\">Instead of walking the commit\nancestry chain, walk reflog entries from the most recent one\nto older ones. When this option is used you cannot specify\ncommits to exclude (that is, <i>^commit</i>,\n<i>commit1..commit2</i>, and <i>commit1...commit2</i>\nnotations cannot be used).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>--pretty</b> format other than <b>oneline</b> and\n<b>reference</b> (for obvious reasons), this causes the\noutput to have two extra lines of information taken from the\nreflog. The reflog designator in the output may be shown as\n<b>ref@{Nth}</b> (where <b>Nth</b> is the\nreverse-chronological index in the reflog) or as\n<b>ref@{timestamp}</b> (with the timestamp for that entry),\ndepending on a few rules:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">1. If the\nstarting point is specified as <b>ref@{Nth}</b>, show the\nindex format.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">2. If the\nstarting point was specified as <b>ref@{now}</b>, show the\ntimestamp format.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">3. If neither\nwas used, but <b>--date</b> was given on the command line,\nshow the timestamp in the format requested by\n<b>--date</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">4. Otherwise,\nshow the index format.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Under\n<b>--pretty=oneline</b>, the commit message is prefixed with\nthis information on the same line. This option cannot be\ncombined with <b>--reverse</b>. See also\n<a href=\"https://man.page/1/git-reflog\">git-reflog(1)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Under\n<b>--pretty=reference</b>, this information will not be\nshown at all.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--merge</p>\n\n<p style=\"margin-left:17%;\">After a failed merge, show refs\nthat touch files having a conflict and don&rsquo;t exist on\nall heads to merge.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--boundary</p>\n\n<p style=\"margin-left:17%;\">Output excluded boundary\ncommits. Boundary commits are prefixed with <b>-</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--use-bitmap-index</p>\n\n<p style=\"margin-left:17%;\">Try to speed up the traversal\nusing the pack bitmap index (if one is available). Note that\nwhen traversing with <b>--objects</b>, trees and blobs will\nnot have their associated path printed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--progress=&lt;header&gt;</p>\n\n<p style=\"margin-left:17%;\">Show progress reports on stderr\nas objects are considered. The <b>&lt;header&gt;</b> text\nwill be printed with each progress update.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>History\nSimplification</b> <br>\nSometimes you are only interested in parts of the history,\nfor example the commits modifying a particular &lt;path&gt;.\nBut there are two parts of <i>History Simplification</i>,\none part is selecting the commits and the other is how to do\nit, as there are various strategies to simplify the\nhistory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions select the commits to be shown:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;paths&gt;</p>\n\n<p style=\"margin-left:17%;\">Commits modifying the given\n&lt;paths&gt; are selected.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--simplify-by-decoration</p>\n\n<p style=\"margin-left:17%;\">Commits that are referred by\nsome branch or tag are selected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that extra\ncommits can be shown to give a meaningful history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions affect the way the simplification is performed:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Default\nmode</p>\n\n<p style=\"margin-left:17%;\">Simplifies the history to the\nsimplest history explaining the final state of the tree.\nSimplest because it prunes some side branches if the end\nresult is the same (i.e. merging branches with the same\ncontent)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-pulls</p>\n\n<p style=\"margin-left:17%;\">Include all commits from the\ndefault mode, but also any merge commits that are not\nTREESAME to the first parent but are TREESAME to a later\nparent. This mode is helpful for showing the merge commits\nthat &quot;first introduced&quot; a change to a branch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--full-history</p>\n\n<p style=\"margin-left:17%;\">Same as the default mode, but\ndoes not prune some history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dense</p>\n\n<p style=\"margin-left:17%;\">Only the selected commits are\nshown, plus some to have a meaningful history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sparse</p>\n\n<p style=\"margin-left:17%;\">All commits in the simplified\nhistory are shown.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--simplify-merges</p>\n\n<p style=\"margin-left:17%;\">Additional option to\n<b>--full-history</b> to remove some needless merges from\nthe resulting history, as there are no selected commits\ncontributing to this merge.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ancestry-path</p>\n\n<p style=\"margin-left:17%;\">When given a range of commits\nto display (e.g. <i>commit1..commit2</i> or <i>commit2\n^commit1</i>), only display commits that exist directly on\nthe ancestry chain between the <i>commit1</i> and\n<i>commit2</i>, i.e. commits that are both descendants of\n<i>commit1</i>, and ancestors of <i>commit2</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A more detailed\nexplanation follows.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Suppose you\nspecified <b>foo</b> as the &lt;paths&gt;. We shall call\ncommits that modify <b>foo</b> !TREESAME, and the rest\nTREESAME. (In a diff filtered for <b>foo</b>, they look\ndifferent and equal, respectively.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing, we will always refer to the same example history\nto illustrate the differences between simplification\nsettings. We assume that you are filtering for a file\n<b>foo</b> in this commit graph:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">.-A---M---N---O---P---Q\n<br>\n/ / / / / / <br>\nI B C D E Y <br>\n\\ / / / / / <br>\n&rsquo;-------------' X</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The horizontal\nline of history A---Q is taken to be the first parent of\neach merge. The commits are:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>I</b>\nis the initial commit, in which <b>foo</b> exists with\ncontents &ldquo;asdf&rdquo;, and a file <b>quux</b> exists\nwith contents &ldquo;quux&rdquo;. Initial commits are\ncompared to an empty tree, so <b>I</b> is !TREESAME.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; In\n<b>A</b>, <b>foo</b> contains just &ldquo;foo&rdquo;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>B</b>\ncontains the same change as <b>A</b>. Its merge <b>M</b> is\ntrivial and hence TREESAME to all parents.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>C</b>\ndoes not change <b>foo</b>, but its merge <b>N</b> changes\nit to &ldquo;foobar&rdquo;, so it is not TREESAME to any\nparent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>D</b>\nsets <b>foo</b> to &ldquo;baz&rdquo;. Its merge <b>O</b>\ncombines the strings from <b>N</b> and <b>D</b> to\n&ldquo;foobarbaz&rdquo;; i.e., it is not TREESAME to any\nparent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>E</b>\nchanges <b>quux</b> to &ldquo;xyzzy&rdquo;, and its merge\n<b>P</b> combines the strings to &ldquo;quux xyzzy&rdquo;.\n<b>P</b> is TREESAME to <b>O</b>, but not to <b>E</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>X</b>\nis an independent root commit that added a new file\n<b>side</b>, and <b>Y</b> modified it. <b>Y</b> is TREESAME\nto <b>X</b>. Its merge <b>Q</b> added <b>side</b> to\n<b>P</b>, and <b>Q</b> is TREESAME to <b>P</b>, but not to\n<b>Y</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>rev-list</b>\nwalks backwards through history, including or excluding\ncommits based on whether <b>--full-history</b> and/or parent\nrewriting (via <b>--parents</b> or <b>--children</b>) are\nused. The following settings are available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Default\nmode</p>\n\n<p style=\"margin-left:17%;\">Commits are included if they\nare not TREESAME to any parent (though this can be changed,\nsee <b>--sparse</b> below). If the commit was a merge, and\nit was TREESAME to one parent, follow only that parent.\n(Even if there are several TREESAME parents, follow only one\nof them.) Otherwise, follow all parents.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This results\nin:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">.-A---N---O\n<br>\n/ / / <br>\nI---------D</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note how the\nrule to only follow the TREESAME parent, if one is\navailable, removed <b>B</b> from consideration entirely.\n<b>C</b> was considered via <b>N</b>, but is TREESAME. Root\ncommits are compared to an empty tree, so <b>I</b> is\n!TREESAME.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Parent/child\nrelations are only visible with <b>--parents</b>, but that\ndoes not affect the commits selected in default mode, so we\nhave shown the parent lines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--full-history\nwithout parent rewriting</p>\n\n<p style=\"margin-left:17%;\">This mode differs from the\ndefault in one point: always follow all parents of a merge,\neven if it is TREESAME to one of them. Even if more than one\nside of the merge has commits that are included, this does\nnot imply that the merge itself is! In the example, we\nget</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">I A B N D O P\nQ</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>M</b> was\nexcluded because it is TREESAME to both parents. <b>E</b>,\n<b>C</b> and <b>B</b> were all walked, but only <b>B</b> was\n!TREESAME, so the others do not appear.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nwithout parent rewriting, it is not really possible to talk\nabout the parent/child relationships between the commits, so\nwe show them disconnected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--full-history\nwith parent rewriting</p>\n\n<p style=\"margin-left:17%;\">Ordinary commits are only\nincluded if they are !TREESAME (though this can be changed,\nsee <b>--sparse</b> below).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Merges are\nalways included. However, their parent list is rewritten:\nAlong each parent, prune away commits that are not included\nthemselves. This results in</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">.-A---M---N---O---P---Q\n<br>\n/ / / / / <br>\nI B / D / <br>\n\\ / / / / <br>\n&rsquo;-------------'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Compare to\n<b>--full-history</b> without rewriting above. Note that\n<b>E</b> was pruned away because it is TREESAME, but the\nparent list of P was rewritten to contain <b>E</b>'s parent\n<b>I</b>. The same happened for <b>C</b> and <b>N</b>, and\n<b>X</b>, <b>Y</b> and <b>Q</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe above settings, you can change whether TREESAME affects\ninclusion:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--dense</p>\n\n<p style=\"margin-left:17%;\">Commits that are walked are\nincluded if they are not TREESAME to any parent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--sparse</p>\n\n<p style=\"margin-left:17%;\">All commits that are walked are\nincluded.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nwithout <b>--full-history</b>, this still simplifies merges:\nif one of the parents is TREESAME, we follow only that one,\nso the other sides of the merge are never walked.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--simplify-merges</p>\n\n<p style=\"margin-left:17%;\">First, build a history graph in\nthe same way that <b>--full-history</b> with parent\nrewriting does (see above).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Then simplify\neach commit <b>C</b> to its replacement <b>C'</b> in the\nfinal history according to the following rules:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Set\n<b>C'</b> to <b>C</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Replace\neach parent <b>P</b> of <b>C'</b> with its simplification\n<b>P'</b>. In the process, drop parents that are ancestors\nof other parents or that are root commits TREESAME to an\nempty tree, and remove duplicates, but take care to never\ndrop all parents that we are TREESAME to.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; If after\nthis parent rewriting, <b>C'</b> is a root or merge commit\n(has zero or &gt;1 parents), a boundary commit, or\n!TREESAME, it remains. Otherwise, it is replaced with its\nonly parent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The effect of\nthis is best shown by way of comparing to\n<b>--full-history</b> with parent rewriting. The example\nturns into:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">.-A---M---N---O\n<br>\n/ / / <br>\nI B D <br>\n\\ / / <br>\n&rsquo;---------'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note the major\ndifferences in <b>N</b>, <b>P</b>, and <b>Q</b> over\n<b>--full-history</b>:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>N</b>'s parent list had <b>I</b> removed, because it is\nan ancestor of the other parent <b>M</b>. Still, <b>N</b>\nremained because it is !TREESAME.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>P</b>'s parent list similarly had <b>I</b> removed.\n<b>P</b> was then removed completely, because it had one\nparent and is TREESAME.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\n<b>Q</b>'s parent list had <b>Y</b> simplified to <b>X</b>.\n<b>X</b> was then removed, because it was a TREESAME root.\n<b>Q</b> was then removed completely, because it had one\nparent and is TREESAME.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is\nanother simplification mode available:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--ancestry-path</p>\n\n<p style=\"margin-left:17%;\">Limit the displayed commits to\nthose directly on the ancestry chain between the\n&ldquo;from&rdquo; and &ldquo;to&rdquo; commits in the given\ncommit range. I.e. only display commits that are ancestor of\nthe &ldquo;to&rdquo; commit and descendants of the\n&ldquo;from&rdquo; commit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As an example\nuse case, consider the following commit history:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">D---E-------F\n<br>\n/ \\ \\ <br>\nB---C---G---H---I---J <br>\n/ \\ <br>\nA-------K---------------L--M</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A regular\n<i>D..M</i> computes the set of commits that are ancestors\nof <b>M</b>, but excludes the ones that are ancestors of\n<b>D</b>. This is useful to see what happened to the history\nleading to <b>M</b> since <b>D</b>, in the sense that\n&ldquo;what does <b>M</b> have that did not exist in\n<b>D</b>&rdquo;. The result in this example would be all the\ncommits, except <b>A</b> and <b>B</b> (and <b>D</b> itself,\nof course).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When we want to\nfind out what commits in <b>M</b> are contaminated with the\nbug introduced by <b>D</b> and need fixing, however, we\nmight want to view only the subset of <i>D..M</i> that are\nactually descendants of <b>D</b>, i.e. excluding <b>C</b>\nand <b>K</b>. This is exactly what the\n<b>--ancestry-path</b> option does. Applied to the\n<i>D..M</i> range, it results in:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">E-------F <br>\n\\ \\ <br>\nG---H---I---J <br>\n\\ <br>\nL--M</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before\ndiscussing another option, <b>--show-pulls</b>, we need to\ncreate a new example history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A common\nproblem users face when looking at simplified history is\nthat a commit they know changed a file somehow does not\nappear in the file&rsquo;s simplified history. Let&rsquo;s\ndemonstrate a new example and show how options such as\n<b>--full-history</b> and <b>--simplify-merges</b> works in\nthat case:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">.-A---M-----C--N---O---P\n<br>\n/ / \\ \\ \\/ / / <br>\nI B \\ R-'&rsquo;-Z' / <br>\n\\ / \\/ / <br>\n\\ / /\\ / <br>\n&rsquo;---X--' &rsquo;---Y--'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For this\nexample, suppose <b>I</b> created <b>file.txt</b> which was\nmodified by <b>A</b>, <b>B</b>, and <b>X</b> in different\nways. The single-parent commits <b>C</b>, <b>Z</b>, and\n<b>Y</b> do not change <b>file.txt</b>. The merge commit\n<b>M</b> was created by resolving the merge conflict to\ninclude both changes from <b>A</b> and <b>B</b> and hence is\nnot TREESAME to either. The merge commit <b>R</b>, however,\nwas created by ignoring the contents of <b>file.txt</b> at\n<b>M</b> and taking only the contents of <b>file.txt</b> at\n<b>X</b>. Hence, <b>R</b> is TREESAME to <b>X</b> but not\n<b>M</b>. Finally, the natural merge resolution to create\n<b>N</b> is to take the contents of <b>file.txt</b> at\n<b>R</b>, so <b>N</b> is TREESAME to <b>R</b> but not\n<b>C</b>. The merge commits <b>O</b> and <b>P</b> are\nTREESAME to their first parents, but not to their second\nparents, <b>Z</b> and <b>Y</b> respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using the\ndefault mode, <b>N</b> and <b>R</b> both have a TREESAME\nparent, so those edges are walked and the others are\nignored. The resulting history graph is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">I---X</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using\n<b>--full-history</b>, Git walks every edge. This will\ndiscover the commits <b>A</b> and <b>B</b> and the merge\n<b>M</b>, but also will reveal the merge commits <b>O</b>\nand <b>P</b>. With parent rewriting, the resulting graph\nis:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">.-A---M--------N---O---P\n<br>\n/ / \\ \\ \\/ / / <br>\nI B \\ R-'&rsquo;--' / <br>\n\\ / \\/ / <br>\n\\ / /\\ / <br>\n&rsquo;---X--' &rsquo;------'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, the merge\ncommits <b>O</b> and <b>P</b> contribute extra noise, as\nthey did not actually contribute a change to\n<b>file.txt</b>. They only merged a topic that was based on\nan older version of <b>file.txt</b>. This is a common issue\nin repositories using a workflow where many contributors\nwork in parallel and merge their topic branches along a\nsingle trunk: manu unrelated merges appear in the\n<b>--full-history</b> results.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using the\n<b>--simplify-merges</b> option, the commits <b>O</b> and\n<b>P</b> disappear from the results. This is because the\nrewritten second parents of <b>O</b> and <b>P</b> are\nreachable from their first parents. Those edges are removed\nand then the commits look like single-parent commits that\nare TREESAME to their parent. This also happens to the\ncommit <b>N</b>, resulting in a history view as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">.-A---M--. <br>\n/ / \\ <br>\nI B R <br>\n\\ / / <br>\n\\ / / <br>\n&rsquo;---X--'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this view,\nwe see all of the important single-parent changes from\n<b>A</b>, <b>B</b>, and <b>X</b>. We also see the\ncarefully-resolved merge <b>M</b> and the\nnot-so-carefully-resolved merge <b>R</b>. This is usually\nenough information to determine why the commits <b>A</b> and\n<b>B</b> &quot;disappeared&quot; from history in the default\nview. However, there are a few issues with this\napproach.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first issue\nis performance. Unlike any previous option, the\n<b>--simplify-merges</b> option requires walking the entire\ncommit history before returning a single result. This can\nmake the option difficult to use for very large\nrepositories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The second\nissue is one of auditing. When many contributors are working\non the same repository, it is important which merge commits\nintroduced a change into an important branch. The\nproblematic merge <b>R</b> above is not likely to be the\nmerge commit that was used to merge into an important\nbranch. Instead, the merge <b>N</b> was used to merge\n<b>R</b> and <b>X</b> into the important branch. This commit\nmay have information about why the change <b>X</b> came to\noverride the changes from <b>A</b> and <b>B</b> in its\ncommit message.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-pulls</p>\n\n<p style=\"margin-left:17%;\">In addition to the commits\nshown in the default history, show each merge commit that is\nnot TREESAME to its first parent but is TREESAME to a later\nparent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When a merge\ncommit is included by <b>--show-pulls</b>, the merge is\ntreated as if it &quot;pulled&quot; the change from another\nbranch. When using <b>--show-pulls</b> on this example (and\nno other options) the resulting graph is:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">I---X---R---N</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Here, the merge\ncommits <b>R</b> and <b>N</b> are included because they\npulled the commits <b>X</b> and <b>R</b> into the base\nbranch, respectively. These merges are the reason the\ncommits <b>A</b> and <b>B</b> do not appear in the default\nhistory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\n<b>--show-pulls</b> is paired with <b>--simplify-merges</b>,\nthe graph includes all of the necessary information:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">.-A---M--. N\n<br>\n/ / \\ / <br>\nI B R <br>\n\\ / / <br>\n\\ / / <br>\n&rsquo;---X--'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Notice that\nsince <b>M</b> is reachable from <b>R</b>, the edge from\n<b>N</b> to <b>M</b> was simplified away. However, <b>N</b>\nstill appears in the history as an important commit because\nit &quot;pulled&quot; the change <b>R</b> into the main\nbranch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>--simplify-by-decoration</b> option allows you to view\nonly the big picture of the topology of the history, by\nomitting commits that are not referenced by tags. Commits\nare marked as !TREESAME (in other words, kept after history\nsimplification rules described above) if (1) they are\nreferenced by tags, or (2) they change the contents of the\npaths given on the command line. All other commits are\nmarked as TREESAME (subject to be simplified away).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bisection\nHelpers</b> <br>\n--bisect</p>\n\n<p style=\"margin-left:17%;\">Limit output to the one commit\nobject which is roughly halfway between included and\nexcluded commits. Note that the bad bisection ref\n<b>refs/bisect/bad</b> is added to the included commits (if\nit exists) and the good bisection refs\n<b>refs/bisect/good-*</b> are added to the excluded commits\n(if they exist). Thus, supposing there are no refs in\n<b>refs/bisect/</b>, if</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git rev-list\n--bisect foo ^bar ^baz</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">outputs\n<i>midpoint</i>, the output of the two commands</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git rev-list\nfoo ^midpoint <br>\n$ git rev-list midpoint ^bar ^baz</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">would be of\nroughly the same length. Finding the change which introduces\na regression is thus reduced to a binary search: repeatedly\ngenerate and test new 'midpoint&rsquo;s until the commit\nchain is of length one.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--bisect-vars</p>\n\n<p style=\"margin-left:17%;\">This calculates the same as\n<b>--bisect</b>, except that refs in <b>refs/bisect/</b> are\nnot used, and except that this outputs text ready to be\neval&rsquo;ed by the shell. These lines will assign the name\nof the midpoint revision to the variable <b>bisect_rev</b>,\nand the expected number of commits to be tested after\n<b>bisect_rev</b> is tested to <b>bisect_nr</b>, the\nexpected number of commits to be tested if <b>bisect_rev</b>\nturns out to be good to <b>bisect_good</b>, the expected\nnumber of commits to be tested if <b>bisect_rev</b> turns\nout to be bad to <b>bisect_bad</b>, and the number of\ncommits we are bisecting right now to <b>bisect_all</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--bisect-all</p>\n\n<p style=\"margin-left:17%;\">This outputs all the commit\nobjects between the included and excluded commits, ordered\nby their distance to the included and excluded commits. Refs\nin <b>refs/bisect/</b> are not used. The farthest from them\nis displayed first. (This is the only one displayed by\n<b>--bisect</b>.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is useful\nbecause it makes it easy to choose a good commit to test\nwhen you want to avoid to test some of them for some reason\n(they may not compile for example).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option can\nbe used along with <b>--bisect-vars</b>, in this case, after\nall the sorted commit objects, there will be the same text\nas if <b>--bisect-vars</b> had been used alone.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commit\nOrdering</b> <br>\nBy default, the commits are shown in reverse chronological\norder.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--date-order</p>\n\n<p style=\"margin-left:17%;\">Show no parents before all of\nits children are shown, but otherwise show commits in the\ncommit timestamp order.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--author-date-order</p>\n\n<p style=\"margin-left:17%;\">Show no parents before all of\nits children are shown, but otherwise show commits in the\nauthor timestamp order.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--topo-order</p>\n\n<p style=\"margin-left:17%;\">Show no parents before all of\nits children are shown, and avoid showing commits on\nmultiple lines of history intermixed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example, in\na commit history like this:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">---1----2----4----7\n<br>\n\\ \\ <br>\n3----5----6----8---</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">where the\nnumbers denote the order of commit timestamps, <b>git\nrev-list</b> and friends with <b>--date-order</b> show the\ncommits in the timestamp order: 8 7 6 5 4 3 2 1.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With\n<b>--topo-order</b>, they would show 8 6 5 3 7 4 2 1 (or 8 7\n4 2 6 5 3 1); some older commits are shown before newer ones\nin order to avoid showing the commits from two parallel\ndevelopment track mixed together.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--reverse</p>\n\n<p style=\"margin-left:17%;\">Output the commits chosen to be\nshown (see Commit Limiting section above) in reverse order.\nCannot be combined with <b>--walk-reflogs</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Object\nTraversal</b> <br>\nThese options are mostly targeted for packing of Git\nrepositories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--objects</p>\n\n<p style=\"margin-left:17%;\">Print the object IDs of any\nobject referenced by the listed commits. <b>--objects foo\n^bar</b> thus means &ldquo;send me all object IDs which I\nneed to download if I have the commit object <i>bar</i> but\nnot <i>foo</i>&rdquo;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--in-commit-order</p>\n\n<p style=\"margin-left:17%;\">Print tree and blob ids in\norder of the commits. The tree and blob ids are printed\nafter they are first referenced by a commit.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--objects-edge</p>\n\n<p style=\"margin-left:17%;\">Similar to <b>--objects</b>,\nbut also print the IDs of excluded commits prefixed with a\n&ldquo;-&rdquo; character. This is used by\n<a href=\"https://man.page/1/git-pack-objects\">git-pack-objects(1)</a> to build a &ldquo;thin&rdquo;\npack, which records objects in deltified form based on\nobjects contained in these excluded commits to reduce\nnetwork traffic.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--objects-edge-aggressive</p>\n\n<p style=\"margin-left:17%;\">Similar to\n<b>--objects-edge</b>, but it tries harder to find excluded\ncommits at the cost of increased time. This is used instead\nof <b>--objects-edge</b> to build &ldquo;thin&rdquo; packs\nfor shallow repositories.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--indexed-objects</p>\n\n<p style=\"margin-left:17%;\">Pretend as if all trees and\nblobs used by the index are listed on the command line. Note\nthat you probably want to use <b>--objects</b>, too.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--unpacked</p>\n\n<p style=\"margin-left:17%;\">Only useful with\n<b>--objects</b>; print the object IDs that are not in\npacks.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--object-names</p>\n\n<p style=\"margin-left:17%;\">Only useful with\n<b>--objects</b>; print the names of the object IDs that are\nfound. This is the default behavior.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-object-names</p>\n\n<p style=\"margin-left:17%;\">Only useful with\n<b>--objects</b>; does not print the names of the object IDs\nthat are found. This inverts <b>--object-names</b>. This\nflag allows the output to be more easily parsed by commands\nsuch as <a href=\"https://man.page/1/git-cat-file\">git-cat-file(1)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--filter=&lt;filter-spec&gt;</p>\n\n<p style=\"margin-left:17%;\">Only useful with one of the\n<b>--objects*</b>; omits objects (usually blobs) from the\nlist of printed objects. The <i>&lt;filter-spec&gt;</i> may\nbe one of the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--filter=blob:none</i> omits all blobs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--filter=blob:limit=&lt;n&gt;[kmg]</i> omits blobs larger\nthan n bytes or units. n may be zero. The suffixes k, m, and\ng can be used to name units in KiB, MiB, or GiB. For\nexample, <i>blob:limit=1k</i> is the same as\n<i>blob:limit=1024</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--filter=object:type=(tag|commit|tree|blob)</i> omits all\nobjects which are not of the requested type.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--filter=sparse:oid=&lt;blob-ish&gt;</i> uses a\nsparse-checkout specification contained in the blob (or\nblob-expression) <i>&lt;blob-ish&gt;</i> to omit blobs that\nwould not be required for a sparse checkout on the requested\nrefs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--filter=tree:&lt;depth&gt;</i> omits all blobs and trees\nwhose depth from the root tree is &gt;= &lt;depth&gt;\n(minimum depth if an object is located at multiple depths in\nthe commits traversed). &lt;depth&gt;=0 will not include any\ntrees or blobs unless included explicitly in the\ncommand-line (or standard input when --stdin is used).\n&lt;depth&gt;=1 will include only the tree and blobs which\nare referenced directly by a commit reachable from\n&lt;commit&gt; or an explicitly-given object.\n&lt;depth&gt;=2 is like &lt;depth&gt;=1 while also including\ntrees and blobs one more level removed from an\nexplicitly-given commit or tree.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\nform <i>--filter=sparse:path=&lt;path&gt;</i> that wants to\nread from an arbitrary path on the filesystem has been\ndropped for security reasons.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Multiple\n<i>--filter=</i> flags can be specified to combine filters.\nOnly objects which are accepted by every filter are\nincluded.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--filter=combine:&lt;filter1&gt;+&lt;filter2&gt;+...&lt;filterN&gt;</i>\ncan also be used to combined several filters, but this is\nharder than just repeating the <i>--filter</i> flag and is\nusually not necessary. Filters are joined by <i>+</i> and\nindividual filters are %-encoded (i.e. URL-encoded). Besides\nthe <i>+</i> and <i>%</i> characters, the following\ncharacters are reserved and also must be encoded:\n<b>~!@#$^&amp;*()[]{}\\;&quot;,&lt;&gt;?'&rsquo;</b> as well\nas all characters with ASCII code &lt;= <b>0x20</b>, which\nincludes space and newline.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Other arbitrary\ncharacters can also be encoded. For instance,\n<i>combine:tree:3+blob:none</i> and\n<i>combine:tree%3A3+blob%3Anone</i> are equivalent.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-filter</p>\n\n<p style=\"margin-left:17%;\">Turn off any previous\n<b>--filter=</b> argument.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--filter-provided-objects</p>\n\n<p style=\"margin-left:17%;\">Filter the list of explicitly\nprovided objects, which would otherwise always be printed\neven if they did not match any of the filters. Only useful\nwith <b>--filter=</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--filter-print-omitted</p>\n\n<p style=\"margin-left:17%;\">Only useful with\n<b>--filter=</b>; prints a list of the objects omitted by\nthe filter. Object IDs are prefixed with a &ldquo;~&rdquo;\ncharacter.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--missing=&lt;missing-action&gt;</p>\n\n<p style=\"margin-left:17%;\">A debug option to help with\nfuture &quot;partial clone&quot; development. This option\nspecifies how missing objects are handled.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--missing=error</i> requests that rev-list stop with an\nerror if a missing object is encountered. This is the\ndefault action.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--missing=allow-any</i> will allow object traversal to\ncontinue if a missing object is encountered. Missing objects\nwill silently be omitted from the results.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--missing=allow-promisor</i> is like <i>allow-any</i>,\nbut will only allow object traversal to continue for\nEXPECTED promisor missing objects. Unexpected missing\nobjects will raise an error.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form\n<i>--missing=print</i> is like <i>allow-any</i>, but will\nalso print a list of the missing objects. Object IDs are\nprefixed with a &ldquo;?&rdquo; character.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--exclude-promisor-objects</p>\n\n<p style=\"margin-left:17%;\">(For internal use only.)\nPrefilter object traversal at promisor boundary. This is\nused with partial clone. This is stronger than\n<b>--missing=allow-promisor</b> because it limits the\ntraversal, rather than just silencing errors about missing\nobjects.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-walk[=(sorted|unsorted)]</p>\n\n<p style=\"margin-left:17%;\">Only show the given commits,\nbut do not traverse their ancestors. This has no effect if a\nrange is specified. If the argument <b>unsorted</b> is\ngiven, the commits are shown in the order they were given on\nthe command line. Otherwise (if <b>sorted</b> or no argument\nwas given), the commits are shown in reverse chronological\norder by commit time. Cannot be combined with\n<b>--graph</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--do-walk</p>\n\n<p style=\"margin-left:17%;\">Overrides a previous\n<b>--no-walk</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commit\nFormatting</b> <br>\nUsing these options, <a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a> will act similar\nto the more specialized family of commit log tools:\n<a href=\"https://man.page/1/git-log\">git-log(1)</a>, <a href=\"https://man.page/1/git-show\">git-show(1)</a>, and\n<a href=\"https://man.page/1/git-whatchanged\">git-whatchanged(1)</a></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pretty[=&lt;format&gt;],\n--format=&lt;format&gt;</p>\n\n<p style=\"margin-left:17%;\">Pretty-print the contents of\nthe commit logs in a given format, where\n<i>&lt;format&gt;</i> can be one of <i>oneline</i>,\n<i>short</i>, <i>medium</i>, <i>full</i>, <i>fuller</i>,\n<i>reference</i>, <i>email</i>, <i>raw</i>,\n<i>format:&lt;string&gt;</i> and\n<i>tformat:&lt;string&gt;</i>. When <i>&lt;format&gt;</i> is\nnone of the above, and has <i>%placeholder</i> in it, it\nacts as if <i>--pretty=tformat:&lt;format&gt;</i> were\ngiven.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the\n&quot;PRETTY FORMATS&quot; section for some additional\ndetails for each format. When <i>=&lt;format&gt;</i> part is\nomitted, it defaults to <i>medium</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: you can\nspecify the default pretty format in the repository\nconfiguration (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--abbrev-commit</p>\n\n<p style=\"margin-left:17%;\">Instead of showing the full\n40-byte hexadecimal commit object name, show a prefix that\nnames the object uniquely. &quot;--abbrev=&lt;n&gt;&quot;\n(which also modifies diff output, if it is displayed) option\ncan be used to specify the minimum length of the prefix.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This should\nmake &quot;--pretty=oneline&quot; a whole lot more readable\nfor people using 80-column terminals.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-abbrev-commit</p>\n\n<p style=\"margin-left:17%;\">Show the full 40-byte\nhexadecimal commit object name. This negates\n<b>--abbrev-commit</b>, either explicit or implied by other\noptions such as &quot;--oneline&quot;. It also overrides the\n<b>log.abbrevCommit</b> variable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--oneline</p>\n\n<p style=\"margin-left:17%;\">This is a shorthand for\n&quot;--pretty=oneline --abbrev-commit&quot; used\ntogether.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--encoding=&lt;encoding&gt;</p>\n\n<p style=\"margin-left:17%;\">Commit objects record the\ncharacter encoding used for the log message in their\nencoding header; this option can be used to tell the command\nto re-code the commit log message in the encoding preferred\nby the user. For non plumbing commands this defaults to\nUTF-8. Note that if an object claims to be encoded in\n<b>X</b> and we are outputting in <b>X</b>, we will output\nthe object verbatim; this means that invalid sequences in\nthe original commit may be copied to the output. Likewise,\nif iconv(3) fails to convert the commit, we will quietly\noutput the original object verbatim.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--expand-tabs=&lt;n&gt;,\n--expand-tabs, --no-expand-tabs</p>\n\n<p style=\"margin-left:17%;\">Perform a tab expansion\n(replace each tab with enough spaces to fill to the next\ndisplay column that is multiple of <i>&lt;n&gt;</i>) in the\nlog message before showing it in the output.\n<b>--expand-tabs</b> is a short-hand for\n<b>--expand-tabs=8</b>, and <b>--no-expand-tabs</b> is a\nshort-hand for <b>--expand-tabs=0</b>, which disables tab\nexpansion.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By default,\ntabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e. <i>medium</i>, which is the\ndefault, <i>full</i>, and <i>fuller</i>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-signature</p>\n\n<p style=\"margin-left:17%;\">Check the validity of a signed\ncommit object by passing the signature to <b>gpg\n--verify</b> and show the output.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--relative-date</p>\n\n<p style=\"margin-left:17%;\">Synonym for\n<b>--date=relative</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--date=&lt;format&gt;</p>\n\n<p style=\"margin-left:17%;\">Only takes effect for dates\nshown in human-readable format, such as when using\n<b>--pretty</b>. <b>log.date</b> config variable sets a\ndefault value for the log command&rsquo;s <b>--date</b>\noption. By default, dates are shown in the original time\nzone (either committer&rsquo;s or author&rsquo;s). If\n<b>-local</b> is appended to the format (e.g.,\n<b>iso-local</b>), the user&rsquo;s local time zone is used\ninstead.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=relative</b>\nshows dates relative to the current time, e.g. &ldquo;2\nhours ago&rdquo;. The <b>-local</b> option has no effect for\n<b>--date=relative</b>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=local</b>\nis an alias for <b>--date=default-local</b>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=iso</b>\n(or <b>--date=iso8601</b>) shows timestamps in a ISO\n8601-like format. The differences to the strict ISO 8601\nformat are:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; a space\ninstead of the <b>T</b> date/time delimiter</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; a space\nbetween time and time zone</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; no colon\nbetween hours and minutes of the time zone</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=iso-strict</b>\n(or <b>--date=iso8601-strict</b>) shows timestamps in strict\nISO 8601 format.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=rfc</b>\n(or <b>--date=rfc2822</b>) shows timestamps in RFC 2822\nformat, often found in email messages.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=short</b>\nshows only the date, but not the time, in <b>YYYY-MM-DD</b>\nformat.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=raw</b>\nshows the date as seconds since the epoch (1970-01-01\n00:00:00 UTC), followed by a space, and then the timezone as\nan offset from UTC (a <b>+</b> or <b>-</b> with four digits;\nthe first two are hours, and the second two are minutes).\nI.e., as if the timestamp were formatted with\n<b>strftime(&quot;%s %z&quot;)</b>). Note that the\n<b>-local</b> option does not affect the seconds-since-epoch\nvalue (which is always measured in UTC), but does switch the\naccompanying timezone value.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=human</b>\nshows the timezone if the timezone does not match the\ncurrent time-zone, and doesn&rsquo;t print the whole date if\nthat matches (ie skip printing year for dates that are\n&quot;this year&quot;, but also skip the whole date itself\nif it&rsquo;s in the last few days and we can just say what\nweekday it was). For older dates the hour and minute is also\nomitted.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=unix</b>\nshows the date as a Unix epoch timestamp (seconds since\n1970). As with <b>--raw</b>, this is always in UTC and\ntherefore <b>-local</b> has no effect.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=format:...</b>\nfeeds the format <b>...</b> to your system <b>strftime</b>,\nexcept for %z and %Z, which are handled internally. Use\n<b>--date=format:%c</b> to show the date in your system\nlocale&rsquo;s preferred format. See the <b>strftime</b>\nmanual for a complete list of format placeholders. When\nusing <b>-local</b>, the correct syntax is\n<b>--date=format-local:...</b>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>--date=default</b>\nis the default format, and is similar to\n<b>--date=rfc2822</b>, with a few exceptions:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; there is\nno comma after the day-of-week</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; the time\nzone is omitted when the local time zone is used</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--header</p>\n\n<p style=\"margin-left:17%;\">Print the contents of the\ncommit in raw-format; each record is separated with a NUL\ncharacter.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--no-commit-header</p>\n\n<p style=\"margin-left:17%;\">Suppress the header line\ncontaining &quot;commit&quot; and the object ID printed\nbefore the specified format. This has no effect on the\nbuilt-in formats; only custom formats are affected.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--commit-header</p>\n\n<p style=\"margin-left:17%;\">Overrides a previous\n<b>--no-commit-header</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--parents</p>\n\n<p style=\"margin-left:17%;\">Print also the parents of the\ncommit (in the form &quot;commit parent...&quot;). Also\nenables parent rewriting, see <i>History Simplification</i>\nabove.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--children</p>\n\n<p style=\"margin-left:17%;\">Print also the children of the\ncommit (in the form &quot;commit child...&quot;). Also\nenables parent rewriting, see <i>History Simplification</i>\nabove.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--timestamp</p>\n\n<p style=\"margin-left:17%;\">Print the raw commit\ntimestamp.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--left-right</p>\n\n<p style=\"margin-left:17%;\">Mark which side of a symmetric\ndifference a commit is reachable from. Commits from the left\nside are prefixed with <b>&lt;</b> and those from the right\nwith <b>&gt;</b>. If combined with <b>--boundary</b>, those\ncommits are prefixed with <b>-</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example, if\nyou have this topology:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">y---b---b\nbranch B <br>\n/ \\ / <br>\n/ . <br>\n/ / \\ <br>\no---x---a---a branch A</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">you would get\nan output like this:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git rev-list\n--left-right --boundary --pretty=oneline A...B</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&gt;bbbbbbb...\n3rd on b <br>\n&gt;bbbbbbb... 2nd on b <br>\n&lt;aaaaaaa... 3rd on a <br>\n&lt;aaaaaaa... 2nd on a <br>\n-yyyyyyy... 1st on b <br>\n-xxxxxxx... 1st on a</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--graph</p>\n\n<p style=\"margin-left:17%;\">Draw a text-based graphical\nrepresentation of the commit history on the left hand side\nof the output. This may cause extra lines to be printed in\nbetween commits, in order for the graph history to be drawn\nproperly. Cannot be combined with <b>--no-walk</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This enables\nparent rewriting, see <i>History Simplification</i>\nabove.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This implies\nthe <b>--topo-order</b> option by default, but the\n<b>--date-order</b> option may also be specified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--show-linear-break[=&lt;barrier&gt;]</p>\n\n<p style=\"margin-left:17%;\">When --graph is not used, all\nhistory branches are flattened which can make it hard to see\nthat the two consecutive commits do not belong to a linear\nbranch. This option puts a barrier in between them in that\ncase. If <b>&lt;barrier&gt;</b> is specified, it is the\nstring that will be shown instead of the default one.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--count</p>\n\n<p style=\"margin-left:17%;\">Print a number stating how many\ncommits would have been listed, and suppress all other\noutput. When used together with <b>--left-right</b>, instead\nprint the counts for left and right commits, separated by a\ntab. When used together with <b>--cherry-mark</b>, omit\npatch equivalent commits from these counts and print the\ncount for equivalent commits separated by a tab.</p>\n\n<h2>PRETTY FORMATS\n<a name=\"PRETTY FORMATS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the commit\nis a merge, and if the pretty-format is not <i>oneline</i>,\n<i>email</i> or <i>raw</i>, an additional line is inserted\nbefore the <i>Author:</i> line. This line begins with\n&quot;Merge: &quot; and the hashes of ancestral commits are\nprinted, separated by spaces. Note that the listed commits\nmay not necessarily be the list of the <b>direct</b> parent\ncommits if you have limited your view of history: for\nexample, if you are only interested in changes related to a\ncertain directory or file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are\nseveral built-in formats, and you can define additional\nformats by setting a pretty.&lt;name&gt; config option to\neither another format name, or a <i>format:</i> string, as\ndescribed below (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>). Here are the\ndetails of the built-in formats:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>oneline</i></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;hash&gt;\n&lt;title line&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is\ndesigned to be as compact as possible.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>short</i></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">commit\n&lt;hash&gt; <br>\nAuthor: &lt;author&gt;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;title\nline&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>medium</i></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">commit\n&lt;hash&gt; <br>\nAuthor: &lt;author&gt; <br>\nDate: &lt;author date&gt;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;title\nline&gt;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;full commit\nmessage&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>full</i></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">commit\n&lt;hash&gt; <br>\nAuthor: &lt;author&gt; <br>\nCommit: &lt;committer&gt;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;title\nline&gt;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;full commit\nmessage&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>fuller</i></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">commit\n&lt;hash&gt; <br>\nAuthor: &lt;author&gt; <br>\nAuthorDate: &lt;author date&gt; <br>\nCommit: &lt;committer&gt; <br>\nCommitDate: &lt;committer date&gt;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;title\nline&gt;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;full commit\nmessage&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>reference</i></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;abbrev\nhash&gt; (&lt;title line&gt;, &lt;short author date&gt;)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This format is\nused to refer to another commit in a commit message and is\nthe same as <b>--pretty='format:%C(auto)%h (%s, %ad)'</b>.\nBy default, the date is formatted with <b>--date=short</b>\nunless another <b>--date</b> option is explicitly specified.\nAs with any <b>format:</b> with format placeholders, its\noutput is not affected by other options like\n<b>--decorate</b> and <b>--walk-reflogs</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>email</i></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">From\n&lt;hash&gt; &lt;date&gt; <br>\nFrom: &lt;author&gt; <br>\nDate: &lt;author date&gt; <br>\nSubject: [PATCH] &lt;title line&gt;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&lt;full commit\nmessage&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>mboxrd</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Like\n<i>email</i>, but lines in the commit message starting with\n&quot;From &quot; (preceded by zero or more\n&quot;&gt;&quot;) are quoted with &quot;&gt;&quot; so they\naren&rsquo;t confused as starting a new commit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>raw</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The <i>raw</i>\nformat shows the entire commit exactly as stored in the\ncommit object. Notably, the hashes are displayed in full,\nregardless of whether --abbrev or --no-abbrev are used, and\n<i>parents</i> information show the true parent commits,\nwithout taking grafts or history simplification into\naccount. Note that this format affects the way commits are\ndisplayed, but not the way the diff is shown e.g. with\n<b>git log --raw</b>. To get full object names in a raw diff\nformat, use <b>--no-abbrev</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>format:&lt;string&gt;</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>format:&lt;string&gt;</i> format allows you to specify\nwhich information you want to show. It works a little bit\nlike printf format, with the notable exception that you get\na newline with <i>%n</i> instead of <i>\\n</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">E.g,\n<i>format:&quot;The author of %h was %an, %ar%nThe title was\n&gt;&gt;%s&lt;&lt;%n&quot;</i> would show something like\nthis:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">The author of\nfe6e0ee was Junio C Hamano, 23 hours ago <br>\nThe title was &gt;&gt;t4119: test autocomputing -p&lt;n&gt;\nfor traditional diff input.&lt;&lt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\nplaceholders are:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nPlaceholders that expand to a single literal character:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%n</i></p>\n\n<p style=\"margin-left:29%;\">newline</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%%</i></p>\n\n<p style=\"margin-left:29%;\">a raw <i>%</i></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%x00</i></p>\n\n<p style=\"margin-left:29%;\">print a byte from a hex\ncode</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nPlaceholders that affect formatting of later\nplaceholders:</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%Cred</i></p>\n\n<p style=\"margin-left:29%;\">switch color to red</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%Cgreen</i></p>\n\n<p style=\"margin-left:29%;\">switch color to green</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%Cblue</i></p>\n\n<p style=\"margin-left:29%;\">switch color to blue</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%Creset</i></p>\n\n<p style=\"margin-left:29%;\">reset color</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%C(...)</i></p>\n\n<p style=\"margin-left:29%;\">color specification, as\ndescribed under Values in the &quot;CONFIGURATION FILE&quot;\nsection of <a href=\"https://man.page/1/git-config\">git-config(1)</a>. By default, colors are\nshown only when enabled for log output (by\n<b>color.diff</b>, <b>color.ui</b>, or <b>--color</b>, and\nrespecting the <b>auto</b> settings of the former if we are\ngoing to a terminal). <b>%C(auto,...)</b> is accepted as a\nhistorical synonym for the default (e.g.,\n<b>%C(auto,red)</b>). Specifying <b>%C(always,...)</b> will\nshow the colors even when color is not otherwise enabled\n(though consider just using <b>--color=always</b> to enable\ncolor for the whole output, including this format and\nanything else git might color). <b>auto</b> alone (i.e.\n<b>%C(auto)</b>) will turn on auto coloring on the next\nplaceholders until the color is switched again.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%m</i></p>\n\n<p style=\"margin-left:29%;\">left (<b>&lt;</b>), right\n(<b>&gt;</b>) or boundary (<b>-</b>) mark</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%w([&lt;w&gt;[,&lt;i1&gt;[,&lt;i2&gt;]]])</i></p>\n\n<p style=\"margin-left:29%;\">switch line wrapping, like the\n-w option of <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a>.</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%&lt;(&lt;N&gt;[,trunc|ltrunc|mtrunc])</i></p>\n\n<p style=\"margin-left:29%;\">make the next placeholder take\nat least N columns, padding spaces on the right if\nnecessary. Optionally truncate at the beginning (ltrunc),\nthe middle (mtrunc) or the end (trunc) if the output is\nlonger than N columns. Note that truncating only works\ncorrectly with N &gt;= 2.</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%&lt;|(&lt;N&gt;)</i></p>\n\n<p style=\"margin-left:29%;\">make the next placeholder take\nat least until Nth columns, padding spaces on the right if\nnecessary</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%&gt;(&lt;N&gt;)</i>,\n<i>%&gt;|(&lt;N&gt;)</i></p>\n\n<p style=\"margin-left:29%;\">similar to\n<i>%&lt;(&lt;N&gt;)</i>, <i>%&lt;|(&lt;N&gt;)</i>\nrespectively, but padding spaces on the left</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%&gt;&gt;(&lt;N&gt;)</i>,\n<i>%&gt;&gt;|(&lt;N&gt;)</i></p>\n\n<p style=\"margin-left:29%;\">similar to\n<i>%&gt;(&lt;N&gt;)</i>, <i>%&gt;|(&lt;N&gt;)</i>\nrespectively, except that if the next placeholder takes more\nspaces than given and there are spaces on its left, use\nthose spaces</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%&gt;&lt;(&lt;N&gt;)</i>,\n<i>%&gt;&lt;|(&lt;N&gt;)</i></p>\n\n<p style=\"margin-left:29%;\">similar to\n<i>%&lt;(&lt;N&gt;)</i>, <i>%&lt;|(&lt;N&gt;)</i>\nrespectively, but padding both sides (i.e. the text is\ncentered)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nPlaceholders that expand to information extracted from the\ncommit:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%H</i></p>\n\n<p style=\"margin-left:29%;\">commit hash</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%h</i></p>\n\n<p style=\"margin-left:29%;\">abbreviated commit hash</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%T</i></p>\n\n<p style=\"margin-left:29%;\">tree hash</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%t</i></p>\n\n<p style=\"margin-left:29%;\">abbreviated tree hash</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%P</i></p>\n\n<p style=\"margin-left:29%;\">parent hashes</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%p</i></p>\n\n<p style=\"margin-left:29%;\">abbreviated parent hashes</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%an</i></p>\n\n<p style=\"margin-left:29%;\">author name</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%aN</i></p>\n\n<p style=\"margin-left:29%;\">author name (respecting\n.mailmap, see <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a> or\n<a href=\"https://man.page/1/git-blame\">git-blame(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ae</i></p>\n\n<p style=\"margin-left:29%;\">author email</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%aE</i></p>\n\n<p style=\"margin-left:29%;\">author email (respecting\n.mailmap, see <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a> or\n<a href=\"https://man.page/1/git-blame\">git-blame(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%al</i></p>\n\n<p style=\"margin-left:29%;\">author email local-part (the\npart before the <i>@</i> sign)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%aL</i></p>\n\n<p style=\"margin-left:29%;\">author local-part (see\n<i>%al</i>) respecting .mailmap, see <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a>\nor <a href=\"https://man.page/1/git-blame\">git-blame(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ad</i></p>\n\n<p style=\"margin-left:29%;\">author date (format respects\n--date= option)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%aD</i></p>\n\n<p style=\"margin-left:29%;\">author date, RFC2822 style</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ar</i></p>\n\n<p style=\"margin-left:29%;\">author date, relative</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%at</i></p>\n\n<p style=\"margin-left:29%;\">author date, UNIX timestamp</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ai</i></p>\n\n<p style=\"margin-left:29%;\">author date, ISO 8601-like\nformat</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%aI</i></p>\n\n<p style=\"margin-left:29%;\">author date, strict ISO 8601\nformat</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%as</i></p>\n\n<p style=\"margin-left:29%;\">author date, short format\n(<b>YYYY-MM-DD</b>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ah</i></p>\n\n<p style=\"margin-left:29%;\">author date, human style (like\nthe <b>--date=human</b> option of\n<a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cn</i></p>\n\n<p style=\"margin-left:29%;\">committer name</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cN</i></p>\n\n<p style=\"margin-left:29%;\">committer name (respecting\n.mailmap, see <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a> or\n<a href=\"https://man.page/1/git-blame\">git-blame(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ce</i></p>\n\n<p style=\"margin-left:29%;\">committer email</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cE</i></p>\n\n<p style=\"margin-left:29%;\">committer email (respecting\n.mailmap, see <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a> or\n<a href=\"https://man.page/1/git-blame\">git-blame(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cl</i></p>\n\n<p style=\"margin-left:29%;\">committer email local-part (the\npart before the <i>@</i> sign)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cL</i></p>\n\n<p style=\"margin-left:29%;\">committer local-part (see\n<i>%cl</i>) respecting .mailmap, see <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a>\nor <a href=\"https://man.page/1/git-blame\">git-blame(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cd</i></p>\n\n<p style=\"margin-left:29%;\">committer date (format respects\n--date= option)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cD</i></p>\n\n<p style=\"margin-left:29%;\">committer date, RFC2822\nstyle</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cr</i></p>\n\n<p style=\"margin-left:29%;\">committer date, relative</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ct</i></p>\n\n<p style=\"margin-left:29%;\">committer date, UNIX\ntimestamp</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ci</i></p>\n\n<p style=\"margin-left:29%;\">committer date, ISO 8601-like\nformat</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cI</i></p>\n\n<p style=\"margin-left:29%;\">committer date, strict ISO 8601\nformat</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%cs</i></p>\n\n<p style=\"margin-left:29%;\">committer date, short format\n(<b>YYYY-MM-DD</b>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ch</i></p>\n\n<p style=\"margin-left:29%;\">committer date, human style\n(like the <b>--date=human</b> option of\n<a href=\"https://man.page/1/git-rev-list\">git-rev-list(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%d</i></p>\n\n<p style=\"margin-left:29%;\">ref names, like the --decorate\noption of <a href=\"https://man.page/1/git-log\">git-log(1)</a></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%D</i></p>\n\n<p style=\"margin-left:29%;\">ref names without the &quot;\n(&quot;, &quot;)&quot; wrapping.</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%(describe[:options])</i></p>\n\n<p style=\"margin-left:29%;\">human-readable name, like\n<a href=\"https://man.page/1/git-describe\">git-describe(1)</a>; empty string for undescribable\ncommits. The <b>describe</b> string may be followed by a\ncolon and zero or more comma-separated options. Descriptions\ncan be inconsistent when tags are added or removed at the\nsame time.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>match=&lt;pattern&gt;</i>: Only consider tags matching\nthe given <b>glob(7)</b> pattern, excluding the\n&quot;refs/tags/&quot; prefix.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>exclude=&lt;pattern&gt;</i>: Do not consider tags\nmatching the given <b>glob(7)</b> pattern, excluding the\n&quot;refs/tags/&quot; prefix.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%S</i></p>\n\n<p style=\"margin-left:29%;\">ref name given on the command\nline by which the commit was reached (like <b>git log\n--source</b>), only works with <b>git log</b></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%e</i></p>\n\n<p style=\"margin-left:29%;\">encoding</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%s</i></p>\n\n<p style=\"margin-left:29%;\">subject</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%f</i></p>\n\n<p style=\"margin-left:29%;\">sanitized subject line,\nsuitable for a filename</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%b</i></p>\n\n<p style=\"margin-left:29%;\">body</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%B</i></p>\n\n<p style=\"margin-left:29%;\">raw body (unwrapped subject and\nbody)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%GG</i></p>\n\n<p style=\"margin-left:29%;\">raw verification message from\nGPG for a signed commit</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%G?</i></p>\n\n<p style=\"margin-left:29%;\">show &quot;G&quot; for a good\n(valid) signature, &quot;B&quot; for a bad signature,\n&quot;U&quot; for a good signature with unknown validity,\n&quot;X&quot; for a good signature that has expired,\n&quot;Y&quot; for a good signature made by an expired key,\n&quot;R&quot; for a good signature made by a revoked key,\n&quot;E&quot; if the signature cannot be checked (e.g.\nmissing key) and &quot;N&quot; for no signature</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%GS</i></p>\n\n<p style=\"margin-left:29%;\">show the name of the signer for\na signed commit</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%GK</i></p>\n\n<p style=\"margin-left:29%;\">show the key used to sign a\nsigned commit</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%GF</i></p>\n\n<p style=\"margin-left:29%;\">show the fingerprint of the key\nused to sign a signed commit</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%GP</i></p>\n\n<p style=\"margin-left:29%;\">show the fingerprint of the\nprimary key whose subkey was used to sign a signed\ncommit</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%GT</i></p>\n\n<p style=\"margin-left:29%;\">show the trust level for the\nkey used to sign a signed commit</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%gD</i></p>\n\n<p style=\"margin-left:29%;\">reflog selector, e.g.,\n<b>refs/stash@{1}</b> or <b>refs/stash@{2 minutes ago}</b>;\nthe format follows the rules described for the <b>-g</b>\noption. The portion before the <b>@</b> is the refname as\ngiven on the command line (so <b>git log -g\nrefs/heads/master</b> would yield\n<b>refs/heads/master@{0}</b>).</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%gd</i></p>\n\n<p style=\"margin-left:29%;\">shortened reflog selector; same\nas <b>%gD</b>, but the refname portion is shortened for\nhuman readability (so <b>refs/heads/master</b> becomes just\n<b>master</b>).</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%gn</i></p>\n\n<p style=\"margin-left:29%;\">reflog identity name</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%gN</i></p>\n\n<p style=\"margin-left:29%;\">reflog identity name\n(respecting .mailmap, see <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a> or\n<a href=\"https://man.page/1/git-blame\">git-blame(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%ge</i></p>\n\n<p style=\"margin-left:29%;\">reflog identity email</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%gE</i></p>\n\n<p style=\"margin-left:29%;\">reflog identity email\n(respecting .mailmap, see <a href=\"https://man.page/1/git-shortlog\">git-shortlog(1)</a> or\n<a href=\"https://man.page/1/git-blame\">git-blame(1)</a>)</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%gs</i></p>\n\n<p style=\"margin-left:29%;\">reflog subject</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><i>%(trailers[:options])</i></p>\n\n<p style=\"margin-left:29%;\">display the trailers of the\nbody as interpreted by <a href=\"https://man.page/1/git-interpret-trailers\">git-interpret-trailers(1)</a>. The\n<b>trailers</b> string may be followed by a colon and zero\nor more comma-separated options. If any option is provided\nmultiple times the last occurrence wins.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">The boolean\noptions accept an optional value <b>[=&lt;BOOL&gt;]</b>. The\nvalues <b>true</b>, <b>false</b>, <b>on</b>, <b>off</b> etc.\nare all accepted. See the &quot;boolean&quot; sub-section in\n&quot;EXAMPLES&quot; in <a href=\"https://man.page/1/git-config\">git-config(1)</a>. If a boolean\noption is given with no value, it&rsquo;s enabled.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>key=&lt;K&gt;</i>: only show trailers with specified key.\nMatching is done case-insensitively and trailing colon is\noptional. If option is given multiple times trailer lines\nmatching any of the keys are shown. This option\nautomatically enables the <b>only</b> option so that\nnon-trailer lines in the trailer block are hidden. If that\nis not desired it can be disabled with <b>only=false</b>.\nE.g., <b>%(trailers:key=Reviewed-by)</b> shows trailer lines\nwith key <b>Reviewed-by</b>.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>only[=&lt;BOOL&gt;]</i>: select whether non-trailer lines\nfrom the trailer block should be included.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>separator=&lt;SEP&gt;</i>: specify a separator inserted\nbetween trailer lines. When this option is not given each\ntrailer line is terminated with a line feed character. The\nstring SEP may contain the literal formatting codes\ndescribed above. To use comma as separator one must use\n<b>%x2C</b> as it would otherwise be parsed as next option.\nE.g., <b>%(trailers:key=Ticket,separator=%x2C )</b> shows\nall trailer lines whose key is &quot;Ticket&quot; separated\nby a comma and a space.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>unfold[=&lt;BOOL&gt;]</i>: make it behave as if\ninterpret-trailer&rsquo;s <b>--unfold</b> option was given.\nE.g., <b>%(trailers:only,unfold=true)</b> unfolds and shows\nall trailer lines.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>keyonly[=&lt;BOOL&gt;]</i>: only show the key part of the\ntrailer.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>valueonly[=&lt;BOOL&gt;]</i>: only show the value part of\nthe trailer.</p>\n\n<p style=\"margin-left:35%; margin-top: 1em\">&bull;\n<i>key_value_separator=&lt;SEP&gt;</i>: specify a separator\ninserted between trailer lines. When this option is not\ngiven each trailer key-value pair is separated by &quot;:\n&quot;. Otherwise it shares the same semantics as\n<i>separator=&lt;SEP&gt;</i> above.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nSome placeholders may depend on other options given to the\nrevision traversal engine. For example, the <b>%g*</b>\nreflog options will insert an empty string unless we are\ntraversing reflog entries (e.g., by <b>git log -g</b>). The\n<b>%d</b> and <b>%D</b> placeholders will use the\n&quot;short&quot; decoration format if <b>--decorate</b> was\nnot already provided on the command line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you add a\n<b>+</b> (plus sign) after <i>%</i> of a placeholder, a\nline-feed is inserted immediately before the expansion if\nand only if the placeholder expands to a non-empty\nstring.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you add a\n<b>-</b> (minus sign) after <i>%</i> of a placeholder, all\nconsecutive line-feeds immediately preceding the expansion\nare deleted if and only if the placeholder expands to an\nempty string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you add a\n&rsquo; &rsquo; (space) after <i>%</i> of a placeholder, a\nspace is inserted immediately before the expansion if and\nonly if the placeholder expands to a non-empty string.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>tformat:</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>tformat:</i> format works exactly like <i>format:</i>,\nexcept that it provides &quot;terminator&quot; semantics\ninstead of &quot;separator&quot; semantics. In other words,\neach commit has the message terminator character (usually a\nnewline) appended, rather than a separator placed between\nentries. This means that the final entry of a single-line\nformat will be properly terminated with a new line, just as\nthe &quot;oneline&quot; format does. For example:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git log -2\n--pretty=format:%h 4da45bef \\ <br>\n| perl -pe '$_ .= &quot; -- NO NEWLINE\\n&quot; unless /\\n/'\n<br>\n4da45be <br>\n7134973 -- NO NEWLINE</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git log -2\n--pretty=tformat:%h 4da45bef \\ <br>\n| perl -pe '$_ .= &quot; -- NO NEWLINE\\n&quot; unless /\\n/'\n<br>\n4da45be <br>\n7134973</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In addition,\nany unrecognized string that has a <b>%</b> in it is\ninterpreted as if it has <b>tformat:</b> in front of it. For\nexample, these two are equivalent:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git log -2\n--pretty=tformat:%h 4da45bef <br>\n$ git log -2 --pretty=%h 4da45bef</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPrint the list of commits reachable from the current\nbranch.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nrev-list HEAD</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPrint the list of commits on this branch, but not present in\nthe upstream branch.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nrev-list @{upstream}..HEAD</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nFormat commits with their author and commit message (see\nalso the porcelain <a href=\"https://man.page/1/git-log\">git-log(1)</a>).</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nrev-list --format=medium HEAD</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nFormat commits along with their diffs (see also the\nporcelain <a href=\"https://man.page/1/git-log\">git-log(1)</a>, which can do this in a single\nprocess).</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nrev-list HEAD | <br>\ngit diff-tree --stdin --format=medium -p</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPrint the list of commits on the current branch that touched\nany file in the <b>Documentation</b> directory.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nrev-list HEAD -- Documentation/</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPrint the list of commits authored by you in the past year,\non any branch, tag, or other ref.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nrev-list --author=you@example.com --since=1.year.ago\n--all</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nPrint the list of objects reachable from the current branch\n(i.e., all commits and the blobs and trees they\ncontain).</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nrev-list --objects HEAD</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nCompare the disk size of all reachable objects, versus those\nreachable from reflogs, versus the total packed size. This\ncan tell you whether running <b>git repack -ad</b> might\nreduce the repository size (by dropping unreachable\nobjects), and whether expiring reflogs might help.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>#\nreachable objects <br>\ngit rev-list --disk-usage --objects --all <br>\n# plus reflogs <br>\ngit rev-list --disk-usage --objects --all --reflog <br>\n# total disk size used <br>\ndu -c .git/objects/pack/*.pack .git/objects/??/* <br>\n# alternative to du: add up &quot;size&quot; and\n&quot;size-pack&quot; fields <br>\ngit count-objects -v</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nReport the disk size of each branch, not including objects\nused by the current branch. This can find outliers that are\ncontributing to a bloated repository size (e.g., because\nsomebody accidentally committed large build\nartifacts).</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nfor-each-ref --format='%(refname)' | <br>\nwhile read branch <br>\ndo <br>\nsize=$(git rev-list --disk-usage --objects HEAD..$branch)\n<br>\necho &quot;$size $branch&quot; <br>\ndone | <br>\nsort -n</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>&bull;\nCompare the on-disk size of branches in one group of refs,\nexcluding another. If you co-mingle objects from multiple\nremotes in a single repository, this can show which remotes\nare contributing to the repository size (taking the size of\n<b>origin</b> as a baseline).</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>git\nrev-list --disk-usage --objects --remotes=$suspect --not\n--remotes=origin</big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#PRETTY FORMATS\">PRETTY FORMATS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#GIT\">GIT</a>"]}