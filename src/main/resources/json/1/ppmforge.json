{"name":"ppmforge","description":"ppmforge - fractal forgeries of clouds, planets, and starry skies","body":"\n\n<h1 align=\"center\">ppmforge</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ppmforge -\nfractal forgeries of clouds, planets, and starry skies</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ppmforge</b>\n[<b>-clouds</b>] [<b>-night</b>] [<b>-dimension</b>\n<i>dimen</i>] [<b>-hour</b> <i>hour</i>]\n[<b>-inclination|-tilt</b> <i>angle</i>] [<b>-mesh</b>\n<i>size</i>] [<b>-power</b> <i>factor</i>] [<b>-glaciers</b>\n<i>level</i>] [<b>-ice</b> <i>level</i>] [<b>-saturation</b>\n<i>sat</i>] [<b>-seed</b> <i>seed</i>] [<b>-stars</b>\n<i>fraction</i>] [<b>-xsize|-width</b> <i>width</i>]\n[<b>-ysize|-height</b> <i>height</i>]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ppmforge</b>\ngenerates three kinds of &rsquo;&rsquo;random fractal\nforgeries,&rsquo;&rsquo; the term coined by Richard F. Voss\nof the IBM Thomas J. Watson Research Center for seemingly\nrealistic pictures of natural objects generated by simple\nalgorithms embodying randomness and fractal self-similarity.\nThe techniques used by <b>ppmforge</b> are essentially those\ngiven by Voss[1], particularly the technique of spectral\nsynthesis explained in more detail by Dietmar Saupe[2].</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\ngenerates two varieties of pictures: planets and clouds,\nwhich are just different renderings of data generated in an\nidentical manner, illustrating the unity of the fractal\nstructure of these very different objects. A third type of\npicture, a starry sky, is synthesised directly from\npseudorandom numbers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The generation\nof planets or clouds begins with the preparation of an array\nof random data in the frequency domain. The size of this\narray, the &rsquo;&rsquo;mesh size,&rsquo;&rsquo; can be set\nwith the <b>-mesh</b> option; the larger the mesh the more\nrealistic the pictures but the calculation time and memory\nrequirement increases as the square of the mesh size. The\nfractal dimension, which you can specify with the\n<b>-dimension</b> option, determines the roughness of the\nterrain on the planet or the scale of detail in the clouds.\nAs the fractal dimension is increased, more high frequency\ncomponents are added into the random mesh.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once the mesh\nis generated, an inverse two dimensional Fourier transform\nis performed upon it. This converts the original random\nfrequency domain data into spatial amplitudes. We scale the\nreal components that result from the Fourier transform into\nnumbers from 0 to 1 associated with each point on the mesh.\nYou can further modify this number by applying a\n&rsquo;&rsquo;power law scale&rsquo;&rsquo; to it with the\n<b>-power</b> option. Unity scale leaves the numbers\nunmodified; a power scale of 0.5 takes the square root of\nthe numbers in the mesh, while a power scale of 3 replaces\nthe numbers in the mesh with their cubes. Power law scaling\nis best envisioned by thinking of the data as representing\nthe elevation of terrain; powers less than 1 yield\nlandscapes with vertical scarps that look like\nglacially-carved valleys; powers greater than one make\nfairy-castle spires (which require large mesh sizes and high\nresolution for best results).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After these\ncalculations, we have a array of the specified size\ncontaining numbers that range from 0 to 1. The pixmaps are\ngenerated as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>Clouds</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"74%\">\n\n\n<p>A colour map is created that ranges from pure blue to\nwhite by increasing admixture (desaturation) of blue with\nwhite. Numbers less than 0.5 are coloured blue, numbers\nbetween 0.5 and 1.0 are coloured with corresponding levels\nof white, with 1.0 being pure white.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>Planet</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"74%\">\n\n\n<p>The mesh is projected onto a sphere. Values less than\n0.5 are treated as water and values between 0.5 and 1.0 as\nland. The water areas are coloured based upon the water\ndepth, and land based on its elevation. The random depth\ndata are used to create clouds over the oceans. An\natmosphere approximately like the Earth&rsquo;s is\nsimulated; its light absorption is calculated to create a\nblue cast around the limb of the planet. A function that\nrises from 0 to 1 based on latitude is modulated by the\nlocal elevation to generate polar ice caps--high altitude\nterrain carries glaciers farther from the pole. Based on the\nposition of the star with respect to the observer, the\napparent colour of each pixel of the planet is calculated by\nray-tracing from the star to the planet to the observer and\napplying a lighting model that sums ambient light and\ndiffuse reflection (for most planets ambient light is zero,\nas their primary star is the only source of illumination).\nAdditional random data are used to generate stars around the\nplanet.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>Night</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"74%\">\n\n\n<p>A sequence of pseudorandom numbers is used to generate\nstars with a user specified density.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Cloud pictures\nalways contain 256 or fewer colours and may be displayed on\nmost colour mapped devices without further processing.\nPlanet pictures often contain tens of thousands of colours\nwhich must be compressed with <b>ppmquant</b> or\n<b>ppmdither</b> before encoding in a colour mapped format.\nIf the display resolution is high enough, <b>ppmdither</b>\ngenerally produces better looking planets. <b>ppmquant</b>\ntends to create discrete colour bands, particularly in the\noceans, which are unrealistic and distracting. The number of\ncolours in starry sky pictures generated with the\n<b>-night</b> option depends on the value specified for\n<b>-saturation</b>. Small values limit the colour\ntemperature distribution of the stars and reduce the number\nof colours in the image. If the <b>-saturation</b> is set to\n0, none of the stars will be coloured and the resulting\nimage will never contain more than 256 colours. Night sky\npictures with many different star colours often look best\nwhen colour compressed by <b>pnmdepth</b> rather than\n<b>ppmquant</b> or <b>ppmdither</b>. Try <i>newmaxval</i>\nsettings of 63, 31, or 15 with <b>pnmdepth</b> to reduce the\nnumber of colours in the picture to 256 or fewer.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\"><b>-clouds</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\">Generate clouds. A pixmap of\nfractal clouds is generated. Selecting clouds sets the\ndefault for fractal dimension to 2.15 and power scale factor\nto 0.75.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-dimension</b>\n<i>dimen</i></p>\n\n<p style=\"margin-left:26%;\">Sets the fractal dimension to\nthe specified <i>dimen</i>, which may be any floating point\nvalue between 0 and 3. Higher fractal dimensions create more\n&rsquo;&rsquo;chaotic&rsquo;&rsquo; images, which require\nhigher resolution output and a larger FFT mesh size to look\ngood. If no dimension is specified, 2.4 is used when\ngenerating planets and 2.15 for clouds.</p>\n\n<p style=\"margin-left:11%;\"><b>-glaciers</b>\n<i>level</i></p>\n\n<p style=\"margin-left:26%;\">The floating point <i>level</i>\nsetting controls the extent to which terrain elevation\ncauses ice to appear at lower latitudes. The default value\nof 0.75 makes the polar caps extend toward the equator\nacross high terrain and forms glaciers in the highest\nmountains, as on Earth. Higher values make ice sheets that\ncover more and more of the land surface, simulating planets\nin the midst of an ice age. Lower values tend to be boring,\nresulting in unrealistic geometrically-precise ice cap\nboundaries.</p>\n\n<p style=\"margin-left:11%;\"><b>-hour</b> <i>hour</i></p>\n\n<p style=\"margin-left:26%;\">When generating a planet,\n<i>hour</i> is used as the &rsquo;&rsquo;hour angle at the\ncentral meridian.&rsquo;&rsquo; If you specify <b>-hour\n12</b>, for example, the planet will be fully illuminated,\ncorresponding to high noon at the longitude at the centre of\nthe screen. You can specify any floating point value between\n0 and 24 for <i>hour</i>, but values which place most of the\nplanet in darkness (0 to 4 and 20 to 24) result in crescents\nwhich, while pretty, don&rsquo;t give you many illuminated\npixels for the amount of computing that&rsquo;s required. If\nno <b>-hour</b> option is specified, a random hour angle is\nchosen, biased so that only 25% of the images generated will\nbe crescents.</p>\n\n<p style=\"margin-left:11%;\"><b>-ice</b> <i>level</i></p>\n\n<p style=\"margin-left:26%;\">Sets the extent of the polar\nice caps to the given floating point <i>level</i>. The\ndefault level of 0.4 produces ice caps similar to those of\nthe Earth. Smaller values reduce the amount of ice, while\nlarger <b>-ice</b> settings create more prominent ice caps.\nSufficiently large values, such as 100 or more, in\nconjunction with small settings for <b>-glaciers</b> (try\n0.1) create &rsquo;&rsquo;ice balls&rsquo;&rsquo; like\nEuropa.</p>\n\n<p style=\"margin-left:11%;\"><b>-inclination|-tilt</b>\n<i>angle</i></p>\n\n<p style=\"margin-left:26%;\">The inclination angle of the\nplanet with regard to its primary star is set to\n<i>angle</i>, which can be any floating point value from -90\nto 90. The inclination angle can be thought of as\nspecifying, in degrees, the\n&rsquo;&rsquo;season&rsquo;&rsquo; the planet is presently\nexperiencing or, more precisely, the latitude at which the\nstar transits the zenith at local noon. If 0, the planet is\nat equinox; the star is directly overhead at the equator.\nPositive values represent summer in the northern hemisphere,\nnegative values summer in the southern hemisphere. The\nEarth&rsquo;s inclination angle, for example, is about 23.5\nat the June solstice, 0 at the equinoxes in March and\nSeptember, and -23.5 at the December solstice. If no\ninclination angle is specified, a random value between -21.6\nand 21.6 degrees is chosen.</p>\n\n<p style=\"margin-left:11%;\"><b>-mesh</b> <i>size</i></p>\n\n<p style=\"margin-left:26%;\">A mesh of <i>size</i> by\n<i>size</i> will be used for the fast Fourier transform\n(FFT). Note that memory requirements and computation speed\nincrease as the square of <i>size</i>; if you double the\nmesh size, the program will use four times the memory and\nrun four times as long. The default mesh is 256x256, which\nproduces reasonably good looking pictures while using half a\nmegabyte for the 256x256 array of single precision complex\nnumbers required by the FFT. On machines with limited memory\ncapacity, you may have to reduce the mesh size to avoid\nrunning out of RAM. Increasing the mesh size produces better\nlooking pictures; the difference becomes particularly\nnoticeable when generating high resolution images with\nrelatively high fractal dimensions (between 2.2 and 3).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>-night</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"74%\">\n\n\n<p>A starry sky is generated. The stars are created by the\nsame algorithm used for the stars that surround planet\npictures, but the output consists exclusively of stars.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-power</b> <i>factor</i></p>\n\n<p style=\"margin-left:26%;\">Sets the &rsquo;&rsquo;power\nfactor&rsquo;&rsquo; used to scale elevations synthesised\nfrom the FFT to <i>factor</i>, which can be any floating\npoint number greater than zero. If no factor is specified a\ndefault of 1.2 is used if a planet is being generated, or\n0.75 if clouds are selected by the <b>-clouds</b> option.\nThe result of the FFT image synthesis is an array of\nelevation values between 0 and 1. A non-unity power factor\nexponentiates each of these elevations to the specified\npower. For example, a power factor of 2 squares each value,\nwhile a power factor of 0.5 replaces each with its square\nroot. (Note that exponentiating values between 0 and 1\nyields values that remain within that range.) Power factors\nless than 1 emphasise large-scale elevation changes at the\nexpense of small variations. Power factors greater than 1\nincrease the roughness of the terrain and, like high fractal\ndimensions, may require a larger FFT mesh size and/or higher\nscreen resolution to look good.</p>\n\n<p style=\"margin-left:11%;\"><b>-saturation</b>\n<i>sat</i></p>\n\n<p style=\"margin-left:26%;\">Controls the degree of colour\nsaturation of the stars that surround planet pictures and\nfill starry skies created with the <b>-night</b> option. The\ndefault value of 125 creates stars which resemble the sky as\nseen by the human eye from Earth&rsquo;s surface. Stars are\ndim; only the brightest activate the cones in the human\nretina, causing colour to be perceived. Higher values of\n<i>sat</i> approximate the appearance of stars from Earth\norbit, where better dark adaptation, absence of skyglow, and\nthe concentration of light from a given star onto a smaller\narea of the retina thanks to the lack of atmospheric\nturbulence enhances the perception of colour. Values greater\nthan 250 create &rsquo;&rsquo;science fiction&rsquo;&rsquo;\nskies that, while pretty, don&rsquo;t occur in this\nuniverse.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"14%\">\n\n\n<p>&nbsp;</p></td>\n<td width=\"1%\"></td>\n<td width=\"74%\">\n\n\n<p>Thanks to the inverse square law combined with\nNature&rsquo;s love of mediocrity, there are many, many dim\nstars for every bright one. This population relationship is\naccurately reflected in the skies created by\n<b>ppmforge</b>. Dim, low mass stars live much longer than\nbright massive stars, consequently there are many reddish\nstars for every blue giant. This relationship is preserved\nby <b>ppmforge</b>. You can reverse the proportion,\nsimulating the sky as seen in a starburst galaxy, by\nspecifying a negative <i>sat</i> value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"14%\">\n\n\n<p><b>-seed</b> <i>num</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"74%\">\n\n\n<p>Sets the seed for the random number generator to the\ninteger <i>num</i>. The seed used to create each picture is\ndisplayed on standard output (unless suppressed with the\n<b>-quiet</b> option). Pictures generated with the same seed\nwill be identical. If no <b>-seed</b> is specified, a random\nseed derived from the date and time will be chosen.\nSpecifying an explicit seed allows you to re-render a\npicture you particularly like at a higher resolution or with\ndifferent viewing parameters.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>-stars</b>\n<i>fraction</i></p>\n\n<p style=\"margin-left:26%;\">Specifies the percentage of\npixels, in tenths of a percent, which will appear as stars,\neither surrounding a planet or filling the entire frame if\n<b>-night</b> is specified. The default <i>fraction</i> is\n100.</p>\n\n<p style=\"margin-left:11%;\"><b>-xsize|-width</b>\n<i>width</i></p>\n\n<p style=\"margin-left:26%;\">Sets the width of the generated\nimage to <i>width</i> pixels. The default width is 256\npixels. Images must be at least as wide as they are high; if\na width less than the height is specified, it will be\nincreased to equal the height. If you must have a long\nskinny pixmap, make a square one with <b>ppmforge</b>, then\nuse <b>pnmcut</b> to extract a portion of the shape and size\nyou require.</p>\n\n<p style=\"margin-left:11%;\"><b>-ysize|-height</b>\n<i>height</i></p>\n\n<p style=\"margin-left:26%;\">Sets the height of the\ngenerated image to <i>height</i> pixels. The default height\nis 256 pixels. If the height specified exceeds the width,\nthe width will be increased to equal the height.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All flags can\nbe abbreviated to their shortest unique prefix.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The algorithms\nrequire the output pixmap to be at least as wide as it is\nhigh, and the width to be an even number of pixels. These\nconstraints are enforced by increasing the size of the\nrequested pixmap if necessary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You may have to\nreduce the FFT mesh size on machines with 16 bit integers\nand segmented pointer architectures.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/pnmcut\">pnmcut(1)</a>,\n<a href=\"https://man.page/1/pnmdepth\">pnmdepth(1)</a>, <a href=\"https://man.page/1/ppmdither\">ppmdither(1)</a>, <a href=\"https://man.page/1/ppmquant\">ppmquant(1)</a>,\n<a href=\"https://man.page/5/ppm\">ppm(5)</a></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>[1]</p></td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p>Voss, Richard F., &rsquo;&rsquo;Random Fractal\nForgeries,&rsquo;&rsquo; in Earnshaw et. al., Fundamental\nAlgorithms for Computer Graphics, Berlin: Springer-Verlag,\n1985.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>[2]</p></td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p>Peitgen, H.-O., and Saupe, D. eds., The Science Of\nFractal Images, New York: Springer Verlag, 1988.</p></td></tr>\n</table>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:18%; margin-top: 1em\">John Walker\n<br>\nAutodesk SA <br>\nAvenue des Champs-Montants 14b <br>\nCH-2074 MARIN <br>\nSuisse/Schweiz/Svizzera/Svizra/Switzerland</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">Usenet:</p></td>\n<td width=\"3%\"></td>\n<td width=\"30%\">\n\n\n<p style=\"margin-top: 1em\">kelvin@Autodesk.com</p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p>Fax:</p></td>\n<td width=\"3%\"></td>\n<td width=\"30%\">\n\n\n<p>038/33 88 15</p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"11%\">\n\n\n<p>Voice:</p></td>\n<td width=\"3%\"></td>\n<td width=\"30%\">\n\n\n<p>038/33 76 33</p></td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission to\nuse, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby\ngranted, without any conditions or restrictions. This\nsoftware is provided &rsquo;&rsquo;as is&rsquo;&rsquo;\nwithout express or implied warranty.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>PLUGWARE!</b>\nIf you like this kind of stuff, you may also enjoy\n&rsquo;&rsquo;James Gleick&rsquo;s Chaos--The\nSoftware&rsquo;&rsquo; for MS-DOS, available for $59.95 from\nyour local software store or directly from Autodesk, Inc.,\nAttn: Science Series, 2320 Marinship Way, Sausalito, CA\n94965, USA. Telephone: (800) 688-2344 toll-free or, outside\nthe U.S. (415) 332-2344 Ext 4886. Fax: (415) 289-4718.\n&rsquo;&rsquo;Chaos--The Software&rsquo;&rsquo; includes a\nmore comprehensive fractal forgery generator which creates\nthree-dimensional landscapes as well as clouds and planets,\nplus five more modules which explore other aspects of Chaos.\nThe user guide of more than 200 pages includes an\nintroduction by James Gleick and detailed explanations by\nRudy Rucker of the mathematics and algorithms used by each\nprogram.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>"]}