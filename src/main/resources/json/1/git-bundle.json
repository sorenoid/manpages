{"name":"git-bundle","body":"\n\n<h1 align=\"center\">GIT-BUNDLE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-bundle -\nMove objects and refs by archive</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nbundle</i> create [-q | --quiet | --progress |\n--all-progress] [--all-progress-implied] <br>\n[--version=&lt;version&gt;] &lt;file&gt;\n&lt;git-rev-list-args&gt; <i><br>\ngit bundle</i> verify [-q | --quiet] &lt;file&gt; <i><br>\ngit bundle</i> list-heads &lt;file&gt; [&lt;refname&gt;...]\n<i><br>\ngit bundle</i> unbundle [--progress] &lt;file&gt;\n[&lt;refname&gt;...]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Create, unpack,\nand manipulate &quot;bundle&quot; files. Bundles are used\nfor the &quot;offline&quot; transfer of Git objects without\nan active &quot;server&quot; sitting on the other side of\nthe network connection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">They can be\nused to create both incremental and full backups of a\nrepository, and to relay the state of the references in one\nrepository to another.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git commands\nthat fetch or otherwise &quot;read&quot; via protocols such\nas <b>ssh://</b> and <b>https://</b> can also operate on\nbundle files. It is possible <a href=\"https://man.page/1/git-clone\">git-clone(1)</a> a new\nrepository from a bundle, to use <a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a> to\nfetch from one, and to list the references contained within\nit with <a href=\"https://man.page/1/git-ls-remote\">git-ls-remote(1)</a>. There&rsquo;s no\ncorresponding &quot;write&quot; support, i.e.a <i>git\npush</i> into a bundle is not supported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the\n&quot;EXAMPLES&quot; section below for examples of how to\nuse bundles.</p>\n\n<h2>BUNDLE FORMAT\n<a name=\"BUNDLE FORMAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bundles are\n<b>.pack</b> files (see <a href=\"https://man.page/1/git-pack-objects\">git-pack-objects(1)</a>) with a\nheader indicating what references are contained within the\nbundle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Like the the\npacked archive format itself bundles can either be\nself-contained, or be created using exclusions. See the\n&quot;OBJECT PREREQUISITES&quot; section below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bundles created\nusing revision exclusions are &quot;thin packs&quot; created\nusing the <b>--thin</b> option to\n<a href=\"https://man.page/1/git-pack-objects\">git-pack-objects(1)</a>, and unbundled using the\n<b>--fix-thin</b> option to <a href=\"https://man.page/1/git-index-pack\">git-index-pack(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is no\noption to create a &quot;thick pack&quot; when using\nrevision exclusions, and users should not be concerned about\nthe difference. By using &quot;thin packs&quot;, bundles\ncreated using exclusions are smaller in size. That\nthey&rsquo;re &quot;thin&quot; under the hood is merely\nnoted here as a curiosity, and as a reference to other\ndocumentation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<b><font color=\"#0000FF\">the bundle-format</font></b>\n<font color=\"#0000FF\">documentation</font>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">for more details and the discussion of\n&quot;thin pack&quot; in</font> <b><font color=\"#0000FF\">the\npack format documentation</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">for further details.</font></p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">create\n[options] &lt;file&gt; &lt;git-rev-list-args&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Used to\ncreate a bundle named <i>file</i>. This requires the\n<i>&lt;git-rev-list-args&gt;</i> arguments to define the\nbundle contents. <i>options</i> contains the options\nspecific to the <i>git bundle create</i>\nsubcommand.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">verify\n&lt;file&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Used to\ncheck that a bundle file is valid and will apply cleanly to\nthe current repository. This includes checks on the bundle\nformat itself as well as checking that the prerequisite\ncommits exist and are fully linked in the current\nrepository. <i>git bundle</i> prints a list of missing\ncommits, if any, and exits with a non-zero\nstatus.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">list-heads\n&lt;file&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Lists the\nreferences defined in the bundle. If followed by a list of\nreferences, only references matching those given are printed\nout.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">unbundle\n&lt;file&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Passes\nthe objects in the bundle to <i>git index-pack</i> for\nstorage in the repository, then prints the names of all\ndefined references. If a list of references is given, only\nreferences matching those in the list are printed. This\ncommand is really plumbing, intended to be called only by\n<i>git fetch</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&lt;git-rev-list-args&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A list of\narguments, acceptable to <i>git rev-parse</i> and <i>git\nrev-list</i> (and containing a named ref, see SPECIFYING\nREFERENCES below), that specifies the specific objects and\nreferences to transport. For example,\n<b>master~10..master</b> causes the current master reference\nto be packaged along with all objects added since its 10th\nancestor commit. There is no explicit limit to the number of\nreferences and objects that may be packaged.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">[&lt;refname&gt;...]</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A list of\nreferences used to limit the references reported as\navailable. This is principally of use to <i>git fetch</i>,\nwhich expects to receive only those references asked for and\nnot necessarily everything in the pack (in this case, <i>git\nbundle</i> acts like <i>git fetch-pack</i>).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--progress</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Progress\nstatus is reported on the standard error stream by default\nwhen it is attached to a terminal, unless -q is specified.\nThis flag forces progress status even if the standard error\nstream is not directed to a terminal.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--all-progress</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">When\n--stdout is specified then progress report is displayed\nduring the object count and compression phases but inhibited\nduring the write-out phase. The reason is that in some cases\nthe output stream is directly linked to another command\nwhich may wish to display progress status of its own as it\nprocesses incoming pack data. This flag is like --progress\nexcept that it forces progress report for the write-out\nphase as well even if --stdout is used.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--all-progress-implied</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This is\nused to imply --all-progress whenever progress display is\nactivated. Unlike --all-progress this flag doesn&rsquo;t\nactually force any progress display by itself.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">--version=&lt;version&gt;</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Specify\nthe bundle version. Version 2 is the older format and can\nonly be used with SHA-1 repositories; the newer version 3\ncontains capabilities that permit extensions. The default is\nthe oldest supported format, based on the hash algorithm in\nuse.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-q,\n--quiet</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This flag\nmakes the command not to report its progress on the standard\nerror stream.</font></p>\n\n<h2>SPECIFYING REFERENCES\n<a name=\"SPECIFYING REFERENCES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Revisions\nmust be accompanied by reference names to be packaged in a\nbundle.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">More\nthan one reference may be packaged, and more than one set of\nprerequisite objects can be specified. The objects packaged\nare those not contained in the union of the\nprerequisites.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>git bundle create</i> command resolves the reference\nnames for you using the same rules as <b>git rev-parse\n--abbrev-ref=loose</b>. Each prerequisite can be specified\nexplicitly (e.g. <b>^master~10</b>), or implicitly (e.g.\n<b>master~10..master</b>, <b>--since=10.days.ago\nmaster</b>).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\nof these simple cases are OK (assuming we have a\n&quot;master&quot; and &quot;next&quot; branch):</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle create master.bundle master <br>\n$ echo master | git bundle create master.bundle --stdin <br>\n$ git bundle create master-and-next.bundle master next <br>\n$ (echo master; echo next) | git bundle create\nmaster-and-next.bundle --stdin</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">And\nso are these (and the same but omitted <b>--stdin</b>\nexamples):</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle create recent-master.bundle master~10..master\n<br>\n$ git bundle create recent-updates.bundle master~10..master\nnext~5..next</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nrevision name or a range whose right-hand-side cannot be\nresolved to a reference is not accepted:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle create HEAD.bundle $(git rev-parse HEAD) <br>\nfatal: Refusing to create empty bundle. <br>\n$ git bundle create master-yesterday.bundle\nmaster~10..master~5 <br>\nfatal: Refusing to create empty bundle.</font></p>\n\n<h2>OBJECT PREREQUISITES\n<a name=\"OBJECT PREREQUISITES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\ncreating bundles it is possible to create a self-contained\nbundle that can be unbundled in a repository with no common\nhistory, as well as providing negative revisions to exclude\nobjects needed in the earlier parts of the\nhistory.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Feeding\na revision such as <b>new</b> to <b>git bundle create</b>\nwill create a bundle file that contains all the objects\nreachable from the revision <b>new</b>. That bundle can be\nunbundled in any repository to obtain a full history that\nleads to the revision <b>new</b>:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle create full.bundle new</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nrevision range such as <b>old..new</b> will produce a bundle\nfile that will require the revision <b>old</b> (and any\nobjects reachable from it) to exist for the bundle to be\n&quot;unbundle&quot;-able:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle create full.bundle old..new</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nself-contained bundle without any prerequisites can be\nextracted into anywhere, even into an empty repository, or\nbe cloned from (i.e., <b>new</b>, but not\n<b>old..new</b>).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">It\nis okay to err on the side of caution, causing the bundle\nfile to contain objects already in the destination, as these\nare ignored when unpacking at the destination.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou want to match <b>git clone --mirror</b>, which would\ninclude your refs such as <b>refs/remotes/*</b>, use\n<b>--all</b>. If you want to provide the same set of refs\nthat a clone directly from the source repository would get,\nuse <b>--branches --tags</b> for the\n<b>&lt;git-rev-list-args&gt;</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>git bundle verify</i> command can be used to check\nwhether your recipient repository has the required\nprerequisite commits for a bundle.</font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Assume\nyou want to transfer the history from a repository R1 on\nmachine A to another repository R2 on machine B. For\nwhatever reason, direct connection between A and B is not\nallowed, but we can move data from A to B via some mechanism\n(CD, email, etc.). We want to update R2 with development\nmade on the branch master in R1.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">To\nbootstrap the process, you can first create a bundle that\ndoes not have any prerequisites. You can use a tag to\nremember up to what commit you last processed, in order to\nmake it easy to later update the other repository with an\nincremental bundle:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">machineA$\ncd R1 <br>\nmachineA$ git bundle create file.bundle master <br>\nmachineA$ git tag -f lastR2bundle master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Then\nyou transfer file.bundle to the target machine B. Because\nthis bundle does not require any existing object to be\nextracted, you can create a new repository on machine B by\ncloning from it:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">machineB$\ngit clone -b master /home/me/tmp/file.bundle R2</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nwill define a remote called &quot;origin&quot; in the\nresulting repository that lets you fetch and pull from the\nbundle. The $GIT_DIR/config file in R2 will have an entry\nlike this:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[remote\n&quot;origin&quot;] <br>\nurl = /home/me/tmp/file.bundle <br>\nfetch = refs/heads/*:refs/remotes/origin/*</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">To\nupdate the resulting mine.git repository, you can fetch or\npull after replacing the bundle stored at\n/home/me/tmp/file.bundle with incremental\nupdates.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">After\nworking some more in the original repository, you can create\nan incremental bundle to update the other\nrepository:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">machineA$\ncd R1 <br>\nmachineA$ git bundle create file.bundle lastR2bundle..master\n<br>\nmachineA$ git tag -f lastR2bundle master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\nthen transfer the bundle to the other machine to replace\n/home/me/tmp/file.bundle, and pull from it.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">machineB$\ncd R2 <br>\nmachineB$ git pull</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou know up to what commit the intended recipient repository\nshould have the necessary objects, you can use that\nknowledge to specify the prerequisites, giving a cut-off\npoint to limit the revisions and objects that go in the\nresulting bundle. The previous example used the lastR2bundle\ntag for this purpose, but you can use any other options that\nyou would give to the <a href=\"https://man.page/1/git-log\">git-log(1)</a> command. Here are\nmore examples:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan use a tag that is present in both:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle create mybundle v1.0.0..master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan use a prerequisite based on time:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle create mybundle --since=10.days master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan use the number of commits:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle create mybundle -10 master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan run <b>git-bundle verify</b> to see if you can extract\nfrom a bundle that was created with a\nprerequisite:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit bundle verify mybundle</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nwill list what commits you must have in order to extract\nfrom the bundle and will error out if you do not have\nthem.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nbundle from a recipient repository&rsquo;s point of view is\njust like a regular repository which it fetches or pulls\nfrom. You can, for example, map references when\nfetching:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit fetch mybundle master:localRef</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan also see what references it offers:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit ls-remote mybundle</font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"48%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">the\n<b>bundle-format</b> documentation</font></p></td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/technical/bundle-format.html</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">2.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"45%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">the pack\nformat documentation</font></p></td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/technical/pack-format.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#BUNDLE FORMAT\">BUNDLE FORMAT</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SPECIFYING REFERENCES\">SPECIFYING REFERENCES</a>","<a href=\"#OBJECT PREREQUISITES\">OBJECT PREREQUISITES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"]}