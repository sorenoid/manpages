{"name":"git-reset","description":"git-reset -\nReset current HEAD to the specified state","body":"\n\n<h1 align=\"center\">GIT-RESET</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-reset -\nReset current HEAD to the specified state</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nreset</i> [-q] [&lt;tree-ish&gt;] [--] &lt;pathspec&gt;...\n<i><br>\ngit reset</i> [-q] [--pathspec-from-file=&lt;file&gt;\n[--pathspec-file-nul]] [&lt;tree-ish&gt;] <i><br>\ngit reset</i> (--patch | -p) [&lt;tree-ish&gt;] [--]\n[&lt;pathspec&gt;...] <i><br>\ngit reset</i> [--soft | --mixed [-N] | --hard | --merge |\n--keep] [-q] [&lt;commit&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the first\nthree forms, copy entries from <b>&lt;tree-ish&gt;</b> to\nthe index. In the last form, set the current branch head\n(<b>HEAD</b>) to <b>&lt;commit&gt;</b>, optionally modifying\nindex and working tree to match. The\n<b>&lt;tree-ish&gt;</b>/<b>&lt;commit&gt;</b> defaults to\n<b>HEAD</b> in all forms.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nreset</i> [-q] [&lt;tree-ish&gt;] [--] &lt;pathspec&gt;...,\n<i>git reset</i> [-q] [--pathspec-from-file=&lt;file&gt;\n[--pathspec-file-nul]] [&lt;tree-ish&gt;]</p>\n\n<p style=\"margin-left:17%;\">These forms reset the index\nentries for all paths that match the <b>&lt;pathspec&gt;</b>\nto their state at <b>&lt;tree-ish&gt;</b>. (It does not\naffect the working tree or the current branch.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This means that\n<b>git reset &lt;pathspec&gt;</b> is the opposite of <b>git\nadd &lt;pathspec&gt;</b>. This command is equivalent to\n<b>git restore [--source=&lt;tree-ish&gt;] --staged\n&lt;pathspec&gt;...</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">After running\n<b>git reset &lt;pathspec&gt;</b> to update the index entry,\nyou can use <a href=\"https://man.page/1/git-restore\">git-restore(1)</a> to check the contents out\nof the index to the working tree. Alternatively, using\n<a href=\"https://man.page/1/git-restore\">git-restore(1)</a> and specifying a commit with\n<b>--source</b>, you can copy the contents of a path out of\na commit to the index and to the working tree in one go.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nreset</i> (--patch | -p) [&lt;tree-ish&gt;] [--]\n[&lt;pathspec&gt;...]</p>\n\n<p style=\"margin-left:17%;\">Interactively select hunks in\nthe difference between the index and <b>&lt;tree-ish&gt;</b>\n(defaults to <b>HEAD</b>). The chosen hunks are applied in\nreverse to the index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This means that\n<b>git reset -p</b> is the opposite of <b>git add -p</b>,\ni.e. you can use it to selectively reset hunks. See the\n&ldquo;Interactive Mode&rdquo; section of <a href=\"https://man.page/1/git-add\">git-add(1)</a>\nto learn how to operate the <b>--patch</b> mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nreset</i> [&lt;mode&gt;] [&lt;commit&gt;]</p>\n\n<p style=\"margin-left:17%;\">This form resets the current\nbranch head to <b>&lt;commit&gt;</b> and possibly updates\nthe index (resetting it to the tree of\n<b>&lt;commit&gt;</b>) and the working tree depending on\n<b>&lt;mode&gt;</b>. If <b>&lt;mode&gt;</b> is omitted,\ndefaults to <b>--mixed</b>. The <b>&lt;mode&gt;</b> must be\none of the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">--soft</p>\n\n<p style=\"margin-left:23%;\">Does not touch the index file\nor the working tree at all (but resets the head to\n<b>&lt;commit&gt;</b>, just like all modes do). This leaves\nall your changed files &quot;Changes to be committed&quot;,\nas <b>git status</b> would put it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">--mixed</p>\n\n<p style=\"margin-left:23%;\">Resets the index but not the\nworking tree (i.e., the changed files are preserved but not\nmarked for commit) and reports what has not been updated.\nThis is the default action.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">If <b>-N</b> is\nspecified, removed paths are marked as intent-to-add (see\n<a href=\"https://man.page/1/git-add\">git-add(1)</a>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">--hard</p>\n\n<p style=\"margin-left:23%;\">Resets the index and working\ntree. Any changes to tracked files in the working tree since\n<b>&lt;commit&gt;</b> are discarded. Any untracked files or\ndirectories in the way of writing any tracked files are\nsimply deleted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">--merge</p>\n\n<p style=\"margin-left:23%;\">Resets the index and updates\nthe files in the working tree that are different between\n<b>&lt;commit&gt;</b> and <b>HEAD</b>, but keeps those which\nare different between the index and working tree (i.e. which\nhave changes which have not been added). If a file that is\ndifferent between <b>&lt;commit&gt;</b> and the index has\nunstaged changes, reset is aborted.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">In other words,\n<b>--merge</b> does something like a <b>git read-tree -u -m\n&lt;commit&gt;</b>, but carries forward unmerged index\nentries.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">--keep</p>\n\n<p style=\"margin-left:23%;\">Resets index entries and\nupdates files in the working tree that are different between\n<b>&lt;commit&gt;</b> and <b>HEAD</b>. If a file that is\ndifferent between <b>&lt;commit&gt;</b> and <b>HEAD</b> has\nlocal changes, reset is aborted.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">--[no-]recurse-submodules</p>\n\n<p style=\"margin-left:23%;\">When the working tree is\nupdated, using --recurse-submodules will also recursively\nreset the working tree of all active submodules according to\nthe commit recorded in the superproject, also setting the\nsubmodules' HEAD to be detached at that commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n&quot;Reset, restore and revert&quot; in <a href=\"https://man.page/1/git\">git(1)</a> for\nthe differences between the three commands.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-q, --quiet,\n--no-quiet</p>\n\n<p style=\"margin-left:17%;\">Be quiet, only report errors.\nThe default behavior is set by the <b>reset.quiet</b> config\noption. <b>--quiet</b> and <b>--no-quiet</b> will override\nthe default behavior.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pathspec-from-file=&lt;file&gt;</p>\n\n<p style=\"margin-left:17%;\">Pathspec is passed in\n<b>&lt;file&gt;</b> instead of commandline args. If\n<b>&lt;file&gt;</b> is exactly <b>-</b> then standard input\nis used. Pathspec elements are separated by LF or CR/LF.\nPathspec elements can be quoted as explained for the\nconfiguration variable <b>core.quotePath</b> (see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). See also <b>--pathspec-file-nul</b>\nand global <b>--literal-pathspecs</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">--pathspec-file-nul</p>\n\n<p style=\"margin-left:17%;\">Only meaningful with\n<b>--pathspec-from-file</b>. Pathspec elements are separated\nwith NUL character and all other characters are taken\nliterally (including newlines and quotes).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">--</p>\n\n<p style=\"margin-left:17%;\">Do not interpret any more\narguments as options.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;pathspec&gt;...</p>\n\n<p style=\"margin-left:17%;\">Limits the paths affected by\nthe operation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails, see the <i>pathspec</i> entry in\n<a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Undo add</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ edit\n<b>(1)</b> <br>\n$ git add frotz.c filfre.c <br>\n$ mailx <b>(2)</b> <br>\n$ git reset <b>(3)</b> <br>\n$ git pull git://info.example.com/ nitfol <b>(4)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> You\nare happily working on something, and find the changes in\nthese files are in good order. You do not want to see them\nwhen you run <b>git diff</b>, because you plan to work on\nother files and changes with these files are distracting.\n<b><br>\n2.</b> Somebody asks you to pull, and the changes sound\nworthy of merging. <b><br>\n3.</b> However, you already dirtied the index (i.e. your\nindex does not match the <b>HEAD</b> commit). But you know\nthe pull you are going to make does not affect\n<b>frotz.c</b> or <b>filfre.c</b>, so you revert the index\nchanges for these two files. Your changes in working tree\nremain there. <b><br>\n4.</b> Then you can pull and merge, leaving <b>frotz.c</b>\nand <b>filfre.c</b> changes still in the working tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Undo a commit\nand redo</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git commit\n... <br>\n$ git reset --soft HEAD^ <b>(1)</b> <br>\n$ edit <b>(2)</b> <br>\n$ git commit -a -c ORIG_HEAD <b>(3)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> This\nis most often done when you remembered what you just\ncommitted is incomplete, or you misspelled your commit\nmessage, or both. Leaves working tree as it was before\n&quot;reset&quot;. <b><br>\n2.</b> Make corrections to working tree files. <b><br>\n3.</b> &quot;reset&quot; copies the old head to\n<b>.git/ORIG_HEAD</b>; redo the commit by starting with its\nlog message. If you do not need to edit the message further,\nyou can give <b>-C</b> option instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See also the\n<b>--amend</b> option to <a href=\"https://man.page/1/git-commit\">git-commit(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Undo a commit,\nmaking it a topic branch</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git branch\ntopic/wip <b>(1)</b> <br>\n$ git reset --hard HEAD~3 <b>(2)</b> <br>\n$ git switch topic/wip <b>(3)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> You\nhave made some commits, but realize they were premature to\nbe in the <b>master</b> branch. You want to continue\npolishing them in a topic branch, so create <b>topic/wip</b>\nbranch off of the current <b>HEAD</b>. <b><br>\n2.</b> Rewind the master branch to get rid of those three\ncommits. <b><br>\n3.</b> Switch to <b>topic/wip</b> branch and keep\nworking.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Undo commits\npermanently</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git commit\n... <br>\n$ git reset --hard HEAD~3 <b>(1)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> The\nlast three commits (<b>HEAD</b>, <b>HEAD^</b>, and\n<b>HEAD~2</b>) were bad and you do not want to ever see them\nagain. Do <b>not</b> do this if you have already given these\ncommits to somebody else. (See the &quot;RECOVERING FROM\nUPSTREAM REBASE&quot; section in <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a> for\nthe implications of doing so.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Undo a merge or\npull</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git pull\n<b>(1)</b> <br>\nAuto-merging nitfol <br>\nCONFLICT (content): Merge conflict in nitfol <br>\nAutomatic merge failed; fix conflicts and then commit the\nresult. <br>\n$ git reset --hard <b>(2)</b> <br>\n$ git pull . topic/branch <b>(3)</b> <br>\nUpdating from 41223... to 13134... <br>\nFast-forward <br>\n$ git reset --hard ORIG_HEAD <b>(4)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> Try\nto update from the upstream resulted in a lot of conflicts;\nyou were not ready to spend a lot of time merging right now,\nso you decide to do that later. <b><br>\n2.</b> &quot;pull&quot; has not made merge commit, so <b>git\nreset --hard</b> which is a synonym for <b>git reset --hard\nHEAD</b> clears the mess from the index file and the working\ntree. <b><br>\n3.</b> Merge a topic branch into the current branch, which\nresulted in a fast-forward. <b><br>\n4.</b> But you decided that the topic branch is not ready\nfor public consumption yet. &quot;pull&quot; or\n&quot;merge&quot; always leaves the original tip of the\ncurrent branch in <b>ORIG_HEAD</b>, so resetting hard to it\nbrings your index file and the working tree back to that\nstate, and resets the tip of the branch to that commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Undo a merge or\npull inside a dirty working tree</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git pull\n<b>(1)</b> <br>\nAuto-merging nitfol <br>\nMerge made by recursive. <br>\nnitfol | 20 +++++---- <br>\n... <br>\n$ git reset --merge ORIG_HEAD <b>(2)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> Even\nif you may have local modifications in your working tree,\nyou can safely say <b>git pull</b> when you know that the\nchange in the other branch does not overlap with them.\n<b><br>\n2.</b> After inspecting the result of the merge, you may\nfind that the change in the other branch is unsatisfactory.\nRunning <b>git reset --hard ORIG_HEAD</b> will let you go\nback to where you were, but it will discard your local\nchanges, which you do not want. <b>git reset --merge</b>\nkeeps your local changes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Interrupted\nworkflow</p>\n\n<p style=\"margin-left:17%;\">Suppose you are interrupted by\nan urgent fix request while you are in the middle of a large\nchange. The files in your working tree are not in any shape\nto be committed yet, but you need to get to the other branch\nfor a quick bugfix.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git switch\nfeature ;# you were working in &quot;feature&quot; branch\nand <br>\n$ work work work ;# got interrupted <br>\n$ git commit -a -m &quot;snapshot WIP&quot; <b>(1)</b> <br>\n$ git switch master <br>\n$ fix fix fix <br>\n$ git commit ;# commit with real log <br>\n$ git switch feature <br>\n$ git reset --soft HEAD^ ;# go back to WIP state <b>(2)</b>\n<br>\n$ git reset <b>(3)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> This\ncommit will get blown away so a throw-away log message is\nOK. <b><br>\n2.</b> This removes the <i>WIP</i> commit from the commit\nhistory, and sets your working tree to the state just before\nyou made that snapshot. <b><br>\n3.</b> At this point the index file still has all the WIP\nchanges you committed as <i>snapshot WIP</i>. This updates\nthe index to show your WIP files as uncommitted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See also\n<a href=\"https://man.page/1/git-stash\">git-stash(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Reset a single\nfile in the index</p>\n\n<p style=\"margin-left:17%;\">Suppose you have added a file\nto your index, but later decide you do not want to add it to\nyour commit. You can remove the file from the index while\nkeeping your changes with git reset.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git reset --\nfrotz.c <b>(1)</b> <br>\n$ git commit -m &quot;Commit files in index&quot; <b>(2)</b>\n<br>\n$ git add frotz.c <b>(3)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> This\nremoves the file from the index while keeping it in the\nworking directory. <b><br>\n2.</b> This commits all other changes in the index. <b><br>\n3.</b> Adds the file to the index again.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Keep changes in\nworking tree while discarding some previous commits</p>\n\n<p style=\"margin-left:17%;\">Suppose you are working on\nsomething and you commit it, and then you continue working a\nbit more, but now you think that what you have in your\nworking tree should be in another branch that has nothing to\ndo with what you committed previously. You can start a new\nbranch and reset it while keeping the changes in your\nworking tree.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git tag start\n<br>\n$ git switch -c branch1 <br>\n$ edit <br>\n$ git commit ... <b>(1)</b> <br>\n$ edit <br>\n$ git switch -c branch2 <b>(2)</b> <br>\n$ git reset --keep start <b>(3)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> This\ncommits your first edits in <b>branch1</b>. <b><br>\n2.</b> In the ideal world, you could have realized that the\nearlier commit did not belong to the new topic when you\ncreated and switched to <b>branch2</b> (i.e. <b>git switch\n-c branch2 start</b>), but nobody is perfect. <b><br>\n3.</b> But you can use <b>reset --keep</b> to remove the\nunwanted commit after you switched to <b>branch2</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Split a commit\napart into a sequence of commits</p>\n\n<p style=\"margin-left:17%;\">Suppose that you have created\nlots of logically separate changes and committed them\ntogether. Then, later you decide that it might be better to\nhave each logical chunk associated with its own commit. You\ncan use git reset to rewind history without changing the\ncontents of your local files, and then successively use\n<b>git add -p</b> to interactively select which hunks to\ninclude into each commit, using <b>git commit -c</b> to\npre-populate the commit message.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git reset -N\nHEAD^ <b>(1)</b> <br>\n$ git add -p <b>(2)</b> <br>\n$ git diff --cached <b>(3)</b> <br>\n$ git commit -c HEAD@{1} <b>(4)</b> <br>\n... <b>(5)</b> <br>\n$ git add ... <b>(6)</b> <br>\n$ git diff --cached <b>(7)</b> <br>\n$ git commit ... <b>(8)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b>\nFirst, reset the history back one commit so that we remove\nthe original commit, but leave the working tree with all the\nchanges. The -N ensures that any new files added with\n<b>HEAD</b> are still marked so that <b>git add -p</b> will\nfind them. <b><br>\n2.</b> Next, we interactively select diff hunks to add using\nthe <b>git add -p</b> facility. This will ask you about each\ndiff hunk in sequence and you can use simple commands such\nas &quot;yes, include this&quot;, &quot;No don&rsquo;t\ninclude this&quot; or even the very powerful\n&quot;edit&quot; facility. <b><br>\n3.</b> Once satisfied with the hunks you want to include,\nyou should verify what has been prepared for the first\ncommit by using <b>git diff --cached</b>. This shows all the\nchanges that have been moved into the index and are about to\nbe committed. <b><br>\n4.</b> Next, commit the changes stored in the index. The\n<b>-c</b> option specifies to pre-populate the commit\nmessage from the original message that you started with in\nthe first commit. This is helpful to avoid retyping it. The\n<b>HEAD@{1}</b> is a special notation for the commit that\n<b>HEAD</b> used to be at prior to the original reset commit\n(1 change ago). See <a href=\"https://man.page/1/git-reflog\">git-reflog(1)</a> for more details.\nYou may also use any other valid commit reference. <b><br>\n5.</b> You can repeat steps 2-4 multiple times to break the\noriginal code into any number of commits. <b><br>\n6.</b> Now you&rsquo;ve split out many of the changes into\ntheir own commits, and might no longer use the patch mode of\n<b>git add</b>, in order to select all remaining uncommitted\nchanges. <b><br>\n7.</b> Once again, check to verify that you&rsquo;ve\nincluded what you want to. You may also wish to verify that\ngit diff doesn&rsquo;t show any remaining changes to be\ncommitted later. <b><br>\n8.</b> And finally create the final commit.</p>\n\n<h2>DISCUSSION\n<a name=\"DISCUSSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The tables\nbelow show what happens when running:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git reset\n--option target</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">to reset the\n<b>HEAD</b> to another commit (<b>target</b>) with the\ndifferent reset options depending on the state of the\nfiles.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In these\ntables, <b>A</b>, <b>B</b>, <b>C</b> and <b>D</b> are some\ndifferent states of a file. For example, the first line of\nthe first table means that if a file is in state <b>A</b> in\nthe working tree, in state <b>B</b> in the index, in state\n<b>C</b> in <b>HEAD</b> and in state <b>D</b> in the target,\nthen <b>git reset --soft target</b> will leave the file in\nthe working tree in state <b>A</b> and in the index in state\n<b>B</b>. It resets (i.e. moves) the <b>HEAD</b> (i.e. the\ntip of the current branch, if you are on one) to\n<b>target</b> (which has the file in state <b>D</b>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">working index\nHEAD target working index HEAD <br>\n---------------------------------------------------- <br>\nA B C D --soft A B D <br>\n--mixed A D D <br>\n--hard D D D <br>\n--merge (disallowed) <br>\n--keep (disallowed)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">working index\nHEAD target working index HEAD <br>\n---------------------------------------------------- <br>\nA B C C --soft A B C <br>\n--mixed A C C <br>\n--hard C C C <br>\n--merge (disallowed) <br>\n--keep A C C</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">working index\nHEAD target working index HEAD <br>\n---------------------------------------------------- <br>\nB B C D --soft B B D <br>\n--mixed B D D <br>\n--hard D D D <br>\n--merge D D D <br>\n--keep (disallowed)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">working index\nHEAD target working index HEAD <br>\n---------------------------------------------------- <br>\nB B C C --soft B B C <br>\n--mixed B C C <br>\n--hard C C C <br>\n--merge C C C <br>\n--keep B C C</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">working index\nHEAD target working index HEAD <br>\n---------------------------------------------------- <br>\nB C C D --soft B C D <br>\n--mixed B D D <br>\n--hard D D D <br>\n--merge (disallowed) <br>\n--keep (disallowed)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">working index\nHEAD target working index HEAD <br>\n---------------------------------------------------- <br>\nB C C C --soft B C C <br>\n--mixed B C C <br>\n--hard C C C <br>\n--merge B C C <br>\n--keep B C C</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>reset\n--merge</b> is meant to be used when resetting out of a\nconflicted merge. Any mergy operation guarantees that the\nworking tree file that is involved in the merge does not\nhave a local change with respect to the index before it\nstarts, and that it writes the result out to the working\ntree. So if we see some difference between the index and the\ntarget and also between the index and the working tree, then\nit means that we are not resetting out from a state that a\nmergy operation left after failing with a conflict. That is\nwhy we disallow <b>--merge</b> option in this case.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>reset\n--keep</b> is meant to be used when removing some of the\nlast commits in the current branch while keeping changes in\nthe working tree. If there could be conflicts between the\nchanges in the commit we want to remove and the changes in\nthe working tree we want to keep, the reset is disallowed.\nThat&rsquo;s why it is disallowed if there are both changes\nbetween the working tree and <b>HEAD</b>, and between\n<b>HEAD</b> and the target. To be safe, it is also\ndisallowed when there are unmerged entries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ntables show what happens when there are unmerged\nentries:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">working index\nHEAD target working index HEAD <br>\n---------------------------------------------------- <br>\nX U A B --soft (disallowed) <br>\n--mixed X B B <br>\n--hard B B B <br>\n--merge B B B <br>\n--keep (disallowed)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">working index\nHEAD target working index HEAD <br>\n---------------------------------------------------- <br>\nX U A A --soft (disallowed) <br>\n--mixed X A A <br>\n--hard A A A <br>\n--merge A A A <br>\n--keep (disallowed)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>X</b> means\nany state and <b>U</b> means an unmerged index.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#DISCUSSION\">DISCUSSION</a>","<a href=\"#GIT\">GIT</a>"]}