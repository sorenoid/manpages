{"name":"git-mv","description":"git-mv - Move or rename a file, a directory, or a symlink","body":"\n\n<h1 align=\"center\">GIT-MV</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-mv - Move\nor rename a file, a directory, or a symlink</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git mv</i>\n&lt;options&gt;... &lt;args&gt;...</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Move or rename\na file, directory or symlink.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">git mv [-v]\n[-f] [-n] [-k] &lt;source&gt; &lt;destination&gt; <br>\ngit mv [-v] [-f] [-n] [-k] &lt;source&gt; ...\n&lt;destination directory&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the first\nform, it renames &lt;source&gt;, which must exist and be\neither a file, symlink or directory, to &lt;destination&gt;.\nIn the second form, the last argument has to be an existing\ndirectory; the given sources will be moved into this\ndirectory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The index is\nupdated after successful completion, but the change must\nstill be committed.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">-f, --force</p>\n\n<p style=\"margin-left:17%;\">Force renaming or moving of a\nfile even if the target exists</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-k</p>\n\n<p style=\"margin-left:17%;\">Skip move or rename actions\nwhich would lead to an error condition. An error happens\nwhen a source is neither existing nor controlled by Git, or\nwhen it would overwrite an existing file unless <b>-f</b> is\ngiven.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-n,\n--dry-run</p>\n\n<p style=\"margin-left:17%;\">Do nothing; only show what\nwould happen</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-v,\n--verbose</p>\n\n<p style=\"margin-left:17%;\">Report the names of files as\nthey are moved.</p>\n\n<h2>SUBMODULES\n<a name=\"SUBMODULES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Moving a\nsubmodule using a gitfile (which means they were cloned with\na Git version 1.7.8 or newer) will update the gitfile and\ncore.worktree setting to make the submodule work in the new\nlocation. It also will attempt to update the\nsubmodule.&lt;name&gt;.path setting in the\n<a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a> file and stage that file (unless -n is\nused).</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each time a\nsuperproject update moves a populated submodule (e.g. when\nswitching between commits before and after the move) a stale\nsubmodule checkout will remain in the old location and an\nempty directory will appear in the new location. To populate\nthe submodule again in the new location the user will have\nto run &quot;git submodule update&quot; afterwards. Removing\nthe old directory is only safe when it uses a gitfile, as\notherwise the history of the submodule will be deleted too.\nBoth steps will be obsolete when recursive submodule update\nhas been implemented.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SUBMODULES\">SUBMODULES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#GIT\">GIT</a>"]}