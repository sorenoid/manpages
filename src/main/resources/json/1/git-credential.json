{"name":"git-credential","description":"git-credential - Retrieve and store user credentials","body":"\n\n<h1 align=\"center\">GIT-CREDENTIAL</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-credential\n- Retrieve and store user credentials</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git credential\n&lt;fill|approve|reject&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git has an\ninternal interface for storing and retrieving credentials\nfrom system-specific helpers, as well as prompting the user\nfor usernames and passwords. The git-credential command\nexposes this interface to scripts which may want to\nretrieve, store, or prompt for credentials in the same\nmanner as Git. The design of this scriptable interface\nmodels the internal C API; see credential.h for more\nbackground on the concepts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">git-credential\ntakes an &quot;action&quot; option on the command-line (one\nof <b>fill</b>, <b>approve</b>, or <b>reject</b>) and reads\na credential description on stdin (see INPUT/OUTPUT\nFORMAT).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the action\nis <b>fill</b>, git-credential will attempt to add\n&quot;username&quot; and &quot;password&quot; attributes to\nthe description by reading config files, by contacting any\nconfigured credential helpers, or by prompting the user. The\nusername and password attributes of the credential\ndescription are then printed to stdout together with the\nattributes already provided.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the action\nis <b>approve</b>, git-credential will send the description\nto any configured credential helpers, which may store the\ncredential for later use.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the action\nis <b>reject</b>, git-credential will send the description\nto any configured credential helpers, which may erase any\nstored credential matching the description.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the action\nis <b>approve</b> or <b>reject</b>, no output should be\nemitted.</p>\n\n<h2>TYPICAL USE OF GIT CREDENTIAL\n<a name=\"TYPICAL USE OF GIT CREDENTIAL\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An application\nusing git-credential will typically use <b>git\ncredential</b> following these steps:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. Generate a\ncredential description based on the context.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example, if\nwe want a password for <b>https://example.com/foo.git</b>,\nwe might generate the following credential description\n(don&rsquo;t forget the blank line at the end; it tells\n<b>git credential</b> that the application finished feeding\nall the information it has):</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">protocol=https\n<br>\nhost=example.com <br>\npath=foo.git</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Ask\ngit-credential to give us a username and password for this\ndescription. This is done by running <b>git credential\nfill</b>, feeding the description from step (1) to its\nstandard input. The complete credential description\n(including the credential per se, i.e. the login and\npassword) will be produced on standard output, like:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">protocol=https\n<br>\nhost=example.com <br>\nusername=bob <br>\npassword=secr3t</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In most cases,\nthis means the attributes given in the input will be\nrepeated in the output, but Git may also modify the\ncredential description, for example by removing the\n<b>path</b> attribute when the protocol is HTTP(s) and\n<b>credential.useHttpPath</b> is false.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the <b>git\ncredential</b> knew about the password, this step may not\nhave involved the user actually typing this password (the\nuser may have typed a password to unlock the keychain\ninstead, or no user interaction was done if the keychain was\nalready unlocked) before it returned\n<b>password=secr3t</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. Use the\ncredential (e.g., access the URL with the username and\npassword from step (2)), and see if it&rsquo;s accepted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">4. Report on\nthe success or failure of the password. If the credential\nallowed the operation to complete successfully, then it can\nbe marked with an &quot;approve&quot; action to tell <b>git\ncredential</b> to reuse it in its next invocation. If the\ncredential was rejected during the operation, use the\n&quot;reject&quot; action so that <b>git credential</b> will\nask for a new password in its next invocation. In either\ncase, <b>git credential</b> should be fed with the\ncredential description obtained from step (2) (which also\ncontain the ones provided in step (1)).</p>\n\n<h2>INPUT/OUTPUT FORMAT\n<a name=\"INPUT/OUTPUT FORMAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git\ncredential</b> reads and/or writes (depending on the action\nused) credential information in its standard input/output.\nThis information can correspond either to keys for which\n<b>git credential</b> will obtain the login information\n(e.g. host, protocol, path), or to the actual credential\ndata to be obtained (username/password).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The credential\nis split into a set of named attributes, with one attribute\nper line. Each attribute is specified by a key-value pair,\nseparated by an <b>=</b> (equals) sign, followed by a\nnewline.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The key may\ncontain any bytes except <b>=</b>, newline, or NUL. The\nvalue may contain any bytes except newline or NUL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In both cases,\nall bytes are treated as-is (i.e., there is no quoting, and\none cannot transmit a value with newline or NUL in it). The\nlist of attributes is terminated by a blank line or\nend-of-file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git understands\nthe following attributes:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>protocol</b></p>\n\n<p style=\"margin-left:17%;\">The protocol over which the\ncredential will be used (e.g., <b>https</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>host</b></p>\n\n<p style=\"margin-left:17%;\">The remote hostname for a\nnetwork credential. This includes the port number if one was\nspecified (e.g., &quot;example.com:8088&quot;).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>path</b></p>\n\n<p style=\"margin-left:17%;\">The path with which the\ncredential will be used. E.g., for accessing a remote https\nrepository, this will be the repository&rsquo;s path on the\nserver.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>username</b></p>\n\n<p style=\"margin-left:17%;\">The credential&rsquo;s\nusername, if we already have one (e.g., from a URL, the\nconfiguration, the user, or from a previously run\nhelper).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>password</b></p>\n\n<p style=\"margin-left:17%;\">The credential&rsquo;s\npassword, if we are asking it to be stored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>url</b></p>\n\n<p style=\"margin-left:17%;\">When this special attribute is\nread by <b>git credential</b>, the value is parsed as a URL\nand treated as if its constituent parts were read (e.g.,\n<b>url=https://example.com</b> would behave as if\n<b>protocol=https</b> and <b>host=example.com</b> had been\nprovided). This can help callers avoid parsing URLs\nthemselves.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nspecifying a protocol is mandatory and if the URL\ndoesn&rsquo;t specify a hostname (e.g.,\n&quot;cert:///path/to/file&quot;) the credential will\ncontain a hostname attribute whose value is an empty\nstring.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Components\nwhich are missing from the URL (e.g., there is no username\nin the example above) will be left unset.</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#TYPICAL USE OF GIT CREDENTIAL\">TYPICAL USE OF GIT CREDENTIAL</a>","<a href=\"#INPUT/OUTPUT FORMAT\">INPUT/OUTPUT FORMAT</a>","<a href=\"#GIT\">GIT</a>"]}