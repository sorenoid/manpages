{"name":"semanage.conf","body":"\n\n<h1 align=\"center\">semanage.conf</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">semanage.conf -\nglobal configuration file for the SELinux Management\nlibrary</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>semanage.conf</b> file is usually located under the\ndirectory /etc/selinux and it is used for run-time\nconfiguration of the behavior of the SELinux Management\nlibrary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each line\nshould contain a configuration parameter followed by the\nequal sign (&quot;=&quot;) and then followed by the\nconfiguration value for that parameter. Anything after the\n&quot;#&quot; symbol is ignored similarly to empty\nlines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nparameters are allowed:</p>\n\n<p style=\"margin-left:22%;\"><b>module-store</b></p>\n\n<p style=\"margin-left:32%;\">Specify how the SELinux\nManagement library should interact with the SELinux policy\nstore. When set to &quot;direct&quot;, the SELinux\nManagement library writes to the SELinux policy module store\ndirectly (this is the default setting). Otherwise a socket\npath or a server name can be used for the argument. If the\nargument begins with &quot;/&quot; (as in\n&quot;/foo/bar&quot;), it represents the path to a named\nsocket that should be used to connect the policy management\nserver. If the argument does not begin with a &quot;/&quot;\n(as in &quot;foo.com:4242&quot;), it should be interpreted\nas the name of a remote policy management server to be used\nthrough a TCP connection (default port is 4242 unless a\ndifferent one is specified after the server name using the\ncolon to separate the two fields).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>root</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>Specify an alternative root path to use for the store.\nThe default is &quot;/&quot;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>store-root</b></p>\n\n<p style=\"margin-left:32%;\">Specify an alternative\nstore_root path to use. The default is\n&quot;/var/lib/selinux&quot;</p>\n\n<p style=\"margin-left:22%;\"><b>compiler-directory</b></p>\n\n<p style=\"margin-left:32%;\">Specify an alternative\ndirectory that contains HLL to CIL compilers. The default\nvalue is &quot;/usr/libexec/selinux/hll&quot;.</p>\n\n<p style=\"margin-left:22%;\"><b>ignore-module-cache</b></p>\n\n<p style=\"margin-left:32%;\">Whether or not to ignore the\ncache of CIL modules compiled from HLL. It can be set to\neither &quot;true&quot; or &quot;false&quot; and is set to\n&quot;false&quot; by default. If the cache is ignored, then\nall CIL modules are recompiled from their HLL modules.</p>\n\n<p style=\"margin-left:22%;\"><b>policy-version</b></p>\n\n<p style=\"margin-left:32%;\">When generating the policy, by\ndefault <b>semanage</b> will set the policy version to\nPOLICYDB_VERSION_MAX, as defined in\n&lt;sepol/policydb/policydb.h&gt;. Change this setting if a\ndifferent version needs to be set for the policy.</p>\n\n<p style=\"margin-left:22%;\"><b>target-platform</b></p>\n\n<p style=\"margin-left:32%;\">The target platform to generate\npolicies for. Valid values are &quot;selinux&quot; and\n&quot;xen&quot;, and is set to &quot;selinux&quot; by\ndefault.</p>\n\n<p style=\"margin-left:22%;\"><b>expand-check</b></p>\n\n<p style=\"margin-left:32%;\">Whether or not to check\n&quot;neverallow&quot; rules when executing all\n<b>semanage</b> command. It can be set to either\n&quot;0&quot; (disabled) or &quot;1&quot; (enabled) and by\ndefault it is enabled. There might be a large penalty in\nexecution time if this option is enabled.</p>\n\n<p style=\"margin-left:22%;\"><b>file-mode</b></p>\n\n<p style=\"margin-left:32%;\">By default the permission mode\nfor the run-time policy files is set to 0644.</p>\n\n<p style=\"margin-left:22%;\"><b>save-previous</b></p>\n\n<p style=\"margin-left:32%;\">It controls whether the\nprevious module directory is saved after a successful commit\nto the policy store and it can be set to either\n&quot;true&quot; or &quot;false&quot;. By default it is set\nto &quot;false&quot; (the previous version is deleted).</p>\n\n<p style=\"margin-left:22%;\"><b>save-linked</b></p>\n\n<p style=\"margin-left:32%;\">It controls whether the\npreviously linked module is saved (with name\n&quot;base.linked&quot;) after a successful commit to the\npolicy store. It can be set to either &quot;true&quot; or\n&quot;false&quot; and by default it is set to\n&quot;false&quot; (the previous module is deleted).</p>\n\n<p style=\"margin-left:22%;\"><b>ignoredirs</b></p>\n\n<p style=\"margin-left:32%;\">List, separated by\n&quot;;&quot;, of directories to ignore when setting up\nusers homedirs. Some distributions use this to stop labeling\n/root as a homedir.</p>\n\n<p style=\"margin-left:22%;\"><b>usepasswd</b></p>\n\n<p style=\"margin-left:32%;\">Whether or not to enable the\nuse getpwent() to obtain a list of home directories to\nlabel. It can be set to either &quot;true&quot; or\n&quot;false&quot;. By default it is set to\n&quot;true&quot;.</p>\n\n\n<p style=\"margin-left:22%;\"><b>disable-genhomedircon</b></p>\n\n<p style=\"margin-left:32%;\">It controls whether or not the\ngenhomedircon function is executed when using the\n<b>semanage</b> command and it can be set to either\n&quot;false&quot; or &quot;true&quot;. By default the\ngenhomedircon functionality is enabled (equivalent to this\noption set to &quot;false&quot;).</p>\n\n<p style=\"margin-left:22%;\"><b>handle-unknown</b></p>\n\n<p style=\"margin-left:32%;\">This option overrides the\nkernel behavior for handling permissions defined in the\nkernel but missing from the actual policy. It can be set to\n&quot;deny&quot;, &quot;reject&quot; or &quot;allow&quot;.\nBy default the setting from the policy is taken.</p>\n\n<p style=\"margin-left:22%;\"><b>bzip-blocksize</b></p>\n\n<p style=\"margin-left:32%;\">It should be in the range 0-9.\nA value of 0 means no compression. By default the bzip block\nsize is set to 9 (actual block size value is obtained after\nmultiplication by 100000).</p>\n\n<p style=\"margin-left:22%;\"><b>bzip-small</b></p>\n\n<p style=\"margin-left:32%;\">When set to &quot;true&quot;,\nthe bzip algorithm shall try to reduce its system memory\nusage. It can be set to either &quot;true&quot; or\n&quot;false&quot; and by default it is set to\n&quot;false&quot;.</p>\n\n<p style=\"margin-left:22%;\"><b>remove-hll</b></p>\n\n<p style=\"margin-left:32%;\">When set to &quot;true&quot;,\nHLL files will be removed after compilation into CIL. In\norder to delete HLL files already compiled into CIL, modules\nwill need to be recompiled with the\n<b>ignore-module-cache</b> option set to &rsquo;true&rsquo;\nor using the <b>ignore-module-cache</b> option with\nsemodule. The remove-hll option can be set to either\n&quot;true&quot; or &quot;false&quot; and by default it is\nset to &quot;false&quot;.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Please note\nthat since this option deletes all HLL files, an updated HLL\ncompiler will not be able to recompile the original HLL file\ninto CIL. In order to compile the original HLL file into\nCIL, the same HLL file will need to be reinstalled.</p>\n\n<p style=\"margin-left:22%;\"><b>optimize-policy</b></p>\n\n<p style=\"margin-left:32%;\">When set to &quot;true&quot;,\nthe kernel policy will be optimized upon rebuilds. It can be\nset to either &quot;true&quot; or &quot;false&quot; and by\ndefault it is set to &quot;false&quot;.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">semanage(8)</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage was written by Guido Trentalancia\n&lt;guido@trentalancia.com&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The SELinux\nmanagement library was written by Tresys Technology LLC and\nRed Hat Inc.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":5}