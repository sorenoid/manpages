{"name":"openvpn","description":"openvpn examples - Secure IP tunnel daemon","body":"\n\n<h1 align=\"center\">OPENVPN</h1>\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">openvpn\nexamples - Secure IP tunnel daemon</p>\n\n<h2>INTRODUCTION\n<a name=\"INTRODUCTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This man page\ngives a few simple examples to create OpenVPN setups and\nconfiguration files.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Prior to\nrunning these examples, you should have OpenVPN installed on\ntwo machines with network connectivity between them. If you\nhave not yet installed OpenVPN, consult the INSTALL file\nincluded in the OpenVPN distribution.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Firewall\nSetup:</b> <br>\nIf firewalls exist between the two machines, they should be\nset to forward the port OpenVPN is configured to use, in\nboth directions. The default for OpenVPN is 1194/udp. If you\ndo not have control over the firewalls between the two\nmachines, you may still be able to use OpenVPN by adding\n<b>--ping 15</b> to each of the <b>openvpn</b> commands used\nbelow in the examples (this will cause each peer to send out\na UDP ping to its remote peer once every 15 seconds which\nwill cause many stateful firewalls to forward packets in\nboth directions without an explicit firewall rule).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please see your\noperating system guides for how to configure the firewall on\nyour systems.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>VPN Address\nSetup:</b> <br>\nFor purposes of our example, our two machines will be called\n<b>bob.example.com</b> and <b>alice.example.com</b>. If you\nare constructing a VPN over the internet, then replace\n<b>bob.example.com</b> and <b>alice.example.com</b> with the\ninternet hostname or IP address that each machine will use\nto contact the other over the internet.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now we will\nchoose the tunnel endpoints. Tunnel endpoints are private IP\naddresses that only have meaning in the context of the VPN.\nEach machine will use the tunnel endpoint of the other\nmachine to access it over the VPN. In our example, the\ntunnel endpoint for bob.example.com will be 10.4.0.1 and for\nalice.example.com, 10.4.0.2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once the VPN is\nestablished, you have essentially created a secure alternate\npath between the two hosts which is addressed by using the\ntunnel endpoints. You can control which network traffic\npasses between the hosts (a) over the VPN or (b)\nindependently of the VPN, by choosing whether to use (a) the\nVPN endpoint address or (b) the public internet address, to\naccess the remote host. For example if you are on\nbob.example.com and you wish to connect to\n<b>alice.example.com</b> via <b>ssh</b> without using the\nVPN (since <b>ssh</b> has its own built-in security) you\nwould use the command <b>ssh alice.example.com</b>. However\nin the same scenario, you could also use the command\n<b>telnet 10.4.0.2</b> to create a telnet session with\nalice.example.com over the VPN, that would use the VPN to\nsecure the session rather than <b>ssh</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can use any\naddress you wish for the tunnel endpoints but make sure that\nthey are private addresses (such as those that begin with 10\nor 192.168) and that they are not part of any existing\nsubnet on the networks of either peer, unless you are\nbridging. If you use an address that is part of your local\nsubnet for either of the tunnel endpoints, you will get a\nweird feedback loop.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example 1: A\nsimple tunnel without security</b> <br>\nOn bob:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">openvpn --remote alice.example.com --dev tun1 \\\n         --ifconfig 10.4.0.1 10.4.0.2 --verb 9</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On alice:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">openvpn --remote bob.example.com --dev tun1 \\\n         --ifconfig 10.4.0.2 10.4.0.1 --verb 9</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now verify the\ntunnel is working by pinging across the tunnel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On bob:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">ping 10.4.0.2</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On alice:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">ping 10.4.0.1</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>--verb\n9</b> option will produce verbose output, similar to the\n<b>tcpdump</b>(8) program. Omit the <b>--verb 9</b> option\nto have OpenVPN run quietly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example 2: A\ntunnel with static-key security (i.e. using a pre-shared\nsecret)</b> <br>\nFirst build a static key on bob.</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">openvpn --genkey --secret key</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command\nwill build a key file called <b>key</b> (in ascii format).\nNow copy <b>key</b> to <b>alice.example.com</b> over a\nsecure medium such as by using the <a href=\"https://man.page/1/scp\">scp(1)</a>\nprogram.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On bob:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">openvpn --remote alice.example.com --dev tun1  \\\n         --ifconfig 10.4.0.1 10.4.0.2 --verb 5 \\\n         --secret key</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On alice:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">openvpn --remote bob.example.com --dev tun1   \\\n        --ifconfig 10.4.0.2 10.4.0.1 --verb 5 \\\n        --secret key</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now verify the\ntunnel is working by pinging across the tunnel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On bob:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">ping 10.4.0.2</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On alice:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">ping 10.4.0.1</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example 3: A\ntunnel with full TLS-based security</b> <br>\nFor this test, we will designate <b>bob</b> as the TLS\nclient and <b>alice</b> as the TLS server.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>Note:</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The client or server designation only has meaning for\nthe TLS subsystem. It has no bearing on OpenVPN's\npeer-to-peer, UDP-based communication model.*</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, build a\nseparate certificate/key pair for both bob and alice (see\nabove where <b>--cert</b> is discussed for more info). Then\nconstruct Diffie Hellman parameters (see above where\n<b>--dh</b> is discussed for more info). You can also use\nthe included test files <b>client.crt</b>,\n<b>client.key</b>, <b>server.crt</b>, <b>server.key</b> and\n<b>ca.crt</b>. The <b>.crt</b> files are\ncertificates/public-keys, the <b>.key</b> files are private\nkeys, and <b>ca.crt</b> is a certification authority who has\nsigned both <b>client.crt</b> and <b>server.crt</b>. For\nDiffie Hellman parameters you can use the included file\n<b>dh2048.pem</b>. <i><br>\nWARNING:</i></p>\n\n<p style=\"margin-left:22%;\">All client, server, and\ncertificate authority certificates and keys included in the\nOpenVPN distribution are totally insecure and should be used\nfor testing only.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On bob:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">openvpn --remote alice.example.com --dev tun1    \\\n        --ifconfig 10.4.0.1 10.4.0.2             \\\n        --tls-client --ca ca.crt                 \\\n        --cert client.crt --key client.key       \\\n        --reneg-sec 60 --verb 5</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On alice:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">openvpn --remote bob.example.com --dev tun1      \\\n        --ifconfig 10.4.0.2 10.4.0.1             \\\n        --tls-server --dh dh1024.pem --ca ca.crt \\\n        --cert server.crt --key server.key       \\\n        --reneg-sec 60 --verb 5</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now verify the\ntunnel is working by pinging across the tunnel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On bob:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">ping 10.4.0.2</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On alice:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">ping 10.4.0.1</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Notice the\n<b>--reneg-sec 60</b> option we used above. That tells\nOpenVPN to renegotiate the data channel keys every minute.\nSince we used <b>--verb 5</b> above, you will see status\ninformation on each new key negotiation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For production\noperations, a key renegotiation interval of 60 seconds is\nprobably too frequent. Omit the <b>--reneg-sec 60</b> option\nto use OpenVPN's default key renegotiation interval of one\nhour.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Routing:</b>\n<br>\nAssuming you can ping across the tunnel, the next step is to\nroute a real subnet over the secure tunnel. Suppose that bob\nand alice have two network interfaces each, one connected to\nthe internet, and the other to a private network. Our goal\nis to securely connect both private networks. We will assume\nthat bob's private subnet is <i>10.0.0.0/24</i> and alice's\nis <i>10.0.1.0/24</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, ensure\nthat IP forwarding is enabled on both peers. On Linux,\nenable routing:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This setting is\nnot persistent. Please see your operating systems\ndocumentation how to properly configure IP forwarding, which\nis also persistent through system boots.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If your system\nis configured with a firewall. Please see your operating\nsystems guide on how to configure the firewall. You\ntypically want to allow traffic coming from and going to the\ntun/tap adapter OpenVPN is configured to use.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On bob:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.4.0.2</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On alice:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.4.0.1</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now any machine\non the <i>10.0.0.0/24</i> subnet can access any machine on\nthe <i>10.0.1.0/24</i> subnet over the secure tunnel (or\nvice versa).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a production\nenvironment, you could put the route command(s) in a script\nand execute with the <b>--up</b> option.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#INTRODUCTION\">INTRODUCTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>"],"level":5}