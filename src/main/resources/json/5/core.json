{"name":"core","body":"\n\n<h1 align=\"center\">CORE</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">core - core\ndump file</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\naction of certain signals is to cause a process to terminate\nand produce a <i>core dump file</i>, a file containing an\nimage of the process&rsquo;s memory at the time of\ntermination. This image can be used in a debugger (e.g.,\n<a href=\"https://man.page/1/gdb\">gdb(1)</a>) to inspect the state of the program at the\ntime that it terminated. A list of the signals which cause a\nprocess to dump core can be found in <a href=\"https://man.page/7/signal\">signal(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A process can\nset its soft <b>RLIMIT_CORE</b> resource limit to place an\nupper limit on the size of the core dump file that will be\nproduced if it receives a &quot;core dump&quot; signal; see\n<a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a> for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are\nvarious circumstances in which a core dump file is not\nproduced:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The process does not have permission to write the core\nfile. (By default, the core file is called <i>core</i> or\n<i>core.pid</i>, where <i>pid</i> is the ID of the process\nthat dumped core, and is created in the current working\ndirectory. See below for details on naming.) Writing the\ncore file fails if the directory in which it is to be\ncreated is not writable, or if a file with the same name\nexists and is not writable or is not a regular file (e.g.,\nit is a directory or a symbolic link).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>A (writable, regular) file with the same name as would\nbe used for the core dump already exists, but there is more\nthan one hard link to that file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The filesystem where the core dump file would be created\nis full; or has run out of inodes; or is mounted read-only;\nor the user has reached their quota for the filesystem.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The directory in which the core dump file is to be\ncreated does not exist.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <b>RLIMIT_CORE</b> (core file size) or\n<b>RLIMIT_FSIZE</b> (file size) resource limits for the\nprocess are set to zero; see <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a> and the\ndocumentation of the shell&rsquo;s <i>ulimit</i> command\n(<i>limit</i> in <a href=\"https://man.page/1/csh\">csh(1)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The binary being executed by the process does not have\nread permission enabled. (This is a security measure to\nensure that an executable whose contents are not readable\ndoes not produce a&mdash;possibly readable&mdash;core dump\ncontaining an image of the executable.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The process is executing a set-user-ID (set-group-ID)\nprogram that is owned by a user (group) other than the real\nuser (group) ID of the process, or the process is executing\na program that has file capabilities (see\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>). (However, see the description of\nthe <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_SET_DUMPABLE</b> operation, and\nthe description of the <i>/proc/sys/fs/suid_dumpable</i>\nfile in <a href=\"https://man.page/5/proc\">proc(5)</a>.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><i>/proc/sys/kernel/core_pattern</i> is empty and\n<i>/proc/sys/kernel/core_uses_pid</i> contains the value 0.\n(These files are described below.) Note that if\n<i>/proc/sys/kernel/core_pattern</i> is empty and\n<i>/proc/sys/kernel/core_uses_pid</i> contains the value 1,\ncore dump files will have names of the form <i>.pid</i>, and\nsuch files are hidden unless one uses the <a href=\"https://man.page/1/ls\">ls(1)</a>\n<i>-a</i> option.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>(Since Linux 3.7) The kernel was configured without the\n<b>CONFIG_COREDUMP</b> option.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition, a\ncore dump may exclude part of the address space of the\nprocess if the <a href=\"https://man.page/2/madvise\">madvise(2)</a> <b>MADV_DONTDUMP</b> flag\nwas employed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On systems that\nemploy <a href=\"https://man.page/1/systemd\">systemd(1)</a> as the <i>init</i> framework, core\ndumps may instead be placed in a location determined by\n<a href=\"https://man.page/1/systemd\">systemd(1)</a>. See below for further details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Naming of\ncore dump files</b> <br>\nBy default, a core dump file is named <i>core</i>, but the\n<i>/proc/sys/kernel/core_pattern</i> file (since Linux 2.6\nand 2.4.21) can be set to define a template that is used to\nname core dump files. The template can contain % specifiers\nwhich are substituted by the following values when a core\nfile is created:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">%%</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">A single % character.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%c</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Core file size soft resource limit of crashing process\n(since Linux 2.6.24).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%d</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Dump mode&mdash;same as value returned by\n<a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_GET_DUMPABLE</b> (since Linux\n3.7).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%e</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>The process or thread&rsquo;s <i>comm</i> value, which\ntypically is the same as the executable filename (without\npath prefix, and truncated to a maximum of 15 characters),\nbut may have been modified to be something different; see\nthe discussion of <i>/proc/[pid]/comm</i> and\n<i>/proc/[pid]/task/[tid]/comm</i> in <a href=\"https://man.page/5/proc\">proc(5)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%E</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Pathname of executable, with slashes ('/') replaced by\nexclamation marks ('!') (since Linux 3.0).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%g</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Numeric real GID of dumped process.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%h</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Hostname (same as <i>nodename</i> returned by\n<a href=\"https://man.page/2/uname\">uname(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%i</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>TID of thread that triggered core dump, as seen in the\nPID namespace in which the thread resides (since Linux\n3.18).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%I</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>TID of thread that triggered core dump, as seen in the\ninitial PID namespace (since Linux 3.18).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%p</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>PID of dumped process, as seen in the PID namespace in\nwhich the process resides.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%P</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>PID of dumped process, as seen in the initial PID\nnamespace (since Linux 3.12).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%s</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Number of signal causing dump.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%t</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Time of dump, expressed as seconds since the Epoch,\n1970-01-01 00:00:00 +0000 (UTC).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>%u</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Numeric real UID of dumped process.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A single % at\nthe end of the template is dropped from the core filename,\nas is the combination of a % followed by any character other\nthan those listed above. All other characters in the\ntemplate become a literal part of the core filename. The\ntemplate may include '/' characters, which are interpreted\nas delimiters for directory names. The maximum size of the\nresulting core filename is 128 bytes (64 bytes in kernels\nbefore 2.6.19). The default value in this file is\n&quot;core&quot;. For backward compatibility, if\n<i>/proc/sys/kernel/core_pattern</i> does not include\n<i>%p</i> and <i>/proc/sys/kernel/core_uses_pid</i> (see\nbelow) is nonzero, then .PID will be appended to the core\nfilename.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Paths are\ninterpreted according to the settings that are active for\nthe crashing process. That means the crashing\nprocess&rsquo;s mount namespace (see\n<a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>), its current working directory\n(found via <a href=\"https://man.page/2/getcwd\">getcwd(2)</a>), and its root directory (see\n<a href=\"https://man.page/2/chroot\">chroot(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since version\n2.4, Linux has also provided a more primitive method of\ncontrolling the name of the core dump file. If the\n<i>/proc/sys/kernel/core_uses_pid</i> file contains the\nvalue 0, then a core dump file is simply named <i>core</i>.\nIf this file contains a nonzero value, then the core dump\nfile includes the process ID in a name of the form\n<i>core.PID</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n3.6, if <i>/proc/sys/fs/suid_dumpable</i> is set to 2\n(&quot;suidsafe&quot;), the pattern must be either an\nabsolute pathname (starting with a leading '/' character) or\na pipe, as defined below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Piping core\ndumps to a program</b> <br>\nSince kernel 2.6.19, Linux supports an alternate syntax for\nthe <i>/proc/sys/kernel/core_pattern</i> file. If the first\ncharacter of this file is a pipe symbol (<b>|</b>), then the\nremainder of the line is interpreted as the command-line for\na user-space program (or script) that is to be executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since kernel\n5.3.0, the pipe template is split on spaces into an argument\nlist <i>before</i> the template parameters are expanded. In\nearlier kernels, the template parameters are expanded first\nand the resulting string is split on spaces into an argument\nlist. This means that in earlier kernels executable names\nadded by the <i>%e</i> and <i>%E</i> template parameters\ncould get split into multiple arguments. So the core dump\nhandler needs to put the executable names as the last\nargument and ensure it joins all parts of the executable\nname using spaces. Executable names with multiple spaces in\nthem are not correctly represented in earlier kernels,\nmeaning that the core dump handler needs to use mechanisms\nto find the executable name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Instead of\nbeing written to a file, the core dump is given as standard\ninput to the program. Note the following points:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The program must be specified\nusing an absolute pathname (or a pathname relative to the\nroot directory, <i>/</i>), and must immediately follow the\n&rsquo;|&rsquo; character.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The command-line arguments can include any of the %\nspecifiers listed above. For example, to pass the PID of the\nprocess that is being dumped, specify <i>%p</i> in an\nargument.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The process created to run the program runs as user and\ngroup <i>root</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Running as <i>root</i> does not confer any exceptional\nsecurity bypasses. Namely, LSMs (e.g., SELinux) are still\nactive and may prevent the handler from accessing details\nabout the crashed process via <i>/proc/[pid]</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The program pathname is interpreted with respect to the\ninitial mount namespace as it is always executed there. It\nis not affected by the settings (e.g., root directory, mount\nnamespace, current working directory) of the crashing\nprocess.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The process runs in the initial namespaces (PID, mount,\nuser, and so on) and not in the namespaces of the crashing\nprocess. One can utilize specifiers such as <i>%P</i> to\nfind the right <i>/proc/[pid]</i> directory and probe/enter\nthe crashing process&rsquo;s namespaces if needed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The process starts with its current working directory as\nthe root directory. If desired, it is possible change to the\nworking directory of the dumping process by employing the\nvalue provided by the <i>%P</i> specifier to change to the\nlocation of the dumping process via\n<i>/proc/[pid]/cwd</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Command-line arguments can be supplied to the program\n(since Linux 2.6.24), delimited by white space (up to a\ntotal line length of 128 bytes).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <b>RLIMIT_CORE</b> limit is not enforced for core\ndumps that are piped to a program via this mechanism.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc/sys/kernel/core_pipe_limit</b>\n<br>\nWhen collecting core dumps via a pipe to a user-space\nprogram, it can be useful for the collecting program to\ngather data about the crashing process from that\nprocess&rsquo;s <i>/proc/[pid]</i> directory. In order to do\nthis safely, the kernel must wait for the program collecting\nthe core dump to exit, so as not to remove the crashing\nprocess&rsquo;s <i>/proc/[pid]</i> files prematurely. This\nin turn creates the possibility that a misbehaving\ncollecting program can block the reaping of a crashed\nprocess by simply never exiting.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.32, the <i>/proc/sys/kernel/core_pipe_limit</i> can be\nused to defend against this possibility. The value in this\nfile defines how many concurrent crashing processes may be\npiped to user-space programs in parallel. If this value is\nexceeded, then those crashing processes above this value are\nnoted in the kernel log and their core dumps are\nskipped.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A value of 0 in\nthis file is special. It indicates that unlimited processes\nmay be captured in parallel, but that no waiting will take\nplace (i.e., the collecting program is not guaranteed access\nto <i>/proc/&lt;crashing-PID&gt;</i>). The default value for\nthis file is 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Controlling\nwhich mappings are written to the core dump</b> <br>\nSince kernel 2.6.23, the Linux-specific\n<i>/proc/[pid]/coredump_filter</i> file can be used to\ncontrol which memory segments are written to the core dump\nfile in the event that a core dump is performed for the\nprocess with the corresponding process ID.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value in\nthe file is a bit mask of memory mapping types (see\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>). If a bit is set in the mask, then memory\nmappings of the corresponding type are dumped; otherwise\nthey are not dumped. The bits in this file have the\nfollowing meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"8%\">\n\n\n<p style=\"margin-top: 1em\">bit 0</p></td>\n<td width=\"3%\"></td>\n<td width=\"52%\">\n\n\n<p style=\"margin-top: 1em\">Dump anonymous private\nmappings.</p> </td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"8%\">\n\n\n<p>bit 1</p></td>\n<td width=\"3%\"></td>\n<td width=\"52%\">\n\n\n<p>Dump anonymous shared mappings.</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"8%\">\n\n\n<p>bit 2</p></td>\n<td width=\"3%\"></td>\n<td width=\"52%\">\n\n\n<p>Dump file-backed private mappings.</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"8%\">\n\n\n<p>bit 3</p></td>\n<td width=\"3%\"></td>\n<td width=\"52%\">\n\n\n<p>Dump file-backed shared mappings.</p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">bit 4 (since Linux 2.6.24)</p>\n\n<p style=\"margin-left:28%;\">Dump ELF headers.</p>\n\n<p style=\"margin-left:17%;\">bit 5 (since Linux 2.6.28)</p>\n\n<p style=\"margin-left:28%;\">Dump private huge pages.</p>\n\n<p style=\"margin-left:17%;\">bit 6 (since Linux 2.6.28)</p>\n\n<p style=\"margin-left:28%;\">Dump shared huge pages.</p>\n\n<p style=\"margin-left:17%;\">bit 7 (since Linux 4.4)</p>\n\n<p style=\"margin-left:28%;\">Dump private DAX pages.</p>\n\n<p style=\"margin-left:17%;\">bit 8 (since Linux 4.4)</p>\n\n<p style=\"margin-left:28%;\">Dump shared DAX pages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, the\nfollowing bits are set: 0, 1, 4 (if the\n<b>CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS</b> kernel\nconfiguration option is enabled), and 5. This default can be\nmodified at boot time using the <i>coredump_filter</i> boot\noption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value of\nthis file is displayed in hexadecimal. (The default value is\nthus displayed as 33.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Memory-mapped\nI/O pages such as frame buffer are never dumped, and virtual\nDSO (<a href=\"https://man.page/7/vdso\">vdso(7)</a>) pages are always dumped, regardless of\nthe <i>coredump_filter</i> value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A child process\ncreated via <a href=\"https://man.page/2/fork\">fork(2)</a> inherits its parent&rsquo;s\n<i>coredump_filter</i> value; the <i>coredump_filter</i>\nvalue is preserved across an <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It can be\nuseful to set <i>coredump_filter</i> in the parent shell\nbefore running a program, for example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>echo 0x7\n&gt; /proc/self/coredump_filter</b> <br>\n$ <b>./some_program</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This file is\nprovided only if the kernel was built with the\n<b>CONFIG_ELF_CORE</b> configuration option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Core dumps\nand systemd</b> <br>\nOn systems using the <a href=\"https://man.page/1/systemd\">systemd(1)</a> <i>init</i>\nframework, core dumps may be placed in a location determined\nby <a href=\"https://man.page/1/systemd\">systemd(1)</a>. To do this, <a href=\"https://man.page/1/systemd\">systemd(1)</a> employs\nthe <i>core_pattern</i> feature that allows piping core\ndumps to a program. One can verify this by checking whether\ncore dumps are being piped to the <b>systemd-coredump</b>(8)\nprogram:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat\n/proc/sys/kernel/core_pattern</b> <br>\n|/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %e</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this case,\ncore dumps will be placed in the location configured for\n<b>systemd-coredump</b>(8), typically as <a href=\"https://man.page/1/lz4\">lz4(1)</a>\ncompressed files in the directory\n<i>/var/lib/systemd/coredump/</i>. One can list the core\ndumps that have been recorded by <b>systemd-coredump</b>(8)\nusing <a href=\"https://man.page/1/coredumpctl\">coredumpctl(1)</a>:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$\n<b>coredumpctl list | tail -5</b> <br>\nWed 2017-10-11 22:25:30 CEST 2748 1000 1000 3 present\n/usr/bin/sleep <br>\nThu 2017-10-12 06:29:10 CEST 2716 1000 1000 3 present\n/usr/bin/sleep <br>\nThu 2017-10-12 06:30:50 CEST 2767 1000 1000 3 present\n/usr/bin/sleep <br>\nThu 2017-10-12 06:37:40 CEST 2918 1000 1000 3 present\n/usr/bin/cat <br>\nThu 2017-10-12 08:13:07 CEST 2955 1000 1000 3 present\n/usr/bin/cat</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The information\nshown for each core dump includes the date and time of the\ndump, the PID, UID, and GID of the dumping process, the\nsignal number that caused the core dump, and the pathname of\nthe executable that was being run by the dumped process.\nVarious options to <a href=\"https://man.page/1/coredumpctl\">coredumpctl(1)</a> allow a specified\ncoredump file to be pulled from the <a href=\"https://man.page/1/systemd\">systemd(1)</a>\nlocation into a specified file. For example, to extract the\ncore dump for PID 2955 shown above to a file named\n<i>core</i> in the current directory, one could use:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>coredumpctl dump 2955 -o core</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For more\nextensive details, see the <a href=\"https://man.page/1/coredumpctl\">coredumpctl(1)</a> manual\npage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To\n(persistently) disable the <a href=\"https://man.page/1/systemd\">systemd(1)</a> mechanism that\narchives core dumps, restoring to something more like\ntraditional Linux behavior, one can set an override for the\n<a href=\"https://man.page/1/systemd\">systemd(1)</a> mechanism, using something like:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>echo\n&quot;kernel.core_pattern=core.%p&quot; &gt; \\ <br>\n/etc/sysctl.d/50-coredump.conf</b> <br>\n# <b>/lib/systemd/systemd-sysctl</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is also\npossible to temporarily (i.e., until the next reboot) change\nthe <i>core_pattern</i> setting using a command such as the\nfollowing (which causes the names of core dump files to\ninclude the executable name as well as the number of the\nsignal which triggered the core dump):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>sysctl -w\nkernel.core_pattern=&quot;%e-%s.core&quot;</b></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<a href=\"https://man.page/1/gdb\">gdb(1)</a> <i>gcore</i> command can be used to obtain a\ncore dump of a running process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In Linux\nversions up to and including 2.6.27, if a multithreaded\nprocess (or, more precisely, a process that shares its\nmemory with another process by being created with the\n<b>CLONE_VM</b> flag of <a href=\"https://man.page/2/clone\">clone(2)</a>) dumps core, then\nthe process ID is always appended to the core filename,\nunless the process ID was already included elsewhere in the\nfilename via a <i>%p</i> specification in\n<i>/proc/sys/kernel/core_pattern</i>. (This is primarily\nuseful when employing the obsolete LinuxThreads\nimplementation, where each thread of a process has a\ndifferent PID.)</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow can be used to demonstrate the use of the pipe syntax\nin the <i>/proc/sys/kernel/core_pattern</i> file. The\nfollowing shell session demonstrates the use of this program\n(compiled to create an executable named\n<i>core_pattern_pipe_test</i>):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cc -o\ncore_pattern_pipe_test core_pattern_pipe_test.c</b> <br>\n$ <b>su</b> <br>\nPassword: <br>\n# <b>echo &quot;|$PWD/core_pattern_pipe_test %p UID=%u\nGID=%g sig=%s&quot; &gt; \\ <br>\n/proc/sys/kernel/core_pattern</b> <br>\n# <b>exit</b> <br>\n$ <b>sleep 100 <br>\n^\\</b> # type control-backslash <br>\nQuit (core dumped) <br>\n$ <b>cat core.info</b> <br>\nargc=5 <br>\nargc[0]=&lt;/home/mtk/core_pattern_pipe_test&gt; <br>\nargc[1]=&lt;20575&gt; <br>\nargc[2]=&lt;UID=1000&gt; <br>\nargc[3]=&lt;GID=100&gt; <br>\nargc[4]=&lt;sig=3&gt; <br>\nTotal bytes in core dump: 282624</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n/* core_pattern_pipe_test.c */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\n_GNU_SOURCE <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;fcntl.h&gt; <br>\n#include &lt;limits.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nBUF_SIZE 1024</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nssize_t nread, tot; <br>\nchar buf[BUF_SIZE]; <br>\nFILE *fp; <br>\nchar cwd[PATH_MAX];</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Change our\ncurrent working directory to that of the <br>\ncrashing process */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">snprintf(cwd,\nPATH_MAX, &quot;/proc/%s/cwd&quot;, argv[1]); <br>\nchdir(cwd);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Write output\nto file &quot;core.info&quot; in that directory */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fp =\nfopen(&quot;core.info&quot;, &quot;w+&quot;); <br>\nif (fp == NULL) <br>\nexit(EXIT_FAILURE);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Display\ncommand-line arguments given to core_pattern <br>\npipe program */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fprintf(fp,\n&quot;argc=%d\\n&quot;, argc); <br>\nfor (int j = 0; j &lt; argc; j++) <br>\nfprintf(fp, &quot;argc[%d]=&lt;%s&gt;\\n&quot;, j,\nargv[j]);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Count bytes\nin standard input (the core dump) */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">tot = 0; <br>\nwhile ((nread = read(STDIN_FILENO, buf, BUF_SIZE)) &gt; 0)\n<br>\ntot += nread; <br>\nfprintf(fp, &quot;Total bytes in core dump: %zd\\n&quot;,\ntot);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fclose(fp);\n<br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/bash\">bash(1)</a>,\n<a href=\"https://man.page/1/coredumpctl\">coredumpctl(1)</a>, <a href=\"https://man.page/1/gdb\">gdb(1)</a>, <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>,\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>, <a href=\"https://man.page/2/prctl\">prctl(2)</a>, <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/5/elf\">elf(5)</a>, <a href=\"https://man.page/5/proc\">proc(5)</a>, <a href=\"https://man.page/7/pthreads\">pthreads(7)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a>, <b>systemd-coredump</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":5}