{"name":"systemd.exec","description":"systemd.exec - Execution environment configuration","body":"\n\n<h1 align=\"center\">SYSTEMD.EXEC</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">systemd.exec -\nExecution environment configuration</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>service</i>.service,\n<i>socket</i>.socket, <i>mount</i>.mount,\n<i>swap</i>.swap</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unit\nconfiguration files for services, sockets, mount points, and\nswap devices share a subset of configuration options which\ndefine the execution environment of spawned processes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This man page\nlists the configuration options shared by these four unit\ntypes. See <b>systemd.unit</b>(5) for the common options of\nall unit configuration files, and <b>systemd.service</b>(5),\n<b>systemd.socket</b>(5), <b>systemd.swap</b>(5), and\n<b>systemd.mount</b>(5) for more information on the specific\nunit configuration files. The execution specific\nconfiguration options are configured in the [Service],\n[Socket], [Mount], or [Swap] sections, depending on the unit\ntype.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\noptions which control resources through Linux Control Groups\n(cgroups) are listed in <b>systemd.resource-control</b>(5).\nThose options complement options listed here.</p>\n\n<h2>IMPLICIT DEPENDENCIES\n<a name=\"IMPLICIT DEPENDENCIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A few execution\nparameters result in additional, automatic dependencies to\nbe added:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Units\nwith <i>WorkingDirectory=</i>, <i>RootDirectory=</i>,\n<i>RootImage=</i>, <i>RuntimeDirectory=</i>,\n<i>StateDirectory=</i>, <i>CacheDirectory=</i>,\n<i>LogsDirectory=</i> or <i>ConfigurationDirectory=</i> set\nautomatically gain dependencies of type <i>Requires=</i> and\n<i>After=</i> on all mount units required to access the\nspecified paths. This is equivalent to having them listed\nexplicitly in <i>RequiresMountsFor=</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nSimilarly, units with <i>PrivateTmp=</i> enabled\nautomatically get mount unit dependencies for all mounts\nrequired to access /tmp/ and /var/tmp/. They will also gain\nan automatic <i>After=</i> dependency on\n<b>systemd-tmpfiles-setup.service</b>(8).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Units\nwhose standard output or error output is connected to\n<b>journal</b> or <b>kmsg</b> (or their combinations with\nconsole output, see below) automatically acquire\ndependencies of type <i>After=</i> on\nsystemd-journald.socket.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Units\nusing <i>LogNamespace=</i> will automatically gain ordering\nand requirement dependencies on the two socket units\nassociated with systemd-journald@.service instances.</p>\n\n<h2>PATHS\n<a name=\"PATHS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nsettings may be used to change a service's view of the\nfilesystem. Please note that the paths must be absolute and\nmust not contain a &quot;..&quot; path component.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>WorkingDirectory=</i></p>\n\n<p style=\"margin-left:17%;\">Takes a directory path relative\nto the service's root directory specified by\n<i>RootDirectory=</i>, or the special value &quot;~&quot;.\nSets the working directory for executed processes. If set to\n&quot;~&quot;, the home directory of the user specified in\n<i>User=</i> is used. If not set, defaults to the root\ndirectory when systemd is running as a system instance and\nthe respective user's home directory if run as user. If the\nsetting is prefixed with the &quot;-&quot; character, a\nmissing working directory is not considered fatal. If\n<i>RootDirectory=</i>/<i>RootImage=</i> is not set, then\n<i>WorkingDirectory=</i> is relative to the root of the\nsystem running the service manager. Note that setting this\nparameter might result in additional dependencies to be\nadded to the unit (see above).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>RootDirectory=</i></p>\n\n<p style=\"margin-left:17%;\">Takes a directory path relative\nto the host's root directory (i.e. the root of the system\nrunning the service manager). Sets the root directory for\nexecuted processes, with the <a href=\"https://man.page/2/chroot\">chroot(2)</a> system call.\nIf this is used, it must be ensured that the process binary\nand all its auxiliary files are available in the\n<b>chroot()</b> jail. Note that setting this parameter might\nresult in additional dependencies to be added to the unit\n(see above).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>MountAPIVFS=</i> and <i>PrivateUsers=</i> settings are\nparticularly useful in conjunction with\n<i>RootDirectory=</i>. For details, see below.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<i>RootDirectory=</i>/<i>RootImage=</i> are used together\nwith <i>NotifyAccess=</i> the notification socket is\nautomatically mounted from the host into the root\nenvironment, to ensure the notification interface can work\ncorrectly.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nservices using <i>RootDirectory=</i>/<i>RootImage=</i> will\nnot be able to log via the syslog or journal protocols to\nthe host logging infrastructure, unless the relevant sockets\nare mounted from the host, specifically:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Example&nbsp;1.&nbsp;Mounting\nlogging sockets into root environment</b></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\">BindReadOnlyPaths=/dev/log\n/run/systemd/journal/socket /run/systemd/journal/stdout</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This option is\nonly available for system services and is not supported for\nservices running in per-user instances of the service\nmanager.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>RootImage=</i></p>\n\n<p style=\"margin-left:17%;\">Takes a path to a block device\nnode or regular file as argument. This call is similar to\n<i>RootDirectory=</i> however mounts a file system hierarchy\nfrom a block device node or loopback file instead of a\ndirectory. The device node or file system image file needs\nto contain a file system without a partition table, or a\nfile system within an MBR/MS-DOS or GPT partition table with\nonly a single Linux-compatible partition, or a set of file\nsystems within a GPT partition table that follows the\n<b><font color=\"#0000FF\">Discoverable Partitions\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<i>DevicePolicy=</i> is set to &quot;closed&quot; or\n&quot;strict&quot;, or set to &quot;auto&quot; and\n<i>DeviceAllow=</i> is set, then this setting adds\n/dev/loop-control with <b>rw</b> mode,\n&quot;block-loop&quot; and &quot;block-blkext&quot; with\n<b>rwm</b> mode to <i>DeviceAllow=</i>. See\n<b>systemd.resource-control</b>(5) for the details about\n<i>DevicePolicy=</i> or <i>DeviceAllow=</i>. Also, see\n<i>PrivateDevices=</i> below, as it may change the setting\nof <i>DevicePolicy=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Units\nmaking use of <i>RootImage=</i> automatically gain an\n<i>After=</i> dependency on\nsystemd-udevd.service.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RootImageOptions=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\ncomma-separated list of mount options that will be used on\ndisk images specified by <i>RootImage=</i>. Optionally a\npartition name can be prefixed, followed by colon, in case\nthe image has multiple partitions, otherwise partition name\n&quot;root&quot; is implied. Options for multiple partitions\ncan be specified in a single line with space separators.\nAssigning an empty string removes previous assignments.\nDuplicated options are ignored. For a list of valid mount\noptions, please refer to <b>mount</b>(8).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Valid\npartition names follow the</font>\n<b><font color=\"#0000FF\">Discoverable Partitions\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">: <b>root</b>, <b>usr</b>,\n<b>home</b>, <b>srv</b>, <b>esp</b>, <b>xbootldr</b>,\n<b>tmp</b>, <b>var</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RootHash=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\ndata integrity (dm-verity) root hash specified in\nhexadecimal, or the path to a file containing a root hash in\nASCII hexadecimal format. This option enables data integrity\nchecks using dm-verity, if the used image contains the\nappropriate integrity data (see above) or if\n<i>RootVerity=</i> is used. The specified hash must match\nthe root hash of integrity data, and is usually at least 256\nbits (and hence 64 formatted hexadecimal characters) long\n(in case of SHA256 for example). If this option is not\nspecified, but the image file carries the\n&quot;user.verity.roothash&quot; extended file attribute\n(see <a href=\"https://man.page/7/xattr\">xattr(7)</a>), then the root hash is read from it,\nalso as formatted hexadecimal characters. If the extended\nfile attribute is not found (or is not supported by the\nunderlying file system), but a file with the .roothash\nsuffix is found next to the image file, bearing otherwise\nthe same name (except if the image has the .raw suffix, in\nwhich case the root hash file must not have it in its name),\nthe root hash is read from it and automatically used, also\nas formatted hexadecimal characters.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthe disk image contains a separate /usr/ partition it may\nalso be Verity protected, in which case the root hash may\nconfigured via an extended attribute\n&quot;user.verity.usrhash&quot; or a .usrhash file adjacent\nto the disk image. There's currently no option to configure\nthe root hash for the /usr/ file system via the unit file\ndirectly.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RootHashSignature=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nPKCS7 signature of the <i>RootHash=</i> option as a path to\na DER-encoded signature file, or as an ASCII base64 string\nencoding of a DER-encoded signature prefixed by\n&quot;base64:&quot;. The dm-verity volume will only be\nopened if the signature of the root hash is valid and signed\nby a public key present in the kernel keyring. If this\noption is not specified, but a file with the .roothash.p7s\nsuffix is found next to the image file, bearing otherwise\nthe same name (except if the image has the .raw suffix, in\nwhich case the signature file must not have it in its name),\nthe signature is read from it and automatically\nused.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthe disk image contains a separate /usr/ partition it may\nalso be Verity protected, in which case the signature for\nthe root hash may configured via a .usrhash.p7s file\nadjacent to the disk image. There's currently no option to\nconfigure the root hash signature for the /usr/ via the unit\nfile directly.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RootVerity=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes the\npath to a data integrity (dm-verity) file. This option\nenables data integrity checks using dm-verity, if\n<i>RootImage=</i> is used and a root-hash is passed and if\nthe used image itself does not contains the integrity data.\nThe integrity data must be matched by the root hash. If this\noption is not specified, but a file with the .verity suffix\nis found next to the image file, bearing otherwise the same\nname (except if the image has the .raw suffix, in which case\nthe verity data file must not have it in its name), the\nverity data is read from it and automatically\nused.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is supported only for disk images that contain a\nsingle file system, without an enveloping partition table.\nImages that contain a GPT partition table should instead\ninclude both root file system and matching Verity data in\nthe same image, implementing the</font>\n<b><font color=\"#0000FF\">Discoverable Partitions\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>MountAPIVFS=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If on, a private mount namespace for the\nunit's processes is created and the API file systems /proc/,\n/sys/, /dev/ and /run/ (as an empty &quot;tmpfs&quot;) are\nmounted inside of it, unless they are already mounted. Note\nthat this option has no effect unless used in conjunction\nwith <i>RootDirectory=</i>/<i>RootImage=</i> as these four\nmounts are generally mounted in the host anyway, and unless\nthe root directory is changed, the private mount namespace\nwill be a 1:1 copy of the host's, and include these four\nmounts. Note that the /dev/ file system of the host is bind\nmounted if this option is used without\n<i>PrivateDevices=</i>. To run the service with a private,\nminimal version of /dev/, combine this option with\n<i>PrivateDevices=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">In\norder to allow propagating mounts at runtime in a safe\nmanner, /run/systemd/propagate on the host will be used to\nset up new mounts, and /run/host/incoming/ in the private\nnamespace will be used as an intermediate step to store them\nbefore being moved to the final mount point.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectProc=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes one\nof &quot;noaccess&quot;, &quot;invisible&quot;,\n&quot;ptraceable&quot; or &quot;default&quot; (which it\ndefaults to). When set, this controls the\n&quot;hidepid=&quot; mount option of the &quot;procfs&quot;\ninstance for the unit that controls which directories with\nprocess metainformation (/proc/<i>PID</i>) are visible and\naccessible: when set to &quot;noaccess&quot; the ability to\naccess most of other users' process metadata in /proc/ is\ntaken away for processes of the service. When set to\n&quot;invisible&quot; processes owned by other users are\nhidden from /proc/. If &quot;ptraceable&quot; all processes\nthat cannot be <b>ptrace()</b>'ed by a process are hidden to\nit. If &quot;default&quot; no restrictions on /proc/ access\nor visibility are made. For further details see</font>\n<b><font color=\"#0000FF\">The /proc Filesystem</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">. It is generally recommended to run\nmost system services with this option set to\n&quot;invisible&quot;. This option is implemented via file\nsystem namespacing, and thus cannot be used with services\nthat shall be able to install mount points in the host file\nsystem hierarchy. Note that the root user is unaffected by\nthis option, so to be effective it has to be used together\nwith <i>User=</i> or <i>DynamicUser=yes</i>, and also\nwithout the &quot;CAP_SYS_PTRACE&quot; capability, which\nalso allows a process to bypass this feature. It cannot be\nused for services that need to access metainformation about\nother users' processes. This option implies\n<i>MountAPIVFS=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthe kernel doesn't support per-mount point <b>hidepid=</b>\nmount options this setting remains without effect, and the\nunit's processes will be able to access and see other\nprocess as if the option was not used.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProcSubset=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes one\nof &quot;all&quot; (the default) and &quot;pid&quot;. If\n&quot;pid&quot;, all files and directories not directly\nassociated with process management and introspection are\nmade invisible in the /proc/ file system configured for the\nunit's processes. This controls the &quot;subset=&quot;\nmount option of the &quot;procfs&quot; instance for the\nunit. For further details see</font>\n<b><font color=\"#0000FF\">The /proc Filesystem</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">. Note that Linux exposes various\nkernel APIs via /proc/, which are made unavailable with this\nsetting. Since these APIs are used frequently this option is\nuseful only in a few, specific cases, and is not suitable\nfor most non-trivial programs.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Much\nlike <i>ProtectProc=</i> above, this is implemented via file\nsystem mount namespacing, and hence the same restrictions\napply: it is only available to system services, it disables\nmount propagation to the host mount table, and it implies\n<i>MountAPIVFS=</i>. Also, like <i>ProtectProc=</i> this\nsetting is gracefully disabled if the used kernel does not\nsupport the &quot;subset=&quot; mount option of\n&quot;procfs&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>BindPaths=</i>,\n<i>BindReadOnlyPaths=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\nunit-specific bind mounts. A bind mount makes a particular\nfile or directory available at an additional place in the\nunit's view of the file system. Any bind mounts created with\nthis option are specific to the unit, and are not visible in\nthe host's mount table. This option expects a whitespace\nseparated list of bind mount definitions. Each definition\nconsists of a colon-separated triple of source path,\ndestination path and option string, where the latter two are\noptional. If only a source path is specified the source and\ndestination is taken to be the same. The option string may\nbe either &quot;rbind&quot; or &quot;norbind&quot; for\nconfiguring a recursive or non-recursive bind mount. If the\ndestination path is omitted, the option string must be\nomitted too. Each bind mount definition may be prefixed with\n&quot;-&quot;, in which case it will be ignored when its\nsource path does not exist.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><i>BindPaths=</i>\ncreates regular writable bind mounts (unless the source file\nsystem mount is already marked read-only), while\n<i>BindReadOnlyPaths=</i> creates read-only bind mounts.\nThese settings may be used more than once, each usage\nappends to the unit's list of bind mounts. If the empty\nstring is assigned to either of these two options the entire\nlist of bind mounts defined prior to this is reset. Note\nthat in this case both read-only and regular bind mounts are\nreset, regardless which of the two settings is\nused.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is particularly useful when\n<i>RootDirectory=</i>/<i>RootImage=</i> is used. In this\ncase the source path refers to a path on the host file\nsystem, while the destination path refers to a path below\nthe root directory of the unit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the destination directory must exist or systemd must be\nable to create it. Thus, it is not possible to use those\noptions for mount points nested underneath paths specified\nin <i>InaccessiblePaths=</i>, or under /home/ and other\nprotected directories if <i>ProtectHome=yes</i> is\nspecified. <i>TemporaryFileSystem=</i> with &quot;:ro&quot;\nor <i>ProtectHome=tmpfs</i> should be used\ninstead.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>MountImages=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This\nsetting is similar to <i>RootImage=</i> in that it mounts a\nfile system hierarchy from a block device node or loopback\nfile, but the destination directory can be specified as well\nas mount options. This option expects a whitespace separated\nlist of mount definitions. Each definition consists of a\ncolon-separated tuple of source path and destination\ndefinitions, optionally followed by another colon and a list\nof mount options.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Mount\noptions may be defined as a single comma-separated list of\noptions, in which case they will be implicitly applied to\nthe root partition on the image, or a series of\ncolon-separated tuples of partition name and mount options.\nValid partition names and mount options are the same as for\n<i>RootImageOptions=</i> setting described above.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Each\nmount definition may be prefixed with &quot;-&quot;, in\nwhich case it will be ignored when its source path does not\nexist. The source argument is a path to a block device node\nor regular file. If source or destination contain a\n&quot;:&quot;, it needs to be escaped as &quot;\\:&quot;. The\ndevice node or file system image file needs to follow the\nsame rules as specified for <i>RootImage=</i>. Any mounts\ncreated with this option are specific to the unit, and are\nnot visible in the host's mount table.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">These\nsettings may be used more than once, each usage appends to\nthe unit's list of mount paths. If the empty string is\nassigned, the entire list of mount paths defined prior to\nthis is reset.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the destination directory must exist or systemd must be\nable to create it. Thus, it is not possible to use those\noptions for mount points nested underneath paths specified\nin <i>InaccessiblePaths=</i>, or under /home/ and other\nprotected directories if <i>ProtectHome=yes</i> is\nspecified.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<i>DevicePolicy=</i> is set to &quot;closed&quot; or\n&quot;strict&quot;, or set to &quot;auto&quot; and\n<i>DeviceAllow=</i> is set, then this setting adds\n/dev/loop-control with <b>rw</b> mode,\n&quot;block-loop&quot; and &quot;block-blkext&quot; with\n<b>rwm</b> mode to <i>DeviceAllow=</i>. See\n<b>systemd.resource-control</b>(5) for the details about\n<i>DevicePolicy=</i> or <i>DeviceAllow=</i>. Also, see\n<i>PrivateDevices=</i> below, as it may change the setting\nof <i>DevicePolicy=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ExtensionImages=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This\nsetting is similar to <i>MountImages=</i> in that it mounts\na file system hierarchy from a block device node or loopback\nfile, but instead of providing a destination path, an\noverlay will be set up. This option expects a whitespace\nseparated list of mount definitions. Each definition\nconsists of a source path, optionally followed by a colon\nand a list of mount options.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">A\nread-only OverlayFS will be set up on top of /usr/ and /opt/\nhierarchies. The order in which the images are listed will\ndetermine the order in which the overlay is laid down:\nimages specified first to last will result in overlayfs\nlayers bottom to top.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Mount\noptions may be defined as a single comma-separated list of\noptions, in which case they will be implicitly applied to\nthe root partition on the image, or a series of\ncolon-separated tuples of partition name and mount options.\nValid partition names and mount options are the same as for\n<i>RootImageOptions=</i> setting described above.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Each\nmount definition may be prefixed with &quot;-&quot;, in\nwhich case it will be ignored when its source path does not\nexist. The source argument is a path to a block device node\nor regular file. If the source path contains a\n&quot;:&quot;, it needs to be escaped as &quot;\\:&quot;. The\ndevice node or file system image file needs to follow the\nsame rules as specified for <i>RootImage=</i>. Any mounts\ncreated with this option are specific to the unit, and are\nnot visible in the host's mount table.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">These\nsettings may be used more than once, each usage appends to\nthe unit's list of image paths. If the empty string is\nassigned, the entire list of mount paths defined prior to\nthis is reset.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<i>DevicePolicy=</i> is set to &quot;closed&quot; or\n&quot;strict&quot;, or set to &quot;auto&quot; and\n<i>DeviceAllow=</i> is set, then this setting adds\n/dev/loop-control with <b>rw</b> mode,\n&quot;block-loop&quot; and &quot;block-blkext&quot; with\n<b>rwm</b> mode to <i>DeviceAllow=</i>. See\n<b>systemd.resource-control</b>(5) for the details about\n<i>DevicePolicy=</i> or <i>DeviceAllow=</i>. Also, see\n<i>PrivateDevices=</i> below, as it may change the setting\nof <i>DevicePolicy=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n<h2>USER/GROUP IDENTITY\n<a name=\"USER/GROUP IDENTITY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">These\noptions are only available for system services and are not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>User=</i>,\n<i>Group=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Set the\nUNIX user or group that the processes are executed as,\nrespectively. Takes a single user or group name, or a\nnumeric ID as argument. For system services (services run by\nthe system service manager, i.e. managed by PID 1) and for\nuser services of the root user (services managed by root's\ninstance of <b>systemd --user</b>), the default is\n&quot;root&quot;, but <i>User=</i> may be used to specify a\ndifferent user. For user services of any other user,\nswitching user identity is not permitted, hence the only\nvalid setting is the same user the user's service manager is\nrunning as. If no group is set, the default group of the\nuser is used. This setting does not affect commands whose\ncommand line is prefixed with &quot;+&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat this enforces only weak restrictions on the user/group\nname syntax, but will generate warnings in many cases where\nuser/group names do not adhere to the following rules: the\nspecified name should consist only of the characters a-z,\nA-Z, 0-9, &quot;_&quot; and &quot;-&quot;, except for the\nfirst character which must be one of a-z, A-Z and\n&quot;_&quot; (i.e. digits and &quot;-&quot; are not\npermitted as first character). The user/group name must have\nat least one character, and at most 31. These restrictions\nare made in order to avoid ambiguities and to ensure\nuser/group names and unit files remain portable among Linux\nsystems. For further details on the names accepted and the\nnames warned about see</font>\n<b><font color=\"#0000FF\">User/Group Name Syntax</font></b>\n<small><font color=\"#000000\">[3]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nused in conjunction with <i>DynamicUser=</i> the user/group\nname specified is dynamically allocated at the time the\nservice is started, and released at the time the service is\nstopped &mdash; unless it is already allocated statically\n(see below). If <i>DynamicUser=</i> is not used the\nspecified user and group must have been created statically\nin the user database no later than the moment the service is\nstarted, for example using the <b>sysusers.d</b>(5)\nfacility, which is applied at boot or package install time.\nIf the user does not exist by then program invocation will\nfail.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthe <i>User=</i> setting is used the supplementary group\nlist is initialized from the specified user's default group\nlist, as defined in the system's user and group database.\nAdditional groups may be configured through the\n<i>SupplementaryGroups=</i> setting (see below).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>DynamicUser=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean parameter. If set, a UNIX user and group pair is\nallocated dynamically when the unit is started, and released\nas soon as it is stopped. The user and group will not be\nadded to /etc/passwd or /etc/group, but are managed\ntransiently during runtime. The <b>nss-systemd</b>(8) glibc\nNSS module provides integration of these dynamic\nusers/groups into the system's user and group databases. The\nuser and group name to use may be configured via\n<i>User=</i> and <i>Group=</i> (see above). If these options\nare not used and dynamic user/group allocation is enabled\nfor a unit, the name of the dynamic user/group is implicitly\nderived from the unit name. If the unit name without the\ntype suffix qualifies as valid user name it is used\ndirectly, otherwise a name incorporating a hash of it is\nused. If a statically allocated user or group of the\nconfigured name already exists, it is used and no dynamic\nuser/group is allocated. Note that if <i>User=</i> is\nspecified and the static group with the name exists, then it\nis required that the static user with the name already\nexists. Similarly, if <i>Group=</i> is specified and the\nstatic user with the name exists, then it is required that\nthe static group with the name already exists. Dynamic\nusers/groups are allocated from the UID/GID range\n61184...65519. It is recommended to avoid this range for\nregular system or login users. At any point in time each\nUID/GID from this range is only assigned to zero or one\ndynamically allocated users/groups in use. However, UID/GIDs\nare recycled after a unit is terminated. Care should be\ntaken that any processes running as part of a unit for which\ndynamic users/groups are enabled do not leave files or\ndirectories owned by these users/groups around, as a\ndifferent unit might get the same UID/GID assigned later on,\nand thus gain access to these files or directories. If\n<i>DynamicUser=</i> is enabled, <i>RemoveIPC=</i> and\n<i>PrivateTmp=</i> are implied (and cannot be turned off).\nThis ensures that the lifetime of IPC objects and temporary\nfiles created by the executed processes is bound to the\nruntime of the service, and hence the lifetime of the\ndynamic user/group. Since /tmp/ and /var/tmp/ are usually\nthe only world-writable directories on a system this ensures\nthat a unit making use of dynamic user/group allocation\ncannot leave files around after unit termination.\nFurthermore <i>NoNewPrivileges=</i> and\n<i>RestrictSUIDSGID=</i> are implicitly enabled (and cannot\nbe disabled), to ensure that processes invoked cannot take\nbenefit or create SUID/SGID files or directories. Moreover\n<i>ProtectSystem=strict</i> and <i>ProtectHome=read-only</i>\nare implied, thus prohibiting the service to write to\narbitrary file system locations. In order to allow the\nservice to write to certain directories, they have to be\nallow-listed using <i>ReadWritePaths=</i>, but care must be\ntaken so that UID/GID recycling doesn't create security\nissues involving files created by the service. Use\n<i>RuntimeDirectory=</i> (see below) in order to assign a\nwritable runtime directory to a service, owned by the\ndynamic user/group and removed automatically when the unit\nis terminated. Use <i>StateDirectory=</i>,\n<i>CacheDirectory=</i> and <i>LogsDirectory=</i> in order to\nassign a set of writable directories for specific purposes\nto the service in a way that they are protected from\nvulnerabilities due to UID reuse (see below). If this option\nis enabled, care should be taken that the unit's processes\ndo not get access to directories outside of these explicitly\nconfigured and managed ones. Specifically, do not use\n<i>BindPaths=</i> and be careful with <b>AF_UNIX</b> file\ndescriptor passing for directory file descriptors, as this\nwould permit processes to create files or directories owned\nby the dynamic user/group that are not subject to the\nlifecycle and access guarantees of the service. Defaults to\noff.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SupplementaryGroups=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nsupplementary Unix groups the processes are executed as.\nThis takes a space-separated list of group names or IDs.\nThis option may be specified more than once, in which case\nall listed groups are set as supplementary groups. When the\nempty string is assigned, the list of supplementary groups\nis reset, and all assignments prior to this one will have no\neffect. In any way, this option does not override, but\nextends the list of supplementary groups configured in the\nsystem group database for the user. This does not affect\ncommands prefixed with &quot;+&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PAMName=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nPAM service name to set up a session as. If set, the\nexecuted process will be registered as a PAM session under\nthe specified service name. This is only useful in\nconjunction with the <i>User=</i> setting, and is otherwise\nignored. If not set, no PAM session will be opened for the\nexecuted processes. See <b>pam</b>(8) for\ndetails.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat for each unit making use of this option a PAM session\nhandler process will be maintained as part of the unit and\nstays around as long as the unit is active, to ensure that\nappropriate actions can be taken when the unit and hence the\nPAM session terminates. This process is named\n&quot;(sd-pam)&quot; and is an immediate child process of\nthe unit's main process.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat when this option is used for a unit it is very likely\n(depending on PAM configuration) that the main unit process\nwill be migrated to its own session scope unit when it is\nactivated. This process will hence be associated with two\nunits: the unit it was originally started from (and for\nwhich <i>PAMName=</i> was configured), and the session scope\nunit. Any child processes of that process will however be\nassociated with the session scope unit only. This has\nimplications when used in combination with\n<i>NotifyAccess=</i><b>all</b>, as these child processes\nwill not be able to affect changes in the original unit\nthrough notification messages. These messages will be\nconsidered belonging to the session scope unit and not the\noriginal unit. It is hence not recommended to use\n<i>PAMName=</i> in combination with\n<i>NotifyAccess=</i><b>all</b>.</font></p>\n\n<h2>CAPABILITIES\n<a name=\"CAPABILITIES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">These\noptions are only available for system services and are not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CapabilityBoundingSet=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhich capabilities to include in the capability bounding set\nfor the executed process. See <a href=\"https://man.page/7/capabilities\">capabilities(7)</a> for\ndetails. Takes a whitespace-separated list of capability\nnames, e.g. <b>CAP_SYS_ADMIN</b>, <b>CAP_DAC_OVERRIDE</b>,\n<b>CAP_SYS_PTRACE</b>. Capabilities listed will be included\nin the bounding set, all others are removed. If the list of\ncapabilities is prefixed with &quot;~&quot;, all but the\nlisted capabilities will be included, the effect of the\nassignment inverted. Note that this option also affects the\nrespective capabilities in the effective, permitted and\ninheritable capability sets. If this option is not used, the\ncapability bounding set is not modified on process\nexecution, hence no limits on the capabilities of the\nprocess are enforced. This option may appear more than once,\nin which case the bounding sets are merged by <b>OR</b>, or\nby <b>AND</b> if the lines are prefixed with &quot;~&quot;\n(see below). If the empty string is assigned to this option,\nthe bounding set is reset to the empty capability set, and\nall prior settings have no effect. If set to &quot;~&quot;\n(without any further argument), the bounding set is reset to\nthe full set of available capabilities, also undoing any\nprevious settings. This does not affect commands prefixed\nwith &quot;+&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Use\n<a href=\"https://man.page/1/systemd-analyze\">systemd-analyze(1)</a>'s <b>capability</b> command to\nretrieve a list of capabilities defined on the local\nsystem.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Example:\nif a unit has the following,</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">CapabilityBoundingSet=CAP_A\nCAP_B <br>\nCapabilityBoundingSet=CAP_B CAP_C</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">then\n<b>CAP_A</b>, <b>CAP_B</b>, and <b>CAP_C</b> are set. If the\nsecond line is prefixed with &quot;~&quot;, e.g.,</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">CapabilityBoundingSet=CAP_A\nCAP_B <br>\nCapabilityBoundingSet=~CAP_B CAP_C</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">then,\nonly <b>CAP_A</b> is set.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>AmbientCapabilities=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhich capabilities to include in the ambient capability set\nfor the executed process. Takes a whitespace-separated list\nof capability names, e.g. <b>CAP_SYS_ADMIN</b>,\n<b>CAP_DAC_OVERRIDE</b>, <b>CAP_SYS_PTRACE</b>. This option\nmay appear more than once in which case the ambient\ncapability sets are merged (see the above examples in\n<i>CapabilityBoundingSet=</i>). If the list of capabilities\nis prefixed with &quot;~&quot;, all but the listed\ncapabilities will be included, the effect of the assignment\ninverted. If the empty string is assigned to this option,\nthe ambient capability set is reset to the empty capability\nset, and all prior settings have no effect. If set to\n&quot;~&quot; (without any further argument), the ambient\ncapability set is reset to the full set of available\ncapabilities, also undoing any previous settings. Note that\nadding capabilities to ambient capability set adds them to\nthe process's inherited capability set.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Ambient\ncapability sets are useful if you want to execute a process\nas a non-privileged user but still want to give it some\ncapabilities. Note that in this case option <b>keep-caps</b>\nis automatically added to <i>SecureBits=</i> to retain the\ncapabilities over the user change.\n<i>AmbientCapabilities=</i> does not affect commands\nprefixed with &quot;+&quot;.</font></p>\n\n<h2>SECURITY\n<a name=\"SECURITY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NoNewPrivileges=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, ensures that the service process\nand all its children can never gain new privileges through\n<b>execve()</b> (e.g. via setuid or setgid bits, or\nfilesystem capabilities). This is the simplest and most\neffective way to ensure that a process and its children can\nnever elevate privileges again. Defaults to false, but\ncertain settings override this and ignore the value of this\nsetting. This is the case when <i>DynamicUser=</i>,\n<i>LockPersonality=</i>, <i>MemoryDenyWriteExecute=</i>,\n<i>PrivateDevices=</i>, <i>ProtectClock=</i>,\n<i>ProtectHostname=</i>, <i>ProtectKernelLogs=</i>,\n<i>ProtectKernelModules=</i>, <i>ProtectKernelTunables=</i>,\n<i>RestrictAddressFamilies=</i>, <i>RestrictNamespaces=</i>,\n<i>RestrictRealtime=</i>, <i>RestrictSUIDSGID=</i>,\n<i>SystemCallArchitectures=</i>, <i>SystemCallFilter=</i>,\nor <i>SystemCallLog=</i> are specified. Note that even if\nthis setting is overridden by them, <b>systemctl show</b>\nshows the original value of this setting. In case the\nservice will be run in a new mount namespace anyway and\nSELinux is disabled, all file systems are mounted with\n<b>MS_NOSUID</b> flag. Also see</font>\n<b><font color=\"#0000FF\">No New Privileges Flag</font></b>\n<small><font color=\"#000000\">[4]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SecureBits=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nthe secure bits set for the executed process. Takes a\nspace-separated combination of options from the following\nlist: <b>keep-caps</b>, <b>keep-caps-locked</b>,\n<b>no-setuid-fixup</b>, <b>no-setuid-fixup-locked</b>,\n<b>noroot</b>, and <b>noroot-locked</b>. This option may\nappear more than once, in which case the secure bits are\nORed. If the empty string is assigned to this option, the\nbits are reset to 0. This does not affect commands prefixed\nwith &quot;+&quot;. See <a href=\"https://man.page/7/capabilities\">capabilities(7)</a> for\ndetails.</font></p>\n\n<h2>MANDATORY ACCESS CONTROL\n<a name=\"MANDATORY ACCESS CONTROL\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">These\noptions are only available for system services and are not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SELinuxContext=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Set the\nSELinux security context of the executed process. If set,\nthis will override the automated domain transition. However,\nthe policy still needs to authorize the transition. This\ndirective is ignored if SELinux is disabled. If prefixed by\n&quot;-&quot;, all errors will be ignored. This does not\naffect commands prefixed with &quot;+&quot;. See\n<a href=\"https://man.page/3/setexeccon\">setexeccon(3)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>AppArmorProfile=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nprofile name as argument. The process executed by the unit\nwill switch to this profile when started. Profiles must\nalready be loaded in the kernel, or the unit will fail. If\nprefixed by &quot;-&quot;, all errors will be ignored. This\nsetting has no effect if AppArmor is not enabled. This\nsetting does not affect commands prefixed with\n&quot;+&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SmackProcessLabel=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\n<b>SMACK64</b> security label as argument. The process\nexecuted by the unit will be started under this label and\nSMACK will decide whether the process is allowed to run or\nnot, based on it. The process will continue to run under the\nlabel specified here unless the executable has its own\n<b>SMACK64EXEC</b> label, in which case the process will\ntransition to run under that label. When not specified, the\nlabel that systemd is running under is used. This directive\nis ignored if SMACK is disabled.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nvalue may be prefixed by &quot;-&quot;, in which case all\nerrors will be ignored. An empty value may be specified to\nunset previous assignments. This does not affect commands\nprefixed with &quot;+&quot;.</font></p>\n\n<h2>PROCESS PROPERTIES\n<a name=\"PROCESS PROPERTIES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LimitCPU=</i>,\n<i>LimitFSIZE=</i>, <i>LimitDATA=</i>, <i>LimitSTACK=</i>,\n<i>LimitCORE=</i>, <i>LimitRSS=</i>, <i>LimitNOFILE=</i>,\n<i>LimitAS=</i>, <i>LimitNPROC=</i>, <i>LimitMEMLOCK=</i>,\n<i>LimitLOCKS=</i>, <i>LimitSIGPENDING=</i>,\n<i>LimitMSGQUEUE=</i>, <i>LimitNICE=</i>,\n<i>LimitRTPRIO=</i>, <i>LimitRTTIME=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Set soft\nand hard limits on various resources for executed processes.\nSee <a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a> for details on the resource limit\nconcept. Resource limits may be specified in two formats:\neither as single value to set a specific soft and hard limit\nto the same value, or as colon-separated pair\n<b>soft:hard</b> to set both limits individually (e.g.\n&quot;LimitAS=4G:16G&quot;). Use the string <b>infinity</b>\nto configure no limit on a specific resource. The\nmultiplicative suffixes K, M, G, T, P and E (to the base\n1024) may be used for resource limits measured in bytes\n(e.g. &quot;LimitAS=16G&quot;). For the limits referring to\ntime values, the usual time units ms, s, min, h and so on\nmay be used (see <b>systemd.time</b>(7) for details). Note\nthat if no time unit is specified for <i>LimitCPU=</i> the\ndefault unit of seconds is implied, while for\n<i>LimitRTTIME=</i> the default unit of microseconds is\nimplied. Also, note that the effective granularity of the\nlimits might influence their enforcement. For example, time\nlimits specified for <i>LimitCPU=</i> will be rounded up\nimplicitly to multiples of 1s. For <i>LimitNICE=</i> the\nvalue may be specified in two syntaxes: if prefixed with\n&quot;+&quot; or &quot;-&quot;, the value is understood as\nregular Linux nice value in the range -20...19. If not\nprefixed like this the value is understood as raw resource\nlimit parameter in the range 0...40 (with 0 being equivalent\nto 1).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat most process resource limits configured with these\noptions are per-process, and processes may fork in order to\nacquire a new set of resources that are accounted\nindependently of the original process, and may thus escape\nlimits set. Also note that <i>LimitRSS=</i> is not\nimplemented on Linux, and setting it has no effect. Often it\nis advisable to prefer the resource controls listed in\n<b>systemd.resource-control</b>(5) over these per-process\nlimits, as they apply to services as a whole, may be altered\ndynamically at runtime, and are generally more expressive.\nFor example, <i>MemoryMax=</i> is a more powerful (and\nworking) replacement for <i>LimitRSS=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Resource\nlimits not configured explicitly for a unit default to the\nvalue configured in the various <i>DefaultLimitCPU=</i>,\n<i>DefaultLimitFSIZE=</i>, ... options available in\n<b>systemd-system.conf</b>(5), and &ndash; if not configured\nthere &ndash; the kernel or per-user defaults, as defined by\nthe OS (the latter only for user services, see\nbelow).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">For\nsystem units these resource limits may be chosen freely.\nWhen these settings are configured in a user service (i.e. a\nservice run by the per-user instance of the service manager)\nthey cannot be used to raise the limits above those set for\nthe user manager itself when it was first invoked, as the\nuser's service manager generally lacks the privileges to do\nso. In user context these configuration options are hence\nonly useful to lower the limits passed in or to raise the\nsoft limit to the maximum of the hard limit as configured\nfor the user. To raise the user's limits further, the\navailable configuration mechanisms differ between operating\nsystems, but typically require privileges. In most cases it\nis possible to configure higher per-user resource limits via\nPAM or by setting limits on the system service encapsulating\nthe user's service manager, i.e. the user's instance of\nuser@.service. After making such changes, make sure to\nrestart the user's service manager.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;1.&nbsp;Resource\nlimit directives, their equivalent ulimit shell commands and\nthe unit used</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3495761.png\" alt=\"Image grohtml-3495761.png\"></b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>UMask=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nthe file mode creation mask. Takes an access mode in octal\nnotation. See <a href=\"https://man.page/2/umask\">umask(2)</a> for details. Defaults to 0022\nfor system units. For user units the default value is\ninherited from the per-user service manager (whose default\nis in turn inherited from the system service manager, and\nthus typically also is 0022 &mdash; unless overridden by a\nPAM module). In order to change the per-user mask for all\nuser services, consider setting the <i>UMask=</i> setting of\nthe user's user@.service system service instance. The\nper-user umask may also be set via the <i>umask</i> field of\na user's</font> <b><font color=\"#0000FF\">JSON User\nRecord</font></b>\n<small><font color=\"#000000\">[5]</font></small>\n<font color=\"#000000\">(for users managed by\n<b>systemd-homed.service</b>(8) this field may be controlled\nvia <b>homectl --umask=</b>). It may also be set via a PAM\nmodule, such as <b>pam_umask</b>(8).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CoredumpFilter=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhich types of memory mappings will be saved if the process\ndumps core (using the /proc/<i>pid</i>/coredump_filter\nfile). Takes a whitespace-separated combination of mapping\ntype names or numbers (with the default base 16). Mapping\ntype names are <b>private-anonymous</b>,\n<b>shared-anonymous</b>, <b>private-file-backed</b>,\n<b>shared-file-backed</b>, <b>elf-headers</b>,\n<b>private-huge</b>, <b>shared-huge</b>, <b>private-dax</b>,\n<b>shared-dax</b>, and the special values <b>all</b> (all\ntypes) and <b>default</b> (the kernel default of\n&quot;<b>private-anonymous shared-anonymous elf-headers\nprivate-huge</b>&quot;). See <a href=\"https://man.page/5/core\">core(5)</a> for the meaning\nof the mapping types. When specified multiple times, all\nspecified masks are ORed. When not set, or if the empty\nvalue is assigned, the inherited value is not\nchanged.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;2.&nbsp;Add\nDAX pages to the dump filter</b></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">CoredumpFilter=default\nprivate-dax shared-dax</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>KeyringMode=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nhow the kernel session keyring is set up for the service\n(see <a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a> for details on the session\nkeyring). Takes one of <b>inherit</b>, <b>private</b>,\n<b>shared</b>. If set to <b>inherit</b> no special keyring\nsetup is done, and the kernel's default behaviour is\napplied. If <b>private</b> is used a new session keyring is\nallocated when a service process is invoked, and it is not\nlinked up with any user keyring. This is the recommended\nsetting for system services, as this ensures that multiple\nservices running under the same system user ID (in\nparticular the root user) do not share their key material\namong each other. If <b>shared</b> is used a new session\nkeyring is allocated as for <b>private</b>, but the user\nkeyring of the user configured with <i>User=</i> is linked\ninto it, so that keys assigned to the user may be requested\nby the unit's processes. In this modes multiple units\nrunning processes under the same user ID may share key\nmaterial. Unless <b>inherit</b> is selected the unique\ninvocation ID for the unit (see below) is added as a\nprotected key by the name &quot;invocation_id&quot; to the\nnewly created session keyring. Defaults to <b>private</b>\nfor services of the system service manager and to\n<b>inherit</b> for non-service units and for services of the\nuser service manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>OOMScoreAdjust=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nadjustment value for the Linux kernel's Out-Of-Memory (OOM)\nkiller score for executed processes. Takes an integer\nbetween -1000 (to disable OOM killing of processes of this\nunit) and 1000 (to make killing of processes of this unit\nunder memory pressure very likely). See</font>\n<b><font color=\"#0000FF\">proc.txt</font></b>\n<small><font color=\"#000000\">[6]</font></small>\n<font color=\"#000000\">for details. If not specified defaults\nto the OOM score adjustment level of the service manager\nitself, which is normally at 0.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Use\nthe <i>OOMPolicy=</i> setting of service units to configure\nhow the service manager shall react to the kernel OOM killer\nterminating a process of the service. See\n<b>systemd.service</b>(5) for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TimerSlackNSec=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\ntimer slack in nanoseconds for the executed processes. The\ntimer slack controls the accuracy of wake-ups triggered by\ntimers. See <a href=\"https://man.page/2/prctl\">prctl(2)</a> for more information. Note that\nin contrast to most other time span definitions this\nparameter takes an integer value in nano-seconds if no unit\nis specified. The usual time units are understood\ntoo.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Personality=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhich kernel architecture <a href=\"https://man.page/2/uname\">uname(2)</a> shall report, when\ninvoked by unit processes. Takes one of the architecture\nidentifiers <b>x86</b>, <b>x86-64</b>, <b>ppc</b>,\n<b>ppc-le</b>, <b>ppc64</b>, <b>ppc64-le</b>, <b>s390</b> or\n<b>s390x</b>. Which personality architectures are supported\ndepends on the system architecture. Usually the 64bit\nversions of the various system architectures support their\nimmediate 32bit personality architecture counterpart, but no\nothers. For example, <b>x86-64</b> systems support the\n<b>x86-64</b> and <b>x86</b> personalities but no others.\nThe personality feature is useful when running 32-bit\nservices on a 64-bit host system. If not specified, the\npersonality is left unmodified and thus reflects the\npersonality of the host system's kernel.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>IgnoreSIGPIPE=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, causes <b>SIGPIPE</b> to be\nignored in the executed process. Defaults to true because\n<b>SIGPIPE</b> generally is useful only in shell\npipelines.</font></p>\n\n<h2>SCHEDULING\n<a name=\"SCHEDULING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Nice=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\ndefault nice level (scheduling priority) for executed\nprocesses. Takes an integer between -20 (highest priority)\nand 19 (lowest priority). In case of resource contention,\nsmaller values mean more resources will be made available to\nthe unit's processes, larger values mean less resources will\nbe made available. See <a href=\"https://man.page/2/setpriority\">setpriority(2)</a> for\ndetails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CPUSchedulingPolicy=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nCPU scheduling policy for executed processes. Takes one of\n<b>other</b>, <b>batch</b>, <b>idle</b>, <b>fifo</b> or\n<b>rr</b>. See <a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a> for\ndetails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CPUSchedulingPriority=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nCPU scheduling priority for executed processes. The\navailable priority range depends on the selected CPU\nscheduling policy (see above). For real-time scheduling\npolicies an integer between 1 (lowest priority) and 99\n(highest priority) can be used. In case of CPU resource\ncontention, smaller values mean less CPU time is made\navailable to the service, larger values mean more. See\n<a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CPUSchedulingResetOnFork=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, elevated CPU scheduling\npriorities and policies will be reset when the executed\nprocesses call <a href=\"https://man.page/2/fork\">fork(2)</a>, and can hence not leak into\nchild processes. See <a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a> for\ndetails. Defaults to false.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CPUAffinity=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nthe CPU affinity of the executed processes. Takes a list of\nCPU indices or ranges separated by either whitespace or\ncommas. Alternatively, takes a special &quot;numa&quot;\nvalue in which case systemd automatically derives allowed\nCPU range based on the value of <i>NUMAMask=</i> option. CPU\nranges are specified by the lower and upper CPU indices\nseparated by a dash. This option may be specified more than\nonce, in which case the specified CPU affinity masks are\nmerged. If the empty string is assigned, the mask is reset,\nall assignments prior to this will have no effect. See\n<a href=\"https://man.page/2/sched_setaffinity\">sched_setaffinity(2)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NUMAPolicy=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nthe NUMA memory policy of the executed processes. Takes a\npolicy type, one of: <b>default</b>, <b>preferred</b>,\n<b>bind</b>, <b>interleave</b> and <b>local</b>. A list of\nNUMA nodes that should be associated with the policy must be\nspecified in <i>NUMAMask=</i>. For more details on each\npolicy please see, <a href=\"https://man.page/2/set_mempolicy\">set_mempolicy(2)</a>. For overall\noverview of NUMA support in Linux see,\n<a href=\"https://man.page/7/numa\">numa(7)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NUMAMask=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nthe NUMA node list which will be applied alongside with\nselected NUMA policy. Takes a list of NUMA nodes and has the\nsame syntax as a list of CPUs for <i>CPUAffinity=</i> option\nor special &quot;all&quot; value which will include all\navailable NUMA nodes in the mask. Note that the list of NUMA\nnodes is not required for <b>default</b> and <b>local</b>\npolicies and for <b>preferred</b> policy we expect a single\nNUMA node.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>IOSchedulingClass=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nI/O scheduling class for executed processes. Takes one of\nthe strings <b>realtime</b>, <b>best-effort</b> or\n<b>idle</b>. The kernel's default scheduling class is\n<b>best-effort</b> at a priority of 4. If the empty string\nis assigned to this option, all prior assignments to both\n<i>IOSchedulingClass=</i> and <i>IOSchedulingPriority=</i>\nhave no effect. See <a href=\"https://man.page/2/ioprio_set\">ioprio_set(2)</a> for\ndetails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>IOSchedulingPriority=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nI/O scheduling priority for executed processes. Takes an\ninteger between 0 (highest priority) and 7 (lowest\npriority). In case of I/O contention, smaller values mean\nmore I/O bandwidth is made available to the unit's\nprocesses, larger values mean less bandwidth. The available\npriorities depend on the selected I/O scheduling class (see\nabove). If the empty string is assigned to this option, all\nprior assignments to both <i>IOSchedulingClass=</i> and\n<i>IOSchedulingPriority=</i> have no effect. For the\nkernel's default scheduling class (<b>best-effort</b>) this\ndefaults to 4. See <a href=\"https://man.page/2/ioprio_set\">ioprio_set(2)</a> for\ndetails.</font></p>\n\n<h2>SANDBOXING\n<a name=\"SANDBOXING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing sandboxing options are an effective way to limit\nthe exposure of the system towards the unit's processes. It\nis recommended to turn on as many of these options for each\nunit as is possible without negatively affecting the\nprocess' ability to operate. Note that many of these\nsandboxing features are gracefully turned off on systems\nwhere the underlying security mechanism is not available.\nFor example, <i>ProtectSystem=</i> has no effect if the\nkernel is built without file system namespacing or if the\nservice manager runs in a container manager that makes file\nsystem namespacing unavailable to its payload. Similar,\n<i>RestrictRealtime=</i> has no effect on systems that lack\nsupport for SECCOMP system call filtering, or in containers\nwhere support for this is turned off.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Also\nnote that some sandboxing functionality is generally not\navailable in user services (i.e. services run by the\nper-user service manager). Specifically, the various\nsettings requiring file system namespacing support (such as\n<i>ProtectSystem=</i>) are not available, as the underlying\nkernel functionality is only accessible to privileged\nprocesses. However, most namespacing settings, that will not\nwork on their own in user services, will work when used in\nconjunction with <i>PrivateUsers=</i><b>true</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectSystem=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument or the special values &quot;full&quot; or\n&quot;strict&quot;. If true, mounts the /usr/ and the boot\nloader directories (/boot and /efi) read-only for processes\ninvoked by this unit. If set to &quot;full&quot;, the /etc/\ndirectory is mounted read-only, too. If set to\n&quot;strict&quot; the entire file system hierarchy is\nmounted read-only, except for the API file system subtrees\n/dev/, /proc/ and /sys/ (protect these directories using\n<i>PrivateDevices=</i>, <i>ProtectKernelTunables=</i>,\n<i>ProtectControlGroups=</i>). This setting ensures that any\nmodification of the vendor-supplied operating system (and\noptionally its configuration, and local mounts) is\nprohibited for the service. It is recommended to enable this\nsetting for all long-running services, unless they are\ninvolved with system updates or need to modify the operating\nsystem in other ways. If this option is used,\n<i>ReadWritePaths=</i> may be used to exclude specific\ndirectories from being made read-only. This setting is\nimplied if <i>DynamicUser=</i> is set. This setting cannot\nensure protection in all cases. In general it has the same\nlimitations as <i>ReadOnlyPaths=</i>, see below. Defaults to\noff.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectHome=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument or the special values &quot;read-only&quot;\nor &quot;tmpfs&quot;. If true, the directories /home/,\n/root, and /run/user are made inaccessible and empty for\nprocesses invoked by this unit. If set to\n&quot;read-only&quot;, the three directories are made\nread-only instead. If set to &quot;tmpfs&quot;, temporary\nfile systems are mounted on the three directories in\nread-only mode. The value &quot;tmpfs&quot; is useful to\nhide home directories not relevant to the processes invoked\nby the unit, while still allowing necessary directories to\nbe made visible when listed in <i>BindPaths=</i> or\n<i>BindReadOnlyPaths=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Setting\nthis to &quot;yes&quot; is mostly equivalent to set the\nthree directories in <i>InaccessiblePaths=</i>. Similarly,\n&quot;read-only&quot; is mostly equivalent to\n<i>ReadOnlyPaths=</i>, and &quot;tmpfs&quot; is mostly\nequivalent to <i>TemporaryFileSystem=</i> with\n&quot;:ro&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">It\nis recommended to enable this setting for all long-running\nservices (in particular network-facing ones), to ensure they\ncannot get access to private user data, unless the services\nactually require access to the user's private data. This\nsetting is implied if <i>DynamicUser=</i> is set. This\nsetting cannot ensure protection in all cases. In general it\nhas the same limitations as <i>ReadOnlyPaths=</i>, see\nbelow.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RuntimeDirectory=</i>,\n<i>StateDirectory=</i>, <i>CacheDirectory=</i>,\n<i>LogsDirectory=</i>,\n<i>ConfigurationDirectory=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">These\noptions take a whitespace-separated list of directory names.\nThe specified directory names must be relative, and may not\ninclude &quot;..&quot;. If set, when the unit is started,\none or more directories by the specified names will be\ncreated (including their parents) below the locations\ndefined in the following table. Also, the corresponding\nenvironment variable will be defined with the full paths of\nthe directories. If multiple directories are set, then in\nthe environment variable the paths are concatenated with\ncolon (&quot;:&quot;).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;2.&nbsp;Automatic\ndirectory creation and environment variables</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3495762.png\" alt=\"Image grohtml-3495762.png\"></b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">In\ncase of <i>RuntimeDirectory=</i> the innermost\nsubdirectories are removed when the unit is stopped. It is\npossible to preserve the specified directories in this case\nif <i>RuntimeDirectoryPreserve=</i> is configured to\n<b>restart</b> or <b>yes</b> (see below). The directories\nspecified with <i>StateDirectory=</i>,\n<i>CacheDirectory=</i>, <i>LogsDirectory=</i>,\n<i>ConfigurationDirectory=</i> are not removed when the unit\nis stopped.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Except\nin case of <i>ConfigurationDirectory=</i>, the innermost\nspecified directories will be owned by the user and group\nspecified in <i>User=</i> and <i>Group=</i>. If the\nspecified directories already exist and their owning user or\ngroup do not match the configured ones, all files and\ndirectories below the specified directories as well as the\ndirectories themselves will have their file ownership\nrecursively changed to match what is configured. As an\noptimization, if the specified directories are already owned\nby the right user and group, files and directories below of\nthem are left as-is, even if they do not match what is\nrequested. The innermost specified directories will have\ntheir access mode adjusted to the what is specified in\n<i>RuntimeDirectoryMode=</i>, <i>StateDirectoryMode=</i>,\n<i>CacheDirectoryMode=</i>, <i>LogsDirectoryMode=</i> and\n<i>ConfigurationDirectoryMode=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">These\noptions imply <i>BindPaths=</i> for the specified paths.\nWhen combined with <i>RootDirectory=</i> or\n<i>RootImage=</i> these paths always reside on the host and\nare mounted from there into the unit's file system\nnamespace.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\n<i>DynamicUser=</i> is used, the logic for\n<i>CacheDirectory=</i>, <i>LogsDirectory=</i> and\n<i>StateDirectory=</i> is slightly altered: the directories\nare created below /var/cache/private, /var/log/private and\n/var/lib/private, respectively, which are host directories\nmade inaccessible to unprivileged users, which ensures that\naccess to these directories cannot be gained through dynamic\nuser ID recycling. Symbolic links are created to hide this\ndifference in behaviour. Both from perspective of the host\nand from inside the unit, the relevant directories hence\nalways appear directly below /var/cache, /var/log and\n/var/lib.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Use\n<i>RuntimeDirectory=</i> to manage one or more runtime\ndirectories for the unit and bind their lifetime to the\ndaemon runtime. This is particularly useful for unprivileged\ndaemons that cannot create runtime directories in /run/ due\nto lack of privileges, and to make sure the runtime\ndirectory is cleaned up automatically after use. For runtime\ndirectories that require more complex or different\nconfiguration or lifetime guarantees, please consider using\n<b>tmpfiles.d</b>(5).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\ndirectories defined by these options are always created\nunder the standard paths used by systemd (/var/, /run/,\n/etc/, ...). If the service needs directories in a different\nlocation, a different mechanism has to be used to create\nthem.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>tmpfiles.d</b>(5)\nprovides functionality that overlaps with these options.\nUsing these options is recommended, because the lifetime of\nthe directories is tied directly to the lifetime of the\nunit, and it is not necessary to ensure that the tmpfiles.d\nconfiguration is executed before the unit is\nstarted.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">To\nremove any of the directories created by these settings, use\nthe <b>systemctl clean ...</b> command on the relevant\nunits, see <a href=\"https://man.page/1/systemctl\">systemctl(1)</a> for details.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Example:\nif a system service unit has the following,</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">RuntimeDirectory=foo/bar\nbaz</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">the\nservice manager creates /run/foo (if it does not exist),\n/run/foo/bar, and /run/baz. The directories /run/foo/bar and\n/run/baz except /run/foo are owned by the user and group\nspecified in <i>User=</i> and <i>Group=</i>, and removed\nwhen the service is stopped.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Example:\nif a system service unit has the following,</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">RuntimeDirectory=foo/bar\n<br>\nStateDirectory=aaa/bbb ccc</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">then\nthe environment variable &quot;RUNTIME_DIRECTORY&quot; is\nset with &quot;/run/foo/bar&quot;, and\n&quot;STATE_DIRECTORY&quot; is set with\n&quot;/var/lib/aaa/bbb:/var/lib/ccc&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RuntimeDirectoryMode=</i>,\n<i>StateDirectoryMode=</i>, <i>CacheDirectoryMode=</i>,\n<i>LogsDirectoryMode=</i>,\n<i>ConfigurationDirectoryMode=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Specifies\nthe access mode of the directories specified in\n<i>RuntimeDirectory=</i>, <i>StateDirectory=</i>,\n<i>CacheDirectory=</i>, <i>LogsDirectory=</i>, or\n<i>ConfigurationDirectory=</i>, respectively, as an octal\nnumber. Defaults to <b>0755</b>. See &quot;Permissions&quot;\nin <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a> for a discussion of the meaning\nof permission bits.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RuntimeDirectoryPreserve=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument or <b>restart</b>. If set to <b>no</b> (the\ndefault), the directories specified in\n<i>RuntimeDirectory=</i> are always removed when the service\nstops. If set to <b>restart</b> the directories are\npreserved when the service is both automatically and\nmanually restarted. Here, the automatic restart means the\noperation specified in <i>Restart=</i>, and manual restart\nmeans the one triggered by <b>systemctl restart\nfoo.service</b>. If set to <b>yes</b>, then the directories\nare not removed when the service is stopped. Note that since\nthe runtime directory /run/ is a mount point of\n&quot;tmpfs&quot;, then for system services the directories\nspecified in <i>RuntimeDirectory=</i> are removed when the\nsystem is rebooted.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TimeoutCleanSec=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\na timeout on the clean-up operation requested through\n<b>systemctl clean ...</b>, see <a href=\"https://man.page/1/systemctl\">systemctl(1)</a> for\ndetails. Takes the usual time values and defaults to\n<b>infinity</b>, i.e. by default no timeout is applied. If a\ntimeout is configured the clean operation will be aborted\nforcibly when the timeout is reached, potentially leaving\nresources on disk.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ReadWritePaths=</i>,\n<i>ReadOnlyPaths=</i>, <i>InaccessiblePaths=</i>,\n<i>ExecPaths=</i>, <i>NoExecPaths=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets up a\nnew file system namespace for executed processes. These\noptions may be used to limit access a process has to the\nfile system. Each setting takes a space-separated list of\npaths relative to the host's root directory (i.e. the system\nrunning the service manager). Note that if paths contain\nsymlinks, they are resolved relative to the root directory\nset with <i>RootDirectory=</i>/<i>RootImage=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Paths\nlisted in <i>ReadWritePaths=</i> are accessible from within\nthe namespace with the same access modes as from outside of\nit. Paths listed in <i>ReadOnlyPaths=</i> are accessible for\nreading only, writing will be refused even if the usual file\naccess controls would permit this. Nest\n<i>ReadWritePaths=</i> inside of <i>ReadOnlyPaths=</i> in\norder to provide writable subdirectories within read-only\ndirectories. Use <i>ReadWritePaths=</i> in order to\nallow-list specific paths for write access if\n<i>ProtectSystem=strict</i> is used.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Paths\nlisted in <i>InaccessiblePaths=</i> will be made\ninaccessible for processes inside the namespace along with\neverything below them in the file system hierarchy. This may\nbe more restrictive than desired, because it is not possible\nto nest <i>ReadWritePaths=</i>, <i>ReadOnlyPaths=</i>,\n<i>BindPaths=</i>, or <i>BindReadOnlyPaths=</i> inside it.\nFor a more flexible option, see\n<i>TemporaryFileSystem=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Content\nin paths listed in <i>NoExecPaths=</i> are not executable\neven if the usual file access controls would permit this.\nNest <i>ExecPaths=</i> inside of <i>NoExecPaths=</i> in\norder to provide executable content within non-executable\ndirectories.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Non-directory\npaths may be specified as well. These options may be\nspecified more than once, in which case all paths listed\nwill have limited access from within the namespace. If the\nempty string is assigned to this option, the specific list\nis reset, and all prior assignments have no\neffect.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Paths\nin <i>ReadWritePaths=</i>, <i>ReadOnlyPaths=</i>,\n<i>InaccessiblePaths=</i>, <i>ExecPaths=</i> and\n<i>NoExecPaths=</i> may be prefixed with &quot;-&quot;, in\nwhich case they will be ignored when they do not exist. If\nprefixed with &quot;+&quot; the paths are taken relative to\nthe root directory of the unit, as configured with\n<i>RootDirectory=</i>/<i>RootImage=</i>, instead of relative\nto the root directory of the host (see above). When\ncombining &quot;-&quot; and &quot;+&quot; on the same path\nmake sure to specify &quot;-&quot; first, and &quot;+&quot;\nsecond.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat these settings will disconnect propagation of mounts\nfrom the unit's processes to the host. This means that this\nsetting may not be used for services which shall be able to\ninstall mount points in the main mount namespace. For\n<i>ReadWritePaths=</i> and <i>ReadOnlyPaths=</i> propagation\nin the other direction is not affected, i.e. mounts created\non the host generally appear in the unit processes'\nnamespace, and mounts removed on the host also disappear\nthere too. In particular, note that mount propagation from\nhost to unit will result in unmodified mounts to be created\nin the unit's namespace, i.e. writable mounts appearing on\nthe host will be writable in the unit's namespace too, even\nwhen propagated below a path marked with\n<i>ReadOnlyPaths=</i>! Restricting access with these options\nhence does not extend to submounts of a directory that are\ncreated later on. This means the lock-down offered by that\nsetting is not complete, and does not offer full\nprotection.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the effect of these settings may be undone by\nprivileged processes. In order to set up an effective\nsandboxed environment for a unit it is thus recommended to\ncombine these settings with either\n<i>CapabilityBoundingSet=~CAP_SYS_ADMIN</i> or\n<i>SystemCallFilter=~@mount</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Simple\nallow-list example using these directives:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">[Service]\n<br>\nReadOnlyPaths=/ <br>\nReadWritePaths=/var /run <br>\nInaccessiblePaths=-/lost+found <br>\nNoExecPaths=/ <br>\nExecPaths=/usr/sbin/my_daemon /lib /lib64</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">These\noptions are only available for system services and are not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TemporaryFileSystem=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nspace-separated list of mount points for temporary file\nsystems (tmpfs). If set, a new file system namespace is set\nup for executed processes, and a temporary file system is\nmounted on each mount point. This option may be specified\nmore than once, in which case temporary file systems are\nmounted on all listed mount points. If the empty string is\nassigned to this option, the list is reset, and all prior\nassignments have no effect. Each mount point may optionally\nbe suffixed with a colon (&quot;:&quot;) and mount options\nsuch as &quot;size=10%&quot; or &quot;ro&quot;. By default,\neach temporary file system is mounted with\n&quot;nodev,strictatime,mode=0755&quot;. These can be\ndisabled by explicitly specifying the corresponding mount\noptions, e.g., &quot;dev&quot; or\n&quot;nostrictatime&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nis useful to hide files or directories not relevant to the\nprocesses invoked by the unit, while necessary files or\ndirectories can be still accessed by combining with\n<i>BindPaths=</i> or <i>BindReadOnlyPaths=</i>:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Example:\nif a unit has the following,</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">TemporaryFileSystem=/var:ro\n<br>\nBindReadOnlyPaths=/var/lib/systemd</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">then\nthe invoked processes by the unit cannot see any files or\ndirectories under /var/ except for /var/lib/systemd or its\ncontents.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PrivateTmp=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, sets up a new file system\nnamespace for the executed processes and mounts private\n/tmp/ and /var/tmp/ directories inside it that are not\nshared by processes outside of the namespace. This is useful\nto secure access to temporary files of the process, but\nmakes sharing between processes via /tmp/ or /var/tmp/\nimpossible. If true, all temporary files created by a\nservice in these directories will be removed after the\nservice is stopped. Defaults to false. It is possible to run\ntwo or more units within the same private /tmp/ and\n/var/tmp/ namespace by using the <i>JoinsNamespaceOf=</i>\ndirective, see <b>systemd.unit</b>(5) for details. This\nsetting is implied if <i>DynamicUser=</i> is set. For this\nsetting the same restrictions regarding mount propagation\nand privileges apply as for <i>ReadOnlyPaths=</i> and\nrelated calls, see above. Enabling this setting has the side\neffect of adding <i>Requires=</i> and <i>After=</i>\ndependencies on all mount units necessary to access /tmp/\nand /var/tmp/. Moreover an implicitly <i>After=</i> ordering\non <b>systemd-tmpfiles-setup.service</b>(8) is\nadded.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the implementation of this setting might be impossible\n(for example if mount namespaces are not available), and the\nunit should be written in a way that does not solely rely on\nthis setting for security.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PrivateDevices=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, sets up a new /dev/ mount for the\nexecuted processes and only adds API pseudo devices such as\n/dev/null, /dev/zero or /dev/random (as well as the pseudo\nTTY subsystem) to it, but no physical devices such as\n/dev/sda, system memory /dev/mem, system ports /dev/port and\nothers. This is useful to securely turn off physical device\naccess by the executed process. Defaults to false. Enabling\nthis option will install a system call filter to block\nlow-level I/O system calls that are grouped in the\n<i>@raw-io</i> set, will also remove <b>CAP_MKNOD</b> and\n<b>CAP_SYS_RAWIO</b> from the capability bounding set for\nthe unit (see above), and set <i>DevicePolicy=closed</i>\n(see <b>systemd.resource-control</b>(5) for details). Note\nthat using this setting will disconnect propagation of\nmounts from the service to the host (propagation in the\nopposite direction continues to work). This means that this\nsetting may not be used for services which shall be able to\ninstall mount points in the main mount namespace. The new\n/dev/ will be mounted read-only and 'noexec'. The latter may\nbreak old programs which try to set up executable memory by\nusing <a href=\"https://man.page/2/mmap\">mmap(2)</a> of /dev/zero instead of using\n<b>MAP_ANON</b>. For this setting the same restrictions\nregarding mount propagation and privileges apply as for\n<i>ReadOnlyPaths=</i> and related calls, see above. If\nturned on and if running in user mode, or in system mode,\nbut without the <b>CAP_SYS_ADMIN</b> capability (e.g.\nsetting <i>User=</i>), <i>NoNewPrivileges=yes</i> is\nimplied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the implementation of this setting might be impossible\n(for example if mount namespaces are not available), and the\nunit should be written in a way that does not solely rely on\nthis setting for security.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PrivateNetwork=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, sets up a new network namespace\nfor the executed processes and configures only the loopback\nnetwork device &quot;lo&quot; inside it. No other network\ndevices will be available to the executed process. This is\nuseful to turn off network access by the executed process.\nDefaults to false. It is possible to run two or more units\nwithin the same private network namespace by using the\n<i>JoinsNamespaceOf=</i> directive, see\n<b>systemd.unit</b>(5) for details. Note that this option\nwill disconnect all socket families from the host, including\n<b>AF_NETLINK</b> and <b>AF_UNIX</b>. Effectively, for\n<b>AF_NETLINK</b> this means that device configuration\nevents received from <b>systemd-udevd.service</b>(8) are not\ndelivered to the unit's processes. And for <b>AF_UNIX</b>\nthis has the effect that <b>AF_UNIX</b> sockets in the\nabstract socket namespace of the host will become\nunavailable to the unit's processes (however, those located\nin the file system will continue to be\naccessible).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the implementation of this setting might be impossible\n(for example if network namespaces are not available), and\nthe unit should be written in a way that does not solely\nrely on this setting for security.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nthis option is used on a socket unit any sockets bound on\nbehalf of this unit will be bound within a private network\nnamespace. This may be combined with\n<i>JoinsNamespaceOf=</i> to listen on sockets inside of\nnetwork namespaces of other services.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NetworkNamespacePath=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes an\nabsolute file system path refererring to a Linux network\nnamespace pseudo-file (i.e. a file like /proc/$PID/ns/net or\na bind mount or symlink to one). When set the invoked\nprocesses are added to the network namespace referenced by\nthat path. The path has to point to a valid namespace file\nat the moment the processes are forked off. If this option\nis used <i>PrivateNetwork=</i> has no effect. If this option\nis used together with <i>JoinsNamespaceOf=</i> then it only\nhas an effect if this unit is started before any of the\nlisted units that have <i>PrivateNetwork=</i> or\n<i>NetworkNamespacePath=</i> configured, as otherwise the\nnetwork namespace of those units is reused.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nthis option is used on a socket unit any sockets bound on\nbehalf of this unit will be bound within the specified\nnetwork namespace.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PrivateIPC=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, sets up a new IPC namespace for\nthe executed processes. Each IPC namespace has its own set\nof System V IPC identifiers and its own POSIX message queue\nfile system. This is useful to avoid name clash of IPC\nidentifiers. Defaults to false. It is possible to run two or\nmore units within the same private IPC namespace by using\nthe <i>JoinsNamespaceOf=</i> directive, see\n<b>systemd.unit</b>(5) for details.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat IPC namespacing does not have an effect on\n<b>AF_UNIX</b> sockets, which are the most common form of\nIPC used on Linux. Instead, <b>AF_UNIX</b> sockets in the\nfile system are subject to mount namespacing, and those in\nthe abstract namespace are subject to network namespacing.\nIPC namespacing only has an effect on SysV IPC (which is\nmostly legacy) as well as POSIX message queues (for which\n<b>AF_UNIX</b>/<b>SOCK_SEQPACKET</b> sockets are typically a\nbetter replacement). IPC namespacing also has no effect on\nPOSIX shared memory (which is subject to mount namespacing)\neither. See <a href=\"https://man.page/7/ipc_namespaces\">ipc_namespaces(7)</a> for the\ndetails.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the implementation of this setting might be impossible\n(for example if IPC namespaces are not available), and the\nunit should be written in a way that does not solely rely on\nthis setting for security.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>IPCNamespacePath=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes an\nabsolute file system path refererring to a Linux IPC\nnamespace pseudo-file (i.e. a file like /proc/$PID/ns/ipc or\na bind mount or symlink to one). When set the invoked\nprocesses are added to the network namespace referenced by\nthat path. The path has to point to a valid namespace file\nat the moment the processes are forked off. If this option\nis used <i>PrivateIPC=</i> has no effect. If this option is\nused together with <i>JoinsNamespaceOf=</i> then it only has\nan effect if this unit is started before any of the listed\nunits that have <i>PrivateIPC=</i> or\n<i>IPCNamespacePath=</i> configured, as otherwise the\nnetwork namespace of those units is reused.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PrivateUsers=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, sets up a new user namespace for\nthe executed processes and configures a minimal user and\ngroup mapping, that maps the &quot;root&quot; user and group\nas well as the unit's own user and group to themselves and\neverything else to the &quot;nobody&quot; user and group.\nThis is useful to securely detach the user and group\ndatabases used by the unit from the rest of the system, and\nthus to create an effective sandbox environment. All files,\ndirectories, processes, IPC objects and other resources\nowned by users/groups not equaling &quot;root&quot; or the\nunit's own will stay visible from within the unit but appear\nowned by the &quot;nobody&quot; user and group. If this mode\nis enabled, all unit processes are run without privileges in\nthe host user namespace (regardless if the unit's own\nuser/group is &quot;root&quot; or not). Specifically this\nmeans that the process will have zero process capabilities\non the host's user namespace, but full capabilities within\nthe service's user namespace. Settings such as\n<i>CapabilityBoundingSet=</i> will affect only the latter,\nand there's no way to acquire additional capabilities in the\nhost's user namespace. Defaults to off.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nthis setting is set up by a per-user instance of the service\nmanager, the mapping of the &quot;root&quot; user and group\nto itself is omitted (unless the user manager is root).\nAdditionally, in the per-user instance manager case, the\nuser namespace will be set up before most other namespaces.\nThis means that combining <i>PrivateUsers=</i><b>true</b>\nwith other namespaces will enable use of features not\nnormally supported by the per-user instances of the service\nmanager.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nsetting is particularly useful in conjunction with\n<i>RootDirectory=</i>/<i>RootImage=</i>, as the need to\nsynchronize the user and group databases in the root\ndirectory and on the host is reduced, as the only users and\ngroups who need to be matched are &quot;root&quot;,\n&quot;nobody&quot; and the unit's own user and\ngroup.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the implementation of this setting might be impossible\n(for example if user namespaces are not available), and the\nunit should be written in a way that does not solely rely on\nthis setting for security.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectHostname=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. When set, sets up a new UTS namespace for\nthe executed processes. In addition, changing hostname or\ndomainname is prevented. Defaults to off.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat the implementation of this setting might be impossible\n(for example if UTS namespaces are not available), and the\nunit should be written in a way that does not solely rely on\nthis setting for security.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat when this option is enabled for a service hostname\nchanges no longer propagate from the system into the\nservice, it is hence not suitable for services that need to\ntake notice of system hostname changes\ndynamically.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthis setting is on, but the unit doesn't have the\n<b>CAP_SYS_ADMIN</b> capability (e.g. services for which\n<i>User=</i> is set), <i>NoNewPrivileges=yes</i> is\nimplied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectClock=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If set, writes to the hardware clock or\nsystem clock will be denied. It is recommended to turn this\non for most services that do not need modify the clock.\nDefaults to off. Enabling this option removes\n<b>CAP_SYS_TIME</b> and <b>CAP_WAKE_ALARM</b> from the\ncapability bounding set for this unit, installs a system\ncall filter to block calls that can set the clock, and\n<i>DeviceAllow=char-rtc r</i> is implied. This ensures\n/dev/rtc0, /dev/rtc1, etc. are made read-only to the\nservice. See <b>systemd.resource-control</b>(5) for the\ndetails about <i>DeviceAllow=</i>. If this setting is on,\nbut the unit doesn't have the <b>CAP_SYS_ADMIN</b>\ncapability (e.g. services for which <i>User=</i> is set),\n<i>NoNewPrivileges=yes</i> is implied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectKernelTunables=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, kernel variables accessible\nthrough /proc/sys/, /sys/, /proc/sysrq-trigger,\n/proc/latency_stats, /proc/acpi, /proc/timer_stats, /proc/fs\nand /proc/irq will be made read-only to all processes of the\nunit. Usually, tunable kernel variables should be\ninitialized only at boot-time, for example with the\n<b>sysctl.d</b>(5) mechanism. Few services need to write to\nthese at runtime; it is hence recommended to turn this on\nfor most services. For this setting the same restrictions\nregarding mount propagation and privileges apply as for\n<i>ReadOnlyPaths=</i> and related calls, see above. Defaults\nto off. If this setting is on, but the unit doesn't have the\n<b>CAP_SYS_ADMIN</b> capability (e.g. services for which\n<i>User=</i> is set), <i>NoNewPrivileges=yes</i> is implied.\nNote that this option does not prevent indirect changes to\nkernel tunables effected by IPC calls to other processes.\nHowever, <i>InaccessiblePaths=</i> may be used to make\nrelevant IPC file system objects inaccessible. If\n<i>ProtectKernelTunables=</i> is set, <i>MountAPIVFS=yes</i>\nis implied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectKernelModules=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, explicit module loading will be\ndenied. This allows module load and unload operations to be\nturned off on modular kernels. It is recommended to turn\nthis on for most services that do not need special file\nsystems or extra kernel modules to work. Defaults to off.\nEnabling this option removes <b>CAP_SYS_MODULE</b> from the\ncapability bounding set for the unit, and installs a system\ncall filter to block module system calls, also\n/usr/lib/modules is made inaccessible. For this setting the\nsame restrictions regarding mount propagation and privileges\napply as for <i>ReadOnlyPaths=</i> and related calls, see\nabove. Note that limited automatic module loading due to\nuser configuration or kernel mapping tables might still\nhappen as side effect of requested user operations, both\nprivileged and unprivileged. To disable module auto-load\nfeature please see <b>sysctl.d</b>(5)\n<b>kernel.modules_disabled</b> mechanism and\n/proc/sys/kernel/modules_disabled documentation. If this\nsetting is on, but the unit doesn't have the\n<b>CAP_SYS_ADMIN</b> capability (e.g. services for which\n<i>User=</i> is set), <i>NoNewPrivileges=yes</i> is\nimplied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectKernelLogs=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, access to the kernel log ring\nbuffer will be denied. It is recommended to turn this on for\nmost services that do not need to read from or write to the\nkernel log ring buffer. Enabling this option removes\n<b>CAP_SYSLOG</b> from the capability bounding set for this\nunit, and installs a system call filter to block the\n<a href=\"https://man.page/2/syslog\">syslog(2)</a> system call (not to be confused with the\nlibc API <a href=\"https://man.page/3/syslog\">syslog(3)</a> for userspace logging). The kernel\nexposes its log buffer to userspace via /dev/kmsg and\n/proc/kmsg. If enabled, these are made inaccessible to all\nthe processes in the unit. If this setting is on, but the\nunit doesn't have the <b>CAP_SYS_ADMIN</b> capability (e.g.\nservices for which <i>User=</i> is set),\n<i>NoNewPrivileges=yes</i> is implied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ProtectControlGroups=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true, the Linux Control Groups\n(<a href=\"https://man.page/7/cgroups\">cgroups(7)</a>) hierarchies accessible through\n/sys/fs/cgroup/ will be made read-only to all processes of\nthe unit. Except for container managers no services should\nrequire write access to the control groups hierarchies; it\nis hence recommended to turn this on for most services. For\nthis setting the same restrictions regarding mount\npropagation and privileges apply as for\n<i>ReadOnlyPaths=</i> and related calls, see above. Defaults\nto off. If <i>ProtectControlGroups=</i> is set,\n<i>MountAPIVFS=yes</i> is implied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RestrictAddressFamilies=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Restricts\nthe set of socket address families accessible to the\nprocesses of this unit. Takes &quot;none&quot;, or a\nspace-separated list of address family names to allow-list,\nsuch as <b>AF_UNIX</b>, <b>AF_INET</b> or <b>AF_INET6</b>.\nWhen &quot;none&quot; is specified, then all address\nfamilies will be denied. When prefixed with &quot;~&quot;\nthe listed address families will be applied as deny list,\notherwise as allow list. Note that this restricts access to\nthe <a href=\"https://man.page/2/socket\">socket(2)</a> system call only. Sockets passed into\nthe process by other means (for example, by using socket\nactivation with socket units, see <b>systemd.socket</b>(5))\nare unaffected. Also, sockets created with\n<b>socketpair()</b> (which creates connected AF_UNIX sockets\nonly) are unaffected. Note that this option has no effect on\n32-bit x86, s390, s390x, mips, mips-le, ppc, ppc-le, ppc64,\nppc64-le and is ignored (but works correctly on other ABIs,\nincluding x86-64). Note that on systems supporting multiple\nABIs (such as x86/x86-64) it is recommended to turn off\nalternative ABIs for services, so that they cannot be used\nto circumvent the restrictions of this option. Specifically,\nit is recommended to combine this option with\n<i>SystemCallArchitectures=native</i> or similar. If running\nin user mode, or in system mode, but without the\n<b>CAP_SYS_ADMIN</b> capability (e.g. setting <i>User=</i>),\n<i>NoNewPrivileges=yes</i> is implied. By default, no\nrestrictions apply, all address families are accessible to\nprocesses. If assigned the empty string, any previous\naddress family restriction changes are undone. This setting\ndoes not affect commands prefixed with\n&quot;+&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Use\nthis option to limit exposure of processes to remote access,\nin particular via exotic and sensitive network protocols,\nsuch as <b>AF_PACKET</b>. Note that in most cases, the local\n<b>AF_UNIX</b> address family should be included in the\nconfigured allow list as it is frequently used for local\ncommunication, including for <a href=\"https://man.page/2/syslog\">syslog(2)</a>\nlogging.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RestrictNamespaces=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Restricts\naccess to Linux namespace functionality for the processes of\nthis unit. For details about Linux namespaces, see\n<a href=\"https://man.page/7/namespaces\">namespaces(7)</a>. Either takes a boolean argument, or a\nspace-separated list of namespace type identifiers. If false\n(the default), no restrictions on namespace creation and\nswitching are made. If true, access to any kind of\nnamespacing is prohibited. Otherwise, a space-separated list\nof namespace type identifiers must be specified, consisting\nof any combination of: <b>cgroup</b>, <b>ipc</b>,\n<b>net</b>, <b>mnt</b>, <b>pid</b>, <b>user</b> and\n<b>uts</b>. Any namespace type listed is made accessible to\nthe unit's processes, access to namespace types not listed\nis prohibited (allow-listing). By prepending the list with a\nsingle tilde character (&quot;~&quot;) the effect may be\ninverted: only the listed namespace types will be made\ninaccessible, all unlisted ones are permitted\n(deny-listing). If the empty string is assigned, the default\nnamespace restrictions are applied, which is equivalent to\nfalse. This option may appear more than once, in which case\nthe namespace types are merged by <b>OR</b>, or by\n<b>AND</b> if the lines are prefixed with &quot;~&quot; (see\nexamples below). Internally, this setting limits access to\nthe <a href=\"https://man.page/2/unshare\">unshare(2)</a>, <a href=\"https://man.page/2/clone\">clone(2)</a> and <a href=\"https://man.page/2/setns\">setns(2)</a>\nsystem calls, taking the specified flags parameters into\naccount. Note that &mdash; if this option is used &mdash; in\naddition to restricting creation and switching of the\nspecified types of namespaces (or all of them, if true)\naccess to the <b>setns()</b> system call with a zero flags\nparameter is prohibited. This setting is only supported on\nx86, x86-64, mips, mips-le, mips64, mips64-le, mips64-n32,\nmips64-le-n32, ppc64, ppc64-le, s390 and s390x, and enforces\nno restrictions on other architectures. If running in user\nmode, or in system mode, but without the\n<b>CAP_SYS_ADMIN</b> capability (e.g. setting <i>User=</i>),\n<i>NoNewPrivileges=yes</i> is implied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Example:\nif a unit has the following,</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">RestrictNamespaces=cgroup\nipc <br>\nRestrictNamespaces=cgroup net</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">then\n<b>cgroup</b>, <b>ipc</b>, and <b>net</b> are set. If the\nsecond line is prefixed with &quot;~&quot;, e.g.,</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">RestrictNamespaces=cgroup\nipc <br>\nRestrictNamespaces=~cgroup net</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">then,\nonly <b>ipc</b> is set.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LockPersonality=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If set, locks down the\n<a href=\"https://man.page/2/personality\">personality(2)</a> system call so that the kernel\nexecution domain may not be changed from the default or the\npersonality selected with <i>Personality=</i> directive.\nThis may be useful to improve security, because odd\npersonality emulations may be poorly tested and source of\nvulnerabilities. If running in user mode, or in system mode,\nbut without the <b>CAP_SYS_ADMIN</b> capability (e.g.\nsetting <i>User=</i>), <i>NoNewPrivileges=yes</i> is\nimplied.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>MemoryDenyWriteExecute=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If set, attempts to create memory mappings\nthat are writable and executable at the same time, or to\nchange existing memory mappings to become executable, or\nmapping shared memory segments as executable are prohibited.\nSpecifically, a system call filter is added that rejects\n<a href=\"https://man.page/2/mmap\">mmap(2)</a> system calls with both <b>PROT_EXEC</b> and\n<b>PROT_WRITE</b> set, <a href=\"https://man.page/2/mprotect\">mprotect(2)</a> or\n<a href=\"https://man.page/2/pkey_mprotect\">pkey_mprotect(2)</a> system calls with <b>PROT_EXEC</b>\nset and <a href=\"https://man.page/2/shmat\">shmat(2)</a> system calls with <b>SHM_EXEC</b>\nset. Note that this option is incompatible with programs and\nlibraries that generate program code dynamically at runtime,\nincluding JIT execution engines, executable stacks, and code\n&quot;trampoline&quot; feature of various C compilers. This\noption improves service security, as it makes harder for\nsoftware exploits to change running code dynamically.\nHowever, the protection can be circumvented, if the service\ncan write to a filesystem, which is not mounted with\n<b>noexec</b> (such as /dev/shm), or it can use\n<b>memfd_create()</b>. This can be prevented by making such\nfile systems inaccessible to the service (e.g.\n<i>InaccessiblePaths=/dev/shm</i>) and installing further\nsystem call filters (<i>SystemCallFilter=~memfd_create</i>).\nNote that this feature is fully available on x86-64, and\npartially on x86. Specifically, the <b>shmat()</b>\nprotection is not available on x86. Note that on systems\nsupporting multiple ABIs (such as x86/x86-64) it is\nrecommended to turn off alternative ABIs for services, so\nthat they cannot be used to circumvent the restrictions of\nthis option. Specifically, it is recommended to combine this\noption with <i>SystemCallArchitectures=native</i> or\nsimilar. If running in user mode, or in system mode, but\nwithout the <b>CAP_SYS_ADMIN</b> capability (e.g. setting\n<i>User=</i>), <i>NoNewPrivileges=yes</i> is\nimplied.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RestrictRealtime=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If set, any attempts to enable realtime\nscheduling in a process of the unit are refused. This\nrestricts access to realtime task scheduling policies such\nas <b>SCHED_FIFO</b>, <b>SCHED_RR</b> or\n<b>SCHED_DEADLINE</b>. See <a href=\"https://man.page/7/sched\">sched(7)</a> for details about\nthese scheduling policies. If running in user mode, or in\nsystem mode, but without the <b>CAP_SYS_ADMIN</b> capability\n(e.g. setting <i>User=</i>), <i>NoNewPrivileges=yes</i> is\nimplied. Realtime scheduling policies may be used to\nmonopolize CPU time for longer periods of time, and may\nhence be used to lock up or otherwise trigger\nDenial-of-Service situations on the system. It is hence\nrecommended to restrict access to realtime scheduling to the\nfew programs that actually require them. Defaults to\noff.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RestrictSUIDSGID=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If set, any attempts to set the\nset-user-ID (SUID) or set-group-ID (SGID) bits on files or\ndirectories will be denied (for details on these bits see\n<a href=\"https://man.page/7/inode\">inode(7)</a>). If running in user mode, or in system\nmode, but without the <b>CAP_SYS_ADMIN</b> capability (e.g.\nsetting <i>User=</i>), <i>NoNewPrivileges=yes</i> is\nimplied. As the SUID/SGID bits are mechanisms to elevate\nprivileges, and allows users to acquire the identity of\nother users, it is recommended to restrict creation of\nSUID/SGID files to the few programs that actually require\nthem. Note that this restricts marking of any type of file\nsystem object with these bits, including both regular files\nand directories (where the SGID is a different meaning than\nfor files, see documentation). This option is implied if\n<i>DynamicUser=</i> is enabled. Defaults to off.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RemoveIPC=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean parameter. If set, all System V and POSIX IPC\nobjects owned by the user and group the processes of this\nunit are run as are removed when the unit is stopped. This\nsetting only has an effect if at least one of <i>User=</i>,\n<i>Group=</i> and <i>DynamicUser=</i> are used. It has no\neffect on IPC objects owned by the root user. Specifically,\nthis removes System V semaphores, as well as System V and\nPOSIX shared memory segments and message queues. If multiple\nunits use the same user or group the IPC objects are removed\nwhen the last of these units is stopped. This setting is\nimplied if <i>DynamicUser=</i> is set.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PrivateMounts=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean parameter. If set, the processes of this unit will\nbe run in their own private file system (mount) namespace\nwith all mount propagation from the processes towards the\nhost's main file system namespace turned off. This means any\nfile system mount points established or removed by the\nunit's processes will be private to them and not be visible\nto the host. However, file system mount points established\nor removed on the host will be propagated to the unit's\nprocesses. See <a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a> for details on\nfile system namespaces. Defaults to off.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nturned on, this executes three operations for each invoked\nprocess: a new <b>CLONE_NEWNS</b> namespace is created,\nafter which all existing mounts are remounted to\n<b>MS_SLAVE</b> to disable propagation from the unit's\nprocesses to the host (but leaving propagation in the\nopposite direction in effect). Finally, the mounts are\nremounted again to the propagation mode configured with\n<i>MountFlags=</i>, see below.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">File\nsystem namespaces are set up individually for each process\nforked off by the service manager. Mounts established in the\nnamespace of the process created by <i>ExecStartPre=</i>\nwill hence be cleaned up automatically as soon as that\nprocess exits and will not be available to subsequent\nprocesses forked off for <i>ExecStart=</i> (and similar\napplies to the various other commands configured for units).\nSimilarly, <i>JoinsNamespaceOf=</i> does not permit sharing\nkernel mount namespaces between units, it only enables\nsharing of the /tmp/ and /var/tmp/ directories.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Other\nfile system namespace unit settings &mdash;\n<i>PrivateMounts=</i>, <i>PrivateTmp=</i>,\n<i>PrivateDevices=</i>, <i>ProtectSystem=</i>,\n<i>ProtectHome=</i>, <i>ReadOnlyPaths=</i>,\n<i>InaccessiblePaths=</i>, <i>ReadWritePaths=</i>, ...\n&mdash; also enable file system namespacing in a fashion\nequivalent to this option. Hence it is primarily useful to\nexplicitly request this behaviour if none of the other\nsettings are used.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>MountFlags=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nmount propagation setting: <b>shared</b>, <b>slave</b> or\n<b>private</b>, which controls whether file system mount\npoints in the file system namespaces set up for this unit's\nprocesses will receive or propagate mounts and unmounts from\nother file system namespaces. See <a href=\"https://man.page/2/mount\">mount(2)</a> for\ndetails on mount propagation, and the three propagation\nflags in particular.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nsetting only controls the <i>final</i> propagation setting\nin effect on all mount points of the file system namespace\ncreated for each process of this unit. Other file system\nnamespacing unit settings (see the discussion in\n<i>PrivateMounts=</i> above) will implicitly disable mount\nand unmount propagation from the unit's processes towards\nthe host by changing the propagation setting of all mount\npoints in the unit's file system namespace to <b>slave</b>\nfirst. Setting this option to <b>shared</b> does not\nreestablish propagation in that case.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nnot set &ndash; but file system namespaces are enabled\nthrough another file system namespace unit setting &ndash;\n<b>shared</b> mount propagation is used, but &mdash; as\nmentioned &mdash; as <b>slave</b> is applied first,\npropagation from the unit's processes to the host is still\nturned off.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">It\nis not recommended to use <b>private</b> mount propagation\nfor units, as this means temporary mounts (such as removable\nmedia) of the host will stay mounted and thus indefinitely\nbusy in forked off processes, as unmount propagation events\nwon't be received by the file system namespace of the\nunit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Usually,\nit is best to leave this setting unmodified, and use higher\nlevel file system namespacing options instead, in particular\n<i>PrivateMounts=</i>, see above.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n<h2>SYSTEM CALL FILTERING\n<a name=\"SYSTEM CALL FILTERING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SystemCallFilter=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nspace-separated list of system call names. If this setting\nis used, all system calls executed by the unit processes\nexcept for the listed ones will result in immediate process\ntermination with the <b>SIGSYS</b> signal (allow-listing).\n(See <i>SystemCallErrorNumber=</i> below for changing the\ndefault action). If the first character of the list is\n&quot;~&quot;, the effect is inverted: only the listed\nsystem calls will result in immediate process termination\n(deny-listing). Deny-listed system calls and system call\ngroups may optionally be suffixed with a colon\n(&quot;:&quot;) and &quot;errno&quot; error number (between\n0 and 4095) or errno name such as <b>EPERM</b>,\n<b>EACCES</b> or <b>EUCLEAN</b> (see <a href=\"https://man.page/3/errno\">errno(3)</a> for a\nfull list). This value will be returned when a deny-listed\nsystem call is triggered, instead of terminating the\nprocesses immediately. Special setting &quot;kill&quot; can\nbe used to explicitly specify killing. This value takes\nprecedence over the one given in\n<i>SystemCallErrorNumber=</i>, see below. If running in user\nmode, or in system mode, but without the\n<b>CAP_SYS_ADMIN</b> capability (e.g. setting <i>User=</i>),\n<i>NoNewPrivileges=yes</i> is implied. This feature makes\nuse of the Secure Computing Mode 2 interfaces of the kernel\n('seccomp filtering') and is useful for enforcing a minimal\nsandboxing environment. Note that the <b>execve()</b>,\n<b>exit()</b>, <b>exit_group()</b>, <b>getrlimit()</b>,\n<b>rt_sigreturn()</b>, <b>sigreturn()</b> system calls and\nthe system calls for querying time and sleeping are\nimplicitly allow-listed and do not need to be listed\nexplicitly. This option may be specified more than once, in\nwhich case the filter masks are merged. If the empty string\nis assigned, the filter is reset, all prior assignments will\nhave no effect. This does not affect commands prefixed with\n&quot;+&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat on systems supporting multiple ABIs (such as\nx86/x86-64) it is recommended to turn off alternative ABIs\nfor services, so that they cannot be used to circumvent the\nrestrictions of this option. Specifically, it is recommended\nto combine this option with\n<i>SystemCallArchitectures=native</i> or similar.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat strict system call filters may impact execution and\nerror handling code paths of the service invocation.\nSpecifically, access to the <b>execve()</b> system call is\nrequired for the execution of the service binary &mdash; if\nit is blocked service invocation will necessarily fail.\nAlso, if execution of the service binary fails for some\nreason (for example: missing service executable), the error\nhandling logic might require access to an additional set of\nsystem calls in order to process and log this failure\ncorrectly. It might be necessary to temporarily disable\nsystem call filters in order to simplify debugging of such\nfailures.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nyou specify both types of this option (i.e. allow-listing\nand deny-listing), the first encountered will take\nprecedence and will dictate the default action (termination\nor approval of a system call). Then the next occurrences of\nthis option will add or delete the listed system calls from\nthe set of the filtered system calls, depending of its type\nand the default action. (For example, if you have started\nwith an allow list rule for <b>read()</b> and\n<b>write()</b>, and right after it add a deny list rule for\n<b>write()</b>, then <b>write()</b> will be removed from the\nset.)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">As\nthe number of possible system calls is large, predefined\nsets of system calls are provided. A set starts with\n&quot;@&quot; character, followed by name of the\nset.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;3.&nbsp;Currently\npredefined system call sets</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3495763.png\" alt=\"Image grohtml-3495763.png\"></b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note,\nthat as new system calls are added to the kernel, additional\nsystem calls might be added to the groups above. Contents of\nthe sets may also change between systemd versions. In\naddition, the list of system calls depends on the kernel\nversion and architecture for which systemd was compiled. Use\n<b>systemd-analyze&nbsp;syscall-filter</b> to list the\nactual list of system calls in each filter.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Generally,\nallow-listing system calls (rather than deny-listing) is the\nsafer mode of operation. It is recommended to enforce system\ncall allow lists for all long-running system services.\nSpecifically, the following lines are a relatively safe\nbasic choice for the majority of system services:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">[Service]\n<br>\nSystemCallFilter=@system-service <br>\nSystemCallErrorNumber=EPERM</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat various kernel system calls are defined redundantly:\nthere are multiple system calls for executing the same\noperation. For example, the <b>pidfd_send_signal()</b>\nsystem call may be used to execute operations similar to\nwhat can be done with the older <b>kill()</b> system call,\nhence blocking the latter without the former only provides\nweak protection. Since new system calls are added regularly\nto the kernel as development progresses, keeping system call\ndeny lists comprehensive requires constant work. It is thus\nrecommended to use allow-listing instead, which offers the\nbenefit that new system calls are by default implicitly\nblocked until the allow list is updated.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Also\nnote that a number of system calls are required to be\naccessible for the dynamic linker to work. The dynamic\nlinker is required for running most regular programs\n(specifically: all dynamic ELF binaries, which is how most\ndistributions build packaged programs). This means that\nblocking these system calls (which include <b>open()</b>,\n<b>openat()</b> or <b>mmap()</b>) will make most programs\ntypically shipped with generic distributions\nunusable.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">It\nis recommended to combine the file system namespacing\nrelated options with <i>SystemCallFilter=~@mount</i>, in\norder to prohibit the unit's processes to undo the mappings.\nSpecifically these are the options <i>PrivateTmp=</i>,\n<i>PrivateDevices=</i>, <i>ProtectSystem=</i>,\n<i>ProtectHome=</i>, <i>ProtectKernelTunables=</i>,\n<i>ProtectControlGroups=</i>, <i>ProtectKernelLogs=</i>,\n<i>ProtectClock=</i>, <i>ReadOnlyPaths=</i>,\n<i>InaccessiblePaths=</i> and\n<i>ReadWritePaths=</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SystemCallErrorNumber=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes an\n&quot;errno&quot; error number (between 1 and 4095) or errno\nname such as <b>EPERM</b>, <b>EACCES</b> or <b>EUCLEAN</b>,\nto return when the system call filter configured with\n<i>SystemCallFilter=</i> is triggered, instead of\nterminating the process immediately. See <a href=\"https://man.page/3/errno\">errno(3)</a> for\na full list of error codes. When this setting is not used,\nor when the empty string or the special setting\n&quot;kill&quot; is assigned, the process will be terminated\nimmediately when the filter is triggered.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SystemCallArchitectures=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nspace-separated list of architecture identifiers to include\nin the system call filter. The known architecture\nidentifiers are the same as for\n<i>ConditionArchitecture=</i> described in\n<b>systemd.unit</b>(5), as well as <b>x32</b>,\n<b>mips64-n32</b>, <b>mips64-le-n32</b>, and the special\nidentifier <b>native</b>. The special identifier\n<b>native</b> implicitly maps to the native architecture of\nthe system (or more precisely: to the architecture the\nsystem manager is compiled for). If running in user mode, or\nin system mode, but without the <b>CAP_SYS_ADMIN</b>\ncapability (e.g. setting <i>User=</i>),\n<i>NoNewPrivileges=yes</i> is implied. By default, this\noption is set to the empty list, i.e. no filtering is\napplied.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthis setting is used, processes of this unit will only be\npermitted to call native system calls, and system calls of\nthe specified architectures. For the purposes of this\noption, the x32 architecture is treated as including x86-64\nsystem calls. However, this setting still fulfills its\npurpose, as explained below, on x32.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">System\ncall filtering is not equally effective on all\narchitectures. For example, on x86 filtering of network\nsocket-related calls is not possible, due to ABI limitations\n&mdash; a limitation that x86-64 does not have, however. On\nsystems supporting multiple ABIs at the same time &mdash;\nsuch as x86/x86-64 &mdash; it is hence recommended to limit\nthe set of permitted system call architectures so that\nsecondary ABIs may not be used to circumvent the\nrestrictions applied to the native ABI of the system. In\nparticular, setting <i>SystemCallArchitectures=native</i> is\na good choice for disabling non-native ABIs.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">System\ncall architectures may also be restricted system-wide via\nthe <i>SystemCallArchitectures=</i> option in the global\nconfiguration. See <b>systemd-system.conf</b>(5) for\ndetails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SystemCallLog=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nspace-separated list of system call names. If this setting\nis used, all system calls executed by the unit processes for\nthe listed ones will be logged. If the first character of\nthe list is &quot;~&quot;, the effect is inverted: all\nsystem calls except the listed system calls will be logged.\nIf running in user mode, or in system mode, but without the\n<b>CAP_SYS_ADMIN</b> capability (e.g. setting <i>User=</i>),\n<i>NoNewPrivileges=yes</i> is implied. This feature makes\nuse of the Secure Computing Mode 2 interfaces of the kernel\n('seccomp filtering') and is useful for auditing or setting\nup a minimal sandboxing environment. This option may be\nspecified more than once, in which case the filter masks are\nmerged. If the empty string is assigned, the filter is\nreset, all prior assignments will have no effect. This does\nnot affect commands prefixed with &quot;+&quot;.</font></p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Environment=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets\nenvironment variables for executed processes. Each line is\nunquoted using the rules described in &quot;Quoting&quot;\nsection in <b>systemd.syntax</b>(7) and becomes a list of\nvariable assignments. If you need to assign a value\ncontaining spaces or the equals sign to a variable, put\nquotes around the whole assignment. Variable expansion is\nnot performed inside the strings and the &quot;$&quot;\ncharacter has no special meaning. Specifier expansion is\nperformed, see the &quot;Specifiers&quot; section in\n<b>systemd.unit</b>(5).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption may be specified more than once, in which case all\nlisted variables will be set. If the same variable is listed\ntwice, the later setting will override the earlier setting.\nIf the empty string is assigned to this option, the list of\nenvironment variables is reset, all prior assignments have\nno effect.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nnames of the variables can contain ASCII letters, digits,\nand the underscore character. Variable names cannot be empty\nor start with a digit. In variable values, most characters\nare allowed, but non-printable characters are currently\nrejected.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Example:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">Environment=&quot;VAR1=word1\nword2&quot; VAR2=word3 &quot;VAR3=$word 5 6&quot;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">gives\nthree variables &quot;VAR1&quot;, &quot;VAR2&quot;,\n&quot;VAR3&quot; with the values &quot;word1 word2&quot;,\n&quot;word3&quot;, &quot;$word 5 6&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">See\n<a href=\"https://man.page/7/environ\">environ(7)</a> for details about environment\nvariables.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat environment variables are not suitable for passing\nsecrets (such as passwords, key material, ...) to service\nprocesses. Environment variables set for a unit are exposed\nto unprivileged clients via D-Bus IPC, and generally not\nunderstood as being data that requires protection. Moreover,\nenvironment variables are propagated down the process tree,\nincluding across security boundaries (such as setuid/setgid\nexecutables), and hence might leak to processes that should\nnot have access to the secret data. Use\n<i>LoadCredential=</i> (see below) to pass data to unit\nprocesses securely.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>EnvironmentFile=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Similar\nto <i>Environment=</i> but reads the environment variables\nfrom a text file. The text file should contain\nnew-line-separated variable assignments. Empty lines, lines\nwithout an &quot;=&quot; separator, or lines starting with ;\nor # will be ignored, which may be used for commenting. A\nline ending with a backslash will be concatenated with the\nfollowing one, allowing multiline variable definitions. The\nparser strips leading and trailing whitespace from the\nvalues of assignments, unless you use double quotes\n(&quot;).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><font color=\"#0000FF\">C\nescapes</font></b>\n<small><font color=\"#000000\">[7]</font></small>\n<font color=\"#000000\">are supported, but not</font>\n<b><font color=\"#0000FF\">most control characters</font></b>\n<small><font color=\"#000000\">[8]</font></small>\n<font color=\"#000000\">. &quot;\\t&quot; and &quot;\\n&quot;\ncan be used to insert tabs and newlines within\n<i>EnvironmentFile=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nargument passed should be an absolute filename or wildcard\nexpression, optionally prefixed with &quot;-&quot;, which\nindicates that if the file does not exist, it will not be\nread and no error or warning message is logged. This option\nmay be specified more than once in which case all specified\nfiles are read. If the empty string is assigned to this\noption, the list of file to read is reset, all prior\nassignments have no effect.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nfiles listed with this directive will be read shortly before\nthe process is executed (more specifically, after all\nprocesses from a previous unit state terminated. This means\nyou can generate these files in one unit state, and read it\nwith this option in the next. The files are read from the\nfile system of the service manager, before any file system\nchanges like bind mounts take place).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Settings\nfrom these files override settings made with\n<i>Environment=</i>. If the same variable is set twice from\nthese files, the files will be read in the order they are\nspecified and the later setting will override the earlier\nsetting.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PassEnvironment=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Pass\nenvironment variables set for the system service manager to\nexecuted processes. Takes a space-separated list of variable\nnames. This option may be specified more than once, in which\ncase all listed variables will be passed. If the empty\nstring is assigned to this option, the list of environment\nvariables to pass is reset, all prior assignments have no\neffect. Variables specified that are not set for the system\nmanager will not be passed and will be silently ignored.\nNote that this option is only relevant for the system\nservice manager, as system services by default do not\nautomatically inherit any environment variables set for the\nservice manager itself. However, in case of the user service\nmanager all environment variables are passed to the executed\nprocesses anyway, hence this option is without effect for\nthe user service manager.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Variables\nset for invoked processes due to this setting are subject to\nbeing overridden by those configured with\n<i>Environment=</i> or <i>EnvironmentFile=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><font color=\"#0000FF\">C\nescapes</font></b>\n<small><font color=\"#000000\">[7]</font></small>\n<font color=\"#000000\">are supported, but not</font>\n<b><font color=\"#0000FF\">most control characters</font></b>\n<small><font color=\"#000000\">[8]</font></small>\n<font color=\"#000000\">. &quot;\\t&quot; and &quot;\\n&quot;\ncan be used to insert tabs and newlines within\n<i>EnvironmentFile=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Example:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">PassEnvironment=VAR1\nVAR2 VAR3</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">passes\nthree variables &quot;VAR1&quot;, &quot;VAR2&quot;,\n&quot;VAR3&quot; with the values set for those variables in\nPID1.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">See\n<a href=\"https://man.page/7/environ\">environ(7)</a> for details about environment\nvariables.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>UnsetEnvironment=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Explicitly\nunset environment variable assignments that would normally\nbe passed from the service manager to invoked processes of\nthis unit. Takes a space-separated list of variable names or\nvariable assignments. This option may be specified more than\nonce, in which case all listed variables/assignments will be\nunset. If the empty string is assigned to this option, the\nlist of environment variables/assignments to unset is reset.\nIf a variable assignment is specified (that is: a variable\nname, followed by &quot;=&quot;, followed by its value),\nthen any environment variable matching this precise\nassignment is removed. If a variable name is specified (that\nis a variable name without any following &quot;=&quot; or\nvalue), then any assignment matching the variable name,\nregardless of its value is removed. Note that the effect of\n<i>UnsetEnvironment=</i> is applied as final step when the\nenvironment list passed to executed processes is compiled.\nThat means it may undo assignments from any configuration\nsource, including assignments made through\n<i>Environment=</i> or <i>EnvironmentFile=</i>, inherited\nfrom the system manager's global set of environment\nvariables, inherited via <i>PassEnvironment=</i>, set by the\nservice manager itself (such as <i>$NOTIFY_SOCKET</i> and\nsuch), or set by a PAM module (in case <i>PAMName=</i> is\nused).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">See\n&quot;Environment Variables in Spawned Processes&quot; below\nfor a description of how those settings combine to form the\ninherited environment. See <a href=\"https://man.page/7/environ\">environ(7)</a> for general\ninformation about environment variables.</font></p>\n\n<h2>LOGGING AND STANDARD INPUT/OUTPUT\n<a name=\"LOGGING AND STANDARD INPUT/OUTPUT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StandardInput=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhere file descriptor 0 (STDIN) of the executed processes is\nconnected to. Takes one of <b>null</b>, <b>tty</b>,\n<b>tty-force</b>, <b>tty-fail</b>, <b>data</b>,\n<b>file:</b><i>path</i>, <b>socket</b> or\n<b>fd:</b><i>name</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\n<b>null</b> is selected, standard input will be connected to\n/dev/null, i.e. all read attempts by the process will result\nin immediate EOF.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\n<b>tty</b> is selected, standard input is connected to a TTY\n(as configured by <i>TTYPath=</i>, see below) and the\nexecuted process becomes the controlling process of the\nterminal. If the terminal is already being controlled by\nanother process, the executed process waits until the\ncurrent controlling process releases the\nterminal.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>tty-force</b>\nis similar to <b>tty</b>, but the executed process is\nforcefully and immediately made the controlling process of\nthe terminal, potentially removing previous controlling\nprocesses from the terminal.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>tty-fail</b>\nis similar to <b>tty</b>, but if the terminal already has a\ncontrolling process start-up of the executed process\nfails.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<b>data</b> option may be used to configure arbitrary\ntextual or binary data to pass via standard input to the\nexecuted process. The data to pass is configured via\n<i>StandardInputText=</i>/<i>StandardInputData=</i> (see\nbelow). Note that the actual file descriptor type passed\n(memory file, regular file, UNIX pipe, ...) might depend on\nthe kernel and available privileges. In any case, the file\ndescriptor is read-only, and when read returns the specified\ndata followed by EOF.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<b>file:</b><i>path</i> option may be used to connect a\nspecific file system object to standard input. An absolute\npath following the &quot;:&quot; character is expected,\nwhich may refer to a regular file, a FIFO or special file.\nIf an <b>AF_UNIX</b> socket in the file system is specified,\na stream socket is connected to it. The latter is useful for\nconnecting standard input of processes to arbitrary system\nservices.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<b>socket</b> option is valid in socket-activated services\nonly, and requires the relevant socket unit file (see\n<b>systemd.socket</b>(5) for details) to have\n<i>Accept=yes</i> set, or to specify a single socket only.\nIf this option is set, standard input will be connected to\nthe socket the service was activated from, which is\nprimarily useful for compatibility with daemons designed for\nuse with the traditional <b>inetd</b>(8) socket activation\ndaemon.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<b>fd:</b><i>name</i> option connects standard input to a\nspecific, named file descriptor provided by a socket unit.\nThe name may be specified as part of this option, following\na &quot;:&quot; character (e.g. &quot;fd:foobar&quot;). If\nno name is specified, the name &quot;stdin&quot; is implied\n(i.e. &quot;fd&quot; is equivalent to &quot;fd:stdin&quot;).\nAt least one socket unit defining the specified name must be\nprovided via the <i>Sockets=</i> option, and the file\ndescriptor name may differ from the name of its containing\nsocket unit. If multiple matches are found, the first one\nwill be used. See <i>FileDescriptorName=</i> in\n<b>systemd.socket</b>(5) for more details about named file\ndescriptors and their ordering.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nsetting defaults to <b>null</b>, unless\n<i>StandardInputText=</i>/<i>StandardInputData=</i> are set,\nin which case it defaults to <b>data</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StandardOutput=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhere file descriptor 1 (stdout) of the executed processes\nis connected to. Takes one of <b>inherit</b>, <b>null</b>,\n<b>tty</b>, <b>journal</b>, <b>kmsg</b>,\n<b>journal+console</b>, <b>kmsg+console</b>,\n<b>file:</b><i>path</i>, <b>append:</b><i>path</i>,\n<b>truncate:</b><i>path</i>, <b>socket</b> or\n<b>fd:</b><i>name</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>inherit</b>\nduplicates the file descriptor of standard input for\nstandard output.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>null</b>\nconnects standard output to /dev/null, i.e. everything\nwritten to it will be lost.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>tty</b>\nconnects standard output to a tty (as configured via\n<i>TTYPath=</i>, see below). If the TTY is used for output\nonly, the executed process will not become the controlling\nprocess of the terminal, and will not fail or wait for other\nprocesses to release the terminal.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>journal</b>\nconnects standard output with the journal, which is\naccessible via <a href=\"https://man.page/1/journalctl\">journalctl(1)</a>. Note that everything\nthat is written to kmsg (see below) is implicitly stored in\nthe journal as well, the specific option listed below is\nhence a superset of this one. (Also note that any external,\nadditional syslog daemons receive their log data from the\njournal, too, hence this is the option to use when logging\nshall be processed with such a daemon.)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>kmsg</b>\nconnects standard output with the kernel log buffer which is\naccessible via <a href=\"https://man.page/1/dmesg\">dmesg(1)</a>, in addition to the journal.\nThe journal daemon might be configured to send all logs to\nkmsg anyway, in which case this option is no different from\n<b>journal</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>journal+console</b>\nand <b>kmsg+console</b> work in a similar way as the two\noptions above but copy the output to the system console as\nwell.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<b>file:</b><i>path</i> option may be used to connect a\nspecific file system object to standard output. The\nsemantics are similar to the same option of\n<i>StandardInput=</i>, see above. If <i>path</i> refers to a\nregular file on the filesystem, it is opened (created if it\ndoesn't exist yet) for writing at the beginning of the file,\nbut without truncating it. If standard input and output are\ndirected to the same file path, it is opened only once, for\nreading as well as writing and duplicated. This is\nparticularly useful when the specified path refers to an\n<b>AF_UNIX</b> socket in the file system, as in that case\nonly a single stream connection is created for both input\nand output.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>append:</b><i>path</i>\nis similar to <b>file:</b><i>path</i> above, but it opens\nthe file in append mode.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>truncate:</b><i>path</i>\nis similar to <b>file:</b><i>path</i> above, but it\ntruncates the file when opening it. For units with multiple\ncommand lines, e.g. <i>Type=oneshot</i> services with\nmultiple <i>ExecStart=</i>, or services with\n<i>ExecCondition=</i>, <i>ExecStartPre=</i> or\n<i>ExecStartPost=</i>, the output file is reopened and\ntherefore re-truncated for each command line. If the output\nfile is truncated while another process still has the file\nopen, e.g. by an <i>ExecReload=</i> running concurrently\nwith an <i>ExecStart=</i>, and the other process continues\nwriting to the file without adjusting its offset, then the\nspace between the file pointers of the two processes may be\nfilled with <b>NUL</b> bytes, producing a sparse file. Thus,\n<b>truncate:</b><i>path</i> is typically only useful for\nunits where only one process runs at a time, such as\nservices with a single <i>ExecStart=</i> and no\n<i>ExecStartPost=</i>, <i>ExecReload=</i>, <i>ExecStop=</i>\nor similar.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>socket</b>\nconnects standard output to a socket acquired via socket\nactivation. The semantics are similar to the same option of\n<i>StandardInput=</i>, see above.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<b>fd:</b><i>name</i> option connects standard output to a\nspecific, named file descriptor provided by a socket unit. A\nname may be specified as part of this option, following a\n&quot;:&quot; character (e.g. &quot;fd:foobar&quot;). If no\nname is specified, the name &quot;stdout&quot; is implied\n(i.e. &quot;fd&quot; is equivalent to\n&quot;fd:stdout&quot;). At least one socket unit defining\nthe specified name must be provided via the <i>Sockets=</i>\noption, and the file descriptor name may differ from the\nname of its containing socket unit. If multiple matches are\nfound, the first one will be used. See\n<i>FileDescriptorName=</i> in <b>systemd.socket</b>(5) for\nmore details about named descriptors and their\nordering.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthe standard output (or error output, see below) of a unit\nis connected to the journal or the kernel log buffer, the\nunit will implicitly gain a dependency of type <i>After=</i>\non systemd-journald.socket (also see the &quot;Implicit\nDependencies&quot; section above). Also note that in this\ncase stdout (or stderr, see below) will be an <b>AF_UNIX</b>\nstream socket, and not a pipe or FIFO that can be re-opened.\nThis means when executing shell scripts the construct\n<b>echo &quot;hello&quot; &gt; /dev/stderr</b> for writing\ntext to stderr will not work. To mitigate this use the\nconstruct <b>echo &quot;hello&quot; &gt;&amp;2</b> instead,\nwhich is mostly equivalent and avoids this\npitfall.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nsetting defaults to the value set with\n<i>DefaultStandardOutput=</i> in\n<b>systemd-system.conf</b>(5), which defaults to\n<b>journal</b>. Note that setting this parameter might\nresult in additional dependencies to be added to the unit\n(see above).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StandardError=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nwhere file descriptor 2 (stderr) of the executed processes\nis connected to. The available options are identical to\nthose of <i>StandardOutput=</i>, with some exceptions: if\nset to <b>inherit</b> the file descriptor used for standard\noutput is duplicated for standard error, while\n<b>fd:</b><i>name</i> will use a default file descriptor\nname of &quot;stderr&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nsetting defaults to the value set with\n<i>DefaultStandardError=</i> in\n<b>systemd-system.conf</b>(5), which defaults to\n<b>inherit</b>. Note that setting this parameter might\nresult in additional dependencies to be added to the unit\n(see above).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StandardInputText=</i>,\n<i>StandardInputData=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\narbitrary textual or binary data to pass via file descriptor\n0 (STDIN) to the executed processes. These settings have no\neffect unless <i>StandardInput=</i> is set to <b>data</b>\n(which is the default if <i>StandardInput=</i> is not set\notherwise, but\n<i>StandardInputText=</i>/<i>StandardInputData=</i> is). Use\nthis option to embed process input data directly in the unit\nfile.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><i>StandardInputText=</i>\naccepts arbitrary textual data. C-style escapes for special\ncharacters as well as the usual &quot;%&quot;-specifiers are\nresolved. Each time this setting is used the specified text\nis appended to the per-unit data buffer, followed by a\nnewline character (thus every use appends a new line to the\nend of the buffer). Note that leading and trailing\nwhitespace of lines configured with this option is removed.\nIf an empty line is specified the buffer is cleared (hence,\nin order to insert an empty line, add an additional\n&quot;\\n&quot; to the end or beginning of a\nline).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><i>StandardInputData=</i>\naccepts arbitrary binary data, encoded in</font>\n<b><font color=\"#0000FF\">Base64</font></b>\n<small><font color=\"#000000\">[9]</font></small>\n<font color=\"#000000\">. No escape sequences or specifiers\nare resolved. Any whitespace in the encoded version is\nignored during decoding.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat <i>StandardInputText=</i> and <i>StandardInputData=</i>\noperate on the same data buffer, and may be mixed in order\nto configure both binary and textual data for the same input\nstream. The textual or binary data is joined strictly in the\norder the settings appear in the unit file. Assigning an\nempty string to either will reset the data\nbuffer.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Please\nkeep in mind that in order to maintain readability long unit\nfile settings may be split into multiple lines, by suffixing\neach line (except for the last) with a &quot;\\&quot;\ncharacter (see <b>systemd.unit</b>(5) for details). This is\nparticularly useful for large data configured with these two\noptions. Example:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">...\n<br>\nStandardInput=data <br>\n\nStandardInputData=SWNrIHNpdHplIGRhIHVuJyBlc3NlIEtsb3BzLAp1ZmYgZWVtYWwga2xvcHAncy4KSWNrIGtpZWtl\n\\ <br>\n\nLCBzdGF1bmUsIHd1bmRyZSBtaXIsCnVmZiBlZW1hbCBqZWh0IHNlIHVmZiBkaWUgVMO8ci4KTmFu\n\\ <br>\n\ndSwgZGVuayBpY2ssIGljayBkZW5rIG5hbnUhCkpldHogaXNzZSB1ZmYsIGVyc2NodCB3YXIgc2Ug\n\\ <br>\n\nenUhCkljayBqZWhlIHJhdXMgdW5kIGJsaWNrZSDigJQKdW5kIHdlciBzdGVodCBkcmF1w59lbj8g\n\\ <br>\nSWNrZSEK <br>\n...</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LogLevelMax=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\nfiltering by log level of log messages generated by this\nunit. Takes a <b>syslog</b> log level, one of <b>emerg</b>\n(lowest log level, only highest priority messages),\n<b>alert</b>, <b>crit</b>, <b>err</b>, <b>warning</b>,\n<b>notice</b>, <b>info</b>, <b>debug</b> (highest log level,\nalso lowest priority messages). See <a href=\"https://man.page/3/syslog\">syslog(3)</a> for\ndetails. By default no filtering is applied (i.e. the\ndefault maximum log level is <b>debug</b>). Use this option\nto configure the logging system to drop log messages of a\nspecific service above the specified level. For example, set\n<i>LogLevelMax=</i><b>info</b> in order to turn off debug\nlogging of a particularly chatty unit. Note that the\nconfigured level is applied to any log messages written by\nany of the processes belonging to this unit, as well as any\nlog messages written by the system manager process (PID 1)\nin reference to this unit, sent via any supported logging\nprotocol. The filtering is applied early in the logging\npipeline, before any kind of further processing is done.\nMoreover, messages which pass through this filter\nsuccessfully might still be dropped by filters applied at a\nlater stage in the logging subsystem. For example,\n<i>MaxLevelStore=</i> configured in <b>journald.conf</b>(5)\nmight prohibit messages of higher log levels to be stored on\ndisk, even though the per-unit <i>LogLevelMax=</i> permitted\nit to be processed.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LogExtraFields=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\nadditional log metadata fields to include in all log records\ngenerated by processes associated with this unit. This\nsetting takes one or more journal field assignments in the\nformat &quot;FIELD=VALUE&quot; separated by whitespace. See\n<b>systemd.journal-fields</b>(7) for details on the journal\nfield concept. Even though the underlying journal\nimplementation permits binary field values, this setting\naccepts only valid UTF-8 values. To include space characters\nin a journal field value, enclose the assignment in double\nquotes (&quot;). The usual specifiers are expanded in all\nassignments (see below). Note that this setting is not only\nuseful for attaching additional metadata to log records of a\nunit, but given that all fields and values are indexed may\nalso be used to implement cross-unit log record matching.\nAssign an empty string to reset the list.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LogRateLimitIntervalSec=</i>,\n<i>LogRateLimitBurst=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\nthe rate limiting that is applied to messages generated by\nthis unit. If, in the time interval defined by\n<i>LogRateLimitIntervalSec=</i>, more messages than\nspecified in <i>LogRateLimitBurst=</i> are logged by a\nservice, all further messages within the interval are\ndropped until the interval is over. A message about the\nnumber of dropped messages is generated. The time\nspecification for <i>LogRateLimitIntervalSec=</i> may be\nspecified in the following units: &quot;s&quot;,\n&quot;min&quot;, &quot;h&quot;, &quot;ms&quot;,\n&quot;us&quot; (see <b>systemd.time</b>(7) for details). The\ndefault settings are set by <i>RateLimitIntervalSec=</i> and\n<i>RateLimitBurst=</i> configured in\n<b>journald.conf</b>(5).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LogNamespace=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Run the\nunit's processes in the specified journal namespace. Expects\na short user-defined string identifying the namespace. If\nnot used the processes of the service are run in the default\njournal namespace, i.e. their log stream is collected and\nprocessed by systemd-journald.service. If this option is\nused any log data generated by processes of this unit\n(regardless if via the <b>syslog()</b>, journal native\nlogging or stdout/stderr logging) is collected and processed\nby an instance of the systemd-journald@.service template\nunit, which manages the specified namespace. The log data is\nstored in a data store independent from the default log\nnamespace's data store. See\n<b>systemd-journald.service</b>(8) for details about journal\nnamespaces.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Internally,\njournal namespaces are implemented through Linux mount\nnamespacing and over-mounting the directory that contains\nthe relevant <b>AF_UNIX</b> sockets used for logging in the\nunit's mount namespace. Since mount namespaces are used this\nsetting disconnects propagation of mounts from the unit's\nprocesses to the host, similar to how <i>ReadOnlyPaths=</i>\nand similar settings (see above) work. Journal namespaces\nmay hence not be used for services that need to establish\nmount points on the host.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nthis option is used the unit will automatically gain\nordering and requirement dependencies on the two socket\nunits associated with the systemd-journald@.service instance\nso that they are automatically established prior to the unit\nstarting up. Note that when this option is used log output\nof this service does not appear in the regular\n<a href=\"https://man.page/1/journalctl\">journalctl(1)</a> output, unless the <b>--namespace=</b>\noption is used.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption is only available for system services and is not\nsupported for services running in per-user instances of the\nservice manager.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SyslogIdentifier=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nprocess name (&quot;<b>syslog</b> tag&quot;) to prefix log\nlines sent to the logging system or the kernel log buffer\nwith. If not set, defaults to the process name of the\nexecuted process. This option is only useful when\n<i>StandardOutput=</i> or <i>StandardError=</i> are set to\n<b>journal</b> or <b>kmsg</b> (or to the same settings in\ncombination with <b>+console</b>) and only applies to log\nmessages written to stdout or stderr.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SyslogFacility=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\n<b>syslog</b> facility identifier to use when logging. One\nof <b>kern</b>, <b>user</b>, <b>mail</b>, <b>daemon</b>,\n<b>auth</b>, <b>syslog</b>, <b>lpr</b>, <b>news</b>,\n<b>uucp</b>, <b>cron</b>, <b>authpriv</b>, <b>ftp</b>,\n<b>local0</b>, <b>local1</b>, <b>local2</b>, <b>local3</b>,\n<b>local4</b>, <b>local5</b>, <b>local6</b> or\n<b>local7</b>. See <a href=\"https://man.page/3/syslog\">syslog(3)</a> for details. This option\nis only useful when <i>StandardOutput=</i> or\n<i>StandardError=</i> are set to <b>journal</b> or\n<b>kmsg</b> (or to the same settings in combination with\n<b>+console</b>), and only applies to log messages written\nto stdout or stderr. Defaults to <b>daemon</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SyslogLevel=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\ndefault <b>syslog</b> log level to use when logging to the\nlogging system or the kernel log buffer. One of\n<b>emerg</b>, <b>alert</b>, <b>crit</b>, <b>err</b>,\n<b>warning</b>, <b>notice</b>, <b>info</b>, <b>debug</b>.\nSee <a href=\"https://man.page/3/syslog\">syslog(3)</a> for details. This option is only useful\nwhen <i>StandardOutput=</i> or <i>StandardError=</i> are set\nto <b>journal</b> or <b>kmsg</b> (or to the same settings in\ncombination with <b>+console</b>), and only applies to log\nmessages written to stdout or stderr. Note that individual\nlines output by executed processes may be prefixed with a\ndifferent log level which can be used to override the\ndefault log level specified here. The interpretation of\nthese prefixes may be disabled with\n<i>SyslogLevelPrefix=</i>, see below. For details, see\n<a href=\"https://man.page/3/sd-daemon\">sd-daemon(3)</a>. Defaults to <b>info</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SyslogLevelPrefix=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If true and <i>StandardOutput=</i> or\n<i>StandardError=</i> are set to <b>journal</b> or\n<b>kmsg</b> (or to the same settings in combination with\n<b>+console</b>), log lines written by the executed process\nthat are prefixed with a log level will be processed with\nthis log level set but the prefix removed. If set to false,\nthe interpretation of these prefixes is disabled and the\nlogged lines are passed on as-is. This only applies to log\nmessages written to stdout or stderr. For details about this\nprefixing see <a href=\"https://man.page/3/sd-daemon\">sd-daemon(3)</a>. Defaults to\ntrue.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TTYPath=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Sets the\nterminal device node to use if standard input, output, or\nerror are connected to a TTY (see above). Defaults to\n/dev/console.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TTYReset=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Reset the\nterminal device specified with <i>TTYPath=</i> before and\nafter execution. Defaults to &quot;no&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TTYVHangup=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Disconnect\nall clients which have opened the terminal device specified\nwith <i>TTYPath=</i> before and after execution. Defaults to\n&quot;no&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TTYVTDisallocate=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">If the\nterminal device specified with <i>TTYPath=</i> is a virtual\nconsole terminal, try to deallocate the TTY before and after\nexecution. This ensures that the screen and scrollback\nbuffer is cleared. Defaults to &quot;no&quot;.</font></p>\n\n<h2>CREDENTIALS\n<a name=\"CREDENTIALS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoadCredential=ID</i>[:<i>PATH</i>]</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Pass a\ncredential to the unit. Credentials are limited-size binary\nor textual objects that may be passed to unit processes.\nThey are primarily used for passing cryptographic keys (both\npublic and private) or certificates, user account\ninformation or identity information from host to services.\nThe data is accessible from the unit's processes via the\nfile system, at a read-only location that (if possible and\npermitted) is backed by non-swappable memory. The data is\nonly accessible to the user associated with the unit, via\nthe <i>User=</i>/<i>DynamicUser=</i> settings (as well as\nthe superuser). When available, the location of credentials\nis exported as the <i>$CREDENTIALS_DIRECTORY</i> environment\nvariable to the unit's processes.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\n<i>LoadCredential=</i> setting takes a textual ID to use as\nname for a credential plus a file system path, separated by\na colon. The ID must be a short ASCII string suitable as\nfilename in the filesystem, and may be chosen freely by the\nuser. If the specified path is absolute it is opened as\nregular file and the credential data is read from it. If the\nabsolute path refers to an <b>AF_UNIX</b> stream socket in\nthe file system a connection is made to it (only once at\nunit start-up) and the credential data read from the\nconnection, providing an easy IPC integration point for\ndynamically providing credentials from other services. If\nthe specified path is not absolute and itself qualifies as\nvalid credential identifier it is understood to refer to a\ncredential that the service manager itself received via the\n<i>$CREDENTIALS_DIRECTORY</i> environment variable, which\nmay be used to propagate credentials from an invoking\nenvironment (e.g. a container manager that invoked the\nservice manager) into a service. The contents of the\nfile/socket may be arbitrary binary or textual data,\nincluding newline characters and <b>NUL</b> bytes. If the\nfile system path is omitted it is chosen identical to the\ncredential name, i.e. this is a terse way do declare\ncredentials to inherit from the service manager into a\nservice. This option may be used multiple times, each time\ndefining an additional credential to pass to the\nunit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\ncredential files/IPC sockets must be accessible to the\nservice manager, but don't have to be directly accessible to\nthe unit's processes: the credential data is read and copied\ninto separate, read-only copies for the unit that are\naccessible to appropriately privileged processes. This is\nparticularly useful in combination with <i>DynamicUser=</i>\nas this way privileged data can be made available to\nprocesses running under a dynamic UID (i.e. not a previously\nknown one) without having to open up access to all\nusers.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">In\norder to reference the path a credential may be read from\nwithin a <i>ExecStart=</i> command line use\n&quot;${CREDENTIALS_DIRECTORY}/mycred&quot;, e.g.\n&quot;ExecStart=cat\n${CREDENTIALS_DIRECTORY}/mycred&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Currently,\nan accumulated credential size limit of 1 MB per unit is\nenforced.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nreferencing an <b>AF_UNIX</b> stream socket to connect to,\nthe connection will originate from an abstract namespace\nsocket, that includes information about the unit and the\ncredential ID in its socket name. Use <a href=\"https://man.page/2/getpeername\">getpeername(2)</a>\nto query this information. The returned socket name is\nformatted as <b>NUL</b> <i>RANDOM</i> &quot;/unit/&quot;\n<i>UNIT</i> &quot;/&quot; <i>ID</i>, i.e. a <b>NUL</b> byte\n(as required for abstract namespace socket names), followed\nby a random string (consisting of alphadecimal characters),\nfollowed by the literal string &quot;/unit/&quot;, followed\nby the requesting unit name, followed by the literal\ncharacter &quot;/&quot;, followed by the textual credential\nID requested. Example:\n&quot;\\0adf9d86b6eda275e/unit/foobar.service/credx&quot; in\ncase the credential &quot;credx&quot; is requested for a\nunit &quot;foobar.service&quot;. This functionality is\nuseful for using a single listening socket to serve\ncredentials to multiple consumers.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SetCredential=ID</i>:<i>VALUE</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\n<i>SetCredential=</i> setting is similar to\n<i>LoadCredential=</i> but accepts a literal value to use as\ndata for the credential, instead of a file system path to\nread the data from. Do not use this option for data that is\nsupposed to be secret, as it is accessible to unprivileged\nprocesses via IPC. It's only safe to use this for user IDs,\npublic key material and similar non-sensitive data. For\neverything else use <i>LoadCredential=</i>. In order to\nembed binary data into the credential data use C-style\nescaping (i.e. &quot;\\n&quot; to embed a newline, or\n&quot;\\x00&quot; to embed a <b>NUL</b> byte).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\na credential of the same ID is listed in both\n<i>LoadCredential=</i> and <i>SetCredential=</i>, the latter\nwill act as default if the former cannot be retrieved. In\nthis case not being able to retrieve the credential from the\npath specified in <i>LoadCredential=</i> is not considered\nfatal.</font></p>\n\n<h2>SYSTEM V COMPATIBILITY\n<a name=\"SYSTEM V COMPATIBILITY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>UtmpIdentifier=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nfour character identifier string for an <a href=\"https://man.page/5/utmp\">utmp(5)</a> and\nwtmp entry for this service. This should only be set for\nservices such as <b>getty</b> implementations (such as\n<b>agetty</b>(8)) where utmp/wtmp entries must be created\nand cleared before and after execution, or for services that\nshall be executed as if they were run by a <b>getty</b>\nprocess (see below). If the configured string is longer than\nfour characters, it is truncated and the terminal four\ncharacters are used. This setting interprets %I style string\nreplacements. This setting is unset by default, i.e. no\nutmp/wtmp entries are created or cleaned up for this\nservice.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>UtmpMode=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes one\nof &quot;init&quot;, &quot;login&quot; or &quot;user&quot;.\nIf <i>UtmpIdentifier=</i> is set, controls which type of\n<a href=\"https://man.page/5/utmp\">utmp(5)</a>/wtmp entries for this service are generated.\nThis setting has no effect unless <i>UtmpIdentifier=</i> is\nset too. If &quot;init&quot; is set, only an\n<b>INIT_PROCESS</b> entry is generated and the invoked\nprocess must implement a <b>getty</b>-compatible utmp/wtmp\nlogic. If &quot;login&quot; is set, first an\n<b>INIT_PROCESS</b> entry, followed by a\n<b>LOGIN_PROCESS</b> entry is generated. In this case, the\ninvoked process must implement a <a href=\"https://man.page/1/login\">login(1)</a>-compatible\nutmp/wtmp logic. If &quot;user&quot; is set, first an\n<b>INIT_PROCESS</b> entry, then a <b>LOGIN_PROCESS</b> entry\nand finally a <b>USER_PROCESS</b> entry is generated. In\nthis case, the invoked process may be any process that is\nsuitable to be run as session leader. Defaults to\n&quot;init&quot;.</font></p>\n\n<h2>ENVIRONMENT VARIABLES IN SPAWNED PROCESSES\n<a name=\"ENVIRONMENT VARIABLES IN SPAWNED PROCESSES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Processes\nstarted by the service manager are executed with an\nenvironment variable block assembled from multiple sources.\nProcesses started by the system service manager generally do\nnot inherit environment variables set for the service\nmanager itself (but this may be altered via\n<i>PassEnvironment=</i>), but processes started by the user\nservice manager instances generally do inherit all\nenvironment variables set for the service manager\nitself.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\neach invoked process the list of environment variables set\nis compiled from the following sources:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nVariables globally configured for the service manager, using\nthe <i>DefaultEnvironment=</i> setting in\n<b>systemd-system.conf</b>(5), the kernel command line\noption <i>systemd.setenv=</i> understood by\n<a href=\"https://man.page/1/systemd\">systemd(1)</a>, or via <a href=\"https://man.page/1/systemctl\">systemctl(1)</a>\n<b>set-environment</b> verb.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nVariables defined by the service manager itself (see the\nlist below).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nVariables set in the service manager's own environment\nvariable block (subject to <i>PassEnvironment=</i> for the\nsystem service manager).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nVariables set via <i>Environment=</i> in the unit\nfile.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nVariables read from files specified via\n<i>EnvironmentFile=</i> in the unit file.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nVariables set by any PAM modules in case <i>PAMName=</i> is\nin effect, cf.&nbsp;<b>pam_env</b>(8).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nthe same environment variable is set by multiple of these\nsources, the later source &mdash; according to the order of\nthe list above &mdash; wins. Note that as the final step all\nvariables listed in <i>UnsetEnvironment=</i> are removed\nfrom the compiled environment variable list, immediately\nbefore it is passed to the executed process.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ngeneral philosophy is to expose a small curated list of\nenvironment variables to processes. Services started by the\nsystem manager (PID 1) will be started, without additional\nservice-specific configuration, with just a few environment\nvariables. The user manager inherits environment variables\nas any other system service, but in addition may receive\nadditional environment variables from PAM, and, typically,\nadditional imported variables when the user starts a\ngraphical session. It is recommended to keep the environment\nblocks in both the system and user managers managers lean.\nImporting all variables inherited by the graphical session\nor by one of the user shells is strongly\ndiscouraged.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Hint:\n<b>systemd-run -P env</b> and <b>systemd-run --user -P\nenv</b> print the effective system and user service\nenvironment blocks.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Environment\nVariables Set or Propagated by the Service Manager</b> <br>\nThe following environment variables are propagated by the\nservice manager or generated internally for each invoked\nprocess:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$PATH</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Colon-separated\nlist of directories to use when launching executables.\n<b>systemd</b> uses a fixed value of\n&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin&quot;\nin the system manager. When compiled for systems with\n&quot;unmerged /usr/&quot; (/bin is not a symlink to\n/usr/bin), &quot;:/sbin:/bin&quot; is appended. In case of\nthe user manager, a different path may be configured by the\ndistribution. It is recommended to not rely on the order of\nentries, and have only one program with a given name in\n<i>$PATH</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$LANG</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Locale.\nCan be set in <b>locale.conf</b>(5) or on the kernel command\nline (see <a href=\"https://man.page/1/systemd\">systemd(1)</a> and\n<a href=\"https://man.page/7/kernel-command-line\">kernel-command-line(7)</a>).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$USER</i>,\n<i>$LOGNAME</i>, <i>$HOME</i>, <i>$SHELL</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">User name\n(twice), home directory, and the login shell. The variables\nare set for the units that have <i>User=</i> set, which\nincludes user <b>systemd</b> instances. See\n<a href=\"https://man.page/5/passwd\">passwd(5)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$INVOCATION_ID</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Contains\na randomized, unique 128bit ID identifying each runtime\ncycle of the unit, formatted as 32 character hexadecimal\nstring. A new ID is assigned each time the unit changes from\nan inactive state into an activating or active state, and\nmay be used to identify this specific runtime cycle, in\nparticular in data stored offline, such as the journal. The\nsame ID is passed to all processes run as part of the\nunit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$XDG_RUNTIME_DIR</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\ndirectory to use for runtime objects (such as IPC objects)\nand volatile state. Set for all services run by the user\n<b>systemd</b> instance, as well as any system services that\nuse <i>PAMName=</i> with a PAM stack that includes\n<b>pam_systemd</b>. See below and <b>pam_systemd</b>(8) for\nmore information.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$RUNTIME_DIRECTORY</i>,\n<i>$STATE_DIRECTORY</i>, <i>$CACHE_DIRECTORY</i>,\n<i>$LOGS_DIRECTORY</i>,\n<i>$CONFIGURATION_DIRECTORY</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Absolute\npaths to the directories defined with\n<i>RuntimeDirectory=</i>, <i>StateDirectory=</i>,\n<i>CacheDirectory=</i>, <i>LogsDirectory=</i>, and\n<i>ConfigurationDirectory=</i> when those settings are\nused.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$CREDENTIALS_DIRECTORY</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">An\nabsolute path to the per-unit directory with credentials\nconfigured via <i>LoadCredential=</i>/<i>SetCredential=</i>.\nThe directory is marked read-only and is placed in\nunswappable memory (if supported and permitted), and is only\naccessible to the UID associated with the unit via\n<i>User=</i> or <i>DynamicUser=</i> (and the\nsuperuser).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$MAINPID</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The PID\nof the unit's main process if it is known. This is only set\nfor control processes as invoked by <i>ExecReload=</i> and\nsimilar.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$MANAGERPID</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The PID\nof the user <b>systemd</b> instance, set for processes\nspawned by it.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$LISTEN_FDS</i>,\n<i>$LISTEN_PID</i>, <i>$LISTEN_FDNAMES</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Information\nabout file descriptors passed to a service for socket\nactivation. See <a href=\"https://man.page/3/sd_listen_fds\">sd_listen_fds(3)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$NOTIFY_SOCKET</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nsocket <b>sd_notify()</b> talks to. See\n<a href=\"https://man.page/3/sd_notify\">sd_notify(3)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$WATCHDOG_PID</i>,\n<i>$WATCHDOG_USEC</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Information\nabout watchdog keep-alive notifications. See\n<a href=\"https://man.page/3/sd_watchdog_enabled\">sd_watchdog_enabled(3)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$SYSTEMD_EXEC_PID</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The PID\nof the unit process (e.g. process invoked by\n<i>ExecStart=</i>). The child process can use this\ninformation to determine whether the process is directly\ninvoked by the service manager or indirectly as a child of\nanother process by comparing this value with the current PID\n(as similar to the scheme used in <a href=\"https://man.page/3/sd_listen_fds\">sd_listen_fds(3)</a>\nwith <i>$LISTEN_PID</i> and <i>$LISTEN_FDS</i>).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$TERM</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Terminal\ntype, set only for units connected to a terminal\n(<i>StandardInput=tty</i>, <i>StandardOutput=tty</i>, or\n<i>StandardError=tty</i>). See <a href=\"https://man.page/5/termcap\">termcap(5)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$LOG_NAMESPACE</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Contains\nthe name of the selected logging namespace when the\n<i>LogNamespace=</i> service setting is used.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$JOURNAL_STREAM</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">If the\nstandard output or standard error output of the executed\nprocesses are connected to the journal (for example, by\nsetting <i>StandardError=journal</i>) <i>$JOURNAL_STREAM</i>\ncontains the device and inode numbers of the connection file\ndescriptor, formatted in decimal, separated by a colon\n(&quot;:&quot;). This permits invoked processes to safely\ndetect whether their standard output or standard error\noutput are connected to the journal. The device and inode\nnumbers of the file descriptors should be compared with the\nvalues set in the environment variable to determine whether\nthe process output is still connected to the journal. Note\nthat it is generally not sufficient to only check whether\n<i>$JOURNAL_STREAM</i> is set at all as services might\ninvoke external processes replacing their standard output or\nstandard error output, without unsetting the environment\nvariable.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nboth standard output and standard error of the executed\nprocesses are connected to the journal via a stream socket,\nthis environment variable will contain information about the\nstandard error stream, as that's usually the preferred\ndestination for log data. (Note that typically the same\nstream is used for both standard output and standard error,\nhence very likely the environment variable contains device\nand inode information matching both stream file\ndescriptors.)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nenvironment variable is primarily useful to allow services\nto optionally upgrade their used log protocol to the native\njournal protocol (using <a href=\"https://man.page/3/sd_journal_print\">sd_journal_print(3)</a> and other\nfunctions) if their standard output or standard error output\nis connected to the journal anyway, thus enabling delivery\nof structured metadata along with logged\nmessages.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$SERVICE_RESULT</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Only\ndefined for the service unit type, this environment variable\nis passed to all <i>ExecStop=</i> and <i>ExecStopPost=</i>\nprocesses, and encodes the service &quot;result&quot;.\nCurrently, the following values are defined:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;4.&nbsp;Defined</b>\n<i>$SERVICE_RESULT</i> values</font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><img src=\"grohtml-3495764.png\" alt=\"Image grohtml-3495764.png\"></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nenvironment variable is useful to monitor failure or\nsuccessful termination of a service. Even though this\nvariable is available in both <i>ExecStop=</i> and\n<i>ExecStopPost=</i>, it is usually a better choice to place\nmonitoring tools in the latter, as the former is only\ninvoked for services that managed to start up correctly, and\nthe latter covers both services that failed during their\nstart-up and those which failed during their\nruntime.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$EXIT_CODE</i>,\n<i>$EXIT_STATUS</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Only\ndefined for the service unit type, these environment\nvariables are passed to all <i>ExecStop=</i>,\n<i>ExecStopPost=</i> processes and contain exit status/code\ninformation of the main process of the service. For the\nprecise definition of the exit code and status, see\n<a href=\"https://man.page/2/wait\">wait(2)</a>. <i>$EXIT_CODE</i> is one of\n&quot;exited&quot;, &quot;killed&quot;, &quot;dumped&quot;.\n<i>$EXIT_STATUS</i> contains the numeric exit code formatted\nas string if <i>$EXIT_CODE</i> is &quot;exited&quot;, and\nthe signal name in all other cases. Note that these\nenvironment variables are only set if the service manager\nsucceeded to start and identify the main process of the\nservice.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;5.&nbsp;Summary\nof possible service result variable values</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3495765.png\" alt=\"Image grohtml-3495765.png\"></b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>$PIDFILE</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The path\nto the configured PID file, in case the process is forked\noff on behalf of a service that uses the <i>PIDFile=</i>\nsetting, see <b>systemd.service</b>(5) for details. Service\ncode may use this environment variable to automatically\ngenerate a PID file at the location configured in the unit\nfile. This field is set to an absolute path in the file\nsystem.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\nsystem services, when <i>PAMName=</i> is enabled and\n<b>pam_systemd</b> is part of the selected PAM stack,\nadditional environment variables defined by systemd may be\nset for services. Specifically, these are <i>$XDG_SEAT</i>,\n<i>$XDG_VTNR</i>, see <b>pam_systemd</b>(8) for\ndetails.</font></p>\n\n<h2>PROCESS EXIT CODES\n<a name=\"PROCESS EXIT CODES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\ninvoking a unit process the service manager possibly fails\nto apply the execution parameters configured with the\nsettings above. In that case the already created service\nprocess will exit with a non-zero exit code before the\nconfigured command line is executed. (Or in other words, the\nchild process possibly exits with these error codes, after\nhaving been created by the <a href=\"https://man.page/2/fork\">fork(2)</a> system call, but\nbefore the matching <a href=\"https://man.page/2/execve\">execve(2)</a> system call is called.)\nSpecifically, exit codes defined by the C library, by the\nLSB specification and by the systemd service manager itself\nare used.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing basic service exit codes are defined by the C\nlibrary.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;6.&nbsp;Basic\nC library exit codes</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3495766.png\" alt=\"Image grohtml-3495766.png\"></b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing service exit codes are defined by the</font>\n<b><font color=\"#0000FF\">LSB specification</font></b>\n<small><font color=\"#000000\">[10]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;7.&nbsp;LSB\nservice exit codes</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3495767.png\" alt=\"Image grohtml-3495767.png\"></b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nLSB specification suggests that error codes 200 and above\nare reserved for implementations. Some of them are used by\nthe service manager to indicate problems during process\ninvocation:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;8.&nbsp;systemd-specific\nexit codes</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3495768.png\" alt=\"Image grohtml-3495768.png\"></b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Finally,\nthe BSD operating systems define a set of exit codes,\ntypically defined on Linux systems too:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;9.&nbsp;BSD\nexit codes</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3495769.png\" alt=\"Image grohtml-3495769.png\"></b></font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/1/systemd\">systemd(1)</a>,\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a>, <a href=\"https://man.page/1/systemd-analyze\">systemd-analyze(1)</a>,\n<a href=\"https://man.page/1/journalctl\">journalctl(1)</a>, <b>systemd-system.conf</b>(5),\n<b>systemd.unit</b>(5), <b>systemd.service</b>(5),\n<b>systemd.socket</b>(5), <b>systemd.swap</b>(5),\n<b>systemd.mount</b>(5), <b>systemd.kill</b>(5),\n<b>systemd.resource-control</b>(5), <b>systemd.time</b>(7),\n<b>systemd.directives</b>(7), <b>tmpfiles.d</b>(5),\n<a href=\"https://man.page/3/exec\">exec(3)</a>, <a href=\"https://man.page/2/fork\">fork(2)</a></font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"57%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Discoverable\nPartitions Specification</font></p></td>\n<td width=\"26%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://systemd.io/DISCOVERABLE_PARTITIONS</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">2.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">The /proc\nFilesystem</font></p> </td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.kernel.org/doc/html/latest/filesystems/proc.html#mount-options</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">3.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"34%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">User/Group\nName Syntax</font></p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://systemd.io/USER_NAMES</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">4.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">No New\nPrivileges Flag</font></p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">5.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">JSON User\nRecord</font></p> </td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://systemd.io/USER_RECORD</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">6.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"12%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">proc.txt</font></p> </td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.kernel.org/doc/Documentation/filesystems/proc.txt</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">7.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">C\nescapes</font></p> </td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://en.wikipedia.org/wiki/Escape_sequences_in_C#Table_of_escape_sequences</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">8.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">most\ncontrol characters</font></p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://en.wikipedia.org/wiki/Control_character#In_ASCII</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">9.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"9%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Base64</font></p> </td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://tools.ietf.org/html/rfc2045#section-6.8</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">10.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">LSB\nspecification</font></p> </td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://refspecs.linuxbase.org/LSB_5.0.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#IMPLICIT DEPENDENCIES\">IMPLICIT DEPENDENCIES</a>","<a href=\"#PATHS\">PATHS</a>","<a href=\"#USER/GROUP IDENTITY\">USER/GROUP IDENTITY</a>","<a href=\"#CAPABILITIES\">CAPABILITIES</a>","<a href=\"#SECURITY\">SECURITY</a>","<a href=\"#MANDATORY ACCESS CONTROL\">MANDATORY ACCESS CONTROL</a>","<a href=\"#PROCESS PROPERTIES\">PROCESS PROPERTIES</a>","<a href=\"#SCHEDULING\">SCHEDULING</a>","<a href=\"#SANDBOXING\">SANDBOXING</a>","<a href=\"#SYSTEM CALL FILTERING\">SYSTEM CALL FILTERING</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#LOGGING AND STANDARD INPUT/OUTPUT\">LOGGING AND STANDARD INPUT/OUTPUT</a>","<a href=\"#CREDENTIALS\">CREDENTIALS</a>","<a href=\"#SYSTEM V COMPATIBILITY\">SYSTEM V COMPATIBILITY</a>","<a href=\"#ENVIRONMENT VARIABLES IN SPAWNED PROCESSES\">ENVIRONMENT VARIABLES IN SPAWNED PROCESSES</a>","<a href=\"#PROCESS EXIT CODES\">PROCESS EXIT CODES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#NOTES\">NOTES</a>"],"level":5}