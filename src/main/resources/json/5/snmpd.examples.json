{"name":"snmpd.examples","description":"snmpd.examples\n- example configuration for the Net-SNMP agent\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nThe\n<i>snmpd.conf(5)</i> man page defines the syntax and\nbehaviour of the various configuration directives that can\nbe used to control the operation of the Net-SNMP agent, and\nthe management information it provides.\n\nThis companion\nman page illustrates these directives, showing some\npractical examples of how they might be used.\n\n<h2>AGENT BEHAVIOUR\n<a name=\"AGENT BEHAVIOUR\"></a>\n</h2>\n\n\n<b>Listening\naddresses</b> <br>\nThe default agent behaviour (listing on the standard SNMP\nUDP port on all interfaces) is equivalent to the\ndirective:\n\n<p style=\"margin-left:22%;\">agentaddress udp:161\n\n<p style=\"margin-left:11%;\">or simply\n\n<p style=\"margin-left:22%;\">agentaddress 161\n\n<p style=\"margin-left:11%;\">The agent can be configured to\n<i>only</i> accept requests sent to the local loopback\ninterface (again listening on the SNMP UDP port), using:\n\n<p style=\"margin-left:22%;\">agentaddress localhost:161 <i>#\n(udp implicit)</i>\n\n<p style=\"margin-left:11%;\">or\n\n<p style=\"margin-left:22%;\">agentaddress 127.0.0.1 <i>#\n(udp and standard port implicit)</i>\n\n<p style=\"margin-left:11%;\">It can be configured to accept\nboth UDP and TCP requests (over both IPv4 and IPv6),\nusing:\n\n<p style=\"margin-left:22%;\">agentaddress\nudp:161,tcp:161,udp6:161,tcp6:161\n\n<p style=\"margin-left:11%;\">Other combinations are also\nvalid.\n\n<b>Run-time\nprivileges</b> <br>\nThe agent can be configured to relinquish any privileged\naccess once it has opened the initial listening ports. Given\na suitable &quot;snmp&quot; group (defined in\n<i>/etc/group</i>), this could be done using the\ndirectives:\n\n<p style=\"margin-left:22%;\">agentuser nobody <br>\nagentgroup snmp\n\n<p style=\"margin-left:11%;\">A similar effect could be\nachieved using numeric UID and/or GID values:\n\n<p style=\"margin-left:22%;\">agentuser #10 <br>\nagentgroup #10\n\n<b>SNMPv3\nConfiguration</b> <br>\nRather than being generated pseudo-randomly, the engine ID\nfor the agent could be calculated based on the MAC address\nof the second network interface (<i>eth1</i>), using the\ndirectives:\n\n<p style=\"margin-left:22%;\">engineIDType 3 engineIDNic\neth1\n\n<p style=\"margin-left:11%;\">or it could be calculated from\nthe (first) IP address, using:\n\n<p style=\"margin-left:22%;\">engineIDType 1\n\n<p style=\"margin-left:11%;\">or it could be specified\nexplicitly, using:\n\n<p style=\"margin-left:22%;\">engineID &quot;XXX - WHAT\nFORMAT&quot;\n\n<h2>ACCESS CONTROL\n<a name=\"ACCESS CONTROL\"></a>\n</h2>\n\n\n<b>SNMPv3\nUsers</b> <br>\nThe following directives will create three users, all using\nexactly the same authentication and encryption settings:\n\n<p style=\"margin-left:22%;\">createUser me MD5 &quot;single\npass phrase&quot; <br>\ncreateUser myself MD5 &quot;single pass phrase&quot; DES\n<br>\ncreateUser andI MD5 &quot;single pass phrase&quot; DES\n&quot;single pass phrase&quot;\n\n<p style=\"margin-left:11%;\">Note that this defines three\n<i>distinct</i> users, who could be granted different levels\nof access. Changing the passphrase for any one of these\nwould not affect the other two.\n\nSeparate pass\nphrases can be specified for authentication and\nencryption:\n\n<p style=\"margin-left:22%;\">createUser onering SHA &quot;to\nrule them all&quot; AES &quot;to bind them&quot;\n\n<p style=\"margin-left:11%;\">Remember that these\n<i>createUser</i> directives should be defined in the\n/var/lib/snmp/snmpd.conf file, rather than the usual\nlocation.\n\n<b>Traditional\nAccess Control</b> <br>\nThe SNMPv3 users defined above can be granted access to the\nfull MIB tree using the directives:\n\n<p style=\"margin-left:22%;\">rouser me <br>\nrwuser onering\n\n<p style=\"margin-left:11%;\">Or selective access to\nindividual subtrees using:\n\n<p style=\"margin-left:22%;\">rouser myself .1.3.6.1.2 <br>\nrwuser andI system\n\nNote that a\ncombination repeating the same user, such as:\n\n<p style=\"margin-left:22%;\">rouser onering <br>\nrwuser onering\n\n<p style=\"margin-left:11%;\">should <b>not</b> be used. This\nwould configure the user <i>onering</i> with read-only\naccess (and ignore the <i>rwuser</i> entry altogether). The\nsame holds for the community-based directives.\n\nThe\ndirectives:\n\n<p style=\"margin-left:22%;\">rocommunity public <br>\nrwcommunity private\n\n<p style=\"margin-left:11%;\">would define the\ncommonly-expected read and write community strings for\nSNMPv1 and SNMPv2c requests. This behaviour is <b>not</b>\nconfigured by default, and would need to be set up\nexplicitly.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p>Note:</td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>It would also be a very good idea to change\n<i>private</i> to something a little less predictable!</td></tr>\n</table>\n\nA slightly less\nvulnerable configuration might restrict what information\ncould be retrieved:\n\n<p style=\"margin-left:22%;\">rocommunity public default\nsystem\n\n<p style=\"margin-left:11%;\">or the management systems that\nsettings could be manipulated from:\n\n<p style=\"margin-left:22%;\">rwcommunity private\n10.10.10.0/24\n\n<p style=\"margin-left:11%;\">or a combination of the\ntwo.\n\n<b>VACM\nConfiguration</b> <br>\nThis last pair of settings are equivalent to the full VACM\ndefinitions:\n\n<p style=\"margin-left:22%;\"><i># sec.name source\ncommunity</i> <br>\ncom2sec public default public <br>\ncom2sec mynet 10.10.10.0/24 private <br>\ncom2sec6 mynet fec0::/64 private\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># sec.model\nsec.name</i> <br>\ngroup worldGroup v1 public <br>\ngroup worldGroup v2c public <br>\ngroup myGroup v1 mynet <br>\ngroup myGroup v2c mynet\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># incl/excl\nsubtree [mask]</i> <br>\nview all included .1 <br>\nview sysView included system\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># context\nmodel level prefix read write notify (unused)</i> <br>\naccess worldGroup &quot;&quot; any noauth exact system none\nnone <br>\naccess myGroup &quot;&quot; any noauth exact all all\nnone\n\nThere are\nseveral points to note in this example:\n\nThe\n<i>group</i> directives must be repeated for both SNMPv1 and\nSNMPv2c requests.\n\nThe\n<i>com2sec</i> security name is distinct from the community\nstring that is mapped to it. They can be the same\n(&quot;public&quot;) or different\n(&quot;mynet&quot;/&quot;private&quot;) - but what appears\nin the <i>group</i> directive is the security name,\nregardless of the original community string.\n\nBoth of the\n<i>view</i> directives are defining simple OID subtrees, so\nneither of these require an explicit mask. The same holds\nfor the &quot;combined subtree2 view defined below. In fact,\na mask field is only needed when defining row slices across\na table (or similar views), and can almost always be\nomitted.\n\nIn general, it\nis advisible not to mix traditional and VACM-based access\nconfiguration settings, as these can sometimes interfere\nwith each other in unexpected ways. Choose a particular\nstyle of access configuration, and stick to it.\n\n<b>Typed-View\nConfiguration</b> <br>\nA similar configuration could also be configured as\nfollows:\n\n<p style=\"margin-left:22%;\">view sys2View included system\n<br>\nview sys2View included .1.3.6.1.2.1.25.1\n\n<p style=\"margin-left:22%; margin-top: 1em\">authcommunity\nread public default -v sys2View <br>\nauthcommunity read,write private 10.10.10.0/8\n\nThis mechanism\nallows multi-subtree (or other non-simple) views to be used\nwith the one-line <i>rocommunity</i> style of\nconfiguration.\n\nIt would also\nsupport configuring &quot;write-only&quot; access, should\nthis be required.\n\n<h2>SYSTEM INFORMATION\n<a name=\"SYSTEM INFORMATION\"></a>\n</h2>\n\n\n<b>System\nGroup</b> <br>\nThe full contents of the &rsquo;system&rsquo; group (with\nthe exception of <tt>sysUpTime</tt>) can be explicitly\nconfigured using:\n\n<p style=\"margin-left:22%;\"><i># Override &rsquo;uname\n-a&rsquo; and hardcoded system OID - inherently read-only\nvalues</i> <br>\nsysDescr Universal Turing Machine mk I <br>\nsysObjectID .1.3.6.1.4.1.8072.3.2.1066\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># Override\ndefault values from &rsquo;configure&rsquo; - makes these\nobjects read-only</i> <br>\nsysContact Alan.Turing@pre-cs.man.ac.uk <br>\nsysName tortoise.turing.com <br>\nsysLocation An idea in the mind of AT\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># Standard\nend-host behaviour</i> <br>\nsysServices 72\n\n<b>Host\nResources Group</b> <br>\nThe list of devices probed for potential inclusion in the\n<tt>hrDiskStorageTable</tt> (and <tt>hrDeviceTable</tt>) can\nbe amended using any of the following directives:\n\n<p style=\"margin-left:22%;\">ignoredisk /dev/rdsk/c0t2d0\n\n<p style=\"margin-left:11%;\">which prevents the device\n<i>/dev/rdsk/c0t2d0</i> from being scanned,\n\n<p style=\"margin-left:22%;\">ignoredisk /dev/rdsk/c0t[!6]d0\n<br>\nignoredisk /dev/rdsk/c0t[0-57-9a-f]d0\n\n<p style=\"margin-left:11%;\">either of which prevents all\ndevices <i>/dev/rdsk/c0t</i>X<i>d0</i> (except\n.../<i>c0t6d0</i>) from being scanned,\n\n<p style=\"margin-left:22%;\">ignoredisk /dev/rdsk/c1*\n\n<p style=\"margin-left:11%;\">which prevents all devices\nwhose device names start with <i>/dev/rdsk/c1</i> from being\nscanned, or\n\n<p style=\"margin-left:22%;\">ignoredisk /dev/rdsk/c?t0d0\n\n<p style=\"margin-left:11%;\">which prevents all devices\n<i>/dev/rdsk/c</i>X<i>t0d0</i> (where &rsquo;X&rsquo; is any\nsingle character) from being scanned.\n\n<b>Process\nMonitoring</b> <br>\nThe list of services running on a system can be monitored\n(and provision made for correcting any problems), using:\n\n<p style=\"margin-left:22%;\"><i># At least one web server\nprocess must be running at all times</i> <br>\nproc httpd <br>\nprocfix httpd /etc/rc.d/init.d/httpd restart\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># There\nshould never be more than 10 mail processes running <br>\n# (more implies a probable mail storm, so shut down the mail\nsystem)</i> <br>\nproc sendmail 10 <br>\nprocfix sendmail /etc/rc.d/init.d/sendmail stop\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># There\nshould be a single network management agent running <br>\n# (&quot;There can be only one&quot;)</i> <br>\nproc snmpd 1 1\n\n<p style=\"margin-left:11%;\">Also see the &quot;DisMan Event\nMIB&quot; section later on.\n\n<b>Disk Usage\nMonitoring</b> <br>\nThe state of disk storage can be monitored using:\n\n<p style=\"margin-left:22%;\">includeAllDisks 10% <br>\ndisk /var 20% <br>\ndisk /usr 3% <i><br>\n# Keep 100 MB free for crash dumps</i> <br>\ndisk /mnt/crash 100000\n\n<b>System Load\nMonitoring</b> <br>\nA simple check for an overloaded system might be:\n\n<p style=\"margin-left:22%;\">load 10\n\n<p style=\"margin-left:11%;\">A more refined check (to allow\nbrief periods of heavy use, but recognise sustained\nmedium-heavy load) might be:\n\n<p style=\"margin-left:22%;\">load 30 10 5\n\n<b>Log File\nMonitoring</b> <i><br>\nTODO</i>\n\n<p style=\"margin-left:22%;\">file FILE [MAXSIZE] <br>\nlogmatch NAME PATH CYCLETIME REGEX\n\n<h2>ACTIVE MONITORING\n<a name=\"ACTIVE MONITORING\"></a>\n</h2>\n\n\n\n<b>Notification\nHandling</b> <br>\nConfiguring the agent to report invalid access attempts\nmight be done by:\n\n<p style=\"margin-left:22%;\">authtrapenable 1 <br>\ntrapcommunity public <br>\ntrap2sink localhost\n\n<p style=\"margin-left:11%;\">Alternatively, the second and\nthird directives could be combined (and an acknowledgement\nrequested) using:\n\n<p style=\"margin-left:22%;\">informsink localhost public\n\n<p style=\"margin-left:11%;\">A configuration with repeated\nsink destinations, such as:\n\n<p style=\"margin-left:22%;\">trapsink localhost <br>\ntrap2sink localhost <br>\ninformsink localhost\n\n<p style=\"margin-left:11%;\">should <b>NOT</b> be used, as\nthis will cause multiple copies of each trap to be sent to\nthe same trap receiver.\n\n<i>TODO -\ndiscuss SNMPv3 traps</i>\n\n<p style=\"margin-left:22%;\">trapsess <i>snmpv3 options</i>\nlocalhost:162\n\n<i>TODO -\nmention trapd access configuration</i>\n\n<b>DisMan Event\nMIB</b> <br>\nThe simplest configuration for active self-monitoring of the\nagent, by the agent, for the agent, is probably:\n\n<p style=\"margin-left:22%;\"><i># Set up the credentials to\nretrieve monitored values</i> <br>\ncreateUser _internal MD5 &quot;the first sign of\nmadness&quot; <br>\niquerySecName _internal <br>\nrouser _internal\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># Active the\nstandard monitoring entries</i> <br>\ndefaultMonitors yes <br>\nlinkUpDownNotifications yes\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># If\nthere&rsquo;s a problem, then tell someone!</i> <br>\ntrap2sink localhost\n\nThe first block\nsets up a suitable user for retrieving the information to by\nmonitored, while the following pair of directives activates\nvarious built-in monitoring entries.\n\nNote that the\nDisMan directives are not themselves sufficient to actively\nreport problems - there also needs to be a suitable\ndestination configured to actually send the resulting\nnotifications to.\n\nA more detailed\nmonitor example is given by:\n\n<p style=\"margin-left:22%;\">monitor -u me -o hrSWRunName\n&quot;high process memory&quot; hrSWRunPerfMem &gt;\n10000\n\nThis defines an\nexplicit boolean monitor entry, looking for any process\nusing more than 10MB of active memory. Such processes will\nbe reported using the (standard) DisMan trap\n<tt>mteTriggerFired</tt>, but adding an extra (wildcarded)\nvarbind <tt>hrSWRunName</tt>.\n\nThis entry also\nspecifies an explicit user (<i>me</i>, as defined earlier)\nfor retrieving the monitored values, and building the\ntrap.\n\nObjects that\ncould potentially fluctuate around the specified level are\nbetter monitored using a threshold monitor entry:\n\n<p style=\"margin-left:22%;\">monitor -D -r 10 &quot;network\ntraffic&quot; ifInOctets 1000000 5000000\n\nThis will send\na <tt>mteTriggerRising</tt> trap whenever the incoming\ntraffic rises above (roughly) 500 kB/s on any network\ninterface, and a corresponding <tt>mteTriggerFalling</tt>\ntrap when it falls below 100 kB/s again.\n\nNote that this\nmonitors the deltas between successive samples (<i>-D</i>)\nrather than the actual sample values themselves. The same\neffect could be obtained using:\n\n<p style=\"margin-left:22%;\">monitor -r 10 &quot;network\ntraffic&quot; ifInOctets - - 1000000 5000000\n\nThe\n<i>linkUpDownNotifications</i> directive above is broadly\nequivalent to:\n\n<p style=\"margin-left:22%;\">notificationEvent linkUpTrap\nlinkUp ifIndex ifAdminStatus ifOperStatus <br>\nnotificationEvent linkDownTrap linkDown ifIndex\nifAdminStatus ifOperStatus\n\n<p style=\"margin-left:22%; margin-top: 1em\">monitor -r 60\n-e linkUpTrap &quot;Generate linkUp&quot; ifOperStatus != 2\n<br>\nmonitor -r 60 -e linkDownTrap &quot;Generate linkDown&quot;\nifOperStatus == 2\n\nThis defines\nthe traps to be sent (using <i>notificationEvent</i>), and\nexplicitly references the relevant notification in the\ncorresponding monitor entry (rather than using the default\nDisMan traps).\n\nThe\n<i>defaultMonitors</i> directive above is equivalent to a\nseries of (boolean) monitor entries:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</td>\n<td width=\"77%\">\n\n\n<p>-o prNames -o prErrMessage &quot;procTable&quot;\nprErrorFlag != 0</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</td>\n<td width=\"77%\">\n\n\n<p>-o memErrorName -o memSwapErrorMsg &quot;memory&quot;\nmemSwapError != 0</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</td>\n<td width=\"77%\">\n\n\n<p>-o extNames -o extOutput &quot;extTable&quot; extResult\n!= 0</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</td>\n<td width=\"77%\">\n\n\n<p>-o dskPath -o dskErrorMsg &quot;dskTable&quot;\ndskErrorFlag != 0</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</td>\n<td width=\"77%\">\n\n\n<p>-o laNames -o laErrMessage &quot;laTable&quot;\nlaErrorFlag != 0</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</td>\n<td width=\"77%\">\n\n\n<p>-o fileName -o fileErrorMsg &quot;fileTable&quot;\nfileErrorFlag != 0</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">and will send a trap whenever\nany of these entries indicate a problem.\n\nAn alternative\napproach would be to automatically invoke the corresponding\n&quot;fix&quot; action:\n\n<p style=\"margin-left:22%;\">setEvent prFixIt prErrFix = 1\n<br>\nmonitor -e prFixIt &quot;procTable&quot; prErrorFlag !=\n0\n\n<p style=\"margin-left:11%;\">(and similarly for any of the\nother <i>defaultMonitor</i> entries).\n\n<b>DisMan\nSchedule MIB</b> <br>\nThe agent could be configured to reload its configuration\nonce an hour, using:\n\n<p style=\"margin-left:22%;\">repeat 3600\nversionUpdateConfig.0 = 1\n\nAlternatively\nthis could be configured to be run at specific times of day\n(perhaps following rotation of the logs):\n\n<p style=\"margin-left:22%;\">cron 10 0 * * *\nversionUpdateConfig.0 = 1\n\nThe one-shot\nstyle of scheduling is rather less common, but the secret\nSNMP virus could be activated on the next occurance of\nFriday 13th using:\n\n<p style=\"margin-left:22%;\">at 13 13 13 * 5 snmpVirus.0 =\n1\n\n<h2>EXTENDING AGENT FUNCTIONALITY\n<a name=\"EXTENDING AGENT FUNCTIONALITY\"></a>\n</h2>\n\n\n<b>Arbitrary\nExtension Commands</b> <i><br>\nOld Style</i>\n\n<p style=\"margin-left:22%;\">exec [MIBOID] NAME PROG\nARGS&quot; <br>\nsh [MIBOID] NAME PROG ARGS&quot; <br>\nexecfix NAME PROG ARGS&quot;\n\n<p style=\"margin-left:11%;\"><i>New Style</i>\n\n<p style=\"margin-left:22%;\">extend [MIBOID] NAME PROG\nARGS&quot; <br>\nextendfix [MIBOID] NAME PROG ARGS&quot;\n\n\n<b>MIB-Specific\nExtension Commands</b> <i><br>\nOne-Shot</i>\n\n<p style=\"margin-left:22%;\">&quot;pass [-p priority] MIBOID\nPROG&quot;\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>Persistent</i>\n<br>\n&quot;pass_persist [-p priority] MIBOID PROG&quot;\n\n<b>Embedded\nPerl Support</b> <br>\nIf embedded perl support is enabled in the agent, the\ndefault initialisation is equivalent to the directives:\n\n<p style=\"margin-left:22%;\">disablePerl false <br>\nperlInitFile /usr/share/snmp/snmp_perl.pl\n\n<p style=\"margin-left:11%;\">The main mechanism for defining\nembedded perl scripts is the <i>perl</i> directive. A very\nsimple (if somewhat pointless) MIB handler could be\nregistered using:\n\n<p style=\"margin-left:22%;\">perl use Data::Dumper; <br>\nperl sub myroutine { print &quot;got called:\n&quot;,Dumper(@_),&quot;\\n&quot;; } <br>\nperl $agent-&gt;register(&rsquo;mylink&rsquo;,\n&rsquo;.1.3.6.1.8765&rsquo;, \\&amp;myroutine);\n\nThis relies on\nthe <i>$agent</i> object, defined in the example\n<tt>snmp_perl.pl</tt> file.\n\nA more\nrealistic MIB handler might be:\n\n<p style=\"margin-left:22%;\"><i>XXX - WHAT ???</i>\n\n<p style=\"margin-left:11%;\">Alternatively, this code could\nbe stored in an external file, and loaded using:\n\n<p style=\"margin-left:22%;\">perl &rsquo;do\n/usr/share/snmp/perl_example.pl&rsquo;;\n\n<b>Dynamically\nLoadable Modules</b> <i><br>\nTODO</i>\n\n<p style=\"margin-left:22%;\">dlmod NAME PATH&quot;\n\n<b>Proxy\nSupport</b> <br>\nA configuration for acting as a simple proxy for two other\nSNMP agents (running on remote systems) might be:\n\n<p style=\"margin-left:22%;\">com2sec -Cn rem1context\nrem1user default remotehost1 <br>\ncom2sec -Cn rem2context rem2user default remotehost2\n\n<p style=\"margin-left:22%; margin-top: 1em\">proxy -Cn\nrem1context -v 1 -c public remotehost1 .1.3 <br>\nproxy -Cn rem2context -v 1 -c public remotehost2 .1.3\n\n<p style=\"margin-left:11%;\">(plus suitable access control\nentries).\n\nThe same\n<i>proxy</i> directives would also work with (incoming)\nSNMPv3 requests, which can specify a context directly. It\nwould probably be more sensible to use contexts of\n<i>remotehost1</i> and <i>remotehost2</i> - the names above\nwere chosen to indicate how these directives work\ntogether.\n\nNote that the\nadministrative settings for the proxied request are\nspecified explicitly, and are independent of the settings\nfrom the incoming request.\n\nAn alternative\nuse for the <i>proxy</i> directive is to pass part of the\nOID tree to another agent (either on a remote host or\nlistening on a different port on the same system), while\nhandling the rest internally:\n\n<p style=\"margin-left:22%;\">proxy -v 1 -c public\nlocalhost:6161 .1.3.6.1.4.1.99\n\n<p style=\"margin-left:11%;\">This mechanism can be used to\nlink together two separate SNMP agents.\n\nA less usual\napproach is to map one subtree into a different area of the\noverall MIB tree (either locally or on a remote system):\n\n<p style=\"margin-left:22%;\"><i># uses SNMPv3 to access the\nMIB tree .1.3.6.1.2.1.1 on &rsquo;remotehost&rsquo; <br>\n# and maps this to the local tree .1.3.6.1.3.10</i> <br>\nproxy -v 3 -l noAuthNoPriv -u user remotehost .1.3.6.1.3.10\n.1.3.6.1.2.1.1\n\n<b>SMUX\nSub-Agents</b>\n\n<p style=\"margin-left:22%;\">smuxsocket 127.0.0.1 <br>\nsmuxpeer .1.3.6.1.2.1.14 ospf_pass\n\n<b>AgentX\nSub-Agents</b> <br>\nThe Net-SNMP agent could be configured to operate as an\nAgentX master agent (listening on a non-standard named\nsocket, and running using the access privileges defined\nearlier), using:\n\n<p style=\"margin-left:22%;\">master agentx <br>\nagentXSocket /tmp/agentx/master <br>\nagentXPerms 0660 0550 nobody snmp\n\n<p style=\"margin-left:11%;\">A sub-agent wishing to connect\nto this master agent would need the same <i>agentXSocket</i>\ndirective, or the equivalent code:\n\n\n<p style=\"margin-left:22%;\">netsnmp_ds_set_string(NETSNMP_DS_APPLICATION_ID,\nNETSNMP_DS_AGENT_X_SOCKET, <br>\n&quot;/tmp/agentx/master&quot;);\n\nA loopback\nnetworked AgentX configuration could be set up using:\n\n<p style=\"margin-left:22%;\">agentXSocket tcp:localhost:705\n<br>\nagentXTimeout 5 <br>\nagentXRetries 2\n\n<p style=\"margin-left:11%;\">on the master side, and:\n\n<p style=\"margin-left:22%;\">agentXSocket tcp:localhost:705\n<br>\nagentXTimeout 10 <br>\nagentXRetries 1 <br>\nagentXPingInterval 600\n\n<p style=\"margin-left:11%;\">on the client.\n\nNote that the\ntimeout and retry settings can be asymmetric for the two\ndirections, and the sub-agent can poll the master agent at\nregular intervals (600s = every 10 minutes), to ensure the\nconnection is still working.\n\n<h2>OTHER CONFIGURATION\n<a name=\"OTHER CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">override\nsysDescr.0 octet_str &quot;my own sysDescr&quot; <br>\ninjectHandler stash_cache NAME table_iterator\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n/etc/snmp/snmpd.conf\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\nsnmpconf(1),\nsnmpd.conf(5), snmp.conf(5), snmp_config(5), snmpd(8),\nEXAMPLE.conf, netsnmp_config_api(3).","body":"\n\n<h1 align=\"center\">SNMPD.EXAMPLES</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">snmpd.examples\n- example configuration for the Net-SNMP agent</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>snmpd.conf(5)</i> man page defines the syntax and\nbehaviour of the various configuration directives that can\nbe used to control the operation of the Net-SNMP agent, and\nthe management information it provides.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This companion\nman page illustrates these directives, showing some\npractical examples of how they might be used.</p>\n\n<h2>AGENT BEHAVIOUR\n<a name=\"AGENT BEHAVIOUR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Listening\naddresses</b> <br>\nThe default agent behaviour (listing on the standard SNMP\nUDP port on all interfaces) is equivalent to the\ndirective:</p>\n\n<p style=\"margin-left:22%;\">agentaddress udp:161</p>\n\n<p style=\"margin-left:11%;\">or simply</p>\n\n<p style=\"margin-left:22%;\">agentaddress 161</p>\n\n<p style=\"margin-left:11%;\">The agent can be configured to\n<i>only</i> accept requests sent to the local loopback\ninterface (again listening on the SNMP UDP port), using:</p>\n\n<p style=\"margin-left:22%;\">agentaddress localhost:161 <i>#\n(udp implicit)</i></p>\n\n<p style=\"margin-left:11%;\">or</p>\n\n<p style=\"margin-left:22%;\">agentaddress 127.0.0.1 <i>#\n(udp and standard port implicit)</i></p>\n\n<p style=\"margin-left:11%;\">It can be configured to accept\nboth UDP and TCP requests (over both IPv4 and IPv6),\nusing:</p>\n\n<p style=\"margin-left:22%;\">agentaddress\nudp:161,tcp:161,udp6:161,tcp6:161</p>\n\n<p style=\"margin-left:11%;\">Other combinations are also\nvalid.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Run-time\nprivileges</b> <br>\nThe agent can be configured to relinquish any privileged\naccess once it has opened the initial listening ports. Given\na suitable &quot;snmp&quot; group (defined in\n<i>/etc/group</i>), this could be done using the\ndirectives:</p>\n\n<p style=\"margin-left:22%;\">agentuser nobody <br>\nagentgroup snmp</p>\n\n<p style=\"margin-left:11%;\">A similar effect could be\nachieved using numeric UID and/or GID values:</p>\n\n<p style=\"margin-left:22%;\">agentuser #10 <br>\nagentgroup #10</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SNMPv3\nConfiguration</b> <br>\nRather than being generated pseudo-randomly, the engine ID\nfor the agent could be calculated based on the MAC address\nof the second network interface (<i>eth1</i>), using the\ndirectives:</p>\n\n<p style=\"margin-left:22%;\">engineIDType 3 engineIDNic\neth1</p>\n\n<p style=\"margin-left:11%;\">or it could be calculated from\nthe (first) IP address, using:</p>\n\n<p style=\"margin-left:22%;\">engineIDType 1</p>\n\n<p style=\"margin-left:11%;\">or it could be specified\nexplicitly, using:</p>\n\n<p style=\"margin-left:22%;\">engineID &quot;XXX - WHAT\nFORMAT&quot;</p>\n\n<h2>ACCESS CONTROL\n<a name=\"ACCESS CONTROL\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SNMPv3\nUsers</b> <br>\nThe following directives will create three users, all using\nexactly the same authentication and encryption settings:</p>\n\n<p style=\"margin-left:22%;\">createUser me MD5 &quot;single\npass phrase&quot; <br>\ncreateUser myself MD5 &quot;single pass phrase&quot; DES\n<br>\ncreateUser andI MD5 &quot;single pass phrase&quot; DES\n&quot;single pass phrase&quot;</p>\n\n<p style=\"margin-left:11%;\">Note that this defines three\n<i>distinct</i> users, who could be granted different levels\nof access. Changing the passphrase for any one of these\nwould not affect the other two.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Separate pass\nphrases can be specified for authentication and\nencryption:</p>\n\n<p style=\"margin-left:22%;\">createUser onering SHA &quot;to\nrule them all&quot; AES &quot;to bind them&quot;</p>\n\n<p style=\"margin-left:11%;\">Remember that these\n<i>createUser</i> directives should be defined in the\n/var/lib/snmp/snmpd.conf file, rather than the usual\nlocation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Traditional\nAccess Control</b> <br>\nThe SNMPv3 users defined above can be granted access to the\nfull MIB tree using the directives:</p>\n\n<p style=\"margin-left:22%;\">rouser me <br>\nrwuser onering</p>\n\n<p style=\"margin-left:11%;\">Or selective access to\nindividual subtrees using:</p>\n\n<p style=\"margin-left:22%;\">rouser myself .1.3.6.1.2 <br>\nrwuser andI system</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that a\ncombination repeating the same user, such as:</p>\n\n<p style=\"margin-left:22%;\">rouser onering <br>\nrwuser onering</p>\n\n<p style=\"margin-left:11%;\">should <b>not</b> be used. This\nwould configure the user <i>onering</i> with read-only\naccess (and ignore the <i>rwuser</i> entry altogether). The\nsame holds for the community-based directives.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ndirectives:</p>\n\n<p style=\"margin-left:22%;\">rocommunity public <br>\nrwcommunity private</p>\n\n<p style=\"margin-left:11%;\">would define the\ncommonly-expected read and write community strings for\nSNMPv1 and SNMPv2c requests. This behaviour is <b>not</b>\nconfigured by default, and would need to be set up\nexplicitly.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p>Note:</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>It would also be a very good idea to change\n<i>private</i> to something a little less predictable!</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A slightly less\nvulnerable configuration might restrict what information\ncould be retrieved:</p>\n\n<p style=\"margin-left:22%;\">rocommunity public default\nsystem</p>\n\n<p style=\"margin-left:11%;\">or the management systems that\nsettings could be manipulated from:</p>\n\n<p style=\"margin-left:22%;\">rwcommunity private\n10.10.10.0/24</p>\n\n<p style=\"margin-left:11%;\">or a combination of the\ntwo.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>VACM\nConfiguration</b> <br>\nThis last pair of settings are equivalent to the full VACM\ndefinitions:</p>\n\n<p style=\"margin-left:22%;\"><i># sec.name source\ncommunity</i> <br>\ncom2sec public default public <br>\ncom2sec mynet 10.10.10.0/24 private <br>\ncom2sec6 mynet fec0::/64 private</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># sec.model\nsec.name</i> <br>\ngroup worldGroup v1 public <br>\ngroup worldGroup v2c public <br>\ngroup myGroup v1 mynet <br>\ngroup myGroup v2c mynet</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># incl/excl\nsubtree [mask]</i> <br>\nview all included .1 <br>\nview sysView included system</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># context\nmodel level prefix read write notify (unused)</i> <br>\naccess worldGroup &quot;&quot; any noauth exact system none\nnone <br>\naccess myGroup &quot;&quot; any noauth exact all all\nnone</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are\nseveral points to note in this example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>group</i> directives must be repeated for both SNMPv1 and\nSNMPv2c requests.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>com2sec</i> security name is distinct from the community\nstring that is mapped to it. They can be the same\n(&quot;public&quot;) or different\n(&quot;mynet&quot;/&quot;private&quot;) - but what appears\nin the <i>group</i> directive is the security name,\nregardless of the original community string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both of the\n<i>view</i> directives are defining simple OID subtrees, so\nneither of these require an explicit mask. The same holds\nfor the &quot;combined subtree2 view defined below. In fact,\na mask field is only needed when defining row slices across\na table (or similar views), and can almost always be\nomitted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general, it\nis advisible not to mix traditional and VACM-based access\nconfiguration settings, as these can sometimes interfere\nwith each other in unexpected ways. Choose a particular\nstyle of access configuration, and stick to it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Typed-View\nConfiguration</b> <br>\nA similar configuration could also be configured as\nfollows:</p>\n\n<p style=\"margin-left:22%;\">view sys2View included system\n<br>\nview sys2View included .1.3.6.1.2.1.25.1</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">authcommunity\nread public default -v sys2View <br>\nauthcommunity read,write private 10.10.10.0/8</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This mechanism\nallows multi-subtree (or other non-simple) views to be used\nwith the one-line <i>rocommunity</i> style of\nconfiguration.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It would also\nsupport configuring &quot;write-only&quot; access, should\nthis be required.</p>\n\n<h2>SYSTEM INFORMATION\n<a name=\"SYSTEM INFORMATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>System\nGroup</b> <br>\nThe full contents of the &rsquo;system&rsquo; group (with\nthe exception of <tt>sysUpTime</tt>) can be explicitly\nconfigured using:</p>\n\n<p style=\"margin-left:22%;\"><i># Override &rsquo;uname\n-a&rsquo; and hardcoded system OID - inherently read-only\nvalues</i> <br>\nsysDescr Universal Turing Machine mk I <br>\nsysObjectID .1.3.6.1.4.1.8072.3.2.1066</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># Override\ndefault values from &rsquo;configure&rsquo; - makes these\nobjects read-only</i> <br>\nsysContact Alan.Turing@pre-cs.man.ac.uk <br>\nsysName tortoise.turing.com <br>\nsysLocation An idea in the mind of AT</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># Standard\nend-host behaviour</i> <br>\nsysServices 72</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Host\nResources Group</b> <br>\nThe list of devices probed for potential inclusion in the\n<tt>hrDiskStorageTable</tt> (and <tt>hrDeviceTable</tt>) can\nbe amended using any of the following directives:</p>\n\n<p style=\"margin-left:22%;\">ignoredisk /dev/rdsk/c0t2d0</p>\n\n<p style=\"margin-left:11%;\">which prevents the device\n<i>/dev/rdsk/c0t2d0</i> from being scanned,</p>\n\n<p style=\"margin-left:22%;\">ignoredisk /dev/rdsk/c0t[!6]d0\n<br>\nignoredisk /dev/rdsk/c0t[0-57-9a-f]d0</p>\n\n<p style=\"margin-left:11%;\">either of which prevents all\ndevices <i>/dev/rdsk/c0t</i>X<i>d0</i> (except\n.../<i>c0t6d0</i>) from being scanned,</p>\n\n<p style=\"margin-left:22%;\">ignoredisk /dev/rdsk/c1*</p>\n\n<p style=\"margin-left:11%;\">which prevents all devices\nwhose device names start with <i>/dev/rdsk/c1</i> from being\nscanned, or</p>\n\n<p style=\"margin-left:22%;\">ignoredisk /dev/rdsk/c?t0d0</p>\n\n<p style=\"margin-left:11%;\">which prevents all devices\n<i>/dev/rdsk/c</i>X<i>t0d0</i> (where &rsquo;X&rsquo; is any\nsingle character) from being scanned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Process\nMonitoring</b> <br>\nThe list of services running on a system can be monitored\n(and provision made for correcting any problems), using:</p>\n\n<p style=\"margin-left:22%;\"><i># At least one web server\nprocess must be running at all times</i> <br>\nproc httpd <br>\nprocfix httpd /etc/rc.d/init.d/httpd restart</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># There\nshould never be more than 10 mail processes running <br>\n# (more implies a probable mail storm, so shut down the mail\nsystem)</i> <br>\nproc sendmail 10 <br>\nprocfix sendmail /etc/rc.d/init.d/sendmail stop</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># There\nshould be a single network management agent running <br>\n# (&quot;There can be only one&quot;)</i> <br>\nproc snmpd 1 1</p>\n\n<p style=\"margin-left:11%;\">Also see the &quot;DisMan Event\nMIB&quot; section later on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Disk Usage\nMonitoring</b> <br>\nThe state of disk storage can be monitored using:</p>\n\n<p style=\"margin-left:22%;\">includeAllDisks 10% <br>\ndisk /var 20% <br>\ndisk /usr 3% <i><br>\n# Keep 100 MB free for crash dumps</i> <br>\ndisk /mnt/crash 100000</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>System Load\nMonitoring</b> <br>\nA simple check for an overloaded system might be:</p>\n\n<p style=\"margin-left:22%;\">load 10</p>\n\n<p style=\"margin-left:11%;\">A more refined check (to allow\nbrief periods of heavy use, but recognise sustained\nmedium-heavy load) might be:</p>\n\n<p style=\"margin-left:22%;\">load 30 10 5</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Log File\nMonitoring</b> <i><br>\nTODO</i></p>\n\n<p style=\"margin-left:22%;\">file FILE [MAXSIZE] <br>\nlogmatch NAME PATH CYCLETIME REGEX</p>\n\n<h2>ACTIVE MONITORING\n<a name=\"ACTIVE MONITORING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Notification\nHandling</b> <br>\nConfiguring the agent to report invalid access attempts\nmight be done by:</p>\n\n<p style=\"margin-left:22%;\">authtrapenable 1 <br>\ntrapcommunity public <br>\ntrap2sink localhost</p>\n\n<p style=\"margin-left:11%;\">Alternatively, the second and\nthird directives could be combined (and an acknowledgement\nrequested) using:</p>\n\n<p style=\"margin-left:22%;\">informsink localhost public</p>\n\n<p style=\"margin-left:11%;\">A configuration with repeated\nsink destinations, such as:</p>\n\n<p style=\"margin-left:22%;\">trapsink localhost <br>\ntrap2sink localhost <br>\ninformsink localhost</p>\n\n<p style=\"margin-left:11%;\">should <b>NOT</b> be used, as\nthis will cause multiple copies of each trap to be sent to\nthe same trap receiver.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>TODO -\ndiscuss SNMPv3 traps</i></p>\n\n<p style=\"margin-left:22%;\">trapsess <i>snmpv3 options</i>\nlocalhost:162</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>TODO -\nmention trapd access configuration</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>DisMan Event\nMIB</b> <br>\nThe simplest configuration for active self-monitoring of the\nagent, by the agent, for the agent, is probably:</p>\n\n<p style=\"margin-left:22%;\"><i># Set up the credentials to\nretrieve monitored values</i> <br>\ncreateUser _internal MD5 &quot;the first sign of\nmadness&quot; <br>\niquerySecName _internal <br>\nrouser _internal</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># Active the\nstandard monitoring entries</i> <br>\ndefaultMonitors yes <br>\nlinkUpDownNotifications yes</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i># If\nthere&rsquo;s a problem, then tell someone!</i> <br>\ntrap2sink localhost</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first block\nsets up a suitable user for retrieving the information to by\nmonitored, while the following pair of directives activates\nvarious built-in monitoring entries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nDisMan directives are not themselves sufficient to actively\nreport problems - there also needs to be a suitable\ndestination configured to actually send the resulting\nnotifications to.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A more detailed\nmonitor example is given by:</p>\n\n<p style=\"margin-left:22%;\">monitor -u me -o hrSWRunName\n&quot;high process memory&quot; hrSWRunPerfMem &gt;\n10000</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This defines an\nexplicit boolean monitor entry, looking for any process\nusing more than 10MB of active memory. Such processes will\nbe reported using the (standard) DisMan trap\n<tt>mteTriggerFired</tt>, but adding an extra (wildcarded)\nvarbind <tt>hrSWRunName</tt>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This entry also\nspecifies an explicit user (<i>me</i>, as defined earlier)\nfor retrieving the monitored values, and building the\ntrap.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Objects that\ncould potentially fluctuate around the specified level are\nbetter monitored using a threshold monitor entry:</p>\n\n<p style=\"margin-left:22%;\">monitor -D -r 10 &quot;network\ntraffic&quot; ifInOctets 1000000 5000000</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This will send\na <tt>mteTriggerRising</tt> trap whenever the incoming\ntraffic rises above (roughly) 500 kB/s on any network\ninterface, and a corresponding <tt>mteTriggerFalling</tt>\ntrap when it falls below 100 kB/s again.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that this\nmonitors the deltas between successive samples (<i>-D</i>)\nrather than the actual sample values themselves. The same\neffect could be obtained using:</p>\n\n<p style=\"margin-left:22%;\">monitor -r 10 &quot;network\ntraffic&quot; ifInOctets - - 1000000 5000000</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>linkUpDownNotifications</i> directive above is broadly\nequivalent to:</p>\n\n<p style=\"margin-left:22%;\">notificationEvent linkUpTrap\nlinkUp ifIndex ifAdminStatus ifOperStatus <br>\nnotificationEvent linkDownTrap linkDown ifIndex\nifAdminStatus ifOperStatus</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">monitor -r 60\n-e linkUpTrap &quot;Generate linkUp&quot; ifOperStatus != 2\n<br>\nmonitor -r 60 -e linkDownTrap &quot;Generate linkDown&quot;\nifOperStatus == 2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This defines\nthe traps to be sent (using <i>notificationEvent</i>), and\nexplicitly references the relevant notification in the\ncorresponding monitor entry (rather than using the default\nDisMan traps).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>defaultMonitors</i> directive above is equivalent to a\nseries of (boolean) monitor entries:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</p></td>\n<td width=\"77%\">\n\n\n<p>-o prNames -o prErrMessage &quot;procTable&quot;\nprErrorFlag != 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</p></td>\n<td width=\"77%\">\n\n\n<p>-o memErrorName -o memSwapErrorMsg &quot;memory&quot;\nmemSwapError != 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</p></td>\n<td width=\"77%\">\n\n\n<p>-o extNames -o extOutput &quot;extTable&quot; extResult\n!= 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</p></td>\n<td width=\"77%\">\n\n\n<p>-o dskPath -o dskErrorMsg &quot;dskTable&quot;\ndskErrorFlag != 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</p></td>\n<td width=\"77%\">\n\n\n<p>-o laNames -o laErrMessage &quot;laTable&quot;\nlaErrorFlag != 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"-14%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>monitor</p></td>\n<td width=\"77%\">\n\n\n<p>-o fileName -o fileErrorMsg &quot;fileTable&quot;\nfileErrorFlag != 0</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">and will send a trap whenever\nany of these entries indicate a problem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An alternative\napproach would be to automatically invoke the corresponding\n&quot;fix&quot; action:</p>\n\n<p style=\"margin-left:22%;\">setEvent prFixIt prErrFix = 1\n<br>\nmonitor -e prFixIt &quot;procTable&quot; prErrorFlag !=\n0</p>\n\n<p style=\"margin-left:11%;\">(and similarly for any of the\nother <i>defaultMonitor</i> entries).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>DisMan\nSchedule MIB</b> <br>\nThe agent could be configured to reload its configuration\nonce an hour, using:</p>\n\n<p style=\"margin-left:22%;\">repeat 3600\nversionUpdateConfig.0 = 1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alternatively\nthis could be configured to be run at specific times of day\n(perhaps following rotation of the logs):</p>\n\n<p style=\"margin-left:22%;\">cron 10 0 * * *\nversionUpdateConfig.0 = 1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The one-shot\nstyle of scheduling is rather less common, but the secret\nSNMP virus could be activated on the next occurance of\nFriday 13th using:</p>\n\n<p style=\"margin-left:22%;\">at 13 13 13 * 5 snmpVirus.0 =\n1</p>\n\n<h2>EXTENDING AGENT FUNCTIONALITY\n<a name=\"EXTENDING AGENT FUNCTIONALITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Arbitrary\nExtension Commands</b> <i><br>\nOld Style</i></p>\n\n<p style=\"margin-left:22%;\">exec [MIBOID] NAME PROG\nARGS&quot; <br>\nsh [MIBOID] NAME PROG ARGS&quot; <br>\nexecfix NAME PROG ARGS&quot;</p>\n\n<p style=\"margin-left:11%;\"><i>New Style</i></p>\n\n<p style=\"margin-left:22%;\">extend [MIBOID] NAME PROG\nARGS&quot; <br>\nextendfix [MIBOID] NAME PROG ARGS&quot;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MIB-Specific\nExtension Commands</b> <i><br>\nOne-Shot</i></p>\n\n<p style=\"margin-left:22%;\">&quot;pass [-p priority] MIBOID\nPROG&quot;</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>Persistent</i>\n<br>\n&quot;pass_persist [-p priority] MIBOID PROG&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Embedded\nPerl Support</b> <br>\nIf embedded perl support is enabled in the agent, the\ndefault initialisation is equivalent to the directives:</p>\n\n<p style=\"margin-left:22%;\">disablePerl false <br>\nperlInitFile /usr/share/snmp/snmp_perl.pl</p>\n\n<p style=\"margin-left:11%;\">The main mechanism for defining\nembedded perl scripts is the <i>perl</i> directive. A very\nsimple (if somewhat pointless) MIB handler could be\nregistered using:</p>\n\n<p style=\"margin-left:22%;\">perl use Data::Dumper; <br>\nperl sub myroutine { print &quot;got called:\n&quot;,Dumper(@_),&quot;\\n&quot;; } <br>\nperl $agent-&gt;register(&rsquo;mylink&rsquo;,\n&rsquo;.1.3.6.1.8765&rsquo;, \\&amp;myroutine);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This relies on\nthe <i>$agent</i> object, defined in the example\n<tt>snmp_perl.pl</tt> file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A more\nrealistic MIB handler might be:</p>\n\n<p style=\"margin-left:22%;\"><i>XXX - WHAT ???</i></p>\n\n<p style=\"margin-left:11%;\">Alternatively, this code could\nbe stored in an external file, and loaded using:</p>\n\n<p style=\"margin-left:22%;\">perl &rsquo;do\n/usr/share/snmp/perl_example.pl&rsquo;;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Dynamically\nLoadable Modules</b> <i><br>\nTODO</i></p>\n\n<p style=\"margin-left:22%;\">dlmod NAME PATH&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Proxy\nSupport</b> <br>\nA configuration for acting as a simple proxy for two other\nSNMP agents (running on remote systems) might be:</p>\n\n<p style=\"margin-left:22%;\">com2sec -Cn rem1context\nrem1user default remotehost1 <br>\ncom2sec -Cn rem2context rem2user default remotehost2</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">proxy -Cn\nrem1context -v 1 -c public remotehost1 .1.3 <br>\nproxy -Cn rem2context -v 1 -c public remotehost2 .1.3</p>\n\n<p style=\"margin-left:11%;\">(plus suitable access control\nentries).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The same\n<i>proxy</i> directives would also work with (incoming)\nSNMPv3 requests, which can specify a context directly. It\nwould probably be more sensible to use contexts of\n<i>remotehost1</i> and <i>remotehost2</i> - the names above\nwere chosen to indicate how these directives work\ntogether.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nadministrative settings for the proxied request are\nspecified explicitly, and are independent of the settings\nfrom the incoming request.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An alternative\nuse for the <i>proxy</i> directive is to pass part of the\nOID tree to another agent (either on a remote host or\nlistening on a different port on the same system), while\nhandling the rest internally:</p>\n\n<p style=\"margin-left:22%;\">proxy -v 1 -c public\nlocalhost:6161 .1.3.6.1.4.1.99</p>\n\n<p style=\"margin-left:11%;\">This mechanism can be used to\nlink together two separate SNMP agents.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A less usual\napproach is to map one subtree into a different area of the\noverall MIB tree (either locally or on a remote system):</p>\n\n<p style=\"margin-left:22%;\"><i># uses SNMPv3 to access the\nMIB tree .1.3.6.1.2.1.1 on &rsquo;remotehost&rsquo; <br>\n# and maps this to the local tree .1.3.6.1.3.10</i> <br>\nproxy -v 3 -l noAuthNoPriv -u user remotehost .1.3.6.1.3.10\n.1.3.6.1.2.1.1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SMUX\nSub-Agents</b></p>\n\n<p style=\"margin-left:22%;\">smuxsocket 127.0.0.1 <br>\nsmuxpeer .1.3.6.1.2.1.14 ospf_pass</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>AgentX\nSub-Agents</b> <br>\nThe Net-SNMP agent could be configured to operate as an\nAgentX master agent (listening on a non-standard named\nsocket, and running using the access privileges defined\nearlier), using:</p>\n\n<p style=\"margin-left:22%;\">master agentx <br>\nagentXSocket /tmp/agentx/master <br>\nagentXPerms 0660 0550 nobody snmp</p>\n\n<p style=\"margin-left:11%;\">A sub-agent wishing to connect\nto this master agent would need the same <i>agentXSocket</i>\ndirective, or the equivalent code:</p>\n\n\n<p style=\"margin-left:22%;\">netsnmp_ds_set_string(NETSNMP_DS_APPLICATION_ID,\nNETSNMP_DS_AGENT_X_SOCKET, <br>\n&quot;/tmp/agentx/master&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A loopback\nnetworked AgentX configuration could be set up using:</p>\n\n<p style=\"margin-left:22%;\">agentXSocket tcp:localhost:705\n<br>\nagentXTimeout 5 <br>\nagentXRetries 2</p>\n\n<p style=\"margin-left:11%;\">on the master side, and:</p>\n\n<p style=\"margin-left:22%;\">agentXSocket tcp:localhost:705\n<br>\nagentXTimeout 10 <br>\nagentXRetries 1 <br>\nagentXPingInterval 600</p>\n\n<p style=\"margin-left:11%;\">on the client.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\ntimeout and retry settings can be asymmetric for the two\ndirections, and the sub-agent can poll the master agent at\nregular intervals (600s = every 10 minutes), to ensure the\nconnection is still working.</p>\n\n<h2>OTHER CONFIGURATION\n<a name=\"OTHER CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">override\nsysDescr.0 octet_str &quot;my own sysDescr&quot; <br>\ninjectHandler stash_cache NAME table_iterator</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/snmp/snmpd.conf</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">snmpconf(1),\nsnmpd.conf(5), snmp.conf(5), snmp_config(5), snmpd(8),\nEXAMPLE.conf, netsnmp_config_api(3).</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#AGENT BEHAVIOUR\">AGENT BEHAVIOUR</a>","<a href=\"#ACCESS CONTROL\">ACCESS CONTROL</a>","<a href=\"#SYSTEM INFORMATION\">SYSTEM INFORMATION</a>","<a href=\"#ACTIVE MONITORING\">ACTIVE MONITORING</a>","<a href=\"#EXTENDING AGENT FUNCTIONALITY\">EXTENDING AGENT FUNCTIONALITY</a>","<a href=\"#OTHER CONFIGURATION\">OTHER CONFIGURATION</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":5}