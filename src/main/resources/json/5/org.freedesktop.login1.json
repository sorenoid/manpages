{"name":"org.freedesktop.login1","body":"\n\n<h1 align=\"center\">ORG.FREEDESKTOP.LOGIN1</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">org.freedesktop.login1\n- The D-Bus interface of systemd-logind</p>\n\n<h2>INTRODUCTION\n<a name=\"INTRODUCTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>systemd-logind.service</b>(8)\nis a system service that keeps track of user logins and\nseats.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The daemon\nprovides both a C library interface as well as a D-Bus\ninterface. The library interface may be used to introspect\nand watch the state of user logins and seats. The bus\ninterface provides the same functionality but in addition\nmay also be used to make changes to the system state. For\nmore information please consult <a href=\"https://man.page/3/sd-login\">sd-login(3)</a>.</p>\n\n<h2>THE MANAGER OBJECT\n<a name=\"THE MANAGER OBJECT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The service\nexposes the following interfaces on the Manager object on\nthe bus:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">node\n/org/freedesktop/login1 { <br>\ninterface org.freedesktop.login1.Manager { <br>\nmethods: <br>\nGetSession(in s session_id, <br>\nout o object_path); <br>\nGetSessionByPID(in u pid, <br>\nout o object_path); <br>\nGetUser(in u uid, <br>\nout o object_path); <br>\nGetUserByPID(in u pid, <br>\nout o object_path); <br>\nGetSeat(in s seat_id, <br>\nout o object_path); <br>\nListSessions(out a(susso) sessions); <br>\nListUsers(out a(uso) users); <br>\nListSeats(out a(so) seats); <br>\nListInhibitors(out a(ssssuu) inhibitors); <br>\nCreateSession(in u uid, <br>\nin u pid, <br>\nin s service, <br>\nin s type, <br>\nin s class, <br>\nin s desktop, <br>\nin s seat_id, <br>\nin u vtnr, <br>\nin s tty, <br>\nin s display, <br>\nin b remote, <br>\nin s remote_user, <br>\nin s remote_host, <br>\nin a(sv) properties, <br>\nout s session_id, <br>\nout o object_path, <br>\nout s runtime_path, <br>\nout h fifo_fd, <br>\nout u uid, <br>\nout s seat_id, <br>\nout u vtnr, <br>\nout b existing); <br>\nReleaseSession(in s session_id); <br>\nActivateSession(in s session_id); <br>\nActivateSessionOnSeat(in s session_id, <br>\nin s seat_id); <br>\nLockSession(in s session_id); <br>\nUnlockSession(in s session_id); <br>\nLockSessions(); <br>\nUnlockSessions(); <br>\nKillSession(in s session_id, <br>\nin s who, <br>\nin i signal_number); <br>\nKillUser(in u uid, <br>\nin i signal_number); <br>\nTerminateSession(in s session_id); <br>\nTerminateUser(in u uid); <br>\nTerminateSeat(in s seat_id); <br>\nSetUserLinger(in u uid, <br>\nin b enable, <br>\nin b interactive); <br>\nAttachDevice(in s seat_id, <br>\nin s sysfs_path, <br>\nin b interactive); <br>\nFlushDevices(in b interactive); <br>\nPowerOff(in b interactive); <br>\nPowerOffWithFlags(in t flags); <br>\nReboot(in b interactive); <br>\nRebootWithFlags(in t flags); <br>\nHalt(in b interactive); <br>\nHaltWithFlags(in t flags); <br>\nSuspend(in b interactive); <br>\nSuspendWithFlags(in t flags); <br>\nHibernate(in b interactive); <br>\nHibernateWithFlags(in t flags); <br>\nHybridSleep(in b interactive); <br>\nHybridSleepWithFlags(in t flags); <br>\nSuspendThenHibernate(in b interactive); <br>\nSuspendThenHibernateWithFlags(in t flags); <br>\nCanPowerOff(out s result); <br>\nCanReboot(out s result); <br>\nCanHalt(out s result); <br>\nCanSuspend(out s result); <br>\nCanHibernate(out s result); <br>\nCanHybridSleep(out s result); <br>\nCanSuspendThenHibernate(out s result); <br>\nScheduleShutdown(in s type, <br>\nin t usec); <br>\nCancelScheduledShutdown(out b cancelled); <br>\nInhibit(in s what, <br>\nin s who, <br>\nin s why, <br>\nin s mode, <br>\nout h pipe_fd); <br>\nCanRebootParameter(out s result); <br>\nSetRebootParameter(in s parameter); <br>\nCanRebootToFirmwareSetup(out s result); <br>\nSetRebootToFirmwareSetup(in b enable); <br>\nCanRebootToBootLoaderMenu(out s result); <br>\nSetRebootToBootLoaderMenu(in t timeout); <br>\nCanRebootToBootLoaderEntry(out s result); <br>\nSetRebootToBootLoaderEntry(in s boot_loader_entry); <br>\nSetWallMessage(in s wall_message, <br>\nin b enable); <br>\nsignals: <br>\nSessionNew(s session_id, <br>\no object_path); <br>\nSessionRemoved(s session_id, <br>\no object_path); <br>\nUserNew(u uid, <br>\no object_path); <br>\nUserRemoved(u uid, <br>\no object_path); <br>\nSeatNew(s seat_id, <br>\no object_path); <br>\nSeatRemoved(s seat_id, <br>\no object_path); <br>\nPrepareForShutdown(b start); <br>\nPrepareForSleep(b start); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite b EnableWallMessages = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite s WallMessage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u NAutoVTs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as KillOnlyUsers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as KillExcludeUsers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b KillUserProcesses = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s RebootParameter = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b RebootToFirmwareSetup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t RebootToBootLoaderMenu = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s RebootToBootLoaderEntry = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as BootLoaderEntries = ['...', ...]; <br>\nreadonly b IdleHint = ...; <br>\nreadonly t IdleSinceHint = ...; <br>\nreadonly t IdleSinceHintMonotonic = ...; <br>\nreadonly s BlockInhibited = '...'; <br>\nreadonly s DelayInhibited = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InhibitDelayMaxUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UserStopDelayUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s HandlePowerKey = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s HandleSuspendKey = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s HandleHibernateKey = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s HandleLidSwitch = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s HandleLidSwitchExternalPower = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s HandleLidSwitchDocked = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t HoldoffTimeoutUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IdleAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t IdleActionUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b PreparingForShutdown = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b PreparingForSleep = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly (st) ScheduledShutdown = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Docked = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b LidClosed = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b OnExternalPower = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RuntimeDirectorySize = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RuntimeDirectoryInodesMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InhibitorsMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t NCurrentInhibitors = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SessionsMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t NCurrentSessions = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Methods <br>\nGetSession()</b> may be used to get the session object path\nfor the session with the specified ID. Similarly,\n<b>GetUser()</b> and <b>GetSeat()</b> get the user and seat\nobjects, respectively. <b>GetSessionByPID()</b> and\n<b>GetUserByPID()</b> get the session/user object the\nspecified PID belongs to if there is any.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ListSessions()</b>\nreturns an array of all current sessions. The structures in\nthe array consist of the following fields: session id, user\nid, user name, seat id, session object path. If a session\ndoes not have a seat attached, the seat id field will be an\nempty string.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ListUsers()</b>\nreturns an array of all currently logged in users. The\nstructures in the array consist of the following fields:\nuser id, user name, user object path.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ListSeats()</b>\nreturns an array of all currently available seats. The\nstructure in the array consists of the following fields:\nseat id, seat object path.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ListInhibitors()</b>\nlists all currently active inhibitors. It returns an array\nof structures consisting of <i>what</i>, <i>who</i>,\n<i>why</i>, <i>mode</i>, <i>uid</i> (user ID), and\n<i>pid</i> (process ID).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CreateSession()</b>\nand <b>ReleaseSession()</b> may be used to open or close\nlogin sessions. These calls should <i>never</i> be invoked\ndirectly by clients. Creating/closing sessions is\nexclusively the job of PAM and its <b>pam_systemd</b>(8)\nmodule.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ActivateSession()</b>\nbrings the session with the specified ID into the\nforeground. <b>ActivateSessionOnSeat()</b> does the same,\nbut only if the seat id matches.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>LockSession()</b>\nasks the session with the specified ID to activate the\nscreen lock. <b>UnlockSession()</b> asks the session with\nthe specified ID to remove an active screen lock, if there\nis any. This is implemented by sending out the Lock() and\nUnlock() signals from the respective session object which\nsession managers are supposed to listen on.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>LockSessions()</b>\nasks all sessions to activate their screen locks. This may\nbe used to lock access to the entire machine in one action.\nSimilarly, <b>UnlockSessions()</b> asks all sessions to\ndeactivate their screen locks.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>KillSession()</b>\nmay be used to send a Unix signal to one or all processes of\na session. As arguments it takes the session id, either the\nstring &quot;leader&quot; or &quot;all&quot; and a signal\nnumber. If &quot;leader&quot; is passed only the session\n&quot;leader&quot; is killed. If &quot;all&quot; is passed\nall processes of the session are killed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>KillUser()</b>\nmay be used to send a Unix signal to all processes of a\nuser. As arguments it takes the user id and a signal\nnumber.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TerminateSession()</b>,\n<b>TerminateUser()</b>, <b>TerminateSeat()</b> may be used\nto forcibly terminate one specific session, all processes of\na user, and all sessions attached to a specific seat,\nrespectively. The session, user, and seat are identified by\ntheir respective IDs.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SetUserLinger()</b>\nenables or disables user lingering. If enabled, the runtime\ndirectory of a user is kept around and they may continue to\nrun processes while logged out. If disabled, the runtime\ndirectory goes away as soon as they log out.\n<b>SetUserLinger()</b> expects three arguments: the UID, a\nboolean whether to enable/disable and a boolean controlling\nthe <b><font color=\"#0000FF\">polkit</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">authorization interactivity (see\nbelow). Note that the user linger state is persistently\nstored on disk.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>AttachDevice()</b>\nmay be used to assign a specific device to a specific seat.\nThe device is identified by its /sys/ path and must be\neligible for seat assignments. <b>AttachDevice()</b> takes\nthree arguments: the seat id, the sysfs path, and a boolean\nfor controlling polkit interactivity (see below). Device\nassignments are persistently stored on disk. To create a new\nseat, simply specify a previously unused seat id. For more\ninformation about the seat assignment logic see\n<a href=\"https://man.page/3/sd-login\">sd-login(3)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>FlushDevices()</b>\nremoves all explicit seat assignments for devices, resetting\nall assignments to the automatic defaults. The only argument\nit takes is the polkit interactivity boolean (see\nbelow).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>PowerOff()</b>,\n<b>Reboot()</b>, <b>Halt()</b>, <b>Suspend()</b>, and\n<b>Hibernate()</b> result in the system being powered off,\nrebooted, halted (shut down without turning off power),\nsuspended (the system state is saved to RAM and the CPU is\nturned off), or hibernated (the system state is saved to\ndisk and the machine is powered down). <b>HybridSleep()</b>\nresults in the system entering a hybrid-sleep mode, i.e. the\nsystem is both hibernated and suspended.\n<b>SuspendThenHibernate()</b> results in the system being\nsuspended, then later woken using an RTC timer and\nhibernated. The only argument is the polkit interactivity\nboolean <i>interactive</i> (see below). The main purpose of\nthese calls is that they enforce polkit policy and hence\nallow powering off/rebooting/suspending/hibernating even by\nunprivileged users. They also enforce inhibition locks for\nnon-privileged users. UIs should expose these calls as the\nprimary mechanism to poweroff/reboot/suspend/hibernate the\nmachine. Methods <b>PowerOffWithFlags()</b>,\n<b>RebootWithFlags()</b>, <b>HaltWithFlags()</b>,\n<b>SuspendWithFlags()</b>, <b>HibernateWithFlags()</b>,\n<b>HybridSleepWithFlags()</b> and\n<b>SuspendThenHibernateWithFlags()</b> add <i>flags</i> to\nallow for extendability, defined as follows:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#define\nSD_LOGIND_ROOT_CHECK_INHIBITORS (UINT64_C(1) &lt;&lt; 0)\n<br>\n#define SD_LOGIND_KEXEC_REBOOT (UINT64_C(1) &lt;&lt;\n1)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nthe <i>flags</i> is 0 then these methods behave just like\nthe versions without flags. When\n<b>SD_LOGIND_ROOT_CHECK_INHIBITORS</b> (0x01) is set, active\ninhibitors are honoured for privileged users too. When\n<b>SD_LOGIND_KEXEC_REBOOT</b> (0x02) is set, then\n<b>RebootWithFlags()</b> perform kexec reboot if kexec\nkernel is loaded.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetRebootParameter()</b>\nsets a parameter for a subsequent reboot operation. See the\ndescription of <b>reboot</b> in <a href=\"https://man.page/1/systemctl\">systemctl(1)</a> and\n<a href=\"https://man.page/2/reboot\">reboot(2)</a> for more information.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetRebootToFirmwareSetup()</b>,\n<b>SetRebootToBootLoaderMenu()</b>, and\n<b>SetRebootToBootLoaderEntry()</b> configure the action to\nbe taken from the boot loader after a reboot: respectively\nentering firmware setup mode, the boot loader menu, or a\nspecific boot loader entry. See <a href=\"https://man.page/1/systemctl\">systemctl(1)</a> for the\ncorresponding command line interface.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>CanPowerOff()</b>,\n<b>CanReboot()</b>, <b>CanHalt()</b>, <b>CanSuspend()</b>,\n<b>CanHibernate()</b>, <b>CanHybridSleep()</b>,\n<b>CanSuspendThenHibernate()</b>,\n<b>CanRebootParameter()</b>,\n<b>CanRebootToFirmwareSetup()</b>,\n<b>CanRebootToBootLoaderMenu()</b>, and\n<b>CanRebootToBootLoaderEntry()</b> test whether the system\nsupports the respective operation and whether the calling\nuser is allowed to execute it. Returns one of\n&quot;na&quot;, &quot;yes&quot;, &quot;no&quot;, and\n&quot;challenge&quot;. If &quot;na&quot; is returned, the\noperation is not available because hardware, kernel, or\ndrivers do not support it. If &quot;yes&quot; is returned,\nthe operation is supported and the user may execute the\noperation without further authentication. If &quot;no&quot;\nis returned, the operation is available but the user is not\nallowed to execute the operation. If &quot;challenge&quot;\nis returned, the operation is available but only after\nauthorization.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ScheduleShutdown()</b>\nschedules a shutdown operation <i>type</i> at time\n<i>usec</i> in microseconds since the UNIX epoch.\n<i>type</i> can be one of &quot;poweroff&quot;,\n&quot;dry-poweroff&quot;, &quot;reboot&quot;,\n&quot;dry-reboot&quot;, &quot;halt&quot;, and\n&quot;dry-halt&quot;. (The &quot;dry-&quot; variants do not\nactually execute the shutdown action.)\n<b>CancelScheduledShutdown()</b> cancels a scheduled\nshutdown. The output parameter <i>cancelled</i> is true if a\nshutdown operation was scheduled.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetWallMessage()</b>\nsets the wall message (the message that will be sent out to\nall terminals and stored in a <a href=\"https://man.page/5/utmp\">utmp(5)</a> record) for a\nsubsequent scheduled shutdown operation. The parameter\n<i>wall_message</i> specifies the shutdown reason (and may\nbe empty) which will be included in the shutdown message.\nThe parameter <i>enable</i> specifies whether to print a\nwall message on shutdown.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Inhibit()</b>\ncreates an inhibition lock. It takes four parameters:\n<i>what</i>, <i>who</i>, <i>why</i>, and <i>mode</i>.\n<i>what</i> is one or more of &quot;shutdown&quot;,\n&quot;sleep&quot;, &quot;idle&quot;,\n&quot;handle-power-key&quot;,\n&quot;handle-suspend-key&quot;,\n&quot;handle-hibernate-key&quot;,\n&quot;handle-lid-switch&quot;, separated by colons, for\ninhibiting poweroff/reboot, suspend/hibernate, the automatic\nidle logic, or hardware key handling. <i>who</i> should be a\nshort human readable string identifying the application\ntaking the lock. <i>why</i> should be a short human readable\nstring identifying the reason why the lock is taken.\nFinally, <i>mode</i> is either &quot;block&quot; or\n&quot;delay&quot; which encodes whether the inhibit shall be\nconsider mandatory or whether it should just delay the\noperation to a certain maximum time. The method returns a\nfile descriptor. The lock is released the moment this file\ndescriptor and all its duplicates are closed. For more\ninformation on the inhibition logic see</font>\n<b><font color=\"#0000FF\">Inhibitor Locks</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Signals</b>\n<br>\nWhenever the inhibition state or idle hint changes,\n<b>PropertyChanged</b> signals are sent out to which clients\ncan subscribe.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>SessionNew</b>, <b>SessionRemoved</b>, <b>UserNew</b>,\n<b>UserRemoved</b>, <b>SeatNew</b>, and <b>SeatRemoved</b>\nsignals are sent each time a session is created or removed,\na user logs in or out, or a seat is added or removed. They\neach contain the ID of the object plus the object\npath.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>PrepareForShutdown()</b> and <b>PrepareForSleep()</b>\nsignals are sent right before (with the argument\n&quot;true&quot;) or after (with the argument\n&quot;false&quot;) the system goes down for reboot/poweroff\nand suspend/hibernate, respectively. This may be used by\napplications to save data on disk, release memory, or do\nother jobs that should be done shortly before\nshutdown/sleep, in conjunction with delay inhibitor locks.\nAfter completion of this work they should release their\ninhibition locks in order to not delay the operation any\nfurther. For more information see</font>\n<b><font color=\"#0000FF\">Inhibitor Locks</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties simply reflect the configuration, see\n<b>logind.conf</b>(5). This includes: <i>NAutoVTs</i>,\n<i>KillOnlyUsers</i>, <i>KillExcludeUsers</i>,\n<i>KillUserProcesses</i>, <i>IdleAction</i>,\n<i>InhibitDelayMaxUSec</i>, <i>InhibitorsMax</i>,\n<i>UserStopDelayUSec</i>, <i>HandlePowerKey</i>,\n<i>HandleSuspendKey</i>, <i>HandleHibernateKey</i>,\n<i>HandleLidSwitch</i>, <i>HandleLidSwitchExternalPower</i>,\n<i>HandleLidSwitchDocked</i>, <i>IdleActionUSec</i>,\n<i>HoldoffTimeoutUSec</i>, <i>RemoveIPC</i>,\n<i>RuntimeDirectorySize</i>,\n<i>RuntimeDirectoryInodesMax</i>, <i>InhibitorsMax</i>, and\n<i>SessionsMax</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>IdleHint</i> property reflects the idle hint state of the\nsystem. If the system is idle it might get into automatic\nsuspend or shutdown depending on the\nconfiguration.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>IdleSinceHint</i>\nand <i>IdleSinceHintMonotonic</i> encode the timestamps of\nthe last change of the idle hint boolean, in\n<b>CLOCK_REALTIME</b> and <b>CLOCK_MONOTONIC</b> timestamps,\nrespectively, in microseconds since the epoch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>BlockInhibited</i> and <i>DelayInhibited</i> properties\nencode the currently active locks of the respective modes.\nThey are colon separated lists of &quot;shutdown&quot;,\n&quot;sleep&quot;, and &quot;idle&quot; (see\nabove).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NCurrentSessions</i>\nand <i>NCurrentInhibitors</i> contain the number of\ncurrently registered sessions and inhibitors.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>BootLoaderEntries</i> property contains a list of boot\nloader entries. This includes boot loader entries defined in\nconfiguration and any additional loader entries reported by\nthe boot loader. See <a href=\"https://man.page/7/systemd-boot\">systemd-boot(7)</a> for more\ninformation.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>PreparingForShutdown</i> and <i>PreparingForSleep</i>\nboolean properties are true during the interval between the\ntwo <b>PrepareForShutdown</b> and <b>PrepareForSleep</b>\nsignals respectively. Note that these properties do not send\nout <b>PropertyChanged</b> signals.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>RebootParameter</i> property shows the value set with the\n<b>SetRebootParameter()</b> method described\nabove.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ScheduledShutdown</i>\nshows the value pair set with the <b>ScheduleShutdown()</b>\nmethod described above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RebootToFirmwareSetup</i>,\n<i>RebootToBootLoaderMenu</i>, and\n<i>RebootToBootLoaderEntry</i> are true when the resprective\npost-reboot operation was selected with\n<b>SetRebootToFirmwareSetup</b>,\n<b>SetRebootToBootLoaderMenu</b>, or\n<b>SetRebootToBootLoaderEntry</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>WallMessage</i> and <i>EnableWallMessages</i> properties\nreflect the shutdown reason and wall message enablement\nswitch which can be set with the <b>SetWallMessage()</b>\nmethod described above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Docked</i>\nis true if the machine is connected to a dock.\n<i>LidClosed</i> is true when the lid (of a laptop) is\nclosed. <i>OnExternalPower</i> is true when the machine is\nconnected to an external power supply.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Security</b>\n<br>\nA number of operations are protected via the polkit\nprivilege system. <b>SetUserLinger()</b> requires the\norg.freedesktop.login1.set-user-linger privilege.\n<b>AttachDevice()</b> requires\norg.freedesktop.login1.attach-device and\n<b>FlushDevices()</b> requires\norg.freedesktop.login1.flush-devices. <b>PowerOff()</b>,\n<b>Reboot()</b>, <b>Halt()</b>, <b>Suspend()</b>,\n<b>Hibernate()</b> require org.freedesktop.login1.power-off,\norg.freedesktop.login1.power-off-multiple-sessions,\norg.freedesktop.login1.power-off-ignore-inhibit,\norg.freedesktop.login1.reboot,\norg.freedesktop.login1.reboot-multiple-sessions,\norg.freedesktop.login1.reboot-ignore-inhibit,\norg.freedesktop.login1.halt,\norg.freedesktop.login1.halt-multiple-sessions,\norg.freedesktop.login1.halt-ignore-inhibit,\norg.freedesktop.login1.suspend,\norg.freedesktop.login1.suspend-multiple-sessions,\norg.freedesktop.login1.suspend-ignore-inhibit,\norg.freedesktop.login1.hibernate,\norg.freedesktop.login1.hibernate-multiple-sessions,\norg.freedesktop.login1.hibernate-ignore-inhibit,\nrespectively depending on whether there are other sessions\naround or active inhibits are present. <b>HybridSleep()</b>\nand <b>SuspendThenHibernate()</b> use the same privileges as\n<b>Hibernate()</b>. <b>SetRebootParameter()</b> requires\norg.freedesktop.login1.set-reboot-parameter.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetRebootToFirmwareSetup</b>\nrequires\norg.freedesktop.login1.set-reboot-to-firmware-setup.\n<b>SetRebootToBootLoaderMenu</b> requires\norg.freedesktop.login1.set-reboot-to-boot-loader-menu.\n<b>SetRebootToBootLoaderEntry</b> requires\norg.freedesktop.login1.set-reboot-to-boot-loader-entry.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ScheduleShutdown</b>\nand <b>CancelScheduledShutdown</b> require the same\nprivileges (listed above) as the immediate\npoweroff/reboot/halt operations.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Inhibit()</b>\nis protected via one of\norg.freedesktop.login1.inhibit-block-shutdown,\norg.freedesktop.login1.inhibit-delay-shutdown,\norg.freedesktop.login1.inhibit-block-sleep,\norg.freedesktop.login1.inhibit-delay-sleep,\norg.freedesktop.login1.inhibit-block-idle,\norg.freedesktop.login1.inhibit-handle-power-key,\norg.freedesktop.login1.inhibit-handle-suspend-key,\norg.freedesktop.login1.inhibit-handle-hibernate-key,\norg.freedesktop.login1.inhibit-handle-lid-switch depending\non the lock type and mode taken.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>interactive</i> boolean parameters can be used to control\nwhether polkit should interactively ask the user for\nauthentication credentials if required.</font></p>\n\n<h2>SEAT OBJECTS\n<a name=\"SEAT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/login1/seat/seat0 { <br>\ninterface org.freedesktop.login1.Seat { <br>\nmethods: <br>\nTerminate(); <br>\nActivateSession(in s session_id); <br>\nSwitchTo(in u vtnr); <br>\nSwitchToNext(); <br>\nSwitchToPrevious(); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Id = '...'; <br>\nreadonly (so) ActiveSession = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanTTY = ...; <br>\nreadonly b CanGraphical = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(so) Sessions = [...]; <br>\nreadonly b IdleHint = ...; <br>\nreadonly t IdleSinceHint = ...; <br>\nreadonly t IdleSinceHintMonotonic = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods\n<br>\nTerminate()</b> and <b>ActivateSession()</b> work similar to\nTerminateSeat(), ActivationSessionOnSeat() on the Manager\nobject.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SwitchTo()</b>\nswitches to the session on the virtual terminal <i>vtnr</i>.\n<b>SwitchToNext()</b> and <b>SwitchToPrevious()</b> switch\nto, respectively, the next and previous sessions on the seat\nin the order of virtual terminals. If there is no active\nsession, they switch to, respectively, the first and last\nsession on the seat.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Signals</b>\n<br>\nWhenever <b>ActiveSession</b>, <b>Sessions</b>,\n<b>CanGraphical</b>, <b>CanTTY</b>, or the idle state\nchanges, <b>PropertyChanged</b> signals are sent out to\nwhich clients can subscribe.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nThe <i>Id</i> property encodes the ID of the\nseat.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ActiveSession</i>\nencodes the currently active session if there is one. It is\na structure consisting of the session id and the object\npath.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CanTTY</i>\nencodes whether the session is suitable for text logins, and\n<i>CanGraphical</i> whether it is suitable for graphical\nsessions.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>Sessions</i> property is an array of all current sessions\nof this seat, each encoded in a structure consisting of the\nID and the object path.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>IdleHint</i>, <i>IdleSinceHint</i>, and\n<i>IdleSinceHintMonotonic</i> properties encode the idle\nstate, similar to the ones exposed on the Manager object,\nbut specific for this seat.</font></p>\n\n<h2>USER OBJECTS\n<a name=\"USER OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/login1/user/_1000 { <br>\ninterface org.freedesktop.login1.User { <br>\nmethods: <br>\nTerminate(); <br>\nKill(in i signal_number); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u GID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Name = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t Timestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Service = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Slice = '...'; <br>\nreadonly (so) Display = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s State = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(so) Sessions = [...]; <br>\nreadonly b IdleHint = ...; <br>\nreadonly t IdleSinceHint = ...; <br>\nreadonly t IdleSinceHintMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Linger = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods\n<br>\nTerminate()</b> and <b>Kill()</b> work similar to the\n<b>TerminateUser()</b> and <b>KillUser()</b> methods on the\nmanager object.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Signals</b>\n<br>\nWhenever <i>Sessions</i> or the idle state changes,\n<b>PropertyChanged</b> signals are sent out to which clients\ncan subscribe.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nThe <i>UID</i> and <i>GID</i> properties encode the Unix UID\nand primary GID of the user.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>Name</i> property encodes the user name.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Timestamp</i>\nand <i>TimestampMonotonic</i> encode the login time of the\nuser in microseconds since the epoch, in the\n<b>CLOCK_REALTIME</b> and <b>CLOCK_MONOTONIC</b> clocks,\nrespectively.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RuntimePath</i>\nencodes the runtime path of the user, i.e.\n<i>$XDG_RUNTIME_DIR</i>. For details see the</font>\n<b><font color=\"#0000FF\">XDG Basedir\nSpecification</font></b>\n<small><font color=\"#000000\">[3]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Service</i>\ncontains the unit name of the user systemd service of this\nuser. Each logged in user is assigned a user service that\nruns a user systemd instance. This is usually an instance of\nuser@.service.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Slice</i>\ncontains the unit name of the user systemd slice of this\nuser. Each logged in user gets a private slice.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Display</i>\nencodes which graphical session should be used as the\nprimary UI display for the user. It is a structure encoding\nthe session ID and the object path of the session to\nuse.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>State</i>\nencodes the user state and is one of &quot;offline&quot;,\n&quot;lingering&quot;, &quot;online&quot;,\n&quot;active&quot;, or &quot;closing&quot;. See\n<a href=\"https://man.page/3/sd_uid_get_state\">sd_uid_get_state(3)</a> for more information about the\nstates.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Sessions</i>\nis an array of structures encoding all current sessions of\nthe user. Each structure consists of the ID and object\npath.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>IdleHint</i>, <i>IdleSinceHint</i>, and\n<i>IdleSinceHintMonotonic</i> properties encode the idle\nhint state of the user, similar to the Manager's properties,\nbut specific for this user.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>Linger</i> property shows whether lingering is enabled\nfor this user.</font></p>\n\n<h2>SESSION OBJECTS\n<a name=\"SESSION OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/login1/session/1 { <br>\ninterface org.freedesktop.login1.Session { <br>\nmethods: <br>\nTerminate(); <br>\nActivate(); <br>\nLock(); <br>\nUnlock(); <br>\nSetIdleHint(in b idle); <br>\nSetLockedHint(in b locked); <br>\nKill(in s who, <br>\nin i signal_number); <br>\nTakeControl(in b force); <br>\nReleaseControl(); <br>\nSetType(in s type); <br>\nTakeDevice(in u major, <br>\nin u minor, <br>\nout h fd, <br>\nout b inactive); <br>\nReleaseDevice(in u major, <br>\nin u minor); <br>\nPauseDeviceComplete(in u major, <br>\nin u minor); <br>\nSetBrightness(in s subsystem, <br>\nin s name, <br>\nin u brightness); <br>\nsignals: <br>\nPauseDevice(u major, <br>\nu minor, <br>\ns type); <br>\nResumeDevice(u major, <br>\nu minor, <br>\nh fd); <br>\nLock(); <br>\nUnlock(); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Id = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (uo) User = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Name = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t Timestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u VTNr = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (so) Seat = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTY = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Display = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Remote = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RemoteHost = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RemoteUser = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Service = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Desktop = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Scope = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u Leader = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u Audit = ...; <br>\nreadonly s Type = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Class = '...'; <br>\nreadonly b Active = ...; <br>\nreadonly s State = '...'; <br>\nreadonly b IdleHint = ...; <br>\nreadonly t IdleSinceHint = ...; <br>\nreadonly t IdleSinceHintMonotonic = ...; <br>\nreadonly b LockedHint = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods\n<br>\nTerminate()</b>, <b>Activate()</b>, <b>Lock()</b>,\n<b>Unlock()</b>, and <b>Kill()</b> work similarly to the\nrespective calls on the Manager object.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetIdleHint()</b>\nis called by the session object to update the idle state of\nthe session whenever it changes.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>TakeControl()</b>\nallows a process to take exclusive managed device\naccess-control for that session. Only one D-Bus connection\ncan be a controller for a given session at any time. If the\n<i>force</i> argument is set (root only), an existing\ncontroller is kicked out and replaced. Otherwise, this\nmethod fails if there is already a controller. Note that\nthis method is limited to D-Bus users with the effective UID\nset to the user of the session or root.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ReleaseControl()</b>\ndrops control of a given session. Closing the D-Bus\nconnection implicitly releases control as well. See\n<b>TakeControl()</b> for more information. This method also\nreleases all devices for which the controller requested\nownership via <b>TakeDevice()</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetType()</b>\nallows the type of the session to be changed dynamically. It\ncan only be called by session's current controller. If\n<b>TakeControl()</b> has not been called, this method will\nfail. In addition, the session type will be reset to its\noriginal value once control is released, either by calling\n<b>ReleaseControl()</b> or closing the D-Bus connection.\nThis should help prevent a session from entering an\ninconsistent state, for example if the controller crashes.\nThe only argument <i>type</i> is the new session\ntype.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>TakeDevice()</b>\nallows a session controller to get a file descriptor for a\nspecific device. Pass in the major and minor numbers of the\ncharacter device and systemd-logind will return a file\ndescriptor for the device. Only a limited set of\ndevice-types is currently supported (but may be extended).\nsystemd-logind automatically mutes the file descriptor if\nthe session is inactive and resumes it once the session is\nactivated again. This guarantees that a session can only\naccess session devices if the session is active. Note that\nthis revoke/resume mechanism is asynchronous and may happen\nat any given time. This only works on devices that are\nattached to the seat of the given session. A process is not\nrequired to have direct access to the device node.\nsystemd-logind only requires you to be the active session\ncontroller (see <b>TakeControl()</b>). Also note that any\ndevice can only be requested once. As long as you don't\nrelease it, further <b>TakeDevice()</b> calls will\nfail.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ReleaseDevice()</b>\nreleases a device again (see <b>TakeDevice()</b>). This is\nalso implicitly done by <b>ReleaseControl()</b> or when\nclosing the D-Bus connection.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>PauseDeviceComplete()</b>\nallows a session controller to synchronously pause a device\nafter receiving a <b>PauseDevice(&quot;pause&quot;)</b>\nsignal. Forced signals (or after an internal timeout) are\nautomatically completed by systemd-logind\nasynchronously.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetLockedHint()</b>\nmay be used to set the &quot;locked hint&quot; to\n<i>locked</i>, i.e. information whether the session is\nlocked. This is intended to be used by the desktop\nenvironment to tell <b>systemd-logind</b> when the session\nis locked and unlocked.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetBrightness()</b>\nmay be used to set the display brightness. This is intended\nto be used by the desktop environment and allows\nunprivileged programs to access hardware settings in a\ncontrolled way. The <i>subsystem</i> parameter specifies a\nkernel subsystem, either &quot;backlight&quot; or\n&quot;leds&quot;. The <i>name</i> parameter specifies a\ndevice name under the specified subsystem. The\n<i>brightness</i> parameter specifies the brightness. The\nrange is defined by individual drivers, see\n/sys/class/<i>subsystem</i>/<i>name</i>/max_brightness.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Signals</b>\n<br>\nThe active session controller exclusively gets\n<b>PauseDevice</b> and <b>ResumeDevice</b> events for any\ndevice it requested via <b>TakeDevice()</b>. They notify the\ncontroller whenever a device is paused or resumed. A device\nis never resumed if its session is inactive. Also note that\n<b>PauseDevice</b> signals are sent before the\n<b>PropertyChanged</b> signal for the <b>Active</b> state.\nThe inverse is true for <b>ResumeDevice</b>. A device may\nremain paused for unknown reasons even though the Session is\nactive.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\n<b>PauseDevice</b> signal carries the major and minor\nnumbers and a string describing the type as arguments.\n<b>force</b> means the device was already paused by\nsystemd-logind and the signal is only an asynchronous\nnotification. <b>pause</b> means systemd-logind grants you a\nlimited amount of time to pause the device. You must respond\nto this via <b>PauseDeviceComplete()</b>. This synchronous\npausing mechanism is used for backwards-compatibility to VTs\nand systemd-logind is free to not make use of it. It is also\nfree to send a forced <b>PauseDevice</b> if you don't\nrespond in a timely manner (or for any other reason).\n<b>gone</b> means the device was unplugged from the system\nand you will no longer get any notifications about it. There\nis no need to call <b>ReleaseDevice()</b>. You may call\n<b>TakeDevice()</b> again if a new device is assigned the\nmajor+minor combination.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ResumeDevice</b>\nis sent whenever a session is active and a device is\nresumed. It carries the major/minor numbers as arguments and\nprovides a new open file descriptor. You should switch to\nthe new descriptor and close the old one. They are not\nguaranteed to have the same underlying open file descriptor\nin the kernel (except for a limited set of device\ntypes).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Whenever\n<b>Active</b> or the idle state changes,\n<b>PropertyChanged</b> signals are sent out to which clients\ncan subscribe.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Lock</b>/<b>Unlock</b>\nis sent when the session is asked to be\nscreen-locked/unlocked. A session manager of the session\nshould listen to this signal and act accordingly. This\nsignal is sent out as a result of the <b>Lock()</b> and\n<b>Unlock()</b> methods, respectively.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<i><br>\nId</i> encodes the session ID.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>User</i>\nencodes the user ID of the user this session belongs to.\nThis is a structure consisting of the Unix UID and the\nobject path.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Name</i>\nencodes the user name.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Timestamp</i>\nand <i>TimestampMonotonic</i> encode the microseconds since\nthe epoch when the session was created, in\n<b>CLOCK_REALTIME</b> or <b>CLOCK_MONOTONIC</b>,\nrespectively.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>VTNr</i>\nencodes the virtual terminal number of the session if there\nis any, 0 otherwise.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Seat</i>\nencodes the seat this session belongs to if there is any.\nThis is a structure consisting of the ID and the seat object\npath.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TTY</i>\nencodes the kernel TTY path of the session if this is a text\nlogin. If not this is an empty string.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Display</i>\nencodes the X11 display name if this is a graphical login.\nIf not, this is an empty string.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Remote</i>\nencodes whether the session is local or remote.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RemoteHost</i>\nand <i>RemoteUser</i> encode the remote host and user if\nthis is a remote session, or an empty string\notherwise.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Service</i>\nencodes the PAM service name that registered the\nsession.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Desktop</i>\ndescribes the desktop environment running in the session (if\nknown).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Scope</i>\ncontains the systemd scope unit name of this\nsession.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Leader</i>\nencodes the PID of the process that registered the\nsession.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Audit</i>\nencodes the Kernel Audit session ID of the session if\nauditing is available.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Type</i>\nencodes the session type. It's one of\n&quot;unspecified&quot; (for cron PAM sessions and\nsuchlike), &quot;tty&quot; (for text logins) or\n&quot;x11&quot;/&quot;mir&quot;/&quot;wayland&quot; (for\ngraphical logins).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Class</i>\nencodes the session class. It's one of &quot;user&quot; (for\nnormal user sessions), &quot;greeter&quot; (for display\nmanager pseudo-sessions), or &quot;lock-screen&quot; (for\ndisplay lock screens).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Active</i>\nis a boolean that is true if the session is active, i.e.\ncurrently in the foreground. This field is semi-redundant\ndue to <i>State</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>State</i>\nencodes the session state and one of &quot;online&quot;,\n&quot;active&quot;, or &quot;closing&quot;. See\n<a href=\"https://man.page/3/sd_session_get_state\">sd_session_get_state(3)</a> for more information about\nthe states.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>IdleHint</i>,\n<i>IdleSinceHint</i>, and <i>IdleSinceHintMonotonic</i>\nencapsulate the idle hint state of this session, similarly\nto how the respective properties on the manager object do it\nfor the whole system.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LockedHint</i>\nshows the locked hint state of this session, as set by the\n<b>SetLockedHint()</b> method described above.</font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;1.&nbsp;Introspect\norg.freedesktop.login1.Manager on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system --dest org.freedesktop.login1 \\\n<br>\n--object-path /org/freedesktop/login1</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;2.&nbsp;Introspect\norg.freedesktop.login1.Seat on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system --dest org.freedesktop.login1 \\\n<br>\n--object-path /org/freedesktop/login1/seat/seat0</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;3.&nbsp;Introspect\norg.freedesktop.login1.User on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system --dest org.freedesktop.login1 \\\n<br>\n--object-path /org/freedesktop/login1/user/_1000</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;4.&nbsp;Introspect\norg.freedesktop.login1.Session on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system --dest org.freedesktop.login1 \\\n<br>\n--object-path /org/freedesktop/login1/session/45</font></p>\n\n<h2>VERSIONING\n<a name=\"VERSIONING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">These\nD-Bus interfaces follow</font> <b><font color=\"#0000FF\">the\nusual interface versioning guidelines</font></b>\n<small><font color=\"#000000\">[4]</font></small>\n<font color=\"#000000\">.</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"9%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">polkit</font></p> </td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.freedesktop.org/software/polkit/docs/latest/</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">2.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Inhibitor\nLocks</font></p> </td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.freedesktop.org/wiki/Software/systemd/inhibit</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">3.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">XDG\nBasedir Specification</font></p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">4.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">the usual\ninterface versioning guidelines</font></p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">http://0pointer.de/blog/projects/versioning-dbus.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#INTRODUCTION\">INTRODUCTION</a>","<a href=\"#THE MANAGER OBJECT\">THE MANAGER OBJECT</a>","<a href=\"#SEAT OBJECTS\">SEAT OBJECTS</a>","<a href=\"#USER OBJECTS\">USER OBJECTS</a>","<a href=\"#SESSION OBJECTS\">SESSION OBJECTS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#VERSIONING\">VERSIONING</a>","<a href=\"#NOTES\">NOTES</a>"],"level":5}