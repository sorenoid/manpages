{"name":"groff_out","description":"groff_out -\ngroff intermediate output format\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nThis manual\npage describes the <i>intermediate output</i> format of the\nGNU <a href=\"https://man.page/7/roff\">roff(7)</a> text processing system <a href=\"https://man.page/1/groff\">groff(1)</a>.\nThis output is produced by a run of the GNU <a href=\"https://man.page/1/troff\">troff(1)</a>\nprogram. It contains already all device-specific\ninformation, but it is not yet fed into a device\npostprocessor program.\n\nAs the GNU\n<i>roff</i> processor <a href=\"https://man.page/1/groff\">groff(1)</a> is a wrapper program\naround <b>troff</b> that automatically calls a\npostprocessor, this output does not show up normally. This\nis why it is called <i>intermediate</i> within the <i>groff\nsystem</i>. The <b>groff</b> program provides the option\n<b>-Z</b> to inhibit postprocessing, such that the produced\n<i>intermediate output</i> is sent to standard output just\nlike calling <b>troff</b> manually.\n\nIn this\ndocument, the term <i>troff output</i> describes what is\noutput by the GNU <b>troff</b> program, while\n<i>intermediate output</i> refers to the language that is\naccepted by the parser that prepares this output for the\npostprocessors. This parser is smarter on whitespace and\nimplements obsolete elements for compatibility, otherwise\nboth formats are the same. Both formats can be viewed\ndirectly with <a href=\"https://man.page/1/gxditview\">gxditview(1)</a>.\n\nThe main\npurpose of the <i>intermediate output</i> concept is to\nfacilitate the development of postprocessors by providing a\ncommon programming interface for all devices. It has a\nlanguage of its own that is completely different from the\n<a href=\"https://man.page/7/groff\">groff(7)</a> language. While the <i>groff</i> language is\na high-level programming language for text processing, the\n<i>intermediate output</i> language is a kind of low-level\nassembler language by specifying all positions on the page\nfor writing and drawing.\n\nThe\npre-<i>groff roff</i> versions are denoted as <i>classical\ntroff</i>. The <i>intermediate output</i> produced by\n<b>groff</b> is fairly readable, while <i>classical\ntroff</i> output was hard to understand because of strange\nhabits that are still supported, but not used any longer by\n<i>GNU troff</i>.\n\n<h2>LANGUAGE CONCEPTS\n<a name=\"LANGUAGE CONCEPTS\"></a>\n</h2>\n\n\nDuring the run\nof <b>troff</b>, the <i>roff</i> input is cracked down to\nthe information on what has to be printed at what position\non the intended device. So the language of the\n<i>intermediate output</i> format can be quite small. Its\nonly elements are commands with or without arguments. In\nthis document, the term &ldquo;command&rdquo; always refers\nto the <i>intermediate output</i> language, never to the\n<i>roff</i> language used for document formatting. There are\ncommands for positioning and text writing, for drawing, and\nfor device controlling.\n\n\n<b>Separation</b>\n<i><br>\nClassical troff output</i> had strange requirements on\nwhitespace. The <b>groff</b> output parser, however, is\nsmart about whitespace by making it maximally optional. The\nwhitespace characters, i.e., the <i>tab</i>, <i>space</i>,\nand <i>newline</i> characters, always have a syntactical\nmeaning. They are never printable because spacing within the\noutput is always done by positioning commands.\n\nAny sequence of\n<i>space</i> or <i>tab</i> characters is treated as a single\n<i>syntactical space</i>. It separates commands and\narguments, but is only required when there would occur a\nclashing between the command code and the arguments without\nthe space. Most often, this happens when variable length\ncommand names, arguments, argument lists, or command\nclusters meet. Commands and arguments with a known, fixed\nlength need not be separated by <i>syntactical\nspace</i>.\n\nA line break is\na syntactical element, too. Every command argument can be\nfollowed by whitespace, a comment, or a newline character.\nThus a <i>syntactical line break</i> is defined to consist\nof optional <i>syntactical space</i> that is optionally\nfollowed by a comment, and a newline character.\n\nThe normal\ncommands, those for positioning and text, consist of a\nsingle letter taking a fixed number of arguments. For\nhistorical reasons, the parser allows stacking of such\ncommands on the same line, but fortunately, in <i>groff\nintermediate output</i>, every command with at least one\nargument is followed by a line break, thus providing\nexcellent readability.\n\nThe other\ncommands &mdash; those for drawing and device controlling\n&mdash; have a more complicated structure; some recognize\nlong command names, and some take a variable number of\narguments. So all <b>D</b> and <b>x</b> commands were\ndesigned to request a <i>syntactical line break</i> after\ntheir last argument. Only one command,\n&rsquo;<b>x&nbsp;X</b>&rsquo; has an argument that can\nstretch over several lines, all other commands must have all\nof their arguments on the same line as the command, i.e.,\nthe arguments may not be split by a line break.\n\nEmpty lines,\ni.e., lines containing only space and/or a comment, can\noccur everywhere. They are just ignored.\n\n<b>Argument\nUnits</b> <br>\nSome commands take integer arguments that are assumed to\nrepresent values in a measurement unit, but the letter for\nthe corresponding <i>scale indicator</i> is not written with\nthe output command arguments; see <a href=\"https://man.page/7/groff\">groff(7)</a> and\n<i>Groff: The GNU Implementation of troff</i>, the\n<i>groff</i> Texinfo manual, for more on this topic. Most\ncommands assume the scale indicator&nbsp;<b>u</b>, the basic\nunit of the device, some use&nbsp;<b>z</b>, the <i>scaled\npoint unit</i> of the device, while others, such as the\ncolor commands expect plain integers. Note that these scale\nindicators are relative to the chosen device. They are\ndefined by the parameters specified in the device&rsquo;s\n<i>DESC</i> file; see <a href=\"https://man.page/5/groff_font\">groff_font(5)</a>.\n\nNote that\nsingle characters can have the eighth bit set, as can the\nnames of fonts and special characters (this is, glyphs). The\nnames of glyphs and fonts can be of arbitrary length. A\nglyph that is to be printed will always be in the current\nfont.\n\nA string\nargument is always terminated by the next whitespace\ncharacter (space, tab, or newline); an embedded <b>#</b>\ncharacter is regarded as part of the argument, not as the\nbeginning of a comment command. An integer argument is\nalready terminated by the next non-digit character, which\nthen is regarded as the first character of the next argument\nor command.\n\n<b>Document\nParts</b> <br>\nA correct <i>intermediate output</i> document consists of\ntwo parts, the <i>prologue</i> and the <i>body</i>.\n\nThe task of the\n<i>prologue</i> is to set the general device parameters\nusing three exactly specified commands. The <i>groff\nprologue</i> is guaranteed to consist of the following three\nlines (in that order):\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>x&nbsp;T</b>\n<i>device</i> <b><br>\nx&nbsp;res</b> <i>n&nbsp;h&nbsp;v</i> <b><br>\nx init</b>\n\nwith the\narguments set as outlined in subsection &ldquo;Device\nControl Commands&rdquo; below. However, the parser for the\n<i>intermediate output</i> format is able to swallow\nadditional whitespace and comments as well.\n\nThe <i>body</i>\nis the main section for processing the document data.\nSyntactically, it is a sequence of any commands different\nfrom the ones used in the <i>prologue</i>. Processing is\nterminated as soon as the first <b>x&nbsp;stop</b> command\nis encountered; the last line of any <i>groff intermediate\noutput</i> always contains such a command.\n\nSemantically,\nthe <i>body</i> is page oriented. A new page is started by a\n<b>p&nbsp;</b>command. Positioning, writing, and drawing\ncommands are always done within the current page, so they\ncannot occur before the first <b>p&nbsp;</b>command.\nAbsolute positioning (by the <b>H</b> and\n<b>V&nbsp;</b>commands) is done relative to the current\npage, all other positioning is done relative to the current\nlocation within this page.\n\n<h2>COMMAND REFERENCE\n<a name=\"COMMAND REFERENCE\"></a>\n</h2>\n\n\nThis section\ndescribes all <i>intermediate output</i> commands, the\nclassical commands as well as the <i>groff</i>\nextensions.\n\n<b>Comment\nCommand <br>\n#</b><i>anything</i><b>&lang; end-of-line&rang;</b>\n\n<p style=\"margin-left:22%;\">A comment. Ignore any\ncharacters from the <b>#&nbsp;</b>character up to the next\nnewline character.\n\nThis command is\nthe only possibility for commenting in the <i>intermediate\noutput</i>. Each comment can be preceded by arbitrary\n<i>syntactical space</i>; every command can be terminated by\na comment.\n\n<b>Simple\nCommands</b> <br>\nThe commands in this subsection have a command code\nconsisting of a single character, taking a fixed number of\narguments. Most of them are commands for positioning and\ntext writing. These commands are smart about whitespace.\nOptionally, <i>syntactical space</i> can be inserted before,\nafter, and between the command letter and its arguments. All\nof these commands are stackable, i.e., they can be preceded\nby other simple commands or followed by arbitrary other\ncommands on the same line. A separating <i>syntactical\nspace</i> is only necessary when two integer arguments would\nclash or if the preceding argument ends with a string\nargument. <b><br>\nC&nbsp;</b><i>xxx</i>&lang; white-space&rang;\n\n<p style=\"margin-left:22%;\">Print a glyph (special\ncharacter) named <i>xxx</i>. The trailing <i>syntactical\nspace</i> or <i>line break</i> is necessary to allow glyph\nnames of arbitrary length. The glyph is printed at the\ncurrent print position; the glyph&rsquo;s size is read from\nthe font file. The print position is not changed.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>c&nbsp;</b><i>c</i></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Print glyph with single-letter name&nbsp;<i>c</i> at the\ncurrent print position; the glyph&rsquo;s size is read from\nthe font file. The print position is not changed.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>f&nbsp;</b><i>n</i></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Set font to font number&nbsp;<i>n</i> (a non-negative\ninteger). </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>H&nbsp;</b><i>n</i></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move right to the absolute vertical\nposition&nbsp;<i>n</i> (a non-negative integer in basic\nunits&nbsp;<b>u</b>) relative to left edge of current\npage. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>h&nbsp;</b><i>n</i></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move <i>n</i> (a non-negative integer) basic\nunits&nbsp;<b>u</b> horizontally to the right.\n[CSTR&nbsp;#54] allows negative values for <i>n</i> also,\nbut <i>groff</i> doesn&rsquo;t use this.</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>m&nbsp;</b><i>color-scheme</i>\n[<i>component ...</i>]\n\n<p style=\"margin-left:22%;\">Set the color for text\n(glyphs), line drawing, and the outline of graphic objects\nusing different color schemes; the analogous command for the\nfilling color of graphic objects is <b>DF</b>. The color\ncomponents are specified as integer arguments between 0 and\n65536. The number of color components and their meaning vary\nfor the different color schemes. These commands are\ngenerated by the <i>groff</i> escape sequence <b>\\m</b>. No\nposition changing. These commands are a <i>groff</i>\nextension. <b><br>\nmc&nbsp;</b><i>cyan magenta yellow</i>\n\n<p style=\"margin-left:32%;\">Set color using the CMY color\nscheme, having the 3&nbsp;color components cyan, magenta,\nand yellow.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>md&nbsp;</b></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Set color to the default color value (black in most\ncases). No component arguments.</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>mg&nbsp;</b><i>gray</i>\n\n<p style=\"margin-left:32%;\">Set color to the shade of gray\ngiven by the argument, an integer between 0 (black) and\n65536 (white).\n\n<p style=\"margin-left:22%;\"><b>mk&nbsp;</b><i>cyan magenta\nyellow black</i>\n\n<p style=\"margin-left:32%;\">Set color using the CMYK color\nscheme, having the 4&nbsp;color components cyan, magenta,\nyellow, and black.\n\n<p style=\"margin-left:22%;\"><b>mr&nbsp;</b><i>red green\nblue</i>\n\n<p style=\"margin-left:32%;\">Set color using the RGB color\nscheme, having the 3&nbsp;color components red, green, and\nblue.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>N&nbsp;</b><i>n</i></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Print glyph with index&nbsp;<i>n</i> (an integer,\nnormally non-negative) of the current font. The print\nposition is not changed. If <b>-T&nbsp;html</b> or\n<b>-T&nbsp;xhtml</b> is used, negative values are emitted\nalso to indicate an unbreakable space with given width. For\nexample, <b>N&nbsp;-193</b> represents an unbreakable space\nwhich has a width of 193u. This command is a <i>groff</i>\nextension. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>n&nbsp;</b><i>b&nbsp;a</i></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Inform the device about a line break, but no positioning\nis done by this command. In <i>classical troff</i>, the\ninteger arguments <i>b</i> and&nbsp;<i>a</i> informed about\nthe space before and after the current line to make the\n<i>intermediate output</i> more human readable without\nperforming any action. In <i>groff</i>, they are just\nignored, but they must be provided for compatibility\nreasons. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>p&nbsp;</b><i>n</i></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Begin a new page in the outprint. The page number is set\nto&nbsp;<i>n</i>. This page is completely independent of\npages formerly processed even if those have the same page\nnumber. The vertical position on the outprint is\nautomatically set to&nbsp;0. All positioning, writing, and\ndrawing is always done relative to a page, so a\n<b>p&nbsp;</b>command must be issued before any of these\ncommands. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>s&nbsp;</b><i>n</i></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Set point size to <i>n</i> scaled points (this is\nunit&nbsp;<b>z</b> in GNU <b>troff</b>). <i>Classical\ntroff</i> used the unit <i>points</i> (<b>p</b>) instead;\nsee section &ldquo;Compatibility&rdquo; below.</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>t&nbsp;</b><i>xyz...</i>&lang;\nwhite-space&rang; <b><br>\nt&nbsp;</b><i>xyz... dummy-arg</i>&lang;\nwhite-space&rang;\n\n<p style=\"margin-left:22%;\">Print a word, i.e., a sequence\nof glyphs with single-letter names <i>x</i>, <i>y</i>,\n<i>z</i>, etc., terminated by a space character or a line\nbreak; an optional second integer argument is ignored (this\nallows the formatter to generate an even number of\narguments). The first glyph should be printed at the current\nposition, the current horizontal position should then be\nincreased by the width of the first glyph, and so on for\neach glyph. The widths of the glyph are read from the font\nfile, scaled for the current point size, and rounded to a\nmultiple of the horizontal resolution. Special characters\n(glyphs with names longer than a single letter) cannot be\nprinted using this command; use the <b>C</b> command for\nthose glyphs. This command is a <i>groff</i> extension; it\nis only used for devices whose <i>DESC</i> file contains the\n<b>tcommand</b> keyword; see <a href=\"https://man.page/5/groff_font\">groff_font(5)</a>.\n\n<p style=\"margin-left:11%;\"><b>u&nbsp;</b><i>n\nxyz...</i>&lang; white-space&rang;\n\n<p style=\"margin-left:22%;\">Print word with track kerning.\nThis is the same as the <b>t</b> command except that after\nprinting each glyph, the current horizontal position is\nincreased by the sum of the width of that glyph\nand&nbsp;<i>n</i> (an integer in basic units&nbsp;<b>u</b>).\nThis command is a <i>groff</i> extension; it is only used\nfor devices whose <i>DESC</i> file contains the\n<b>tcommand</b> keyword; see <a href=\"https://man.page/5/groff_font\">groff_font(5)</a>.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>V&nbsp;</b><i>n</i></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move down to the absolute vertical\nposition&nbsp;<i>n</i> (a non-negative integer in basic\nunits&nbsp;<b>u</b>) relative to upper edge of current\npage. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>v&nbsp;</b><i>n</i></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move <i>n</i> basic units&nbsp;<b>u</b> down (<i>n</i>\nis a non-negative integer). [CSTR&nbsp;#54] allows negative\nvalues for <i>n</i> also, but <i>groff</i> doesn&rsquo;t use\nthis. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>w&nbsp;</b></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Informs about a paddable whitespace to increase\nreadability. The spacing itself must be performed explicitly\nby a move command.</td></tr>\n</table>\n\n<b>Graphics\nCommands</b> <br>\nEach graphics or drawing command in the <i>intermediate\noutput</i> starts with the letter&nbsp;<b>D</b> followed by\none or two characters that specify a subcommand; this is\nfollowed by a fixed or variable number of integer arguments\nthat are separated by a single space character. A\n<b>D&nbsp;</b>command may not be followed by another command\non the same line (apart from a comment), so each\n<b>D&nbsp;</b>command is terminated by a <i>syntactical line\nbreak</i>.\n\n<b>troff</b>\noutput follows the classical spacing rules (no space between\ncommand and subcommand, all arguments are preceded by a\nsingle space character), but the parser allows optional\nspace between the command letters and makes the space before\nthe first argument optional. As usual, each space can be any\nsequence of tab and space characters.\n\nSome graphics\ncommands can take a variable number of arguments. In this\ncase, they are integers representing a size measured in\nbasic units&nbsp;<b>u</b>. The <i>h</i> arguments stand for\nhorizontal distances where positive means right, negative\nleft. The <i>v</i> arguments stand for vertical distances\nwhere positive means down, negative up. All these distances\nare offsets relative to the current location.\n\nUnless\nindicated otherwise, each graphics command directly\ncorresponds to a similar <i>groff</i> <b>\\D</b> escape\nsequence; see <a href=\"https://man.page/7/groff\">groff(7)</a>.\n\nUnknown\n<b>D&nbsp;</b>commands are assumed to be device-specific.\nIts arguments are parsed as strings; the whole information\nis then sent to the postprocessor.\n\nIn the\nfollowing command reference, the syntax element <i>&lang;\nline-break&rang;</i> means a <i>syntactical line break</i>\nas defined in subsection &ldquo;Separation&rdquo; above.\n<b><br>\nD~&nbsp;</b><i>h <small><small>1&nbsp;</small></small> v\n<small><small>1</small></small> h\n<small><small>2&nbsp;</small></small> v\n<small><small>2</small></small></i> ... <i>h\n<small><small>n&nbsp;</small></small> v\n<small><small>n</small></small></i> &lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">Draw B-spline from current\nposition to offset (<i>h <small><small>1</small></small></i>\n,&nbsp;<i>v <small><small>1</small></small></i> ), then to\noffset (<i>h <small><small>2</small></small></i> ,&nbsp;<i>v\n<small><small>2</small></small></i> ) if given, etc., up to\n(<i>h <small><small>n</small></small></i> ,&nbsp;<i>v\n<small><small>n</small></small></i> ). This command takes a\nvariable number of argument pairs; the current position is\nmoved to the terminal point of the drawn curve.\n\n<p style=\"margin-left:11%;\"><b>Da&nbsp;</b><i>h\n<small><small>1&nbsp;</small></small> v\n<small><small>1</small></small> h\n<small><small>2&nbsp;</small></small> v\n<small><small>2</small></small></i> &lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">Draw arc from current position\nto (<i>h <small><small>1</small></small></i> ,&nbsp;<i>v\n<small><small>1</small></small></i> )+(<i>h\n<small><small>2</small></small></i> ,&nbsp;<i>v\n<small><small>2</small></small></i> ) with center at (<i>h\n<small><small>1</small></small></i> ,&nbsp;<i>v\n<small><small>1</small></small></i> ); then move the current\nposition to the final point of the arc.\n\n<p style=\"margin-left:11%;\"><b>DC&nbsp;</b><i>d</i>&lang;\nline-break&rang; <b><br>\nDC&nbsp;</b><i>d dummy-arg</i>&lang; line-break&rang;\n\n<p style=\"margin-left:22%;\">Draw a solid circle using the\ncurrent fill color with diameter&nbsp;<i>d</i> (integer in\nbasic units&nbsp;<b>u</b>) with leftmost point at the\ncurrent position; then move the current position to the\nrightmost point of the circle. An optional second integer\nargument is ignored (this allows the formatter to generate\nan even number of arguments). This command is a <i>groff</i>\nextension.\n\n<p style=\"margin-left:11%;\"><b>Dc&nbsp;</b><i>d</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">Draw circle line with\ndiameter&nbsp;<i>d</i> (integer in basic\nunits&nbsp;<b>u</b>) with leftmost point at the current\nposition; then move the current position to the rightmost\npoint of the circle.\n\n<p style=\"margin-left:11%;\"><b>DE&nbsp;</b><i>h v</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">Draw a solid ellipse in the\ncurrent fill color with a horizontal diameter\nof&nbsp;<i>h</i> and a vertical diameter of&nbsp;<i>v</i>\n(both integers in basic units&nbsp;<b>u</b>) with the\nleftmost point at the current position; then move to the\nrightmost point of the ellipse. This command is a\n<i>groff</i> extension.\n\n<p style=\"margin-left:11%;\"><b>De&nbsp;</b><i>h v</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">Draw an outlined ellipse with a\nhorizontal diameter of&nbsp;<i>h</i> and a vertical diameter\nof&nbsp;<i>v</i> (both integers in basic\nunits&nbsp;<b>u</b>) with the leftmost point at current\nposition; then move to the rightmost point of the\nellipse.\n\n\n<p style=\"margin-left:11%;\"><b>DF&nbsp;</b><i>color-scheme</i>\n[<i>component ...</i>]&lang; line-break&rang;\n\n<p style=\"margin-left:22%;\">Set fill color for solid\ndrawing objects using different color schemes; the analogous\ncommand for setting the color of text, line graphics, and\nthe outline of graphic objects is <b>m</b>. The color\ncomponents are specified as integer arguments between 0 and\n65536. The number of color components and their meaning vary\nfor the different color schemes. These commands are\ngenerated by the <i>groff</i> escape sequences\n<b>\\D&rsquo;F&nbsp;</b>...<b>&rsquo;</b> and <b>\\M</b> (with\nno other corresponding graphics commands). No position\nchanging. This command is a <i>groff</i> extension. <b><br>\nDFc&nbsp;</b><i>cyan magenta yellow</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects using the CMY color scheme, having the\n3&nbsp;color components cyan, magenta, and yellow.\n\n<p style=\"margin-left:22%;\"><b>DFd&nbsp;</b>&lang;\nline-break&rang;\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects to the default fill color value (black in\nmost cases). No component arguments.\n\n\n<p style=\"margin-left:22%;\"><b>DFg&nbsp;</b><i>gray</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects to the shade of gray given by the argument,\nan integer between 0 (black) and 65536 (white).\n\n<p style=\"margin-left:22%;\"><b>DFk&nbsp;</b><i>cyan magenta\nyellow black</i>&lang; line-break&rang;\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects using the CMYK color scheme, having the\n4&nbsp;color components cyan, magenta, yellow, and\nblack.\n\n<p style=\"margin-left:22%;\"><b>DFr&nbsp;</b><i>red green\nblue</i>&lang; line-break&rang;\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects using the RGB color scheme, having the\n3&nbsp;color components red, green, and blue.\n\n<p style=\"margin-left:11%;\"><b>Df&nbsp;</b><i>n</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">The argument <i>n</i> must be\nan integer in the range -32767 to 32767. <br>\n0&le;<i>n</i>&le;1000\n\n<p style=\"margin-left:32%;\">Set the color for filling solid\ndrawing objects to a shade of gray, where 0 corresponds to\nsolid white, 1000 (the default) to solid black, and values\nin between to intermediate shades of gray; this is obsoleted\nby command <b>DFg</b>.\n\n<p style=\"margin-left:22%;\"><i>n</i>&lt;0 or\n<i>n</i>&gt;1000\n\n<p style=\"margin-left:32%;\">Set the filling color to the\ncolor that is currently being used for the text and the\noutline, see command <b>m</b>. For example, the command\nsequence\n\n<p style=\"margin-left:43%; margin-top: 1em\">mg 0 0 65536\n<br>\nDf -1\n\n<p style=\"margin-left:32%; margin-top: 1em\">sets all colors\nto blue.\n\n<p style=\"margin-left:22%; margin-top: 1em\">No position\nchanging. This command is a <i>groff</i> extension.\n\n<p style=\"margin-left:11%;\"><b>Dl&nbsp;</b><i>h v</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">Draw line from current position\nto offset (<i>h</i>,&nbsp;<i>v</i>) (integers in basic\nunits&nbsp;<b>u</b>); then set current position to the end\nof the drawn line.\n\n<p style=\"margin-left:11%;\"><b>Dp&nbsp;</b><i>h\n<small><small>1&nbsp;</small></small> v\n<small><small>1</small></small> h\n<small><small>2&nbsp;</small></small> v\n<small><small>2</small></small></i> ... <i>h\n<small><small>n&nbsp;</small></small> v\n<small><small>n</small></small></i> &lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">Draw a polygon line from\ncurrent position to offset (<i>h\n<small><small>1</small></small></i> ,&nbsp;<i>v\n<small><small>1</small></small></i> ), from there to offset\n(<i>h <small><small>2</small></small></i> ,&nbsp;<i>v\n<small><small>2</small></small></i> ), etc., up to offset\n(<i>h <small><small>n</small></small></i> ,&nbsp;<i>v\n<small><small>n</small></small></i> ), and from there back\nto the starting position. For historical reasons, the\nposition is changed by adding the sum of all arguments with\nodd index to the actual horizontal position and the even\nones to the vertical position. Although this doesn&rsquo;t\nmake sense it is kept for compatibility. This command is a\n<i>groff</i> extension.\n\n<p style=\"margin-left:11%;\"><b>DP&nbsp;</b><i>h\n<small><small>1&nbsp;</small></small> v\n<small><small>1</small></small> h\n<small><small>2&nbsp;</small></small> v\n<small><small>2</small></small></i> ... <i>h\n<small><small>n&nbsp;</small></small> v\n<small><small>n</small></small></i> &lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">The same macro as the\ncorresponding <b>Dp</b> command with the same arguments, but\ndraws a solid polygon in the current fill color rather than\nan outlined polygon. The position is changed in the same way\nas with <b>Dp</b>. This command is a <i>groff</i>\nextension.\n\n<p style=\"margin-left:11%;\"><b>Dt&nbsp;</b><i>n</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">Set the current line thickness\nto&nbsp;<i>n</i> (an integer in basic units&nbsp;<b>u</b>)\nif <i>n</i>&gt;0; if <i>n</i>=0 select the smallest\navailable line thickness; if <i>n</i>&lt;0 set the line\nthickness proportional to the point size (this is the\ndefault before the first <b>Dt</b> command was specified).\nFor historical reasons, the horizontal position is changed\nby adding the argument to the actual horizontal position,\nwhile the vertical position is not changed. Although this\ndoesn&rsquo;t make sense it is kept for compatibility. This\ncommand is a <i>groff</i> extension.\n\n<b>Device\nControl Commands</b> <br>\nEach device control command starts with the letter <b>x</b>\nfollowed by a space character (optional or arbitrary\nspace/tab in <i>groff</i>) and a subcommand letter or word;\neach argument (if any) must be preceded by a <i>syntactical\nspace</i>. All <b>x</b> commands are terminated by a\n<i>syntactical line break</i>; no device control command can\nbe followed by another command on the same line (except a\ncomment).\n\nThe subcommand\nis basically a single letter, but to increase readability,\nit can be written as a word, i.e., an arbitrary sequence of\ncharacters terminated by the next tab, space, or newline\ncharacter. All characters of the subcommand word but the\nfirst are simply ignored. For example, <b>troff</b> outputs\nthe initialization command <b>x&nbsp;i</b> as\n<b>x&nbsp;init</b> and the resolution command\n<b>x&nbsp;r</b> as <b>x&nbsp;res</b>. But writings like\n<b>x&nbsp;i_like_groff</b> and <b>x&nbsp;roff_is_groff</b>\nare accepted as well to mean the same commands.\n\nIn the\nfollowing, the syntax element <i>&lang; line-break&rang;</i>\nmeans a <i>syntactical line break</i> as defined in\nsubsection &ldquo;Separation&rdquo; above. <b><br>\nxF&nbsp;</b><i>name</i>&lang; line-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>Filename</i> control\ncommand) <br>\nUse <i>name</i> as the intended name for the current file in\nerror reports. This is useful for remembering the original\nfile name when <b>groff</b> uses an internal piping\nmechanism. The input file is not changed by this command.\nThis command is a <i>groff</i> extension.\n\n\n<p style=\"margin-left:11%;\"><b>xf&nbsp;</b><i>n&nbsp;s</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>font</i> control command)\n<br>\nMount font position&nbsp;<i>n</i> (a non-negative integer)\nwith font named&nbsp;<i>s</i> (a text word); see\n<a href=\"https://man.page/5/groff_font\">groff_font(5)</a>.\n\n<p style=\"margin-left:11%;\"><b>xH&nbsp;</b><i>n</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>Height</i> control command)\n<br>\nSet character height to&nbsp;<i>n</i> (a positive integer in\nscaled points&nbsp;<b>z</b>). <i>Classical troff</i> used\nthe unit points (<b>p</b>) instead; see section\n&ldquo;Compatibility&rdquo; below.\n\n<p style=\"margin-left:11%;\"><b>xi&nbsp;</b>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>init</i> control command)\n<br>\nInitialize device. This is the third command of the\n<i>prologue</i>.\n\n<p style=\"margin-left:11%;\"><b>xp&nbsp;</b>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>pause</i> control command)\n<br>\nParsed but ignored. The classical documentation reads\n<i>pause device, can be restarted</i>.\n\n\n<p style=\"margin-left:11%;\"><b>xr&nbsp;</b><i>n&nbsp;h&nbsp;v</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>resolution</i> control\ncommand) <br>\nResolution is&nbsp;<i>n</i>, while <i>h</i> is the minimal\nhorizontal motion, and <i>v</i> the minimal vertical motion\npossible with this device; all arguments are positive\nintegers in basic units&nbsp;<b>u</b> per inch. This is the\nsecond command of the <i>prologue</i>.\n\n<p style=\"margin-left:11%;\"><b>xS&nbsp;</b><i>n</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>Slant</i> control command)\n<br>\nSet slant to&nbsp;<i>n</i> degrees (an integer in basic\nunits&nbsp;<b>u</b>).\n\n<p style=\"margin-left:11%;\"><b>xs&nbsp;</b>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>stop</i> control command)\n<br>\nTerminates the processing of the current file; issued as the\nlast command of any <i>intermediate troff output</i>.\n\n<p style=\"margin-left:11%;\"><b>xt&nbsp;</b>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>trailer</i> control\ncommand) <br>\nGenerate trailer information, if any. In <b>groff</b>, this\nis actually just ignored.\n\n\n<p style=\"margin-left:11%;\"><b>xT&nbsp;</b><i>xxx</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>Typesetter</i> control\ncommand) <br>\nSet name of device to word <i>xxx</i>, a sequence of\ncharacters ended by the next whitespace character. The\npossible device names coincide with those from the groff\n<b>-T</b> option. This is the first command of the\n<i>prologue</i>.\n\n<p style=\"margin-left:11%;\"><b>xu&nbsp;</b><i>n</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>underline</i> control\ncommand) <br>\nConfigure underlining of spaces. If <i>n</i> is&nbsp;1,\nstart underlining of spaces; if <i>n</i> is&nbsp;0, stop\nunderlining of spaces. This is needed for the <b>cu</b>\nrequest in <b>nroff</b> mode and is ignored otherwise. This\ncommand is a <i>groff</i> extension.\n\n\n<p style=\"margin-left:11%;\"><b>xX&nbsp;</b><i>anything</i>&lang;\nline-break&rang;\n\n<p style=\"margin-left:22%;\">(<i>X-escape</i> control\ncommand) <br>\nSend string <i>anything</i> uninterpreted to the device. If\nthe line following this command starts with a <b>+</b>\ncharacter this line is interpreted as a continuation line in\nthe following sense. The <b>+</b> is ignored, but a newline\ncharacter is sent instead to the device, the rest of the\nline is sent uninterpreted. The same applies to all\nfollowing lines until the first character of a line is not a\n<b>+</b> character. This command is generated by the\n<i>groff</i> escape sequence <b>\\X</b>. The line-continuing\nfeature is a <i>groff</i> extension.\n\n<b>Obsolete\nCommand</b> <br>\nIn <i>classical troff</i> output, emitting a single glyph\nwas mostly done by a very strange command that combined a\nhorizontal move and the printing of a glyph. It didn&rsquo;t\nhave a command code, but is represented by a 3-character\nargument consisting of exactly 2&nbsp;digits and a\ncharacter.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>ddc</i></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move right <i>dd</i> (exactly two decimal digits) basic\nunits&nbsp;<b>u</b>, then print glyph with single-letter\nname&nbsp;<i>c</i>. </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In\n<i>groff</i>, arbitrary <i>syntactical space</i> around and\nwithin this command is allowed to be added. Only when a\npreceding command on the same line ends with an argument of\nvariable length a separating space is obligatory. In\n<i>classical troff</i>, large clusters of these and other\ncommands were used, mostly without spaces; this made such\noutput almost unreadable.\n\nFor modern\nhigh-resolution devices, this command does not make sense\nbecause the width of the glyphs can become much larger than\ntwo decimal digits. In <b>groff</b>, this is only used for\nthe devices <b>X75</b>, <b>X75-12</b>, <b>X100</b>, and\n<b>X100-12</b>. For other devices, the commands <b>t</b>\nand&nbsp;<b>u</b> provide a better functionality.\n\n<h2>POSTPROCESSING\n<a name=\"POSTPROCESSING\"></a>\n</h2>\n\n\nThe <i>roff</i>\npostprocessors are programs that have the task to translate\nthe <i>intermediate output</i> into actions that are sent to\na device. A device can be some piece of hardware such as a\nprinter, or a software file format suitable for graphical or\ntext processing. The <i>groff</i> system provides powerful\nmeans that make the programming of such postprocessors an\neasy task.\n\nThere is a\nlibrary function that parses the <i>intermediate output</i>\nand sends the information obtained to the device via methods\nof a class with a common interface for each device. So a\n<i>groff</i> postprocessor must only redefine the methods of\nthis class. For details, see the reference in section\n&ldquo;Files&rdquo; below.\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\nThis section\npresents the <i>intermediate output</i> generated from the\nsame input for three different devices. The input is the\nsentence <i>hell world</i> fed into <b>groff</b> on the\ncommand line.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">High-resolution device\n<i>ps</i> </td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>shell&gt;</b>\necho &quot;hell world&quot; | groff -Z -T ps\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>x T ps <br>\nx res 72000 1 1 <br>\nx init <br>\np1 <br>\nx font 5 TR <br>\nf5 <br>\ns10000 <br>\nV12000 <br>\nH72000 <br>\nthell <br>\nwh2500 <br>\ntw <br>\nH96620 <br>\ntorld <br>\nn12000 0 <br>\nx trailer <br>\nV792000 <br>\nx stop</b>\n\nThis output can\nbe fed into the postprocessor <a href=\"https://man.page/1/grops\">grops(1)</a> to get its\nrepresentation as a PostScript file, or <a href=\"https://man.page/1/gropdf\">gropdf(1)</a> to\noutput directly to PDF.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"43%\">\n\n\n<p style=\"margin-top: 1em\">Low-resolution device\n<i>latin1</i> </td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:14%; margin-top: 1em\">This is similar\nto the high-resolution device except that the positioning is\ndone at a minor scale. Some comments (lines starting with\n<i>#</i>) were added for clarification; they were not\ngenerated by the formatter.\n\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>shell&gt;</b>\n&quot;hell world&quot; | groff -Z -T latin1\n\n<p style=\"margin-left:14%; margin-top: 1em\"><i>#\nprologue</i> <b><br>\nx T latin1 <br>\nx res 240 24 40 <br>\nx init</b> <i><br>\n# begin a new page</i> <b><br>\np1</b> <i><br>\n# font setup</i> <b><br>\nx font 1 R <br>\nf1 <br>\ns10</b> <i><br>\n# initial positioning on the page</i> <b><br>\nV40 <br>\nH0</b> <i><br>\n# write text &rsquo;hell&rsquo;</i> <b><br>\nthell</b> <i><br>\n# inform about a space, and do it by a horizontal jump</i>\n<b><br>\nwh24</b> <i><br>\n# write text &rsquo;world&rsquo;</i> <b><br>\ntworld</b> <i><br>\n# announce line break, but do nothing because ...</i>\n<b><br>\nn40 0</b> <i><br>\n# ... the end of the document has been reached</i> <b><br>\nx trailer <br>\nV2640 <br>\nx stop</b>\n\nThis output can\nbe fed into the postprocessor <a href=\"https://man.page/1/grotty\">grotty(1)</a> to get a\nformatted text document.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">Classical style output</td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:14%; margin-top: 1em\">As a computer\nmonitor has a very low resolution compared to modern\nprinters the <i>intermediate output</i> for the\nX&nbsp;devices can use the jump-and-write command with its\n2-digit displacements.\n\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>shell&gt;</b>\n&quot;hell world&quot; | groff -Z -T X100\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>x T X100\n<br>\nx res 100 1 1 <br>\nx init <br>\np1 <br>\nx font 5 TR <br>\nf5 <br>\ns10 <br>\nV16 <br>\nH100</b> <i><br>\n# write text with old-style jump-and-write command</i>\n<b><br>\nch07e07l03lw06w11o07r05l03dh7 <br>\nn16 0 <br>\nx trailer <br>\nV1100 <br>\nx stop</b>\n\nThis output can\nbe fed into the postprocessor <b>xditview</b>(1x) or\n<a href=\"https://man.page/1/gxditview\">gxditview(1)</a> for displaying in&nbsp;X.\n\nDue to the\nobsolete jump-and-write command, the text clusters in the\nclassical output are almost unreadable.\n\n<h2>COMPATIBILITY\n<a name=\"COMPATIBILITY\"></a>\n</h2>\n\n\nThe\n<i>intermediate output</i> language of the <i>classical\ntroff</i> was first documented in [CSTR&nbsp;#97] . The\n<i>groff intermediate output</i> format is compatible with\nthis specification except for the following features.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">The classical quasi device\nindependence is not yet implemented.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The old hardware was very different from what we use\ntoday. So the <i>groff</i> devices are also fundamentally\ndifferent from the ones in <i>classical troff</i>. For\nexample, the classical PostScript device was called\n<i>post</i> and had a resolution of 720 units per inch,\nwhile <i>groff</i>&rsquo;s <i>ps</i> device has a resolution\nof 72000 units per inch. Maybe, by implementing some\nrescaling mechanism similar to the classical quasi device\nindependence, these could be integrated into modern\n<i>groff</i>. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The B-spline command <b>D~</b> is correctly handled by\nthe <i>intermediate output</i> parser, but the drawing\nroutines aren&rsquo;t implemented in some of the\npostprocessor programs.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The argument of the commands <b>s</b> and <b>x H</b> has\nthe implicit unit scaled point&nbsp;<b>z</b> in\n<i>groff</i>, while <i>classical troff</i> had point\n(<b>p</b>). This isn&rsquo;t an incompatibility, but a\ncompatible extension, for both units coincide for all\ndevices without a <i>sizescale</i> parameter, including all\nclassical and the <i>groff</i> text devices. The few\n<i>groff</i> devices with a sizescale parameter either did\nnot exist, had a different name, or seem to have had a\ndifferent resolution. So conflicts with classical devices\nare very unlikely.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The position changing after the commands <b>Dp</b>,\n<b>DP</b>, and <b>Dt</b> is illogical, but as old versions\nof groff used this feature it is kept for compatibility\nreasons. </td></tr>\n</table>\n\nThe differences\nbetween <i>groff</i> and <i>classical troff</i> are\ndocumented in <a href=\"https://man.page/7/groff_diff\">groff_diff(7)</a>.\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<i>/usr/share/groff/1.22.4/font/dev</i>name<i>/DESC</i>\n\n<p style=\"margin-left:22%;\">Device description file for\ndevice <i>name</i>.\n\n\n<p style=\"margin-left:11%;\"><i>src/libs/libdriver/input.cpp</i>\n\n<p style=\"margin-left:22%;\">Defines the parser and\npostprocessor for the <i>intermediate output</i>. It is\nlocated relative to the top directory of the <i>groff</i>\nsource tree. This parser is the definitive specification of\nthe <i>groff intermediate output</i> format.\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\nJames Clark\nwrote an early version of this document, which described\nonly the differences between <a href=\"https://man.page/7/ditroff\">ditroff(7)</a>&rsquo;s\noutput format and that of GNU <i>roff</i>. The present\nversion was completely rewritten in 2001 by\n<a href=\"mailto:groff-bernd.warken-72@web.de\">Bernd\nWarken</a>.\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\nA reference\nlike <a href=\"https://man.page/7/groff\">groff(7)</a> refers to a manual page; here\n<b>groff</b> in section&nbsp;<i>7</i> of the man page\ndocumentation system. To read the example, look up\nsection&nbsp;7 in your desktop help system or call from the\nshell prompt\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>shell&gt;</b>\nman 7 groff\n\nFor more\ndetails, see <a href=\"https://man.page/1/man\">man(1)</a>. <b><br>\ngroff</b>(1)\n\n<p style=\"margin-left:22%;\">option <b>-Z</b> and further\nreadings on groff.\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/7/groff\">groff(7)</a>\n\n<p style=\"margin-left:22%;\">for details of the <i>groff</i>\nlanguage such as numerical units and escape sequences.\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/5/groff_font\">groff_font(5)</a>\n\n<p style=\"margin-left:22%;\">for details on the device\nscaling parameters of the <i>DESC</i> file.\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/1/troff\">troff(1)</a>\n\n<p style=\"margin-left:22%;\">generates the\ndevice-independent intermediate output.\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/7/roff\">roff(7)</a>\n\n<p style=\"margin-left:22%;\">for historical aspects and the\ngeneral structure of roff systems.\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/7/groff_diff\">groff_diff(7)</a>\n\n<p style=\"margin-left:22%;\">The differences between the\nintermediate output in groff and classical troff.\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/1/gxditview\">gxditview(1)</a>\n\n<p style=\"margin-left:22%;\">Viewer for the <i>intermediate\noutput</i>.\n\n\n<a href=\"https://man.page/1/grodvi\">grodvi(1)</a>,\n<a href=\"https://man.page/1/grohtml\">grohtml(1)</a>, <a href=\"https://man.page/1/grolbp\">grolbp(1)</a>, <a href=\"https://man.page/1/grolj4\">grolj4(1)</a>,\n<a href=\"https://man.page/1/grops\">grops(1)</a>, <a href=\"https://man.page/1/grotty\">grotty(1)</a>\n\n<p style=\"margin-left:22%;\">the groff postprocessor\nprograms.\n\n<i>Groff: The\nGNU Implementation of troff</i>, by Trent A. Fisher and\nWerner Lemberg, is the primary <i>groff</i> manual. You can\nbrowse it interactively with &ldquo;info groff&rdquo;.\n\nThe\n<i>classical troff output language</i> is described in two\nAT&amp;T Bell Labs CSTR documents available on-line at\n<a href=\"http://cm.bell-labs.com/cm/cs/cstr.html\">Bell Labs\nCSTR site</a>. <br>\n[CSTR #97]\n\n<p style=\"margin-left:22%;\"><i>A Typesetter-independent\nTROFF</i> by <i>Brian Kernighan</i> is the original and most\ncomprehensive documentation on the output language; see\n<a href=\"http://cm.bell-labs.com/cm/cs/cstr/97.ps.gz\">CSTR&nbsp;#97</a>.\n\n<p style=\"margin-left:11%;\">[CSTR&nbsp;#54]\n\n<p style=\"margin-left:22%;\">The 1992 revision of the\n<i>Nroff/Troff User&rsquo;s Manual</i> by <i>J. F.\nOssanna</i> and <i>Brian Kernighan</i> isn&rsquo;t as\ncomprehensive as [CSTR&nbsp;#97] regarding the output\nlanguage; see\n<a href=\"http://cm.bell-labs.com/cm/cs/cstr/54.ps.gz\">CSTR&nbsp;#54</a>.","body":"\n\n<h1 align=\"center\">GROFF_OUT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">groff_out -\ngroff intermediate output format</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage describes the <i>intermediate output</i> format of the\nGNU <a href=\"https://man.page/7/roff\">roff(7)</a> text processing system <a href=\"https://man.page/1/groff\">groff(1)</a>.\nThis output is produced by a run of the GNU <a href=\"https://man.page/1/troff\">troff(1)</a>\nprogram. It contains already all device-specific\ninformation, but it is not yet fed into a device\npostprocessor program.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As the GNU\n<i>roff</i> processor <a href=\"https://man.page/1/groff\">groff(1)</a> is a wrapper program\naround <b>troff</b> that automatically calls a\npostprocessor, this output does not show up normally. This\nis why it is called <i>intermediate</i> within the <i>groff\nsystem</i>. The <b>groff</b> program provides the option\n<b>-Z</b> to inhibit postprocessing, such that the produced\n<i>intermediate output</i> is sent to standard output just\nlike calling <b>troff</b> manually.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this\ndocument, the term <i>troff output</i> describes what is\noutput by the GNU <b>troff</b> program, while\n<i>intermediate output</i> refers to the language that is\naccepted by the parser that prepares this output for the\npostprocessors. This parser is smarter on whitespace and\nimplements obsolete elements for compatibility, otherwise\nboth formats are the same. Both formats can be viewed\ndirectly with <a href=\"https://man.page/1/gxditview\">gxditview(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The main\npurpose of the <i>intermediate output</i> concept is to\nfacilitate the development of postprocessors by providing a\ncommon programming interface for all devices. It has a\nlanguage of its own that is completely different from the\n<a href=\"https://man.page/7/groff\">groff(7)</a> language. While the <i>groff</i> language is\na high-level programming language for text processing, the\n<i>intermediate output</i> language is a kind of low-level\nassembler language by specifying all positions on the page\nfor writing and drawing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\npre-<i>groff roff</i> versions are denoted as <i>classical\ntroff</i>. The <i>intermediate output</i> produced by\n<b>groff</b> is fairly readable, while <i>classical\ntroff</i> output was hard to understand because of strange\nhabits that are still supported, but not used any longer by\n<i>GNU troff</i>.</p>\n\n<h2>LANGUAGE CONCEPTS\n<a name=\"LANGUAGE CONCEPTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">During the run\nof <b>troff</b>, the <i>roff</i> input is cracked down to\nthe information on what has to be printed at what position\non the intended device. So the language of the\n<i>intermediate output</i> format can be quite small. Its\nonly elements are commands with or without arguments. In\nthis document, the term &ldquo;command&rdquo; always refers\nto the <i>intermediate output</i> language, never to the\n<i>roff</i> language used for document formatting. There are\ncommands for positioning and text writing, for drawing, and\nfor device controlling.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Separation</b>\n<i><br>\nClassical troff output</i> had strange requirements on\nwhitespace. The <b>groff</b> output parser, however, is\nsmart about whitespace by making it maximally optional. The\nwhitespace characters, i.e., the <i>tab</i>, <i>space</i>,\nand <i>newline</i> characters, always have a syntactical\nmeaning. They are never printable because spacing within the\noutput is always done by positioning commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any sequence of\n<i>space</i> or <i>tab</i> characters is treated as a single\n<i>syntactical space</i>. It separates commands and\narguments, but is only required when there would occur a\nclashing between the command code and the arguments without\nthe space. Most often, this happens when variable length\ncommand names, arguments, argument lists, or command\nclusters meet. Commands and arguments with a known, fixed\nlength need not be separated by <i>syntactical\nspace</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A line break is\na syntactical element, too. Every command argument can be\nfollowed by whitespace, a comment, or a newline character.\nThus a <i>syntactical line break</i> is defined to consist\nof optional <i>syntactical space</i> that is optionally\nfollowed by a comment, and a newline character.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The normal\ncommands, those for positioning and text, consist of a\nsingle letter taking a fixed number of arguments. For\nhistorical reasons, the parser allows stacking of such\ncommands on the same line, but fortunately, in <i>groff\nintermediate output</i>, every command with at least one\nargument is followed by a line break, thus providing\nexcellent readability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The other\ncommands &mdash; those for drawing and device controlling\n&mdash; have a more complicated structure; some recognize\nlong command names, and some take a variable number of\narguments. So all <b>D</b> and <b>x</b> commands were\ndesigned to request a <i>syntactical line break</i> after\ntheir last argument. Only one command,\n&rsquo;<b>x&nbsp;X</b>&rsquo; has an argument that can\nstretch over several lines, all other commands must have all\nof their arguments on the same line as the command, i.e.,\nthe arguments may not be split by a line break.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Empty lines,\ni.e., lines containing only space and/or a comment, can\noccur everywhere. They are just ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Argument\nUnits</b> <br>\nSome commands take integer arguments that are assumed to\nrepresent values in a measurement unit, but the letter for\nthe corresponding <i>scale indicator</i> is not written with\nthe output command arguments; see <a href=\"https://man.page/7/groff\">groff(7)</a> and\n<i>Groff: The GNU Implementation of troff</i>, the\n<i>groff</i> Texinfo manual, for more on this topic. Most\ncommands assume the scale indicator&nbsp;<b>u</b>, the basic\nunit of the device, some use&nbsp;<b>z</b>, the <i>scaled\npoint unit</i> of the device, while others, such as the\ncolor commands expect plain integers. Note that these scale\nindicators are relative to the chosen device. They are\ndefined by the parameters specified in the device&rsquo;s\n<i>DESC</i> file; see <a href=\"https://man.page/5/groff_font\">groff_font(5)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nsingle characters can have the eighth bit set, as can the\nnames of fonts and special characters (this is, glyphs). The\nnames of glyphs and fonts can be of arbitrary length. A\nglyph that is to be printed will always be in the current\nfont.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A string\nargument is always terminated by the next whitespace\ncharacter (space, tab, or newline); an embedded <b>#</b>\ncharacter is regarded as part of the argument, not as the\nbeginning of a comment command. An integer argument is\nalready terminated by the next non-digit character, which\nthen is regarded as the first character of the next argument\nor command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Document\nParts</b> <br>\nA correct <i>intermediate output</i> document consists of\ntwo parts, the <i>prologue</i> and the <i>body</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The task of the\n<i>prologue</i> is to set the general device parameters\nusing three exactly specified commands. The <i>groff\nprologue</i> is guaranteed to consist of the following three\nlines (in that order):</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>x&nbsp;T</b>\n<i>device</i> <b><br>\nx&nbsp;res</b> <i>n&nbsp;h&nbsp;v</i> <b><br>\nx init</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">with the\narguments set as outlined in subsection &ldquo;Device\nControl Commands&rdquo; below. However, the parser for the\n<i>intermediate output</i> format is able to swallow\nadditional whitespace and comments as well.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>body</i>\nis the main section for processing the document data.\nSyntactically, it is a sequence of any commands different\nfrom the ones used in the <i>prologue</i>. Processing is\nterminated as soon as the first <b>x&nbsp;stop</b> command\nis encountered; the last line of any <i>groff intermediate\noutput</i> always contains such a command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Semantically,\nthe <i>body</i> is page oriented. A new page is started by a\n<b>p&nbsp;</b>command. Positioning, writing, and drawing\ncommands are always done within the current page, so they\ncannot occur before the first <b>p&nbsp;</b>command.\nAbsolute positioning (by the <b>H</b> and\n<b>V&nbsp;</b>commands) is done relative to the current\npage, all other positioning is done relative to the current\nlocation within this page.</p>\n\n<h2>COMMAND REFERENCE\n<a name=\"COMMAND REFERENCE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This section\ndescribes all <i>intermediate output</i> commands, the\nclassical commands as well as the <i>groff</i>\nextensions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Comment\nCommand <br>\n#</b><i>anything</i><b>&lang; end-of-line&rang;</b></p>\n\n<p style=\"margin-left:22%;\">A comment. Ignore any\ncharacters from the <b>#&nbsp;</b>character up to the next\nnewline character.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command is\nthe only possibility for commenting in the <i>intermediate\noutput</i>. Each comment can be preceded by arbitrary\n<i>syntactical space</i>; every command can be terminated by\na comment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Simple\nCommands</b> <br>\nThe commands in this subsection have a command code\nconsisting of a single character, taking a fixed number of\narguments. Most of them are commands for positioning and\ntext writing. These commands are smart about whitespace.\nOptionally, <i>syntactical space</i> can be inserted before,\nafter, and between the command letter and its arguments. All\nof these commands are stackable, i.e., they can be preceded\nby other simple commands or followed by arbitrary other\ncommands on the same line. A separating <i>syntactical\nspace</i> is only necessary when two integer arguments would\nclash or if the preceding argument ends with a string\nargument. <b><br>\nC&nbsp;</b><i>xxx</i>&lang; white-space&rang;</p>\n\n<p style=\"margin-left:22%;\">Print a glyph (special\ncharacter) named <i>xxx</i>. The trailing <i>syntactical\nspace</i> or <i>line break</i> is necessary to allow glyph\nnames of arbitrary length. The glyph is printed at the\ncurrent print position; the glyph&rsquo;s size is read from\nthe font file. The print position is not changed.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>c&nbsp;</b><i>c</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Print glyph with single-letter name&nbsp;<i>c</i> at the\ncurrent print position; the glyph&rsquo;s size is read from\nthe font file. The print position is not changed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>f&nbsp;</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Set font to font number&nbsp;<i>n</i> (a non-negative\ninteger).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>H&nbsp;</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move right to the absolute vertical\nposition&nbsp;<i>n</i> (a non-negative integer in basic\nunits&nbsp;<b>u</b>) relative to left edge of current\npage.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>h&nbsp;</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move <i>n</i> (a non-negative integer) basic\nunits&nbsp;<b>u</b> horizontally to the right.\n[CSTR&nbsp;#54] allows negative values for <i>n</i> also,\nbut <i>groff</i> doesn&rsquo;t use this.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>m&nbsp;</b><i>color-scheme</i>\n[<i>component ...</i>]</p>\n\n<p style=\"margin-left:22%;\">Set the color for text\n(glyphs), line drawing, and the outline of graphic objects\nusing different color schemes; the analogous command for the\nfilling color of graphic objects is <b>DF</b>. The color\ncomponents are specified as integer arguments between 0 and\n65536. The number of color components and their meaning vary\nfor the different color schemes. These commands are\ngenerated by the <i>groff</i> escape sequence <b>\\m</b>. No\nposition changing. These commands are a <i>groff</i>\nextension. <b><br>\nmc&nbsp;</b><i>cyan magenta yellow</i></p>\n\n<p style=\"margin-left:32%;\">Set color using the CMY color\nscheme, having the 3&nbsp;color components cyan, magenta,\nand yellow.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>md&nbsp;</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Set color to the default color value (black in most\ncases). No component arguments.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>mg&nbsp;</b><i>gray</i></p>\n\n<p style=\"margin-left:32%;\">Set color to the shade of gray\ngiven by the argument, an integer between 0 (black) and\n65536 (white).</p>\n\n<p style=\"margin-left:22%;\"><b>mk&nbsp;</b><i>cyan magenta\nyellow black</i></p>\n\n<p style=\"margin-left:32%;\">Set color using the CMYK color\nscheme, having the 4&nbsp;color components cyan, magenta,\nyellow, and black.</p>\n\n<p style=\"margin-left:22%;\"><b>mr&nbsp;</b><i>red green\nblue</i></p>\n\n<p style=\"margin-left:32%;\">Set color using the RGB color\nscheme, having the 3&nbsp;color components red, green, and\nblue.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>N&nbsp;</b><i>n</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Print glyph with index&nbsp;<i>n</i> (an integer,\nnormally non-negative) of the current font. The print\nposition is not changed. If <b>-T&nbsp;html</b> or\n<b>-T&nbsp;xhtml</b> is used, negative values are emitted\nalso to indicate an unbreakable space with given width. For\nexample, <b>N&nbsp;-193</b> represents an unbreakable space\nwhich has a width of 193u. This command is a <i>groff</i>\nextension.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>n&nbsp;</b><i>b&nbsp;a</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Inform the device about a line break, but no positioning\nis done by this command. In <i>classical troff</i>, the\ninteger arguments <i>b</i> and&nbsp;<i>a</i> informed about\nthe space before and after the current line to make the\n<i>intermediate output</i> more human readable without\nperforming any action. In <i>groff</i>, they are just\nignored, but they must be provided for compatibility\nreasons.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>p&nbsp;</b><i>n</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Begin a new page in the outprint. The page number is set\nto&nbsp;<i>n</i>. This page is completely independent of\npages formerly processed even if those have the same page\nnumber. The vertical position on the outprint is\nautomatically set to&nbsp;0. All positioning, writing, and\ndrawing is always done relative to a page, so a\n<b>p&nbsp;</b>command must be issued before any of these\ncommands.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>s&nbsp;</b><i>n</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Set point size to <i>n</i> scaled points (this is\nunit&nbsp;<b>z</b> in GNU <b>troff</b>). <i>Classical\ntroff</i> used the unit <i>points</i> (<b>p</b>) instead;\nsee section &ldquo;Compatibility&rdquo; below.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>t&nbsp;</b><i>xyz...</i>&lang;\nwhite-space&rang; <b><br>\nt&nbsp;</b><i>xyz... dummy-arg</i>&lang;\nwhite-space&rang;</p>\n\n<p style=\"margin-left:22%;\">Print a word, i.e., a sequence\nof glyphs with single-letter names <i>x</i>, <i>y</i>,\n<i>z</i>, etc., terminated by a space character or a line\nbreak; an optional second integer argument is ignored (this\nallows the formatter to generate an even number of\narguments). The first glyph should be printed at the current\nposition, the current horizontal position should then be\nincreased by the width of the first glyph, and so on for\neach glyph. The widths of the glyph are read from the font\nfile, scaled for the current point size, and rounded to a\nmultiple of the horizontal resolution. Special characters\n(glyphs with names longer than a single letter) cannot be\nprinted using this command; use the <b>C</b> command for\nthose glyphs. This command is a <i>groff</i> extension; it\nis only used for devices whose <i>DESC</i> file contains the\n<b>tcommand</b> keyword; see <a href=\"https://man.page/5/groff_font\">groff_font(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>u&nbsp;</b><i>n\nxyz...</i>&lang; white-space&rang;</p>\n\n<p style=\"margin-left:22%;\">Print word with track kerning.\nThis is the same as the <b>t</b> command except that after\nprinting each glyph, the current horizontal position is\nincreased by the sum of the width of that glyph\nand&nbsp;<i>n</i> (an integer in basic units&nbsp;<b>u</b>).\nThis command is a <i>groff</i> extension; it is only used\nfor devices whose <i>DESC</i> file contains the\n<b>tcommand</b> keyword; see <a href=\"https://man.page/5/groff_font\">groff_font(5)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>V&nbsp;</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move down to the absolute vertical\nposition&nbsp;<i>n</i> (a non-negative integer in basic\nunits&nbsp;<b>u</b>) relative to upper edge of current\npage.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>v&nbsp;</b><i>n</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move <i>n</i> basic units&nbsp;<b>u</b> down (<i>n</i>\nis a non-negative integer). [CSTR&nbsp;#54] allows negative\nvalues for <i>n</i> also, but <i>groff</i> doesn&rsquo;t use\nthis.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>w&nbsp;</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Informs about a paddable whitespace to increase\nreadability. The spacing itself must be performed explicitly\nby a move command.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Graphics\nCommands</b> <br>\nEach graphics or drawing command in the <i>intermediate\noutput</i> starts with the letter&nbsp;<b>D</b> followed by\none or two characters that specify a subcommand; this is\nfollowed by a fixed or variable number of integer arguments\nthat are separated by a single space character. A\n<b>D&nbsp;</b>command may not be followed by another command\non the same line (apart from a comment), so each\n<b>D&nbsp;</b>command is terminated by a <i>syntactical line\nbreak</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>troff</b>\noutput follows the classical spacing rules (no space between\ncommand and subcommand, all arguments are preceded by a\nsingle space character), but the parser allows optional\nspace between the command letters and makes the space before\nthe first argument optional. As usual, each space can be any\nsequence of tab and space characters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some graphics\ncommands can take a variable number of arguments. In this\ncase, they are integers representing a size measured in\nbasic units&nbsp;<b>u</b>. The <i>h</i> arguments stand for\nhorizontal distances where positive means right, negative\nleft. The <i>v</i> arguments stand for vertical distances\nwhere positive means down, negative up. All these distances\nare offsets relative to the current location.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unless\nindicated otherwise, each graphics command directly\ncorresponds to a similar <i>groff</i> <b>\\D</b> escape\nsequence; see <a href=\"https://man.page/7/groff\">groff(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unknown\n<b>D&nbsp;</b>commands are assumed to be device-specific.\nIts arguments are parsed as strings; the whole information\nis then sent to the postprocessor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing command reference, the syntax element <i>&lang;\nline-break&rang;</i> means a <i>syntactical line break</i>\nas defined in subsection &ldquo;Separation&rdquo; above.\n<b><br>\nD~&nbsp;</b><i>h <small><small>1&nbsp;</small></small> v\n<small><small>1</small></small> h\n<small><small>2&nbsp;</small></small> v\n<small><small>2</small></small></i> ... <i>h\n<small><small>n&nbsp;</small></small> v\n<small><small>n</small></small></i> &lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Draw B-spline from current\nposition to offset (<i>h <small><small>1</small></small></i>\n,&nbsp;<i>v <small><small>1</small></small></i> ), then to\noffset (<i>h <small><small>2</small></small></i> ,&nbsp;<i>v\n<small><small>2</small></small></i> ) if given, etc., up to\n(<i>h <small><small>n</small></small></i> ,&nbsp;<i>v\n<small><small>n</small></small></i> ). This command takes a\nvariable number of argument pairs; the current position is\nmoved to the terminal point of the drawn curve.</p>\n\n<p style=\"margin-left:11%;\"><b>Da&nbsp;</b><i>h\n<small><small>1&nbsp;</small></small> v\n<small><small>1</small></small> h\n<small><small>2&nbsp;</small></small> v\n<small><small>2</small></small></i> &lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Draw arc from current position\nto (<i>h <small><small>1</small></small></i> ,&nbsp;<i>v\n<small><small>1</small></small></i> )+(<i>h\n<small><small>2</small></small></i> ,&nbsp;<i>v\n<small><small>2</small></small></i> ) with center at (<i>h\n<small><small>1</small></small></i> ,&nbsp;<i>v\n<small><small>1</small></small></i> ); then move the current\nposition to the final point of the arc.</p>\n\n<p style=\"margin-left:11%;\"><b>DC&nbsp;</b><i>d</i>&lang;\nline-break&rang; <b><br>\nDC&nbsp;</b><i>d dummy-arg</i>&lang; line-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Draw a solid circle using the\ncurrent fill color with diameter&nbsp;<i>d</i> (integer in\nbasic units&nbsp;<b>u</b>) with leftmost point at the\ncurrent position; then move the current position to the\nrightmost point of the circle. An optional second integer\nargument is ignored (this allows the formatter to generate\nan even number of arguments). This command is a <i>groff</i>\nextension.</p>\n\n<p style=\"margin-left:11%;\"><b>Dc&nbsp;</b><i>d</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Draw circle line with\ndiameter&nbsp;<i>d</i> (integer in basic\nunits&nbsp;<b>u</b>) with leftmost point at the current\nposition; then move the current position to the rightmost\npoint of the circle.</p>\n\n<p style=\"margin-left:11%;\"><b>DE&nbsp;</b><i>h v</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Draw a solid ellipse in the\ncurrent fill color with a horizontal diameter\nof&nbsp;<i>h</i> and a vertical diameter of&nbsp;<i>v</i>\n(both integers in basic units&nbsp;<b>u</b>) with the\nleftmost point at the current position; then move to the\nrightmost point of the ellipse. This command is a\n<i>groff</i> extension.</p>\n\n<p style=\"margin-left:11%;\"><b>De&nbsp;</b><i>h v</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Draw an outlined ellipse with a\nhorizontal diameter of&nbsp;<i>h</i> and a vertical diameter\nof&nbsp;<i>v</i> (both integers in basic\nunits&nbsp;<b>u</b>) with the leftmost point at current\nposition; then move to the rightmost point of the\nellipse.</p>\n\n\n<p style=\"margin-left:11%;\"><b>DF&nbsp;</b><i>color-scheme</i>\n[<i>component ...</i>]&lang; line-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Set fill color for solid\ndrawing objects using different color schemes; the analogous\ncommand for setting the color of text, line graphics, and\nthe outline of graphic objects is <b>m</b>. The color\ncomponents are specified as integer arguments between 0 and\n65536. The number of color components and their meaning vary\nfor the different color schemes. These commands are\ngenerated by the <i>groff</i> escape sequences\n<b>\\D&rsquo;F&nbsp;</b>...<b>&rsquo;</b> and <b>\\M</b> (with\nno other corresponding graphics commands). No position\nchanging. This command is a <i>groff</i> extension. <b><br>\nDFc&nbsp;</b><i>cyan magenta yellow</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects using the CMY color scheme, having the\n3&nbsp;color components cyan, magenta, and yellow.</p>\n\n<p style=\"margin-left:22%;\"><b>DFd&nbsp;</b>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects to the default fill color value (black in\nmost cases). No component arguments.</p>\n\n\n<p style=\"margin-left:22%;\"><b>DFg&nbsp;</b><i>gray</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects to the shade of gray given by the argument,\nan integer between 0 (black) and 65536 (white).</p>\n\n<p style=\"margin-left:22%;\"><b>DFk&nbsp;</b><i>cyan magenta\nyellow black</i>&lang; line-break&rang;</p>\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects using the CMYK color scheme, having the\n4&nbsp;color components cyan, magenta, yellow, and\nblack.</p>\n\n<p style=\"margin-left:22%;\"><b>DFr&nbsp;</b><i>red green\nblue</i>&lang; line-break&rang;</p>\n\n<p style=\"margin-left:32%;\">Set fill color for solid\ndrawing objects using the RGB color scheme, having the\n3&nbsp;color components red, green, and blue.</p>\n\n<p style=\"margin-left:11%;\"><b>Df&nbsp;</b><i>n</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">The argument <i>n</i> must be\nan integer in the range -32767 to 32767. <br>\n0&le;<i>n</i>&le;1000</p>\n\n<p style=\"margin-left:32%;\">Set the color for filling solid\ndrawing objects to a shade of gray, where 0 corresponds to\nsolid white, 1000 (the default) to solid black, and values\nin between to intermediate shades of gray; this is obsoleted\nby command <b>DFg</b>.</p>\n\n<p style=\"margin-left:22%;\"><i>n</i>&lt;0 or\n<i>n</i>&gt;1000</p>\n\n<p style=\"margin-left:32%;\">Set the filling color to the\ncolor that is currently being used for the text and the\noutline, see command <b>m</b>. For example, the command\nsequence</p>\n\n<p style=\"margin-left:43%; margin-top: 1em\">mg 0 0 65536\n<br>\nDf -1</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">sets all colors\nto blue.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">No position\nchanging. This command is a <i>groff</i> extension.</p>\n\n<p style=\"margin-left:11%;\"><b>Dl&nbsp;</b><i>h v</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Draw line from current position\nto offset (<i>h</i>,&nbsp;<i>v</i>) (integers in basic\nunits&nbsp;<b>u</b>); then set current position to the end\nof the drawn line.</p>\n\n<p style=\"margin-left:11%;\"><b>Dp&nbsp;</b><i>h\n<small><small>1&nbsp;</small></small> v\n<small><small>1</small></small> h\n<small><small>2&nbsp;</small></small> v\n<small><small>2</small></small></i> ... <i>h\n<small><small>n&nbsp;</small></small> v\n<small><small>n</small></small></i> &lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Draw a polygon line from\ncurrent position to offset (<i>h\n<small><small>1</small></small></i> ,&nbsp;<i>v\n<small><small>1</small></small></i> ), from there to offset\n(<i>h <small><small>2</small></small></i> ,&nbsp;<i>v\n<small><small>2</small></small></i> ), etc., up to offset\n(<i>h <small><small>n</small></small></i> ,&nbsp;<i>v\n<small><small>n</small></small></i> ), and from there back\nto the starting position. For historical reasons, the\nposition is changed by adding the sum of all arguments with\nodd index to the actual horizontal position and the even\nones to the vertical position. Although this doesn&rsquo;t\nmake sense it is kept for compatibility. This command is a\n<i>groff</i> extension.</p>\n\n<p style=\"margin-left:11%;\"><b>DP&nbsp;</b><i>h\n<small><small>1&nbsp;</small></small> v\n<small><small>1</small></small> h\n<small><small>2&nbsp;</small></small> v\n<small><small>2</small></small></i> ... <i>h\n<small><small>n&nbsp;</small></small> v\n<small><small>n</small></small></i> &lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">The same macro as the\ncorresponding <b>Dp</b> command with the same arguments, but\ndraws a solid polygon in the current fill color rather than\nan outlined polygon. The position is changed in the same way\nas with <b>Dp</b>. This command is a <i>groff</i>\nextension.</p>\n\n<p style=\"margin-left:11%;\"><b>Dt&nbsp;</b><i>n</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">Set the current line thickness\nto&nbsp;<i>n</i> (an integer in basic units&nbsp;<b>u</b>)\nif <i>n</i>&gt;0; if <i>n</i>=0 select the smallest\navailable line thickness; if <i>n</i>&lt;0 set the line\nthickness proportional to the point size (this is the\ndefault before the first <b>Dt</b> command was specified).\nFor historical reasons, the horizontal position is changed\nby adding the argument to the actual horizontal position,\nwhile the vertical position is not changed. Although this\ndoesn&rsquo;t make sense it is kept for compatibility. This\ncommand is a <i>groff</i> extension.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Device\nControl Commands</b> <br>\nEach device control command starts with the letter <b>x</b>\nfollowed by a space character (optional or arbitrary\nspace/tab in <i>groff</i>) and a subcommand letter or word;\neach argument (if any) must be preceded by a <i>syntactical\nspace</i>. All <b>x</b> commands are terminated by a\n<i>syntactical line break</i>; no device control command can\nbe followed by another command on the same line (except a\ncomment).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The subcommand\nis basically a single letter, but to increase readability,\nit can be written as a word, i.e., an arbitrary sequence of\ncharacters terminated by the next tab, space, or newline\ncharacter. All characters of the subcommand word but the\nfirst are simply ignored. For example, <b>troff</b> outputs\nthe initialization command <b>x&nbsp;i</b> as\n<b>x&nbsp;init</b> and the resolution command\n<b>x&nbsp;r</b> as <b>x&nbsp;res</b>. But writings like\n<b>x&nbsp;i_like_groff</b> and <b>x&nbsp;roff_is_groff</b>\nare accepted as well to mean the same commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing, the syntax element <i>&lang; line-break&rang;</i>\nmeans a <i>syntactical line break</i> as defined in\nsubsection &ldquo;Separation&rdquo; above. <b><br>\nxF&nbsp;</b><i>name</i>&lang; line-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>Filename</i> control\ncommand) <br>\nUse <i>name</i> as the intended name for the current file in\nerror reports. This is useful for remembering the original\nfile name when <b>groff</b> uses an internal piping\nmechanism. The input file is not changed by this command.\nThis command is a <i>groff</i> extension.</p>\n\n\n<p style=\"margin-left:11%;\"><b>xf&nbsp;</b><i>n&nbsp;s</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>font</i> control command)\n<br>\nMount font position&nbsp;<i>n</i> (a non-negative integer)\nwith font named&nbsp;<i>s</i> (a text word); see\n<a href=\"https://man.page/5/groff_font\">groff_font(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>xH&nbsp;</b><i>n</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>Height</i> control command)\n<br>\nSet character height to&nbsp;<i>n</i> (a positive integer in\nscaled points&nbsp;<b>z</b>). <i>Classical troff</i> used\nthe unit points (<b>p</b>) instead; see section\n&ldquo;Compatibility&rdquo; below.</p>\n\n<p style=\"margin-left:11%;\"><b>xi&nbsp;</b>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>init</i> control command)\n<br>\nInitialize device. This is the third command of the\n<i>prologue</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>xp&nbsp;</b>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>pause</i> control command)\n<br>\nParsed but ignored. The classical documentation reads\n<i>pause device, can be restarted</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>xr&nbsp;</b><i>n&nbsp;h&nbsp;v</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>resolution</i> control\ncommand) <br>\nResolution is&nbsp;<i>n</i>, while <i>h</i> is the minimal\nhorizontal motion, and <i>v</i> the minimal vertical motion\npossible with this device; all arguments are positive\nintegers in basic units&nbsp;<b>u</b> per inch. This is the\nsecond command of the <i>prologue</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>xS&nbsp;</b><i>n</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>Slant</i> control command)\n<br>\nSet slant to&nbsp;<i>n</i> degrees (an integer in basic\nunits&nbsp;<b>u</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>xs&nbsp;</b>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>stop</i> control command)\n<br>\nTerminates the processing of the current file; issued as the\nlast command of any <i>intermediate troff output</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>xt&nbsp;</b>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>trailer</i> control\ncommand) <br>\nGenerate trailer information, if any. In <b>groff</b>, this\nis actually just ignored.</p>\n\n\n<p style=\"margin-left:11%;\"><b>xT&nbsp;</b><i>xxx</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>Typesetter</i> control\ncommand) <br>\nSet name of device to word <i>xxx</i>, a sequence of\ncharacters ended by the next whitespace character. The\npossible device names coincide with those from the groff\n<b>-T</b> option. This is the first command of the\n<i>prologue</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>xu&nbsp;</b><i>n</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>underline</i> control\ncommand) <br>\nConfigure underlining of spaces. If <i>n</i> is&nbsp;1,\nstart underlining of spaces; if <i>n</i> is&nbsp;0, stop\nunderlining of spaces. This is needed for the <b>cu</b>\nrequest in <b>nroff</b> mode and is ignored otherwise. This\ncommand is a <i>groff</i> extension.</p>\n\n\n<p style=\"margin-left:11%;\"><b>xX&nbsp;</b><i>anything</i>&lang;\nline-break&rang;</p>\n\n<p style=\"margin-left:22%;\">(<i>X-escape</i> control\ncommand) <br>\nSend string <i>anything</i> uninterpreted to the device. If\nthe line following this command starts with a <b>+</b>\ncharacter this line is interpreted as a continuation line in\nthe following sense. The <b>+</b> is ignored, but a newline\ncharacter is sent instead to the device, the rest of the\nline is sent uninterpreted. The same applies to all\nfollowing lines until the first character of a line is not a\n<b>+</b> character. This command is generated by the\n<i>groff</i> escape sequence <b>\\X</b>. The line-continuing\nfeature is a <i>groff</i> extension.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Obsolete\nCommand</b> <br>\nIn <i>classical troff</i> output, emitting a single glyph\nwas mostly done by a very strange command that combined a\nhorizontal move and the printing of a glyph. It didn&rsquo;t\nhave a command code, but is represented by a 3-character\nargument consisting of exactly 2&nbsp;digits and a\ncharacter.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>ddc</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Move right <i>dd</i> (exactly two decimal digits) basic\nunits&nbsp;<b>u</b>, then print glyph with single-letter\nname&nbsp;<i>c</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In\n<i>groff</i>, arbitrary <i>syntactical space</i> around and\nwithin this command is allowed to be added. Only when a\npreceding command on the same line ends with an argument of\nvariable length a separating space is obligatory. In\n<i>classical troff</i>, large clusters of these and other\ncommands were used, mostly without spaces; this made such\noutput almost unreadable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For modern\nhigh-resolution devices, this command does not make sense\nbecause the width of the glyphs can become much larger than\ntwo decimal digits. In <b>groff</b>, this is only used for\nthe devices <b>X75</b>, <b>X75-12</b>, <b>X100</b>, and\n<b>X100-12</b>. For other devices, the commands <b>t</b>\nand&nbsp;<b>u</b> provide a better functionality.</p>\n\n<h2>POSTPROCESSING\n<a name=\"POSTPROCESSING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>roff</i>\npostprocessors are programs that have the task to translate\nthe <i>intermediate output</i> into actions that are sent to\na device. A device can be some piece of hardware such as a\nprinter, or a software file format suitable for graphical or\ntext processing. The <i>groff</i> system provides powerful\nmeans that make the programming of such postprocessors an\neasy task.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is a\nlibrary function that parses the <i>intermediate output</i>\nand sends the information obtained to the device via methods\nof a class with a common interface for each device. So a\n<i>groff</i> postprocessor must only redefine the methods of\nthis class. For details, see the reference in section\n&ldquo;Files&rdquo; below.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This section\npresents the <i>intermediate output</i> generated from the\nsame input for three different devices. The input is the\nsentence <i>hell world</i> fed into <b>groff</b> on the\ncommand line.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">High-resolution device\n<i>ps</i></p> </td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>shell&gt;</b>\necho &quot;hell world&quot; | groff -Z -T ps</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>x T ps <br>\nx res 72000 1 1 <br>\nx init <br>\np1 <br>\nx font 5 TR <br>\nf5 <br>\ns10000 <br>\nV12000 <br>\nH72000 <br>\nthell <br>\nwh2500 <br>\ntw <br>\nH96620 <br>\ntorld <br>\nn12000 0 <br>\nx trailer <br>\nV792000 <br>\nx stop</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This output can\nbe fed into the postprocessor <a href=\"https://man.page/1/grops\">grops(1)</a> to get its\nrepresentation as a PostScript file, or <a href=\"https://man.page/1/gropdf\">gropdf(1)</a> to\noutput directly to PDF.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"43%\">\n\n\n<p style=\"margin-top: 1em\">Low-resolution device\n<i>latin1</i></p> </td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:14%; margin-top: 1em\">This is similar\nto the high-resolution device except that the positioning is\ndone at a minor scale. Some comments (lines starting with\n<i>#</i>) were added for clarification; they were not\ngenerated by the formatter.</p>\n\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>shell&gt;</b>\n&quot;hell world&quot; | groff -Z -T latin1</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\"><i>#\nprologue</i> <b><br>\nx T latin1 <br>\nx res 240 24 40 <br>\nx init</b> <i><br>\n# begin a new page</i> <b><br>\np1</b> <i><br>\n# font setup</i> <b><br>\nx font 1 R <br>\nf1 <br>\ns10</b> <i><br>\n# initial positioning on the page</i> <b><br>\nV40 <br>\nH0</b> <i><br>\n# write text &rsquo;hell&rsquo;</i> <b><br>\nthell</b> <i><br>\n# inform about a space, and do it by a horizontal jump</i>\n<b><br>\nwh24</b> <i><br>\n# write text &rsquo;world&rsquo;</i> <b><br>\ntworld</b> <i><br>\n# announce line break, but do nothing because ...</i>\n<b><br>\nn40 0</b> <i><br>\n# ... the end of the document has been reached</i> <b><br>\nx trailer <br>\nV2640 <br>\nx stop</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This output can\nbe fed into the postprocessor <a href=\"https://man.page/1/grotty\">grotty(1)</a> to get a\nformatted text document.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">Classical style output</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:14%; margin-top: 1em\">As a computer\nmonitor has a very low resolution compared to modern\nprinters the <i>intermediate output</i> for the\nX&nbsp;devices can use the jump-and-write command with its\n2-digit displacements.</p>\n\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>shell&gt;</b>\n&quot;hell world&quot; | groff -Z -T X100</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>x T X100\n<br>\nx res 100 1 1 <br>\nx init <br>\np1 <br>\nx font 5 TR <br>\nf5 <br>\ns10 <br>\nV16 <br>\nH100</b> <i><br>\n# write text with old-style jump-and-write command</i>\n<b><br>\nch07e07l03lw06w11o07r05l03dh7 <br>\nn16 0 <br>\nx trailer <br>\nV1100 <br>\nx stop</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This output can\nbe fed into the postprocessor <b>xditview</b>(1x) or\n<a href=\"https://man.page/1/gxditview\">gxditview(1)</a> for displaying in&nbsp;X.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Due to the\nobsolete jump-and-write command, the text clusters in the\nclassical output are almost unreadable.</p>\n\n<h2>COMPATIBILITY\n<a name=\"COMPATIBILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>intermediate output</i> language of the <i>classical\ntroff</i> was first documented in [CSTR&nbsp;#97] . The\n<i>groff intermediate output</i> format is compatible with\nthis specification except for the following features.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">The classical quasi device\nindependence is not yet implemented.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The old hardware was very different from what we use\ntoday. So the <i>groff</i> devices are also fundamentally\ndifferent from the ones in <i>classical troff</i>. For\nexample, the classical PostScript device was called\n<i>post</i> and had a resolution of 720 units per inch,\nwhile <i>groff</i>&rsquo;s <i>ps</i> device has a resolution\nof 72000 units per inch. Maybe, by implementing some\nrescaling mechanism similar to the classical quasi device\nindependence, these could be integrated into modern\n<i>groff</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The B-spline command <b>D~</b> is correctly handled by\nthe <i>intermediate output</i> parser, but the drawing\nroutines aren&rsquo;t implemented in some of the\npostprocessor programs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The argument of the commands <b>s</b> and <b>x H</b> has\nthe implicit unit scaled point&nbsp;<b>z</b> in\n<i>groff</i>, while <i>classical troff</i> had point\n(<b>p</b>). This isn&rsquo;t an incompatibility, but a\ncompatible extension, for both units coincide for all\ndevices without a <i>sizescale</i> parameter, including all\nclassical and the <i>groff</i> text devices. The few\n<i>groff</i> devices with a sizescale parameter either did\nnot exist, had a different name, or seem to have had a\ndifferent resolution. So conflicts with classical devices\nare very unlikely.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The position changing after the commands <b>Dp</b>,\n<b>DP</b>, and <b>Dt</b> is illogical, but as old versions\nof groff used this feature it is kept for compatibility\nreasons.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The differences\nbetween <i>groff</i> and <i>classical troff</i> are\ndocumented in <a href=\"https://man.page/7/groff_diff\">groff_diff(7)</a>.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/usr/share/groff/1.22.4/font/dev</i>name<i>/DESC</i></p>\n\n<p style=\"margin-left:22%;\">Device description file for\ndevice <i>name</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>src/libs/libdriver/input.cpp</i></p>\n\n<p style=\"margin-left:22%;\">Defines the parser and\npostprocessor for the <i>intermediate output</i>. It is\nlocated relative to the top directory of the <i>groff</i>\nsource tree. This parser is the definitive specification of\nthe <i>groff intermediate output</i> format.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">James Clark\nwrote an early version of this document, which described\nonly the differences between <a href=\"https://man.page/7/ditroff\">ditroff(7)</a>&rsquo;s\noutput format and that of GNU <i>roff</i>. The present\nversion was completely rewritten in 2001 by\n<a href=\"mailto:groff-bernd.warken-72@web.de\">Bernd\nWarken</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A reference\nlike <a href=\"https://man.page/7/groff\">groff(7)</a> refers to a manual page; here\n<b>groff</b> in section&nbsp;<i>7</i> of the man page\ndocumentation system. To read the example, look up\nsection&nbsp;7 in your desktop help system or call from the\nshell prompt</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>shell&gt;</b>\nman 7 groff</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For more\ndetails, see <a href=\"https://man.page/1/man\">man(1)</a>. <b><br>\ngroff</b>(1)</p>\n\n<p style=\"margin-left:22%;\">option <b>-Z</b> and further\nreadings on groff.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/7/groff\">groff(7)</a></p>\n\n<p style=\"margin-left:22%;\">for details of the <i>groff</i>\nlanguage such as numerical units and escape sequences.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/5/groff_font\">groff_font(5)</a></p>\n\n<p style=\"margin-left:22%;\">for details on the device\nscaling parameters of the <i>DESC</i> file.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/1/troff\">troff(1)</a></p>\n\n<p style=\"margin-left:22%;\">generates the\ndevice-independent intermediate output.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/7/roff\">roff(7)</a></p>\n\n<p style=\"margin-left:22%;\">for historical aspects and the\ngeneral structure of roff systems.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/7/groff_diff\">groff_diff(7)</a></p>\n\n<p style=\"margin-left:22%;\">The differences between the\nintermediate output in groff and classical troff.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/1/gxditview\">gxditview(1)</a></p>\n\n<p style=\"margin-left:22%;\">Viewer for the <i>intermediate\noutput</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/grodvi\">grodvi(1)</a>,\n<a href=\"https://man.page/1/grohtml\">grohtml(1)</a>, <a href=\"https://man.page/1/grolbp\">grolbp(1)</a>, <a href=\"https://man.page/1/grolj4\">grolj4(1)</a>,\n<a href=\"https://man.page/1/grops\">grops(1)</a>, <a href=\"https://man.page/1/grotty\">grotty(1)</a></p>\n\n<p style=\"margin-left:22%;\">the groff postprocessor\nprograms.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Groff: The\nGNU Implementation of troff</i>, by Trent A. Fisher and\nWerner Lemberg, is the primary <i>groff</i> manual. You can\nbrowse it interactively with &ldquo;info groff&rdquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>classical troff output language</i> is described in two\nAT&amp;T Bell Labs CSTR documents available on-line at\n<a href=\"http://cm.bell-labs.com/cm/cs/cstr.html\">Bell Labs\nCSTR site</a>. <br>\n[CSTR #97]</p>\n\n<p style=\"margin-left:22%;\"><i>A Typesetter-independent\nTROFF</i> by <i>Brian Kernighan</i> is the original and most\ncomprehensive documentation on the output language; see\n<a href=\"http://cm.bell-labs.com/cm/cs/cstr/97.ps.gz\">CSTR&nbsp;#97</a>.</p>\n\n<p style=\"margin-left:11%;\">[CSTR&nbsp;#54]</p>\n\n<p style=\"margin-left:22%;\">The 1992 revision of the\n<i>Nroff/Troff User&rsquo;s Manual</i> by <i>J. F.\nOssanna</i> and <i>Brian Kernighan</i> isn&rsquo;t as\ncomprehensive as [CSTR&nbsp;#97] regarding the output\nlanguage; see\n<a href=\"http://cm.bell-labs.com/cm/cs/cstr/54.ps.gz\">CSTR&nbsp;#54</a>.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#LANGUAGE CONCEPTS\">LANGUAGE CONCEPTS</a>","<a href=\"#COMMAND REFERENCE\">COMMAND REFERENCE</a>","<a href=\"#POSTPROCESSING\">POSTPROCESSING</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#COMPATIBILITY\">COMPATIBILITY</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":5}