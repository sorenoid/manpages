{"name":"sss-certmap","body":"\n\n<h1 align=\"center\">SSS-CERTMAP</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sss-certmap -\nSSSD Certificate Matching and Mapping Rules</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The manual page\ndescribes the rules which can be used by SSSD and other\ncomponents to match X.509 certificates and map them to\naccounts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each rule has\nfour components, a &ldquo;priority&rdquo;, a &ldquo;matching\nrule&rdquo;, a &ldquo;mapping rule&rdquo; and a\n&ldquo;domain list&rdquo;. All components are optional. A\nmissing &ldquo;priority&rdquo; will add the rule with the\nlowest priority. The default &ldquo;matching rule&rdquo;\nwill match certificates with the digitalSignature key usage\nand clientAuth extended key usage. If the &ldquo;mapping\nrule&rdquo; is empty the certificates will be searched in\nthe userCertificate attribute as DER encoded binary. If no\ndomains are given only the local domain will be\nsearched.</p>\n\n<h2>RULE COMPONENTS\n<a name=\"RULE COMPONENTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>PRIORITY</b>\n<br>\nThe rules are processed by priority while the number '0'\n(zero) indicates the highest priority. The higher the number\nthe lower is the priority. A missing value indicates the\nlowest priority. The rules processing is stopped when a\nmatched rule is found and no further rules are checked.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Internally the\npriority is treated as unsigned 32bit integer, using a\npriority value larger than 4294967295 will cause an\nerror.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If multiple\nrules have the same priority and only one of the related\nmatching rules applies, this rule will be chosen. If there\nare multiple rules with the same priority which matches, one\nis chosen but which one is undefined. To avoid this\nundefined behavior either use different priorities or make\nthe matching rules more specific e.g. by using distinct\n&lt;ISSUER&gt; patterns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MATCHING\nRULE</b> <br>\nThe matching rule is used to select a certificate to which\nthe mapping rule should be applied. It uses a system similar\nto the one used by &ldquo;pkinit_cert_match&rdquo; option of\nMIT Kerberos. It consists of a keyword enclosed by '&lt;'\nand '&gt;' which identified a certain part of the\ncertificate and a pattern which should be found for the rule\nto match. Multiple keyword pattern pairs can be either\njoined with '&amp;&amp;' (and) or '||' (or).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The available\noptions are:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SUBJECT&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">With this a part or the whole\nsubject name of the certificate can be matched. For the\nmatching POSIX Extended Regular Expression syntax is used,\nsee regex(7) for details.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For the\nmatching the subject name stored in the certificate in DER\nencoded ASN.1 is converted into a string according to RFC\n4514. This means the most specific name component comes\nfirst. Please note that not all possible attribute names are\ncovered by RFC 4514. The names included are 'CN', 'L', 'ST',\n'O', 'OU', 'C', 'STREET', 'DC' and 'UID'. Other attribute\nnames might be shown differently on different platform and\nby different tools. To avoid confusion those attribute names\nare best not used or covered by a suitable\nregular-expression.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SUBJECT&gt;.*,DC=MY,DC=DOMAIN</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Please note\nthat the characters &quot;^.[$()|*+?{\\&quot; have a special\nmeaning in regular expressions and must be escaped with the\nhelp of the '\\' character so that they are matched as\nordinary characters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SUBJECT&gt;^CN=.* \\(Admin\\),DC=MY,DC=DOMAIN$</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;ISSUER&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">With this a part or the whole\nissuer name of the certificate can be matched. All comments\nfor &lt;SUBJECT&gt; apply her as well.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;ISSUER&gt;^CN=My-CA,DC=MY,DC=DOMAIN$</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;KU&gt;key-usage</p>\n\n<p style=\"margin-left:17%;\">This option can be used to\nspecify which key usage values the certificate should have.\nThe following values can be used in a comma separated\nlist:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\ndigitalSignature</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nnonRepudiation</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nkeyEncipherment</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\ndataEncipherment</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nkeyAgreement</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nkeyCertSign</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\ncRLSign</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nencipherOnly</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\ndecipherOnly</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A numerical\nvalue in the range of a 32bit unsigned integer can be used\nas well to cover special use cases.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;KU&gt;digitalSignature,keyEncipherment</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;EKU&gt;extended-key-usage</p>\n\n<p style=\"margin-left:17%;\">This option can be used to\nspecify which extended key usage the certificate should\nhave. The following value can be used in a comma separated\nlist:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nserverAuth</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nclientAuth</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\ncodeSigning</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nemailProtection</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\ntimeStamping</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nOCSPSigning</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nKPClientAuth</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\npkinit</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull;\nmsScLogin</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Extended key\nusages which are not listed above can be specified with\ntheir OID in dotted-decimal notation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;EKU&gt;clientAuth,1.3.6.1.5.2.3.4</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">To be compatible with the usage\nof MIT Kerberos this option will match the Kerberos\nprincipals in the PKINIT or AD NT Principal SAN as\n&lt;SAN:Principal&gt; does.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN&gt;.*@MY\\.REALM</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:Principal&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the Kerberos principals\nin the PKINIT or AD NT Principal SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:Principal&gt;.*@MY\\.REALM</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:ntPrincipalName&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the Kerberos principals\nfrom the AD NT Principal SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:ntPrincipalName&gt;.*@MY.AD.REALM</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:pkinit&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the Kerberos principals\nfrom the PKINIT SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:ntPrincipalName&gt;.*@MY\\.PKINIT\\.REALM</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:dotted-decimal-oid&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Take the value of the otherName\nSAN component given by the OID in dotted-decimal notation,\ninterpret it as string and try to match it against the\nregular expression.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:1.2.3.4&gt;test</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:otherName&gt;base64-string</p>\n\n<p style=\"margin-left:17%;\">Do a binary match with the\nbase64 encoded blob against all otherName SAN components.\nWith this option it is possible to match against custom\notherName components with special encodings which could not\nbe treated as strings.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:otherName&gt;MTIz</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:rfc822Name&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the value of the\nrfc822Name SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:rfc822Name&gt;.*@email\\.domain</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:dNSName&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the value of the dNSName\nSAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:dNSName&gt;.*\\.my\\.dns\\.domain</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:x400Address&gt;base64-string</p>\n\n<p style=\"margin-left:17%;\">Binary match the value of the\nx400Address SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:x400Address&gt;MTIz</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:directoryName&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the value of the\ndirectoryName SAN. The same comments as given for\n&lt;ISSUER&gt; and &lt;SUBJECT&gt; apply here as well.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:directoryName&gt;.*,DC=com</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:ediPartyName&gt;base64-string</p>\n\n<p style=\"margin-left:17%;\">Binary match the value of the\nediPartyName SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:ediPartyName&gt;MTIz</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:uniformResourceIdentifier&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the value of the\nuniformResourceIdentifier SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:uniformResourceIdentifier&gt;URN:.*</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:iPAddress&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the value of the\niPAddress SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:iPAddress&gt;192\\.168\\..*</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;SAN:registeredID&gt;regular-expression</p>\n\n<p style=\"margin-left:17%;\">Match the value of the\nregisteredID SAN as dotted-decimal string.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n&lt;SAN:registeredID&gt;1\\.2\\.3\\..*</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MAPPING\nRULE</b> <br>\nThe mapping rule is used to associate a certificate with one\nor more accounts. A Smartcard with the certificate and the\nmatching private key can then be used to authenticate as one\nof those accounts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently SSSD\nbasically only supports LDAP to lookup user information (the\nexception is the proxy provider which is not of relevance\nhere). Because of this the mapping rule is based on LDAP\nsearch filter syntax with templates to add certificate\ncontent to the filter. It is expected that the filter will\nonly contain the specific data needed for the mapping and\nthat the caller will embed it in another filter to do the\nactual search. Because of this the filter string should\nstart and stop with '(' and ')' respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general it\nis recommended to use attributes from the certificate and\nadd them to special attributes to the LDAP user object. E.g.\nthe 'altSecurityIdentities' attribute in AD or the\n'ipaCertMapData' attribute for IPA can be used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This should be\npreferred to read user specific data from the certificate\nlike e.g. an email address and search for it in the LDAP\nserver. The reason is that the user specific data in LDAP\nmight change for various reasons would break the mapping. On\nthe other hand it would be hard to break the mapping on\npurpose for a specific user.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The templates\nto add certificate data to the search filter are based on\nPython-style formatting strings. They consist of a keyword\nin curly braces with an optional sub-component specifier\nseparated by a '.' or an optional conversion/formatting\noption separated by a '!'. Allowed values are:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{issuer_dn[!((ad|ad_x500)|ad_ldap|nss_x500|(nss|nss_ldap))]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the full\nissuer DN converted to a string according to RFC 4514. If\nX.500 ordering (most specific RDN comes last) an option with\nthe '_x500' prefix should be used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The conversion\noptions starting with 'ad_' will use attribute names as used\nby AD, e.g. 'S' instead of 'ST'.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The conversion\noptions starting with 'nss_' will use attribute names as\nused by NSS.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\nconversion option is 'nss', i.e. attribute names according\nto NSS and LDAP/RFC 4514 ordering.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(ipacertmapdata=X509:&lt;I&gt;{issuer_dn!ad}&lt;S&gt;{subject_dn!ad})</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_dn[!((ad|ad_x500)|ad_ldap|nss_x500|(nss|nss_ldap))]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the full\nsubject DN converted to string according to RFC 4514. If\nX.500 ordering (most specific RDN comes last) an option with\nthe '_x500' prefix should be used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The conversion\noptions starting with 'ad_' will use attribute names as used\nby AD, e.g. 'S' instead of 'ST'.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The conversion\noptions starting with 'nss_' will use attribute names as\nused by NSS.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\nconversion option is 'nss', i.e. attribute names according\nto NSS and LDAP/RFC 4514 ordering.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(ipacertmapdata=X509:&lt;I&gt;{issuer_dn!nss_x500}&lt;S&gt;{subject_dn!nss_x500})</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{cert[!(bin|base64)]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nwhole DER encoded certificate as a string to the search\nfilter. Depending on the conversion option the binary\ncertificate is either converted to an escaped hex sequence\n'\\xx' or base64. The escaped hex sequence is the default and\ncan e.g. be used with the LDAP attribute\n'userCertificate;binary'.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(userCertificate;binary={cert!bin})</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_principal[.short_name]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nKerberos principal which is taken either from the SAN used\nby pkinit or the one used by AD. The 'short_name' component\nrepresents the first part of the principal before the '@'\nsign.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(|(userPrincipal={subject_principal})(samAccountName={subject_principal.short_name}))</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_pkinit_principal[.short_name]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nKerberos principal which is given by the SAN used by pkinit.\nThe 'short_name' component represents the first part of the\nprincipal before the '@' sign.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(|(userPrincipal={subject_pkinit_principal})(uid={subject_pkinit_principal.short_name}))</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_nt_principal[.short_name]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nKerberos principal which is given by the SAN used by AD. The\n'short_name' component represent the first part of the\nprincipal before the '@' sign.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(|(userPrincipalName={subject_nt_principal})(samAccountName={subject_nt_principal.short_name}))</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_rfc822_name[.short_name]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nstring which is stored in the rfc822Name component of the\nSAN, typically an email address. The 'short_name' component\nrepresents the first part of the address before the '@'\nsign.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(|(mail={subject_rfc822_name})(uid={subject_rfc822_name.short_name}))</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_dns_name[.short_name]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nstring which is stored in the dNSName component of the SAN,\ntypically a fully-qualified host name. The 'short_name'\ncomponent represents the first part of the name before the\nfirst '.' sign.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(|(fqdn={subject_dns_name})(host={subject_dns_name.short_name}))</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_uri}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nstring which is stored in the uniformResourceIdentifier\ncomponent of the SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(uri={subject_uri})</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_ip_address}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nstring which is stored in the iPAddress component of the\nSAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(ip={subject_ip_address})</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_x400_address}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nvalue which is stored in the x400Address component of the\nSAN as escaped hex sequence.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(attr:binary={subject_x400_address})</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_directory_name[!((ad|ad_x500)|ad_ldap|nss_x500|(nss|nss_ldap))]}</p>\n\n<p style=\"margin-left:17%;\">This template will add the DN\nstring of the value which is stored in the directoryName\ncomponent of the SAN.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(orig_dn={subject_directory_name})</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_ediparty_name}</p>\n\n<p style=\"margin-left:17%;\">This template will add the\nvalue which is stored in the ediPartyName component of the\nSAN as escaped hex sequence.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(attr:binary={subject_ediparty_name})</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">{subject_registered_id}</p>\n\n<p style=\"margin-left:17%;\">This template will add the OID\nwhich is stored in the registeredID component of the SAN as\na dotted-decimal string.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:\n(oid={subject_registered_id})</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>DOMAIN\nLIST</b> <br>\nIf the domain list is not empty users mapped to a given\ncertificate are not only searched in the local domain but in\nthe listed domains as well as long as they are know by SSSD.\nDomains not know to SSSD will be ignored.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The SSSD\nupstream - https://github.com/SSSD/sssd/</b></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RULE COMPONENTS\">RULE COMPONENTS</a>","<a href=\"#AUTHORS\">AUTHORS</a>"],"level":5}