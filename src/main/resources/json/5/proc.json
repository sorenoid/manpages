{"name":"proc","body":"\n\n<h1 align=\"center\">PROC</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">proc - process\ninformation pseudo-filesystem</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>proc</b>\nfilesystem is a pseudo-filesystem which provides an\ninterface to kernel data structures. It is commonly mounted\nat <i>/proc</i>. Typically, it is mounted automatically by\nthe system, but it can also be mounted manually using a\ncommand such as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">mount -t proc\nproc /proc</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most of the\nfiles in the <b>proc</b> filesystem are read-only, but some\nfiles are writable, allowing kernel variables to be\nchanged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mount\noptions</b> <br>\nThe <b>proc</b> filesystem supports the following mount\noptions: <b><br>\nhidepid</b>=<i>n</i> (since Linux 3.3)</p>\n\n<p style=\"margin-left:22%;\">This option controls who can\naccess the information in <i>/proc/[pid]</i> directories.\nThe argument, <i>n</i>, is one of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>Everybody may access all <i>/proc/[pid]</i> directories.\nThis is the traditional behavior, and the default if this\nmount option is not specified.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>Users may not access files and subdirectories inside any\n<i>/proc/[pid]</i> directories but their own (the\n<i>/proc/[pid]</i> directories themselves remain visible).\nSensitive files such as <i>/proc/[pid]/cmdline</i> and\n<i>/proc/[pid]/status</i> are now protected against other\nusers. This makes it impossible to learn whether any user is\nrunning a specific program (so long as the program\ndoesn&rsquo;t otherwise reveal itself by its behavior).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>As for mode 1, but in addition the <i>/proc/[pid]</i>\ndirectories belonging to other users become invisible. This\nmeans that <i>/proc/[pid]</i> entries can no longer be used\nto discover the PIDs on the system. This doesn&rsquo;t hide\nthe fact that a process with a specific PID value exists (it\ncan be learned by other means, for example, by &quot;kill -0\n$PID&quot;), but it hides a process&rsquo;s UID and GID,\nwhich could otherwise be learned by employing <a href=\"https://man.page/2/stat\">stat(2)</a>\non a <i>/proc/[pid]</i> directory. This greatly complicates\nan attacker&rsquo;s task of gathering information about\nrunning processes (e.g., discovering whether some daemon is\nrunning with elevated privileges, whether another user is\nrunning some sensitive program, whether other users are\nrunning any program at all, and so on).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>gid</b>=<i>gid</i> (since\nLinux 3.3)</p>\n\n<p style=\"margin-left:22%;\">Specifies the ID of a group\nwhose members are authorized to learn process information\notherwise prohibited by <b>hidepid</b> (i.e., users in this\ngroup behave as though <i>/proc</i> was mounted with\n<i>hidepid=0</i>). This group should be used instead of\napproaches such as putting nonroot users into the\n<a href=\"https://man.page/5/sudoers\">sudoers(5)</a> file.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Overview</b>\n<br>\nUnderneath <i>/proc</i>, there are the following general\ngroups of files and subdirectories: <i><br>\n/proc/[pid]</i> subdirectories</p>\n\n<p style=\"margin-left:22%;\">Each one of these\nsubdirectories contains files and subdirectories exposing\ninformation about the process with the corresponding process\nID.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Underneath each\nof the <i>/proc/[pid]</i> directories, a <i>task</i>\nsubdirectory contains subdirectories of the form\n<i>task/[tid]</i>, which contain corresponding information\nabout each of the threads in the process, where <i>tid</i>\nis the kernel thread ID of the thread.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/[pid]</i> subdirectories are visible when iterating\nthrough <i>/proc</i> with <a href=\"https://man.page/2/getdents\">getdents(2)</a> (and thus are\nvisible when one uses <a href=\"https://man.page/1/ls\">ls(1)</a> to view the contents of\n<i>/proc</i>).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[tid]</i>\nsubdirectories</p>\n\n<p style=\"margin-left:22%;\">Each one of these\nsubdirectories contains files and subdirectories exposing\ninformation about the thread with the corresponding thread\nID. The contents of these directories are the same as the\ncorresponding <i>/proc/[pid]/task/[tid]</i> directories.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/[tid]</i> subdirectories are <i>not</i> visible\nwhen iterating through <i>/proc</i> with <a href=\"https://man.page/2/getdents\">getdents(2)</a>\n(and thus are <i>not</i> visible when one uses <a href=\"https://man.page/1/ls\">ls(1)</a>\nto view the contents of <i>/proc</i>).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/self</i></p>\n\n<p style=\"margin-left:22%;\">When a process accesses this\nmagic symbolic link, it resolves to the process&rsquo;s own\n<i>/proc/[pid]</i> directory.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/thread-self</i></p>\n\n<p style=\"margin-left:22%;\">When a thread accesses this\nmagic symbolic link, it resolves to the process&rsquo;s own\n<i>/proc/self/task/[tid]</i> directory.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[a-z]*</i></p>\n\n<p style=\"margin-left:22%;\">Various other files and\nsubdirectories under <i>/proc</i> expose system-wide\ninformation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of the\nabove are described in more detail below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Files and\ndirectories</b> <br>\nThe following list provides details of many of the files and\ndirectories under the <i>/proc</i> hierarchy. <i><br>\n/proc/[pid]</i></p>\n\n<p style=\"margin-left:22%;\">There is a numerical\nsubdirectory for each running process; the subdirectory is\nnamed by the process ID. Each <i>/proc/[pid]</i>\nsubdirectory contains the pseudo-files and directories\ndescribed below.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The files\ninside each <i>/proc/[pid]</i> directory are normally owned\nby the effective user and effective group ID of the process.\nHowever, as a security measure, the ownership is made\n<i>root:root</i> if the process&rsquo;s &quot;dumpable&quot;\nattribute is set to a value other than 1.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before Linux\n4.11, <i>root:root</i> meant the &quot;global&quot; root\nuser ID and group ID (i.e., UID 0 and GID 0 in the initial\nuser namespace). Since Linux 4.11, if the process is in a\nnoninitial user namespace that has a valid mapping for user\n(group) ID 0 inside the namespace, then the user (group)\nownership of the files under <i>/proc/[pid]</i> is instead\nmade the same as the root user (group) ID of the namespace.\nThis means that inside a container, things work as expected\nfor the container &quot;root&quot; user.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\nprocess&rsquo;s &quot;dumpable&quot; attribute may change\nfor the following reasons:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The attribute was explicitly set via the <a href=\"https://man.page/2/prctl\">prctl(2)</a>\n<b>PR_SET_DUMPABLE</b> operation.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The attribute was reset to the value in the file\n<i>/proc/sys/fs/suid_dumpable</i> (described below), for the\nreasons described in <a href=\"https://man.page/2/prctl\">prctl(2)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Resetting the\n&quot;dumpable&quot; attribute to 1 reverts the ownership of\nthe <i>/proc/[pid]/*</i> files to the process&rsquo;s\neffective UID and GID. Note, however, that if the effective\nUID or GID is subsequently modified, then the\n&quot;dumpable&quot; attribute may be reset, as described in\n<a href=\"https://man.page/2/prctl\">prctl(2)</a>. Therefore, it may be desirable to reset the\n&quot;dumpable&quot; attribute <i>after</i> making any\ndesired changes to the process&rsquo;s effective UID or\nGID.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/attr</i></p>\n\n<p style=\"margin-left:22%;\">The files in this directory\nprovide an API for security modules. The contents of this\ndirectory are files that can be read and written in order to\nset security-related attributes. This directory was added to\nsupport SELinux, but the intention was that the API be\ngeneral enough to support other security modules. For the\npurpose of explanation, examples of how SELinux uses these\nfiles are provided below.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This directory\nis present only if the kernel was configured with\n<b>CONFIG_SECURITY</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/attr/current</i>\n(since Linux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">The contents of this file\nrepresent the current security attributes of the\nprocess.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In SELinux,\nthis file is used to get the security context of a process.\nPrior to Linux 2.6.11, this file could not be used to set\nthe security context (a write was always denied), since\nSELinux limited process security transitions to\n<a href=\"https://man.page/2/execve\">execve(2)</a> (see the description of\n<i>/proc/[pid]/attr/exec</i>, below). Since Linux 2.6.11,\nSELinux lifted this restriction and began supporting\n&quot;set&quot; operations via writes to this node if\nauthorized by policy, although use of this operation is only\nsuitable for applications that are trusted to maintain any\ndesired separation between the old and new security\ncontexts.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Prior to Linux\n2.6.28, SELinux did not allow threads within a multithreaded\nprocess to set their security context via this node as it\nwould yield an inconsistency among the security contexts of\nthe threads sharing the same memory space. Since Linux\n2.6.28, SELinux lifted this restriction and began supporting\n&quot;set&quot; operations for threads within a\nmultithreaded process if the new security context is bounded\nby the old security context, where the bounded relation is\ndefined in policy and guarantees that the new security\ncontext has a subset of the permissions of the old security\ncontext.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Other security\nmodules may choose to support &quot;set&quot; operations via\nwrites to this node.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/attr/exec</i>\n(since Linux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">This file represents the\nattributes to assign to the process upon a subsequent\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In SELinux,\nthis is needed to support role/domain transitions, and\n<a href=\"https://man.page/2/execve\">execve(2)</a> is the preferred point to make such\ntransitions because it offers better control over the\ninitialization of the process in the new security label and\nthe inheritance of state. In SELinux, this attribute is\nreset on <a href=\"https://man.page/2/execve\">execve(2)</a> so that the new program reverts to\nthe default behavior for any <a href=\"https://man.page/2/execve\">execve(2)</a> calls that it\nmay make. In SELinux, a process can set only its own\n<i>/proc/[pid]/attr/exec</i> attribute.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/attr/fscreate</i>\n(since Linux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">This file represents the\nattributes to assign to files created by subsequent calls to\n<a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/2/mkdir\">mkdir(2)</a>, <a href=\"https://man.page/2/symlink\">symlink(2)</a>, and\n<a href=\"https://man.page/2/mknod\">mknod(2)</a></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">SELinux employs\nthis file to support creation of a file (using the\naforementioned system calls) in a secure state, so that\nthere is no risk of inappropriate access being obtained\nbetween the time of creation and the time that attributes\nare set. In SELinux, this attribute is reset on\n<a href=\"https://man.page/2/execve\">execve(2)</a>, so that the new program reverts to the\ndefault behavior for any file creation calls it may make,\nbut the attribute will persist across multiple file creation\ncalls within a program unless it is explicitly reset. In\nSELinux, a process can set only its own\n<i>/proc/[pid]/attr/fscreate</i> attribute.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/attr/keycreate</i>\n(since Linux 2.6.18)</p>\n\n<p style=\"margin-left:22%;\">If a process writes a security\ncontext into this file, all subsequently created keys\n(<a href=\"https://man.page/2/add_key\">add_key(2)</a>) will be labeled with this context. For\nfurther information, see the kernel source file\n<i>Documentation/security/keys/core.rst</i> (or file\n<i>Documentation/security/keys.txt</i> on Linux between 3.0\nand 4.13, or <i>Documentation/keys.txt</i> before Linux\n3.0).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/attr/prev</i>\n(since Linux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">This file contains the security\ncontext of the process before the last <a href=\"https://man.page/2/execve\">execve(2)</a>;\nthat is, the previous value of\n<i>/proc/[pid]/attr/current</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/attr/socketcreate</i>\n(since Linux 2.6.18)</p>\n\n<p style=\"margin-left:22%;\">If a process writes a security\ncontext into this file, all subsequently created sockets\nwill be labeled with this context.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/autogroup</i>\n(since Linux 2.6.38)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/sched\">sched(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/auxv</i> (since\n2.6.0)</p>\n\n<p style=\"margin-left:22%;\">This contains the contents of\nthe ELF interpreter information passed to the process at\nexec time. The format is one <i>unsigned long</i> ID plus\none <i>unsigned long</i> value for each entry. The last\nentry contains two zeros. See also <a href=\"https://man.page/3/getauxval\">getauxval(3)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/cgroup</i>\n(since Linux 2.6.24)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/cgroups\">cgroups(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/clear_refs</i>\n(since Linux 2.6.22)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This is a\nwrite-only file, writable only by owner of the process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\nvalues may be written to the file: <br>\n1 (since Linux 2.6.22)</p>\n\n<p style=\"margin-left:32%;\">Reset the PG_Referenced and\nACCESSED/YOUNG bits for all the pages associated with the\nprocess. (Before kernel 2.6.32, writing any nonzero value to\nthis file had this effect.)</p>\n\n<p style=\"margin-left:22%;\">2 (since Linux 2.6.32)</p>\n\n<p style=\"margin-left:32%;\">Reset the PG_Referenced and\nACCESSED/YOUNG bits for all anonymous pages associated with\nthe process.</p>\n\n<p style=\"margin-left:22%;\">3 (since Linux 2.6.32)</p>\n\n<p style=\"margin-left:32%;\">Reset the PG_Referenced and\nACCESSED/YOUNG bits for all file-mapped pages associated\nwith the process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Clearing the\nPG_Referenced and ACCESSED/YOUNG bits provides a method to\nmeasure approximately how much memory a process is using.\nOne first inspects the values in the &quot;Referenced&quot;\nfields for the VMAs shown in <i>/proc/[pid]/smaps</i> to get\nan idea of the memory footprint of the process. One then\nclears the PG_Referenced and ACCESSED/YOUNG bits and, after\nsome measured time interval, once again inspects the values\nin the &quot;Referenced&quot; fields to get an idea of the\nchange in memory footprint of the process during the\nmeasured interval. If one is interested only in inspecting\nthe selected mapping types, then the value 2 or 3 can be\nused instead of 1.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Further values\ncan be written to affect different properties: <br>\n4 (since Linux 3.11)</p>\n\n<p style=\"margin-left:32%;\">Clear the soft-dirty bit for\nall the pages associated with the process. This is used (in\nconjunction with <i>/proc/[pid]/pagemap</i>) by the\ncheck-point restore system to discover which pages of a\nprocess have been dirtied since the file\n<i>/proc/[pid]/clear_refs</i> was written to.</p>\n\n<p style=\"margin-left:22%;\">5 (since Linux 4.0)</p>\n\n<p style=\"margin-left:32%;\">Reset the peak resident set\nsize (&quot;high water mark&quot;) to the process&rsquo;s\ncurrent resident set size value.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Writing any\nvalue to <i>/proc/[pid]/clear_refs</i> other than those\nlisted above has no effect.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/[pid]/clear_refs</i> file is present only if the\n<b>CONFIG_PROC_PAGE_MONITOR</b> kernel configuration option\nis enabled.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/cmdline</i></p>\n\n<p style=\"margin-left:22%;\">This read-only file holds the\ncomplete command line for the process, unless the process is\na zombie. In the latter case, there is nothing in this file:\nthat is, a read on this file will return 0 characters. The\ncommand-line arguments appear in this file as a set of\nstrings separated by null bytes ('\\0'), with a further null\nbyte after the last string.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If, after an\n<a href=\"https://man.page/2/execve\">execve(2)</a>, the process modifies its <i>argv</i>\nstrings, those changes will show up here. This is not the\nsame thing as modifying the <i>argv</i> array.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Furthermore, a\nprocess may change the memory location that this file refers\nvia <a href=\"https://man.page/2/prctl\">prctl(2)</a> operations such as\n<b>PR_SET_MM_ARG_START</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Think of this\nfile as the command line that the process wants you to\nsee.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/comm</i> (since\nLinux 2.6.33)</p>\n\n<p style=\"margin-left:22%;\">This file exposes the\nprocess&rsquo;s <i>comm</i> value&mdash;that is, the command\nname associated with the process. Different threads in the\nsame process may have different <i>comm</i> values,\naccessible via <i>/proc/[pid]/task/[tid]/comm</i>. A thread\nmay modify its <i>comm</i> value, or that of any of other\nthread in the same thread group (see the discussion of\n<b>CLONE_THREAD</b> in <a href=\"https://man.page/2/clone\">clone(2)</a>), by writing to the\nfile <i>/proc/self/task/[tid]/comm</i>. Strings longer than\n<b>TASK_COMM_LEN</b> (16) characters (including the\nterminating null byte) are silently truncated.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This file\nprovides a superset of the <a href=\"https://man.page/2/prctl\">prctl(2)</a>\n<b>PR_SET_NAME</b> and <b>PR_GET_NAME</b> operations, and is\nemployed by <a href=\"https://man.page/3/pthread_setname_np\">pthread_setname_np(3)</a> when used to rename\nthreads other than the caller. The value in this file is\nused for the <i>%e</i> specifier in\n<i>/proc/sys/kernel/core_pattern</i>; see\n<a href=\"https://man.page/5/core\">core(5)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/coredump_filter</i>\n(since Linux 2.6.23)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/5/core\">core(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/cpuset</i>\n(since Linux 2.6.12)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/cpuset\">cpuset(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/cwd</i></p>\n\n<p style=\"margin-left:22%;\">This is a symbolic link to the\ncurrent working directory of the process. To find out the\ncurrent working directory of process 20, for instance, you\ncan do this:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>cd\n/proc/20/cwd; pwd -P</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In a\nmultithreaded process, the contents of this symbolic link\nare not available if the main thread has already terminated\n(typically by calling <a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\ndereference or read (<a href=\"https://man.page/2/readlink\">readlink(2)</a>) this symbolic link\nis governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/environ</i></p>\n\n<p style=\"margin-left:22%;\">This file contains the initial\nenvironment that was set when the currently executing\nprogram was started via <a href=\"https://man.page/2/execve\">execve(2)</a>. The entries are\nseparated by null bytes ('\\0'), and there may be a null byte\nat the end. Thus, to print out the environment of process 1,\nyou would do:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>cat\n/proc/1/environ | tr '\\000' '\\n'</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If, after an\n<a href=\"https://man.page/2/execve\">execve(2)</a>, the process modifies its environment\n(e.g., by calling functions such as <a href=\"https://man.page/3/putenv\">putenv(3)</a> or\nmodifying the <a href=\"https://man.page/7/environ\">environ(7)</a> variable directly), this\nfile will <i>not</i> reflect those changes.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Furthermore, a\nprocess may change the memory location that this file refers\nvia <a href=\"https://man.page/2/prctl\">prctl(2)</a> operations such as\n<b>PR_SET_MM_ENV_START</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/exe</i></p>\n\n<p style=\"margin-left:22%;\">Under Linux 2.2 and later, this\nfile is a symbolic link containing the actual pathname of\nthe executed command. This symbolic link can be dereferenced\nnormally; attempting to open it will open the executable.\nYou can even type <i>/proc/[pid]/exe</i> to run another copy\nof the same executable that is being run by process [pid].\nIf the pathname has been unlinked, the symbolic link will\ncontain the string '(deleted)' appended to the original\npathname. In a multithreaded process, the contents of this\nsymbolic link are not available if the main thread has\nalready terminated (typically by calling\n<a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\ndereference or read (<a href=\"https://man.page/2/readlink\">readlink(2)</a>) this symbolic link\nis governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Under Linux 2.0\nand earlier, <i>/proc/[pid]/exe</i> is a pointer to the\nbinary which was executed, and appears as a symbolic link. A\n<a href=\"https://man.page/2/readlink\">readlink(2)</a> call on this file under Linux 2.0 returns\na string in the format:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">[device]:inode</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For example,\n[0301]:1502 would be inode 1502 on device major 03 (IDE,\nMFM, etc. drives) minor 01 (first partition on the first\ndrive).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><a href=\"https://man.page/1/find\">find(1)</a>\nwith the <i>-inum</i> option can be used to locate the\nfile.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/fd/</i></p>\n\n<p style=\"margin-left:22%;\">This is a subdirectory\ncontaining one entry for each file which the process has\nopen, named by its file descriptor, and which is a symbolic\nlink to the actual file. Thus, 0 is standard input, 1\nstandard output, 2 standard error, and so on.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For file\ndescriptors for pipes and sockets, the entries will be\nsymbolic links whose content is the file type with the\ninode. A <a href=\"https://man.page/2/readlink\">readlink(2)</a> call on this file returns a\nstring in the format:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">type:[inode]</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For example,\n<i>socket:[2248868]</i> will be a socket and its inode is\n2248868. For sockets, that inode can be used to find more\ninformation in one of the files under <i>/proc/net/</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For file\ndescriptors that have no corresponding inode (e.g., file\ndescriptors produced by <a href=\"https://man.page/2/bpf\">bpf(2)</a>,\n<a href=\"https://man.page/2/epoll_create\">epoll_create(2)</a>, <a href=\"https://man.page/2/eventfd\">eventfd(2)</a>,\n<a href=\"https://man.page/2/inotify_init\">inotify_init(2)</a>, <a href=\"https://man.page/2/perf_event_open\">perf_event_open(2)</a>,\n<a href=\"https://man.page/2/signalfd\">signalfd(2)</a>, <a href=\"https://man.page/2/timerfd_create\">timerfd_create(2)</a>, and\n<a href=\"https://man.page/2/userfaultfd\">userfaultfd(2)</a>), the entry will be a symbolic link\nwith contents of the form</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">anon_inode:&lt;file-type&gt;</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In many cases\n(but not all), the <i>file-type</i> is surrounded by square\nbrackets.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For example, an\nepoll file descriptor will have a symbolic link whose\ncontent is the string <i>anon_inode:[eventpoll]</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In a\nmultithreaded process, the contents of this directory are\nnot available if the main thread has already terminated\n(typically by calling <a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Programs that\ntake a filename as a command-line argument, but don&rsquo;t\ntake input from standard input if no argument is supplied,\nand programs that write to a file named as a command-line\nargument, but don&rsquo;t send their output to standard\noutput if no argument is supplied, can nevertheless be made\nto use standard input or standard output by using\n<i>/proc/[pid]/fd</i> files as command-line arguments. For\nexample, assuming that <i>-i</i> is the flag designating an\ninput file and <i>-o</i> is the flag designating an output\nfile:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>foobar -i\n/proc/self/fd/0 -o /proc/self/fd/1 ...</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">and you have a\nworking filter.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>/proc/self/fd/N</i>\nis approximately the same as <i>/dev/fd/N</i> in some UNIX\nand UNIX-like systems. Most Linux MAKEDEV scripts\nsymbolically link <i>/dev/fd</i> to <i>/proc/self/fd</i>, in\nfact.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Most systems\nprovide symbolic links <i>/dev/stdin</i>,\n<i>/dev/stdout</i>, and <i>/dev/stderr</i>, which\nrespectively link to the files <i>0</i>, <i>1</i>, and\n<i>2</i> in <i>/proc/self/fd</i>. Thus the example command\nabove could be written as:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>foobar -i\n/dev/stdin -o /dev/stdout ...</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\ndereference or read (<a href=\"https://man.page/2/readlink\">readlink(2)</a>) the symbolic links\nin this directory is governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that for\nfile descriptors referring to inodes (pipes and sockets, see\nabove), those inodes still have permission bits and\nownership information distinct from those of the\n<i>/proc/[pid]/fd</i> entry, and that the owner may differ\nfrom the user and group IDs of the process. An unprivileged\nprocess may lack permissions to open them, as in this\nexample:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>echo test\n| sudo -u nobody cat</b> <br>\ntest <br>\n$ <b>echo test | sudo -u nobody cat /proc/self/fd/0</b> <br>\ncat: /proc/self/fd/0: Permission denied</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">File descriptor\n0 refers to the pipe created by the shell and owned by that\nshell&rsquo;s user, which is not <i>nobody</i>, so\n<b>cat</b> does not have permission to create a new file\ndescriptor to read from that inode, even though it can still\nread from its existing file descriptor 0.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/fdinfo/</i>\n(since Linux 2.6.22)</p>\n\n<p style=\"margin-left:22%;\">This is a subdirectory\ncontaining one entry for each file which the process has\nopen, named by its file descriptor. The files in this\ndirectory are readable only by the owner of the process. The\ncontents of each file can be read to obtain information\nabout the corresponding file descriptor. The content depends\non the type of file referred to by the corresponding file\ndescriptor.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For regular\nfiles and directories, we see something like:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>cat\n/proc/12015/fdinfo/4</b> <br>\npos: 1000 <br>\nflags: 01002002 <br>\nmnt_id: 21</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields are\nas follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>pos</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>This is a decimal number showing the file offset.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>flags</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>This is an octal number that displays the file access\nmode and file status flags (see <a href=\"https://man.page/2/open\">open(2)</a>). If the\nclose-on-exec file descriptor flag is set, then <i>flags</i>\nwill also include the value <b>O_CLOEXEC</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Before Linux\n3.1, this field incorrectly displayed the setting of\n<b>O_CLOEXEC</b> at the time the file was opened, rather\nthan the current setting of the close-on-exec flag.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><i>mnt_id</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">This field, present since Linux\n3.15, is the ID of the mount point containing this file. See\nthe description of <i>/proc/[pid]/mountinfo</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For eventfd\nfile descriptors (see <a href=\"https://man.page/2/eventfd\">eventfd(2)</a>), we see (since\nLinux 3.8) the following fields:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">pos: 0</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>flags:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>02</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>mnt_id:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>10</p></td></tr>\n</table>\n\n<p style=\"margin-left:28%;\">eventfd-count: 40</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>eventfd-count</i>\nis the current value of the eventfd counter, in\nhexadecimal.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For epoll file\ndescriptors (see <a href=\"https://man.page/7/epoll\">epoll(7)</a>), we see (since Linux 3.8)\nthe following fields:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>pos:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>flags:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>02</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>mnt_id:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>10</p></td></tr>\n</table>\n\n<p style=\"margin-left:28%;\">tfd: 9 events: 19 data:\n74253d2500000009 <br>\ntfd: 7 events: 19 data: 74253d2500000007</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Each of the\nlines beginning <i>tfd</i> describes one of the file\ndescriptors being monitored via the epoll file descriptor\n(see <a href=\"https://man.page/2/epoll_ctl\">epoll_ctl(2)</a> for some details). The <i>tfd</i>\nfield is the number of the file descriptor. The\n<i>events</i> field is a hexadecimal mask of the events\nbeing monitored for this file descriptor. The <i>data</i>\nfield is the data value associated with this file\ndescriptor.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For signalfd\nfile descriptors (see <a href=\"https://man.page/2/signalfd\">signalfd(2)</a>), we see (since\nLinux 3.8) the following fields:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>pos:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>flags:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>02</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>mnt_id:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>10</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>sigmask:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>0000000000000006</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>sigmask</i>\nis the hexadecimal mask of signals that are accepted via\nthis signalfd file descriptor. (In this example, bits 2 and\n3 are set, corresponding to the signals <b>SIGINT</b> and\n<b>SIGQUIT</b>; see <a href=\"https://man.page/7/signal\">signal(7)</a>.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For inotify\nfile descriptors (see <a href=\"https://man.page/7/inotify\">inotify(7)</a>), we see (since\nLinux 3.8) the following fields:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>pos:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>flags:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>00</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>mnt_id:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>11</p></td></tr>\n</table>\n\n<p style=\"margin-left:28%;\">inotify wd:2 ino:7ef82a\nsdev:800001 mask:800afff ignored_mask:0 fhandle-bytes:8\nfhandle-type:1 f_handle:2af87e00220ffd73 <br>\ninotify wd:1 ino:192627 sdev:800001 mask:800afff\nignored_mask:0 fhandle-bytes:8 fhandle-type:1\nf_handle:27261900802dfd73</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Each of the\nlines beginning with &quot;inotify&quot; displays\ninformation about one file or directory that is being\nmonitored. The fields in this line are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>wd</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">A watch descriptor number (in\ndecimal).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><i>ino</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>The inode number of the target file (in\nhexadecimal).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><i>sdev</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>The ID of the device where the target file resides (in\nhexadecimal).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><i>mask</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>The mask of events being monitored for the target file\n(in hexadecimal).</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the kernel\nwas built with exportfs support, the path to the target file\nis exposed as a file handle, via three hexadecimal fields:\n<i>fhandle-bytes</i>, <i>fhandle-type</i>, and\n<i>f_handle</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For fanotify\nfile descriptors (see <a href=\"https://man.page/7/fanotify\">fanotify(7)</a>), we see (since\nLinux 3.8) the following fields:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">pos: 0</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>flags:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>02</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>mnt_id:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>11</p></td></tr>\n</table>\n\n<p style=\"margin-left:28%;\">fanotify flags:0\nevent-flags:88002 <br>\nfanotify ino:19264f sdev:800001 mflags:0 mask:1\nignored_mask:0 fhandle-bytes:8 fhandle-type:1\nf_handle:4f261900a82dfd73</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fourth line\ndisplays information defined when the fanotify group was\ncreated via <a href=\"https://man.page/2/fanotify_init\">fanotify_init(2)</a>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><i>flags</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">The <i>flags</i> argument given\nto <a href=\"https://man.page/2/fanotify_init\">fanotify_init(2)</a> (expressed in hexadecimal).</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>event-flags</i></p>\n\n<p style=\"margin-left:32%;\">The <i>event_f_flags</i>\nargument given to <a href=\"https://man.page/2/fanotify_init\">fanotify_init(2)</a> (expressed in\nhexadecimal).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Each additional\nline shown in the file contains information about one of the\nmarks in the fanotify group. Most of these fields are as for\ninotify, except:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>mflags</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The flags associated with the mark (expressed in\nhexadecimal).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>mask</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The events mask for this mark (expressed in\nhexadecimal).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>ignored_mask</i></p>\n\n<p style=\"margin-left:32%;\">The mask of events that are\nignored for this mark (expressed in hexadecimal).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For details on\nthese fields, see <a href=\"https://man.page/2/fanotify_mark\">fanotify_mark(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For timerfd\nfile descriptors (see <a href=\"https://man.page/2/timerfd\">timerfd(2)</a>), we see (since\nLinux 3.17) the following fields:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">pos: 0 <br>\nflags: 02004002 <br>\nmnt_id: 13 <br>\nclockid: 0 <br>\nticks: 0 <br>\nsettime flags: 03 <br>\nit_value: (7695568592, 640020877) <br>\nit_interval: (0, 0)</p>\n\n<p style=\"margin-left:22%;\"><i>clockid</i></p>\n\n<p style=\"margin-left:32%;\">This is the numeric value of\nthe clock ID (corresponding to one of the <b>CLOCK_*</b>\nconstants defined via <i>&lt;time.h&gt;</i>) that is used to\nmark the progress of the timer (in this example, 0 is\n<b>CLOCK_REALTIME</b>).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>ticks</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>This is the number of timer expirations that have\noccurred, (i.e., the value that <a href=\"https://man.page/2/read\">read(2)</a> on it would\nreturn).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>settime flags</i></p>\n\n<p style=\"margin-left:32%;\">This field lists the flags with\nwhich the timerfd was last armed (see\n<a href=\"https://man.page/2/timerfd_settime\">timerfd_settime(2)</a>), in octal (in this example, both\n<b>TFD_TIMER_ABSTIME</b> and <b>TFD_TIMER_CANCEL_ON_SET</b>\nare set).</p>\n\n<p style=\"margin-left:22%;\"><i>it_value</i></p>\n\n<p style=\"margin-left:32%;\">This field contains the amount\nof time until the timer will next expire, expressed in\nseconds and nanoseconds. This is always expressed as a\nrelative value, regardless of whether the timer was created\nusing the <b>TFD_TIMER_ABSTIME</b> flag.</p>\n\n<p style=\"margin-left:22%;\"><i>it_interval</i></p>\n\n<p style=\"margin-left:32%;\">This field contains the\ninterval of the timer, in seconds and nanoseconds. (The\n<i>it_value</i> and <i>it_interval</i> fields contain the\nvalues that <a href=\"https://man.page/2/timerfd_gettime\">timerfd_gettime(2)</a> on this file\ndescriptor would return.)</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/gid_map</i>\n(since Linux 3.5)</p>\n\n<p style=\"margin-left:22%;\">See\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/io</i> (since\nkernel 2.6.20)</p>\n\n<p style=\"margin-left:22%;\">This file contains I/O\nstatistics for the process, for example:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\"># <b>cat\n/proc/3828/io</b> <br>\nrchar: 323934931 <br>\nwchar: 323929600 <br>\nsyscr: 632687 <br>\nsyscw: 632675 <br>\nread_bytes: 0 <br>\nwrite_bytes: 323932160 <br>\ncancelled_write_bytes: 0</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields are\nas follows: <i><br>\nrchar</i>: characters read</p>\n\n<p style=\"margin-left:32%;\">The number of bytes which this\ntask has caused to be read from storage. This is simply the\nsum of bytes which this process passed to <a href=\"https://man.page/2/read\">read(2)</a> and\nsimilar system calls. It includes things such as terminal\nI/O and is unaffected by whether or not actual physical disk\nI/O was required (the read might have been satisfied from\npagecache).</p>\n\n<p style=\"margin-left:22%;\"><i>wchar</i>: characters\nwritten</p>\n\n<p style=\"margin-left:32%;\">The number of bytes which this\ntask has caused, or shall cause to be written to disk.\nSimilar caveats apply here as with <i>rchar</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>syscr</i>: read syscalls</p>\n\n<p style=\"margin-left:32%;\">Attempt to count the number of\nread I/O operations&mdash;that is, system calls such as\n<a href=\"https://man.page/2/read\">read(2)</a> and <a href=\"https://man.page/2/pread\">pread(2)</a>.</p>\n\n<p style=\"margin-left:22%;\"><i>syscw</i>: write\nsyscalls</p>\n\n<p style=\"margin-left:32%;\">Attempt to count the number of\nwrite I/O operations&mdash;that is, system calls such as\n<a href=\"https://man.page/2/write\">write(2)</a> and <a href=\"https://man.page/2/pwrite\">pwrite(2)</a>.</p>\n\n<p style=\"margin-left:22%;\"><i>read_bytes</i>: bytes\nread</p>\n\n<p style=\"margin-left:32%;\">Attempt to count the number of\nbytes which this process really did cause to be fetched from\nthe storage layer. This is accurate for block-backed\nfilesystems.</p>\n\n<p style=\"margin-left:22%;\"><i>write_bytes</i>: bytes\nwritten</p>\n\n<p style=\"margin-left:32%;\">Attempt to count the number of\nbytes which this process caused to be sent to the storage\nlayer.</p>\n\n\n<p style=\"margin-left:22%;\"><i>cancelled_write_bytes</i>:</p>\n\n<p style=\"margin-left:32%;\">The big inaccuracy here is\ntruncate. If a process writes 1 MB to a file and then\ndeletes the file, it will in fact perform no writeout. But\nit will have been accounted as having caused 1 MB of write.\nIn other words: this field represents the number of bytes\nwhich this process caused to not happen, by truncating\npagecache. A task can cause &quot;negative&quot; I/O too. If\nthis task truncates some dirty pagecache, some I/O which\nanother task has been accounted for (in its\n<i>write_bytes</i>) will not be happening.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>Note</i>: In\nthe current implementation, things are a bit racy on 32-bit\nsystems: if process A reads process B&rsquo;s\n<i>/proc/[pid]/io</i> while process B is updating one of\nthese 64-bit counters, process A could see an intermediate\nresult.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/limits</i>\n(since Linux 2.6.24)</p>\n\n<p style=\"margin-left:22%;\">This file displays the soft\nlimit, hard limit, and units of measurement for each of the\nprocess&rsquo;s resource limits (see <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>).\nUp to and including Linux 2.6.35, this file is protected to\nallow reading only by the real UID of the process. Since\nLinux 2.6.36, this file is readable by all users on the\nsystem.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/map_files/</i>\n(since kernel 3.3)</p>\n\n<p style=\"margin-left:22%;\">This subdirectory contains\nentries corresponding to memory-mapped files (see\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>). Entries are named by memory region start\nand end address pair (expressed as hexadecimal numbers), and\nare symbolic links to the mapped files themselves. Here is\nan example, with the output wrapped and reformatted to fit\non an 80-column display:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\"># <b>ls -l\n/proc/self/map_files/</b> <br>\nlr--------. 1 root root 64 Apr 16 21:31 <br>\n3252e00000-3252e20000 -&gt; /usr/lib64/ld-2.15.so <br>\n...</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Although these\nentries are present for memory regions that were mapped with\nthe <b>MAP_FILE</b> flag, the way anonymous shared memory\n(regions created with the <b>MAP_ANON | MAP_SHARED</b>\nflags) is implemented in Linux means that such regions also\nappear on this directory. Here is an example where the\ntarget file is the deleted <i>/dev/zero</i> one:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">lrw-------. 1\nroot root 64 Apr 16 21:33 <br>\n7fc075d2f000-7fc075e6f000 -&gt; /dev/zero (deleted)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Until kernel\nversion 4.3, this directory appeared only if the\n<b>CONFIG_CHECKPOINT_RESTORE</b> kernel configuration option\nwas enabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Capabilities\nare required to read the contents of the symbolic links in\nthis directory: before Linux 5.9, the reading process\nrequires <b>CAP_SYS_ADMIN</b> in the initial user namespace;\nsince Linux 5.9, the reading process must have either\n<b>CAP_SYS_ADMIN</b> or <b>CAP_CHECKPOINT_RESTORE</b> in the\nuser namespace where it resides.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/maps</i></p>\n\n<p style=\"margin-left:22%;\">A file containing the currently\nmapped memory regions and their access permissions. See\n<a href=\"https://man.page/2/mmap\">mmap(2)</a> for some further information about memory\nmappings.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The format of\nthe file is:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\"><i>address\nperms offset dev inode pathname</i> <br>\n00400000-00452000 r-xp 00000000 08:02 173521\n/usr/bin/dbus-daemon <br>\n00651000-00652000 r--p 00051000 08:02 173521\n/usr/bin/dbus-daemon <br>\n00652000-00655000 rw-p 00052000 08:02 173521\n/usr/bin/dbus-daemon <br>\n00e03000-00e24000 rw-p 00000000 00:00 0 [heap] <br>\n00e24000-011f7000 rw-p 00000000 00:00 0 [heap] <br>\n... <br>\n35b1800000-35b1820000 r-xp 00000000 08:02 135522\n/usr/lib64/ld-2.15.so <br>\n35b1a1f000-35b1a20000 r--p 0001f000 08:02 135522\n/usr/lib64/ld-2.15.so <br>\n35b1a20000-35b1a21000 rw-p 00020000 08:02 135522\n/usr/lib64/ld-2.15.so <br>\n35b1a21000-35b1a22000 rw-p 00000000 00:00 0 <br>\n35b1c00000-35b1dac000 r-xp 00000000 08:02 135870\n/usr/lib64/libc-2.15.so <br>\n35b1dac000-35b1fac000 ---p 001ac000 08:02 135870\n/usr/lib64/libc-2.15.so <br>\n35b1fac000-35b1fb0000 r--p 001ac000 08:02 135870\n/usr/lib64/libc-2.15.so <br>\n35b1fb0000-35b1fb2000 rw-p 001b0000 08:02 135870\n/usr/lib64/libc-2.15.so <br>\n... <br>\nf2c6ff8c000-7f2c7078c000 rw-p 00000000 00:00 0 [stack:986]\n<br>\n... <br>\n7fffb2c0d000-7fffb2c2e000 rw-p 00000000 00:00 0 [stack] <br>\n7fffb2d48000-7fffb2d49000 r-xp 00000000 00:00 0 [vdso]</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>address</i> field is the address space in the process\nthat the mapping occupies. The <i>perms</i> field is a set\nof permissions:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">r = read <br>\nw = write <br>\nx = execute <br>\ns = shared <br>\np = private (copy on write)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>offset</i> field is the offset into the file/whatever;\n<i>dev</i> is the device (major:minor); <i>inode</i> is the\ninode on that device. 0 indicates that no inode is\nassociated with the memory region, as would be the case with\nBSS (uninitialized data).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>pathname</i> field will usually be the file that is\nbacking the mapping. For ELF files, you can easily\ncoordinate with the <i>offset</i> field by looking at the\nOffset field in the ELF program headers\n(<i>readelf&nbsp;-l</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">There are\nadditional helpful pseudo-paths: <i><br>\n[stack]</i></p>\n\n<p style=\"margin-left:32%;\">The initial process&rsquo;s\n(also known as the main thread&rsquo;s) stack.</p>\n\n<p style=\"margin-left:22%;\"><i>[stack:&lt;tid&gt;]</i>\n(from Linux 3.4 to 4.4)</p>\n\n<p style=\"margin-left:32%;\">A thread&rsquo;s stack (where\nthe <i>&lt;tid&gt;</i> is a thread ID). It corresponds to\nthe <i>/proc/[pid]/task/[tid]/</i> path. This field was\nremoved in Linux 4.5, since providing this information for a\nprocess with large numbers of threads is expensive.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>[vdso]</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The virtual dynamically linked shared object. See\n<a href=\"https://man.page/7/vdso\">vdso(7)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>[heap]</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The process&rsquo;s heap.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<i>pathname</i> field is blank, this is an anonymous mapping\nas obtained via <a href=\"https://man.page/2/mmap\">mmap(2)</a>. There is no easy way to\ncoordinate this back to a process&rsquo;s source, short of\nrunning it through <a href=\"https://man.page/1/gdb\">gdb(1)</a>, <a href=\"https://man.page/1/strace\">strace(1)</a>, or\nsimilar.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>pathname</i>\nis shown unescaped except for newline characters, which are\nreplaced with an octal escape sequence. As a result, it is\nnot possible to determine whether the original pathname\ncontained a newline character or the literal <i>\\012</i>\ncharacter sequence.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the mapping\nis file-backed and the file has been deleted, the string\n&quot; (deleted)&quot; is appended to the pathname. Note\nthat this is ambiguous too.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Under Linux\n2.0, there is no field giving pathname.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/mem</i></p>\n\n<p style=\"margin-left:22%;\">This file can be used to access\nthe pages of a process&rsquo;s memory through\n<a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/2/read\">read(2)</a>, and <a href=\"https://man.page/2/lseek\">lseek(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_ATTACH_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/mountinfo</i>\n(since Linux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">This file contains information\nabout mount points in the process&rsquo;s mount namespace\n(see <a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>). It supplies various\ninformation (e.g., propagation state, root of mount for bind\nmounts, identifier for each mount and its parent) that is\nmissing from the (older) <i>/proc/[pid]/mounts</i> file, and\nfixes various other problems with that file (e.g.,\nnonextensibility, failure to distinguish per-mount versus\nper-superblock options).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The file\ncontains lines of the form:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">36 35 98:0\n/mnt1 /mnt2 rw,noatime master:1 - ext3 /dev/root\nrw,errors=continue <br>\n(1)(2)(3) (4) (5) (6) (7) (8) (9) (10) (11)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The numbers in\nparentheses are labels for the descriptions below:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>mount ID: a unique ID for the mount (may be reused after\n<a href=\"https://man.page/2/umount\">umount(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>parent ID: the ID of the parent mount (or of self for\nthe root of this mount namespace&rsquo;s mount tree).</p></td></tr>\n</table>\n\n<p style=\"margin-left:29%; margin-top: 1em\">If a new mount\nis stacked on top of a previous existing mount (so that it\nhides the existing mount) at pathname P, then the parent of\nthe new mount is the previous mount at that location. Thus,\nwhen looking at all the mounts stacked at a particular\nlocation, the top-most mount is the one that is not the\nparent of any other mount at the same location. (Note,\nhowever, that this top-most mount will be accessible only if\nthe longest path subprefix of P that is a mount point is not\nitself hidden by a stacked mount.)</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">If the parent\nmount point lies outside the process&rsquo;s root directory\n(see <a href=\"https://man.page/2/chroot\">chroot(2)</a>), the ID shown here won&rsquo;t have a\ncorresponding record in <i>mountinfo</i> whose mount ID\n(field 1) matches this parent mount ID (because mount points\nthat lie outside the process&rsquo;s root directory are not\nshown in <i>mountinfo</i>). As a special case of this point,\nthe process&rsquo;s root mount point may have a parent mount\n(for the initramfs filesystem) that lies outside the\nprocess&rsquo;s root directory, and an entry for that mount\npoint will not appear in <i>mountinfo</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">(3)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">major:minor: the value of\n<i>st_dev</i> for files on this filesystem (see\n<a href=\"https://man.page/2/stat\">stat(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>(4)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>root: the pathname of the directory in the filesystem\nwhich forms the root of this mount.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>(5)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>mount point: the pathname of the mount point relative to\nthe process&rsquo;s root directory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>(6)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>mount options: per-mount options (see\n<a href=\"https://man.page/2/mount\">mount(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>(7)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>optional fields: zero or more fields of the form\n&quot;tag[:value]&quot;; see below.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>(8)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>separator: the end of the optional fields is marked by a\nsingle hyphen.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>(9)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>filesystem type: the filesystem type in the form\n&quot;type[.subtype]&quot;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>(10)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>mount source: filesystem-specific information or\n&quot;none&quot;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>(11)</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>super options: per-superblock options (see\n<a href=\"https://man.page/2/mount\">mount(2)</a>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Currently, the\npossible optional fields are <i>shared</i>, <i>master</i>,\n<i>propagate_from</i>, and <i>unbindable</i>. See\n<a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a> for a description of these\nfields. Parsers should ignore all unrecognized optional\nfields.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For more\ninformation on mount propagation see:\n<i>Documentation/filesystems/sharedsubtree.txt</i> in the\nLinux kernel source tree.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/mounts</i>\n(since Linux 2.4.19)</p>\n\n<p style=\"margin-left:22%;\">This file lists all the\nfilesystems currently mounted in the process&rsquo;s mount\nnamespace (see <a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>). The format of\nthis file is documented in <a href=\"https://man.page/5/fstab\">fstab(5)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since kernel\nversion 2.6.15, this file is pollable: after opening the\nfile for reading, a change in this file (i.e., a filesystem\nmount or unmount) causes <a href=\"https://man.page/2/select\">select(2)</a> to mark the file\ndescriptor as having an exceptional condition, and\n<a href=\"https://man.page/2/poll\">poll(2)</a> and <a href=\"https://man.page/2/epoll_wait\">epoll_wait(2)</a> mark the file as\nhaving a priority event (<b>POLLPRI</b>). (Before Linux\n2.6.30, a change in this file was indicated by the file\ndescriptor being marked as readable for <a href=\"https://man.page/2/select\">select(2)</a>,\nand being marked as having an error condition for\n<a href=\"https://man.page/2/poll\">poll(2)</a> and <a href=\"https://man.page/2/epoll_wait\">epoll_wait(2)</a>.)</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/mountstats</i>\n(since Linux 2.6.17)</p>\n\n<p style=\"margin-left:22%;\">This file exports information\n(statistics, configuration information) about the mount\npoints in the process&rsquo;s mount namespace (see\n<a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>). Lines in this file have the\nform:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">device\n/dev/sda7 mounted on /home with fstype ext3 [stats] <br>\n( 1 ) ( 2 ) (3 ) ( 4 )</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields in\neach line are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>The name of the mounted device (or &quot;nodevice&quot;\nif there is no corresponding device).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>The mount point within the filesystem tree.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(3)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>The filesystem type.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(4)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>Optional statistics and configuration information.\nCurrently (as at Linux 2.6.26), only NFS filesystems export\ninformation via this field.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This file is\nreadable only by the owner of the process.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/net</i> (since\nLinux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">See the description of\n<i>/proc/net</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/ns/</i> (since\nLinux 3.0)</p>\n\n<p style=\"margin-left:22%;\">This is a subdirectory\ncontaining one entry for each namespace that supports being\nmanipulated by <a href=\"https://man.page/2/setns\">setns(2)</a>. For more information, see\n<a href=\"https://man.page/7/namespaces\">namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/numa_maps</i>\n(since Linux 2.6.14)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/numa\">numa(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/oom_adj</i>\n(since Linux 2.6.11)</p>\n\n<p style=\"margin-left:22%;\">This file can be used to adjust\nthe score used to select which process should be killed in\nan out-of-memory (OOM) situation. The kernel uses this value\nfor a bit-shift operation of the process&rsquo;s\n<i>oom_score</i> value: valid values are in the range -16 to\n+15, plus the special value -17, which disables OOM-killing\naltogether for this process. A positive score increases the\nlikelihood of this process being killed by the OOM-killer; a\nnegative score decreases the likelihood.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue for this file is 0; a new process inherits its\nparent&rsquo;s <i>oom_adj</i> setting. A process must be\nprivileged (<b>CAP_SYS_RESOURCE</b>) to update this\nfile.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n2.6.36, use of this file is deprecated in favor of\n<i>/proc/[pid]/oom_score_adj</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/oom_score</i>\n(since Linux 2.6.11)</p>\n\n<p style=\"margin-left:22%;\">This file displays the current\nscore that the kernel gives to this process for the purpose\nof selecting a process for the OOM-killer. A higher score\nmeans that the process is more likely to be selected by the\nOOM-killer. The basis for this score is the amount of memory\nused by the process, with increases (+) or decreases (-) for\nfactors including:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"58%\">\n\n\n<p>whether the process is privileged (-).</p></td>\n<td width=\"17%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before kernel\n2.6.36 the following factors were also used in the\ncalculation of oom_score:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\">whether the process creates a\nlot of children using <a href=\"https://man.page/2/fork\">fork(2)</a> (+);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>whether the process has been running a long time, or has\nused a lot of CPU time (-);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>whether the process has a low nice value (i.e., &gt; 0)\n(+); and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>whether the process is making direct hardware access\n(-).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>oom_score</i> also reflects the adjustment specified by\nthe <i>oom_score_adj</i> or <i>oom_adj</i> setting for the\nprocess.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/oom_score_adj</i>\n(since Linux 2.6.36)</p>\n\n<p style=\"margin-left:22%;\">This file can be used to adjust\nthe badness heuristic used to select which process gets\nkilled in out-of-memory conditions.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The badness\nheuristic assigns a value to each candidate task ranging\nfrom 0 (never kill) to 1000 (always kill) to determine which\nprocess is targeted. The units are roughly a proportion\nalong that range of allowed memory the process may allocate\nfrom, based on an estimation of its current memory and swap\nuse. For example, if a task is using all allowed memory, its\nbadness score will be 1000. If it is using half of its\nallowed memory, its score will be 500.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">There is an\nadditional factor included in the badness score: root\nprocesses are given 3% extra memory over other tasks.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The amount of\n&quot;allowed&quot; memory depends on the context in which\nthe OOM-killer was called. If it is due to the memory\nassigned to the allocating task&rsquo;s cpuset being\nexhausted, the allowed memory represents the set of mems\nassigned to that cpuset (see <a href=\"https://man.page/7/cpuset\">cpuset(7)</a>). If it is due\nto a mempolicy&rsquo;s node(s) being exhausted, the allowed\nmemory represents the set of mempolicy nodes. If it is due\nto a memory limit (or swap limit) being reached, the allowed\nmemory is that configured limit. Finally, if it is due to\nthe entire system being out of memory, the allowed memory\nrepresents all allocatable resources.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value of\n<i>oom_score_adj</i> is added to the badness score before it\nis used to determine which task to kill. Acceptable values\nrange from -1000 (OOM_SCORE_ADJ_MIN) to +1000\n(OOM_SCORE_ADJ_MAX). This allows user space to control the\npreference for OOM-killing, ranging from always preferring a\ncertain task or completely disabling it from OOM killing.\nThe lowest possible value, -1000, is equivalent to disabling\nOOM-killing entirely for that task, since it will always\nreport a badness score of 0.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Consequently,\nit is very simple for user space to define the amount of\nmemory to consider for each task. Setting an\n<i>oom_score_adj</i> value of +500, for example, is roughly\nequivalent to allowing the remainder of tasks sharing the\nsame system, cpuset, mempolicy, or memory controller\nresources to use at least 50% more memory. A value of -500,\non the other hand, would be roughly equivalent to\ndiscounting 50% of the task&rsquo;s allowed memory from\nbeing considered as scoring against the task.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For backward\ncompatibility with previous kernels,\n<i>/proc/[pid]/oom_adj</i> can still be used to tune the\nbadness score. Its value is scaled linearly with\n<i>oom_score_adj</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Writing to\n<i>/proc/[pid]/oom_score_adj</i> or\n<i>/proc/[pid]/oom_adj</i> will change the other with its\nscaled value.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<a href=\"https://man.page/1/choom\">choom(1)</a> program provides a command-line interface\nfor adjusting the <i>oom_score_adj</i> value of a running\nprocess or a newly executed command.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/pagemap</i>\n(since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">This file shows the mapping of\neach of the process&rsquo;s virtual pages into physical page\nframes or swap area. It contains one 64-bit value for each\nvirtual page, with the bits set as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>63</p></td>\n<td width=\"7%\"></td>\n<td width=\"54%\">\n\n\n<p>If set, the page is present in RAM.</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>62</p></td>\n<td width=\"7%\"></td>\n<td width=\"54%\">\n\n\n<p>If set, the page is in swap space</p></td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">61 (since Linux 3.5)</p>\n\n<p style=\"margin-left:32%;\">The page is a file-mapped page\nor a shared anonymous page.</p>\n\n<p style=\"margin-left:22%;\">60&ndash;57 (since Linux\n3.11)</p>\n\n<p style=\"margin-left:32%;\">Zero</p>\n\n<p style=\"margin-left:22%;\">56 (since Linux 4.2)</p>\n\n<p style=\"margin-left:32%;\">The page is exclusively\nmapped.</p>\n\n<p style=\"margin-left:22%;\">55 (since Linux 3.11)</p>\n\n<p style=\"margin-left:32%;\">PTE is soft-dirty (see the\nkernel source file\n<i>Documentation/admin-guide/mm/soft-dirty.rst</i>).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p>54&ndash;0</p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>If the page is present in RAM (bit 63), then these bits\nprovide the page frame number, which can be used to index\n<i>/proc/kpageflags</i> and <i>/proc/kpagecount</i>. If the\npage is present in swap (bit 62), then bits 4&ndash;0 give\nthe swap type, and bits 54&ndash;5 encode the swap\noffset.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before Linux\n3.11, bits 60&ndash;55 were used to encode the base-2 log of\nthe page size.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To employ\n<i>/proc/[pid]/pagemap</i> efficiently, use\n<i>/proc/[pid]/maps</i> to determine which areas of memory\nare actually mapped and seek to skip over unmapped\nregions.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/[pid]/pagemap</i> file is present only if the\n<b>CONFIG_PROC_PAGE_MONITOR</b> kernel configuration option\nis enabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/personality</i>\n(since Linux 2.6.28)</p>\n\n<p style=\"margin-left:22%;\">This read-only file exposes the\nprocess&rsquo;s execution domain, as set by\n<a href=\"https://man.page/2/personality\">personality(2)</a>. The value is displayed in hexadecimal\nnotation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_ATTACH_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/root</i></p>\n\n<p style=\"margin-left:22%;\">UNIX and Linux support the idea\nof a per-process root of the filesystem, set by the\n<a href=\"https://man.page/2/chroot\">chroot(2)</a> system call. This file is a symbolic link\nthat points to the process&rsquo;s root directory, and\nbehaves in the same way as <i>exe</i>, and <i>fd/*</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note however\nthat this file is not merely a symbolic link. It provides\nthe same view of the filesystem (including namespaces and\nthe set of per-process mounts) as the process itself. An\nexample illustrates this point. In one terminal, we start a\nshell in new user and mount namespaces, and in that shell we\ncreate some new mount points:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>PS1='sh1#\n' unshare -Urnm</b> <br>\nsh1# <b>mount -t tmpfs tmpfs /etc</b> # Mount empty tmpfs at\n/etc <br>\nsh1# <b>mount --bind /usr /dev</b> # Mount /usr at /dev <br>\nsh1# <b>echo $$</b> <br>\n27123</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In a second\nterminal window, in the initial mount namespace, we look at\nthe contents of the corresponding mounts in the initial and\nnew namespaces:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>PS1='sh2#\n' sudo sh</b> <br>\nsh2# <b>ls /etc | wc -l</b> # In initial NS <br>\n309 <br>\nsh2# <b>ls /proc/27123/root/etc | wc -l</b> # /etc in other\nNS <br>\n0 # The empty tmpfs dir <br>\nsh2# <b>ls /dev | wc -l</b> # In initial NS <br>\n205 <br>\nsh2# <b>ls /proc/27123/root/dev | wc -l</b> # /dev in other\nNS <br>\n11 # Actually bind <br>\n# mounted to /usr <br>\nsh2# <b>ls /usr | wc -l</b> # /usr in initial NS <br>\n11</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In a\nmultithreaded process, the contents of the\n<i>/proc/[pid]/root</i> symbolic link are not available if\nthe main thread has already terminated (typically by calling\n<a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\ndereference or read (<a href=\"https://man.page/2/readlink\">readlink(2)</a>) this symbolic link\nis governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/seccomp</i>\n(Linux 2.6.12 to 2.6.22)</p>\n\n<p style=\"margin-left:22%;\">This file can be used to read\nand change the process&rsquo;s secure computing (seccomp)\nmode setting. It contains the value 0 if the process is not\nin seccomp mode, and 1 if the process is in strict seccomp\nmode (see <a href=\"https://man.page/2/seccomp\">seccomp(2)</a>). Writing 1 to this file places\nthe process irreversibly in strict seccomp mode. (Further\nattempts to write to the file fail with the <b>EPERM</b>\nerror.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In Linux\n2.6.23, this file went away, to be replaced by the\n<a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_GET_SECCOMP</b> and\n<b>PR_SET_SECCOMP</b> operations (and later by\n<a href=\"https://man.page/2/seccomp\">seccomp(2)</a> and the <i>Seccomp</i> field in\n<i>/proc/[pid]/status</i>).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/setgroups</i>\n(since Linux 3.19)</p>\n\n<p style=\"margin-left:22%;\">See\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/smaps</i> (since\nLinux 2.6.14)</p>\n\n<p style=\"margin-left:22%;\">This file shows memory\nconsumption for each of the process&rsquo;s mappings. (The\n<a href=\"https://man.page/1/pmap\">pmap(1)</a> command displays similar information, in a\nform that may be easier for parsing.) For each mapping there\nis a series of lines such as the following:</p>\n\n\n<p style=\"margin-left:28%; margin-top: 1em\">00400000-0048a000\nr-xp 00000000 fd:03 960637 /bin/bash <br>\nSize: 552 kB <br>\nRss: 460 kB <br>\nPss: 100 kB <br>\nShared_Clean: 452 kB <br>\nShared_Dirty: 0 kB <br>\nPrivate_Clean: 8 kB <br>\nPrivate_Dirty: 0 kB <br>\nReferenced: 460 kB <br>\nAnonymous: 0 kB <br>\nAnonHugePages: 0 kB <br>\nShmemHugePages: 0 kB <br>\nShmemPmdMapped: 0 kB <br>\nSwap: 0 kB <br>\nKernelPageSize: 4 kB <br>\nMMUPageSize: 4 kB <br>\nKernelPageSize: 4 kB <br>\nMMUPageSize: 4 kB <br>\nLocked: 0 kB <br>\nProtectionKey: 0 <br>\nVmFlags: rd ex mr mw me dw</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The first of\nthese lines shows the same information as is displayed for\nthe mapping in <i>/proc/[pid]/maps</i>. The following lines\nshow the size of the mapping, the amount of the mapping that\nis currently resident in RAM (&quot;Rss&quot;), the\nprocess&rsquo;s proportional share of this mapping\n(&quot;Pss&quot;), the number of clean and dirty shared\npages in the mapping, and the number of clean and dirty\nprivate pages in the mapping. &quot;Referenced&quot;\nindicates the amount of memory currently marked as\nreferenced or accessed. &quot;Anonymous&quot; shows the\namount of memory that does not belong to any file.\n&quot;Swap&quot; shows how much would-be-anonymous memory is\nalso used, but out on swap.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n&quot;KernelPageSize&quot; line (available since Linux\n2.6.29) is the page size used by the kernel to back the\nvirtual memory area. This matches the size used by the MMU\nin the majority of cases. However, one counter-example\noccurs on PPC64 kernels whereby a kernel using 64 kB as a\nbase page size may still use 4 kB pages for the MMU on older\nprocessors. To distinguish the two attributes, the\n&quot;MMUPageSize&quot; line (also available since Linux\n2.6.29) reports the page size used by the MMU.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n&quot;Locked&quot; indicates whether the mapping is locked\nin memory or not.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n&quot;ProtectionKey&quot; line (available since Linux 4.9,\non x86 only) contains the memory protection key (see\n<a href=\"https://man.page/7/pkeys\">pkeys(7)</a>) associated with the virtual memory area.\nThis entry is present only if the kernel was built with the\n<b>CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS</b> configuration\noption (since Linux 4.6).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n&quot;VmFlags&quot; line (available since Linux 3.8)\nrepresents the kernel flags associated with the virtual\nmemory area, encoded using the following two-letter\ncodes:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">rd - readable\n<br>\nwr - writable <br>\nex - executable <br>\nsh - shared <br>\nmr - may read <br>\nmw - may write <br>\nme - may execute <br>\nms - may share <br>\ngd - stack segment grows down <br>\npf - pure PFN range <br>\ndw - disabled write to the mapped file <br>\nlo - pages are locked in memory <br>\nio - memory mapped I/O area <br>\nsr - sequential read advise provided <br>\nrr - random read advise provided <br>\ndc - do not copy area on fork <br>\nde - do not expand area on remapping <br>\nac - area is accountable <br>\nnr - swap space is not reserved for the area <br>\nht - area uses huge tlb pages <br>\nsf - perform synchronous page faults (since Linux 4.15) <br>\nnl - non-linear mapping (removed in Linux 4.0) <br>\nar - architecture specific flag <br>\nwf - wipe on fork (since Linux 4.14) <br>\ndd - do not include area into core dump <br>\nsd - soft-dirty flag (since Linux 3.13) <br>\nmm - mixed map area <br>\nhg - huge page advise flag <br>\nnh - no-huge page advise flag <br>\nmg - mergeable advise flag <br>\num - userfaultfd missing pages tracking (since Linux 4.3)\n<br>\nuw - userfaultfd wprotect pages tracking (since Linux\n4.3)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/[pid]/smaps</i> file is present only if the\n<b>CONFIG_PROC_PAGE_MONITOR</b> kernel configuration option\nis enabled.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/stack</i> (since\nLinux 2.6.29)</p>\n\n<p style=\"margin-left:22%;\">This file provides a symbolic\ntrace of the function calls in this process&rsquo;s kernel\nstack. This file is provided only if the kernel was built\nwith the <b>CONFIG_STACKTRACE</b> configuration option.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_ATTACH_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/stat</i></p>\n\n<p style=\"margin-left:22%;\">Status information about the\nprocess. This is used by <a href=\"https://man.page/1/ps\">ps(1)</a>. It is defined in the\nkernel source file <i>fs/proc/array.c</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields, in\norder, with their proper <a href=\"https://man.page/3/scanf\">scanf(3)</a> format specifiers,\nare listed below. Whether or not certain of these fields\ndisplay valid information is governed by a ptrace access\nmode\n<b>PTRACE_MODE_READ_FSCREDS&nbsp;</b>|&nbsp;<b>PTRACE_MODE_NOAUDIT</b>\ncheck (refer to <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>). If the check denies\naccess, then the field value is displayed as 0. The affected\nfields are indicated with the marking [PT]. <br>\n(1) <i>pid &nbsp;</i>%d</p>\n\n<p style=\"margin-left:32%;\">The process ID.</p>\n\n<p style=\"margin-left:22%;\">(2) <i>comm &nbsp;</i>%s</p>\n\n<p style=\"margin-left:32%;\">The filename of the executable,\nin parentheses. Strings longer than <b>TASK_COMM_LEN</b>\n(16) characters (including the terminating null byte) are\nsilently truncated. This is visible whether or not the\nexecutable is swapped out.</p>\n\n<p style=\"margin-left:22%;\">(3) <i>state &nbsp;</i>%c</p>\n\n<p style=\"margin-left:32%;\">One of the following\ncharacters, indicating process state:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>R</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Running</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>S</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Sleeping in an interruptible wait</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>D</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Waiting in uninterruptible disk sleep</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>Z</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Zombie</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>T</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Stopped (on a signal) or (before Linux 2.6.33) trace\nstopped</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>t</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Tracing stop (Linux 2.6.33 onward)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>W</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Paging (only before Linux 2.6.0)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>X</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Dead (from Linux 2.6.0 onward)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>x</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Dead (Linux 2.6.33 to 3.13 only)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>K</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Wakekill (Linux 2.6.33 to 3.13 only)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>W</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Waking (Linux 2.6.33 to 3.13 only)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>P</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Parked (Linux 3.9 to 3.13 only)</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">(4) <i>ppid &nbsp;</i>%d</p>\n\n<p style=\"margin-left:32%;\">The PID of the parent of this\nprocess.</p>\n\n<p style=\"margin-left:22%;\">(5) <i>pgrp &nbsp;</i>%d</p>\n\n<p style=\"margin-left:32%;\">The process group ID of the\nprocess.</p>\n\n<p style=\"margin-left:22%;\">(6) <i>session &nbsp;</i>%d</p>\n\n<p style=\"margin-left:32%;\">The session ID of the\nprocess.</p>\n\n<p style=\"margin-left:22%;\">(7) <i>tty_nr &nbsp;</i>%d</p>\n\n<p style=\"margin-left:32%;\">The controlling terminal of the\nprocess. (The minor device number is contained in the\ncombination of bits 31 to 20 and 7 to 0; the major device\nnumber is in bits 15 to 8.)</p>\n\n<p style=\"margin-left:22%;\">(8) <i>tpgid &nbsp;</i>%d</p>\n\n<p style=\"margin-left:32%;\">The ID of the foreground\nprocess group of the controlling terminal of the\nprocess.</p>\n\n<p style=\"margin-left:22%;\">(9) <i>flags &nbsp;</i>%u</p>\n\n<p style=\"margin-left:32%;\">The kernel flags word of the\nprocess. For bit meanings, see the PF_* defines in the Linux\nkernel source file <i>include/linux/sched.h</i>. Details\ndepend on the kernel version.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The format for\nthis field was %lu before Linux 2.6.</p>\n\n<p style=\"margin-left:22%;\">(10) <i>minflt\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">The number of minor faults the\nprocess has made which have not required loading a memory\npage from disk.</p>\n\n<p style=\"margin-left:22%;\">(11) <i>cminflt\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">The number of minor faults that\nthe process&rsquo;s waited-for children have made.</p>\n\n<p style=\"margin-left:22%;\">(12) <i>majflt\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">The number of major faults the\nprocess has made which have required loading a memory page\nfrom disk.</p>\n\n<p style=\"margin-left:22%;\">(13) <i>cmajflt\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">The number of major faults that\nthe process&rsquo;s waited-for children have made.</p>\n\n<p style=\"margin-left:22%;\">(14) <i>utime &nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">Amount of time that this\nprocess has been scheduled in user mode, measured in clock\nticks (divide by <i>sysconf(_SC_CLK_TCK)</i>). This includes\nguest time, <i>guest_time</i> (time spent running a virtual\nCPU, see below), so that applications that are not aware of\nthe guest time field do not lose that time from their\ncalculations.</p>\n\n<p style=\"margin-left:22%;\">(15) <i>stime &nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">Amount of time that this\nprocess has been scheduled in kernel mode, measured in clock\nticks (divide by <i>sysconf(_SC_CLK_TCK)</i>).</p>\n\n<p style=\"margin-left:22%;\">(16) <i>cutime\n&nbsp;</i>%ld</p>\n\n<p style=\"margin-left:32%;\">Amount of time that this\nprocess&rsquo;s waited-for children have been scheduled in\nuser mode, measured in clock ticks (divide by\n<i>sysconf(_SC_CLK_TCK)</i>). (See also <a href=\"https://man.page/2/times\">times(2)</a>.)\nThis includes guest time, <i>cguest_time</i> (time spent\nrunning a virtual CPU, see below).</p>\n\n<p style=\"margin-left:22%;\">(17) <i>cstime\n&nbsp;</i>%ld</p>\n\n<p style=\"margin-left:32%;\">Amount of time that this\nprocess&rsquo;s waited-for children have been scheduled in\nkernel mode, measured in clock ticks (divide by\n<i>sysconf(_SC_CLK_TCK)</i>).</p>\n\n<p style=\"margin-left:22%;\">(18) <i>priority\n&nbsp;</i>%ld</p>\n\n<p style=\"margin-left:32%;\">(Explanation for Linux 2.6) For\nprocesses running a real-time scheduling policy\n(<i>policy</i> below; see <a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a>),\nthis is the negated scheduling priority, minus one; that is,\na number in the range -2 to -100, corresponding to real-time\npriorities 1 to 99. For processes running under a\nnon-real-time scheduling policy, this is the raw nice value\n(<a href=\"https://man.page/2/setpriority\">setpriority(2)</a>) as represented in the kernel. The\nkernel stores nice values as numbers in the range 0 (high)\nto 39 (low), corresponding to the user-visible nice range of\n-20 to 19.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Before Linux\n2.6, this was a scaled value based on the scheduler\nweighting given to this process.</p>\n\n<p style=\"margin-left:22%;\">(19) <i>nice &nbsp;</i>%ld</p>\n\n<p style=\"margin-left:32%;\">The nice value (see\n<a href=\"https://man.page/2/setpriority\">setpriority(2)</a>), a value in the range 19 (low\npriority) to -20 (high priority).</p>\n\n<p style=\"margin-left:22%;\">(20) <i>num_threads\n&nbsp;</i>%ld</p>\n\n<p style=\"margin-left:32%;\">Number of threads in this\nprocess (since Linux 2.6). Before kernel 2.6, this field was\nhard coded to 0 as a placeholder for an earlier removed\nfield.</p>\n\n<p style=\"margin-left:22%;\">(21) <i>itrealvalue\n&nbsp;</i>%ld</p>\n\n<p style=\"margin-left:32%;\">The time in jiffies before the\nnext <b>SIGALRM</b> is sent to the process due to an\ninterval timer. Since kernel 2.6.17, this field is no longer\nmaintained, and is hard coded as 0.</p>\n\n<p style=\"margin-left:22%;\">(22) <i>starttime\n&nbsp;</i>%llu</p>\n\n<p style=\"margin-left:32%;\">The time the process started\nafter system boot. In kernels before Linux 2.6, this value\nwas expressed in jiffies. Since Linux 2.6, the value is\nexpressed in clock ticks (divide by\n<i>sysconf(_SC_CLK_TCK)</i>).</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The format for\nthis field was %lu before Linux 2.6.</p>\n\n<p style=\"margin-left:22%;\">(23) <i>vsize &nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">Virtual memory size in\nbytes.</p>\n\n<p style=\"margin-left:22%;\">(24) <i>rss &nbsp;</i>%ld</p>\n\n<p style=\"margin-left:32%;\">Resident Set Size: number of\npages the process has in real memory. This is just the pages\nwhich count toward text, data, or stack space. This does not\ninclude pages which have not been demand-loaded in, or which\nare swapped out. This value is inaccurate; see\n<i>/proc/[pid]/statm</i> below.</p>\n\n<p style=\"margin-left:22%;\">(25) <i>rsslim\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">Current soft limit in bytes on\nthe rss of the process; see the description of\n<b>RLIMIT_RSS</b> in <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>.</p>\n\n<p style=\"margin-left:22%;\">(26) <i>startcode &nbsp;</i>%lu\n&nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">The address above which program\ntext can run.</p>\n\n<p style=\"margin-left:22%;\">(27) <i>endcode &nbsp;</i>%lu\n&nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">The address below which program\ntext can run.</p>\n\n<p style=\"margin-left:22%;\">(28) <i>startstack\n&nbsp;</i>%lu &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">The address of the start (i.e.,\nbottom) of the stack.</p>\n\n<p style=\"margin-left:22%;\">(29) <i>kstkesp &nbsp;</i>%lu\n&nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">The current value of ESP (stack\npointer), as found in the kernel stack page for the\nprocess.</p>\n\n<p style=\"margin-left:22%;\">(30) <i>kstkeip &nbsp;</i>%lu\n&nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">The current EIP (instruction\npointer).</p>\n\n<p style=\"margin-left:22%;\">(31) <i>signal\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">The bitmap of pending signals,\ndisplayed as a decimal number. Obsolete, because it does not\nprovide information on real-time signals; use\n<i>/proc/[pid]/status</i> instead.</p>\n\n<p style=\"margin-left:22%;\">(32) <i>blocked\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">The bitmap of blocked signals,\ndisplayed as a decimal number. Obsolete, because it does not\nprovide information on real-time signals; use\n<i>/proc/[pid]/status</i> instead.</p>\n\n<p style=\"margin-left:22%;\">(33) <i>sigignore\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">The bitmap of ignored signals,\ndisplayed as a decimal number. Obsolete, because it does not\nprovide information on real-time signals; use\n<i>/proc/[pid]/status</i> instead.</p>\n\n<p style=\"margin-left:22%;\">(34) <i>sigcatch\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">The bitmap of caught signals,\ndisplayed as a decimal number. Obsolete, because it does not\nprovide information on real-time signals; use\n<i>/proc/[pid]/status</i> instead.</p>\n\n<p style=\"margin-left:22%;\">(35) <i>wchan &nbsp;</i>%lu\n&nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">This is the &quot;channel&quot;\nin which the process is waiting. It is the address of a\nlocation in the kernel where the process is sleeping. The\ncorresponding symbolic name can be found in\n<i>/proc/[pid]/wchan</i>.</p>\n\n<p style=\"margin-left:22%;\">(36) <i>nswap &nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">Number of pages swapped (not\nmaintained).</p>\n\n<p style=\"margin-left:22%;\">(37) <i>cnswap\n&nbsp;</i>%lu</p>\n\n<p style=\"margin-left:32%;\">Cumulative <i>nswap</i> for\nchild processes (not maintained).</p>\n\n<p style=\"margin-left:22%;\">(38) <i>exit_signal\n&nbsp;</i>%d &nbsp;(since Linux 2.1.22)</p>\n\n<p style=\"margin-left:32%;\">Signal to be sent to parent\nwhen we die.</p>\n\n<p style=\"margin-left:22%;\">(39) <i>processor &nbsp;</i>%d\n&nbsp;(since Linux 2.2.8)</p>\n\n<p style=\"margin-left:32%;\">CPU number last executed\non.</p>\n\n<p style=\"margin-left:22%;\">(40) <i>rt_priority\n&nbsp;</i>%u &nbsp;(since Linux 2.5.19)</p>\n\n<p style=\"margin-left:32%;\">Real-time scheduling priority,\na number in the range 1 to 99 for processes scheduled under\na real-time policy, or 0, for non-real-time processes (see\n<a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a>).</p>\n\n<p style=\"margin-left:22%;\">(41) <i>policy &nbsp;</i>%u\n&nbsp;(since Linux 2.5.19)</p>\n\n<p style=\"margin-left:32%;\">Scheduling policy (see\n<a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a>). Decode using the SCHED_*\nconstants in <i>linux/sched.h</i>.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The format for\nthis field was %lu before Linux 2.6.22.</p>\n\n<p style=\"margin-left:22%;\">(42) <i>delayacct_blkio_ticks\n&nbsp;</i>%llu &nbsp;(since Linux 2.6.18)</p>\n\n<p style=\"margin-left:32%;\">Aggregated block I/O delays,\nmeasured in clock ticks (centiseconds).</p>\n\n<p style=\"margin-left:22%;\">(43) <i>guest_time\n&nbsp;</i>%lu &nbsp;(since Linux 2.6.24)</p>\n\n<p style=\"margin-left:32%;\">Guest time of the process (time\nspent running a virtual CPU for a guest operating system),\nmeasured in clock ticks (divide by\n<i>sysconf(_SC_CLK_TCK)</i>).</p>\n\n<p style=\"margin-left:22%;\">(44) <i>cguest_time\n&nbsp;</i>%ld &nbsp;(since Linux 2.6.24)</p>\n\n<p style=\"margin-left:32%;\">Guest time of the\nprocess&rsquo;s children, measured in clock ticks (divide by\n<i>sysconf(_SC_CLK_TCK)</i>).</p>\n\n<p style=\"margin-left:22%;\">(45) <i>start_data\n&nbsp;</i>%lu &nbsp;(since Linux 3.3) &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">Address above which program\ninitialized and uninitialized (BSS) data are placed.</p>\n\n<p style=\"margin-left:22%;\">(46) <i>end_data &nbsp;</i>%lu\n&nbsp;(since Linux 3.3) &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">Address below which program\ninitialized and uninitialized (BSS) data are placed.</p>\n\n<p style=\"margin-left:22%;\">(47) <i>start_brk &nbsp;</i>%lu\n&nbsp;(since Linux 3.3) &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">Address above which program\nheap can be expanded with <a href=\"https://man.page/2/brk\">brk(2)</a>.</p>\n\n<p style=\"margin-left:22%;\">(48) <i>arg_start &nbsp;</i>%lu\n&nbsp;(since Linux 3.5) &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">Address above which program\ncommand-line arguments (<i>argv</i>) are placed.</p>\n\n<p style=\"margin-left:22%;\">(49) <i>arg_end &nbsp;</i>%lu\n&nbsp;(since Linux 3.5) &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">Address below program\ncommand-line arguments (<i>argv</i>) are placed.</p>\n\n<p style=\"margin-left:22%;\">(50) <i>env_start &nbsp;</i>%lu\n&nbsp;(since Linux 3.5) &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">Address above which program\nenvironment is placed.</p>\n\n<p style=\"margin-left:22%;\">(51) <i>env_end &nbsp;</i>%lu\n&nbsp;(since Linux 3.5) &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">Address below which program\nenvironment is placed.</p>\n\n<p style=\"margin-left:22%;\">(52) <i>exit_code &nbsp;</i>%d\n&nbsp;(since Linux 3.5) &nbsp;[PT]</p>\n\n<p style=\"margin-left:32%;\">The thread&rsquo;s exit status\nin the form reported by <a href=\"https://man.page/2/waitpid\">waitpid(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/statm</i></p>\n\n<p style=\"margin-left:22%;\">Provides information about\nmemory usage, measured in pages. The columns are:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">size (1) total\nprogram size <br>\n(same as VmSize in <i>/proc/[pid]/status</i>) <br>\nresident (2) resident set size <br>\n(inaccurate; same as VmRSS in <i>/proc/[pid]/status</i>)\n<br>\nshared (3) number of resident shared pages <br>\n(i.e., backed by a file) <br>\n(inaccurate; same as RssFile+RssShmem in <i><br>\n/proc/[pid]/status</i>) <br>\ntext (4) text (code) <br>\nlib (5) library (unused since Linux 2.6; always 0) <br>\ndata (6) data + stack <br>\ndt (7) dirty pages (unused since Linux 2.6; always 0)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Some of these\nvalues are inaccurate because of a kernel-internal\nscalability optimization. If accurate values are required,\nuse <i>/proc/[pid]/smaps</i> or\n<i>/proc/[pid]/smaps_rollup</i> instead, which are much\nslower but provide accurate, detailed information.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/status</i></p>\n\n<p style=\"margin-left:22%;\">Provides much of the\ninformation in <i>/proc/[pid]/stat</i> and\n<i>/proc/[pid]/statm</i> in a format that&rsquo;s easier for\nhumans to parse. Here&rsquo;s an example:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>cat\n/proc/$$/status</b> <br>\nName: bash <br>\nUmask: 0022 <br>\nState: S (sleeping) <br>\nTgid: 17248 <br>\nNgid: 0 <br>\nPid: 17248 <br>\nPPid: 17200 <br>\nTracerPid: 0 <br>\nUid: 1000 1000 1000 1000 <br>\nGid: 100 100 100 100 <br>\nFDSize: 256 <br>\nGroups: 16 33 100 <br>\nNStgid: 17248 <br>\nNSpid: 17248 <br>\nNSpgid: 17248 <br>\nNSsid: 17200</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmPeak:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>131168 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmSize:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>131168 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmLck:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>0 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmPin:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>0 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmHWM:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>13484 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmRSS:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>13484 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>RssAnon:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>10264 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>RssFile:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>3220 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>RssShmem:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>0 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmData:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>10332 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmStk:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>136 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmExe:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>992 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmLib:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>2104 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmPTE:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>76 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmPMD:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>12 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>VmSwap:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>0 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>HugetlbPages: 0 kB</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n\n\n<p># 4.4</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n\n\n<p>CoreDumping:</p></td>\n<td width=\"15%\"></td>\n<td width=\"8%\">\n\n\n<p>0 # 4.15</p></td>\n<td width=\"8%\"></td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:28%;\">Threads: 1 <br>\nSigQ: 0/3067 <br>\nSigPnd: 0000000000000000 <br>\nShdPnd: 0000000000000000 <br>\nSigBlk: 0000000000010000 <br>\nSigIgn: 0000000000384004 <br>\nSigCgt: 000000004b813efb <br>\nCapInh: 0000000000000000 <br>\nCapPrm: 0000000000000000 <br>\nCapEff: 0000000000000000 <br>\nCapBnd: ffffffffffffffff</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>CapAmb:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"-20%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>0000000000000000</p></td></tr>\n</table>\n\n<p style=\"margin-left:28%;\">NoNewPrivs: 0 <br>\nSeccomp: 0 <br>\nSpeculation_Store_Bypass: vulnerable <br>\nCpus_allowed: 00000001 <br>\nCpus_allowed_list: 0 <br>\nMems_allowed: 1 <br>\nMems_allowed_list: 0 <br>\nvoluntary_ctxt_switches: 150 <br>\nnonvoluntary_ctxt_switches: 545</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields are\nas follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>Name</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Command run by this process. Strings longer than\n<b>TASK_COMM_LEN</b> (16) characters (including the\nterminating null byte) are silently truncated.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>Umask</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Process umask, expressed in octal with a leading zero;\nsee <a href=\"https://man.page/2/umask\">umask(2)</a>. (Since Linux 4.7.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>State</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Current state of the process. One of &quot;R\n(running)&quot;, &quot;S (sleeping)&quot;, &quot;D (disk\nsleep)&quot;, &quot;T (stopped)&quot;, &quot;t (tracing\nstop)&quot;, &quot;Z (zombie)&quot;, or &quot;X\n(dead)&quot;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>Tgid</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Thread group ID (i.e., Process ID).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>Ngid</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>NUMA group ID (0 if none; since Linux 3.13).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>Pid</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Thread ID (see <a href=\"https://man.page/2/gettid\">gettid(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>PPid</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>PID of parent process.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>TracerPid</i></p>\n\n<p style=\"margin-left:32%;\">PID of process tracing this\nprocess (0 if not being traced).</p>\n\n<p style=\"margin-left:22%;\"><i>Uid</i>, <i>Gid</i></p>\n\n<p style=\"margin-left:32%;\">Real, effective, saved set, and\nfilesystem UIDs (GIDs).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>FDSize</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Number of file descriptor slots currently allocated.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>Groups</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Supplementary group list.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>NStgid</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Thread group ID (i.e., PID) in each of the PID\nnamespaces of which <i>[pid]</i> is a member. The leftmost\nentry shows the value with respect to the PID namespace of\nthe process that mounted this procfs (or the root namespace\nif mounted by the kernel), followed by the value in\nsuccessively nested inner namespaces. (Since Linux 4.1.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>NSpid</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Thread ID in each of the PID namespaces of which\n<i>[pid]</i> is a member. The fields are ordered as for\n<i>NStgid</i>. (Since Linux 4.1.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>NSpgid</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Process group ID in each of the PID namespaces of which\n<i>[pid]</i> is a member. The fields are ordered as for\n<i>NStgid</i>. (Since Linux 4.1.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>NSsid</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>descendant namespace session ID hierarchy Session ID in\neach of the PID namespaces of which <i>[pid]</i> is a\nmember. The fields are ordered as for <i>NStgid</i>. (Since\nLinux 4.1.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmPeak</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Peak virtual memory size.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmSize</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Virtual memory size.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmLck</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Locked memory size (see <a href=\"https://man.page/2/mlock\">mlock(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmPin</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Pinned memory size (since Linux 3.2). These are pages\nthat can&rsquo;t be moved because something needs to\ndirectly access physical memory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmHWM</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Peak resident set size (&quot;high water mark&quot;).\nThis value is inaccurate; see <i>/proc/[pid]/statm</i>\nabove.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmRSS</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Resident set size. Note that the value here is the sum\nof <i>RssAnon</i>, <i>RssFile</i>, and <i>RssShmem</i>. This\nvalue is inaccurate; see <i>/proc/[pid]/statm</i> above.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>RssAnon</i></p>\n\n<p style=\"margin-left:32%;\">Size of resident anonymous\nmemory. (since Linux 4.5). This value is inaccurate; see\n<i>/proc/[pid]/statm</i> above.</p>\n\n<p style=\"margin-left:22%;\"><i>RssFile</i></p>\n\n<p style=\"margin-left:32%;\">Size of resident file mappings.\n(since Linux 4.5). This value is inaccurate; see\n<i>/proc/[pid]/statm</i> above.</p>\n\n<p style=\"margin-left:22%;\"><i>RssShmem</i></p>\n\n<p style=\"margin-left:32%;\">Size of resident shared memory\n(includes System V shared memory, mappings from\n<a href=\"https://man.page/5/tmpfs\">tmpfs(5)</a>, and shared anonymous mappings). (since\nLinux 4.5).</p>\n\n<p style=\"margin-left:22%;\"><i>VmData</i>, <i>VmStk</i>,\n<i>VmExe</i></p>\n\n<p style=\"margin-left:32%;\">Size of data, stack, and text\nsegments. This value is inaccurate; see\n<i>/proc/[pid]/statm</i> above.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmLib</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Shared library code size.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmPTE</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Page table entries size (since Linux 2.6.10).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmPMD</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Size of second-level page tables (added in Linux 4.0;\nremoved in Linux 4.15).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>VmSwap</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Swapped-out virtual memory size by anonymous private\npages; shmem swap usage is not included (since Linux\n2.6.34). This value is inaccurate; see\n<i>/proc/[pid]/statm</i> above.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>HugetlbPages</i></p>\n\n<p style=\"margin-left:32%;\">Size of hugetlb memory portions\n(since Linux 4.4).</p>\n\n<p style=\"margin-left:22%;\"><i>CoreDumping</i></p>\n\n<p style=\"margin-left:32%;\">Contains the value 1 if the\nprocess is currently dumping core, and 0 if it is not (since\nLinux 4.15). This information can be used by a monitoring\nprocess to avoid killing a process that is currently dumping\ncore, which could result in a corrupted core dump file.</p>\n\n<p style=\"margin-left:22%;\"><i>Threads</i></p>\n\n<p style=\"margin-left:32%;\">Number of threads in process\ncontaining this thread.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><i>SigQ</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>This field contains two slash-separated numbers that\nrelate to queued signals for the real user ID of this\nprocess. The first of these is the number of currently\nqueued signals for this real user ID, and the second is the\nresource limit on the number of queued signals for this\nprocess (see the description of <b>RLIMIT_SIGPENDING</b> in\n<a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>SigPnd</i>,\n<i>ShdPnd</i></p>\n\n<p style=\"margin-left:32%;\">Mask (expressed in hexadecimal)\nof signals pending for thread and for process as a whole\n(see <a href=\"https://man.page/7/pthreads\">pthreads(7)</a> and <a href=\"https://man.page/7/signal\">signal(7)</a>).</p>\n\n<p style=\"margin-left:22%;\"><i>SigBlk</i>, <i>SigIgn</i>,\n<i>SigCgt</i></p>\n\n<p style=\"margin-left:32%;\">Masks (expressed in\nhexadecimal) indicating signals being blocked, ignored, and\ncaught (see <a href=\"https://man.page/7/signal\">signal(7)</a>).</p>\n\n<p style=\"margin-left:22%;\"><i>CapInh</i>, <i>CapPrm</i>,\n<i>CapEff</i></p>\n\n<p style=\"margin-left:32%;\">Masks (expressed in\nhexadecimal) of capabilities enabled in inheritable,\npermitted, and effective sets (see\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>CapBnd</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Capability bounding set, expressed in hexadecimal (since\nLinux 2.6.26, see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>CapAmb</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Ambient capability set, expressed in hexadecimal (since\nLinux 4.3, see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>NoNewPrivs</i></p>\n\n<p style=\"margin-left:32%;\">Value of the\n<i>no_new_privs</i> bit (since Linux 4.10, see\n<a href=\"https://man.page/2/prctl\">prctl(2)</a>).</p>\n\n<p style=\"margin-left:22%;\"><i>Seccomp</i></p>\n\n<p style=\"margin-left:32%;\">Seccomp mode of the process\n(since Linux 3.8, see <a href=\"https://man.page/2/seccomp\">seccomp(2)</a>). 0 means\n<b>SECCOMP_MODE_DISABLED</b>; 1 means\n<b>SECCOMP_MODE_STRICT</b>; 2 means\n<b>SECCOMP_MODE_FILTER</b>. This field is provided only if\nthe kernel was built with the <b>CONFIG_SECCOMP</b> kernel\nconfiguration option enabled.</p>\n\n\n<p style=\"margin-left:22%;\"><i>Speculation_Store_Bypass</i></p>\n\n<p style=\"margin-left:32%;\">Speculation flaw mitigation\nstate (since Linux 4.17, see <a href=\"https://man.page/2/prctl\">prctl(2)</a>).</p>\n\n<p style=\"margin-left:22%;\"><i>Cpus_allowed</i></p>\n\n<p style=\"margin-left:32%;\">Hexadecimal mask of CPUs on\nwhich this process may run (since Linux 2.6.24, see\n<a href=\"https://man.page/7/cpuset\">cpuset(7)</a>).</p>\n\n<p style=\"margin-left:22%;\"><i>Cpus_allowed_list</i></p>\n\n<p style=\"margin-left:32%;\">Same as previous, but in\n&quot;list format&quot; (since Linux 2.6.26, see\n<a href=\"https://man.page/7/cpuset\">cpuset(7)</a>).</p>\n\n<p style=\"margin-left:22%;\"><i>Mems_allowed</i></p>\n\n<p style=\"margin-left:32%;\">Mask of memory nodes allowed to\nthis process (since Linux 2.6.24, see <a href=\"https://man.page/7/cpuset\">cpuset(7)</a>).</p>\n\n<p style=\"margin-left:22%;\"><i>Mems_allowed_list</i></p>\n\n<p style=\"margin-left:32%;\">Same as previous, but in\n&quot;list format&quot; (since Linux 2.6.26, see\n<a href=\"https://man.page/7/cpuset\">cpuset(7)</a>).</p>\n\n\n<p style=\"margin-left:22%;\"><i>voluntary_ctxt_switches</i>,\n<i>nonvoluntary_ctxt_switches</i></p>\n\n<p style=\"margin-left:32%;\">Number of voluntary and\ninvoluntary context switches (since Linux 2.6.23).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/syscall</i>\n(since Linux 2.6.27)</p>\n\n<p style=\"margin-left:22%;\">This file exposes the system\ncall number and argument registers for the system call\ncurrently being executed by the process, followed by the\nvalues of the stack pointer and program counter registers.\nThe values of all six argument registers are exposed,\nalthough most system calls use fewer registers.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the process\nis blocked, but not in a system call, then the file displays\n-1 in place of the system call number, followed by just the\nvalues of the stack pointer and program counter. If process\nis not blocked, then the file contains just the string\n&quot;running&quot;.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This file is\npresent only if the kernel was configured with\n<b>CONFIG_HAVE_ARCH_TRACEHOOK</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_ATTACH_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/task</i> (since\nLinux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">This is a directory that\ncontains one subdirectory for each thread in the process.\nThe name of each subdirectory is the numerical thread ID\n(<i>[tid]</i>) of the thread (see <a href=\"https://man.page/2/gettid\">gettid(2)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Within each of\nthese subdirectories, there is a set of files with the same\nnames and contents as under the <i>/proc/[pid]</i>\ndirectories. For attributes that are shared by all threads,\nthe contents for each of the files under the\n<i>task/[tid]</i> subdirectories will be the same as in the\ncorresponding file in the parent <i>/proc/[pid]</i>\ndirectory (e.g., in a multithreaded process, all of the\n<i>task/[tid]/cwd</i> files will have the same value as the\n<i>/proc/[pid]/cwd</i> file in the parent directory, since\nall of the threads in a process share a working directory).\nFor attributes that are distinct for each thread, the\ncorresponding files under <i>task/[tid]</i> may have\ndifferent values (e.g., various fields in each of the\n<i>task/[tid]/status</i> files may be different for each\nthread), or they might not exist in <i>/proc/[pid]</i> at\nall.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In a\nmultithreaded process, the contents of the\n<i>/proc/[pid]/task</i> directory are not available if the\nmain thread has already terminated (typically by calling\n<a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>).</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/task/[tid]/children</i>\n(since Linux 3.5)</p>\n\n<p style=\"margin-left:22%;\">A space-separated list of child\ntasks of this task. Each child task is represented by its\nTID.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option is\nintended for use by the checkpoint-restore (CRIU) system,\nand reliably provides a list of children only if all of the\nchild processes are stopped or frozen. It does not work\nproperly if children of the target task exit while the file\nis being read! Exiting children may cause non-exiting\nchildren to be omitted from the list. This makes this\ninterface even more unreliable than classic PID-based\napproaches if the inspected task and its children\naren&rsquo;t frozen, and most code should probably not use\nthis interface.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Until Linux\n4.2, the presence of this file was governed by the\n<b>CONFIG_CHECKPOINT_RESTORE</b> kernel configuration\noption. Since Linux 4.2, it is governed by the\n<b>CONFIG_PROC_CHILDREN</b> option.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/timers</i>\n(since Linux 3.10)</p>\n\n<p style=\"margin-left:22%;\">A list of the POSIX timers for\nthis process. Each timer is listed with a line that starts\nwith the string &quot;ID:&quot;. For example:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">ID: 1 <br>\nsignal: 60/00007fff86e452a8 <br>\nnotify: signal/pid.2634 <br>\nClockID: 0 <br>\nID: 0 <br>\nsignal: 60/00007fff86e452a8 <br>\nnotify: signal/pid.2634 <br>\nClockID: 1</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The lines shown\nfor each timer have the following meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>ID</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The ID for this timer. This is not the same as the timer\nID returned by <a href=\"https://man.page/2/timer_create\">timer_create(2)</a>; rather, it is the\nsame kernel-internal ID that is available via the\n<i>si_timerid</i> field of the <i>siginfo_t</i> structure\n(see <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>signal</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>This is the signal number that this timer uses to\ndeliver notifications followed by a slash, and then the\n<i>sigev_value</i> value supplied to the signal handler.\nValid only for timers that notify via a signal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><i>notify</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The part before the slash specifies the mechanism that\nthis timer uses to deliver notifications, and is one of\n&quot;thread&quot;, &quot;signal&quot;, or &quot;none&quot;.\nImmediately following the slash is either the string\n&quot;tid&quot; for timers with <b>SIGEV_THREAD_ID</b>\nnotification, or &quot;pid&quot; for timers that notify by\nother mechanisms. Following the &quot;.&quot; is the PID of\nthe process (or the kernel thread ID of the thread) that\nwill be delivered a signal if the timer delivers\nnotifications via a signal.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>ClockID</i></p>\n\n<p style=\"margin-left:32%;\">This field identifies the clock\nthat the timer uses for measuring time. For most clocks,\nthis is a number that matches one of the user-space\n<b>CLOCK_*</b> constants exposed via <i>&lt;time.h&gt;</i>.\n<b>CLOCK_PROCESS_CPUTIME_ID</b> timers display with a value\nof -6 in this field. <b>CLOCK_THREAD_CPUTIME_ID</b> timers\ndisplay with a value of -2 in this field.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This file is\navailable only when the kernel was configured with\n<b>CONFIG_CHECKPOINT_RESTORE</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/timerslack_ns</i>\n(since Linux 4.6)</p>\n\n<p style=\"margin-left:22%;\">This file exposes the\nprocess&rsquo;s &quot;current&quot; timer slack value,\nexpressed in nanoseconds. The file is writable, allowing the\nprocess&rsquo;s timer slack value to be changed. Writing 0\nto this file resets the &quot;current&quot; timer slack to\nthe &quot;default&quot; timer slack value. For further\ndetails, see the discussion of <b>PR_SET_TIMERSLACK</b> in\n<a href=\"https://man.page/2/prctl\">prctl(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Initially,\npermission to access this file was governed by a ptrace\naccess mode <b>PTRACE_MODE_ATTACH_FSCREDS</b> check (see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>). However, this was subsequently deemed too\nstrict a requirement (and had the side effect that requiring\na process to have the <b>CAP_SYS_PTRACE</b> capability would\nalso allow it to view and change any process&rsquo;s\nmemory). Therefore, since Linux 4.9, only the (weaker)\n<b>CAP_SYS_NICE</b> capability is required to access this\nfile.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/uid_map</i>,\n<i>/proc/[pid]/gid_map</i> (since Linux 3.5)</p>\n\n<p style=\"margin-left:22%;\">See\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/wchan</i> (since\nLinux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">The symbolic name corresponding\nto the location in the kernel where the process is\nsleeping.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Permission to\naccess this file is governed by a ptrace access mode\n<b>PTRACE_MODE_READ_FSCREDS</b> check; see\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/[tid]</i></p>\n\n<p style=\"margin-left:22%;\">There is a numerical\nsubdirectory for each running thread that is not a thread\ngroup leader (i.e., a thread whose thread ID is not the same\nas its process ID); the subdirectory is named by the thread\nID. Each one of these subdirectories contains files and\nsubdirectories exposing information about the thread with\nthe thread ID <i>tid</i>. The contents of these directories\nare the same as the corresponding\n<i>/proc/[pid]/task/[tid]</i> directories.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/[tid]</i> subdirectories are <i>not</i> visible\nwhen iterating through <i>/proc</i> with <a href=\"https://man.page/2/getdents\">getdents(2)</a>\n(and thus are <i>not</i> visible when one uses <a href=\"https://man.page/1/ls\">ls(1)</a>\nto view the contents of <i>/proc</i>). However, the\npathnames of these directories are visible to (i.e., usable\nas arguments in) system calls that operate on pathnames.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/apm</i></p>\n\n<p style=\"margin-left:22%;\">Advanced power management\nversion and battery information when <b>CONFIG_APM</b> is\ndefined at kernel compilation time.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/buddyinfo</i></p>\n\n<p style=\"margin-left:22%;\">This file contains information\nwhich is used for diagnosing memory fragmentation issues.\nEach line starts with the identification of the node and the\nname of the zone which together identify a memory region.\nThis is then followed by the count of available chunks of a\ncertain order in which these zones are split. The size in\nbytes of a certain order is given by the formula:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">(2^order)&nbsp;*&nbsp;PAGE_SIZE</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The binary\nbuddy allocator algorithm inside the kernel will split one\nchunk into two chunks of a smaller order (thus with half the\nsize) or combine two contiguous chunks into one larger chunk\nof a higher order (thus with double the size) to satisfy\nallocation requests and to counter memory fragmentation. The\norder matches the column number, when starting to count at\nzero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For example on\nan x86-64 system:</p>\n\n<p style=\"margin-left:14%;\">Node 0, zone DMA 1 1 1 0 2 1 1\n0 1 1 3 <br>\nNode 0, zone DMA32 65 47 4 81 52 28 13 10 5 1 404 <br>\nNode 0, zone Normal 216 55 189 101 84 38 37 27 5 3 587</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In this\nexample, there is one node containing three zones and there\nare 11 different chunk sizes. If the page size is 4\nkilobytes, then the first zone called <i>DMA</i> (on x86 the\nfirst 16 megabyte of memory) has 1 chunk of 4 kilobytes\n(order 0) available and has 3 chunks of 4 megabytes (order\n10) available.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the memory\nis heavily fragmented, the counters for higher order chunks\nwill be zero and allocation of large contiguous areas will\nfail.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Further\ninformation about the zones can be found in\n<i>/proc/zoneinfo</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/bus</i></p>\n\n<p style=\"margin-left:22%;\">Contains subdirectories for\ninstalled busses.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/bus/pccard</i></p>\n\n<p style=\"margin-left:22%;\">Subdirectory for PCMCIA devices\nwhen <b>CONFIG_PCMCIA</b> is set at kernel compilation\ntime.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/bus/pccard/drivers\n<br>\n/proc/bus/pci</i></p>\n\n<p style=\"margin-left:22%;\">Contains various bus\nsubdirectories and pseudo-files containing information about\nPCI busses, installed devices, and device drivers. Some of\nthese files are not ASCII.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/bus/pci/devices</i></p>\n\n<p style=\"margin-left:22%;\">Information about PCI devices.\nThey may be accessed through <b>lspci</b>(8) and\n<b>setpci</b>(8).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/cgroups</i> (since\nLinux 2.6.24)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/cgroups\">cgroups(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/cmdline</i></p>\n\n<p style=\"margin-left:22%;\">Arguments passed to the Linux\nkernel at boot time. Often done via a boot manager such as\n<b>lilo</b>(8) or <b>grub</b>(8).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/config.gz</i> (since\nLinux 2.6)</p>\n\n<p style=\"margin-left:22%;\">This file exposes the\nconfiguration options that were used to build the currently\nrunning kernel, in the same format as they would be shown in\nthe <i>.config</i> file that resulted when configuring the\nkernel (using <i>make xconfig</i>, <i>make config</i>, or\nsimilar). The file contents are compressed; view or search\nthem using <a href=\"https://man.page/1/zcat\">zcat(1)</a> and <a href=\"https://man.page/1/zgrep\">zgrep(1)</a>. As long as no\nchanges have been made to the following file, the contents\nof <i>/proc/config.gz</i> are the same as those provided\nby:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">cat\n/lib/modules/$(uname -r)/build/.config</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>/proc/config.gz</i>\nis provided only if the kernel is configured with\n<b>CONFIG_IKCONFIG_PROC</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/crypto</i></p>\n\n<p style=\"margin-left:22%;\">A list of the ciphers provided\nby the kernel crypto API. For details, see the kernel\n<i>Linux Kernel Crypto API</i> documentation available under\nthe kernel source directory <i>Documentation/crypto/</i> (or\n<i>Documentation/DocBook</i> before 4.10; the documentation\ncan be built using a command such as <i>make htmldocs</i> in\nthe root directory of the kernel source tree).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/cpuinfo</i></p>\n\n<p style=\"margin-left:22%;\">This is a collection of CPU and\nsystem architecture dependent items, for each supported\narchitecture a different list. Two common entries are\n<i>processor</i> which gives CPU number and <i>bogomips</i>;\na system constant that is calculated during kernel\ninitialization. SMP machines have information for each CPU.\nThe <a href=\"https://man.page/1/lscpu\">lscpu(1)</a> command gathers its information from\nthis file.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/devices</i></p>\n\n<p style=\"margin-left:22%;\">Text listing of major numbers\nand device groups. This can be used by MAKEDEV scripts for\nconsistency with the kernel.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/diskstats</i> (since\nLinux 2.5.69)</p>\n\n<p style=\"margin-left:22%;\">This file contains disk I/O\nstatistics for each disk device. See the Linux kernel source\nfile <i>Documentation/iostats.txt</i> for further\ninformation.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/dma</i></p>\n\n<p style=\"margin-left:22%;\">This is a list of the\nregistered <i>ISA</i> DMA (direct memory access) channels in\nuse.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/driver</i></p>\n\n<p style=\"margin-left:22%;\">Empty subdirectory.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/execdomains</i></p>\n\n<p style=\"margin-left:22%;\">List of the execution domains\n(ABI personalities).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/fb</i></p>\n\n<p style=\"margin-left:22%;\">Frame buffer information when\n<b>CONFIG_FB</b> is defined during kernel compilation.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/filesystems</i></p>\n\n<p style=\"margin-left:22%;\">A text listing of the\nfilesystems which are supported by the kernel, namely\nfilesystems which were compiled into the kernel or whose\nkernel modules are currently loaded. (See also\n<a href=\"https://man.page/5/filesystems\">filesystems(5)</a>.) If a filesystem is marked with\n&quot;nodev&quot;, this means that it does not require a\nblock device to be mounted (e.g., virtual filesystem,\nnetwork filesystem).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Incidentally,\nthis file may be used by <b>mount</b>(8) when no filesystem\nis specified and it didn&rsquo;t manage to determine the\nfilesystem type. Then filesystems contained in this file are\ntried (excepted those that are marked with\n&quot;nodev&quot;).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/fs</i></p>\n\n<p style=\"margin-left:22%;\">Contains subdirectories that in\nturn contain files with information about (certain) mounted\nfilesystems.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/ide</i></p>\n\n<p style=\"margin-left:22%;\">This directory exists on\nsystems with the IDE bus. There are directories for each IDE\nchannel and attached device. Files include:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">cache buffer\nsize in KB <br>\ncapacity number of sectors <br>\ndriver driver version <br>\ngeometry physical and logical geometry <br>\nidentify in hexadecimal <br>\nmedia media type <br>\nmodel manufacturer's model number <br>\nsettings drive settings <br>\nsmart_thresholds IDE disk management thresholds (in hex)\n<br>\nsmart_values IDE disk management values (in hex)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>hdparm</b>(8) utility provides access to this information\nin a friendly format.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/interrupts</i></p>\n\n<p style=\"margin-left:22%;\">This is used to record the\nnumber of interrupts per CPU per IO device. Since Linux\n2.6.24, for the i386 and x86-64 architectures, at least,\nthis also includes interrupts internal to the system (that\nis, not associated with a device as such), such as NMI\n(nonmaskable interrupt), LOC (local timer interrupt), and\nfor SMP systems, TLB (TLB flush interrupt), RES\n(rescheduling interrupt), CAL (remote function call\ninterrupt), and possibly others. Very easy to read\nformatting, done in ASCII.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/iomem</i></p>\n\n<p style=\"margin-left:22%;\">I/O memory map in Linux\n2.4.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/ioports</i></p>\n\n<p style=\"margin-left:22%;\">This is a list of currently\nregistered Input-Output port regions that are in use.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/kallsyms</i> (since\nLinux 2.5.71)</p>\n\n<p style=\"margin-left:22%;\">This holds the kernel exported\nsymbol definitions used by the <b>modules</b>(X) tools to\ndynamically link and bind loadable modules. In Linux 2.5.47\nand earlier, a similar file with slightly different syntax\nwas named <i>ksyms</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/kcore</i></p>\n\n<p style=\"margin-left:22%;\">This file represents the\nphysical memory of the system and is stored in the ELF core\nfile format. With this pseudo-file, and an unstripped kernel\n(<i>/usr/src/linux/vmlinux</i>) binary, GDB can be used to\nexamine the current state of any kernel data structures.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The total\nlength of the file is the size of physical memory (RAM) plus\n4&nbsp;KiB.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/keys</i> (since Linux\n2.6.10)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/keyrings\">keyrings(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/key-users</i> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/keyrings\">keyrings(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/kmsg</i></p>\n\n<p style=\"margin-left:22%;\">This file can be used instead\nof the <a href=\"https://man.page/2/syslog\">syslog(2)</a> system call to read kernel messages.\nA process must have superuser privileges to read this file,\nand only one process should read this file. This file should\nnot be read if a syslog process is running which uses the\n<a href=\"https://man.page/2/syslog\">syslog(2)</a> system call facility to log kernel\nmessages.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Information in\nthis file is retrieved with the <a href=\"https://man.page/1/dmesg\">dmesg(1)</a> program.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/kpagecgroup</i> (since\nLinux 4.3)</p>\n\n<p style=\"margin-left:22%;\">This file contains a 64-bit\ninode number of the memory cgroup each page is charged to,\nindexed by page frame number (see the discussion of\n<i>/proc/[pid]/pagemap</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/kpagecgroup</i> file is present only if the\n<b>CONFIG_MEMCG</b> kernel configuration option is\nenabled.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/kpagecount</i> (since\nLinux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">This file contains a 64-bit\ncount of the number of times each physical page frame is\nmapped, indexed by page frame number (see the discussion of\n<i>/proc/[pid]/pagemap</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/kpagecount</i> file is present only if the\n<b>CONFIG_PROC_PAGE_MONITOR</b> kernel configuration option\nis enabled.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/kpageflags</i> (since\nLinux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">This file contains 64-bit masks\ncorresponding to each physical page frame; it is indexed by\npage frame number (see the discussion of\n<i>/proc/[pid]/pagemap</i>). The bits are as follows:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">0 - KPF_LOCKED\n<br>\n1 - KPF_ERROR <br>\n2 - KPF_REFERENCED <br>\n3 - KPF_UPTODATE <br>\n4 - KPF_DIRTY <br>\n5 - KPF_LRU <br>\n6 - KPF_ACTIVE <br>\n7 - KPF_SLAB <br>\n8 - KPF_WRITEBACK <br>\n9 - KPF_RECLAIM <br>\n10 - KPF_BUDDY <br>\n11 - KPF_MMAP (since Linux 2.6.31) <br>\n12 - KPF_ANON (since Linux 2.6.31) <br>\n13 - KPF_SWAPCACHE (since Linux 2.6.31) <br>\n14 - KPF_SWAPBACKED (since Linux 2.6.31) <br>\n15 - KPF_COMPOUND_HEAD (since Linux 2.6.31) <br>\n16 - KPF_COMPOUND_TAIL (since Linux 2.6.31) <br>\n17 - KPF_HUGE (since Linux 2.6.31) <br>\n18 - KPF_UNEVICTABLE (since Linux 2.6.31) <br>\n19 - KPF_HWPOISON (since Linux 2.6.31) <br>\n20 - KPF_NOPAGE (since Linux 2.6.31) <br>\n21 - KPF_KSM (since Linux 2.6.32) <br>\n22 - KPF_THP (since Linux 3.4) <br>\n23 - KPF_BALLOON (since Linux 3.18) <br>\n24 - KPF_ZERO_PAGE (since Linux 4.0) <br>\n25 - KPF_IDLE (since Linux 4.3)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For further\ndetails on the meanings of these bits, see the kernel source\nfile <i>Documentation/admin-guide/mm/pagemap.rst</i>. Before\nkernel 2.6.29, <b>KPF_WRITEBACK</b>, <b>KPF_RECLAIM</b>,\n<b>KPF_BUDDY</b>, and <b>KPF_LOCKED</b> did not report\ncorrectly.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/kpageflags</i> file is present only if the\n<b>CONFIG_PROC_PAGE_MONITOR</b> kernel configuration option\nis enabled.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/ksyms</i> (Linux\n1.1.23&ndash;2.5.47)</p>\n\n<p style=\"margin-left:22%;\">See <i>/proc/kallsyms</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/loadavg</i></p>\n\n<p style=\"margin-left:22%;\">The first three fields in this\nfile are load average figures giving the number of jobs in\nthe run queue (state R) or waiting for disk I/O (state D)\naveraged over 1, 5, and 15 minutes. They are the same as the\nload average numbers given by <a href=\"https://man.page/1/uptime\">uptime(1)</a> and other\nprograms. The fourth field consists of two numbers separated\nby a slash (/). The first of these is the number of\ncurrently runnable kernel scheduling entities (processes,\nthreads). The value after the slash is the number of kernel\nscheduling entities that currently exist on the system. The\nfifth field is the PID of the process that was most recently\ncreated on the system.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/locks</i></p>\n\n<p style=\"margin-left:22%;\">This file shows current file\nlocks (<a href=\"https://man.page/2/flock\">flock(2)</a> and <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>) and leases\n(<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">An example of\nthe content shown in this file is the following:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">1: POSIX\nADVISORY READ 5433 08:01:7864448 128 128 <br>\n2: FLOCK ADVISORY WRITE 2001 08:01:7864554 0 EOF <br>\n3: FLOCK ADVISORY WRITE 1568 00:2f:32388 0 EOF <br>\n4: POSIX ADVISORY WRITE 699 00:16:28457 0 EOF <br>\n5: POSIX ADVISORY WRITE 764 00:16:21448 0 0 <br>\n6: POSIX ADVISORY READ 3548 08:01:7867240 1 1 <br>\n7: POSIX ADVISORY READ 3548 08:01:7865567 1826 2335 <br>\n8: OFDLCK ADVISORY WRITE -1 08:01:8713209 128 191</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields\nshown in each line are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p>The ordinal position of the lock in the list.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p>The lock type. Values that may appear here include:</p></td></tr>\n</table>\n\n<p style=\"margin-left:28%;\"><b>FLOCK</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\"></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p style=\"margin-top: 1em\">This is a BSD file lock created\nusing <a href=\"https://man.page/2/flock\">flock(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>OFDLCK</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p>This is an open file description (OFD) lock created\nusing <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>POSIX</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n\n\n<p>This is a POSIX byte-range lock created using\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p>(3)</p></td>\n<td width=\"1%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:28%; margin-top: 1em\">Among the\nstrings that can appear here are the following: <b><br>\nADVISORY</b></p>\n\n<p style=\"margin-left:38%;\">This is an advisory lock.</p>\n\n<p style=\"margin-left:28%;\"><b>MANDATORY</b></p>\n\n<p style=\"margin-left:38%;\">This is a mandatory lock.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(4)</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p>The type of lock. Values that can appear here are:</p></td></tr>\n</table>\n\n<p style=\"margin-left:28%;\"><b>READ</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\"></td>\n<td width=\"3%\"></td>\n<td width=\"62%\">\n\n\n<p style=\"margin-top: 1em\">This is a POSIX or OFD read\nlock, or a BSD shared lock.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><b>WRITE</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"62%\">\n\n\n<p>This is a POSIX or OFD write lock, or a BSD exclusive\nlock.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p>(5)</p></td>\n<td width=\"3%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:28%; margin-top: 1em\">The PID of the\nprocess that owns the lock.</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">Because OFD\nlocks are not owned by a single process (since multiple\nprocesses may have file descriptors that refer to the same\nopen file description), the value -1 is displayed in this\nfield for OFD locks. (Before kernel 4.14, a bug meant that\nthe PID of the process that initially acquired the lock was\ndisplayed instead of the value -1.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\">(6)</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p style=\"margin-top: 1em\">Three colon-separated subfields\nthat identify the major and minor device ID of the device\ncontaining the filesystem where the locked file resides,\nfollowed by the inode number of the locked file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(7)</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p>The byte offset of the first byte of the lock. For BSD\nlocks, this value is always 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(8)</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p>The byte offset of the last byte of the lock. <b>EOF</b>\nin this field means that the lock extends to the end of the\nfile. For BSD locks, the value shown is always\n<i>EOF</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n4.9, the list of locks shown in <i>/proc/locks</i> is\nfiltered to show just the locks for the processes in the PID\nnamespace (see <a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>) for which the\n<i>/proc</i> filesystem was mounted. (In the initial PID\nnamespace, there is no filtering of the records shown in\nthis file.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>lslocks</b>(8) command provides a bit more information\nabout each lock.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/malloc</i> (only up to\nand including Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This file is present only if\n<b>CONFIG_DEBUG_MALLOC</b> was defined during\ncompilation.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/meminfo</i></p>\n\n<p style=\"margin-left:22%;\">This file reports statistics\nabout memory usage on the system. It is used by\n<a href=\"https://man.page/1/free\">free(1)</a> to report the amount of free and used memory\n(both physical and swap) on the system as well as the shared\nmemory and buffers used by the kernel. Each line of the file\nconsists of a parameter name, followed by a colon, the value\nof the parameter, and an option unit of measurement (e.g.,\n&quot;kB&quot;). The list below describes the parameter\nnames and the format specifier required to read the field\nvalue. Except as noted below, all of the fields have been\npresent since at least Linux 2.6.0. Some fields are\ndisplayed only if the kernel was configured with various\noptions; those dependencies are noted in the list. <i><br>\nMemTotal</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Total usable RAM (i.e.,\nphysical RAM minus a few reserved bits and the kernel binary\ncode).</p>\n\n<p style=\"margin-left:22%;\"><i>MemFree</i> %lu</p>\n\n<p style=\"margin-left:32%;\">The sum of\n<i>LowFree</i>+<i>HighFree</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>MemAvailable</i> %lu (since\nLinux 3.14)</p>\n\n<p style=\"margin-left:32%;\">An estimate of how much memory\nis available for starting new applications, without\nswapping.</p>\n\n<p style=\"margin-left:22%;\"><i>Buffers</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Relatively temporary storage\nfor raw disk blocks that shouldn&rsquo;t get tremendously\nlarge (20 MB or so).</p>\n\n<p style=\"margin-left:22%;\"><i>Cached</i> %lu</p>\n\n<p style=\"margin-left:32%;\">In-memory cache for files read\nfrom the disk (the page cache). Doesn&rsquo;t include\n<i>SwapCached</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>SwapCached</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Memory that once was swapped\nout, is swapped back in but still also is in the swap file.\n(If memory pressure is high, these pages don&rsquo;t need to\nbe swapped out again because they are already in the swap\nfile. This saves I/O.)</p>\n\n<p style=\"margin-left:22%;\"><i>Active</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Memory that has been used more\nrecently and usually not reclaimed unless absolutely\nnecessary.</p>\n\n<p style=\"margin-left:22%;\"><i>Inactive</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Memory which has been less\nrecently used. It is more eligible to be reclaimed for other\npurposes.</p>\n\n<p style=\"margin-left:22%;\"><i>Active(anon)</i> %lu (since\nLinux 2.6.28)</p>\n\n<p style=\"margin-left:32%;\">[To be documented.]</p>\n\n<p style=\"margin-left:22%;\"><i>Inactive(anon)</i> %lu\n(since Linux 2.6.28)</p>\n\n<p style=\"margin-left:32%;\">[To be documented.]</p>\n\n<p style=\"margin-left:22%;\"><i>Active(file)</i> %lu (since\nLinux 2.6.28)</p>\n\n<p style=\"margin-left:32%;\">[To be documented.]</p>\n\n<p style=\"margin-left:22%;\"><i>Inactive(file)</i> %lu\n(since Linux 2.6.28)</p>\n\n<p style=\"margin-left:32%;\">[To be documented.]</p>\n\n<p style=\"margin-left:22%;\"><i>Unevictable</i> %lu (since\nLinux 2.6.28)</p>\n\n<p style=\"margin-left:32%;\">(From Linux 2.6.28 to 2.6.30,\n<b>CONFIG_UNEVICTABLE_LRU</b> was required.) [To be\ndocumented.]</p>\n\n<p style=\"margin-left:22%;\"><i>Mlocked</i> %lu (since Linux\n2.6.28)</p>\n\n<p style=\"margin-left:32%;\">(From Linux 2.6.28 to 2.6.30,\n<b>CONFIG_UNEVICTABLE_LRU</b> was required.) [To be\ndocumented.]</p>\n\n<p style=\"margin-left:22%;\"><i>HighTotal</i> %lu</p>\n\n<p style=\"margin-left:32%;\">(Starting with Linux 2.6.19,\n<b>CONFIG_HIGHMEM</b> is required.) Total amount of highmem.\nHighmem is all memory above ~860 MB of physical memory.\nHighmem areas are for use by user-space programs, or for the\npage cache. The kernel must use tricks to access this\nmemory, making it slower to access than lowmem.</p>\n\n<p style=\"margin-left:22%;\"><i>HighFree</i> %lu</p>\n\n<p style=\"margin-left:32%;\">(Starting with Linux 2.6.19,\n<b>CONFIG_HIGHMEM</b> is required.) Amount of free\nhighmem.</p>\n\n<p style=\"margin-left:22%;\"><i>LowTotal</i> %lu</p>\n\n<p style=\"margin-left:32%;\">(Starting with Linux 2.6.19,\n<b>CONFIG_HIGHMEM</b> is required.) Total amount of lowmem.\nLowmem is memory which can be used for everything that\nhighmem can be used for, but it is also available for the\nkernel&rsquo;s use for its own data structures. Among many\nother things, it is where everything from <i>Slab</i> is\nallocated. Bad things happen when you&rsquo;re out of\nlowmem.</p>\n\n<p style=\"margin-left:22%;\"><i>LowFree</i> %lu</p>\n\n<p style=\"margin-left:32%;\">(Starting with Linux 2.6.19,\n<b>CONFIG_HIGHMEM</b> is required.) Amount of free\nlowmem.</p>\n\n<p style=\"margin-left:22%;\"><i>MmapCopy</i> %lu (since\nLinux 2.6.29)</p>\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_MMU</b> is\nrequired.) [To be documented.]</p>\n\n<p style=\"margin-left:22%;\"><i>SwapTotal</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Total amount of swap space\navailable.</p>\n\n<p style=\"margin-left:22%;\"><i>SwapFree</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Amount of swap space that is\ncurrently unused.</p>\n\n<p style=\"margin-left:22%;\"><i>Dirty</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Memory which is waiting to get\nwritten back to the disk.</p>\n\n<p style=\"margin-left:22%;\"><i>Writeback</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Memory which is actively being\nwritten back to the disk.</p>\n\n<p style=\"margin-left:22%;\"><i>AnonPages</i> %lu (since\nLinux 2.6.18)</p>\n\n<p style=\"margin-left:32%;\">Non-file backed pages mapped\ninto user-space page tables.</p>\n\n<p style=\"margin-left:22%;\"><i>Mapped</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Files which have been mapped\ninto memory (with <a href=\"https://man.page/2/mmap\">mmap(2)</a>), such as libraries.</p>\n\n<p style=\"margin-left:22%;\"><i>Shmem</i> %lu (since Linux\n2.6.32)</p>\n\n<p style=\"margin-left:32%;\">Amount of memory consumed in\n<a href=\"https://man.page/5/tmpfs\">tmpfs(5)</a> filesystems.</p>\n\n<p style=\"margin-left:22%;\"><i>KReclaimable</i> %lu (since\nLinux 4.20)</p>\n\n<p style=\"margin-left:32%;\">Kernel allocations that the\nkernel will attempt to reclaim under memory pressure.\nIncludes <i>SReclaimable</i> (below), and other direct\nallocations with a shrinker.</p>\n\n<p style=\"margin-left:22%;\"><i>Slab</i> %lu</p>\n\n<p style=\"margin-left:32%;\">In-kernel data structures\ncache. (See <a href=\"https://man.page/5/slabinfo\">slabinfo(5)</a>.)</p>\n\n<p style=\"margin-left:22%;\"><i>SReclaimable</i> %lu (since\nLinux 2.6.19)</p>\n\n<p style=\"margin-left:32%;\">Part of <i>Slab</i>, that might\nbe reclaimed, such as caches.</p>\n\n<p style=\"margin-left:22%;\"><i>SUnreclaim</i> %lu (since\nLinux 2.6.19)</p>\n\n<p style=\"margin-left:32%;\">Part of <i>Slab</i>, that\ncannot be reclaimed on memory pressure.</p>\n\n<p style=\"margin-left:22%;\"><i>KernelStack</i> %lu (since\nLinux 2.6.32)</p>\n\n<p style=\"margin-left:32%;\">Amount of memory allocated to\nkernel stacks.</p>\n\n<p style=\"margin-left:22%;\"><i>PageTables</i> %lu (since\nLinux 2.6.18)</p>\n\n<p style=\"margin-left:32%;\">Amount of memory dedicated to\nthe lowest level of page tables.</p>\n\n<p style=\"margin-left:22%;\"><i>Quicklists</i> %lu (since\nLinux 2.6.27)</p>\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_QUICKLIST</b> is\nrequired.) [To be documented.]</p>\n\n<p style=\"margin-left:22%;\"><i>NFS_Unstable</i> %lu (since\nLinux 2.6.18)</p>\n\n<p style=\"margin-left:32%;\">NFS pages sent to the server,\nbut not yet committed to stable storage.</p>\n\n<p style=\"margin-left:22%;\"><i>Bounce</i> %lu (since Linux\n2.6.18)</p>\n\n<p style=\"margin-left:32%;\">Memory used for block device\n&quot;bounce buffers&quot;.</p>\n\n<p style=\"margin-left:22%;\"><i>WritebackTmp</i> %lu (since\nLinux 2.6.26)</p>\n\n<p style=\"margin-left:32%;\">Memory used by FUSE for\ntemporary writeback buffers.</p>\n\n<p style=\"margin-left:22%;\"><i>CommitLimit</i> %lu (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:32%;\">This is the total amount of\nmemory currently available to be allocated on the system,\nexpressed in kilobytes. This limit is adhered to only if\nstrict overcommit accounting is enabled (mode 2 in\n<i>/proc/sys/vm/overcommit_memory</i>). The limit is\ncalculated according to the formula described under\n<i>/proc/sys/vm/overcommit_memory</i>. For further details,\nsee the kernel source file\n<i>Documentation/vm/overcommit-accounting.rst</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>Committed_AS</i> %lu</p>\n\n<p style=\"margin-left:32%;\">The amount of memory presently\nallocated on the system. The committed memory is a sum of\nall of the memory which has been allocated by processes,\neven if it has not been &quot;used&quot; by them as of yet.\nA process which allocates 1 GB of memory (using\n<a href=\"https://man.page/3/malloc\">malloc(3)</a> or similar), but touches only 300 MB of\nthat memory will show up as using only 300 MB of memory even\nif it has the address space allocated for the entire 1\nGB.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This 1 GB is\nmemory which has been &quot;committed&quot; to by the VM and\ncan be used at any time by the allocating application. With\nstrict overcommit enabled on the system (mode 2 in\n<i>/proc/sys/vm/overcommit_memory</i>), allocations which\nwould exceed the <i>CommitLimit</i> will not be permitted.\nThis is useful if one needs to guarantee that processes will\nnot fail due to lack of memory once that memory has been\nsuccessfully allocated.</p>\n\n<p style=\"margin-left:22%;\"><i>VmallocTotal</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Total size of vmalloc memory\narea.</p>\n\n<p style=\"margin-left:22%;\"><i>VmallocUsed</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Amount of vmalloc area which is\nused. Since Linux 4.4, this field is no longer calculated,\nand is hard coded as 0. See <i>/proc/vmallocinfo</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>VmallocChunk</i> %lu</p>\n\n<p style=\"margin-left:32%;\">Largest contiguous block of\nvmalloc area which is free. Since Linux 4.4, this field is\nno longer calculated and is hard coded as 0. See\n<i>/proc/vmallocinfo</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>HardwareCorrupted</i> %lu\n(since Linux 2.6.32)</p>\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_MEMORY_FAILURE</b>\nis required.) [To be documented.]</p>\n\n<p style=\"margin-left:22%;\"><i>LazyFree</i> %lu (since\nLinux 4.12)</p>\n\n<p style=\"margin-left:32%;\">Shows the amount of memory\nmarked by <a href=\"https://man.page/2/madvise\">madvise(2)</a> <b>MADV_FREE</b>.</p>\n\n<p style=\"margin-left:22%;\"><i>AnonHugePages</i> %lu (since\nLinux 2.6.38)</p>\n\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_TRANSPARENT_HUGEPAGE</b>\nis required.) Non-file backed huge pages mapped into\nuser-space page tables.</p>\n\n<p style=\"margin-left:22%;\"><i>ShmemHugePages</i> %lu\n(since Linux 4.8)</p>\n\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_TRANSPARENT_HUGEPAGE</b>\nis required.) Memory used by shared memory (shmem) and\n<a href=\"https://man.page/5/tmpfs\">tmpfs(5)</a> allocated with huge pages.</p>\n\n<p style=\"margin-left:22%;\"><i>ShmemPmdMapped</i> %lu\n(since Linux 4.8)</p>\n\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_TRANSPARENT_HUGEPAGE</b>\nis required.) Shared memory mapped into user space with huge\npages.</p>\n\n<p style=\"margin-left:22%;\"><i>CmaTotal</i> %lu (since\nLinux 3.1)</p>\n\n<p style=\"margin-left:32%;\">Total CMA (Contiguous Memory\nAllocator) pages. (<b>CONFIG_CMA</b> is required.)</p>\n\n<p style=\"margin-left:22%;\"><i>CmaFree</i> %lu (since Linux\n3.1)</p>\n\n<p style=\"margin-left:32%;\">Free CMA (Contiguous Memory\nAllocator) pages. (<b>CONFIG_CMA</b> is required.)</p>\n\n<p style=\"margin-left:22%;\"><i>HugePages_Total</i> %lu</p>\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_HUGETLB_PAGE</b> is\nrequired.) The size of the pool of huge pages.</p>\n\n<p style=\"margin-left:22%;\"><i>HugePages_Free</i> %lu</p>\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_HUGETLB_PAGE</b> is\nrequired.) The number of huge pages in the pool that are not\nyet allocated.</p>\n\n<p style=\"margin-left:22%;\"><i>HugePages_Rsvd</i> %lu\n(since Linux 2.6.17)</p>\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_HUGETLB_PAGE</b> is\nrequired.) This is the number of huge pages for which a\ncommitment to allocate from the pool has been made, but no\nallocation has yet been made. These reserved huge pages\nguarantee that an application will be able to allocate a\nhuge page from the pool of huge pages at fault time.</p>\n\n<p style=\"margin-left:22%;\"><i>HugePages_Surp</i> %lu\n(since Linux 2.6.24)</p>\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_HUGETLB_PAGE</b> is\nrequired.) This is the number of huge pages in the pool\nabove the value in <i>/proc/sys/vm/nr_hugepages</i>. The\nmaximum number of surplus huge pages is controlled by\n<i>/proc/sys/vm/nr_overcommit_hugepages</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>Hugepagesize</i> %lu</p>\n\n<p style=\"margin-left:32%;\">(<b>CONFIG_HUGETLB_PAGE</b> is\nrequired.) The size of huge pages.</p>\n\n<p style=\"margin-left:22%;\"><i>DirectMap4k</i> %lu (since\nLinux 2.6.27)</p>\n\n<p style=\"margin-left:32%;\">Number of bytes of RAM linearly\nmapped by kernel in 4 kB pages. (x86.)</p>\n\n<p style=\"margin-left:22%;\"><i>DirectMap4M</i> %lu (since\nLinux 2.6.27)</p>\n\n<p style=\"margin-left:32%;\">Number of bytes of RAM linearly\nmapped by kernel in 4 MB pages. (x86 with\n<b>CONFIG_X86_64</b> or <b>CONFIG_X86_PAE</b> enabled.)</p>\n\n<p style=\"margin-left:22%;\"><i>DirectMap2M</i> %lu (since\nLinux 2.6.27)</p>\n\n<p style=\"margin-left:32%;\">Number of bytes of RAM linearly\nmapped by kernel in 2 MB pages. (x86 with neither\n<b>CONFIG_X86_64</b> nor <b>CONFIG_X86_PAE</b> enabled.)</p>\n\n<p style=\"margin-left:22%;\"><i>DirectMap1G</i> %lu (since\nLinux 2.6.27)</p>\n\n<p style=\"margin-left:32%;\">(x86 with <b>CONFIG_X86_64</b>\nand <b>CONFIG_X86_DIRECT_GBPAGES</b> enabled.)</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/modules</i></p>\n\n<p style=\"margin-left:22%;\">A text list of the modules that\nhave been loaded by the system. See also\n<b>lsmod</b>(8).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/mounts</i></p>\n\n<p style=\"margin-left:22%;\">Before kernel 2.4.19, this file\nwas a list of all the filesystems currently mounted on the\nsystem. With the introduction of per-process mount\nnamespaces in Linux 2.4.19 (see <a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>),\nthis file became a link to <i>/proc/self/mounts</i>, which\nlists the mount points of the process&rsquo;s own mount\nnamespace. The format of this file is documented in\n<a href=\"https://man.page/5/fstab\">fstab(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/mtrr</i></p>\n\n<p style=\"margin-left:22%;\">Memory Type Range Registers.\nSee the Linux kernel source file\n<i>Documentation/x86/mtrr.txt</i> (or\n<i>Documentation/mtrr.txt</i> before Linux 2.6.28) for\ndetails.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net</i></p>\n\n<p style=\"margin-left:22%;\">This directory contains various\nfiles and subdirectories containing information about the\nnetworking layer. The files contain ASCII structures and\nare, therefore, readable with <a href=\"https://man.page/1/cat\">cat(1)</a>. However, the\nstandard <b>netstat</b>(8) suite provides much cleaner\naccess to these files.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">With the advent\nof network namespaces, various information relating to the\nnetwork stack is virtualized (see\n<a href=\"https://man.page/7/network_namespaces\">network_namespaces(7)</a>). Thus, since Linux 2.6.25,\n<i>/proc/net</i> is a symbolic link to the directory\n<i>/proc/self/net</i>, which contains the same files and\ndirectories as listed below. However, these files and\ndirectories now expose information for the network namespace\nof which the process is a member.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/arp</i></p>\n\n<p style=\"margin-left:22%;\">This holds an ASCII readable\ndump of the kernel ARP table used for address resolutions.\nIt will show both dynamically learned and preprogrammed ARP\nentries. The format is:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">IP address HW\ntype Flags HW address Mask Device <br>\n192.168.0.50 0x1 0x2 00:50:BF:25:68:F3 * eth0 <br>\n192.168.0.250 0x1 0xc 00:00:00:00:00:00 * eth0</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Here &quot;IP\naddress&quot; is the IPv4 address of the machine and the\n&quot;HW type&quot; is the hardware type of the address from\nRFC&nbsp;826. The flags are the internal flags of the ARP\nstructure (as defined in <i>/usr/include/linux/if_arp.h</i>)\nand the &quot;HW address&quot; is the data link layer\nmapping for that IP address if it is known.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/dev</i></p>\n\n<p style=\"margin-left:22%;\">The dev pseudo-file contains\nnetwork device status information. This gives the number of\nreceived and sent packets, the number of errors and\ncollisions and other basic statistics. These are used by the\n<b>ifconfig</b>(8) program to report device status. The\nformat is:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Inter-| Receive\n| Transmit <br>\nface |bytes packets errs drop fifo frame compressed\nmulticast|bytes packets errs drop fifo colls carrier\ncompressed <br>\nlo: 2776770 11307 0 0 0 0 0 0 2776770 11307 0 0 0 0 0 0 <br>\neth0: 1215645 2751 0 0 0 0 0 0 1782404 4324 0 0 0 427 0 0\n<br>\nppp0: 1622270 5552 1 0 0 0 0 0 354130 5669 0 0 0 0 0 0 <br>\ntap0: 7714 81 0 0 0 0 0 0 7714 81 0 0 0 0 0 0</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/dev_mcast</i></p>\n\n<p style=\"margin-left:22%;\">Defined in\n<i>/usr/src/linux/net/core/dev_mcast.c</i>:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">indx\ninterface_name dmi_u dmi_g dmi_address <br>\n2 eth0 1 0 01005e000001 <br>\n3 eth1 1 0 01005e000001 <br>\n4 eth2 1 0 01005e000001</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/igmp</i></p>\n\n<p style=\"margin-left:22%;\">Internet Group Management\nProtocol. Defined in\n<i>/usr/src/linux/net/core/igmp.c</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/rarp</i></p>\n\n<p style=\"margin-left:22%;\">This file uses the same format\nas the <i>arp</i> file and contains the current reverse\nmapping database used to provide <b>rarp</b>(8) reverse\naddress lookup services. If RARP is not configured into the\nkernel, this file will not be present.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/raw</i></p>\n\n<p style=\"margin-left:22%;\">Holds a dump of the RAW socket\ntable. Much of the information is not of use apart from\ndebugging. The &quot;sl&quot; value is the kernel hash slot\nfor the socket, the &quot;local_address&quot; is the local\naddress and protocol number pair. &quot;St&quot; is the\ninternal status of the socket. The &quot;tx_queue&quot; and\n&quot;rx_queue&quot; are the outgoing and incoming data\nqueue in terms of kernel memory usage. The &quot;tr&quot;,\n&quot;tm-&gt;when&quot;, and &quot;rexmits&quot; fields are\nnot used by RAW. The &quot;uid&quot; field holds the\neffective UID of the creator of the socket.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/snmp</i></p>\n\n<p style=\"margin-left:22%;\">This file holds the ASCII data\nneeded for the IP, ICMP, TCP, and UDP management information\nbases for an SNMP agent.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/tcp</i></p>\n\n<p style=\"margin-left:22%;\">Holds a dump of the TCP socket\ntable. Much of the information is not of use apart from\ndebugging. The &quot;sl&quot; value is the kernel hash slot\nfor the socket, the &quot;local_address&quot; is the local\naddress and port number pair. The &quot;rem_address&quot; is\nthe remote address and port number pair (if connected).\n&quot;St&quot; is the internal status of the socket. The\n&quot;tx_queue&quot; and &quot;rx_queue&quot; are the\noutgoing and incoming data queue in terms of kernel memory\nusage. The &quot;tr&quot;, &quot;tm-&gt;when&quot;, and\n&quot;rexmits&quot; fields hold internal information of the\nkernel socket state and are useful only for debugging. The\n&quot;uid&quot; field holds the effective UID of the creator\nof the socket.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/udp</i></p>\n\n<p style=\"margin-left:22%;\">Holds a dump of the UDP socket\ntable. Much of the information is not of use apart from\ndebugging. The &quot;sl&quot; value is the kernel hash slot\nfor the socket, the &quot;local_address&quot; is the local\naddress and port number pair. The &quot;rem_address&quot; is\nthe remote address and port number pair (if connected).\n&quot;St&quot; is the internal status of the socket. The\n&quot;tx_queue&quot; and &quot;rx_queue&quot; are the\noutgoing and incoming data queue in terms of kernel memory\nusage. The &quot;tr&quot;, &quot;tm-&gt;when&quot;, and\n&quot;rexmits&quot; fields are not used by UDP. The\n&quot;uid&quot; field holds the effective UID of the creator\nof the socket. The format is:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">sl\nlocal_address rem_address st tx_queue rx_queue tr rexmits\ntm-&gt;when uid <br>\n1: 01642C89:0201 0C642C89:03FF 01 00000000:00000001\n01:000071BA 00000000 0 <br>\n1: 00000000:0801 00000000:0000 0A 00000000:00000000\n00:00000000 6F000100 0 <br>\n1: 00000000:0201 00000000:0000 0A 00000000:00000000\n00:00000000 00000000 0</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/net/unix</i></p>\n\n<p style=\"margin-left:22%;\">Lists the UNIX domain sockets\npresent within the system and their status. The format\nis:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Num RefCount\nProtocol Flags Type St Inode Path <br>\n0: 00000002 00000000 00000000 0001 03 42 <br>\n1: 00000001 00000000 00010000 0001 01 1948 /dev/printer</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields are\nas follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><i>Num</i>:</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>the kernel table slot number.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><i>RefCount</i>:</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>the number of users of the socket.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><i>Protocol</i>:</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>currently always 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><i>Flags</i>:</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>the internal kernel flags holding the status of the\nsocket.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><i>Type</i>:</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>the socket type. For <b>SOCK_STREAM</b> sockets, this is\n0001; for <b>SOCK_DGRAM</b> sockets, it is 0002; and for\n<b>SOCK_SEQPACKET</b> sockets, it is 0005.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><i>St</i>:</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>the internal state of the socket.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><i>Inode</i>:</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>the inode number of the socket.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"13%\">\n\n\n<p><i>Path</i>:</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>the bound pathname (if any) of the socket. Sockets in\nthe abstract namespace are included in the list, and are\nshown with a <i>Path</i> that commences with the character\n&rsquo;@&rsquo;.</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/net/netfilter/nfnetlink_queue</i></p>\n\n<p style=\"margin-left:22%;\">This file contains information\nabout netfilter user-space queueing, if used. Each line\nrepresents a queue. Queues that have not been subscribed to\nby user space are not shown.</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">1 4207 0 2\n65535 0 0 0 1 <br>\n(1) (2) (3)(4) (5) (6) (7) (8)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields in\neach line are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>The ID of the queue. This matches what is specified in\nthe <b>--queue-num</b> or <b>--queue-balance</b> options to\nthe <b>iptables</b>(8) NFQUEUE target. See\n<b>iptables-extensions</b>(8) for more information.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>The netlink port ID subscribed to the queue.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(3)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>The number of packets currently queued and waiting to be\nprocessed by the application.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(4)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>The copy mode of the queue. It is either 1 (metadata\nonly) or 2 (also copy payload data to user space).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(5)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>Copy range; that is, how many bytes of packet payload\nshould be copied to user space at most.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(6)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>queue dropped. Number of packets that had to be dropped\nby the kernel because too many packets are already waiting\nfor user space to send back the mandatory accept/drop\nverdicts.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(7)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>queue user dropped. Number of packets that were dropped\nwithin the netlink subsystem. Such drops usually happen when\nthe corresponding socket buffer is full; that is, user space\nis not able to read messages fast enough.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(8)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>sequence number. Every queued packet is associated with\na (32-bit) monotonically increasing sequence number. This\nshows the ID of the most recent packet queued.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The last number\nexists only for compatibility reasons and is always 1.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/partitions</i></p>\n\n<p style=\"margin-left:22%;\">Contains the major and minor\nnumbers of each partition as well as the number of 1024-byte\nblocks and the partition name.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/pci</i></p>\n\n<p style=\"margin-left:22%;\">This is a listing of all PCI\ndevices found during kernel initialization and their\nconfiguration.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This file has\nbeen deprecated in favor of a new <i>/proc</i> interface for\nPCI (<i>/proc/bus/pci</i>). It became optional in Linux 2.2\n(available with <b>CONFIG_PCI_OLD_PROC</b> set at kernel\ncompilation). It became once more nonoptionally enabled in\nLinux 2.4. Next, it was deprecated in Linux 2.6 (still\navailable with <b>CONFIG_PCI_LEGACY_PROC</b> set), and\nfinally removed altogether since Linux 2.6.17.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/profile</i> (since\nLinux 2.4)</p>\n\n<p style=\"margin-left:22%;\">This file is present only if\nthe kernel was booted with the <i>profile=1</i> command-line\noption. It exposes kernel profiling information in a binary\nformat for use by <a href=\"https://man.page/1/readprofile\">readprofile(1)</a>. Writing (e.g., an\nempty string) to this file resets the profiling counters; on\nsome architectures, writing a binary integer &quot;profiling\nmultiplier&quot; of size <i>sizeof(int)</i> sets the\nprofiling interrupt frequency.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/scsi</i></p>\n\n<p style=\"margin-left:22%;\">A directory with the\n<i>scsi</i> mid-level pseudo-file and various SCSI low-level\ndriver directories, which contain a file for each SCSI host\nin this system, all of which give the status of some part of\nthe SCSI IO subsystem. These files contain ASCII structures\nand are, therefore, readable with <a href=\"https://man.page/1/cat\">cat(1)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">You can also\nwrite to some of the files to reconfigure the subsystem or\nswitch certain features on or off.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/scsi/scsi</i></p>\n\n<p style=\"margin-left:22%;\">This is a listing of all SCSI\ndevices known to the kernel. The listing is similar to the\none seen during bootup. scsi currently supports only the\n<i>add-single-device</i> command which allows root to add a\nhotplugged device to the list of known devices.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The command</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">echo 'scsi\nadd-single-device 1 0 5 0' &gt; /proc/scsi/scsi</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">will cause host\nscsi1 to scan on SCSI channel 0 for a device on ID 5 LUN 0.\nIf there is already a device known on this address or the\naddress is invalid, an error will be returned.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/scsi/[drivername]</i></p>\n\n<p style=\"margin-left:22%;\"><i>[drivername]</i> can\ncurrently be NCR53c7xx, aha152x, aha1542, aha1740, aic7xxx,\nbuslogic, eata_dma, eata_pio, fdomain, in2000, pas16,\nqlogic, scsi_debug, seagate, t128, u15-24f, ultrastore, or\nwd7000. These directories show up for all drivers that\nregistered at least one SCSI HBA. Every directory contains\none file per registered host. Every host-file is named after\nthe number the host was assigned during initialization.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Reading these\nfiles will usually show driver and host configuration,\nstatistics, and so on.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Writing to\nthese files allows different things on different hosts. For\nexample, with the <i>latency</i> and <i>nolatency</i>\ncommands, root can switch on and off command latency\nmeasurement code in the eata_dma driver. With the\n<i>lockup</i> and <i>unlock</i> commands, root can control\nbus lockups simulated by the scsi_debug driver.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/self</i></p>\n\n<p style=\"margin-left:22%;\">This directory refers to the\nprocess accessing the <i>/proc</i> filesystem, and is\nidentical to the <i>/proc</i> directory named by the process\nID of the same process.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/slabinfo</i></p>\n\n<p style=\"margin-left:22%;\">Information about kernel\ncaches. See <a href=\"https://man.page/5/slabinfo\">slabinfo(5)</a> for details.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/stat</i></p>\n\n<p style=\"margin-left:22%;\">kernel/system statistics.\nVaries with architecture. Common entries include: <i><br>\ncpu 10132153 290696 3084719 46828483 16683 0 25195 0 175628\n0 <br>\ncpu0 1393280 32966 572056 13343292 6130 0 17875 0 23933\n0</i></p>\n\n<p style=\"margin-left:32%;\">The amount of time, measured in\nunits of USER_HZ (1/100ths of a second on most\narchitectures, use <i>sysconf(_SC_CLK_TCK)</i> to obtain the\nright value), that the system (&quot;cpu&quot; line) or the\nspecific CPU (&quot;cpu<i>N</i>&quot; line) spent in various\nstates:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"10%\">\n\n\n<p><i>user</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"57%\">\n\n\n<p>(1) Time spent in user mode.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"10%\">\n\n\n<p><i>nice</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"57%\">\n\n\n<p>(2) Time spent in user mode with low priority\n(nice).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"10%\">\n\n\n<p><i>system</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"57%\">\n\n\n<p>(3) Time spent in system mode.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"10%\">\n\n\n<p><i>idle</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"57%\">\n\n\n<p>(4) Time spent in the idle task. This value should be\nUSER_HZ times the second entry in the <i>/proc/uptime</i>\npseudo-file.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:32%;\"><i>iowait</i> (since Linux\n2.5.41)</p>\n\n<p style=\"margin-left:43%;\">(5) Time waiting for I/O to\ncomplete. This value is not reliable, for the following\nreasons:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"43%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"2%\"></td>\n<td width=\"52%\">\n\n\n<p>The CPU will not wait for I/O to complete; iowait is the\ntime that a task is waiting for I/O to complete. When a CPU\ngoes into idle state for outstanding task I/O, another task\nwill be scheduled on this CPU.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"43%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"2%\"></td>\n<td width=\"52%\">\n\n\n<p>On a multi-core CPU, the task waiting for I/O to\ncomplete is not running on any CPU, so the iowait of each\nCPU is difficult to calculate.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"43%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"2%\"></td>\n<td width=\"52%\">\n\n\n<p>The value in this field may <i>decrease</i> in certain\nconditions.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:32%;\"><i>irq</i> (since Linux\n2.6.0)</p>\n\n<p style=\"margin-left:43%;\">(6) Time servicing\ninterrupts.</p>\n\n<p style=\"margin-left:32%;\"><i>softirq</i> (since Linux\n2.6.0)</p>\n\n<p style=\"margin-left:43%;\">(7) Time servicing\nsoftirqs.</p>\n\n<p style=\"margin-left:32%;\"><i>steal</i> (since Linux\n2.6.11)</p>\n\n<p style=\"margin-left:43%;\">(8) Stolen time, which is the\ntime spent in other operating systems when running in a\nvirtualized environment</p>\n\n<p style=\"margin-left:32%;\"><i>guest</i> (since Linux\n2.6.24)</p>\n\n<p style=\"margin-left:43%;\">(9) Time spent running a\nvirtual CPU for guest operating systems under the control of\nthe Linux kernel.</p>\n\n<p style=\"margin-left:32%;\"><i>guest_nice</i> (since Linux\n2.6.33)</p>\n\n<p style=\"margin-left:43%;\">(10) Time spent running a niced\nguest (virtual CPU for guest operating systems under the\ncontrol of the Linux kernel).</p>\n\n<p style=\"margin-left:22%;\"><i>page 5741 1808</i></p>\n\n<p style=\"margin-left:32%;\">The number of pages the system\npaged in and the number that were paged out (from disk).</p>\n\n<p style=\"margin-left:22%;\"><i>swap 1 0</i></p>\n\n<p style=\"margin-left:32%;\">The number of swap pages that\nhave been brought in and out.</p>\n\n<p style=\"margin-left:22%;\"><i>intr 1462898</i></p>\n\n<p style=\"margin-left:32%;\">This line shows counts of\ninterrupts serviced since boot time, for each of the\npossible system interrupts. The first column is the total of\nall interrupts serviced including unnumbered architecture\nspecific interrupts; each subsequent column is the total for\nthat particular numbered interrupt. Unnumbered interrupts\nare not shown, only summed into the total.</p>\n\n<p style=\"margin-left:22%;\"><i>disk_io:\n(2,0):(31,30,5764,1,2) (3,0):</i>...</p>\n\n<p style=\"margin-left:32%;\">(major,disk_idx):(noinfo,\nread_io_ops, blks_read, write_io_ops, blks_written) <br>\n(Linux 2.4 only)</p>\n\n<p style=\"margin-left:22%;\"><i>ctxt 115315</i></p>\n\n<p style=\"margin-left:32%;\">The number of context switches\nthat the system underwent.</p>\n\n<p style=\"margin-left:22%;\"><i>btime 769041601</i></p>\n\n<p style=\"margin-left:32%;\">boot time, in seconds since the\nEpoch, 1970-01-01 00:00:00 +0000 (UTC).</p>\n\n<p style=\"margin-left:22%;\"><i>processes 86031</i></p>\n\n<p style=\"margin-left:32%;\">Number of forks since boot.</p>\n\n<p style=\"margin-left:22%;\"><i>procs_running 6</i></p>\n\n<p style=\"margin-left:32%;\">Number of processes in runnable\nstate. (Linux 2.5.45 onward.)</p>\n\n<p style=\"margin-left:22%;\"><i>procs_blocked 2</i></p>\n\n<p style=\"margin-left:32%;\">Number of processes blocked\nwaiting for I/O to complete. (Linux 2.5.45 onward.)</p>\n\n<p style=\"margin-left:22%;\"><i>softirq 229245889 94\n60001584 13619 5175704 2471304 28 51212741 <br>\n59130143 0 51240672</i></p>\n\n<p style=\"margin-left:32%;\">This line shows the number of\nsoftirq for all CPUs. The first column is the total of all\nsoftirqs and each subsequent column is the total for\nparticular softirq. (Linux 2.6.31 onward.)</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/swaps</i></p>\n\n<p style=\"margin-left:22%;\">Swap areas in use. See also\n<b>swapon</b>(8).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys</i></p>\n\n<p style=\"margin-left:22%;\">This directory (present since\n1.3.57) contains a number of files and subdirectories\ncorresponding to kernel variables. These variables can be\nread and in some cases modified using the <i>/proc</i>\nfilesystem, and the (deprecated) <a href=\"https://man.page/2/sysctl\">sysctl(2)</a> system\ncall.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">String values\nmay be terminated by either '\\0' or '\\n'.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Integer and\nlong values may be written either in decimal or in\nhexadecimal notation (e.g., 0x3FFF). When writing multiple\ninteger or long values, these may be separated by any of the\nfollowing whitespace characters: '&nbsp;', '\\t', or '\\n'.\nUsing other separators leads to the error <b>EINVAL</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/abi</i> (since\nLinux 2.4.10)</p>\n\n<p style=\"margin-left:22%;\">This directory may contain\nfiles with application binary information. See the Linux\nkernel source file <i>Documentation/sysctl/abi.txt</i> for\nmore information.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/debug</i></p>\n\n<p style=\"margin-left:22%;\">This directory may be\nempty.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/dev</i></p>\n\n<p style=\"margin-left:22%;\">This directory contains\ndevice-specific information (e.g., <i>dev/cdrom/info</i>).\nOn some systems, it may be empty.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs</i></p>\n\n<p style=\"margin-left:22%;\">This directory contains the\nfiles and subdirectories for kernel variables related to\nfilesystems.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/aio-max-nr</i>\nand <i>/proc/sys/fs/aio-nr</i> (since Linux 2.6.4)</p>\n\n<p style=\"margin-left:22%;\"><i>aio-nr</i> is the running\ntotal of the number of events specified by\n<a href=\"https://man.page/2/io_setup\">io_setup(2)</a> calls for all currently active AIO\ncontexts. If <i>aio-nr</i> reaches <i>aio-max-nr</i>, then\n<a href=\"https://man.page/2/io_setup\">io_setup(2)</a> will fail with the error <b>EAGAIN</b>.\nRaising <i>aio-max-nr</i> does not result in the\npreallocation or resizing of any kernel data structures.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/binfmt_misc</i></p>\n\n<p style=\"margin-left:22%;\">Documentation for files in this\ndirectory can be found in the Linux kernel source in the\nfile <i>Documentation/admin-guide/binfmt-misc.rst</i> (or in\n<i>Documentation/binfmt_misc.txt</i> on older kernels).</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/dentry-state</i>\n(since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This file contains information\nabout the status of the directory cache (dcache). The file\ncontains six numbers, <i>nr_dentry</i>, <i>nr_unused</i>,\n<i>age_limit</i> (age in seconds), <i>want_pages</i> (pages\nrequested by system) and two dummy values.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p><i>nr_dentry</i> is the number of allocated dentries\n(dcache entries). This field is unused in Linux 2.2.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p><i>nr_unused</i> is the number of unused dentries.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p><i>age_limit</i> is the age in seconds after which\ndcache entries can be reclaimed when memory is short.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p><i>want_pages</i> is nonzero when the kernel has called\nshrink_dcache_pages() and the dcache isn&rsquo;t pruned\nyet.</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/dir-notify-enable</i></p>\n\n<p style=\"margin-left:22%;\">This file can be used to\ndisable or enable the <i>dnotify</i> interface described in\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> on a system-wide basis. A value of 0 in this\nfile disables the interface, and a value of 1 enables\nit.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/dquot-max</i></p>\n\n<p style=\"margin-left:22%;\">This file shows the maximum\nnumber of cached disk quota entries. On some (2.4) systems,\nit is not present. If the number of free cached disk quota\nentries is very low and you have some awesome number of\nsimultaneous system users, you might want to raise the\nlimit.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/dquot-nr</i></p>\n\n<p style=\"margin-left:22%;\">This file shows the number of\nallocated disk quota entries and the number of free disk\nquota entries.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/epoll</i>\n(since Linux 2.6.28)</p>\n\n<p style=\"margin-left:22%;\">This directory contains the\nfile <i>max_user_watches</i>, which can be used to limit the\namount of kernel memory consumed by the <i>epoll</i>\ninterface. For further details, see <a href=\"https://man.page/7/epoll\">epoll(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/file-max</i></p>\n\n<p style=\"margin-left:22%;\">This file defines a system-wide\nlimit on the number of open files for all processes. System\ncalls that fail when encountering this limit fail with the\nerror <b>ENFILE</b>. (See also <a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>, which\ncan be used by a process to set the per-process limit,\n<b>RLIMIT_NOFILE</b>, on the number of files it may open.)\nIf you get lots of error messages in the kernel log about\nrunning out of file handles (open file descriptions) (look\nfor &quot;VFS: file-max limit &lt;number&gt; reached&quot;),\ntry increasing this value:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">echo 100000\n&gt; /proc/sys/fs/file-max</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Privileged\nprocesses (<b>CAP_SYS_ADMIN</b>) can override the\n<i>file-max</i> limit.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/file-nr</i></p>\n\n<p style=\"margin-left:22%;\">This (read-only) file contains\nthree numbers: the number of allocated file handles (i.e.,\nthe number of open file descriptions; see <a href=\"https://man.page/2/open\">open(2)</a>);\nthe number of free file handles; and the maximum number of\nfile handles (i.e., the same value as\n<i>/proc/sys/fs/file-max</i>). If the number of allocated\nfile handles is close to the maximum, you should consider\nincreasing the maximum. Before Linux 2.6, the kernel\nallocated file handles dynamically, but it didn&rsquo;t free\nthem again. Instead the free file handles were kept in a\nlist for reallocation; the &quot;free file handles&quot;\nvalue indicates the size of that list. A large number of\nfree file handles indicates that there was a past peak in\nthe usage of open file handles. Since Linux 2.6, the kernel\ndoes deallocate freed file handles, and the &quot;free file\nhandles&quot; value is always zero.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/inode-max</i>\n(only present until Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This file contains the maximum\nnumber of in-memory inodes. This value should be 3&ndash;4\ntimes larger than the value in <i>file-max</i>, since\n<i>stdin</i>, <i>stdout</i> and network sockets also need an\ninode to handle them. When you regularly run out of inodes,\nyou need to increase this value.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Starting with\nLinux 2.4, there is no longer a static limit on the number\nof inodes, and this file is removed.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/inode-nr</i></p>\n\n<p style=\"margin-left:22%;\">This file contains the first\ntwo values from <i>inode-state</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/inode-state</i></p>\n\n<p style=\"margin-left:22%;\">This file contains seven\nnumbers: <i>nr_inodes</i>, <i>nr_free_inodes</i>,\n<i>preshrink</i>, and four dummy values (always zero).</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>nr_inodes</i>\nis the number of inodes the system has allocated.\n<i>nr_free_inodes</i> represents the number of free\ninodes.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>preshrink</i>\nis nonzero when the <i>nr_inodes</i> &gt; <i>inode-max</i>\nand the system needs to prune the inode list instead of\nallocating more; since Linux 2.4, this field is a dummy\nvalue (always zero).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/inotify</i>\n(since Linux 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">This directory contains files\n<i>max_queued_events</i>, <i>max_user_instances</i>, and\n<i>max_user_watches</i>, that can be used to limit the\namount of kernel memory consumed by the <i>inotify</i>\ninterface. For further details, see <a href=\"https://man.page/7/inotify\">inotify(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/lease-break-time</i></p>\n\n<p style=\"margin-left:22%;\">This file specifies the grace\nperiod that the kernel grants to a process holding a file\nlease (<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>) after it has sent a signal to that\nprocess notifying it that another process is waiting to open\nthe file. If the lease holder does not remove or downgrade\nthe lease within this grace period, the kernel forcibly\nbreaks the lease.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/leases-enable</i></p>\n\n<p style=\"margin-left:22%;\">This file can be used to enable\nor disable file leases (<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>) on a system-wide\nbasis. If this file contains the value 0, leases are\ndisabled. A nonzero value enables leases.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/mount-max</i>\n(since Linux 4.9)</p>\n\n<p style=\"margin-left:22%;\">The value in this file\nspecifies the maximum number of mounts that may exist in a\nmount namespace. The default value in this file is\n100,000.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/mqueue</i>\n(since Linux 2.6.6)</p>\n\n<p style=\"margin-left:22%;\">This directory contains files\n<i>msg_max</i>, <i>msgsize_max</i>, and <i>queues_max</i>,\ncontrolling the resources used by POSIX message queues. See\n<a href=\"https://man.page/7/mq_overview\">mq_overview(7)</a> for details.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/nr_open</i>\n(since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">This file imposes a ceiling on\nthe value to which the <b>RLIMIT_NOFILE</b> resource limit\ncan be raised (see <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>). This ceiling is\nenforced for both unprivileged and privileged process. The\ndefault value in this file is 1048576. (Before Linux 2.6.25,\nthe ceiling for <b>RLIMIT_NOFILE</b> was hard-coded to the\nsame value.)</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/overflowgid</i>\nand <i>/proc/sys/fs/overflowuid</i></p>\n\n<p style=\"margin-left:22%;\">These files allow you to change\nthe value of the fixed UID and GID. The default is 65534.\nSome filesystems support only 16-bit UIDs and GIDs, although\nin Linux UIDs and GIDs are 32 bits. When one of these\nfilesystems is mounted with writes enabled, any UID or GID\nthat would exceed 65535 is translated to the overflow value\nbefore being written to disk.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/pipe-max-size</i>\n(since Linux 2.6.35)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/pipe\">pipe(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/pipe-user-pages-hard</i>\n(since Linux 4.5)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/pipe\">pipe(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/pipe-user-pages-soft</i>\n(since Linux 4.5)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/pipe\">pipe(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/protected_fifos</i>\n(since Linux 4.19)</p>\n\n<p style=\"margin-left:22%;\">The value in this file is/can\nbe set to one of the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>Writing to FIFOs is unrestricted.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>Don&rsquo;t allow <b>O_CREAT open</b>(2) on FIFOs that\nthe caller doesn&rsquo;t own in world-writable sticky\ndirectories, unless the FIFO is owned by the owner of the\ndirectory.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>As for the value 1, but the restriction also applies to\ngroup-writable sticky directories.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The intent of\nthe above protections is to avoid unintentional writes to an\nattacker-controlled FIFO when a program expected to create a\nregular file.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/protected_hardlinks</i>\n(since Linux 3.6)</p>\n\n<p style=\"margin-left:22%;\">When the value in this file is\n0, no restrictions are placed on the creation of hard links\n(i.e., this is the historical behavior before Linux 3.6).\nWhen the value in this file is 1, a hard link can be created\nto a target file only if one of the following conditions is\ntrue:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The calling process has the <b>CAP_FOWNER</b> capability\nin its user namespace and the file UID has a mapping in the\nnamespace.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The filesystem UID of the process creating the link\nmatches the owner (UID) of the target file (as described in\n<a href=\"https://man.page/7/credentials\">credentials(7)</a>, a process&rsquo;s filesystem UID is\nnormally the same as its effective UID).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>All of the following conditions are true:</p></td></tr>\n</table>\n\n<p style=\"margin-left:28%; margin-top: 1em\">&bull;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"1%\"></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">the target is a regular\nfile;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>the target file does not have its set-user-ID mode bit\nenabled;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>the target file does not have both its set-group-ID and\ngroup-executable mode bits enabled; and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>the caller has permission to read and write the target\nfile (either via the file&rsquo;s permissions mask or\nbecause it has suitable capabilities).</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 0. Setting the value to 1 prevents a\nlongstanding class of security issues caused by\nhard-link-based time-of-check, time-of-use races, most\ncommonly seen in world-writable directories such as\n<i>/tmp</i>. The common method of exploiting this flaw is to\ncross privilege boundaries when following a given hard link\n(i.e., a root process follows a hard link created by another\nuser). Additionally, on systems without separated\npartitions, this stops unauthorized users from\n&quot;pinning&quot; vulnerable set-user-ID and set-group-ID\nfiles against being upgraded by the administrator, or\nlinking to special files.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/protected_regular</i>\n(since Linux 4.19)</p>\n\n<p style=\"margin-left:22%;\">The value in this file is/can\nbe set to one of the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>Writing to regular files is unrestricted.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>Don&rsquo;t allow <b>O_CREAT open</b>(2) on regular\nfiles that the caller doesn&rsquo;t own in world-writable\nsticky directories, unless the regular file is owned by the\nowner of the directory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p>As for the value 1, but the restriction also applies to\ngroup-writable sticky directories.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The intent of\nthe above protections is similar to <i>protected_fifos</i>,\nbut allows an application to avoid writes to an\nattacker-controlled regular file, where the application\nexpected to create one.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/protected_symlinks</i>\n(since Linux 3.6)</p>\n\n<p style=\"margin-left:22%;\">When the value in this file is\n0, no restrictions are placed on following symbolic links\n(i.e., this is the historical behavior before Linux 3.6).\nWhen the value in this file is 1, symbolic links are\nfollowed only in the following circumstances:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the filesystem UID of the process following the link\nmatches the owner (UID) of the symbolic link (as described\nin <a href=\"https://man.page/7/credentials\">credentials(7)</a>, a process&rsquo;s filesystem UID\nis normally the same as its effective UID);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the link is not in a sticky world-writable directory;\nor</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the symbolic link and its parent directory have the same\nowner (UID)</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A system call\nthat fails to follow a symbolic link because of the above\nrestrictions returns the error <b>EACCES</b> in\n<i>errno</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 0. Setting the value to 1 avoids a\nlongstanding class of security issues based on\ntime-of-check, time-of-use races when accessing symbolic\nlinks.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/suid_dumpable</i>\n(since Linux 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">The value in this file is\nassigned to a process&rsquo;s &quot;dumpable&quot; flag in\nthe circumstances described in <a href=\"https://man.page/2/prctl\">prctl(2)</a>. In effect,\nthe value in this file determines whether core dump files\nare produced for set-user-ID or otherwise protected/tainted\nbinaries. The &quot;dumpable&quot; setting also affects the\nownership of files in a process&rsquo;s <i>/proc/[pid]</i>\ndirectory, as described above.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Three different\ninteger values can be specified: <i><br>\n0&nbsp;(default)</i></p>\n\n<p style=\"margin-left:32%;\">This provides the traditional\n(pre-Linux 2.6.13) behavior. A core dump will not be\nproduced for a process which has changed credentials (by\ncalling <a href=\"https://man.page/2/seteuid\">seteuid(2)</a>, <a href=\"https://man.page/2/setgid\">setgid(2)</a>, or similar, or\nby executing a set-user-ID or set-group-ID program) or whose\nbinary does not have read permission enabled.</p>\n\n\n<p style=\"margin-left:22%;\"><i>1&nbsp;(&quot;debug&quot;)</i></p>\n\n<p style=\"margin-left:32%;\">All processes dump core when\npossible. (Reasons why a process might nevertheless not dump\ncore are described in <a href=\"https://man.page/5/core\">core(5)</a>.) The core dump is\nowned by the filesystem user ID of the dumping process and\nno security is applied. This is intended for system\ndebugging situations only: this mode is insecure because it\nallows unprivileged users to examine the memory contents of\nprivileged processes.</p>\n\n\n<p style=\"margin-left:22%;\"><i>2&nbsp;(&quot;suidsafe&quot;)</i></p>\n\n<p style=\"margin-left:32%;\">Any binary which normally would\nnot be dumped (see &quot;0&quot; above) is dumped readable\nby root only. This allows the user to remove the core dump\nfile but not to read it. For security reasons core dumps in\nthis mode will not overwrite one another or other files.\nThis mode is appropriate when administrators are attempting\nto debug problems in a normal environment.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Additionally,\nsince Linux 3.6, <i>/proc/sys/kernel/core_pattern</i> must\neither be an absolute pathname or a pipe command, as\ndetailed in <a href=\"https://man.page/5/core\">core(5)</a>. Warnings will be written to the\nkernel log if <i>core_pattern</i> does not follow these\nrules, and no core dump will be produced.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For details of\nthe effect of a process&rsquo;s &quot;dumpable&quot; setting\non ptrace access mode checking, see <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/super-max</i></p>\n\n<p style=\"margin-left:22%;\">This file controls the maximum\nnumber of superblocks, and thus the maximum number of\nmounted filesystems the kernel can have. You need increase\nonly <i>super-max</i> if you need to mount more filesystems\nthan the current value in <i>super-max</i> allows you\nto.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/fs/super-nr</i></p>\n\n<p style=\"margin-left:22%;\">This file contains the number\nof filesystems currently mounted.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel</i></p>\n\n<p style=\"margin-left:22%;\">This directory contains files\ncontrolling a range of kernel parameters, as described\nbelow.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/acct</i></p>\n\n<p style=\"margin-left:22%;\">This file contains three\nnumbers: <i>highwater</i>, <i>lowwater</i>, and\n<i>frequency</i>. If BSD-style process accounting is\nenabled, these values control its behavior. If free space on\nfilesystem where the log lives goes below <i>lowwater</i>\npercent, accounting suspends. If free space gets above\n<i>highwater</i> percent, accounting resumes.\n<i>frequency</i> determines how often the kernel checks the\namount of free space (value is in seconds). Default values\nare 4, 2 and 30. That is, suspend accounting if 2% or less\nspace is free; resume it if 4% or more space is free;\nconsider information about amount of free space valid for 30\nseconds.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/auto_msgmni</i>\n(Linux 2.6.27 to 3.18)</p>\n\n<p style=\"margin-left:22%;\">From Linux 2.6.27 to 3.18, this\nfile was used to control recomputing of the value in\n<i>/proc/sys/kernel/msgmni</i> upon the addition or removal\nof memory or upon IPC namespace creation/removal. Echoing\n&quot;1&quot; into this file enabled <i>msgmni</i> automatic\nrecomputing (and triggered a recomputation of <i>msgmni</i>\nbased on the current amount of available memory and number\nof IPC namespaces). Echoing &quot;0&quot; disabled automatic\nrecomputing. (Automatic recomputing was also disabled if a\nvalue was explicitly assigned to\n<i>/proc/sys/kernel/msgmni</i>.) The default value in\n<i>auto_msgmni</i> was 1.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n3.19, the content of this file has no effect (because\n<i>msgmni</i> defaults to near the maximum value possible),\nand reads from this file always return the value\n&quot;0&quot;.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/cap_last_cap</i>\n(since Linux 3.2)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/cap-bound</i>\n(from Linux 2.2 to 2.6.24)</p>\n\n<p style=\"margin-left:22%;\">This file holds the value of\nthe kernel <i>capability bounding set</i> (expressed as a\nsigned decimal number). This set is ANDed against the\ncapabilities permitted to a process during <a href=\"https://man.page/2/execve\">execve(2)</a>.\nStarting with Linux 2.6.25, the system-wide capability\nbounding set disappeared, and was replaced by a per-thread\nbounding set; see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/core_pattern</i></p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/5/core\">core(5)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/core_pipe_limit</i></p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/5/core\">core(5)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/core_uses_pid</i></p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/5/core\">core(5)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/ctrl-alt-del</i></p>\n\n<p style=\"margin-left:22%;\">This file controls the handling\nof Ctrl-Alt-Del from the keyboard. When the value in this\nfile is 0, Ctrl-Alt-Del is trapped and sent to the\n<a href=\"https://man.page/1/init\">init(1)</a> program to handle a graceful restart. When\nthe value is greater than zero, Linux&rsquo;s reaction to a\nVulcan Nerve Pinch (tm) will be an immediate reboot, without\neven syncing its dirty buffers. Note: when a program (like\ndosemu) has the keyboard in &quot;raw&quot; mode, the\nctrl-alt-del is intercepted by the program before it ever\nreaches the kernel tty layer, and it&rsquo;s up to the\nprogram to decide what to do with it.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/dmesg_restrict</i>\n(since Linux 2.6.37)</p>\n\n<p style=\"margin-left:22%;\">The value in this file\ndetermines who can see kernel syslog contents. A value of 0\nin this file imposes no restrictions. If the value is 1,\nonly privileged users can read the kernel syslog. (See\n<a href=\"https://man.page/2/syslog\">syslog(2)</a> for more details.) Since Linux 3.4, only\nusers with the <b>CAP_SYS_ADMIN</b> capability may change\nthe value in this file.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/domainname</i>\nand <i>/proc/sys/kernel/hostname</i></p>\n\n<p style=\"margin-left:22%;\">can be used to set the NIS/YP\ndomainname and the hostname of your box in exactly the same\nway as the commands <a href=\"https://man.page/1/domainname\">domainname(1)</a> and\n<a href=\"https://man.page/1/hostname\">hostname(1)</a>, that is:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\"># <b>echo\n'darkstar' &gt; /proc/sys/kernel/hostname</b> <br>\n# <b>echo 'mydomain' &gt;\n/proc/sys/kernel/domainname</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">has the same\neffect as</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\"># <b>hostname\n'darkstar'</b> <br>\n# <b>domainname 'mydomain'</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note, however,\nthat the classic darkstar.frop.org has the hostname\n&quot;darkstar&quot; and DNS (Internet Domain Name Server)\ndomainname &quot;frop.org&quot;, not to be confused with the\nNIS (Network Information Service) or YP (Yellow Pages)\ndomainname. These two domain names are in general different.\nFor a detailed discussion see the <a href=\"https://man.page/1/hostname\">hostname(1)</a> man\npage.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/hotplug</i></p>\n\n<p style=\"margin-left:22%;\">This file contains the pathname\nfor the hotplug policy agent. The default value in this file\nis <i>/sbin/hotplug</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/htab-reclaim</i>\n(before Linux 2.4.9.2)</p>\n\n<p style=\"margin-left:22%;\">(PowerPC only) If this file is\nset to a nonzero value, the PowerPC htab (see kernel file\n<i>Documentation/powerpc/ppc_htab.txt</i>) is pruned each\ntime the system hits the idle loop.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/*</i></p>\n\n<p style=\"margin-left:22%;\">This directory contains various\nfiles that define parameters and limits for the\nkey-management facility. These files are described in\n<a href=\"https://man.page/7/keyrings\">keyrings(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/kptr_restrict</i>\n(since Linux 2.6.38)</p>\n\n<p style=\"margin-left:22%;\">The value in this file\ndetermines whether kernel addresses are exposed via\n<i>/proc</i> files and other interfaces. A value of 0 in\nthis file imposes no restrictions. If the value is 1, kernel\npointers printed using the <i>%pK</i> format specifier will\nbe replaced with zeros unless the user has the\n<b>CAP_SYSLOG</b> capability. If the value is 2, kernel\npointers printed using the <i>%pK</i> format specifier will\nbe replaced with zeros regardless of the user&rsquo;s\ncapabilities. The initial default value for this file was 1,\nbut the default was changed to 0 in Linux 2.6.39. Since\nLinux 3.4, only users with the <b>CAP_SYS_ADMIN</b>\ncapability can change the value in this file.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/l2cr</i></p>\n\n<p style=\"margin-left:22%;\">(PowerPC only) This file\ncontains a flag that controls the L2 cache of G3 processor\nboards. If 0, the cache is disabled. Enabled if nonzero.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/modprobe</i></p>\n\n<p style=\"margin-left:22%;\">This file contains the pathname\nfor the kernel module loader. The default value is\n<i>/sbin/modprobe</i>. The file is present only if the\nkernel is built with the <b>CONFIG_MODULES</b>\n(<b>CONFIG_KMOD</b> in Linux 2.6.26 and earlier) option\nenabled. It is described by the Linux kernel source file\n<i>Documentation/kmod.txt</i> (present only in kernel 2.4\nand earlier).</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/modules_disabled</i>\n(since Linux 2.6.31)</p>\n\n<p style=\"margin-left:22%;\">A toggle value indicating if\nmodules are allowed to be loaded in an otherwise modular\nkernel. This toggle defaults to off (0), but can be set true\n(1). Once true, modules can be neither loaded nor unloaded,\nand the toggle cannot be set back to false. The file is\npresent only if the kernel is built with the\n<b>CONFIG_MODULES</b> option enabled.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/msgmax</i>\n(since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This file defines a system-wide\nlimit specifying the maximum number of bytes in a single\nmessage written on a System V message queue.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/msgmni</i>\n(since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">This file defines the\nsystem-wide limit on the number of message queue\nidentifiers. See also\n<i>/proc/sys/kernel/auto_msgmni</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/msgmnb</i>\n(since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This file defines a system-wide\nparameter used to initialize the <i>msg_qbytes</i> setting\nfor subsequently created message queues. The\n<i>msg_qbytes</i> setting specifies the maximum number of\nbytes that may be written to the message queue.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/ngroups_max</i>\n(since Linux 2.6.4)</p>\n\n<p style=\"margin-left:22%;\">This is a read-only file that\ndisplays the upper limit on the number of a process&rsquo;s\ngroup memberships.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/ns_last_pid</i>\n(since Linux 3.3)</p>\n\n<p style=\"margin-left:22%;\">See\n<a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/ostype</i>\nand <i>/proc/sys/kernel/osrelease</i></p>\n\n<p style=\"margin-left:22%;\">These files give substrings of\n<i>/proc/version</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/overflowgid</i>\nand <i>/proc/sys/kernel/overflowuid</i></p>\n\n<p style=\"margin-left:22%;\">These files duplicate the files\n<i>/proc/sys/fs/overflowgid</i> and\n<i>/proc/sys/fs/overflowuid</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/panic</i></p>\n\n<p style=\"margin-left:22%;\">This file gives read/write\naccess to the kernel variable <i>panic_timeout</i>. If this\nis zero, the kernel will loop on a panic; if nonzero, it\nindicates that the kernel should autoreboot after this\nnumber of seconds. When you use the software watchdog device\ndriver, the recommended setting is 60.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/panic_on_oops</i>\n(since Linux 2.5.68)</p>\n\n<p style=\"margin-left:22%;\">This file controls the\nkernel&rsquo;s behavior when an oops or BUG is encountered.\nIf this file contains 0, then the system tries to continue\noperation. If it contains 1, then the system delays a few\nseconds (to give klogd time to record the oops output) and\nthen panics. If the <i>/proc/sys/kernel/panic</i> file is\nalso nonzero, then the machine will be rebooted.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/pid_max</i>\n(since Linux 2.5.34)</p>\n\n<p style=\"margin-left:22%;\">This file specifies the value\nat which PIDs wrap around (i.e., the value in this file is\none greater than the maximum PID). PIDs greater than this\nvalue are not allocated; thus, the value in this file also\nacts as a system-wide limit on the total number of processes\nand threads. The default value for this file, 32768, results\nin the same range of PIDs as on earlier kernels. On 32-bit\nplatforms, 32768 is the maximum value for <i>pid_max</i>. On\n64-bit systems, <i>pid_max</i> can be set to any value up to\n2^22 (<b>PID_MAX_LIMIT</b>, approximately 4 million).</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/powersave-nap</i>\n(PowerPC only)</p>\n\n<p style=\"margin-left:22%;\">This file contains a flag. If\nset, Linux-PPC will use the &quot;nap&quot; mode of\npowersaving, otherwise the &quot;doze&quot; mode will be\nused.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/printk</i></p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/2/syslog\">syslog(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/pty</i>\n(since Linux 2.6.4)</p>\n\n<p style=\"margin-left:22%;\">This directory contains two\nfiles relating to the number of UNIX 98 pseudoterminals (see\n<a href=\"https://man.page/4/pts\">pts(4)</a>) on the system.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/pty/max</i></p>\n\n<p style=\"margin-left:22%;\">This file defines the maximum\nnumber of pseudoterminals.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/pty/nr</i></p>\n\n<p style=\"margin-left:22%;\">This read-only file indicates\nhow many pseudoterminals are currently in use.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/random</i></p>\n\n<p style=\"margin-left:22%;\">This directory contains various\nparameters controlling the operation of the file\n<i>/dev/random</i>. See <a href=\"https://man.page/4/random\">random(4)</a> for further\ninformation.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/random/uuid</i>\n(since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">Each read from this read-only\nfile returns a randomly generated 128-bit UUID, as a string\nin the standard UUID format.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/randomize_va_space</i>\n(since Linux 2.6.12)</p>\n\n<p style=\"margin-left:22%;\">Select the address space layout\nrandomization (ASLR) policy for the system (on architectures\nthat support ASLR). Three values are supported for this\nfile:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Turn ASLR off. This is the default for architectures\nthat don&rsquo;t support ASLR, and when the kernel is booted\nwith the <i>norandmaps</i> parameter.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Make the addresses of <a href=\"https://man.page/2/mmap\">mmap(2)</a> allocations, the\nstack, and the VDSO page randomized. Among other things,\nthis means that shared libraries will be loaded at\nrandomized addresses. The text segment of PIE-linked\nbinaries will also be loaded at a randomized address. This\nvalue is the default if the kernel was configured with\n<b>CONFIG_COMPAT_BRK</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>(Since Linux 2.6.25) Also support heap randomization.\nThis value is the default if the kernel was not configured\nwith <b>CONFIG_COMPAT_BRK</b>.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/real-root-dev</i></p>\n\n<p style=\"margin-left:22%;\">This file is documented in the\nLinux kernel source file\n<i>Documentation/admin-guide/initrd.rst</i> (or\n<i>Documentation/initrd.txt</i> before Linux 4.10).</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/reboot-cmd</i>\n(Sparc only)</p>\n\n<p style=\"margin-left:22%;\">This file seems to be a way to\ngive an argument to the SPARC ROM/Flash boot loader. Maybe\nto tell it what to do after rebooting?</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/rtsig-max</i></p>\n\n<p style=\"margin-left:22%;\">(Only in kernels up to and\nincluding 2.6.7; see <a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>) This file can be\nused to tune the maximum number of POSIX real-time (queued)\nsignals that can be outstanding in the system.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/rtsig-nr</i></p>\n\n<p style=\"margin-left:22%;\">(Only in kernels up to and\nincluding 2.6.7.) This file shows the number of POSIX\nreal-time signals currently queued.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/[pid]/sched_autogroup_enabled</i>\n(since Linux 2.6.38)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/sched\">sched(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/sched_child_runs_first</i>\n(since Linux 2.6.23)</p>\n\n<p style=\"margin-left:22%;\">If this file contains the value\nzero, then, after a <a href=\"https://man.page/2/fork\">fork(2)</a>, the parent is first\nscheduled on the CPU. If the file contains a nonzero value,\nthen the child is scheduled first on the CPU. (Of course, on\na multiprocessor system, the parent and the child might both\nimmediately be scheduled on a CPU.)</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/sched_rr_timeslice_ms</i>\n(since Linux 3.9)</p>\n\n<p style=\"margin-left:22%;\">See\n<a href=\"https://man.page/2/sched_rr_get_interval\">sched_rr_get_interval(2)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/sched_rt_period_us</i>\n(since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/sched\">sched(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/sched_rt_runtime_us</i>\n(since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/sched\">sched(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/seccomp</i>\n(since Linux 4.14)</p>\n\n<p style=\"margin-left:22%;\">This directory provides\nadditional seccomp information and configuration. See\n<a href=\"https://man.page/2/seccomp\">seccomp(2)</a> for further details.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/sem</i>\n(since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">This file contains 4 numbers\ndefining limits for System V IPC semaphores. These fields\nare, in order:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>SEMMSL</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>The maximum semaphores per semaphore set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>SEMMNS</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>A system-wide limit on the number of semaphores in all\nsemaphore sets.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>SEMOPM</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>The maximum number of operations that may be specified\nin a <a href=\"https://man.page/2/semop\">semop(2)</a> call.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>SEMMNI</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>A system-wide limit on the maximum number of semaphore\nidentifiers.</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/sg-big-buff</i></p>\n\n<p style=\"margin-left:22%;\">This file shows the size of the\ngeneric SCSI device (sg) buffer. You can&rsquo;t tune it\njust yet, but you could change it at compile time by editing\n<i>include/scsi/sg.h</i> and changing the value of\n<b>SG_BIG_BUFF</b>. However, there shouldn&rsquo;t be any\nreason to change this value.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/shm_rmid_forced</i>\n(since Linux 3.1)</p>\n\n<p style=\"margin-left:22%;\">If this file is set to 1, all\nSystem V shared memory segments will be marked for\ndestruction as soon as the number of attached processes\nfalls to zero; in other words, it is no longer possible to\ncreate shared memory segments that exist independently of\nany attached process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The effect is\nas though a <a href=\"https://man.page/2/shmctl\">shmctl(2)</a> <b>IPC_RMID</b> is performed on\nall existing segments as well as all segments created in the\nfuture (until this file is reset to 0). Note that existing\nsegments that are attached to no process will be immediately\ndestroyed when this file is set to 1. Setting this option\nwill also destroy segments that were created, but never\nattached, upon termination of the process that created the\nsegment with <a href=\"https://man.page/2/shmget\">shmget(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Setting this\nfile to 1 provides a way of ensuring that all System V\nshared memory segments are counted against the resource\nusage and resource limits (see the description of\n<b>RLIMIT_AS</b> in <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>) of at least one\nprocess.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Because setting\nthis file to 1 produces behavior that is nonstandard and\ncould also break existing applications, the default value in\nthis file is 0. Set this file to 1 only if you have a good\nunderstanding of the semantics of the applications using\nSystem V shared memory on your system.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/shmall</i>\n(since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This file contains the\nsystem-wide limit on the total number of pages of System V\nshared memory.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/shmmax</i>\n(since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This file can be used to query\nand set the run-time limit on the maximum (System V IPC)\nshared memory segment size that can be created. Shared\nmemory segments up to 1 GB are now supported in the kernel.\nThis value defaults to <b>SHMMAX</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/shmmni</i>\n(since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">This file specifies the\nsystem-wide maximum number of System V shared memory\nsegments that can be created.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/sysctl_writes_strict</i>\n(since Linux 3.16)</p>\n\n<p style=\"margin-left:22%;\">The value in this file\ndetermines how the file offset affects the behavior of\nupdating entries in files under <i>/proc/sys</i>. The file\nhas three possible values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>-1</p></td>\n<td width=\"3%\"></td>\n<td width=\"72%\">\n\n\n<p>This provides legacy handling, with no printk warnings.\nEach <a href=\"https://man.page/2/write\">write(2)</a> must fully contain the value to be\nwritten, and multiple writes on the same file descriptor\nwill overwrite the entire value, regardless of the file\nposition.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"72%\">\n\n\n<p>(default) This provides the same behavior as for -1, but\nprintk warnings are written for processes that perform\nwrites when the file offset is not 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"72%\">\n\n\n<p>Respect the file offset when writing strings into\n<i>/proc/sys</i> files. Multiple writes will <i>append</i>\nto the value buffer. Anything written beyond the maximum\nlength of the value buffer will be ignored. Writes to\nnumeric <i>/proc/sys</i> entries must always be at file\noffset 0 and the value must be fully contained in the buffer\nprovided to <a href=\"https://man.page/2/write\">write(2)</a>.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/sysrq</i></p>\n\n<p style=\"margin-left:22%;\">This file controls the\nfunctions allowed to be invoked by the SysRq key. By\ndefault, the file contains 1 meaning that every possible\nSysRq request is allowed (in older kernel versions, SysRq\nwas disabled by default, and you were required to\nspecifically enable it at run-time, but this is not the case\nany more). Possible values in this file are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>Disable sysrq completely</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>Enable all functions of sysrq</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>&gt; 1</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>Bit mask of allowed sysrq functions, as follows:</p></td></tr>\n</table>\n\n<p style=\"margin-left:29%;\">&nbsp;&nbsp; 2</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"5%\"></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\">Enable control of console\nlogging level</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"5%\">\n\n\n<p>&nbsp;&nbsp; 4</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Enable control of keyboard (SAK, unraw)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"5%\">\n\n\n<p>&nbsp;&nbsp; 8</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Enable debugging dumps of processes etc.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"5%\">\n\n\n<p>&nbsp; 16</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Enable sync command</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"5%\">\n\n\n<p>&nbsp; 32</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Enable remount read-only</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"5%\">\n\n\n<p>&nbsp; 64</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Enable signaling of processes (term, kill, oom-kill)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"5%\">\n\n\n<p>128</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Allow reboot/poweroff</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"5%\">\n\n\n<p>256</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p>Allow nicing of all real-time tasks</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This file is\npresent only if the <b>CONFIG_MAGIC_SYSRQ</b> kernel\nconfiguration option is enabled. For further details see the\nLinux kernel source file\n<i>Documentation/admin-guide/sysrq.rst</i> (or\n<i>Documentation/sysrq.txt</i> before Linux 4.10).</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/version</i></p>\n\n<p style=\"margin-left:22%;\">This file contains a string\nsuch as:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">#5 Wed Feb 25\n21:49:24 MET 1998</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n&quot;#5&quot; means that this is the fifth kernel built\nfrom this source base and the date following it indicates\nthe time the kernel was built.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/threads-max</i>\n(since Linux 2.3.11)</p>\n\n<p style=\"margin-left:22%;\">This file specifies the\nsystem-wide limit on the number of threads (tasks) that can\nbe created on the system.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n4.1, the value that can be written to <i>threads-max</i> is\nbounded. The minimum value that can be written is 20. The\nmaximum value that can be written is given by the constant\n<b>FUTEX_TID_MASK</b> (0x3fffffff). If a value outside of\nthis range is written to <i>threads-max</i>, the error\n<b>EINVAL</b> occurs.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value\nwritten is checked against the available RAM pages. If the\nthread structures would occupy too much (more than 1/8th) of\nthe available RAM pages, <i>threads-max</i> is reduced\naccordingly.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/yama/ptrace_scope</i>\n(since Linux 3.5)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/zero-paged</i>\n(PowerPC only)</p>\n\n<p style=\"margin-left:22%;\">This file contains a flag. When\nenabled (nonzero), Linux-PPC will pre-zero pages in the idle\nloop, possibly speeding up get_free_pages.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/net</i></p>\n\n<p style=\"margin-left:22%;\">This directory contains\nnetworking stuff. Explanations for some of the files under\nthis directory can be found in <a href=\"https://man.page/7/tcp\">tcp(7)</a> and\n<a href=\"https://man.page/7/ip\">ip(7)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/net/core/bpf_jit_enable</i></p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/2/bpf\">bpf(2)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/net/core/somaxconn</i></p>\n\n<p style=\"margin-left:22%;\">This file defines a ceiling\nvalue for the <i>backlog</i> argument of <a href=\"https://man.page/2/listen\">listen(2)</a>;\nsee the <a href=\"https://man.page/2/listen\">listen(2)</a> manual page for details.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/proc</i></p>\n\n<p style=\"margin-left:22%;\">This directory may be\nempty.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/sunrpc</i></p>\n\n<p style=\"margin-left:22%;\">This directory supports Sun\nremote procedure call for network filesystem (NFS). On some\nsystems, it is not present.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/user</i> (since\nLinux 4.9)</p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm</i></p>\n\n<p style=\"margin-left:22%;\">This directory contains files\nfor memory management tuning, buffer and cache\nmanagement.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/admin_reserve_kbytes</i>\n(since Linux 3.10)</p>\n\n<p style=\"margin-left:22%;\">This file defines the amount of\nfree memory (in KiB) on the system that should be reserved\nfor users with the capability <b>CAP_SYS_ADMIN</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is the minimum of [3% of free pages,\n8MiB] expressed as KiB. The default is intended to provide\nenough for the superuser to log in and kill a process, if\nnecessary, under the default overcommit &rsquo;guess&rsquo;\nmode (i.e., 0 in <i>/proc/sys/vm/overcommit_memory</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Systems running\nin &quot;overcommit never&quot; mode (i.e., 2 in\n<i>/proc/sys/vm/overcommit_memory</i>) should increase the\nvalue in this file to account for the full virtual memory\nsize of the programs used to recover (e.g., <a href=\"https://man.page/1/login\">login(1)</a>\n<a href=\"https://man.page/1/ssh\">ssh(1)</a>, and <a href=\"https://man.page/1/top\">top(1)</a>) Otherwise, the superuser\nmay not be able to log in to recover the system. For\nexample, on x86-64 a suitable value is 131072 (128MiB\nreserved).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Changing the\nvalue in this file takes effect whenever an application\nrequests memory.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/compact_memory</i>\n(since Linux 2.6.35)</p>\n\n<p style=\"margin-left:22%;\">When 1 is written to this file,\nall zones are compacted such that free memory is available\nin contiguous blocks where possible. The effect of this\naction can be seen by examining <i>/proc/buddyinfo</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Present only if\nthe kernel was configured with <b>CONFIG_COMPACTION</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/drop_caches</i>\n(since Linux 2.6.16)</p>\n\n<p style=\"margin-left:22%;\">Writing to this file causes the\nkernel to drop clean caches, dentries, and inodes from\nmemory, causing that memory to become free. This can be\nuseful for memory management testing and performing\nreproducible filesystem benchmarks. Because writing to this\nfile causes the benefits of caching to be lost, it can\ndegrade overall system performance.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To free\npagecache, use:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">echo 1 &gt;\n/proc/sys/vm/drop_caches</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To free\ndentries and inodes, use:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">echo 2 &gt;\n/proc/sys/vm/drop_caches</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To free\npagecache, dentries and inodes, use:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">echo 3 &gt;\n/proc/sys/vm/drop_caches</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Because writing\nto this file is a nondestructive operation and dirty objects\nare not freeable, the user should run <a href=\"https://man.page/1/sync\">sync(1)</a>\nfirst.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/legacy_va_layout</i>\n(since Linux 2.6.9)</p>\n\n<p style=\"margin-left:22%;\">If nonzero, this disables the\nnew 32-bit memory-mapping layout; the kernel will use the\nlegacy (2.4) layout for all processes.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/memory_failure_early_kill</i>\n(since Linux 2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Control how to kill processes\nwhen an uncorrected memory error (typically a 2-bit error in\na memory module) that cannot be handled by the kernel is\ndetected in the background by hardware. In some cases (like\nthe page still having a valid copy on disk), the kernel will\nhandle the failure transparently without affecting any\napplications. But if there is no other up-to-date copy of\nthe data, it will kill processes to prevent any data\ncorruptions from propagating.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The file has\none of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>1:</p></td>\n<td width=\"3%\"></td>\n<td width=\"72%\">\n\n\n<p>Kill all processes that have the\ncorrupted-and-not-reloadable page mapped as soon as the\ncorruption is detected. Note that this is not supported for\na few types of pages, such as kernel internally allocated\ndata or the swap cache, but works for the majority of user\npages.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>0:</p></td>\n<td width=\"3%\"></td>\n<td width=\"72%\">\n\n\n<p>Unmap the corrupted page from all processes and kill a\nprocess only if it tries to access the page.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The kill is\nperformed using a <b>SIGBUS</b> signal with <i>si_code</i>\nset to <b>BUS_MCEERR_AO</b>. Processes can handle this if\nthey want to; see <a href=\"https://man.page/2/sigaction\">sigaction(2)</a> for more details.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This feature is\nactive only on architectures/platforms with advanced machine\ncheck handling and depends on the hardware capabilities.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Applications\ncan override the <i>memory_failure_early_kill</i> setting\nindividually with the <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_MCE_KILL</b>\noperation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Present only if\nthe kernel was configured with\n<b>CONFIG_MEMORY_FAILURE</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/memory_failure_recovery</i>\n(since Linux 2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Enable memory failure recovery\n(when supported by the platform).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>1:</p></td>\n<td width=\"3%\"></td>\n<td width=\"50%\">\n\n\n<p>Attempt recovery.</p></td>\n<td width=\"22%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>0:</p></td>\n<td width=\"3%\"></td>\n<td width=\"50%\">\n\n\n<p>Always panic on a memory failure.</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Present only if\nthe kernel was configured with\n<b>CONFIG_MEMORY_FAILURE</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/oom_dump_tasks</i>\n(since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">Enables a system-wide task dump\n(excluding kernel threads) to be produced when the kernel\nperforms an OOM-killing. The dump includes the following\ninformation for each task (thread, process): thread ID, real\nuser ID, thread group ID (process ID), virtual memory size,\nresident set size, the CPU that the task is scheduled on,\noom_adj score (see the description of\n<i>/proc/[pid]/oom_adj</i>), and command name. This is\nhelpful to determine why the OOM-killer was invoked and to\nidentify the rogue task that caused it.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this\ncontains the value zero, this information is suppressed. On\nvery large systems with thousands of tasks, it may not be\nfeasible to dump the memory state information for each one.\nSuch systems should not be forced to incur a performance\npenalty in OOM situations when the information may not be\ndesired.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this is set\nto nonzero, this information is shown whenever the\nOOM-killer actually kills a memory-hogging task.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue is 0.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/oom_kill_allocating_task</i>\n(since Linux 2.6.24)</p>\n\n<p style=\"margin-left:22%;\">This enables or disables\nkilling the OOM-triggering task in out-of-memory\nsituations.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this is set\nto zero, the OOM-killer will scan through the entire\ntasklist and select a task based on heuristics to kill. This\nnormally selects a rogue memory-hogging task that frees up a\nlarge amount of memory when killed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this is set\nto nonzero, the OOM-killer simply kills the task that\ntriggered the out-of-memory condition. This avoids a\npossibly expensive tasklist scan.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<i>/proc/sys/vm/panic_on_oom</i> is nonzero, it takes\nprecedence over whatever value is used in\n<i>/proc/sys/vm/oom_kill_allocating_task</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue is 0.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/overcommit_kbytes</i>\n(since Linux 3.14)</p>\n\n<p style=\"margin-left:22%;\">This writable file provides an\nalternative to <i>/proc/sys/vm/overcommit_ratio</i> for\ncontrolling the <i>CommitLimit</i> when\n<i>/proc/sys/vm/overcommit_memory</i> has the value 2. It\nallows the amount of memory overcommitting to be specified\nas an absolute value (in kB), rather than as a percentage,\nas is done with <i>overcommit_ratio</i>. This allows for\nfiner-grained control of <i>CommitLimit</i> on systems with\nextremely large memory sizes.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Only one of\n<i>overcommit_kbytes</i> or <i>overcommit_ratio</i> can have\nan effect: if <i>overcommit_kbytes</i> has a nonzero value,\nthen it is used to calculate <i>CommitLimit</i>, otherwise\n<i>overcommit_ratio</i> is used. Writing a value to either\nof these files causes the value in the other file to be set\nto zero.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/overcommit_memory</i></p>\n\n<p style=\"margin-left:22%;\">This file contains the kernel\nvirtual memory accounting mode. Values are:</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">0: heuristic\novercommit (this is the default) <br>\n1: always overcommit, never check <br>\n2: always check, never overcommit</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In mode 0,\ncalls of <a href=\"https://man.page/2/mmap\">mmap(2)</a> with <b>MAP_NORESERVE</b> are not\nchecked, and the default check is very weak, leading to the\nrisk of getting a process &quot;OOM-killed&quot;.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In mode 1, the\nkernel pretends there is always enough memory, until memory\nactually runs out. One use case for this mode is scientific\ncomputing applications that employ large sparse arrays. In\nLinux kernel versions before 2.6.0, any nonzero value\nimplies mode 1.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In mode 2\n(available since Linux 2.6), the total virtual address space\nthat can be allocated (<i>CommitLimit</i> in\n<i>/proc/meminfo</i>) is calculated as</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">CommitLimit =\n(total_RAM - total_huge_TLB) * <br>\novercommit_ratio / 100 + total_swap</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">where:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p><i>total_RAM</i> is the total amount of RAM on the\nsystem;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p><i>total_huge_TLB</i> is the amount of memory set aside\nfor huge pages;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p><i>overcommit_ratio</i> is the value in\n<i>/proc/sys/vm/overcommit_ratio</i>; and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p><i>total_swap</i> is the amount of swap space.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For example, on\na system with 16 GB of physical RAM, 16 GB of swap, no space\ndedicated to huge pages, and an <i>overcommit_ratio</i> of\n50, this formula yields a <i>CommitLimit</i> of 24 GB.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n3.14, if the value in <i>/proc/sys/vm/overcommit_kbytes</i>\nis nonzero, then <i>CommitLimit</i> is instead calculated\nas:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">CommitLimit =\novercommit_kbytes + total_swap</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">See also the\ndescription of <i>/proc/sys/vm/admin_reserve_kbytes</i> and\n<i>/proc/sys/vm/user_reserve_kbytes</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/overcommit_ratio</i>\n(since Linux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">This writable file defines a\npercentage by which memory can be overcommitted. The default\nvalue in the file is 50. See the description of\n<i>/proc/sys/vm/overcommit_memory</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/panic_on_oom</i>\n(since Linux 2.6.18)</p>\n\n<p style=\"margin-left:22%;\">This enables or disables a\nkernel panic in an out-of-memory situation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this file is\nset to the value 0, the kernel&rsquo;s OOM-killer will kill\nsome rogue process. Usually, the OOM-killer is able to kill\na rogue process and the system will survive.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this file is\nset to the value 1, then the kernel normally panics when\nout-of-memory happens. However, if a process limits\nallocations to certain nodes using memory policies\n(<a href=\"https://man.page/2/mbind\">mbind(2)</a> <b>MPOL_BIND</b>) or cpusets\n(<a href=\"https://man.page/7/cpuset\">cpuset(7)</a>) and those nodes reach memory exhaustion\nstatus, one process may be killed by the OOM-killer. No\npanic occurs in this case: because other nodes&rsquo; memory\nmay be free, this means the system as a whole may not have\nreached an out-of-memory situation yet.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this file is\nset to the value 2, the kernel always panics when an\nout-of-memory condition occurs.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue is 0. 1 and 2 are for failover of clustering. Select\neither according to your policy of failover.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/swappiness</i></p>\n\n<p style=\"margin-left:22%;\">The value in this file controls\nhow aggressively the kernel will swap memory pages. Higher\nvalues increase aggressiveness, lower values decrease\naggressiveness. The default value is 60.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/user_reserve_kbytes</i>\n(since Linux 3.10)</p>\n\n<p style=\"margin-left:22%;\">Specifies an amount of memory\n(in KiB) to reserve for user processes. This is intended to\nprevent a user from starting a single memory hogging\nprocess, such that they cannot recover (kill the hog). The\nvalue in this file has an effect only when\n<i>/proc/sys/vm/overcommit_memory</i> is set to 2\n(&quot;overcommit never&quot; mode). In this case, the\nsystem reserves an amount of memory that is the minimum of\n[3% of current process size,\n<i>user_reserve_kbytes</i>].</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is the minimum of [3% of free pages,\n128MiB] expressed as KiB.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the value in\nthis file is set to zero, then a user will be allowed to\nallocate all free memory with a single process (minus the\namount reserved by\n<i>/proc/sys/vm/admin_reserve_kbytes</i>). Any subsequent\nattempts to execute a command will result in &quot;fork:\nCannot allocate memory&quot;.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Changing the\nvalue in this file takes effect whenever an application\nrequests memory.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/vm/unprivileged_userfaultfd</i>\n(since Linux 5.2)</p>\n\n<p style=\"margin-left:22%;\">This (writable) file exposes a\nflag that controls whether unprivileged processes are\nallowed to employ <a href=\"https://man.page/2/userfaultfd\">userfaultfd(2)</a>. If this file has\nthe value 1, then unprivileged processes may use\n<a href=\"https://man.page/2/userfaultfd\">userfaultfd(2)</a>. If this file has the value 0, then\nonly processes that have the <b>CAP_SYS_PTRACE</b>\ncapability may employ <a href=\"https://man.page/2/userfaultfd\">userfaultfd(2)</a>. The default\nvalue in this file is 1.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sysrq-trigger</i>\n(since Linux 2.4.21)</p>\n\n<p style=\"margin-left:22%;\">Writing a character to this\nfile triggers the same SysRq function as typing\nALT-SysRq-&lt;character&gt; (see the description of\n<i>/proc/sys/kernel/sysrq</i>). This file is normally\nwritable only by <i>root</i>. For further details see the\nLinux kernel source file\n<i>Documentation/admin-guide/sysrq.rst</i> (or\n<i>Documentation/sysrq.txt</i> before Linux 4.10).</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/sysvipc</i></p>\n\n<p style=\"margin-left:22%;\">Subdirectory containing the\npseudo-files <i>msg</i>, <i>sem</i> and <i>shm</i>. These\nfiles list the System V Interprocess Communication (IPC)\nobjects (respectively: message queues, semaphores, and\nshared memory) that currently exist on the system, providing\nsimilar information to that available via <a href=\"https://man.page/1/ipcs\">ipcs(1)</a>.\nThese files have headers and are formatted (one IPC object\nper line) for easy understanding. <a href=\"https://man.page/7/sysvipc\">sysvipc(7)</a> provides\nfurther background on the information shown by these\nfiles.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/thread-self</i> (since\nLinux 3.17)</p>\n\n<p style=\"margin-left:22%;\">This directory refers to the\nthread accessing the <i>/proc</i> filesystem, and is\nidentical to the <i>/proc/self/task/[tid]</i> directory\nnamed by the process thread ID (<i>[tid]</i>) of the same\nthread.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/timer_list</i> (since\nLinux 2.6.21)</p>\n\n<p style=\"margin-left:22%;\">This read-only file exposes a\nlist of all currently pending (high-resolution) timers, all\nclock-event sources, and their parameters in a\nhuman-readable form.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/timer_stats</i> (from\nLinux 2.6.21 until Linux 4.10)</p>\n\n<p style=\"margin-left:22%;\">This is a debugging facility to\nmake timer (ab)use in a Linux system visible to kernel and\nuser-space developers. It can be used by kernel and\nuser-space developers to verify that their code does not\nmake undue use of timers. The goal is to avoid unnecessary\nwakeups, thereby optimizing power consumption.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If enabled in\nthe kernel (<b>CONFIG_TIMER_STATS</b>), but not used, it has\nalmost zero run-time overhead and a relatively small\ndata-structure overhead. Even if collection is enabled at\nrun time, overhead is low: all the locking is per-CPU and\nlookup is hashed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/timer_stats</i> file is used both to control\nsampling facility and to read out the sampled\ninformation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>timer_stats</i> functionality is inactive on bootup. A\nsampling period can be started using the following\ncommand:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\"># echo 1 &gt;\n/proc/timer_stats</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\ncommand stops a sampling period:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\"># echo 0 &gt;\n/proc/timer_stats</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The statistics\ncan be retrieved by:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ cat\n/proc/timer_stats</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">While sampling\nis enabled, each readout from <i>/proc/timer_stats</i> will\nsee newly updated statistics. Once sampling is disabled, the\nsampled information is kept until a new sample period is\nstarted. This allows multiple readouts.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Sample output\nfrom <i>/proc/timer_stats</i>:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">$ <b>cat\n/proc/timer_stats</b> <br>\nTimer Stats Version: v0.3 <br>\nSample period: 1.764 s <br>\nCollection: active <br>\n255, 0 swapper/3 hrtimer_start_range_ns (tick_sched_timer)\n<br>\n71, 0 swapper/1 hrtimer_start_range_ns (tick_sched_timer)\n<br>\n58, 0 swapper/0 hrtimer_start_range_ns (tick_sched_timer)\n<br>\n4, 1694 gnome-shell mod_delayed_work_on\n(delayed_work_timer_fn) <br>\n17, 7 rcu_sched rcu_gp_kthread (process_timeout) <br>\n... <br>\n1, 4911 kworker/u16:0 mod_delayed_work_on\n(delayed_work_timer_fn) <br>\n1D, 2522 kworker/0:0 queue_delayed_work_on\n(delayed_work_timer_fn) <br>\n1029 total events, 583.333 events/sec</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The output\ncolumns are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>a count of the number of events, optionally (since Linux\n2.6.23) followed by the letter 'D' if this is a deferrable\ntimer;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the PID of the process that initialized the timer;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the name of the process that initialized the timer;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the function where the timer was initialized; and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>(in parentheses) the callback function that is\nassociated with the timer.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">During the\nLinux 4.11 development cycle, this file was removed because\nof security concerns, as it exposes information across\nnamespaces. Furthermore, it is possible to obtain the same\ninformation via in-kernel tracing facilities such as\nftrace.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/tty</i></p>\n\n<p style=\"margin-left:22%;\">Subdirectory containing the\npseudo-files and subdirectories for tty drivers and line\ndisciplines.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/uptime</i></p>\n\n<p style=\"margin-left:22%;\">This file contains two numbers\n(values in seconds): the uptime of the system (including\ntime spent in suspend) and the amount of time spent in the\nidle process.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/version</i></p>\n\n<p style=\"margin-left:22%;\">This string identifies the\nkernel version that is currently running. It includes the\ncontents of <i>/proc/sys/kernel/ostype</i>,\n<i>/proc/sys/kernel/osrelease</i>, and\n<i>/proc/sys/kernel/version</i>. For example:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">Linux version\n1.0.9 (quinlan@phaze) #1 Sat May 14 01:51:54 EDT 1994</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/vmstat</i> (since\nLinux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">This file displays various\nvirtual memory statistics. Each line of this file contains a\nsingle name-value pair, delimited by white space. Some lines\nare present only if the kernel was configured with suitable\noptions. (In some cases, the options required for particular\nfiles have changed across kernel versions, so they are not\nlisted here. Details can be found by consulting the kernel\nsource code.) The following fields may be present: <i><br>\nnr_free_pages</i> (since Linux 2.6.31) <i><br>\nnr_alloc_batch</i> (since Linux 3.12) <i><br>\nnr_inactive_anon</i> (since Linux 2.6.28) <i><br>\nnr_active_anon</i> (since Linux 2.6.28) <i><br>\nnr_inactive_file</i> (since Linux 2.6.28) <i><br>\nnr_active_file</i> (since Linux 2.6.28) <i><br>\nnr_unevictable</i> (since Linux 2.6.28) <i><br>\nnr_mlock</i> (since Linux 2.6.28) <i><br>\nnr_anon_pages</i> (since Linux 2.6.18) <i><br>\nnr_mapped</i> (since Linux 2.6.0) <i><br>\nnr_file_pages</i> (since Linux 2.6.18) <i><br>\nnr_dirty</i> (since Linux 2.6.0) <i><br>\nnr_writeback</i> (since Linux 2.6.0) <i><br>\nnr_slab_reclaimable</i> (since Linux 2.6.19) <i><br>\nnr_slab_unreclaimable</i> (since Linux 2.6.19) <i><br>\nnr_page_table_pages</i> (since Linux 2.6.0) <i><br>\nnr_kernel_stack</i> (since Linux 2.6.32)</p>\n\n<p style=\"margin-left:32%;\">Amount of memory allocated to\nkernel stacks.</p>\n\n<p style=\"margin-left:22%;\"><i>nr_unstable</i> (since Linux\n2.6.0) <i><br>\nnr_bounce</i> (since Linux 2.6.12) <i><br>\nnr_vmscan_write</i> (since Linux 2.6.19) <i><br>\nnr_vmscan_immediate_reclaim</i> (since Linux 3.2) <i><br>\nnr_writeback_temp</i> (since Linux 2.6.26) <i><br>\nnr_isolated_anon</i> (since Linux 2.6.32) <i><br>\nnr_isolated_file</i> (since Linux 2.6.32) <i><br>\nnr_shmem</i> (since Linux 2.6.32)</p>\n\n<p style=\"margin-left:32%;\">Pages used by shmem and\n<a href=\"https://man.page/5/tmpfs\">tmpfs(5)</a>.</p>\n\n<p style=\"margin-left:22%;\"><i>nr_dirtied</i> (since Linux\n2.6.37) <i><br>\nnr_written</i> (since Linux 2.6.37) <i><br>\nnr_pages_scanned</i> (since Linux 3.17) <i><br>\nnuma_hit</i> (since Linux 2.6.18) <i><br>\nnuma_miss</i> (since Linux 2.6.18) <i><br>\nnuma_foreign</i> (since Linux 2.6.18) <i><br>\nnuma_interleave</i> (since Linux 2.6.18) <i><br>\nnuma_local</i> (since Linux 2.6.18) <i><br>\nnuma_other</i> (since Linux 2.6.18) <i><br>\nworkingset_refault</i> (since Linux 3.15) <i><br>\nworkingset_activate</i> (since Linux 3.15) <i><br>\nworkingset_nodereclaim</i> (since Linux 3.15) <i><br>\nnr_anon_transparent_hugepages</i> (since Linux 2.6.38)\n<i><br>\nnr_free_cma</i> (since Linux 3.7)</p>\n\n<p style=\"margin-left:32%;\">Number of free CMA (Contiguous\nMemory Allocator) pages.</p>\n\n<p style=\"margin-left:22%;\"><i>nr_dirty_threshold</i>\n(since Linux 2.6.37) <i><br>\nnr_dirty_background_threshold</i> (since Linux 2.6.37)\n<i><br>\npgpgin</i> (since Linux 2.6.0) <i><br>\npgpgout</i> (since Linux 2.6.0) <i><br>\npswpin</i> (since Linux 2.6.0) <i><br>\npswpout</i> (since Linux 2.6.0) <i><br>\npgalloc_dma</i> (since Linux 2.6.5) <i><br>\npgalloc_dma32</i> (since Linux 2.6.16) <i><br>\npgalloc_normal</i> (since Linux 2.6.5) <i><br>\npgalloc_high</i> (since Linux 2.6.5) <i><br>\npgalloc_movable</i> (since Linux 2.6.23) <i><br>\npgfree</i> (since Linux 2.6.0) <i><br>\npgactivate</i> (since Linux 2.6.0) <i><br>\npgdeactivate</i> (since Linux 2.6.0) <i><br>\npgfault</i> (since Linux 2.6.0) <i><br>\npgmajfault</i> (since Linux 2.6.0) <i><br>\npgrefill_dma</i> (since Linux 2.6.5) <i><br>\npgrefill_dma32</i> (since Linux 2.6.16) <i><br>\npgrefill_normal</i> (since Linux 2.6.5) <i><br>\npgrefill_high</i> (since Linux 2.6.5) <i><br>\npgrefill_movable</i> (since Linux 2.6.23) <i><br>\npgsteal_kswapd_dma</i> (since Linux 3.4) <i><br>\npgsteal_kswapd_dma32</i> (since Linux 3.4) <i><br>\npgsteal_kswapd_normal</i> (since Linux 3.4) <i><br>\npgsteal_kswapd_high</i> (since Linux 3.4) <i><br>\npgsteal_kswapd_movable</i> (since Linux 3.4) <i><br>\npgsteal_direct_dma <br>\npgsteal_direct_dma32</i> (since Linux 3.4) <i><br>\npgsteal_direct_normal</i> (since Linux 3.4) <i><br>\npgsteal_direct_high</i> (since Linux 3.4) <i><br>\npgsteal_direct_movable</i> (since Linux 2.6.23) <i><br>\npgscan_kswapd_dma <br>\npgscan_kswapd_dma32</i> (since Linux 2.6.16) <i><br>\npgscan_kswapd_normal</i> (since Linux 2.6.5) <i><br>\npgscan_kswapd_high <br>\npgscan_kswapd_movable</i> (since Linux 2.6.23) <i><br>\npgscan_direct_dma <br>\npgscan_direct_dma32</i> (since Linux 2.6.16) <i><br>\npgscan_direct_normal <br>\npgscan_direct_high <br>\npgscan_direct_movable</i> (since Linux 2.6.23) <i><br>\npgscan_direct_throttle</i> (since Linux 3.6) <i><br>\nzone_reclaim_failed</i> (since linux 2.6.31) <i><br>\npginodesteal</i> (since linux 2.6.0) <i><br>\nslabs_scanned</i> (since linux 2.6.5) <i><br>\nkswapd_inodesteal</i> (since linux 2.6.0) <i><br>\nkswapd_low_wmark_hit_quickly</i> (since 2.6.33) <i><br>\nkswapd_high_wmark_hit_quickly</i> (since 2.6.33) <i><br>\npageoutrun</i> (since Linux 2.6.0) <i><br>\nallocstall</i> (since Linux 2.6.0) <i><br>\npgrotated</i> (since Linux 2.6.0) <i><br>\ndrop_pagecache</i> (since Linux 3.15) <i><br>\ndrop_slab</i> (since Linux 3.15) <i><br>\nnuma_pte_updates</i> (since Linux 3.8) <i><br>\nnuma_huge_pte_updates</i> (since Linux 3.13) <i><br>\nnuma_hint_faults</i> (since Linux 3.8) <i><br>\nnuma_hint_faults_local</i> (since Linux 3.8) <i><br>\nnuma_pages_migrated</i> (since Linux 3.8) <i><br>\npgmigrate_success</i> (since Linux 3.8) <i><br>\npgmigrate_fail</i> (since Linux 3.8) <i><br>\ncompact_migrate_scanned</i> (since Linux 3.8) <i><br>\ncompact_free_scanned</i> (since Linux 3.8) <i><br>\ncompact_isolated</i> (since Linux 3.8) <i><br>\ncompact_stall</i> (since Linux 2.6.35)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>compact_fail</i> (since\nLinux 2.6.35)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>compact_success</i> (since\nLinux 2.6.35)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n\n<p style=\"margin-left:22%;\"><i>htlb_buddy_alloc_success</i>\n(since Linux 2.6.26) <i><br>\nhtlb_buddy_alloc_fail</i> (since Linux 2.6.26) <i><br>\nunevictable_pgs_culled</i> (since Linux 2.6.28) <i><br>\nunevictable_pgs_scanned</i> (since Linux 2.6.28) <i><br>\nunevictable_pgs_rescued</i> (since Linux 2.6.28) <i><br>\nunevictable_pgs_mlocked</i> (since Linux 2.6.28) <i><br>\nunevictable_pgs_munlocked</i> (since Linux 2.6.28) <i><br>\nunevictable_pgs_cleared</i> (since Linux 2.6.28) <i><br>\nunevictable_pgs_stranded</i> (since Linux 2.6.28) <i><br>\nthp_fault_alloc</i> (since Linux 2.6.39)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>thp_fault_fallback</i>\n(since Linux 2.6.39)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>thp_collapse_alloc</i>\n(since Linux 2.6.39)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n\n<p style=\"margin-left:22%;\"><i>thp_collapse_alloc_failed</i>\n(since Linux 2.6.39)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>thp_split</i> (since Linux\n2.6.39)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>thp_zero_page_alloc</i>\n(since Linux 3.8)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n\n<p style=\"margin-left:22%;\"><i>thp_zero_page_alloc_failed</i>\n(since Linux 3.8)</p>\n\n<p style=\"margin-left:32%;\">See the kernel source file\n<i>Documentation/admin-guide/mm/transhuge.rst</i>.</p>\n\n<p style=\"margin-left:22%;\"><i>balloon_inflate</i> (since\nLinux 3.18) <i><br>\nballoon_deflate</i> (since Linux 3.18) <i><br>\nballoon_migrate</i> (since Linux 3.18) <i><br>\nnr_tlb_remote_flush</i> (since Linux 3.12) <i><br>\nnr_tlb_remote_flush_received</i> (since Linux 3.12) <i><br>\nnr_tlb_local_flush_all</i> (since Linux 3.12) <i><br>\nnr_tlb_local_flush_one</i> (since Linux 3.12) <i><br>\nvmacache_find_calls</i> (since Linux 3.16) <i><br>\nvmacache_find_hits</i> (since Linux 3.16) <i><br>\nvmacache_full_flushes</i> (since Linux 3.19)</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/zoneinfo</i> (since\nLinux 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">This file displays information\nabout memory zones. This is useful for analyzing virtual\nmemory behavior.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many files\ncontain strings (e.g., the environment and command line)\nthat are in the internal format, with subfields terminated\nby null bytes ('\\0'). When inspecting such files, you may\nfind that the results are more readable if you use a command\nof the following form to display them:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat</b>\n<i>file</i> <b>| tr '\\000' '\\n'</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage is incomplete, possibly inaccurate, and is the kind of\nthing that needs to be updated very often.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/cat\">cat(1)</a>,\n<a href=\"https://man.page/1/dmesg\">dmesg(1)</a>, <a href=\"https://man.page/1/find\">find(1)</a>, <a href=\"https://man.page/1/free\">free(1)</a>,\n<a href=\"https://man.page/1/htop\">htop(1)</a>, <a href=\"https://man.page/1/init\">init(1)</a>, <a href=\"https://man.page/1/ps\">ps(1)</a>,\n<a href=\"https://man.page/1/pstree\">pstree(1)</a>, <a href=\"https://man.page/1/tr\">tr(1)</a>, <a href=\"https://man.page/1/uptime\">uptime(1)</a>,\n<a href=\"https://man.page/2/chroot\">chroot(2)</a>, <a href=\"https://man.page/2/mmap\">mmap(2)</a>, <a href=\"https://man.page/2/readlink\">readlink(2)</a>,\n<a href=\"https://man.page/2/syslog\">syslog(2)</a>, <a href=\"https://man.page/5/slabinfo\">slabinfo(5)</a>, <a href=\"https://man.page/5/sysfs\">sysfs(5)</a>,\n<a href=\"https://man.page/7/hier\">hier(7)</a>, <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>, <a href=\"https://man.page/7/time\">time(7)</a>,\n<b>arp</b>(8), <b>hdparm</b>(8), <b>ifconfig</b>(8),\n<b>lsmod</b>(8), <b>lspci</b>(8), <b>mount</b>(8),\n<b>netstat</b>(8), <b>procinfo</b>(8), <b>route</b>(8),\n<b>sysctl</b>(8)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Linux\nkernel source files:\n<i>Documentation/filesystems/proc.txt</i>,\n<i>Documentation/sysctl/fs.txt</i>,\n<i>Documentation/sysctl/kernel.txt</i>,\n<i>Documentation/sysctl/net.txt</i>, and\n<i>Documentation/sysctl/vm.txt</i>.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":5}