{"name":"user_caps","body":"\n\n<h1 align=\"center\">user_caps</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">user_caps -\nuser-defined terminfo capabilities</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tic -x,\ninfocmp -x</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Background</b>\n<br>\nBefore ncurses 5.0, terminfo databases used a <i>fixed\nrepertoire</i> of terminal capabilities designed for the\nSVr2 terminal database in 1984, and extended in stages\nthrough SVr4 (1989), and standardized in the Single Unix\nSpecification beginning in 1995.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most of the\n<i>extensions</i> in this fixed repertoire were additions to\nthe tables of boolean, numeric and string capabilities.\nRather than change the meaning of an existing capability, a\nnew name was added. The terminfo database uses a binary\nformat; binary compatibility was ensured by using a header\nwhich gave the number of items in the tables for each type\nof capability. The standardization was incomplete:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The <i>binary format</i> itself is not described in the\nX/Open Curses documentation. Only the <i>source format</i>\nis described.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Library\ndevelopers rely upon the SVr4 documentation, and\nreverse-engineering the compiled terminfo files to match the\nbinary format.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Lacking a standard for the\nbinary format, most implementations copy the SVr2 binary\nformat, which uses 16-bit signed integers, and is limited to\n4096-byte entries.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The format\ncannot represent very large numeric capabilities, nor can it\nrepresent large numbers of special keyboard definitions.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The tables of capability names\ndiffer between implementations.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Although they\n<i>may</i> provide all of the standard capability names, the\nposition in the tables differs because some features were\nadded as needed, while others were added (out of order) to\ncomply with X/Open Curses.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">While\nncurses&rsquo; repertoire of predefined capabilities is\nclosest to Solaris, Solaris&rsquo;s terminfo database has a\nfew differences from the list published by X/Open Curses.\nFor example, ncurses can be configured with tables which\nmatch the terminal databases for AIX, HP-UX or OSF/1, rather\nthan the default Solaris-like configuration.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">In SVr4 curses and ncurses, the\nterminal database is defined at compile-time using a text\nfile which lists the different terminal capabilities.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In principle,\nthe text-file can be extended, but doing this requires\nrecompiling and reinstalling the library. The text-file used\nin ncurses for terminal capabilities includes details for\nvarious systems past the documented X/Open Curses features.\nFor example, ncurses supports these capabilities in each\nconfiguration:</p>\n\n<p style=\"margin-left:23%;\">memory_lock</p>\n\n<p style=\"margin-left:31%;\">(meml) lock memory above\ncursor</p>\n\n<p style=\"margin-left:23%;\">memory_unlock</p>\n\n<p style=\"margin-left:31%;\">(memu) unlock memory</p>\n\n<p style=\"margin-left:23%;\">box_chars_1</p>\n\n<p style=\"margin-left:31%;\">(box1) box characters primary\nset</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The memory\nlock/unlock capabilities were included because they were\nused in the X11R6 terminal description for <b>xterm</b>. The\n<i>box1</i> capability is used in tic to help with terminal\ndescriptions written for AIX.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">During the\n1990s, some users were reluctant to use terminfo in spite of\nits performance advantages over termcap:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The fixed repertoire prevented users from adding\nfeatures for unanticipated terminal improvements (or\nrequired them to reuse existing capabilities as a\nworkaround).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The limitation to 16-bit signed integers was also\nmentioned. Because termcap stores everything as a string, it\ncould represent larger numbers.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Although\ntermcap&rsquo;s extensibility was rarely used (it was never\nthe <i>speaker</i> who had actually used the feature), the\ncriticism had a point. ncurses 5.0 provided a way to detect\nnonstandard capabilities, determine their type and\noptionally store and retrieve them in a way which did not\ninterfere with other applications. These are referred to as\n<i>user-defined capabilities</i> because no modifications to\nthe toolset&rsquo;s predefined capability names are\nneeded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The ncurses\nutilities <b>tic</b> and <b>infocmp</b> have a command-line\noption &ldquo;-x&rdquo; to control whether the nonstandard\ncapabilities are stored or retrieved. A library function\n<b>use_extended_names</b> is provided for the same\npurpose.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When compiling\na terminal database, if &ldquo;-x&rdquo; is set, <b>tic</b>\nwill store a user-defined capability if the capability name\nis not one of the predefined names.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because ncurses\nprovides a termcap library interface, these user-defined\ncapabilities may be visible to termcap applications:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The termcap interface (like all\nimplementations of termcap) requires that the capability\nnames are 2-characters.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When the\ncapability is simple enough for use in a termcap\napplication, it is provided as a 2-character name.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">There are other user-defined\ncapabilities which refer to features not usable in termcap,\ne.g., parameterized strings that use more than two\nparameters or use more than the trivial expression support\nprovided by termcap. For these, the terminfo database should\nhave only capability names with 3 or more characters.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Some terminals can send distinct strings for special\nkeys (cursor-, keypad- or function-keys) depending on\nmodifier keys (shift, control, etc.). While terminfo and\ntermcap have a set of 60 predefined function-key names, to\nwhich a series of keys can be assigned, that is insufficient\nfor more than a dozen keys multiplied by more than a couple\nof modifier combinations. The ncurses database uses a\nconvention based on <b>xterm</b> to provide extended\nspecial-key names.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Fitting that\ninto termcap&rsquo;s limitation of 2-character names would\nbe pointless. These extended keys are available only with\nterminfo.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Recognized\ncapabilities</b> <br>\nThe ncurses library uses the user-definable capabilities.\nWhile the terminfo database may have other extensions,\nncurses makes explicit checks for these:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">AX</p></td>\n<td width=\"2%\"></td>\n<td width=\"80%\">\n\n\n<p style=\"margin-top: 1em\"><i>boolean</i>, asserts that the\nterminal interprets SGR 39 and SGR 49 by resetting the\nforeground and background color, respectively, to the\ndefault.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:20%; margin-top: 1em\">This is a\nfeature recognized by the <b>screen</b> program as well.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">E3</p></td>\n<td width=\"2%\"></td>\n<td width=\"80%\">\n\n\n<p style=\"margin-top: 1em\"><i>string</i>, tells how to\nclear the terminal&rsquo;s scrollback buffer. When present,\nthe <a href=\"https://man.page/1/clear\">clear(1)</a> program sends this before clearing the\nterminal.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:20%; margin-top: 1em\">The command\n&ldquo;<b>tput clear</b>&rdquo; does the same thing.</p>\n\n<p style=\"margin-left:15%;\">RGB</p>\n\n<p style=\"margin-left:20%;\"><i>boolean</i>, <i>number</i>\n<b>or</b> <i>string</i>, to assert that the\n<b>set_a_foreground</b> and <b>set_a_background</b>\ncapabilities correspond to <i>direct colors</i>, using an\nRGB (red/green/blue) convention. This capability allows the\n<b>color_content</b> function to return appropriate values\nwithout requiring the application to initialize colors using\n<b>init_color</b>.</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">The capability\ntype determines the values which ncurses sees: <i><br>\nboolean</i></p>\n\n<p style=\"margin-left:25%;\">implies that the number of bits\nfor red, green and blue are the same. Using the maximum\nnumber of colors, ncurses adds two, divides that sum by\nthree, and assigns the result to red, green and blue in that\norder.</p>\n\n<p style=\"margin-left:25%; margin-top: 1em\">If the number\nof bits needed for the number of colors is not a multiple of\nthree, the blue (and green) components lose in comparison to\nred.</p>\n\n<p style=\"margin-left:20%;\"><i>number</i></p>\n\n<p style=\"margin-left:25%;\">tells ncurses what result to\nadd to red, green and blue. If ncurses runs out of bits,\nblue (and green) lose just as in the <i>boolean</i>\ncase.</p>\n\n<p style=\"margin-left:20%;\"><i>string</i></p>\n\n<p style=\"margin-left:25%;\">explicitly list the number of\nbits used for red, green and blue components as a\nslash-separated list of decimal integers.</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">Because there\nare several RGB encodings in use, applications which make\nassumptions about the number of bits per color are unlikely\nto work reliably. As a trivial case, for example, one could\ndefine <b>RGB#1</b> to represent the standard eight ANSI\ncolors, i.e., one bit per color.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"3%\">\n\n\n<p>U8</p></td>\n<td width=\"2%\"></td>\n<td width=\"80%\">\n\n\n<p><i>number</i>, asserts that ncurses must use Unicode\nvalues for line-drawing characters, and that it should\nignore the alternate character set capabilities when the\nlocale uses UTF-8 encoding. For more information, see the\ndiscussion of <b>NCURSES_NO_UTF8_ACS</b> in\n<b>ncurses</b>(3X).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:20%; margin-top: 1em\">Set this\ncapability to a nonzero value to enable it.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">XM</p></td>\n<td width=\"2%\"></td>\n<td width=\"80%\">\n\n\n<p style=\"margin-top: 1em\"><i>string</i>, override\nncurses&rsquo;s built-in string which enables/disables\n<b>xterm</b> mouse mode.</p></td></tr>\n</table>\n\n<p style=\"margin-left:20%; margin-top: 1em\">ncurses sends a\ncharacter sequence to the terminal to initialize mouse mode,\nand when the user clicks the mouse buttons or (in certain\nmodes) moves the mouse, handles the characters sent back by\nthe terminal to tell it what was done with the mouse.</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">The mouse\nprotocol is enabled when the <i>mask</i> passed in the\n<b>mousemask</b> function is nonzero. By default, ncurses\nhandles the responses for the X11 xterm mouse protocol. It\nalso knows about the <i>SGR 1006</i> xterm mouse protocol,\nbut must to be told to look for this specifically. It will\nnot be able to guess which mode is used, because the\nresponses are enough alike that only confusion would\nresult.</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">The <b>XM</b>\ncapability has a single parameter. If nonzero, the mouse\nprotocol should be enabled. If zero, the mouse protocol\nshould be disabled. ncurses inspects this capability if it\nis present, to see whether the 1006 protocol is used. If so,\nit expects the responses to use the <i>SGR 1006</i> xterm\nmouse protocol.</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">The xterm mouse\nprotocol is used by other terminal emulators. The terminal\ndatabase uses building-blocks for the various xterm mouse\nprotocols which can be used in customized terminal\ndescriptions.</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">The terminal\ndatabase building blocks for this mouse feature also have an\nexperimental capability <i>xm</i>. The &ldquo;xm&rdquo;\ncapability describes the mouse response. Currently there is\nno interpreter which would use this information to make the\nmouse support completely data-driven.</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\"><i>xm</i> shows\nthe format of the mouse responses. In this experimental\ncapability, the parameters are</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><i>p1</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p style=\"margin-top: 1em\">y-ordinate</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"3%\">\n\n\n<p><i>p2</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>x-ordinate</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"3%\">\n\n\n<p><i>p3</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>button</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"3%\">\n\n\n<p><i>p4</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>state, e.g., pressed or released</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"3%\">\n\n\n<p><i>p5</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>y-ordinate starting region</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"3%\">\n\n\n<p><i>p6</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>x-ordinate starting region</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"3%\">\n\n\n<p><i>p7</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>y-ordinate ending region</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"3%\">\n\n\n<p><i>p8</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p>x-ordinate ending region</p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:20%; margin-top: 1em\">Here are\nexamples from the terminal database for the most commonly\nused xterm mouse protocols:</p>\n\n\n<p style=\"margin-left:20%; margin-top: 1em\">xterm+x11mouse|X11\nxterm mouse protocol, <br>\nkmous=\\E[M, XM=\\E[?1000%?%p1%{1}%=%th%el%;, <br>\nxm=\\E[M <br>\n%?%p4%t%p3%e%{3}%;%&rsquo;&nbsp;&rsquo;%+%c <br>\n%p2%&rsquo;!&rsquo;%+%c <br>\n%p1%&rsquo;!&rsquo;%+%c,</p>\n\n\n<p style=\"margin-left:20%; margin-top: 1em\">xterm+sm+1006|xterm\nSGR-mouse, <br>\nkmous=\\E[&lt;, XM=\\E[?1006;1000%?%p1%{1}%=%th%el%;, <br>\nxm=\\E[&lt;%i%p3%d; <br>\n%p1%d; <br>\n%p2%d; <br>\n%?%p4%tM%em%;,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Extended\nkey-definitions</b> <br>\nSeveral terminals provide the ability to send distinct\nstrings for combinations of modified special keys. There is\nno standard for what those keys can send.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since 1999,\n<b>xterm</b> has supported <i>shift</i>, <i>control</i>,\n<i>alt</i>, and <i>meta</i> modifiers which produce distinct\nspecial-key strings. In a terminal description, ncurses has\nno special knowledge of the modifiers used. Applications can\nuse the <i>naming convention</i> established for\n<b>xterm</b> to find these special keys in the terminal\ndescription.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Starting with\nthe curses convention that <i>key names</i> begin with\n&ldquo;k&rdquo; and that shifted special keys are an\nuppercase name, ncurses&rsquo; terminal database defines\nthese names to which a suffix is added:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3489111.png\" alt=\"Image grohtml-3489111.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These are the\nsuffixes used to denote the modifiers:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3489112.png\" alt=\"Image grohtml-3489112.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">None of these\nare predefined; terminal descriptions can refer to\n<i>names</i> which ncurses will allocate at runtime to\n<i>key-codes</i>. To use these keys in an ncurses program,\nan application could do this:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">using a list of extended key\n<i>names</i>, ask <b>tigetstr</b>(3X) for their values,\nand</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>given the list of values, ask <b>key_defined</b>(3X) for\nthe <i>key-code</i> which would be returned for those keys\nby <b>wgetch</b>(3X).</p></td></tr>\n</table>\n\n<h2>PORTABILITY\n<a name=\"PORTABILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&ldquo;-x&rdquo; extension feature of <b>tic</b> and\n<b>infocmp</b> has been adopted in NetBSD curses. That\nimplementation stores user-defined capabilities, but makes\nno use of these capabilities itself.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/infocmp\">infocmp(1)</a>,\n<a href=\"https://man.page/1/tic\">tic(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The terminal\ndatabase section <i>NCURSES USER-DEFINABLE CAPABILITIES</i>\nsummarizes commonly-used user-defined capabilities which are\nused in the terminal descriptions. Some of those features\nare mentioned in <a href=\"https://man.page/1/screen\">screen(1)</a> or <a href=\"https://man.page/1/tmux\">tmux(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>XTerm\nControl Sequences</i> provides further information on the\n<b>xterm</b> features which are used in these extended\ncapabilities.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thomas E.\nDickey <br>\nbeginning with ncurses 5.0 (1999)</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#PORTABILITY\">PORTABILITY</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>"],"level":5}