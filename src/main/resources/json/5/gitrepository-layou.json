{"name":"gitrepository-layou","body":"\n\n<h1 align=\"center\">GITREPOSITORY-LAYOU</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitrepository-layout\n- Git Repository Layout</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$GIT_DIR/*</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A Git\nrepository comes in two different flavours:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; a\n<b>.git</b> directory at the root of the working tree;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; a\n<b>&lt;project&gt;.git</b> directory that is a <i>bare</i>\nrepository (i.e. without its own working tree), that is\ntypically used for exchanging histories with others by\npushing into it and fetching from it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Note</b>:\nAlso you can have a plain text file <b>.git</b> at the root\nof your working tree, containing <b>gitdir: &lt;path&gt;</b>\nto point at the real directory that has the repository. This\nmechanism is often used for a working tree of a submodule\ncheckout, to allow you in the containing superproject to\n<b>git checkout</b> a branch that does not have the\nsubmodule. The <b>checkout</b> has to remove the entire\nsubmodule working tree, without losing the submodule\nrepository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These things\nmay exist in a Git repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">objects</p>\n\n<p style=\"margin-left:17%;\">Object store associated with\nthis repository. Usually an object store is self sufficient\n(i.e. all the objects that are referred to by an object\nfound in it are also found in it), but there are a few ways\nto violate it.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">1. You could\nhave an incomplete but locally usable repository by creating\na shallow clone. See <a href=\"https://man.page/1/git-clone\">git-clone(1)</a>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">2. You could be\nusing the <b>objects/info/alternates</b> or\n<b>$GIT_ALTERNATE_OBJECT_DIRECTORIES</b> mechanisms to\n<i>borrow</i> objects from other object stores. A repository\nwith this kind of incomplete object store is not suitable to\nbe published for use with dumb transports but otherwise is\nOK as long as <b>objects/info/alternates</b> points at the\nobject stores it borrows from.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This directory\nis ignored if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/objects&quot; will be used\ninstead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">objects/[0-9a-f][0-9a-f]</p>\n\n<p style=\"margin-left:17%;\">A newly created object is\nstored in its own file. The objects are splayed over 256\nsubdirectories using the first two characters of the sha1\nobject name to keep the number of directory entries in\n<b>objects</b> itself to a manageable number. Objects found\nhere are often called <i>unpacked</i> (or <i>loose</i>)\nobjects.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">objects/pack</p>\n\n<p style=\"margin-left:17%;\">Packs (files that store many\nobjects in compressed form, along with index files to allow\nthem to be randomly accessed) are found in this\ndirectory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">objects/info</p>\n\n<p style=\"margin-left:17%;\">Additional information about\nthe object store is recorded in this directory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">objects/info/packs</p>\n\n<p style=\"margin-left:17%;\">This file is to help dumb\ntransports discover what packs are available in this object\nstore. Whenever a pack is added or removed, <b>git\nupdate-server-info</b> should be run to keep this file up to\ndate if the repository is published for dumb transports.\n<i>git repack</i> does this by default.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">objects/info/alternates</p>\n\n<p style=\"margin-left:17%;\">This file records paths to\nalternate object stores that this object store borrows\nobjects from, one pathname per line. Note that not only\nnative Git tools use it locally, but the HTTP fetcher also\ntries to use it remotely; this will usually work if you have\nrelative paths (relative to the object database, not to the\nrepository!) in your alternates file, but it will not work\nif you use absolute paths unless the absolute path in\nfilesystem and web URL is the same. See also\n<b>objects/info/http-alternates</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">objects/info/http-alternates</p>\n\n<p style=\"margin-left:17%;\">This file records URLs to\nalternate object stores that this object store borrows\nobjects from, to be used when the repository is fetched over\nHTTP.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">refs</p>\n\n<p style=\"margin-left:17%;\">References are stored in\nsubdirectories of this directory. The <i>git prune</i>\ncommand knows to preserve objects reachable from refs found\nin this directory and its subdirectories. This directory is\nignored (except refs/bisect, refs/rewritten and\nrefs/worktree) if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/refs&quot; will be used instead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">refs/heads/<b>name</b></p>\n\n<p style=\"margin-left:17%;\">records tip-of-the-tree commit\nobjects of branch <b>name</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">refs/tags/<b>name</b></p>\n\n<p style=\"margin-left:17%;\">records any object name (not\nnecessarily a commit object, or a tag object that points at\na commit object).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">refs/remotes/<b>name</b></p>\n\n<p style=\"margin-left:17%;\">records tip-of-the-tree commit\nobjects of branches copied from a remote repository.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">refs/replace/<b>&lt;obj-sha1&gt;</b></p>\n\n<p style=\"margin-left:17%;\">records the SHA-1 of the object\nthat replaces <b>&lt;obj-sha1&gt;</b>. This is similar to\ninfo/grafts and is internally used and maintained by\n<a href=\"https://man.page/1/git-replace\">git-replace(1)</a>. Such refs can be exchanged between\nrepositories while grafts are not.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">packed-refs</p>\n\n<p style=\"margin-left:17%;\">records the same information as\nrefs/heads/, refs/tags/, and friends record in a more\nefficient way. See <a href=\"https://man.page/1/git-pack-refs\">git-pack-refs(1)</a>. This file is\nignored if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/packed-refs&quot; will be used\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">HEAD</p>\n\n<p style=\"margin-left:17%;\">A symref (see glossary) to the\n<b>refs/heads/</b> namespace describing the currently active\nbranch. It does not mean much if the repository is not\nassociated with any working tree (i.e. a <i>bare</i>\nrepository), but a valid Git repository <b>must</b> have the\nHEAD file; some porcelains may use it to guess the\ndesignated &quot;default&quot; branch of the repository\n(usually <i>master</i>). It is legal if the named branch\n<i>name</i> does not (yet) exist. In some legacy setups, it\nis a symbolic link instead of a symref that points at the\ncurrent branch.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">HEAD can also\nrecord a specific commit directly, instead of being a symref\nto point at the current branch. Such a state is often called\n<i>detached HEAD.</i> See <a href=\"https://man.page/1/git-checkout\">git-checkout(1)</a> for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">config</p>\n\n<p style=\"margin-left:17%;\">Repository specific\nconfiguration file. This file is ignored if $GIT_COMMON_DIR\nis set and &quot;$GIT_COMMON_DIR/config&quot; will be used\ninstead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">config.worktree</p>\n\n<p style=\"margin-left:17%;\">Working directory specific\nconfiguration file for the main working directory in\nmultiple working directory setup (see\n<a href=\"https://man.page/1/git-worktree\">git-worktree(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">branches</p>\n\n<p style=\"margin-left:17%;\">A slightly deprecated way to\nstore shorthands to be used to specify a URL to <i>git\nfetch</i>, <i>git pull</i> and <i>git push</i>. A file can\nbe stored as <b>branches/&lt;name&gt;</b> and then\n<i>name</i> can be given to these commands in place of\n<i>repository</i> argument. See the REMOTES section in\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a> for details. This mechanism is legacy\nand not likely to be found in modern repositories. This\ndirectory is ignored if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/branches&quot; will be used\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">hooks</p>\n\n<p style=\"margin-left:17%;\">Hooks are customization scripts\nused by various Git commands. A handful of sample hooks are\ninstalled when <i>git init</i> is run, but all of them are\ndisabled by default. To enable, the <b>.sample</b> suffix\nhas to be removed from the filename by renaming. Read\n<a href=\"https://man.page/5/githooks\">githooks(5)</a> for more details about each hook. This\ndirectory is ignored if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/hooks&quot; will be used instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">common</p>\n\n<p style=\"margin-left:17%;\">When multiple working trees are\nused, most of files in $GIT_DIR are per-worktree with a few\nknown exceptions. All files under <i>common</i> however will\nbe shared between all working trees.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">index</p>\n\n<p style=\"margin-left:17%;\">The current index file for the\nrepository. It is usually not found in a bare\nrepository.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sharedindex.&lt;SHA-1&gt;</p>\n\n<p style=\"margin-left:17%;\">The shared index part, to be\nreferenced by $GIT_DIR/index and other temporary index\nfiles. Only valid in split index mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">info</p>\n\n<p style=\"margin-left:17%;\">Additional information about\nthe repository is recorded in this directory. This directory\nis ignored if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/info&quot; will be used instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">info/refs</p>\n\n<p style=\"margin-left:17%;\">This file helps dumb transports\ndiscover what refs are available in this repository. If the\nrepository is published for dumb transports, this file\nshould be regenerated by <i>git update-server-info</i> every\ntime a tag or branch is created or modified. This is\nnormally done from the <b>hooks/update</b> hook, which is\nrun by the <i>git-receive-pack</i> command when you <i>git\npush</i> into the repository.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">info/grafts</p>\n\n<p style=\"margin-left:17%;\">This file records fake commit\nancestry information, to pretend the set of parents a commit\nhas is different from how the commit was actually created.\nOne record per line describes a commit and its fake parents\nby listing their 40-byte hexadecimal object names separated\nby a space and terminated by a newline.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\ngrafts mechanism is outdated and can lead to problems\ntransferring objects between repositories; see\n<a href=\"https://man.page/1/git-replace\">git-replace(1)</a> for a more flexible and robust system\nto do the same thing.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">info/exclude</p>\n\n<p style=\"margin-left:17%;\">This file, by convention among\nPorcelains, stores the exclude pattern list.\n<b>.gitignore</b> is the per-directory ignore file. <i>git\nstatus</i>, <i>git add</i>, <i>git rm</i> and <i>git\nclean</i> look at it but the core Git commands do not look\nat it. See also: <a href=\"https://man.page/5/gitignore\">gitignore(5)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">info/attributes</p>\n\n<p style=\"margin-left:17%;\">Defines which attributes to\nassign to a path, similar to per-directory\n<b>.gitattributes</b> files. See also:\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">info/sparse-checkout</p>\n\n<p style=\"margin-left:17%;\">This file stores sparse\ncheckout patterns. See also: <a href=\"https://man.page/1/git-read-tree\">git-read-tree(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">remotes</p>\n\n<p style=\"margin-left:17%;\">Stores shorthands for URL and\ndefault refnames for use when interacting with remote\nrepositories via <i>git fetch</i>, <i>git pull</i> and\n<i>git push</i> commands. See the REMOTES section in\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a> for details. This mechanism is legacy\nand not likely to be found in modern repositories. This\ndirectory is ignored if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/remotes&quot; will be used\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">logs</p>\n\n<p style=\"margin-left:17%;\">Records of changes made to refs\nare stored in this directory. See <a href=\"https://man.page/1/git-update-ref\">git-update-ref(1)</a>\nfor more information. This directory is ignored (except\nlogs/HEAD) if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/logs&quot; will be used instead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">logs/refs/heads/<b>name</b></p>\n\n<p style=\"margin-left:17%;\">Records all changes made to the\nbranch tip named <b>name</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">logs/refs/tags/<b>name</b></p>\n\n<p style=\"margin-left:17%;\">Records all changes made to the\ntag named <b>name</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">shallow</p>\n\n<p style=\"margin-left:17%;\">This is similar to\n<b>info/grafts</b> but is internally used and maintained by\nshallow clone mechanism. See <b>--depth</b> option to\n<a href=\"https://man.page/1/git-clone\">git-clone(1)</a> and <a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>. This file is\nignored if $GIT_COMMON_DIR is set and\n&quot;$GIT_COMMON_DIR/shallow&quot; will be used\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">commondir</p>\n\n<p style=\"margin-left:17%;\">If this file exists,\n$GIT_COMMON_DIR (see <a href=\"https://man.page/1/git\">git(1)</a>) will be set to the path\nspecified in this file if it is not explicitly set. If the\nspecified path is relative, it is relative to $GIT_DIR. The\nrepository with commondir is incomplete without the\nrepository pointed by &quot;commondir&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">modules</p>\n\n<p style=\"margin-left:17%;\">Contains the git-repositories\nof the submodules.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">worktrees</p>\n\n<p style=\"margin-left:17%;\">Contains administrative data\nfor linked working trees. Each subdirectory contains the\nworking tree-related part of a linked working tree. This\ndirectory is ignored if $GIT_COMMON_DIR is set, in which\ncase &quot;$GIT_COMMON_DIR/worktrees&quot; will be used\ninstead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">worktrees/&lt;id&gt;/gitdir</p>\n\n<p style=\"margin-left:17%;\">A text file containing the\nabsolute path back to the .git file that points to here.\nThis is used to check if the linked repository has been\nmanually removed and there is no need to keep this directory\nany more. The mtime of this file should be updated every\ntime the linked repository is accessed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">worktrees/&lt;id&gt;/locked</p>\n\n<p style=\"margin-left:17%;\">If this file exists, the linked\nworking tree may be on a portable device and not available.\nThe presence of this file prevents\n<b>worktrees/&lt;id&gt;</b> from being pruned either\nautomatically or manually by <b>git worktree prune</b>. The\nfile may contain a string explaining why the repository is\nlocked.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">worktrees/&lt;id&gt;/config.worktree</p>\n\n<p style=\"margin-left:17%;\">Working directory specific\nconfiguration file.</p>\n\n<h2>GIT REPOSITORY FORMAT VERSIONS\n<a name=\"GIT REPOSITORY FORMAT VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Every git\nrepository is marked with a numeric version in the\n<b>core.repositoryformatversion</b> key of its <b>config</b>\nfile. This version specifies the rules for operating on the\non-disk repository data. An implementation of git which does\nnot understand a particular version advertised by an on-disk\nrepository MUST NOT operate on that repository; doing so\nrisks not only producing wrong results, but actually losing\ndata.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because of this\nrule, version bumps should be kept to an absolute minimum.\nInstead, we generally prefer these strategies:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; bumping\nformat version numbers of individual data files (e.g.,\nindex, packfiles, etc). This restricts the incompatibilities\nonly to those files.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nintroducing new data that gracefully degrades when used by\nolder clients (e.g., pack bitmap files are ignored by older\nclients, which simply do not take advantage of the\noptimization they provide).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\nwhole-repository format version bump should only be part of\na change that cannot be independently versioned. For\ninstance, if one were to change the reachability rules for\nobjects, or the rules for locking refs, that would require a\nbump of the repository format version.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that this\napplies only to accessing the repository&rsquo;s disk\ncontents directly. An older client which understands only\nformat <b>0</b> may still connect via <b>git://</b> to a\nrepository using format <b>1</b>, as long as the server\nprocess understands format <b>1</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The preferred\nstrategy for rolling out a version bump (whether whole\nrepository or for a single file) is to teach git to read the\nnew format, and allow writing the new format with a config\nswitch or command line option (for experimentation or for\nthose who do not care about backwards compatibility with\nolder gits). Then after a long period to allow the reading\ncapability to become common, we may switch to writing the\nnew format by default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The currently\ndefined format versions are:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version\n0</b> <br>\nThis is the format defined by the initial version of git,\nincluding but not limited to the format of the repository\ndirectory, the repository configuration file, and the object\nand ref storage. Specifying the complete behavior of git is\nbeyond the scope of this document.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version\n1</b> <br>\nThis format is identical to version <b>0</b>, with the\nfollowing exceptions:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. When reading\nthe <b>core.repositoryformatversion</b> variable, a git\nimplementation which supports version 1 MUST also read any\nconfiguration keys found in the <b>extensions</b> section of\nthe configuration file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. If a\nversion-1 repository specifies any <b>extensions.*</b> keys\nthat the running git has not implemented, the operation MUST\nNOT proceed. Similarly, if the value of any known key is not\nunderstood by the implementation, the operation MUST NOT\nproceed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that if no\nextensions are specified in the config file, then\n<b>core.repositoryformatversion</b> SHOULD be set to\n<b>0</b> (setting it to <b>1</b> provides no benefit, and\nmakes the repository incompatible with older implementations\nof git).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This document\nwill serve as the master list for extensions. Any\nimplementation wishing to define a new extension should make\na note of it here, in order to claim the name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The defined\nextensions are:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>noop</big></b></p>\n\n<p style=\"margin-left:17%;\">This extension does not change\ngit&rsquo;s behavior at all. It is useful only for testing\nformat-1 compatibility.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>preciousObjects</big></b></p>\n\n<p style=\"margin-left:17%;\">When the config key\n<b>extensions.preciousObjects</b> is set to <b>true</b>,\nobjects in the repository MUST NOT be deleted (e.g., by\n<b>git-prune</b> or <b>git repack -d</b>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>partialclone</big></b></p>\n\n<p style=\"margin-left:17%;\">When the config key\n<b>extensions.partialclone</b> is set, it indicates that the\nrepo was created with a partial clone (or later performed a\npartial fetch) and that the remote may have omitted sending\ncertain unwanted objects. Such a remote is called a\n&quot;promisor remote&quot; and it promises that all such\nomitted objects can be fetched from it in the future.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The value of\nthis key is the name of the promisor remote.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>worktreeConfig</big></b></p>\n\n<p style=\"margin-left:17%;\">If set, by default &quot;git\nconfig&quot; reads from both &quot;config&quot; and\n&quot;config.worktree&quot; file from GIT_DIR in that order.\nIn multiple working directory mode, &quot;config&quot; file\nis shared while &quot;config.worktree&quot; is per-working\ndirectory (i.e., it&rsquo;s in\nGIT_COMMON_DIR/worktrees/&lt;id&gt;/config.worktree)</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-init\">git-init(1)</a>,\n<a href=\"https://man.page/1/git-clone\">git-clone(1)</a>, <a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>,\n<a href=\"https://man.page/1/git-pack-refs\">git-pack-refs(1)</a>, <a href=\"https://man.page/1/git-gc\">git-gc(1)</a>,\n<a href=\"https://man.page/1/git-checkout\">git-checkout(1)</a>, <a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>,\n<b><font color=\"#0000FF\">The Git User&rsquo;s\nManual</font></b>\n<small><font color=\"#000000\">[1]</font></small></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">The Git\nUser&rsquo;s Manual</font></p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/user-manual.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#GIT REPOSITORY FORMAT VERSIONS\">GIT REPOSITORY FORMAT VERSIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"],"level":5}