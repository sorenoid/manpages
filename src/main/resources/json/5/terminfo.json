{"name":"terminfo","description":"terminfo -\nterminal capability database","body":"\n\n<h1 align=\"center\">terminfo</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">terminfo -\nterminal capability database</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/terminfo/*/*</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Terminfo</i>\nis a database describing terminals, used by screen-oriented\nprograms such as <a href=\"https://man.page/1/nvi\">nvi(1)</a>, <a href=\"https://man.page/1/lynx\">lynx(1)</a>,\n<a href=\"https://man.page/1/mutt\">mutt(1)</a>, and other curses applications, using\nhigh-level calls to libraries such as\n<b>ncurses</b>(3NCURSES). It is also used via low-level\ncalls by non-curses applications which may be\nscreen-oriented (such as <a href=\"https://man.page/1/clear\">clear(1)</a>) or non-screen\n(such as <a href=\"https://man.page/1/tabs\">tabs(1)</a>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Terminfo</i>\ndescribes terminals by giving a set of capabilities which\nthey have, by specifying how to perform screen operations,\nand by specifying padding requirements and initialization\nsequences.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\ndescribes <b>ncurses</b> version 6.3 (patch 20211021).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Terminfo\nEntry Syntax</b> <br>\nEntries in <i>terminfo</i> consist of a sequence of\nfields:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Each field ends with a comma &ldquo;,&rdquo; (embedded\ncommas may be escaped with a backslash or written as\n&ldquo;\\054&rdquo;).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>White space between fields is ignored.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The first field in a <i>terminfo</i> entry begins in the\nfirst column.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Newlines and leading whitespace (spaces or tabs) may be\nused for formatting entries for readability. These are\nremoved from parsed entries.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The <b>infocmp\n-f</b> and <b>-W</b> options rely on this to format\nif-then-else expressions, or to enforce maximum line-width.\nThe resulting formatted terminal description can be read by\n<b>tic</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The first field for each\nterminal gives the names which are known for the terminal,\nseparated by &ldquo;|&rdquo; characters.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The first name\ngiven is the most common abbreviation for the terminal (its\nprimary name), the last name given should be a long name\nfully identifying the terminal (see <b>longname</b>(3X)),\nand all others are treated as synonyms (aliases) for the\nprimary terminal name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">X/Open Curses\nadvises that all names but the last should be in lower case\nand contain no blanks; the last name may well contain upper\ncase and blanks for readability.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This\nimplementation is not so strict; it allows mixed case in the\nprimary name and aliases. If the last name has no embedded\nblanks, it allows that to be both an alias and a verbose\nname (but will warn about this ambiguity).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Lines beginning with a\n&ldquo;#&rdquo; in the first column are treated as\ncomments.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">While comment\nlines are legal at any point, the output of <b>captoinfo</b>\nand <b>infotocap</b> (aliases for <b>tic</b>) will move\ncomments so they occur only between entries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Terminal names\n(except for the last, verbose entry) should be chosen using\nthe following conventions. The particular piece of hardware\nmaking up the terminal should have a root name, thus\n&ldquo;hp2621&rdquo;. This name should not contain hyphens.\nModes that the hardware can be in, or user preferences,\nshould be indicated by appending a hyphen and a mode suffix.\nThus, a vt100 in 132-column mode would be vt100-w. The\nfollowing suffixes should be used where possible:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468751.png\" alt=\"Image grohtml-3468751.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For more on\nterminal naming conventions, see the <a href=\"https://man.page/7/term\">term(7)</a> manual\npage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Terminfo\nCapabilities Syntax</b> <br>\nThe terminfo entry consists of several <i>capabilities</i>,\ni.e., features that the terminal has, or methods for\nexercising the terminal&rsquo;s features.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After the first\nfield (giving the name(s) of the terminal entry), there\nshould be one or more <i>capability</i> fields. These are\nboolean, numeric or string names with corresponding\nvalues:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Boolean capabilities are true\nwhen present, false when absent. There is no explicit value\nfor boolean capabilities.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Numeric capabilities have a &ldquo;#&rdquo; following\nthe name, then an unsigned decimal integer value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>String capabilities have a &ldquo;=&rdquo; following the\nname, then an string of characters making up the capability\nvalue.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">String\ncapabilities can be split into multiple lines, just as the\nfields comprising a terminal entry can be split into\nmultiple lines. While blanks between fields are ignored,\nblanks embedded within a string value are retained, except\nfor leading blanks on a line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any capability\ncan be <i>canceled</i>, i.e., suppressed from the terminal\nentry, by following its name with &ldquo;@&rdquo; rather\nthan a capability value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Similar\nTerminals</b> <br>\nIf there are two very similar terminals, one (the variant)\ncan be defined as being just like the other (the base) with\ncertain exceptions. In the definition of the variant, the\nstring capability <b>use</b> can be given with the name of\nthe base terminal:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The capabilities given before\n<b>use</b> override those in the base type named by\n<b>use</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>If there are multiple <b>use</b> capabilities, they are\nmerged in reverse order. That is, the rightmost <b>use</b>\nreference is processed first, then the one to its left, and\nso forth.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Capabilities given explicitly in the entry override\nthose brought in by <b>use</b> references.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A capability\ncan be canceled by placing <b>xx@</b> to the left of the use\nreference that imports it, where <i>xx</i> is the\ncapability. For example, the entry</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">2621-nl, smkx@,\nrmkx@, use=2621,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">defines a\n2621-nl that does not have the <b>smkx</b> or <b>rmkx</b>\ncapabilities, and hence does not turn on the function key\nlabels when in visual mode. This is useful for different\nmodes for a terminal, or for different user preferences.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An entry\nincluded via <b>use</b> can contain canceled capabilities,\nwhich have the same effect as if those cancels were inline\nin the using terminal entry.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Predefined\nCapabilities</b> <small><br>\nThe following is a complete table of the capabilities\nincluded in a terminfo description block and available to\nterminfo-using code. In each line of the table,</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>The\n<b>variable</b> is the name by which the programmer (at the\nterminfo level) accesses the capability.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>The\n<b>capname</b> is the short name used in the text of the\ndatabase, and is used by a person updating the database.\nWhenever possible, capnames are chosen to be the same as or\nsimilar to the ANSI X3.64-1979 standard (now superseded by\nECMA-48, which uses identical or very similar names).\nSemantics are also intended to match those of the\nspecification.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>The\ntermcap code is the old <b>termcap</b></small> capability\nname (some capabilities are new, and have names which\ntermcap did not originate).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Capability\nnames have no hard length limit, but an informal limit of 5\ncharacters has been adopted to keep them short and to allow\nthe tabs in the source file <b>Caps</b> to line up\nnicely.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Finally, the\ndescription field attempts to convey the semantics of the\ncapability. You may find some codes in the description\nfield:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\">(P)</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">indicates that padding may be\nspecified</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>#[1-9]</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>in the description field indicates that the string is\npassed through <b>tparm</b>(3X) with parameters as given\n(#<i>i</i>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If no\nparameters are listed in the description, passing the string\nthrough <b>tparm</b>(3X) may give unexpected results, e.g.,\nif it contains percent (%%) signs.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">(P*)</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">indicates that padding may vary\nin proportion to the number of lines affected</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p>(#<i>i</i>)</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>indicates the <i>i</i>th parameter.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These are the\nboolean capabilities:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468752.png\" alt=\"Image grohtml-3468752.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These are the\nnumeric capabilities:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468753.png\" alt=\"Image grohtml-3468753.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nnumeric capabilities are present in the SVr4.0 term\nstructure, but are not yet documented in the man page. They\ncame in with SVr4&rsquo;s printer support.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468754.png\" alt=\"Image grohtml-3468754.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These are the\nstring capabilities:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468755.png\" alt=\"Image grohtml-3468755.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nstring capabilities are present in the SVr4.0 term\nstructure, but were originally not documented in the man\npage.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468756.png\" alt=\"Image grohtml-3468756.png\"></p>\n\n<p style=\"margin-left:12%; margin-top: 1em\">The XSI Curses\nstandard added these hardcopy capabilities. They were used\nin some post-4.1 versions of System V curses, e.g., Solaris\n2.5 and IRIX 6.x. Except for <b>YI</b>, the <b>ncurses</b>\ntermcap names for them are invented. According to the XSI\nCurses standard, they have no termcap names. If your\ncompiled terminfo entries use these, they may not be\nbinary-compatible with System V terminfo entries after\nSVr4.1; beware!</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468757.png\" alt=\"Image grohtml-3468757.png\"></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>User-Defined\nCapabilities</b> <br>\nThe preceding section listed the <i>predefined</i>\ncapabilities. They deal with some special features for\nterminals no longer (or possibly never) produced.\nOccasionally there are special features of newer terminals\nwhich are awkward or impossible to represent by reusing the\npredefined capabilities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ncurses</b>\naddresses this limitation by allowing user-defined\ncapabilities. The <b>tic</b> and <b>infocmp</b> programs\nprovide the <b>-x</b> option for this purpose. When\n<b>-x</b> is set, <b>tic</b> treats unknown capabilities as\nuser-defined. That is, if <b>tic</b> encounters a capability\nname which it does not recognize, it infers its type\n(boolean, number or string) from the syntax and makes an\nextended table entry for that capability. The\n<b>use_extended_names</b>(3X) function makes this\ninformation conditionally available to applications. The\nncurses library provides the data leaving most of the\nbehavior to applications:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">User-defined capability strings\nwhose name begins with &ldquo;k&rdquo; are treated as\nfunction keys.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The types (boolean, number, string) determined by\n<b>tic</b> can be inferred by successful calls on\n<b>tigetflag</b>, etc.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>If the capability name happens to be two characters, the\ncapability is also available through the termcap\ninterface.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While termcap\nis said to be extensible because it does not use a\npredefined set of capabilities, in practice it has been\nlimited to the capabilities defined by terminfo\nimplementations. As a rule, user-defined capabilities\nintended for use by termcap applications should be limited\nto booleans and numbers to avoid running past the 1023 byte\nlimit assumed by termcap implementations and their\napplications. In particular, providing extended sets of\nfunction keys (past the 60 numbered keys and the handful of\nspecial named keys) is best done using the longer names\navailable using terminfo.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>A Sample\nEntry</b> <br>\nThe following entry, describing an ANSI-standard terminal,\nis representative of what a <b>terminfo</b> entry for a\nmodern terminal typically looks like.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>ansi|ansi/pc-term\ncompatible with color, <br>\nam, mc5i, mir, msgr, <br>\ncolors#8, cols#80, it#8, lines#24, ncv#3, pairs#64, <br>\n\nacsc=+\\020\\,\\021-\\030.^Y0\\333&rsquo;\\004a\\261f\\370g\\361h\\260\n<br>\nj\\331k\\277l\\332m\\300n\\305o~p\\304q\\304r\\304s_t\\303 <br>\nu\\264v\\301w\\302x\\263y\\363z\\362{\\343|\\330}\\234~\\376, <br>\nbel=^G, blink=\\E[5m, bold=\\E[1m, cbt=\\E[Z, clear=\\E[H\\E[J,\n<br>\ncr=^M, cub=\\E[%p1%dD, cub1=\\E[D, cud=\\E[%p1%dB, cud1=\\E[B,\n<br>\ncuf=\\E[%p1%dC, cuf1=\\E[C, cup=\\E[%i%p1%d;%p2%dH, <br>\ncuu=\\E[%p1%dA, cuu1=\\E[A, dch=\\E[%p1%dP, dch1=\\E[P, <br>\ndl=\\E[%p1%dM, dl1=\\E[M, ech=\\E[%p1%dX, ed=\\E[J, el=\\E[K,\n<br>\nel1=\\E[1K, home=\\E[H, hpa=\\E[%i%p1%dG, ht=\\E[I, hts=\\EH,\n<br>\nich=\\E[%p1%d@, il=\\E[%p1%dL, il1=\\E[L, ind=^J, <br>\nindn=\\E[%p1%dS, invis=\\E[8m, kbs=^H, kcbt=\\E[Z, kcub1=\\E[D,\n<br>\nkcud1=\\E[B, kcuf1=\\E[C, kcuu1=\\E[A, khome=\\E[H, kich1=\\E[L,\n<br>\nmc4=\\E[4i, mc5=\\E[5i, nel=\\r\\E[S, op=\\E[39;49m, <br>\nrep=%p1%c\\E[%p2%{1}%-%db, rev=\\E[7m, rin=\\E[%p1%dT, <br>\nrmacs=\\E[10m, rmpch=\\E[10m, rmso=\\E[m, rmul=\\E[m, <br>\ns0ds=\\E(B, s1ds=\\E)B, s2ds=\\E*B, s3ds=\\E+B, <br>\nsetab=\\E[4%p1%dm, setaf=\\E[3%p1%dm, <br>\nsgr=\\E[0;10%?%p1%t;7%; <br>\n%?%p2%t;4%; <br>\n%?%p3%t;7%; <br>\n%?%p4%t;5%; <br>\n%?%p6%t;1%; <br>\n%?%p7%t;8%; <br>\n%?%p9%t;11%;m, <br>\nsgr0=\\E[0;10m, smacs=\\E[11m, smpch=\\E[11m, smso=\\E[7m, <br>\nsmul=\\E[4m, tbc=\\E[3g, u6=\\E[%i%d;%dR, u7=\\E[6n, <br>\nu8=\\E[?%[;0123456789]c, u9=\\E[c,\nvpa=\\E[%i%p1%dd,</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Entries may\ncontinue onto multiple lines by placing white space at the\nbeginning of each line except the first. Comments may be\nincluded on lines beginning with &ldquo;#&rdquo;.\nCapabilities in <i>terminfo</i> are of three types:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Boolean capabilities which\nindicate that the terminal has some particular feature,</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>numeric capabilities giving the size of the terminal or\nthe size of particular delays, and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>string capabilities, which give a sequence which can be\nused to perform particular terminal operations.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Types of\nCapabilities</b> <br>\nAll capabilities have names. For instance, the fact that\nANSI-standard terminals have <i>automatic margins</i> (i.e.,\nan automatic return and line-feed when the end of a line is\nreached) is indicated by the capability <b>am</b>. Hence the\ndescription of ansi includes <b>am</b>. Numeric capabilities\nare followed by the character &ldquo;#&rdquo; and then a\npositive value. Thus <b>cols</b>, which indicates the number\nof columns the terminal has, gives the value\n&ldquo;80&rdquo; for ansi. Values for numeric capabilities\nmay be specified in decimal, octal or hexadecimal, using the\nC programming language conventions (e.g., 255, 0377 and 0xff\nor 0xFF).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Finally, string\nvalued capabilities, such as <b>el</b> (clear to end of line\nsequence) are given by the two-character code, an\n&ldquo;=&rdquo;, and then a string ending at the next\nfollowing &ldquo;,&rdquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A number of\nescape sequences are provided in the string valued\ncapabilities for easy encoding of characters there:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\">Both <b>\\E</b> and <b>\\e</b> map\nto an <small>ESCAPE</small> character,</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p><b>^x</b> maps to a control-x for any appropriate\n<i>x</i>, and</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>the sequences</p></td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:20%; margin-top: 1em\"><b>\\n</b>,\n<b>\\l</b>, <b>\\r</b>, <b>\\t</b>, <b>\\b</b>, <b>\\f</b>, and\n<b>\\s</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">produce</p>\n\n\n<p style=\"margin-left:20%; margin-top: 1em\"><i>newline</i>,\n<i>line-feed</i>, <i>return</i>, <i>tab</i>,\n<i>backspace</i>, <i>form-feed</i>, and <i>space</i>,</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">X/Open Curses\ndoes not say what &ldquo;appropriate <i>x</i>&rdquo; might\nbe. In practice, that is a printable ASCII graphic\ncharacter. The special case &ldquo;^?&rdquo; is interpreted\nas DEL (127). In all other cases, the character value is\nAND&rsquo;d with 0x1f, mapping to ASCII control codes in the\nrange 0 through 31.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other escapes\ninclude</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\"><b>\\^</b> for <b>^</b>,</p></td>\n<td width=\"58%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p><b>\\\\</b> for <b>\\</b>,</p></td>\n<td width=\"58%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p><b>\\</b>, for comma,</p></td>\n<td width=\"58%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p><b>\\:</b> for <b>:</b>,</p></td>\n<td width=\"58%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p>and <b>\\0</b> for null.</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>\\0</b> will\nproduce \\200, which does not terminate a string but behaves\nas a null character on most terminals, providing CS7 is\nspecified. See <a href=\"https://man.page/1/stty\">stty(1)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The reason for\nthis quirk is to maintain binary compatibility of the\ncompiled terminfo files with other implementations, e.g.,\nthe SVr4 systems, which document this. Compiled terminfo\nfiles use null-terminated strings, with no lengths.\nModifying this would require a new binary format, which\nwould not work with other implementations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Finally,\ncharacters may be given as three octal digits after a\n<b>\\</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A delay in\nmilliseconds may appear anywhere in a string capability,\nenclosed in $&lt;..&gt; brackets, as in\n<b>el</b>=\\EK$&lt;5&gt;, and padding characters are supplied\nby <b>tputs</b>(3X) to provide this delay.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The delay must be a number with\nat most one decimal place of precision; it may be followed\nby suffixes &ldquo;*&rdquo; or &ldquo;/&rdquo; or both.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>A &ldquo;*&rdquo; indicates that the padding required is\nproportional to the number of lines affected by the\noperation, and the amount given is the per-affected-unit\npadding required. (In the case of insert character, the\nfactor is still the number of <i>lines</i> affected.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Normally,\npadding is advisory if the device has the <b>xon</b>\ncapability; it is used for cost computation but does not\ntrigger delays.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">A &ldquo;/&rdquo; suffix\nindicates that the padding is mandatory and forces a delay\nof the given number of milliseconds even on devices for\nwhich <b>xon</b> is present to indicate flow control.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sometimes\nindividual capabilities must be commented out. To do this,\nput a period before the capability name. For example, see\nthe second <b>ind</b> in the example above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Fetching\nCompiled Descriptions</b> <br>\nThe <b>ncurses</b> library searches for terminal\ndescriptions in several places. It uses only the first\ndescription found. The library has a compiled-in list of\nplaces to search which can be overridden by environment\nvariables. Before starting to search, <b>ncurses</b>\neliminates duplicates in its search list.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">If the environment variable\nTERMINFO is set, it is interpreted as the pathname of a\ndirectory containing the compiled description you are\nworking on. Only that directory is searched.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>If TERMINFO is not set, <b>ncurses</b> will instead look\nin the directory <b>$HOME/.terminfo</b> for a compiled\ndescription.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Next, if the environment variable TERMINFO_DIRS is set,\n<b>ncurses</b> will interpret the contents of that variable\nas a list of colon-separated directories (or database files)\nto be searched.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">An empty\ndirectory name (i.e., if the variable begins or ends with a\ncolon, or contains adjacent colons) is interpreted as the\nsystem location <i>/etc/terminfo</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Finally, <b>ncurses</b> searches\nthese compiled-in locations:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">&bull;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\"></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">a list of directories (no\ndefault value), and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p>the system terminfo directory, <i>/etc/terminfo</i> (the\ncompiled-in default).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Preparing\nDescriptions</b> <br>\nWe now outline how to prepare descriptions of terminals. The\nmost effective way to prepare a terminal description is by\nimitating the description of a similar terminal in\n<i>terminfo</i> and to build up a description gradually,\nusing partial descriptions with <i>vi</i> or some other\nscreen-oriented program to check that they are correct. Be\naware that a very unusual terminal may expose deficiencies\nin the ability of the <i>terminfo</i> file to describe it or\nbugs in the screen-handling code of the test program.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To get the\npadding for insert line right (if the terminal manufacturer\ndid not document it) a severe test is to edit a large file\nat 9600 baud, delete 16 or so lines from the middle of the\nscreen, then hit the &ldquo;u&rdquo; key several times\nquickly. If the terminal messes up, more padding is usually\nneeded. A similar test can be used for insert character.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Basic\nCapabilities</b> <br>\nThe number of columns on each line for the terminal is given\nby the <b>cols</b> numeric capability. If the terminal is a\n<small>CRT</small> , then the number of lines on the screen\nis given by the <b>lines</b> capability. If the terminal\nwraps around to the beginning of the next line when it\nreaches the right margin, then it should have the <b>am</b>\ncapability. If the terminal can clear its screen, leaving\nthe cursor in the home position, then this is given by the\n<b>clear</b> string capability. If the terminal overstrikes\n(rather than clearing a position when a character is struck\nover) then it should have the <b>os</b> capability. If the\nterminal is a printing terminal, with no soft copy unit,\ngive it both <b>hc</b> and <b>os</b>. (<b>os</b> applies to\nstorage scope terminals, such as <small>TEKTRONIX</small>\n4010 series, as well as hard copy and APL terminals.) If\nthere is a code to move the cursor to the left edge of the\ncurrent row, give this as <b>cr</b>. (Normally this will be\ncarriage return, control/M.) If there is a code to produce\nan audible signal (bell, beep, etc) give this as\n<b>bel</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there is a\ncode to move the cursor one position to the left (such as\nbackspace) that capability should be given as <b>cub1</b>.\nSimilarly, codes to move to the right, up, and down should\nbe given as <b>cuf1</b>, <b>cuu1</b>, and <b>cud1</b>. These\nlocal cursor motions should not alter the text they pass\nover, for example, you would not normally use\n&ldquo;<b>cuf1</b>=&nbsp;&rdquo; because the space would\nerase the character moved over.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A very\nimportant point here is that the local cursor motions\nencoded in <i>terminfo</i> are undefined at the left and top\nedges of a <small>CRT</small> terminal. Programs should\nnever attempt to backspace around the left edge, unless\n<b>bw</b> is given, and never attempt to go up locally off\nthe top. In order to scroll text up, a program will go to\nthe bottom left corner of the screen and send the <b>ind</b>\n(index) string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To scroll text\ndown, a program goes to the top left corner of the screen\nand sends the <b>ri</b> (reverse index) string. The strings\n<b>ind</b> and <b>ri</b> are undefined when not on their\nrespective corners of the screen.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parameterized\nversions of the scrolling sequences are <b>indn</b> and\n<b>rin</b> which have the same semantics as <b>ind</b> and\n<b>ri</b> except that they take one parameter, and scroll\nthat many lines. They are also undefined except at the\nappropriate edge of the screen.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>am</b>\ncapability tells whether the cursor sticks at the right edge\nof the screen when text is output, but this does not\nnecessarily apply to a <b>cuf1</b> from the last column. The\nonly local motion which is defined from the left edge is if\n<b>bw</b> is given, then a <b>cub1</b> from the left edge\nwill move to the right edge of the previous row. If\n<b>bw</b> is not given, the effect is undefined. This is\nuseful for drawing a box around the edge of the screen, for\nexample. If the terminal has switch selectable automatic\nmargins, the <i>terminfo</i> file usually assumes that this\nis on; i.e., <b>am</b>. If the terminal has a command which\nmoves to the first column of the next line, that command can\nbe given as <b>nel</b> (newline). It does not matter if the\ncommand clears the remainder of the current line, so if the\nterminal has no <b>cr</b> and <b>lf</b> it may still be\npossible to craft a working <b>nel</b> out of one or both of\nthem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These\ncapabilities suffice to describe hard-copy and\n&ldquo;glass-tty&rdquo; terminals. Thus the model 33\nteletype is described as</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>33|tty33|tty|model\n33 teletype, <br>\nbel=^G, cols#72, cr=^M, cud1=^J, hc, ind=^J, os,</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">while the Lear\nSiegler <small>ADM-3</small> is described as</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>adm3|3|lsi\nadm3, <br>\nam, bel=^G, clear=^Z, cols#80, cr=^M, cub1=^H, cud1=^J, <br>\nind=^J, lines#24,</small></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Parameterized\nStrings</b> <br>\nCursor addressing and other strings requiring parameters in\nthe terminal are described by a parameterized string\ncapability, with <i>printf</i>-like escapes such as\n<i>%x</i> in it. For example, to address the cursor, the\n<b>cup</b> capability is given, using two parameters: the\nrow and column to address to. (Rows and columns are numbered\nfrom zero and refer to the physical screen visible to the\nuser, not to any unseen memory.) If the terminal has memory\nrelative cursor addressing, that can be indicated by\n<b>mrcup</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The parameter\nmechanism uses a stack and special <b>%</b> codes to\nmanipulate it. Typically a sequence will push one of the\nparameters onto the stack and then print it in some format.\nPrint (e.g., &ldquo;%d&rdquo;) is a special case. Other\noperations, including &ldquo;%t&rdquo; pop their operand\nfrom the stack. It is noted that more complex operations are\noften necessary, e.g., in the <b>sgr</b> string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>%</b>\nencodings have the following meanings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>%%</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">outputs &ldquo;%&rdquo;</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>%</b><i>[[</i>:<i>]flags][width[.precision]][</i><b>doxXs</b><i>]</i></p>\n\n<p style=\"margin-left:18%;\">as in <a href=\"https://man.page/3/printf\">printf(3)</a>, flags\nare <i>[-+#]</i> and <i>space</i>. Use a &ldquo;:&rdquo; to\nallow the next character to be a &ldquo;-&rdquo; flag,\navoiding interpreting &ldquo;%-&rdquo; as an operator.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>%c</p></td>\n<td width=\"4%\"></td>\n<td width=\"45%\">\n\n\n<p>print <i>pop()</i> like %c in <b>printf</b></p></td>\n<td width=\"37%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>%s</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"45%\">\n\n\n<p>print <i>pop()</i> like %s in <b>printf</b></p></td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>%p</b><i>[1-9]</i></p>\n\n<p style=\"margin-left:18%;\">push <i>i</i>&rsquo;th\nparameter</p>\n\n<p style=\"margin-left:11%;\"><b>%P</b><i>[a-z]</i></p>\n\n<p style=\"margin-left:18%;\">set dynamic variable\n<i>[a-z]</i> to <i>pop()</i></p>\n\n<p style=\"margin-left:11%;\"><b>%g</b><i>[a-z]/</i></p>\n\n<p style=\"margin-left:18%;\">get dynamic variable\n<i>[a-z]</i> and push it</p>\n\n<p style=\"margin-left:11%;\"><b>%P</b><i>[A-Z]</i></p>\n\n<p style=\"margin-left:18%;\">set static variable\n<i>[a-z]</i> to <i>pop()</i></p>\n\n<p style=\"margin-left:11%;\"><b>%g</b><i>[A-Z]</i></p>\n\n<p style=\"margin-left:18%;\">get static variable\n<i>[a-z]</i> and push it</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">The terms\n&ldquo;static&rdquo; and &ldquo;dynamic&rdquo; are\nmisleading. Historically, these are simply two different\nsets of variables, whose values are not reset between calls\nto <b>tparm</b>(3X). However, that fact is not documented in\nother implementations. Relying on it will adversely impact\nportability to other implementations:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>SVr2 curses supported <i>dynamic</i> variables. Those\nare set only by a <b>%P</b> operator. A <b>%g</b> for a\ngiven variable without first setting it with <b>%P</b> will\ngive unpredictable results, because dynamic variables are an\nuninitialized local array on the stack in the <b>tparm</b>\nfunction.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>SVr3.2 curses supported <i>static</i> variables. Those\nare an array in the <b>TERMINAL</b> structure (declared in\n<b>term.h</b>), and are zeroed automatically when the\n<b>setupterm</b> function allocates the data.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>SVr4 curses made no further improvements to the\n<i>dynamic/static</i> variable feature.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>Solaris XPG4 curses does not distinguish between\n<i>dynamic</i> and <i>static</i> variables. They are the\nsame. Like SVr4 curses, XPG4 curses does not initialize\nthese explicitly.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>Before version 6.3, ncurses stores both <i>dynamic</i>\nand <i>static</i> variables in persistent storage,\ninitialized to zeros.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>Beginning with version 6.3, ncurses stores <i>static</i>\nand <i>dynamic</i> variables in the same manner as SVr4.\nUnlike other implementations, ncurses zeros dynamic\nvariables before the first <b>%g</b> or <b>%P</b>\noperator.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>%'</b><i>c</i><b>'</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:18%; margin-top: 1em\">char constant\n<i>c</i></p>\n\n<p style=\"margin-left:11%;\"><b>%{</b><i>nn</i><b>}</b></p>\n\n<p style=\"margin-left:18%;\">integer constant <i>nn</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>%l</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"25%\">\n\n\n<p>push strlen(pop)</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>%+</b>, <b>%-</b>,\n<b>%*</b>, <b>%/</b>, <b>%m</b></p>\n\n<p style=\"margin-left:18%;\">arithmetic (%m is <i>mod</i>):\n<i>push(pop() op pop())</i></p>\n\n<p style=\"margin-left:11%;\"><b>%&amp;</b>, <b>%|</b>,\n<b>%^</b></p>\n\n<p style=\"margin-left:18%;\">bit operations (AND, OR and\nexclusive-OR): <i>push(pop() op pop())</i></p>\n\n<p style=\"margin-left:11%;\"><b>%=</b>, <b>%&gt;</b>,\n<b>%&lt;</b></p>\n\n<p style=\"margin-left:18%;\">logical operations:\n<i>push(pop() op pop())</i></p>\n\n<p style=\"margin-left:11%;\"><b>%A</b>, <b>%O</b></p>\n\n<p style=\"margin-left:18%;\">logical AND and OR operations\n(for conditionals)</p>\n\n<p style=\"margin-left:11%;\"><b>%!</b>, <b>%~</b></p>\n\n<p style=\"margin-left:18%;\">unary operations (logical and\nbit complement): <i>push(op pop())</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>%i</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"77%\">\n\n\n<p>add 1 to first two parameters (for ANSI terminals)</p></td>\n<td width=\"5%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>%?</b> <i>expr</i> <b>%t</b>\n<i>thenpart</i> <b>%e</b> <i>elsepart</i> <b>%;</b></p>\n\n<p style=\"margin-left:18%;\">This forms an if-then-else. The\n<b>%e</b> <i>elsepart</i> is optional. Usually the <b>%?</b>\n<i>expr</i> part pushes a value onto the stack, and\n<b>%t</b> pops it from the stack, testing if it is nonzero\n(true). If it is zero (false), control passes to the\n<b>%e</b> (else) part.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">It is possible\nto form else-if&rsquo;s a la Algol 68: <b><br>\n%?</b> c1 <b>%t</b> b1 <b>%e</b> c2 <b>%t</b> b2 <b>%e</b>\nc3 <b>%t</b> b3 <b>%e</b> c4 <b>%t</b> b4 <b>%e %;</b></p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">where ci are\nconditions, bi are bodies.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">Use the\n<b>-f</b> option of <b>tic</b> or <b>infocmp</b> to see the\nstructure of if-then-else&rsquo;s. Some strings, e.g.,\n<b>sgr</b> can be very complicated when written on one line.\nThe <b>-f</b> option splits the string into lines with the\nparts indented.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Binary\noperations are in postfix form with the operands in the\nusual order. That is, to get x-5 one would use\n&ldquo;%gx%{5}%-&rdquo;. <b>%P</b> and <b>%g</b> variables\nare persistent across escape-string evaluations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Consider the\nHP2645, which, to get to row 3 and column 12, needs to be\nsent \\E&amp;a12c03Y padded for 6 milliseconds. Note that the\norder of the rows and columns is inverted here, and that the\nrow and column are printed as two digits. Thus its\n<b>cup</b> capability is\n&ldquo;cup=6\\E&amp;%p2%2dc%p1%2dY&rdquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Microterm\n<small>ACT-IV</small> needs the current row and column sent\npreceded by a <b>^T</b>, with the row and column simply\nencoded in binary, &ldquo;cup=^T%p1%c%p2%c&rdquo;. Terminals\nwhich use &ldquo;%c&rdquo; need to be able to backspace the\ncursor (<b>cub1</b>), and to move the cursor up one line on\nthe screen (<b>cuu1</b>). This is necessary because it is\nnot always safe to transmit <b>\\n ^D</b> and <b>\\r</b>, as\nthe system may change or discard them. (The library routines\ndealing with terminfo set tty modes so that tabs are never\nexpanded, so \\t is safe to send. This turns out to be\nessential for the Ann Arbor 4080.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A final example\nis the <small>LSI ADM</small> -3a, which uses row and column\noffset by a blank character, thus &ldquo;cup=\\E=%p1%'\n'%+%c%p2%' '%+%c&rdquo;. After sending &ldquo;\\E=&rdquo;,\nthis pushes the first parameter, pushes the ASCII value for\na space (32), adds them (pushing the sum on the stack in\nplace of the two previous values) and outputs that value as\na character. Then the same is done for the second parameter.\nMore complex arithmetic is possible using the stack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Cursor\nMotions</b> <br>\nIf the terminal has a fast way to home the cursor (to very\nupper left corner of screen) then this can be given as\n<b>home</b>; similarly a fast way of getting to the lower\nleft-hand corner can be given as <b>ll</b>; this may involve\ngoing up with <b>cuu1</b> from the home position, but a\nprogram should never do this itself (unless <b>ll</b> does)\nbecause it can make no assumption about the effect of moving\nup from the home position. Note that the home position is\nthe same as addressing to (0,0): to the top left corner of\nthe screen, not of memory. (Thus, the \\EH sequence on HP\nterminals cannot be used for <b>home</b>.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nhas row or column absolute cursor addressing, these can be\ngiven as single parameter capabilities <b>hpa</b>\n(horizontal position absolute) and <b>vpa</b> (vertical\nposition absolute). Sometimes these are shorter than the\nmore general two parameter sequence (as with the hp2645) and\ncan be used in preference to <b>cup</b>. If there are\nparameterized local motions (e.g., move <i>n</i> spaces to\nthe right) these can be given as <b>cud</b>, <b>cub</b>,\n<b>cuf</b>, and <b>cuu</b> with a single parameter\nindicating how many spaces to move. These are primarily\nuseful if the terminal does not have <b>cup</b>, such as the\n<small>TEKTRONIX</small> 4025.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nneeds to be in a special mode when running a program that\nuses these capabilities, the codes to enter and exit this\nmode can be given as <b>smcup</b> and <b>rmcup</b>. This\narises, for example, from terminals like the Concept with\nmore than one page of memory. If the terminal has only\nmemory relative cursor addressing and not screen relative\ncursor addressing, a one screen-sized window must be fixed\ninto the terminal for cursor addressing to work properly.\nThis is also used for the <small>TEKTRONIX</small> 4025,\nwhere <b>smcup</b> sets the command character to be the one\nused by terminfo. If the <b>smcup</b> sequence will not\nrestore the screen after an <b>rmcup</b> sequence is output\n(to the state prior to outputting <b>rmcup</b>), specify\n<b>nrrmc</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Margins</b>\n<br>\nSVr4 (and X/Open Curses) list several string capabilities\nfor setting margins. Two were intended for use with\nterminals, and another six were intended for use with\nprinters.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The two terminal capabilities assume that the terminal\nmay have the capability of setting the left and/or right\nmargin at the current cursor column position.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The printer capabilities assume that the printer may\nhave two types of capability:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">&bull;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\"></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">the ability to set a top and/or\nbottom margin using the current line position, and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p>parameterized capabilities for setting the top, bottom,\nleft, right margins given the number of rows or columns.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In practice,\nthe categorization into &ldquo;terminal&rdquo; and\n&ldquo;printer&rdquo; is not suitable:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The AT&amp;T SVr4 terminal\ndatabase uses <b>smgl</b> four times, for AT&amp;T\nhardware.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Three of the\nfour are printers. They lack the ability to set left/right\nmargins by specifying the column.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Other (non-AT&amp;T) terminals\nmay support margins but using different assumptions from\nAT&amp;T.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For instance,\nthe DEC VT420 supports left/right margins, but only using a\ncolumn parameter. As an added complication, the VT420 uses\ntwo settings to fully enable left/right margins (left/right\nmargin mode, and origin mode). The former enables the\nmargins, which causes printed text to wrap within margins,\nbut the latter is needed to prevent cursor-addressing\noutside those margins.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Both DEC VT420 left/right\nmargins are set with a single control sequence. If either is\nomitted, the corresponding margin is set to the left or\nright edge of the display (rather than leaving the margin\nunmodified).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These are the\nmargin-related capabilities:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468758.png\" alt=\"Image grohtml-3468758.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When writing an\napplication that uses these string capabilities, the pairs\nshould be first checked to see if each capability in the\npair is set or only one is set:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">If both <b>smglp</b> and\n<b>smgrp</b> are set, each is used with a single argument,\n<i>N</i>, that gives the column number of the left and right\nmargin, respectively.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>If both <b>smgtp</b> and <b>smgbp</b> are set, each is\nused to set the top and bottom margin, respectively:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">&bull;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\"></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><b>smgtp</b> is used with a\nsingle argument, <i>N</i>, the line number of the top\nmargin.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><b>smgbp</b> is used with two arguments, <i>N</i> and\n<i>M</i>, that give the line number of the bottom margin,\nthe first counting from the top of the page and the second\ncounting from the bottom. This accommodates the two styles\nof specifying the bottom margin in different\nmanufacturers&rsquo; printers.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When designing\na terminfo entry for a printer that has a settable bottom\nmargin, only the first or second argument should be used,\ndepending on the printer. When developing an application\nthat uses <b>smgbp</b> to set the bottom margin, both\narguments must be given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Conversely,\nwhen only one capability in the pair is set:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">If only one of <b>smglp</b> and\n<b>smgrp</b> is set, then it is used with two arguments, the\ncolumn number of the left and right margins, in that\norder.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Likewise, if only one of <b>smgtp</b> and <b>smgbp</b>\nis set, then it is used with two arguments that give the top\nand bottom margins, in that order, counting from the top of\nthe page.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When designing\na terminfo entry for a printer that requires setting both\nleft and right or top and bottom margins simultaneously,\nonly one capability in the pairs <b>smglp</b> and\n<b>smgrp</b> or <b>smgtp</b> and <b>smgbp</b> should be\ndefined, leaving the other unset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Except for very\nold terminal descriptions, e.g., those developed for SVr4,\nthe scheme just described should be considered obsolete. An\nimproved set of capabilities was added late in the SVr4\nreleases (<b>smglr</b> and <b>smgtb</b>), which explicitly\nuse two parameters for setting the left/right or top/bottom\nmargins.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When setting\nmargins, the line- and column-values are zero-based.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>mgc</b>\nstring capability should be defined. Applications such as\n<a href=\"https://man.page/1/tabs\">tabs(1)</a> rely upon this to reset all margins.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Area\nClears</b> <br>\nIf the terminal can clear from the current position to the\nend of the line, leaving the cursor where it is, this should\nbe given as <b>el</b>. If the terminal can clear from the\nbeginning of the line to the current position inclusive,\nleaving the cursor where it is, this should be given as\n<b>el1</b>. If the terminal can clear from the current\nposition to the end of the display, then this should be\ngiven as <b>ed</b>. <b>Ed</b> is only defined from the first\ncolumn of a line. (Thus, it can be simulated by a request to\ndelete a large number of lines, if a true <b>ed</b> is not\navailable.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Insert/delete\nline and vertical motions</b> <br>\nIf the terminal can open a new blank line before the line\nwhere the cursor is, this should be given as <b>il1</b>;\nthis is done only from the first position of a line. The\ncursor must then appear on the newly blank line. If the\nterminal can delete the line which the cursor is on, then\nthis should be given as <b>dl1</b>; this is done only from\nthe first position on the line to be deleted. Versions of\n<b>il1</b> and <b>dl1</b> which take a single parameter and\ninsert or delete that many lines can be given as <b>il</b>\nand <b>dl</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nhas a settable scrolling region (like the vt100) the command\nto set this can be described with the <b>csr</b> capability,\nwhich takes two parameters: the top and bottom lines of the\nscrolling region. The cursor position is, alas, undefined\nafter using this command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is possible\nto get the effect of insert or delete line using <b>csr</b>\non a properly chosen region; the <b>sc</b> and <b>rc</b>\n(save and restore cursor) commands may be useful for\nensuring that your synthesized insert/delete string does not\nmove the cursor. (Note that the <b>ncurses</b>(3NCURSES)\nlibrary does this synthesis automatically, so you need not\ncompose insert/delete strings for an entry with\n<b>csr</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Yet another way\nto construct insert and delete might be to use a combination\nof index with the memory-lock feature found on some\nterminals (like the HP-700/90 series, which however also has\ninsert/delete).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Inserting lines\nat the top or bottom of the screen can also be done using\n<b>ri</b> or <b>ind</b> on many terminals without a true\ninsert/delete line, and is often faster even on terminals\nwith those features.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The boolean\n<b>non_dest_scroll_region</b> should be set if each\nscrolling window is effectively a view port on a\nscreen-sized canvas. To test for this capability, create a\nscrolling region in the middle of the screen, write\nsomething to the bottom line, move the cursor to the top of\nthe region, and do <b>ri</b> followed by <b>dl1</b> or\n<b>ind</b>. If the data scrolled off the bottom of the\nregion by the <b>ri</b> re-appears, then scrolling is\nnon-destructive. System V and XSI Curses expect that\n<b>ind</b>, <b>ri</b>, <b>indn</b>, and <b>rin</b> will\nsimulate destructive scrolling; their documentation cautions\nyou not to define <b>csr</b> unless this is true. This\n<b>curses</b> implementation is more liberal and will do\nexplicit erases after scrolling if <b>ndsrc</b> is\ndefined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nhas the ability to define a window as part of memory, which\nall commands affect, it should be given as the parameterized\nstring <b>wind</b>. The four parameters are the starting and\nending lines in memory and the starting and ending columns\nin memory, in that order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\ncan retain display memory above, then the <b>da</b>\ncapability should be given; if display memory can be\nretained below, then <b>db</b> should be given. These\nindicate that deleting a line or scrolling may bring\nnon-blank lines up from below or that scrolling back with\n<b>ri</b> may bring down non-blank lines.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Insert/Delete\nCharacter</b> <br>\nThere are two basic kinds of intelligent terminals with\nrespect to insert/delete character which can be described\nusing <i>terminfo.</i> The most common insert/delete\ncharacter operations affect only the characters on the\ncurrent line and shift characters off the end of the line\nrigidly. Other terminals, such as the Concept 100 and the\nPerkin Elmer Owl, make a distinction between typed and\nuntyped blanks on the screen, shifting upon an insert or\ndelete only to an untyped blank on the screen which is\neither eliminated, or expanded to two untyped blanks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can\ndetermine the kind of terminal you have by clearing the\nscreen and then typing text separated by cursor motions.\nType &ldquo;abc&nbsp;&nbsp;&nbsp;&nbsp;def&rdquo; using\nlocal cursor motions (not spaces) between the\n&ldquo;abc&rdquo; and the &ldquo;def&rdquo;. Then position\nthe cursor before the &ldquo;abc&rdquo; and put the terminal\nin insert mode. If typing characters causes the rest of the\nline to shift rigidly and characters to fall off the end,\nthen your terminal does not distinguish between blanks and\nuntyped positions. If the &ldquo;abc&rdquo; shifts over to\nthe &ldquo;def&rdquo; which then move together around the\nend of the current line and onto the next as you insert, you\nhave the second type of terminal, and should give the\ncapability <b>in</b>, which stands for &ldquo;insert\nnull&rdquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While these are\ntwo logically separate attributes (one line versus\nmulti-line insert mode, and special treatment of untyped\nspaces) we have seen no terminals whose insert mode cannot\nbe described with the single attribute.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Terminfo can\ndescribe both terminals which have an insert mode, and\nterminals which send a simple sequence to open a blank\nposition on the current line. Give as <b>smir</b> the\nsequence to get into insert mode. Give as <b>rmir</b> the\nsequence to leave insert mode. Now give as <b>ich1</b> any\nsequence needed to be sent just before sending the character\nto be inserted. Most terminals with a true insert mode will\nnot give <b>ich1</b>; terminals which send a sequence to\nopen a screen position should give it here.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If your\nterminal has both, insert mode is usually preferable to\n<b>ich1</b>. Technically, you should not give both unless\nthe terminal actually requires both to be used in\ncombination. Accordingly, some non-curses applications get\nconfused if both are present; the symptom is doubled\ncharacters in an update using insert. This requirement is\nnow rare; most <b>ich</b> sequences do not require previous\nsmir, and most smir insert modes do not require <b>ich1</b>\nbefore each character. Therefore, the new <b>curses</b>\nactually assumes this is the case and uses either\n<b>rmir</b>/<b>smir</b> or <b>ich</b>/<b>ich1</b> as\nappropriate (but not both). If you have to write an entry to\nbe used under new curses for a terminal old enough to need\nboth, include the <b>rmir</b>/<b>smir</b> sequences in\n<b>ich1</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If post insert\npadding is needed, give this as a number of milliseconds in\n<b>ip</b> (a string option). Any other sequence which may\nneed to be sent after an insert of a single character may\nalso be given in <b>ip</b>. If your terminal needs both to\nbe placed into an &ldquo;insert mode&rdquo; and a special\ncode to precede each inserted character, then both\n<b>smir</b>/<b>rmir</b> and <b>ich1</b> can be given, and\nboth will be used. The <b>ich</b> capability, with one\nparameter, <i>n</i>, will repeat the effects of <b>ich1</b>\n<i>n</i> times.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If padding is\nnecessary between characters typed while not in insert mode,\ngive this as a number of milliseconds padding in\n<b>rmp</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is\noccasionally necessary to move around while in insert mode\nto delete characters on the same line (e.g., if there is a\ntab after the insertion position). If your terminal allows\nmotion while in insert mode you can give the capability\n<b>mir</b> to speed up inserting in this case. Omitting\n<b>mir</b> will affect only speed. Some terminals (notably\nDatamedia&rsquo;s) must not have <b>mir</b> because of the\nway their insert mode works.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Finally, you\ncan specify <b>dch1</b> to delete a single character,\n<b>dch</b> with one parameter, <i>n</i>, to delete <i>n\ncharacters,</i> and delete mode by giving <b>smdc</b> and\n<b>rmdc</b> to enter and exit delete mode (any mode the\nterminal needs to be placed in for <b>dch1</b> to work).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A command to\nerase <i>n</i> characters (equivalent to outputting <i>n</i>\nblanks without moving the cursor) can be given as <b>ech</b>\nwith one parameter.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Highlighting,\nUnderlining, and Visible Bells</b> <br>\nIf your terminal has one or more kinds of display\nattributes, these can be represented in a number of\ndifferent ways. You should choose one display form as\n<i>standout mode</i>, representing a good, high contrast,\neasy-on-the-eyes, format for highlighting error messages and\nother attention getters. (If you have a choice, reverse\nvideo plus half-bright is good, or reverse video alone.) The\nsequences to enter and exit standout mode are given as\n<b>smso</b> and <b>rmso</b>, respectively. If the code to\nchange into or out of standout mode leaves one or even two\nblank spaces on the screen, as the TVI 912 and Teleray 1061\ndo, then <b>xmc</b> should be given to tell how many spaces\nare left.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Codes to begin\nunderlining and end underlining can be given as <b>smul</b>\nand <b>rmul</b> respectively. If the terminal has a code to\nunderline the current character and move the cursor one\nspace to the right, such as the Microterm Mime, this can be\ngiven as <b>uc</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other\ncapabilities to enter various highlighting modes include\n<b>blink</b> (blinking) <b>bold</b> (bold or extra bright)\n<b>dim</b> (dim or half-bright) <b>invis</b> (blanking or\ninvisible text) <b>prot</b> (protected) <b>rev</b> (reverse\nvideo) <b>sgr0</b> (turn off <i>all</i> attribute modes)\n<b>smacs</b> (enter alternate character set mode) and\n<b>rmacs</b> (exit alternate character set mode). Turning on\nany of these modes singly may or may not turn off other\nmodes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there is a\nsequence to set arbitrary combinations of modes, this should\nbe given as <b>sgr</b> (set attributes), taking 9\nparameters. Each parameter is either 0 or nonzero, as the\ncorresponding attribute is on or off. The 9 parameters are,\nin order: standout, underline, reverse, blink, dim, bold,\nblank, protect, alternate character set. Not all modes need\nbe supported by <b>sgr</b>, only those for which\ncorresponding separate attribute commands exist.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nthe DEC vt220 supports most of the modes:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3468759.png\" alt=\"Image grohtml-3468759.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We begin each\nescape sequence by turning off any existing modes, since\nthere is no quick way to determine whether they are active.\nStandout is set up to be the combination of reverse and\nbold. The vt220 terminal has a protect mode, though it is\nnot commonly used in sgr because it protects characters on\nthe screen from the host&rsquo;s erasures. The altcharset\nmode also is different in that it is either ^O or ^N,\ndepending on whether it is off or on. If all modes are\nturned on, the resulting sequence is \\E[0;1;4;5;7;8m^N.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some sequences\nare common to different modes. For example, ;7 is output\nwhen either p1 or p3 is true, that is, if either standout or\nreverse modes are turned on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Writing out the\nabove sequences, along with their dependencies yields</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-34687510.png\" alt=\"Image grohtml-34687510.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Putting this\nall together into the sgr sequence gives:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sgr=\\E[0%?%p1%p6%|%t;1%;%?%p2%t;4%;%?%p4%t;5%;\n<br>\n%?%p1%p3%|%t;7%;%?%p7%t;8%;m%?%p9%t\\016%e\\017%;,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Remember that\nif you specify sgr, you must also specify sgr0. Also, some\nimplementations rely on sgr being given if sgr0 is, Not all\nterminfo entries necessarily have an sgr string, however.\nMany terminfo entries are derived from termcap entries which\nhave no sgr string. The only drawback to adding an sgr\nstring is that termcap also assumes that sgr0 does not exit\nalternate character set mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Terminals with\nthe &ldquo;magic cookie&rdquo; glitch (<b>xmc</b>) deposit\nspecial &ldquo;cookies&rdquo; when they receive mode-setting\nsequences, which affect the display algorithm rather than\nhaving extra bits for each character. Some terminals, such\nas the HP 2621, automatically leave standout mode when they\nmove to a new line or the cursor is addressed. Programs\nusing standout mode should exit standout mode before moving\nthe cursor or sending a newline, unless the <b>msgr</b>\ncapability, asserting that it is safe to move in standout\nmode, is present.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nhas a way of flashing the screen to indicate an error\nquietly (a bell replacement) then this can be given as\n<b>flash</b>; it must not move the cursor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the cursor\nneeds to be made more visible than normal when it is not on\nthe bottom line (to make, for example, a non-blinking\nunderline into an easier to find block or blinking\nunderline) give this sequence as <b>cvvis</b>. If there is a\nway to make the cursor completely invisible, give that as\n<b>civis</b>. The capability <b>cnorm</b> should be given\nwhich undoes the effects of both of these modes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If your\nterminal correctly generates underlined characters (with no\nspecial codes needed) even though it does not overstrike,\nthen you should give the capability <b>ul</b>. If a\ncharacter overstriking another leaves both characters on the\nscreen, specify the capability <b>os</b>. If overstrikes are\nerasable with a blank, then this should be indicated by\ngiving <b>eo</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Keypad and\nFunction Keys</b> <br>\nIf the terminal has a keypad that transmits codes when the\nkeys are pressed, this information can be given. Note that\nit is not possible to handle terminals where the keypad only\nworks in local (this applies, for example, to the unshifted\nHP 2621 keys). If the keypad can be set to transmit or not\ntransmit, give these codes as <b>smkx</b> and <b>rmkx</b>.\nOtherwise the keypad is assumed to always transmit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The codes sent\nby the left arrow, right arrow, up arrow, down arrow, and\nhome keys can be given as <b>kcub1, kcuf1, kcuu1, kcud1,</b>\nand <b>khome</b> respectively. If there are function keys\nsuch as f0, f1, ..., f10, the codes they send can be given\nas <b>kf0, kf1, ..., kf10</b>. If these keys have labels\nother than the default f0 through f10, the labels can be\ngiven as <b>lf0, lf1, ..., lf10</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The codes\ntransmitted by certain other special keys can be given:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\"><b>kll</b> (home down),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kbs</b> (backspace),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>ktbc</b> (clear all tabs),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kctab</b> (clear the tab stop in this column),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kclr</b> (clear screen or erase key),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kdch1</b> (delete character),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kdl1</b> (delete line),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>krmir</b> (exit insert mode),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kel</b> (clear to end of line),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>ked</b> (clear to end of screen),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kich1</b> (insert character or enter insert\nmode),</p> </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kil1</b> (insert line),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>knp</b> (next page),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kpp</b> (previous page),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kind</b> (scroll forward/down),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>kri</b> (scroll backward/up),</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p><b>khts</b> (set a tab stop in this column).</p></td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition, if\nthe keypad has a 3 by 3 array of keys including the four\narrow keys, the other five keys can be given as <b>ka1</b>,\n<b>ka3</b>, <b>kb2</b>, <b>kc1</b>, and <b>kc3</b>. These\nkeys are useful when the effects of a 3 by 3 directional pad\nare needed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Strings to\nprogram function keys can be given as <b>pfkey</b>,\n<b>pfloc</b>, and <b>pfx</b>. A string to program screen\nlabels should be specified as <b>pln</b>. Each of these\nstrings takes two parameters: the function key number to\nprogram (from 0 to 10) and the string to program it with.\nFunction key numbers out of this range may program undefined\nkeys in a terminal dependent manner. The difference between\nthe capabilities is that <b>pfkey</b> causes pressing the\ngiven key to be the same as the user typing the given\nstring; <b>pfloc</b> causes the string to be executed by the\nterminal in local; and <b>pfx</b> causes the string to be\ntransmitted to the computer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ncapabilities <b>nlab</b>, <b>lw</b> and <b>lh</b> define the\nnumber of programmable screen labels and their width and\nheight. If there are commands to turn the labels on and off,\ngive them in <b>smln</b> and <b>rmln</b>. <b>smln</b> is\nnormally output after one or more pln sequences to make sure\nthat the change becomes visible.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Tabs and\nInitialization</b> <br>\nA few capabilities are used only for tabs:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">If the terminal has hardware\ntabs, the command to advance to the next tab stop can be\ngiven as <b>ht</b> (usually control/I).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>A &ldquo;back-tab&rdquo; command which moves leftward to\nthe preceding tab stop can be given as <b>cbt</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By convention,\nif the teletype modes indicate that tabs are being expanded\nby the computer rather than being sent to the terminal,\nprograms should not use <b>ht</b> or <b>cbt</b> even if they\nare present, since the user may not have the tab stops\nproperly set.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">If the terminal has hardware\ntabs which are initially set every <i>n</i> spaces when the\nterminal is powered up, the numeric parameter <b>it</b> is\ngiven, showing the number of spaces the tabs are set to.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The <b>it</b>\ncapability is normally used by the <b>tset</b> command to\ndetermine whether to set the mode for hardware tab\nexpansion, and whether to set the tab stops. If the terminal\nhas tab stops that can be saved in non-volatile memory, the\nterminfo description can assume that they are properly\nset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other\ncapabilities include</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><b>is1</b>, <b>is2</b>, and\n<b>is3</b>, initialization strings for the terminal,</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>iprog</b>, the path name of a program to be run to\ninitialize the terminal,</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>and <b>if</b>, the name of a file containing long\ninitialization strings.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These strings\nare expected to set the terminal into modes consistent with\nthe rest of the terminfo description. They are normally sent\nto the terminal, by the <i>init</i> option of the\n<b>tput</b> program, each time the user logs in. They will\nbe printed in the following order:</p>\n\n<p style=\"margin-left:22%;\">run the program</p>\n\n<p style=\"margin-left:32%;\"><b>iprog</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>output</p></td>\n<td width=\"1%\"></td>\n<td width=\"11%\">\n\n\n<p><b>is1</b> and</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:32%;\"><b>is2</b></p>\n\n<p style=\"margin-left:22%;\">set the margins using</p>\n\n<p style=\"margin-left:32%;\"><b>mgc</b> or <b><br>\nsmglp</b> and <b>smgrp</b> or <b><br>\nsmgl</b> and <b>smgr</b></p>\n\n<p style=\"margin-left:22%;\">set tabs using</p>\n\n<p style=\"margin-left:32%;\"><b>tbc</b> and <b>hts</b></p>\n\n<p style=\"margin-left:22%;\">print the file</p>\n\n<p style=\"margin-left:32%;\"><b>if</b></p>\n\n<p style=\"margin-left:22%;\">and finally output</p>\n\n<p style=\"margin-left:32%;\"><b>is3</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most\ninitialization is done with <b>is2</b>. Special terminal\nmodes can be set up without duplicating strings by putting\nthe common sequences in <b>is2</b> and special cases in\n<b>is1</b> and <b>is3</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A set of\nsequences that does a harder reset from a totally unknown\nstate can be given as <b>rs1</b>, <b>rs2</b>, <b>rf</b> and\n<b>rs3</b>, analogous to <b>is1 , is2 , if</b> and\n<b>is3</b> respectively. These strings are output by\n<i>reset</i> option of <b>tput</b>, or by the <b>reset</b>\nprogram (an alias of <b>tset</b>), which is used when the\nterminal gets into a wedged state. Commands are normally\nplaced in <b>rs1</b>, <b>rs2 rs3</b> and <b>rf</b> only if\nthey produce annoying effects on the screen and are not\nnecessary when logging in. For example, the command to set\nthe vt100 into 80-column mode would normally be part of\n<b>is2</b>, but it causes an annoying glitch of the screen\nand is not normally needed since the terminal is usually\nalready in 80-column mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>reset</b> program writes strings including <b>iprog</b>,\netc., in the same order as the <i>init</i> program, using\n<b>rs1</b>, etc., instead of <b>is1</b>, etc. If any of\n<b>rs1</b>, <b>rs2</b>, <b>rs3</b>, or <b>rf</b> reset\ncapability strings are missing, the <b>reset</b> program\nfalls back upon the corresponding initialization capability\nstring.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there are\ncommands to set and clear tab stops, they can be given as\n<b>tbc</b> (clear all tab stops) and <b>hts</b> (set a tab\nstop in the current column of every row). If a more complex\nsequence is needed to set the tabs than can be described by\nthis, the sequence can be placed in <b>is2</b> or\n<b>if</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>tput\nreset</b> command uses the same capability strings as the\n<b>reset</b> command, although the two programs (<b>tput</b>\nand <b>reset</b>) provide different command-line\noptions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In practice,\nthese terminfo capabilities are not often used in\ninitialization of tabs (though they are required for the\n<b>tabs</b> program):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Almost all hardware terminals (at least those which\nsupported tabs) initialized those to every <i>eight</i>\ncolumns:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The only\nexception was the AT&amp;T 2300 series, which set tabs to\nevery <i>five</i> columns.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">In particular, developers of the\nhardware terminals which are commonly used as models for\nmodern terminal emulators provided documentation\ndemonstrating that <i>eight</i> columns were the\nstandard.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Because of this, the terminal initialization programs\n<b>tput</b> and <b>tset</b> use the <b>tbc</b>\n(<b>clear_all_tabs</b>) and <b>hts</b> (<b>set_tab</b>)\ncapabilities directly only when the <b>it</b>\n(<b>init_tabs</b>) capability is set to a value other than\n<i>eight</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Delays and\nPadding</b> <br>\nMany older and slower terminals do not support either\nXON/XOFF or DTR handshaking, including hard copy terminals\nand some very archaic CRTs (including, for example, DEC\nVT100s). These may require padding characters after certain\ncursor motions and screen changes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nuses xon/xoff handshaking for flow control (that is, it\nautomatically emits ^S back to the host when its input\nbuffers are close to full), set <b>xon</b>. This capability\nsuppresses the emission of padding. You can also set it for\nmemory-mapped console devices effectively that do not have a\nspeed limit. Padding information should still be included so\nthat routines can make better decisions about relative\ncosts, but actual pad characters will not be\ntransmitted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>pb</b>\n(padding baud rate) is given, padding is suppressed at baud\nrates below the value of <b>pb</b>. If the entry has no\npadding baud rate, then whether padding is emitted or not is\ncompletely controlled by <b>xon</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nrequires other than a null (zero) character as a pad, then\nthis can be given as <b>pad</b>. Only the first character of\nthe <b>pad</b> string is used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Status\nLines</b> <br>\nSome terminals have an extra &ldquo;status line&rdquo; which\nis not normally used by software (and thus not counted in\nthe terminal&rsquo;s <b>lines</b> capability).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The simplest\ncase is a status line which is cursor-addressable but not\npart of the main scrolling region on the screen; the\nHeathkit H19 has a status line of this kind, as would a\n24-line VT100 with a 23-line scrolling region set up on\ninitialization. This situation is indicated by the <b>hs</b>\ncapability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some terminals\nwith status lines need special sequences to access the\nstatus line. These may be expressed as a string with single\nparameter <b>tsl</b> which takes the cursor to a given\nzero-origin column on the status line. The capability\n<b>fsl</b> must return to the main-screen cursor positions\nbefore the last <b>tsl</b>. You may need to embed the string\nvalues of <b>sc</b> (save cursor) and <b>rc</b> (restore\ncursor) in <b>tsl</b> and <b>fsl</b> to accomplish this.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The status line\nis normally assumed to be the same width as the width of the\nterminal. If this is untrue, you can specify it with the\nnumeric capability <b>wsl</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A command to\nerase or blank the status line may be specified as\n<b>dsl</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The boolean\ncapability <b>eslok</b> specifies that escape sequences,\ntabs, etc., work ordinarily in the status line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ncurses</b> implementation does not yet use any of these\ncapabilities. They are documented here in case they ever\nbecome important.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Line\nGraphics</b> <br>\nMany terminals have alternate character sets useful for\nforms-drawing. Terminfo and <b>curses</b> have built-in\nsupport for most of the drawing characters supported by the\nVT100, with some characters from the AT&amp;T 4410v1 added.\nThis alternate character set may be specified by the\n<b>acsc</b> capability.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-34687511.png\" alt=\"Image grohtml-34687511.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A few notes\napply to the table itself:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">X/Open Curses incorrectly states\nthat the mapping for <i>lantern</i> is uppercase\n&ldquo;I&rdquo; although Unix implementations use the\nlowercase &ldquo;i&rdquo; mapping.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The DEC VT100 implemented graphics using the alternate\ncharacter set feature, temporarily switching <i>modes</i>\nand sending characters in the range 0x60 (96) to 0x7e (126)\n(the <b>acsc Value</b> column in the table).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The AT&amp;T terminal added graphics characters outside\nthat range.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Some of the\ncharacters within the range do not match the VT100;\npresumably they were used in the AT&amp;T terminal: <i>board\nof squares</i> replaces the VT100 <i>newline</i> symbol,\nwhile <i>lantern symbol</i> replaces the VT100 <i>vertical\ntab</i> symbol. The other VT100 symbols for control\ncharacters (<i>horizontal tab</i>, <i>carriage return</i>\nand <i>line-feed</i>) are not (re)used in curses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The best way to\ndefine a new device&rsquo;s graphics set is to add a column\nto a copy of this table for your terminal, giving the\ncharacter which (when emitted between\n<b>smacs</b>/<b>rmacs</b> switches) will be rendered as the\ncorresponding graphic. Then read off the VT100/your terminal\ncharacter pairs right to left in sequence; these become the\nACSC string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Color\nHandling</b> <br>\nThe curses library functions <b>init_pair</b> and\n<b>init_color</b> manipulate the <i>color pairs</i> and\n<i>color values</i> discussed in this section (see\n<b>curs_color</b>(3X) for details on these and related\nfunctions).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most color\nterminals are either &ldquo;Tektronix-like&rdquo; or\n&ldquo;HP-like&rdquo;:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Tektronix-like terminals have a\npredefined set of <i>N</i> colors (where <i>N</i> is usually\n8), and can set character-cell foreground and background\ncharacters independently, mixing them into\n<i>N&nbsp;</i>*&nbsp;<i>N</i> color-pairs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>On HP-like terminals, the user must set each color pair\nup separately (foreground and background are not\nindependently settable). Up to <i>M</i> color-pairs may be\nset up from 2*<i>M</i> different colors. ANSI-compatible\nterminals are Tektronix-like.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some basic\ncolor capabilities are independent of the color method. The\nnumeric capabilities <b>colors</b> and <b>pairs</b> specify\nthe maximum numbers of colors and color-pairs that can be\ndisplayed simultaneously. The <b>op</b> (original pair)\nstring resets foreground and background colors to their\ndefault values for the terminal. The <b>oc</b> string resets\nall colors or color-pairs to their default values for the\nterminal. Some terminals (including many PC terminal\nemulators) erase screen areas with the current background\ncolor rather than the power-up default background; these\nshould have the boolean capability <b>bce</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While the\ncurses library works with <i>color pairs</i> (reflecting the\ninability of some devices to set foreground and background\ncolors independently), there are separate capabilities for\nsetting these features:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">To change the current foreground\nor background color on a Tektronix-type terminal, use\n<b>setaf</b> (set ANSI foreground) and <b>setab</b> (set\nANSI background) or <b>setf</b> (set foreground) and\n<b>setb</b> (set background). These take one parameter, the\ncolor number. The SVr4 documentation describes only\n<b>setaf</b>/<b>setab</b>; the XPG4 draft says that &quot;If\nthe terminal supports ANSI escape sequences to set\nbackground and foreground, they should be coded as\n<b>setaf</b> and <b>setab</b>, respectively.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>If the terminal supports other escape sequences to set\nbackground and foreground, they should be coded as\n<b>setf</b> and <b>setb</b>, respectively. The\n<b>vidputs</b> and the <b>refresh</b>(3X) functions use the\n<b>setaf</b> and <b>setab</b> capabilities if they are\ndefined.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setaf</b>/<b>setab</b> and <b>setf</b>/<b>setb</b>\ncapabilities take a single numeric argument each. Argument\nvalues 0-7 of <b>setaf</b>/<b>setab</b> are portably defined\nas follows (the middle column is the symbolic #define\navailable in the header for the <b>curses</b> or\n<b>ncurses</b> libraries). The terminal hardware is free to\nmap these as it likes, but the RGB values indicate normal\nlocations in color space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&nbsp;</p>\n\n\n<p align=\"center\"><img src=\"grohtml-34687512.png\" alt=\"Image grohtml-34687512.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The argument\nvalues of <b>setf</b>/<b>setb</b> historically correspond to\na different mapping, i.e.,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&nbsp;</p>\n\n\n<p align=\"center\"><img src=\"grohtml-34687513.png\" alt=\"Image grohtml-34687513.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is important\nto not confuse the two sets of color capabilities; otherwise\nred/blue will be interchanged on the display.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On an HP-like\nterminal, use <b>scp</b> with a color-pair number parameter\nto set which color pair is current.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some terminals\nallow the <i>color values</i> to be modified:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">On a Tektronix-like terminal,\nthe capability <b>ccc</b> may be present to indicate that\ncolors can be modified. If so, the <b>initc</b> capability\nwill take a color number (0 to <b>colors</b> - 1)and three\nmore parameters which describe the color. These three\nparameters default to being interpreted as RGB (Red, Green,\nBlue) values. If the boolean capability <b>hls</b> is\npresent, they are instead as HLS (Hue, Lightness,\nSaturation) indices. The ranges are terminal-dependent.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>On an HP-like terminal, <b>initp</b> may give a\ncapability for changing a color-pair value. It will take\nseven parameters; a color-pair number (0 to <b>max_pairs</b>\n- 1), and two triples describing first background and then\nforeground colors. These parameters must be (Red, Green,\nBlue) or (Hue, Lightness, Saturation) depending on\n<b>hls</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On some color\nterminals, colors collide with highlights. You can register\nthese collisions with the <b>ncv</b> capability. This is a\nbit-mask of attributes not to be used when colors are\nenabled. The correspondence with the attributes understood\nby <b>curses</b> is as follows:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-34687514.png\" alt=\"Image grohtml-34687514.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example, on\nmany IBM PC consoles, the underline attribute collides with\nthe foreground color blue and is not available in color\nmode. These should have an <b>ncv</b> capability of 2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">SVr4 curses\ndoes nothing with <b>ncv</b>, ncurses recognizes it and\noptimizes the output in favor of colors.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Miscellaneous</b>\n<br>\nIf the terminal requires other than a null (zero) character\nas a pad, then this can be given as pad. Only the first\ncharacter of the pad string is used. If the terminal does\nnot have a pad character, specify npc. Note that ncurses\nimplements the termcap-compatible <b>PC</b> variable; though\nthe application may set this value to something other than a\nnull, ncurses will test <b>npc</b> first and use napms if\nthe terminal has no pad character.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\ncan move up or down half a line, this can be indicated with\n<b>hu</b> (half-line up) and <b>hd</b> (half-line down).\nThis is primarily useful for superscripts and subscripts on\nhard-copy terminals. If a hard-copy terminal can eject to\nthe next page (form feed), give this as <b>ff</b> (usually\ncontrol/L).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there is a\ncommand to repeat a given character a given number of times\n(to save time transmitting a large number of identical\ncharacters) this can be indicated with the parameterized\nstring <b>rep</b>. The first parameter is the character to\nbe repeated and the second is the number of times to repeat\nit. Thus, tparm(repeat_char, 'x', 10) is the same as\n&ldquo;xxxxxxxxxx&rdquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nhas a settable command character, such as the\n<small>TEKTRONIX</small> 4025, this can be indicated with\n<b>cmdch</b>. A prototype command character is chosen which\nis used in all capabilities. This character is given in the\n<b>cmdch</b> capability to identify it. The following\nconvention is supported on some UNIX systems: The\nenvironment is to be searched for a <b>CC</b> variable, and\nif found, all occurrences of the prototype character are\nreplaced with the character in the environment variable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Terminal\ndescriptions that do not represent a specific kind of known\nterminal, such as <i>switch</i>, <i>dialup</i>,\n<i>patch</i>, and <i>network</i>, should include the\n<b>gn</b> (generic) capability so that programs can complain\nthat they do not know how to talk to the terminal. (This\ncapability does not apply to <i>virtual</i> terminal\ndescriptions for which the escape sequences are known.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nhas a &ldquo;meta key&rdquo; which acts as a shift key,\nsetting the 8th bit of any character transmitted, this fact\ncan be indicated with <b>km</b>. Otherwise, software will\nassume that the 8th bit is parity and it will usually be\ncleared. If strings exist to turn this &ldquo;meta\nmode&rdquo; on and off, they can be given as <b>smm</b> and\n<b>rmm</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nhas more lines of memory than will fit on the screen at\nonce, the number of lines of memory can be indicated with\n<b>lm</b>. A value of <b>lm</b>#0 indicates that the number\nof lines is not fixed, but that there is still more memory\nthan fits on the screen.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nis one of those supported by the <small>UNIX</small> virtual\nterminal protocol, the terminal number can be given as\n<b>vt</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Media copy\nstrings which control an auxiliary printer connected to the\nterminal can be given as <b>mc0</b>: print the contents of\nthe screen, <b>mc4</b>: turn off the printer, and\n<b>mc5</b>: turn on the printer. When the printer is on, all\ntext sent to the terminal will be sent to the printer. It is\nundefined whether the text is also displayed on the terminal\nscreen when the printer is on. A variation <b>mc5p</b> takes\none parameter, and leaves the printer on for as many\ncharacters as the value of the parameter, then turns the\nprinter off. The parameter should not exceed 255. All text,\nincluding <b>mc4</b>, is transparently passed to the printer\nwhile an <b>mc5p</b> is in effect.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glitches and\nBraindamage</b> <br>\nHazeltine terminals, which do not allow &ldquo;~&rdquo;\ncharacters to be displayed should indicate <b>hz</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Terminals which\nignore a line-feed immediately after an <b>am</b> wrap, such\nas the Concept and vt100, should indicate <b>xenl</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <b>el</b> is\nrequired to get rid of standout (instead of merely writing\nnormal text on top of it), <b>xhp</b> should be given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Teleray\nterminals, where tabs turn all characters moved over to\nblanks, should indicate <b>xt</b> (destructive tabs). Note:\nthe variable indicating this is now\n&ldquo;dest_tabs_magic_smso&rdquo;; in older versions, it\nwas teleray_glitch. This glitch is also taken to mean that\nit is not possible to position the cursor on top of a\n&ldquo;magic cookie&rdquo;, that to erase standout mode it\nis instead necessary to use delete and insert line. The\nncurses implementation ignores this glitch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Beehive\nSuperbee, which is unable to correctly transmit the escape\nor control/C characters, has <b>xsb</b>, indicating that the\nf1 key is used for escape and f2 for control/C. (Only\ncertain Superbees have this problem, depending on the ROM.)\nNote that in older terminfo versions, this capability was\ncalled &ldquo;beehive_glitch&rdquo;; it is now\n&ldquo;no_esc_ctl_c&rdquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other specific\nterminal problems may be corrected by adding more\ncapabilities of the form <b>x</b><i>x</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Pitfalls of\nLong Entries</b> <br>\nLong terminfo entries are unlikely to be a problem; to date,\nno entry has even approached terminfo&rsquo;s 4096-byte\nstring-table maximum. Unfortunately, the termcap\ntranslations are much more strictly limited (to 1023 bytes),\nthus termcap translations of long terminfo entries can cause\nproblems.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The man pages\nfor 4.3BSD and older versions of <b>tgetent</b> instruct the\nuser to allocate a 1024-byte buffer for the termcap entry.\nThe entry gets null-terminated by the termcap library, so\nthat makes the maximum safe length for a termcap entry 1k-1\n(1023) bytes. Depending on what the application and the\ntermcap library being used does, and where in the termcap\nfile the terminal type that <b>tgetent</b> is searching for\nis, several bad things can happen.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some termcap\nlibraries print a warning message or exit if they find an\nentry that&rsquo;s longer than 1023 bytes; others do not;\nothers truncate the entries to 1023 bytes. Some application\nprograms allocate more than the recommended 1K for the\ntermcap entry; others do not.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each termcap\nentry has two important sizes associated with it: before\n&ldquo;tc&rdquo; expansion, and after &ldquo;tc&rdquo;\nexpansion. &ldquo;tc&rdquo; is the capability that tacks on\nanother termcap entry to the end of the current one, to add\non its capabilities. If a termcap entry does not use the\n&ldquo;tc&rdquo; capability, then of course the two lengths\nare the same.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&ldquo;before tc expansion&rdquo; length is the most\nimportant one, because it affects more than just users of\nthat particular terminal. This is the length of the entry as\nit exists in /etc/termcap, minus the backslash-newline\npairs, which <b>tgetent</b> strips out while reading it.\nSome termcap libraries strip off the final newline, too (GNU\ntermcap does not). Now suppose:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">a termcap entry before expansion\nis more than 1023 bytes long,</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>and the application has only allocated a 1k buffer,</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>and the termcap library (like the one in BSD/OS 1.1 and\nGNU) reads the whole entry into the buffer, no matter what\nits length, to see if it is the entry it wants,</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>and <b>tgetent</b> is searching for a terminal type that\neither is the long entry, appears in the termcap file after\nthe long entry, or does not appear in the file at all (so\nthat <b>tgetent</b> has to search the whole termcap\nfile).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then\n<b>tgetent</b> will overwrite memory, perhaps its stack, and\nprobably core dump the program. Programs like telnet are\nparticularly vulnerable; modern telnets pass along values\nlike the terminal type automatically. The results are almost\nas undesirable with a termcap library, like SunOS 4.1.3 and\nUltrix 4.4, that prints warning messages when it reads an\noverly long termcap entry. If a termcap library truncates\nlong entries, like OSF/1 3.0, it is immune to dying here but\nwill return incorrect data for the terminal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&ldquo;after tc expansion&rdquo; length will have a similar\neffect to the above, but only for people who actually set\nTERM to that terminal type, since <b>tgetent</b> only does\n&ldquo;tc&rdquo; expansion once it is found the terminal\ntype it was looking for, not while searching.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In summary, a\ntermcap entry that is longer than 1023 bytes can cause, on\nvarious combinations of termcap libraries and applications,\na core dump, warnings, or incorrect operation. If it is too\nlong even before &ldquo;tc&rdquo; expansion, it will have\nthis effect even for users of some other terminal types and\nusers whose TERM variable does not have a termcap entry.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When in -C\n(translate to termcap) mode, the <b>ncurses</b>\nimplementation of <a href=\"https://man.page/1/tic\">tic(1)</a> issues warning messages when\nthe pre-tc length of a termcap translation is too long. The\n-c (check) option also checks resolved (after tc expansion)\nlengths.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Binary\nCompatibility</b> <br>\nIt is not wise to count on portability of binary terminfo\nentries between commercial UNIX versions. The problem is\nthat there are at least two versions of terminfo (under\nHP-UX and AIX) which diverged from System V terminfo after\nSVr1, and have added extension capabilities to the string\ntable that (in the binary format) collide with System V and\nXSI Curses extensions.</p>\n\n<h2>EXTENSIONS\n<a name=\"EXTENSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Searching for\nterminal descriptions in <b>$HOME/.terminfo</b> and\nTERMINFO_DIRS is not supported by older implementations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some SVr4\n<b>curses</b> implementations, and all previous to SVr4, do\nnot interpret the %A and %O operators in parameter\nstrings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">SVr4/XPG4 do\nnot specify whether <b>msgr</b> licenses movement while in\nan alternate-character-set mode (such modes may, among other\nthings, map CR and NL to characters that do not trigger\nlocal motions). The <b>ncurses</b> implementation ignores\n<b>msgr</b> in <b>ALTCHARSET</b> mode. This raises the\npossibility that an XPG4 implementation making the opposite\ninterpretation may need terminfo entries made for\n<b>ncurses</b> to have <b>msgr</b> turned off.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ncurses</b> library handles insert-character and\ninsert-character modes in a slightly non-standard way to get\nbetter update efficiency. See the <b>Insert/Delete\nCharacter</b> subsection above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The parameter\nsubstitutions for <b>set_clock</b> and <b>display_clock</b>\nare not documented in SVr4 or the XSI Curses standard. They\nare deduced from the documentation for the AT&amp;T 505\nterminal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Be careful\nassigning the <b>kmous</b> capability. The <b>ncurses</b>\nlibrary wants to interpret it as <b>KEY_MOUSE</b>, for use\nby terminals and emulators like xterm that can return\nmouse-tracking information in the keyboard-input stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">X/Open Curses\ndoes not mention italics. Portable applications must assume\nthat numeric capabilities are signed 16-bit values. This\nincludes the <i>no_color_video</i> (ncv) capability. The\n32768 mask value used for italics with ncv can be confused\nwith an absent or cancelled ncv. If italics should work with\ncolors, then the ncv value must be specified, even if it is\nzero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Different\ncommercial ports of terminfo and curses support different\nsubsets of the XSI Curses standard and (in some cases)\ndifferent extension sets. Here is a summary, accurate as of\nOctober 1995:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><b>SVR4, Solaris, ncurses</b> --\nThese support all SVr4 capabilities.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>SGI</b> -- Supports the SVr4 set, adds one\nundocumented extended string capability\n(<b>set_pglen</b>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>SVr1, Ultrix</b> -- These support a restricted subset\nof terminfo capabilities. The booleans end with\n<b>xon_xoff</b>; the numerics with <b>width_status_line</b>;\nand the strings with <b>prtr_non</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>HP/UX</b> -- Supports the SVr1 subset, plus the\nSVr[234] numerics <b>num_labels</b>, <b>label_height</b>,\n<b>label_width</b>, plus function keys 11 through 63, plus\n<b>plab_norm</b>, <b>label_on</b>, and <b>label_off</b>,\nplus some incompatible extensions in the string table.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>AIX</b> -- Supports the SVr1 subset, plus function\nkeys 11 through 63, plus a number of incompatible string\ntable extensions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>OSF</b> -- Supports both the SVr4 set and the AIX\nextensions.</p> </td></tr>\n</table>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">/etc/terminfo/?/*</p></td>\n<td width=\"12%\"></td>\n<td width=\"51%\">\n\n\n<p style=\"margin-top: 1em\">files containing terminal\ndescriptions</p> </td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/infocmp\">infocmp(1)</a>,\n<a href=\"https://man.page/1/tabs\">tabs(1)</a>, <a href=\"https://man.page/1/tic\">tic(1)</a>, <b>ncurses</b>(3NCURSES),\n<b>color</b>(3NCURSES), <b>curses_variables</b>(3NCURSES),\n<a href=\"https://man.page/3/printf\">printf(3)</a>, <b>terminfo_variables</b>(3NCURSES).\n<a href=\"https://man.page/5/term\">term(5)</a>. <a href=\"https://man.page/5/user_caps\">user_caps(5)</a>.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Zeyd M.\nBen-Halim, Eric S. Raymond, Thomas E. Dickey. Based on\npcurses by Pavel Curtis.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXTENSIONS\">EXTENSIONS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>"],"level":5}