{"name":"mib2c.conf","body":"\n\n<h1 align=\"center\">MIB2C.CONF</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mib2c.conf -\nHow to write mib2c.conf files to do ANYTHING based on MIB\ninput.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">% cat &gt;\nmib2c.test.conf &lt;&lt; EOF @foreach $t table@ <br>\nStarting table $t <br>\n@foreach $c column@ <br>\necho $t has column $c which has a syntax of $c.syntax <br>\n@end@</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">@end@ EOF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">% mib2c -c\nmib2c.test.conf internet</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The mib2c.conf\nscript language is a MIB-particular language designed to\neasily process MIB nodes in ways that you want. mib2c is a\nmisnomer (for historical purposes), because you can produce\nanything (not just C code). Look in the Net-SNMP\n&quot;local&quot; directory for a bunch of example\nmib2c.*.conf files and behold the power before you.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All commands\nwithin mib2c.conf files are embraced by @ signs. Anything\nwith an @ sign at the front and back of the line is\ngenerally supposed to be a mib2c specific command. These are\ndetailed here: <br>\n@open FILE@</p>\n\n<p style=\"margin-left:22%;\">writes generated output to FILE\nnote that for file specifications, opening &rsquo;-&rsquo;\nwill print to stdout.</p>\n\n<p style=\"margin-left:11%;\">@append FILE@</p>\n\n<p style=\"margin-left:22%;\">appends the given FILE</p>\n\n<p style=\"margin-left:11%;\">@close FILE@</p>\n\n<p style=\"margin-left:22%;\">closes the given FILE</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>@push@</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>save the current outputs, then clear outputs. Use with\n@open@ and @pop@ to write to a new file without interfering\nwith current outputs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>@pop@</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>pop up the process() stack one level. Use after a @push@\nto return to the previous set of open files.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">@foreach $VAR scalar@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known scalars</p>\n\n<p style=\"margin-left:11%;\">@foreach $VAR table@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known tables</p>\n\n<p style=\"margin-left:11%;\">@foreach $VAR column@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known columns within a given\ntable. Obviously this must be called within a foreach-table\nclause.</p>\n\n<p style=\"margin-left:11%;\">@foreach $VAR nonindex@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known non-index columns within a\ngiven table. Obviously this must be called within a\nforeach-table clause.</p>\n\n<p style=\"margin-left:11%;\">@foreach $VAR\ninternalindex@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known internal index columns\nwithin a given table. Obviously this must be called within a\nforeach-table clause.</p>\n\n<p style=\"margin-left:11%;\">@foreach $VAR\nexternalindex@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known external index columns\nwithin a given table. Obviously this must be called within a\nforeach-table clause.</p>\n\n<p style=\"margin-left:11%;\">@foreach $VAR index@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known indexes within a given\ntable. Obviously this must be called within a foreach-table\nclause.</p>\n\n<p style=\"margin-left:11%;\">@foreach $VAR\nnotifications@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known notifications</p>\n\n<p style=\"margin-left:11%;\">@foreach $VAR varbinds@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $VAR to all known varbinds Obviously this must\nbe called within a foreach-notifications clause.</p>\n\n<p style=\"margin-left:11%;\">@foreach $LABEL, $VALUE\nenum@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $LABEL and $VALUE to the label and values from\nthe enum list.</p>\n\n<p style=\"margin-left:11%;\">@foreach $RANGE_START,\n$RANGE_END range NODE@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\n@end@ setting $RANGE_START and $RANGE_END to the legal\naccepted range set for a given mib NODE.</p>\n\n<p style=\"margin-left:11%;\">@foreach $var stuff a b c\nd@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over values a,\nb, c, d as assigned generically (ie, the values are taken\nstraight from the list with no mib-expansion, etc).</p>\n\n<p style=\"margin-left:11%;\">@while expression@</p>\n\n<p style=\"margin-left:22%;\">repeat iterate over code until\nthe expression is false</p>\n\n<p style=\"margin-left:11%;\">@eval $VAR = expression@</p>\n\n<p style=\"margin-left:22%;\">evaluates expression and\nassigns the results to $VAR. This is not a full perl eval,\nbut sort of a &quot;&quot;psuedo&quot;&quot; eval useful for\nsimple expressions while keeping the same variable name\nspace. See below for a full-blown export to perl.</p>\n\n<p style=\"margin-left:11%;\">@perleval STUFF@</p>\n\n<p style=\"margin-left:22%;\">evaluates STUFF directly in\nperl. Note that all mib2c variables interpereted within\n.conf files are in $vars{NAME} and that a warning will be\nprinted if STUFF does not return 0. (adding a &rsquo;return\n0;&rsquo; at the end of STUFF is a workaround.</p>\n\n<p style=\"margin-left:11%;\">@startperl@ <br>\n@endperl@</p>\n\n<p style=\"margin-left:22%;\">treats everything between these\ntags as perl code, and evaluates it.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>@next@</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>restart foreach; should only be used inside a\nconditional. skips out of current conditional, then\ncontinues to skip to end for the current foreach clause.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">@if expression@</p>\n\n<p style=\"margin-left:22%;\">evaluates expression, and if\nexpression is true processes contained part until\nappropriate @end@ is reached. If the expression is false,\nthe next @elsif expression@ expression (if it exists) will\nbe evaluated, until an expression is true. If no such\nexpression exists and an @else@ clause is found, it will be\nevaluated.</p>\n\n<p style=\"margin-left:11%;\">@ifconf file@</p>\n\n<p style=\"margin-left:22%;\">If the specified file can be\nfound in the conf file search path, and if found processes\ncontained part until an appropriate @end@ is found. As with\na regular @if expression@, @elsif expression@ and @else@ can\nbe used.</p>\n\n<p style=\"margin-left:11%;\">@ifdir dir@</p>\n\n<p style=\"margin-left:22%;\">If the specified directory\nexists, process contained part until an appropriate @end@ is\nfound. As with a regular @if expression@, @elsif expression@\nand @else@ can be used.</p>\n\n<p style=\"margin-left:11%;\">@define NAME@ <br>\n@enddefine@</p>\n\n<p style=\"margin-left:22%;\">Memorizes\n&quot;&quot;stuff&quot;&quot; between the define and\nenddefine tags for later calling as NAME by @calldefine\nNAME@.</p>\n\n<p style=\"margin-left:11%;\">@calldefine NAME@</p>\n\n<p style=\"margin-left:22%;\">Executes stuff previously\nmemorized as NAME.</p>\n\n<p style=\"margin-left:11%;\">@printf &quot;expression&quot;\nstuff1, stuff2, ...@</p>\n\n<p style=\"margin-left:22%;\">Like all the other\nprintf&rsquo;s you know and love.</p>\n\n<p style=\"margin-left:11%;\">@run FILE@</p>\n\n<p style=\"margin-left:22%;\">Sources the contents of FILE as\na mib2c file, but does not affect current files opened.</p>\n\n<p style=\"margin-left:11%;\">@include FILE@</p>\n\n<p style=\"margin-left:22%;\">Sources the contents of FILE as\na mib2c file and appends its output to the current\noutput.</p>\n\n<p style=\"margin-left:11%;\">@prompt $var QUESTION@</p>\n\n<p style=\"margin-left:22%;\">Presents the user with\nQUESTION, expects a response and puts it in $var</p>\n\n<p style=\"margin-left:11%;\">@print STUFF@</p>\n\n<p style=\"margin-left:22%;\">Prints stuff directly to the\nusers screen (ie, not to where normal mib2c output goes)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>@quit@</p></td>\n<td width=\"2%\"></td>\n<td width=\"29%\">\n\n\n<p>Bail out (silently)</p></td>\n<td width=\"49%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>@exit@</p></td>\n<td width=\"2%\"></td>\n<td width=\"29%\">\n\n\n<p>Bail out!</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<h2>VARIABLES\n<a name=\"VARIABLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Variables in\nthe mib2c language look very similar to perl variables, in\nthat they start with a &quot;$&quot;. They can be used for\nanything you want, but most typically they&rsquo;ll hold mib\nnode names being processed by @foreach ...@ clauses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">They also have\na special properties when they are a mib node, such that\nadding special suffixes to them will allow them to be\ninterpreted in some fashion. The easiest way to understand\nthis is through an example. If the variable &rsquo;x&rsquo;\ncontained the word &rsquo;ifType&rsquo; then some magical\nthings happen. In mib2c output, anytime $x is seen it is\nreplaced with &quot;ifType&quot;. Additional suffixes can be\nused to get other aspects of that mib node though. If\n$x.objectID is seen, it&rsquo;ll be replaced by the OID for\nifType: &quot;.1.3.6.1.2.1.2.2.1.3&quot;. Other suffixes\nthat can appear after a dot are listed below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One last thing:\nyou can use things like $vartext immediately ending in some\nother text, you can use {}s to get proper expansion of only\npart of the mib2c input. IE, $xtext will produce\n&quot;$xtext&quot;, but ${x}text will produce\n&quot;ifTypetext&quot; instead. <br>\n$var.uc</p>\n\n<p style=\"margin-left:22%;\">all upper case version of\n$var</p>\n\n<p style=\"margin-left:11%;\">$var.objectID</p>\n\n<p style=\"margin-left:22%;\">dotted, fully-qualified, and\nnumeric OID</p>\n\n<p style=\"margin-left:11%;\">$var.commaoid</p>\n\n<p style=\"margin-left:22%;\">comma separated numeric OID for\narray initialization</p>\n\n<p style=\"margin-left:11%;\">$var.oidlength</p>\n\n<p style=\"margin-left:22%;\">length of the oid</p>\n\n<p style=\"margin-left:11%;\">$var.subid</p>\n\n<p style=\"margin-left:22%;\">last number component of\noid</p>\n\n<p style=\"margin-left:11%;\">$var.module</p>\n\n<p style=\"margin-left:22%;\">MIB name that the object comes\nfrom</p>\n\n<p style=\"margin-left:11%;\">$var.parent</p>\n\n<p style=\"margin-left:22%;\">contains the label of the\nparent node of $var.</p>\n\n<p style=\"margin-left:11%;\">$var.isscalar</p>\n\n<p style=\"margin-left:22%;\">returns 1 if var contains the\nname of a scalar</p>\n\n<p style=\"margin-left:11%;\">$var.iscolumn</p>\n\n<p style=\"margin-left:22%;\">returns 1 if var contains the\nname of a column</p>\n\n<p style=\"margin-left:11%;\">$var.children</p>\n\n<p style=\"margin-left:22%;\">returns 1 if var has\nchildren</p>\n\n<p style=\"margin-left:11%;\">$var.perltype</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s perl SYNTAX\n($SNMP::MIB{node}{&rsquo;syntax&rsquo;})</p>\n\n<p style=\"margin-left:11%;\">$var.type</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s ASN_XXX type\n(Net-SNMP specific #define)</p>\n\n<p style=\"margin-left:11%;\">$var.decl</p>\n\n<p style=\"margin-left:22%;\">C data type (char, u_long,\n...)</p>\n\n<p style=\"margin-left:11%;\">$var.readable</p>\n\n<p style=\"margin-left:22%;\">1 if an object is readable, 0\nif not</p>\n\n<p style=\"margin-left:11%;\">$var.settable</p>\n\n<p style=\"margin-left:22%;\">1 if an object is writable, 0\nif not</p>\n\n<p style=\"margin-left:11%;\">$var.creatable</p>\n\n<p style=\"margin-left:22%;\">1 if a column object can be\ncreated as part of a new row, 0 if not</p>\n\n<p style=\"margin-left:11%;\">$var.noaccess</p>\n\n<p style=\"margin-left:22%;\">1 if not-accessible, 0 if\nnot</p>\n\n<p style=\"margin-left:11%;\">$var.accessible</p>\n\n<p style=\"margin-left:22%;\">1 if accessible, 0 if not</p>\n\n<p style=\"margin-left:11%;\">$var.storagetype</p>\n\n<p style=\"margin-left:22%;\">1 if an object is a StorageType\nobject, 0 if not</p>\n\n<p style=\"margin-left:11%;\">$var.rowstatus</p>\n\n<p style=\"margin-left:22%;\">1 if an object is a RowStatus\nobject, 0 if not &rsquo;settable&rsquo;,\n&rsquo;creatable&rsquo;, &rsquo;lastchange&rsquo;,\n&rsquo;storagetype&rsquo; and &rsquo;rowstatus&rsquo; can\nalso be used with table variables to indicate whether it\ncontains writable, creatable, LastChange, StorageType or\nRowStatus column objects</p>\n\n<p style=\"margin-left:11%;\">$var.hasdefval</p>\n\n<p style=\"margin-left:22%;\">returns 1 if var has a DEFVAL\nclause</p>\n\n<p style=\"margin-left:11%;\">$var.defval</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s DEFVAL</p>\n\n<p style=\"margin-left:11%;\">$var.hashint</p>\n\n<p style=\"margin-left:22%;\">returns 1 if var has a HINT\nclause</p>\n\n<p style=\"margin-left:11%;\">$var.hint</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s HINT</p>\n\n<p style=\"margin-left:11%;\">$var.ranges</p>\n\n<p style=\"margin-left:22%;\">returns 1 if var has a value\nrange defined</p>\n\n<p style=\"margin-left:11%;\">$var.enums</p>\n\n<p style=\"margin-left:22%;\">returns 1 if var has enums\ndefined for it.</p>\n\n<p style=\"margin-left:11%;\">$var.access</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s access type</p>\n\n<p style=\"margin-left:11%;\">$var.status</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s status</p>\n\n<p style=\"margin-left:11%;\">$var.syntax</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s syntax</p>\n\n<p style=\"margin-left:11%;\">$var.reference</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s reference</p>\n\n<p style=\"margin-left:11%;\">$var.description</p>\n\n<p style=\"margin-left:22%;\">node&rsquo;s description</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n \n<p style=\"margin-left:11%; margin-top: 1em\">mib2c(1)</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#VARIABLES\">VARIABLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":5}