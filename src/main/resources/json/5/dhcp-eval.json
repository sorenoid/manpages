{"name":"dhcp-eval","body":"\n\n<h1 align=\"center\">dhcp-eval</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dhcp-eval - ISC\nDHCP conditional evaluation</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Internet\nSystems Consortium DHCP client and server both provide the\nability to perform conditional behavior depending on the\ncontents of packets they receive. The syntax for specifying\nthis conditional behaviour is documented here.</p>\n\n<h2>REFERENCE: CONDITIONAL BEHAVIOUR\n<a name=\"REFERENCE: CONDITIONAL BEHAVIOUR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Conditional\nbehaviour may be specified using the if statement and the\nelse or elsif statements or the switch and case statements.\nA conditional statement can appear anywhere that a regular\nstatement (e.g., an option statement) can appear, and can\nenclose one or more such statements.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CONDITIONAL\nBEHAVIOUR: IF</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A typical\nconditional if statement in a server might be:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if option\ndhcp-user-class = &quot;accounting&quot; { <br>\nmax-lease-time 17600; <br>\noption domain-name &quot;accounting.example.org&quot;; <br>\noption domain-name-servers ns1.accounting.example.org,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>ns2.accounting.example.org;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">} elsif option dhcp-user-class\n= &quot;sales&quot; { <br>\nmax-lease-time 17600; <br>\noption domain-name &quot;sales.example.org&quot;; <br>\noption domain-name-servers ns1.sales.example.org,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>ns2.sales.example.org;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">} elsif option dhcp-user-class\n= &quot;engineering&quot; { <br>\nmax-lease-time 17600; <br>\noption domain-name &quot;engineering.example.org&quot;; <br>\noption domain-name-servers ns1.engineering.example.org,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>ns2.engineering.example.org;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">} else { <br>\nmax-lease-time 600; <br>\noption domain-name &quot;misc.example.org&quot;; <br>\noption domain-name-servers ns1.misc.example.org,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>ns2.misc.example.org;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On the client\nside, an example of conditional evaluation might be:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># example.org\nfilters DNS at its firewall, so we have to use their DNS\n<br>\n# servers when we connect to their network. If we are not at\n<br>\n# example.org, prefer our own DNS server. <br>\nif not option domain-name = &quot;example.org&quot; { <br>\nprepend domain-name-servers 127.0.0.1; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <b>if</b>\nstatement and the <b>elsif</b> continuation statement both\ntake boolean expressions as their arguments. That is, they\ntake expressions that, when evaluated, produce a boolean\nresult. If the expression evaluates to true, then the\nstatements enclosed in braces following the <b>if</b>\nstatement are executed, and all subsequent <b>elsif</b> and\n<b>else</b> clauses are skipped. Otherwise, each subsequent\n<b>elsif</b> clause&rsquo;s expression is checked, until an\nelsif clause is encountered whose test evaluates to true. If\nsuch a clause is found, the statements in braces following\nit are executed, and then any subsequent <b>elsif</b> and\n<b>else</b> clauses are skipped. If all the <b>if</b> and\n<b>elsif</b> clauses are checked but none of their\nexpressions evaluate true, then if there is an <b>else</b>\nclause, the statements enclosed in braces following the\n<b>else</b> are evaluated. Boolean expressions that evaluate\nto null are treated as false in conditionals.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CONDITIONAL\nBEHAVIOUR: SWITCH</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above\nexample can be rewritten using a switch construct as\nwell.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">switch (option\ndhcp-user-class) { <br>\ncase &quot;accounting&quot;: <br>\nmax-lease-time 17600; <br>\noption domain-name &quot;accounting.example.org&quot;; <br>\noption domain-name-servers ns1.accounting.example.org,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>ns2.accounting.example.org;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">case &quot;sales&quot;: <br>\nmax-lease-time 17600; <br>\noption domain-name &quot;sales.example.org&quot;; <br>\noption domain-name-servers ns1.sales.example.org,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>ns2.sales.example.org;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">break; <br>\ncase &quot;engineering&quot;: <br>\nmax-lease-time 17600; <br>\noption domain-name &quot;engineering.example.org&quot;; <br>\noption domain-name-servers ns1.engineering.example.org,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>ns2.engineering.example.org;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">break; <br>\ndefault: <br>\nmax-lease-time 600; <br>\noption domain-name &quot;misc.example.org&quot;; <br>\noption domain-name-servers ns1.misc.example.org,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>ns2.misc.example.org;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">break; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>switch</b> statement and the <b>case</b> statements can\nboth be data expressions or numeric expressions. Within a\nswitch statement they all must be the same type. The server\nevaluates the expression from the switch statement and then\nit evaluates the expressions from the case statements until\nit finds a match.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If it finds a\nmatch it starts executing statements from that case until\nthe next break statement. If it doesn&rsquo;t find a match\nit starts from the default statement and again proceeds to\nthe next break statement. If there is no match and no\ndefault it does nothing.</p>\n\n<h2>BOOLEAN EXPRESSIONS\n<a name=\"BOOLEAN EXPRESSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nis the current list of boolean expressions that are\nsupported by the DHCP distribution.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>data-expression-1</i>\n<b>=</b> <i>data-expression-2</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The <b>=</b>\noperator compares the values of two data expressions,\nreturning true if they are the same, false if they are not.\nIf either the left-hand side or the right-hand side are\nnull, the result is also null.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>data-expression-1</i>\n<b>~=</b> <i>data-expression-2 data-expression-1</i>\n<b>~~</b> <i>data-expression-2</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The <b>~=</b>\nand <b>~~</b> operators (not available on all systems)\nperform extended regex(7) matching of the values of two data\nexpressions, returning true if <i>data-expression-1</i>\nmatches against the regular expression evaluated by\n<i>data-expression-2</i>, or false if it does not match or\nencounters some error. If either the left-hand side or the\nright-hand side are null or empty strings, the result is\nalso false. The <b>~~</b> operator differs from the\n<b>~=</b> operator in that it is case-insensitive.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>boolean-expression-1</i>\n<b>and</b> <i>boolean-expression-2</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The <b>and</b>\noperator evaluates to true if the boolean expression on the\nleft-hand side and the boolean expression on the right-hand\nside both evaluate to true. Otherwise, it evaluates to\nfalse. If either the expression on the left-hand side or the\nexpression on the right-hand side are null, the result is\nnull.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>boolean-expression-1</i>\n<b>or</b> <i>boolean-expression-2</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The <b>or</b>\noperator evaluates to true if either the boolean expression\non the left-hand side or the boolean expression on the\nright-hand side evaluate to true. Otherwise, it evaluates to\nfalse. If either the expression on the left-hand side or the\nexpression on the right-hand side are null, the result is\nnull.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>not</b>\n<i>boolean-expression</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The <b>not</b>\noperator evaluates to true if <i>boolean-expression</i>\nevaluates to false, and returns false if\n<i>boolean-expression</i> evaluates to true. If\n<i>boolean-expression</i> evaluates to null, the result is\nalso null.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>exists</b>\n<i>option-name</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>exists</b> expression returns true if the specified\noption exists in the incoming DHCP packet being\nprocessed.</p>\n\n<p style=\"margin-left:11%;\"><b>known</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>known</b> expression returns true if the client whose\nrequest is currently being processed is known - that is, if\nthere&rsquo;s a host declaration for it.</p>\n\n<p style=\"margin-left:11%;\"><b>static</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>static</b> expression returns true if the lease assigned\nto the client whose request is currently being processed is\nderived from a static address assignment.</p>\n\n<h2>DATA EXPRESSIONS\n<a name=\"DATA EXPRESSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Several of the\nboolean expressions above depend on the results of\nevaluating data expressions. A list of these expressions is\nprovided here.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>substring\n(</b><i>data-expr</i><b>,</b> <i>offset</i><b>,</b>\n<i>length</i><b>)</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>substring</b> operator evaluates the data expression and\nreturns the substring of the result of that evaluation that\nstarts <i>offset</i> bytes from the beginning, continuing\nfor <i>length</i> bytes. <i>Offset</i> and <i>length</i> are\nboth numeric expressions. If <i>data-expr</i>, <i>offset</i>\nor <i>length</i> evaluate to null, then the result is also\nnull. If <i>offset</i> is greater than or equal to the\nlength of the evaluated data, then a zero-length data string\nis returned. If <i>length is greater then the remaining\nlength of the evaluated data after offset</i>, then a data\nstring containing all data from <i>offset</i> to the end of\nthe evaluated data is returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>suffix\n(</b><i>data-expr</i><b>,</b> <i>length</i><b>)</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>suffix</b> operator evaluates <i>data-expr</i> and\nreturns the last <i>length</i> bytes of the result of that\nevaluation. <i>Length</i> is a numeric expression. If\n<i>data-expr</i> or <i>length</i> evaluate to null, then the\nresult is also null. If <i>suffix</i> evaluates to a number\ngreater than the length of the evaluated data, then the\nevaluated data is returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>lcase\n(</b><i>data-expr</i><b>)</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>lcase</b> function returns the result of evaluating\n<i>data-expr</i> converted to lower case. If\n<i>data-expr</i> evaluates to null, then the result is also\nnull.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ucase\n(</b><i>data-expr</i><b>)</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>ucase</b> function returns the result of evaluating\n<i>data-expr</i> converted to upper case. If\n<i>data-expr</i> evaluates to null, then the result is also\nnull.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>option</b>\n<i>option-name</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>option</b> operator returns the contents of the specified\noption in the packet to which the server is responding.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>config-option</b>\n<i>option-name</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>config-option</b> operator returns the value for the\nspecified option that the DHCP client or server has been\nconfigured to send.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>gethostname()</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>gethostname()</b> function returns a data string whose\ncontents are a character string, the results of calling\ngethostname() on the local system with a size limit of 255\nbytes (not including NULL terminator). This can be used for\nexample to configure dhclient to send the local hostname\nwithout knowing the local hostname at the time dhclient.conf\nis written.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>hardware</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>hardware</b> operator returns a data string whose first\nelement is the type of network interface indicated in packet\nbeing considered, and whose subsequent elements are\nclient&rsquo;s link-layer address. If there is no packet, or\nif the RFC2131 <i>hlen</i> field is invalid, then the result\nis null. Hardware types include ethernet (1), token-ring\n(6), and fddi (8). Hardware types are specified by the IETF,\nand details on how the type numbers are defined can be found\nin RFC2131 (in the ISC DHCP distribution, this is included\nin the doc/ subdirectory).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>packet\n(</b><i>offset</i><b>,</b> <i>length</i><b>)</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>packet</b> operator returns the specified portion of the\npacket being considered, or null in contexts where no packet\nis being considered. <i>Offset</i> and <i>length</i> are\napplied to the contents packet as in the <b>substring</b>\noperator.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>string</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">A string,\nenclosed in quotes, may be specified as a data expression,\nand returns the text between the quotes, encoded in ASCII.\nThe backslash (&rsquo;\\&rsquo;) character is treated\nspecially, as in C programming: &rsquo;\\t&rsquo; means TAB,\n&rsquo;\\r&rsquo; means carriage return, &rsquo;\\n&rsquo;\nmeans newline, and &rsquo;\\b&rsquo; means bell. Any octal\nvalue can be specified with &rsquo;\\nnn&rsquo;, where nnn is\nany positive octal number less than 0400. Any hexadecimal\nvalue can be specified with &rsquo;\\xnn&rsquo;, where nn is\nany positive hexadecimal number less than or equal to\n0xff.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>colon-separated\nhexadecimal list</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">A list of\nhexadecimal octet values, separated by colons, may be\nspecified as a data expression.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>concat\n(</b><i>data-expr1</i><b>, ...,</b>\n<i>data-exprN</i><b>)</b></p>\n\n<p style=\"margin-left:14%;\">The expressions are evaluated,\nand the results of each evaluation are concatenated in the\nsequence that the subexpressions are listed. If any\nsubexpression evaluates to null, the result of the\nconcatenation is null.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>reverse\n(</b><i>numeric-expr1</i><b>,</b>\n<i>data-expr2</i><b>)</b></p>\n\n<p style=\"margin-left:14%;\">The two expressions are\nevaluated, and then the result of evaluating the data\nexpression is reversed in place, using hunks of the size\nspecified in the numeric expression. For example, if the\nnumeric expression evaluates to four, and the data\nexpression evaluates to twelve bytes of data, then the\nreverse expression will evaluate to twelve bytes of data,\nconsisting of the last four bytes of the input data,\nfollowed by the middle four bytes, followed by the first\nfour bytes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>leased-address</b></p>\n\n<p style=\"margin-left:14%;\">In any context where the client\nwhose request is being processed has been assigned an IP\naddress, this data expression returns that IP address. In\nany context where the client whose request is being\nprocessed has not been assigned an ip address, if this data\nexpression is found in executable statements executed on\nthat client&rsquo;s behalf, a log message indicating\n&quot;there is no lease associated with this client&quot; is\nsyslogged to the debug level (this is considered dhcpd.conf\ndebugging information).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>binary-to-ascii\n(</b><i>numeric-expr1</i><b>,</b>\n<i>numeric-expr2</i><b>,</b> <i>data-expr1</i><b>,</b>\n<i>data-expr2</i><b>)</b></p>\n\n<p style=\"margin-left:14%;\">Converts the result of\nevaluating data-expr2 into a text string containing one\nnumber for each element of the result of evaluating\ndata-expr2. Each number is separated from the other by the\nresult of evaluating data-expr1. The result of evaluating\nnumeric-expr1 specifies the base (2 through 16) into which\nthe numbers should be converted. The result of evaluating\nnumeric-expr2 specifies the width in bits of each number,\nwhich may be either 8, 16 or 32.</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">As an example\nof the preceding three types of expressions, to produce the\nname of a PTR record for the IP address being assigned to a\nclient, one could write the following expression:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">concat\n(binary-to-ascii (10, 8, &quot;.&quot;, <br>\nreverse (1, leased-address)), <br>\n&quot;.in-addr.arpa.&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>encode-int\n(</b><i>numeric-expr</i><b>,</b> <i>width</i><b>)</b></p>\n\n<p style=\"margin-left:14%;\">Numeric-expr is evaluated and\nencoded as a data string of the specified width, in network\nbyte order (most significant byte first). If the numeric\nexpression evaluates to the null value, the result is also\nnull.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pick-first-value\n(</b><i>data-expr1</i> [ ... <i>expr</i>n ] <b>)</b></p>\n\n<p style=\"margin-left:14%;\">The pick-first-value function\ntakes any number of data expressions as its arguments. Each\nexpression is evaluated, starting with the first in the\nlist, until an expression is found that does not evaluate to\na null value. That expression is returned, and none of the\nsubsequent expressions are evaluated. If all expressions\nevaluate to a null value, the null value is returned.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>host-decl-name</b></p>\n\n<p style=\"margin-left:14%;\">The host-decl-name function\nreturns the name of the host declaration that matched the\nclient whose request is currently being processed, if any.\nIf no host declaration matched, the result is the null\nvalue.</p>\n\n<h2>NUMERIC EXPRESSIONS\n<a name=\"NUMERIC EXPRESSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Numeric\nexpressions are expressions that evaluate to an integer. In\ngeneral, the maximum size of such an integer should not be\nassumed to be representable in fewer than 32 bits, but the\nprecision of such integers may be more than 32 bits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe following operators several standard math functions are\navailable. They are: <br>\noperation symbol <br>\nadd <b>+</b> <br>\nsubtract <b>-</b> <br>\ndivide <b>/</b> <br>\nmultiply <b>*</b> <br>\nmodulus <b>%</b> <br>\nbitwise and <b>&amp;</b> <br>\nbitwise or <b>|</b> <br>\nbitwise xor <b>^</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>extract-int\n(</b><i>data-expr</i><b>,</b> <i>width</i><b>)</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>extract-int</b> operator extracts an integer value in\nnetwork byte order from the result of evaluating the\nspecified data expression. Width is the width in bits of the\ninteger to extract. Currently, the only supported widths are\n8, 16 and 32. If the evaluation of the data expression\ndoesn&rsquo;t provide sufficient bits to extract an integer\nof the specified size, the null value is returned.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>lease-time</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The duration of\nthe current lease - that is, the difference between the\ncurrent time and the time that the lease expires.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>number</i></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">Any number\nbetween zero and the maximum representable size may be\nspecified as a numeric expression.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>client-state</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The current\nstate of the client instance being processed. This is only\nuseful in DHCP client configuration files. Possible values\nare:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"14%\"></td>\n<td width=\"1%\">\n\n\n<p><i>&bull;</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Booting - DHCP client is in the INIT state, and does not\nyet have an IP address. The next message transmitted will be\na DHCPDISCOVER, which will be broadcast.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"14%\"></td>\n<td width=\"1%\">\n\n\n<p><i>&bull;</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Reboot - DHCP client is in the INIT-REBOOT state. It has\nan IP address, but is not yet using it. The next message to\nbe transmitted will be a DHCPREQUEST, which will be\nbroadcast. If no response is heard, the client will bind to\nits address and move to the BOUND state.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"14%\"></td>\n<td width=\"1%\">\n\n\n<p><i>&bull;</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Select - DHCP client is in the SELECTING state - it has\nreceived at least one DHCPOFFER message, but is waiting to\nsee if it may receive other DHCPOFFER messages from other\nservers. No messages are sent in the SELECTING state.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"14%\"></td>\n<td width=\"1%\">\n\n\n<p><i>&bull;</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Request - DHCP client is in the REQUESTING state - it\nhas received at least one DHCPOFFER message, and has chosen\nwhich one it will request. The next message to be sent will\nbe a DHCPREQUEST message, which will be broadcast.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"14%\"></td>\n<td width=\"1%\">\n\n\n<p><i>&bull;</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Bound - DHCP client is in the BOUND state - it has an IP\naddress. No messages are transmitted in this state.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"14%\"></td>\n<td width=\"1%\">\n\n\n<p><i>&bull;</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Renew - DHCP client is in the RENEWING state - it has an\nIP address, and is trying to contact the server to renew it.\nThe next message to be sent will be a DHCPREQUEST message,\nwhich will be unicast directly to the server.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"14%\"></td>\n<td width=\"1%\">\n\n\n<p><i>&bull;</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Rebind - DHCP client is in the REBINDING state - it has\nan IP address, and is trying to contact any server to renew\nit. The next message to be sent will be a DHCPREQUEST, which\nwill be broadcast.</p></td></tr>\n</table>\n\n<h2>REFERENCE: ACTION EXPRESSIONS\n<a name=\"REFERENCE: ACTION EXPRESSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>log\n(</b><i>priority</i><b>,</b> <i>data-expr</i><b>)</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">Logging\nstatements may be used to send information to the standard\nlogging channels. A logging statement includes an optional\npriority (<b>fatal</b>, <b>error</b>, <b>info</b>, or\n<b>debug</b>), and a data expression.</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">Logging\nstatements take only a single data expression argument, so\nif you want to output multiple data values, you will need to\nuse the <b>concat</b> operator to concatenate them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>execute\n(</b><i>command-path</i> <b>[,</b> <i>data-expr1</i><b>,\n...</b> <i>data-exprN</i><b>]);</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>execute</b> statement runs an external command. The first\nargument is a string literal containing the name or path of\nthe command to run. The other arguments, if present, are\neither string literals or data- expressions which evaluate\nto text strings, to be passed as command-line arguments to\nthe command.</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\"><b>execute</b>\nis synchronous; the program will block until the external\ncommand being run has finished. Please note that lengthy\nprogram execution (for example, in an &quot;on commit&quot;\nin dhcpd.conf) may result in bad performance and timeouts.\nOnly external applications with very short execution times\nare suitable for use.</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">Passing\nuser-supplied data to an external application might be\ndangerous. Make sure the external application checks input\nbuffers for validity. Non-printable ASCII characters will be\nconverted into dhcpd.conf language octal escapes\n(&quot;\\nnn&quot;), make sure your external command handles\nthem as such.</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">It is possible\nto use the execute statement in any context, not only on\nevents. If you put it in a regular scope in the\nconfiguration file you will execute that command every time\na scope is evaluated.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>parse-vendor-option;</b></p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>parse-vendor-option</b> statement attempts to parse a\nvendor option (code 43). It is only useful while processing\na packet on the server and requires that the administrator\nhas already used the <b>vendor-option-space</b> statement to\nselect a valid vendor space.</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">This\nfunctionality may be used if the server needs to take\ndifferent actions depending on the values the client placed\nin the vendor option and the sub-options are not at fixed\nlocations. It is handled as an action to allow an\nadministrator to examine the incoming options and choose the\ncorrect vendor space.</p>\n\n<h2>REFERENCE: DYNAMIC DNS UPDATES\n<a name=\"REFERENCE: DYNAMIC DNS UPDATES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the\ndhcpd.conf and dhclient.conf man pages for more information\nabout DDNS.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dhcpd.conf(5),\ndhcpd.leases(5), dhclient.conf(5), dhcp-options(5),\ndhcpd(8), dhclient(8), RFC2132, RFC2131.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Information\nabout Internet Systems Consortium can be found at\n<b>https://www.isc.org.</b></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#REFERENCE: CONDITIONAL BEHAVIOUR\">REFERENCE: CONDITIONAL BEHAVIOUR</a>","<a href=\"#BOOLEAN EXPRESSIONS\">BOOLEAN EXPRESSIONS</a>","<a href=\"#DATA EXPRESSIONS\">DATA EXPRESSIONS</a>","<a href=\"#NUMERIC EXPRESSIONS\">NUMERIC EXPRESSIONS</a>","<a href=\"#REFERENCE: ACTION EXPRESSIONS\">REFERENCE: ACTION EXPRESSIONS</a>","<a href=\"#REFERENCE: DYNAMIC DNS UPDATES\">REFERENCE: DYNAMIC DNS UPDATES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":5}