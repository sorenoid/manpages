{"name":"modprobe.d","description":"modprobe.d - Configuration directory for modprobe","body":"\n\n<h1 align=\"center\">MODPROBE.D</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">modprobe.d -\nConfiguration directory for modprobe</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/lib/modprobe.d/*.conf</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/usr/local/lib/modprobe.d/*.conf</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/run/modprobe.d/*.conf</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/modprobe.d/*.conf</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because the\n<b>modprobe</b> command can add or remove more than one\nmodule, due to modules having dependencies, we need a method\nof specifying what options are to be used with those\nmodules. All files underneath the /etc/modprobe.d directory\nwhich end with the .conf extension specify those options as\nrequired. They can also be used to create convenient\naliases: alternate names for a module, or they can override\nthe normal <b>modprobe</b> behavior altogether for those\nwith special requirements (such as inserting more than one\nmodule).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nmodule and alias names (like other module names) can have -\nor _ in them: both are interchangeable throughout all the\nmodule commands as underscore conversion happens\nautomatically.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The format of\nfiles under modprobe.d is simple: one command per line, with\nblank lines and lines starting with '#' ignored (useful for\nadding comments). A '\\' at the end of a line causes it to\ncontinue on the next line, which makes the file a bit\nneater.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">alias\n<i>wildcard modulename</i></p>\n\n<p style=\"margin-left:17%;\">This allows you to give\nalternate names for a module. For example: &quot;alias\nmy-mod really_long_modulename&quot; means you can use\n&quot;modprobe my-mod&quot; instead of &quot;modprobe\nreally_long_modulename&quot;. You can also use shell-style\nwildcards, so &quot;alias my-mod*\nreally_long_modulename&quot; means that &quot;modprobe\nmy-mod-something&quot; has the same effect. You can't have\naliases to other aliases (that way lies madness), but\naliases can have options, which will be added to any other\noptions.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nmodules can also contain their own aliases, which you can\nsee using <b>modinfo</b>. These aliases are used as a last\nresort (ie. if there is no real module, <b>install</b>,\n<b>remove</b>, or <b>alias</b> command in the\nconfiguration).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">blacklist\n<i>modulename</i></p>\n\n<p style=\"margin-left:17%;\">Modules can contain their own\naliases: usually these are aliases describing the devices\nthey support, such as &quot;pci:123...&quot;. These\n&quot;internal&quot; aliases can be overridden by normal\n&quot;alias&quot; keywords, but there are cases where two or\nmore modules both support the same devices, or a module\ninvalidly claims to support a device that it does not: the\n<b>blacklist</b> keyword indicates that all of that\nparticular module's internal aliases are to be ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">install\n<i>modulename command...</i></p>\n\n<p style=\"margin-left:17%;\">This command instructs\n<b>modprobe</b> to run your command instead of inserting the\nmodule in the kernel as normal. The command can be any shell\ncommand: this allows you to do any kind of complex\nprocessing you might wish. For example, if the module\n&quot;fred&quot; works better with the module\n&quot;barney&quot; already installed (but it doesn't depend\non it, so <b>modprobe</b> won't automatically load it), you\ncould say &quot;install fred /sbin/modprobe barney;\n/sbin/modprobe --ignore-install fred&quot;, which would do\nwhat you wanted. Note the <b>--ignore-install</b>, which\nstops the second <b>modprobe</b> from running the same\n<b>install</b> command again. See also <b>remove</b>\nbelow.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The long term\nfuture of this command as a solution to the problem of\nproviding additional module dependencies is not assured and\nit is intended to replace this command with a warning about\nits eventual removal or deprecation at some point in a\nfuture release. Its use complicates the automated\ndetermination of module dependencies by distribution\nutilities, such as mkinitrd (because these now need to\nsomehow interpret what the <b>install</b> commands might be\ndoing. In a perfect world, modules would provide all\ndependency information without the use of this command and\nwork is underway to implement soft dependency support within\nthe Linux kernel.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you use the\nstring &quot;$CMDLINE_OPTS&quot; in the command, it will be\nreplaced by any options specified on the modprobe command\nline. This can be useful because users expect &quot;modprobe\nfred opt=1&quot; to pass the &quot;opt=1&quot; arg to the\nmodule, even if there's an install command in the\nconfiguration file. So our above example becomes\n&quot;install fred /sbin/modprobe barney; /sbin/modprobe\n--ignore-install fred $CMDLINE_OPTS&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">options\n<i>modulename option...</i></p>\n\n<p style=\"margin-left:17%;\">This command allows you to add\noptions to the module <i>modulename</i> (which might be an\nalias) every time it is inserted into the kernel: whether\ndirectly (using <b>modprobe</b> <i>modulename</i>) or\nbecause the module being inserted depends on this\nmodule.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">All options are\nadded together: they can come from an <b>option</b> for the\nmodule itself, for an alias, and on the command line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">remove\n<i>modulename command...</i></p>\n\n<p style=\"margin-left:17%;\">This is similar to the\n<b>install</b> command above, except it is invoked when\n&quot;modprobe -r&quot; is run.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">softdep\n<i>modulename</i> pre: <i>modules...</i> post:\n<i>modules...</i></p>\n\n<p style=\"margin-left:17%;\">The <b>softdep</b> command\nallows you to specify soft, or optional, module\ndependencies. <i>modulename</i> can be used without these\noptional modules installed, but usually with some features\nmissing. For example, a driver for a storage HBA might\nrequire another module be loaded in order to use management\nfeatures.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">pre-deps and\npost-deps modules are lists of names and/or aliases of other\nmodules that modprobe will attempt to install (or remove) in\norder before and after the main module given in the\n<i>modulename</i> argument.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example: Assume\n&quot;softdep c pre: a b post: d e&quot; is provided in the\nconfiguration. Running &quot;modprobe c&quot; is now\nequivalent to &quot;modprobe a b c d e&quot; without the\nsoftdep. Flags such as --use-blacklist are applied to all\nthe specified modules, while module parameters only apply to\nmodule c.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: if there\nare <b>install</b> or <b>remove</b> commands with the same\n<i>modulename</i> argument, <b>softdep</b> takes\nprecedence.</p>\n\n<h2>COMPATIBILITY\n<a name=\"COMPATIBILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A future\nversion of kmod will come with a strong warning to avoid use\nof the <b>install</b> as explained above. This will happen\nonce support for soft dependencies in the kernel is\ncomplete. That support will complement the existing softdep\nsupport within this utility by providing such dependencies\ndirectly within the modules.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage originally Copyright 2004, Rusty Russell, IBM\nCorporation. Maintained by Jon Masters and others.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>modprobe</b>(8),\n<b>modules.dep</b>(5)</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Jon\nMasters</b> &lt;jcm@jonmasters.org&gt;</p>\n\n<p style=\"margin-left:17%;\">Developer</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Robby\nWorkman</b> &lt;rworkman@slackware.com&gt;</p>\n\n<p style=\"margin-left:17%;\">Developer</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Lucas De\nMarchi</b> &lt;lucas.de.marchi@gmail.com&gt;</p>\n \n<p style=\"margin-left:17%;\">Developer</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#COMPATIBILITY\">COMPATIBILITY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>"],"level":5}