{"name":"pam.conf","description":"pam.conf, pam.d - PAM configuration files","body":"\n\n<h1 align=\"center\">PAM.CONF</h1>\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pam.conf, pam.d\n- PAM configuration files</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a\n<i>PAM</i> aware privilege granting application is started,\nit activates its attachment to the PAM-API. This activation\nperforms a number of tasks, the most important being the\nreading of the configuration file(s): /etc/pam.conf.\nAlternatively, this may be the contents of the /etc/pam.d/\ndirectory. The presence of this directory will cause\nLinux-PAM to ignore /etc/pam.conf.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These files\nlist the <i>PAM</i>s that will do the authentication tasks\nrequired by this service, and the appropriate behavior of\nthe PAM-API in the event that individual <i>PAM</i>s\nfail.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The syntax of\nthe /etc/pam.conf configuration file is as follows. The file\nis made up of a list of rules, each rule is typically placed\non a single line, but may be extended with an escaped end of\nline: &rsquo;\\&lt;LF&gt;'. Comments are preceded with\n&rsquo;#' marks and extend to the next end of line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The format of\neach rule is a space separated collection of tokens, the\nfirst three being case-insensitive:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>service type\ncontrol module-path module-arguments</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The syntax of\nfiles contained in the /etc/pam.d/ directory, are identical\nexcept for the absence of any <i>service</i> field. In this\ncase, the <i>service</i> is the name of the file in the\n/etc/pam.d/ directory. This filename must be in lower\ncase.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An important\nfeature of <i>PAM</i>, is that a number of rules may be\n<i>stacked</i> to combine the services of a number of PAMs\nfor a given authentication task.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>service</i> is typically the familiar name of the\ncorresponding application: <i>login</i> and <i>su</i> are\ngood examples. The <i>service</i>-name, <i>other</i>, is\nreserved for giving <i>default</i> rules. Only lines that\nmention the current service (or in the absence of such, the\n<i>other</i> entries) will be associated with the given\nservice-application.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>type</i>\nis the management group that the rule corresponds to. It is\nused to specify which of the management groups the\nsubsequent module is to be associated with. Valid entries\nare:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">account</p>\n\n<p style=\"margin-left:17%;\">this module type performs\nnon-authentication based account management. It is typically\nused to restrict/permit access to a service based on the\ntime of day, currently available system resources (maximum\nnumber of users) or perhaps the location of the applicant\nuser -- 'root' login only on the console.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">auth</p>\n\n<p style=\"margin-left:17%;\">this module type provides two\naspects of authenticating the user. Firstly, it establishes\nthat the user is who they claim to be, by instructing the\napplication to prompt the user for a password or other means\nof identification. Secondly, the module can grant group\nmembership or other privileges through its credential\ngranting properties.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">password</p>\n\n<p style=\"margin-left:17%;\">this module type is required\nfor updating the authentication token associated with the\nuser. Typically, there is one module for each\n'challenge/response' based authentication (auth) type.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">session</p>\n\n<p style=\"margin-left:17%;\">this module type is associated\nwith doing things that need to be done for the user\nbefore/after they can be given service. Such things include\nthe logging of information concerning the opening/closing of\nsome data exchange with a user, mounting directories,\netc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<i>type</i> value from the list above is prepended with a\n<i>-</i> character the PAM library will not log to the\nsystem log if it is not possible to load the module because\nit is missing in the system. This can be useful especially\nfor modules which are not always installed on the system and\nare not required for correct authentication and\nauthorization of the login session.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The third\nfield, <i>control</i>, indicates the behavior of the PAM-API\nshould the module fail to succeed in its authentication\ntask. There are two types of syntax for this control field:\nthe simple one has a single simple keyword; the more\ncomplicated one involves a square-bracketed selection of\n<i>value=action</i> pairs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the simple\n(historical) syntax valid <i>control</i> values are:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">required</p>\n\n<p style=\"margin-left:17%;\">failure of such a PAM will\nultimately lead to the PAM-API returning failure but only\nafter the remaining <i>stacked</i> modules (for this\n<i>service</i> and <i>type</i>) have been invoked.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">requisite</p>\n\n<p style=\"margin-left:17%;\">like <i>required</i>, however,\nin the case that such a module returns a failure, control is\ndirectly returned to the application or to the superior PAM\nstack. The return value is that associated with the first\nrequired or requisite module to fail. Note, this flag can be\nused to protect against the possibility of a user getting\nthe opportunity to enter a password over an unsafe medium.\nIt is conceivable that such behavior might inform an\nattacker of valid accounts on a system. This possibility\nshould be weighed against the not insignificant concerns of\nexposing a sensitive password in a hostile environment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sufficient</p>\n\n<p style=\"margin-left:17%;\">if such a module succeeds and\nno prior <i>required</i> module has failed the PAM framework\nreturns success to the application or to the superior PAM\nstack immediately without calling any further modules in the\nstack. A failure of a <i>sufficient</i> module is ignored\nand processing of the PAM module stack continues\nunaffected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">optional</p>\n\n<p style=\"margin-left:17%;\">the success or failure of this\nmodule is only important if it is the only module in the\nstack associated with this <i>service</i>+<i>type</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">include</p>\n\n<p style=\"margin-left:17%;\">include all lines of given type\nfrom the configuration file specified as an argument to this\ncontrol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">substack</p>\n\n<p style=\"margin-left:17%;\">include all lines of given type\nfrom the configuration file specified as an argument to this\ncontrol. This differs from <i>include</i> in that evaluation\nof the <i>done</i> and <i>die</i> actions in a substack does\nnot cause skipping the rest of the complete module stack,\nbut only of the substack. Jumps in a substack also can not\nmake evaluation jump out of it, and the whole substack is\ncounted as one module when the jump is done in a parent\nstack. The <i>reset</i> action will reset the state of a\nmodule stack to the state it was in as of beginning of the\nsubstack evaluation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the more\ncomplicated syntax valid <i>control</i> values have the\nfollowing form:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">[value1=action1\nvalue2=action2 ...]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Where\n<i>valueN</i> corresponds to the return code from the\nfunction invoked in the module for which the line is\ndefined. It is selected from one of these: <i>success</i>,\n<i>open_err</i>, <i>symbol_err</i>, <i>service_err</i>,\n<i>system_err</i>, <i>buf_err</i>, <i>perm_denied</i>,\n<i>auth_err</i>, <i>cred_insufficient</i>,\n<i>authinfo_unavail</i>, <i>user_unknown</i>,\n<i>maxtries</i>, <i>new_authtok_reqd</i>,\n<i>acct_expired</i>, <i>session_err</i>,\n<i>cred_unavail</i>, <i>cred_expired</i>, <i>cred_err</i>,\n<i>no_module_data</i>, <i>conv_err</i>, <i>authtok_err</i>,\n<i>authtok_recover_err</i>, <i>authtok_lock_busy</i>,\n<i>authtok_disable_aging</i>, <i>try_again</i>,\n<i>ignore</i>, <i>abort</i>, <i>authtok_expired</i>,\n<i>module_unknown</i>, <i>bad_item</i>, <i>conv_again</i>,\n<i>incomplete</i>, and <i>default</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The last of\nthese, <i>default</i>, implies 'all <i>valueN</i>'s not\nmentioned explicitly. Note, the full list of PAM errors is\navailable in /usr/include/security/_pam_types.h. The\n<i>actionN</i> can take one of the following forms:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ignore</p>\n\n<p style=\"margin-left:17%;\">when used with a stack of\nmodules, the module's return status will not contribute to\nthe return code the application obtains.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">bad</p>\n\n<p style=\"margin-left:17%;\">this action indicates that the\nreturn code should be thought of as indicative of the module\nfailing. If this module is the first in the stack to fail,\nits status value will be used for that of the whole\nstack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">die</p>\n\n<p style=\"margin-left:17%;\">equivalent to bad with the side\neffect of terminating the module stack and PAM immediately\nreturning to the application.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ok</p>\n\n<p style=\"margin-left:17%;\">this tells PAM that the\nadministrator thinks this return code should contribute\ndirectly to the return code of the full stack of modules. In\nother words, if the former state of the stack would lead to\na return of <i>PAM_SUCCESS</i>, the module's return code\nwill override this value. Note, if the former state of the\nstack holds some value that is indicative of a modules\nfailure, this 'ok' value will not be used to override that\nvalue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">done</p>\n\n<p style=\"margin-left:17%;\">equivalent to ok with the side\neffect of terminating the module stack and PAM immediately\nreturning to the application.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">N (an unsigned\ninteger)</p>\n\n<p style=\"margin-left:17%;\">jump over the next N modules in\nthe stack. Note that N equal to 0 is not allowed, it would\nbe treated as <i>ignore</i> in such case. The side effect\ndepends on the PAM function call: for\n<i>pam_authenticate</i>, <i>pam_acct_mgmt</i>,\n<i>pam_chauthtok</i>, and <i>pam_open_session</i> it is\n<i>ignore</i>; for <i>pam_setcred</i> and\n<i>pam_close_session</i> it is one of <i>ignore</i>,\n<i>ok</i>, or <i>bad</i> depending on the module's return\nvalue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">reset</p>\n\n<p style=\"margin-left:17%;\">clear all memory of the state\nof the module stack and start again with the next stacked\nmodule.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of the\nfour keywords: required; requisite; sufficient; and\noptional, have an equivalent expression in terms of the\n[...] syntax. They are as follows:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">required</p>\n\n<p style=\"margin-left:17%;\">[success=ok new_authtok_reqd=ok\nignore=ignore default=bad]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">requisite</p>\n\n<p style=\"margin-left:17%;\">[success=ok new_authtok_reqd=ok\nignore=ignore default=die]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sufficient</p>\n\n<p style=\"margin-left:17%;\">[success=done\nnew_authtok_reqd=done default=ignore]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">optional</p>\n\n<p style=\"margin-left:17%;\">[success=ok new_authtok_reqd=ok\ndefault=ignore]</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>module-path</i>\nis either the full filename of the PAM to be used by the\napplication (it begins with a '/'), or a relative pathname\nfrom the default module location: /lib/security/ or\n/lib64/security/, depending on the architecture.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>module-arguments</i>\nare a space separated list of tokens that can be used to\nmodify the specific behavior of the given PAM. Such\narguments will be documented for each individual module.\nNote, if you wish to include spaces in an argument, you\nshould surround that argument with square brackets.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">squid auth\nrequired pam_mysql.so user=passwd_query passwd=mada \\ <br>\ndb=eminence [query=select user_name from internet_service \\\n<br>\nwhere user_name='%u' and password=PASSWORD('%p') and \\ <br>\nservice='web_proxy']</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using this\nconvention, you can include &rsquo;[' characters inside the\nstring, and if you wish to include a &rsquo;]' character\ninside the string that will survive the argument parsing,\nyou should use &rsquo;\\]'. In other words:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[..[..\\]..]\n--&gt; ..[..]..</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any line in\n(one of) the configuration file(s), that is not formatted\ncorrectly, will generally tend (erring on the side of\ncaution) to make the authentication process fail. A\ncorresponding error is written to the system log files with\na call to <a href=\"https://man.page/3/syslog\">syslog(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">More flexible\nthan the single configuration file is it to configure libpam\nvia the contents of the /etc/pam.d/ directory. In this case\nthe directory is filled with files each of which has a\nfilename equal to a service-name (in lower-case): it is the\npersonal configuration file for the named service.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The syntax of\neach file in /etc/pam.d/ is similar to that of the\n/etc/pam.conf file and is made up of lines of the following\nform:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">type control\nmodule-path module-arguments</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The only\ndifference being that the service-name is not present. The\nservice-name is of course the name of the given\nconfiguration file. For example, /etc/pam.d/login contains\nthe configuration for the <b>login</b> service.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/pam\">pam(3)</a>,\n<b>PAM</b>(8), <a href=\"https://man.page/3/pam_start\">pam_start(3)</a></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":5}