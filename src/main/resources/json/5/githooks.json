{"name":"githooks","description":"githooks - Hooks used by Git","body":"\n\n<h1 align=\"center\">GITHOOKS</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">githooks -\nHooks used by Git</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$GIT_DIR/hooks/*\n(or &rsquo;git config core.hooksPath&rsquo;/*)</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Hooks are\nprograms you can place in a hooks directory to trigger\nactions at certain points in git&rsquo;s execution. Hooks\nthat don&rsquo;t have the executable bit set are\nignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default the\nhooks directory is <b>$GIT_DIR/hooks</b>, but that can be\nchanged via the <b>core.hooksPath</b> configuration variable\n(see <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before Git\ninvokes a hook, it changes its working directory to either\n$GIT_DIR in a bare repository or the root of the working\ntree in a non-bare repository. An exception are hooks\ntriggered during a push (<i>pre-receive</i>, <i>update</i>,\n<i>post-receive</i>, <i>post-update</i>,\n<i>push-to-checkout</i>) which are always executed in\n$GIT_DIR.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Hooks can get\ntheir arguments via the environment, command-line arguments,\nand stdin. See the documentation for each hook below for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git init</b>\nmay copy hooks to the new repository, depending on its\nconfiguration. See the &quot;TEMPLATE DIRECTORY&quot;\nsection in <a href=\"https://man.page/1/git-init\">git-init(1)</a> for details. When the rest of\nthis document refers to &quot;default hooks&quot; it&rsquo;s\ntalking about the default template shipped with Git.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The currently\nsupported hooks are described below.</p>\n\n<h2>HOOKS\n<a name=\"HOOKS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>applypatch-msg</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-am\">git-am(1)</a>. It takes a single\nparameter, the name of the file that holds the proposed\ncommit log message. Exiting with a non-zero status causes\n<b>git am</b> to abort before applying the patch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The hook is\nallowed to edit the message file in place, and can be used\nto normalize the message into some project standard format.\nIt can also be used to refuse the commit after inspecting\nthe message file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\n<i>applypatch-msg</i> hook, when enabled, runs the\n<i>commit-msg</i> hook, if the latter is enabled.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pre-applypatch</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-am\">git-am(1)</a>. It takes no\nparameter, and is invoked after the patch is applied, but\nbefore a commit is made.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If it exits\nwith non-zero status, then the working tree will not be\ncommitted after applying the patch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It can be used\nto inspect the current working tree and refuse to make a\ncommit if it does not pass certain test.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\n<i>pre-applypatch</i> hook, when enabled, runs the\n<i>pre-commit</i> hook, if the latter is enabled.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>post-applypatch</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-am\">git-am(1)</a>. It takes no\nparameter, and is invoked after the patch is applied and a\ncommit is made.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook is\nmeant primarily for notification, and cannot affect the\noutcome of <b>git am</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pre-commit</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-commit\">git-commit(1)</a>, and can be\nbypassed with the <b>--no-verify</b> option. It takes no\nparameters, and is invoked before obtaining the proposed\ncommit log message and making a commit. Exiting with a\nnon-zero status from this script causes the <b>git\ncommit</b> command to abort before creating a commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\n<i>pre-commit</i> hook, when enabled, catches introduction\nof lines with trailing whitespaces and aborts the commit\nwhen such a line is found.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All the <b>git\ncommit</b> hooks are invoked with the environment variable\n<b>GIT_EDITOR=:</b> if the command will not bring up an\neditor to modify the commit message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\n<i>pre-commit</i> hook, when enabled&mdash;and with the\n<b>hooks.allownonascii</b> config option unset or set to\nfalse&mdash;prevents the use of non-ASCII filenames.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pre-merge-commit</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-merge\">git-merge(1)</a>, and can be\nbypassed with the <b>--no-verify</b> option. It takes no\nparameters, and is invoked after the merge has been carried\nout successfully and before obtaining the proposed commit\nlog message to make a commit. Exiting with a non-zero status\nfrom this script causes the <b>git merge</b> command to\nabort before creating a commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\n<i>pre-merge-commit</i> hook, when enabled, runs the\n<i>pre-commit</i> hook, if the latter is enabled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook is\ninvoked with the environment variable <b>GIT_EDITOR=:</b> if\nthe command will not bring up an editor to modify the commit\nmessage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the merge\ncannot be carried out automatically, the conflicts need to\nbe resolved and the result committed separately (see\n<a href=\"https://man.page/1/git-merge\">git-merge(1)</a>). At that point, this hook will not be\nexecuted, but the <i>pre-commit</i> hook will, if it is\nenabled.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>prepare-commit-msg</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-commit\">git-commit(1)</a> right after\npreparing the default log message, and before the editor is\nstarted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It takes one to\nthree parameters. The first is the name of the file that\ncontains the commit log message. The second is the source of\nthe commit message, and can be: <b>message</b> (if a\n<b>-m</b> or <b>-F</b> option was given); <b>template</b>\n(if a <b>-t</b> option was given or the configuration option\n<b>commit.template</b> is set); <b>merge</b> (if the commit\nis a merge or a <b>.git/MERGE_MSG</b> file exists);\n<b>squash</b> (if a <b>.git/SQUASH_MSG</b> file exists); or\n<b>commit</b>, followed by a commit object name (if a\n<b>-c</b>, <b>-C</b> or <b>--amend</b> option was\ngiven).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the exit\nstatus is non-zero, <b>git commit</b> will abort.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The purpose of\nthe hook is to edit the message file in place, and it is not\nsuppressed by the <b>--no-verify</b> option. A non-zero exit\nmeans a failure of the hook and aborts the commit. It should\nnot be used as replacement for pre-commit hook.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The sample\n<b>prepare-commit-msg</b> hook that comes with Git removes\nthe help message found in the commented portion of the\ncommit template.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>commit-msg</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-commit\">git-commit(1)</a> and\n<a href=\"https://man.page/1/git-merge\">git-merge(1)</a>, and can be bypassed with the\n<b>--no-verify</b> option. It takes a single parameter, the\nname of the file that holds the proposed commit log message.\nExiting with a non-zero status causes the command to\nabort.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The hook is\nallowed to edit the message file in place, and can be used\nto normalize the message into some project standard format.\nIt can also be used to refuse the commit after inspecting\nthe message file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\n<i>commit-msg</i> hook, when enabled, detects duplicate\n<b>Signed-off-by</b> trailers, and aborts the commit if one\nis found.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>post-commit</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-commit\">git-commit(1)</a>. It takes no\nparameters, and is invoked after a commit is made.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook is\nmeant primarily for notification, and cannot affect the\noutcome of <b>git commit</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pre-rebase</b>\n<br>\nThis hook is called by <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a> and can be used\nto prevent a branch from getting rebased. The hook may be\ncalled with one or two parameters. The first parameter is\nthe upstream from which the series was forked. The second\nparameter is the branch being rebased, and is not set when\nrebasing the current branch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>post-checkout</b>\n<br>\nThis hook is invoked when a <a href=\"https://man.page/1/git-checkout\">git-checkout(1)</a> or\n<a href=\"https://man.page/1/git-switch\">git-switch(1)</a> is run after having updated the\nworktree. The hook is given three parameters: the ref of the\nprevious HEAD, the ref of the new HEAD (which may or may not\nhave changed), and a flag indicating whether the checkout\nwas a branch checkout (changing branches, flag=1) or a file\ncheckout (retrieving a file from the index, flag=0). This\nhook cannot affect the outcome of <b>git switch</b> or\n<b>git checkout</b>, other than that the hook&rsquo;s exit\nstatus becomes the exit status of these two commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is also run\nafter <a href=\"https://man.page/1/git-clone\">git-clone(1)</a>, unless the <b>--no-checkout</b>\n(<b>-n</b>) option is used. The first parameter given to the\nhook is the null-ref, the second the ref of the new HEAD and\nthe flag is always 1. Likewise for <b>git worktree add</b>\nunless <b>--no-checkout</b> is used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook can\nbe used to perform repository validity checks, auto-display\ndifferences from the previous HEAD if different, or set\nworking dir metadata properties.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>post-merge</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-merge\">git-merge(1)</a>, which happens\nwhen a <b>git pull</b> is done on a local repository. The\nhook takes a single parameter, a status flag specifying\nwhether or not the merge being done was a squash merge. This\nhook cannot affect the outcome of <b>git merge</b> and is\nnot executed, if the merge failed due to conflicts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook can\nbe used in conjunction with a corresponding pre-commit hook\nto save and restore any form of metadata associated with the\nworking tree (e.g.: permissions/ownership, ACLS, etc). See\ncontrib/hooks/setgitperms.perl for an example of how to do\nthis.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pre-push</b>\n<br>\nThis hook is called by <a href=\"https://man.page/1/git-push\">git-push(1)</a> and can be used to\nprevent a push from taking place. The hook is called with\ntwo parameters which provide the name and location of the\ndestination remote, if a named remote is not being used both\nvalues will be the same.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Information\nabout what is to be pushed is provided on the hook&rsquo;s\nstandard input with lines of the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;local\nref&gt; SP &lt;local object name&gt; SP &lt;remote ref&gt;\nSP &lt;remote object name&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For instance,\nif the command <b>git push origin master:foreign</b> were\nrun the hook would receive a line like the following:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">refs/heads/master\n67890 refs/heads/foreign 12345</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">although the\nfull object name would be supplied. If the foreign ref does\nnot yet exist the <b>&lt;remote object name&gt;</b> will be\nthe all-zeroes object name. If a ref is to be deleted, the\n<b>&lt;local ref&gt;</b> will be supplied as <b>(delete)</b>\nand the <b>&lt;local object name&gt;</b> will be the\nall-zeroes object name. If the local commit was specified by\nsomething other than a name which could be expanded (such as\n<b>HEAD~</b>, or an object name) it will be supplied as it\nwas originally given.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If this hook\nexits with a non-zero status, <b>git push</b> will abort\nwithout pushing anything. Information about why the push is\nrejected may be sent to the user by writing to standard\nerror.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pre-receive</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a> when it\nreacts to <b>git push</b> and updates reference(s) in its\nrepository. Just before starting to update refs on the\nremote repository, the pre-receive hook is invoked. Its exit\nstatus determines the success or failure of the update.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook\nexecutes once for the receive operation. It takes no\narguments, but for each ref to be updated it receives on\nstandard input a line of the format:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;old-value&gt;\nSP &lt;new-value&gt; SP &lt;ref-name&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n<b>&lt;old-value&gt;</b> is the old object name stored in\nthe ref, <b>&lt;new-value&gt;</b> is the new object name to\nbe stored in the ref and <b>&lt;ref-name&gt;</b> is the full\nname of the ref. When creating a new ref,\n<b>&lt;old-value&gt;</b> is the all-zeroes object name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the hook\nexits with non-zero status, none of the refs will be\nupdated. If the hook exits with zero, updating of individual\nrefs can still be prevented by the <i>update</i> hook.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both standard\noutput and standard error output are forwarded to <b>git\nsend-pack</b> on the other end, so you can simply\n<b>echo</b> messages for the user.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The number of\npush options given on the command line of <b>git push\n--push-option=...</b> can be read from the environment\nvariable <b>GIT_PUSH_OPTION_COUNT</b>, and the options\nthemselves are found in <b>GIT_PUSH_OPTION_0</b>,\n<b>GIT_PUSH_OPTION_1</b>,... If it is negotiated to not use\nthe push options phase, the environment variables will not\nbe set. If the client selects to use push options, but\ndoesn&rsquo;t transmit any, the count variable will be set\nto zero, <b>GIT_PUSH_OPTION_COUNT=0</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the section\non &quot;Quarantine Environment&quot; in\n<a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a> for some caveats.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>update</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a> when it\nreacts to <b>git push</b> and updates reference(s) in its\nrepository. Just before updating the ref on the remote\nrepository, the update hook is invoked. Its exit status\ndetermines the success or failure of the ref update.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The hook\nexecutes once for each ref to be updated, and takes three\nparameters:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; the name\nof the ref being updated,</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; the old\nobject name stored in the ref,</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; and the\nnew object name to be stored in the ref.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A zero exit\nfrom the update hook allows the ref to be updated. Exiting\nwith a non-zero status prevents <b>git receive-pack</b> from\nupdating that ref.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook can\nbe used to prevent <i>forced</i> update on certain refs by\nmaking sure that the object name is a commit object that is\na descendant of the commit object named by the old object\nname. That is, to enforce a &quot;fast-forward only&quot;\npolicy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It could also\nbe used to log the old..new status. However, it does not\nknow the entire set of branches, so it would end up firing\none e-mail per ref when used naively, though. The\n<i>post-receive</i> hook is more suited to that.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In an\nenvironment that restricts the users' access only to git\ncommands over the wire, this hook can be used to implement\naccess control without relying on filesystem ownership and\ngroup membership. See <a href=\"https://man.page/1/git-shell\">git-shell(1)</a> for how you might\nuse the login shell to restrict the user&rsquo;s access to\nonly git commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both standard\noutput and standard error output are forwarded to <b>git\nsend-pack</b> on the other end, so you can simply\n<b>echo</b> messages for the user.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\n<i>update</i> hook, when enabled&mdash;and with\n<b>hooks.allowunannotated</b> config option unset or set to\nfalse&mdash;prevents unannotated tags to be pushed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>proc-receive</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a>. If the\nserver has set the multi-valued config variable\n<b>receive.procReceiveRefs</b>, and the commands sent to\n<i>receive-pack</i> have matching reference names, these\ncommands will be executed by this hook, instead of by the\ninternal <b>execute_commands()</b> function. This hook is\nresponsible for updating the relevant references and\nreporting the results back to <i>receive-pack</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook\nexecutes once for the receive operation. It takes no\narguments, but uses a pkt-line format protocol to\ncommunicate with <i>receive-pack</i> to read commands,\npush-options and send results. In the following example for\nthe protocol, the letter <i>S</i> stands for\n<i>receive-pack</i> and the letter <i>H</i> stands for this\nhook.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Version and\nfeatures negotiation. <br>\nS: PKT-LINE(version=1\\0push-options atomic...) <br>\nS: flush-pkt <br>\nH: PKT-LINE(version=1\\0push-options...) <br>\nH: flush-pkt</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Send commands\nfrom server to the hook. <br>\nS: PKT-LINE(&lt;old-oid&gt; &lt;new-oid&gt; &lt;ref&gt;)\n<br>\nS: ... ... <br>\nS: flush-pkt <br>\n# Send push-options only if the 'push-options' feature is\nenabled. <br>\nS: PKT-LINE(push-option) <br>\nS: ... ... <br>\nS: flush-pkt</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Receive\nresult from the hook. <br>\n# OK, run this command successfully. <br>\nH: PKT-LINE(ok &lt;ref&gt;) <br>\n# NO, I reject it. <br>\nH: PKT-LINE(ng &lt;ref&gt; &lt;reason&gt;) <br>\n# Fall through, let 'receive-pack' to execute it. <br>\nH: PKT-LINE(ok &lt;ref&gt;) <br>\nH: PKT-LINE(option fall-through) <br>\n# OK, but has an alternate reference. The alternate\nreference name <br>\n# and other status can be given in option directives. <br>\nH: PKT-LINE(ok &lt;ref&gt;) <br>\nH: PKT-LINE(option refname &lt;refname&gt;) <br>\nH: PKT-LINE(option old-oid &lt;old-oid&gt;) <br>\nH: PKT-LINE(option new-oid &lt;new-oid&gt;) <br>\nH: PKT-LINE(option forced-update) <br>\nH: ... ... <br>\nH: flush-pkt</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each command\nfor the <i>proc-receive</i> hook may point to a\npseudo-reference and always has a zero-old as its old-oid,\nwhile the <i>proc-receive</i> hook may update an alternate\nreference and the alternate reference may exist already with\na non-zero old-oid. For this case, this hook will use\n&quot;option&quot; directives to report extended attributes\nfor the reference given by the leading &quot;ok&quot;\ndirective.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The report of\nthe commands of this hook should have the same order as the\ninput. The exit status of the <i>proc-receive</i> hook only\ndetermines the success or failure of the group of commands\nsent to it, unless atomic push is in use.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>post-receive</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a> when it\nreacts to <b>git push</b> and updates reference(s) in its\nrepository. It executes on the remote repository once after\nall the refs have been updated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook\nexecutes once for the receive operation. It takes no\narguments, but gets the same information as the\n<i>pre-receive</i> hook does on its standard input.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook does\nnot affect the outcome of <b>git receive-pack</b>, as it is\ncalled after the real work is done.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This supersedes\nthe <i>post-update</i> hook in that it gets both old and new\nvalues of all the refs in addition to their names.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both standard\noutput and standard error output are forwarded to <b>git\nsend-pack</b> on the other end, so you can simply\n<b>echo</b> messages for the user.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\n<i>post-receive</i> hook is empty, but there is a sample\nscript <b>post-receive-email</b> provided in the\n<b>contrib/hooks</b> directory in Git distribution, which\nimplements sending commit emails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The number of\npush options given on the command line of <b>git push\n--push-option=...</b> can be read from the environment\nvariable <b>GIT_PUSH_OPTION_COUNT</b>, and the options\nthemselves are found in <b>GIT_PUSH_OPTION_0</b>,\n<b>GIT_PUSH_OPTION_1</b>,... If it is negotiated to not use\nthe push options phase, the environment variables will not\nbe set. If the client selects to use push options, but\ndoesn&rsquo;t transmit any, the count variable will be set\nto zero, <b>GIT_PUSH_OPTION_COUNT=0</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>post-update</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a> when it\nreacts to <b>git push</b> and updates reference(s) in its\nrepository. It executes on the remote repository once after\nall the refs have been updated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It takes a\nvariable number of parameters, each of which is the name of\nref that was actually updated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This hook is\nmeant primarily for notification, and cannot affect the\noutcome of <b>git receive-pack</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>post-update</i> hook can tell what are the heads that\nwere pushed, but it does not know what their original and\nupdated values are, so it is a poor place to do log\nold..new. The <i>post-receive</i> hook does get both\noriginal and updated values of the refs. You might consider\nit instead if you need them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When enabled,\nthe default <i>post-update</i> hook runs <b>git\nupdate-server-info</b> to keep the information used by dumb\ntransports (e.g., HTTP) up to date. If you are publishing a\nGit repository that is accessible via HTTP, you should\nprobably enable this hook.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both standard\noutput and standard error output are forwarded to <b>git\nsend-pack</b> on the other end, so you can simply\n<b>echo</b> messages for the user.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>reference-transaction</b>\n<br>\nThis hook is invoked by any Git command that performs\nreference updates. It executes whenever a reference\ntransaction is prepared, committed or aborted and may thus\nget called multiple times. The hook does not cover symbolic\nreferences (but that may change in the future).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The hook takes\nexactly one argument, which is the current state the given\nreference transaction is in:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&quot;prepared&quot;: All reference updates have been queued\nto the transaction and references were locked on disk.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&quot;committed&quot;: The reference transaction was\ncommitted and all references now have their respective new\nvalue.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&quot;aborted&quot;: The reference transaction was aborted,\nno changes were performed and the locks have been\nreleased.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For each\nreference update that was added to the transaction, the hook\nreceives on standard input a line of the format:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;old-value&gt;\nSP &lt;new-value&gt; SP &lt;ref-name&gt; LF</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n<b>&lt;old-value&gt;</b> is the old object name passed into\nthe reference transaction, <b>&lt;new-value&gt;</b> is the\nnew object name to be stored in the ref and\n<b>&lt;ref-name&gt;</b> is the full name of the ref. When\nforce updating the reference regardless of its current value\nor when the reference is to be created anew,\n<b>&lt;old-value&gt;</b> is the all-zeroes object name. To\ndistinguish these cases, you can inspect the current value\nof <b>&lt;ref-name&gt;</b> via <b>git rev-parse</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The exit status\nof the hook is ignored for any state except for the\n&quot;prepared&quot; state. In the &quot;prepared&quot;\nstate, a non-zero exit status will cause the transaction to\nbe aborted. The hook will not be called with\n&quot;aborted&quot; state in that case.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>push-to-checkout</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-receive-pack\">git-receive-pack(1)</a> when it\nreacts to <b>git push</b> and updates reference(s) in its\nrepository, and when the push tries to update the branch\nthat is currently checked out and the\n<b>receive.denyCurrentBranch</b> configuration variable is\nset to <b>updateInstead</b>. Such a push by default is\nrefused if the working tree and the index of the remote\nrepository has any difference from the currently checked out\ncommit; when both the working tree and the index match the\ncurrent commit, they are updated to match the newly pushed\ntip of the branch. This hook is to be used to override the\ndefault behaviour.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The hook\nreceives the commit with which the tip of the current branch\nis going to be updated. It can exit with a non-zero status\nto refuse the push (when it does so, it must not modify the\nindex or the working tree). Or it can make any necessary\nchanges to the working tree and to the index to bring them\nto the desired state when the tip of the current branch is\nupdated to the new commit, and exit with a zero status.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nthe hook can simply run <b>git read-tree -u -m HEAD\n&quot;$1&quot;</b> in order to emulate <b>git fetch</b> that\nis run in the reverse direction with <b>git push</b>, as the\ntwo-tree form of <b>git read-tree -u -m</b> is essentially\nthe same as <b>git switch</b> or <b>git checkout</b> that\nswitches branches while keeping the local changes in the\nworking tree that do not interfere with the difference\nbetween the branches.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pre-auto-gc</b>\n<br>\nThis hook is invoked by <b>git gc --auto</b> (see\n<a href=\"https://man.page/1/git-gc\">git-gc(1)</a>). It takes no parameter, and exiting with\nnon-zero status from this script causes the <b>git gc\n--auto</b> to abort.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>post-rewrite</b>\n<br>\nThis hook is invoked by commands that rewrite commits\n(<a href=\"https://man.page/1/git-commit\">git-commit(1)</a> when called with <b>--amend</b> and\n<a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a>; however, full-history (re)writing\ntools like <a href=\"https://man.page/1/git-fast-import\">git-fast-import(1)</a> or\n<b><font color=\"#0000FF\">git-filter-repo</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">typically do not call it!). Its first\nargument denotes the command it was invoked by: currently\none of <b>amend</b> or <b>rebase</b>. Further\ncommand-dependent arguments may be passed in the\nfuture.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nhook receives a list of the rewritten commits on stdin, in\nthe format</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&lt;old-object-name&gt;\nSP &lt;new-object-name&gt; [ SP &lt;extra-info&gt; ]\nLF</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>extra-info</i> is again command-dependent. If it is\nempty, the preceding SP is also omitted. Currently, no\ncommands pass any <i>extra-info</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nhook always runs after the automatic note copying (see\n&quot;notes.rewrite.&lt;command&gt;&quot; in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>) has happened, and thus has access to\nthese notes.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing command-specific comments apply:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">rebase</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">For the\n<i>squash</i> and <i>fixup</i> operation, all commits that\nwere squashed are listed as being rewritten to the squashed\ncommit. This means that there will be several lines sharing\nthe same <i>new-object-name</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\ncommits are guaranteed to be listed in the order that they\nwere processed by rebase.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>sendemail-validate</b>\n<br>\nThis hook is invoked by <a href=\"https://man.page/1/git-send-email\">git-send-email(1)</a>. It takes a\nsingle parameter, the name of the file that holds the e-mail\nto be sent. Exiting with a non-zero status causes <b>git\nsend-email</b> to abort before sending any\ne-mails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>fsmonitor-watchman</b>\n<br>\nThis hook is invoked when the configuration option\n<b>core.fsmonitor</b> is set to\n<b>.git/hooks/fsmonitor-watchman</b> or\n<b>.git/hooks/fsmonitor-watchmanv2</b> depending on the\nversion of the hook to use.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Version\n1 takes two arguments, a version (1) and the time in elapsed\nnanoseconds since midnight, January 1, 1970.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Version\n2 takes two arguments, a version (2) and a token that is\nused for identifying changes since the token. For watchman\nthis would be a clock id. This version must output to stdout\nthe new token followed by a NUL before the list of\nfiles.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nhook should output to stdout the list of all files in the\nworking directory that may have changed since the requested\ntime. The logic should be inclusive so that it does not miss\nany potential changes. The paths should be relative to the\nroot of the working directory and be separated by a single\nNUL.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">It\nis OK to include files which have not actually changed. All\nchanges including newly-created and deleted files should be\nincluded. When files are renamed, both the old and the new\nname should be included.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Git\nwill limit what files it checks for changes as well as which\ndirectories are checked for untracked files based on the\npath names given.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">An\noptimized way to tell git &quot;all files have changed&quot;\nis to return the filename <b>/</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nexit status determines whether git will use the data from\nthe hook to limit its search. On error, it will fall back to\nverifying all files and folders.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>p4-changelist</b>\n<br>\nThis hook is invoked by <b>git-p4 submit</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>p4-changelist</b> hook is executed after the changelist\nmessage has been edited by the user. It can be bypassed with\nthe <b>--no-verify</b> option. It takes a single parameter,\nthe name of the file that holds the proposed changelist\ntext. Exiting with a non-zero status causes the command to\nabort.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nhook is allowed to edit the changelist file and can be used\nto normalize the text into some project standard format. It\ncan also be used to refuse the Submit after inspect the\nmessage file.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Run\n<b>git-p4 submit --help</b> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>p4-prepare-changelist</b>\n<br>\nThis hook is invoked by <b>git-p4 submit</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>p4-prepare-changelist</b> hook is executed right after\npreparing the default changelist message and before the\neditor is started. It takes one parameter, the name of the\nfile that contains the changelist text. Exiting with a\nnon-zero status from the script will abort the\nprocess.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\npurpose of the hook is to edit the message file in place,\nand it is not suppressed by the <b>--no-verify</b> option.\nThis hook is called even if <b>--prepare-p4-only</b> is\nset.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Run\n<b>git-p4 submit --help</b> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>p4-post-changelist</b>\n<br>\nThis hook is invoked by <b>git-p4 submit</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>p4-post-changelist</b> hook is invoked after the submit\nhas successfully occurred in P4. It takes no parameters and\nis meant primarily for notification and cannot affect the\noutcome of the git p4 submit action.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Run\n<b>git-p4 submit --help</b> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>p4-pre-submit</b>\n<br>\nThis hook is invoked by <b>git-p4 submit</b>. It takes no\nparameters and nothing from standard input. Exiting with\nnon-zero status from this script prevent <b>git-p4\nsubmit</b> from launching. It can be bypassed with the\n<b>--no-verify</b> command line option. Run <b>git-p4 submit\n--help</b> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>post-index-change</b>\n<br>\nThis hook is invoked when the index is written in\nread-cache.c do_write_locked_index.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfirst parameter passed to the hook is the indicator for the\nworking directory being updated. &quot;1&quot; meaning\nworking directory was updated or &quot;0&quot; when the\nworking directory was not updated.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nsecond parameter passed to the hook is the indicator for\nwhether or not the index was updated and the skip-worktree\nbit could have changed. &quot;1&quot; meaning skip-worktree\nbits could have been updated and &quot;0&quot; meaning they\nwere not.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Only\none parameter should be set to &quot;1&quot; when the hook\nruns. The hook running passing &quot;1&quot;, &quot;1&quot;\nshould not be possible.</font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"23%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">git-filter-repo</font></p> </td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://github.com/newren/git-filter-repo</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#HOOKS\">HOOKS</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"],"level":5}