{"name":"org.freedesktop.import1","description":"org.freedesktop.import1\n- The D-Bus interface of systemd-importd\n\n<h2>INTRODUCTION\n<a name=\"INTRODUCTION\"></a>\n</h2>\n\n\n\n<b>systemd-importd.service</b>(8)\nis a system service which may be used to import, export and\ndownload additional system images. These images can be used\nby tools such as <a href=\"https://man.page/1/systemd-nspawn\">systemd-nspawn(1)</a> to run local\ncontainers. The service is used as the backend for\n<b>machinectl pull-raw</b>, <b>machinectl pull-tar</b> and\nrelated commands. This page describes the D-Bus\ninterface.\n\nNote that\n<b>systemd-importd.service</b>(8) is mostly a small\ncompanion service for <b>systemd-machined.service</b>(8).\nMany operations to manipulate local container and VM images\nare hence available via the <b>systemd-machined</b> D-Bus\nAPI, c.f. <b>org.freedesktop.machine1</b>(5).\n\n<h2>THE MANAGER OBJECT\n<a name=\"THE MANAGER OBJECT\"></a>\n</h2>\n\n\nThe service\nexposes the following interfaces on the Manager object on\nthe bus:\n\n<p style=\"margin-left:17%; margin-top: 1em\">node\n/org/freedesktop/import1 { <br>\ninterface org.freedesktop.import1.Manager { <br>\nmethods: <br>\nImportTar(in h fd, <br>\nin s local_name, <br>\nin b force, <br>\nin b read_only, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nImportRaw(in h fd, <br>\nin s local_name, <br>\nin b force, <br>\nin b read_only, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nImportFileSystem(in h fd, <br>\nin s local_name, <br>\nin b force, <br>\nin b read_only, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nExportTar(in s local_name, <br>\nin h fd, <br>\nin s format, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nExportRaw(in s local_name, <br>\nin h fd, <br>\nin s format, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nPullTar(in s url, <br>\nin s local_name, <br>\nin s verify_mode, <br>\nin b force, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nPullRaw(in s url, <br>\nin s local_name, <br>\nin s verify_mode, <br>\nin b force, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nListTransfers(out a(usssdo) transfers); <br>\nCancelTransfer(in u transfer_id); <br>\nsignals: <br>\nTransferNew(u transfer_id, <br>\no transfer_path); <br>\nTransferRemoved(u transfer_id, <br>\no transfer_path, <br>\ns result); <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};\n\n<b>Methods <br>\nImportTar()</b> and <b>ImportRaw()</b> import a system image\nand place it into /var/lib/machines/. The first argument\nshould be a file descriptor (opened for reading) referring\nto the tar or raw file to import. It should reference a file\non disk, a pipe or a socket. When <b>ImportTar()</b> is used\nthe file descriptor should refer to a tar file, optionally\ncompressed with <a href=\"https://man.page/1/gzip\">gzip(1)</a>, <a href=\"https://man.page/1/bzip2\">bzip2(1)</a>, or\n<a href=\"https://man.page/1/xz\">xz(1)</a>. <b>systemd-importd</b> will detect the used\ncompression scheme (if any) automatically. When\n<b>ImportRaw()</b> is used the file descriptor should refer\nto a raw or qcow2 disk image containing an MBR or GPT disk\nlabel, also optionally compressed with gzip, bzip2 or xz. In\neither case, if the file is specified as a file descriptor\non disk, progress information is generated for the import\noperation (as in that case we know the total size on disk).\nIf a socket or pipe is specified, progress information is\nnot available. The file descriptor argument is followed by a\nlocal name for the image. This should be a name suitable as\na hostname and will be used to name the imported image below\n/var/lib/machines/. A tar import is placed as a directory\ntree or a <b>btrfs</b>(8) subvolume below /var/lib/machines/\nunder the specified name with no suffix appended. A raw\nimport is placed as a file in /var/lib/machines/ with the\n.raw suffix appended. If the <b>force</b> argument is true,\nany pre-existing image with the same name is removed before\nstarting the operation. Otherwise, the operation fails if an\nimage with the same name already exists. Finally, the\n<b>read_only</b> argument controls whether to create a\nwritable or read-only image. Both methods return immediately\nafter starting the import, with the import transfer ongoing.\nThey return a pair of transfer identifier and object path,\nwhich may be used to retrieve progress information about the\ntransfer or to cancel it. The transfer identifier is a\nsimple numeric identifier, the object path references an\norg.freedesktop.import1.Transfer object, see below. Listen\nfor a <b>TransferRemoved</b> signal for the transfer ID in\norder to detect when a transfer is complete. The returned\ntransfer object is useful to determine the current progress\nor log output of the ongoing import operation.\n\n\n<b>ExportTar()</b>\nand <b>ExportRaw()</b> implement the reverse operation, and\nmay be used to export a system image in order to place it in\na tar or raw image. They take the machine name to export as\ntheir first parameter, followed by a file descriptor (opened\nfor writing) where the tar or raw file will be written. It\nmay either reference a file on disk or a pipe/socket. The\nthird argument specifies in which compression format to\nwrite the image. It takes one of &quot;uncompressed&quot;,\n&quot;xz&quot;, &quot;bzip2&quot; or &quot;gzip&quot;,\ndepending on which compression scheme is required. The image\nwritten to the specified file descriptor will be a tar file\nin case of <b>ExportTar()</b> or a raw disk image in case of\n<b>ExportRaw()</b>. Note that currently raw disk images may\nnot be exported as tar files, and vice versa. This\nrestriction might be lifted eventually. The method returns a\ntransfer identifier and object path for cancelling or\ntracking the export operation, similar to <b>ImportTar()</b>\nor <b>ImportRaw()</b> as described above.\n\n\n<b>PullTar()</b>\nand <b>PullRaw()</b> may be used to download, verify and\nimport a system image from a URL. They take an URL argument\nwhich should point to a tar or raw file on the\n&quot;http://&quot; or &quot;https://&quot; protocols,\npossibly compressed with xz, bzip2 or gzip. The second\nargument is a local name for the image. It should be\nsuitable as a hostname, similar to the matching argument of\nthe <b>ImportTar()</b> and <b>ImportRaw()</b> methods above.\nThe third argument indicates the verification mode for the\nimage. It may be one of &quot;no&quot;,\n&quot;checksum&quot;, &quot;signature&quot;. &quot;no&quot;\nturns off any kind of verification of the image;\n&quot;checksum&quot; looks for a SHA256SUM file next to the\ndownloaded image and verifies any SHA256 hash value in that\nfile against the image; &quot;signature&quot; does the same\nbut also tries to authenticate the SHA256SUM file via\n<b>gpg</b>(8) first. The last argument indicates whether to\nreplace a possibly pre-existing image with the same local\nname (if &quot;true&quot;), or whether to fail (if\n&quot;false&quot;). Like the import and export calls above,\nthese calls return a pair of transfer identifier and object\npath for the ongoing download.\n\n\n<b>ListTransfers()</b>\nreturns a list of ongoing import, export or download\noperations as created with the six calls described above. It\nreturns an array of structures which consist of the numeric\ntransfer identifier, a string indicating the operation (one\nof &quot;import-tar&quot;, &quot;import-raw&quot;,\n&quot;export-tar&quot;, &quot;export-raw&quot;,\n&quot;pull-tar&quot; or &quot;pull-raw&quot;), a string\ndescribing the remote file (in case of download operations\nthis is the source URL, in case of import/export operations\nthis is a short string describing the file descriptor passed\nin), a string with the local machine image name, a progress\nvalue between 0.0 (for 0%) and 1.0 (for 100%), as well as\nthe transfer object path.\n\n\n<b>CancelTransfer()</b>\nmay be used to cancel an ongoing import, export or download\noperation. Simply specify the transfer identifier to cancel\nthe ongoing operation.\n\n<b>Signals</b>\n<br>\nThe <b>TransferNew</b> signal is generated each time a new\ntransfer is started with the import, export or download\ncalls described above. It carries the transfer ID and object\npath that have just been created.\n\nThe\n<b>TransferRemoved</b> signal is sent each time a transfer\nfinishes, is canceled or fails. It also carries the transfer\nID and object path, followed by a string indicating the\nresult of the operation, which is one of &quot;done&quot;\n(on success), &quot;canceled&quot; or\n&quot;failed&quot;.\n\n<h2>THE TRANSFER OBJECT\n<a name=\"THE TRANSFER OBJECT\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">node\n/org/freedesktop/import1/transfer/_1 { <br>\ninterface org.freedesktop.import1.Transfer { <br>\nmethods: <br>\nCancel(); <br>\nsignals: <br>\nLogMessage(u priority, <br>\ns line); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u Id = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Local = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Remote = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Type = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Verify = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly d Progress = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};\n\n<b>Methods</b>\n<br>\nThe <b>Cancel()</b> method may be used to cancel the\ntransfer. It takes no parameters. This method is pretty much\nequivalent to the <b>CancelTransfer()</b> method on the\nManager interface (see above), but is exposed on the\nTransfer object itself instead of taking a transfer ID.\n\n\n<b>Properties</b>\n<br>\nThe <i>Id</i> property exposes the numeric transfer ID of\nthe transfer object.\n\nThe\n<i>Local</i>, <i>Remote</i> and <i>Type</i> properties\nexpose the local container name of this transfer, the remote\nsource (in case of download: the URL, in case of\nimport/export: a string describing the file descriptor\npassed in), and the type of operation (see the Manager's\n<b>ListTransfer()</b> method above for an explanation of the\npossible values).\n\nThe\n<i>Verify</i> property exposes the selected verification\nsetting and is only defined for download operations (see\nabove).\n\nThe\n<i>Progress</i> property exposes the current progress of the\ntransfer as a value between 0.0 and 1.0. To show a progress\nbar on screen we recommend to query this value in regular\nintervals, for example every 500&nbsp;ms or so.\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<b>Example&nbsp;1.&nbsp;Introspect\norg.freedesktop.import1.Manager on the bus</b>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ gdbus\nintrospect --system \\ <br>\n--dest org.freedesktop.import1 \\ <br>\n--object-path /org/freedesktop/import1\n\n\n<b>Example&nbsp;2.&nbsp;Introspect\norg.freedesktop.import1.Transfer on the bus</b>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ gdbus\nintrospect --system \\ <br>\n--dest org.freedesktop.import1 \\ <br>\n--object-path /org/freedesktop/import1/transfer/_1\n\n<h2>VERSIONING\n<a name=\"VERSIONING\"></a>\n</h2>\n\n\nThese D-Bus\ninterfaces follow <b><font color=\"#0000FF\">the usual\ninterface versioning guidelines</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">.</font>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font> </td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">the usual\ninterface versioning guidelines</font></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">http://0pointer.de/blog/projects/versioning-dbus.html</font>","body":"\n\n<h1 align=\"center\">ORG.FREEDESKTOP.IMPORT1</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">org.freedesktop.import1\n- The D-Bus interface of systemd-importd</p>\n\n<h2>INTRODUCTION\n<a name=\"INTRODUCTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>systemd-importd.service</b>(8)\nis a system service which may be used to import, export and\ndownload additional system images. These images can be used\nby tools such as <a href=\"https://man.page/1/systemd-nspawn\">systemd-nspawn(1)</a> to run local\ncontainers. The service is used as the backend for\n<b>machinectl pull-raw</b>, <b>machinectl pull-tar</b> and\nrelated commands. This page describes the D-Bus\ninterface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\n<b>systemd-importd.service</b>(8) is mostly a small\ncompanion service for <b>systemd-machined.service</b>(8).\nMany operations to manipulate local container and VM images\nare hence available via the <b>systemd-machined</b> D-Bus\nAPI, c.f. <b>org.freedesktop.machine1</b>(5).</p>\n\n<h2>THE MANAGER OBJECT\n<a name=\"THE MANAGER OBJECT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The service\nexposes the following interfaces on the Manager object on\nthe bus:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">node\n/org/freedesktop/import1 { <br>\ninterface org.freedesktop.import1.Manager { <br>\nmethods: <br>\nImportTar(in h fd, <br>\nin s local_name, <br>\nin b force, <br>\nin b read_only, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nImportRaw(in h fd, <br>\nin s local_name, <br>\nin b force, <br>\nin b read_only, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nImportFileSystem(in h fd, <br>\nin s local_name, <br>\nin b force, <br>\nin b read_only, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nExportTar(in s local_name, <br>\nin h fd, <br>\nin s format, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nExportRaw(in s local_name, <br>\nin h fd, <br>\nin s format, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nPullTar(in s url, <br>\nin s local_name, <br>\nin s verify_mode, <br>\nin b force, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nPullRaw(in s url, <br>\nin s local_name, <br>\nin s verify_mode, <br>\nin b force, <br>\nout u transfer_id, <br>\nout o transfer_path); <br>\nListTransfers(out a(usssdo) transfers); <br>\nCancelTransfer(in u transfer_id); <br>\nsignals: <br>\nTransferNew(u transfer_id, <br>\no transfer_path); <br>\nTransferRemoved(u transfer_id, <br>\no transfer_path, <br>\ns result); <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Methods <br>\nImportTar()</b> and <b>ImportRaw()</b> import a system image\nand place it into /var/lib/machines/. The first argument\nshould be a file descriptor (opened for reading) referring\nto the tar or raw file to import. It should reference a file\non disk, a pipe or a socket. When <b>ImportTar()</b> is used\nthe file descriptor should refer to a tar file, optionally\ncompressed with <a href=\"https://man.page/1/gzip\">gzip(1)</a>, <a href=\"https://man.page/1/bzip2\">bzip2(1)</a>, or\n<a href=\"https://man.page/1/xz\">xz(1)</a>. <b>systemd-importd</b> will detect the used\ncompression scheme (if any) automatically. When\n<b>ImportRaw()</b> is used the file descriptor should refer\nto a raw or qcow2 disk image containing an MBR or GPT disk\nlabel, also optionally compressed with gzip, bzip2 or xz. In\neither case, if the file is specified as a file descriptor\non disk, progress information is generated for the import\noperation (as in that case we know the total size on disk).\nIf a socket or pipe is specified, progress information is\nnot available. The file descriptor argument is followed by a\nlocal name for the image. This should be a name suitable as\na hostname and will be used to name the imported image below\n/var/lib/machines/. A tar import is placed as a directory\ntree or a <b>btrfs</b>(8) subvolume below /var/lib/machines/\nunder the specified name with no suffix appended. A raw\nimport is placed as a file in /var/lib/machines/ with the\n.raw suffix appended. If the <b>force</b> argument is true,\nany pre-existing image with the same name is removed before\nstarting the operation. Otherwise, the operation fails if an\nimage with the same name already exists. Finally, the\n<b>read_only</b> argument controls whether to create a\nwritable or read-only image. Both methods return immediately\nafter starting the import, with the import transfer ongoing.\nThey return a pair of transfer identifier and object path,\nwhich may be used to retrieve progress information about the\ntransfer or to cancel it. The transfer identifier is a\nsimple numeric identifier, the object path references an\norg.freedesktop.import1.Transfer object, see below. Listen\nfor a <b>TransferRemoved</b> signal for the transfer ID in\norder to detect when a transfer is complete. The returned\ntransfer object is useful to determine the current progress\nor log output of the ongoing import operation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ExportTar()</b>\nand <b>ExportRaw()</b> implement the reverse operation, and\nmay be used to export a system image in order to place it in\na tar or raw image. They take the machine name to export as\ntheir first parameter, followed by a file descriptor (opened\nfor writing) where the tar or raw file will be written. It\nmay either reference a file on disk or a pipe/socket. The\nthird argument specifies in which compression format to\nwrite the image. It takes one of &quot;uncompressed&quot;,\n&quot;xz&quot;, &quot;bzip2&quot; or &quot;gzip&quot;,\ndepending on which compression scheme is required. The image\nwritten to the specified file descriptor will be a tar file\nin case of <b>ExportTar()</b> or a raw disk image in case of\n<b>ExportRaw()</b>. Note that currently raw disk images may\nnot be exported as tar files, and vice versa. This\nrestriction might be lifted eventually. The method returns a\ntransfer identifier and object path for cancelling or\ntracking the export operation, similar to <b>ImportTar()</b>\nor <b>ImportRaw()</b> as described above.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>PullTar()</b>\nand <b>PullRaw()</b> may be used to download, verify and\nimport a system image from a URL. They take an URL argument\nwhich should point to a tar or raw file on the\n&quot;http://&quot; or &quot;https://&quot; protocols,\npossibly compressed with xz, bzip2 or gzip. The second\nargument is a local name for the image. It should be\nsuitable as a hostname, similar to the matching argument of\nthe <b>ImportTar()</b> and <b>ImportRaw()</b> methods above.\nThe third argument indicates the verification mode for the\nimage. It may be one of &quot;no&quot;,\n&quot;checksum&quot;, &quot;signature&quot;. &quot;no&quot;\nturns off any kind of verification of the image;\n&quot;checksum&quot; looks for a SHA256SUM file next to the\ndownloaded image and verifies any SHA256 hash value in that\nfile against the image; &quot;signature&quot; does the same\nbut also tries to authenticate the SHA256SUM file via\n<b>gpg</b>(8) first. The last argument indicates whether to\nreplace a possibly pre-existing image with the same local\nname (if &quot;true&quot;), or whether to fail (if\n&quot;false&quot;). Like the import and export calls above,\nthese calls return a pair of transfer identifier and object\npath for the ongoing download.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ListTransfers()</b>\nreturns a list of ongoing import, export or download\noperations as created with the six calls described above. It\nreturns an array of structures which consist of the numeric\ntransfer identifier, a string indicating the operation (one\nof &quot;import-tar&quot;, &quot;import-raw&quot;,\n&quot;export-tar&quot;, &quot;export-raw&quot;,\n&quot;pull-tar&quot; or &quot;pull-raw&quot;), a string\ndescribing the remote file (in case of download operations\nthis is the source URL, in case of import/export operations\nthis is a short string describing the file descriptor passed\nin), a string with the local machine image name, a progress\nvalue between 0.0 (for 0%) and 1.0 (for 100%), as well as\nthe transfer object path.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CancelTransfer()</b>\nmay be used to cancel an ongoing import, export or download\noperation. Simply specify the transfer identifier to cancel\nthe ongoing operation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Signals</b>\n<br>\nThe <b>TransferNew</b> signal is generated each time a new\ntransfer is started with the import, export or download\ncalls described above. It carries the transfer ID and object\npath that have just been created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>TransferRemoved</b> signal is sent each time a transfer\nfinishes, is canceled or fails. It also carries the transfer\nID and object path, followed by a string indicating the\nresult of the operation, which is one of &quot;done&quot;\n(on success), &quot;canceled&quot; or\n&quot;failed&quot;.</p>\n\n<h2>THE TRANSFER OBJECT\n<a name=\"THE TRANSFER OBJECT\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">node\n/org/freedesktop/import1/transfer/_1 { <br>\ninterface org.freedesktop.import1.Transfer { <br>\nmethods: <br>\nCancel(); <br>\nsignals: <br>\nLogMessage(u priority, <br>\ns line); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u Id = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Local = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Remote = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Type = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Verify = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly d Progress = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Methods</b>\n<br>\nThe <b>Cancel()</b> method may be used to cancel the\ntransfer. It takes no parameters. This method is pretty much\nequivalent to the <b>CancelTransfer()</b> method on the\nManager interface (see above), but is exposed on the\nTransfer object itself instead of taking a transfer ID.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Properties</b>\n<br>\nThe <i>Id</i> property exposes the numeric transfer ID of\nthe transfer object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>Local</i>, <i>Remote</i> and <i>Type</i> properties\nexpose the local container name of this transfer, the remote\nsource (in case of download: the URL, in case of\nimport/export: a string describing the file descriptor\npassed in), and the type of operation (see the Manager's\n<b>ListTransfer()</b> method above for an explanation of the\npossible values).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>Verify</i> property exposes the selected verification\nsetting and is only defined for download operations (see\nabove).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>Progress</i> property exposes the current progress of the\ntransfer as a value between 0.0 and 1.0. To show a progress\nbar on screen we recommend to query this value in regular\nintervals, for example every 500&nbsp;ms or so.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;1.&nbsp;Introspect\norg.freedesktop.import1.Manager on the bus</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ gdbus\nintrospect --system \\ <br>\n--dest org.freedesktop.import1 \\ <br>\n--object-path /org/freedesktop/import1</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;2.&nbsp;Introspect\norg.freedesktop.import1.Transfer on the bus</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ gdbus\nintrospect --system \\ <br>\n--dest org.freedesktop.import1 \\ <br>\n--object-path /org/freedesktop/import1/transfer/_1</p>\n\n<h2>VERSIONING\n<a name=\"VERSIONING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These D-Bus\ninterfaces follow <b><font color=\"#0000FF\">the usual\ninterface versioning guidelines</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">.</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">the usual\ninterface versioning guidelines</font></p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">http://0pointer.de/blog/projects/versioning-dbus.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#INTRODUCTION\">INTRODUCTION</a>","<a href=\"#THE MANAGER OBJECT\">THE MANAGER OBJECT</a>","<a href=\"#THE TRANSFER OBJECT\">THE TRANSFER OBJECT</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#VERSIONING\">VERSIONING</a>","<a href=\"#NOTES\">NOTES</a>"],"level":5}