{"name":"hosts_access","body":"\n\n<h1 align=\"center\">HOSTS_ACCESS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">hosts_access -\nformat of host access control files</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage describes a simple access control language that is\nbased on client (host name/address, user name), and server\n(process name, host name/address) patterns. Examples are\ngiven at the end. The impatient reader is encouraged to skip\nto the EXAMPLES section for a quick introduction.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The extended\nversion of the access control language is described in the\n<i>hosts_options</i>(5) document. <b>Note that this language\nsupersedes the meaning of</b> <i>shell_command</i> <b>as\ndocumented below.</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing text, <i>daemon</i> is the process name of a\nnetwork daemon process, and <i>client</i> is the name and/or\naddress of a host requesting service. Network daemon process\nnames are specified in the inetd configuration file.</p>\n\n<h2>ACCESS CONTROL FILES\n<a name=\"ACCESS CONTROL FILES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The access\ncontrol software consults two files. The search stops at the\nfirst match:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Access will be granted when a (daemon,client) pair\nmatches an entry in the <i>/etc/hosts.allow</i> file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Otherwise, access will be denied when a (daemon,client)\npair matches an entry in the <i>/etc/hosts.deny</i>\nfile.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Otherwise, access will be granted.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A non-existing\naccess control file is treated as if it were an empty file.\nThus, access control can be turned off by providing no\naccess control files.</p>\n\n<h2>ACCESS CONTROL RULES\n<a name=\"ACCESS CONTROL RULES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each access\ncontrol file consists of zero or more lines of text. These\nlines are processed in order of appearance. The search\nterminates when a match is found.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">A newline character is ignored\nwhen it is preceded by a backslash character. This permits\nyou to break up long lines so that they are easier to\nedit.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Blank lines or lines that begin with a &rsquo;#&acute;\ncharacter are ignored. This permits you to insert comments\nand whitespace so that the tables are easier to read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>All other lines should satisfy the following format,\nthings between [] being optional:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">daemon_list :\nclient_list [ : shell_command ]</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>daemon_list</i>\nis a list of one or more daemon process names (argv[0]\nvalues) or server port numbers or wildcards (see below).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>client_list</i>\nis a list of one or more host names, host addresses,\npatterns or wildcards (see below) that will be matched\nagainst the client host name or address.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The more\ncomplex forms <i>daemon@host</i> and <i>user@host</i> are\nexplained in the sections on server endpoint patterns and on\nclient username lookups, respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">List elements\nshould be separated by blanks and/or commas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With the\nexception of NIS (YP) netgroup lookups, all access control\nchecks are case insensitive.</p>\n\n<h2>PATTERNS\n<a name=\"PATTERNS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The access\ncontrol language implements the following patterns:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">A string that begins with a\n&rsquo;.&acute; character. A host name is matched if the\nlast components of its name match the specified pattern. For\nexample, the pattern &rsquo;.tue.nl&acute; matches the host\nname &rsquo;wzv.win.tue.nl&acute;.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>A string that ends with a &rsquo;.&acute; character. A\nhost address is matched if its first numeric fields match\nthe given string. For example, the pattern\n&rsquo;131.155.&acute; matches the address of (almost) every\nhost on the Eindhoven University network (131.155.x.x).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>A string that begins with an &rsquo;@&acute; character\nis treated as an NIS (formerly YP) netgroup name. A host\nname is matched if it is a host member of the specified\nnetgroup. Netgroup matches are not supported for daemon\nprocess names or for client user names.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>An expression of the form &rsquo;n.n.n.n/m.m.m.m&acute;\nis interpreted as a &rsquo;net/mask&acute; pair. An IPv4\nhost address is matched if &rsquo;net&acute; is equal to the\nbitwise AND of the address and the &rsquo;mask&acute;. For\nexample, the net/mask pattern\n&rsquo;131.155.72.0/255.255.254.0&acute; matches every\naddress in the range &rsquo;131.155.72.0&acute; through\n&rsquo;131.155.73.255&acute;. &rsquo;255.255.255.255&acute;\nis not a valid mask value, so a single host can be matched\njust by its IP.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>An expression of the form &rsquo;n.n.n.n/mm&rsquo; is\ninterpreted as a &rsquo;net/masklength&rsquo; pair, where\n&rsquo;mm&rsquo; is the number of consecutive\n&rsquo;1&rsquo; bits in the netmask applied to the\n&rsquo;n.n.n.n&rsquo; address.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>An expression of the form\n&rsquo;[n:n:n:n:n:n:n:n]/m&acute; is interpreted as a\n&rsquo;[net]/prefixlen&acute; pair. An IPv6 host address is\nmatched if &rsquo;prefixlen&acute; bits of &rsquo;net&acute;\nis equal to the &rsquo;prefixlen&acute; bits of the address.\nFor example, the [net]/prefixlen pattern\n&rsquo;[3ffe:505:2:1::]/64&acute; matches every address in\nthe range &rsquo;3ffe:505:2:1::&acute; through\n&rsquo;3ffe:505:2:1:ffff:ffff:ffff:ffff&acute;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>A string that begins with a &rsquo;/&acute; character is\ntreated as a file name. A host name or address is matched if\nit matches any host name or address pattern listed in the\nnamed file. The file format is zero or more lines with zero\nor more host name or address patterns separated by\nwhitespace. A file name pattern can be used anywhere a host\nname or address pattern can be used.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Wildcards &rsquo;*&acute; and &rsquo;?&acute; can be\nused to match hostnames or IP addresses. This method of\nmatching cannot be used in conjunction with\n&rsquo;net/mask&acute; matching, hostname matching beginning\nwith &rsquo;.&acute; or IP address matching ending with\n&rsquo;.&acute;.</p> </td></tr>\n</table>\n\n<h2>WILDCARDS\n<a name=\"WILDCARDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The access\ncontrol language supports explicit wildcards:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\">ALL</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The universal wildcard, always\nmatches.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>LOCAL</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Matches any host whose name does not contain a dot\ncharacter.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">UNKNOWN</p>\n\n<p style=\"margin-left:22%;\">Matches any user whose name is\nunknown, and matches any host whose name <i>or</i> address\nare unknown. This pattern should be used with care: host\nnames may be unavailable due to temporary name server\nproblems. A network address will be unavailable when the\nsoftware cannot figure out what type of network it is\ntalking to.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>KNOWN</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Matches any user whose name is known, and matches any\nhost whose name <i>and</i> address are known. This pattern\nshould be used with care: host names may be unavailable due\nto temporary name server problems. A network address will be\nunavailable when the software cannot figure out what type of\nnetwork it is talking to.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">PARANOID</p>\n\n<p style=\"margin-left:22%;\">Matches any host whose name\ndoes not match its address. When tcpd is built with\n-DPARANOID (default mode), it drops requests from such\nclients even before looking at the access control tables.\nBuild without -DPARANOID when you want more control over\nsuch requests.</p>\n\n<h2>OPERATORS\n<a name=\"OPERATORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\">EXCEPT</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Intended use is of the form:\n&rsquo;list_1 EXCEPT list_2&acute;; this construct matches\nanything that matches <i>list_1</i> unless it matches\n<i>list_2</i>. The EXCEPT operator can be used in\ndaemon_lists and in client_lists. The EXCEPT operator can be\nnested: if the control language would permit the use of\nparentheses, &rsquo;a EXCEPT b EXCEPT c&acute; would parse\nas &rsquo;(a EXCEPT (b EXCEPT c))&acute;.</p></td></tr>\n</table>\n\n<h2>SHELL COMMANDS\n<a name=\"SHELL COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nfirst-matched access control rule contains a shell command,\nthat command is subjected to %&lt;letter&gt; substitutions\n(see next section). The result is executed by a\n<i>/bin/sh</i> child process with standard input, output and\nerror connected to <i>/dev/null</i>. Specify an\n&rsquo;&amp;&acute; at the end of the command if you do not\nwant to wait until it has completed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Shell commands\nshould not rely on the PATH setting of the inetd. Instead,\nthey should use absolute path names, or they should begin\nwith an explicit PATH=whatever statement.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>hosts_options</i>(5) document describes an alternative\nlanguage that uses the shell command field in a different\nand incompatible way.</p>\n\n<h2>% EXPANSIONS\n<a name=\"% EXPANSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nexpansions are available within shell commands: <br>\n%a (%A)</p>\n\n<p style=\"margin-left:22%;\">The client (server) host\naddress.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>%c</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Client information: user@host, user@address, a host\nname, or just an address, depending on how much information\nis available.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>%d</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>The daemon process name (argv[0] value).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">%h (%H)</p>\n\n<p style=\"margin-left:22%;\">The client (server) host name\nor address, if the host name is unavailable.</p>\n\n<p style=\"margin-left:11%;\">%n (%N)</p>\n\n<p style=\"margin-left:22%;\">The client (server) host name\n(or &quot;unknown&quot; or &quot;paranoid&quot;).</p>\n\n<p style=\"margin-left:11%;\">%r (%R)</p>\n\n<p style=\"margin-left:22%;\">The clients (servers) port\nnumber (or &quot;0&quot;).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>%p</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>The daemon process id.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>%s</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Server information: daemon@host, daemon@address, or just\na daemon name, depending on how much information is\navailable.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>%u</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>The client user name (or &quot;unknown&quot;).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>%%</p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Expands to a single &rsquo;%&acute; character.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Characters in %\nexpansions that may confuse the shell are replaced by\nunderscores.</p>\n\n<h2>SERVER ENDPOINT PATTERNS\n<a name=\"SERVER ENDPOINT PATTERNS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\ndistinguish clients by the network address that they connect\nto, use patterns of the form:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">process_name@host_pattern\n: client_list ...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Patterns like\nthese can be used when the machine has different internet\naddresses with different internet hostnames. Service\nproviders can use this facility to offer FTP, GOPHER or WWW\narchives with internet names that may even belong to\ndifferent organizations. See also the &rsquo;twist&acute;\noption in the hosts_options(5) document. Some systems\n(Solaris, FreeBSD) can have more than one internet address\non one physical interface; with other systems you may have\nto resort to SLIP or PPP pseudo interfaces that live in a\ndedicated network address space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nhost_pattern obeys the same syntax rules as host names and\naddresses in client_list context. Usually, server endpoint\ninformation is available only with connection-oriented\nservices.</p>\n\n<h2>CLIENT USERNAME LOOKUP\n<a name=\"CLIENT USERNAME LOOKUP\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the client\nhost supports the RFC 931 protocol or one of its descendants\n(TAP, IDENT, RFC 1413) the wrapper programs can retrieve\nadditional information about the owner of a connection.\nClient username information, when available, is logged\ntogether with the client host name, and can be used to match\npatterns like:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">daemon_list :\n... user_pattern@host_pattern ...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The daemon\nwrappers can be configured at compile time to perform\nrule-driven username lookups (default) or to always\ninterrogate the client host. In the case of rule-driven\nusername lookups, the above rule would cause username lookup\nonly when both the <i>daemon_list</i> and the\n<i>host_pattern</i> match.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A user pattern\nhas the same syntax as a daemon process pattern, so the same\nwildcards apply (netgroup membership is not supported). One\nshould not get carried away with username lookups,\nthough.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The client username information\ncannot be trusted when it is needed most, i.e. when the\nclient system has been compromised. In general, ALL and\n(UN)KNOWN are the only user name patterns that make\nsense.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Username lookups are possible only with TCP-based\nservices, and only when the client host runs a suitable\ndaemon; in all other cases the result is\n&quot;unknown&quot;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>A well-known UNIX kernel bug may cause loss of service\nwhen username lookups are blocked by a firewall. The wrapper\nREADME document describes a procedure to find out if your\nkernel has this bug.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Username lookups may cause noticeable delays for\nnon-UNIX users. The default timeout for username lookups is\n10 seconds: too short to cope with slow networks, but long\nenough to irritate PC users.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Selective\nusername lookups can alleviate the last problem. For\nexample, a rule like:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">daemon_list :\n@pcnetgroup ALL@ALL</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">would match\nmembers of the pc netgroup without doing username lookups,\nbut would perform username lookups with all other\nsystems.</p>\n\n<h2>DETECTING ADDRESS SPOOFING ATTACKS\n<a name=\"DETECTING ADDRESS SPOOFING ATTACKS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A flaw in the\nsequence number generator of many TCP/IP implementations\nallows intruders to easily impersonate trusted hosts and to\nbreak in via, for example, the remote shell service. The\nIDENT (RFC931 etc.) service can be used to detect such and\nother host address spoofing attacks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before\naccepting a client request, the wrappers can use the IDENT\nservice to find out that the client did not send the request\nat all. When the client host provides IDENT service, a\nnegative IDENT lookup result (the client matches\n&rsquo;UNKNOWN@host&acute;) is strong evidence of a host\nspoofing attack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A positive\nIDENT lookup result (the client matches\n&rsquo;KNOWN@host&acute;) is less trustworthy. It is\npossible for an intruder to spoof both the client connection\nand the IDENT lookup, although doing so is much harder than\nspoofing just a client connection. It may also be that the\nclient&acute;s IDENT server is lying.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note: IDENT\nlookups don&acute;t work with UDP services.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The language is\nflexible enough that different types of access control\npolicy can be expressed with a minimum of fuss. Although the\nlanguage uses two access control tables, the most common\npolicies can be implemented with one of the tables being\ntrivial or even empty.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When reading\nthe examples below it is important to realize that the allow\ntable is scanned before the deny table, that the search\nterminates when a match is found, and that access is granted\nwhen no match is found at all.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The examples\nuse host and domain names. They can be improved by including\naddress and/or network/netmask information, to reduce the\nimpact of temporary name server lookup failures.</p>\n\n<h2>MOSTLY CLOSED\n<a name=\"MOSTLY CLOSED\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this case,\naccess is denied by default. Only explicitly authorized\nhosts are permitted access.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\npolicy (no access) is implemented with a trivial deny\nfile:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/hosts.deny:</p>\n\n<p style=\"margin-left:15%;\">ALL: ALL</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This denies all\nservice to all hosts, unless they are permitted access by\nentries in the allow file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The explicitly\nauthorized hosts are listed in the allow file. For\nexample:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/hosts.allow:</p>\n\n<p style=\"margin-left:15%;\">ALL: LOCAL @some_netgroup <br>\nALL: .foobar.edu EXCEPT terminalserver.foobar.edu</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first rule\npermits access from hosts in the local domain (no\n&rsquo;.&acute; in the host name) and from members of the\n<i>some_netgroup</i> netgroup. The second rule permits\naccess from all hosts in the <i>foobar.edu</i> domain\n(notice the leading dot), with the exception of\n<i>terminalserver.foobar.edu</i>.</p>\n\n<h2>MOSTLY OPEN\n<a name=\"MOSTLY OPEN\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, access is\ngranted by default; only explicitly specified hosts are\nrefused service.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\npolicy (access granted) makes the allow file redundant so\nthat it can be omitted. The explicitly non-authorized hosts\nare listed in the deny file. For example:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/hosts.deny:</p>\n\n<p style=\"margin-left:15%;\">ALL: some.host.name,\n.some.domain <br>\nALL EXCEPT in.fingerd: other.host.name, .other.domain</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first rule\ndenies some hosts and domains all services; the second rule\nstill permits finger requests from other hosts and\ndomains.</p>\n\n<h2>BOOBY TRAPS\n<a name=\"BOOBY TRAPS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The next\nexample permits tftp requests from hosts in the local domain\n(notice the leading dot). Requests from any other hosts are\ndenied. Instead of the requested file, a finger probe is\nsent to the offending host. The result is mailed to the\nsuperuser.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/hosts.allow:</p>\n\n<p style=\"margin-left:15%;\">in.tftpd: LOCAL, .my.domain</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/hosts.deny:</p>\n\n<p style=\"margin-left:15%;\">in.tftpd: ALL:\n(/usr/sbin/safe_finger -l @%h | \\</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>/usr/bin/mail -s %d-%h root) &amp;</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The safe_finger\ncommand comes with the tcpd wrapper and should be installed\nin a suitable place. It limits possible damage from data\nsent by the remote finger server. It gives better protection\nthan the standard finger command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The expansion\nof the %h (client host) and %d (service name) sequences is\ndescribed in the section on shell commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Warning: do not\nbooby-trap your finger daemon, unless you are prepared for\ninfinite finger loops.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On network\nfirewall systems this trick can be carried even further. The\ntypical network firewall only provides a limited set of\nservices to the outer world. All other services can be\n&quot;bugged&quot; just like the above tftp example. The\nresult is an excellent early-warning system.</p>\n\n<h2>DIAGNOSTICS\n<a name=\"DIAGNOSTICS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An error is\nreported when a syntax error is found in a host access\ncontrol rule; when the length of an access control rule\nexceeds the capacity of an internal buffer; when an access\ncontrol rule is not terminated by a newline character; when\nthe result of %&lt;letter&gt; expansion would overflow an\ninternal buffer; when a system call fails that\nshouldn&acute;t. All problems are reported via the syslog\ndaemon.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/hosts.allow,\n(daemon,client) pairs that are granted access. <br>\n/etc/hosts.deny, (daemon,client) pairs that are denied\naccess.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">hosts_options(5)\nextended syntax. <br>\ntcpd(8) tcp/ip daemon wrapper program. <br>\ntcpdchk(8), tcpdmatch(8), test programs.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a name\nserver lookup times out, the host name will not be available\nto the access control software, even though the host is\nregistered.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Domain name\nserver lookups are case insensitive; NIS (formerly YP)\nnetgroup lookups are case sensitive.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Wietse Venema\n(wietse@wzv.win.tue.nl) <br>\nDepartment of Mathematics and Computing Science <br>\nEindhoven University of Technology <br>\nDen Dolech 2, P.O. Box 513, <br>\n5600 MB Eindhoven, The Netherlands</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ACCESS CONTROL FILES\">ACCESS CONTROL FILES</a>","<a href=\"#ACCESS CONTROL RULES\">ACCESS CONTROL RULES</a>","<a href=\"#PATTERNS\">PATTERNS</a>","<a href=\"#WILDCARDS\">WILDCARDS</a>","<a href=\"#OPERATORS\">OPERATORS</a>","<a href=\"#SHELL COMMANDS\">SHELL COMMANDS</a>","<a href=\"#% EXPANSIONS\">% EXPANSIONS</a>","<a href=\"#SERVER ENDPOINT PATTERNS\">SERVER ENDPOINT PATTERNS</a>","<a href=\"#CLIENT USERNAME LOOKUP\">CLIENT USERNAME LOOKUP</a>","<a href=\"#DETECTING ADDRESS SPOOFING ATTACKS\">DETECTING ADDRESS SPOOFING ATTACKS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#MOSTLY CLOSED\">MOSTLY CLOSED</a>","<a href=\"#MOSTLY OPEN\">MOSTLY OPEN</a>","<a href=\"#BOOBY TRAPS\">BOOBY TRAPS</a>","<a href=\"#DIAGNOSTICS\">DIAGNOSTICS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":5}