{"name":"tzfile","body":"\n\n<h1 align=\"center\">TZFILE</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">tzfile -\ntimezone information</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The timezone\ninformation files used by <a href=\"https://man.page/3/tzset\">tzset(3)</a> are typically\nfound under a directory with a name like\n<i>/usr/share/zoneinfo</i>. These files use the format\ndescribed in Internet RFC 8536. Each file is a sequence of\n8-bit bytes. In a file, a binary integer is represented by a\nsequence of one or more bytes in network order (bigendian,\nor high-order byte first), with all bits significant, a\nsigned binary integer is represented using two&rsquo;s\ncomplement, and a boolean is represented by a one-byte\nbinary integer that is either 0 (false) or 1 (true). The\nformat begins with a 44-byte header containing the following\nfields:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The magic four-byte ASCII sequence &ldquo;TZif&rdquo;\nidentifies the file as a timezone information file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>A byte identifying the version of the file&rsquo;s\nformat (as of 2017, either an ASCII NUL, or &ldquo;2&rdquo;,\nor &ldquo;3&rdquo;).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Fifteen bytes containing zeros reserved for future\nuse.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Six four-byte integer values, in the following\norder:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:14%;\"><i>tzh_ttisutcnt</i></p>\n\n<p style=\"margin-left:25%;\">The number of UT/local\nindicators stored in the file. (UT is Universal Time.)</p>\n\n<p style=\"margin-left:14%;\"><i>tzh_ttisstdcnt</i></p>\n\n<p style=\"margin-left:25%;\">The number of standard/wall\nindicators stored in the file.</p>\n\n<p style=\"margin-left:14%;\"><i>tzh_leapcnt</i></p>\n\n<p style=\"margin-left:25%;\">The number of leap seconds for\nwhich data entries are stored in the file.</p>\n\n<p style=\"margin-left:14%;\"><i>tzh_timecnt</i></p>\n\n<p style=\"margin-left:25%;\">The number of transition times\nfor which data entries are stored in the file.</p>\n\n<p style=\"margin-left:14%;\"><i>tzh_typecnt</i></p>\n\n<p style=\"margin-left:25%;\">The number of local time types\nfor which data entries are stored in the file (must not be\nzero).</p>\n\n<p style=\"margin-left:14%;\"><i>tzh_charcnt</i></p>\n\n<p style=\"margin-left:25%;\">The number of bytes of time\nzone abbreviation strings stored in the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above\nheader is followed by the following fields, whose lengths\ndepend on the contents of the header:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><i>tzh_timecnt</i> four-byte signed integer values\nsorted in ascending order. These values are written in\nnetwork byte order. Each is used as a transition time (as\nreturned by <a href=\"https://man.page/2/time\">time(2)</a>) at which the rules for computing\nlocal time change.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><i>tzh_timecnt</i> one-byte unsigned integer values;\neach one but the last tells which of the different types of\nlocal time types described in the file is associated with\nthe time period starting with the same-indexed transition\ntime and continuing up to but not including the next\ntransition time. (The last time type is present only for\nconsistency checking with the POSIX-style TZ string\ndescribed below.) These values serve as indices into the\nnext field.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><i>tzh_typecnt ttinfo</i> entries, each defined as\nfollows:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">struct ttinfo\n{</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"23%\">\n\n\n<p>int32_t</p></td>\n<td width=\"69%\">\n\n\n<p>tt_utoff;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"23%\">\n\n\n<p>unsigned char</p></td>\n<td width=\"69%\">\n\n\n<p>tt_isdst;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"23%\">\n\n\n<p>unsigned char</p></td>\n<td width=\"69%\">\n\n\n<p>tt_desigidx;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">};</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">Each structure\nis written as a four-byte signed integer value for\n<i>tt_utoff</i>, in network byte order, followed by a\none-byte boolean for <i>tt_isdst</i> and a one-byte value\nfor <i>tt_desigidx</i>. In each structure, <i>tt_utoff</i>\ngives the number of seconds to be added to UT,\n<i>tt_isdst</i> tells whether <i>tm_isdst</i> should be set\nby <a href=\"https://man.page/3/localtime\">localtime(3)</a> and <i>tt_desigidx</i> serves as an\nindex into the array of time zone abbreviation bytes that\nfollow the <i>ttinfo</i> structure(s) in the file. The\n<i>tt_utoff</i> value is never equal to -2**31, to let\n32-bit clients negate it without overflow. Also, in\nrealistic applications <i>tt_utoff</i> is in the range\n[-89999, 93599] (i.e., more than -25 hours and less than 26\nhours); this allows easy support by implementations that\nalready support the POSIX-required range [-24:59:59,\n25:59:59].</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\"><i>tzh_leapcnt</i> pairs of\nfour-byte values, written in network byte order; the first\nvalue of each pair gives the nonnegative time (as returned\nby <a href=\"https://man.page/2/time\">time(2)</a>) at which a leap second occurs; the second\nis a signed integer specifying the <i>total</i> number of\nleap seconds to be applied during the time period starting\nat the given time. The pairs of values are sorted in\nascending order by time. Each transition is for one leap\nsecond, either positive or negative; transitions always\nseparated by at least 28 days minus 1 second.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><i>tzh_ttisstdcnt</i> standard/wall indicators, each\nstored as a one-byte boolean; they tell whether the\ntransition times associated with local time types were\nspecified as standard time or local (wall clock) time.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><i>tzh_ttisutcnt</i> UT/local indicators, each stored as\na one-byte boolean; they tell whether the transition times\nassociated with local time types were specified as UT or\nlocal time. If a UT/local indicator is set, the\ncorresponding standard/wall indicator must also be set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nstandard/wall and UT/local indicators were designed for\ntransforming a TZif file&rsquo;s transition times into\ntransitions appropriate for another time zone specified via\na POSIX-style TZ string that lacks rules. For example, when\nTZ=&quot;EET-2EEST&quot; and there is no TZif file\n&quot;EET-2EEST&quot;, the idea was to adapt the transition\ntimes from a TZif file with the well-known name\n&quot;posixrules&quot; that is present only for this purpose\nand is a copy of the file &quot;Europe/Brussels&quot;, a\nfile with a different UT offset. POSIX does not specify this\nobsolete transformational behavior, the default rules are\ninstallation-dependent, and no implementation is known to\nsupport this feature for timestamps past 2037, so users\ndesiring (say) Greek time should instead specify\nTZ=&quot;Europe/Athens&quot; for better historical coverage,\nfalling back on TZ=&quot;EET-2EEST,M3.5.0/3,M10.5.0/4&quot;\nif POSIX conformance is required and older timestamps need\nnot be handled accurately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<a href=\"https://man.page/3/localtime\">localtime(3)</a> function normally uses the first\n<i>ttinfo</i> structure in the file if either\n<i>tzh_timecnt</i> is zero or the time argument is less than\nthe first transition time recorded in the file.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage documents <i>&lt;tzfile.h&gt;</i> in the glibc source\narchive, see <i>timezone/tzfile.h</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It seems that\ntimezone uses <b>tzfile</b> internally, but glibc refuses to\nexpose it to userspace. This is most likely because the\nstandardised functions are more useful and portable, and\nactually documented by glibc. It may only be in glibc just\nto support the non-glibc-maintained timezone data (which is\nmaintained by some other entity).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 2\nformat</b> <br>\nFor version-2-format timezone files, the above header and\ndata are followed by a second header and data, identical in\nformat except that eight bytes are used for each transition\ntime or leap second time. (Leap second counts remain four\nbytes.) After the second header and data comes a\nnewline-enclosed, POSIX-TZ-environment-variable-style string\nfor use in handling instants after the last transition time\nstored in the file or for all instants if the file has no\ntransitions. The POSIX-style TZ string is empty (i.e.,\nnothing between the newlines) if there is no POSIX\nrepresentation for such instants. If nonempty, the\nPOSIX-style TZ string must agree with the local time type\nafter the last transition time if present in the eight-byte\ndata; for example, given the string\n&ldquo;WET0WEST,M3.5.0,M10.5.0/3&rdquo; then if a last\ntransition time is in July, the transition&rsquo;s local\ntime type must specify a daylight-saving time abbreviated\n&ldquo;WEST&rdquo; that is one hour east of UT. Also, if\nthere is at least one transition, time type 0 is associated\nwith the time period from the indefinite past up to but not\nincluding the earliest transition time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 3\nformat</b> <br>\nFor version-3-format timezone files, the POSIX-TZ-style\nstring may use two minor extensions to the POSIX TZ format,\nas described in <a href=\"https://man.page/3/newtzset\">newtzset(3)</a>. First, the hours part of\nits transition times may be signed and range from -167\nthrough 167 instead of the POSIX-required unsigned values\nfrom 0 through 24. Second, DST is in effect all year if it\nstarts January 1 at 00:00 and ends December 31 at 24:00 plus\nthe difference between daylight saving and standard\ntime.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Interoperability\nconsiderations</b> <br>\nFuture changes to the format may append more data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Version 1 files\nare considered a legacy format and should be avoided, as\nthey do not support transition times after the year 2038.\nReaders that only understand Version 1 must ignore any data\nthat extends beyond the calculated end of the version 1 data\nblock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Writers should\ngenerate a version 3 file if TZ string extensions are\nnecessary to accurately model transition times. Otherwise,\nversion 2 files should be generated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The sequence of\ntime changes defined by the version 1 header and data block\nshould be a contiguous subsequence of the time changes\ndefined by the version 2+ header and data block, and by the\nfooter. This guideline helps obsolescent version 1 readers\nagree with current readers about timestamps within the\ncontiguous subsequence. It also lets writers not supporting\nobsolescent readers use a <i>tzh_timecnt</i> of zero in the\nversion 1 data block to save space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Time zone\ndesignations should consist of at least three (3) and no\nmore than six (6) ASCII characters from the set of\nalphanumerics, &ldquo;-&rdquo;, and &ldquo;+&rdquo;. This is\nfor compatibility with POSIX requirements for time zone\nabbreviations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When reading a\nversion 2 or 3 file, readers should ignore the version 1\nheader and data block except for the purpose of skipping\nover them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Readers should\ncalculate the total lengths of the headers and data blocks\nand check that they all fit within the actual file size, as\npart of a validity check for the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Common\ninteroperability issues</b> <br>\nThis section documents common problems in reading or writing\nTZif files. Most of these are problems in generating TZif\nfiles for use by older readers. The goals of this section\nare:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">to help TZif writers output\nfiles that avoid common pitfalls in older or buggy TZif\nreaders,</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>to help TZif readers avoid common pitfalls when reading\nfiles generated by future TZif writers, and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>to help any future specification authors see what sort\nof problems arise when the TZif format is changed.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When new\nversions of the TZif format have been defined, a design goal\nhas been that a reader can successfully use a TZif file even\nif the file is of a later TZif version than what the reader\nwas designed for. When complete compatibility was not\nachieved, an attempt was made to limit glitches to rarely\nused timestamps, and to allow simple partial workarounds in\nwriters designed to generate new-version data useful even\nfor older-version readers. This section attempts to document\nthese compatibility issues and workarounds, as well as to\ndocument other common bugs in readers.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Interoperability\nproblems with TZif include the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">Some readers examine only\nversion 1 data. As a partial workaround, a writer can output\nas much version 1 data as possible. However, a reader should\nignore version 1 data, and should use version 2+ data even\nif the reader&rsquo;s native timestamps have only 32\nbits.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers designed for version 2 might mishandle\ntimestamps after a version 3 file&rsquo;s last transition,\nbecause they cannot parse extensions to POSIX in the TZ-like\nstring. As a partial workaround, a writer can output more\ntransitions than necessary, so that only far-future\ntimestamps are mishandled by version 2 readers.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers designed for version 2 do not support\npermanent daylight saving time, e.g., a TZ string\n&ldquo;EST5EDT,0/0,J365/25&rdquo; denoting permanent Eastern\nDaylight Time (-04). As a partial workaround, a writer can\nsubstitute standard time for the next time zone east, e.g.,\n&ldquo;AST4&rdquo; for permanent Atlantic Standard Time\n(-04).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers ignore the footer, and instead predict\nfuture timestamps from the time type of the last transition.\nAs a partial workaround, a writer can output more\ntransitions than necessary.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers do not use time type 0 for timestamps\nbefore the first transition, in that they infer a time type\nusing a heuristic that does not always select time type 0.\nAs a partial workaround, a writer can output a dummy (no-op)\nfirst transition at an early time.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle timestamps before the first\ntransition that has a timestamp not less than -2**31.\nReaders that support only 32-bit timestamps are likely to be\nmore prone to this problem, for example, when they process\n64-bit transitions only some of which are representable in\n32 bits. As a partial workaround, a writer can output a\ndummy transition at timestamp -2**31.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle a transition if its timestamp has\nthe minimum possible signed 64-bit value. Timestamps less\nthan -2**59 are not recommended.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle POSIX-style TZ strings that\ncontain &ldquo;&lt;&rdquo; or &ldquo;&gt;&rdquo;. As a\npartial workaround, a writer can avoid using\n&ldquo;&lt;&rdquo; or &ldquo;&gt;&rdquo; for time zone\nabbreviations containing only alphabetic characters.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Many readers mishandle time zone abbreviations that\ncontain non-ASCII characters. These characters are not\nrecommended.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers may mishandle time zone abbreviations that\ncontain fewer than 3 or more than 6 characters, or that\ncontain ASCII characters other than alphanumerics,\n&ldquo;-&rdquo;, and &ldquo;+&rdquo;. These abbreviations\nare not recommended.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle TZif files that specify\ndaylight-saving time UT offsets that are less than the UT\noffsets for the corresponding standard time. These readers\ndo not support locations like Ireland, which uses the\nequivalent of the POSIX TZ string\n&ldquo;IST-1GMT0,M10.5.0,M3.5.0/1&rdquo;, observing standard\ntime (IST, +01) in summer and daylight saving time (GMT,\n+00) in winter. As a partial workaround, a writer can output\ndata for the equivalent of the POSIX TZ string\n&ldquo;GMT0IST,M3.5.0/1,M10.5.0&rdquo;, thus swapping\nstandard and daylight saving time. Although this workaround\nmisidentifies which part of the year uses daylight saving\ntime, it records UT offsets and time zone abbreviations\ncorrectly.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some\ninteroperability problems are reader bugs that are listed\nhere mostly as warnings to developers of readers.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">Some readers do not support\nnegative timestamps. Developers of distributed applications\nshould keep this in mind if they need to deal with pre-1970\ndata.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle timestamps before the first\ntransition that has a nonnegative timestamp. Readers that do\nnot support negative timestamps are likely to be more prone\nto this problem.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle time zone abbreviations like\n&ldquo;-08&rdquo; that contain &ldquo;+&rdquo;,\n&ldquo;-&rdquo;, or digits.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle UT offsets that are out of the\ntraditional range of -12 through +12 hours, and so do not\nsupport locations like Kiritimati that are outside this\nrange.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle UT offsets in the range [-3599,\n-1] seconds from UT, because they integer-divide the offset\nby 3600 to get 0 and then display the hour part as\n&ldquo;+00&rdquo;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Some readers mishandle UT offsets that are not a\nmultiple of one hour, or of 15 minutes, or of 1 minute.</p></td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/time\">time(2)</a>,\n<a href=\"https://man.page/3/localtime\">localtime(3)</a>, <a href=\"https://man.page/3/tzset\">tzset(3)</a>, <b>tzselect</b>(8),\n<b>zdump</b>(8), <b>zic</b>(8).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Olson A, Eggert\nP, Murchison K. The Time Zone Information Format (TZif).\n2019 Feb.\n<a href=\"https://www.rfc-editor.org/info/rfc8536\">Internet\nRFC 8536</a>\n<a href=\"https://doi.org/10.17487/RFC8536\">doi:10.17487/RFC8536</a>.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":5}