{"name":"mailcap","description":"mailcap - metamail capabilities file","body":"\n\n<h1 align=\"center\">MAILCAP</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mailcap -\nmetamail capabilities file</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>mailcap</i> file is read by the <i>metamail</i> program\nto determine how to display non-text at the local site.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The syntax of a\nmailcap file is quite simple, at least compared to termcap\nfiles. Any line that starts with &quot;#&quot; is a comment.\nBlank lines are ignored. Otherwise, each line defines a\nsingle mailcap entry for a single content type. Long lines\nmay be continued by ending them with a backslash character,\n\\.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each individual\nmailcap entry consists of a content-type specification, a\ncommand to execute, and (possibly) a set of optional\n&quot;flag&quot; values. For example, a very simple mailcap\nentry (which is actually a built-in default behavior for\nmetamail) would look like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">text/plain; cat\n%s</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The optional\nflags can be used to specify additional information about\nthe mail-handling command. For example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">text/plain; cat\n%s; copiousoutput</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">can be used to\nindicate that the output of the &rsquo;cat&rsquo; command\nmay be voluminous, requiring either a scrolling window, a\npager, or some other appropriate coping mechanism.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;type&quot; field (text/plain, in the above example) is\nsimply any legal content type name, as defined by\ninformational RFC 1524. In practice, this is almost any\nstring. It is the string that will be matched against the\n&quot;Content-type&quot; header (or the value passed in with\n-c) to decide if this is the mailcap entry that matches the\ncurrent message. Additionally, the type field may specify a\nsubtype (e.g. &quot;text/ISO-8859-1&quot;) or a wildcard to\nmatch all subtypes (e.g. &quot;image/*&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;command&quot; field is any UNIX command (&quot;cat\n%s&quot; in the above example), and is used to specify the\ninterpreter for the given type of message. It will be passed\nto the shell via the system(3) facility. Semicolons and\nbackslashes within the command must be quoted with\nbackslashes. If the command contains &quot;%s&quot;, those\ntwo characters will be replaced by the name of a file that\ncontains the body of the message. If it contains\n&quot;%t&quot;, those two characters will be replaced by the\ncontent-type field, including the subtype, if any. (That is,\nif the content-type was &quot;image/pbm;\nopt1=something-else&quot;, then &quot;%t&quot; would be\nreplaced by &quot;image/pbm&quot;.) If the command field\ncontains &quot;%{&quot; followed by a parameter name and a\nclosing &quot;}&quot;, then all those characters will be\nreplaced by the value of the named parameter, if any, from\nthe Content-type header. Thus, in the previous example,\n&quot;%{opt1}&quot; will be replaced by\n&quot;something-else&quot;. Finally, if the command contains\n&quot;\\%&quot;, those two characters will be replaced by a\nsingle % character. (In fact, the backslash can be used to\nquote any character, including itself.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no\n&quot;%s&quot; appears in the command field, then instead of\nplacing the message body in a temporary file, metamail will\npass the body to the command on the standard input. This is\nhelpful in saving /tmp file space, but can be problematic\nfor window-oriented applications under some window systems\nsuch as MGR.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Two special\ncodes can appear in the viewing command for objects of type\nmultipart (any subtype). These are &quot;%n&quot; and\n&quot;%F&quot;. %n will be replaced by the number of parts\nwithin the multipart object. %F will be replaced by a series\nof arguments, two for each part, giving first the\ncontent-type and then the name of the temporary file where\nthe decoded part has been stored. In addition, for each file\ncreated by %F, a second file is created, with the same name\nfollowed by &quot;H&quot;, which contains the header\ninformation for that body part. This will not be needed by\nmost multipart handlers, but it is there if you ever need\nit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;notes=xxx&quot; field is an uninterpreted string that\nis used to specify the name of the person who installed this\nentry in the mailcap file. (The &quot;xxx&quot; may be\nreplaced by any text string.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;test=xxx&quot; field is a command that is executed to\ndetermine whether or not the mailcap line actually applies.\nThat is, if the content-type field matches the content-type\non the message, but a &quot;test=&quot; field is present,\nthen the test must succeed before the mailcap line is\nconsidered to &quot;match&quot; the message being viewed.\nThe command may be any UNIX command, using the same syntax\nand the same %-escapes as for the viewing command, as\ndescribed above. A command is considered to succeed if it\nexits with a zero exit status, and to fail otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;print=xxx&quot; field is a command that is executed to\nprint the data instead of display it interactively. This\nbehavior is usually a consequence of invoking metamail with\nthe &quot;-h&quot; switch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;textualnewlines&quot; field can be used in the rather\nobscure case where metamail&rsquo;s default rules for\ntreating newlines in base64-encoded data are unsatisfactory.\nBy default, metamail will translate CRLF to the local\nnewline character in decoded base64 output if the\ncontent-type is &quot;text&quot; (any subtype), but will not\ndo so otherwise. A mailcap entry with a field of\n&quot;textualnewlines=1&quot; will force such translation\nfor the specified content-type, while\n&quot;textualnewlines=0&quot; will guarantee that the\ntranslation does not take place even for textual\ncontent-types.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;compose&quot; field may be used to specify a program\nthat can be used to compose a new body or body part in the\ngiven format. Its intended use is to support mail composing\nagents that support the composition of multiple types of\nmail using external composing agents. As with the\nview-command, the compose command will be executed after\nreplacing certain escape sequences starting with\n&quot;%&quot;. In particular, %s should be replaced by the\nname of a file to which the composed data is to be written\nby the specified composing program, thus allowing the\ncalling program (e.g. metamail) to tell the called program\nwhere to store the composed data. If %s does not appear,\nthen the composed data will be assumed to be written by the\ncomposing programs to standard output. The result of the\ncomposing program may be data that is NOT yet suitable for\nmail transport -- that is, a Content-Transfer-Encoding may\nstill need to be applied to the data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;composetyped&quot; field is similar to the\n&quot;compose&quot; field, but is to be used when the\ncomposing program needs to specify the Content-type header\nfield to be applied to the composed data. The\n&quot;compose&quot; field is simpler, and is preferred for\nuse with existing (non-mail-oriented) programs for composing\ndata in a given format. The &quot;composetyped&quot; field\nis necessary when the Content-type information must include\nauxiliary parameters, and the composition program must then\nknow enough about mail formats to produce output that\nincludes the mail type information, and to apply any\nnecessary Content-Transfer-Encoding. Conceptually,\n&quot;compose&quot; specifies a program that simply outputs\nthe specified type of data in its raw form, while\n&quot;composetyped&quot; specifies a program that outputs\nthe data as a MIME object, with all necessary Content-*\nheaders already in place. <b><br>\nneedsterminal</b></p>\n\n<p style=\"margin-left:23%;\">If this flag is given, the\nnamed interpreter needs to interact with the user on a\nterminal. In some environments (e.g. a window-oriented mail\nreader under X11) this will require the creation of a new\nterminal emulation window, while in most environments it\nwill not. If the mailcap entry specifies\n&quot;needsterminal&quot; and metamail is not running on a\nterminal (as determined by isatty(3), the -x option, and the\nMM_NOTTTY environment variable) then metamail will try to\nrun the command in a new terminal emulation window.\nCurrently, metamail knows how to create new windows under\nthe X11, SunTools, and WM window systems.</p>\n\n<p style=\"margin-left:11%;\"><b>copiousoutput</b></p>\n\n<p style=\"margin-left:23%;\">This flag should be given\nwhenever the interpreter is capable of producing more than a\nfew lines of output on stdout, and does no interaction with\nthe user. If the mailcap entry specifies copiousoutput, and\npagination has been requested via the &quot;-p&quot;\ncommand, then the output of the command being executed will\nbe piped through a pagination program (&quot;more&quot; by\ndefault, but this can be overridden with the METAMAIL_PAGER\nenvironment variable).</p>\n\n<h2>BUILT-IN CONTENT-TYPE SUPPORT\n<a name=\"BUILT-IN CONTENT-TYPE SUPPORT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The metamail\nprogram has built-in support for a few key content-types. In\nparticular, it supports the text type, the multipart and\nmultipart/alternative type, and the message/rfc822 types.\nThis support is incomplete for many subtypes -- for example,\nit only supports US-ASCII text in general. This kind of\nbuilt-in support can be OVERRIDDEN by an entry in any\nmailcap file on the user&rsquo;s search path. Metamail also\nhas rudimentary built-in support for types that are totally\nunrecognized -- i.e. for which no mailcap entry or built-in\nhandler exists. For such unrecognized types, metamail will\nwrite a file with a &quot;clean&quot; copy of the data --\ni.e. a copy in which all mail headers have been removed, and\nin which any 7-bit transport encoding has been decoded.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$HOME/.mailcap:/etc/mailcap:/usr/share/etc/mailcap:/usr/local/etc/mailcap\n-- default path for mailcap files.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/run-mailcap\">run-mailcap(1)</a><b>,\nmailcap.order</b>(5)<b>, update-mime</b>(8)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RFC 1524\n(&lt;http://tools.ietf.org/html/rfc1524&gt;)</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n1991 Bell Communications Research, Inc. (Bellcore)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission to\nuse, copy, modify, and distribute this material for any\npurpose and without fee is hereby granted, provided that the\nabove copyright notice and this permission notice appear in\nall copies, and that the name of Bellcore not be used in\nadvertising or publicity pertaining to this material without\nthe specific, prior written permission of an authorized\nrepresentative of Bellcore. BELLCORE MAKES NO\nREPRESENTATIONS ABOUT THE ACCURACY OR SUITABILITY OF THIS\nMATERIAL FOR ANY PURPOSE. IT IS PROVIDED &quot;AS IS&quot;,\nWITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Nathaniel S.\nBorenstein</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#BUILT-IN CONTENT-TYPE SUPPORT\">BUILT-IN CONTENT-TYPE SUPPORT</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":5}