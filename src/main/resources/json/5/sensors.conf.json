{"name":"sensors.conf","body":"\n\n<h1 align=\"center\">sensors.conf</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sensors.conf -\nlibsensors configuration file</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sensors.conf\ndescribes how libsensors, and so all programs using it,\nshould translate the raw readings from the kernel modules to\nreal-world values.</p>\n\n<h2>SEMANTICS\n<a name=\"SEMANTICS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On a given\nsystem, there may be one or more hardware monitoring chips.\nEach chip may have several features. For example, the LM78\nmonitors 7 voltage inputs, 3 fans and one temperature.\nFeature names are standardized. Typical feature names are\nin0, in1, in2... for voltage inputs, fan1, fan2, fan3... for\nfans and temp1, temp2, temp3... for temperature inputs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each feature\nmay in turn have one or more sub-features, each representing\nan attribute of the feature: input value, low limit, high\nlimit, alarm, etc. Sub-feature names are standardized as\nwell. For example, the first voltage input (in0) would\ntypically have sub-features in0_input (measured value),\nin0_min (low limit), in0_max (high limit) and in0_alarm\n(alarm flag). Which sub-features are actually present depend\non the exact chip type.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>sensors.conf</i> configuration file will let you\nconfigure each chip, feature and sub-feature in a way that\nmakes sense for your system.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The rest of\nthis section describes the meaning of each configuration\nstatement.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CHIP\nSTATEMENT</b> <br>\nA <i>chip</i> statement selects for which chips all\nfollowing <i>compute</i>, <i>label</i>, <i>ignore</i> and\n<i>set</i> statements are meant. A chip selection remains\nvalid until the next <i>chip</i> statement. Example:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">chip\n&quot;lm78-*&quot; &quot;lm79-*&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a chip\nmatches at least one of the chip descriptions, the following\nconfiguration lines are examined for it, otherwise they are\nignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A chip\ndescription is built from several elements, separated by\ndashes. The first element is the chip type, the second\nelement is the name of the bus, and the third element is the\nhexadecimal address of the chip. Such chip descriptions are\nprinted by sensors(1) as the first line for every chip.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The name of the\nbus is either <i>isa</i>, <i>pci</i>, <i>virtual</i>,\n<i>spi-*, i2c-N</i> or <i>mdio</i> with <i>N</i> being a bus\nnumber as bound with a <i>bus</i> statement. This list\nisn&rsquo;t necessarily exhaustive as support for other bus\ntypes may be added in the future.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You may\nsubstitute the wildcard operator <i>*</i> for every element.\nNote however that it wouldn&rsquo;t make any sense to\nspecify the address without the bus type, so the address\npart is plain omitted when the bus type isn&rsquo;t\nspecified. Here is how you would express the following\nmatches:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"23%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3466881.png\" alt=\"Image grohtml-3466881.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If several chip\nstatements match a specific chip, they are all\nconsidered.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>LABEL\nSTATEMENT</b> <br>\nA <i>label</i> statement describes how a feature should be\ncalled. Features without a <i>label</i> statement are just\ncalled by their feature name. Applications can use this to\nlabel the readings they present. Example:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">label in3\n&quot;+5V&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first\nargument is the feature name. The second argument is the\nfeature description.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that you\nmust use the raw feature name, which is not necessarily the\none displayed by &quot;sensors&quot; by default. Use\n&quot;sensors -u&quot; to see the raw feature names. Same\napplies to all other statement types below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>IGNORE\nSTATEMENT</b> <br>\nAn <i>ignore</i> statement is a hint that a specific feature\nshould be ignored - probably because it returns bogus values\n(for example, because a fan or temperature sensor is not\nconnected). Example:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">ignore fan1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The only\nargument is the feature name. Please note that this does not\ndisable anything in the actual sensor chip; it simply hides\nthe feature in question from libsensors users.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>COMPUTE\nSTATEMENT</b> <br>\nA <i>compute</i> statement describes how a feature&rsquo;s\nraw value should be translated to a real-world value, and\nhow a real-world value should be translated back to a raw\nvalue again. This is most useful for voltage sensors,\nbecause in general sensor chips have a limited range and\nvoltages outside this range must be divided (using\nresistors) before they can be monitored. Example:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">compute in3\n((6.8/10)+1)*@, @/((6.8/10)+1)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The example\nabove expresses the fact that the voltage input is divided\nusing two resistors of values 6.8 Ohm and 10 Ohm,\nrespectively. See the <b>VOLTAGE COMPUTATION DETAILS</b>\nsection below for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first\nargument is the feature name. The second argument is an\nexpression which specifies how a raw value must be\ntranslated to a real-world value; &rsquo;@&rsquo; stands\nhere for the raw value. This is the formula which will be\napplied when reading values from the chip. The third\nargument is an expression that specifies how a real-world\nvalue should be translated back to a raw value;\n&rsquo;@&rsquo; stands here for the real-world value. This\nis the formula which will be applied when writing values to\nthe chip. The two formulas are obviously related, and are\nseparated by a comma.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n<i>compute</i> statement applies to all sub-features of the\ntarget feature for which it makes sense. For example, the\nabove example would affect sub-features in3_min and in3_max\n(which are voltage values) but not in3_alarm (which is a\nboolean flag.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noperators are supported in <i>compute</i> statements:</p>\n\n<p style=\"margin-left:22%;\">+ - * / ( ) ^ &rsquo;</p>\n\n<p style=\"margin-left:11%;\">^x means exp(x) and &rsquo;x\nmeans ln(x).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You may use the\nname of sub-features in these expressions; current readings\nare substituted. You should be careful though to avoid\ncircular references.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If at any\nmoment a translation between a raw and a real-world value is\ncalled for, but no <i>compute</i> statement applies, a\none-on-one translation is used instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SET\nSTATEMENT</b> <br>\nA <i>set</i> statement is used to write a sub-feature value\nto the chip. Of course not all sub-feature values can be set\nthat way, in particular input values and alarm flags can\nnot. Valid sub-features are usually min/max limits.\nExample:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">set in3_min 5 *\n0.95 <br>\nset in3_max 5 * 1.05</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The example\nabove basically configures the chip to allow a 5% deviance\nfor the +5V power input.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first\nargument is the feature name. The second argument is an\nexpression which determines the written value. If there is\nan applying <i>compute</i> statement, this value is fed to\nits third argument to translate it to a raw value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You may use the\nname of sub-features in these expressions; current readings\nare substituted. You should be careful though to avoid\ncircular references.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat <i>set</i> statements are only executed by sensors(1)\nwhen you use the <b>-s</b> option. Typical graphical sensors\napplications do not care about these statements at all.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>BUS\nSTATEMENT</b> <br>\nA <i>bus</i> statement binds the description of an I2C or\nSMBus adapter to a bus number. This makes it possible to\nrefer to an adapter in the configuration file, independent\nof the actual correspondence of bus numbers and actual\nadapters (which may change from moment to moment).\nExample:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">bus\n&quot;i2c-0&quot; &quot;SMBus PIIX4 adapter at\ne800&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first\nargument is the bus number. It is the literal text\n<i>i2c-</i>, followed by a number. As there is a dash in\nthis argument, it must always be quoted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The second\nargument is the adapter name, it must match exactly the\nadapter name as it appears in\n<i>/sys/class/i2c-adapter/i2c-*/name</i>. It should always\nbe quoted as well as it will most certainly contain spaces\nor dashes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>bus</i>\nstatements may be scattered randomly throughout the\nconfiguration file; there is no need to place the bus line\nbefore the place where its binding is referred to. Still, as\na matter of good style, we suggest you place all <i>bus</i>\nstatements together at the top of your configuration\nfile.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Running\n<b>sensors --bus-list</b> will generate these lines for\nyou.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the case\nwhere multiple configuration files are used, the scope of\neach <i>bus</i> statement is the configuration file it was\ndefined in. This makes it possible to have bus statements in\nall configuration files which will not unexpectedly\ninterfere with each other.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>STATEMENT\nORDER</b> <br>\nStatements can go in any order, however it is recommended to\nput &rsquo;set fanX_div&rsquo; statements before &rsquo;set\nfanX_min&rsquo; statements, in case a driver doesn&rsquo;t\npreserve the fanX_min setting when the fanX_div value is\nchanged. Even if the driver does, it&rsquo;s still better to\nput the statements in this order to avoid accuracy loss.</p>\n\n<h2>VOLTAGE COMPUTATION DETAILS\n<a name=\"VOLTAGE COMPUTATION DETAILS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most voltage\nsensors in sensor chips have a range of 0 to 4.08 V. This is\ngenerally sufficient for the +3.3V and CPU supply voltages,\nso the sensor chip reading is the actual voltage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other supply\nvoltages must be scaled with an external resistor network.\nThe driver reports the value at the chip&rsquo;s pin (0 -\n4.08 V), and the userspace application must convert this raw\nvalue to an actual voltage. The <i>compute</i> statements\nprovide this facility.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unfortunately\nthe resistor values vary among motherboard types. Therefore\nyou have to figure out the correct resistor values for your\nown motherboard.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For positive\nvoltages (typically +5V and +12V), two resistors are used,\nwith the following formula: <br>\nR1 = R2 * (Vs/Vin - 1)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where: <br>\nR1 and R2 are the resistor values <br>\nVs is the actual voltage being monitored <br>\nVin is the voltage at the pin</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This leads to\nthe following compute formula: <br>\ncompute inX @*((R1/R2)+1), @/(((R1/R2)+1)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Real-world\nformula for +5V and +12V would look like: <br>\ncompute in3 @*((6.8/10)+1), @/((6.8/10)+1) <br>\ncompute in4 @*((28/10)+1), @/((28/10)+1)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For negative\nvoltages (typically -5V and -12V), two resistors are used as\nwell, but different boards use different strategies to bring\nthe voltage value into the 0 - 4.08 V range. Some use an\ninverting amplifier, others use a positive reference\nvoltage. This leads to different computation formulas. Note\nthat most users won&rsquo;t have to care because most modern\nmotherboards make little use of -12V and no use of -5V so\nthey do not bother monitoring these voltage inputs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Real-world\nexamples for the inverting amplifier case: <br>\ncompute in5 -@*(240/60), -@/(240/60) <br>\ncompute in6 -@*(100/60), -@/(100/60)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Real-world\nexamples for the positive voltage reference case: <br>\ncompute in5 @*(1+232/56) - 4.096*232/56, (@ +\n4.096*232/56)/(1+232/56) <br>\ncompute in6 @*(1+120/56) - 4.096*120/56, (@ +\n4.096*120/56)/(1+120/56)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many recent\nmonitoring chips have a 0 - 2.04 V range, so scaling\nresistors are even more needed, and resistor values are\ndifferent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are also\na few chips out there which have internal scaling resistors,\nmeaning that their value is known and doesn&rsquo;t change\nfrom one motherboard to the next. For these chips, the\ndriver usually handles the scaling so it is transparent to\nthe user and no <i>compute</i> statements are needed.</p>\n\n<h2>TEMPERATURE CONFIGURATION\n<a name=\"TEMPERATURE CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On top of the\nusual features, temperatures can have two specific\nsub-features: temperature sensor type (tempX_type) and\nhysteresis values (tempX_max_hyst, tempX_crit_hyst\netc.).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>THERMAL\nSENSOR TYPES</b> <br>\nAvailable thermal sensor types:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"85%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3466882.png\" alt=\"Image grohtml-3466882.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example, to\nset temp1 to thermistor type, use:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">set temp1_type\n4</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only certain\nchips support thermal sensor type change, and even these\nusually only support some of the types above. Please refer\nto the specific driver documentation to find out which types\nare supported by your chip.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In theory, the\nBIOS should have configured the sensor types correctly, so\nyou shouldn&rsquo;t have to touch them, but sometimes it\nisn&rsquo;t the case.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>THERMAL\nHYSTERESIS MECHANISM</b> <br>\nMany monitoring chips do not handle the high and critical\ntemperature limits as simple limits. Instead, they have two\nvalues for each limit, one which triggers an alarm when the\ntemperature rises and another one which clears the alarm\nwhen the temperature falls. The latter is typically a few\ndegrees below the former. This mechanism is known as\nhysteresis.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The reason for\nimplementing things that way is that high temperature alarms\ntypically trigger an action to attempt to cool the system\ndown, either by scaling down the CPU frequency, or by\nkicking in an extra fan. This should normally let the\ntemperature fall in a timely manner. If this was clearing\nthe alarm immediately, then the system would be back to its\noriginal state where the temperature rises and the alarm\nwould immediately trigger again, causing an undesirable\ntight fan on, fan off loop. The hysteresis mechanism ensures\nthat the system is really cool before the fan stops, so that\nit will not have to kick in again immediately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So, in addition\nto tempX_max, many chips have a tempX_max_hyst sub-feature.\nLikewise, tempX_crit often comes with tempX_crit_hyst.\ntempX_emerg_hyst, tempX_min_hyst and tempX_lcrit_hyst exist\ntoo but aren&rsquo;t as common. Example:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">set temp1_max\n60 <br>\nset temp1_max_hyst 56</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The hysteresis\nmechanism can be disabled by giving both limits the same\nvalue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that it is\nstrongly recommended to set the hysteresis value after the\nlimit value it relates to in the configuration file.\nImplementation details on the hardware or driver side may\ncause unexpected results if the hysteresis value is set\nfirst.</p>\n\n<h2>BEEPS\n<a name=\"BEEPS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some chips\nsupport alarms with beep warnings. When an alarm is\ntriggered you can be warned by a beeping signal through your\ncomputer speaker. On top of per-feature beep flags, there is\nusually a master beep control switch to enable or disable\nbeeping globally. Enable beeping using:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">set beep_enable\n1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">or disable it\nusing:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">set beep_enable\n0</p>\n\n<h2>WHICH STATEMENT APPLIES\n<a name=\"WHICH STATEMENT APPLIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If more than\none statement of the same kind applies at a certain moment,\nthe last one in the configuration file is used. So usually,\nyou should put more general <i>chip</i> statements at the\ntop, so you can overrule them below.</p>\n\n<h2>SYNTAX\n<a name=\"SYNTAX\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Comments are\nintroduced by hash marks. A comment continues to the end of\nthe line. Empty lines, and lines containing only whitespace\nor comments are ignored. Other lines have one of the below\nforms. There must be whitespace between each element, but\nthe amount of whitespace is unimportant. A line may be\ncontinued on the next line by ending it with a backslash;\nthis does not work within a comment, <b>NAME</b> or\n<b>NUMBER</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">bus <b>NAME\nNAME NAME</b> <br>\nchip <b>NAME-LIST</b> <br>\nlabel <b>NAME NAME</b> <br>\ncompute <b>NAME EXPR</b> , <b>EXPR</b> <br>\nignore <b>NAME</b> <br>\nset <b>NAME EXPR</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A <b>NAME</b>\nis a string. If it only contains letters, digits and\nunderscores, it does not have to be quoted; in all other\ncases, you must use double quotes around it. Within quotes,\nyou can use the normal escape-codes from C.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n<b>NAME-LIST</b> is one or more <b>NAME</b> items behind\neach other, separated by whitespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A <b>EXPR</b>\nis of one of the below forms:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>NUMBER <br>\nNAME</b> <br>\n@ <b><br>\nEXPR</b> + <b>EXPR <br>\nEXPR</b> - <b>EXPR <br>\nEXPR</b> * <b>EXPR <br>\nEXPR</b> / <b>EXPR</b> <br>\n- <b>EXPR</b> <br>\n^ <b>EXPR</b> <br>\n&rsquo; <b>EXPR</b> <br>\n( <b>EXPR</b> )</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A <b>NUMBER</b>\nis a floating-point number. &rsquo;10&rsquo;,\n&rsquo;10.4&rsquo; and &rsquo;.4&rsquo; are examples of\nvalid floating-point numbers; &rsquo;10.&rsquo; or\n&rsquo;10E4&rsquo; are not valid.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/etc/sensors3.conf\n<br>\n/etc/sensors.conf</i></p>\n\n<p style=\"margin-left:22%;\">The system-wide\n<a href=\"https://man.page/3/libsensors\">libsensors(3)</a> configuration file. /etc/sensors3.conf\nis tried first, and if it doesn&rsquo;t exist,\n/etc/sensors.conf is used instead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/etc/sensors.d</i></p>\n\n<p style=\"margin-left:22%;\">A directory where you can put\nadditional libsensors configuration files. Files found in\nthis directory will be processed in alphabetical order after\nthe default configuration file. Files with names that start\nwith a dot are ignored.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">libsensors(3)</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Frodo Looijaard\nand the lm_sensors group\nhttps://hwmon.wiki.kernel.org/lm_sensors</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEMANTICS\">SEMANTICS</a>","<a href=\"#VOLTAGE COMPUTATION DETAILS\">VOLTAGE COMPUTATION DETAILS</a>","<a href=\"#TEMPERATURE CONFIGURATION\">TEMPERATURE CONFIGURATION</a>","<a href=\"#BEEPS\">BEEPS</a>","<a href=\"#WHICH STATEMENT APPLIES\">WHICH STATEMENT APPLIES</a>","<a href=\"#SYNTAX\">SYNTAX</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":5}