{"name":"systemd.unit","body":"\n\n<h1 align=\"center\">SYSTEMD.UNIT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">systemd.unit -\nUnit configuration</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>service</i>.service,\n<i>socket</i>.socket, <i>device</i>.device,\n<i>mount</i>.mount, <i>automount</i>.automount,\n<i>swap</i>.swap, <i>target</i>.target, <i>path</i>.path,\n<i>timer</i>.timer, <i>slice</i>.slice,\n<i>scope</i>.scope</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>System Unit\nSearch Path</b> <br>\n/etc/systemd/system.control/* <br>\n/run/systemd/system.control/* <br>\n/run/systemd/transient/* <br>\n/run/systemd/generator.early/* <br>\n/etc/systemd/system/* <br>\n/etc/systemd/system.attached/* <br>\n/run/systemd/system/* <br>\n/run/systemd/system.attached/* <br>\n/run/systemd/generator/* <br>\n... <br>\n/lib/systemd/system/* <br>\n/run/systemd/generator.late/*</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>User Unit\nSearch Path</b> <br>\n~/.config/systemd/user.control/* <br>\n$XDG_RUNTIME_DIR/systemd/user.control/* <br>\n$XDG_RUNTIME_DIR/systemd/transient/* <br>\n$XDG_RUNTIME_DIR/systemd/generator.early/* <br>\n~/.config/systemd/user/* <br>\n$XDG_CONFIG_DIRS/systemd/user/* <br>\n/etc/systemd/user/* <br>\n$XDG_RUNTIME_DIR/systemd/user/* <br>\n/run/systemd/user/* <br>\n$XDG_RUNTIME_DIR/systemd/generator/* <br>\n$XDG_DATA_HOME/systemd/user/* <br>\n$XDG_DATA_DIRS/systemd/user/* <br>\n... <br>\n/usr/lib/systemd/user/* <br>\n$XDG_RUNTIME_DIR/systemd/generator.late/*</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A unit file is\na plain text ini-style file that encodes information about a\nservice, a socket, a device, a mount point, an automount\npoint, a swap file or partition, a start-up target, a\nwatched file system path, a timer controlled and supervised\nby <a href=\"https://man.page/1/systemd\">systemd(1)</a>, a resource management slice or a group\nof externally created processes. See\n<b>systemd.syntax</b>(7) for a general description of the\nsyntax.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This man page\nlists the common configuration options of all the unit\ntypes. These options need to be configured in the [Unit] or\n[Install] sections of the unit files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe generic [Unit] and [Install] sections described here,\neach unit may have a type-specific section, e.g. [Service]\nfor a service unit. See the respective man pages for more\ninformation: <b>systemd.service</b>(5),\n<b>systemd.socket</b>(5), <b>systemd.device</b>(5),\n<b>systemd.mount</b>(5), <b>systemd.automount</b>(5),\n<b>systemd.swap</b>(5), <b>systemd.target</b>(5),\n<b>systemd.path</b>(5), <b>systemd.timer</b>(5),\n<b>systemd.slice</b>(5), <b>systemd.scope</b>(5).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unit files are\nloaded from a set of paths determined during compilation,\ndescribed in the next section.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Valid unit\nnames consist of a &quot;name prefix&quot; and a dot and a\nsuffix specifying the unit type. The &quot;unit prefix&quot;\nmust consist of one or more valid characters (ASCII letters,\ndigits, &quot;:&quot;, &quot;-&quot;, &quot;_&quot;,\n&quot;.&quot;, and &quot;\\&quot;). The total length of the\nunit name including the suffix must not exceed 256\ncharacters. The type suffix must be one of\n&quot;.service&quot;, &quot;.socket&quot;,\n&quot;.device&quot;, &quot;.mount&quot;,\n&quot;.automount&quot;, &quot;.swap&quot;,\n&quot;.target&quot;, &quot;.path&quot;, &quot;.timer&quot;,\n&quot;.slice&quot;, or &quot;.scope&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Units names can\nbe parameterized by a single argument called the\n&quot;instance name&quot;. The unit is then constructed\nbased on a &quot;template file&quot; which serves as the\ndefinition of multiple services or other units. A template\nunit must have a single &quot;@&quot; at the end of the name\n(right before the type suffix). The name of the full unit is\nformed by inserting the instance name between &quot;@&quot;\nand the unit type suffix. In the unit file itself, the\ninstance parameter may be referred to using &quot;%i&quot;\nand other specifiers, see below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unit files may\ncontain additional options on top of those listed here. If\nsystemd encounters an unknown option, it will write a\nwarning log message but continue loading the unit. If an\noption or section name is prefixed with <b>X-</b>, it is\nignored completely by systemd. Options within an ignored\nsection do not need the prefix. Applications may use this to\ninclude additional information in the unit files. To access\nthose options, applications need to parse the unit files on\ntheir own.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Units can be\naliased (have an alternative name), by creating a symlink\nfrom the new name to the existing name in one of the unit\nsearch paths. For example, systemd-networkd.service has the\nalias dbus-org.freedesktop.network1.service, created during\ninstallation as a symlink, so when <b>systemd</b> is asked\nthrough D-Bus to load dbus-org.freedesktop.network1.service,\nit'll load systemd-networkd.service. As another example,\ndefault.target &mdash; the default system target started at\nboot &mdash; is commonly symlinked (aliased) to either\nmulti-user.target or graphical.target to select what is\nstarted by default. Alias names may be used in commands like\n<b>disable</b>, <b>start</b>, <b>stop</b>, <b>status</b>,\nand similar, and in all unit dependency directives,\nincluding <i>Wants=</i>, <i>Requires=</i>, <i>Before=</i>,\n<i>After=</i>. Aliases cannot be used with the <b>preset</b>\ncommand.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Aliases obey\nthe following restrictions: a unit of a certain type\n(&quot;.service&quot;, &quot;.socket&quot;, ...) can only be\naliased by a name with the same type suffix. A plain unit\n(not a template or an instance), may only be aliased by a\nplain name. A template instance may only be aliased by\nanother template instance, and the instance part must be\nidentical. A template may be aliased by another template (in\nwhich case the alias applies to all instances of the\ntemplate). As a special case, a template instance (e.g.\n&quot;alias@inst.service&quot;) may be a symlink to\ndifferent template (e.g. &quot;template@inst.service&quot;).\nIn that case, just this specific instance is aliased, while\nother instances of the template (e.g.\n&quot;alias@foo.service&quot;,\n&quot;alias@bar.service&quot;) are not aliased. Those rule\npreserve the requirement that the instance (if any) is\nalways uniquely defined for a given unit and all its\naliases.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unit files may\nspecify aliases through the <i>Alias=</i> directive in the\n[Install] section. When the unit is enabled, symlinks will\nbe created for those names, and removed when the unit is\ndisabled. For example, reboot.target specifies\n<i>Alias=ctrl-alt-del.target</i>, so when enabled, the\nsymlink /etc/systemd/system/ctrl-alt-del.service pointing to\nthe reboot.target file will be created, and when\nCtrl+Alt+Del is invoked, <b>systemd</b> will look for the\nctrl-alt-del.service and execute reboot.service.\n<b>systemd</b> does not look at the [Install] section at all\nduring normal operation, so any directives in that section\nonly have an effect through the symlinks created during\nenablement.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Along with a\nunit file foo.service, the directory foo.service.wants/ may\nexist. All unit files symlinked from such a directory are\nimplicitly added as dependencies of type <i>Wants=</i> to\nthe unit. Similar functionality exists for <i>Requires=</i>\ntype dependencies as well, the directory suffix is\n.requires/ in this case. This functionality is useful to\nhook units into the start-up of other units, without having\nto modify their unit files. For details about the semantics\nof <i>Wants=</i>, see below. The preferred way to create\nsymlinks in the .wants/ or .requires/ directory of a unit\nfile is by embedding the dependency in [Install] section of\nthe target unit, and creating the symlink in the file system\nwith the <b>enable</b> or <b>preset</b> commands of\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Along with a\nunit file foo.service, a &quot;drop-in&quot; directory\nfoo.service.d/ may exist. All files with the suffix\n&quot;.conf&quot; from this directory will be merged in the\nalphanumeric order and parsed after the main unit file\nitself has been parsed. This is useful to alter or add\nconfiguration settings for a unit, without having to modify\nunit files. Each drop-in file must contain appropriate\nsection headers. For instantiated units, this logic will\nfirst look for the instance &quot;.d/&quot; subdirectory\n(e.g. &quot;foo@bar.service.d/&quot;) and read its\n&quot;.conf&quot; files, followed by the template\n&quot;.d/&quot; subdirectory (e.g.\n&quot;foo@.service.d/&quot;) and the &quot;.conf&quot; files\nthere. Moreover for unit names containing dashes\n(&quot;-&quot;), the set of directories generated by\nrepeatedly truncating the unit name after all dashes is\nsearched too. Specifically, for a unit name\nfoo-bar-baz.service not only the regular drop-in directory\nfoo-bar-baz.service.d/ is searched but also both\nfoo-bar-.service.d/ and foo-.service.d/. This is useful for\ndefining common drop-ins for a set of related units, whose\nnames begin with a common prefix. This scheme is\nparticularly useful for mount, automount and slice units,\nwhose systematic naming structure is built around dashes as\ncomponent separators. Note that equally named drop-in files\nfurther down the prefix hierarchy override those further up,\ni.e. foo-bar-.service.d/10-override.conf overrides\nfoo-.service.d/10-override.conf.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In cases of\nunit aliases (described above), dropins for the aliased name\nand all aliases are loaded. In the example of default.target\naliasing graphical.target, default.target.d/,\ndefault.target.wants/, default.target.requires/,\ngraphical.target.d/, graphical.target.wants/,\ngraphical.target.requires/ would all be read. For templates,\ndropins for the template, any template aliases, the template\ninstance, and all alias instances are read. When just a\nspecific template instance is aliased, then the dropins for\nthe target template, the target template instance, and the\nalias template instance are read.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\n/etc/systemd/system, the drop-in &quot;.d/&quot; directories\nfor system services can be placed in /lib/systemd/system or\n/run/systemd/system directories. Drop-in files in /etc/ take\nprecedence over those in /run/ which in turn take precedence\nover those in /lib/. Drop-in files under any of these\ndirectories take precedence over unit files wherever\nlocated. Multiple drop-in files with different names are\napplied in lexicographic order, regardless of which of the\ndirectories they reside in.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Units also\nsupport a top-level drop-in with <i>type</i>.d/, where\n<i>type</i> may be e.g. &quot;service&quot; or\n&quot;socket&quot;, that allows altering or adding to the\nsettings of all corresponding unit files on the system. The\nformatting and precedence of applying drop-in configurations\nfollow what is defined above. Files in <i>type</i>.d/ have\nlower precedence compared to files in name-specific override\ndirectories. The usual rules apply: multiple drop-in files\nwith different names are applied in lexicographic order,\nregardless of which of the directories they reside in, so a\nfile in <i>type</i>.d/ applies to a unit only if there are\nno drop-ins or masks with that name in directories with\nhigher precedence. See Examples.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that while\nsystemd offers a flexible dependency system between units it\nis recommended to use this functionality only sparingly and\ninstead rely on techniques such as bus-based or socket-based\nactivation which make dependencies implicit, resulting in a\nboth simpler and more flexible system.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As mentioned\nabove, a unit may be instantiated from a template file. This\nallows creation of multiple units from a single\nconfiguration file. If systemd looks for a unit\nconfiguration file, it will first search for the literal\nunit name in the file system. If that yields no success and\nthe unit name contains an &quot;@&quot; character, systemd\nwill look for a unit template that shares the same name but\nwith the instance string (i.e. the part between the\n&quot;@&quot; character and the suffix) removed. Example: if\na service getty@tty3.service is requested and no file by\nthat name is found, systemd will look for getty@.service and\ninstantiate a service from that configuration file if it is\nfound.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To refer to the\ninstance string from within the configuration file you may\nuse the special &quot;%i&quot; specifier in many of the\nconfiguration options. See below for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a unit file\nis empty (i.e. has the file size 0) or is symlinked to\n/dev/null, its configuration will not be loaded and it\nappears with a load state of &quot;masked&quot;, and cannot\nbe activated. Use this as an effective way to fully disable\na unit, making it impossible to start it even manually.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The unit file\nformat is covered by the <b><font color=\"#0000FF\">Interface\nPortability and Stability Promise</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">.</font></p>\n\n<h2>STRING ESCAPING FOR INCLUSION IN UNIT NAMES\n<a name=\"STRING ESCAPING FOR INCLUSION IN UNIT NAMES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Sometimes\nit is useful to convert arbitrary strings into unit names.\nTo facilitate this, a method of string escaping is used, in\norder to map strings containing arbitrary byte values\n(except <b>NUL</b>) into valid unit names and their\nrestricted character set. A common special case are unit\nnames that reflect paths to objects in the file system\nhierarchy. Example: a device unit dev-sda.device refers to a\ndevice with the device node /dev/sda in the file\nsystem.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nescaping algorithm operates as follows: given a string, any\n&quot;/&quot; character is replaced by &quot;-&quot;, and\nall other characters which are not ASCII alphanumerics,\n&quot;:&quot;, &quot;_&quot; or &quot;.&quot; are replaced\nby C-style &quot;\\x2d&quot; escapes. In addition,\n&quot;.&quot; is replaced with such a C-style escape when it\nwould appear as the first character in the escaped\nstring.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nthe input qualifies as absolute file system path, this\nalgorithm is extended slightly: the path to the root\ndirectory &quot;/&quot; is encoded as single dash\n&quot;-&quot;. In addition, any leading, trailing or\nduplicate &quot;/&quot; characters are removed from the\nstring before transformation. Example: /foo//bar/baz/\nbecomes &quot;foo-bar-baz&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nescaping is fully reversible, as long as it is known whether\nthe escaped string was a path (the unescaping results are\ndifferent for paths and non-path strings). The\n<a href=\"https://man.page/1/systemd-escape\">systemd-escape(1)</a> command may be used to apply and\nreverse escaping on arbitrary strings. Use <b>systemd-escape\n--path</b> to escape path strings, and <b>systemd-escape</b>\nwithout <b>--path</b> otherwise.</font></p>\n\n<h2>AUTOMATIC DEPENDENCIES\n<a name=\"AUTOMATIC DEPENDENCIES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Implicit\nDependencies</b> <br>\nA number of unit dependencies are implicitly established,\ndepending on unit type and unit configuration. These\nimplicit dependencies can make unit configuration file\ncleaner. For the implicit dependencies in each unit type,\nplease refer to section &quot;Implicit Dependencies&quot; in\nrespective man pages.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\nexample, service units with <i>Type=dbus</i> automatically\nacquire dependencies of type <i>Requires=</i> and\n<i>After=</i> on dbus.socket. See <b>systemd.service</b>(5)\nfor details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Default\nDependencies</b> <br>\nDefault dependencies are similar to implicit dependencies,\nbut can be turned on and off by setting\n<i>DefaultDependencies=</i> to <i>yes</i> (the default) and\n<i>no</i>, while implicit dependencies are always in effect.\nSee section &quot;Default Dependencies&quot; in respective\nman pages for the effect of enabling\n<i>DefaultDependencies=</i> in each unit types.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\nexample, target units will complement all configured\ndependencies of type <i>Wants=</i> or <i>Requires=</i> with\ndependencies of type <i>After=</i> unless\n<i>DefaultDependencies=no</i> is set in the specified units.\nSee <b>systemd.target</b>(5) for details. Note that this\nbehavior can be turned off by setting\n<i>DefaultDependencies=no</i>.</font></p>\n\n<h2>UNIT FILE LOAD PATH\n<a name=\"UNIT FILE LOAD PATH\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Unit\nfiles are loaded from a set of paths determined during\ncompilation, described in the two tables below. Unit files\nfound in directories listed earlier override files with the\nsame name in directories lower in the list.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nthe variable <i>$SYSTEMD_UNIT_PATH</i> is set, the contents\nof this variable overrides the unit load path. If\n<i>$SYSTEMD_UNIT_PATH</i> ends with an empty component\n(&quot;:&quot;), the usual unit load path will be appended\nto the contents of the variable.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;1.&nbsp;\nLoad path when running in system mode\n(--system).</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3482281.png\" alt=\"Image grohtml-3482281.png\"></b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;2.&nbsp;\nLoad path when running in user mode (--user).</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3482282.png\" alt=\"Image grohtml-3482282.png\"></b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nset of load paths for the user manager instance may be\naugmented or changed using various environment variables.\nAnd environment variables may in turn be set using\nenvironment generators, see\n<b>systemd.environment-generator</b>(7). In particular,\n<i>$XDG_DATA_HOME</i> and <i>$XDG_DATA_DIRS</i> may be\neasily set using <b>systemd-environment-d-generator</b>(8).\nThus, directories listed here are just the defaults. To see\nthe actual list that would be used based on compilation\noptions and current environment use</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">systemd-analyze\n--user unit-paths</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Moreover,\nadditional units might be loaded into systemd from\ndirectories not on the unit load path by creating a symlink\npointing to a unit file in the directories. You can use\n<b>systemctl link</b> for this operation. See\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a> for its usage and precaution.</font></p>\n\n<h2>UNIT GARBAGE COLLECTION\n<a name=\"UNIT GARBAGE COLLECTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nsystem and service manager loads a unit's configuration\nautomatically when a unit is referenced for the first time.\nIt will automatically unload the unit configuration and\nstate again when the unit is not needed anymore\n(&quot;garbage collection&quot;). A unit may be referenced\nthrough a number of different mechanisms:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">1.\nAnother loaded unit references it with a dependency such as\n<i>After=</i>, <i>Wants=</i>, ...</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">2.\nThe unit is currently starting, running, reloading or\nstopping.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">3.\nThe unit is currently in the <b>failed</b> state. (But see\nbelow.)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">4.\nA job for the unit is pending.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">5.\nThe unit is pinned by an active IPC client\nprogram.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">6.\nThe unit is a special &quot;perpetual&quot; unit that is\nalways active and loaded. Examples for perpetual units are\nthe root mount unit -.mount or the scope unit init.scope\nthat the service manager itself lives in.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">7.\nThe unit has running processes associated with\nit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\ngarbage collection logic may be altered with the\n<i>CollectMode=</i> option, which allows configuration\nwhether automatic unloading of units that are in\n<b>failed</b> state is permissible, see below.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat when a unit's configuration and state is unloaded, all\nexecution results, such as exit codes, exit signals,\nresource consumption and other statistics are lost, except\nfor what is stored in the log subsystem.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Use\n<b>systemctl daemon-reload</b> or an equivalent command to\nreload unit configuration while the unit is already loaded.\nIn this case all configuration settings are flushed out and\nreplaced with the new configuration (which however might not\nbe in effect immediately), however all runtime state is\nsaved/restored.</font></p>\n\n<h2>[UNIT] SECTION OPTIONS\n<a name=\"[UNIT] SECTION OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nunit file may include a [Unit] section, which carries\ngeneric information about the unit that is not dependent on\nthe type of unit:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Description=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A short\nhuman readable title of the unit. This may be used by\n<b>systemd</b> (and other UIs) as a user-visible label for\nthe unit, so this string should identify the unit rather\nthan describe it, despite the name. This string also\nshouldn't just repeat the unit name. &quot;Apache2 Web\nServer&quot; is a good example. Bad examples are\n&quot;high-performance light-weight HTTP server&quot; (too\ngeneric) or &quot;Apache2&quot; (meaningless for people who\ndo not know Apache, duplicates the unit name).\n<b>systemd</b> may use this string as a noun in status\nmessages (&quot;Starting <i>description</i>...&quot;,\n&quot;Started <i>description</i>.&quot;, &quot;Reached\ntarget <i>description</i>.&quot;, &quot;Failed to start\n<i>description</i>.&quot;), so it should be capitalized, and\nshould not be a full sentence, or a phrase with a continuous\nverb. Bad examples include &quot;exiting the container&quot;\nor &quot;updating the database once per\nday.&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Documentation=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\nspace-separated list of URIs referencing documentation for\nthis unit or its configuration. Accepted are only URIs of\nthe types &quot;http://&quot;, &quot;https://&quot;,\n&quot;file:&quot;, &quot;info:&quot;, &quot;man:&quot;. For\nmore information about the syntax of these URIs, see\n<a href=\"https://man.page/7/uri\">uri(7)</a>. The URIs should be listed in order of\nrelevance, starting with the most relevant. It is a good\nidea to first reference documentation that explains what the\nunit's purpose is, followed by how it is configured,\nfollowed by any other related documentation. This option may\nbe specified more than once, in which case the specified\nlist of URIs is merged. If the empty string is assigned to\nthis option, the list is reset and all prior assignments\nwill have no effect.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Wants=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\n(weak) requirement dependencies on other units. This option\nmay be specified more than once or multiple space-separated\nunits may be specified in one option in which case\ndependencies for all listed names will be created.\nDependencies of this type may also be configured outside of\nthe unit configuration file by adding a symlink to a .wants/\ndirectory accompanying the unit file. For details, see\nabove.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Units\nlisted in this option will be started if the configuring\nunit is. However, if the listed units fail to start or\ncannot be added to the transaction, this has no impact on\nthe validity of the transaction as a whole, and this unit\nwill still be started. This is the recommended way to hook\nthe start-up of one unit to the start-up of another\nunit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat requirement dependencies do not influence the order in\nwhich services are started or stopped. This has to be\nconfigured independently with the <i>After=</i> or\n<i>Before=</i> options. If unit foo.service pulls in unit\nbar.service as configured with <i>Wants=</i> and no ordering\nis configured with <i>After=</i> or <i>Before=</i>, then\nboth units will be started simultaneously and without any\ndelay between them if foo.service is activated.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Requires=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Similar\nto <i>Wants=</i>, but declares a stronger requirement\ndependency. Dependencies of this type may also be configured\nby adding a symlink to a .requires/ directory accompanying\nthe unit file.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthis unit gets activated, the units listed will be activated\nas well. If one of the other units fails to activate, and an\nordering dependency <i>After=</i> on the failing unit is\nset, this unit will not be started. Besides, with or without\nspecifying <i>After=</i>, this unit will be stopped if one\nof the other units is explicitly stopped.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Often,\nit is a better choice to use <i>Wants=</i> instead of\n<i>Requires=</i> in order to achieve a system that is more\nrobust when dealing with failing services.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat this dependency type does not imply that the other unit\nalways has to be in active state when this unit is running.\nSpecifically: failing condition checks (such as\n<i>ConditionPathExists=</i>,\n<i>ConditionPathIsSymbolicLink=</i>, ... &mdash; see below)\ndo not cause the start job of a unit with a <i>Requires=</i>\ndependency on it to fail. Also, some unit types may\ndeactivate on their own (for example, a service process may\ndecide to exit cleanly, or a device may be unplugged by the\nuser), which is not propagated to units having a\n<i>Requires=</i> dependency. Use the <i>BindsTo=</i>\ndependency type together with <i>After=</i> to ensure that a\nunit may never be in active state without a specific other\nunit also in active state (see below).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Requisite=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Similar\nto <i>Requires=</i>. However, if the units listed here are\nnot started already, they will not be started and the\nstarting of this unit will fail immediately.\n<i>Requisite=</i> does not imply an ordering dependency,\neven if both units are started in the same transaction.\nHence this setting should usually be combined with\n<i>After=</i>, to ensure this unit is not started before the\nother unit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<i>Requisite=b.service</i> is used on a.service, this\ndependency will show as <i>RequisiteOf=a.service</i> in\nproperty listing of b.service. <i>RequisiteOf=</i>\ndependency cannot be specified directly.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>BindsTo=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\nrequirement dependencies, very similar in style to\n<i>Requires=</i>. However, this dependency type is stronger:\nin addition to the effect of <i>Requires=</i> it declares\nthat if the unit bound to is stopped, this unit will be\nstopped too. This means a unit bound to another unit that\nsuddenly enters inactive state will be stopped too. Units\ncan suddenly, unexpectedly enter inactive state for\ndifferent reasons: the main process of a service unit might\nterminate on its own choice, the backing device of a device\nunit might be unplugged or the mount point of a mount unit\nmight be unmounted without involvement of the system and\nservice manager.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nused in conjunction with <i>After=</i> on the same unit the\nbehaviour of <i>BindsTo=</i> is even stronger. In this case,\nthe unit bound to strictly has to be in active state for\nthis unit to also be in active state. This not only means a\nunit bound to another unit that suddenly enters inactive\nstate, but also one that is bound to another unit that gets\nskipped due to a failed condition check (such as\n<i>ConditionPathExists=</i>,\n<i>ConditionPathIsSymbolicLink=</i>, ... &mdash; see below)\nwill be stopped, should it be running. Hence, in many cases\nit is best to combine <i>BindsTo=</i> with\n<i>After=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<i>BindsTo=b.service</i> is used on a.service, this\ndependency will show as <i>BoundBy=a.service</i> in property\nlisting of b.service. <i>BoundBy=</i> dependency cannot be\nspecified directly.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PartOf=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\ndependencies similar to <i>Requires=</i>, but limited to\nstopping and restarting of units. When systemd stops or\nrestarts the units listed here, the action is propagated to\nthis unit. Note that this is a one-way\ndependency&nbsp;&mdash; changes to this unit do not affect\nthe listed units.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<i>PartOf=b.service</i> is used on a.service, this\ndependency will show as <i>ConsistsOf=a.service</i> in\nproperty listing of b.service. <i>ConsistsOf=</i> dependency\ncannot be specified directly.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Upholds=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configures\ndependencies similar to <i>Wants=</i>, but as long a this\nunit is up, all units listed in <i>Upholds=</i> are started\nwhenever found to be inactive or failed, and no job is\nqueued for them. While a <i>Wants=</i> dependency on another\nunit has a one-time effect when this units started, a\n<i>Upholds=</i> dependency on it has a continuous effect,\nconstantly restarting the unit if necessary. This is an\nalternative to the <i>Restart=</i> setting of service units,\nto ensure they are kept running whatever happens.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\n<i>Upholds=b.service</i> is used on a.service, this\ndependency will show as <i>UpheldBy=a.service</i> in the\nproperty listing of b.service. The <i>UpheldBy=</i>\ndependency cannot be specified directly.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Conflicts=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\nspace-separated list of unit names. Configures negative\nrequirement dependencies. If a unit has a <i>Conflicts=</i>\nsetting on another unit, starting the former will stop the\nlatter and vice versa.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat this setting does not imply an ordering dependency,\nsimilarly to the <i>Wants=</i> and <i>Requires=</i>\ndependencies described above. This means that to ensure that\nthe conflicting unit is stopped before the other unit is\nstarted, an <i>After=</i> or <i>Before=</i> dependency must\nbe declared. It doesn't matter which of the two ordering\ndependencies is used, because stop jobs are always ordered\nbefore start jobs, see the discussion in\n<i>Before=</i>/<i>After=</i> below.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nunit A that conflicts with unit B is scheduled to be started\nat the same time as B, the transaction will either fail (in\ncase both are required parts of the transaction) or be\nmodified to be fixed (in case one or both jobs are not a\nrequired part of the transaction). In the latter case, the\njob that is not required will be removed, or in case both\nare not required, the unit that conflicts will be started\nand the unit that is conflicted is stopped.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Before=</i>,\n<i>After=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">These two\nsettings expect a space-separated list of unit names. They\nmay be specified more than once, in which case dependencies\nfor all listed names are created.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Those\ntwo settings configure ordering dependencies between units.\nIf unit foo.service contains the setting\n<b>Before=bar.service</b> and both units are being started,\nbar.service's start-up is delayed until foo.service has\nfinished starting up. <i>After=</i> is the inverse of\n<i>Before=</i>, i.e. while <i>Before=</i> ensures that the\nconfigured unit is started before the listed unit begins\nstarting up, <i>After=</i> ensures the opposite, that the\nlisted unit is fully started up before the configured unit\nis started.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\ntwo units with an ordering dependency between them are shut\ndown, the inverse of the start-up order is applied. I.e. if\na unit is configured with <i>After=</i> on another unit, the\nformer is stopped before the latter if both are shut down.\nGiven two units with any ordering dependency between them,\nif one unit is shut down and the other is started up, the\nshutdown is ordered before the start-up. It doesn't matter\nif the ordering dependency is <i>After=</i> or\n<i>Before=</i>, in this case. It also doesn't matter which\nof the two is shut down, as long as one is shut down and the\nother is started up; the shutdown is ordered before the\nstart-up in all cases. If two units have no ordering\ndependencies between them, they are shut down or started up\nsimultaneously, and no ordering takes place. It depends on\nthe unit type when precisely a unit has finished starting\nup. Most importantly, for service units start-up is\nconsidered completed for the purpose of\n<i>Before=</i>/<i>After=</i> when all its configured\nstart-up commands have been invoked and they either failed\nor reported start-up success. Note that this does includes\n<i>ExecStartPost=</i> (or <i>ExecStopPost=</i> for the\nshutdown case).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat those settings are independent of and orthogonal to the\nrequirement dependencies as configured by <i>Requires=</i>,\n<i>Wants=</i>, <i>Requisite=</i>, or <i>BindsTo=</i>. It is\na common pattern to include a unit name in both the\n<i>After=</i> and <i>Wants=</i> options, in which case the\nunit listed will be started before the unit that is\nconfigured with these options.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat <i>Before=</i> dependencies on device units have no\neffect and are not supported. Devices generally become\navailable as a result of an external hotplug event, and\nsystemd creates the corresponding device unit without\ndelay.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>OnFailure=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\nspace-separated list of one or more units that are activated\nwhen this unit enters the &quot;failed&quot; state. A\nservice unit using <i>Restart=</i> enters the failed state\nonly after the start limits are reached.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>OnSuccess=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\nspace-separated list of one or more units that are activated\nwhen this unit enters the &quot;inactive&quot;\nstate.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PropagatesReloadTo=</i>,\n<i>ReloadPropagatedFrom=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\nspace-separated list of one or more units to which reload\nrequests from this unit shall be propagated to, or units\nfrom which reload requests shall be propagated to this unit,\nrespectively. Issuing a reload request on a unit will\nautomatically also enqueue reload requests on all units that\nare linked to it using these two settings.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>PropagatesStopTo=</i>,\n<i>StopPropagatedFrom=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\nspace-separated list of one or more units to which stop\nrequests from this unit shall be propagated to, or units\nfrom which stop requests shall be propagated to this unit,\nrespectively. Issuing a stop request on a unit will\nautomatically also enqueue stop requests on all units that\nare linked to it using these two settings.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>JoinsNamespaceOf=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">For units\nthat start processes (such as service units), lists one or\nmore other units whose network and/or temporary file\nnamespace to join. This only applies to unit types which\nsupport the <i>PrivateNetwork=</i>,\n<i>NetworkNamespacePath=</i>, <i>PrivateIPC=</i>,\n<i>IPCNamespacePath=</i>, and <i>PrivateTmp=</i> directives\n(see <b>systemd.exec</b>(5) for details). If a unit that has\nthis setting set is started, its processes will see the same\n/tmp/, /var/tmp/, IPC namespace and network namespace as one\nlisted unit that is started. If multiple listed units are\nalready started, it is not defined which namespace is\njoined. Note that this setting only has an effect if\n<i>PrivateNetwork=</i>/<i>NetworkNamespacePath=</i>,\n<i>PrivateIPC=</i>/<i>IPCNamespacePath=</i> and/or\n<i>PrivateTmp=</i> is enabled for both the unit that joins\nthe namespace and the unit whose namespace is\njoined.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RequiresMountsFor=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nspace-separated list of absolute paths. Automatically adds\ndependencies of type <i>Requires=</i> and <i>After=</i> for\nall mount units required to access the specified\npath.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Mount\npoints marked with <b>noauto</b> are not mounted\nautomatically through local-fs.target, but are still honored\nfor the purposes of this option, i.e. they will be pulled in\nby this unit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>OnFailureJobMode=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nvalue of &quot;fail&quot;, &quot;replace&quot;,\n&quot;replace-irreversibly&quot;, &quot;isolate&quot;,\n&quot;flush&quot;, &quot;ignore-dependencies&quot; or\n&quot;ignore-requirements&quot;. Defaults to\n&quot;replace&quot;. Specifies how the units listed in\n<i>OnFailure=</i> will be enqueued. See\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a>'s <b>--job-mode=</b> option for details\non the possible values. If this is set to\n&quot;isolate&quot;, only a single unit may be listed in\n<i>OnFailure=</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>IgnoreOnIsolate=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If <b>true</b>, this unit will not be\nstopped when isolating another unit. Defaults to\n<b>false</b> for service, target, socket, timer, and path\nunits, and <b>true</b> for slice, scope, device, swap,\nmount, and automount units.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StopWhenUnneeded=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If <b>true</b>, this unit will be stopped\nwhen it is no longer used. Note that, in order to minimize\nthe work to be executed, systemd will not stop units by\ndefault unless they are conflicting with other units, or the\nuser explicitly requested their shut down. If this option is\nset, a unit will be automatically cleaned up if no other\nactive unit requires it. Defaults to\n<b>false</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RefuseManualStart=</i>,\n<i>RefuseManualStop=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If <b>true</b>, this unit can only be\nactivated or deactivated indirectly. In this case, explicit\nstart-up or termination requested by the user is denied,\nhowever if it is started or stopped as a dependency of\nanother unit, start-up or termination will succeed. This is\nmostly a safety feature to ensure that the user does not\naccidentally activate units that are not intended to be\nactivated explicitly, and not accidentally deactivate units\nthat are not intended to be deactivated. These options\ndefault to <b>false</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>AllowIsolate=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If <b>true</b>, this unit may be used with\nthe <b>systemctl isolate</b> command. Otherwise, this will\nbe refused. It probably is a good idea to leave this\ndisabled except for target units that shall be used similar\nto runlevels in SysV init systems, just as a precaution to\navoid unusable system states. This option defaults to\n<b>false</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>DefaultDependencies=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. If <b>yes</b>, (the default), a few\ndefault dependencies will implicitly be created for the\nunit. The actual dependencies created depend on the unit\ntype. For example, for service units, these dependencies\nensure that the service is started only after basic system\ninitialization is completed and is properly terminated on\nsystem shutdown. See the respective man pages for details.\nGenerally, only services involved with early boot or late\nshutdown should set this option to <b>no</b>. It is highly\nrecommended to leave this option enabled for the majority of\ncommon units. If set to <b>no</b>, this option does not\ndisable all implicit dependencies, just non-essential\nones.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CollectMode=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Tweaks\nthe &quot;garbage collection&quot; algorithm for this unit.\nTakes one of <b>inactive</b> or <b>inactive-or-failed</b>.\nIf set to <b>inactive</b> the unit will be unloaded if it is\nin the <b>inactive</b> state and is not referenced by\nclients, jobs or other units &mdash; however it is not\nunloaded if it is in the <b>failed</b> state. In\n<b>failed</b> mode, failed units are not unloaded until the\nuser invoked <b>systemctl reset-failed</b> on them to reset\nthe <b>failed</b> state, or an equivalent command. This\nbehaviour is altered if this option is set to\n<b>inactive-or-failed</b>: in this case the unit is unloaded\neven if the unit is in a <b>failed</b> state, and thus an\nexplicitly resetting of the <b>failed</b> state is not\nnecessary. Note that if this mode is used unit results (such\nas exit codes, exit signals, consumed resources, ...) are\nflushed out immediately after the unit completed, except for\nwhat is stored in the logging subsystem. Defaults to\n<b>inactive</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>FailureAction=</i>,\n<i>SuccessAction=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configure\nthe action to take when the unit stops and enters a failed\nstate or inactive state. Takes one of <b>none</b>,\n<b>reboot</b>, <b>reboot-force</b>, <b>reboot-immediate</b>,\n<b>poweroff</b>, <b>poweroff-force</b>,\n<b>poweroff-immediate</b>, <b>exit</b>, and\n<b>exit-force</b>. In system mode, all options are allowed.\nIn user mode, only <b>none</b>, <b>exit</b>, and\n<b>exit-force</b> are allowed. Both options default to\n<b>none</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\n<b>none</b> is set, no action will be triggered.\n<b>reboot</b> causes a reboot following the normal shutdown\nprocedure (i.e. equivalent to <b>systemctl reboot</b>).\n<b>reboot-force</b> causes a forced reboot which will\nterminate all processes forcibly but should cause no dirty\nfile systems on reboot (i.e. equivalent to <b>systemctl\nreboot -f</b>) and <b>reboot-immediate</b> causes immediate\nexecution of the <a href=\"https://man.page/2/reboot\">reboot(2)</a> system call, which might\nresult in data loss (i.e. equivalent to <b>systemctl reboot\n-ff</b>). Similarly, <b>poweroff</b>, <b>poweroff-force</b>,\n<b>poweroff-immediate</b> have the effect of powering down\nthe system with similar semantics. <b>exit</b> causes the\nmanager to exit following the normal shutdown procedure, and\n<b>exit-force</b> causes it terminate without shutting down\nservices. When <b>exit</b> or <b>exit-force</b> is used by\ndefault the exit status of the main process of the unit (if\nthis applies) is returned from the service manager. However,\nthis may be overridden with\n<i>FailureActionExitStatus=</i>/<i>SuccessActionExitStatus=</i>,\nsee below.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>FailureActionExitStatus=</i>,\n<i>SuccessActionExitStatus=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Controls\nthe exit status to propagate back to an invoking container\nmanager (in case of a system service) or service manager (in\ncase of a user manager) when the\n<i>FailureAction=</i>/<i>SuccessAction=</i> are set to\n<b>exit</b> or <b>exit-force</b> and the action is\ntriggered. By default the exit status of the main process of\nthe triggering unit (if this applies) is propagated. Takes a\nvalue in the range 0...255 or the empty string to request\ndefault behaviour.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>JobTimeoutSec=</i>,\n<i>JobRunningTimeoutSec=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>JobTimeoutSec=</i>\nspecifies a timeout for the whole job that starts running\nwhen the job is queued. <i>JobRunningTimeoutSec=</i>\nspecifies a timeout that starts running when the queued job\nis actually started. If either limit is reached, the job\nwill be cancelled, the unit however will not change state or\neven enter the &quot;failed&quot; mode.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Both\nsettings take a time span with the default unit of seconds,\nbut other units may be specified, see\n<b>systemd.time</b>(5). The default is &quot;infinity&quot;\n(job timeouts disabled), except for device units where\n<i>JobRunningTimeoutSec=</i> defaults to\n<i>DefaultTimeoutStartSec=</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note:\nthese timeouts are independent from any unit-specific\ntimeouts (for example, the timeout set with\n<i>TimeoutStartSec=</i> in service units). The job timeout\nhas no effect on the unit itself. Or in other words:\nunit-specific timeouts are useful to abort unit state\nchanges, and revert them. The job timeout set with this\noption however is useful to abort only the job waiting for\nthe unit state to change.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>JobTimeoutAction=</i>,\n<i>JobTimeoutRebootArgument=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>JobTimeoutAction=</i>\noptionally configures an additional action to take when the\ntimeout is hit, see description of <i>JobTimeoutSec=</i> and\n<i>JobRunningTimeoutSec=</i> above. It takes the same values\nas <i>StartLimitAction=</i>. Defaults to\n<b>none</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><i>JobTimeoutRebootArgument=</i>\nconfigures an optional reboot string to pass to the\n<a href=\"https://man.page/2/reboot\">reboot(2)</a> system call.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StartLimitIntervalSec=interval</i>,\n<i>StartLimitBurst=burst</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configure\nunit start rate limiting. Units which are started more than\n<i>burst</i> times within an <i>interval</i> time span are\nnot permitted to start any more. Use\n<i>StartLimitIntervalSec=</i> to configure the checking\ninterval and <i>StartLimitBurst=</i> to configure how many\nstarts per interval are allowed.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><i>interval</i>\nis a time span with the default unit of seconds, but other\nunits may be specified, see <b>systemd.time</b>(5). Defaults\nto <i>DefaultStartLimitIntervalSec=</i> in manager\nconfiguration file, and may be set to 0 to disable any kind\nof rate limiting. <i>burst</i> is a number and defaults to\n<i>DefaultStartLimitBurst=</i> in manager configuration\nfile.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">These\nconfiguration options are particularly useful in conjunction\nwith the service setting <i>Restart=</i> (see\n<b>systemd.service</b>(5)); however, they apply to all kinds\nof starts (including manual), not just those triggered by\nthe <i>Restart=</i> logic.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat units which are configured for <i>Restart=</i>, and\nwhich reach the start limit are not attempted to be\nrestarted anymore; however, they may still be restarted\nmanually or from a timer or socket at a later point, after\nthe <i>interval</i> has passed. From that point on, the\nrestart logic is activated again. <b>systemctl\nreset-failed</b> will cause the restart rate counter for a\nservice to be flushed, which is useful if the administrator\nwants to manually start a unit and the start limit\ninterferes with that. Rate-limiting is enforced after any\nunit condition checks are executed, and hence unit\nactivations with failing conditions do not count towards the\nrate limit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\na unit is unloaded due to the garbage collection logic (see\nabove) its rate limit counters are flushed out too. This\nmeans that configuring start rate limiting for a unit that\nis not referenced continuously has no effect.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\nsetting does not apply to slice, target, device, and scope\nunits, since they are unit types whose activation may either\nnever fail, or may succeed only a single time.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StartLimitAction=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configure\nan additional action to take if the rate limit configured\nwith <i>StartLimitIntervalSec=</i> and\n<i>StartLimitBurst=</i> is hit. Takes the same values as the\n<i>FailureAction=</i>/<i>SuccessAction=</i> settings. If\n<b>none</b> is set, hitting the rate limit will trigger no\naction except that the start will not be permitted. Defaults\nto <b>none</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>RebootArgument=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Configure\nthe optional argument for the <a href=\"https://man.page/2/reboot\">reboot(2)</a> system call\nif <i>StartLimitAction=</i> or <i>FailureAction=</i> is a\nreboot action. This works just like the optional argument to\n<b>systemctl reboot</b> command.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SourcePath=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A path to\na configuration file this unit has been generated from. This\nis primarily useful for implementation of generator tools\nthat convert configuration from an external configuration\nfile format into native unit files. This functionality\nshould not be used in normal units.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Conditions\nand Asserts</b> <br>\nUnit files may also include a number of <i>Condition...=</i>\nand <i>Assert...=</i> settings. Before the unit is started,\nsystemd will verify that the specified conditions and\nasserts are true. If not, the starting of the unit will be\n(mostly silently) skipped (in case of conditions), or\naborted with an error message (in case of asserts). Failing\nconditions or asserts will not result in the unit being\nmoved into the &quot;failed&quot; state. The conditions and\nasserts are checked at the time the queued start job is to\nbe executed. The ordering dependencies are still respected,\nso other units are still pulled in and ordered as if this\nunit was successfully activated, and the conditions and\nasserts are executed the precise moment the unit would\nnormally start and thus can validate system state after the\nunits ordered before completed initialization. Use condition\nexpressions for skipping units that do not apply to the\nlocal system, for example because the kernel or runtime\nenvironment doesn't require their functionality.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nmultiple conditions are specified, the unit will be executed\nif all of them apply (i.e. a logical AND is applied).\nCondition checks can use a pipe symbol (&quot;|&quot;) after\nthe equals sign (&quot;Condition...=|...&quot;), which\ncauses the condition to become a <i>triggering</i>\ncondition. If at least one triggering condition is defined\nfor a unit, then the unit will be started if at least one of\nthe triggering conditions of the unit applies and all of the\nregular (i.e. non-triggering) conditions apply. If you\nprefix an argument with the pipe symbol and an exclamation\nmark, the pipe symbol must be passed first, the exclamation\nsecond. If any of these options is assigned the empty\nstring, the list of conditions is reset completely, all\nprevious condition settings (of any kind) will have no\neffect.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>AssertArchitecture=</i>, <i>AssertVirtualization=</i>,\n... options are similar to conditions but cause the start\njob to fail (instead of being skipped). The failed check is\nlogged. Units with failed conditions are considered to be in\na clean state and will be garbage collected if they are not\nreferenced. This means that when queried, the condition\nfailure may or may not show up in the state of the\nunit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat neither assertion nor condition expressions result in\nunit state changes. Also note that both are checked at the\ntime the job is to be executed, i.e. long after depending\njobs and it itself were queued. Thus, neither condition nor\nassertion expressions are suitable for conditionalizing unit\ndependencies.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>condition</b> verb of <a href=\"https://man.page/1/systemd-analyze\">systemd-analyze(1)</a> can be\nused to test condition and assert expressions.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Except\nfor <i>ConditionPathIsSymbolicLink=</i>, all path checks\nfollow symlinks.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionArchitecture=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Check\nwhether the system is running on a specific architecture.\nTakes one of &quot;x86&quot;, &quot;x86-64&quot;,\n&quot;ppc&quot;, &quot;ppc-le&quot;, &quot;ppc64&quot;,\n&quot;ppc64-le&quot;, &quot;ia64&quot;, &quot;parisc&quot;,\n&quot;parisc64&quot;, &quot;s390&quot;, &quot;s390x&quot;,\n&quot;sparc&quot;, &quot;sparc64&quot;, &quot;mips&quot;,\n&quot;mips-le&quot;, &quot;mips64&quot;,\n&quot;mips64-le&quot;, &quot;alpha&quot;, &quot;arm&quot;,\n&quot;arm-be&quot;, &quot;arm64&quot;, &quot;arm64-be&quot;,\n&quot;sh&quot;, &quot;sh64&quot;, &quot;m68k&quot;,\n&quot;tilegx&quot;, &quot;cris&quot;, &quot;arc&quot;,\n&quot;arc-be&quot;, or &quot;native&quot;.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\narchitecture is determined from the information returned by\n<a href=\"https://man.page/2/uname\">uname(2)</a> and is thus subject to\n<a href=\"https://man.page/2/personality\">personality(2)</a>. Note that a <i>Personality=</i>\nsetting in the same unit file has no effect on this\ncondition. A special architecture name &quot;native&quot; is\nmapped to the architecture the system manager itself is\ncompiled for. The test may be negated by prepending an\nexclamation mark.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionFirmware=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Check\nwhether the system's firmware is of a certain type. Possible\nvalues are: &quot;uefi&quot; (for systems with EFI),\n&quot;device-tree&quot; (for systems with a device tree) and\n&quot;device-tree-compatible(xyz)&quot; (for systems with a\ndevice tree that is compatible to\n&quot;xyz&quot;).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionVirtualization=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Check\nwhether the system is executed in a virtualized environment\nand optionally test whether it is a specific implementation.\nTakes either boolean value to check if being executed in any\nvirtualized environment, or one of &quot;vm&quot; and\n&quot;container&quot; to test against a generic type of\nvirtualization solution, or one of &quot;qemu&quot;,\n&quot;kvm&quot;, &quot;amazon&quot;, &quot;zvm&quot;,\n&quot;vmware&quot;, &quot;microsoft&quot;,\n&quot;oracle&quot;, &quot;powervm&quot;, &quot;xen&quot;,\n&quot;bochs&quot;, &quot;uml&quot;, &quot;bhyve&quot;,\n&quot;qnx&quot;, &quot;openvz&quot;, &quot;lxc&quot;,\n&quot;lxc-libvirt&quot;, &quot;systemd-nspawn&quot;,\n&quot;docker&quot;, &quot;podman&quot;, &quot;rkt&quot;,\n&quot;wsl&quot;, &quot;proot&quot;, &quot;pouch&quot;,\n&quot;acrn&quot; to test against a specific implementation,\nor &quot;private-users&quot; to check whether we are running\nin a user namespace. See <a href=\"https://man.page/1/systemd-detect-virt\">systemd-detect-virt(1)</a> for a\nfull list of known virtualization technologies and their\nidentifiers. If multiple virtualization technologies are\nnested, only the innermost is considered. The test may be\nnegated by prepending an exclamation mark.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionHost=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionHost=</i>\nmay be used to match against the hostname or machine ID of\nthe host. This either takes a hostname string (optionally\nwith shell style globs) which is tested against the locally\nset hostname as returned by <a href=\"https://man.page/2/gethostname\">gethostname(2)</a>, or a\nmachine ID formatted as string (see <a href=\"https://man.page/5/machine-id\">machine-id(5)</a>).\nThe test may be negated by prepending an exclamation\nmark.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionKernelCommandLine=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionKernelCommandLine=</i>\nmay be used to check whether a specific kernel command line\noption is set (or if prefixed with the exclamation mark\n&mdash; unset). The argument must either be a single word,\nor an assignment (i.e. two words, separated by\n&quot;=&quot;). In the former case the kernel command line\nis searched for the word appearing as is, or as left hand\nside of an assignment. In the latter case, the exact\nassignment is looked for with right and left hand side\nmatching. This operates on the kernel command line\ncommunicated to userspace via /proc/cmdline, except when the\nservice manager is invoked as payload of a container\nmanager, in which case the command line of PID 1 is used\ninstead (i.e. /proc/1/cmdline).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionKernelVersion=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionKernelVersion=</i>\nmay be used to check whether the kernel version (as reported\nby <b>uname -r</b>) matches a certain expression (or if\nprefixed with the exclamation mark does not match it). The\nargument must be a list of (potentially quoted) expressions.\nFor each of the expressions, if it starts with one of\n&quot;&lt;&quot;, &quot;&lt;=&quot;, &quot;=&quot;,\n&quot;!=&quot;, &quot;&gt;=&quot;, &quot;&gt;&quot; a\nrelative version comparison is done, otherwise the specified\nstring is matched with shell-style globs.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat using the kernel version string is an unreliable way to\ndetermine which features are supported by a kernel, because\nof the widespread practice of backporting drivers, features,\nand fixes from newer upstream kernels into older versions\nprovided by distributions. Hence, this check is inherently\nunportable and should not be used for units which may be\nused on different distributions.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionEnvironment=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionEnvironment=</i>\nmay be used to check whether a specific environment variable\nis set (or if prefixed with the exclamation mark &mdash;\nunset) in the service manager's environment block. The\nargument may be a single word, to check if the variable with\nthis name is defined in the environment block, or an\nassignment (&quot;<i>name</i>=<i>value</i>&quot;), to check\nif the variable with this exact value is defined. Note that\nthe environment block of the service manager itself is\nchecked, i.e. not any variables defined with\n<i>Environment=</i> or <i>EnvironmentFile=</i>, as described\nabove. This is particularly useful when the service manager\nruns inside a containerized environment or as per-user\nservice manager, in order to check for variables passed in\nby the enclosing container manager or PAM.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionSecurity=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionSecurity=</i>\nmay be used to check whether the given security technology\nis enabled on the system. Currently, the recognized values\nare &quot;selinux&quot;, &quot;apparmor&quot;,\n&quot;tomoyo&quot;, &quot;ima&quot;, &quot;smack&quot;,\n&quot;audit&quot;, &quot;uefi-secureboot&quot; and\n&quot;tpm2&quot;. The test may be negated by prepending an\nexclamation mark.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionCapability=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Check\nwhether the given capability exists in the capability\nbounding set of the service manager (i.e. this does not\ncheck whether capability is actually available in the\npermitted or effective sets, see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a> for\ndetails). Pass a capability name such as\n&quot;CAP_MKNOD&quot;, possibly prefixed with an exclamation\nmark to negate the check.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionACPower=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Check\nwhether the system has AC power, or is exclusively battery\npowered at the time of activation of the unit. This takes a\nboolean argument. If set to &quot;true&quot;, the condition\nwill hold only if at least one AC connector of the system is\nconnected to a power source, or if no AC connectors are\nknown. Conversely, if set to &quot;false&quot;, the\ncondition will hold only if there is at least one AC\nconnector known and all AC connectors are disconnected from\na power source.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionNeedsUpdate=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes one\nof /var/ or /etc/ as argument, possibly prefixed with a\n&quot;!&quot; (to invert the condition). This condition may\nbe used to conditionalize units on whether the specified\ndirectory requires an update because /usr/'s modification\ntime is newer than the stamp file .updated in the specified\ndirectory. This is useful to implement offline updates of\nthe vendor operating system resources in /usr/ that require\nupdating of /etc/ or /var/ on the next following boot. Units\nmaking use of this condition should order themselves before\n<b>systemd-update-done.service</b>(8), to make sure they run\nbefore the stamp file's modification time gets reset\nindicating a completed update.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthe <i>systemd.condition-needs-update=</i> option is\nspecified on the kernel command line (taking a boolean), it\nwill override the result of this condition check, taking\nprecedence over any file modification time checks. If the\nkernel command line option is used,\nsystemd-update-done.service will not have immediate effect\non any following <i>ConditionNeedsUpdate=</i> checks, until\nthe system is rebooted where the kernel command line option\nis not specified anymore.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Note\nthat to make this scheme effective, the timestamp of /usr/\nshould be explicitly updated after its contents are\nmodified. The kernel will automatically update modification\ntimestamp on a directory only when immediate children of a\ndirectory are modified; an modification of nested files will\nnot automatically result in mtime of /usr/ being\nupdated.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Also\nnote that if the update method includes a call to execute\nappropriate post-update steps itself, it should not touch\nthe timestamp of /usr/. In a typical distribution packaging\nscheme, packages will do any required update steps as part\nof the installation or upgrade, to make package contents\nimmediately usable. <i>ConditionNeedsUpdate=</i> should be\nused with other update mechanisms where such an immediate\nupdate does not happen.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionFirstBoot=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Takes a\nboolean argument. This condition may be used to\nconditionalize units on whether the system is booting up for\nthe first time. This roughly means that /etc/ is unpopulated\n(for details, see &quot;First Boot Semantics&quot; in\n<a href=\"https://man.page/5/machine-id\">machine-id(5)</a>). This may be used to populate /etc/ on\nthe first boot after factory reset, or when a new system\ninstance boots up for the first time.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">For\nrobustness, units with <i>ConditionFirstBoot=yes</i> should\norder themselves before first-boot-complete.target and pull\nin this passive target with <i>Wants=</i>. This ensures that\nin a case of an aborted first boot, these units will be\nre-run during the next system startup.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthe <i>systemd.condition-first-boot=</i> option is specified\non the kernel command line (taking a boolean), it will\noverride the result of this condition check, taking\nprecedence over /etc/machine-id existence checks.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionPathExists=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Check for\nthe existence of a file. If the specified absolute path name\ndoes not exist, the condition will fail. If the absolute\npath name passed to <i>ConditionPathExists=</i> is prefixed\nwith an exclamation mark (&quot;!&quot;), the test is\nnegated, and the unit is only started if the path does not\nexist.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionPathExistsGlob=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionPathExistsGlob=</i>\nis similar to <i>ConditionPathExists=</i>, but checks for\nthe existence of at least one file or directory matching the\nspecified globbing pattern.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionPathIsDirectory=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionPathIsDirectory=</i>\nis similar to <i>ConditionPathExists=</i> but verifies that\na certain path exists and is a directory.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionPathIsSymbolicLink=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionPathIsSymbolicLink=</i>\nis similar to <i>ConditionPathExists=</i> but verifies that\na certain path exists and is a symbolic link.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionPathIsMountPoint=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionPathIsMountPoint=</i>\nis similar to <i>ConditionPathExists=</i> but verifies that\na certain path exists and is a mount point.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionPathIsReadWrite=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionPathIsReadWrite=</i>\nis similar to <i>ConditionPathExists=</i> but verifies that\nthe underlying file system is readable and writable (i.e.\nnot mounted read-only).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionPathIsEncrypted=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionPathIsEncrypted=</i>\nis similar to <i>ConditionPathExists=</i> but verifies that\nthe underlying file system's backing block device is\nencrypted using dm-crypt/LUKS. Note that this check does not\ncover ext4 per-directory encryption, and only detects block\nlevel encryption. Moreover, if the specified path resides on\na file system on top of a loopback block device, only\nencryption above the loopback device is detected. It is not\ndetected whether the file system backing the loopback block\ndevice is encrypted.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionDirectoryNotEmpty=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionDirectoryNotEmpty=</i>\nis similar to <i>ConditionPathExists=</i> but verifies that\na certain path exists and is a non-empty\ndirectory.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionFileNotEmpty=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionFileNotEmpty=</i>\nis similar to <i>ConditionPathExists=</i> but verifies that\na certain path exists and refers to a regular file with a\nnon-zero size.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionFileIsExecutable=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionFileIsExecutable=</i>\nis similar to <i>ConditionPathExists=</i> but verifies that\na certain path exists, is a regular file, and marked\nexecutable.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionUser=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionUser=</i>\ntakes a numeric &quot;UID&quot;, a UNIX user name, or the\nspecial value &quot;@system&quot;. This condition may be\nused to check whether the service manager is running as the\ngiven user. The special value &quot;@system&quot; can be\nused to check if the user id is within the system user\nrange. This option is not useful for system services, as the\nsystem manager exclusively runs as the root user, and thus\nthe test result is constant.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionGroup=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\"><i>ConditionGroup=</i>\nis similar to <i>ConditionUser=</i> but verifies that the\nservice manager's real or effective group, or any of its\nauxiliary groups, match the specified group or GID. This\nsetting does not support the special value\n&quot;@system&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionControlGroupController=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Check\nwhether given cgroup controllers (e.g. &quot;cpu&quot;) are\navailable for use on the system or whether the legacy v1\ncgroup or the modern v2 cgroup hierarchy is used.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Multiple\ncontrollers may be passed with a space separating them; in\nthis case the condition will only pass if all listed\ncontrollers are available for use. Controllers unknown to\nsystemd are ignored. Valid controllers are &quot;cpu&quot;,\n&quot;cpuacct&quot;, &quot;io&quot;, &quot;blkio&quot;,\n&quot;memory&quot;, &quot;devices&quot;, and\n&quot;pids&quot;. Even if available in the kernel, a\nparticular controller may not be available if it was\ndisabled on the kernel command line with\n<i>cgroup_disable=controller</i>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Alternatively,\ntwo special strings &quot;v1&quot; and &quot;v2&quot; may be\nspecified (without any controller names). &quot;v2&quot;\nwill pass if the unified v2 cgroup hierarchy is used, and\n&quot;v1&quot; will pass if the legacy v1 hierarchy or the\nhybrid hierarchy are used (see the discussion of\n<i>systemd.unified_cgroup_hierarchy</i> and\n<i>systemd.legacy_systemd_cgroup_controller</i> in\n<b>systemd.service</b>(5) for more information).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionMemory=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Verify\nthat the specified amount of system memory is available to\nthe current system. Takes a memory size in bytes as\nargument, optionally prefixed with a comparison operator\n&quot;&lt;&quot;, &quot;&lt;=&quot;, &quot;=&quot;,\n&quot;!=&quot;, &quot;&gt;=&quot;, &quot;&gt;&quot;. On\nbare-metal systems compares the amount of physical memory in\nthe system with the specified size, adhering to the\nspecified comparison operator. In containers compares the\namount of memory assigned to the container\ninstead.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionCPUs=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Verify\nthat the specified number of CPUs is available to the\ncurrent system. Takes a number of CPUs as argument,\noptionally prefixed with a comparison operator\n&quot;&lt;&quot;, &quot;&lt;=&quot;, &quot;=&quot;,\n&quot;!=&quot;, &quot;&gt;=&quot;, &quot;&gt;&quot;.\nCompares the number of CPUs in the CPU affinity mask\nconfigured of the service manager itself with the specified\nnumber, adhering to the specified comparison operator. On\nphysical systems the number of CPUs in the affinity mask of\nthe service manager usually matches the number of physical\nCPUs, but in special and virtual environments might differ.\nIn particular, in containers the affinity mask usually\nmatches the number of CPUs assigned to the container and not\nthe physically available ones.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionCPUFeature=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Verify\nthat a given CPU feature is available via the\n&quot;CPUID&quot; instruction. This condition only does\nsomething on i386 and x86-64 processors. On other processors\nit is assumed that the CPU does not support the given\nfeature. It checks the leaves &quot;1&quot;, &quot;7&quot;,\n&quot;0x80000001&quot;, and &quot;0x80000007&quot;. Valid\nvalues are: &quot;fpu&quot;, &quot;vme&quot;,\n&quot;de&quot;, &quot;pse&quot;, &quot;tsc&quot;,\n&quot;msr&quot;, &quot;pae&quot;, &quot;mce&quot;,\n&quot;cx8&quot;, &quot;apic&quot;, &quot;sep&quot;,\n&quot;mtrr&quot;, &quot;pge&quot;, &quot;mca&quot;,\n&quot;cmov&quot;, &quot;pat&quot;, &quot;pse36&quot;,\n&quot;clflush&quot;, &quot;mmx&quot;, &quot;fxsr&quot;,\n&quot;sse&quot;, &quot;sse2&quot;, &quot;ht&quot;,\n&quot;pni&quot;, &quot;pclmul&quot;, &quot;monitor&quot;,\n&quot;ssse3&quot;, &quot;fma3&quot;, &quot;cx16&quot;,\n&quot;sse4_1&quot;, &quot;sse4_2&quot;, &quot;movbe&quot;,\n&quot;popcnt&quot;, &quot;aes&quot;, &quot;xsave&quot;,\n&quot;osxsave&quot;, &quot;avx&quot;, &quot;f16c&quot;,\n&quot;rdrand&quot;, &quot;bmi1&quot;, &quot;avx2&quot;,\n&quot;bmi2&quot;, &quot;rdseed&quot;, &quot;adx&quot;,\n&quot;sha_ni&quot;, &quot;syscall&quot;, &quot;rdtscp&quot;,\n&quot;lm&quot;, &quot;lahf_lm&quot;, &quot;abm&quot;,\n&quot;constant_tsc&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionOSRelease=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Verify\nthat a specific &quot;key=value&quot; pair is set in the\nhost's <a href=\"https://man.page/5/os-release\">os-release(5)</a>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Other\nthan exact matching with &quot;=&quot;, and &quot;!=&quot;,\nrelative comparisons are supported for versioned parameters\n(e.g. &quot;VERSION_ID&quot;). The comparator can be one of\n&quot;&lt;&quot;, &quot;&lt;=&quot;, &quot;=&quot;,\n&quot;!=&quot;, &quot;&gt;=&quot; and\n&quot;&gt;&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>AssertArchitecture=</i>,\n<i>AssertVirtualization=</i>, <i>AssertHost=</i>,\n<i>AssertKernelCommandLine=</i>,\n<i>AssertKernelVersion=</i>, <i>AssertEnvironment=</i>,\n<i>AssertSecurity=</i>, <i>AssertCapability=</i>,\n<i>AssertACPower=</i>, <i>AssertNeedsUpdate=</i>,\n<i>AssertFirstBoot=</i>, <i>AssertPathExists=</i>,\n<i>AssertPathExistsGlob=</i>, <i>AssertPathIsDirectory=</i>,\n<i>AssertPathIsSymbolicLink=</i>,\n<i>AssertPathIsMountPoint=</i>,\n<i>AssertPathIsReadWrite=</i>,\n<i>AssertPathIsEncrypted=</i>,\n<i>AssertDirectoryNotEmpty=</i>, <i>AssertFileNotEmpty=</i>,\n<i>AssertFileIsExecutable=</i>, <i>AssertUser=</i>,\n<i>AssertGroup=</i>, <i>AssertControlGroupController=</i>,\n<i>AssertMemory=</i>, <i>AssertCPUs=</i>,\n<i>AssertOSRelease=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Similar\nto the <i>ConditionArchitecture=</i>,\n<i>ConditionVirtualization=</i>, ..., condition settings\ndescribed above, these settings add assertion checks to the\nstart-up of the unit. However, unlike the conditions\nsettings, any assertion setting that is not met results in\nfailure of the start job (which means this is logged\nloudly). Note that hitting a configured assertion does not\ncause the unit to enter the &quot;failed&quot; state (or in\nfact result in any state change of the unit), it affects\nonly the job queued for it. Use assertion expressions for\nunits that cannot operate when specific requirements are not\nmet, and when this is something the administrator or user\nshould look into.</font></p>\n\n<h2>MAPPING OF UNIT PROPERTIES TO THEIR INVERSES\n<a name=\"MAPPING OF UNIT PROPERTIES TO THEIR INVERSES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Unit\nsettings that create a relationship with a second unit\nusually show up in properties of both units, for example in\n<b>systemctl show</b> output. In some cases the name of the\nproperty is the same as the name of the configuration\nsetting, but not always. This table lists the properties\nthat are shown on two units which are connected through some\ndependency, and shows which property on &quot;source&quot;\nunit corresponds to which property on the &quot;target&quot;\nunit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;3.&nbsp;\nForward and reverse unit properties <br>\n&nbsp;</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3482283.png\" alt=\"Image grohtml-3482283.png\"></b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note:\n<i>WantedBy=</i> and <i>RequiredBy=</i> are used in the\n[Install] section to create symlinks in .wants/ and\n.requires/ directories. They cannot be used directly as a\nunit configuration setting.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note:\n<i>ConsistsOf=</i>, <i>BoundBy=</i>, <i>RequisiteOf=</i>,\n<i>ConflictedBy=</i> are created implicitly along with their\nreverses and cannot be specified directly.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note:\n<i>Triggers=</i> is created implicitly between a socket,\npath unit, or an automount unit, and the unit they activate.\nBy default a unit with the same name is triggered, but this\ncan be overridden using <i>Sockets=</i>, <i>Service=</i>,\nand <i>Unit=</i> settings. See <b>systemd.service</b>(5),\n<b>systemd.socket</b>(5), <b>systemd.path</b>(5), and\n<b>systemd.automount</b>(5) for details. <i>TriggeredBy=</i>\nis created implicitly on the triggered unit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note:\n<i>Following=</i> is used to group device aliases and points\nto the &quot;primary&quot; device unit that systemd is using\nto track device state, usually corresponding to a sysfs\npath. It does not show up in the &quot;target&quot;\nunit.</font></p>\n\n<h2>[INSTALL] SECTION OPTIONS\n<a name=\"[INSTALL] SECTION OPTIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Unit\nfiles may include an [Install] section, which carries\ninstallation information for the unit. This section is not\ninterpreted by <a href=\"https://man.page/1/systemd\">systemd(1)</a> during runtime; it is used\nby the <b>enable</b> and <b>disable</b> commands of the\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a> tool during installation of a\nunit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Alias=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\nspace-separated list of additional names this unit shall be\ninstalled under. The names listed here must have the same\nsuffix (i.e. type) as the unit filename. This option may be\nspecified more than once, in which case all listed names are\nused. At installation time, <b>systemctl enable</b> will\ncreate symlinks from these names to the unit filename. Note\nthat not all unit types support such alias names, and this\nsetting is not supported for them. Specifically, mount,\nslice, swap, and automount units do not support\naliasing.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>WantedBy=</i>,\n<i>RequiredBy=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">This\noption may be used more than once, or a space-separated list\nof unit names may be given. A symbolic link is created in\nthe .wants/ or .requires/ directory of each of the listed\nunits when this unit is installed by <b>systemctl\nenable</b>. This has the effect that a dependency of type\n<i>Wants=</i> or <i>Requires=</i> is added from the listed\nunit to the current unit. The primary result is that the\ncurrent unit will be started when the listed unit is\nstarted. See the description of <i>Wants=</i> and\n<i>Requires=</i> in the [Unit] section for\ndetails.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>WantedBy=foo.service</b>\nin a service bar.service is mostly equivalent to\n<b>Alias=foo.service.wants/bar.service</b> in the same file.\nIn case of template units, <b>systemctl enable</b> must be\ncalled with an instance name, and this instance will be\nadded to the .wants/ or .requires/ list of the listed unit.\nE.g. <b>WantedBy=getty.target</b> in a service\ngetty@.service will result in <b>systemctl enable\ngetty@tty2.service</b> creating a\ngetty.target.wants/getty@tty2.service link to\ngetty@.service.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Also=</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Additional\nunits to install/deinstall when this unit is\ninstalled/deinstalled. If the user requests\ninstallation/deinstallation of a unit with this option\nconfigured, <b>systemctl enable</b> and <b>systemctl\ndisable</b> will automatically install/uninstall units\nlisted in this option as well.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\noption may be used more than once, or a space-separated list\nof unit names may be given.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>DefaultInstance=</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">In\ntemplate unit files, this specifies for which instance the\nunit shall be enabled if the template is enabled without any\nexplicitly set instance. This option has no effect in\nnon-template unit files. The specified string must be usable\nas instance identifier.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing specifiers are interpreted in the Install section:\n%a, %b, %B, %g, %G, %H, %i, %j, %l, %m, %n, %N, %o, %p, %u,\n%U, %v, %w, %W, %%. For their meaning see the next\nsection.</font></p>\n\n<h2>SPECIFIERS\n<a name=\"SPECIFIERS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Many\nsettings resolve specifiers which may be used to write\ngeneric unit files referring to runtime or unit parameters\nthat are replaced when the unit files are loaded. Specifiers\nmust be known and resolvable for the setting to be valid.\nThe following specifiers are understood:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Table&nbsp;4.&nbsp;Specifiers\navailable in unit files <br>\n&nbsp;</b></font></p>\n\n\n<p align=\"center\"><font color=\"#000000\"><b><img src=\"grohtml-3482284.png\" alt=\"Image grohtml-3482284.png\"></b></font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;1.&nbsp;Allowing\nunits to be enabled</b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing snippet (highlighted) allows a unit (e.g.\nfoo.service) to be enabled via <b>systemctl\nenable</b>:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Unit]\n<br>\nDescription=Foo</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Service]\n<br>\nExecStart=/usr/sbin/foo-daemon</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><i>[Install]\n<br>\nWantedBy=multi-user.target</i></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">After\nrunning <b>systemctl enable</b>, a symlink\n/etc/systemd/system/multi-user.target.wants/foo.service\nlinking to the actual unit will be created. It tells systemd\nto pull in the unit when starting multi-user.target. The\ninverse <b>systemctl disable</b> will remove that symlink\nagain.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;2.&nbsp;Overriding\nvendor settings</b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">There\nare two methods of overriding vendor settings in unit files:\ncopying the unit file from /lib/systemd/system to\n/etc/systemd/system and modifying the chosen settings.\nAlternatively, one can create a directory named\n<i>unit</i>.d/ within /etc/systemd/system and place a\ndrop-in file <i>name</i>.conf there that only changes the\nspecific settings one is interested in. Note that multiple\nsuch drop-in files are read if present, processed in\nlexicographic order of their filename.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nadvantage of the first method is that one easily overrides\nthe complete unit, the vendor unit is not parsed at all\nanymore. It has the disadvantage that improvements to the\nunit file by the vendor are not automatically incorporated\non updates.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nadvantage of the second method is that one only overrides\nthe settings one specifically wants, where updates to the\nunit by the vendor automatically apply. This has the\ndisadvantage that some future updates by the vendor might be\nincompatible with the local changes.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nalso applies for user instances of systemd, but with\ndifferent locations for the unit files. See the section on\nunit load paths for further details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Suppose\nthere is a vendor-supplied unit\n/lib/systemd/system/httpd.service with the following\ncontents:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Unit]\n<br>\nDescription=Some HTTP server <br>\nAfter=remote-fs.target sqldb.service <br>\nRequires=sqldb.service <br>\nAssertPathExists=/srv/webserver</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Service]\n<br>\nType=notify <br>\nExecStart=/usr/sbin/some-fancy-httpd-server <br>\nNice=5</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Install]\n<br>\nWantedBy=multi-user.target</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Now\none wants to change some settings as an administrator:\nfirstly, in the local setup, /srv/webserver might not exist,\nbecause the HTTP server is configured to use /srv/www\ninstead. Secondly, the local configuration makes the HTTP\nserver also depend on a memory cache service,\nmemcached.service, that should be pulled in\n(<i>Requires=</i>) and also be ordered appropriately\n(<i>After=</i>). Thirdly, in order to harden the service a\nbit more, the administrator would like to set the\n<i>PrivateTmp=</i> setting (see <b>systemd.exec</b>(5) for\ndetails). And lastly, the administrator would like to reset\nthe niceness of the service to its default value of\n0.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfirst possibility is to copy the unit file to\n/etc/systemd/system/httpd.service and change the chosen\nsettings:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Unit]\n<br>\nDescription=Some HTTP server <br>\nAfter=remote-fs.target sqldb.service\n<i>memcached.service</i> <br>\nRequires=sqldb.service <i>memcached.service</i> <br>\nAssertPathExists=<i>/srv/www</i></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Service]\n<br>\nType=notify <br>\nExecStart=/usr/sbin/some-fancy-httpd-server <i><br>\nNice=0 <br>\nPrivateTmp=yes</i></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Install]\n<br>\nWantedBy=multi-user.target</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Alternatively,\nthe administrator could create a drop-in file\n/etc/systemd/system/httpd.service.d/local.conf with the\nfollowing contents:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Unit]\n<br>\nAfter=memcached.service <br>\nRequires=memcached.service <br>\n# Reset all assertions and then re-add the condition we want\n<br>\nAssertPathExists= <br>\nAssertPathExists=/srv/www</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Service]\n<br>\nNice=0 <br>\nPrivateTmp=yes</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat for drop-in files, if one wants to remove entries from\na setting that is parsed as a list (and is not a\ndependency), such as <i>AssertPathExists=</i> (or e.g.\n<i>ExecStart=</i> in service units), one needs to first\nclear the list before re-adding all entries except the one\nthat is to be removed. Dependencies (<i>After=</i>, etc.)\ncannot be reset to an empty list, so dependencies can only\nbe added in drop-ins. If you want to remove dependencies,\nyou have to override the entire unit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;3.&nbsp;Top\nlevel drop-ins with template units</b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Top\nlevel per-type drop-ins can be used to change some aspect of\nall units of a particular type. For example by creating the\n/etc/systemd/system/service.d/ directory with a drop-in\nfile, the contents of the drop-in file can be applied to all\nservice units. We can take this further by having the\ntop-level drop-in instantiate a secondary helper unit.\nConsider for example the following set of units and drop-in\nfiles where we install an <i>OnFailure=</i> dependency for\nall service units.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">/etc/systemd/system/failure-handler@.service:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Unit]\n<br>\nDescription=My failure handler for %i</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Service]\n<br>\nType=oneshot <br>\n# Perform some special action for when %i exits\nunexpectedly. <br>\nExecStart=/usr/sbin/myfailurehandler %i</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">We\ncan then add an instance of failure-handler@.service as an\n<i>OnFailure=</i> dependency for all service\nunits.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">/etc/systemd/system/service.d/10-all.conf:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">[Unit]\n<br>\nOnFailure=failure-handler@%N.service</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Now,\nafter running <b>systemctl daemon-reload</b> all services\nwill have acquired an <i>OnFailure=</i> dependency on\nfailure-handler@%N.service. The template instance units will\nalso have gained the dependency which results in the\ncreation of a recursive dependency chain. We can break the\nchain by disabling the drop-in for the template instance\nunits via a symlink to /dev/null:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>mkdir\n/etc/systemd/system/failure-handler@.service.d/ <br>\nln -s /dev/null\n/etc/systemd/system/failure-handler@.service.d/10-all.conf\n<br>\nsystemctl daemon-reload</b></font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nensures that if a failure-handler@.service instance fails it\nwill not trigger an instance named\nfailure-handler@failure-handler.service.</font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/1/systemd\">systemd(1)</a>,\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a>, <b>systemd-system.conf</b>(5),\n<b>systemd.special</b>(7), <b>systemd.service</b>(5),\n<b>systemd.socket</b>(5), <b>systemd.device</b>(5),\n<b>systemd.mount</b>(5), <b>systemd.automount</b>(5),\n<b>systemd.swap</b>(5), <b>systemd.target</b>(5),\n<b>systemd.path</b>(5), <b>systemd.timer</b>(5),\n<b>systemd.scope</b>(5), <b>systemd.slice</b>(5),\n<b>systemd.time</b>(7), <a href=\"https://man.page/1/systemd-analyze\">systemd-analyze(1)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <b>systemd.directives</b>(7),\n<a href=\"https://man.page/1/uname\">uname(1)</a></font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Interface\nPortability and Stability Promise</font></p></td>\n<td width=\"17%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://systemd.io/PORTABILITY_AND_STABILITY/</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#STRING ESCAPING FOR INCLUSION IN UNIT NAMES\">STRING ESCAPING FOR INCLUSION IN UNIT NAMES</a>","<a href=\"#AUTOMATIC DEPENDENCIES\">AUTOMATIC DEPENDENCIES</a>","<a href=\"#UNIT FILE LOAD PATH\">UNIT FILE LOAD PATH</a>","<a href=\"#UNIT GARBAGE COLLECTION\">UNIT GARBAGE COLLECTION</a>","<a href=\"#[UNIT] SECTION OPTIONS\">[UNIT] SECTION OPTIONS</a>","<a href=\"#MAPPING OF UNIT PROPERTIES TO THEIR INVERSES\">MAPPING OF UNIT PROPERTIES TO THEIR INVERSES</a>","<a href=\"#[INSTALL] SECTION OPTIONS\">[INSTALL] SECTION OPTIONS</a>","<a href=\"#SPECIFIERS\">SPECIFIERS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#NOTES\">NOTES</a>"],"level":5}