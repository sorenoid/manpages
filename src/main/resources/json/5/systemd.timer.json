{"name":"systemd.timer","description":"systemd.timer - Timer unit configuration","body":"\n\n<h1 align=\"center\">SYSTEMD.TIMER</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">systemd.timer -\nTimer unit configuration</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>timer</i>.timer</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A unit\nconfiguration file whose name ends in &quot;.timer&quot;\nencodes information about a timer controlled and supervised\nby systemd, for timer-based activation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This man page\nlists the configuration options specific to this unit type.\nSee <b>systemd.unit</b>(5) for the common options of all\nunit configuration files. The common configuration items are\nconfigured in the generic [Unit] and [Install] sections. The\ntimer specific configuration options are configured in the\n[Timer] section.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For each timer\nfile, a matching unit file must exist, describing the unit\nto activate when the timer elapses. By default, a service by\nthe same name as the timer (except for the suffix) is\nactivated. Example: a timer file foo.timer activates a\nmatching service foo.service. The unit to activate may be\ncontrolled by <i>Unit=</i> (see below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that in\ncase the unit to activate is already active at the time the\ntimer elapses it is not restarted, but simply left running.\nThere is no concept of spawning new service instances in\nthis case. Due to this, services with\n<i>RemainAfterExit=</i> set (which stay around continuously\neven after the service's main process exited) are usually\nnot suitable for activation via repetitive timers, as they\nwill only be activated once, and then stay around\nforever.</p>\n\n<h2>AUTOMATIC DEPENDENCIES\n<a name=\"AUTOMATIC DEPENDENCIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Implicit\nDependencies</b> <br>\nThe following dependencies are implicitly added:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Timer\nunits automatically gain a <i>Before=</i> dependency on the\nservice they are supposed to activate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Default\nDependencies</b> <br>\nThe following dependencies are added unless\n<i>DefaultDependencies=no</i> is set:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Timer\nunits will automatically have dependencies of type\n<i>Requires=</i> and <i>After=</i> on sysinit.target, a\ndependency of type <i>Before=</i> on timers.target, as well\nas <i>Conflicts=</i> and <i>Before=</i> on shutdown.target\nto ensure that they are stopped cleanly prior to system\nshutdown. Only timer units involved with early boot or late\nsystem shutdown should disable the\n<i>DefaultDependencies=</i> option.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Timer\nunits with at least one <i>OnCalendar=</i> directive acquire\na pair of additional <i>After=</i> dependencies on\ntime-set.target and time-sync.target, in order to avoid\nbeing started before the system clock has been correctly\nset. See <b>systemd.special</b>(7) for details on these two\ntargets.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Timer files\nmust include a [Timer] section, which carries information\nabout the timer it defines. The options specific to the\n[Timer] section of timer units are the following:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>OnActiveSec=</i>,\n<i>OnBootSec=</i>, <i>OnStartupSec=</i>,\n<i>OnUnitActiveSec=</i>, <i>OnUnitInactiveSec=</i></p>\n\n<p style=\"margin-left:17%;\">Defines monotonic timers\nrelative to different starting points:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Table&nbsp;1.&nbsp;Settings\nand their starting points</b></p>\n\n\n<p align=\"center\"><b><img src=\"grohtml-3455571.png\" alt=\"Image grohtml-3455571.png\"></b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Multiple\ndirectives may be combined of the same and of different\ntypes, in which case the timer unit will trigger whenever\nany of the specified timer expressions elapse. For example,\nby combining <i>OnBootSec=</i> and <i>OnUnitActiveSec=</i>,\nit is possible to define a timer that elapses in regular\nintervals and activates a specific service each time.\nMoreover, both monotonic time expressions and\n<i>OnCalendar=</i> calendar expressions may be combined in\nthe same timer unit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The arguments\nto the directives are time spans configured in seconds.\nExample: &quot;OnBootSec=50&quot; means 50s after boot-up.\nThe argument may also include time units. Example:\n&quot;OnBootSec=5h 30min&quot; means 5 hours and 30 minutes\nafter boot-up. For details about the syntax of time spans,\nsee <b>systemd.time</b>(7).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a timer\nconfigured with <i>OnBootSec=</i> or <i>OnStartupSec=</i> is\nalready in the past when the timer unit is activated, it\nwill immediately elapse and the configured unit is started.\nThis is not the case for timers defined in the other\ndirectives.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These are\nmonotonic timers, independent of wall-clock time and\ntimezones. If the computer is temporarily suspended, the\nmonotonic clock generally pauses, too. Note that if\n<i>WakeSystem=</i> is used, a different monotonic clock is\nselected that continues to advance while the system is\nsuspended and thus can be used as the trigger to resume the\nsystem.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the empty\nstring is assigned to any of these options, the list of\ntimers is reset (both monotonic timers and\n<i>OnCalendar=</i> timers, see below), and all prior\nassignments will have no effect.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\ntimers do not necessarily expire at the precise time\nconfigured with these settings, as they are subject to the\n<i>AccuracySec=</i> setting below.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>OnCalendar=</i></p>\n\n<p style=\"margin-left:17%;\">Defines realtime (i.e.\nwallclock) timers with calendar event expressions. See\n<b>systemd.time</b>(7) for more information on the syntax of\ncalendar event expressions. Otherwise, the semantics are\nsimilar to <i>OnActiveSec=</i> and related settings.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\ntimers do not necessarily expire at the precise time\nconfigured with this setting, as it is subject to the\n<i>AccuracySec=</i> setting below.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">May be\nspecified more than once, in which case the timer unit will\ntrigger whenever any of the specified expressions elapse.\nMoreover calendar timers and monotonic timers (see above)\nmay be combined within the same timer unit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the empty\nstring is assigned to any of these options, the list of\ntimers is reset (both <i>OnCalendar=</i> timers and\nmonotonic timers, see above), and all prior assignments will\nhave no effect.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>AccuracySec=</i></p>\n\n<p style=\"margin-left:17%;\">Specify the accuracy the timer\nshall elapse with. Defaults to 1min. The timer is scheduled\nto elapse within a time window starting with the time\nspecified in <i>OnCalendar=</i>, <i>OnActiveSec=</i>,\n<i>OnBootSec=</i>, <i>OnStartupSec=</i>,\n<i>OnUnitActiveSec=</i> or <i>OnUnitInactiveSec=</i> and\nending the time configured with <i>AccuracySec=</i> later.\nWithin this time window, the expiry time will be placed at a\nhost-specific, randomized, but stable position that is\nsynchronized between all local timer units. This is done in\norder to optimize power consumption to suppress unnecessary\nCPU wake-ups. To get best accuracy, set this option to 1us.\nNote that the timer is still subject to the timer slack\nconfigured via <b>systemd-system.conf</b>(5)'s\n<i>TimerSlackNSec=</i> setting. See <a href=\"https://man.page/2/prctl\">prctl(2)</a> for\ndetails. To optimize power consumption, make sure to set\nthis value as high as possible and as low as necessary.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that this\nsetting is primarily a power saving option that allows\ncoalescing CPU wake-ups. It should not be confused with\n<i>RandomizedDelaySec=</i> (see below) which adds a random\nvalue to the time the timer shall elapse next and whose\npurpose is the opposite: to stretch elapsing of timer events\nover a longer period to reduce workload spikes. For further\ndetails and explanations and how both settings play\ntogether, see below.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>RandomizedDelaySec=</i></p>\n\n<p style=\"margin-left:17%;\">Delay the timer by a randomly\nselected, evenly distributed amount of time between 0 and\nthe specified time value. Defaults to 0, indicating that no\nrandomized delay shall be applied. Each timer unit will\ndetermine this delay randomly before each iteration, and the\ndelay will simply be added on top of the next determined\nelapsing time, unless modified with\n<i>FixedRandomDelay=</i>, see below.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This setting is\nuseful to stretch dispatching of similarly configured timer\nevents over a certain time interval, to prevent them from\nfiring all at the same time, possibly resulting in resource\ncongestion.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note the\nrelation to <i>AccuracySec=</i> above: the latter allows the\nservice manager to coalesce timer events within a specified\ntime range in order to minimize wakeups, while this setting\ndoes the opposite: it stretches timer events over an\ninterval, to make it unlikely that they fire simultaneously.\nIf <i>RandomizedDelaySec=</i> and <i>AccuracySec=</i> are\nused in conjunction, first the randomized delay is added,\nand then the result is possibly further shifted to coalesce\nit with other timer events happening on the system. As\nmentioned above <i>AccuracySec=</i> defaults to 1 minute and\n<i>RandomizedDelaySec=</i> to 0, thus encouraging coalescing\nof timer events. In order to optimally stretch timer events\nover a certain range of time, set <i>AccuracySec=1us</i> and\n<i>RandomizedDelaySec=</i> to some higher value.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>FixedRandomDelay=</i></p>\n\n<p style=\"margin-left:17%;\">Takes a boolean argument. When\nenabled, the randomized offset specified by\n<i>RandomizedDelaySec=</i> is reused for all firings of the\nsame timer. For a given timer unit, the offset depends on\nthe machine ID, user identifier and timer name, which means\nthat it is stable between restarts of the manager. This\neffectively creates a fixed offset for an individual timer,\nreducing the jitter in firings of this timer, while still\navoiding firing at the same time as other similarly\nconfigured timers.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This setting\nhas no effect if <i>RandomizedDelaySec=</i> is set to 0.\nDefaults to <b>false</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>OnClockChange=</i>,\n<i>OnTimezoneChange=</i></p>\n\n<p style=\"margin-left:17%;\">These options take boolean\narguments. When true, the service unit will be triggered\nwhen the system clock (<b>CLOCK_REALTIME</b>) jumps relative\nto the monotonic clock (<b>CLOCK_MONOTONIC</b>), or when the\nlocal system timezone is modified. These options can be used\nalone or in combination with other timer expressions (see\nabove) within the same timer unit. These options default to\n<b>false</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Unit=</i></p>\n\n<p style=\"margin-left:17%;\">The unit to activate when this\ntimer elapses. The argument is a unit name, whose suffix is\nnot &quot;.timer&quot;. If not specified, this value\ndefaults to a service that has the same name as the timer\nunit, except for the suffix. (See above.) It is recommended\nthat the unit name that is activated and the unit name of\nthe timer unit are named identically, except for the\nsuffix.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Persistent=</i></p>\n\n<p style=\"margin-left:17%;\">Takes a boolean argument. If\ntrue, the time when the service unit was last triggered is\nstored on disk. When the timer is activated, the service\nunit is triggered immediately if it would have been\ntriggered at least once during the time when the timer was\ninactive. Such triggering is nonetheless subject to the\ndelay imposed by <i>RandomizedDelaySec=</i>. This is useful\nto catch up on missed runs of the service when the system\nwas powered down. Note that this setting only has an effect\non timers configured with <i>OnCalendar=</i>. Defaults to\n<b>false</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Use\n<b>systemctl clean --what=state ...</b> on the timer unit to\nremove the timestamp file maintained by this option from\ndisk. In particular, use this command before uninstalling a\ntimer unit. See <a href=\"https://man.page/1/systemctl\">systemctl(1)</a> for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>WakeSystem=</i></p>\n\n<p style=\"margin-left:17%;\">Takes a boolean argument. If\ntrue, an elapsing timer will cause the system to resume from\nsuspend, should it be suspended and if the system supports\nthis. Note that this option will only make sure the system\nresumes on the appropriate times, it will not take care of\nsuspending it again after any work that is to be done is\nfinished. Defaults to <b>false</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that this\nfunctionality requires privileges and is thus generally only\navailable in the system service manager.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nbehaviour of monotonic clock timers (as configured with\n<i>OnActiveSec=</i>, <i>OnBootSec=</i>,\n<i>OnStartupSec=</i>, <i>OnUnitActiveSec=</i>,\n<i>OnUnitInactiveSec=</i>, see above) is altered depending\non this option. If false, a monotonic clock is used that is\npaused during system suspend (<b>CLOCK_MONOTONIC</b>), if\ntrue a different monotonic clock is used that continues\nadvancing during system suspend (<b>CLOCK_BOOTTIME</b>), see\n<a href=\"https://man.page/2/clock_getres\">clock_getres(2)</a> for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>RemainAfterElapse=</i></p>\n\n<p style=\"margin-left:17%;\">Takes a boolean argument. If\ntrue, a timer will stay loaded, and its state remains\nqueryable even after it elapsed and the associated unit (as\nconfigured with <i>Unit=</i>, see above) deactivated again.\nIf false, an elapsed timer unit that cannot elapse anymore\nis unloaded once its associated unit deactivated again.\nTurning this off is particularly useful for transient timer\nunits. Note that this setting has an effect when repeatedly\nstarting a timer unit: if <i>RemainAfterElapse=</i> is on,\nstarting the timer a second time has no effect. However, if\n<i>RemainAfterElapse=</i> is off and the timer unit was\nalready unloaded, it can be started again, and thus the\nservice can be triggered multiple times. Defaults to\n<b>true</b>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/systemd\">systemd(1)</a>,\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a>, <b>systemd.unit</b>(5),\n<b>systemd.service</b>(5), <b>systemd.time</b>(7),\n<b>systemd.directives</b>(7), <b>systemd-system.conf</b>(5),\n<a href=\"https://man.page/2/prctl\">prctl(2)</a></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#AUTOMATIC DEPENDENCIES\">AUTOMATIC DEPENDENCIES</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":5}