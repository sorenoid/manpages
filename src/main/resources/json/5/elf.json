{"name":"elf","body":"\n\n<h1 align=\"center\">ELF</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">elf - format of\nExecutable and Linking Format (ELF) files</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;elf.h&gt;</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The header file\n<i>&lt;elf.h&gt;</i> defines the format of ELF executable\nbinary files. Amongst these files are normal executable\nfiles, relocatable object files, core files, and shared\nobjects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An executable\nfile using the ELF file format consists of an ELF header,\nfollowed by a program header table or a section header\ntable, or both. The ELF header is always at offset zero of\nthe file. The program header table and the section header\ntable&rsquo;s offset in the file are defined in the ELF\nheader. The two tables describe the rest of the\nparticularities of the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This header\nfile describes the above mentioned headers as C structures\nand also includes structures for dynamic sections,\nrelocation sections and symbol tables.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Basic\ntypes</b> <br>\nThe following types are used for N-bit architectures\n(N=32,64, <i>ElfN</i> stands for <i>Elf32</i> or\n<i>Elf64</i>, <i>uintN_t</i> stands for <i>uint32_t</i> or\n<i>uint64_t</i>):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ElfN_Addr\nUnsigned program address, uintN_t <br>\nElfN_Off Unsigned file offset, uintN_t <br>\nElfN_Section Unsigned section index, uint16_t <br>\nElfN_Versym Unsigned version symbol information, uint16_t\n<br>\nElf_Byte unsigned char <br>\nElfN_Half uint16_t <br>\nElfN_Sword int32_t <br>\nElfN_Word uint32_t <br>\nElfN_Sxword int64_t <br>\nElfN_Xword uint64_t</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(Note: the *BSD\nterminology is a bit different. There, <i>Elf64_Half</i> is\ntwice as large as <i>Elf32_Half</i>, and <i>Elf64Quarter</i>\nis used for <i>uint16_t</i>. In order to avoid confusion\nthese types are replaced by explicit ones in the below.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All data\nstructures that the file format defines follow the\n&quot;natural&quot; size and alignment guidelines for the\nrelevant class. If necessary, data structures contain\nexplicit padding to ensure 4-byte alignment for 4-byte\nobjects, to force structure sizes to a multiple of 4, and so\non.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ELF header\n(Ehdr)</b> <br>\nThe ELF header is described by the type <i>Elf32_Ehdr</i> or\n<i>Elf64_Ehdr</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#define\nEI_NIDENT 16</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nunsigned char e_ident[EI_NIDENT]; <br>\nuint16_t e_type; <br>\nuint16_t e_machine; <br>\nuint32_t e_version; <br>\nElfN_Addr e_entry; <br>\nElfN_Off e_phoff; <br>\nElfN_Off e_shoff; <br>\nuint32_t e_flags; <br>\nuint16_t e_ehsize; <br>\nuint16_t e_phentsize; <br>\nuint16_t e_phnum; <br>\nuint16_t e_shentsize; <br>\nuint16_t e_shnum; <br>\nuint16_t e_shstrndx; <br>\n} ElfN_Ehdr;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fields have\nthe following meanings: <i><br>\ne_ident</i></p>\n\n<p style=\"margin-left:22%;\">This array of bytes specifies\nhow to interpret the file, independent of the processor or\nthe file&rsquo;s remaining contents. Within this array\neverything is named by macros, which start with the prefix\n<b>EI_</b> and may contain values which start with the\nprefix <b>ELF</b>. The following macros are defined: <b><br>\nEI_MAG0</b></p>\n\n<p style=\"margin-left:32%;\">The first byte of the magic\nnumber. It must be filled with <b>ELFMAG0</b>. (0: 0x7f)</p>\n\n<p style=\"margin-left:22%;\"><b>EI_MAG1</b></p>\n\n<p style=\"margin-left:32%;\">The second byte of the magic\nnumber. It must be filled with <b>ELFMAG1</b>. (1: 'E')</p>\n\n<p style=\"margin-left:22%;\"><b>EI_MAG2</b></p>\n\n<p style=\"margin-left:32%;\">The third byte of the magic\nnumber. It must be filled with <b>ELFMAG2</b>. (2: 'L')</p>\n\n<p style=\"margin-left:22%;\"><b>EI_MAG3</b></p>\n\n<p style=\"margin-left:32%;\">The fourth byte of the magic\nnumber. It must be filled with <b>ELFMAG3</b>. (3: 'F')</p>\n\n<p style=\"margin-left:22%;\"><b>EI_CLASS</b></p>\n\n<p style=\"margin-left:32%;\">The fifth byte identifies the\narchitecture for this binary:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"19%\">\n\n\n<p><b>ELFCLASSNONE</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"46%\">\n\n\n<p>This class is invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"19%\">\n\n\n<p><b>ELFCLASS32</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"46%\">\n\n\n<p>This defines the 32-bit architecture. It supports\nmachines with files and virtual address spaces up to 4\nGigabytes.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"19%\">\n\n\n<p><b>ELFCLASS64</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"46%\">\n\n\n<p>This defines the 64-bit architecture.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>EI_DATA</b></p>\n\n<p style=\"margin-left:32%;\">The sixth byte specifies the\ndata encoding of the processor-specific data in the file.\nCurrently, these encodings are supported:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"35%\"></td>\n<td width=\"17%\">\n\n\n<p><b>ELFDATANONE</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n<p>Unknown data format.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"35%\"></td>\n<td width=\"17%\">\n\n\n<p><b>ELFDATA2LSB</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n<p>Two&rsquo;s complement, little-endian.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"35%\"></td>\n<td width=\"17%\">\n\n\n<p><b>ELFDATA2MSB</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n<p>Two&rsquo;s complement, big-endian.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>EI_VERSION</b></p>\n\n<p style=\"margin-left:32%;\">The seventh byte is the version\nnumber of the ELF specification:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"16%\">\n\n\n<p><b>EV_NONE</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"24%\">\n\n\n<p>Invalid version.</p></td>\n<td width=\"22%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"16%\">\n\n\n<p><b>EV_CURRENT</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"24%\">\n\n\n<p>Current version.</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>EI_OSABI</b></p>\n\n<p style=\"margin-left:32%;\">The eighth byte identifies the\noperating system and ABI to which the object is targeted.\nSome fields in other ELF structures have flags and values\nthat have platform-specific meanings; the interpretation of\nthose fields is determined by the value of this byte. For\nexample:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_NONE</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>Same as ELFOSABI_SYSV</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_SYSV</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>UNIX System V ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_HPUX</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>HP-UX ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_NETBSD</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>NetBSD ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_LINUX</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>Linux ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_SOLARIS</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>Solaris ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_IRIX</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>IRIX ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_FREEBSD</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>FreeBSD ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_TRU64</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>TRU64 UNIX ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_ARM</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>ARM architecture ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"30%\">\n\n\n<p><b>ELFOSABI_STANDALONE</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"35%\">\n\n\n<p>Stand-alone (embedded) ABI</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>EI_ABIVERSION</b></p>\n\n<p style=\"margin-left:32%;\">The ninth byte identifies the\nversion of the ABI to which the object is targeted. This\nfield is used to distinguish among incompatible versions of\nan ABI. The interpretation of this version number is\ndependent on the ABI identified by the <b>EI_OSABI</b>\nfield. Applications conforming to this specification use the\nvalue 0.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EI_PAD</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Start of padding. These bytes are reserved and set to\nzero. Programs which read them should ignore them. The value\nfor <b>EI_PAD</b> will change in the future if currently\nunused bytes are given meanings.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>EI_NIDENT</b></p>\n\n<p style=\"margin-left:32%;\">The size of the <i>e_ident</i>\narray.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>e_type</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This member of the structure identifies the object file\ntype:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>ET_NONE</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\"></td>\n<td width=\"14%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">An unknown type.</p></td>\n<td width=\"25%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>ET_REL</b></p></td>\n<td width=\"14%\"></td>\n<td width=\"29%\">\n\n\n<p>A relocatable file.</p></td>\n<td width=\"25%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>ET_EXEC</b></p></td>\n<td width=\"14%\"></td>\n<td width=\"29%\">\n\n\n<p>An executable file.</p></td>\n<td width=\"25%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>ET_DYN</b></p></td>\n<td width=\"14%\"></td>\n<td width=\"29%\">\n\n\n<p>A shared object.</p></td>\n<td width=\"25%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>ET_CORE</b></p></td>\n<td width=\"14%\"></td>\n<td width=\"29%\">\n\n\n<p>A core file.</p></td>\n<td width=\"25%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>e_machine</i></p>\n\n<p style=\"margin-left:22%;\">This member specifies the\nrequired architecture for an individual file. For\nexample:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_NONE</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>An unknown machine</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_M32</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>AT&amp;T WE 32100</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_SPARC</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Sun Microsystems SPARC</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_386</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Intel 80386</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_68K</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Motorola 68000</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_88K</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Motorola 88000</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_860</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Intel 80860</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_MIPS</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>MIPS RS3000 (big-endian only)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_PARISC</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>HP/PA</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_SPARC32PLUS</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>SPARC with enhanced instruction set</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_PPC</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>PowerPC</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_PPC64</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>PowerPC 64-bit</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_S390</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>IBM S/390</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_ARM</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Advanced RISC Machines</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_SH</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Renesas SuperH</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_SPARCV9</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>SPARC v9 64-bit</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_IA_64</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Intel Itanium</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_X86_64</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>AMD x86-64</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"21%\">\n\n\n<p><b>EM_VAX</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>DEC Vax</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>e_version</i></p>\n\n<p style=\"margin-left:22%;\">This member identifies the file\nversion:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>EV_NONE</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"23%\">\n\n\n<p>Invalid version</p></td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"15%\">\n\n\n<p><b>EV_CURRENT</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"23%\">\n\n\n<p>Current version</p></td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>e_entry</i></p>\n\n<p style=\"margin-left:22%;\">This member gives the virtual\naddress to which the system first transfers control, thus\nstarting the process. If the file has no associated entry\npoint, this member holds zero.</p>\n\n<p style=\"margin-left:11%;\"><i>e_phoff</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the program\nheader table&rsquo;s file offset in bytes. If the file has\nno program header table, this member holds zero.</p>\n\n<p style=\"margin-left:11%;\"><i>e_shoff</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the section\nheader table&rsquo;s file offset in bytes. If the file has\nno section header table, this member holds zero.</p>\n\n<p style=\"margin-left:11%;\"><i>e_flags</i></p>\n\n<p style=\"margin-left:22%;\">This member holds\nprocessor-specific flags associated with the file. Flag\nnames take the form EF_&rsquo;machine_flag&rsquo;.\nCurrently, no flags have been defined.</p>\n\n<p style=\"margin-left:11%;\"><i>e_ehsize</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the ELF\nheader&rsquo;s size in bytes.</p>\n\n<p style=\"margin-left:11%;\"><i>e_phentsize</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the size in\nbytes of one entry in the file&rsquo;s program header table;\nall entries are the same size.</p>\n\n<p style=\"margin-left:11%;\"><i>e_phnum</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the number of\nentries in the program header table. Thus the product of\n<i>e_phentsize</i> and <i>e_phnum</i> gives the\ntable&rsquo;s size in bytes. If a file has no program\nheader, <i>e_phnum</i> holds the value zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the number\nof entries in the program header table is larger than or\nequal to <b>PN_XNUM</b> (0xffff), this member holds\n<b>PN_XNUM</b> (0xffff) and the real number of entries in\nthe program header table is held in the <i>sh_info</i>\nmember of the initial entry in section header table.\nOtherwise, the <i>sh_info</i> member of the initial entry\ncontains the value zero. <b><br>\nPN_XNUM</b></p>\n\n<p style=\"margin-left:32%;\">This is defined as 0xffff, the\nlargest number <i>e_phnum</i> can have, specifying where the\nactual number of program headers is assigned.</p>\n\n<p style=\"margin-left:11%;\"><i>e_shentsize</i></p>\n\n<p style=\"margin-left:22%;\">This member holds a sections\nheader&rsquo;s size in bytes. A section header is one entry\nin the section header table; all entries are the same\nsize.</p>\n\n<p style=\"margin-left:11%;\"><i>e_shnum</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the number of\nentries in the section header table. Thus the product of\n<i>e_shentsize</i> and <i>e_shnum</i> gives the section\nheader table&rsquo;s size in bytes. If a file has no section\nheader table, <i>e_shnum</i> holds the value of zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the number\nof entries in the section header table is larger than or\nequal to <b>SHN_LORESERVE</b> (0xff00), <i>e_shnum</i> holds\nthe value zero and the real number of entries in the section\nheader table is held in the <i>sh_size</i> member of the\ninitial entry in section header table. Otherwise, the\n<i>sh_size</i> member of the initial entry in the section\nheader table holds the value zero.</p>\n\n<p style=\"margin-left:11%;\"><i>e_shstrndx</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the section\nheader table index of the entry associated with the section\nname string table. If the file has no section name string\ntable, this member holds the value <b>SHN_UNDEF</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the index of\nsection name string table section is larger than or equal to\n<b>SHN_LORESERVE</b> (0xff00), this member holds\n<b>SHN_XINDEX</b> (0xffff) and the real index of the section\nname string table section is held in the <i>sh_link</i>\nmember of the initial entry in section header table.\nOtherwise, the <i>sh_link</i> member of the initial entry in\nsection header table contains the value zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nheader (Phdr)</b> <br>\nAn executable or shared object file&rsquo;s program header\ntable is an array of structures, each describing a segment\nor other information the system needs to prepare the program\nfor execution. An object file <i>segment</i> contains one or\nmore <i>sections</i>. Program headers are meaningful only\nfor executable and shared object files. A file specifies its\nown program header size with the ELF header&rsquo;s\n<i>e_phentsize</i> and <i>e_phnum</i> members. The ELF\nprogram header is described by the type <i>Elf32_Phdr</i> or\n<i>Elf64_Phdr</i> depending on the architecture:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nuint32_t p_type; <br>\nElf32_Off p_offset; <br>\nElf32_Addr p_vaddr; <br>\nElf32_Addr p_paddr; <br>\nuint32_t p_filesz; <br>\nuint32_t p_memsz; <br>\nuint32_t p_flags; <br>\nuint32_t p_align; <br>\n} Elf32_Phdr;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nuint32_t p_type; <br>\nuint32_t p_flags; <br>\nElf64_Off p_offset; <br>\nElf64_Addr p_vaddr; <br>\nElf64_Addr p_paddr; <br>\nuint64_t p_filesz; <br>\nuint64_t p_memsz; <br>\nuint64_t p_align; <br>\n} Elf64_Phdr;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The main\ndifference between the 32-bit and the 64-bit program header\nlies in the location of the <i>p_flags</i> member in the\ntotal struct.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>p_type</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This member of the structure indicates what kind of\nsegment this array element describes or how to interpret the\narray element&rsquo;s information.</p></td></tr>\n</table>\n\n<p style=\"margin-left:26%;\"><b>PT_NULL</b></p>\n\n<p style=\"margin-left:37%;\">The array element is unused and\nthe other members&rsquo; values are undefined. This lets the\nprogram header have ignored entries.</p>\n\n<p style=\"margin-left:26%;\"><b>PT_LOAD</b></p>\n\n<p style=\"margin-left:37%;\">The array element specifies a\nloadable segment, described by <i>p_filesz</i> and\n<i>p_memsz</i>. The bytes from the file are mapped to the\nbeginning of the memory segment. If the segment&rsquo;s\nmemory size <i>p_memsz</i> is larger than the file size\n<i>p_filesz</i>, the &quot;extra&quot; bytes are defined to\nhold the value 0 and to follow the segment&rsquo;s\ninitialized area. The file size may not be larger than the\nmemory size. Loadable segment entries in the program header\ntable appear in ascending order, sorted on the\n<i>p_vaddr</i> member.</p>\n\n<p style=\"margin-left:26%;\"><b>PT_DYNAMIC</b></p>\n\n<p style=\"margin-left:37%;\">The array element specifies\ndynamic linking information.</p>\n\n<p style=\"margin-left:26%;\"><b>PT_INTERP</b></p>\n\n<p style=\"margin-left:37%;\">The array element specifies the\nlocation and size of a null-terminated pathname to invoke as\nan interpreter. This segment type is meaningful only for\nexecutable files (though it may occur for shared objects).\nHowever it may not occur more than once in a file. If it is\npresent, it must precede any loadable segment entry.</p>\n\n<p style=\"margin-left:26%;\"><b>PT_NOTE</b></p>\n\n<p style=\"margin-left:37%;\">The array element specifies the\nlocation of notes (ElfN_Nhdr).</p>\n\n<p style=\"margin-left:26%;\"><b>PT_SHLIB</b></p>\n\n<p style=\"margin-left:37%;\">This segment type is reserved\nbut has unspecified semantics. Programs that contain an\narray element of this type do not conform to the ABI.</p>\n\n<p style=\"margin-left:26%;\"><b>PT_PHDR</b></p>\n\n<p style=\"margin-left:37%;\">The array element, if present,\nspecifies the location and size of the program header table\nitself, both in the file and in the memory image of the\nprogram. This segment type may not occur more than once in a\nfile. Moreover, it may occur only if the program header\ntable is part of the memory image of the program. If it is\npresent, it must precede any loadable segment entry.</p>\n\n<p style=\"margin-left:26%;\"><b>PT_LOPROC</b>,\n<b>PT_HIPROC</b></p>\n\n<p style=\"margin-left:37%;\">Values in the inclusive range\n[<b>PT_LOPROC</b>, <b>PT_HIPROC</b>] are reserved for\nprocessor-specific semantics.</p>\n\n<p style=\"margin-left:26%;\"><b>PT_GNU_STACK</b></p>\n\n<p style=\"margin-left:37%;\">GNU extension which is used by\nthe Linux kernel to control the state of the stack via the\nflags set in the <i>p_flags</i> member.</p>\n\n<p style=\"margin-left:11%;\"><i>p_offset</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the offset\nfrom the beginning of the file at which the first byte of\nthe segment resides.</p>\n\n<p style=\"margin-left:11%;\"><i>p_vaddr</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the virtual\naddress at which the first byte of the segment resides in\nmemory.</p>\n\n<p style=\"margin-left:11%;\"><i>p_paddr</i></p>\n\n<p style=\"margin-left:22%;\">On systems for which physical\naddressing is relevant, this member is reserved for the\nsegment&rsquo;s physical address. Under BSD this member is\nnot used and must be zero.</p>\n\n<p style=\"margin-left:11%;\"><i>p_filesz</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the number of\nbytes in the file image of the segment. It may be zero.</p>\n\n<p style=\"margin-left:11%;\"><i>p_memsz</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the number of\nbytes in the memory image of the segment. It may be\nzero.</p>\n\n<p style=\"margin-left:11%;\"><i>p_flags</i></p>\n\n<p style=\"margin-left:22%;\">This member holds a bit mask of\nflags relevant to the segment:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>PF_X</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"34%\">\n\n\n<p>An executable segment.</p></td>\n<td width=\"34%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>PF_W</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"34%\">\n\n\n<p>A writable segment.</p></td>\n<td width=\"34%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>PF_R</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"34%\">\n\n\n<p>A readable segment.</p></td>\n<td width=\"34%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A text segment\ncommonly has the flags <b>PF_X</b> and <b>PF_R</b>. A data\nsegment commonly has <b>PF_W</b> and <b>PF_R</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>p_align</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the value to\nwhich the segments are aligned in memory and in the file.\nLoadable process segments must have congruent values for\n<i>p_vaddr</i> and <i>p_offset</i>, modulo the page size.\nValues of zero and one mean no alignment is required.\nOtherwise, <i>p_align</i> should be a positive, integral\npower of two, and <i>p_vaddr</i> should equal\n<i>p_offset</i>, modulo <i>p_align</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Section\nheader (Shdr)</b> <br>\nA file&rsquo;s section header table lets one locate all the\nfile&rsquo;s sections. The section header table is an array\nof <i>Elf32_Shdr</i> or <i>Elf64_Shdr</i> structures. The\nELF header&rsquo;s <i>e_shoff</i> member gives the byte\noffset from the beginning of the file to the section header\ntable. <i>e_shnum</i> holds the number of entries the\nsection header table contains. <i>e_shentsize</i> holds the\nsize in bytes of each entry.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A section\nheader table index is a subscript into this array. Some\nsection header table indices are reserved: the initial entry\nand the indices between <b>SHN_LORESERVE</b> and\n<b>SHN_HIRESERVE</b>. The initial entry is used in ELF\nextensions for <i>e_phnum</i>, <i>e_shnum</i>, and\n<i>e_shstrndx</i>; in other cases, each field in the initial\nentry is set to zero. An object file does not have sections\nfor these special indices: <b><br>\nSHN_UNDEF</b></p>\n\n<p style=\"margin-left:22%;\">This value marks an undefined,\nmissing, irrelevant, or otherwise meaningless section\nreference.</p>\n\n<p style=\"margin-left:11%;\"><b>SHN_LORESERVE</b></p>\n\n<p style=\"margin-left:22%;\">This value specifies the lower\nbound of the range of reserved indices.</p>\n\n<p style=\"margin-left:11%;\"><b>SHN_LOPROC</b>,\n<b>SHN_HIPROC</b></p>\n\n<p style=\"margin-left:22%;\">Values greater in the inclusive\nrange [<b>SHN_LOPROC</b>, <b>SHN_HIPROC</b>] are reserved\nfor processor-specific semantics.</p>\n\n<p style=\"margin-left:11%;\"><b>SHN_ABS</b></p>\n\n<p style=\"margin-left:22%;\">This value specifies the\nabsolute value for the corresponding reference. For example,\na symbol defined relative to section number <b>SHN_ABS</b>\nhas an absolute value and is not affected by relocation.</p>\n\n<p style=\"margin-left:11%;\"><b>SHN_COMMON</b></p>\n\n<p style=\"margin-left:22%;\">Symbols defined relative to\nthis section are common symbols, such as FORTRAN COMMON or\nunallocated C external variables.</p>\n\n<p style=\"margin-left:11%;\"><b>SHN_HIRESERVE</b></p>\n\n<p style=\"margin-left:22%;\">This value specifies the upper\nbound of the range of reserved indices. The system reserves\nindices between <b>SHN_LORESERVE</b> and\n<b>SHN_HIRESERVE</b>, inclusive. The section header table\ndoes not contain entries for the reserved indices.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The section\nheader has the following structure:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nuint32_t sh_name; <br>\nuint32_t sh_type; <br>\nuint32_t sh_flags; <br>\nElf32_Addr sh_addr; <br>\nElf32_Off sh_offset; <br>\nuint32_t sh_size; <br>\nuint32_t sh_link; <br>\nuint32_t sh_info; <br>\nuint32_t sh_addralign; <br>\nuint32_t sh_entsize; <br>\n} Elf32_Shdr;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nuint32_t sh_name; <br>\nuint32_t sh_type; <br>\nuint64_t sh_flags; <br>\nElf64_Addr sh_addr; <br>\nElf64_Off sh_offset; <br>\nuint64_t sh_size; <br>\nuint32_t sh_link; <br>\nuint32_t sh_info; <br>\nuint64_t sh_addralign; <br>\nuint64_t sh_entsize; <br>\n} Elf64_Shdr;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">No real\ndifferences exist between the 32-bit and 64-bit section\nheaders. <i><br>\nsh_name</i></p>\n\n<p style=\"margin-left:22%;\">This member specifies the name\nof the section. Its value is an index into the section\nheader string table section, giving the location of a\nnull-terminated string.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_type</i></p>\n\n<p style=\"margin-left:22%;\">This member categorizes the\nsection&rsquo;s contents and semantics. <b><br>\nSHT_NULL</b></p>\n\n<p style=\"margin-left:32%;\">This value marks the section\nheader as inactive. It does not have an associated section.\nOther members of the section header have undefined\nvalues.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_PROGBITS</b></p>\n\n<p style=\"margin-left:32%;\">This section holds information\ndefined by the program, whose format and meaning are\ndetermined solely by the program.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_SYMTAB</b></p>\n\n<p style=\"margin-left:32%;\">This section holds a symbol\ntable. Typically, <b>SHT_SYMTAB</b> provides symbols for\nlink editing, though it may also be used for dynamic\nlinking. As a complete symbol table, it may contain many\nsymbols unnecessary for dynamic linking. An object file can\nalso contain a <b>SHT_DYNSYM</b> section.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_STRTAB</b></p>\n\n<p style=\"margin-left:32%;\">This section holds a string\ntable. An object file may have multiple string table\nsections.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_RELA</b></p>\n\n<p style=\"margin-left:32%;\">This section holds relocation\nentries with explicit addends, such as type\n<i>Elf32_Rela</i> for the 32-bit class of object files. An\nobject may have multiple relocation sections.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_HASH</b></p>\n\n<p style=\"margin-left:32%;\">This section holds a symbol\nhash table. An object participating in dynamic linking must\ncontain a symbol hash table. An object file may have only\none hash table.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_DYNAMIC</b></p>\n\n<p style=\"margin-left:32%;\">This section holds information\nfor dynamic linking. An object file may have only one\ndynamic section.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_NOTE</b></p>\n\n<p style=\"margin-left:32%;\">This section holds notes\n(ElfN_Nhdr).</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_NOBITS</b></p>\n\n<p style=\"margin-left:32%;\">A section of this type occupies\nno space in the file but otherwise resembles\n<b>SHT_PROGBITS</b>. Although this section contains no\nbytes, the <i>sh_offset</i> member contains the conceptual\nfile offset.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_REL</b></p>\n\n<p style=\"margin-left:32%;\">This section holds relocation\noffsets without explicit addends, such as type\n<i>Elf32_Rel</i> for the 32-bit class of object files. An\nobject file may have multiple relocation sections.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_SHLIB</b></p>\n\n<p style=\"margin-left:32%;\">This section is reserved but\nhas unspecified semantics.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_DYNSYM</b></p>\n\n<p style=\"margin-left:32%;\">This section holds a minimal\nset of dynamic linking symbols. An object file can also\ncontain a <b>SHT_SYMTAB</b> section.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_LOPROC</b>,\n<b>SHT_HIPROC</b></p>\n\n<p style=\"margin-left:32%;\">Values in the inclusive range\n[<b>SHT_LOPROC</b>, <b>SHT_HIPROC</b>] are reserved for\nprocessor-specific semantics.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_LOUSER</b></p>\n\n<p style=\"margin-left:32%;\">This value specifies the lower\nbound of the range of indices reserved for application\nprograms.</p>\n\n<p style=\"margin-left:22%;\"><b>SHT_HIUSER</b></p>\n\n<p style=\"margin-left:32%;\">This value specifies the upper\nbound of the range of indices reserved for application\nprograms. Section types between <b>SHT_LOUSER</b> and\n<b>SHT_HIUSER</b> may be used by the application, without\nconflicting with current or future system-defined section\ntypes.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_flags</i></p>\n\n<p style=\"margin-left:22%;\">Sections support one-bit flags\nthat describe miscellaneous attributes. If a flag bit is set\nin <i>sh_flags</i>, the attribute is &quot;on&quot; for the\nsection. Otherwise, the attribute is &quot;off&quot; or does\nnot apply. Undefined attributes are set to zero. <b><br>\nSHF_WRITE</b></p>\n\n<p style=\"margin-left:32%;\">This section contains data that\nshould be writable during process execution.</p>\n\n<p style=\"margin-left:22%;\"><b>SHF_ALLOC</b></p>\n\n<p style=\"margin-left:32%;\">This section occupies memory\nduring process execution. Some control sections do not\nreside in the memory image of an object file. This attribute\nis off for those sections.</p>\n\n<p style=\"margin-left:22%;\"><b>SHF_EXECINSTR</b></p>\n\n<p style=\"margin-left:32%;\">This section contains\nexecutable machine instructions.</p>\n\n<p style=\"margin-left:22%;\"><b>SHF_MASKPROC</b></p>\n\n<p style=\"margin-left:32%;\">All bits included in this mask\nare reserved for processor-specific semantics.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_addr</i></p>\n\n<p style=\"margin-left:22%;\">If this section appears in the\nmemory image of a process, this member holds the address at\nwhich the section&rsquo;s first byte should reside.\nOtherwise, the member contains zero.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_offset</i></p>\n\n<p style=\"margin-left:22%;\">This member&rsquo;s value holds\nthe byte offset from the beginning of the file to the first\nbyte in the section. One section type, <b>SHT_NOBITS</b>,\noccupies no space in the file, and its <i>sh_offset</i>\nmember locates the conceptual placement in the file.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_size</i></p>\n\n<p style=\"margin-left:22%;\">This member holds the\nsection&rsquo;s size in bytes. Unless the section type is\n<b>SHT_NOBITS</b>, the section occupies <i>sh_size</i> bytes\nin the file. A section of type <b>SHT_NOBITS</b> may have a\nnonzero size, but it occupies no space in the file.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_link</i></p>\n\n<p style=\"margin-left:22%;\">This member holds a section\nheader table index link, whose interpretation depends on the\nsection type.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_info</i></p>\n\n<p style=\"margin-left:22%;\">This member holds extra\ninformation, whose interpretation depends on the section\ntype.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_addralign</i></p>\n\n<p style=\"margin-left:22%;\">Some sections have address\nalignment constraints. If a section holds a doubleword, the\nsystem must ensure doubleword alignment for the entire\nsection. That is, the value of <i>sh_addr</i> must be\ncongruent to zero, modulo the value of <i>sh_addralign</i>.\nOnly zero and positive integral powers of two are allowed.\nThe value 0 or 1 means that the section has no alignment\nconstraints.</p>\n\n<p style=\"margin-left:11%;\"><i>sh_entsize</i></p>\n\n<p style=\"margin-left:22%;\">Some sections hold a table of\nfixed-sized entries, such as a symbol table. For such a\nsection, this member gives the size in bytes for each entry.\nThis member contains zero if the section does not hold a\ntable of fixed-size entries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various\nsections hold program and control information:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>.bss</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds uninitialized data that contributes\nto the program&rsquo;s memory image. By definition, the\nsystem initializes the data with zeros when the program\nbegins to run. This section is of type <b>SHT_NOBITS</b>.\nThe attribute types are <b>SHF_ALLOC</b> and\n<b>SHF_WRITE</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>.comment</i></p>\n\n<p style=\"margin-left:22%;\">This section holds version\ncontrol information. This section is of type\n<b>SHT_PROGBITS</b>. No attribute types are used.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>.ctors</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds initialized pointers to the C++\nconstructor functions. This section is of type\n<b>SHT_PROGBITS</b>. The attribute types are\n<b>SHF_ALLOC</b> and <b>SHF_WRITE</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>.data</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds initialized data that contribute to\nthe program&rsquo;s memory image. This section is of type\n<b>SHT_PROGBITS</b>. The attribute types are\n<b>SHF_ALLOC</b> and <b>SHF_WRITE</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>.data1</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds initialized data that contribute to\nthe program&rsquo;s memory image. This section is of type\n<b>SHT_PROGBITS</b>. The attribute types are\n<b>SHF_ALLOC</b> and <b>SHF_WRITE</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>.debug</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds information for symbolic debugging.\nThe contents are unspecified. This section is of type\n<b>SHT_PROGBITS</b>. No attribute types are used.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>.dtors</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds initialized pointers to the C++\ndestructor functions. This section is of type\n<b>SHT_PROGBITS</b>. The attribute types are\n<b>SHF_ALLOC</b> and <b>SHF_WRITE</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>.dynamic</i></p>\n\n<p style=\"margin-left:22%;\">This section holds dynamic\nlinking information. The section&rsquo;s attributes will\ninclude the <b>SHF_ALLOC</b> bit. Whether the\n<b>SHF_WRITE</b> bit is set is processor-specific. This\nsection is of type <b>SHT_DYNAMIC</b>. See the attributes\nabove.</p>\n\n<p style=\"margin-left:11%;\"><i>.dynstr</i></p>\n\n<p style=\"margin-left:22%;\">This section holds strings\nneeded for dynamic linking, most commonly the strings that\nrepresent the names associated with symbol table entries.\nThis section is of type <b>SHT_STRTAB</b>. The attribute\ntype used is <b>SHF_ALLOC</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.dynsym</i></p>\n\n<p style=\"margin-left:22%;\">This section holds the dynamic\nlinking symbol table. This section is of type\n<b>SHT_DYNSYM</b>. The attribute used is\n<b>SHF_ALLOC</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>.fini</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds executable instructions that\ncontribute to the process termination code. When a program\nexits normally the system arranges to execute the code in\nthis section. This section is of type <b>SHT_PROGBITS</b>.\nThe attributes used are <b>SHF_ALLOC</b> and\n<b>SHF_EXECINSTR</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>.gnu.version</i></p>\n\n<p style=\"margin-left:22%;\">This section holds the version\nsymbol table, an array of <i>ElfN_Half</i> elements. This\nsection is of type <b>SHT_GNU_versym</b>. The attribute type\nused is <b>SHF_ALLOC</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.gnu.version_d</i></p>\n\n<p style=\"margin-left:22%;\">This section holds the version\nsymbol definitions, a table of <i>ElfN_Verdef</i>\nstructures. This section is of type <b>SHT_GNU_verdef</b>.\nThe attribute type used is <b>SHF_ALLOC</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.gnu.version_r</i></p>\n\n<p style=\"margin-left:22%;\">This section holds the version\nsymbol needed elements, a table of <i>ElfN_Verneed</i>\nstructures. This section is of type <b>SHT_GNU_versym</b>.\nThe attribute type used is <b>SHF_ALLOC</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>.got</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds the global offset table. This section\nis of type <b>SHT_PROGBITS</b>. The attributes are\nprocessor-specific.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>.hash</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds a symbol hash table. This section is\nof type <b>SHT_HASH</b>. The attribute used is\n<b>SHF_ALLOC</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>.init</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds executable instructions that\ncontribute to the process initialization code. When a\nprogram starts to run the system arranges to execute the\ncode in this section before calling the main program entry\npoint. This section is of type <b>SHT_PROGBITS</b>. The\nattributes used are <b>SHF_ALLOC</b> and\n<b>SHF_EXECINSTR</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>.interp</i></p>\n\n<p style=\"margin-left:22%;\">This section holds the pathname\nof a program interpreter. If the file has a loadable segment\nthat includes the section, the section&rsquo;s attributes\nwill include the <b>SHF_ALLOC</b> bit. Otherwise, that bit\nwill be off. This section is of type\n<b>SHT_PROGBITS</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>.line</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds line number information for symbolic\ndebugging, which describes the correspondence between the\nprogram source and the machine code. The contents are\nunspecified. This section is of type <b>SHT_PROGBITS</b>. No\nattribute types are used.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>.note</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds various notes. This section is of\ntype <b>SHT_NOTE</b>. No attribute types are used.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>.note.ABI-tag</i></p>\n\n<p style=\"margin-left:22%;\">This section is used to declare\nthe expected run-time ABI of the ELF image. It may include\nthe operating system name and its run-time versions. This\nsection is of type <b>SHT_NOTE</b>. The only attribute used\nis <b>SHF_ALLOC</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.note.gnu.build-id</i></p>\n\n<p style=\"margin-left:22%;\">This section is used to hold an\nID that uniquely identifies the contents of the ELF image.\nDifferent files with the same build ID should contain the\nsame executable content. See the <b>--build-id</b> option to\nthe GNU linker (<b>ld</b> (1)) for more details. This\nsection is of type <b>SHT_NOTE</b>. The only attribute used\nis <b>SHF_ALLOC</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.note.GNU-stack</i></p>\n\n<p style=\"margin-left:22%;\">This section is used in Linux\nobject files for declaring stack attributes. This section is\nof type <b>SHT_PROGBITS</b>. The only attribute used is\n<b>SHF_EXECINSTR</b>. This indicates to the GNU linker that\nthe object file requires an executable stack.</p>\n\n<p style=\"margin-left:11%;\"><i>.note.openbsd.ident</i></p>\n\n<p style=\"margin-left:22%;\">OpenBSD native executables\nusually contain this section to identify themselves so the\nkernel can bypass any compatibility ELF binary emulation\ntests when loading the file.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>.plt</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds the procedure linkage table. This\nsection is of type <b>SHT_PROGBITS</b>. The attributes are\nprocessor-specific.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>.relNAME</i></p>\n\n<p style=\"margin-left:22%;\">This section holds relocation\ninformation as described below. If the file has a loadable\nsegment that includes relocation, the section&rsquo;s\nattributes will include the <b>SHF_ALLOC</b> bit. Otherwise,\nthe bit will be off. By convention, &quot;NAME&quot; is\nsupplied by the section to which the relocations apply. Thus\na relocation section for <b>.text</b> normally would have\nthe name <b>.rel.text</b>. This section is of type\n<b>SHT_REL</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.relaNAME</i></p>\n\n<p style=\"margin-left:22%;\">This section holds relocation\ninformation as described below. If the file has a loadable\nsegment that includes relocation, the section&rsquo;s\nattributes will include the <b>SHF_ALLOC</b> bit. Otherwise,\nthe bit will be off. By convention, &quot;NAME&quot; is\nsupplied by the section to which the relocations apply. Thus\na relocation section for <b>.text</b> normally would have\nthe name <b>.rela.text</b>. This section is of type\n<b>SHT_RELA</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.rodata</i></p>\n\n<p style=\"margin-left:22%;\">This section holds read-only\ndata that typically contributes to a nonwritable segment in\nthe process image. This section is of type\n<b>SHT_PROGBITS</b>. The attribute used is\n<b>SHF_ALLOC</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.rodata1</i></p>\n\n<p style=\"margin-left:22%;\">This section holds read-only\ndata that typically contributes to a nonwritable segment in\nthe process image. This section is of type\n<b>SHT_PROGBITS</b>. The attribute used is\n<b>SHF_ALLOC</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.shstrtab</i></p>\n\n<p style=\"margin-left:22%;\">This section holds section\nnames. This section is of type <b>SHT_STRTAB</b>. No\nattribute types are used.</p>\n\n<p style=\"margin-left:11%;\"><i>.strtab</i></p>\n\n<p style=\"margin-left:22%;\">This section holds strings,\nmost commonly the strings that represent the names\nassociated with symbol table entries. If the file has a\nloadable segment that includes the symbol string table, the\nsection&rsquo;s attributes will include the <b>SHF_ALLOC</b>\nbit. Otherwise, the bit will be off. This section is of type\n<b>SHT_STRTAB</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>.symtab</i></p>\n\n<p style=\"margin-left:22%;\">This section holds a symbol\ntable. If the file has a loadable segment that includes the\nsymbol table, the section&rsquo;s attributes will include\nthe <b>SHF_ALLOC</b> bit. Otherwise, the bit will be off.\nThis section is of type <b>SHT_SYMTAB</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>.text</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This section holds the &quot;text&quot;, or executable\ninstructions, of a program. This section is of type\n<b>SHT_PROGBITS</b>. The attributes used are\n<b>SHF_ALLOC</b> and <b>SHF_EXECINSTR</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>String and\nsymbol tables</b> <br>\nString table sections hold null-terminated character\nsequences, commonly called strings. The object file uses\nthese strings to represent symbol and section names. One\nreferences a string as an index into the string table\nsection. The first byte, which is index zero, is defined to\nhold a null byte ('\\0'). Similarly, a string table&rsquo;s\nlast byte is defined to hold a null byte, ensuring null\ntermination for all strings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An object\nfile&rsquo;s symbol table holds information needed to locate\nand relocate a program&rsquo;s symbolic definitions and\nreferences. A symbol table index is a subscript into this\narray.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nuint32_t st_name; <br>\nElf32_Addr st_value; <br>\nuint32_t st_size; <br>\nunsigned char st_info; <br>\nunsigned char st_other; <br>\nuint16_t st_shndx; <br>\n} Elf32_Sym;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nuint32_t st_name; <br>\nunsigned char st_info; <br>\nunsigned char st_other; <br>\nuint16_t st_shndx; <br>\nElf64_Addr st_value; <br>\nuint64_t st_size; <br>\n} Elf64_Sym;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The 32-bit and\n64-bit versions have the same members, just in a different\norder. <i><br>\nst_name</i></p>\n\n<p style=\"margin-left:22%;\">This member holds an index into\nthe object file&rsquo;s symbol string table, which holds\ncharacter representations of the symbol names. If the value\nis nonzero, it represents a string table index that gives\nthe symbol name. Otherwise, the symbol has no name.</p>\n\n<p style=\"margin-left:11%;\"><i>st_value</i></p>\n\n<p style=\"margin-left:22%;\">This member gives the value of\nthe associated symbol.</p>\n\n<p style=\"margin-left:11%;\"><i>st_size</i></p>\n\n<p style=\"margin-left:22%;\">Many symbols have associated\nsizes. This member holds zero if the symbol has no size or\nan unknown size.</p>\n\n<p style=\"margin-left:11%;\"><i>st_info</i></p>\n\n<p style=\"margin-left:22%;\">This member specifies the\nsymbol&rsquo;s type and binding attributes: <b><br>\nSTT_NOTYPE</b></p>\n\n<p style=\"margin-left:32%;\">The symbol&rsquo;s type is not\ndefined.</p>\n\n<p style=\"margin-left:22%;\"><b>STT_OBJECT</b></p>\n\n<p style=\"margin-left:32%;\">The symbol is associated with a\ndata object.</p>\n\n<p style=\"margin-left:22%;\"><b>STT_FUNC</b></p>\n\n<p style=\"margin-left:32%;\">The symbol is associated with a\nfunction or other executable code.</p>\n\n<p style=\"margin-left:22%;\"><b>STT_SECTION</b></p>\n\n<p style=\"margin-left:32%;\">The symbol is associated with a\nsection. Symbol table entries of this type exist primarily\nfor relocation and normally have <b>STB_LOCAL</b>\nbindings.</p>\n\n<p style=\"margin-left:22%;\"><b>STT_FILE</b></p>\n\n<p style=\"margin-left:32%;\">By convention, the\nsymbol&rsquo;s name gives the name of the source file\nassociated with the object file. A file symbol has\n<b>STB_LOCAL</b> bindings, its section index is\n<b>SHN_ABS</b>, and it precedes the other <b>STB_LOCAL</b>\nsymbols of the file, if it is present.</p>\n\n<p style=\"margin-left:22%;\"><b>STT_LOPROC</b>,\n<b>STT_HIPROC</b></p>\n\n<p style=\"margin-left:32%;\">Values in the inclusive range\n[<b>STT_LOPROC</b>, <b>STT_HIPROC</b>] are reserved for\nprocessor-specific semantics.</p>\n\n<p style=\"margin-left:22%;\"><b>STB_LOCAL</b></p>\n\n<p style=\"margin-left:32%;\">Local symbols are not visible\noutside the object file containing their definition. Local\nsymbols of the same name may exist in multiple files without\ninterfering with each other.</p>\n\n<p style=\"margin-left:22%;\"><b>STB_GLOBAL</b></p>\n\n<p style=\"margin-left:32%;\">Global symbols are visible to\nall object files being combined. One file&rsquo;s definition\nof a global symbol will satisfy another file&rsquo;s\nundefined reference to the same symbol.</p>\n\n<p style=\"margin-left:22%;\"><b>STB_WEAK</b></p>\n\n<p style=\"margin-left:32%;\">Weak symbols resemble global\nsymbols, but their definitions have lower precedence.</p>\n\n<p style=\"margin-left:22%;\"><b>STB_LOPROC</b>,\n<b>STB_HIPROC</b></p>\n\n<p style=\"margin-left:32%;\">Values in the inclusive range\n[<b>STB_LOPROC</b>, <b>STB_HIPROC</b>] are reserved for\nprocessor-specific semantics.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">There are\nmacros for packing and unpacking the binding and type\nfields: <b><br>\nELF32_ST_BIND(</b><i>info</i><b>)</b>,\n<b>ELF64_ST_BIND(</b><i>info</i><b>)</b></p>\n\n<p style=\"margin-left:32%;\">Extract a binding from an\n<i>st_info</i> value.</p>\n\n\n<p style=\"margin-left:22%;\"><b>ELF32_ST_TYPE(</b><i>info</i><b>)</b>,\n<b>ELF64_ST_TYPE(</b><i>info</i><b>)</b></p>\n\n<p style=\"margin-left:32%;\">Extract a type from an\n<i>st_info</i> value.</p>\n\n\n<p style=\"margin-left:22%;\"><b>ELF32_ST_INFO(</b><i>bind</i><b>,</b>\n<i>type</i><b>)</b>,\n<b>ELF64_ST_INFO(</b><i>bind</i><b>,</b>\n<i>type</i><b>)</b></p>\n\n<p style=\"margin-left:32%;\">Convert a binding and a type\ninto an <i>st_info</i> value.</p>\n\n<p style=\"margin-left:11%;\"><i>st_other</i></p>\n\n<p style=\"margin-left:22%;\">This member defines the symbol\nvisibility. <b><br>\nSTV_DEFAULT</b></p>\n\n<p style=\"margin-left:32%;\">Default symbol visibility\nrules. Global and weak symbols are available to other\nmodules; references in the local module can be interposed by\ndefinitions in other modules.</p>\n\n<p style=\"margin-left:22%;\"><b>STV_INTERNAL</b></p>\n\n<p style=\"margin-left:32%;\">Processor-specific hidden\nclass.</p>\n\n<p style=\"margin-left:22%;\"><b>STV_HIDDEN</b></p>\n\n<p style=\"margin-left:32%;\">Symbol is unavailable to other\nmodules; references in the local module always resolve to\nthe local symbol (i.e., the symbol can&rsquo;t be interposed\nby definitions in other modules).</p>\n\n<p style=\"margin-left:22%;\"><b>STV_PROTECTED</b></p>\n\n<p style=\"margin-left:32%;\">Symbol is available to other\nmodules, but references in the local module always resolve\nto the local symbol.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">There are\nmacros for extracting the visibility type:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>ELF32_ST_VISIBILITY</b>(other)\nor <b>ELF64_ST_VISIBILITY</b>(other)</p>\n\n<p style=\"margin-left:11%;\"><i>st_shndx</i></p>\n\n<p style=\"margin-left:22%;\">Every symbol table entry is\n&quot;defined&quot; in relation to some section. This member\nholds the relevant section header table index.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Relocation\nentries (Rel &amp; Rela)</b> <br>\nRelocation is the process of connecting symbolic references\nwith symbolic definitions. Relocatable files must have\ninformation that describes how to modify their section\ncontents, thus allowing executable and shared object files\nto hold the right information for a process&rsquo;s program\nimage. Relocation entries are these data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Relocation\nstructures that do not need an addend:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nElf32_Addr r_offset; <br>\nuint32_t r_info; <br>\n} Elf32_Rel;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nElf64_Addr r_offset; <br>\nuint64_t r_info; <br>\n} Elf64_Rel;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Relocation\nstructures that need an addend:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nElf32_Addr r_offset; <br>\nuint32_t r_info; <br>\nint32_t r_addend; <br>\n} Elf32_Rela;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nElf64_Addr r_offset; <br>\nuint64_t r_info; <br>\nint64_t r_addend; <br>\n} Elf64_Rela;</p>\n\n<p style=\"margin-left:11%;\"><i>r_offset</i></p>\n\n<p style=\"margin-left:22%;\">This member gives the location\nat which to apply the relocation action. For a relocatable\nfile, the value is the byte offset from the beginning of the\nsection to the storage unit affected by the relocation. For\nan executable file or shared object, the value is the\nvirtual address of the storage unit affected by the\nrelocation.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>r_info</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This member gives both the symbol table index with\nrespect to which the relocation must be made and the type of\nrelocation to apply. Relocation types are\nprocessor-specific. When the text refers to a relocation\nentry&rsquo;s relocation type or symbol table index, it\nmeans the result of applying <b>ELF[32|64]_R_TYPE</b> or\n<b>ELF[32|64]_R_SYM</b>, respectively, to the entry&rsquo;s\n<i>r_info</i> member.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>r_addend</i></p>\n\n<p style=\"margin-left:22%;\">This member specifies a\nconstant addend used to compute the value to be stored into\nthe relocatable field.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Dynamic tags\n(Dyn)</b> <br>\nThe <i>.dynamic</i> section contains a series of structures\nthat hold relevant dynamic linking information. The\n<i>d_tag</i> member controls the interpretation of\n<i>d_un</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nElf32_Sword d_tag; <br>\nunion { <br>\nElf32_Word d_val; <br>\nElf32_Addr d_ptr; <br>\n} d_un; <br>\n} Elf32_Dyn; <br>\nextern Elf32_Dyn _DYNAMIC[];</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nElf64_Sxword d_tag; <br>\nunion { <br>\nElf64_Xword d_val; <br>\nElf64_Addr d_ptr; <br>\n} d_un; <br>\n} Elf64_Dyn; <br>\nextern Elf64_Dyn _DYNAMIC[];</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>d_tag</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"75%\">\n\n\n<p>This member may have any of the following values:</p></td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>DT_NULL</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\"></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p style=\"margin-top: 1em\">Marks end of dynamic section</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_NEEDED</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>String table offset to name of a needed library</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_PLTRELSZ</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Size in bytes of PLT relocation entries</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_PLTGOT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of PLT and/or GOT</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_HASH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of symbol hash table</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_STRTAB</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of string table</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_SYMTAB</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of symbol table</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_RELA</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of Rela relocation table</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_RELASZ</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Size in bytes of the Rela relocation table</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_RELAENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Size in bytes of a Rela relocation table entry</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_STRSZ</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Size in bytes of string table</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_SYMENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Size in bytes of a symbol table entry</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_INIT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of the initialization function</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_FINI</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of the termination function</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_SONAME</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>String table offset to name of shared object</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_RPATH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>String table offset to library search path\n(deprecated)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_SYMBOLIC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Alert linker to search this shared object before the\nexecutable for symbols</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_REL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of Rel relocation table</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_RELSZ</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Size in bytes of Rel relocation table</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_RELENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Size in bytes of a Rel table entry</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_PLTREL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Type of relocation entry to which the PLT refers (Rela\nor Rel)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_DEBUG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Undefined use for debugging</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_TEXTREL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Absence of this entry indicates that no relocation\nentries should apply to a nonwritable segment</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_JMPREL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Address of relocation entries associated solely with the\nPLT</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_BIND_NOW</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Instruct dynamic linker to process all relocations\nbefore transferring control to the executable</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"16%\">\n\n\n<p><b>DT_RUNPATH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>String table offset to library search path</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>DT_LOPROC</b>,\n<b>DT_HIPROC</b></p>\n\n<p style=\"margin-left:40%;\">Values in the inclusive range\n[<b>DT_LOPROC</b>, <b>DT_HIPROC</b>] are reserved for\nprocessor-specific semantics</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>d_val</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This member represents integer values with various\ninterpretations.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>d_ptr</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This member represents program virtual addresses. When\ninterpreting these addresses, the actual address should be\ncomputed based on the original file value and memory base\naddress. Files do not contain relocation entries to fixup\nthese addresses.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>_DYNAMIC</i></p>\n\n<p style=\"margin-left:22%;\">Array containing all the\ndynamic structures in the <i>.dynamic</i> section. This is\nautomatically populated by the linker.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Notes\n(Nhdr)</b> <br>\nELF notes allow for appending arbitrary information for the\nsystem to use. They are largely used by core files\n(<i>e_type</i> of <b>ET_CORE</b>), but many projects define\ntheir own set of extensions. For example, the GNU tool chain\nuses ELF notes to pass information from the linker to the C\nlibrary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note sections\ncontain a series of notes (see the <i>struct</i> definitions\nbelow). Each note is followed by the name field (whose\nlength is defined in <i>n_namesz</i>) and then by the\ndescriptor field (whose length is defined in\n<i>n_descsz</i>) and whose starting address has a 4 byte\nalignment. Neither field is defined in the note struct due\nto their arbitrary lengths.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An example for\nparsing out two consecutive notes should clarify their\nlayout in memory:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void *memory,\n*name, *desc; <br>\nElf64_Nhdr *note, *next_note;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* The buffer\nis pointing to the start of the section/segment */ <br>\nnote = memory;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* If the name\nis defined, it follows the note */ <br>\nname = note-&gt;n_namesz == 0 ? NULL : memory +\nsizeof(*note);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* If the\ndescriptor is defined, it follows the name <br>\n(with alignment) */</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">desc =\nnote-&gt;n_descsz == 0 ? NULL : <br>\nmemory + sizeof(*note) + ALIGN_UP(note-&gt;n_namesz, 4);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* The next\nnote follows both (with alignment) */ <br>\nnext_note = memory + sizeof(*note) + <br>\nALIGN_UP(note-&gt;n_namesz, 4) + <br>\nALIGN_UP(note-&gt;n_descsz, 4);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Keep in mind\nthat the interpretation of <i>n_type</i> depends on the\nnamespace defined by the <i>n_namesz</i> field. If the\n<i>n_namesz</i> field is not set (e.g., is 0), then there\nare two sets of notes: one for core files and one for all\nother ELF types. If the namespace is unknown, then tools\nwill usually fallback to these sets of notes as well.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nElf32_Word n_namesz; <br>\nElf32_Word n_descsz; <br>\nElf32_Word n_type; <br>\n} Elf32_Nhdr;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nElf64_Word n_namesz; <br>\nElf64_Word n_descsz; <br>\nElf64_Word n_type; <br>\n} Elf64_Nhdr;</p>\n\n<p style=\"margin-left:11%;\"><i>n_namesz</i></p>\n\n<p style=\"margin-left:22%;\">The length of the name field in\nbytes. The contents will immediately follow this note in\nmemory. The name is null terminated. For example, if the\nname is &quot;GNU&quot;, then <i>n_namesz</i> will be set to\n4.</p>\n\n<p style=\"margin-left:11%;\"><i>n_descsz</i></p>\n\n<p style=\"margin-left:22%;\">The length of the descriptor\nfield in bytes. The contents will immediately follow the\nname field in memory.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>n_type</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Depending on the value of the name field, this member\nmay have any of the following values:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>Core files (e_type =\nET_CORE)</b></p>\n\n<p style=\"margin-left:29%;\">Notes used by all core files.\nThese are highly operating system or architecture specific\nand often require close coordination with kernels, C\nlibraries, and debuggers. These are used when the namespace\nis the default (i.e., <i>n_namesz</i> will be set to 0), or\na fallback when the namespace is unknown.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PRSTATUS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>prstatus struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_FPREGSET</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>fpregset struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PRPSINFO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>prpsinfo struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PRXREG</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>prxregset struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_TASKSTRUCT</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>task structure</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PLATFORM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>String from sysinfo(SI_PLATFORM)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_AUXV</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>auxv array</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_GWINDOWS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>gwindows struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_ASRS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>asrset struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PSTATUS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>pstatus struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PSINFO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>psinfo struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PRCRED</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>prcred struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_UTSNAME</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>utsname struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_LWPSTATUS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>lwpstatus struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_LWPSINFO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>lwpinfo struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PRFPXREG</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>fprxregset struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_SIGINFO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>siginfo_t (size might increase over time)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_FILE</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>Contains information about mapped files</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PRXFPREG</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>user_fxsr_struct</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PPC_VMX</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>PowerPC Altivec/VMX registers</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PPC_SPE</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>PowerPC SPE/EVR registers</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_PPC_VSX</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>PowerPC VSX registers</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_386_TLS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>i386 TLS slots (struct user_desc)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_386_IOPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>x86 io permission bitmap (1=deny)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_X86_XSTATE</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>x86 extended state using xsave</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_HIGH_GPRS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 upper register halves</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_TIMER</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 timer register</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_TODCMP</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 time-of-day (TOD) clock comparator register</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_TODPREG</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 time-of-day (TOD) programmable register</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_CTRS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 control registers</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_PREFIX</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 prefix register</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_LAST_BREAK</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 breaking event address</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_SYSTEM_CALL</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 system call restart data</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_S390_TDB</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>s390 transaction diagnostic block</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_ARM_VFP</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>ARM VFP/NEON registers</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_ARM_TLS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>ARM TLS register</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_ARM_HW_BREAK</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>ARM hardware breakpoint registers</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_ARM_HW_WATCH</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>ARM hardware watchpoint registers</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"29%\">\n\n\n<p><b>NT_ARM_SYSTEM_CALL</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"38%\">\n\n\n<p>ARM system call number</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>n_name = GNU</b></p>\n\n<p style=\"margin-left:29%;\">Extensions used by the GNU tool\nchain. <b><br>\nNT_GNU_ABI_TAG</b></p>\n\n<p style=\"margin-left:40%;\">Operating system (OS) ABI\ninformation. The desc field will be 4 words:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"57%\">\n\n\n<p>word 0: OS descriptor (<b>ELF_NOTE_OS_LINUX</b>,\n<b>ELF_NOTE_OS_GNU</b>, and so on)&rsquo;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"57%\">\n\n\n<p>word 1: major version of the ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"57%\">\n\n\n<p>word 2: minor version of the ABI</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"57%\">\n\n\n<p>word 3: subminor version of the ABI</p></td></tr>\n</table>\n\n<p style=\"margin-left:29%;\"><b>NT_GNU_HWCAP</b></p>\n\n<p style=\"margin-left:40%;\">Synthetic hwcap information.\nThe desc field begins with two words:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>word 0: number of entries</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"54%\">\n\n\n<p>word 1: bit mask of enabled entries</p></td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:40%; margin-top: 1em\">Then follow\nvariable-length entries, one byte followed by a\nnull-terminated hwcap name string. The byte gives the bit\nnumber to test if enabled, (1U &lt;&lt; bit) &amp; bit\nmask.</p>\n\n<p style=\"margin-left:29%;\"><b>NT_GNU_BUILD_ID</b></p>\n\n<p style=\"margin-left:40%;\">Unique build ID as generated by\nthe GNU <a href=\"https://man.page/1/ld\">ld(1)</a> <b>--build-id</b> option. The desc\nconsists of any nonzero number of bytes.</p>\n\n<p style=\"margin-left:29%;\"><b>NT_GNU_GOLD_VERSION</b></p>\n\n<p style=\"margin-left:40%;\">The desc contains the GNU Gold\nlinker version used.</p>\n\n<p style=\"margin-left:22%;\"><b>Default/unknown namespace\n(e_type != ET_CORE)</b></p>\n\n<p style=\"margin-left:29%;\">These are used when the\nnamespace is the default (i.e., <i>n_namesz</i> will be set\nto 0), or a fallback when the namespace is unknown.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"16%\">\n\n\n<p><b>NT_VERSION</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"46%\">\n\n\n<p>A version string of some sort.</p></td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"16%\">\n\n\n<p><b>NT_ARCH</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"46%\">\n\n\n<p>Architecture information.</p></td>\n<td width=\"6%\">\n</td></tr>\n</table>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ELF first\nappeared in System V. The ELF format is an adopted\nstandard.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The extensions\nfor <i>e_phnum</i>, <i>e_shnum</i>, and <i>e_shstrndx</i>\nrespectively are Linux extensions. Sun, BSD and AMD64 also\nsupport them; for further information, look under SEE\nALSO.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/as\">as(1)</a>,\n<a href=\"https://man.page/1/elfedit\">elfedit(1)</a>, <a href=\"https://man.page/1/gdb\">gdb(1)</a>, <a href=\"https://man.page/1/ld\">ld(1)</a>,\n<a href=\"https://man.page/1/nm\">nm(1)</a>, <a href=\"https://man.page/1/objcopy\">objcopy(1)</a>, <a href=\"https://man.page/1/objdump\">objdump(1)</a>,\n<a href=\"https://man.page/1/patchelf\">patchelf(1)</a>, <a href=\"https://man.page/1/readelf\">readelf(1)</a>, <a href=\"https://man.page/1/size\">size(1)</a>,\n<a href=\"https://man.page/1/strings\">strings(1)</a>, <a href=\"https://man.page/1/strip\">strip(1)</a>, <a href=\"https://man.page/2/execve\">execve(2)</a>,\n<a href=\"https://man.page/3/dl_iterate_phdr\">dl_iterate_phdr(3)</a>, <a href=\"https://man.page/5/core\">core(5)</a>,\n<b>ld.so</b>(8)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Hewlett-Packard,\n<i>Elf-64 Object File Format</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Santa Cruz\nOperation, <i>System V Application Binary Interface</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">UNIX System\nLaboratories, &quot;Object Files&quot;, <i>Executable and\nLinking Format (ELF)</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sun\nMicrosystems, <i>Linker and Libraries Guide</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">AMD64 ABI\nDraft, <i>System V Application Binary Interface AMD64\nArchitecture Processor Supplement</i>.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":5}