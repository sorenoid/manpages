{"name":"deb-src-symbols","description":"deb-src-symbols - Debian&rsquo;s extended shared library template file","body":"\n\n<h1 align=\"center\">deb-src-symbols</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">deb-src-symbols\n- Debian&rsquo;s extended shared library template file</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>debian/</b><i>package</i><b>.symbols.</b><i>arch</i>,\n<b>debian/symbols.</b><i>arch</i>,\n<b>debian/</b><i>package</i><b>.symbols</b>,\n<b>debian/symbols</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The symbol file\ntemplates are shipped in Debian source packages, and its\nformat is a superset of the symbols files shipped in binary\npackages, see <a href=\"https://man.page/5/deb-symbols\">deb-symbols(5)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Comments</b>\n<br>\nComments are supported in template symbol files. Any line\nwith &rsquo;#&rsquo; as the first character is a comment\nexcept if it starts with &rsquo;#include&rsquo; (see section\n<b>Using includes</b>). Lines starting with\n&rsquo;#MISSING:&rsquo; are special comments documenting\nsymbols that have disappeared.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using\n#PACKAGE# substitution</b> <br>\nIn some rare cases, the name of the library varies between\narchitectures. To avoid hardcoding the name of the package\nin the symbols file, you can use the marker\n<i>#PACKAGE#</i>. It will be replaced by the real package\nname during installation of the symbols files. Contrary to\nthe <i>#MINVER#</i> marker, <i>#PACKAGE#</i> will never\nappear in a symbols file inside a binary package.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using symbol\ntags</b> <br>\nSymbol tagging is useful for marking symbols that are\nspecial in some way. Any symbol can have an arbitrary number\nof tags associated with it. While all tags are parsed and\nstored, only some of them are understood by\n<b>dpkg-gensymbols</b> and trigger special handling of the\nsymbols. See subsection <b>Standard symbol tags</b> for\nreference of these tags.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Tag\nspecification comes right before the symbol name (no\nwhitespace is allowed in between). It always starts with an\nopening bracket <b>(</b>, ends with a closing bracket\n<b>)</b> and must contain at least one tag. Multiple tags\nare separated by the <b>|</b> character. Each tag can\noptionally have a value which is separated form the tag name\nby the <b>=</b> character. Tag names and values can be\narbitrary strings except they cannot contain any of the\nspecial <b>) | =</b> characters. Symbol names following a\ntag specification can optionally be quoted with either\n<b>&rsquo;</b> or <b>&quot;</b> characters to allow\nwhitespaces in them. However, if there are no tags specified\nfor the symbol, quotes are treated as part of the symbol\nname which continues up until the first space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(tag1=i am\nmarked|tag name with space)&quot;tagged quoted\nsymbol&quot;@Base 1.0 <br>\n(optional)tagged_unquoted_symbol@Base 1.0 1 <br>\nuntagged_symbol@Base 1.0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first\nsymbol in the example is named <i>tagged quoted symbol</i>\nand has two tags: <i>tag1</i> with value <i>i am marked</i>\nand <i>tag name with space</i> that has no value. The second\nsymbol named <i>tagged_unquoted_symbol</i> is only tagged\nwith the tag named <i>optional</i>. The last symbol is an\nexample of the normal untagged symbol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since symbol\ntags are an extension of the <a href=\"https://man.page/5/deb-symbols\">deb-symbols(5)</a> format,\nthey can only be part of the symbols files used in source\npackages (those files should then be seen as templates used\nto build the symbols files that are embedded in binary\npackages). When <b>dpkg-gensymbols</b> is called without the\n<b>-t</b> option, it will output symbols files compatible to\nthe <a href=\"https://man.page/5/deb-symbols\">deb-symbols(5)</a> format: it fully processes symbols\naccording to the requirements of their standard tags and\nstrips all tags from the output. On the contrary, in\ntemplate mode (<b>-t</b>) all symbols and their tags (both\nstandard and unknown ones) are kept in the output and are\nwritten in their original form as they were loaded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Standard\nsymbol tags <br>\noptional</b></p>\n\n<p style=\"margin-left:17%;\">A symbol marked as optional can\ndisappear from the library at any time and that will never\ncause <b>dpkg-gensymbols</b> to fail. However, disappeared\noptional symbols will continuously appear as\n<small>MISSING</small> in the diff in each new package\nrevision. This behaviour serves as a reminder for the\nmaintainer that such a symbol needs to be removed from the\nsymbol file or readded to the library. When the optional\nsymbol, which was previously declared as\n<small>MISSING,</small> suddenly reappears in the next\nrevision, it will be upgraded back to the\n&ldquo;existing&rdquo; status with its minimum version\nunchanged.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This tag is\nuseful for symbols which are private where their\ndisappearance do not cause <small>ABI</small> breakage. For\nexample, most of C <small>++</small> template instantiations\nfall into this category. Like any other tag, this one may\nalso have an arbitrary value: it could be used to indicate\nwhy the symbol is considered optional.</p>\n\n\n<p style=\"margin-left:11%;\"><b>arch=</b><i>architecture-list</i>\n<b><br>\narch-bits=</b><i>architecture-bits</i> <b><br>\narch-endian=</b><i>architecture-endianness</i></p>\n\n<p style=\"margin-left:17%;\">These tags allow one to\nrestrict the set of architectures where the symbol is\nsupposed to exist. The <b>arch-bits</b> and\n<b>arch-endian</b> tags are supported since dpkg 1.18.0.\nWhen the symbols list is updated with the symbols discovered\nin the library, all arch-specific symbols which do not\nconcern the current host architecture are treated as if they\ndid not exist. If an arch-specific symbol matching the\ncurrent host architecture does not exist in the library,\nnormal procedures for missing symbols apply and it may cause\n<b>dpkg-gensymbols</b> to fail. On the other hand, if the\narch-specific symbol is found when it was not supposed to\nexist (because the current host architecture is not listed\nin the tag or does not match the endianness and bits), it is\nmade arch neutral (i.e. the arch, arch-bits and arch-endian\ntags are dropped and the symbol will appear in the diff due\nto this change), but it is not considered as new.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When operating\nin the default non-template mode, among arch-specific\nsymbols only those that match the current host architecture\nare written to the symbols file. On the contrary, all\narch-specific symbols (including those from foreign arches)\nare always written to the symbol file when operating in\ntemplate mode.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The format of\n<i>architecture-list</i> is the same as the one used in the\n<b>Build-Depends</b> field of <i>debian/control</i> (except\nthe enclosing square brackets []). For example, the first\nsymbol from the list below will be considered only on alpha,\nany-amd64 and ia64 architectures, the second only on linux\narchitectures, while the third one anywhere except on\narmel.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">(arch=alpha\nany-amd64 ia64)64bit_specific_symbol@Base 1.0 <br>\n(arch=linux-any)linux_specific_symbol@Base 1.0 <br>\n(arch=!armel)symbol_armel_does_not_have@Base 1.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>architecture-bits</i> is either <b>32</b> or\n<b>64</b>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">(arch-bits=32)32bit_specific_symbol@Base\n1.0 <br>\n(arch-bits=64)64bit_specific_symbol@Base 1.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>architecture-endianness</i> is either <b>little</b> or\n<b>big</b>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">(arch-endian=little)little_endian_specific_symbol@Base\n1.0 <br>\n(arch-endian=big)big_endian_specific_symbol@Base 1.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Multiple\nrestrictions can be chained.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">(arch-bits=32|arch-endian=little)32bit_le_symbol@Base\n1.0</p>\n\n<p style=\"margin-left:11%;\"><b>allow-internal</b></p>\n\n<p style=\"margin-left:17%;\">dpkg-gensymbols has a list of\ninternal symbols that should not appear in symbols files as\nthey are usually only side-effects of implementation details\nof the toolchain (since dpkg 1.20.1). If for some reason,\nyou really want one of those symbols to be included in the\nsymbols file, you should tag the symbol with\n<b>allow-internal</b>. It can be necessary for some low\nlevel toolchain libraries like &ldquo;libgcc&rdquo;.</p>\n\n<p style=\"margin-left:11%;\"><b>ignore-blacklist</b></p>\n\n<p style=\"margin-left:17%;\">A deprecated alias for\n<b>allow-internal</b> (since dpkg 1.20.1, supported since\ndpkg 1.15.3).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>c++</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Denotes <i>c++</i> symbol pattern. See <b>Using symbol\npatterns</b> subsection below.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>symver</b></p>\n\n<p style=\"margin-left:17%;\">Denotes <i>symver</i> (symbol\nversion) symbol pattern. See <b>Using symbol patterns</b>\nsubsection below.</p>\n\n<p style=\"margin-left:11%;\"><b>regex</b></p>\n\n<p style=\"margin-left:17%;\">Denotes <i>regex</i> symbol\npattern. See <b>Using symbol patterns</b> subsection\nbelow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using symbol\npatterns</b> <br>\nUnlike a standard symbol specification, a pattern may cover\nmultiple real symbols from the library.\n<b>dpkg-gensymbols</b> will attempt to match each pattern\nagainst each real symbol that does <i>not</i> have a\nspecific symbol counterpart defined in the symbol file.\nWhenever the first matching pattern is found, all its tags\nand properties will be used as a basis specification of the\nsymbol. If none of the patterns matches, the symbol will be\nconsidered as new.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A pattern is\nconsidered lost if it does not match any symbol in the\nlibrary. By default this will trigger a\n<b>dpkg-gensymbols</b> failure under <b>-c1</b> or higher\nlevel. However, if the failure is undesired, the pattern may\nbe marked with the <i>optional</i> tag. Then if the pattern\ndoes not match anything, it will only appear in the diff as\n<small>MISSING.</small> Moreover, like any symbol, the\npattern may be limited to the specific architectures with\nthe <i>arch</i> tag. Please refer to <b>Standard symbol\ntags</b> subsection above for more information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Patterns are an\nextension of the <a href=\"https://man.page/5/deb-symbols\">deb-symbols(5)</a> format hence they are\nonly valid in symbol file templates. Pattern specification\nsyntax is not any different from the one of a specific\nsymbol. However, symbol name part of the specification\nserves as an expression to be matched against\n<i>name@version</i> of the real symbol. In order to\ndistinguish among different pattern types, a pattern will\ntypically be tagged with a special tag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">At the moment,\n<b>dpkg-gensymbols</b> supports three basic pattern\ntypes:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>c++</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>This pattern is denoted by the <i>c++</i> tag. It\nmatches only C <small>++</small> symbols by their demangled\nsymbol name (as emitted by <b>c++filt</b>(1) utility). This\npattern is very handy for matching symbols which mangled\nnames might vary across different architectures while their\ndemangled names remain the same. One group of such symbols\nis <i>non-virtual thunks</i> which have architecture\nspecific offsets embedded in their mangled names. A common\ninstance of this case is a virtual destructor which under\ndiamond inheritance needs a non-virtual thunk symbol. For\nexample, even if _ZThn8_N3NSB6ClassDD1Ev@Base on 32bit\narchitectures will probably be _ZThn16_N3NSB6ClassDD1Ev@Base\non 64bit ones, it can be matched with a single <i>c++</i>\npattern:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">libdummy.so.1\nlibdummy1 #MINVER# <br>\n[...] <br>\n(c++)&quot;non-virtual thunk to\nNSB::ClassD::~ClassD()@Base&quot; 1.0 <br>\n[...]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The demangled\nname above can be obtained by executing the following\ncommand:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ echo\n'_ZThn8_N3NSB6ClassDD1Ev@Base' | c++filt</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Please note\nthat while mangled name is unique in the library by\ndefinition, this is not necessarily true for demangled\nnames. A couple of distinct real symbols may have the same\ndemangled name. For example, that&rsquo;s the case with\nnon-virtual thunk symbols in complex inheritance\nconfigurations or with most constructors and destructors\n(since g++ typically generates two real symbols for them).\nHowever, as these collisions happen on the\n<small>ABI</small> level, they should not degrade quality of\nthe symbol file.</p>\n\n<p style=\"margin-left:11%;\"><b>symver</b></p>\n\n<p style=\"margin-left:17%;\">This pattern is denoted by the\n<i>symver</i> tag. Well maintained libraries have versioned\nsymbols where each version corresponds to the upstream\nversion where the symbol got added. If that&rsquo;s the\ncase, you can use a <i>symver</i> pattern to match any\nsymbol associated to the specific version. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">libc.so.6 libc6\n#MINVER# <br>\n(symver)GLIBC_2.0 2.0 <br>\n[...] <br>\n(symver)GLIBC_2.7 2.7 <br>\naccess@GLIBC_2.0 2.2</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">All symbols\nassociated with versions <small>GLIBC_2.0</small> and\n<small>GLIBC_2.7</small> will lead to minimal version of 2.0\nand 2.7 respectively with the exception of the symbol\naccess@GLIBC_2.0. The latter will lead to a minimal\ndependency on libc6 version 2.2 despite being in the scope\nof the &quot;(symver)GLIBC_2.0&quot; pattern because\nspecific symbols take precedence over patterns.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Please note\nthat while old style wildcard patterns (denoted by\n&quot;*@version&quot; in the symbol name field) are still\nsupported, they have been deprecated by new style syntax\n&quot;(symver|optional)version&quot;. For example,\n&quot;*@GLIBC_2.0 2.0&quot; should be written as\n&quot;(symver|optional)GLIBC_2.0 2.0&quot; if the same\nbehaviour is needed.</p>\n\n<p style=\"margin-left:11%;\"><b>regex</b></p>\n\n<p style=\"margin-left:17%;\">Regular expression patterns are\ndenoted by the <i>regex</i> tag. They match by the perl\nregular expression specified in the symbol name field. A\nregular expression is matched as it is, therefore do not\nforget to start it with the <i>^</i> character or it may\nmatch any part of the real symbol <i>name@version</i>\nstring. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">libdummy.so.1\nlibdummy1 #MINVER# <br>\n(regex)&quot;^mystack_.*@Base$&quot; 1.0 <br>\n(regex|optional)&quot;private&quot; 1.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Symbols like\n&quot;mystack_new@Base&quot;, &quot;mystack_push@Base&quot;,\n&quot;mystack_pop@Base&quot; etc. will be matched by the\nfirst pattern while e.g. &quot;ng_mystack_new@Base&quot;\nwon&rsquo;t. The second pattern will match all symbols\nhaving the string &quot;private&quot; in their names and\nmatches will inherit <i>optional</i> tag from the\npattern.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Basic patterns\nlisted above can be combined where it makes sense. In that\ncase, they are processed in the order in which the tags are\nspecified. For example, both:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">(c++|regex)&quot;^NSA::ClassA::Private::privmethod\\d\\(int\\)@Base&quot;\n1.0 <br>\n(regex|c++)N3NSA6ClassA7Private11privmethod\\dEi@Base 1.0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">will match\nsymbols\n&quot;_ZN3NSA6ClassA7Private11privmethod1Ei@Base&quot; and\n&quot;_ZN3NSA6ClassA7Private11privmethod2Ei@Base&quot;. When\nmatching the first pattern, the raw symbol is first\ndemangled as C <small>++</small> symbol, then the demangled\nname is matched against the regular expression. On the other\nhand, when matching the second pattern, regular expression\nis matched against the raw symbol name, then the symbol is\ntested if it is C <small>++</small> one by attempting to\ndemangle it. A failure of any basic pattern will result in\nthe failure of the whole pattern. Therefore, for example,\n&quot;__N3NSA6ClassA7Private11privmethod\\dEi@Base&quot; will\nnot match either of the patterns because it is not a valid C\n<small>++</small> symbol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general, all\npatterns are divided into two groups: aliases (basic\n<i>c++</i> and <i>symver</i>) and generic patterns\n(<i>regex</i>, all combinations of multiple basic patterns).\nMatching of basic alias-based patterns is fast (O(1)) while\ngeneric patterns are O(N) (N - generic pattern count) for\neach symbol. Therefore, it is recommended not to overuse\ngeneric patterns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When multiple\npatterns match the same real symbol, aliases (first\n<i>c++</i>, then <i>symver</i>) are preferred over generic\npatterns. Generic patterns are matched in the order they are\nfound in the symbol file template until the first success.\nPlease note, however, that manual reordering of template\nfile entries is not recommended because\n<b>dpkg-gensymbols</b> generates diffs based on the\nalphanumerical order of their names.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using\nincludes</b> <br>\nWhen the set of exported symbols differ between\narchitectures, it may become inefficient to use a single\nsymbol file. In those cases, an include directive may prove\nto be useful in a couple of ways:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>You can factorize the common part in some external file\nand include that file in your\n<i>package</i>.symbols.<i>arch</i> file by using an include\ndirective like this:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#include\n&quot;I&lt;packages&gt;.symbols.common&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The include directive may also\nbe tagged like any symbol:</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">(tag|...|tagN)#include\n&quot;file-to-include&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As a result,\nall symbols included from <i>file-to-include</i> will be\nconsidered to be tagged with <i>tag</i> ... <i>tagN</i> by\ndefault. You can use this feature to create a common\n<i>package</i>.symbols file which includes architecture\nspecific symbol files:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">common_symbol1@Base\n1.0 <br>\n(arch=amd64 ia64 alpha)#include\n&quot;package.symbols.64bit&quot; <br>\n(arch=!amd64 !ia64 !alpha)#include\n&quot;package.symbols.32bit&quot; <br>\ncommon_symbol2@Base 1.0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The symbols\nfiles are read line by line, and include directives are\nprocessed as soon as they are encountered. This means that\nthe content of the included file can override any content\nthat appeared before the include directive and that any\ncontent after the directive can override anything contained\nin the included file. Any symbol (or even another #include\ndirective) in the included file can specify additional tags\nor override values of the inherited tags in its tag\nspecification. However, there is no way for the symbol to\nremove any of the inherited tags.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An included\nfile can repeat the header line containing the\n<small>SONAME</small> of the library. In that case, it\noverrides any header line previously read. However, in\ngeneral it&rsquo;s best to avoid duplicating header lines.\nOne way to do it is the following:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&quot;libsomething1.symbols.common&quot; <br>\narch_specific_symbol@Base 1.0</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/5/deb-symbols\">deb-symbols(5)</a>,\n<a href=\"https://man.page/1/dpkg-shlibdeps\">dpkg-shlibdeps(1)</a>, <a href=\"https://man.page/1/dpkg-gensymbols\">dpkg-gensymbols(1)</a>.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":5}