{"name":"org.freedesktop.resolve1","description":"org.freedesktop.resolve1 - The D-Bus interface of systemd-resolved","body":"\n\n<h1 align=\"center\">ORG.FREEDESKTOP.RESOLVE1</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">org.freedesktop.resolve1\n- The D-Bus interface of systemd-resolved</p>\n\n<h2>INTRODUCTION\n<a name=\"INTRODUCTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>systemd-resolved.service</b>(8)\nis a system service that provides hostname resolution and\ncaching using DNS, LLMNR, and mDNS. It also does DNSSEC\nvalidation. This page describes the resolve semantics and\nthe D-Bus interface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page\ncontains an API reference only. If you are looking for a\nlonger explanation how to use this API, please consult\n<b><font color=\"#0000FF\">Writing Network Configuration\nManagers</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">and</font>\n<b><font color=\"#0000FF\">Writing Resolver Clients</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">.</font></p>\n\n<h2>THE MANAGER OBJECT\n<a name=\"THE MANAGER OBJECT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nservice exposes the following interfaces on the Manager\nobject on the bus:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/resolve1 { <br>\ninterface org.freedesktop.resolve1.Manager { <br>\nmethods: <br>\nResolveHostname(in i ifindex, <br>\nin s name, <br>\nin i family, <br>\nin t flags, <br>\nout a(iiay) addresses, <br>\nout s canonical, <br>\nout t flags); <br>\nResolveAddress(in i ifindex, <br>\nin i family, <br>\nin ay address, <br>\nin t flags, <br>\nout a(is) names, <br>\nout t flags); <br>\nResolveRecord(in i ifindex, <br>\nin s name, <br>\nin q class, <br>\nin q type, <br>\nin t flags, <br>\nout a(iqqay) records, <br>\nout t flags); <br>\nResolveService(in i ifindex, <br>\nin s name, <br>\nin s type, <br>\nin s domain, <br>\nin i family, <br>\nin t flags, <br>\nout a(qqqsa(iiay)s) srv_data, <br>\nout aay txt_data, <br>\nout s canonical_name, <br>\nout s canonical_type, <br>\nout s canonical_domain, <br>\nout t flags); <br>\nGetLink(in i ifindex, <br>\nout o path); <br>\nSetLinkDNS(in i ifindex, <br>\nin a(iay) addresses); <br>\nSetLinkDNSEx(in i ifindex, <br>\nin a(iayqs) addresses); <br>\nSetLinkDomains(in i ifindex, <br>\nin a(sb) domains); <br>\nSetLinkDefaultRoute(in i ifindex, <br>\nin b enable); <br>\nSetLinkLLMNR(in i ifindex, <br>\nin s mode); <br>\nSetLinkMulticastDNS(in i ifindex, <br>\nin s mode); <br>\nSetLinkDNSOverTLS(in i ifindex, <br>\nin s mode); <br>\nSetLinkDNSSEC(in i ifindex, <br>\nin s mode); <br>\nSetLinkDNSSECNegativeTrustAnchors(in i ifindex, <br>\nin as names); <br>\nRevertLink(in i ifindex); <br>\nRegisterService(in s name, <br>\nin s name_template, <br>\nin s type, <br>\nin q service_port, <br>\nin q service_priority, <br>\nin q service_weight, <br>\nin aa{say} txt_datas, <br>\nout o service_path); <br>\nUnregisterService(in o service_path); <br>\nResetStatistics(); <br>\nFlushCaches(); <br>\nResetServerFeatures(); <br>\nproperties: <br>\nreadonly s LLMNRHostname = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s LLMNR = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s MulticastDNS = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DNSOverTLS = '...'; <br>\nreadonly a(iiay) DNS = [...]; <br>\nreadonly a(iiayqs) DNSEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(iiay) FallbackDNS = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(iiayqs) FallbackDNSEx = [...]; <br>\nreadonly (iiay) CurrentDNSServer = ...; <br>\nreadonly (iiayqs) CurrentDNSServerEx = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(isb) Domains = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly (tt) TransactionStatistics = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly (ttt) CacheStatistics = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DNSSEC = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly (tttt) DNSSECStatistics = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b DNSSECSupported = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DNSSECNegativeTrustAnchors = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DNSStubListener = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ResolvConfMode = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods\n<br>\nResolveHostname()</b> takes a hostname and resolves it to\none or more IP addresses. As parameters it takes the Linux\nnetwork interface index to execute the query on, or 0 if it\nmay be done on any suitable interface. The <i>name</i>\nparameter specifies the hostname to resolve. Note that if\nrequired, IDNA conversion is applied to this name unless it\nis resolved via LLMNR or MulticastDNS. The <i>family</i>\nparameter limits the results to a specific address family.\nIt may be <b>AF_INET</b>, <b>AF_INET6</b> or\n<b>AF_UNSPEC</b>. If <b>AF_UNSPEC</b> is specified\n(recommended), both kinds are retrieved, subject to local\nnetwork configuration (i.e. if no local, routable IPv6\naddress is found, no IPv6 address is retrieved; and\nsimilarly for IPv4). A 64-bit <i>flags</i> field may be used\nto alter the behaviour of the resolver operation (see\nbelow). The method returns an array of address records. Each\naddress record consists of the interface index the address\nbelongs to, an address family as well as a byte array with\nthe actual IP address data (which either has 4 or 16\nelements, depending on the address family). The returned\naddress family will be one of <b>AF_INET</b> or\n<b>AF_INET6</b>. For IPv6, the returned address interface\nindex should be used to initialize the .sin6_scope_id field\nof a struct&nbsp;sockaddr_in6 instance to permit support for\nresolution to link-local IP addresses. The address array is\nfollowed by the canonical name of the host, which may or may\nnot be identical to the resolved hostname. Finally, a 64-bit\n<i>flags</i> field is returned that is defined similarly to\nthe <i>flags</i> field that was passed in, but contains\ninformation about the resolved data (see below). If the\nhostname passed in is an IPv4 or IPv6 address formatted as\nstring, it is parsed, and the result is returned. In this\ncase, no network communication is done.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ResolveAddress()</b>\nexecutes the reverse operation: it takes an IP address and\nacquires one or more hostnames for it. As parameters it\ntakes the interface index to execute the query on, or\n<b>0</b> if all suitable interfaces are OK. The\n<i>family</i> parameter indicates the address family of the\nIP address to resolve. It may be either <b>AF_INET</b> or\n<b>AF_INET6</b>. The <i>address</i> parameter takes the raw\nIP address data (as either a 4 or 16 byte array). The\n<i>flags</i> input parameter may be used to alter the\nresolver operation (see below). The method returns an array\nof name records, each consisting of an interface index and a\nhostname. The <i>flags</i> output field contains additional\ninformation about the resolver operation (see\nbelow).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ResolveRecord()</b>\ntakes a DNS resource record (RR) type, class and name, and\nretrieves the full resource record set (RRset), including\nthe RDATA, for it. As parameter it takes the Linux network\ninterface index to execute the query on, or <b>0</b> if it\nmay be done on any suitable interface. The <i>name</i>\nparameter specifies the RR domain name to look up (no IDNA\nconversion is applied), followed by the 16-bit class and\ntype fields (which may be ANY). Finally, a <i>flags</i>\nfield may be passed in to alter behaviour of the look-up\n(see below). On completion, an array of RR items is\nreturned. Each array entry consists of the network interface\nindex the RR was discovered on, the type and class field of\nthe RR found, and a byte array of the raw RR discovered. The\nraw RR data starts with the RR's domain name, in the\noriginal casing, followed by the RR type, class, TTL and\nRDATA, in the binary format documented in</font>\n<b><font color=\"#0000FF\">RFC&nbsp;1035</font></b>\n<small><font color=\"#000000\">[3]</font></small>\n<font color=\"#000000\">. For RRs that support name\ncompression in the payload (such as MX or PTR), the\ncompression is expanded in the returned data.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat currently, the class field has to be specified as IN or\nANY. Specifying a different class will return an error\nindicating that look-ups of this kind are unsupported.\nSimilarly, some special types are not supported either\n(AXFR, OPT, ...). While systemd-resolved parses and\nvalidates resource records of many types, it is crucial that\nclients using this API understand that the RR data\noriginates from the network and should be thoroughly\nvalidated before use.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ResolveService()</b>\nmay be used to resolve a DNS <b>SRV</b> service record, as\nwell as the hostnames referenced in it, and possibly an\naccompanying DNS-SD <b>TXT</b> record containing additional\nservice metadata. The primary benefit of using this method\nover <b>ResolveRecord()</b> specifying the <b>SRV</b> type\nis that it will resolve the <b>SRV</b> and <b>TXT</b> RRs as\nwell as the hostnames referenced in the SRV in a single\noperation. As parameters it takes a Linux network interface\nindex, a service name, a service type and a service domain.\nThis method may be invoked in three different\nmodes:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">1.\nTo resolve a DNS-SD service, specify the service name (e.g.\n&quot;Lennart's Files&quot;), the service type (e.g.\n&quot;_webdav._tcp&quot;) and the domain to search in (e.g.\n&quot;local&quot;) as the three service parameters. The\nservice name must be in UTF-8 format, and no IDNA conversion\nis applied to it in this mode (as mandated by the DNS-SD\nspecifications). However, if necessary, IDNA conversion is\napplied to the domain parameter.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">2.\nTo resolve a plain <b>SRV</b> record, set the service name\nparameter to the empty string and set the service type and\ndomain properly. (IDNA conversion is applied to the domain,\nif necessary.)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">3.\nAlternatively, leave both the service name and type empty\nand specify the full domain name of the <b>SRV</b> record\n(i.e. prefixed with the service type) in the domain\nparameter. (No IDNA conversion is applied in this\nmode.)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>family</i> parameter of the <b>ResolveService()</b>\nmethod encodes the desired family of the addresses to\nresolve (use <b>AF_INET</b>, <b>AF_INET6</b>, or\n<b>AF_UNSPEC</b>). If this is enabled (Use the\n<b>NO_ADDRESS</b> flag to turn address resolution off, see\nbelow). The <i>flags</i> parameter takes a couple of flags\nthat may be used to alter the resolver operation.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">On\ncompletion, <b>ResolveService()</b> returns an array of\n<b>SRV</b> record structures. Each items consisting of the\npriority, weight and port fields as well as the hostname to\ncontact, as encoded in the <b>SRV</b> record. Immediately\nfollowing is an array of the addresses of this hostname,\nwith each item consisting of the interface index, the\naddress family and the address data in a byte array. This\naddress array is followed by the canonicalized hostname.\nAfter this array of <b>SRV</b> record structures an array of\nbyte arrays follows that encodes the TXT RR strings, in case\nDNS-SD look-ups are enabled. The next parameters are the\ncanonical service name, type and domain. This may or may not\nbe identical to the parameters passed in. Finally, a\n<i>flags</i> field is returned that contains information\nabout the resolver operation performed.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>ResetStatistics()</b> method resets the various\nstatistics counters that systemd-resolved maintains to zero.\n(For details, see the statistics properties\nbelow.)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>GetLink()</b> method takes a network interface index and\nreturns the object path to the org.freedesktop.resolve1.Link\nobject corresponding to it.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>SetLinkDNS()</b> method sets the DNS servers to use on a\nspecific interface. This method (and the following ones) may\nbe used by network management software to configure\nper-interface DNS settings. It takes a network interface\nindex as well as an array of DNS server IP address records.\nEach array item consists of an address family (either\n<b>AF_INET</b> or <b>AF_INET6</b>), followed by a 4-byte or\n16-byte array with the raw address data. This method is a\none-step shortcut for retrieving the Link object for a\nnetwork interface using <b>GetLink()</b> (see above) and\nthen invoking the <b>SetDNS()</b> method (see below) on\nit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetLinkDNSEx()</b>\nis similar to <b>SetLinkDNS()</b>, but allows an IP port\n(instead of the default 53) and DNS name to be specified for\neach DNS server. The server name is used for Server Name\nIndication (SNI), which is useful when DNS-over-TLS is used.\nC.f. <i>DNS=</i> in <b>resolved.conf</b>(5).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetLinkDefaultRoute()</b>\nspecifies whether the link shall be used as the default\nroute for name queries. See the description of name routing\nin <b>systemd-resolved.service</b>(8) for\ndetails.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>SetLinkDomains()</b> method sets the search and routing\ndomains to use on a specific network interface for DNS\nlook-ups. It takes a network interface index and an array of\ndomains, each with a boolean parameter indicating whether\nthe specified domain shall be used as a search domain\n(false), or just as a routing domain (true). Search domains\nare used for qualifying single-label names into FQDN when\nlooking up hostnames, as well as for making routing\ndecisions on which interface to send queries ending in the\ndomain to. Routing domains are only used for routing\ndecisions and not used for single-label name qualification.\nPass the search domains in the order they should be\nused.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>SetLinkLLMNR()</b> method enables or disables LLMNR\nsupport on a specific network interface. It takes a network\ninterface index as well as a string that may either be empty\nor one of &quot;yes&quot;, &quot;no&quot; or\n&quot;resolve&quot;. If empty, the systemd-wide default\nLLMNR setting is used. If &quot;yes&quot;, LLMNR is used for\nresolution of single-label names and the local hostname is\nregistered on all local LANs for LLMNR resolution by peers.\nIf &quot;no&quot;, LLMNR is turned off fully on this\ninterface. If &quot;resolve&quot;, LLMNR is only enabled for\nresolving names, but the local hostname is not registered\nfor other peers to use.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\nthe <b>SetLinkMulticastDNS()</b> method enables or disables\nMulticastDNS support on a specific interface. It takes the\nsame parameters as <b>SetLinkLLMNR()</b> described\nabove.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>SetLinkDNSSEC()</b> method enables or disables DNSSEC\nvalidation on a specific network interface. It takes a\nnetwork interface index as well as a string that may either\nbe empty or one of &quot;yes&quot;, &quot;no&quot;, or\n&quot;allow-downgrade&quot;. When empty, the system-wide\ndefault DNSSEC setting is used. If &quot;yes&quot;, full\nDNSSEC validation is done for all look-ups. If the selected\nDNS server does not support DNSSEC, look-ups will fail if\nthis mode is used. If &quot;no&quot;, DNSSEC validation is\nfully disabled. If &quot;allow-downgrade&quot;, DNSSEC\nvalidation is enabled, but is turned off automatically if\nthe selected server does not support it (thus opening up\nbehaviour to downgrade attacks). Note that DNSSEC only\napplies to traditional DNS, not to LLMNR or\nMulticastDNS.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>SetLinkDNSSECNegativeTrustAnchors()</b> method may be\nused to configure DNSSEC Negative Trust Anchors (NTAs) for a\nspecific network interface. It takes a network interface\nindex and a list of domains as arguments.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>SetLinkDNSOverTLS()</b> method enables or disables\nDNS-over-TLS. C.f. <i>DNSOverTLS=</i> in\n<b>systemd-resolved.service</b>(8) for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Network\nmanagement software integrating with systemd-resolved should\ncall <b>SetLinkDNS()</b> or <b>SetLinkDNSEx()</b>,\n<b>SetLinkDefaultRoute()</b>, <b>SetLinkDomains()</b> and\nothers after the interface appeared in the kernel (and thus\nafter a network interface index has been assigned), but\nbefore the network interfaces is activated (<b>IFF_UP</b>\nset) so that all settings take effect during the full time\nthe network interface is up. It is safe to alter settings\nwhile the interface is up, however. Use <b>RevertLink()</b>\n(described below) to reset all per-interface\nsettings.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>RevertLink()</b> method may be used to revert all\nper-link settings described above to the\ndefaults.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b><big>The\nFlags Parameter</big></b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The four\nmethods above accept and return a 64-bit flags value. In\nmost cases passing 0 is sufficient and recommended. However,\nthe following flags are defined to alter the\nlook-up:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">#define\nSD_RESOLVED_DNS (UINT64_C(1) &lt;&lt; 0) <br>\n#define SD_RESOLVED_LLMNR_IPV4 (UINT64_C(1) &lt;&lt; 1) <br>\n#define SD_RESOLVED_LLMNR_IPV6 (UINT64_C(1) &lt;&lt; 2) <br>\n#define SD_RESOLVED_MDNS_IPV4 (UINT64_C(1) &lt;&lt; 3) <br>\n#define SD_RESOLVED_MDNS_IPV6 (UINT64_C(1) &lt;&lt; 4) <br>\n#define SD_RESOLVED_NO_CNAME (UINT64_C(1) &lt;&lt; 5) <br>\n#define SD_RESOLVED_NO_TXT (UINT64_C(1) &lt;&lt; 6) <br>\n#define SD_RESOLVED_NO_ADDRESS (UINT64_C(1) &lt;&lt; 7) <br>\n#define SD_RESOLVED_NO_SEARCH (UINT64_C(1) &lt;&lt; 8) <br>\n#define SD_RESOLVED_AUTHENTICATED (UINT64_C(1) &lt;&lt; 9)\n<br>\n#define SD_RESOLVED_NO_VALIDATE (UINT64_C(1) &lt;&lt; 10)\n<br>\n#define SD_RESOLVED_NO_SYNTHESIZE (UINT64_C(1) &lt;&lt; 11)\n<br>\n#define SD_RESOLVED_NO_CACHE (UINT64_C(1) &lt;&lt; 12) <br>\n#define SD_RESOLVED_NO_ZONE (UINT64_C(1) &lt;&lt; 13) <br>\n#define SD_RESOLVED_NO_TRUST_ANCHOR (UINT64_C(1) &lt;&lt;\n14) <br>\n#define SD_RESOLVED_NO_NETWORK (UINT64_C(1) &lt;&lt; 15)\n<br>\n#define SD_RESOLVED_REQUIRE_PRIMARY (UINT64_C(1) &lt;&lt;\n16) <br>\n#define SD_RESOLVED_CLAMP_TTL (UINT64_C(1) &lt;&lt; 17) <br>\n#define SD_RESOLVED_CONFIDENTIAL (UINT64_C(1) &lt;&lt; 18)\n<br>\n#define SD_RESOLVED_SYNTHETIC (UINT64_C(1) &lt;&lt; 19) <br>\n#define SD_RESOLVED_FROM_CACHE (UINT64_C(1) &lt;&lt; 20)\n<br>\n#define SD_RESOLVED_FROM_ZONE (UINT64_C(1) &lt;&lt; 21) <br>\n#define SD_RESOLVED_FROM_TRUST_ANCHOR (UINT64_C(1) &lt;&lt;\n22) <br>\n#define SD_RESOLVED_FROM_NETWORK (UINT64_C(1) &lt;&lt;\n23)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">On\ninput, the first five flags control the protocols to use for\nthe look-up. They refer to classic unicast DNS, LLMNR via\nIPv4/UDP and IPv6/UDP respectively, as well as MulticastDNS\nvia IPv4/UDP and IPv6/UDP. If all of these five bits are off\non input (which is strongly recommended) the look-up will be\ndone via all suitable protocols for the specific look-up.\nNote that these flags operate as filter only, but cannot\nforce a look-up to be done via a protocol. Specifically,\nsystemd-resolved will only route look-ups within the .local\nTLD to MulticastDNS (plus some reverse look-up address\ndomains), and single-label names to LLMNR (plus some reverse\naddress lookup domains). It will route neither of these to\nUnicast DNS servers. Also, it will do LLMNR and Multicast\nDNS only on interfaces suitable for multicast.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">On\noutput, these five flags indicate which protocol was used to\nexecute the operation, and hence where the data was\nfound.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nprimary use cases for these five flags are follow-up\nlook-ups based on DNS data retrieved earlier. In this case\nit is often a good idea to limit the follow-up look-up to\nthe protocol that was used to discover the first DNS\nresult.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nNO_CNAME flag controls whether CNAME/DNAME resource records\nshall be followed during the look-up. This flag is only\navailable at input, none of the functions will return it on\noutput. If a CNAME/DNAME RR is discovered while resolving a\nhostname, an error is returned instead. By default, when the\nflag is off, CNAME/DNAME RRs are followed.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nNO_TXT and NO_ADDRESS flags only influence operation of the\n<b>ResolveService()</b> method. They are only defined for\ninput, not output. If NO_TXT is set, the DNS-SD TXT RR\nlook-up is not done in the same operation. If NO_ADDRESS is\nset, the discovered hostnames are not implicitly translated\nto their addresses.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nNO_SEARCH flag turns off the search domain logic. It is only\ndefined for input in <b>ResolveHostname()</b>. When\nspecified, single-label hostnames are not qualified using\ndefined search domains, if any are configured. Note that\n<b>ResolveRecord()</b> will never qualify single-label\ndomain names using search domains. Also note that\nmulti-label hostnames are never subject to search list\nexpansion.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nAUTHENTICATED bit is defined only in the output flags of the\nfour functions. If set, the returned data has been fully\nauthenticated. Specifically, this bit is set for all\nDNSSEC-protected data for which a full trust chain may be\nestablished to a trusted domain anchor. It is also set for\nlocally synthesized data, such as &quot;localhost&quot; or\ndata from /etc/hosts. Moreover, it is set for all LLMNR or\nmDNS RRs which originate from the local host. Applications\nthat require authenticated RR data for operation should\ncheck this flag before trusting the data. Note that\nsystemd-resolved will never return invalidated data, hence\nthis flag simply allows to discern the cases where data is\nknown to be trusted, or where there is proof that the data\nis &quot;rightfully&quot; unauthenticated (which includes\ncases where the underlying protocol or server does not\nsupport authenticating data).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">NO_VALIDATE\ncan be set to disable validation via DNSSEC even if it would\nnormally be used.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nnext four flags allow disabling certain sources during\nresolution. NO_SYNTHESIZE disables synthetic records, e.g.\nthe local host name, see section SYNTHETIC RECORDS in\n<b>systemd-resolved.service</b>(8) for more information.\nNO_CACHE disables the use of the cache of previously\nresolved records. NO_ZONE disables answers using locally\nregistered public LLMNR/mDNS resource records.\nNO_TRUST_ANCHOR disables answers using locally configured\ntrust anchors. NO_NETWORK requires all answers to be\nprovided without using the network, i.e. either from local\nsources or the cache.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">With\nREQUIRE_PRIMARY the request must be answered from a\n&quot;primary&quot; answer, i.e. not from resource records\nacquired as a side-effect of a previous\ntransaction.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">With\nCLAMP_TTL, if reply is answered from cache, the TTLs will be\nadjusted by age of cache entry.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nnext six bits flags are used in output and provide\ninformation about the source of the answer. CONFIDENTIAL\nmeans the query was resolved via encrypted channels or never\nleft this system. FROM_SYNTHETIC means the query was (at\nleast partially) synthesized. FROM_CACHE means the query was\nanswered (at least partially) using the cache. FROM_ZONE\nmeans the query was answered (at least partially) using\nLLMNR/mDNS. FROM_TRUST_ANCHOR means the query was answered\n(at least partially) using local trust anchors. FROM_NETWORK\nmeans the query was answered (at least partially) using the\nnetwork.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nThe <i>LLMNR</i> and <i>MulticastDNS</i> properties report\nwhether LLMNR and MulticastDNS are (globally) enabled. Each\nmay be one of &quot;yes&quot;, &quot;no&quot;, and\n&quot;resolve&quot;. See <b>SetLinkLLMNR()</b> and\n<b>SetLinkMulticastDNS()</b> above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LLMNRHostname</i>\ncontains the hostname currently exposed on the network via\nLLMNR. It usually follows the system hostname as may be\nqueried via <a href=\"https://man.page/3/gethostname\">gethostname(3)</a>, but may differ if a\nconflict is detected on the network.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>DNS</i>\nand <i>DNSEx</i> contain arrays of all DNS servers currently\nused by systemd-resolved. <i>DNS</i> contains information\nsimilar to the DNS server data in\n/run/systemd/resolve/resolv.conf. Each structure in the\narray consists of a numeric network interface index, an\naddress family, and a byte array containing the DNS server\naddress (either 4 bytes in length for IPv4 or 16 bytes in\nlengths for IPv6). <i>DNSEx</i> is similar, but additionally\ncontains the IP port and server name (used for Server Name\nIndication, SNI). Both arrays contain DNS servers configured\nsystem-wide, including those possibly read from a foreign\n/etc/resolv.conf or the <i>DNS=</i> setting in\n/etc/systemd/resolved.conf, as well as per-interface DNS\nserver information either retrieved from\n<b>systemd-networkd</b>(8), or configured by external\nsoftware via <b>SetLinkDNS()</b> or <b>SetLinkDNSEx()</b>\n(see above). The network interface index will be 0 for the\nsystem-wide configured services and non-zero for the\nper-link servers.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>FallbackDNS</i>\nand <i>FallbackDNSEx</i> contain arrays of all DNS servers\nconfigured as fallback servers, if any, using the same\nformat as <i>DNS</i> and <i>DNSEx</i> described above. See\nthe description of <i>FallbackDNS=</i> in\n<b>resolved.conf</b>(5) for the description of when those\nservers are used.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CurrentDNSServer</i>\nand <i>CurrentDNSServerEx</i> specify the server that is\ncurrently used for query resolution, in the same format as a\nsingle entry in the <i>DNS</i> and <i>DNSEx</i> arrays\ndescribed above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\nthe <i>Domains</i> property contains an array of all search\nand routing domains currently used by systemd-resolved. Each\nentry consists of a network interface index (again, 0\nencodes system-wide entries), the actual domain name, and\nwhether the entry is used only for routing (true) or for\nboth routing and searching (false).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>TransactionStatistics</i> property contains information\nabout the number of transactions systemd-resolved has\nprocessed. It contains a pair of unsigned 64-bit counters,\nthe first containing the number of currently ongoing\ntransactions, the second the number of total transactions\nsystemd-resolved is processing or has processed. The latter\nvalue may be reset using the <b>ResetStatistics()</b> method\ndescribed above. Note that the number of transactions does\nnot directly map to the number of issued resolver bus method\ncalls. While simple look-ups usually require a single\ntransaction only, more complex look-ups might result in\nmore, for example when CNAMEs or DNSSEC are in\nuse.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>CacheStatistics</i> property contains information about\nthe executed cache operations so far. It exposes three\n64-bit counters: the first being the total number of current\ncache entries (both positive and negative), the second the\nnumber of cache hits, and the third the number of cache\nmisses. The latter counters may be reset using\n<b>ResetStatistics()</b> (see above).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>DNSSEC</i> property specifies current status of DNSSEC\nvalidation. It is one of &quot;yes&quot; (validation is\nenforced), &quot;no&quot; (no validation is done),\n&quot;allow-downgrade&quot; (validation is done if the\ncurrent DNS server supports it). See the description of\n<i>DNSSEC=</i> in <b>resolved.conf</b>(5).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>DNSSECStatistics</i> property contains information about\nthe DNSSEC validations executed so far. It contains four\n64-bit counters: the number of secure, insecure, bogus, and\nindeterminate DNSSEC validations so far. The counters are\nincreased for each validated RRset, and each non-existance\nproof. The secure counter is increased for each operation\nthat successfully verified a signed reply, the insecure\ncounter is increased for each operation that successfully\nverified that an unsigned reply is rightfully unsigned. The\nbogus counter is increased for each operation where the\nvalidation did not check out and the data is likely to have\nbeen tempered with. Finally the indeterminate counter is\nincreased for each operation which did not complete because\nthe necessary keys could not be acquired or the\ncryptographic algorithms were unknown.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>DNSSECSupported</i> boolean property reports whether\nDNSSEC is enabled and the selected DNS servers support it.\nIt combines information about system-wide and per-link DNS\nsettings (see below), and only reports true if DNSSEC is\nenabled and supported on every interface for which DNS is\nconfigured and for the system-wide settings if there are\nany. Note that systemd-resolved assumes DNSSEC is supported\nby DNS servers until it verifies that this is not the case.\nThus, the reported value may initially be true, until the\nfirst transactions are executed.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>DNSOverTLS</i> boolean property reports whether\nDNS-over-TLS is enabled.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>ResolvConfMode</i> property exposes how /etc/resolv.conf\nis managed on the host. Currently, the values\n&quot;uplink&quot;, &quot;stub&quot;, &quot;static&quot;\n(these three correspond to the three different files\nsystemd-resolved.service provides), &quot;foreign&quot; (the\nfile is managed by admin or another service,\nsystemd-resolved.service just consumes it),\n&quot;missing&quot; (/etc/resolv.conf is\nmissing).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>DNSStubListener</i> property reports whether the stub\nlistener on port 53 is enabled. Possible values are\n&quot;yes&quot; (enabled), &quot;no&quot; (disabled),\n&quot;udp&quot; (only the UDP listener is enabled), and\n&quot;tcp&quot; (only the TCP listener is\nenabled).</font></p>\n\n<h2>LINK OBJECT\n<a name=\"LINK OBJECT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/resolve1/link/_1 { <br>\ninterface org.freedesktop.resolve1.Link { <br>\nmethods: <br>\nSetDNS(in a(iay) addresses); <br>\nSetDNSEx(in a(iayqs) addresses); <br>\nSetDomains(in a(sb) domains); <br>\nSetDefaultRoute(in b enable); <br>\nSetLLMNR(in s mode); <br>\nSetMulticastDNS(in s mode); <br>\nSetDNSOverTLS(in s mode); <br>\nSetDNSSEC(in s mode); <br>\nSetDNSSECNegativeTrustAnchors(in as names); <br>\nRevert(); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t ScopesMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iay) DNS = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayqs) DNSEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly (iay) CurrentDNSServer = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly (iayqs) CurrentDNSServerEx = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(sb) Domains = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b DefaultRoute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s LLMNR = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s MulticastDNS = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DNSOverTLS = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DNSSEC = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DNSSECNegativeTrustAnchors = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b DNSSECSupported = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\neach Linux network interface a &quot;Link&quot; object is\ncreated which exposes per-link DNS configuration and state.\nUse <b>GetLink()</b> on the Manager interface to retrieve\nthe object path for a link object given the network\ninterface index (see above).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods</b>\n<br>\nThe various methods exposed by the Link interface are\nequivalent to their similarly named counterparts on the\nManager interface. e.g. <b>SetDNS()</b> on the Link object\nmaps to <b>SetLinkDNS()</b> on the Manager object, the main\ndifference being that the later expects an interface index\nto be specified. Invoking the methods on the Manager\ninterface has the benefit of reducing roundtrips, as it is\nnot necessary to first request the Link object path via\n<b>GetLink()</b> before invoking the methods. The same\nrelationship holds for <b>SetDNSEx()</b>,\n<b>SetDomains()</b>, <b>SetDefaultRoute()</b>,\n<b>SetLLMNR()</b>, <b>SetMulticastDNS()</b>,\n<b>SetDNSOverTLS()</b>, <b>SetDNSSEC()</b>,\n<b>SetDNSSECNegativeTrustAnchors()</b>, and <b>Revert()</b>.\nFor further details on these methods see the Manager\ndocumentation above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<i><br>\nScopesMask</i> defines which resolver scopes are currently\nactive on this interface. This 64-bit unsigned integer field\nis a bit mask consisting of a subset of the bits of the\nflags parameter describe above. Specifically, it may have\nthe DNS, LLMNR and MDNS bits (the latter in IPv4 and IPv6\nflavours) set. Each individual bit is set when the protocol\napplies to a specific interface and is enabled for it. It is\nunset otherwise. Specifically, a multicast-capable interface\nin the &quot;UP&quot; state with an IP address is suitable\nfor LLMNR or MulticastDNS, and any interface that is UP and\nhas an IP address is suitable for DNS. Note the relationship\nof the bits exposed here with the LLMNR and MulticastDNS\nproperties also exposed on the Link interface. The latter\nexpose what is *configured* to be used on the interface, the\nformer expose what is actually used on the interface, taking\ninto account the abilities of the interface.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>DNSSECSupported</i>\nexposes a boolean field that indicates whether DNSSEC is\ncurrently configured and in use on the interface. Note that\nif DNSSEC is enabled on an interface, it is assumed\navailable until it is detected that the configured server\ndoes not actually support it. Thus, this property may\ninitially report that DNSSEC is supported on an\ninterface.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>DefaultRoute</i>\nexposes a boolean field that indicates whether the interface\nwill be used as default route for name queries. See\n<b>SetLinkDefaultRoute()</b> above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nother properties reflect the state of the various\nconfiguration settings for the link which may be set with\nthe various methods calls such as <b>SetDNS()</b> or\n<b>SetLLMNR()</b>.</font></p>\n\n<h2>COMMON ERRORS\n<a name=\"COMMON ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Many\nbus methods systemd-resolved exposes (in particular the\nresolver methods such as <b>ResolveHostname()</b> on the\nManager interface) may return some of the following\nerrors:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.NoNameServers</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">No\nsuitable DNS servers were found to resolve a\nrequest.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.InvalidReply</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\nresponse from the selected DNS server was not\nunderstood.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.NoSuchRR</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nrequested name exists, but there is no resource record of\nthe requested type for it. (This is the DNS NODATA\ncase).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.CNameLoop</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nlook-up failed because a CNAME or DNAME loop was\ndetected.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.Aborted</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nlook-up was aborted because the selected protocol became\nunavailable while the operation was ongoing.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.NoSuchService</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A service\nlook-up was successful, but the <b>SRV</b> record reported\nthat the service is not available.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.DnssecFailed</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nacquired response did not pass DNSSEC validation.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.NoTrustAnchor</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">No chain\nof trust could be established for the response to a\nconfigured DNSSEC trust anchor.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.ResourceRecordTypeUnsupported</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nrequested resource record type is not supported on the\nselected DNS servers. This error is generated for example\nwhen an RRSIG record is requested from a DNS server that\ndoes not support DNSSEC.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.NoSuchLink</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">No\nnetwork interface with the specified network interface index\nexists.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.LinkBusy</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nrequested configuration change could not be made because\n<b>systemd-networkd</b>(8), already took possession of the\ninterface and supplied configuration data for it.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.NetworkDown</b></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nrequested look-up failed because the system is currently not\nconnected to any suitable network.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>org.freedesktop.resolve1.DnsError.NXDOMAIN</b>,\n<b>org.freedesktop.resolve1.DnsError.REFUSED</b>,\n...</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nlook-up failed with a DNS return code reporting a failure.\nThe error names used as suffixes here are defined in by IANA\nin</font>\n<b><font color=\"#0000FF\">DNS&nbsp;RCODEs</font></b>\n<small><font color=\"#000000\">[4]</font></small>\n<font color=\"#000000\">.</font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;1.&nbsp;Introspect\norg.freedesktop.resolve1.Manager on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system \\ <br>\n--dest org.freedesktop.resolve1 \\ <br>\n--object-path /org/freedesktop/resolve1</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;2.&nbsp;Introspect\norg.freedesktop.resolve1.Link on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system \\ <br>\n--dest org.freedesktop.resolve1 \\ <br>\n--object-path /org/freedesktop/resolve1/link/_11</font></p>\n\n<h2>VERSIONING\n<a name=\"VERSIONING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">These\nD-Bus interfaces follow</font> <b><font color=\"#0000FF\">the\nusual interface versioning guidelines</font></b>\n<small><font color=\"#000000\">[5]</font></small>\n<font color=\"#000000\">.</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"58%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Writing\nNetwork Configuration Managers</font></p></td>\n<td width=\"25%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://wiki.freedesktop.org/www/Software/systemd/writing-network-configuration-managers</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">2.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Writing\nResolver Clients</font></p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://wiki.freedesktop.org/www/Software/systemd/writing-resolver-clients</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">3.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"12%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">RFC&nbsp;1035</font></p> </td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.ietf.org/rfc/rfc1035.txt</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">4.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"15%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">DNS&nbsp;RCODEs</font></p> </td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">5.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">the usual\ninterface versioning guidelines</font></p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">http://0pointer.de/blog/projects/versioning-dbus.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#INTRODUCTION\">INTRODUCTION</a>","<a href=\"#THE MANAGER OBJECT\">THE MANAGER OBJECT</a>","<a href=\"#LINK OBJECT\">LINK OBJECT</a>","<a href=\"#COMMON ERRORS\">COMMON ERRORS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#VERSIONING\">VERSIONING</a>","<a href=\"#NOTES\">NOTES</a>"],"level":5}