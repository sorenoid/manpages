{"name":"org.freedesktop.systemd1","description":"org.freedesktop.systemd1\n- The D-Bus interface of systemd\n\n<h2>INTRODUCTION\n<a name=\"INTRODUCTION\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/1/systemd\">systemd(1)</a>\nand its auxiliary daemons expose a number of APIs over\nD-Bus. This page only describes the various APIs exposed by\nthe system and service manager itself. It does not cover the\nauxiliary daemons.\n\nThe service\nmanager exposes a number of objects on the bus: one Manager\nobject as a central entry point for clients along with\nindividual objects for each unit and for each queued job.\nThe unit objects implement a generic Unit interface as well\nas a type-specific interface. For example, service units\nimplement both org.freedesktop.systemd1.Unit and\norg.freedesktop.system1.Service. The manager object can list\nunit and job objects or directly convert a unit name or job\nidentifier to a bus path of the corresponding D-Bus\nobject.\n\nProperties\nexposing time values are usually encoded in microseconds\n(&micro;s) on the bus, even if their corresponding settings\nin the unit files are in seconds.\n\nPID 1 uses\n<b><font color=\"#0000FF\">polkit</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">to allow access to privileged\noperations for unprivileged processes. Some operations (such\nas shutdown/reboot/suspend) are also available through the\nD-Bus API of logind, see\n<b>org.freedesktop.login1</b>(5).</font>\n\n<h2>THE MANAGER OBJECT\n<a name=\"THE MANAGER OBJECT\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">The\nmain entry point object is available on the fixed\n<b>/org/freedesktop/systemd1</b> object path:</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1 { <br>\ninterface org.freedesktop.systemd1.Manager { <br>\nmethods: <br>\nGetUnit(in s name, <br>\nout o unit); <br>\nGetUnitByPID(in u pid, <br>\nout o unit); <br>\nGetUnitByInvocationID(in ay invocation_id, <br>\nout o unit); <br>\nGetUnitByControlGroup(in s cgroup, <br>\nout o unit); <br>\nLoadUnit(in s name, <br>\nout o unit); <br>\nStartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nStartUnitReplace(in s old_unit, <br>\nin s new_unit, <br>\nin s mode, <br>\nout o job); <br>\nStopUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nReloadUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nRestartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nTryRestartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nReloadOrRestartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nReloadOrTryRestartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nEnqueueUnitJob(in s name, <br>\nin s job_type, <br>\nin s job_mode, <br>\nout u job_id, <br>\nout o job_path, <br>\nout s unit_id, <br>\nout o unit_path, <br>\nout s job_type, <br>\nout a(uosos) affected_jobs); <br>\nKillUnit(in s name, <br>\nin s whom, <br>\nin i signal); <br>\nCleanUnit(in s name, <br>\nin as mask); <br>\nFreezeUnit(in s name); <br>\nThawUnit(in s name); <br>\nResetFailedUnit(in s name); <br>\nSetUnitProperties(in s name, <br>\nin b runtime, <br>\nin a(sv) properties); <br>\nBindMountUnit(in s name, <br>\nin s source, <br>\nin s destination, <br>\nin b read_only, <br>\nin b mkdir); <br>\nMountImageUnit(in s name, <br>\nin s source, <br>\nin s destination, <br>\nin b read_only, <br>\nin b mkdir, <br>\nin a(ss) options); <br>\nRefUnit(in s name); <br>\nUnrefUnit(in s name); <br>\nStartTransientUnit(in s name, <br>\nin s mode, <br>\nin a(sv) properties, <br>\nin a(sa(sv)) aux, <br>\nout o job); <br>\nGetUnitProcesses(in s name, <br>\nout a(sus) processes); <br>\nAttachProcessesToUnit(in s unit_name, <br>\nin s subcgroup, <br>\nin au pids); <br>\nAbandonScope(in s name); <br>\nGetJob(in u id, <br>\nout o job); <br>\nGetJobAfter(in u id, <br>\nout a(usssoo) jobs); <br>\nGetJobBefore(in u id, <br>\nout a(usssoo) jobs); <br>\nCancelJob(in u id); <br>\nClearJobs(); <br>\nResetFailed(); <br>\nSetShowStatus(in s mode); <br>\nListUnits(out a(ssssssouso) units); <br>\nListUnitsFiltered(in as states, <br>\nout a(ssssssouso) units); <br>\nListUnitsByPatterns(in as states, <br>\nin as patterns, <br>\nout a(ssssssouso) units); <br>\nListUnitsByNames(in as names, <br>\nout a(ssssssouso) units); <br>\nListJobs(out a(usssoo) jobs); <br>\nSubscribe(); <br>\nUnsubscribe(); <br>\nDump(out s output); <br>\nDumpByFileDescriptor(out h fd); <br>\nReload(); <br>\nReexecute(); <br>\nExit(); <br>\nReboot(); <br>\nPowerOff(); <br>\nHalt(); <br>\nKExec(); <br>\nSwitchRoot(in s new_root, <br>\nin s init); <br>\nSetEnvironment(in as assignments); <br>\nUnsetEnvironment(in as names); <br>\nUnsetAndSetEnvironment(in as names, <br>\nin as assignments); <br>\nEnqueueMarkedJobs(out ao jobs); <br>\nListUnitFiles(out a(ss) unit_files); <br>\nListUnitFilesByPatterns(in as states, <br>\nin as patterns, <br>\nout a(ss) unit_files); <br>\nGetUnitFileState(in s file, <br>\nout s state); <br>\nEnableUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nDisableUnitFiles(in as files, <br>\nin b runtime, <br>\nout a(sss) changes); <br>\nEnableUnitFilesWithFlags(in as files, <br>\nin t flags, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nDisableUnitFilesWithFlags(in as files, <br>\nin t flags, <br>\nout a(sss) changes); <br>\nReenableUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nLinkUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout a(sss) changes); <br>\nPresetUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nPresetUnitFilesWithMode(in as files, <br>\nin s mode, <br>\nin b runtime, <br>\nin b force, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nMaskUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout a(sss) changes); <br>\nUnmaskUnitFiles(in as files, <br>\nin b runtime, <br>\nout a(sss) changes); <br>\nRevertUnitFiles(in as files, <br>\nout a(sss) changes); <br>\nSetDefaultTarget(in s name, <br>\nin b force, <br>\nout a(sss) changes); <br>\nGetDefaultTarget(out s name); <br>\nPresetAllUnitFiles(in s mode, <br>\nin b runtime, <br>\nin b force, <br>\nout a(sss) changes); <br>\nAddDependencyUnitFiles(in as files, <br>\nin s target, <br>\nin s type, <br>\nin b runtime, <br>\nin b force, <br>\nout a(sss) changes); <br>\nGetUnitFileLinks(in s name, <br>\nin b runtime, <br>\nout as links); <br>\nSetExitCode(in y number); <br>\nLookupDynamicUserByName(in s name, <br>\nout u uid); <br>\nLookupDynamicUserByUID(in u uid, <br>\nout s name); <br>\nGetDynamicUsers(out a(us) users); <br>\nsignals: <br>\nUnitNew(s id, <br>\no unit); <br>\nUnitRemoved(s id, <br>\no unit); <br>\nJobNew(u id, <br>\no job, <br>\ns unit); <br>\nJobRemoved(u id, <br>\no job, <br>\ns unit, <br>\ns result); <br>\nStartupFinished(t firmware, <br>\nt loader, <br>\nt kernel, <br>\nt initrd, <br>\nt userspace, <br>\nt total); <br>\nUnitFilesChanged(); <br>\nReloading(b active); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Version = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Features = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Virtualization = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Architecture = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Tainted = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t FirmwareTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t FirmwareTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LoaderTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LoaderTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t KernelTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t KernelTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UserspaceTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UserspaceTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t FinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t FinishTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SecurityStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SecurityStartTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SecurityFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SecurityFinishTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t GeneratorsStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t GeneratorsStartTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t GeneratorsFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t GeneratorsFinishTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UnitsLoadStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UnitsLoadStartTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UnitsLoadFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UnitsLoadFinishTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDSecurityStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDSecurityStartTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDSecurityFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDSecurityFinishTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDGeneratorsStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDGeneratorsStartTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDGeneratorsFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDGeneratorsFinishTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDUnitsLoadStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDUnitsLoadStartTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDUnitsLoadFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDUnitsLoadFinishTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite s LogLevel = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite s LogTarget = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NNames = ...; <br>\nreadonly u NFailedUnits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NJobs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NInstalledJobs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NFailedJobs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly d Progress = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ConfirmSpawn = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b ShowStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnitPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s DefaultStandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s DefaultStandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite t RuntimeWatchdogUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite t RebootWatchdogUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite t KExecWatchdogUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite b ServiceWatchdogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s SystemState = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly y ExitCode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultTimerAccuracyUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultTimeoutStartUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultTimeoutStopUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultTimeoutAbortUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultRestartUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultStartLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DefaultStartLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultCPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultBlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultMemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultTasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultTasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s DefaultOOMPolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s CtrlAltDelBurstAction = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Methods</b>\n<br>\nNote that many of the methods exist twice: once on the\nManager object and once on the respective unit objects. This\nis to optimize access times so that methods that belong to\nunit objects do not have to be called with a resolved unit\npath, but can be called with only the unit id,\ntoo.</font>\n\n\n<font color=\"#000000\"><b>GetUnit()</b>\nmay be used to get the unit object path for a unit name. It\ntakes the unit name and returns the object path. If a unit\nhas not been loaded yet by this name this method will\nfail.</font>\n\n\n<font color=\"#000000\"><b>GetUnitByPID()</b>\nmay be used to get the unit object path of the unit a\nprocess ID belongs to. It takes a UNIX PID and returns the\nobject path. The PID must refer to an existing system\nprocess.</font>\n\n\n<font color=\"#000000\"><b>LoadUnit()</b>\nis similar to <b>GetUnit()</b> but will load the unit from\ndisk if possible.</font>\n\n\n<font color=\"#000000\"><b>StartUnit()</b>\nenqueues a start job and possibly depending jobs. It takes\nthe unit to activate and a mode string as arguments. The\nmode needs to be one of &quot;replace&quot;,\n&quot;fail&quot;, &quot;isolate&quot;,\n&quot;ignore-dependencies&quot;, or\n&quot;ignore-requirements&quot;. If &quot;replace&quot;, the\nmethod will start the unit and its dependencies, possibly\nreplacing already queued jobs that conflict with it. If\n&quot;fail&quot;, the method will start the unit and its\ndependencies, but will fail if this would change an already\nqueued job. If &quot;isolate&quot;, the method will start\nthe unit in question and terminate all units that aren't\ndependencies of it. If &quot;ignore-dependencies&quot;, it\nwill start a unit but ignore all its dependencies. If\n&quot;ignore-requirements&quot;, it will start a unit but\nonly ignore the requirement dependencies. It is not\nrecommended to make use of the latter two options. On\ncompletion, this method returns the newly created job\nobject.</font>\n\n\n<font color=\"#000000\"><b>StartUnitReplace()</b>\nis similar to <b>StartUnit()</b> but replaces a job that is\nqueued for one unit by a job for another unit.</font>\n\n\n<font color=\"#000000\"><b>StopUnit()</b>\nis similar to <b>StartUnit()</b> but stops the specified\nunit rather than starting it. Note that the\n&quot;isolate&quot; mode is invalid for this\nmethod.</font>\n\n\n<font color=\"#000000\"><b>ReloadUnit()</b>,\n<b>RestartUnit()</b>, <b>TryRestartUnit()</b>,\n<b>ReloadOrRestartUnit()</b>, or\n<b>ReloadOrTryRestartUnit()</b> may be used to restart\nand/or reload a unit. These methods take similar arguments\nas <b>StartUnit()</b>. Reloading is done only if the unit is\nalready running and fails otherwise. If a service is\nrestarted that isn't running, it will be started unless the\n&quot;Try&quot; flavor is used in which case a service that\nisn't running is not affected by the restart. The\n&quot;ReloadOrRestart&quot; flavors attempt a reload if the\nunit supports it and use a restart otherwise.</font>\n\n\n<font color=\"#000000\"><b>EnqueueMarkedJobs()</b>\ncreates reload/restart jobs for units which have been\nappropriately marked, see <i>Marks</i> property above. This\nis equivalent to calling <b>TryRestartUnit()</b> or\n<b>ReloadOrTryRestartUnit()</b> for the marked\nunits.</font>\n\n\n<font color=\"#000000\"><b>BindMountUnit()</b>\ncan be used to bind mount new files or directories into a\nrunning service mount namespace.</font>\n\n\n<font color=\"#000000\"><b>MountImageUnit()</b>\ncan be used to mount new images into a running service mount\nnamespace.</font>\n\n\n<font color=\"#000000\"><b>KillUnit()</b>\nmay be used to kill (i.e. send a signal to) all processes of\na unit. It takes the unit <i>name</i>, an enum <i>who</i>\nand a UNIX <i>signal</i> number to send. The <i>who</i> enum\nis one of &quot;main&quot;, &quot;control&quot; or\n&quot;all&quot;. If &quot;main&quot;, only the main process\nof the unit is killed. If &quot;control&quot;, only the\ncontrol process of the unit is killed. If &quot;all&quot;,\nall processes are killed. A &quot;control&quot; process is\nfor example a process that is configured via\n<i>ExecStop=</i> and is spawned in parallel to the main\ndaemon process in order to shut it down.</font>\n\n\n<font color=\"#000000\"><b>GetJob()</b>\nreturns the job object path for a specific job, identified\nby its id.</font>\n\n\n<font color=\"#000000\"><b>CancelJob()</b>\ncancels a specific job identified by its numeric ID. This\noperation is also available in the <b>Cancel()</b> method of\nJob objects (see below) and exists primarily to reduce the\nnecessary round trips to execute this operation. Note that\nthis will not have any effect on jobs whose execution has\nalready begun.</font>\n\n\n<font color=\"#000000\"><b>ClearJobs()</b>\nflushes the job queue, removing all jobs that are still\nqueued. Note that this does not have any effect on jobs\nwhose execution has already begun. It only flushes jobs that\nare queued and have not yet begun execution.</font>\n\n\n<font color=\"#000000\"><b>ResetFailedUnit()</b>\nresets the &quot;failed&quot; state of a specific\nunit.</font>\n\n\n<font color=\"#000000\"><b>ResetFailed()</b>\nresets the &quot;failed&quot; state of all units.</font>\n\n\n<font color=\"#000000\"><b>ListUnits()</b>\nreturns an array of all currently loaded units. Note that\nunits may be known by multiple names at the same name, and\nhence there might be more unit names loaded than actual\nunits behind them. The array consists of structures with the\nfollowing elements:</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe primary unit name as string</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe human readable description string</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe load state (i.e. whether the unit file has been loaded\nsuccessfully)</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe active state (i.e. whether the unit is currently started\nor not)</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe sub state (a more fine-grained version of the active\nstate that is specific to the unit type, which the active\nstate is not)</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nA unit that is being followed in its state by this unit, if\nthere is any, otherwise the empty string.</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe unit object path</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nIf there is a job queued for the job unit, the numeric job\nid, 0 otherwise</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job type as string</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job object path</font>\n\n\n<font color=\"#000000\"><b>ListJobs()</b>\nreturns an array with all currently queued jobs. Returns an\narray consisting of structures with the following\nelements:</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe numeric job id</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe primary unit name for this job</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job type as string</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job state as string</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job object path</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe unit object path</font>\n\n\n<font color=\"#000000\"><b>Subscribe()</b>\nenables most bus signals to be sent out. Clients which are\ninterested in signals need to call this method. Signals are\nonly sent out if at least one client invoked this method.\n<b>Unsubscribe()</b> reverts the signal subscription that\n<b>Subscribe()</b> implements. It is not necessary to invoke\n<b>Unsubscribe()</b> as clients are tracked. Signals are no\nlonger sent out as soon as all clients which previously\nasked for <b>Subscribe()</b> either closed their connection\nto the bus or invoked <b>Unsubscribe()</b>.</font>\n\n\n<font color=\"#000000\"><b>Reload()</b>\nmay be invoked to reload all unit files.</font>\n\n\n<font color=\"#000000\"><b>Reexecute()</b>\nmay be invoked to reexecute the main manager process. It\nwill serialize its state, reexecute, and deserizalize the\nstate again. This is useful for upgrades and is a more\ncomprehensive version of <b>Reload()</b>.</font>\n\n\n<font color=\"#000000\"><b>Exit()</b>\nmay be invoked to ask the manager to exit. This is not\navailable for the system manager and is useful only for user\nsession managers.</font>\n\n\n<font color=\"#000000\"><b>Reboot()</b>,\n<b>PowerOff()</b>, <b>Halt()</b>, or <b>KExec()</b> may be\nused to ask for immediate reboot, powering down, halt or\nkexec based reboot of the system. Note that this does not\nshut down any services and immediately transitions into the\nreboot process. These functions are normally only called as\nthe last step of shutdown and should not be called directly.\nTo shut down the machine, it is generally a better idea to\ninvoke <b>Reboot()</b> or <b>PowerOff()</b> on the\nsystemd-logind manager object; see\n<b>org.freedesktop.login1</b>(5) for more\ninformation.</font>\n\n\n<font color=\"#000000\"><b>SwitchRoot()</b>\nmay be used to transition to a new root directory. This is\nintended to be used by initial RAM disks. The method takes\ntwo arguments: the new root directory (which needs to be\nspecified) and an init binary path (which may be left empty,\nin which case it is automatically searched for). The state\nof the system manager will be serialized before the\ntransition. After the transition, the manager binary on the\nmain system is invoked and replaces the old PID 1. All state\nwill then be deserialized.</font>\n\n\n<font color=\"#000000\"><b>SetEnvironment()</b>\nmay be used to alter the environment block that is passed to\nall spawned processes. It takes a string array of\nenvironment variable assignments. Any previously set\nenvironment variables will be overridden.</font>\n\n\n<font color=\"#000000\"><b>UnsetEnvironment()</b>\nmay be used to unset environment variables. It takes a\nstring array of environment variable names. All variables\nspecified will be unset (if they have been set previously)\nand no longer be passed to all spawned processes. This\nmethod has no effect for variables that were previously not\nset, but will not fail in that case.</font>\n\n\n<font color=\"#000000\"><b>UnsetAndSetEnvironment()</b>\nis a combination of <b>UnsetEnvironment()</b> and\n<b>SetEnvironment()</b>. It takes two lists. The first list\ncontains variables to unset, the second one contains\nassignments to set. If a variable is listed in both, the\nvariable is set after this method returns, i.e. the set list\noverrides the unset list.</font>\n\n\n<font color=\"#000000\"><b>ListUnitFiles()</b>\nreturns an array of unit names and their enablement status.\nNote that <b>ListUnit()</b> returns a list of units\ncurrently loaded into memory, while <b>ListUnitFiles()</b>\nreturns a list of unit <i>files</i> that were found on disk.\nNote that while most units are read directly from a unit\nfile with the same name, some units are not backed by files\nand some files (templates) cannot directly be loaded as\nunits but need to be instantiated instead.</font>\n\n\n<font color=\"#000000\"><b>GetUnitFileState()</b>\nreturns the current enablement status of a specific unit\nfile.</font>\n\n\n<font color=\"#000000\"><b>EnableUnitFiles()</b>\nmay be used to enable one or more units in the system (by\ncreating symlinks to them in /etc/ or /run/). It takes a\nlist of unit files to enable (either just file names or full\nabsolute paths if the unit files are residing outside the\nusual unit search paths) and two booleans: the first\ncontrols whether the unit shall be enabled for runtime only\n(true, /run/), or persistently (false, /etc/). The second\none controls whether symlinks pointing to other units shall\nbe replaced if necessary. This method returns one boolean\nand an array of the changes made. The boolean signals\nwhether the unit files contained any enablement information\n(i.e. an [Install]) section. The changes array consists of\nstructures with three strings: the type of the change (one\nof &quot;symlink&quot; or &quot;unlink&quot;), the file name\nof the symlink and the destination of the symlink. Note that\nmost of the following calls return a changes list in the\nsame format.</font>\n\n\n<font color=\"#000000\">Similarly,\n<b>DisableUnitFiles()</b> disables one or more units in the\nsystem, i.e. removes all symlinks to them in /etc/ and\n/run/.</font>\n\n\n<font color=\"#000000\">The\n<b>EnableUnitFilesWithFlags()</b> and\n<b>DisableUnitFilesWithFlags()</b> take in options as flags\ninstead of booleans to allow for extendability, defined as\nfollows:</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#define\nSD_SYSTEMD_UNIT_RUNTIME (UINT64_C(1) &lt;&lt; 0) <br>\n#define SD_SYSTEMD_UNIT_FORCE (UINT64_C(1) &lt;&lt; 1) <br>\n#define SD_SYSTEMD_UNIT_PORTABLE (UINT64_C(1) &lt;&lt;\n2)</font>\n\n\n<font color=\"#000000\"><i>SD_SYSTEMD_UNIT_RUNTIME</i>\nwill enable or disable the unit for runtime only,\n<i>SD_SYSTEMD_UNIT_FORCE</i> controls whether symlinks\npointing to other units shall be replaced if necessary.\n<i>SD_SYSTEMD_UNIT_PORTABLE</i> will add or remove the\nsymlinks in /etc/systemd/system.attached and\n/run/systemd/system.attached.</font>\n\n\n<font color=\"#000000\">Similarly,\n<b>ReenableUnitFiles()</b> applies the changes to one or\nmore units that would result from disabling and enabling the\nunit quickly one after the other in an atomic fashion. This\nis useful to apply updated [Install] information contained\nin unit files.</font>\n\n\n<font color=\"#000000\">Similarly,\n<b>LinkUnitFiles()</b> links unit files (that are located\noutside of the usual unit search paths) into the unit search\npath.</font>\n\n\n<font color=\"#000000\">Similarly,\n<b>PresetUnitFiles()</b> enables/disables one or more unit\nfiles according to the preset policy. See\n<b>systemd.preset</b>(7) for more information.</font>\n\n\n<font color=\"#000000\">Similarly,\n<b>MaskUnitFiles()</b> masks unit files and\n<b>UnmaskUnitFiles()</b> unmasks them again.</font>\n\n\n<font color=\"#000000\"><b>SetDefaultTarget()</b>\nchanges the default.target link. See <a href=\"https://man.page/7/bootup\">bootup(7)</a> for\nmore information.</font>\n\n\n<font color=\"#000000\"><b>GetDefaultTarget()</b>\nretrieves the name of the unit to which default.target is\naliased.</font>\n\n\n<font color=\"#000000\"><b>SetUnitProperties()</b>\nmay be used to modify certain unit properties at runtime.\nNot all properties may be changed at runtime, but many\nresource management settings (primarily those listed in\n<b>systemd.resource-control</b>(5)) may. The changes are\napplied instantly and stored on disk for future boots,\nunless <i>runtime</i> is true, in which case the settings\nonly apply until the next reboot. <i>name</i> is the name of\nthe unit to modify. <i>properties</i> are the settings to\nset, encoded as an array of property name and value pairs.\nNote that this is not a dictionary! Also note that when\nsetting array properties with this method usually results in\nappending to the pre-configured array. To reset the\nconfigured arrays, set the property to an empty array first\nand then append to it.</font>\n\n\n<font color=\"#000000\"><b>StartTransientUnit()</b>\nmay be used to create and start a transient unit which will\nbe released as soon as it is not running or referenced\nanymore or the system is rebooted. <i>name</i> is the unit\nname including its suffix and must be unique. <i>mode</i> is\nthe same as in <b>StartUnit()</b>, <i>properties</i>\ncontains properties of the unit, specified like in\n<b>SetUnitProperties()</b>. <i>aux</i> is currently unused\nand should be passed as an empty array. See the</font>\n<b><font color=\"#0000FF\">New Control Group\nInterface</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">for more information how to make use\nof this functionality for resource control\npurposes.</font>\n\n\n<font color=\"#000000\"><b>Signals</b>\n<br>\nNote that most signals are sent out only after\n<b>Subscribe()</b> has been invoked by at least one client.\nMake sure to invoke this method when subscribing to these\nsignals!</font>\n\n\n<font color=\"#000000\"><b>UnitNew()</b>\nand <b>UnitRemoved()</b> are sent out each time a new unit\nis loaded or unloaded. Note that this has little to do with\nwhether a unit is available on disk or not, and simply\nreflects the units that are currently loaded into memory.\nThe signals take two parameters: the primary unit name and\nthe object path.</font>\n\n\n<font color=\"#000000\"><b>JobNew()</b>\nand <b>JobRemoved()</b> are sent out each time a new job is\nqueued or dequeued. Both signals take the numeric job ID,\nthe bus path and the primary unit name for this job as\narguments. <b>JobRemoved()</b> also includes a result string\nwhich is one of &quot;done&quot;, &quot;canceled&quot;,\n&quot;timeout&quot;, &quot;failed&quot;,\n&quot;dependency&quot;, or &quot;skipped&quot;.\n&quot;done&quot; indicates successful execution of a job.\n&quot;canceled&quot; indicates that a job has been canceled\n(via <b>CancelJob()</b> above) before it finished execution\n(this doesn't necessarily mean though that the job operation\nis actually cancelled too, see above). &quot;timeout&quot;\nindicates that the job timeout was reached.\n&quot;failed&quot; indicates that the job failed.\n&quot;dependency&quot; indicates that a job this job\ndepended on failed and the job hence was removed as well.\n&quot;skipped&quot; indicates that a job was skipped because\nit didn't apply to the unit's current state.</font>\n\n\n<font color=\"#000000\"><b>StartupFinished()</b>\nis sent out when startup finishes. It carries six\nmicrosecond timespan values, each indicating how much boot\ntime has been spent in the firmware (if known), in the boot\nloader (if known), in the kernel initialization phase, in\nthe initrd (if known), in userspace and in total. These\nvalues may also be calculated from the\n<i>FirmwareTimestampMonotonic</i>,\n<i>LoaderTimestampMonotonic</i>,\n<i>InitRDTimestampMonotonic</i>,\n<i>UserspaceTimestampMonotonic</i>, and\n<i>FinishTimestampMonotonic</i> properties (see\nbelow).</font>\n\n\n<font color=\"#000000\"><b>UnitFilesChanged()</b>\nis sent out each time the list of enabled or masked unit\nfiles on disk have changed.</font>\n\n\n<font color=\"#000000\"><b>Reloading()</b>\nis sent out immediately before a daemon reload is done (with\nthe boolean parameter set to True) and after a daemon reload\nis completed (with the boolean parameter set to False). This\nmay be used by UIs to optimize UI updates.</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties simply reflect the respective options in\n/etc/systemd/system.conf and the kernel command\nline.</font>\n\n\n<font color=\"#000000\">The\nothers:</font>\n\n\n<font color=\"#000000\"><i>Version</i>\nencodes the version string of the running systemd instance.\nNote that the version string is purely informational. It\nshould not be parsed and one may not assume the version to\nbe formatted in any particular way. We take the liberty to\nchange the versioning scheme at any time and it is not part\nof the public API.</font>\n\n\n<font color=\"#000000\"><i>Features</i>\nencodes the features that have been enabled and disabled for\nthis build. Enabled options are prefixed with +, disabled\noptions with -.</font>\n\n\n<font color=\"#000000\"><i>Tainted</i>\nencodes a couple of taint flags as a colon-separated list.\nWhen systemd detects it is running on a system with certain\nproblems, it will set an appropriate taint flag. Taints may\nbe used to lower the chance of bogus bug reports. The\nfollowing taints are currently known: &quot;split-usr&quot;,\n&quot;mtab-not-symlink&quot;, &quot;cgroups-missing&quot;,\n&quot;local-hwclock&quot;. &quot;split-usr&quot; is set if\n/usr/ is not pre-mounted when systemd is first invoked.\nSee</font> <b><font color=\"#0000FF\">Booting Without /usr is\nBroken</font></b>\n<small><font color=\"#000000\">[3]</font></small>\n<font color=\"#000000\">for details why this is bad.\n&quot;mtab-not-symlink&quot; indicates that /etc/mtab is not\na symlink to /proc/self/mounts as required.\n&quot;cgroups-missing&quot; indicates that control groups\nhave not been enabled in the kernel.\n&quot;local-hwclock&quot; indicates that the local RTC is\nconfigured to be in local time rather than UTC.</font>\n\n\n<font color=\"#000000\"><i>FirmwareTimestamp</i>,\n<i>FirmwareTimestampMonotonic</i>, <i>LoaderTimestamp</i>,\n<i>LoaderTimestampMonotonic</i>, <i>KernelTimestamp</i>,\n<i>KernelTimestampMonotonic</i>, <i>InitRDTimestamp</i>,\n<i>InitRDTimestampMonotonic</i>, <i>UserspaceTimestamp</i>,\n<i>UserspaceTimestampMonotonic</i>, <i>FinishTimestamp</i>,\nand <i>FinishTimestampMonotonic</i> encode\n<b>CLOCK_REALTIME</b> and <b>CLOCK_MONOTONIC</b> microsecond\ntimestamps taken when the firmware first began execution,\nwhen the boot loader first began execution, when the kernel\nfirst began execution, when the initrd first began\nexecution, when the main systemd instance began execution\nand finally, when all queued startup jobs finished\nexecution. These values are useful for determining boot-time\nperformance. Note that as monotonic time begins with the\nkernel startup, the <i>KernelTimestampMonotonic</i>\ntimestamp will always be 0 and\n<i>FirmwareTimestampMonotonic</i> and\n<i>LoaderTimestampMonotonic</i> are to be read as negative\nvalues. Also, not all fields are always available, depending\non the used firmware, boot loader or initrd implementation.\nIn these cases the respective pairs of timestamps are both\n0, indicating that no data is available.</font>\n\n\n<font color=\"#000000\">Similarly,\nthe <i>SecurityStartTimestamp</i>,\n<i>GeneratorsStartTimestamp</i> and <i>LoadUnitTimestamp</i>\n(as well as their monotonic and stop counterparts) expose\nperformance data for uploading the security policies to the\nkernel (such as the SELinux, IMA, or SMACK policies), for\nrunning the generator tools and for loading the unit\nfiles.</font>\n\n\n<font color=\"#000000\"><i>NNames</i>\nencodes how many unit names are currently known. This only\nincludes names of units that are currently loaded and can be\nmore than the amount of actually loaded units since units\nmay have more than one name.</font>\n\n\n<font color=\"#000000\"><i>NJobs</i>\nencodes how many jobs are currently queued.</font>\n\n\n<font color=\"#000000\"><i>NInstalledJobs</i>\nencodes how many jobs have ever been queued in\ntotal.</font>\n\n\n<font color=\"#000000\"><i>NFailedJobs</i>\nencodes how many jobs have ever failed in total.</font>\n\n\n<font color=\"#000000\"><i>Progress</i>\nencodes boot progress as a floating point value between 0.0\nand 1.0. This value begins at 0.0 at early-boot and ends at\n1.0 when boot is finished and is based on the number of\nexecuted and queued jobs. After startup, this field is\nalways 1.0 indicating a finished boot.</font>\n\n\n<font color=\"#000000\"><i>Environment</i>\nencodes the environment block passed to all executed\nservices. It may be altered with bus calls such as\n<b>SetEnvironment()</b> (see above).</font>\n\n\n<font color=\"#000000\"><i>UnitPath</i>\nencodes the currently active unit file search path. It is an\narray of file system paths encoded as strings.</font>\n\n\n<font color=\"#000000\"><i>Virtualization</i>\ncontains a short ID string describing the virtualization\ntechnology the system runs in. On bare-metal hardware this\nis the empty string. Otherwise, it contains an identifier\nsuch as &quot;kvm&quot;, &quot;vmware&quot; and so on. For a\nfull list of IDs see <a href=\"https://man.page/1/systemd-detect-virt\">systemd-detect-virt(1)</a>. Note\nthat only the &quot;innermost&quot; virtualization\ntechnology is exported here. This detects both full-machine\nvirtualizations (VMs) and shared-kernel virtualization\n(containers).</font>\n\n\n<font color=\"#000000\"><i>Architecture</i>\ncontains a short ID string describing the architecture the\nsystemd instance is running on. This follows the same\nvocabulary as <i>ConditionArchitectures=</i>.</font>\n\n\n<font color=\"#000000\"><i>ControlGroup</i>\ncontains the root control group path of this system manager.\nNote that the root path is encoded as the empty string here\n(not as &quot;/&quot;!), so that it can be appended to\n/sys/fs/cgroup/systemd easily. This value will be set to the\nempty string for the host instance and some other string for\ncontainer instances.</font>\n\n\n<font color=\"#000000\"><b>Security</b>\n<br>\nRead access is generally granted to all clients.\nAdditionally, for unprivileged clients, some operations are\nallowed through the polkit privilege system. Operations\nwhich modify unit state (<b>StartUnit()</b>,\n<b>StopUnit()</b>, <b>KillUnit()</b>, <b>RestartUnit()</b>\nand similar, <b>SetProperty()</b>) require\norg.freedesktop.systemd1.manage-units. Operations which\nmodify unit file enablement state (<b>EnableUnitFiles()</b>,\n<b>DisableUnitFiles()</b>,\n<b>EnableUnitFilesWithFlags()</b>,\n<b>DisableUnitFilesWithFlags()</b>,\n<b>ReenableUnitFiles()</b>, <b>LinkUnitFiles()</b>,\n<b>PresetUnitFiles</b>, <b>MaskUnitFiles</b>, and similar)\nrequire org.freedesktop.systemd1.manage-unit-files.\nOperations which modify the exported environment\n(<b>SetEnvironment()</b>, <b>UnsetEnvironment()</b>,\n<b>UnsetAndSetEnvironment()</b>) require\norg.freedesktop.systemd1.set-environment. <b>Reload()</b>\nand <b>Reexecute()</b> require\norg.freedesktop.systemd1.reload-daemon.</font>\n\n<h2>UNIT OBJECTS\n<a name=\"UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/avahi_2ddaemon_2eservice {\n<br>\ninterface org.freedesktop.systemd1.Unit { <br>\nmethods: <br>\nStart(in s mode, <br>\nout o job); <br>\nStop(in s mode, <br>\nout o job); <br>\nReload(in s mode, <br>\nout o job); <br>\nRestart(in s mode, <br>\nout o job); <br>\nTryRestart(in s mode, <br>\nout o job); <br>\nReloadOrRestart(in s mode, <br>\nout o job); <br>\nReloadOrTryRestart(in s mode, <br>\nout o job); <br>\nEnqueueJob(in s job_type, <br>\nin s job_mode, <br>\nout u job_id, <br>\nout o job_path, <br>\nout s unit_id, <br>\nout o unit_path, <br>\nout s job_type, <br>\nout a(uosos) affected_jobs); <br>\nKill(in s whom, <br>\nin i signal); <br>\nResetFailed(); <br>\nSetProperties(in b runtime, <br>\nin a(sv) properties); <br>\nRef(); <br>\nUnref(); <br>\nClean(in as mask); <br>\nFreeze(); <br>\nThaw(); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Id = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Names = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Following = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Requires = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Requisite = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Wants = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as BindsTo = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PartOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RequiredBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RequisiteOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as WantedBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as BoundBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConsistsOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Conflicts = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConflictedBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Before = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as After = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as OnFailure = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as OnFailureOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as OnSuccess = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as OnSuccessOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Triggers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as TriggeredBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PropagatesReloadTo = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReloadPropagatedFrom = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PropagatesStopTo = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StopPropagatedFrom = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as JoinsNamespaceOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SliceOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RequiresMountsFor = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Documentation = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Description = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LoadState = '...'; <br>\nreadonly s ActiveState = '...'; <br>\nreadonly s FreezerState = '...'; <br>\nreadonly s SubState = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s FragmentPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SourcePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as DropInPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s UnitFileState = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s UnitFilePreset = '...'; <br>\nreadonly t StateChangeTimestamp = ...; <br>\nreadonly t StateChangeTimestampMonotonic = ...; <br>\nreadonly t InactiveExitTimestamp = ...; <br>\nreadonly t InactiveExitTimestampMonotonic = ...; <br>\nreadonly t ActiveEnterTimestamp = ...; <br>\nreadonly t ActiveEnterTimestampMonotonic = ...; <br>\nreadonly t ActiveExitTimestamp = ...; <br>\nreadonly t ActiveExitTimestampMonotonic = ...; <br>\nreadonly t InactiveEnterTimestamp = ...; <br>\nreadonly t InactiveEnterTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanStart = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanStop = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanReload = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanIsolate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CanClean = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanFreeze = ...; <br>\nreadonly (uo) Job = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b StopWhenUnneeded = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RefuseManualStart = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RefuseManualStop = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b AllowIsolate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultDependencies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s OnSuccessJobMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s OnFailureJobMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreOnIsolate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b NeedDaemonReload = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as Markers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t JobTimeoutUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t JobRunningTimeoutUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s JobTimeoutAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s JobTimeoutRebootArgument = '...'; <br>\nreadonly b ConditionResult = ...; <br>\nreadonly b AssertResult = ...; <br>\nreadonly t ConditionTimestamp = ...; <br>\nreadonly t ConditionTimestampMonotonic = ...; <br>\nreadonly t AssertTimestamp = ...; <br>\nreadonly t AssertTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sbbsi) Conditions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sbbsi) Asserts = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (ss) LoadError = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Transient = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Perpetual = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t StartLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StartLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StartLimitAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s FailureAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FailureActionExitStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SuccessAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SuccessActionExitStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RebootArgument = '...'; <br>\nreadonly ay InvocationID = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s CollectMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as Refs = ['...', ...]; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Methods\n<br>\nStart()</b>, <b>Stop()</b>, <b>Reload()</b>,\n<b>Restart()</b>, <b>TryRestart()</b>,\n<b>ReloadOrRestart()</b>, <b>ReloadOrTryRestart()</b>,\n<b>Kill()</b>, <b>ResetFailed()</b>, and\n<b>SetProperties()</b> implement the same operation as the\nrespective methods on the Manager object (see above).\nHowever, these methods operate on the unit object and hence\ndo not take a unit name parameter. Invoking the methods\ndirectly on the Manager object has the advantage of not\nrequiring a <b>GetUnit()</b> call to get the unit object for\na specific unit name. Calling the methods on the Manager\nobject is hence a round trip optimization.</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<i><br>\nId</i> contains the primary name of the unit.</font>\n\n\n<font color=\"#000000\"><i>Names</i>\ncontains all names of the unit, including the primary name\nthat is also exposed in <i>Id</i>.</font>\n\n\n<font color=\"#000000\"><i>Following</i>\neither contains the empty string or contains the name of\nanother unit that this unit follows in state. This is used\nfor some device units which reflect the unit state machine\nof another unit, and which other unit this is might possibly\nchange.</font>\n\n\n<font color=\"#000000\"><i>Requires</i>,\n<i>RequiresOverridable</i>, <i>Requisite</i>,\n<i>RequisiteOverridable</i>, <i>Wants</i>, <i>BindsTo</i>,\n<i>RequiredBy</i>, <i>RequiredByOverridable</i>,\n<i>WantedBy</i>, <i>BoundBy</i>, <i>Conflicts</i>,\n<i>ConflictedBy</i>, <i>Before</i>, <i>After</i>,\n<i>OnFailure</i>, <i>Triggers</i>, <i>TriggeredBy</i>,\n<i>PropagatesReloadTo</i>, and <i>RequiresMountsFor</i>\ncontain arrays which encode the dependencies and their\ninverse dependencies (where this applies) as configured in\nthe unit file or determined automatically.</font>\n\n\n<font color=\"#000000\"><i>Description</i>\ncontains the human readable description string for the\nunit.</font>\n\n\n<font color=\"#000000\"><i>SourcePath</i>\ncontains the path to a configuration file this unit is\nautomatically generated from in case it is not a native unit\n(in which case it contains the empty string). For example,\nall mount units generated from /etc/fstab have this field\nset to /etc/fstab.</font>\n\n\n<font color=\"#000000\"><i>Documentation</i>\ncontains a string array with URLs of documentation for this\nunit.</font>\n\n\n<font color=\"#000000\"><i>LoadState</i>\ncontains a state value that reflects whether the\nconfiguration file of this unit has been loaded. The\nfollowing states are currently defined: &quot;loaded&quot;,\n&quot;error&quot;, and &quot;masked&quot;.\n&quot;loaded&quot; indicates that the configuration was\nsuccessfully loaded. &quot;error&quot; indicates that the\nconfiguration failed to load. The <i>LoadError</i> field\n(see below) contains information about the cause of this\nfailure. &quot;masked&quot; indicates that the unit is\ncurrently masked out (i.e. symlinked to /dev/null or empty).\nNote that the <i>LoadState</i> is fully orthogonal to the\n<i>ActiveState</i> (see below) as units without valid loaded\nconfiguration might be active (because configuration might\nhave been reloaded at a time where a unit was already\nactive).</font>\n\n\n<font color=\"#000000\"><i>ActiveState</i>\ncontains a state value that reflects whether the unit is\ncurrently active or not. The following states are currently\ndefined: &quot;active&quot;, &quot;reloading&quot;,\n&quot;inactive&quot;, &quot;failed&quot;,\n&quot;activating&quot;, and &quot;deactivating&quot;.\n&quot;active&quot; indicates that unit is active\n(obviously...). &quot;reloading&quot; indicates that the\nunit is active and currently reloading its configuration.\n&quot;inactive&quot; indicates that it is inactive and the\nprevious run was successful or no previous run has taken\nplace yet. &quot;failed&quot; indicates that it is inactive\nand the previous run was not successful (more information\nabout the reason for this is available on the unit type\nspecific interfaces, for example for services in the\n<i>Result</i> property, see below). &quot;activating&quot;\nindicates that the unit has previously been inactive but is\ncurrently in the process of entering an active state.\nConversely &quot;deactivating&quot; indicates that the unit\nis currently in the process of deactivation.</font>\n\n\n<font color=\"#000000\"><i>SubState</i>\nencodes states of the same state machine that\n<i>ActiveState</i> covers, but knows more fine-grained\nstates that are unit-type-specific. Where <i>ActiveState</i>\nonly covers six high-level states, <i>SubState</i> covers\npossibly many more low-level unit-type-specific states that\nare mapped to the six high-level states. Note that multiple\nlow-level states might map to the same high-level state, but\nnot vice versa. Not all high-level states have low-level\ncounterparts on all unit types. At this point the low-level\nstates are not documented here, and are more likely to be\nextended later on than the common high-level states\nexplained above.</font>\n\n\n<font color=\"#000000\"><i>FragmentPath</i>\ncontains the unit file path this unit was read from, if\nthere is one (if not, it contains the empty\nstring).</font>\n\n\n<font color=\"#000000\"><i>UnitFileState</i>\nencodes the install state of the unit file of\n<i>FragmentPath</i>. It currently knows the following\nstates: &quot;enabled&quot;, &quot;enabled-runtime&quot;,\n&quot;linked&quot;, &quot;linked-runtime&quot;,\n&quot;masked&quot;, &quot;masked-runtime&quot;,\n&quot;static&quot;, &quot;disabled&quot;, and\n&quot;invalid&quot;. &quot;enabled&quot; indicates that a\nunit file is permanently enabled. &quot;enable-runtime&quot;\nindicates the unit file is only temporarily enabled and will\nno longer be enabled after a reboot (that means, it is\nenabled via /run/ symlinks, rather than /etc/).\n&quot;linked&quot; indicates that a unit is linked into\n/etc/ permanently. &quot;linked-runtime&quot; indicates that\na unit is linked into /run/ temporarily (until the next\nreboot). &quot;masked&quot; indicates that the unit file is\nmasked permanently. &quot;masked-runtime&quot; indicates\nthat it is masked in /run/ temporarily (until the next\nreboot). &quot;static&quot; indicates that the unit is\nstatically enabled, i.e. always enabled and doesn't need to\nbe enabled explicitly. &quot;invalid&quot; indicates that it\ncould not be determined whether the unit file is\nenabled.</font>\n\n\n<font color=\"#000000\"><i>InactiveExitTimestamp</i>,\n<i>InactiveExitTimestampMonotonic</i>,\n<i>ActiveEnterTimestamp</i>,\n<i>ActiveEnterTimestampMonotonic</i>,\n<i>ActiveExitTimestamp</i>,\n<i>ActiveExitTimestampMonotonic</i>,\n<i>InactiveEnterTimestamp</i>, and\n<i>InactiveEnterTimestampMonotonic</i> contain\n<b>CLOCK_REALTIME</b> and <b>CLOCK_MONOTONIC</b> 64-bit\nmicrosecond timestamps of the last time a unit left the\ninactive state, entered the active state, exited the active\nstate, or entered an inactive state. These are the points in\ntime where the unit transitioned\n&quot;inactive&quot;/&quot;failed&quot; &acirc;\n&quot;activating&quot;, &quot;activating&quot; &acirc;\n&quot;active&quot;, &quot;active&quot; &acirc;\n&quot;deactivating&quot;, and finally\n&quot;deactivating&quot; &acirc;\n&quot;inactive&quot;/&quot;failed&quot;. The fields are 0 in\ncase such a transition has not yet been recorded on this\nboot.</font>\n\n\n<font color=\"#000000\"><i>CanStart</i>,\n<i>CanStop</i>, and <i>CanReload</i> encode as booleans\nwhether the unit supports the start, stop or reload\noperations. Even if a unit supports such an operation, the\nclient might not necessary have the necessary privileges to\nexecute them.</font>\n\n\n<font color=\"#000000\"><i>CanIsolate</i>\nencodes as a boolean whether the unit may be started in\nisolation mode.</font>\n\n\n<font color=\"#000000\"><i>Job</i>\nencodes the job ID and job object path of the job currently\nscheduled or executed for this unit, if there is any. If no\njob is scheduled or executed, the job id field will be\n0.</font>\n\n\n<font color=\"#000000\"><i>StopWhenUnneeded</i>,\n<i>RefuseManualStart</i>, <i>RefuseManualStop</i>,\n<i>AllowIsolate</i>, <i>DefaultDependencies</i>,\n<i>OnFailureIsolate</i>, <i>IgnoreOnIsolate</i>,\n<i>IgnoreOnSnapshot</i> map directly to the corresponding\nconfiguration booleans in the unit file.</font>\n\n\n<font color=\"#000000\"><i>DefaultControlGroup</i>\ncontains the main control group of this unit as a string.\nThis refers to a group in systemd's own\n&quot;name=systemd&quot; hierarchy, which systemd uses to\nwatch and manipulate the unit and all its\nprocesses.</font>\n\n\n<font color=\"#000000\"><i>NeedDaemonReload</i>\nis a boolean that indicates whether the configuration file\nthis unit is loaded from (i.e. <i>FragmentPath</i> or\n<i>SourcePath</i>) has changed since the configuration was\nread and hence whether a configuration reload is\nrecommended.</font>\n\n\n<font color=\"#000000\"><i>Markers</i>\nis an array of string flags that can be set using\n<b>SetUnitProperties()</b> to indicate that the service\nshould be reloaded or restarted. Currently known values are\n&quot;needs-restart&quot; and &quot;needs-reload&quot;.\nPackage scripts may use the first to mark units for later\nrestart when a new version of the package is installed.\nConfiguration management scripts may use the second to mark\nunits for a later reload when the configuration is adjusted.\nThose flags are not set by the manager, except to unset as\nappropriate when when the unit is stopped, restarted, or\nreloaded.</font>\n\n\n<font color=\"#000000\"><i>JobTimeoutUSec</i>\nmaps directly to the corresponding configuration setting in\nthe unit file.</font>\n\n\n<font color=\"#000000\"><i>ConditionTimestamp</i>\nand <i>ConditionTimestampMonotonic</i> contain the\n<b>CLOCK_REALTIME</b>/<b>CLOCK_MONOTONIC</b> microsecond\ntimestamps of the last time the configured conditions of the\nunit have been checked or 0 if they have never been checked.\nConditions are checked when a unit is requested to\nstart.</font>\n\n\n<font color=\"#000000\"><i>ConditionResult</i>\ncontains the condition result of the last time the\nconfigured conditions of this unit were checked.</font>\n\n\n<font color=\"#000000\"><i>Conditions</i>\ncontains all configured conditions of the unit. For each\ncondition, five fields are given: condition type (e.g.\n<i>ConditionPathExists</i>), whether the condition is a\ntrigger condition, whether the condition is reversed, the\nright hand side of the condition (e.g. the path in case of\n<i>ConditionPathExists</i>), and the status. The status can\nbe 0, in which case the condition hasn't been checked yet, a\npositive value, in which case the condition passed, or a\nnegative value, in which case the condition failed.\nCurrently only 0, +1, and -1 are used, but additional values\nmay be used in the future, retaining the meaning of\nzero/positive/negative values.</font>\n\n\n<font color=\"#000000\"><i>LoadError</i>\ncontains a pair of strings. If the unit failed to load (as\nencoded in <i>LoadState</i>, see above), then this will\ninclude a D-Bus error pair consisting of the error ID and an\nexplanatory human readable string of what happened. If it\nloaded successfully, this will be a pair of empty\nstrings.</font>\n\n\n<font color=\"#000000\"><i>Transient</i>\ncontains a boolean that indicates whether the unit was\ncreated as a transient unit (i.e. via\n<b>CreateTransientUnit()</b> on the manager\nobject).</font>\n\n\n<font color=\"#000000\"><b>Security</b>\n<br>\nSimilarly to methods on the Manager object, read-only access\nis allowed for everyone. All operations are allowed for\nclients with the <b>CAP_SYS_ADMIN</b> capability or when the\norg.freedesktop.systemd1.manage-units privilege is granted\nby polkit.</font>\n\n<h2>SERVICE UNIT OBJECTS\n<a name=\"SERVICE UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">All\nservice unit objects implement the\norg.freedesktop.systemd1.Service interface (described here)\nin addition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/avahi_2ddaemon_2eservice {\n<br>\ninterface org.freedesktop.systemd1.Service { <br>\nmethods: <br>\nBindMount(in s source, <br>\nin s destination, <br>\nin b read_only, <br>\nin b mkdir); <br>\nMountImage(in s source, <br>\nin s destination, <br>\nin b read_only, <br>\nin b mkdir, <br>\nin a(ss) options); <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Type = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Restart = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PIDFile = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NotifyAccess = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestartUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutStartUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutStopUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TimeoutAbortUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TimeoutStartFailureMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TimeoutStopFailureMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RuntimeMaxUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t WatchdogUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t WatchdogTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t WatchdogTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RootDirectoryStartOnly = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemainAfterExit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b GuessMainPID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (aiai) RestartPreventExitStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (aiai) RestartForceExitStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (aiai) SuccessExitStatus = ...; <br>\nreadonly u MainPID = ...; <br>\nreadonly u ControlPID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s BusName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u FileDescriptorStoreMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NFileDescriptorStore = ...; <br>\nreadonly s StatusText = '...'; <br>\nreadonly i StatusErrno = ...; <br>\nreadonly s Result = '...'; <br>\nreadonly s ReloadResult = '...'; <br>\nreadonly s CleanResult = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s USBFunctionDescriptors = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s USBFunctionStrings = '...'; <br>\nreadonly u UID = ...; <br>\nreadonly u GID = ...; <br>\nreadonly u NRestarts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s OOMPolicy = '...'; <br>\nreadonly t ExecMainStartTimestamp = ...; <br>\nreadonly t ExecMainStartTimestampMonotonic = ...; <br>\nreadonly t ExecMainExitTimestamp = ...; <br>\nreadonly t ExecMainExitTimestampMonotonic = ...; <br>\nreadonly u ExecMainPID = ...; <br>\nreadonly i ExecMainCode = ...; <br>\nreadonly i ExecMainStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecCondition = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecConditionEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStartPre = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStartPreEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStart = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStartEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStartPost = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStartPostEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecReload = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecReloadEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStop = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStopEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStopPost = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStopPostEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sb) EnvironmentFiles = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PassEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnsetEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s WorkingDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootImage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) RootImageOptions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHash = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHashSignature = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashSignaturePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootVerity = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sba(ss)) ExtensionImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssba(ss)) MountImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i OOMScoreAdjust = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CoredumpFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Nice = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingClass = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay CPUAffinity = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUAffinityFromNUMA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i NUMAPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay NUMAMask = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUSchedulingResetOnFork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NonBlocking = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay StandardInputData = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardErrorFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTYPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYReset = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVHangup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVTDisallocate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SyslogIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SyslogLevelPrefix = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogLevel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogFacility = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i LogLevelMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LogRateLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogRateLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly aay LogExtraFields = [[...], ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LogNamespace = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SecureBits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CapabilityBoundingSet = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AmbientCapabilities = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s User = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Group = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DynamicUser = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(say) SetCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) LoadCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SupplementaryGroups = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PAMName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadWritePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadOnlyPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as InaccessiblePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as NoExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t MountFlags = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateTmp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateDevices = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectClock = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelTunables = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelModules = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelLogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectControlGroups = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateNetwork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateUsers = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateMounts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectHome = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectSystem = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SameProcessGroup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SELinuxContext = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) AppArmorProfile = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SmackProcessLabel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreSIGPIPE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoNewPrivileges = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SystemCallArchitectures = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SystemCallErrorNumber = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallLog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Personality = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LockPersonality = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) RestrictAddressFamilies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimeDirectoryPreserve = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u RuntimeDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RuntimeDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StateDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StateDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u CacheDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CacheDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogsDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as LogsDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u ConfigurationDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConfigurationDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutCleanUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MemoryDenyWriteExecute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictRealtime = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictSUIDSGID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestrictNamespaces = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindReadOnlyPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) TemporaryFileSystem = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MountAPIVFS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KeyringMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectProc = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProcSubset = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectHostname = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NetworkNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IPCNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Methods\n<br>\nBindMount()</b> and <b>MountImage()</b> implement the same\noperations as the respective methods on the Manager object\n(see above). However, these methods operate on the service\nobject and hence do not take a unit name parameter. Invoking\nthe methods directly on the Manager object has the advantage\nof not requiring a <b>GetUnit()</b> call to get the unit\nobject for a specific unit name. Calling the methods on the\nManager object is hence a round trip\noptimization.</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties of the Service interface map directly to the\ncorresponding settings in service unit files. For the sake\nof brevity, here's a list of all exceptions only:</font>\n\n\n<font color=\"#000000\"><i>TimeoutStartUSec</i>,\n<i>TimeoutStopUSec</i> and <i>TimeoutAbortUSec</i> contain\nthe start, stop and abort timeouts, in microseconds. Note\nthe slight difference in naming when compared to the\nmatching unit file settings (see <b>systemd.service</b>(7)):\nthese bus properties strictly use microseconds (and thus are\nsuffixed <i>...USec</i>) while the unit file settings\ndefault to a time unit of seconds (and thus are suffixed\n<i>...Sec</i>), unless a different unit is explicitly\nspecified. This reflects that fact that internally the\nservice manager deals in microsecond units only, and the bus\nproperties are a relatively low-level (binary) concept\nexposing this. The unit file settings on the other hand are\nrelatively high-level (string-based) concepts and thus\nsupport more user friendly time specifications which default\nto second time units but allow other units too, if\nspecified.</font>\n\n\n<font color=\"#000000\"><i>WatchdogTimestamp</i>\nand <i>WatchdogTimestampMonotonic</i> contain\n<b>CLOCK_REALTIME</b>/<b>CLOCK_MONOTONIC</b> microsecond\ntimestamps of the last watchdog ping received from the\nservice, or 0 if none was ever received.</font>\n\n\n<font color=\"#000000\"><i>ExecStartPre</i>,\n<i>ExecStart</i>, <i>ExecStartPost</i>, <i>ExecReload</i>,\n<i>ExecStop</i>, and <i>ExecStop</i> are arrays of\nstructures where each struct contains: the binary path to\nexecute; an array with all arguments to pass to the executed\ncommand, starting with argument 0; a boolean whether it\nshould be considered a failure if the process exits\nuncleanly; two pairs of\n<b>CLOCK_REALTIME</b>/<b>CLOCK_MONOTONIC</b> microsecond\ntimestamps when the process began and finished running the\nlast time, or 0 if it never ran or never finished running;\nthe PID of the process, or 0 if it has not run yet; the exit\ncode and status of the last run. This field hence maps more\nor less to the corresponding setting in the service unit\nfile but is augmented with runtime data.</font>\n\n\n<font color=\"#000000\"><i>LimitCPU</i>\n(and related properties) map more or less directly to the\ncorresponding settings in the service unit files except that\nif they aren't set, their value is 18446744073709551615\n(i.e. -1).</font>\n\n\n<font color=\"#000000\"><i>Capabilities</i>\ncontains the configured capabilities, as formatted with\n<a href=\"https://man.page/3/cap_to_text\">cap_to_text(3)</a>.</font>\n\n\n<font color=\"#000000\"><i>SecureBits</i>,\n<i>CapabilityBoundingSet</i>, <i>MountFlags</i> also\ncorrespond to the configured settings of the unit files, but\ninstead of being formatted as strings, they are encoded as\nthe actual binary flags they are.</font>\n\n\n<font color=\"#000000\"><i>ExecMainStartTimestamp</i>,\n<i>ExecMainStartTimestampMonotonic</i>,\n<i>ExecMainExitTimestamp</i>,\n<i>ExecMainExitTimestampMonotonic</i>, <i>ExecMainPID</i>,\n<i>ExecMainCode</i>, <i>ExecMainStatus</i> contain\ninformation about the main process of the service as far as\nit is known. This is often the same runtime information that\nis stored in <i>ExecStart</i>. However, it deviates for\n<i>Type=forking</i> services where the main process of the\nservice is not forked off systemd directly. These fields\neither contain information of the last run of the process or\nof the current running process.</font>\n\n\n<font color=\"#000000\"><i>MainPID</i>\nand <i>ControlPID</i> contain the main and control PID of\nthe service. The main PID is the current main PID of the\nservice and is 0 when the service currently has no main PID.\nThe control PID is the PID of the current start/stop/reload\nprocess running and is 0 if no such process is currently\nrunning. That means that <i>ExecMainPID</i> and\n<i>MainPID</i> differ in the way that the latter immediately\nreflects whether a main process is currently running while\nthe latter possible contains information collected from the\nlast run even if the process is no longer around.</font>\n\n\n<font color=\"#000000\"><i>StatusText</i>\ncontains the status text passed to the service manager via a\ncall to <a href=\"https://man.page/3/sd_notify\">sd_notify(3)</a>. This may be used by services to\ninform the service manager about its internal state with a\nnice explanatory string.</font>\n\n\n<font color=\"#000000\"><i>Result</i>\nencodes the execution result of the last run of the service.\nIt is useful to determine the reason a service failed if it\nis in the &quot;failed&quot; state (see <i>ActiveState</i>\nabove). The following values are currently known:\n&quot;success&quot; is set if the unit didn't fail.\n&quot;resources&quot; indicates that not enough resources\nwere available to fork off and execute the service\nprocesses. &quot;timeout&quot; indicates that a timeout\noccurred while executing a service operation.\n&quot;exit-code&quot; indicates that a service process\nexited with an unclean exit code. &quot;signal&quot;\nindicates that a service process exited with an uncaught\nsignal. &quot;core-dump&quot; indicates that a service\nprocess exited uncleanly and dumped core.\n&quot;watchdog&quot; indicates that a service did not send\nout watchdog ping messages often enough.\n&quot;start-limit&quot; indicates that a service has been\nstarted too frequently in a specific time frame (as\nconfigured in <i>StartLimitInterval</i>,\n<i>StartLimitBurst</i>).</font>\n\n\n<font color=\"#000000\"><i>ControlGroup</i>\nindicates the control group path the processes of this\nservice unit are placed in.</font>\n\n\n<font color=\"#000000\">The\nfollowing properties map 1:1 to corresponding settings in\nthe unit file: <i>RootDirectory RootImage RootImageOptions\nRootVerity RootHash RootHashSignature MountImages\nExtensionImages</i> see systemd.exec(5) for their\nmeaning.</font>\n\n\n<font color=\"#000000\"><i>MemoryAvailable</i>\nindicates how much unused memory is available to the unit\nbefore the &quot;MemoryMax&quot; or &quot;MemoryHigh&quot;\n(whichever is lower) limit set by the cgroup memory\ncontroller is reached. It will take into consideration\nlimits on all parent slices, other than the limits set on\nthe unit itself.</font>\n\n<h2>SOCKET UNIT OBJECTS\n<a name=\"SOCKET UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/avahi_2ddaemon_2esocket {\n<br>\ninterface org.freedesktop.systemd1.Socket { <br>\nmethods: <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s BindIPv6Only = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u Backlog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s BindToDevice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SocketUser = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SocketGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u SocketMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Accept = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b FlushPending = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Writable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b KeepAlive = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t KeepAliveTimeUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t KeepAliveIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u KeepAliveProbes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DeferAcceptUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoDelay = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Priority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t ReceiveBuffer = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SendBuffer = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IPTOS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IPTTL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t PipeSize = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b FreeBind = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Transparent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Broadcast = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PassCredentials = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PassSecurity = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PassPacketInfo = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Timestamping = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveOnStop = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) Listen = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Symlinks = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Mark = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u MaxConnections = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u MaxConnectionsPerSource = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly x MessageQueueMaxMessages = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly x MessageQueueMessageSize = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TCPCongestion = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ReusePort = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SmackLabel = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SmackLabelIPIn = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SmackLabelIPOut = '...'; <br>\nreadonly u ControlPID = ...; <br>\nreadonly s Result = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NConnections = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NAccepted = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NRefused = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s FileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SocketProtocol = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TriggerLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u TriggerLimitBurst = ...; <br>\nreadonly u UID = ...; <br>\nreadonly u GID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStartPre = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStartPost = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStopPre = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStopPost = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sb) EnvironmentFiles = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PassEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnsetEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s WorkingDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootImage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) RootImageOptions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHash = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHashSignature = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashSignaturePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootVerity = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sba(ss)) ExtensionImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssba(ss)) MountImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i OOMScoreAdjust = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CoredumpFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Nice = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingClass = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay CPUAffinity = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUAffinityFromNUMA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i NUMAPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay NUMAMask = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUSchedulingResetOnFork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NonBlocking = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay StandardInputData = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardErrorFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTYPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYReset = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVHangup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVTDisallocate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SyslogIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SyslogLevelPrefix = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogLevel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogFacility = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i LogLevelMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LogRateLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogRateLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly aay LogExtraFields = [[...], ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LogNamespace = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SecureBits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CapabilityBoundingSet = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AmbientCapabilities = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s User = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Group = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DynamicUser = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(say) SetCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) LoadCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SupplementaryGroups = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PAMName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadWritePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadOnlyPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as InaccessiblePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as NoExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t MountFlags = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateTmp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateDevices = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectClock = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelTunables = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelModules = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelLogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectControlGroups = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateNetwork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateUsers = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateMounts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectHome = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectSystem = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SameProcessGroup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SELinuxContext = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) AppArmorProfile = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SmackProcessLabel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreSIGPIPE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoNewPrivileges = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SystemCallArchitectures = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SystemCallErrorNumber = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallLog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Personality = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LockPersonality = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) RestrictAddressFamilies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimeDirectoryPreserve = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u RuntimeDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RuntimeDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StateDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StateDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u CacheDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CacheDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogsDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as LogsDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u ConfigurationDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConfigurationDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutCleanUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MemoryDenyWriteExecute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictRealtime = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictSUIDSGID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestrictNamespaces = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindReadOnlyPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) TemporaryFileSystem = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MountAPIVFS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KeyringMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectProc = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProcSubset = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectHostname = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NetworkNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IPCNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nMost of the properties map directly to the corresponding\nsettings in socket unit files. As socket units can include\n<i>ExecStartPre</i> (and similar) fields which contain\ninformation about processes to execute. They also share most\nof the fields related to the execution context that Service\nobjects expose (see above).</font>\n\n\n<font color=\"#000000\">In\naddition to these properties there are the\nfollowing:</font>\n\n\n<font color=\"#000000\"><i>NAccepted</i>\ncontains the accumulated number of connections ever accepted\non this socket. This only applies to sockets with\n<i>Accept</i> set to &quot;yes&quot;, i.e. those where\nsystemd is responsible for accepted connections.</font>\n\n\n<font color=\"#000000\">Similarly\n<i>NConnections</i> contains the number of currently open\nconnections on this socket. It only applies only to socket\nunits with <i>Accept</i> set to &quot;yes&quot;.</font>\n\n\n<font color=\"#000000\"><i>Result</i>\nencodes the reason why a socket unit failed if it is in the\n&quot;failed&quot; state (see <i>ActiveState</i> above). The\nvalues &quot;success&quot;, &quot;resources&quot;,\n&quot;timeout&quot;, &quot;exit-code&quot;,\n&quot;signal&quot; and &quot;core-dump&quot; have the same\nmeaning as they have for the corresponding field of service\nunits (see above). In addition to that, the value\n&quot;service-failed-permanent&quot; indicates that the\nservice of this socket failed continuously.</font>\n\n\n<font color=\"#000000\"><i>FlushPending</i>\nspecifies whether to flush the socket just before entering\nthe listening state. This setting only applies to sockets\nwith <i>Accept=</i> set to &quot;no&quot;.</font>\n\n<h2>TARGET UNIT OBJECTS\n<a name=\"TARGET UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/basic_2etarget { <br>\ninterface org.freedesktop.systemd1.Target { <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\">Target\nunits have neither type-specific methods nor\nproperties.</font>\n\n<h2>DEVICE UNIT OBJECTS\n<a name=\"DEVICE UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">All\ndevice unit objects implement the\norg.freedesktop.systemd1.Device interface (described here)\nin addition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/dev_2dttyS0_2edevice { <br>\ninterface org.freedesktop.systemd1.Device { <br>\nproperties: <br>\nreadonly s SysFSPath = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nDevice units only expose a single type-specific\nproperty:</font>\n\n\n<font color=\"#000000\"><i>SysFSPath</i>\ncontains the sysfs path of the kernel device this object\ncorresponds to.</font>\n\n<h2>MOUNT UNIT OBJECTS\n<a name=\"MOUNT UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">All\nmount unit objects implement the\norg.freedesktop.systemd1.Mount interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/home_2emount { <br>\ninterface org.freedesktop.systemd1.Mount { <br>\nmethods: <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Where = '...'; <br>\nreadonly s What = '...'; <br>\nreadonly s Options = '...'; <br>\nreadonly s Type = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutUSec = ...; <br>\nreadonly u ControlPID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SloppyOptions = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LazyUnmount = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ForceUnmount = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ReadWriteOnly = ...; <br>\nreadonly s Result = '...'; <br>\nreadonly u UID = ...; <br>\nreadonly u GID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecMount = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecUnmount = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecRemount = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sb) EnvironmentFiles = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PassEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnsetEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s WorkingDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootImage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) RootImageOptions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHash = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHashSignature = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashSignaturePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootVerity = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sba(ss)) ExtensionImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssba(ss)) MountImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i OOMScoreAdjust = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CoredumpFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Nice = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingClass = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay CPUAffinity = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUAffinityFromNUMA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i NUMAPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay NUMAMask = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUSchedulingResetOnFork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NonBlocking = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay StandardInputData = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardErrorFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTYPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYReset = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVHangup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVTDisallocate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SyslogIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SyslogLevelPrefix = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogLevel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogFacility = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i LogLevelMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LogRateLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogRateLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly aay LogExtraFields = [[...], ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LogNamespace = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SecureBits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CapabilityBoundingSet = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AmbientCapabilities = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s User = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Group = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DynamicUser = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(say) SetCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) LoadCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SupplementaryGroups = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PAMName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadWritePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadOnlyPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as InaccessiblePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as NoExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t MountFlags = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateTmp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateDevices = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectClock = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelTunables = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelModules = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelLogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectControlGroups = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateNetwork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateUsers = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateMounts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectHome = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectSystem = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SameProcessGroup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SELinuxContext = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) AppArmorProfile = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SmackProcessLabel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreSIGPIPE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoNewPrivileges = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SystemCallArchitectures = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SystemCallErrorNumber = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallLog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Personality = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LockPersonality = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) RestrictAddressFamilies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimeDirectoryPreserve = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u RuntimeDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RuntimeDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StateDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StateDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u CacheDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CacheDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogsDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as LogsDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u ConfigurationDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConfigurationDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutCleanUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MemoryDenyWriteExecute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictRealtime = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictSUIDSGID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestrictNamespaces = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindReadOnlyPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) TemporaryFileSystem = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MountAPIVFS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KeyringMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectProc = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProcSubset = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectHostname = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NetworkNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IPCNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nMost of the properties map directly to the corresponding\nsettings in mount unit files. As mount units invoke the\n/usr/bin/mount command, their bus objects include implicit\n<i>ExecMount</i> (and similar) fields which contain\ninformation about processes to execute. They also share most\nof the fields related to the execution context that Service\nobjects expose (see above). In addition to these properties\nthere are the following:</font>\n\n\n<font color=\"#000000\"><i>ControlPID</i>\ncontains the PID of the currently running /usr/bin/mount or\n/usr/bin/umount command if there is one running, otherwise\n0.</font>\n\n\n<font color=\"#000000\"><i>Result</i>\ncontains a value explaining why a mount unit failed if it\nfailed. It can take the values &quot;success&quot;,\n&quot;resources&quot;, &quot;timeout&quot;,\n&quot;exit-code&quot;, &quot;signal&quot;, or\n&quot;core-dump&quot; which have the identical meaning as\nthe corresponding values of the corresponding field of\nservice unit objects (see above).</font>\n\n<h2>AUTOMOUNT UNIT OBJECTS\n<a name=\"AUTOMOUNT UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">All\nautomount unit objects implement the\norg.freedesktop.systemd1.Automount interface (described\nhere) in addition to the generic\norg.freedesktop.systemd1.Unit interface (see\nabove).</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/proc_2dsys_2dfs_2dbinfmt_5fmisc_2eautomount\n{ <br>\ninterface org.freedesktop.systemd1.Automount { <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Where = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DirectoryMode = ...; <br>\nreadonly s Result = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutIdleUSec = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nMost of the properties map directly to the corresponding\nsettings in the automount unit files.</font>\n\n\n<font color=\"#000000\"><i>Result</i>\nknows the values &quot;success&quot; and\n&quot;resources&quot; at this time. They have the same\nmeanings as the corresponding values of the corresponding\nfield of the Service object.</font>\n\n<h2>TIMER UNIT OBJECTS\n<a name=\"TIMER UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">All\ntimer unit objects implement the\norg.freedesktop.systemd1.Timer interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/systemd_2dtmpfiles_2dclean_2etimer\n{ <br>\ninterface org.freedesktop.systemd1.Timer { <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Unit = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(stt) TimersMonotonic = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sst) TimersCalendar = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b OnClockChange = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b OnTimezoneChange = ...; <br>\nreadonly t NextElapseUSecRealtime = ...; <br>\nreadonly t NextElapseUSecMonotonic = ...; <br>\nreadonly t LastTriggerUSec = ...; <br>\nreadonly t LastTriggerUSecMonotonic = ...; <br>\nreadonly s Result = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AccuracyUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RandomizedDelayUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b FixedRandomDelay = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Persistent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b WakeSystem = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemainAfterElapse = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<i><br>\nUnit</i> contains the name of the unit to activate when the\ntimer elapses.</font>\n\n\n<font color=\"#000000\"><i>TimersMonotonic</i>\ncontains an array of structs that contain information about\nall monotonic timers of this timer unit. The structs contain\na string identifying the timer base, which is one of\n&quot;OnActiveUSec&quot;, &quot;OnBootUSec&quot;,\n&quot;OnStartupUSec&quot;, &quot;OnUnitActiveUSec&quot;, or\n&quot;OnUnitInactiveUSec&quot; which correspond to the\nsettings of the same names in the timer unit files; the\nmicrosecond offset from this timer base in monotonic time;\nthe next elapsation point on the <b>CLOCK_MONOTONIC</b>\nclock, relative to its epoch.</font>\n\n\n<font color=\"#000000\"><i>TimersCalendar</i>\ncontains an array of structs that contain information about\nall realtime/calendar timers of this timer unit. The structs\ncontain a string identifying the timer base, which may only\nbe &quot;OnCalendar&quot; for now; the calendar\nspecification string; the next elapsation point on the\n<b>CLOCK_REALTIME</b> clock, relative to its\nepoch.</font>\n\n\n<font color=\"#000000\"><i>NextElapseUSecRealtime</i>\ncontains the next elapsation point on the\n<b>CLOCK_REALTIME</b> clock in miscroseconds since the\nepoch, or 0 if this timer event does not include at least\none calendar event.</font>\n\n\n<font color=\"#000000\">Similarly,\n<i>NextElapseUSecMonotonic</i> contains the next elapsation\npoint on the <b>CLOCK_MONOTONIC</b> clock in microseconds\nsince the epoch, or 0 if this timer event does not include\nat least one monotonic event.</font>\n\n\n<font color=\"#000000\"><i>Result</i>\nknows the values &quot;success&quot; and\n&quot;resources&quot; with the same meanings as the matching\nvalues of the corresponding property of the service\ninterface.</font>\n\n<h2>SWAP UNIT OBJECTS\n<a name=\"SWAP UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">All\nswap unit objects implement the\norg.freedesktop.systemd1.Swap interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/dev_2dsda3_2eswap { <br>\ninterface org.freedesktop.systemd1.Swap { <br>\nmethods: <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\nreadonly s What = '...'; <br>\nreadonly i Priority = ...; <br>\nreadonly s Options = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutUSec = ...; <br>\nreadonly u ControlPID = ...; <br>\nreadonly s Result = '...'; <br>\nreadonly u UID = ...; <br>\nreadonly u GID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecActivate = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecDeactivate = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sb) EnvironmentFiles = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PassEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnsetEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s WorkingDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootImage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) RootImageOptions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHash = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHashSignature = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashSignaturePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootVerity = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sba(ss)) ExtensionImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssba(ss)) MountImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i OOMScoreAdjust = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CoredumpFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Nice = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingClass = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay CPUAffinity = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUAffinityFromNUMA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i NUMAPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay NUMAMask = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUSchedulingResetOnFork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NonBlocking = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay StandardInputData = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardErrorFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTYPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYReset = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVHangup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVTDisallocate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SyslogIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SyslogLevelPrefix = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogLevel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogFacility = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i LogLevelMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LogRateLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogRateLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly aay LogExtraFields = [[...], ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LogNamespace = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SecureBits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CapabilityBoundingSet = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AmbientCapabilities = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s User = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Group = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DynamicUser = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(say) SetCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) LoadCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SupplementaryGroups = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PAMName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadWritePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadOnlyPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as InaccessiblePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as NoExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t MountFlags = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateTmp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateDevices = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectClock = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelTunables = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelModules = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelLogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectControlGroups = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateNetwork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateUsers = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateMounts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectHome = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectSystem = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SameProcessGroup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SELinuxContext = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) AppArmorProfile = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SmackProcessLabel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreSIGPIPE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoNewPrivileges = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SystemCallArchitectures = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SystemCallErrorNumber = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallLog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Personality = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LockPersonality = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) RestrictAddressFamilies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimeDirectoryPreserve = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u RuntimeDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RuntimeDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StateDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StateDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u CacheDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CacheDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogsDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as LogsDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u ConfigurationDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConfigurationDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutCleanUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MemoryDenyWriteExecute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictRealtime = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictSUIDSGID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestrictNamespaces = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindReadOnlyPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) TemporaryFileSystem = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MountAPIVFS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KeyringMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectProc = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProcSubset = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectHostname = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NetworkNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IPCNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nMost of the properties map directly to the corresponding\nsettings in swap unit files. As mount units invoke the\n<b>swapon</b>(8) command, their bus objects include implicit\n<i>ExecActivate</i> (and similar) fields which contain\ninformation about processes to execute. They also share most\nof the fields related to the execution context that Service\nobjects expose (see above). In addition to these properties\nthere are the following:</font>\n\n\n<font color=\"#000000\"><i>ControlPID</i>\ncontains the PID of the currently running <b>swapon</b>(8)\nor <b>swapoff</b>(8) command if there is one running,\notherwise 0.</font>\n\n\n<font color=\"#000000\"><i>Result</i>\ncontains a value explaining why a mount unit failed if it\nfailed. It can take the values &quot;success&quot;,\n&quot;resources&quot;, &quot;timeout&quot;,\n&quot;exit-code&quot;, &quot;signal&quot;, or\n&quot;core-dump&quot; which have the identical meanings as\nthe corresponding values of the corresponding field of\nservice unit objects (see above).</font>\n\n<h2>PATH UNIT OBJECTS\n<a name=\"PATH UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/cups_2epath { <br>\ninterface org.freedesktop.systemd1.Path { <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Unit = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) Paths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MakeDirectory = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DirectoryMode = ...; <br>\nreadonly s Result = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties correspond directly with the matching\nsettings in path unit files.</font>\n\n\n<font color=\"#000000\">The\nothers:</font>\n\n\n<font color=\"#000000\"><i>Paths</i>\ncontains an array of structs. Each struct contains the\ncondition to watch, which can be one of\n&quot;PathExists&quot;, &quot;PathExistsGlob&quot;,\n&quot;PathChanged&quot;, &quot;PathModified&quot;, or\n&quot;DirectoryNotEmpty&quot; which correspond directly to\nthe matching settings in the path unit files; and the path\nto watch, possibly including glob expressions.</font>\n\n\n<font color=\"#000000\"><i>Result</i>\ncontains a result value which can be &quot;success&quot; or\n&quot;resources&quot; which have the same meaning as the\ncorresponding field of the Service interface.</font>\n\n<h2>SLICE UNIT OBJECTS\n<a name=\"SLICE UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">All\nslice unit objects implement the\norg.freedesktop.systemd1.Slice interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/system_2eslice { <br>\ninterface org.freedesktop.systemd1.Slice { <br>\nmethods: <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties correspond directly with the matching\nsettings in slice unit files.</font>\n\n<h2>SCOPE UNIT OBJECTS\n<a name=\"SCOPE UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">All\nscope unit objects implement the\norg.freedesktop.systemd1.Scope interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/session_2d1_2escope { <br>\ninterface org.freedesktop.systemd1.Scope { <br>\nmethods: <br>\nAbandon(); <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nsignals: <br>\nRequestStop(); <br>\nproperties: <br>\nreadonly s Controller = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutStopUSec = ...; <br>\nreadonly s Result = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RuntimeMaxUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Methods\n<br>\nAbandon()</b> may be used to place a scope unit in the\n&quot;abandoned&quot; state. This may be used to inform the\nsystem manager that the manager that created the scope lost\ninterest in the scope (for example, because it is\nterminating), without wanting to shut down the scope\nentirely.</font>\n\n\n<font color=\"#000000\"><b>Signals\n<br>\nRequestStop</b> is sent to the peer that is configured in\nthe <i>Controller</i> property when systemd is requested to\nterminate the scope unit. A program registering a scope can\nuse this to cleanly shut down the processes it added to the\nscope instead of letting systemd do it with the usual\n<b>SIGTERM</b> logic.</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<br>\nAll properties correspond directly with the matching\nproperties of service units.</font>\n\n\n<font color=\"#000000\"><i>Controller</i>\ncontains the bus name (unique or well-known) that is\nnotified when the scope unit is to be shut down via a\n<b>RequestStop</b> signal (see below). This is set when the\nscope is created. If not set, the scope's processes will\nterminated with <b>SIGTERM</b> directly.</font>\n\n<h2>JOB OBJECTS\n<a name=\"JOB OBJECTS\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">Job\nobjects encapsulate scheduled or running jobs. Each unit can\nhave none or one jobs in the execution queue. Each job is\nattached to exactly one unit.</font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/job/666 { <br>\ninterface org.freedesktop.systemd1.Job { <br>\nmethods: <br>\nCancel(); <br>\nGetAfter(out a(usssoo) jobs); <br>\nGetBefore(out a(usssoo) jobs); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u Id = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (so) Unit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s JobType = '...'; <br>\nreadonly s State = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font>\n\n\n<font color=\"#000000\"><b>Methods\n<br>\nCancel()</b> cancels the job. Note that this will remove a\njob from the queue if it is not yet executed but generally\nwill not cause a job that is already in the process of being\nexecuted to be aborted. This operation may also be requested\nvia the <b>CancelJob()</b> method of the Manager object (see\nabove), which is sometimes useful to reduce\nroundtrips.</font>\n\n\n<font color=\"#000000\"><b>Properties</b>\n<i><br>\nId</i> is the numeric Id of the job. During the runtime of a\nsystemd instance each numeric ID is only assigned\nonce.</font>\n\n\n<font color=\"#000000\"><i>Unit</i>\nrefers to the unit this job belongs to. It is a structure\nconsisting of the name of the unit and a bus path to the\nunit's object.</font>\n\n\n<font color=\"#000000\"><i>JobType</i>\nrefers to the job's type and is one of &quot;start&quot;,\n&quot;verify-active&quot;, &quot;stop&quot;,\n&quot;reload&quot;, &quot;restart&quot;,\n&quot;try-restart&quot;, or &quot;reload-or-start&quot;.\nNote that later versions might define additional\nvalues.</font>\n\n\n<font color=\"#000000\"><i>State</i>\nrefers to the job's state and is one of &quot;waiting&quot;\nand &quot;running&quot;. The former indicates that a job is\ncurrently queued but has not begun to execute yet. The\nlatter indicates that a job is currently being\nexecuted.</font>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<font color=\"#000000\"><b>Example&nbsp;1.&nbsp;Introspect\norg.freedesktop.systemd1.Manager on the bus</b></font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system \\ <br>\n--dest org.freedesktop.systemd1 \\ <br>\n--object-path /org/freedesktop/systemd1</font>\n\n\n<font color=\"#000000\"><b>Example&nbsp;2.&nbsp;Introspect\na unit on the bus</b></font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\nbusctl introspect org.freedesktop.systemd1 \\ <br>\n$(busctl call org.freedesktop.systemd1 \\ <br>\n/org/freedesktop/systemd1 \\ <br>\norg.freedesktop.systemd1.Manager \\ <br>\nGetUnit s systemd-resolved.service | cut -d'&quot;'\n-f2)</font>\n\n\n<font color=\"#000000\"><b>Example&nbsp;3.&nbsp;Introspect\norg.freedesktop.systemd1.Job on the bus</b></font>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system --dest org.freedesktop.systemd1 \\\n<br>\n--object-path /org/freedesktop/systemd1/job/1292</font>\n\n<h2>VERSIONING\n<a name=\"VERSIONING\"></a>\n</h2>\n\n\n\n<font color=\"#000000\">These\nD-Bus interfaces follow</font> <b><font color=\"#0000FF\">the\nusual interface versioning guidelines</font></b>\n<small><font color=\"#000000\">[4]</font></small>\n<font color=\"#000000\">.</font>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font> </td>\n<td width=\"2%\"></td>\n<td width=\"9%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">polkit</font> </td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.freedesktop.org/software/polkit/docs/latest/</font>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">2.</font> </td>\n<td width=\"2%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">New\nControl Group Interface</font></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.freedesktop.org/wiki/Software/systemd/ControlGroupInterface/</font>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">3.</font> </td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Booting\nWithout /usr is Broken</font></td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">http://freedesktop.org/wiki/Software/systemd/separate-usr-is-broken</font>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">4.</font> </td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">the usual\ninterface versioning guidelines</font></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">http://0pointer.de/blog/projects/versioning-dbus.html</font>","body":"\n\n<h1 align=\"center\">ORG.FREEDESKTOP.SYSTEMD1</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">org.freedesktop.systemd1\n- The D-Bus interface of systemd</p>\n\n<h2>INTRODUCTION\n<a name=\"INTRODUCTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/systemd\">systemd(1)</a>\nand its auxiliary daemons expose a number of APIs over\nD-Bus. This page only describes the various APIs exposed by\nthe system and service manager itself. It does not cover the\nauxiliary daemons.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The service\nmanager exposes a number of objects on the bus: one Manager\nobject as a central entry point for clients along with\nindividual objects for each unit and for each queued job.\nThe unit objects implement a generic Unit interface as well\nas a type-specific interface. For example, service units\nimplement both org.freedesktop.systemd1.Unit and\norg.freedesktop.system1.Service. The manager object can list\nunit and job objects or directly convert a unit name or job\nidentifier to a bus path of the corresponding D-Bus\nobject.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Properties\nexposing time values are usually encoded in microseconds\n(&micro;s) on the bus, even if their corresponding settings\nin the unit files are in seconds.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">PID 1 uses\n<b><font color=\"#0000FF\">polkit</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">to allow access to privileged\noperations for unprivileged processes. Some operations (such\nas shutdown/reboot/suspend) are also available through the\nD-Bus API of logind, see\n<b>org.freedesktop.login1</b>(5).</font></p>\n\n<h2>THE MANAGER OBJECT\n<a name=\"THE MANAGER OBJECT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nmain entry point object is available on the fixed\n<b>/org/freedesktop/systemd1</b> object path:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1 { <br>\ninterface org.freedesktop.systemd1.Manager { <br>\nmethods: <br>\nGetUnit(in s name, <br>\nout o unit); <br>\nGetUnitByPID(in u pid, <br>\nout o unit); <br>\nGetUnitByInvocationID(in ay invocation_id, <br>\nout o unit); <br>\nGetUnitByControlGroup(in s cgroup, <br>\nout o unit); <br>\nLoadUnit(in s name, <br>\nout o unit); <br>\nStartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nStartUnitReplace(in s old_unit, <br>\nin s new_unit, <br>\nin s mode, <br>\nout o job); <br>\nStopUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nReloadUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nRestartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nTryRestartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nReloadOrRestartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nReloadOrTryRestartUnit(in s name, <br>\nin s mode, <br>\nout o job); <br>\nEnqueueUnitJob(in s name, <br>\nin s job_type, <br>\nin s job_mode, <br>\nout u job_id, <br>\nout o job_path, <br>\nout s unit_id, <br>\nout o unit_path, <br>\nout s job_type, <br>\nout a(uosos) affected_jobs); <br>\nKillUnit(in s name, <br>\nin s whom, <br>\nin i signal); <br>\nCleanUnit(in s name, <br>\nin as mask); <br>\nFreezeUnit(in s name); <br>\nThawUnit(in s name); <br>\nResetFailedUnit(in s name); <br>\nSetUnitProperties(in s name, <br>\nin b runtime, <br>\nin a(sv) properties); <br>\nBindMountUnit(in s name, <br>\nin s source, <br>\nin s destination, <br>\nin b read_only, <br>\nin b mkdir); <br>\nMountImageUnit(in s name, <br>\nin s source, <br>\nin s destination, <br>\nin b read_only, <br>\nin b mkdir, <br>\nin a(ss) options); <br>\nRefUnit(in s name); <br>\nUnrefUnit(in s name); <br>\nStartTransientUnit(in s name, <br>\nin s mode, <br>\nin a(sv) properties, <br>\nin a(sa(sv)) aux, <br>\nout o job); <br>\nGetUnitProcesses(in s name, <br>\nout a(sus) processes); <br>\nAttachProcessesToUnit(in s unit_name, <br>\nin s subcgroup, <br>\nin au pids); <br>\nAbandonScope(in s name); <br>\nGetJob(in u id, <br>\nout o job); <br>\nGetJobAfter(in u id, <br>\nout a(usssoo) jobs); <br>\nGetJobBefore(in u id, <br>\nout a(usssoo) jobs); <br>\nCancelJob(in u id); <br>\nClearJobs(); <br>\nResetFailed(); <br>\nSetShowStatus(in s mode); <br>\nListUnits(out a(ssssssouso) units); <br>\nListUnitsFiltered(in as states, <br>\nout a(ssssssouso) units); <br>\nListUnitsByPatterns(in as states, <br>\nin as patterns, <br>\nout a(ssssssouso) units); <br>\nListUnitsByNames(in as names, <br>\nout a(ssssssouso) units); <br>\nListJobs(out a(usssoo) jobs); <br>\nSubscribe(); <br>\nUnsubscribe(); <br>\nDump(out s output); <br>\nDumpByFileDescriptor(out h fd); <br>\nReload(); <br>\nReexecute(); <br>\nExit(); <br>\nReboot(); <br>\nPowerOff(); <br>\nHalt(); <br>\nKExec(); <br>\nSwitchRoot(in s new_root, <br>\nin s init); <br>\nSetEnvironment(in as assignments); <br>\nUnsetEnvironment(in as names); <br>\nUnsetAndSetEnvironment(in as names, <br>\nin as assignments); <br>\nEnqueueMarkedJobs(out ao jobs); <br>\nListUnitFiles(out a(ss) unit_files); <br>\nListUnitFilesByPatterns(in as states, <br>\nin as patterns, <br>\nout a(ss) unit_files); <br>\nGetUnitFileState(in s file, <br>\nout s state); <br>\nEnableUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nDisableUnitFiles(in as files, <br>\nin b runtime, <br>\nout a(sss) changes); <br>\nEnableUnitFilesWithFlags(in as files, <br>\nin t flags, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nDisableUnitFilesWithFlags(in as files, <br>\nin t flags, <br>\nout a(sss) changes); <br>\nReenableUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nLinkUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout a(sss) changes); <br>\nPresetUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nPresetUnitFilesWithMode(in as files, <br>\nin s mode, <br>\nin b runtime, <br>\nin b force, <br>\nout b carries_install_info, <br>\nout a(sss) changes); <br>\nMaskUnitFiles(in as files, <br>\nin b runtime, <br>\nin b force, <br>\nout a(sss) changes); <br>\nUnmaskUnitFiles(in as files, <br>\nin b runtime, <br>\nout a(sss) changes); <br>\nRevertUnitFiles(in as files, <br>\nout a(sss) changes); <br>\nSetDefaultTarget(in s name, <br>\nin b force, <br>\nout a(sss) changes); <br>\nGetDefaultTarget(out s name); <br>\nPresetAllUnitFiles(in s mode, <br>\nin b runtime, <br>\nin b force, <br>\nout a(sss) changes); <br>\nAddDependencyUnitFiles(in as files, <br>\nin s target, <br>\nin s type, <br>\nin b runtime, <br>\nin b force, <br>\nout a(sss) changes); <br>\nGetUnitFileLinks(in s name, <br>\nin b runtime, <br>\nout as links); <br>\nSetExitCode(in y number); <br>\nLookupDynamicUserByName(in s name, <br>\nout u uid); <br>\nLookupDynamicUserByUID(in u uid, <br>\nout s name); <br>\nGetDynamicUsers(out a(us) users); <br>\nsignals: <br>\nUnitNew(s id, <br>\no unit); <br>\nUnitRemoved(s id, <br>\no unit); <br>\nJobNew(u id, <br>\no job, <br>\ns unit); <br>\nJobRemoved(u id, <br>\no job, <br>\ns unit, <br>\ns result); <br>\nStartupFinished(t firmware, <br>\nt loader, <br>\nt kernel, <br>\nt initrd, <br>\nt userspace, <br>\nt total); <br>\nUnitFilesChanged(); <br>\nReloading(b active); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Version = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Features = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Virtualization = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Architecture = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Tainted = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t FirmwareTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t FirmwareTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LoaderTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LoaderTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t KernelTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t KernelTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UserspaceTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UserspaceTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t FinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t FinishTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SecurityStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SecurityStartTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SecurityFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SecurityFinishTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t GeneratorsStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t GeneratorsStartTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t GeneratorsFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t GeneratorsFinishTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UnitsLoadStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UnitsLoadStartTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UnitsLoadFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t UnitsLoadFinishTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDSecurityStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDSecurityStartTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDSecurityFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDSecurityFinishTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDGeneratorsStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDGeneratorsStartTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDGeneratorsFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDGeneratorsFinishTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDUnitsLoadStartTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDUnitsLoadStartTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDUnitsLoadFinishTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t InitRDUnitsLoadFinishTimestampMonotonic = ...;\n<br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite s LogLevel = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite s LogTarget = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NNames = ...; <br>\nreadonly u NFailedUnits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NJobs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NInstalledJobs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NFailedJobs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly d Progress = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ConfirmSpawn = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b ShowStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnitPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s DefaultStandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s DefaultStandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite t RuntimeWatchdogUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite t RebootWatchdogUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite t KExecWatchdogUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\n@org.freedesktop.systemd1.Privileged(&quot;true&quot;) <br>\nreadwrite b ServiceWatchdogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s SystemState = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly y ExitCode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultTimerAccuracyUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultTimeoutStartUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultTimeoutStopUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultTimeoutAbortUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultRestartUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultStartLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DefaultStartLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultCPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultBlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultMemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultTasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DefaultLimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultTasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s DefaultOOMPolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s CtrlAltDelBurstAction = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods</b>\n<br>\nNote that many of the methods exist twice: once on the\nManager object and once on the respective unit objects. This\nis to optimize access times so that methods that belong to\nunit objects do not have to be called with a resolved unit\npath, but can be called with only the unit id,\ntoo.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>GetUnit()</b>\nmay be used to get the unit object path for a unit name. It\ntakes the unit name and returns the object path. If a unit\nhas not been loaded yet by this name this method will\nfail.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>GetUnitByPID()</b>\nmay be used to get the unit object path of the unit a\nprocess ID belongs to. It takes a UNIX PID and returns the\nobject path. The PID must refer to an existing system\nprocess.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>LoadUnit()</b>\nis similar to <b>GetUnit()</b> but will load the unit from\ndisk if possible.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>StartUnit()</b>\nenqueues a start job and possibly depending jobs. It takes\nthe unit to activate and a mode string as arguments. The\nmode needs to be one of &quot;replace&quot;,\n&quot;fail&quot;, &quot;isolate&quot;,\n&quot;ignore-dependencies&quot;, or\n&quot;ignore-requirements&quot;. If &quot;replace&quot;, the\nmethod will start the unit and its dependencies, possibly\nreplacing already queued jobs that conflict with it. If\n&quot;fail&quot;, the method will start the unit and its\ndependencies, but will fail if this would change an already\nqueued job. If &quot;isolate&quot;, the method will start\nthe unit in question and terminate all units that aren't\ndependencies of it. If &quot;ignore-dependencies&quot;, it\nwill start a unit but ignore all its dependencies. If\n&quot;ignore-requirements&quot;, it will start a unit but\nonly ignore the requirement dependencies. It is not\nrecommended to make use of the latter two options. On\ncompletion, this method returns the newly created job\nobject.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>StartUnitReplace()</b>\nis similar to <b>StartUnit()</b> but replaces a job that is\nqueued for one unit by a job for another unit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>StopUnit()</b>\nis similar to <b>StartUnit()</b> but stops the specified\nunit rather than starting it. Note that the\n&quot;isolate&quot; mode is invalid for this\nmethod.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ReloadUnit()</b>,\n<b>RestartUnit()</b>, <b>TryRestartUnit()</b>,\n<b>ReloadOrRestartUnit()</b>, or\n<b>ReloadOrTryRestartUnit()</b> may be used to restart\nand/or reload a unit. These methods take similar arguments\nas <b>StartUnit()</b>. Reloading is done only if the unit is\nalready running and fails otherwise. If a service is\nrestarted that isn't running, it will be started unless the\n&quot;Try&quot; flavor is used in which case a service that\nisn't running is not affected by the restart. The\n&quot;ReloadOrRestart&quot; flavors attempt a reload if the\nunit supports it and use a restart otherwise.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>EnqueueMarkedJobs()</b>\ncreates reload/restart jobs for units which have been\nappropriately marked, see <i>Marks</i> property above. This\nis equivalent to calling <b>TryRestartUnit()</b> or\n<b>ReloadOrTryRestartUnit()</b> for the marked\nunits.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>BindMountUnit()</b>\ncan be used to bind mount new files or directories into a\nrunning service mount namespace.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>MountImageUnit()</b>\ncan be used to mount new images into a running service mount\nnamespace.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>KillUnit()</b>\nmay be used to kill (i.e. send a signal to) all processes of\na unit. It takes the unit <i>name</i>, an enum <i>who</i>\nand a UNIX <i>signal</i> number to send. The <i>who</i> enum\nis one of &quot;main&quot;, &quot;control&quot; or\n&quot;all&quot;. If &quot;main&quot;, only the main process\nof the unit is killed. If &quot;control&quot;, only the\ncontrol process of the unit is killed. If &quot;all&quot;,\nall processes are killed. A &quot;control&quot; process is\nfor example a process that is configured via\n<i>ExecStop=</i> and is spawned in parallel to the main\ndaemon process in order to shut it down.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>GetJob()</b>\nreturns the job object path for a specific job, identified\nby its id.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>CancelJob()</b>\ncancels a specific job identified by its numeric ID. This\noperation is also available in the <b>Cancel()</b> method of\nJob objects (see below) and exists primarily to reduce the\nnecessary round trips to execute this operation. Note that\nthis will not have any effect on jobs whose execution has\nalready begun.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ClearJobs()</b>\nflushes the job queue, removing all jobs that are still\nqueued. Note that this does not have any effect on jobs\nwhose execution has already begun. It only flushes jobs that\nare queued and have not yet begun execution.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ResetFailedUnit()</b>\nresets the &quot;failed&quot; state of a specific\nunit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ResetFailed()</b>\nresets the &quot;failed&quot; state of all units.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ListUnits()</b>\nreturns an array of all currently loaded units. Note that\nunits may be known by multiple names at the same name, and\nhence there might be more unit names loaded than actual\nunits behind them. The array consists of structures with the\nfollowing elements:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe primary unit name as string</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe human readable description string</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe load state (i.e. whether the unit file has been loaded\nsuccessfully)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe active state (i.e. whether the unit is currently started\nor not)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe sub state (a more fine-grained version of the active\nstate that is specific to the unit type, which the active\nstate is not)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nA unit that is being followed in its state by this unit, if\nthere is any, otherwise the empty string.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe unit object path</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nIf there is a job queued for the job unit, the numeric job\nid, 0 otherwise</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job type as string</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job object path</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ListJobs()</b>\nreturns an array with all currently queued jobs. Returns an\narray consisting of structures with the following\nelements:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe numeric job id</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe primary unit name for this job</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job type as string</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job state as string</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe job object path</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe unit object path</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Subscribe()</b>\nenables most bus signals to be sent out. Clients which are\ninterested in signals need to call this method. Signals are\nonly sent out if at least one client invoked this method.\n<b>Unsubscribe()</b> reverts the signal subscription that\n<b>Subscribe()</b> implements. It is not necessary to invoke\n<b>Unsubscribe()</b> as clients are tracked. Signals are no\nlonger sent out as soon as all clients which previously\nasked for <b>Subscribe()</b> either closed their connection\nto the bus or invoked <b>Unsubscribe()</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Reload()</b>\nmay be invoked to reload all unit files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Reexecute()</b>\nmay be invoked to reexecute the main manager process. It\nwill serialize its state, reexecute, and deserizalize the\nstate again. This is useful for upgrades and is a more\ncomprehensive version of <b>Reload()</b>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Exit()</b>\nmay be invoked to ask the manager to exit. This is not\navailable for the system manager and is useful only for user\nsession managers.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Reboot()</b>,\n<b>PowerOff()</b>, <b>Halt()</b>, or <b>KExec()</b> may be\nused to ask for immediate reboot, powering down, halt or\nkexec based reboot of the system. Note that this does not\nshut down any services and immediately transitions into the\nreboot process. These functions are normally only called as\nthe last step of shutdown and should not be called directly.\nTo shut down the machine, it is generally a better idea to\ninvoke <b>Reboot()</b> or <b>PowerOff()</b> on the\nsystemd-logind manager object; see\n<b>org.freedesktop.login1</b>(5) for more\ninformation.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SwitchRoot()</b>\nmay be used to transition to a new root directory. This is\nintended to be used by initial RAM disks. The method takes\ntwo arguments: the new root directory (which needs to be\nspecified) and an init binary path (which may be left empty,\nin which case it is automatically searched for). The state\nof the system manager will be serialized before the\ntransition. After the transition, the manager binary on the\nmain system is invoked and replaces the old PID 1. All state\nwill then be deserialized.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetEnvironment()</b>\nmay be used to alter the environment block that is passed to\nall spawned processes. It takes a string array of\nenvironment variable assignments. Any previously set\nenvironment variables will be overridden.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>UnsetEnvironment()</b>\nmay be used to unset environment variables. It takes a\nstring array of environment variable names. All variables\nspecified will be unset (if they have been set previously)\nand no longer be passed to all spawned processes. This\nmethod has no effect for variables that were previously not\nset, but will not fail in that case.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>UnsetAndSetEnvironment()</b>\nis a combination of <b>UnsetEnvironment()</b> and\n<b>SetEnvironment()</b>. It takes two lists. The first list\ncontains variables to unset, the second one contains\nassignments to set. If a variable is listed in both, the\nvariable is set after this method returns, i.e. the set list\noverrides the unset list.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>ListUnitFiles()</b>\nreturns an array of unit names and their enablement status.\nNote that <b>ListUnit()</b> returns a list of units\ncurrently loaded into memory, while <b>ListUnitFiles()</b>\nreturns a list of unit <i>files</i> that were found on disk.\nNote that while most units are read directly from a unit\nfile with the same name, some units are not backed by files\nand some files (templates) cannot directly be loaded as\nunits but need to be instantiated instead.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>GetUnitFileState()</b>\nreturns the current enablement status of a specific unit\nfile.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>EnableUnitFiles()</b>\nmay be used to enable one or more units in the system (by\ncreating symlinks to them in /etc/ or /run/). It takes a\nlist of unit files to enable (either just file names or full\nabsolute paths if the unit files are residing outside the\nusual unit search paths) and two booleans: the first\ncontrols whether the unit shall be enabled for runtime only\n(true, /run/), or persistently (false, /etc/). The second\none controls whether symlinks pointing to other units shall\nbe replaced if necessary. This method returns one boolean\nand an array of the changes made. The boolean signals\nwhether the unit files contained any enablement information\n(i.e. an [Install]) section. The changes array consists of\nstructures with three strings: the type of the change (one\nof &quot;symlink&quot; or &quot;unlink&quot;), the file name\nof the symlink and the destination of the symlink. Note that\nmost of the following calls return a changes list in the\nsame format.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\n<b>DisableUnitFiles()</b> disables one or more units in the\nsystem, i.e. removes all symlinks to them in /etc/ and\n/run/.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>EnableUnitFilesWithFlags()</b> and\n<b>DisableUnitFilesWithFlags()</b> take in options as flags\ninstead of booleans to allow for extendability, defined as\nfollows:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">#define\nSD_SYSTEMD_UNIT_RUNTIME (UINT64_C(1) &lt;&lt; 0) <br>\n#define SD_SYSTEMD_UNIT_FORCE (UINT64_C(1) &lt;&lt; 1) <br>\n#define SD_SYSTEMD_UNIT_PORTABLE (UINT64_C(1) &lt;&lt;\n2)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SD_SYSTEMD_UNIT_RUNTIME</i>\nwill enable or disable the unit for runtime only,\n<i>SD_SYSTEMD_UNIT_FORCE</i> controls whether symlinks\npointing to other units shall be replaced if necessary.\n<i>SD_SYSTEMD_UNIT_PORTABLE</i> will add or remove the\nsymlinks in /etc/systemd/system.attached and\n/run/systemd/system.attached.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\n<b>ReenableUnitFiles()</b> applies the changes to one or\nmore units that would result from disabling and enabling the\nunit quickly one after the other in an atomic fashion. This\nis useful to apply updated [Install] information contained\nin unit files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\n<b>LinkUnitFiles()</b> links unit files (that are located\noutside of the usual unit search paths) into the unit search\npath.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\n<b>PresetUnitFiles()</b> enables/disables one or more unit\nfiles according to the preset policy. See\n<b>systemd.preset</b>(7) for more information.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\n<b>MaskUnitFiles()</b> masks unit files and\n<b>UnmaskUnitFiles()</b> unmasks them again.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetDefaultTarget()</b>\nchanges the default.target link. See <a href=\"https://man.page/7/bootup\">bootup(7)</a> for\nmore information.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>GetDefaultTarget()</b>\nretrieves the name of the unit to which default.target is\naliased.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>SetUnitProperties()</b>\nmay be used to modify certain unit properties at runtime.\nNot all properties may be changed at runtime, but many\nresource management settings (primarily those listed in\n<b>systemd.resource-control</b>(5)) may. The changes are\napplied instantly and stored on disk for future boots,\nunless <i>runtime</i> is true, in which case the settings\nonly apply until the next reboot. <i>name</i> is the name of\nthe unit to modify. <i>properties</i> are the settings to\nset, encoded as an array of property name and value pairs.\nNote that this is not a dictionary! Also note that when\nsetting array properties with this method usually results in\nappending to the pre-configured array. To reset the\nconfigured arrays, set the property to an empty array first\nand then append to it.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>StartTransientUnit()</b>\nmay be used to create and start a transient unit which will\nbe released as soon as it is not running or referenced\nanymore or the system is rebooted. <i>name</i> is the unit\nname including its suffix and must be unique. <i>mode</i> is\nthe same as in <b>StartUnit()</b>, <i>properties</i>\ncontains properties of the unit, specified like in\n<b>SetUnitProperties()</b>. <i>aux</i> is currently unused\nand should be passed as an empty array. See the</font>\n<b><font color=\"#0000FF\">New Control Group\nInterface</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">for more information how to make use\nof this functionality for resource control\npurposes.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Signals</b>\n<br>\nNote that most signals are sent out only after\n<b>Subscribe()</b> has been invoked by at least one client.\nMake sure to invoke this method when subscribing to these\nsignals!</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>UnitNew()</b>\nand <b>UnitRemoved()</b> are sent out each time a new unit\nis loaded or unloaded. Note that this has little to do with\nwhether a unit is available on disk or not, and simply\nreflects the units that are currently loaded into memory.\nThe signals take two parameters: the primary unit name and\nthe object path.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>JobNew()</b>\nand <b>JobRemoved()</b> are sent out each time a new job is\nqueued or dequeued. Both signals take the numeric job ID,\nthe bus path and the primary unit name for this job as\narguments. <b>JobRemoved()</b> also includes a result string\nwhich is one of &quot;done&quot;, &quot;canceled&quot;,\n&quot;timeout&quot;, &quot;failed&quot;,\n&quot;dependency&quot;, or &quot;skipped&quot;.\n&quot;done&quot; indicates successful execution of a job.\n&quot;canceled&quot; indicates that a job has been canceled\n(via <b>CancelJob()</b> above) before it finished execution\n(this doesn't necessarily mean though that the job operation\nis actually cancelled too, see above). &quot;timeout&quot;\nindicates that the job timeout was reached.\n&quot;failed&quot; indicates that the job failed.\n&quot;dependency&quot; indicates that a job this job\ndepended on failed and the job hence was removed as well.\n&quot;skipped&quot; indicates that a job was skipped because\nit didn't apply to the unit's current state.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>StartupFinished()</b>\nis sent out when startup finishes. It carries six\nmicrosecond timespan values, each indicating how much boot\ntime has been spent in the firmware (if known), in the boot\nloader (if known), in the kernel initialization phase, in\nthe initrd (if known), in userspace and in total. These\nvalues may also be calculated from the\n<i>FirmwareTimestampMonotonic</i>,\n<i>LoaderTimestampMonotonic</i>,\n<i>InitRDTimestampMonotonic</i>,\n<i>UserspaceTimestampMonotonic</i>, and\n<i>FinishTimestampMonotonic</i> properties (see\nbelow).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>UnitFilesChanged()</b>\nis sent out each time the list of enabled or masked unit\nfiles on disk have changed.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Reloading()</b>\nis sent out immediately before a daemon reload is done (with\nthe boolean parameter set to True) and after a daemon reload\nis completed (with the boolean parameter set to False). This\nmay be used by UIs to optimize UI updates.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties simply reflect the respective options in\n/etc/systemd/system.conf and the kernel command\nline.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nothers:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Version</i>\nencodes the version string of the running systemd instance.\nNote that the version string is purely informational. It\nshould not be parsed and one may not assume the version to\nbe formatted in any particular way. We take the liberty to\nchange the versioning scheme at any time and it is not part\nof the public API.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Features</i>\nencodes the features that have been enabled and disabled for\nthis build. Enabled options are prefixed with +, disabled\noptions with -.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Tainted</i>\nencodes a couple of taint flags as a colon-separated list.\nWhen systemd detects it is running on a system with certain\nproblems, it will set an appropriate taint flag. Taints may\nbe used to lower the chance of bogus bug reports. The\nfollowing taints are currently known: &quot;split-usr&quot;,\n&quot;mtab-not-symlink&quot;, &quot;cgroups-missing&quot;,\n&quot;local-hwclock&quot;. &quot;split-usr&quot; is set if\n/usr/ is not pre-mounted when systemd is first invoked.\nSee</font> <b><font color=\"#0000FF\">Booting Without /usr is\nBroken</font></b>\n<small><font color=\"#000000\">[3]</font></small>\n<font color=\"#000000\">for details why this is bad.\n&quot;mtab-not-symlink&quot; indicates that /etc/mtab is not\na symlink to /proc/self/mounts as required.\n&quot;cgroups-missing&quot; indicates that control groups\nhave not been enabled in the kernel.\n&quot;local-hwclock&quot; indicates that the local RTC is\nconfigured to be in local time rather than UTC.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>FirmwareTimestamp</i>,\n<i>FirmwareTimestampMonotonic</i>, <i>LoaderTimestamp</i>,\n<i>LoaderTimestampMonotonic</i>, <i>KernelTimestamp</i>,\n<i>KernelTimestampMonotonic</i>, <i>InitRDTimestamp</i>,\n<i>InitRDTimestampMonotonic</i>, <i>UserspaceTimestamp</i>,\n<i>UserspaceTimestampMonotonic</i>, <i>FinishTimestamp</i>,\nand <i>FinishTimestampMonotonic</i> encode\n<b>CLOCK_REALTIME</b> and <b>CLOCK_MONOTONIC</b> microsecond\ntimestamps taken when the firmware first began execution,\nwhen the boot loader first began execution, when the kernel\nfirst began execution, when the initrd first began\nexecution, when the main systemd instance began execution\nand finally, when all queued startup jobs finished\nexecution. These values are useful for determining boot-time\nperformance. Note that as monotonic time begins with the\nkernel startup, the <i>KernelTimestampMonotonic</i>\ntimestamp will always be 0 and\n<i>FirmwareTimestampMonotonic</i> and\n<i>LoaderTimestampMonotonic</i> are to be read as negative\nvalues. Also, not all fields are always available, depending\non the used firmware, boot loader or initrd implementation.\nIn these cases the respective pairs of timestamps are both\n0, indicating that no data is available.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\nthe <i>SecurityStartTimestamp</i>,\n<i>GeneratorsStartTimestamp</i> and <i>LoadUnitTimestamp</i>\n(as well as their monotonic and stop counterparts) expose\nperformance data for uploading the security policies to the\nkernel (such as the SELinux, IMA, or SMACK policies), for\nrunning the generator tools and for loading the unit\nfiles.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NNames</i>\nencodes how many unit names are currently known. This only\nincludes names of units that are currently loaded and can be\nmore than the amount of actually loaded units since units\nmay have more than one name.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NJobs</i>\nencodes how many jobs are currently queued.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NInstalledJobs</i>\nencodes how many jobs have ever been queued in\ntotal.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NFailedJobs</i>\nencodes how many jobs have ever failed in total.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Progress</i>\nencodes boot progress as a floating point value between 0.0\nand 1.0. This value begins at 0.0 at early-boot and ends at\n1.0 when boot is finished and is based on the number of\nexecuted and queued jobs. After startup, this field is\nalways 1.0 indicating a finished boot.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Environment</i>\nencodes the environment block passed to all executed\nservices. It may be altered with bus calls such as\n<b>SetEnvironment()</b> (see above).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>UnitPath</i>\nencodes the currently active unit file search path. It is an\narray of file system paths encoded as strings.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Virtualization</i>\ncontains a short ID string describing the virtualization\ntechnology the system runs in. On bare-metal hardware this\nis the empty string. Otherwise, it contains an identifier\nsuch as &quot;kvm&quot;, &quot;vmware&quot; and so on. For a\nfull list of IDs see <a href=\"https://man.page/1/systemd-detect-virt\">systemd-detect-virt(1)</a>. Note\nthat only the &quot;innermost&quot; virtualization\ntechnology is exported here. This detects both full-machine\nvirtualizations (VMs) and shared-kernel virtualization\n(containers).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Architecture</i>\ncontains a short ID string describing the architecture the\nsystemd instance is running on. This follows the same\nvocabulary as <i>ConditionArchitectures=</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ControlGroup</i>\ncontains the root control group path of this system manager.\nNote that the root path is encoded as the empty string here\n(not as &quot;/&quot;!), so that it can be appended to\n/sys/fs/cgroup/systemd easily. This value will be set to the\nempty string for the host instance and some other string for\ncontainer instances.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Security</b>\n<br>\nRead access is generally granted to all clients.\nAdditionally, for unprivileged clients, some operations are\nallowed through the polkit privilege system. Operations\nwhich modify unit state (<b>StartUnit()</b>,\n<b>StopUnit()</b>, <b>KillUnit()</b>, <b>RestartUnit()</b>\nand similar, <b>SetProperty()</b>) require\norg.freedesktop.systemd1.manage-units. Operations which\nmodify unit file enablement state (<b>EnableUnitFiles()</b>,\n<b>DisableUnitFiles()</b>,\n<b>EnableUnitFilesWithFlags()</b>,\n<b>DisableUnitFilesWithFlags()</b>,\n<b>ReenableUnitFiles()</b>, <b>LinkUnitFiles()</b>,\n<b>PresetUnitFiles</b>, <b>MaskUnitFiles</b>, and similar)\nrequire org.freedesktop.systemd1.manage-unit-files.\nOperations which modify the exported environment\n(<b>SetEnvironment()</b>, <b>UnsetEnvironment()</b>,\n<b>UnsetAndSetEnvironment()</b>) require\norg.freedesktop.systemd1.set-environment. <b>Reload()</b>\nand <b>Reexecute()</b> require\norg.freedesktop.systemd1.reload-daemon.</font></p>\n\n<h2>UNIT OBJECTS\n<a name=\"UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/avahi_2ddaemon_2eservice {\n<br>\ninterface org.freedesktop.systemd1.Unit { <br>\nmethods: <br>\nStart(in s mode, <br>\nout o job); <br>\nStop(in s mode, <br>\nout o job); <br>\nReload(in s mode, <br>\nout o job); <br>\nRestart(in s mode, <br>\nout o job); <br>\nTryRestart(in s mode, <br>\nout o job); <br>\nReloadOrRestart(in s mode, <br>\nout o job); <br>\nReloadOrTryRestart(in s mode, <br>\nout o job); <br>\nEnqueueJob(in s job_type, <br>\nin s job_mode, <br>\nout u job_id, <br>\nout o job_path, <br>\nout s unit_id, <br>\nout o unit_path, <br>\nout s job_type, <br>\nout a(uosos) affected_jobs); <br>\nKill(in s whom, <br>\nin i signal); <br>\nResetFailed(); <br>\nSetProperties(in b runtime, <br>\nin a(sv) properties); <br>\nRef(); <br>\nUnref(); <br>\nClean(in as mask); <br>\nFreeze(); <br>\nThaw(); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Id = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Names = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Following = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Requires = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Requisite = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Wants = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as BindsTo = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PartOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RequiredBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RequisiteOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as WantedBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as BoundBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConsistsOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Conflicts = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConflictedBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Before = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as After = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as OnFailure = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as OnFailureOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as OnSuccess = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as OnSuccessOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Triggers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as TriggeredBy = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PropagatesReloadTo = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReloadPropagatedFrom = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PropagatesStopTo = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StopPropagatedFrom = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as JoinsNamespaceOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SliceOf = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RequiresMountsFor = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Documentation = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Description = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LoadState = '...'; <br>\nreadonly s ActiveState = '...'; <br>\nreadonly s FreezerState = '...'; <br>\nreadonly s SubState = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s FragmentPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SourcePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as DropInPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s UnitFileState = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s UnitFilePreset = '...'; <br>\nreadonly t StateChangeTimestamp = ...; <br>\nreadonly t StateChangeTimestampMonotonic = ...; <br>\nreadonly t InactiveExitTimestamp = ...; <br>\nreadonly t InactiveExitTimestampMonotonic = ...; <br>\nreadonly t ActiveEnterTimestamp = ...; <br>\nreadonly t ActiveEnterTimestampMonotonic = ...; <br>\nreadonly t ActiveExitTimestamp = ...; <br>\nreadonly t ActiveExitTimestampMonotonic = ...; <br>\nreadonly t InactiveEnterTimestamp = ...; <br>\nreadonly t InactiveEnterTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanStart = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanStop = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanReload = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanIsolate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CanClean = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CanFreeze = ...; <br>\nreadonly (uo) Job = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b StopWhenUnneeded = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RefuseManualStart = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RefuseManualStop = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b AllowIsolate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DefaultDependencies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s OnSuccessJobMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s OnFailureJobMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreOnIsolate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b NeedDaemonReload = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as Markers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t JobTimeoutUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t JobRunningTimeoutUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s JobTimeoutAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s JobTimeoutRebootArgument = '...'; <br>\nreadonly b ConditionResult = ...; <br>\nreadonly b AssertResult = ...; <br>\nreadonly t ConditionTimestamp = ...; <br>\nreadonly t ConditionTimestampMonotonic = ...; <br>\nreadonly t AssertTimestamp = ...; <br>\nreadonly t AssertTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sbbsi) Conditions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sbbsi) Asserts = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (ss) LoadError = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Transient = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Perpetual = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t StartLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StartLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StartLimitAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s FailureAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FailureActionExitStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SuccessAction = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SuccessActionExitStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RebootArgument = '...'; <br>\nreadonly ay InvocationID = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s CollectMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as Refs = ['...', ...]; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods\n<br>\nStart()</b>, <b>Stop()</b>, <b>Reload()</b>,\n<b>Restart()</b>, <b>TryRestart()</b>,\n<b>ReloadOrRestart()</b>, <b>ReloadOrTryRestart()</b>,\n<b>Kill()</b>, <b>ResetFailed()</b>, and\n<b>SetProperties()</b> implement the same operation as the\nrespective methods on the Manager object (see above).\nHowever, these methods operate on the unit object and hence\ndo not take a unit name parameter. Invoking the methods\ndirectly on the Manager object has the advantage of not\nrequiring a <b>GetUnit()</b> call to get the unit object for\na specific unit name. Calling the methods on the Manager\nobject is hence a round trip optimization.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<i><br>\nId</i> contains the primary name of the unit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Names</i>\ncontains all names of the unit, including the primary name\nthat is also exposed in <i>Id</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Following</i>\neither contains the empty string or contains the name of\nanother unit that this unit follows in state. This is used\nfor some device units which reflect the unit state machine\nof another unit, and which other unit this is might possibly\nchange.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Requires</i>,\n<i>RequiresOverridable</i>, <i>Requisite</i>,\n<i>RequisiteOverridable</i>, <i>Wants</i>, <i>BindsTo</i>,\n<i>RequiredBy</i>, <i>RequiredByOverridable</i>,\n<i>WantedBy</i>, <i>BoundBy</i>, <i>Conflicts</i>,\n<i>ConflictedBy</i>, <i>Before</i>, <i>After</i>,\n<i>OnFailure</i>, <i>Triggers</i>, <i>TriggeredBy</i>,\n<i>PropagatesReloadTo</i>, and <i>RequiresMountsFor</i>\ncontain arrays which encode the dependencies and their\ninverse dependencies (where this applies) as configured in\nthe unit file or determined automatically.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Description</i>\ncontains the human readable description string for the\nunit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SourcePath</i>\ncontains the path to a configuration file this unit is\nautomatically generated from in case it is not a native unit\n(in which case it contains the empty string). For example,\nall mount units generated from /etc/fstab have this field\nset to /etc/fstab.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Documentation</i>\ncontains a string array with URLs of documentation for this\nunit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoadState</i>\ncontains a state value that reflects whether the\nconfiguration file of this unit has been loaded. The\nfollowing states are currently defined: &quot;loaded&quot;,\n&quot;error&quot;, and &quot;masked&quot;.\n&quot;loaded&quot; indicates that the configuration was\nsuccessfully loaded. &quot;error&quot; indicates that the\nconfiguration failed to load. The <i>LoadError</i> field\n(see below) contains information about the cause of this\nfailure. &quot;masked&quot; indicates that the unit is\ncurrently masked out (i.e. symlinked to /dev/null or empty).\nNote that the <i>LoadState</i> is fully orthogonal to the\n<i>ActiveState</i> (see below) as units without valid loaded\nconfiguration might be active (because configuration might\nhave been reloaded at a time where a unit was already\nactive).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ActiveState</i>\ncontains a state value that reflects whether the unit is\ncurrently active or not. The following states are currently\ndefined: &quot;active&quot;, &quot;reloading&quot;,\n&quot;inactive&quot;, &quot;failed&quot;,\n&quot;activating&quot;, and &quot;deactivating&quot;.\n&quot;active&quot; indicates that unit is active\n(obviously...). &quot;reloading&quot; indicates that the\nunit is active and currently reloading its configuration.\n&quot;inactive&quot; indicates that it is inactive and the\nprevious run was successful or no previous run has taken\nplace yet. &quot;failed&quot; indicates that it is inactive\nand the previous run was not successful (more information\nabout the reason for this is available on the unit type\nspecific interfaces, for example for services in the\n<i>Result</i> property, see below). &quot;activating&quot;\nindicates that the unit has previously been inactive but is\ncurrently in the process of entering an active state.\nConversely &quot;deactivating&quot; indicates that the unit\nis currently in the process of deactivation.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SubState</i>\nencodes states of the same state machine that\n<i>ActiveState</i> covers, but knows more fine-grained\nstates that are unit-type-specific. Where <i>ActiveState</i>\nonly covers six high-level states, <i>SubState</i> covers\npossibly many more low-level unit-type-specific states that\nare mapped to the six high-level states. Note that multiple\nlow-level states might map to the same high-level state, but\nnot vice versa. Not all high-level states have low-level\ncounterparts on all unit types. At this point the low-level\nstates are not documented here, and are more likely to be\nextended later on than the common high-level states\nexplained above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>FragmentPath</i>\ncontains the unit file path this unit was read from, if\nthere is one (if not, it contains the empty\nstring).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>UnitFileState</i>\nencodes the install state of the unit file of\n<i>FragmentPath</i>. It currently knows the following\nstates: &quot;enabled&quot;, &quot;enabled-runtime&quot;,\n&quot;linked&quot;, &quot;linked-runtime&quot;,\n&quot;masked&quot;, &quot;masked-runtime&quot;,\n&quot;static&quot;, &quot;disabled&quot;, and\n&quot;invalid&quot;. &quot;enabled&quot; indicates that a\nunit file is permanently enabled. &quot;enable-runtime&quot;\nindicates the unit file is only temporarily enabled and will\nno longer be enabled after a reboot (that means, it is\nenabled via /run/ symlinks, rather than /etc/).\n&quot;linked&quot; indicates that a unit is linked into\n/etc/ permanently. &quot;linked-runtime&quot; indicates that\na unit is linked into /run/ temporarily (until the next\nreboot). &quot;masked&quot; indicates that the unit file is\nmasked permanently. &quot;masked-runtime&quot; indicates\nthat it is masked in /run/ temporarily (until the next\nreboot). &quot;static&quot; indicates that the unit is\nstatically enabled, i.e. always enabled and doesn't need to\nbe enabled explicitly. &quot;invalid&quot; indicates that it\ncould not be determined whether the unit file is\nenabled.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>InactiveExitTimestamp</i>,\n<i>InactiveExitTimestampMonotonic</i>,\n<i>ActiveEnterTimestamp</i>,\n<i>ActiveEnterTimestampMonotonic</i>,\n<i>ActiveExitTimestamp</i>,\n<i>ActiveExitTimestampMonotonic</i>,\n<i>InactiveEnterTimestamp</i>, and\n<i>InactiveEnterTimestampMonotonic</i> contain\n<b>CLOCK_REALTIME</b> and <b>CLOCK_MONOTONIC</b> 64-bit\nmicrosecond timestamps of the last time a unit left the\ninactive state, entered the active state, exited the active\nstate, or entered an inactive state. These are the points in\ntime where the unit transitioned\n&quot;inactive&quot;/&quot;failed&quot; &acirc;\n&quot;activating&quot;, &quot;activating&quot; &acirc;\n&quot;active&quot;, &quot;active&quot; &acirc;\n&quot;deactivating&quot;, and finally\n&quot;deactivating&quot; &acirc;\n&quot;inactive&quot;/&quot;failed&quot;. The fields are 0 in\ncase such a transition has not yet been recorded on this\nboot.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CanStart</i>,\n<i>CanStop</i>, and <i>CanReload</i> encode as booleans\nwhether the unit supports the start, stop or reload\noperations. Even if a unit supports such an operation, the\nclient might not necessary have the necessary privileges to\nexecute them.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>CanIsolate</i>\nencodes as a boolean whether the unit may be started in\nisolation mode.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Job</i>\nencodes the job ID and job object path of the job currently\nscheduled or executed for this unit, if there is any. If no\njob is scheduled or executed, the job id field will be\n0.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StopWhenUnneeded</i>,\n<i>RefuseManualStart</i>, <i>RefuseManualStop</i>,\n<i>AllowIsolate</i>, <i>DefaultDependencies</i>,\n<i>OnFailureIsolate</i>, <i>IgnoreOnIsolate</i>,\n<i>IgnoreOnSnapshot</i> map directly to the corresponding\nconfiguration booleans in the unit file.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>DefaultControlGroup</i>\ncontains the main control group of this unit as a string.\nThis refers to a group in systemd's own\n&quot;name=systemd&quot; hierarchy, which systemd uses to\nwatch and manipulate the unit and all its\nprocesses.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NeedDaemonReload</i>\nis a boolean that indicates whether the configuration file\nthis unit is loaded from (i.e. <i>FragmentPath</i> or\n<i>SourcePath</i>) has changed since the configuration was\nread and hence whether a configuration reload is\nrecommended.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Markers</i>\nis an array of string flags that can be set using\n<b>SetUnitProperties()</b> to indicate that the service\nshould be reloaded or restarted. Currently known values are\n&quot;needs-restart&quot; and &quot;needs-reload&quot;.\nPackage scripts may use the first to mark units for later\nrestart when a new version of the package is installed.\nConfiguration management scripts may use the second to mark\nunits for a later reload when the configuration is adjusted.\nThose flags are not set by the manager, except to unset as\nappropriate when when the unit is stopped, restarted, or\nreloaded.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>JobTimeoutUSec</i>\nmaps directly to the corresponding configuration setting in\nthe unit file.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionTimestamp</i>\nand <i>ConditionTimestampMonotonic</i> contain the\n<b>CLOCK_REALTIME</b>/<b>CLOCK_MONOTONIC</b> microsecond\ntimestamps of the last time the configured conditions of the\nunit have been checked or 0 if they have never been checked.\nConditions are checked when a unit is requested to\nstart.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ConditionResult</i>\ncontains the condition result of the last time the\nconfigured conditions of this unit were checked.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Conditions</i>\ncontains all configured conditions of the unit. For each\ncondition, five fields are given: condition type (e.g.\n<i>ConditionPathExists</i>), whether the condition is a\ntrigger condition, whether the condition is reversed, the\nright hand side of the condition (e.g. the path in case of\n<i>ConditionPathExists</i>), and the status. The status can\nbe 0, in which case the condition hasn't been checked yet, a\npositive value, in which case the condition passed, or a\nnegative value, in which case the condition failed.\nCurrently only 0, +1, and -1 are used, but additional values\nmay be used in the future, retaining the meaning of\nzero/positive/negative values.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoadError</i>\ncontains a pair of strings. If the unit failed to load (as\nencoded in <i>LoadState</i>, see above), then this will\ninclude a D-Bus error pair consisting of the error ID and an\nexplanatory human readable string of what happened. If it\nloaded successfully, this will be a pair of empty\nstrings.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Transient</i>\ncontains a boolean that indicates whether the unit was\ncreated as a transient unit (i.e. via\n<b>CreateTransientUnit()</b> on the manager\nobject).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Security</b>\n<br>\nSimilarly to methods on the Manager object, read-only access\nis allowed for everyone. All operations are allowed for\nclients with the <b>CAP_SYS_ADMIN</b> capability or when the\norg.freedesktop.systemd1.manage-units privilege is granted\nby polkit.</font></p>\n\n<h2>SERVICE UNIT OBJECTS\n<a name=\"SERVICE UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\nservice unit objects implement the\norg.freedesktop.systemd1.Service interface (described here)\nin addition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/avahi_2ddaemon_2eservice {\n<br>\ninterface org.freedesktop.systemd1.Service { <br>\nmethods: <br>\nBindMount(in s source, <br>\nin s destination, <br>\nin b read_only, <br>\nin b mkdir); <br>\nMountImage(in s source, <br>\nin s destination, <br>\nin b read_only, <br>\nin b mkdir, <br>\nin a(ss) options); <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Type = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Restart = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PIDFile = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NotifyAccess = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestartUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutStartUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutStopUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TimeoutAbortUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TimeoutStartFailureMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TimeoutStopFailureMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RuntimeMaxUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t WatchdogUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t WatchdogTimestamp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t WatchdogTimestampMonotonic = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RootDirectoryStartOnly = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemainAfterExit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b GuessMainPID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (aiai) RestartPreventExitStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (aiai) RestartForceExitStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (aiai) SuccessExitStatus = ...; <br>\nreadonly u MainPID = ...; <br>\nreadonly u ControlPID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s BusName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u FileDescriptorStoreMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NFileDescriptorStore = ...; <br>\nreadonly s StatusText = '...'; <br>\nreadonly i StatusErrno = ...; <br>\nreadonly s Result = '...'; <br>\nreadonly s ReloadResult = '...'; <br>\nreadonly s CleanResult = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s USBFunctionDescriptors = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s USBFunctionStrings = '...'; <br>\nreadonly u UID = ...; <br>\nreadonly u GID = ...; <br>\nreadonly u NRestarts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s OOMPolicy = '...'; <br>\nreadonly t ExecMainStartTimestamp = ...; <br>\nreadonly t ExecMainStartTimestampMonotonic = ...; <br>\nreadonly t ExecMainExitTimestamp = ...; <br>\nreadonly t ExecMainExitTimestampMonotonic = ...; <br>\nreadonly u ExecMainPID = ...; <br>\nreadonly i ExecMainCode = ...; <br>\nreadonly i ExecMainStatus = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecCondition = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecConditionEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStartPre = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStartPreEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStart = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStartEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStartPost = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStartPostEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecReload = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecReloadEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStop = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStopEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStopPost = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasasttttuii) ExecStopPostEx = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sb) EnvironmentFiles = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PassEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnsetEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s WorkingDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootImage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) RootImageOptions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHash = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHashSignature = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashSignaturePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootVerity = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sba(ss)) ExtensionImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssba(ss)) MountImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i OOMScoreAdjust = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CoredumpFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Nice = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingClass = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay CPUAffinity = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUAffinityFromNUMA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i NUMAPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay NUMAMask = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUSchedulingResetOnFork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NonBlocking = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay StandardInputData = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardErrorFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTYPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYReset = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVHangup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVTDisallocate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SyslogIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SyslogLevelPrefix = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogLevel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogFacility = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i LogLevelMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LogRateLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogRateLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly aay LogExtraFields = [[...], ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LogNamespace = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SecureBits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CapabilityBoundingSet = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AmbientCapabilities = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s User = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Group = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DynamicUser = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(say) SetCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) LoadCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SupplementaryGroups = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PAMName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadWritePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadOnlyPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as InaccessiblePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as NoExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t MountFlags = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateTmp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateDevices = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectClock = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelTunables = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelModules = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelLogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectControlGroups = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateNetwork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateUsers = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateMounts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectHome = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectSystem = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SameProcessGroup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SELinuxContext = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) AppArmorProfile = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SmackProcessLabel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreSIGPIPE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoNewPrivileges = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SystemCallArchitectures = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SystemCallErrorNumber = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallLog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Personality = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LockPersonality = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) RestrictAddressFamilies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimeDirectoryPreserve = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u RuntimeDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RuntimeDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StateDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StateDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u CacheDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CacheDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogsDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as LogsDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u ConfigurationDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConfigurationDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutCleanUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MemoryDenyWriteExecute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictRealtime = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictSUIDSGID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestrictNamespaces = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindReadOnlyPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) TemporaryFileSystem = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MountAPIVFS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KeyringMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectProc = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProcSubset = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectHostname = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NetworkNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IPCNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods\n<br>\nBindMount()</b> and <b>MountImage()</b> implement the same\noperations as the respective methods on the Manager object\n(see above). However, these methods operate on the service\nobject and hence do not take a unit name parameter. Invoking\nthe methods directly on the Manager object has the advantage\nof not requiring a <b>GetUnit()</b> call to get the unit\nobject for a specific unit name. Calling the methods on the\nManager object is hence a round trip\noptimization.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties of the Service interface map directly to the\ncorresponding settings in service unit files. For the sake\nof brevity, here's a list of all exceptions only:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TimeoutStartUSec</i>,\n<i>TimeoutStopUSec</i> and <i>TimeoutAbortUSec</i> contain\nthe start, stop and abort timeouts, in microseconds. Note\nthe slight difference in naming when compared to the\nmatching unit file settings (see <b>systemd.service</b>(7)):\nthese bus properties strictly use microseconds (and thus are\nsuffixed <i>...USec</i>) while the unit file settings\ndefault to a time unit of seconds (and thus are suffixed\n<i>...Sec</i>), unless a different unit is explicitly\nspecified. This reflects that fact that internally the\nservice manager deals in microsecond units only, and the bus\nproperties are a relatively low-level (binary) concept\nexposing this. The unit file settings on the other hand are\nrelatively high-level (string-based) concepts and thus\nsupport more user friendly time specifications which default\nto second time units but allow other units too, if\nspecified.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>WatchdogTimestamp</i>\nand <i>WatchdogTimestampMonotonic</i> contain\n<b>CLOCK_REALTIME</b>/<b>CLOCK_MONOTONIC</b> microsecond\ntimestamps of the last watchdog ping received from the\nservice, or 0 if none was ever received.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ExecStartPre</i>,\n<i>ExecStart</i>, <i>ExecStartPost</i>, <i>ExecReload</i>,\n<i>ExecStop</i>, and <i>ExecStop</i> are arrays of\nstructures where each struct contains: the binary path to\nexecute; an array with all arguments to pass to the executed\ncommand, starting with argument 0; a boolean whether it\nshould be considered a failure if the process exits\nuncleanly; two pairs of\n<b>CLOCK_REALTIME</b>/<b>CLOCK_MONOTONIC</b> microsecond\ntimestamps when the process began and finished running the\nlast time, or 0 if it never ran or never finished running;\nthe PID of the process, or 0 if it has not run yet; the exit\ncode and status of the last run. This field hence maps more\nor less to the corresponding setting in the service unit\nfile but is augmented with runtime data.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LimitCPU</i>\n(and related properties) map more or less directly to the\ncorresponding settings in the service unit files except that\nif they aren't set, their value is 18446744073709551615\n(i.e. -1).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Capabilities</i>\ncontains the configured capabilities, as formatted with\n<a href=\"https://man.page/3/cap_to_text\">cap_to_text(3)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SecureBits</i>,\n<i>CapabilityBoundingSet</i>, <i>MountFlags</i> also\ncorrespond to the configured settings of the unit files, but\ninstead of being formatted as strings, they are encoded as\nthe actual binary flags they are.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ExecMainStartTimestamp</i>,\n<i>ExecMainStartTimestampMonotonic</i>,\n<i>ExecMainExitTimestamp</i>,\n<i>ExecMainExitTimestampMonotonic</i>, <i>ExecMainPID</i>,\n<i>ExecMainCode</i>, <i>ExecMainStatus</i> contain\ninformation about the main process of the service as far as\nit is known. This is often the same runtime information that\nis stored in <i>ExecStart</i>. However, it deviates for\n<i>Type=forking</i> services where the main process of the\nservice is not forked off systemd directly. These fields\neither contain information of the last run of the process or\nof the current running process.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>MainPID</i>\nand <i>ControlPID</i> contain the main and control PID of\nthe service. The main PID is the current main PID of the\nservice and is 0 when the service currently has no main PID.\nThe control PID is the PID of the current start/stop/reload\nprocess running and is 0 if no such process is currently\nrunning. That means that <i>ExecMainPID</i> and\n<i>MainPID</i> differ in the way that the latter immediately\nreflects whether a main process is currently running while\nthe latter possible contains information collected from the\nlast run even if the process is no longer around.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>StatusText</i>\ncontains the status text passed to the service manager via a\ncall to <a href=\"https://man.page/3/sd_notify\">sd_notify(3)</a>. This may be used by services to\ninform the service manager about its internal state with a\nnice explanatory string.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Result</i>\nencodes the execution result of the last run of the service.\nIt is useful to determine the reason a service failed if it\nis in the &quot;failed&quot; state (see <i>ActiveState</i>\nabove). The following values are currently known:\n&quot;success&quot; is set if the unit didn't fail.\n&quot;resources&quot; indicates that not enough resources\nwere available to fork off and execute the service\nprocesses. &quot;timeout&quot; indicates that a timeout\noccurred while executing a service operation.\n&quot;exit-code&quot; indicates that a service process\nexited with an unclean exit code. &quot;signal&quot;\nindicates that a service process exited with an uncaught\nsignal. &quot;core-dump&quot; indicates that a service\nprocess exited uncleanly and dumped core.\n&quot;watchdog&quot; indicates that a service did not send\nout watchdog ping messages often enough.\n&quot;start-limit&quot; indicates that a service has been\nstarted too frequently in a specific time frame (as\nconfigured in <i>StartLimitInterval</i>,\n<i>StartLimitBurst</i>).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ControlGroup</i>\nindicates the control group path the processes of this\nservice unit are placed in.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing properties map 1:1 to corresponding settings in\nthe unit file: <i>RootDirectory RootImage RootImageOptions\nRootVerity RootHash RootHashSignature MountImages\nExtensionImages</i> see systemd.exec(5) for their\nmeaning.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>MemoryAvailable</i>\nindicates how much unused memory is available to the unit\nbefore the &quot;MemoryMax&quot; or &quot;MemoryHigh&quot;\n(whichever is lower) limit set by the cgroup memory\ncontroller is reached. It will take into consideration\nlimits on all parent slices, other than the limits set on\nthe unit itself.</font></p>\n\n<h2>SOCKET UNIT OBJECTS\n<a name=\"SOCKET UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/avahi_2ddaemon_2esocket {\n<br>\ninterface org.freedesktop.systemd1.Socket { <br>\nmethods: <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s BindIPv6Only = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u Backlog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s BindToDevice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SocketUser = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SocketGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u SocketMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Accept = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b FlushPending = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Writable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b KeepAlive = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t KeepAliveTimeUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t KeepAliveIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u KeepAliveProbes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t DeferAcceptUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoDelay = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Priority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t ReceiveBuffer = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t SendBuffer = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IPTOS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IPTTL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t PipeSize = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b FreeBind = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Transparent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Broadcast = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PassCredentials = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PassSecurity = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PassPacketInfo = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Timestamping = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveOnStop = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) Listen = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Symlinks = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Mark = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u MaxConnections = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u MaxConnectionsPerSource = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly x MessageQueueMaxMessages = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly x MessageQueueMessageSize = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TCPCongestion = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ReusePort = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SmackLabel = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SmackLabelIPIn = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SmackLabelIPOut = '...'; <br>\nreadonly u ControlPID = ...; <br>\nreadonly s Result = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NConnections = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NAccepted = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u NRefused = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s FileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SocketProtocol = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TriggerLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u TriggerLimitBurst = ...; <br>\nreadonly u UID = ...; <br>\nreadonly u GID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStartPre = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStartPost = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStopPre = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecStopPost = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sb) EnvironmentFiles = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PassEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnsetEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s WorkingDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootImage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) RootImageOptions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHash = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHashSignature = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashSignaturePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootVerity = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sba(ss)) ExtensionImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssba(ss)) MountImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i OOMScoreAdjust = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CoredumpFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Nice = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingClass = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay CPUAffinity = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUAffinityFromNUMA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i NUMAPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay NUMAMask = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUSchedulingResetOnFork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NonBlocking = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay StandardInputData = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardErrorFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTYPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYReset = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVHangup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVTDisallocate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SyslogIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SyslogLevelPrefix = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogLevel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogFacility = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i LogLevelMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LogRateLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogRateLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly aay LogExtraFields = [[...], ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LogNamespace = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SecureBits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CapabilityBoundingSet = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AmbientCapabilities = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s User = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Group = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DynamicUser = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(say) SetCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) LoadCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SupplementaryGroups = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PAMName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadWritePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadOnlyPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as InaccessiblePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as NoExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t MountFlags = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateTmp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateDevices = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectClock = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelTunables = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelModules = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelLogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectControlGroups = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateNetwork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateUsers = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateMounts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectHome = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectSystem = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SameProcessGroup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SELinuxContext = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) AppArmorProfile = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SmackProcessLabel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreSIGPIPE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoNewPrivileges = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SystemCallArchitectures = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SystemCallErrorNumber = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallLog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Personality = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LockPersonality = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) RestrictAddressFamilies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimeDirectoryPreserve = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u RuntimeDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RuntimeDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StateDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StateDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u CacheDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CacheDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogsDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as LogsDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u ConfigurationDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConfigurationDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutCleanUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MemoryDenyWriteExecute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictRealtime = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictSUIDSGID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestrictNamespaces = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindReadOnlyPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) TemporaryFileSystem = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MountAPIVFS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KeyringMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectProc = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProcSubset = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectHostname = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NetworkNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IPCNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost of the properties map directly to the corresponding\nsettings in socket unit files. As socket units can include\n<i>ExecStartPre</i> (and similar) fields which contain\ninformation about processes to execute. They also share most\nof the fields related to the execution context that Service\nobjects expose (see above).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\naddition to these properties there are the\nfollowing:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NAccepted</i>\ncontains the accumulated number of connections ever accepted\non this socket. This only applies to sockets with\n<i>Accept</i> set to &quot;yes&quot;, i.e. those where\nsystemd is responsible for accepted connections.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly\n<i>NConnections</i> contains the number of currently open\nconnections on this socket. It only applies only to socket\nunits with <i>Accept</i> set to &quot;yes&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Result</i>\nencodes the reason why a socket unit failed if it is in the\n&quot;failed&quot; state (see <i>ActiveState</i> above). The\nvalues &quot;success&quot;, &quot;resources&quot;,\n&quot;timeout&quot;, &quot;exit-code&quot;,\n&quot;signal&quot; and &quot;core-dump&quot; have the same\nmeaning as they have for the corresponding field of service\nunits (see above). In addition to that, the value\n&quot;service-failed-permanent&quot; indicates that the\nservice of this socket failed continuously.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>FlushPending</i>\nspecifies whether to flush the socket just before entering\nthe listening state. This setting only applies to sockets\nwith <i>Accept=</i> set to &quot;no&quot;.</font></p>\n\n<h2>TARGET UNIT OBJECTS\n<a name=\"TARGET UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/basic_2etarget { <br>\ninterface org.freedesktop.systemd1.Target { <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Target\nunits have neither type-specific methods nor\nproperties.</font></p>\n\n<h2>DEVICE UNIT OBJECTS\n<a name=\"DEVICE UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\ndevice unit objects implement the\norg.freedesktop.systemd1.Device interface (described here)\nin addition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/dev_2dttyS0_2edevice { <br>\ninterface org.freedesktop.systemd1.Device { <br>\nproperties: <br>\nreadonly s SysFSPath = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nDevice units only expose a single type-specific\nproperty:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>SysFSPath</i>\ncontains the sysfs path of the kernel device this object\ncorresponds to.</font></p>\n\n<h2>MOUNT UNIT OBJECTS\n<a name=\"MOUNT UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\nmount unit objects implement the\norg.freedesktop.systemd1.Mount interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/home_2emount { <br>\ninterface org.freedesktop.systemd1.Mount { <br>\nmethods: <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Where = '...'; <br>\nreadonly s What = '...'; <br>\nreadonly s Options = '...'; <br>\nreadonly s Type = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutUSec = ...; <br>\nreadonly u ControlPID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SloppyOptions = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LazyUnmount = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ForceUnmount = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ReadWriteOnly = ...; <br>\nreadonly s Result = '...'; <br>\nreadonly u UID = ...; <br>\nreadonly u GID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecMount = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecUnmount = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecRemount = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sb) EnvironmentFiles = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PassEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnsetEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s WorkingDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootImage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) RootImageOptions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHash = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHashSignature = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashSignaturePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootVerity = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sba(ss)) ExtensionImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssba(ss)) MountImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i OOMScoreAdjust = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CoredumpFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Nice = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingClass = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay CPUAffinity = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUAffinityFromNUMA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i NUMAPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay NUMAMask = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUSchedulingResetOnFork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NonBlocking = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay StandardInputData = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardErrorFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTYPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYReset = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVHangup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVTDisallocate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SyslogIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SyslogLevelPrefix = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogLevel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogFacility = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i LogLevelMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LogRateLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogRateLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly aay LogExtraFields = [[...], ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LogNamespace = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SecureBits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CapabilityBoundingSet = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AmbientCapabilities = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s User = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Group = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DynamicUser = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(say) SetCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) LoadCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SupplementaryGroups = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PAMName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadWritePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadOnlyPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as InaccessiblePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as NoExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t MountFlags = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateTmp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateDevices = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectClock = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelTunables = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelModules = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelLogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectControlGroups = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateNetwork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateUsers = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateMounts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectHome = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectSystem = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SameProcessGroup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SELinuxContext = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) AppArmorProfile = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SmackProcessLabel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreSIGPIPE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoNewPrivileges = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SystemCallArchitectures = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SystemCallErrorNumber = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallLog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Personality = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LockPersonality = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) RestrictAddressFamilies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimeDirectoryPreserve = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u RuntimeDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RuntimeDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StateDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StateDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u CacheDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CacheDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogsDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as LogsDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u ConfigurationDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConfigurationDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutCleanUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MemoryDenyWriteExecute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictRealtime = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictSUIDSGID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestrictNamespaces = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindReadOnlyPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) TemporaryFileSystem = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MountAPIVFS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KeyringMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectProc = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProcSubset = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectHostname = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NetworkNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IPCNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost of the properties map directly to the corresponding\nsettings in mount unit files. As mount units invoke the\n/usr/bin/mount command, their bus objects include implicit\n<i>ExecMount</i> (and similar) fields which contain\ninformation about processes to execute. They also share most\nof the fields related to the execution context that Service\nobjects expose (see above). In addition to these properties\nthere are the following:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ControlPID</i>\ncontains the PID of the currently running /usr/bin/mount or\n/usr/bin/umount command if there is one running, otherwise\n0.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Result</i>\ncontains a value explaining why a mount unit failed if it\nfailed. It can take the values &quot;success&quot;,\n&quot;resources&quot;, &quot;timeout&quot;,\n&quot;exit-code&quot;, &quot;signal&quot;, or\n&quot;core-dump&quot; which have the identical meaning as\nthe corresponding values of the corresponding field of\nservice unit objects (see above).</font></p>\n\n<h2>AUTOMOUNT UNIT OBJECTS\n<a name=\"AUTOMOUNT UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\nautomount unit objects implement the\norg.freedesktop.systemd1.Automount interface (described\nhere) in addition to the generic\norg.freedesktop.systemd1.Unit interface (see\nabove).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/proc_2dsys_2dfs_2dbinfmt_5fmisc_2eautomount\n{ <br>\ninterface org.freedesktop.systemd1.Automount { <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Where = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DirectoryMode = ...; <br>\nreadonly s Result = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutIdleUSec = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost of the properties map directly to the corresponding\nsettings in the automount unit files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Result</i>\nknows the values &quot;success&quot; and\n&quot;resources&quot; at this time. They have the same\nmeanings as the corresponding values of the corresponding\nfield of the Service object.</font></p>\n\n<h2>TIMER UNIT OBJECTS\n<a name=\"TIMER UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\ntimer unit objects implement the\norg.freedesktop.systemd1.Timer interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/systemd_2dtmpfiles_2dclean_2etimer\n{ <br>\ninterface org.freedesktop.systemd1.Timer { <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Unit = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(stt) TimersMonotonic = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sst) TimersCalendar = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b OnClockChange = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b OnTimezoneChange = ...; <br>\nreadonly t NextElapseUSecRealtime = ...; <br>\nreadonly t NextElapseUSecMonotonic = ...; <br>\nreadonly t LastTriggerUSec = ...; <br>\nreadonly t LastTriggerUSecMonotonic = ...; <br>\nreadonly s Result = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AccuracyUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RandomizedDelayUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b FixedRandomDelay = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b Persistent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b WakeSystem = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemainAfterElapse = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<i><br>\nUnit</i> contains the name of the unit to activate when the\ntimer elapses.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TimersMonotonic</i>\ncontains an array of structs that contain information about\nall monotonic timers of this timer unit. The structs contain\na string identifying the timer base, which is one of\n&quot;OnActiveUSec&quot;, &quot;OnBootUSec&quot;,\n&quot;OnStartupUSec&quot;, &quot;OnUnitActiveUSec&quot;, or\n&quot;OnUnitInactiveUSec&quot; which correspond to the\nsettings of the same names in the timer unit files; the\nmicrosecond offset from this timer base in monotonic time;\nthe next elapsation point on the <b>CLOCK_MONOTONIC</b>\nclock, relative to its epoch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>TimersCalendar</i>\ncontains an array of structs that contain information about\nall realtime/calendar timers of this timer unit. The structs\ncontain a string identifying the timer base, which may only\nbe &quot;OnCalendar&quot; for now; the calendar\nspecification string; the next elapsation point on the\n<b>CLOCK_REALTIME</b> clock, relative to its\nepoch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>NextElapseUSecRealtime</i>\ncontains the next elapsation point on the\n<b>CLOCK_REALTIME</b> clock in miscroseconds since the\nepoch, or 0 if this timer event does not include at least\none calendar event.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Similarly,\n<i>NextElapseUSecMonotonic</i> contains the next elapsation\npoint on the <b>CLOCK_MONOTONIC</b> clock in microseconds\nsince the epoch, or 0 if this timer event does not include\nat least one monotonic event.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Result</i>\nknows the values &quot;success&quot; and\n&quot;resources&quot; with the same meanings as the matching\nvalues of the corresponding property of the service\ninterface.</font></p>\n\n<h2>SWAP UNIT OBJECTS\n<a name=\"SWAP UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\nswap unit objects implement the\norg.freedesktop.systemd1.Swap interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/dev_2dsda3_2eswap { <br>\ninterface org.freedesktop.systemd1.Swap { <br>\nmethods: <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\nreadonly s What = '...'; <br>\nreadonly i Priority = ...; <br>\nreadonly s Options = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutUSec = ...; <br>\nreadonly u ControlPID = ...; <br>\nreadonly s Result = '...'; <br>\nreadonly u UID = ...; <br>\nreadonly u GID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecActivate = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;invalidates&quot;)\n<br>\nreadonly a(sasbttttuii) ExecDeactivate = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as Environment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sb) EnvironmentFiles = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as PassEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as UnsetEnvironment = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u UMask = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPU = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCPUSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitFSIZESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitDATASoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSTACKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitCORESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRSSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNOFILESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitAS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitASSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNPROCSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCK = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMEMLOCKSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitLOCKSSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDING = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitSIGPENDINGSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitMSGQUEUESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitNICESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIO = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTPRIOSoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIME = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LimitRTTIMESoft = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s WorkingDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootDirectory = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootImage = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) RootImageOptions = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHash = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay RootHashSignature = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootHashSignaturePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RootVerity = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(sba(ss)) ExtensionImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssba(ss)) MountImages = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i OOMScoreAdjust = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CoredumpFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i Nice = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingClass = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i IOSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i CPUSchedulingPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay CPUAffinity = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUAffinityFromNUMA = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i NUMAPolicy = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay NUMAMask = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimerSlackNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b CPUSchedulingResetOnFork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NonBlocking = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardInputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly ay StandardInputData = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutput = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardOutputFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardError = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s StandardErrorFileDescriptorName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s TTYPath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYReset = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVHangup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b TTYVTDisallocate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogPriority = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s SyslogIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SyslogLevelPrefix = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogLevel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SyslogFacility = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i LogLevelMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t LogRateLimitIntervalUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogRateLimitBurst = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly aay LogExtraFields = [[...], ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s LogNamespace = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SecureBits = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t CapabilityBoundingSet = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t AmbientCapabilities = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s User = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Group = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b DynamicUser = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RemoveIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(say) SetCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) LoadCredential = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SupplementaryGroups = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s PAMName = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadWritePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ReadOnlyPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as InaccessiblePaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as NoExecPaths = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t MountFlags = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateTmp = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateDevices = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectClock = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelTunables = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelModules = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectKernelLogs = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectControlGroups = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateNetwork = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateUsers = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateMounts = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b PrivateIPC = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectHome = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectSystem = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SameProcessGroup = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpIdentifier = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s UtmpMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SELinuxContext = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) AppArmorProfile = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bs) SmackProcessLabel = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b IgnoreSIGPIPE = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b NoNewPrivileges = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallFilter = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as SystemCallArchitectures = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i SystemCallErrorNumber = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) SystemCallLog = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Personality = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b LockPersonality = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (bas) RestrictAddressFamilies = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s RuntimeDirectoryPreserve = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u RuntimeDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as RuntimeDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u StateDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as StateDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u CacheDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as CacheDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u LogsDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as LogsDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u ConfigurationDirectoryMode = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly as ConfigurationDirectory = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutCleanUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MemoryDenyWriteExecute = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictRealtime = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b RestrictSUIDSGID = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RestrictNamespaces = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ssbt) BindReadOnlyPaths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) TemporaryFileSystem = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MountAPIVFS = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KeyringMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProtectProc = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s ProcSubset = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b ProtectHostname = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s NetworkNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s IPCNamespacePath = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost of the properties map directly to the corresponding\nsettings in swap unit files. As mount units invoke the\n<b>swapon</b>(8) command, their bus objects include implicit\n<i>ExecActivate</i> (and similar) fields which contain\ninformation about processes to execute. They also share most\nof the fields related to the execution context that Service\nobjects expose (see above). In addition to these properties\nthere are the following:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>ControlPID</i>\ncontains the PID of the currently running <b>swapon</b>(8)\nor <b>swapoff</b>(8) command if there is one running,\notherwise 0.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Result</i>\ncontains a value explaining why a mount unit failed if it\nfailed. It can take the values &quot;success&quot;,\n&quot;resources&quot;, &quot;timeout&quot;,\n&quot;exit-code&quot;, &quot;signal&quot;, or\n&quot;core-dump&quot; which have the identical meanings as\nthe corresponding values of the corresponding field of\nservice unit objects (see above).</font></p>\n\n<h2>PATH UNIT OBJECTS\n<a name=\"PATH UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/cups_2epath { <br>\ninterface org.freedesktop.systemd1.Path { <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s Unit = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly a(ss) Paths = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b MakeDirectory = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u DirectoryMode = ...; <br>\nreadonly s Result = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties correspond directly with the matching\nsettings in path unit files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nothers:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Paths</i>\ncontains an array of structs. Each struct contains the\ncondition to watch, which can be one of\n&quot;PathExists&quot;, &quot;PathExistsGlob&quot;,\n&quot;PathChanged&quot;, &quot;PathModified&quot;, or\n&quot;DirectoryNotEmpty&quot; which correspond directly to\nthe matching settings in the path unit files; and the path\nto watch, possibly including glob expressions.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Result</i>\ncontains a result value which can be &quot;success&quot; or\n&quot;resources&quot; which have the same meaning as the\ncorresponding field of the Service interface.</font></p>\n\n<h2>SLICE UNIT OBJECTS\n<a name=\"SLICE UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\nslice unit objects implement the\norg.freedesktop.systemd1.Slice interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/system_2eslice { <br>\ninterface org.freedesktop.systemd1.Slice { <br>\nmethods: <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nMost properties correspond directly with the matching\nsettings in slice unit files.</font></p>\n\n<h2>SCOPE UNIT OBJECTS\n<a name=\"SCOPE UNIT OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">All\nscope unit objects implement the\norg.freedesktop.systemd1.Scope interface (described here) in\naddition to the generic org.freedesktop.systemd1.Unit\ninterface (see above).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/unit/session_2d1_2escope { <br>\ninterface org.freedesktop.systemd1.Scope { <br>\nmethods: <br>\nAbandon(); <br>\nGetProcesses(out a(sus) processes); <br>\nAttachProcesses(in s subcgroup, <br>\nin au pids); <br>\nsignals: <br>\nRequestStop(); <br>\nproperties: <br>\nreadonly s Controller = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t TimeoutStopUSec = ...; <br>\nreadonly s Result = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly t RuntimeMaxUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s Slice = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ControlGroup = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryAvailable = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUUsageNSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay EffectiveMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksCurrent = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPIngressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IPEgressPackets = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOReadOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteBytes = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWriteOperations = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b Delegate = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DelegateControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b CPUAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupCPUShares = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPerSecUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t CPUQuotaPeriodUSec = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedCPUs = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly ay AllowedMemoryNodes = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t IOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteBandwidthMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOReadIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IOWriteIOPSMax = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) IODeviceLatencyTargetUSec = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b BlockIOAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t BlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t StartupBlockIOWeight = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIODeviceWeight = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOReadBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(st) BlockIOWriteBandwidth = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b MemoryAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t DefaultMemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMin = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLow = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryHigh = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemorySwapMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t MemoryLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s DevicePolicy = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) DeviceAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b TasksAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly t TasksMax = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly b IPAccounting = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iayu) IPAddressDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPIngressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as IPEgressFilterPath = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly as DisableControllers = ['...', ...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMSwap = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMMemoryPressure = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly u ManagedOOMMemoryPressureLimit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly s ManagedOOMPreference = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(ss) BPFProgram = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindAllow = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;false&quot;)\n<br>\nreadonly a(iiqq) SocketBindDeny = [...]; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s KillMode = '...'; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i KillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i RestartKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i FinalKillSignal = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGKILL = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly b SendSIGHUP = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly i WatchdogSignal = ...; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\ninterface org.freedesktop.systemd1.Unit { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods\n<br>\nAbandon()</b> may be used to place a scope unit in the\n&quot;abandoned&quot; state. This may be used to inform the\nsystem manager that the manager that created the scope lost\ninterest in the scope (for example, because it is\nterminating), without wanting to shut down the scope\nentirely.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Signals\n<br>\nRequestStop</b> is sent to the peer that is configured in\nthe <i>Controller</i> property when systemd is requested to\nterminate the scope unit. A program registering a scope can\nuse this to cleanly shut down the processes it added to the\nscope instead of letting systemd do it with the usual\n<b>SIGTERM</b> logic.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<br>\nAll properties correspond directly with the matching\nproperties of service units.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Controller</i>\ncontains the bus name (unique or well-known) that is\nnotified when the scope unit is to be shut down via a\n<b>RequestStop</b> signal (see below). This is set when the\nscope is created. If not set, the scope's processes will\nterminated with <b>SIGTERM</b> directly.</font></p>\n\n<h2>JOB OBJECTS\n<a name=\"JOB OBJECTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Job\nobjects encapsulate scheduled or running jobs. Each unit can\nhave none or one jobs in the execution queue. Each job is\nattached to exactly one unit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">node\n/org/freedesktop/systemd1/job/666 { <br>\ninterface org.freedesktop.systemd1.Job { <br>\nmethods: <br>\nCancel(); <br>\nGetAfter(out a(usssoo) jobs); <br>\nGetBefore(out a(usssoo) jobs); <br>\nproperties: <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly u Id = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly (so) Unit = ...; <br>\n\n@org.freedesktop.DBus.Property.EmitsChangedSignal(&quot;const&quot;)\n<br>\nreadonly s JobType = '...'; <br>\nreadonly s State = '...'; <br>\n}; <br>\ninterface org.freedesktop.DBus.Peer { ... }; <br>\ninterface org.freedesktop.DBus.Introspectable { ... }; <br>\ninterface org.freedesktop.DBus.Properties { ... }; <br>\n};</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Methods\n<br>\nCancel()</b> cancels the job. Note that this will remove a\njob from the queue if it is not yet executed but generally\nwill not cause a job that is already in the process of being\nexecuted to be aborted. This operation may also be requested\nvia the <b>CancelJob()</b> method of the Manager object (see\nabove), which is sometimes useful to reduce\nroundtrips.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Properties</b>\n<i><br>\nId</i> is the numeric Id of the job. During the runtime of a\nsystemd instance each numeric ID is only assigned\nonce.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>Unit</i>\nrefers to the unit this job belongs to. It is a structure\nconsisting of the name of the unit and a bus path to the\nunit's object.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>JobType</i>\nrefers to the job's type and is one of &quot;start&quot;,\n&quot;verify-active&quot;, &quot;stop&quot;,\n&quot;reload&quot;, &quot;restart&quot;,\n&quot;try-restart&quot;, or &quot;reload-or-start&quot;.\nNote that later versions might define additional\nvalues.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>State</i>\nrefers to the job's state and is one of &quot;waiting&quot;\nand &quot;running&quot;. The former indicates that a job is\ncurrently queued but has not begun to execute yet. The\nlatter indicates that a job is currently being\nexecuted.</font></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;1.&nbsp;Introspect\norg.freedesktop.systemd1.Manager on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system \\ <br>\n--dest org.freedesktop.systemd1 \\ <br>\n--object-path /org/freedesktop/systemd1</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;2.&nbsp;Introspect\na unit on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\nbusctl introspect org.freedesktop.systemd1 \\ <br>\n$(busctl call org.freedesktop.systemd1 \\ <br>\n/org/freedesktop/systemd1 \\ <br>\norg.freedesktop.systemd1.Manager \\ <br>\nGetUnit s systemd-resolved.service | cut -d'&quot;'\n-f2)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Example&nbsp;3.&nbsp;Introspect\norg.freedesktop.systemd1.Job on the bus</b></font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngdbus introspect --system --dest org.freedesktop.systemd1 \\\n<br>\n--object-path /org/freedesktop/systemd1/job/1292</font></p>\n\n<h2>VERSIONING\n<a name=\"VERSIONING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">These\nD-Bus interfaces follow</font> <b><font color=\"#0000FF\">the\nusual interface versioning guidelines</font></b>\n<small><font color=\"#000000\">[4]</font></small>\n<font color=\"#000000\">.</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"9%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">polkit</font></p> </td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.freedesktop.org/software/polkit/docs/latest/</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">2.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">New\nControl Group Interface</font></p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://www.freedesktop.org/wiki/Software/systemd/ControlGroupInterface/</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">3.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Booting\nWithout /usr is Broken</font></p></td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">http://freedesktop.org/wiki/Software/systemd/separate-usr-is-broken</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">4.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">the usual\ninterface versioning guidelines</font></p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">http://0pointer.de/blog/projects/versioning-dbus.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#INTRODUCTION\">INTRODUCTION</a>","<a href=\"#THE MANAGER OBJECT\">THE MANAGER OBJECT</a>","<a href=\"#UNIT OBJECTS\">UNIT OBJECTS</a>","<a href=\"#SERVICE UNIT OBJECTS\">SERVICE UNIT OBJECTS</a>","<a href=\"#SOCKET UNIT OBJECTS\">SOCKET UNIT OBJECTS</a>","<a href=\"#TARGET UNIT OBJECTS\">TARGET UNIT OBJECTS</a>","<a href=\"#DEVICE UNIT OBJECTS\">DEVICE UNIT OBJECTS</a>","<a href=\"#MOUNT UNIT OBJECTS\">MOUNT UNIT OBJECTS</a>","<a href=\"#AUTOMOUNT UNIT OBJECTS\">AUTOMOUNT UNIT OBJECTS</a>","<a href=\"#TIMER UNIT OBJECTS\">TIMER UNIT OBJECTS</a>","<a href=\"#SWAP UNIT OBJECTS\">SWAP UNIT OBJECTS</a>","<a href=\"#PATH UNIT OBJECTS\">PATH UNIT OBJECTS</a>","<a href=\"#SLICE UNIT OBJECTS\">SLICE UNIT OBJECTS</a>","<a href=\"#SCOPE UNIT OBJECTS\">SCOPE UNIT OBJECTS</a>","<a href=\"#JOB OBJECTS\">JOB OBJECTS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#VERSIONING\">VERSIONING</a>","<a href=\"#NOTES\">NOTES</a>"],"level":5}