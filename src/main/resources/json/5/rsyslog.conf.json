{"name":"rsyslog.conf","body":"\n\n<h1 align=\"center\">RSYSLOG.CONF</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">rsyslog.conf -\nrsyslogd(8) configuration file</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>rsyslog.conf</i> file is the main configuration file for\nthe <b>rsyslogd</b>(8) which logs system messages on *nix\nsystems. This file specifies rules for logging. For special\nfeatures see the <b>rsyslogd</b>(8) manpage. Rsyslog.conf is\nbackward-compatible with sysklogd&rsquo;s syslog.conf file.\nSo if you migrate from sysklogd you can rename it and it\nshould work.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Note that\nthis version of rsyslog ships with extensive documentation\nin HTML format.</b> This is provided in the ./doc\nsubdirectory and probably in a separate package if you\ninstalled rsyslog via a packaging system. To use\nrsyslog&rsquo;s advanced features, you <b>need</b> to look\nat the HTML documentation, because the man pages only cover\nbasic aspects of operation.</p>\n\n<h2>MODULES\n<a name=\"MODULES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rsyslog has a\nmodular design. Consequently, there is a growing number of\nmodules. See the HTML documentation for their full\ndescription.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>omsnmp</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"35%\">\n\n\n<p>SNMP trap output module</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>omgssapi</i></p>\n\n<p style=\"margin-left:22%;\">Output module for GSS-enabled\nsyslog</p>\n\n<p style=\"margin-left:11%;\"><i>ommysql</i></p>\n\n<p style=\"margin-left:22%;\">Output module for MySQL</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>omrelp</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Output module for the reliable RELP protocol (prevents\nmessage loss). For details, see below at imrelp and the HTML\ndocumentation. It can be used like this:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">*.*\n:omrelp:server:port</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">*.*\n:omrelp:192.168.0.1:2514 # actual sample</p>\n\n<p style=\"margin-left:11%;\"><i>ompgsql</i></p>\n\n<p style=\"margin-left:22%;\">Output module for\nPostgreSQL</p>\n\n<p style=\"margin-left:11%;\"><i>omlibdbi</i></p>\n\n<p style=\"margin-left:22%;\">Generic database output module\n(Firebird/Interbase, MS SQL, Sybase, SQLite, Ingres, Oracle,\nmSQL)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>imfile</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Input module for text files</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>imudp</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Input plugin for UDP syslog. Replaces the deprecated -r\noption. Can be used like this:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$ModLoad\nimudp</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$UDPServerRun\n514</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><i>imtcp</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Input plugin for plain TCP\nsyslog. Replaces the deprecated -t option. Can be used like\nthis:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$ModLoad\nimtcp</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">$InputTCPServerRun\n514</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><i>imrelp</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Input plugin for the RELP\nprotocol. RELP can be used instead of UDP or plain TCP\nsyslog to provide reliable delivery of syslog messages.\nPlease note that plain TCP syslog does NOT provide truly\nreliable delivery, with it messages may be lost when there\nis a connection problem or the server shuts down. RELP\nprevents message loss in those cases. It can be used like\nthis:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$ModLoad\nimrelp</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">$InputRELPServerRun\n2514</p>\n\n<p style=\"margin-left:11%;\"><i>imgssapi</i></p>\n\n<p style=\"margin-left:22%;\">Input plugin for plain TCP and\nGSS-enable syslog</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>immark</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Support for mark messages</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>imklog</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Kernel logging. To include kernel log messages, you need\nto do</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$ModLoad\nimklog</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Please note\nthat the klogd daemon is no longer necessary and\nconsequently no longer provided by the rsyslog package.</p>\n\n<p style=\"margin-left:11%;\"><i>imuxsock</i></p>\n\n<p style=\"margin-left:22%;\">Unix sockets, including the\nsystem log socket. You need to specify</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$ModLoad\nimuxsock</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">in order to\nreceive log messages from local system processes. This\nconfig directive should only left out if you know exactly\nwhat you are doing.</p>\n\n<h2>BASIC STRUCTURE\n<a name=\"BASIC STRUCTURE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Lines starting\nwith a hash mark (&rsquo;#&rsquo;) and empty lines are\nignored. Rsyslog.conf should contain following sections\n(sorted by recommended order in file): <br>\nGlobal directives</p>\n\n<p style=\"margin-left:22%;\">Global directives set some\nglobal properties of whole rsyslog daemon, for example size\nof main message queue ($MainMessageQueueSize), loading\nexternal modules ($ModLoad) and so on. All global directives\nneed to be specified on a line by their own and must start\nwith a dollar-sign. The complete list of global directives\ncan be found in HTML documentation in doc directory or\nonline on web pages.</p>\n\n<p style=\"margin-left:11%;\">Templates</p>\n\n<p style=\"margin-left:22%;\">Templates allow you to specify\nformat of the logged message. They are also used for dynamic\nfile name generation. They have to be defined before they\nare used in rules. For more info about templates see\nTEMPLATES section of this manpage.</p>\n\n<p style=\"margin-left:11%;\">Output channels</p>\n\n<p style=\"margin-left:22%;\">Output channels provide an\numbrella for any type of output that the user might want.\nThey have to be defined before they are used in rules. For\nmore info about output channels see OUTPUT CHANNELS section\nof this manpage.</p>\n\n<p style=\"margin-left:11%;\">Rules (selector + action)</p>\n\n<p style=\"margin-left:22%;\">Every rule line consists of two\nfields, a selector field and an action field. These two\nfields are separated by one or more spaces or tabs. The\nselector field specifies a pattern of facilities and\npriorities belonging to the specified action.</p>\n\n<h2>SELECTORS\n<a name=\"SELECTORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The selector\nfield itself again consists of two parts, a facility and a\npriority, separated by a period (&rsquo;.&rsquo;). Both\nparts are case insensitive and can also be specified as\ndecimal numbers, but don&rsquo;t do that, you have been\nwarned. Both facilities and priorities are described in\nsyslog(3). The names mentioned below correspond to the\nsimilar LOG_-values in /usr/include/syslog.h.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The facility is\none of the following keywords: auth, authpriv, cron, daemon,\nkern, lpr, mail, mark, news, security (same as auth),\nsyslog, user, uucp and local0 through local7. The keyword\nsecurity should not be used anymore and mark is only for\ninternal use and therefore should not be used in\napplications. Anyway, you may want to specify and redirect\nthese messages here. The facility specifies the subsystem\nthat produced the message, i.e. all mail programs log with\nthe mail facility (LOG_MAIL) if they log using syslog.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The priority is\none of the following keywords, in ascending order: debug,\ninfo, notice, warning, warn (same as warning), err, error\n(same as err), crit, alert, emerg, panic (same as emerg).\nThe keywords error, warn and panic are deprecated and should\nnot be used anymore. The priority defines the severity of\nthe message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The behavior of\nthe original BSD syslogd is that all messages of the\nspecified priority and higher are logged according to the\ngiven action. Rsyslogd behaves the same, but has some\nextensions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe above mentioned names the rsyslogd(8) understands the\nfollowing extensions: An asterisk (&rsquo;*&rsquo;) stands\nfor all facilities or all priorities, depending on where it\nis used (before or after the period). The keyword none\nstands for no priority of the given facility.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can specify\nmultiple facilities with the same priority pattern in one\nstatement using the comma (&rsquo;,&rsquo;) operator. You\nmay specify as much facilities as you want. Remember that\nonly the facility part from such a statement is taken, a\npriority part would be skipped.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Multiple\nselectors may be specified for a single action using the\nsemicolon (&rsquo;;&rsquo;) separator. Remember that each\nselector in the selector field is capable to overwrite the\npreceding ones. Using this behavior you can exclude some\npriorities from the pattern.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rsyslogd has a\nsyntax extension to the original BSD source, that makes its\nuse more intuitively. You may precede every priority with an\nequals sign (&rsquo;=&rsquo;) to specify only this single\npriority and not any of the above. You may also (both is\nvalid, too) precede the priority with an exclamation mark\n(&rsquo;!&rsquo;) to ignore all that priorities, either\nexact this one or this and any higher priority. If you use\nboth extensions then the exclamation mark must occur before\nthe equals sign, just use it intuitively.</p>\n\n<h2>ACTIONS\n<a name=\"ACTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The action\nfield of a rule describes what to do with the message. In\ngeneral, message content is written to a kind of\n&quot;logfile&quot;. But also other actions might be done,\nlike writing to a database table or forwarding to another\nhost.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Regular\nfile</b> <br>\nTypically messages are logged to real files. The file has to\nbe specified with full pathname, beginning with a slash\n(&rsquo;/&rsquo;).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example:</b></p>\n\n<p style=\"margin-left:22%;\">*.*\n/var/log/traditionalfile.log;RSYSLOG_TraditionalFileFormat #\nlog to a file in the traditional format</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note: if you\nwould like to use high-precision timestamps in your log\nfiles, just remove the\n&quot;;RSYSLOG_TraditionalFormat&quot;. That will select the\ndefault template, which, if not changed, uses RFC 3339\ntimestamps.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example:</b></p>\n\n<p style=\"margin-left:22%;\">*.* /var/log/file.log # log to\na file with RFC3339 timestamps</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\nfiles are not synced after each write. To enable syncing of\nlog files globally, use either the\n&quot;$ActionFileEnableSync&quot; directive or the\n&quot;sync&quot; parameter to omfile. Enabling this option\ndegrades performance and it is advised not to enable syncing\nunless you know what you are doing. To selectively disable\nsyncing for certain files, you may prefix the file path with\na minus sign (&quot;-&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Named\npipes</b> <br>\nThis version of rsyslogd(8) has support for logging output\nto named pipes (fifos). A fifo or named pipe can be used as\na destination for log messages by prepending a pipe symbol\n(&rsquo;|&rsquo;) to the name of the file. This is handy for\ndebugging. Note that the fifo must be created with the\nmkfifo(1) command before rsyslogd(8) is started.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Terminal and\nconsole</b> <br>\nIf the file you specified is a tty, special tty-handling is\ndone, same with /dev/console.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Remote\nmachine</b> <br>\nThere are three ways to forward message: the traditional UDP\ntransport, which is extremely lossy but standard, the plain\nTCP based transport which loses messages only during certain\nsituations but is widely available and the RELP transport\nwhich does not lose messages but is currently available only\nas part of rsyslogd 3.15.0 and above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To forward\nmessages to another host via UDP, prepend the hostname with\nthe at sign (&quot;@&quot;). To forward it via plain tcp,\nprepend two at signs (&quot;@@&quot;). To forward via RELP,\nprepend the string &quot;:omrelp:&quot; in front of the\nhostname.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example:</b></p>\n\n<p style=\"margin-left:22%;\">*.* @192.168.0.1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the example\nabove, messages are forwarded via UDP to the machine\n192.168.0.1, the destination port defaults to 514. Due to\nthe nature of UDP, you will probably lose some messages in\ntransit. If you expect high traffic volume, you can expect\nto lose a quite noticeable number of messages (the higher\nthe traffic, the more likely and severe is message\nloss).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sockets for\nforwarded messages can be bound to a specific device using\nthe &quot;device&quot; option for the omfwd module.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example:</b></p>\n\n<p style=\"margin-left:22%;\">action(type=&quot;omfwd&quot;\nTarget=&quot;192.168.0.1&quot; Device=&quot;eth0&quot;\nPort=514 Protocol=&quot;udp&quot;)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the example\nabove, messages are forwarded via UDP to the machine\n192.168.0.1 at port 514 over the device eth0. TCP can be\nused by setting Protocol to &quot;tcp&quot; in the above\nexample.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For Linux with\nVRF support, the device option is used to specify the VRF to\nsend messages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>If you would\nlike to prevent message loss, use RELP:</b></p>\n\n<p style=\"margin-left:22%;\">*.*\n:omrelp:192.168.0.1:2514</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that a\nport number was given as there is no standard port for\nrelp.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Keep in mind\nthat you need to load the correct input and output plugins\n(see &quot;Modules&quot; above).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat rsyslogd offers a variety of options in regarding to\nremote forwarding. For full details, please see the HTML\ndocumentation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>List of\nusers</b> <br>\nUsually critical messages are also directed to\n&rsquo;&rsquo;root&rsquo;&rsquo; on that machine. You can\nspecify a list of users that shall get the message by simply\nwriting &quot;:omusrmsg:&quot; followed by the login name.\nYou may specify more than one user by separating them with\ncommas (&rsquo;,&rsquo;). If they&rsquo;re logged in they\nget the message (for example:\n&quot;:omusrmsg:root,user1,user2&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Everyone\nlogged on</b> <br>\nEmergency messages often go to all users currently online to\nnotify them that something strange is happening with the\nsystem. To specify this wall(1)-feature use an\n&quot;:omusrmsg:*&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Database\ntable</b> <br>\nThis allows logging of the message to a database table. By\ndefault, a MonitorWare-compatible schema is required for\nthis to work. You can create that schema with the\ncreateDB.SQL file that came with the rsyslog package. You\ncan also use any other schema of your liking - you just need\nto define a proper template and assign this template to the\naction.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the HTML\ndocumentation for further details on database logging.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Discard</b>\n<br>\nIf the discard action is carried out, the received message\nis immediately discarded. Discard can be highly effective if\nyou want to filter out some annoying messages that otherwise\nwould fill your log files. To do that, place the discard\nactions early in your log files. This often plays well with\nproperty-based filters, giving you great freedom in\nspecifying what you do not want.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Discard is just\nthe single &rsquo;stop&rsquo; command with no further\nparameters.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example:</b></p>\n\n<p style=\"margin-left:22%;\">*.* stop # discards\neverything.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Output\nchannel</b> <br>\nBinds an output channel definition (see there for details)\nto this action. Output channel actions must start with a\n$-sign, e.g. if you would like to bind your output channel\ndefinition &quot;mychannel&quot; to the action, use\n&quot;$mychannel&quot;. Output channels support template\ndefinitions like all all other actions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Shell\nexecute</b> <br>\nThis executes a program in a subshell. The program is passed\nthe template-generated message as the only command line\nparameter. Rsyslog waits until the program terminates and\nonly then continues to run.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example:</b></p>\n\n\n<p style=\"margin-left:22%;\">^program-to-execute;template</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nprogram-to-execute can be any valid executable. It receives\nthe template string as a single parameter (argv[1]).</p>\n\n<h2>FILTER CONDITIONS\n<a name=\"FILTER CONDITIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rsyslog offers\nthree different types &quot;filter conditions&quot;: <br>\n* &quot;traditional&quot; severity and facility based\nselectors <br>\n* property-based filters <br>\n* expression-based filters</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Selectors\n<br>\nSelectors are the traditional way of filtering syslog\nmessages.</b> They have been kept in rsyslog with their\noriginal syntax, because it is well-known, highly effective\nand also needed for compatibility with stock syslogd\nconfiguration files. If you just need to filter based on\npriority and facility, you should do this with selector\nlines. They are not second-class citizens in rsyslog and\noffer the best performance for this job.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Property-Based\nFilters</b> <br>\nProperty-based filters are unique to rsyslogd. They allow to\nfilter on any property, like HOSTNAME, syslogtag and\nmsg.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\nproperty-based filter must start with a colon in column 0.\nThis tells rsyslogd that it is the new filter type. The\ncolon must be followed by the property name, a comma, the\nname of the compare operation to carry out, another comma\nand then the value to compare against. This value must be\nquoted. There can be spaces and tabs between the commas.\nProperty names and compare operations are case-sensitive, so\n&quot;msg&quot; works, while &quot;MSG&quot; is an invalid\nproperty name. In brief, the syntax is as follows:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">:property,\n[!]compare-operation, &quot;value&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncompare-operations are currently supported:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>contains</b></p>\n\n<p style=\"margin-left:32%;\">Checks if the string provided\nin value is contained in the property</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>isequal</b></p>\n\n<p style=\"margin-left:32%;\">Compares the &quot;value&quot;\nstring provided and the property contents. These two values\nmust be exactly equal to match.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>startswith</b></p>\n\n<p style=\"margin-left:32%;\">Checks if the value is found\nexactly at the beginning of the property value</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>regex</b></p>\n\n<p style=\"margin-left:32%;\">Compares the property against\nthe provided regular expression.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Expression-Based\nFilters</b> <br>\nSee the HTML documentation for this feature.</p>\n\n<h2>TEMPLATES\n<a name=\"TEMPLATES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Every output in\nrsyslog uses templates - this holds true for files, user\nmessages and so on. Templates compatible with the stock\nsyslogd formats are hardcoded into rsyslogd. If no template\nis specified, we use one of these hardcoded templates.\nSearch for &quot;template_&quot; in syslogd.c and you will\nfind the hardcoded ones.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A template\nconsists of a template directive, a name, the actual\ntemplate text and optional options. A sample is:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>$template\nMyTemplateName,&quot;\\7Text %property% some more\ntext\\n&quot;,&lt;options&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;$template&quot; is the template directive. It tells\nrsyslog that this line contains a template. The backslash is\nan escape character. For example, \\7 rings the bell (this is\nan ASCII value), \\n is a new line. The set in rsyslog is a\nbit restricted currently.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All text in the\ntemplate is used literally, except for things within percent\nsigns. These are properties and allow you access to the\ncontents of the syslog message. Properties are accessed via\nthe property replacer and it can for example pick a\nsubstring or do date-specific formatting. More on this is\nthe PROPERTY REPLACER section of this manpage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To escape: <br>\n% = \\% <br>\n\\ = \\\\ --&gt; &rsquo;\\&rsquo; is used to escape (as in C)\n<br>\n$template TraditionalFormat,&quot;%timegenerated% %HOSTNAME%\n%syslogtag%%msg%\\n&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Properties can\nbe accessed by the property replacer (see there for\ndetails).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Please note\nthat templates can also by used to generate selector lines\nwith dynamic file names.</b> For example, if you would like\nto split syslog messages from different hosts to different\nfiles (one per host), you can define the following\ntemplate:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>$template\nDynFile,&quot;/var/log/system-%HOSTNAME%.log&quot;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This template\ncan then be used when defining an output selector line. It\nwill result in something like\n&quot;/var/log/system-localhost.log&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Template\noptions</b> <br>\nThe &lt;options&gt; part is optional. It carries options\ninfluencing the template as whole. See details below. Be\nsure NOT to mistake template options with property options -\nthe later ones are processed by the property replacer and\napply to a SINGLE property, only (and not the whole\ntemplate).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Template\noptions are case-insensitive. Currently defined are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>sql</p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>format the string suitable for a SQL statement in MySQL\nformat. This will replace single quotes\n(&quot;&rsquo;&quot;) and the backslash character by their\nbackslash-escaped counterpart (&quot;&acute;&quot; and\n&quot;\\&quot;) inside each field. Please note that in MySQL\nconfiguration, the NO_BACKSLASH_ESCAPES mode must be turned\noff for this format to work (this is the default).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>stdsql</p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>format the string suitable for a SQL statement that is\nto be sent to a standards-compliant sql server. This will\nreplace single quotes (&quot;&rsquo;&quot;) by two single\nquotes (&quot;&rsquo;&rsquo;&quot;) inside each field. You\nmust use stdsql together with MySQL if in MySQL\nconfiguration the NO_BACKSLASH_ESCAPES is turned on.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Either the\n<b>sql</b> or <b>stdsql</b> option <b>MUST</b> be specified\nwhen a template is used for writing to a database, otherwise\ninjection might occur. Please note that due to the\nunfortunate fact that several vendors have violated the sql\nstandard and introduced their own escape methods, it is\nimpossible to have a single option doing all the work. So\nyou yourself must make sure you are using the right format.\n<b>If you choose the wrong one, you are still vulnerable to\nsql injection.</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat the database writer *checks* that the sql option is\npresent in the template. If it is not present, the write\ndatabase action is disabled. This is to guard you against\naccidental forgetting it and then becoming vulnerable to SQL\ninjection. The sql option can also be useful with files -\nespecially if you want to import them into a database on\nanother machine for performance reasons. However, do NOT use\nit if you do not have a real need for it - among others, it\ntakes some toll on the processing time. Not much, but on a\nreally busy system you might notice it ;)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\ntemplate for the write to database action has the sql option\nset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Template\nexamples</b> <br>\nPlease note that the samples are split across multiple\nlines. A template MUST NOT actually be split across multiple\nlines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A template that\nresembles traditional syslogd file output:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$template\nTraditionalFormat,&quot;%timegenerated% %HOSTNAME% <br>\n%syslogtag%%msg:::drop-last-lf%\\n&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A template that\ntells you a little more about the message:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$template\nprecise,&quot;%syslogpriority%,%syslogfacility%,%timegenerated%,%HOSTNAME%,\n<br>\n%syslogtag%,%msg%\\n&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A template for\nRFC 3164 format:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$template\nRFC3164fmt,&quot;&lt;%PRI%&gt;%TIMESTAMP% %HOSTNAME%\n%syslogtag%%msg%&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A template for\nthe format traditionally used for user messages:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$template\nusermsg,&quot; XXXX%syslogtag%%msg%\\n\\r&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">And a template\nwith the traditional wall-message format:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$template\nwallmsg,&quot;\\r\\n\\7Message from syslogd@%HOSTNAME% at\n%timegenerated%&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>A template\nthat can be used for writing to a database (please note the\nSQL template option)</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">$template\nMySQLInsert,&quot;insert iut, message, receivedat values\n(&rsquo;%iut%&rsquo;, &rsquo;%msg:::UPPERCASE%&rsquo;,\n&rsquo;%timegenerated:::date-mysql%&rsquo;) into\nsystemevents\\r\\n&quot;, SQL</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">NOTE 1: This\ntemplate is embedded into core application under name\n<b>StdDBFmt</b> , so you don&rsquo;t need to define it.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">NOTE 2: You\nhave to have MySQL module installed to use this\ntemplate.</p>\n\n<h2>OUTPUT CHANNELS\n<a name=\"OUTPUT CHANNELS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Output Channels\nare a new concept first introduced in rsyslog 0.9.0. As of\nthis writing, it is most likely that they will be replaced\nby something different in the future. So if you use them, be\nprepared to change you configuration file syntax when you\nupgrade to a later release.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Output channels\nare defined via an $outchannel directive. It&rsquo;s syntax\nis as follows:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>$outchannel\nname,file-name,max-size,action-on-max-size</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">name is the\nname of the output channel (not the file), file-name is the\nfile name to be written to, max-size the maximum allowed\nsize and action-on-max-size a command to be issued when the\nmax size is reached. This command always has exactly one\nparameter. The binary is that part of action-on-max-size\nbefore the first space, its parameter is everything behind\nthat space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Keep in mind\nthat $outchannel just defines a channel with\n&quot;name&quot;. It does not activate it. To do so, you\nmust use a selector line (see below). That selector line\nincludes the channel name plus &quot;:omfile:$&quot; in\nfront of it. A sample might be:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">*.*\n:omfile:$mychannel</p>\n\n<h2>PROPERTY REPLACER\n<a name=\"PROPERTY REPLACER\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The property\nreplacer is a core component in rsyslogd&rsquo;s output\nsystem. A syslog message has a number of well-defined\nproperties (see below). Each of this properties can be\naccessed and manipulated by the property replacer. With it,\nit is easy to use only part of a property value or\nmanipulate the value, e.g. by converting all characters to\nlower case.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Accessing\nProperties</b> <br>\nSyslog message properties are used inside templates. They\nare accessed by putting them between percent signs.\nProperties can be modified by the property replacer. The\nfull syntax is as follows:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>%propname:fromChar:toChar:options%</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">propname is the\nname of the property to access. <b>It is\ncase-sensitive.</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Available\nProperties</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>msg</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">the MSG part of the message (aka\n&quot;the message&quot; ;))</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>rawmsg</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>the message exactly as it was received from the socket.\nShould be useful for debugging.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>HOSTNAME</b></p>\n\n<p style=\"margin-left:22%;\">hostname from the message</p>\n\n<p style=\"margin-left:11%;\"><b>FROMHOST</b></p>\n\n<p style=\"margin-left:22%;\">hostname of the system the\nmessage was received from (in a relay chain, this is the\nsystem immediately in front of us and not necessarily the\noriginal sender)</p>\n\n<p style=\"margin-left:11%;\"><b>syslogtag</b></p>\n\n<p style=\"margin-left:22%;\">TAG from the message</p>\n\n<p style=\"margin-left:11%;\"><b>programname</b></p>\n\n<p style=\"margin-left:22%;\">the &quot;static&quot; part of\nthe tag, as defined by BSD syslogd. For example, when TAG is\n&quot;named[12345]&quot;, programname is\n&quot;named&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>PRI</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"76%\">\n\n\n<p>PRI part of the message - undecoded (single value)</p></td>\n<td width=\"2%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>PRI-text</b></p>\n\n<p style=\"margin-left:22%;\">the PRI part of the message in\na textual form (e.g. &quot;syslog.info&quot;)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>IUT</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>the monitorware InfoUnitType - used when talking to a\nMonitorWare backend (also for phpLogCon)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>syslogfacility</b></p>\n\n<p style=\"margin-left:22%;\">the facility from the message -\nin numerical form</p>\n\n<p style=\"margin-left:11%;\"><b>syslogfacility-text</b></p>\n\n<p style=\"margin-left:22%;\">the facility from the message -\nin text form</p>\n\n<p style=\"margin-left:11%;\"><b>syslogseverity</b></p>\n\n<p style=\"margin-left:22%;\">severity from the message - in\nnumerical form</p>\n\n<p style=\"margin-left:11%;\"><b>syslogseverity-text</b></p>\n\n<p style=\"margin-left:22%;\">severity from the message - in\ntext form</p>\n\n<p style=\"margin-left:11%;\"><b>timegenerated</b></p>\n\n<p style=\"margin-left:22%;\">timestamp when the message was\nRECEIVED. Always in high resolution</p>\n\n<p style=\"margin-left:11%;\"><b>timereported</b></p>\n\n<p style=\"margin-left:22%;\">timestamp from the message.\nResolution depends on what was provided in the message (in\nmost cases, only seconds)</p>\n\n<p style=\"margin-left:11%;\"><b>TIMESTAMP</b></p>\n\n<p style=\"margin-left:22%;\">alias for timereported</p>\n\n<p style=\"margin-left:11%;\"><b>PROTOCOL-VERSION</b></p>\n\n<p style=\"margin-left:22%;\">The contents of the\nPROTOCOL-VERSION field from IETF draft\ndraft-ietf-syslog-protocol</p>\n\n<p style=\"margin-left:11%;\"><b>STRUCTURED-DATA</b></p>\n\n<p style=\"margin-left:22%;\">The contents of the\nSTRUCTURED-DATA field from IETF draft\ndraft-ietf-syslog-protocol</p>\n\n<p style=\"margin-left:11%;\"><b>APP-NAME</b></p>\n\n<p style=\"margin-left:22%;\">The contents of the APP-NAME\nfield from IETF draft draft-ietf-syslog-protocol</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>PROCID</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The contents of the PROCID field from IETF draft\ndraft-ietf-syslog-protocol</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>MSGID</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The contents of the MSGID field from IETF draft\ndraft-ietf-syslog-protocol</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$NOW</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The current date stamp in the format YYYY-MM-DD</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$YEAR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The current year (4-digit)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$MONTH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The current month (2-digit)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$DAY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The current day of the month (2-digit)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$HOUR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The current hour in military (24 hour) time\n(2-digit)</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>$MINUTE</b></p>\n\n<p style=\"margin-left:22%;\">The current minute\n(2-digit)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Properties\nstarting with a $-sign are so-called system properties.\nThese do NOT stem from the message but are rather\ninternally-generated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Character\nPositions</b> <br>\nFromChar and toChar are used to build substrings. They\nspecify the offset within the string that should be copied.\nOffset counting starts at 1, so if you need to obtain the\nfirst 2 characters of the message text, you can use this\nsyntax: &quot;%msg:1:2%&quot;. If you do not wish to specify\nfrom and to, but you want to specify options, you still need\nto include the colons. For example, if you would like to\nconvert the full message text to lower case, use\n&quot;%msg:::lowercase%&quot;. If you would like to extract\nfrom a position until the end of the string, you can place a\ndollar-sign (&quot;$&quot;) in toChar (e.g. %msg:10:$%,\nwhich will extract from position 10 to the end of the\nstring).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is also\nsupport for <b>regular expressions.</b> To use them, you\nneed to place a &quot;R&quot; into FromChar. This tells\nrsyslog that a regular expression instead of position-based\nextraction is desired. The actual regular expression\n<b>must</b> then be provided in toChar. The regular\nexpression must be followed by the string &quot;--end&quot;.\nIt denotes the end of the regular expression and will not\nbecome part of it. If you are using regular expressions, the\nproperty replacer will return the part of the property text\nthat matches the regular expression. An example for a\nproperty replacer sequence with a regular expression is:\n&quot;%msg:R:.*Sev:. \\(.*\\) \\[.*--end%&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also,\nextraction can be done based on so-called\n&quot;fields&quot;. To do so, place a &quot;F&quot; into\nFromChar. A field in its current definition is anything that\nis delimited by a delimiter character. The delimiter by\ndefault is TAB (US-ASCII value 9). However, if can be\nchanged to any other US-ASCII character by specifying a\ncomma and the decimal US-ASCII value of the delimiter\nimmediately after the &quot;F&quot;. For example, to use\ncomma (&quot;,&quot;) as a delimiter, use this field\nspecifier: &quot;F,44&quot;. If your syslog data is\ndelimited, this is a quicker way to extract than via regular\nexpressions (actually, a *much* quicker way). Field counting\nstarts at 1. Field zero is accepted, but will always lead to\na &quot;field not found&quot; error. The same happens if a\nfield number higher than the number of fields in the\nproperty is requested. The field number must be placed in\nthe &quot;ToChar&quot; parameter. An example where the 3rd\nfield (delimited by TAB) from the msg property is extracted\nis as follows: &quot;%msg:F:3%&quot;. The same example with\nsemicolon as delimiter is &quot;%msg:F,59:3%&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat the special characters &quot;F&quot; and &quot;R&quot;\nare case-sensitive. Only upper case works, lower case will\nreturn an error. There are no white spaces permitted inside\nthe sequence (that will lead to error messages and will NOT\nprovide the intended result).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Property\nOptions</b> <br>\nProperty options are case-insensitive. Currently, the\nfollowing options are defined: <br>\nuppercase</p>\n\n<p style=\"margin-left:22%;\">convert property to lowercase\nonly</p>\n\n<p style=\"margin-left:11%;\">lowercase</p>\n\n<p style=\"margin-left:22%;\">convert property text to\nuppercase only</p>\n\n<p style=\"margin-left:11%;\">drop-last-lf</p>\n\n<p style=\"margin-left:22%;\">The last LF in the message (if\nany), is dropped. Especially useful for PIX.</p>\n\n<p style=\"margin-left:11%;\">date-mysql</p>\n\n<p style=\"margin-left:22%;\">format as mysql date</p>\n\n<p style=\"margin-left:11%;\">date-rfc3164</p>\n\n<p style=\"margin-left:22%;\">format as RFC 3164 date</p>\n\n<p style=\"margin-left:11%;\">date-rfc3339</p>\n\n<p style=\"margin-left:22%;\">format as RFC 3339 date</p>\n\n<p style=\"margin-left:11%;\">escape-cc</p>\n\n<p style=\"margin-left:22%;\">replace control characters\n(ASCII value 127 and values less then 32) with an escape\nsequence. The sequence is &quot;#&lt;charval&gt;&quot; where\ncharval is the 3-digit decimal value of the control\ncharacter. For example, a tabulator would be replaced by\n&quot;#009&quot;.</p>\n\n<p style=\"margin-left:11%;\">space-cc</p>\n\n<p style=\"margin-left:22%;\">replace control characters by\nspaces</p>\n\n<p style=\"margin-left:11%;\">drop-cc</p>\n\n<p style=\"margin-left:22%;\">drop control characters - the\nresulting string will neither contain control characters,\nescape sequences nor any other replacement character like\nspace.</p>\n\n<h2>QUEUED OPERATIONS\n<a name=\"QUEUED OPERATIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rsyslogd\nsupports queued operations to handle offline outputs (like\nremote syslogd&rsquo;s or database servers being down). When\nrunning in queued mode, rsyslogd buffers messages to memory\nand optionally to disk (on an as-needed basis). Queues\nsurvive rsyslogd restarts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is highly\nsuggested to use remote forwarding and database writing in\nqueued mode, only.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To learn more\nabout queued operations, see the HTML documentation.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/etc/rsyslog.conf</i></p>\n\n<p style=\"margin-left:22%;\">Configuration file for\n<b>rsyslogd</b></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>rsyslogd</b>(8),\n<a href=\"https://man.page/1/logger\">logger(1)</a>, <a href=\"https://man.page/3/syslog\">syslog(3)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The complete\ndocumentation can be found in the doc folder of the rsyslog\ndistribution or online at</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>https://www.rsyslog.com/doc/</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat the man page reflects only a subset of the\nconfiguration options. Be sure to read the HTML\ndocumentation for all features and details. This is\nespecially vital if you plan to set up a\nmore-then-extremely-simple system.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>rsyslogd</b>\nis taken from sysklogd sources, which have been heavily\nmodified by Rainer Gerhards (rgerhards@adiscon.com) and\nothers.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#MODULES\">MODULES</a>","<a href=\"#BASIC STRUCTURE\">BASIC STRUCTURE</a>","<a href=\"#SELECTORS\">SELECTORS</a>","<a href=\"#ACTIONS\">ACTIONS</a>","<a href=\"#FILTER CONDITIONS\">FILTER CONDITIONS</a>","<a href=\"#TEMPLATES\">TEMPLATES</a>","<a href=\"#OUTPUT CHANNELS\">OUTPUT CHANNELS</a>","<a href=\"#PROPERTY REPLACER\">PROPERTY REPLACER</a>","<a href=\"#QUEUED OPERATIONS\">QUEUED OPERATIONS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>"],"level":5}