{"name":"term","description":"term - format of compiled term file.","body":"\n\n<h1 align=\"center\">term</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">term - format\nof compiled term file.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>term</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>STORAGE\nLOCATION</b> <br>\nCompiled terminfo descriptions are placed under the\ndirectory <b>/etc/terminfo</b>. Two configurations are\nsupported (when building the <b>ncurses</b> libraries):\n<b><br>\ndirectory tree</b></p>\n\n<p style=\"margin-left:18%;\">A two-level scheme is used to\navoid a linear search of a huge <small>UNIX</small> system\ndirectory: <b>/etc/terminfo/c/name</b> where <i>name</i> is\nthe name of the terminal, and <i>c</i> is the first\ncharacter of <i>name</i>. Thus, <i>act4</i> can be found in\nthe file <b>/etc/terminfo/a/act4</b>. Synonyms for the same\nterminal are implemented by multiple links to the same\ncompiled file.</p>\n\n<p style=\"margin-left:11%;\"><b>hashed database</b></p>\n\n<p style=\"margin-left:18%;\">Using Berkeley database, two\ntypes of records are stored: the terminfo data in the same\nformat as stored in a directory tree with the\nterminfo&rsquo;s primary name as a key, and records\ncontaining only aliases pointing to the primary name.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\">If built to\nwrite hashed databases, <b>ncurses</b> can still read\nterminfo databases organized as a directory tree, but cannot\nwrite entries into the directory tree. It can write (or\nrewrite) entries in the hashed database.</p>\n\n<p style=\"margin-left:18%; margin-top: 1em\"><b>ncurses</b>\ndistinguishes the two cases in the TERMINFO and\nTERMINFO_DIRS environment variable by assuming a directory\ntree for entries that correspond to an existing directory,\nand hashed database otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>LEGACY\nSTORAGE FORMAT</b> <br>\nThe format has been chosen so that it will be the same on\nall hardware. An 8 or more bit byte is assumed, but no\nassumptions about byte ordering or sign extension are\nmade.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The compiled\nfile is created with the <b>tic</b> program, and read by the\nroutine <b>setupterm</b>(3X). The file is divided into six\nparts:</p>\n\n<p style=\"margin-left:18%;\">a) <i>header</i>, <br>\nb) <i>terminal names</i>, <br>\nc) <i>boolean flags</i>, <br>\nd) <i>numbers</i>, <br>\ne) <i>strings</i>, and <br>\nf) <i>string table</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>header</i> section begins the file. This section contains\nsix short integers in the format described below. These\nintegers are</p>\n\n<p style=\"margin-left:18%;\">(1) the <i>magic number</i>\n(octal 0432); <br>\n(2) the size, in bytes, of the <i>terminal names</i>\nsection; <br>\n(3) the number of bytes in the <i>boolean flags</i> section;\n<br>\n(4) the number of short integers in the <i>numbers</i>\nsection; <br>\n(5) the number of offsets (short integers) in the\n<i>strings</i> section; <br>\n(6) the size, in bytes, of the <i>string table</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ncapabilities in the <i>boolean flags</i>, <i>numbers</i>,\nand <i>strings</i> sections are in the same order as the\nfile &lt;term.h&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Short integers\nare signed, in the range -32768 to 32767. They are stored as\ntwo 8-bit bytes. The first byte contains the least\nsignificant 8 bits of the value, and the second byte\ncontains the most significant 8 bits. (Thus, the value\nrepresented is 256*second+first.) This format corresponds to\nthe hardware of the <small>VAX</small> and\n<small>PDP</small> -11 (that is, little-endian machines).\nMachines where this does not correspond to the hardware must\nread the integers as two bytes and compute the little-endian\nvalue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Numbers in a\nterminal description, whether they are entries in the\n<i>numbers</i> or <i>strings</i> table, are positive\nintegers. Boolean flags are treated as positive one-byte\nintegers. In each case, those positive integers represent a\nterminal capability. The terminal compiler tic uses negative\nintegers to handle the cases where a capability is not\navailable:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>If a capability is absent from this terminal, tic stores\na -1 in the corresponding table.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The integer\nvalue -1 is represented by two bytes 0377, 0377. <br>\nAbsent boolean values are represented by the byte 0\n(false).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">If a capability has been\ncanceled from this terminal, tic stores a -2 in the\ncorresponding table.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The integer\nvalue -2 is represented by two bytes 0377, 0376. <br>\nThe boolean value -2 is represented by the byte 0376.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"52%\">\n\n\n<p style=\"margin-top: 1em\">Other negative values are\nillegal.</p> </td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>terminal\nnames</i> section comes after the <i>header</i>. It contains\nthe first line of the terminfo description, listing the\nvarious names for the terminal, separated by the\n&ldquo;|&rdquo; character. The <i>terminal names</i> section\nis terminated with an <small>ASCII NUL</small>\ncharacter.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>boolean\nflags</i> section has one byte for each flag. Boolean\ncapabilities are either 1 or 0 (true or false) according to\nwhether the terminal supports the given capability or\nnot.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Between the\n<i>boolean flags</i> section and the <i>number</i> section,\na null byte will be inserted, if necessary, to ensure that\nthe <i>number</i> section begins on an even byte This is a\nrelic of the PDP-11&rsquo;s word-addressed architecture,\noriginally designed to avoid traps induced by addressing a\nword on an odd byte boundary. All short integers are aligned\non a short word boundary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>numbers</i> section is similar to the <i>boolean\nflags</i> section. Each capability takes up two bytes, and\nis stored as a little-endian short integer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>strings</i> section is also similar. Each capability is\nstored as a short integer. The capability value is an index\ninto the <i>string table</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>string\ntable</i> is the last section. It contains all of the values\nof string capabilities referenced in the <i>strings</i>\nsection. Each string is null-terminated. Special characters\nin ^X or \\c notation are stored in their interpreted form,\nnot the printing representation. Padding information\n$&lt;nn&gt; and parameter information %x are stored intact\nin uninterpreted form.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>EXTENDED\nSTORAGE FORMAT</b> <br>\nThe previous section describes the conventional terminfo\nbinary format. With some minor variations of the offsets\n(see PORTABILITY), the same binary format is used in all\nmodern UNIX systems. Each system uses a predefined set of\nboolean, number or string capabilities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ncurses</b> libraries and applications support extended\nterminfo binary format, allowing users to define\ncapabilities which are loaded at runtime. This extension is\nmade possible by using the fact that the other\nimplementations stop reading the terminfo data when they\nhave reached the end of the size given in the header.\n<b>ncurses</b> checks the size, and if it exceeds that due\nto the predefined data, continues to parse according to its\nown scheme.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, it reads\nthe extended header (5 short integers):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\">(1)</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p style=\"margin-top: 1em\">count of extended boolean\ncapabilities</p> </td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"5%\">\n\n\n<p>(2)</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>count of extended numeric capabilities</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"5%\">\n\n\n<p>(3)</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>count of extended string capabilities</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"5%\">\n\n\n<p>(4)</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>count of the items in extended string table</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"18%\"></td>\n<td width=\"5%\">\n\n\n<p>(5)</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>size of the extended string table in bytes</p></td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The count- and\nsize-values for the extended string table include the\nextended capability <i>names</i> as well as extended\ncapability <i>values</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\ncounts and sizes, <b>ncurses</b> allocates arrays and reads\ndata for the extended capabilities in the same order as the\nheader information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The extended\nstring table contains values for string capabilities. After\nthe end of these values, it contains the names for each of\nthe extended capabilities in order, e.g., booleans, then\nnumbers and finally strings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Applications\nwhich manipulate terminal data can use the definitions\ndescribed in <b>term_variables</b>(3X) which associate the\nlong capability names with members of a <b>TERMTYPE</b>\nstructure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>EXTENDED\nNUMBER FORMAT</b> <br>\nOn occasion, 16-bit signed integers are not large enough.\nWith <b>ncurses</b> 6.1, a new format was introduced by\nmaking a few changes to the legacy format:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">a different magic number (octal\n01036)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>changing the type for the <i>number</i> array from\nsigned 16-bit integers to signed 32-bit integers.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To maintain\ncompatibility, the library presents the same data structures\nto direct users of the <b>TERMTYPE</b> structure as in\nprevious formats. However, that cannot provide callers with\nthe extended numbers. The library uses a similar but hidden\ndata structure <b>TERMTYPE2</b> to provide data for the\nterminfo functions.</p>\n\n<h2>PORTABILITY\n<a name=\"PORTABILITY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>setupterm</b>\n<br>\nNote that it is possible for <b>setupterm</b> to expect a\ndifferent set of capabilities than are actually present in\nthe file. Either the database may have been updated since\n<b>setupterm</b> was recompiled (resulting in extra\nunrecognized entries in the file) or the program may have\nbeen recompiled more recently than the database was updated\n(resulting in missing entries). The routine <b>setupterm</b>\nmust be prepared for both possibilities - this is why the\nnumbers and sizes are included. Also, new capabilities must\nalways be added at the end of the lists of boolean, number,\nand string capabilities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Binary\nformat</b> <br>\nX/Open Curses does not specify a format for the terminfo\ndatabase. UNIX System V curses used a directory-tree of\nbinary files, one per terminal description.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Despite the\nconsistent use of little-endian for numbers and the\notherwise self-describing format, it is not wise to count on\nportability of binary terminfo entries between commercial\nUNIX versions. The problem is that there are at least three\nversions of terminfo (under HP-UX, AIX, and OSF/1) which\ndiverged from System V terminfo after SVr1, and have added\nextension capabilities to the string table that (in the\nbinary format) collide with System V and XSI Curses\nextensions. See <a href=\"https://man.page/5/terminfo\">terminfo(5)</a> for detailed discussion\nof terminfo source compatibility issues.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\nimplementation is by default compatible with the binary\nterminfo format used by Solaris curses, except in a few\nless-used details where it was found that the latter did not\nmatch X/Open Curses. The format used by the other Unix\nversions can be matched by building ncurses with different\nconfiguration options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Magic\ncodes</b> <br>\nThe magic number in a binary terminfo file is the first\n16-bits (two bytes). Besides making it more reliable for the\nlibrary to check that a file is terminfo, utilities such as\n<b>file</b> also use that to tell what the file-format is.\nSystem V defined more than one magic number, with 0433, 0435\nas screen-dumps (see <a href=\"https://man.page/5/scr_dump\">scr_dump(5)</a>). This\nimplementation uses 01036 as a continuation of that\nsequence, but with a different high-order byte to avoid\nconfusion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The TERMTYPE\nstructure</b> <br>\nDirect access to the <b>TERMTYPE</b> structure is provided\nfor legacy applications. Portable applications should use\nthe <b>tigetflag</b> and related functions described in\n<b>curs_terminfo</b>(3X) for reading terminal\ncapabilities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mixed-case\nterminal names</b> <br>\nA small number of terminal descriptions use uppercase\ncharacters in their names. If the underlying filesystem\nignores the difference between uppercase and lowercase,\n<b>ncurses</b> represents the &ldquo;first character&rdquo;\nof the terminal name used as the intermediate level of a\ndirectory tree in (two-character) hexadecimal form.</p>\n\n<h2>EXAMPLE\n<a name=\"EXAMPLE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">As an example,\nhere is a description for the Lear-Siegler ADM-3, a popular\nthough rather stupid early terminal:</p>\n<pre style=\"margin-left:17%; margin-top: 1em\">adm3a|lsi adm3a,\n        am,\n        cols#80, lines#24,\n        bel=^G, clear= 32$&lt;1&gt;, cr=^M, cub1=^H, cud1=^J,\n        cuf1=^L, cup=\\E=%p1%{32}%+%c%p2%{32}%+%c, cuu1=^K,\n        home=^^, ind=^J,\n\n</pre>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and a\nhexadecimal dump of the compiled terminal description:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>0000 1a\n01 10 00 02 00 03 00 82 00 31 00 61 64 6d 33 ........\n..1.adm3 <br>\n0010 61 7c 6c 73 69 20 61 64 6d 33 61 00 00 01 50 00 a|lsi\nad m3a...P. <br>\n0020 ff ff 18 00 ff ff 00 00 02 00 ff ff ff ff 04 00\n........ ........ <br>\n0030 ff ff ff ff ff ff ff ff 0a 00 25 00 27 00 ff ff\n........ ..%.&rsquo;... <br>\n0040 29 00 ff ff ff ff 2b 00 ff ff 2d 00 ff ff ff ff\n).....+. ..-..... <br>\n0050 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n0060 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n0070 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n0080 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n0090 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n00a0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n00b0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n00c0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n00d0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n00e0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n00f0 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n0100 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n0110 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n........ ........ <br>\n0120 ff ff ff ff ff ff 2f 00 07 00 0d 00 1a 24 3c 31\n....../. .....$&lt;1 <br>\n0130 3e 00 1b 3d 25 70 31 25 7b 33 32 7d 25 2b 25 63\n&gt;..=%p1% {32}%+%c <br>\n0140 25 70 32 25 7b 33 32 7d 25 2b 25 63 00 0a 00 1e\n%p2%{32} %+%c.... <br>\n0150 00 08 00 0c 00 0b 00 0a 00 ........ .</small></p>\n\n<h2>LIMITS\n<a name=\"LIMITS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some\nlimitations:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">total compiled entries cannot\nexceed 4096 bytes in the legacy format.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>total compiled entries cannot exceed 32768 bytes in the\nextended format.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>the name field cannot exceed 128 bytes.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Compiled\nentries are limited to 32768 bytes because offsets into the\n<i>strings table</i> use two-byte integers. The legacy\nformat could have supported 32768-byte entries, but was\nlimited a virtual memory page&rsquo;s 4096 bytes.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/etc/terminfo/*/*\ncompiled terminal capability database</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ncurses</b>(3NCURSES),\n<a href=\"https://man.page/5/terminfo\">terminfo(5)</a>.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thomas E.\nDickey <br>\nextended terminfo format for ncurses 5.0 <br>\nhashed database support for ncurses 5.6 <br>\nextended number support for ncurses 6.1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Eric S. Raymond\n<br>\ndocumented legacy terminfo format, e.g., from pcurses.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#PORTABILITY\">PORTABILITY</a>","<a href=\"#EXAMPLE\">EXAMPLE</a>","<a href=\"#LIMITS\">LIMITS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>"],"level":5}