{"name":"gitattributes","description":"gitattributes -\nDefining attributes per path","body":"\n\n<h1 align=\"center\">GITATTRIBUTES</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitattributes -\nDefining attributes per path</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$GIT_DIR/info/attributes,\n.gitattributes</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n<b>gitattributes</b> file is a simple text file that gives\n<b>attributes</b> to pathnames.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each line in\n<b>gitattributes</b> file is of form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">pattern attr1\nattr2 ...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">That is, a\npattern followed by an attributes list, separated by\nwhitespaces. Leading and trailing whitespaces are ignored.\nLines that begin with <i>#</i> are ignored. Patterns that\nbegin with a double quote are quoted in C style. When the\npattern matches the path in question, the attributes listed\non the line are given to the path.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each attribute\ncan be in one of these states for a given path:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Set</p>\n\n<p style=\"margin-left:17%;\">The path has the attribute with\nspecial value &quot;true&quot;; this is specified by listing\nonly the name of the attribute in the attribute list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unset</p>\n\n<p style=\"margin-left:17%;\">The path has the attribute with\nspecial value &quot;false&quot;; this is specified by\nlisting the name of the attribute prefixed with a dash\n<b>-</b> in the attribute list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Set to a\nvalue</p>\n\n<p style=\"margin-left:17%;\">The path has the attribute with\nspecified string value; this is specified by listing the\nname of the attribute followed by an equal sign <b>=</b> and\nits value in the attribute list.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unspecified</p>\n\n<p style=\"margin-left:17%;\">No pattern matches the path,\nand nothing says if the path has or does not have the\nattribute, the attribute for the path is said to be\nUnspecified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When more than\none pattern matches the path, a later line overrides an\nearlier line. This overriding is done per attribute.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The rules by\nwhich the pattern matches paths are the same as in\n<b>.gitignore</b> files (see <a href=\"https://man.page/5/gitignore\">gitignore(5)</a>), with a\nfew exceptions:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; negative\npatterns are forbidden</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; patterns\nthat match a directory do not recursively match paths inside\nthat directory (so using the trailing-slash <b>path/</b>\nsyntax is pointless in an attributes file; use\n<b>path/**</b> instead)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When deciding\nwhat attributes are assigned to a path, Git consults\n<b>$GIT_DIR/info/attributes</b> file (which has the highest\nprecedence), <b>.gitattributes</b> file in the same\ndirectory as the path in question, and its parent\ndirectories up to the toplevel of the work tree (the further\nthe directory that contains <b>.gitattributes</b> is from\nthe path in question, the lower its precedence). Finally\nglobal and system-wide files are considered (they have the\nlowest precedence).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n<b>.gitattributes</b> file is missing from the work tree,\nthe path in the index is used as a fall-back. During\ncheckout process, <b>.gitattributes</b> in the index is used\nand then the file in the working tree is used as a\nfall-back.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you wish to\naffect only a single repository (i.e., to assign attributes\nto files that are particular to one user&rsquo;s workflow\nfor that repository), then attributes should be placed in\nthe <b>$GIT_DIR/info/attributes</b> file. Attributes which\nshould be version-controlled and distributed to other\nrepositories (i.e., attributes of interest to all users)\nshould go into <b>.gitattributes</b> files. Attributes that\nshould affect all repositories for a single user should be\nplaced in a file specified by the <b>core.attributesFile</b>\nconfiguration option (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>). Its default\nvalue is $XDG_CONFIG_HOME/git/attributes. If\n$XDG_CONFIG_HOME is either not set or empty,\n$HOME/.config/git/attributes is used instead. Attributes for\nall users on a system should be placed in the\n<b>$(prefix)/etc/gitattributes</b> file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sometimes you\nwould need to override a setting of an attribute for a path\nto <b>Unspecified</b> state. This can be done by listing the\nname of the attribute prefixed with an exclamation point\n<b>!</b>.</p>\n\n<h2>EFFECTS\n<a name=\"EFFECTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Certain\noperations by Git can be influenced by assigning particular\nattributes to a path. Currently, the following operations\nare attributes-aware.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Checking-out\nand checking-in</b> <br>\nThese attributes affect how the contents stored in the\nrepository are copied to the working tree files when\ncommands such as <i>git switch</i>, <i>git checkout</i> and\n<i>git merge</i> run. They also affect how Git stores the\ncontents you prepare in the working tree in the repository\nupon <i>git add</i> and <i>git commit</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>text</big></b></p>\n\n<p style=\"margin-left:17%;\">This attribute enables and\ncontrols end-of-line normalization. When a text file is\nnormalized, its line endings are converted to LF in the\nrepository. To control what line ending style is used in the\nworking directory, use the <b>eol</b> attribute for a single\nfile and the <b>core.eol</b> configuration variable for all\ntext files. Note that setting <b>core.autocrlf</b> to\n<b>true</b> or <b>input</b> overrides <b>core.eol</b> (see\nthe definitions of those options in\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set</p>\n\n<p style=\"margin-left:23%;\">Setting the <b>text</b>\nattribute on a path enables end-of-line normalization and\nmarks the path as a text file. End-of-line conversion takes\nplace without guessing the content type.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unset</p>\n\n<p style=\"margin-left:23%;\">Unsetting the <b>text</b>\nattribute on a path tells Git not to attempt any end-of-line\nconversion upon checkin or checkout.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set to string\nvalue &quot;auto&quot;</p>\n\n<p style=\"margin-left:23%;\">When <b>text</b> is set to\n&quot;auto&quot;, the path is marked for automatic\nend-of-line conversion. If Git decides that the content is\ntext, its line endings are converted to LF on checkin. When\nthe file has been committed with CRLF, no conversion is\ndone.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unspecified</p>\n\n<p style=\"margin-left:23%;\">If the <b>text</b> attribute is\nunspecified, Git uses the <b>core.autocrlf</b> configuration\nvariable to determine if the file should be converted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Any other value\ncauses Git to act as if <b>text</b> has been left\nunspecified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>eol</big></b></p>\n\n<p style=\"margin-left:17%;\">This attribute sets a specific\nline-ending style to be used in the working directory. It\nenables end-of-line conversion without any content checks,\neffectively setting the <b>text</b> attribute. Note that\nsetting this attribute on paths which are in the index with\nCRLF line endings may make the paths to be considered dirty.\nAdding the path to the index again will normalize the line\nendings in the index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set to string\nvalue &quot;crlf&quot;</p>\n\n<p style=\"margin-left:23%;\">This setting forces Git to\nnormalize line endings for this file on checkin and convert\nthem to CRLF when the file is checked out.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set to string\nvalue &quot;lf&quot;</p>\n\n<p style=\"margin-left:23%;\">This setting forces Git to\nnormalize line endings to LF on checkin and prevents\nconversion to CRLF when the file is checked out.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>Backwards\ncompatibility with crlf attribute</big></b></p>\n\n<p style=\"margin-left:17%;\">For backwards compatibility,\nthe <b>crlf</b> attribute is interpreted as follows:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">crlf text <br>\n-crlf -text <br>\ncrlf=input eol=lf</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>End-of-line\nconversion</big></b></p>\n\n<p style=\"margin-left:17%;\">While Git normally leaves file\ncontents alone, it can be configured to normalize line\nendings to LF in the repository and, optionally, to convert\nthem to CRLF when files are checked out.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you simply\nwant to have CRLF line endings in your working directory\nregardless of the repository you are working with, you can\nset the config variable &quot;core.autocrlf&quot; without\nusing any attributes.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">[core] <br>\nautocrlf = true</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This does not\nforce normalization of text files, but does ensure that text\nfiles that you introduce to the repository have their line\nendings normalized to LF when they are added, and that files\nthat are already normalized in the repository stay\nnormalized.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nensure that text files that any contributor introduces to\nthe repository have their line endings normalized, you can\nset the <b>text</b> attribute to &quot;auto&quot; for\n<i>all</i> files.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">* text=auto</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The attributes\nallow a fine-grained control, how the line endings are\nconverted. Here is an example that will make Git normalize\n.txt, .vcproj and .sh files, ensure that .vcproj files have\nCRLF and .sh files have LF in the working directory, and\nprevent .jpg files from being normalized regardless of their\ncontent.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">* text=auto\n<br>\n*.txt text <br>\n*.vcproj text eol=crlf <br>\n*.sh text eol=lf <br>\n*.jpg -text</p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nWhen <b>text=auto</b> conversion is enabled in a\ncross-platform project using push and pull to a central\nrepository the text files containing CRLFs should be\nnormalized.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">From a clean\nworking directory:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ echo &quot;*\ntext=auto&quot; &gt;.gitattributes <br>\n$ git add --renormalize . <br>\n$ git status # Show files that will be normalized <br>\n$ git commit -m &quot;Introduce end-of-line\nnormalization&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If any files\nthat should not be normalized show up in <i>git status</i>,\nunset their <b>text</b> attribute before running <i>git add\n-u</i>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">manual.pdf\n-text</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Conversely,\ntext files that Git does not detect can have normalization\nenabled manually.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">weirdchars.txt\ntext</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>core.safecrlf</b> is set to &quot;true&quot; or\n&quot;warn&quot;, Git verifies if the conversion is\nreversible for the current setting of <b>core.autocrlf</b>.\nFor &quot;true&quot;, Git rejects irreversible conversions;\nfor &quot;warn&quot;, Git only prints a warning but accepts\nan irreversible conversion. The safety triggers to prevent\nsuch a conversion done to the files in the work tree, but\nthere are a few exceptions. Even though...</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; <i>git\nadd</i> itself does not touch the files in the work tree,\nthe next checkout would, so the safety triggers;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; <i>git\napply</i> to update a text file with a patch does touch the\nfiles in the work tree, but the operation is about text\nfiles and CRLF conversion is about fixing the line ending\ninconsistencies, so the safety does not trigger;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; <i>git\ndiff</i> itself does not touch the files in the work tree,\nit is often run to inspect the changes you intend to next\n<i>git add</i>. To catch potential problems early, safety\ntriggers.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>working-tree-encoding</big></b></p>\n\n<p style=\"margin-left:17%;\"><big>Git recognizes files\nencoded in ASCII or one of its supersets (e.g. UTF-8,\nISO-8859-1, ...) as text files. Files encoded in certain\nother encodings (e.g. UTF-16) are interpreted as binary and\nconsequently built-in Git text processing tools (e.g. <i>git\ndiff</i>) as well as most Git web front ends do not\nvisualize the contents of these files by default.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>In these\ncases you can tell Git the encoding of a file in the working\ndirectory with the <b>working-tree-encoding</b> attribute.\nIf a file with this attribute is added to Git, then Git\nre-encodes the content from the specified encoding to UTF-8.\nFinally, Git stores the UTF-8 encoded content in its\ninternal data structure (called &quot;the index&quot;). On\ncheckout the content is re-encoded back to the specified\nencoding.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Please\nnote that using the <b>working-tree-encoding</b> attribute\nmay have a number of pitfalls:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\nAlternative Git implementations (e.g. JGit or libgit2) and\nolder Git versions (as of March 2018) do not support the\n<b>working-tree-encoding</b> attribute. If you decide to use\nthe <b>working-tree-encoding</b> attribute in your\nrepository, then it is strongly recommended to ensure that\nall clients working with the repository support\nit.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>For\nexample, Microsoft Visual Studio resources files\n(<b>*.rc</b>) or PowerShell script files (<b>*.ps1</b>) are\nsometimes encoded in UTF-16. If you declare <b>*.ps1</b> as\nfiles as UTF-16 and you add <b>foo.ps1</b> with a\n<b>working-tree-encoding</b> enabled Git client, then\n<b>foo.ps1</b> will be stored as UTF-8 internally. A client\nwithout <b>working-tree-encoding</b> support will checkout\n<b>foo.ps1</b> as UTF-8 encoded file. This will typically\ncause trouble for the users of this file.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>If a Git\nclient that does not support the\n<b>working-tree-encoding</b> attribute adds a new file\n<b>bar.ps1</b>, then <b>bar.ps1</b> will be stored\n&quot;as-is&quot; internally (in this example probably as\nUTF-16). A client with <b>working-tree-encoding</b> support\nwill interpret the internal contents as UTF-8 and try to\nconvert it to UTF-16 on checkout. That operation will fail\nand cause an error.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\nReencoding content to non-UTF encodings can cause errors as\nthe conversion might not be UTF-8 round trip safe. If you\nsuspect your encoding to not be round trip safe, then add it\nto <b>core.checkRoundtripEncoding</b> to make Git check the\nround trip encoding (see <a href=\"https://man.page/1/git-config\">git-config(1)</a>). SHIFT-JIS\n(Japanese character set) is known to have round trip issues\nwith UTF-8 and is checked by default.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\nReencoding content requires resources that might slow down\ncertain Git operations (e.g <i>git checkout</i> or <i>git\nadd</i>).</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Use the\n<b>working-tree-encoding</b> attribute only if you cannot\nstore a file in UTF-8 encoding and if you want Git to be\nable to process the content as text.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>As an\nexample, use the following attributes if your <i>*.ps1</i>\nfiles are UTF-16 encoded with byte order mark (BOM) and you\nwant Git to perform automatic line ending conversion based\non your platform.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>*.ps1 text\nworking-tree-encoding=UTF-16</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Use the\nfollowing attributes if your <i>*.ps1</i> files are UTF-16\nlittle endian encoded without BOM and you want Git to use\nWindows line endings in the working directory (use\n<b>UTF-16LE-BOM</b> instead of <b>UTF-16LE</b> if you want\nUTF-16 little endian with BOM). Please note, it is highly\nrecommended to explicitly define the line endings with\n<b>eol</b> if the <b>working-tree-encoding</b> attribute is\nused to avoid ambiguity.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>*.ps1 text\nworking-tree-encoding=UTF-16LE eol=CRLF</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>You can\nget a list of all available encodings on your platform with\nthe following command:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>iconv\n--list</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>If you do\nnot know the encoding of a file, then you can use the\n<b>file</b> command to guess the encoding:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>file\nfoo.ps1</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>ident</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>When the attribute\n<b>ident</b> is set for a path, Git replaces <b>$Id$</b> in\nthe blob object with <b>$Id:</b>, followed by the\n40-character hexadecimal blob object name, followed by a\ndollar sign <b>$</b> upon checkout. Any byte sequence that\nbegins with <b>$Id:</b> and ends with <b>$</b> in the\nworktree file is replaced with <b>$Id$</b> upon\ncheck-in.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>filter</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>A <b>filter</b> attribute\ncan be set to a string value that names a filter driver\nspecified in the configuration.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>A filter\ndriver consists of a <b>clean</b> command and a\n<b>smudge</b> command, either of which can be left\nunspecified. Upon checkout, when the <b>smudge</b> command\nis specified, the command is fed the blob object from its\nstandard input, and its standard output is used to update\nthe worktree file. Similarly, the <b>clean</b> command is\nused to convert the contents of worktree file upon checkin.\nBy default these commands process only a single blob and\nterminate. If a long running <b>process</b> filter is used\nin place of <b>clean</b> and/or <b>smudge</b> filters, then\nGit can process all blobs with a single filter command\ninvocation for the entire life of a single Git command, for\nexample <b>git add --all</b>. If a long running\n<b>process</b> filter is configured then it always takes\nprecedence over a configured single blob filter. See section\nbelow for the description of the protocol used to\ncommunicate with a <b>process</b> filter.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>One use of\nthe content filtering is to massage the content into a shape\nthat is more convenient for the platform, filesystem, and\nthe user to use. For this mode of operation, the key phrase\nhere is &quot;more convenient&quot; and not &quot;turning\nsomething unusable into usable&quot;. In other words, the\nintent is that if someone unsets the filter driver\ndefinition, or does not have the appropriate filter program,\nthe project should still be usable.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Another\nuse of the content filtering is to store the content that\ncannot be directly used in the repository (e.g. a UUID that\nrefers to the true content stored outside Git, or an\nencrypted content) and turn it into a usable form upon\ncheckout (e.g. download the external content, or decrypt the\nencrypted content).</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>These two\nfilters behave differently, and by default, a filter is\ntaken as the former, massaging the contents into more\nconvenient shape. A missing filter driver definition in the\nconfig, or a filter driver that exits with a non-zero\nstatus, is not an error but makes the filter a no-op\npassthru.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>You can\ndeclare that a filter turns a content that by itself is\nunusable into a usable content by setting the\nfilter.&lt;driver&gt;.required configuration variable to\n<b>true</b>.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Note:\nWhenever the clean filter is changed, the repo should be\nrenormalized: $ git add --renormalize .</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>For\nexample, in .gitattributes, you would assign the\n<b>filter</b> attribute for paths.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>*.c\nfilter=indent</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Then you\nwould define a &quot;filter.indent.clean&quot; and\n&quot;filter.indent.smudge&quot; configuration in your\n.git/config to specify a pair of commands to modify the\ncontents of C programs when the source files are checked in\n(&quot;clean&quot; is run) and checked out (no change is\nmade because the command is &quot;cat&quot;).</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[filter\n&quot;indent&quot;] <br>\nclean = indent <br>\nsmudge = cat</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>For best\nresults, <b>clean</b> should not alter its output further if\nit is run twice (&quot;clean&rarr;clean&quot; should be\nequivalent to &quot;clean&quot;), and multiple <b>smudge</b>\ncommands should not alter <b>clean</b>'s output\n(&quot;smudge&rarr;smudge&rarr;clean&quot; should be\nequivalent to &quot;clean&quot;). See the section on merging\nbelow.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>The\n&quot;indent&quot; filter is well-behaved in this regard: it\nwill not modify input that is already correctly indented. In\nthis case, the lack of a smudge filter means that the clean\nfilter <i>must</i> accept its own output without modifying\nit.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>If a\nfilter <i>must</i> succeed in order to make the stored\ncontents usable, you can declare that the filter is\n<b>required</b>, in the configuration:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[filter\n&quot;crypt&quot;] <br>\nclean = openssl enc ... <br>\nsmudge = openssl enc -d ... <br>\nrequired</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Sequence\n&quot;%f&quot; on the filter command line is replaced with\nthe name of the file the filter is working on. A filter\nmight use this in keyword substitution. For\nexample:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[filter\n&quot;p4&quot;] <br>\nclean = git-p4-filter --clean %f <br>\nsmudge = git-p4-filter --smudge %f</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Note that\n&quot;%f&quot; is the name of the path that is being worked\non. Depending on the version that is being filtered, the\ncorresponding file on disk may not exist, or may have\ndifferent contents. So, smudge and clean commands should not\ntry to access the file on disk, but only act as filters on\nthe content provided to them on standard input.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Long\nRunning Filter Process</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>If the filter command (a\nstring value) is defined via\n<b>filter.&lt;driver&gt;.process</b> then Git can process\nall blobs with a single filter invocation for the entire\nlife of a single Git command. This is achieved by using the\nlong-running process protocol (described in\ntechnical/long-running-process-protocol.txt).</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>When Git\nencounters the first file that needs to be cleaned or\nsmudged, it starts the filter and performs the handshake. In\nthe handshake, the welcome message sent by Git is\n&quot;git-filter-client&quot;, only version 2 is supported,\nand the supported capabilities are &quot;clean&quot;,\n&quot;smudge&quot;, and &quot;delay&quot;.</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Afterwards\nGit sends a list of &quot;key=value&quot; pairs terminated\nwith a flush packet. The list will contain at least the\nfilter command (based on the supported capabilities) and the\npathname of the file to filter relative to the repository\nroot. Right after the flush packet Git sends the content\nsplit in zero or more pkt-line packets and a flush packet to\nterminate content. Please note, that the filter must not\nsend any response before it received the content and the\nfinal flush packet. Also note that the &quot;value&quot; of\na &quot;key=value&quot; pair can contain the &quot;=&quot;\ncharacter whereas the key would never contain that\ncharacter.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&gt; command=smudge <br>\npacket: git&gt; pathname=path/testfile.dat <br>\npacket: git&gt; 0000 <br>\npacket: git&gt; CONTENT <br>\npacket: git&gt; 0000</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>The filter\nis expected to respond with a list of &quot;key=value&quot;\npairs terminated with a flush packet. If the filter does not\nexperience problems then the list must contain a\n&quot;success&quot; status. Right after these packets the\nfilter is expected to send the content in zero or more\npkt-line packets and a flush packet at the end. Finally, a\nsecond list of &quot;key=value&quot; pairs terminated with a\nflush packet is expected. The filter can change the status\nin the second list or keep the status as is with an empty\nlist. Please note that the empty list must be terminated\nwith a flush packet regardless.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&lt; status=success <br>\npacket: git&lt; 0000 <br>\npacket: git&lt; SMUDGED_CONTENT <br>\npacket: git&lt; 0000 <br>\npacket: git&lt; 0000 # empty list, keep\n&quot;status=success&quot; unchanged!</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>If the\nresult content is empty then the filter is expected to\nrespond with a &quot;success&quot; status and a flush packet\nto signal the empty content.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&lt; status=success <br>\npacket: git&lt; 0000 <br>\npacket: git&lt; 0000 # empty content! <br>\npacket: git&lt; 0000 # empty list, keep\n&quot;status=success&quot; unchanged!</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>In case\nthe filter cannot or does not want to process the content,\nit is expected to respond with an &quot;error&quot;\nstatus.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&lt; status=error <br>\npacket: git&lt; 0000</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>If the\nfilter experiences an error during processing, then it can\nsend the status &quot;error&quot; after the content was\n(partially or completely) sent.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&lt; status=success <br>\npacket: git&lt; 0000 <br>\npacket: git&lt; HALF_WRITTEN_ERRONEOUS_CONTENT <br>\npacket: git&lt; 0000 <br>\npacket: git&lt; status=error <br>\npacket: git&lt; 0000</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>In case\nthe filter cannot or does not want to process the content as\nwell as any future content for the lifetime of the Git\nprocess, then it is expected to respond with an\n&quot;abort&quot; status at any point in the\nprotocol.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&lt; status=abort <br>\npacket: git&lt; 0000</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Git\nneither stops nor restarts the filter process in case the\n&quot;error&quot;/&quot;abort&quot; status is set. However,\nGit sets its exit code according to the\n<b>filter.&lt;driver&gt;.required</b> flag, mimicking the\nbehavior of the <b>filter.&lt;driver&gt;.clean</b> /\n<b>filter.&lt;driver&gt;.smudge</b> mechanism.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>If the\nfilter dies during the communication or does not adhere to\nthe protocol then Git will stop the filter process and\nrestart it with the next file that needs to be processed.\nDepending on the <b>filter.&lt;driver&gt;.required</b> flag\nGit will interpret that as error.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Delay</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>If the filter supports the\n&quot;delay&quot; capability, then Git can send the flag\n&quot;can-delay&quot; after the filter command and pathname.\nThis flag denotes that the filter can delay filtering the\ncurrent blob (e.g. to compensate network latencies) by\nresponding with no content but with the status\n&quot;delayed&quot; and a flush packet.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&gt; command=smudge <br>\npacket: git&gt; pathname=path/testfile.dat <br>\npacket: git&gt; can-delay=1 <br>\npacket: git&gt; 0000 <br>\npacket: git&gt; CONTENT <br>\npacket: git&gt; 0000 <br>\npacket: git&lt; status=delayed <br>\npacket: git&lt; 0000</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>If the\nfilter supports the &quot;delay&quot; capability then it\nmust support the &quot;list_available_blobs&quot; command.\nIf Git sends this command, then the filter is expected to\nreturn a list of pathnames representing blobs that have been\ndelayed earlier and are now available. The list must be\nterminated with a flush packet followed by a\n&quot;success&quot; status that is also terminated with a\nflush packet. If no blobs for the delayed paths are\navailable, yet, then the filter is expected to block the\nresponse until at least one blob becomes available. The\nfilter can tell Git that it has no more delayed blobs by\nsending an empty list. As soon as the filter responds with\nan empty list, Git stops asking. All blobs that Git has not\nreceived at this point are considered missing and will\nresult in an error.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&gt; command=list_available_blobs <br>\npacket: git&gt; 0000 <br>\npacket: git&lt; pathname=path/testfile.dat <br>\npacket: git&lt; pathname=path/otherfile.dat <br>\npacket: git&lt; 0000 <br>\npacket: git&lt; status=success <br>\npacket: git&lt; 0000</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>After Git\nreceived the pathnames, it will request the corresponding\nblobs again. These requests contain a pathname and an empty\ncontent section. The filter is expected to respond with the\nsmudged content in the usual way as explained\nabove.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>packet:\ngit&gt; command=smudge <br>\npacket: git&gt; pathname=path/testfile.dat <br>\npacket: git&gt; 0000 <br>\npacket: git&gt; 0000 # empty content! <br>\npacket: git&lt; status=success <br>\npacket: git&lt; 0000 <br>\npacket: git&lt; SMUDGED_CONTENT <br>\npacket: git&lt; 0000 <br>\npacket: git&lt; 0000 # empty list, keep\n&quot;status=success&quot; unchanged!</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Example</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>A long running filter demo\nimplementation can be found in\n<b>contrib/long-running-filter/example.pl</b> located in the\nGit core repository. If you develop your own long running\nfilter process then the <b>GIT_TRACE_PACKET</b> environment\nvariables can be very helpful for debugging (see\n<a href=\"https://man.page/1/git\">git(1)</a>).</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Please\nnote that you cannot use an existing\n<b>filter.&lt;driver&gt;.clean</b> or\n<b>filter.&lt;driver&gt;.smudge</b> command with\n<b>filter.&lt;driver&gt;.process</b> because the former two\nuse a different inter process communication protocol than\nthe latter one.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Interaction\nbetween checkin/checkout attributes</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>In the check-in codepath,\nthe worktree file is first converted with <b>filter</b>\ndriver (if specified and corresponding driver defined), then\nthe result is processed with <b>ident</b> (if specified),\nand then finally with <b>text</b> (again, if specified and\napplicable).</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>In the\ncheck-out codepath, the blob content is first converted with\n<b>text</b>, and then <b>ident</b> and fed to\n<b>filter</b>.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Merging\nbranches with differing checkin/checkout\nattributes</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>If you have added\nattributes to a file that cause the canonical repository\nformat for that file to change, such as adding a\nclean/smudge filter or text/eol/ident attributes, merging\nanything where the attribute is not in place would normally\ncause merge conflicts.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>To prevent\nthese unnecessary merge conflicts, Git can be told to run a\nvirtual check-out and check-in of all three stages of a file\nwhen resolving a three-way merge by setting the\n<b>merge.renormalize</b> configuration variable. This\nprevents changes caused by check-in conversion from causing\nspurious merge conflicts when a converted file is merged\nwith an unconverted file.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>As long as\na &quot;smudge&rarr;clean&quot; results in the same output\nas a &quot;clean&quot; even on files that are already\nsmudged, this strategy will automatically resolve all\nfilter-related conflicts. Filters that do not act in this\nway may cause additional merge conflicts that must be\nresolved manually.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b>Generating\ndiff text <big><br>\ndiff</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>The attribute <b>diff</b>\naffects how Git generates diffs for particular files. It can\ntell Git whether to generate a textual patch for the path or\nto treat the path as a binary file. It can also affect what\nline is shown on the hunk header <b>@@ -k,l +n,m @@</b>\nline, tell Git to use an external command to generate the\ndiff, or ask Git to convert binary files to a text format\nbefore generating the diff.</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Set</big></p>\n\n<p style=\"margin-left:23%;\"><big>A path to which the\n<b>diff</b> attribute is set is treated as text, even when\nthey contain byte values that normally never appear in text\nfiles, such as NUL.</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Unset</big></p>\n\n<p style=\"margin-left:23%;\"><big>A path to which the\n<b>diff</b> attribute is unset will generate <b>Binary files\ndiffer</b> (or a binary patch, if binary patches are\nenabled).</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Unspecified</big></p>\n\n<p style=\"margin-left:23%;\"><big>A path to which the\n<b>diff</b> attribute is unspecified first gets its contents\ninspected, and if it looks like text and is smaller than\ncore.bigFileThreshold, it is treated as text. Otherwise it\nwould generate <b>Binary files differ</b>.</big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>String</big></p>\n\n<p style=\"margin-left:23%;\"><big>Diff is shown using the\nspecified diff driver. Each driver may specify one or more\noptions, as described in the following section. The options\nfor the diff driver &quot;foo&quot; are defined by the\nconfiguration variables in the &quot;diff.foo&quot; section\nof the Git config file.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Defining\nan external diff driver</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>The definition of a diff\ndriver is done in <b>gitconfig</b>, not <b>gitattributes</b>\nfile, so strictly speaking this manual page is a wrong place\nto talk about it. However...</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>To define\nan external diff driver <b>jcdiff</b>, add a section to your\n<b>$GIT_DIR/config</b> file (or <b>$HOME/.gitconfig</b>\nfile) like this:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[diff\n&quot;jcdiff&quot;] <br>\ncommand = j-c-diff</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>When Git\nneeds to show you a diff for the path with <b>diff</b>\nattribute set to <b>jcdiff</b>, it calls the command you\nspecified with the above configuration, i.e.\n<b>j-c-diff</b>, with 7 parameters, just like\n<b>GIT_EXTERNAL_DIFF</b> program is called. See\n<a href=\"https://man.page/1/git\">git(1)</a> for details.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Defining\na custom hunk-header</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>Each group of changes\n(called a &quot;hunk&quot;) in the textual diff output is\nprefixed with a line of the form:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>@@ -k,l\n+n,m @@ TEXT</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>This is\ncalled a <i>hunk header</i>. The &quot;TEXT&quot; portion is\nby default a line that begins with an alphabet, an\nunderscore or a dollar sign; this matches what GNU <i>diff\n-p</i> output uses. This default selection however is not\nsuited for some contents, and you can use a customized\npattern to make a selection.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>First, in\n.gitattributes, you would assign the <b>diff</b> attribute\nfor paths.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>*.tex\ndiff=tex</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Then, you\nwould define a &quot;diff.tex.xfuncname&quot; configuration\nto specify a regular expression that matches a line that you\nwould want to appear as the hunk header &quot;TEXT&quot;.\nAdd a section to your <b>$GIT_DIR/config</b> file (or\n<b>$HOME/.gitconfig</b> file) like this:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[diff\n&quot;tex&quot;] <br>\nxfuncname = &quot;^(\\\\\\\\(sub)*section\\\\{.*)$&quot;</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Note. A\nsingle level of backslashes are eaten by the configuration\nfile parser, so you would need to double the backslashes;\nthe pattern above picks a line that begins with a backslash,\nand zero or more occurrences of <b>sub</b> followed by\n<b>section</b> followed by open brace, to the end of\nline.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>There are\na few built-in patterns to make this easier, and <b>tex</b>\nis one of them, so you do not have to write the above in\nyour configuration file (you still need to enable this with\nthe attribute mechanism, via <b>.gitattributes</b>). The\nfollowing built in patterns are available:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>ada</b> suitable for source code in the Ada\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>bash</b> suitable for source code in the Bourne-Again\nSHell language. Covers a superset of POSIX shell function\ndefinitions.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>bibtex</b> suitable for files with BibTeX coded\nreferences.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>cpp</b> suitable for source code in the C and C++\nlanguages.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>csharp</b> suitable for source code in the C#\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>css</b> suitable for cascading style sheets.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>dts</b> suitable for devicetree (DTS) files.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>elixir</b> suitable for source code in the Elixir\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>fortran</b> suitable for source code in the Fortran\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>fountain</b> suitable for Fountain documents.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>golang</b> suitable for source code in the Go\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>html</b> suitable for HTML/XHTML documents.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>java</b> suitable for source code in the Java\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>markdown</b> suitable for Markdown documents.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>matlab</b> suitable for source code in the MATLAB and\nOctave languages.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>objc</b> suitable for source code in the Objective-C\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>pascal</b> suitable for source code in the Pascal/Delphi\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>perl</b> suitable for source code in the Perl\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>php</b> suitable for source code in the PHP\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>python</b> suitable for source code in the Python\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>ruby</b> suitable for source code in the Ruby\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>rust</b> suitable for source code in the Rust\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>scheme</b> suitable for source code in the Scheme\nlanguage.</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>&bull;\n<b>tex</b> suitable for source code for LaTeX\ndocuments.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Customizing\nword diff</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>You can customize the\nrules that <b>git diff --word-diff</b> uses to split words\nin a line, by specifying an appropriate regular expression\nin the &quot;diff.*.wordRegex&quot; configuration variable.\nFor example, in TeX a backslash followed by a sequence of\nletters forms a command, but several such commands can be\nrun together without intervening whitespace. To separate\nthem, use a regular expression in your\n<b>$GIT_DIR/config</b> file (or <b>$HOME/.gitconfig</b>\nfile) like this:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[diff\n&quot;tex&quot;] <br>\nwordRegex =\n&quot;\\\\\\\\[a-zA-Z]+|[{}]|\\\\\\\\.|[^\\\\{}[:space:]]+&quot;</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>A built-in\npattern is provided for all languages listed in the previous\nsection.</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Performing\ntext diffs of binary files</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big>Sometimes it is desirable\nto see the diff of a text-converted version of some binary\nfiles. For example, a word processor document can be\nconverted to an ASCII text representation, and the diff of\nthe text shown. Even though this conversion loses some\ninformation, the resulting diff is useful for human viewing\n(but cannot be applied directly).</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>The\n<b>textconv</b> config option is used to define a program\nfor performing such a conversion. The program should take a\nsingle argument, the name of a file to convert, and produce\nthe resulting text on stdout.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>For\nexample, to show the diff of the exif information of a file\ninstead of the binary information (assuming you have the\nexif tool installed), add the following section to your\n<b>$GIT_DIR/config</b> file (or <b>$HOME/.gitconfig</b>\nfile):</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[diff\n&quot;jpg&quot;] <br>\ntextconv = exif</big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><b><big>Note</big></b>\n<br>\nThe text conversion is generally a one-way conversion; in\nthis example, we lose the actual image contents and focus\njust on the text data. This means that diffs generated by\ntextconv are <i>not</i> suitable for applying. For this\nreason, only <b>git diff</b> and the <b>git log</b> family\nof commands (i.e., log, whatchanged, show) will perform text\nconversion. <b>git format-patch</b> will never generate this\noutput. If you want to send somebody a text-converted diff\nof a binary file (e.g., because it quickly conveys the\nchanges you have made), you should generate it separately\nand send it as a comment <i>in addition to</i> the usual\nbinary diff that you might send.</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>Because\ntext conversion can be slow, especially when doing a large\nnumber of them with <b>git log -p</b>, Git provides a\nmechanism to cache the output and use it in future diffs. To\nenable caching, set the &quot;cachetextconv&quot; variable\nin your diff driver&rsquo;s config. For example:</big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big>[diff\n&quot;jpg&quot;] <br>\ntextconv = exif <br>\ncachetextconv = true</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>This will\ncache the result of running &quot;exif&quot; on each blob\nindefinitely. If you change the textconv config variable for\na diff driver, Git will automatically invalidate the cache\nentries and re-run the textconv filter. If you want to\ninvalidate the cache manually (e.g., because your version of\n&quot;exif&quot; was updated and now produces better\noutput), you can remove the cache manually with <b>git\nupdate-ref -d refs/notes/textconv/jpg</b> (where\n&quot;jpg&quot; is the name of the diff driver, as in the\nexample above).</big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><b><big>Choosing\ntextconv versus external diff</big></b></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>If you want to show\ndifferences between binary or specially-formatted blobs in\nyour repository, you can choose to use either an external\ndiff command, or to use textconv to convert them to a\ndiff-able text format. Which method you choose depends on\nyour exact situation.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\nadvantage of using an external diff command is flexibility.\nYou are not bound to find line-oriented changes, nor is it\nnecessary for the output to resemble unified diff. You are\nfree to locate and report changes in the most appropriate\nway for your data format.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>A\ntextconv, by comparison, is much more limiting. You provide\na transformation of the data into a line-oriented text\nformat, and Git uses its regular diff tools to generate the\noutput. There are several advantages to choosing this\nmethod:</big></big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big>1.\nEase of use. It is often much simpler to write a binary to\ntext transformation than it is to perform your own diff. In\nmany cases, existing programs can be used as textconv\nfilters (e.g., exif, odt2txt).</big></big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big>2.\nGit diff features. By performing only the transformation\nstep yourself, you can still utilize many of Git&rsquo;s\ndiff features, including colorization, word-diff, and\ncombined diffs for merges.</big></big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big>3.\nCaching. Textconv caching can speed up repeated diffs, such\nas those you might trigger by running <b>git log\n-p</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b><big>Marking\nfiles as binary</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Git usually guesses\ncorrectly whether a blob contains text or binary data by\nexamining the beginning of the contents. However, sometimes\nyou may want to override its decision, either because a blob\ncontains binary data later in the file, or because the\ncontent, while technically composed of text characters, is\nopaque to a human reader. For example, many postscript files\ncontain only ASCII characters, but produce noisy and\nmeaningless diffs.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\nsimplest way to mark a file as binary is to unset the diff\nattribute in the <b>.gitattributes</b> file:</big></big></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big>*.ps\n-diff</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>This\nwill cause Git to generate <b>Binary files differ</b> (or a\nbinary patch, if binary patches are enabled) instead of a\nregular diff.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>However,\none may also want to specify other diff driver attributes.\nFor example, you might want to use <b>textconv</b> to\nconvert postscript files to an ASCII representation for\nhuman viewing, but otherwise treat them as binary files. You\ncannot specify both <b>-diff</b> and <b>diff=ps</b>\nattributes. The solution is to use the <b>diff.*.binary</b>\nconfig option:</big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big>[diff\n&quot;ps&quot;] <br>\ntextconv = ps2ascii <br>\nbinary = true</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>Performing\na three-way merge <big><br>\nmerge</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>The attribute\n<b>merge</b> affects how three versions of a file are merged\nwhen a file-level merge is necessary during <b>git\nmerge</b>, and other commands such as <b>git revert</b> and\n<b>git cherry-pick</b>.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Set</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Built-in 3-way merge\ndriver is used to merge the contents in a way similar to\n<i>merge</i> command of <b>RCS</b> suite. This is suitable\nfor ordinary text files.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Unset</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Take the version from\nthe current branch as the tentative merge result, and\ndeclare that the merge has conflicts. This is suitable for\nbinary files that do not have a well-defined merge\nsemantics.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Unspecified</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>By default, this uses\nthe same built-in 3-way merge driver as is the case when the\n<b>merge</b> attribute is set. However, the\n<b>merge.default</b> configuration variable can name\ndifferent merge driver to be used with paths for which the\n<b>merge</b> attribute is unspecified.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>String</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>3-way merge is\nperformed using the specified custom merge driver. The\nbuilt-in 3-way merge driver can be explicitly specified by\nasking for &quot;text&quot; driver; the built-in &quot;take\nthe current branch&quot; driver can be requested with\n&quot;binary&quot;.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b><big>Built-in\nmerge drivers</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>There are a few\nbuilt-in low-level merge drivers defined that can be asked\nfor via the <b>merge</b> attribute.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>text</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Usual 3-way file\nlevel merge for text files. Conflicted regions are marked\nwith conflict markers <b>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</b>,\n<b>=======</b> and <b>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</b>. The\nversion from your branch appears before the <b>=======</b>\nmarker, and the version from the merged branch appears after\nthe <b>=======</b> marker.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>binary</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Keep the version from\nyour branch in the work tree, but leave the path in the\nconflicted state for the user to sort out.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>union</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Run 3-way file level\nmerge for text files, but take lines from both versions,\ninstead of leaving conflict markers. This tends to leave the\nadded lines in the resulting file in random order and the\nuser should verify the result. Do not use this if you do not\nunderstand the implications.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b><big>Defining\na custom merge driver</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>The definition of a\nmerge driver is done in the <b>.git/config</b> file, not in\nthe <b>gitattributes</b> file, so strictly speaking this\nmanual page is a wrong place to talk about it.\nHowever...</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>To\ndefine a custom merge driver <b>filfre</b>, add a section to\nyour <b>$GIT_DIR/config</b> file (or <b>$HOME/.gitconfig</b>\nfile) like this:</big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big>[merge\n&quot;filfre&quot;] <br>\nname = feel-free merge driver <br>\ndriver = filfre %O %A %B %L %P <br>\nrecursive = binary</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\n<b>merge.*.name</b> variable gives the driver a\nhuman-readable name.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\n&rsquo;merge.*.driver&rsquo; variable&rsquo;s value is used\nto construct a command to run to merge ancestor&rsquo;s\nversion (<b>%O</b>), current version (<b>%A</b>) and the\nother branches&rsquo; version (<b>%B</b>). These three\ntokens are replaced with the names of temporary files that\nhold the contents of these versions when the command line is\nbuilt. Additionally, %L will be replaced with the conflict\nmarker size (see below).</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\nmerge driver is expected to leave the result of the merge in\nthe file named with <b>%A</b> by overwriting it, and exit\nwith zero status if it managed to merge them cleanly, or\nnon-zero if there were conflicts.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\n<b>merge.*.recursive</b> variable specifies what other merge\ndriver to use when the merge driver is called for an\ninternal merge between common ancestors, when there are more\nthan one. When left unspecified, the driver itself is used\nfor both internal merge and the final merge.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>The\nmerge driver can learn the pathname in which the merged\nresult will be stored via placeholder\n<b>%P</b>.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b><big>conflict-marker-size</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>This attribute\ncontrols the length of conflict markers left in the work\ntree file during a conflicted merge. Only setting to the\nvalue to a positive integer has any meaningful\neffect.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>For\nexample, this line in <b>.gitattributes</b> can be used to\ntell the merge machinery to leave much longer (instead of\nthe usual 7-character-long) conflict markers when merging\nthe file <b>Documentation/git-merge.txt</b> results in a\nconflict.</big></big></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><big><big>Documentation/git-merge.txt\nconflict-marker-size=32</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>Checking\nwhitespace errors <big><br>\nwhitespace</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>The\n<b>core.whitespace</b> configuration variable allows you to\ndefine what <i>diff</i> and <i>apply</i> should consider\nwhitespace errors for all paths in the project (See\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). This attribute gives you finer\ncontrol per path.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Set</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Notice all types of\npotential whitespace errors known to Git. The tab width is\ntaken from the value of the <b>core.whitespace</b>\nconfiguration variable.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Unset</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Do not notice\nanything as error.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>Unspecified</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Use the value of the\n<b>core.whitespace</b> configuration variable to decide what\nto notice as error.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>String</big></big></p>\n\n<p style=\"margin-left:23%;\"><big><big>Specify a comma\nseparate list of common whitespace problems to notice in the\nsame format as the <b>core.whitespace</b> configuration\nvariable.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>Creating\nan archive <big><br>\nexport-ignore</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Files and directories\nwith the attribute <b>export-ignore</b> won&rsquo;t be added\nto archive files.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b><big>export-subst</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>If the attribute\n<b>export-subst</b> is set for a file then Git will expand\nseveral placeholders when adding this file to an archive.\nThe expansion depends on the availability of a commit ID,\ni.e., if <a href=\"https://man.page/1/git-archive\">git-archive(1)</a> has been given a tree instead\nof a commit or a tag then no replacement will be done. The\nplaceholders are the same as those for the option\n<b>--pretty=format:</b> of <a href=\"https://man.page/1/git-log\">git-log(1)</a>, except that\nthey need to be wrapped like this:\n<b>$Format:PLACEHOLDERS$</b> in the file. E.g. the string\n<b>$Format:%H$</b> will be replaced by the commit hash.\nHowever, only one <b>%(describe)</b> placeholder is expanded\nper archive to avoid denial-of-service\nattacks.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>Packing\nobjects <big><br>\ndelta</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>Delta compression\nwill not be attempted for blobs for paths with the attribute\n<b>delta</b> set to false.</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><b>Viewing\nfiles in GUI tools <big><br>\nencoding</big></b></big></big></p>\n\n<p style=\"margin-left:17%;\"><big><big>The value of this\nattribute specifies the character encoding that should be\nused by GUI tools (e.g. <a href=\"https://man.page/1/gitk\">gitk(1)</a> and\n<a href=\"https://man.page/1/git-gui\">git-gui(1)</a>) to display the contents of the relevant\nfile. Note that due to performance considerations\n<a href=\"https://man.page/1/gitk\">gitk(1)</a> does not use this attribute unless you\nmanually enable per-file encodings in its\noptions.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>If\nthis attribute is not set or has an invalid value, the value\nof the <b>gui.encoding</b> configuration variable is used\ninstead (See <a href=\"https://man.page/1/git-config\">git-config(1)</a>).</big></big></p>\n\n<h2>USING MACRO ATTRIBUTES\n<a name=\"USING MACRO ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>You\ndo not want any end-of-line conversions applied to, nor\ntextual diffs produced for, any binary file you track. You\nwould need to specify e.g.</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>*.jpg\n-text -diff</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>but\nthat may become cumbersome, when you have many attributes.\nUsing macro attributes, you can define an attribute that,\nwhen set, also sets or unsets a number of other attributes\nat the same time. The system knows a built-in macro\nattribute, <b>binary</b>:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>*.jpg\nbinary</big></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Setting\nthe &quot;binary&quot; attribute also unsets the\n&quot;text&quot; and &quot;diff&quot; attributes as above.\nNote that macro attributes can only be &quot;Set&quot;,\nthough setting one might have the effect of setting or\nunsetting other attributes or even returning other\nattributes to the &quot;Unspecified&quot;\nstate.</big></big></p>\n\n<h2>DEFINING MACRO ATTRIBUTES\n<a name=\"DEFINING MACRO ATTRIBUTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Custom\nmacro attributes can be defined only in top-level\ngitattributes files (<b>$GIT_DIR/info/attributes</b>, the\n<b>.gitattributes</b> file at the top level of the working\ntree, or the global or system-wide gitattributes files), not\nin <b>.gitattributes</b> files in working tree\nsubdirectories. The built-in macro attribute\n&quot;binary&quot; is equivalent to:</big></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>[attr]binary\n-diff -merge -text</big></big></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Git\ndoes not follow symbolic links when accessing a\n<b>.gitattributes</b> file in the working tree. This keeps\nbehavior consistent when the file is accessed from the index\nor a tree versus from the filesystem.</big></big></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>If\nyou have these three <b>gitattributes</b>\nfile:</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>(in\n$GIT_DIR/info/attributes)</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>a*\nfoo !bar -baz</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>(in\n.gitattributes) <br>\nabc foo bar baz</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>(in\nt/.gitattributes) <br>\nab* merge=filfre <br>\nabc -foo -bar <br>\n*.c frotz</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>the\nattributes given to path <b>t/abc</b> are computed as\nfollows:</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>1. By\nexamining <b>t/.gitattributes</b> (which is in the same\ndirectory as the path in question), Git finds that the first\nline matches. <b>merge</b> attribute is set. It also finds\nthat the second line matches, and attributes <b>foo</b> and\n<b>bar</b> are unset.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>2.\nThen it examines <b>.gitattributes</b> (which is in the\nparent directory), and finds that the first line matches,\nbut <b>t/.gitattributes</b> file already decided how\n<b>merge</b>, <b>foo</b> and <b>bar</b> attributes should be\ngiven to this path, so it leaves <b>foo</b> and <b>bar</b>\nunset. Attribute <b>baz</b> is set.</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>3.\nFinally it examines <b>$GIT_DIR/info/attributes</b>. This\nfile is used to override the in-tree settings. The first\nline is a match, and <b>foo</b> is set, <b>bar</b> is\nreverted to unspecified state, and <b>baz</b> is\nunset.</big></big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>As\nthe result, the attributes assignment to <b>t/abc</b>\nbecomes:</big></big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><big>foo\nset to true <br>\nbar unspecified <br>\nbaz set to false <br>\nmerge set to string value &quot;filfre&quot; <br>\nfrotz unspecified</big></big></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big><a href=\"https://man.page/1/git-check-attr\">git-check-attr(1)</a>.</big></big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><big>Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</big></big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EFFECTS\">EFFECTS</a>","<a href=\"#USING MACRO ATTRIBUTES\">USING MACRO ATTRIBUTES</a>","<a href=\"#DEFINING MACRO ATTRIBUTES\">DEFINING MACRO ATTRIBUTES</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"],"level":5}