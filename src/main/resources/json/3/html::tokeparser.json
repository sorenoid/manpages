{"name":"html::tokeparser","description":"HTML::TokeParser\n- Alternative HTML::Parser interface","body":"\n\n<h1 align=\"center\">HTML::TokeParser</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::TokeParser\n- Alternative HTML::Parser interface</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">require\nHTML::TokeParser; <br>\n$p = HTML::TokeParser-&gt;new(&quot;index.html&quot;) ||\n<br>\ndie &quot;Can't open: $!&quot;; <br>\n$p-&gt;empty_element_tags(1); # configure its behaviour <br>\nwhile (my $token = $p-&gt;get_token) { <br>\n#... <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;HTML::TokeParser&quot; is an alternative interface to\nthe &quot;HTML::Parser&quot; class. It is an\n&quot;HTML::PullParser&quot; subclass with a predeclared set\nof token types. If you wish the tokens to be reported\ndifferently you probably want to use the\n&quot;HTML::PullParser&quot; directly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are available: <br>\n$p = HTML::TokeParser-&gt;new( $filename, %opt ); <br>\n$p = HTML::TokeParser-&gt;new( $filehandle, %opt ); <br>\n$p = HTML::TokeParser-&gt;new( \\$document, %opt );</p>\n\n<p style=\"margin-left:17%;\">The object constructor argument\nis either a file name, a file handle object, or the complete\ndocument to be parsed. Extra options can be provided as\nkey/value pairs and are processed as documented by the base\nclasses.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the argument\nis a plain scalar, then it is taken as the name of a file to\nbe opened and parsed. If the file can&rsquo;t be opened for\nreading, then the constructor will return &quot;undef&quot;\nand $! will tell you why it failed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the argument\nis a reference to a plain scalar, then this scalar is taken\nto be the literal document to parse. The value of this\nscalar should not be changed before all tokens have been\nextracted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Otherwise the\nargument is taken to be some object that the\n&quot;HTML::TokeParser&quot; can <b>read()</b> from when it\nneeds more data. Typically it will be a filehandle of some\nkind. The stream will be <b>read()</b> until\n<small>EOF,</small> but not closed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A newly\nconstructed &quot;HTML::TokeParser&quot; differ from its\nbase classes by having the &quot;unbroken_text&quot;\nattribute enabled by default. See HTML::Parser for a\ndescription of this and other attributes that influence how\nthe document is parsed. It is often a good idea to enable\n&quot;empty_element_tags&quot; behaviour.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\nparsing result will likely not be valid if raw undecoded\n<small>UTF-8</small> is used as a source. When parsing\n<small>UTF-8</small> encoded files turn on\n<small>UTF-8</small> decoding:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">open(my $fh,\n&quot;&lt;:utf8&quot;, &quot;index.html&quot;) || die\n&quot;Can't open 'index.html': $!&quot;; <br>\nmy $p = HTML::TokeParser-&gt;new( $fh ); <br>\n# ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a $filename\nis passed to the constructor the file will be opened in raw\nmode and the parsing result will only be valid if its\ncontent is Latin-1 or pure <small>ASCII.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If parsing from\nan <small>UTF-8</small> encoded string buffer decode it\nfirst:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">utf8::decode($document);\n<br>\nmy $p = HTML::TokeParser-&gt;new( \\$document ); <br>\n# ...</p>\n\n<p style=\"margin-left:11%;\">$p-&gt;get_token</p>\n\n<p style=\"margin-left:17%;\">This method will return the\nnext <i>token</i> found in the <small>HTML</small> document,\nor &quot;undef&quot; at the end of the document. The token\nis returned as an array reference. The first element of the\narray will be a string denoting the type of this token:\n&quot;S&quot; for start tag, &quot;E&quot; for end tag,\n&quot;T&quot; for text, &quot;C&quot; for comment,\n&quot;D&quot; for declaration, and &quot;\n<small>PI&quot;</small> for process instructions. The rest\nof the token array depend on the type like this:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">[&quot;S&quot;,\n$tag, $attr, $attrseq, $text] <br>\n[&quot;E&quot;, $tag, $text] <br>\n[&quot;T&quot;, $text, $is_data] <br>\n[&quot;C&quot;, $text] <br>\n[&quot;D&quot;, $text] <br>\n[&quot;PI&quot;, $token0, $text]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">where $attr is\na hash reference, $attrseq is an array reference and the\nrest are plain scalars. The &quot;Argspec&quot; in\nHTML::Parser explains the details.</p>\n\n<p style=\"margin-left:11%;\">$p-&gt;unget_token( @tokens\n)</p>\n\n<p style=\"margin-left:17%;\">If you find you have read too\nmany tokens you can push them back, so that they are\nreturned the next time $p-&gt;get_token is called.</p>\n\n<p style=\"margin-left:11%;\">$p-&gt;get_tag <br>\n$p-&gt;get_tag( @tags )</p>\n\n<p style=\"margin-left:17%;\">This method returns the next\nstart or end tag (skipping any other tokens), or\n&quot;undef&quot; if there are no more tags in the document.\nIf one or more arguments are given, then we skip tokens\nuntil one of the specified tag types is found. For\nexample:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$p-&gt;get_tag(&quot;font&quot;,\n&quot;/font&quot;);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">will find the\nnext start or end tag for a font-element.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The tag\ninformation is returned as an array reference in the same\nform as for $p-&gt;get_token above, but the type code (first\nelement) is missing. A start tag will be returned like\nthis:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[$tag, $attr,\n$attrseq, $text]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The tagname of\nend tags are prefixed with &quot;/&quot;, i.e. end tag is\nreturned like this:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">[&quot;/$tag&quot;,\n$text]</p>\n\n<p style=\"margin-left:11%;\">$p-&gt;get_text <br>\n$p-&gt;get_text( @endtags )</p>\n\n<p style=\"margin-left:17%;\">This method returns all text\nfound at the current position. It will return a zero length\nstring if the next token is not text. Any entities will be\nconverted to their corresponding character.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If one or more\narguments are given, then we return all text occurring\nbefore the first of the specified tags found. For\nexample:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$p-&gt;get_text(&quot;p&quot;,\n&quot;br&quot;);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">will return the\ntext up to either a paragraph of line break element.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The text might\nspan tags that should be <i>textified</i>. This is\ncontrolled by the $p-&gt;{textify} attribute, which is a\nhash that defines how certain tags can be treated as text.\nIf the name of a start tag matches a key in this hash then\nthis tag is converted to text. The hash value is used to\nspecify which tag attribute to obtain the text from. If this\ntag attribute is missing, then the upper case name of the\ntag enclosed in brackets is returned, e.g. &quot;[\n<small>IMG</small> ]&quot;. The hash value can also be a\nsubroutine reference. In this case the routine is called\nwith the start tag token content as its argument and the\nreturn value is treated as the text.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\n$p-&gt;{textify} value is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">{img =&gt;\n&quot;alt&quot;, applet =&gt; &quot;alt&quot;}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This means that\n&lt; <small>IMG</small> &gt; and &lt; <small>APPLET</small>\n&gt; tags are treated as text, and that the text to\nsubstitute can be found in the <small>ALT</small>\nattribute.</p>\n\n<p style=\"margin-left:11%;\">$p-&gt;get_trimmed_text <br>\n$p-&gt;get_trimmed_text( @endtags )</p>\n\n<p style=\"margin-left:17%;\">Same as $p-&gt;get_text above,\nbut will collapse any sequences of white space to a single\nspace character. Leading and trailing white space is\nremoved.</p>\n\n<p style=\"margin-left:11%;\">$p-&gt;get_phrase</p>\n\n<p style=\"margin-left:17%;\">This will return all text found\nat the current position ignoring any phrasal-level tags.\nText is extracted until the first non phrasal-level tag.\nTextification of tags is the same as for <b>get_text()</b>.\nThis method will collapse white space in the same way as\n<b>get_trimmed_text()</b> does.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The definition\nof &lt;i&gt;phrasal-level tags&lt;/i&gt; is obtained from\nthe HTML::Tagset module.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\nextracts all links from a document. It will print one line\nfor each link, containing the <small>URL</small> and the\ntextual description between the &lt;A&gt;...&lt;/A&gt;\ntags:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTML::TokeParser; <br>\n$p =\nHTML::TokeParser-&gt;new(shift||&quot;index.html&quot;);\n<br>\nwhile (my $token = $p-&gt;get_tag(&quot;a&quot;)) { <br>\nmy $url = $token-&gt;[1]{href} || &quot;-&quot;; <br>\nmy $text = $p-&gt;get_trimmed_text(&quot;/a&quot;); <br>\nprint &quot;$url\\t$text\\n&quot;; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\nextract the &lt; <small>TITLE</small> &gt; from the\ndocument:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTML::TokeParser; <br>\n$p =\nHTML::TokeParser-&gt;new(shift||&quot;index.html&quot;);\n<br>\nif ($p-&gt;get_tag(&quot;title&quot;)) { <br>\nmy $title = $p-&gt;get_trimmed_text; <br>\nprint &quot;Title: $title\\n&quot;; <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::PullParser,\nHTML::Parser</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1998-2005 Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}