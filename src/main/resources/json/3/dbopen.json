{"name":"dbopen","description":"dbopen -\ndatabase access methods","body":"\n\n<h1 align=\"center\">DBOPEN</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dbopen -\ndatabase access methods</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;limits.h&gt; <br>\n#include &lt;db.h&gt; <br>\n#include &lt;fcntl.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>DB\n*dbopen(const char *</b><i>file</i><b>, int</b>\n<i>flags</i><b>, int</b> <i>mode</i><b>, DBTYPE</b>\n<i>type</i><b>, <br>\nconst void *</b><i>openinfo</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>Note\nwell</i></b>: This page documents interfaces provided in\nglibc up until version 2.1. Since version 2.2, glibc no\nlonger provides these interfaces. Probably, you are looking\nfor the APIs provided by the <i>libdb</i> library\ninstead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dbopen</b>()\nis the library interface to database files. The supported\nfile formats are btree, hashed and UNIX file oriented. The\nbtree format is a representation of a sorted, balanced tree\nstructure. The hashed format is an extensible, dynamic\nhashing scheme. The flat-file format is a byte stream file\nwith fixed or variable length records. The formats and\nfile-format-specific information are described in detail in\ntheir respective manual pages <a href=\"https://man.page/3/btree\">btree(3)</a>,\n<a href=\"https://man.page/3/hash\">hash(3)</a>, and <a href=\"https://man.page/3/recno\">recno(3)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dbopen</b>()\nopens <i>file</i> for reading and/or writing. Files never\nintended to be preserved on disk may be created by setting\nthe <i>file</i> argument to NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> and <i>mode</i> arguments are as specified to\nthe <a href=\"https://man.page/2/open\">open(2)</a> routine, however, only the\n<b>O_CREAT</b>, <b>O_EXCL</b>, <b>O_EXLOCK</b>,\n<b>O_NONBLOCK</b>, <b>O_RDONLY</b>, <b>O_RDWR</b>,\n<b>O_SHLOCK</b>, and <b>O_TRUNC</b> flags are meaningful.\n(Note, opening a database file <b>O_WRONLY</b> is not\npossible.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>type</i>\nargument is of type <i>DBTYPE</i> (as defined in the\n<i>&lt;db.h&gt;</i> include file) and may be set to\n<b>DB_BTREE</b>, <b>DB_HASH</b>, or <b>DB_RECNO</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>openinfo</i> argument is a pointer to an\naccess-method-specific structure described in the access\nmethod&rsquo;s manual page. If <i>openinfo</i> is NULL, each\naccess method will use defaults appropriate for the system\nand the access method.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dbopen</b>()\nreturns a pointer to a <i>DB</i> structure on success and\nNULL on error. The <i>DB</i> structure is defined in the\n<i>&lt;db.h&gt;</i> include file, and contains at least the\nfollowing fields:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nDBTYPE type; <br>\nint (*close)(const DB *db); <br>\nint (*del)(const DB *db, const DBT *key, unsigned int\nflags); <br>\nint (*fd)(const DB *db); <br>\nint (*get)(const DB *db, DBT *key, DBT *data, <br>\nunsigned int flags); <br>\nint (*put)(const DB *db, DBT *key, const DBT *data, <br>\nunsigned int flags); <br>\nint (*sync)(const DB *db, unsigned int flags); <br>\nint (*seq)(const DB *db, DBT *key, DBT *data, <br>\nunsigned int flags); <br>\n} DB;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These elements\ndescribe a database type and a set of functions performing\nvarious actions. These functions take a pointer to a\nstructure as returned by <b>dbopen</b>(), and sometimes one\nor more pointers to key/data structures and a flag\nvalue.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>type</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The type of the underlying access method (and file\nformat).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>close</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>A pointer to a routine to flush any cached information\nto disk, free any allocated resources, and close the\nunderlying file(s). Since key/data pairs may be cached in\nmemory, failing to sync the file with a <i>close</i> or\n<i>sync</i> function may result in inconsistent or lost\ninformation. <i>close</i> routines return -1 on error\n(setting <i>errno</i>) and 0 on success.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>del</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>A pointer to a routine to remove key/data pairs from the\ndatabase.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The argument\n<i>flag</i> may be set to the following value: <b><br>\nR_CURSOR</b></p>\n\n<p style=\"margin-left:32%;\">Delete the record referenced by\nthe cursor. The cursor must have previously been\ninitialized.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>delete</i>\nroutines return -1 on error (setting <i>errno</i>), 0 on\nsuccess, and 1 if the specified <i>key</i> was not in the\nfile.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>fd</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>A pointer to a routine which returns a file descriptor\nrepresentative of the underlying database. A file descriptor\nreferencing the same file will be returned to all processes\nwhich call <b>dbopen</b>() with the same <i>file</i> name.\nThis file descriptor may be safely used as an argument to\nthe <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> and <a href=\"https://man.page/2/flock\">flock(2)</a> locking functions.\nThe file descriptor is not necessarily associated with any\nof the underlying files used by the access method. No file\ndescriptor is available for in memory databases. <i>fd</i>\nroutines return -1 on error (setting <i>errno</i>), and the\nfile descriptor on success.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>get</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>A pointer to a routine which is the interface for keyed\nretrieval from the database. The address and length of the\ndata associated with the specified <i>key</i> are returned\nin the structure referenced by <i>data</i>. <i>get</i>\nroutines return -1 on error (setting <i>errno</i>), 0 on\nsuccess, and 1 if the <i>key</i> was not in the file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>put</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>A pointer to a routine to store key/data pairs in the\ndatabase.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The argument\n<i>flag</i> may be set to one of the following values:\n<b><br>\nR_CURSOR</b></p>\n\n<p style=\"margin-left:32%;\">Replace the key/data pair\nreferenced by the cursor. The cursor must have previously\nbeen initialized.</p>\n\n<p style=\"margin-left:22%;\"><b>R_IAFTER</b></p>\n\n<p style=\"margin-left:32%;\">Append the data immediately\nafter the data referenced by <i>key</i>, creating a new\nkey/data pair. The record number of the appended key/data\npair is returned in the <i>key</i> structure. (Applicable\nonly to the <b>DB_RECNO</b> access method.)</p>\n\n<p style=\"margin-left:22%;\"><b>R_IBEFORE</b></p>\n\n<p style=\"margin-left:32%;\">Insert the data immediately\nbefore the data referenced by <i>key</i>, creating a new\nkey/data pair. The record number of the inserted key/data\npair is returned in the <i>key</i> structure. (Applicable\nonly to the <b>DB_RECNO</b> access method.)</p>\n\n<p style=\"margin-left:22%;\"><b>R_NOOVERWRITE</b></p>\n\n<p style=\"margin-left:32%;\">Enter the new key/data pair\nonly if the key does not previously exist.</p>\n\n<p style=\"margin-left:22%;\"><b>R_SETCURSOR</b></p>\n\n<p style=\"margin-left:32%;\">Store the key/data pair,\nsetting or initializing the position of the cursor to\nreference it. (Applicable only to the <b>DB_BTREE</b> and\n<b>DB_RECNO</b> access methods.)</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>R_SETCURSOR</b>\nis available only for the <b>DB_BTREE</b> and\n<b>DB_RECNO</b> access methods because it implies that the\nkeys have an inherent order which does not change.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>R_IAFTER</b>\nand <b>R_IBEFORE</b> are available only for the\n<b>DB_RECNO</b> access method because they each imply that\nthe access method is able to create new keys. This is true\nonly if the keys are ordered and independent, record numbers\nfor example.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nbehavior of the <i>put</i> routines is to enter the new\nkey/data pair, replacing any previously existing key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>put</i>\nroutines return -1 on error (setting <i>errno</i>), 0 on\nsuccess, and 1 if the <b>R_NOOVERWRITE</b> <i>flag</i> was\nset and the key already exists in the file.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>seq</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>A pointer to a routine which is the interface for\nsequential retrieval from the database. The address and\nlength of the key are returned in the structure referenced\nby <i>key</i>, and the address and length of the data are\nreturned in the structure referenced by <i>data</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Sequential\nkey/data pair retrieval may begin at any time, and the\nposition of the &quot;cursor&quot; is not affected by calls\nto the <i>del</i>, <i>get</i>, <i>put</i>, or <i>sync</i>\nroutines. Modifications to the database during a sequential\nscan will be reflected in the scan, that is, records\ninserted behind the cursor will not be returned while\nrecords inserted in front of the cursor will be\nreturned.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The flag value\n<b>must</b> be set to one of the following values: <b><br>\nR_CURSOR</b></p>\n\n<p style=\"margin-left:32%;\">The data associated with the\nspecified key is returned. This differs from the <i>get</i>\nroutines in that it sets or initializes the cursor to the\nlocation of the key as well. (Note, for the <b>DB_BTREE</b>\naccess method, the returned key is not necessarily an exact\nmatch for the specified key. The returned key is the\nsmallest key greater than or equal to the specified key,\npermitting partial key matches and range searches.)</p>\n\n<p style=\"margin-left:22%;\"><b>R_FIRST</b></p>\n\n<p style=\"margin-left:32%;\">The first key/data pair of the\ndatabase is returned, and the cursor is set or initialized\nto reference it.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>R_LAST</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The last key/data pair of the database is returned, and\nthe cursor is set or initialized to reference it.\n(Applicable only to the <b>DB_BTREE</b> and <b>DB_RECNO</b>\naccess methods.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>R_NEXT</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Retrieve the key/data pair immediately after the cursor.\nIf the cursor is not yet set, this is the same as the\n<b>R_FIRST</b> flag.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>R_PREV</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>Retrieve the key/data pair immediately before the\ncursor. If the cursor is not yet set, this is the same as\nthe <b>R_LAST</b> flag. (Applicable only to the\n<b>DB_BTREE</b> and <b>DB_RECNO</b> access methods.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>R_LAST</b>\nand <b>R_PREV</b> are available only for the <b>DB_BTREE</b>\nand <b>DB_RECNO</b> access methods because they each imply\nthat the keys have an inherent order which does not\nchange.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>seq</i>\nroutines return -1 on error (setting <i>errno</i>), 0 on\nsuccess and 1 if there are no key/data pairs less than or\ngreater than the specified or current key. If the\n<b>DB_RECNO</b> access method is being used, and if the\ndatabase file is a character special file and no complete\nkey/data pairs are currently available, the <i>seq</i>\nroutines return 2.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>sync</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">A pointer to a routine to flush\nany cached information to disk. If the database is in memory\nonly, the <i>sync</i> routine has no effect and will always\nsucceed.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The flag value\nmay be set to the following value: <b><br>\nR_RECNOSYNC</b></p>\n\n<p style=\"margin-left:32%;\">If the <b>DB_RECNO</b> access\nmethod is being used, this flag causes the sync routine to\napply to the btree file which underlies the recno file, not\nthe recno file itself. (See the <i>bfname</i> field of the\n<a href=\"https://man.page/3/recno\">recno(3)</a> manual page for more information.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>sync</i>\nroutines return -1 on error (setting <i>errno</i>) and 0 on\nsuccess.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Key/data\npairs</b> <br>\nAccess to all file types is based on key/data pairs. Both\nkeys and data are represented by the following data\nstructure:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nvoid *data; <br>\nsize_t size; <br>\n} DBT;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The elements of\nthe <i>DBT</i> structure are defined as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>data</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"46%\">\n\n\n<p>A pointer to a byte string.</p></td>\n<td width=\"32%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>size</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"46%\">\n\n\n<p>The length of the byte string.</p></td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Key and data\nbyte strings may reference strings of essentially unlimited\nlength although any two of them must fit into available\nmemory at the same time. It should be noted that the access\nmethods provide no guarantees about byte string\nalignment.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>dbopen</b>() routine may fail and set <i>errno</i> for\nany of the errors specified for the library routines\n<a href=\"https://man.page/2/open\">open(2)</a> and <a href=\"https://man.page/3/malloc\">malloc(3)</a> or the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFTYPE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">A file is incorrectly\nformatted.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A parameter has been specified (hash function, pad byte,\netc.) that is incompatible with the current file\nspecification or which is not meaningful for the function\n(for example, use of the cursor without prior\ninitialization) or there is a mismatch between the version\nnumber of file and the software.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>close</i> routines may fail and set <i>errno</i> for any\nof the errors specified for the library routines\n<a href=\"https://man.page/2/close\">close(2)</a>, <a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>,\n<a href=\"https://man.page/3/free\">free(3)</a>, or <a href=\"https://man.page/2/fsync\">fsync(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>del</i>,\n<i>get</i>, <i>put</i>, and <i>seq</i> routines may fail and\nset <i>errno</i> for any of the errors specified for the\nlibrary routines <a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>,\n<a href=\"https://man.page/3/free\">free(3)</a> or <a href=\"https://man.page/3/malloc\">malloc(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>fd</i>\nroutines will fail and set <i>errno</i> to <b>ENOENT</b> for\nin memory databases.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>sync</i>\nroutines may fail and set <i>errno</i> for any of the errors\nspecified for the library routine <a href=\"https://man.page/2/fsync\">fsync(2)</a>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The typedef\n<i>DBT</i> is a mnemonic for &quot;data base thang&quot;,\nand was used because no one could think of a reasonable name\nthat wasn&rsquo;t already used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The file\ndescriptor interface is a kludge and will be deleted in a\nfuture version of the interface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">None of the\naccess methods provide any form of concurrent access,\nlocking, or transactions.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/btree\">btree(3)</a>,\n<a href=\"https://man.page/3/hash\">hash(3)</a>, <a href=\"https://man.page/3/mpool\">mpool(3)</a>, <a href=\"https://man.page/3/recno\">recno(3)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>LIBTP:\nPortable, Modular Transactions for UNIX</i>, Margo Seltzer,\nMichael Olson, USENIX proceedings, Winter 1992.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}