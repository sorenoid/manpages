{"name":"lwp::simple","description":"LWP::Simple - simple procedural interface to LWP","body":"\n\n<h1 align=\"center\">LWP::Simple</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">LWP::Simple -\nsimple procedural interface to LWP</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl\n-MLWP::Simple -e 'getprint &quot;http://www.sn.no&quot;'\n<br>\nuse LWP::Simple; <br>\n$content = get(&quot;http://www.sn.no/&quot;); <br>\ndie &quot;Couldn't get it!&quot; unless defined $content;\n<br>\nif (mirror(&quot;http://www.sn.no/&quot;, &quot;foo&quot;)\n== RC_NOT_MODIFIED) { <br>\n... <br>\n} <br>\nif (is_success(getprint(&quot;http://www.sn.no/&quot;))) {\n<br>\n... <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\nmeant for people who want a simplified view of the\nlibwww-perl library. It should also be suitable for\none-liners. If you need more control or access to the header\nfields in the requests sent and responses received, then you\nshould use the full object-oriented interface provided by\nthe LWP::UserAgent module.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The module will\nalso export the LWP::UserAgent object as $ua if you ask for\nit explicitly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The user agent\ncreated by this module will identify itself as\n&quot;LWP::Simple/#.##&quot; and will initialize its proxy\ndefaults from the environment (by calling\n&quot;$ua-&gt;env_proxy&quot;).</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are provided (and exported) by this module:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>get</b> <br>\nmy $res = get($url);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>get()</b> function will fetch the document identified by\nthe given <small>URL</small> and return it. It returns\n&quot;undef&quot; if it fails. The $url argument can be\neither a string or a reference to a <small>URI</small>\nobject.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You will not be\nable to examine the response code or response headers (like\n&quot;Content-Type&quot;) when you are accessing the web\nusing this function. If you need that information you should\nuse the full <small>OO</small> interface (see\nLWP::UserAgent).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>head</b>\n<br>\nmy $res = head($url);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Get document\nheaders. Returns the following 5 values if successful:\n($content_type, $document_length, $modified_time, $expires,\n$server)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returns an\nempty list if it fails. In scalar context returns\n<small>TRUE</small> if successful.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getprint</b>\n<br>\nmy $code = getprint($url);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Get and print a\ndocument identified by a <small>URL.</small> The document is\nprinted to the selected default filehandle for output\n(normally <small>STDOUT</small> ) as data is received from\nthe network. If the request fails, then the status code and\nmessage are printed on <small>STDERR.</small> The return\nvalue is the <small>HTTP</small> response code.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getstore</b>\n<br>\nmy $code = getstore($url, $file)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gets a document\nidentified by a <small>URL</small> and stores it in the\nfile. The return value is the <small>HTTP</small> response\ncode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mirror</b>\n<br>\nmy $code = mirror($url, $file);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Get and store a\ndocument identified by a <small>URL,</small> using\n<i>If-modified-since</i>, and checking the\n<i>Content-Length</i>. Returns the <small>HTTP</small>\nresponse code.</p>\n\n<h2>STATUS CONSTANTS\n<a name=\"STATUS CONSTANTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nalso exports the HTTP::Status constants and procedures. You\ncan use them when you check the response code from\n&quot;getprint&quot; in LWP::Simple, &quot;getstore&quot; in\nLWP::Simple or &quot;mirror&quot; in LWP::Simple. The\nconstants are:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RC_CONTINUE\n<br>\nRC_SWITCHING_PROTOCOLS <br>\nRC_OK <br>\nRC_CREATED <br>\nRC_ACCEPTED <br>\nRC_NON_AUTHORITATIVE_INFORMATION <br>\nRC_NO_CONTENT <br>\nRC_RESET_CONTENT <br>\nRC_PARTIAL_CONTENT <br>\nRC_MULTIPLE_CHOICES <br>\nRC_MOVED_PERMANENTLY <br>\nRC_MOVED_TEMPORARILY <br>\nRC_SEE_OTHER <br>\nRC_NOT_MODIFIED <br>\nRC_USE_PROXY <br>\nRC_BAD_REQUEST <br>\nRC_UNAUTHORIZED <br>\nRC_PAYMENT_REQUIRED <br>\nRC_FORBIDDEN <br>\nRC_NOT_FOUND <br>\nRC_METHOD_NOT_ALLOWED <br>\nRC_NOT_ACCEPTABLE <br>\nRC_PROXY_AUTHENTICATION_REQUIRED <br>\nRC_REQUEST_TIMEOUT <br>\nRC_CONFLICT <br>\nRC_GONE <br>\nRC_LENGTH_REQUIRED <br>\nRC_PRECONDITION_FAILED <br>\nRC_REQUEST_ENTITY_TOO_LARGE <br>\nRC_REQUEST_URI_TOO_LARGE <br>\nRC_UNSUPPORTED_MEDIA_TYPE <br>\nRC_INTERNAL_SERVER_ERROR <br>\nRC_NOT_IMPLEMENTED <br>\nRC_BAD_GATEWAY <br>\nRC_SERVICE_UNAVAILABLE <br>\nRC_GATEWAY_TIMEOUT <br>\nRC_HTTP_VERSION_NOT_SUPPORTED</p>\n\n<h2>CLASSIFICATION FUNCTIONS\n<a name=\"CLASSIFICATION FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nHTTP::Status classification functions are:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>is_success</b>\n<br>\nmy $bool = is_success($rc);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">True if\nresponse code indicated a successful request.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>is_error</b>\n<br>\nmy $bool = is_error($rc)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">True if\nresponse code indicated that an error occurred.</p>\n\n<h2>CAVEAT\n<a name=\"CAVEAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that if\nyou are using both LWP::Simple and the very popular\n<small>CGI</small> module, you may be importing a\n&quot;head&quot; function from each module, producing a\nwarning like &quot;Prototype mismatch: sub main::head ($) vs\nnone&quot;. Get around this problem by just not importing\nLWP::Simple&rsquo;s &quot;head&quot; function, like so:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use LWP::Simple\nqw(!head); <br>\nuse CGI qw(:standard); # then only CGI.pm defines a\nhead()</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then if you do\nneed LWP::Simple&rsquo;s &quot;head&quot; function, you can\njust call it as &quot;LWP::Simple::head($url)&quot;.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>LWP</small>\n, lwpcook, LWP::UserAgent, HTTP::Status, lwp-request,\nlwp-mirror</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#STATUS CONSTANTS\">STATUS CONSTANTS</a>","<a href=\"#CLASSIFICATION FUNCTIONS\">CLASSIFICATION FUNCTIONS</a>","<a href=\"#CAVEAT\">CAVEAT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}