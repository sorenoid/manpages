{"name":"getopt","description":"getopt, getopt_long, getopt_long_only, optarg, optind, opterr, optopt - Parse command-line options","body":"\n\n<h1 align=\"center\">GETOPT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getopt,\ngetopt_long, getopt_long_only, optarg, optind, opterr,\noptopt - Parse command-line options</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetopt(int</b> <i>argc</i><b>, char * const</b>\n<i>argv[]</i><b>, <br>\nconst char *</b><i>optstring</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>extern char\n*</b><i>optarg</i><b>; <br>\nextern int</b> <i>optind</i><b>,</b> <i>opterr</i><b>,</b>\n<i>optopt</i><b>;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;getopt.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetopt_long(int</b> <i>argc</i><b>, char * const</b>\n<i>argv[]</i><b>, <br>\nconst char *</b><i>optstring</i><b>, <br>\nconst struct option *</b><i>longopts</i><b>, int\n*</b><i>longindex</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetopt_long_only(int</b> <i>argc</i><b>, char * const</b>\n<i>argv[]</i><b>, <br>\nconst char *</b><i>optstring</i><b>, <br>\nconst struct option *</b><i>longopts</i><b>, int\n*</b><i>longindex</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getopt</b>():\n_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;2 || _XOPEN_SOURCE <b><br>\ngetopt_long</b>(), <b>getopt_long_only</b>():\n_GNU_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getopt</b>() function parses the command-line arguments.\nIts arguments <i>argc</i> and <i>argv</i> are the argument\ncount and array as passed to the <i>main</i>() function on\nprogram invocation. An element of <i>argv</i> that starts\nwith '-' (and is not exactly &quot;-&quot; or\n&quot;--&quot;) is an option element. The characters of this\nelement (aside from the initial '-') are option characters.\nIf <b>getopt</b>() is called repeatedly, it returns\nsuccessively each of the option characters from each of the\noption elements.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The variable\n<i>optind</i> is the index of the next element to be\nprocessed in <i>argv</i>. The system initializes this value\nto 1. The caller can reset it to 1 to restart scanning of\nthe same <i>argv</i>, or when scanning a new argument\nvector.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>getopt</b>() finds another option character, it returns\nthat character, updating the external variable <i>optind</i>\nand a static variable <i>nextchar</i> so that the next call\nto <b>getopt</b>() can resume the scan with the following\noption character or <i>argv</i>-element.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there are no\nmore option characters, <b>getopt</b>() returns -1. Then\n<i>optind</i> is the index in <i>argv</i> of the first\n<i>argv</i>-element that is not an option.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>optstring</i>\nis a string containing the legitimate option characters. If\nsuch a character is followed by a colon, the option requires\nan argument, so <b>getopt</b>() places a pointer to the\nfollowing text in the same <i>argv</i>-element, or the text\nof the following <i>argv</i>-element, in <i>optarg</i>. Two\ncolons mean an option takes an optional arg; if there is\ntext in the current <i>argv</i>-element (i.e., in the same\nword as the option name itself, for example,\n&quot;-oarg&quot;), then it is returned in <i>optarg</i>,\notherwise <i>optarg</i> is set to zero. This is a GNU\nextension. If <i>optstring</i> contains <b>W</b> followed by\na semicolon, then <b>-W foo</b> is treated as the long\noption <b>--foo</b>. (The <b>-W</b> option is reserved by\nPOSIX.2 for implementation extensions.) This behavior is a\nGNU extension, not available with libraries before glibc\n2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\n<b>getopt</b>() permutes the contents of <i>argv</i> as it\nscans, so that eventually all the nonoptions are at the end.\nTwo other scanning modes are also implemented. If the first\ncharacter of <i>optstring</i> is '+' or the environment\nvariable <b>POSIXLY_CORRECT</b> is set, then option\nprocessing stops as soon as a nonoption argument is\nencountered. If the first character of <i>optstring</i> is\n'-', then each nonoption <i>argv</i>-element is handled as\nif it were the argument of an option with character code 1.\n(This is used by programs that were written to expect\noptions and other <i>argv</i>-elements in any order and that\ncare about the ordering of the two.) The special argument\n&quot;--&quot; forces an end of option-scanning regardless\nof the scanning mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While\nprocessing the option list, <b>getopt</b>() can detect two\nkinds of errors: (1) an option character that was not\nspecified in <i>optstring</i> and (2) a missing option\nargument (i.e., an option at the end of the command line\nwithout an expected argument). Such errors are handled and\nreported as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>By default, <b>getopt</b>() prints an error message on\nstandard error, places the erroneous option character in\n<i>optopt</i>, and returns '?' as the function result.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If the caller has set the global variable <i>opterr</i>\nto zero, then <b>getopt</b>() does not print an error\nmessage. The caller can determine that there was an error by\ntesting whether the function return value is '?'. (By\ndefault, <i>opterr</i> has a nonzero value.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If the first character (following any optional '+' or\n'-' described above) of <i>optstring</i> is a colon (':'),\nthen <b>getopt</b>() likewise does not print an error\nmessage. In addition, it returns ':' instead of '?' to\nindicate a missing option argument. This allows the caller\nto distinguish the two different types of errors.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getopt_long()\nand getopt_long_only()</b> <br>\nThe <b>getopt_long</b>() function works like <b>getopt</b>()\nexcept that it also accepts long options, started with two\ndashes. (If the program accepts only long options, then\n<i>optstring</i> should be specified as an empty string\n(&quot;&quot;), not NULL.) Long option names may be\nabbreviated if the abbreviation is unique or is an exact\nmatch for some defined option. A long option may take a\nparameter, of the form <b>--arg=param</b> or <b>--arg\nparam</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>longopts</i>\nis a pointer to the first element of an array of <i>struct\noption</i> declared in <i>&lt;getopt.h&gt;</i> as</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct option {\n<br>\nconst char *name; <br>\nint has_arg; <br>\nint *flag; <br>\nint val; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The meanings of\nthe different fields are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>name</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"47%\">\n\n\n<p style=\"margin-top: 1em\">is the name of the long\noption.</p> </td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>has_arg</i></p>\n\n<p style=\"margin-left:22%;\">is: <b>no_argument</b> (or 0)\nif the option does not take an argument;\n<b>required_argument</b> (or 1) if the option requires an\nargument; or <b>optional_argument</b> (or 2) if the option\ntakes an optional argument.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>flag</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>specifies how results are returned for a long option. If\n<i>flag</i> is NULL, then <b>getopt_long</b>() returns\n<i>val</i>. (For example, the calling program may set\n<i>val</i> to the equivalent short option character.)\nOtherwise, <b>getopt_long</b>() returns 0, and <i>flag</i>\npoints to a variable which is set to <i>val</i> if the\noption is found, but left unchanged if the option is not\nfound.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>val</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>is the value to return, or to load into the variable\npointed to by <i>flag</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The last\nelement of the array has to be filled with zeros.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>longindex</i> is not NULL, it points to a variable which\nis set to the index of the long option relative to\n<i>longopts</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getopt_long_only</b>()\nis like <b>getopt_long</b>(), but '-' as well as\n&quot;--&quot; can indicate a long option. If an option that\nstarts with '-' (not &quot;--&quot;) doesn&rsquo;t match a\nlong option, but does match a short option, it is parsed as\na short option instead.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If an option\nwas successfully found, then <b>getopt</b>() returns the\noption character. If all command-line options have been\nparsed, then <b>getopt</b>() returns -1. If <b>getopt</b>()\nencounters an option character that was not in\n<i>optstring</i>, then '?' is returned. If <b>getopt</b>()\nencounters an option with a missing argument, then the\nreturn value depends on the first character in\n<i>optstring</i>: if it is ':', then ':' is returned;\notherwise '?' is returned.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getopt_long</b>()\nand <b>getopt_long_only</b>() also return the option\ncharacter when a short option is recognized. For a long\noption, they return <i>val</i> if <i>flag</i> is NULL, and 0\notherwise. Error and -1 returns are the same as for\n<b>getopt</b>(), plus '?' for an ambiguous match or an\nextraneous parameter.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>POSIXLY_CORRECT</b></p>\n\n<p style=\"margin-left:22%;\">If this is set, then option\nprocessing stops as soon as a nonoption argument is\nencountered.</p>\n\n\n<p style=\"margin-left:11%;\"><b>_&lt;PID&gt;_GNU_nonoption_argv_flags_</b></p>\n\n<p style=\"margin-left:22%;\">This variable was used by\n<a href=\"https://man.page/1/bash\">bash(1)</a> 2.0 to communicate to glibc which arguments\nare the results of wildcard expansion and so should not be\nconsidered as options. This behavior was removed in\n<a href=\"https://man.page/1/bash\">bash(1)</a> version 2.01, but the support remains in\nglibc.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3360371.png\" alt=\"Image grohtml-3360371.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getopt</b>():</p>\n\n<p style=\"margin-left:22%;\">POSIX.1-2001, POSIX.1-2008, and\nPOSIX.2, provided the environment variable\n<b>POSIXLY_CORRECT</b> is set. Otherwise, the elements of\n<i>argv</i> aren&rsquo;t really <i>const</i>, because these\nfunctions permute them. Nevertheless, <i>const</i> is used\nin the prototype to be compatible with other systems.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The use of '+'\nand '-' in <i>optstring</i> is a GNU extension.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">On some older\nimplementations, <b>getopt</b>() was declared in\n<i>&lt;stdio.h&gt;</i>. SUSv1 permitted the declaration to\nappear in either <i>&lt;unistd.h&gt;</i> or\n<i>&lt;stdio.h&gt;</i>. POSIX.1-1996 marked the use of\n<i>&lt;stdio.h&gt;</i> for this purpose as LEGACY.\nPOSIX.1-2001 does not require the declaration to appear in\n<i>&lt;stdio.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>getopt_long</b>() and\n<b>getopt_long_only</b>():</p>\n\n<p style=\"margin-left:22%;\">These functions are GNU\nextensions.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A program that\nscans multiple argument vectors, or rescans the same vector\nmore than once, and wants to make use of GNU extensions such\nas '+' and '-' at the start of <i>optstring</i>, or changes\nthe value of <b>POSIXLY_CORRECT</b> between scans, must\nreinitialize <b>getopt</b>() by resetting <i>optind</i> to\n0, rather than the traditional value of 1. (Resetting to 0\nforces the invocation of an internal initialization routine\nthat rechecks <b>POSIXLY_CORRECT</b> and checks for GNU\nextensions in <i>optstring</i>.)</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getopt()</b>\n<br>\nThe following trivial example program uses <b>getopt</b>()\nto handle two program options: <i>-n</i>, with no associated\nvalue; and <i>-t val</i>, which expects an associated\nvalue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;unistd.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint flags, opt; <br>\nint nsecs, tfnd;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">nsecs = 0; <br>\ntfnd = 0; <br>\nflags = 0; <br>\nwhile ((opt = getopt(argc, argv, &quot;nt:&quot;)) != -1) {\n<br>\nswitch (opt) { <br>\ncase 'n': <br>\nflags = 1; <br>\nbreak; <br>\ncase 't': <br>\nnsecs = atoi(optarg); <br>\ntfnd = 1; <br>\nbreak; <br>\ndefault: /* '?' */ <br>\nfprintf(stderr, &quot;Usage: %s [-t nsecs] [-n]\nname\\n&quot;, <br>\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n} <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;flags=%d;\ntfnd=%d; nsecs=%d; optind=%d\\n&quot;, <br>\nflags, tfnd, nsecs, optind);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (optind\n&gt;= argc) { <br>\nfprintf(stderr, &quot;Expected argument after\noptions\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;name\nargument = %s\\n&quot;, argv[optind]);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Other code\nomitted */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getopt_long()</b>\n<br>\nThe following example program illustrates the use of\n<b>getopt_long</b>() with most of its features.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stdio.h&gt; /* for printf */ <br>\n#include &lt;stdlib.h&gt; /* for exit */ <br>\n#include &lt;getopt.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char **argv) <br>\n{ <br>\nint c; <br>\nint digit_optind = 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">while (1) {\n<br>\nint this_option_optind = optind ? optind : 1; <br>\nint option_index = 0; <br>\nstatic struct option long_options[] = { <br>\n{&quot;add&quot;, required_argument, 0, 0 }, <br>\n{&quot;append&quot;, no_argument, 0, 0 }, <br>\n{&quot;delete&quot;, required_argument, 0, 0 }, <br>\n{&quot;verbose&quot;, no_argument, 0, 0 }, <br>\n{&quot;create&quot;, required_argument, 0, 'c'}, <br>\n{&quot;file&quot;, required_argument, 0, 0 }, <br>\n{0, 0, 0, 0 } <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">c =\ngetopt_long(argc, argv, &quot;abc:d:012&quot;, <br>\nlong_options, &amp;option_index); <br>\nif (c == -1) <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">switch (c) {\n<br>\ncase 0: <br>\nprintf(&quot;option %s&quot;,\nlong_options[option_index].name); <br>\nif (optarg) <br>\nprintf(&quot; with arg %s&quot;, optarg); <br>\nprintf(&quot;\\n&quot;); <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">case '0': <br>\ncase '1': <br>\ncase '2': <br>\nif (digit_optind != 0 &amp;&amp; digit_optind !=\nthis_option_optind) <br>\nprintf(&quot;digits occur in two different\nargv-elements.\\n&quot;); <br>\ndigit_optind = this_option_optind; <br>\nprintf(&quot;option %c\\n&quot;, c); <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">case 'a': <br>\nprintf(&quot;option a\\n&quot;); <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">case 'b': <br>\nprintf(&quot;option b\\n&quot;); <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">case 'c': <br>\nprintf(&quot;option c with value '%s'\\n&quot;, optarg); <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">case 'd': <br>\nprintf(&quot;option d with value '%s'\\n&quot;, optarg); <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">case '?': <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">default: <br>\nprintf(&quot;?? getopt returned character code 0%o\n??\\n&quot;, c); <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (optind &lt;\nargc) { <br>\nprintf(&quot;non-option ARGV-elements: &quot;); <br>\nwhile (optind &lt; argc) <br>\nprintf(&quot;%s &quot;, argv[optind++]); <br>\nprintf(&quot;\\n&quot;); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/getopt\">getopt(1)</a>,\n<a href=\"https://man.page/3/getsubopt\">getsubopt(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}