{"name":"file::basedir","body":"\n\n<h1 align=\"center\">File::BaseDir</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::BaseDir -\nUse the Freedesktop.org base directory specification</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n0.09</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nFile::BaseDir qw/xdg_data_files/; <br>\nfor ( xdg_data_files('mime/globs') ) { <br>\n# do something <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module can\nbe used to find directories and files as specified by the\nFreedesktop.org Base Directory Specification. This\nspecifications gives a mechanism to locate directories for\nconfiguration, application data and cache data. It is\nsuggested that desktop applications for e.g. the\n<small>GNOME, KDE</small> or Xfce platforms follow this\nlayout. However, the same layout can just as well be used\nfor non-GUI applications.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nforked from File::MimeInfo.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nfollows version 0.6 of BaseDir specification.</p>\n\n<h2>CONSTRUCTOR\n<a name=\"CONSTRUCTOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>new</b> <br>\nmy $bd = File::BaseDir-&gt;new;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Simple\nconstructor to allow calling functions as object oriented\nmethods.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">None of these\nare exported by default, but all functions can be exported\nby request. Also the groups &quot;:lookup&quot; and\n&quot;:vars&quot; are defined. The &quot;:vars&quot; group\ncontains all the routines with a &quot;xdg_&quot; prefix.\nThe &quot;:lookup&quot; group contains the routines to\nlocate files and directories.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>data_home</b>\n<br>\nmy $path = data_home(@path); <br>\nmy $path = $bd-&gt;data_home(@path);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Takes a list of\nfile path elements and returns a new path by appending them\nto the data home directory. The new path does not need to\nexist. Use this when writing user specific application\ndata.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># data_home is:\n/home/USER/.local/share <br>\n$path = $bd-&gt;data_home('Foo', 'Bar', 'Baz'); <br>\n# returns: /home/USER/.local/share/Foo/Bar/Baz</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>data_dirs</b>\n<br>\n# :lookup <br>\nmy $dir = data_dirs(@path); <br>\nmy $dir = $bd-&gt;data_dirs(@path); <br>\nmy @dirs = data_dirs(@path); <br>\nmy @dirs = $bd-&gt;data_dirs(@path);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Looks for\ndirectories specified by @path in the data home and other\ndata directories. Returns (possibly empty) list of readable\ndirectories. In scalar context only the first directory\nfound is returned. Use this to lookup application data.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>data_files</b>\n<br>\n# :lookup <br>\nmy $file = data_files(@path); <br>\nmy $file = $bd-&gt;data_files(@path); <br>\nmy @files = data_files(@path); <br>\nmy @files = $bd-&gt;data_files(@path);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Looks for files\nspecified by @path in the data home and other data\ndirectories. Only returns files that are readable. In scalar\ncontext only the first file found is returned. Use this to\nlookup application data.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>config_home</b>\n<br>\n# :lookup <br>\nmy $dir = config_home(@path); <br>\nmy $dir = $bd-&gt;config_home(@path);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Takes a list of\npath elements and appends them to the config home directory\nreturning a new path. The new path does not need to exist.\nUse this when writing user specific configuration.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>config_dirs</b>\n<br>\n# :lookup <br>\nmy $dir = config_dirs(@path); <br>\nmy $dir = $bd-&gt;config_dirs(@path); <br>\nmy @dirs = config_dirs(@path); <br>\nmy @dirs = $bd-&gt;config_dirs(@path);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Looks for\ndirectories specified by @path in the config home and other\nconfig directories. Returns (possibly empty) list of\nreadable directories. In scalar context only the first\ndirectory found is returned. Use this to lookup\nconfiguration.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>config_files</b>\n<br>\n# :lookup <br>\nmy $file = config_files(@path); <br>\nmy $file = $bd-&gt;config_files(@path); <br>\nmy @files = config_files(@path); <br>\nmy @files = $bd-&gt;config_files(@path);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Looks for files\nspecified by @path in the config home and other config\ndirectories. Returns a (possibly empty) list of files that\nare readable. In scalar context only the first file found is\nreturned. Use this to lookup configuration.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cache_home</b>\n<br>\n# :lookup <br>\nmy $dir = cache_home(@path); <br>\nmy $dir = $bd-&gt;cache_home(@path);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Takes a list of\npath elements and appends them to the cache home directory\nreturning a new path. The new path does not need to\nexist.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>xdg_data_home</b>\n<br>\n# :var <br>\nmy $dir = xdg_data_home; <br>\nmy $dir = $bd-&gt;xdg_data_home;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returns either\n$ENV{XDG_DATA_HOME} or it&rsquo;s default value. Default is\n<i>$HOME/.local/share</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>xdg_data_dirs</b>\n<br>\n# :var <br>\nmy @dirs = xdg_data_dirs; <br>\nmy @dirs = $bd-&gt;xdg_data_dirs;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returns either\n$ENV{XDG_DATA_DIRS} or it&rsquo;s default value as list.\nDefault is <i>/usr/local/share</i>, <i>/usr/share</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>xdg_config_home</b>\n<br>\n# :var <br>\nmy $dir = xdg_config_home; <br>\nmy $dir = $bd-&gt;xdg_config_home;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returns either\n$ENV{XDG_CONFIG_HOME} or it&rsquo;s default value. Default\nis <i>$HOME/.config</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>xdg_config_dirs</b>\n<br>\n# :var <br>\nmy @dirs = xdg_config_dirs; <br>\nmy @dirs = $bd-&gt;xdg_config_dirs;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returns either\n$ENV{XDG_CONFIG_DIRS} or it&rsquo;s default value as list.\nDefault is <i>/etc/xdg</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>xdg_cache_home</b>\n<br>\n# :var <br>\nmy $dir = xdg_cache_home; <br>\nmy $dir = $bd-&gt;xdg_cache_home;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returns either\n$ENV{XDG_CACHE_HOME} or it&rsquo;s default value. Default is\n<i>$HOME/.cache</i>.</p>\n\n<h2>NON-UNIX PLATFORMS\n<a name=\"NON-UNIX PLATFORMS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The use of\nFile::Spec ensures that all paths are returned in their\nnative formats regardless of platform. On Windows this\nmodule will use the native environment variables, rather\nthan the default on <small>UNIX</small> (which is\ntraditionally $HOME).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat the specification is targeting Unix platforms only and\nwill only have limited relevance on other platforms. Any\nplatform dependent behavior in this module should be\nconsidered an extension of the spec.</p>\n\n<h2>BACKWARDS COMPATIBILITY\n<a name=\"BACKWARDS COMPATIBILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The methods\n&quot;xdg_data_files()&quot; and\n&quot;xdg_config_files()&quot; are exported for backwards\ncompatibility with version 0.02. They are identical to\n&quot;data_files()&quot; and &quot;config_files()&quot;\nrespectively but without the &quot;wantarray&quot;\nbehavior.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p style=\"margin-top: 1em\">Jaap Karssenberg || Pardus\n[Larus] &lt;pardus@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Graham Ollis &lt;plicease@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 2003-2021 by Jaap Karssenberg || Pardus\n[Larus] &lt;pardus@cpan.org&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONSTRUCTOR\">CONSTRUCTOR</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#NON-UNIX PLATFORMS\">NON-UNIX PLATFORMS</a>","<a href=\"#BACKWARDS COMPATIBILITY\">BACKWARDS COMPATIBILITY</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}