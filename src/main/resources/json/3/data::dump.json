{"name":"data::dump","description":"Data::Dump -\nPretty printing of data structures","body":"\n\n<h1 align=\"center\">Data::Dump</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Data::Dump -\nPretty printing of data structures</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Data::Dump\nqw(dump); <br>\n$str = dump(@list); <br>\n@copy_of_list = eval $str; <br>\n# or use it for easy debug printout <br>\nuse Data::Dump; dd localtime;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides a few functions that traverse their argument list\nand return a string containing Perl code that, when\n&quot;eval&quot;ed, produces a deep copy of the original\narguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The main\nfeature of the module is that it strives to produce output\nthat is easy to read. Example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">@a = (1, [2,\n3], {4 =&gt; 5}); <br>\ndump(@a);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Produces:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;(1, [2,\n3], { 4 =&gt; 5 })&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you dump\njust a little data, it is output on a single line. If you\ndump data that is more complex or there is a lot of it, line\nbreaks are automatically added to keep it easy to read.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are provided (only the dd* functions are exported\nby default): <br>\ndump( ... ) <br>\npp( ... )</p>\n\n<p style=\"margin-left:17%;\">Returns a string containing a\nPerl expression. If you pass this string to Perl&rsquo;s\nbuilt-in <b>eval()</b> function it should return a copy of\nthe arguments you passed to <b>dump()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you call the\nfunction with multiple arguments then the output will be\nwrapped in parenthesis &quot;( ..., ... )&quot;. If you call\nthe function with a single argument the output will not have\nthe wrapping. If you call the function with a single scalar\n(non-reference) argument it will just return the scalar\nquoted if needed, but never break it into multiple lines. If\nyou pass multiple arguments or references to arrays of\nhashes then the return value might contain line breaks to\nformat it for easier reading. The returned string will never\nbe &quot;\\n&quot; terminated, even if contains multiple\nlines. This allows code like this to place the semicolon in\nthe expected place:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">print '$obj =\n', dump($obj), &quot;;\\n&quot;;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>dump()</b> is called in void context, then the dump is\nprinted on <small>STDERR</small> and then &quot;\\n&quot;\nterminated. You might find this useful for quick debug\nprintouts, but the dd*() functions might be better\nalternatives for this.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">There is no\ndifference between <b>dump()</b> and <b>pp()</b>, except\nthat <b>dump()</b> shares its name with a not-so-useful perl\nbuiltin. Because of this some might want to avoid using that\nname.</p>\n\n<p style=\"margin-left:11%;\">quote( $string )</p>\n\n<p style=\"margin-left:17%;\">Returns a quoted version of the\nprovided string.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It differs from\n&quot;dump($string)&quot; in that it will quote even numbers\nand not try to come up with clever expressions that might\nshorten the output. If a non-scalar argument is provided\nthen it&rsquo;s just stringified instead of traversed.</p>\n\n<p style=\"margin-left:11%;\">dd( ... ) <br>\nddx( ... )</p>\n\n<p style=\"margin-left:17%;\">These functions will call\n<b>dump()</b> on their argument and print the result to\n<small>STDOUT</small> (actually, it&rsquo;s the currently\nselected output handle, but <small>STDOUT</small> is the\ndefault for that).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The difference\nbetween them is only that <b>ddx()</b> will prefix the lines\nit prints with &quot;# &quot; and mark the first line with\nthe file and line number where it was called. This is meant\nto be useful for debug printouts of state within\nprograms.</p>\n\n<p style=\"margin-left:11%;\">dumpf( ..., \\&amp;filter )</p>\n\n<p style=\"margin-left:17%;\">Short hand for calling the\n<b>dump_filtered()</b> function of Data::Dump::Filtered.\nThis works like <b>dump()</b>, but the last argument should\nbe a filter callback function. As objects are visited the\nfilter callback is invoked and it can modify how the objects\nare dumped.</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are a few\nglobal variables that can be set to modify the output\ngenerated by the dump functions. It&rsquo;s wise to localize\nthe setting of these. <br>\n$Data::Dump::INDENT</p>\n\n<p style=\"margin-left:17%;\">This holds the string\nthat&rsquo;s used for indenting multiline data structures.\nIt&rsquo;s default value is &quot; &quot; (two spaces). Set\nit to &quot;&quot; to suppress indentation. Setting it to\n&quot;| &quot; makes for nice visuals even if the dump\noutput then fails to be valid Perl.</p>\n\n<p style=\"margin-left:11%;\">$Data::Dump::TRY_BASE64</p>\n\n<p style=\"margin-left:17%;\">How long must a binary string\nbe before we try to use the base64 encoding for the dump\noutput. The default is 50. Set it to 0 to disable base64\ndumps.</p>\n\n<p style=\"margin-left:11%;\">$Data::Dump::LINEWIDTH</p>\n\n<p style=\"margin-left:17%;\">This controls how wide the\nstring should before we add a line break. The default is\n60.</p>\n\n<h2>LIMITATIONS\n<a name=\"LIMITATIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Code references\nwill be dumped as &quot;sub { ... }&quot;. Thus,\n&quot;eval&quot;ing them will not reproduce the original\nroutine. The &quot;...&quot;-operator used will also require\nperl-5.12 or better to be evaled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you forget\nto explicitly import the &quot;dump&quot; function, your\ncode will core dump. That&rsquo;s because you just called\nthe builtin &quot;dump&quot; function by accident, which\nintentionally dumps core. Because of this you can also\nimport the same function as &quot;pp&quot;, mnemonic for\n&quot;pretty-print&quot;.</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;Data::Dump&quot; module grew out of frustration with\nSarathy&rsquo;s in-most-cases-excellent\n&quot;Data::Dumper&quot;. Basic ideas and some code are\nshared with Sarathy&rsquo;s module.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;Data::Dump&quot; module provides a much simpler\ninterface than &quot;Data::Dumper&quot;. No\n<small>OO</small> interface is available and there are fewer\nconfiguration options to worry about. The other benefit is\nthat the dump produced does not try to set any variables. It\nonly returns what is needed to produce a copy of the\narguments. This means that &quot;dump(&quot;foo&quot;)&quot;\nsimply returns '&quot;foo&quot;', and &quot;dump(1..3)&quot;\nsimply returns '(1, 2, 3)'.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Data::Dump::Filtered,\nData::Dump::Trace, Data::Dumper, <small>JSON</small> ,\nStorable</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;Data::Dump&quot; module is written by Gisle Aas\n&lt;gisle@aas.no&gt;, based on &quot;Data::Dumper&quot; by\nGurusamy Sarathy &lt;gsar@umich.edu&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1998-2010 Gisle Aas. <br>\nCopyright 1996-1998 Gurusamy Sarathy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ndistribution is currenly maintained by Breno G. de\nOliveira.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#LIMITATIONS\">LIMITATIONS</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>"],"level":3}