{"name":"dpkg::arch","description":"Dpkg::Arch - handle architectures","body":"\n\n<h1 align=\"center\">Dpkg::Arch</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Arch -\nhandle architectures</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Dpkg::Arch\nmodule provides functions to handle Debian architectures,\nwildcards, and mapping from and to <small>GNU</small>\ntriplets.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">No symbols are\nexported by default. The :all tag can be used to import all\nsymbols. The :getters, :parsers, :mappers and :operators\ntags can be used to import specific symbol subsets.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$arch =\n<b>get_raw_build_arch()</b></p>\n\n<p style=\"margin-left:17%;\">Get the raw build Debian\narchitecture, without taking into account variables from the\nenvironment.</p>\n\n<p style=\"margin-left:11%;\">$arch =\n<b>get_build_arch()</b></p>\n\n<p style=\"margin-left:17%;\">Get the build Debian\narchitecture, using <small>DEB_BUILD_ARCH</small> from the\nenvironment if available.</p>\n\n<p style=\"margin-left:11%;\">$arch =\n<b>get_raw_host_arch()</b></p>\n\n<p style=\"margin-left:17%;\">Get the raw host Debian\narchitecture, without taking into account variables from the\nenvironment.</p>\n\n<p style=\"margin-left:11%;\">$arch =\n<b>get_host_arch()</b></p>\n\n<p style=\"margin-left:17%;\">Get the host Debian\narchitecture, using <small>DEB_HOST_ARCH</small> from the\nenvironment if available.</p>\n\n<p style=\"margin-left:11%;\">@arch_list =\n<b>get_valid_arches()</b></p>\n\n<p style=\"margin-left:17%;\">Get an array with all currently\nknown Debian architectures.</p>\n\n<p style=\"margin-left:11%;\">$multiarch =\ngnutriplet_to_multiarch($gnutriplet)</p>\n\n<p style=\"margin-left:17%;\">Map a <small>GNU</small>\ntriplet into a Debian multiarch triplet.</p>\n\n<p style=\"margin-left:11%;\">$multiarch =\ndebarch_to_multiarch($arch)</p>\n\n<p style=\"margin-left:17%;\">Map a Debian architecture into\na Debian multiarch triplet.</p>\n\n<p style=\"margin-left:11%;\">$gnutriplet =\ndebarch_to_gnutriplet($arch)</p>\n\n<p style=\"margin-left:17%;\">Map a Debian architecture into\na <small>GNU</small> triplet.</p>\n\n<p style=\"margin-left:11%;\">$arch =\ngnutriplet_to_debarch($gnutriplet)</p>\n\n<p style=\"margin-left:17%;\">Map a <small>GNU</small>\ntriplet into a Debian architecture.</p>\n\n<p style=\"margin-left:11%;\">$bool = debarch_eq($arch_a,\n$arch_b)</p>\n\n<p style=\"margin-left:17%;\">Evaluate the equality of a\nDebian architecture, by comparing with another Debian\narchitecture. No wildcard matching is performed.</p>\n\n<p style=\"margin-left:11%;\">$bool = debarch_is($arch,\n$arch_wildcard)</p>\n\n<p style=\"margin-left:17%;\">Evaluate the identity of a\nDebian architecture, by matching with an architecture\nwildcard.</p>\n\n<p style=\"margin-left:11%;\">$bool =\ndebarch_is_wildcard($arch)</p>\n\n<p style=\"margin-left:17%;\">Evaluate whether a Debian\narchitecture is an architecture wildcard.</p>\n\n<p style=\"margin-left:11%;\">$bool =\ndebarch_is_illegal($arch, %options)</p>\n\n<p style=\"margin-left:17%;\">Validate an architecture\nname.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\n&quot;positive&quot; option is set to a true value, only\npositive architectures will be accepted, otherwise negated\narchitectures are allowed.</p>\n\n<p style=\"margin-left:11%;\">$bool =\ndebarch_is_concerned($arch, @arches)</p>\n\n<p style=\"margin-left:17%;\">Evaluate whether a Debian\narchitecture applies to the list of architecture\nrestrictions, as usually found in dependencies inside square\nbrackets.</p>\n\n<p style=\"margin-left:11%;\">@array =\ndebarch_list_parse($arch_list, %options)</p>\n\n<p style=\"margin-left:17%;\">Parse an architecture list.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\n&quot;positive&quot; option is set to a true value, only\npositive architectures will be accepted, otherwise negated\narchitectures are allowed.</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.03\n(dpkg 1.19.1)</b> <br>\nNew argument: Accept a &quot;positive&quot; option in\n<b>debarch_is_illegal()</b> and\n<b>debarch_list_parse()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.02\n(dpkg 1.18.19)</b> <br>\nNew import tags: &quot;:all&quot;, &quot;:getters&quot;,\n&quot;:parsers&quot;, &quot;:mappers&quot;,\n&quot;:operators&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.01\n(dpkg 1.18.5)</b> <br>\nNew functions: <b>debarch_is_illegal()</b>,\n<b>debarch_list_parse()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.18.2)</b> <br>\nMark the module as public.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/dpkg-architecture\">dpkg-architecture(1)</a>.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#CHANGES\">CHANGES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}