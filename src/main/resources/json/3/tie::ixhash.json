{"name":"tie::ixhash","description":"Tie::IxHash -\nordered associative arrays for Perl","body":"\n\n<h1 align=\"center\">Tie::IxHash</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Tie::IxHash -\nordered associative arrays for Perl</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"># simple usage\n<br>\nuse Tie::IxHash; <br>\ntie HASHVARIABLE, 'Tie::IxHash' [, LIST]; <br>\n# OO interface with more powerful features <br>\nuse Tie::IxHash; <br>\nTIEOBJECT = Tie::IxHash-&gt;new( [LIST] ); <br>\nTIEOBJECT-&gt;Splice( OFFSET [, LENGTH [, LIST]] ); <br>\nTIEOBJECT-&gt;Push( LIST ); <br>\nTIEOBJECT-&gt;Pop; <br>\nTIEOBJECT-&gt;Shift; <br>\nTIEOBJECT-&gt;Unshift( LIST ); <br>\nTIEOBJECT-&gt;Keys( [LIST] ); <br>\nTIEOBJECT-&gt;Values( [LIST] ); <br>\nTIEOBJECT-&gt;Indices( LIST ); <br>\nTIEOBJECT-&gt;Delete( [LIST] ); <br>\nTIEOBJECT-&gt;Replace( OFFSET, VALUE, [KEY] ); <br>\nTIEOBJECT-&gt;Reorder( LIST ); <br>\nTIEOBJECT-&gt;SortByKey; <br>\nTIEOBJECT-&gt;SortByValue; <br>\nTIEOBJECT-&gt;Length;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This Perl\nmodule implements Perl hashes that preserve the order in\nwhich the hash elements were added. The order is not\naffected when values corresponding to existing keys in the\nIxHash are changed. The elements can also be set to any\narbitrary supplied order. The familiar perl array operations\ncan also be performed on the IxHash.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Standard\n&quot;TIEHASH&quot; Interface</b> <br>\nThe standard &quot;TIEHASH&quot; mechanism is available.\nThis interface is recommended for simple uses, since the\nusage is exactly the same as regular Perl hashes after the\n&quot;tie&quot; is declared.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Object\nInterface</b> <br>\nThis module also provides an extended object-oriented\ninterface that can be used for more powerful operations with\nthe IxHash. The following methods are available: <small><br>\nFETCH, STORE, DELETE, EXISTS</small></p>\n\n<p style=\"margin-left:23%;\">These standard\n&quot;TIEHASH&quot; methods mandated by Perl can be used\ndirectly. See the &quot;tie&quot; entry in\n<a href=\"https://man.page/1/perlfunc\">perlfunc(1)</a> for details.</p>\n\n<p style=\"margin-left:11%;\">Push, Pop, Shift, Unshift,\nSplice</p>\n\n<p style=\"margin-left:23%;\">These additional methods\nresembling Perl functions are available for operating on\nkey-value pairs in the IxHash. The behavior is the same as\nthe corresponding perl functions, except when a supplied\nhash key already exists in the hash. In that case, the\nexisting value is updated but its order is not affected. To\nunconditionally alter the order of a supplied key-value\npair, first &quot;DELETE&quot; the IxHash element.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p>Keys</p></td>\n<td width=\"6%\"></td>\n<td width=\"77%\">\n\n\n<p>Returns an array of IxHash element keys corresponding to\nthe list of supplied indices. Returns an array of all the\nkeys if called without arguments. Note the return value is\nmostly only useful when used in a list context (since perl\nwill convert it to the number of elements in the array when\nused in a scalar context, and that may not be very\nuseful).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">If a single\nargument is given, returns the single key corresponding to\nthe index. This is usable in either scalar or list\ncontext.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\">Values</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">Returns an array of IxHash\nelement values corresponding to the list of supplied\nindices. Returns an array of all the values if called\nwithout arguments. Note the return value is mostly only\nuseful when used in a list context (since perl will convert\nit to the number of elements in the array when used in a\nscalar context, and that may not be very useful).</p></td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">If a single\nargument is given, returns the single value corresponding to\nthe index. This is usable in either scalar or list\ncontext.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">Indices</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">Returns an array of indices\ncorresponding to the supplied list of keys. Note the return\nvalue is mostly only useful when used in a list context\n(since perl will convert it to the number of elements in the\narray when used in a scalar context, and that may not be\nvery useful).</p></td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">If a single\nargument is given, returns the single index corresponding to\nthe key. This is usable in either scalar or list\ncontext.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">Delete</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">Removes elements with the\nsupplied keys from the IxHash.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p>Replace</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Substitutes the IxHash element at the specified index\nwith the supplied value-key pair. If a key is not supplied,\nsimply substitutes the value at index with the supplied\nvalue. If an element with the supplied key already exists,\nit will be removed from the IxHash first.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p>Reorder</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>This method can be used to manipulate the internal order\nof the IxHash elements by supplying a list of keys in the\ndesired order. Note however, that any IxHash elements whose\nkeys are not in the list will be removed from the\nIxHash.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p>Length</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Returns the number of IxHash elements.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">SortByKey</p>\n\n<p style=\"margin-left:23%;\">Reorders the IxHash elements by\ntextual comparison of the keys.</p>\n\n<p style=\"margin-left:11%;\">SortByValue</p>\n\n<p style=\"margin-left:23%;\">Reorders the IxHash elements by\ntextual comparison of the values.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>Clear</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p>Resets the IxHash to its pristine state: with no\nelements at all.</p></td></tr>\n</table>\n\n<h2>EXAMPLE\n<a name=\"EXAMPLE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nTie::IxHash; <br>\n# simple interface <br>\n$t = tie(%myhash, 'Tie::IxHash', 'a' =&gt; 1, 'b' =&gt; 2);\n<br>\n%myhash = (first =&gt; 1, second =&gt; 2, third =&gt; 3);\n<br>\n$myhash{fourth} = 4; <br>\n@keys = keys %myhash; <br>\n@values = values %myhash; <br>\nprint(&quot;y&quot;) if exists $myhash{third}; <br>\n# OO interface <br>\n$t = Tie::IxHash-&gt;new(first =&gt; 1, second =&gt; 2,\nthird =&gt; 3); <br>\n$t-&gt;Push(fourth =&gt; 4); # same as $myhash{'fourth'} =\n4; <br>\n($k, $v) = $t-&gt;Pop; # $k is 'fourth', $v is 4 <br>\n$t-&gt;Unshift(neg =&gt; -1, zeroth =&gt; 0); <br>\n($k, $v) = $t-&gt;Shift; # $k is 'neg', $v is -1 <br>\n@oneandtwo = $t-&gt;Splice(1, 2, foo =&gt; 100, bar =&gt;\n101); <br>\n@keys = $t-&gt;Keys; <br>\n@values = $t-&gt;Values; <br>\n@indices = $t-&gt;Indices('foo', 'zeroth'); <br>\n@itemkeys = $t-&gt;Keys(@indices); <br>\n@itemvals = $t-&gt;Values(@indices); <br>\n$t-&gt;Replace(2, 0.3, 'other'); <br>\n$t-&gt;Delete('second', 'zeroth'); <br>\n$len = $t-&gt;Length; # number of key-value pairs <br>\n$t-&gt;Reorder(reverse @keys); <br>\n$t-&gt;SortByKey; <br>\n$t-&gt;SortByValue;</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You cannot\nspecify a negative length to &quot;Splice&quot;. Negative\nindexes are <small>OK,</small> though.</p>\n\n<h2>NOTE\n<a name=\"NOTE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Indexing always\nbegins at 0 (despite the current $[ setting) for all the\nfunctions.</p>\n\n<h2>TODO\n<a name=\"TODO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Addition of\nelements with keys that already exist to the end of the\nIxHash must be controlled by a switch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Provide\n&quot;TIEARRAY&quot; interface when it stabilizes in\nPerl.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rewrite using\nXSUBs for efficiency.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gurusamy\nSarathy gsar@umich.edu</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n1995 Gurusamy Sarathy. All rights reserved. This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Version\n1.23</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/perl\">perl(1)</a></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLE\">EXAMPLE</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#NOTE\">NOTE</a>","<a href=\"#TODO\">TODO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}