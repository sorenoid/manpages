{"name":"file::mimeinfo","description":"File::MimeInfo - Determine file type from the file name","body":"\n\n<h1 align=\"center\">File::MimeInfo</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::MimeInfo\n- Determine file type from the file name</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nFile::MimeInfo; <br>\nmy $mime_type = mimetype($file); <br>\nmy $mime_type2 = mimetype('test.png');</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module can\nbe used to determine the mime type of a file. It tries to\nimplement the freedesktop specification for a shared\n<small>MIME</small> database.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For this module\nshared-mime-info-spec 0.13 was used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This package\nonly uses the globs file. No real magic checking is used.\nThe File::MimeInfo::Magic package is provided for magic\ntyping.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\ndetermine the mimetype of data in a memory buffer you should\nuse File::MimeInfo::Magic in combination with\nIO::Scalar.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nloads the various data files when needed. If you want to\nhash data earlier see the &quot;rehash&quot; methods\nbelow.</p>\n\n<h2>EXPORT\n<a name=\"EXPORT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The method\n&quot;mimetype&quot; is exported by default. The methods\n&quot;inodetype&quot;, &quot;globs&quot;,\n&quot;extensions&quot;, &quot;describe&quot;,\n&quot;mimetype_canon&quot; and &quot;mimetype_isa&quot; can\nbe exported on demand.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;new()&quot;</p>\n\n<p style=\"margin-left:17%;\">Simple constructor to allow\nObject Oriented use of this module. If you want to use this,\ninclude the package as &quot;use File::MimeInfo ();&quot; to\navoid importing sub &quot;mimetype()&quot;.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;mimetype($file)&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a mimetype string for\n$file, returns undef on failure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This method\nbundles &quot;inodetype&quot; and &quot;globs&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If these\nmethods are unsuccessful the file is read and the mimetype\ndefaults to &rsquo;text/plain&rsquo; or to\n&rsquo;application/octet-stream&rsquo; when the first ten\nchars of the file match ascii control chars (white spaces\nexcluded). If the file doesn&rsquo;t exist or isn&rsquo;t\nreadable &quot;undef&quot; is returned.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;inodetype($file)&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a mimetype in the\n&rsquo;inode&rsquo; namespace or undef when the file is\nactually a normal file.</p>\n\n<p style=\"margin-left:11%;\">&quot;globs($file)&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a mimetype string for\n$file based on the filename and filename extensions. Returns\nundef on failure. The file doesn&rsquo;t need to exist.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Behaviour in\nlist context (wantarray) is unspecified and will change in\nfuture releases.</p>\n\n<p style=\"margin-left:11%;\">&quot;default($file)&quot;</p>\n\n<p style=\"margin-left:17%;\">This method decides whether a\nfile is binary or plain text by looking at the first few\nbytes in the file. Used to decide between\n&quot;text/plain&quot; and\n&quot;application/octet-stream&quot; if all other methods\nhave failed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The spec states\nthat we should check for the ascii control chars and let\nhigher bit chars pass to allow utf8. We try to be more\nintelligent using perl utf8 support.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;extensions($mimetype)&quot;</p>\n\n<p style=\"margin-left:17%;\">In list context, returns the\nlist of filename extensions that map to the given mimetype.\nIn scalar context, returns the first extension that is found\nin the database for this mimetype.</p>\n\n<p style=\"margin-left:11%;\">&quot;describe($mimetype,\n$lang)&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a description of this\nmimetype as supplied by the mime info database. You can\nspecify a language with the optional parameter $lang, this\nshould be the two letter language code used in the xml\nfiles. Also you can set the global variable\n$File::MimeInfo::LANG to specify a language.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This method\nreturns undef when no xml file was found (i.e. the mimetype\ndoesn&rsquo;t exist in the database). It returns an empty\nstring when the xml file doesn&rsquo;t contain a description\nin the language you specified.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Currently no\nreal xml parsing is done, it trusts the xml files are nicely\nformatted.</i></p>\n\n\n<p style=\"margin-left:11%;\">&quot;mimetype_canon($mimetype)&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns the canonical mimetype\nfor a given mimetype. Deprecated mimetypes are typically\naliased to their canonical variants. This method only checks\naliases, doesn&rsquo;t check whether the mimetype\nexists.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Use this method\nas a filter when you take a mimetype as input.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;mimetype_isa($mimetype)&quot;\n<br>\n&quot;mimetype_isa($mimetype, $mimetype)&quot;</p>\n\n<p style=\"margin-left:17%;\">When give only one argument\nthis method returns a list with mimetypes that are parent\nclasses for this mimetype.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When given two\narguments returns true if the second mimetype is a parent\nclass of the first one.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This method\nchecks the subclasses table and applies a few rules for\nimplicit subclasses.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;has_mimeinfo_database()&quot;</p>\n\n<p style=\"margin-left:17%;\">Check if there are mimeinfo\ndatabase files available; returns 1 on success. If you\ndon&rsquo;t have the shared-mime-info package installed or\nnot in the <small>PATH</small> or @File::MimeInfo::DIRS does\nnot contain database directories, you will not get the\nsuccessful reply.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">New in version\n0.30.</p>\n\n<p style=\"margin-left:11%;\">&quot;rehash()&quot;</p>\n\n<p style=\"margin-left:17%;\">Rehash the data files. Glob\ninformation is preparsed when this method is called.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nby-pass the <small>XDG</small> basedir system you can\nspecify your database directories by setting\n@File::MimeInfo::DIRS. But normally it is better to change\nthe <small>XDG</small> basedir environment variables.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;rehash_aliases()&quot;</p>\n\n<p style=\"margin-left:17%;\">Rehashes the\n<i>mime/aliases</i> files.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;rehash_subclasses()&quot;</p>\n\n<p style=\"margin-left:17%;\">Rehashes the\n<i>mime/subclasses</i> files.</p>\n\n<h2>DIAGNOSTICS\n<a name=\"DIAGNOSTICS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nthrows an exception when it can&rsquo;t find any data files,\nwhen it can&rsquo;t open a data file it found for reading or\nwhen a subroutine doesn&rsquo;t get enough arguments. In the\nfirst case you either don&rsquo;t have the freedesktop mime\ninfo database installed, or your environment variables point\nto the wrong places, in the second case you have the\ndatabase installed, but it is broken (the mime info database\nshould logically be world readable).</p>\n\n<h2>TODO\n<a name=\"TODO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Make an option\nfor using some caching mechanism to reduce init time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Make\n&quot;describe()&quot; use real xml parsing ?</p>\n\n<h2>LIMITATIONS\n<a name=\"LIMITATIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Perl versions\nprior to 5.8.0 do not have the &rsquo;:utf8&rsquo;\n<small>IO</small> Layer, thus for the default method and for\nreading the xml files utf8 is not supported for these\nversions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since it is not\npossible to distinguish between encoding types (utf8,\nlatin1, latin2 etc.) in a straightforward manner only utf8\nis supported (because the spec recommends this).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\ndoes not yet check extended attributes for a mimetype.\nPatches for this are very welcome.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nuses the FreeDesktop.org shared mime info database. On your\ndesktop linux this is typically pre-installed so it&rsquo;s\nnot a problem. On your server you can install the\nshared-mime-info package via apt or dnf or apk or\nwhatnot.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To install on\nmacOS, you can install it like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">brew install\nshared-mime-info</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Jaap\nKarssenberg &lt;pardus@cpan.org&gt; Maintained by Michiel\nBeijen &lt;mb@x14.nl&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2003, 2012 Jaap G Karssenberg. All rights reserved. This\nprogram is free software; you can redistribute it and/or\nmodify it under the same terms as Perl itself.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::BaseDir,\nFile::MimeInfo::Magic, File::MimeInfo::Applications,\nFile::MimeInfo::Rox <br>\nrelated <small>CPAN</small> modules</p>\n\n<p style=\"margin-left:17%;\">File::MMagic</p>\n\n<p style=\"margin-left:11%;\">freedesktop specifications\nused</p>\n\n\n<p style=\"margin-left:17%;\">&lt;http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec&gt;,\n&lt;http://www.freedesktop.org/wiki/Specifications/basedir-spec&gt;,\n&lt;http://www.freedesktop.org/wiki/Specifications/desktop-entry-spec&gt;</p>\n\n<p style=\"margin-left:11%;\">freedesktop mime database</p>\n\n\n<p style=\"margin-left:17%;\">&lt;http://www.freedesktop.org/wiki/Software/shared-mime-info&gt;</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXPORT\">EXPORT</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#DIAGNOSTICS\">DIAGNOSTICS</a>","<a href=\"#TODO\">TODO</a>","<a href=\"#LIMITATIONS\">LIMITATIONS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}