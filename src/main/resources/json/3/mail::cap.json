{"name":"mail::cap","description":"Mail::Cap - understand mailcap files","body":"\n\n<h1 align=\"center\">Mail::Cap</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Cap -\nunderstand mailcap files</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $mc =\nMail::Cap-&gt;new; <br>\nmy $desc = $mc-&gt;description('image/gif'); <br>\nprint &quot;GIF desc: $desc\\n&quot;; <br>\nmy $cmd = $mc-&gt;viewCmd('text/plain; charset=iso-8859-1',\n'file.txt');</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parse mailcap\nfiles as specified in &quot; <small>RFC 1524</small> --A\nUser Agent Configuration Mechanism For Multimedia Mail\nFormat Information&gt;. In the description below $type\nrefers to the <small>MIME</small> type as specified in the\n&quot;Content-Type&quot; header of mail or\n<small>HTTP</small> messages. Examples of types are:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">image/gif <br>\ntext/html <br>\ntext/plain; charset=iso-8859-1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You could also\ntake a look at the File::MimeInfo distribution, which are\naccessing tables which are used by many applications on a\nsystem, and therefore have succeeded the mail-cap\nspecifications on modern ( <small>UNIX</small> )\nsystems.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Constructors</b>\n<br>\nMail::Cap-&gt;<b>new</b>(%options)</p>\n\n<p style=\"margin-left:17%;\">Create and initialize a new\nMail::Cap object. If you give it an argument it will try to\nparse the specified file. Without any arguments it will\nsearch for the mailcap file using the standard mailcap path,\nor the <small>MAILCAPS</small> environment variable if it is\ndefined.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">-Option\n--Default <br>\nfilename undef <br>\ntake 'FIRST' <br>\nfilename =&gt; <small>FILENAME</small></p>\n\n<p style=\"margin-left:20%;\">Add the specified file to the\nlist to standard locations. This file is tried first.</p>\n\n<p style=\"margin-left:17%;\">take =&gt; &rsquo;\n<small>ALL</small> &rsquo;|&rsquo; <small>FIRST</small>\n&rsquo;</p>\n\n<p style=\"margin-left:20%;\">Include all mailcap files you\ncan find. By default, only the first file is parsed, however\nthe <small>RFC</small> tells us to include\n<small>ALL.</small> To maintain backwards compatibility, the\ndefault only takes the <small>FIRST.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$mcap = new\nMail::Cap; <br>\n$mcap = new Mail::Cap &quot;/mydir/mailcap&quot;; <br>\n$mcap = new Mail::Cap filename =&gt;\n&quot;/mydir/mailcap&quot;; <br>\n$mcap = new Mail::Cap take =&gt; 'ALL'; <br>\n$mcap = Mail::Cap-&gt;new(take =&gt; 'ALL');</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Run\ncommands</b> <br>\nThese methods invoke a suitable program presenting or\nmanipulating the media object in the specified file. They\nall return 1 if a command was found, and 0 otherwise. You\nmight test $? for the outcome of the command. <br>\n$obj-&gt;<b>compose</b>($type, $file) <br>\n$obj-&gt;<b>edit</b>($type, $file) <br>\n$obj-&gt;<b>print</b>($type, $file) <br>\n$obj-&gt;<b>view</b>($type, $file)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Command\ncreator</b> <br>\nThese methods return a string that is suitable for feeding\nto <b>system()</b> in order to invoke a suitable program\npresenting or manipulating the media object in the specified\nfile. It will return &quot;undef&quot; if no suitable\nspecification exists. <br>\n$obj-&gt;<b>composeCmd</b>($type, $file) <br>\n$obj-&gt;<b>editCmd</b>($type, $file) <br>\n$obj-&gt;<b>printCmd</b>($type, $file) <br>\n$obj-&gt;<b>viewCmd</b>($type, $file)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Look-up\ndefinitions</b> <br>\nMethods return the corresponding mailcap field for the type.\n<br>\n$obj-&gt;<b>description</b>($type) <br>\n$obj-&gt;<b>field</b>($type, $field)</p>\n\n<p style=\"margin-left:17%;\">Returns the specified field for\nthe type. Returns undef if no specification exists.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>nametemplate</b>($type)\n<br>\n$obj-&gt;<b>textualnewlines</b>($type) <br>\n$obj-&gt;<b>x11_bitmap</b>($type)</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\npart of the MailTools distribution,\n<i>http://perl.overmeer.net/mailtools/</i>.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The MailTools\nbundle was developed by Graham Barr. Later, Mark Overmeer\ntook over maintenance without commitment to further\ndevelopment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Cap by\nGisle Aas &lt;aas@oslonett.no&gt;. Mail::Field::AddrList by\nPeter Orbaek &lt;poe@cit.dk&gt;. Mail::Mailer and Mail::Send\nby Tim Bunce &lt;Tim.Bunce@ig.co.uk&gt;. For other\ncontributors see ChangeLog.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyrights\n1995-2000 Graham Barr &lt;gbarr@pobox.com&gt; and 2001-2017\nMark Overmeer &lt;perl@overmeer.net&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself. See\n<i>http://www.perl.com/perl/misc/Artistic.html</i></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#LICENSE\">LICENSE</a>"],"level":3}