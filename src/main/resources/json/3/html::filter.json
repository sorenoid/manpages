{"name":"html::filter","description":"HTML::Filter - Filter HTML text through the parser","body":"\n\n<h1 align=\"center\">HTML::Filter</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::Filter -\nFilter HTML text through the parser</p>\n\n<h2>NOTE\n<a name=\"NOTE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>This module\nis deprecated.</b> The &quot;HTML::Parser&quot; now provides\nthe functionally of &quot;HTML::Filter&quot; much more\nefficiently with the &quot;default&quot; handler.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">require\nHTML::Filter; <br>\n$p =\nHTML::Filter-&gt;new-&gt;parse_file(&quot;index.html&quot;);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;HTML::Filter&quot;\nis an <small>HTML</small> parser that by default prints the\noriginal text of each <small>HTML</small> element (a slow\nversion of <a href=\"https://man.page/1/cat\">cat(1)</a> basically). The callback methods\nmay be overridden to modify the filtering for some\n<small>HTML</small> elements and you can override\n<b>output()</b> method which is called to print the\n<small>HTML</small> text.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;HTML::Filter&quot;\nis a subclass of &quot;HTML::Parser&quot;. This means that\nthe document should be given to the parser by calling the\n$p-&gt;<b>parse()</b> or $p-&gt;<b>parse_file()</b>\nmethods.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first\nexample is a filter that will remove all comments from an\n<small>HTML</small> file. This is achieved by simply\noverriding the comment method to do nothing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">package\nCommentStripper; <br>\nrequire HTML::Filter; <br>\n@ISA=qw(HTML::Filter); <br>\nsub comment { } # ignore comments</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The second\nexample shows a filter that will remove any &lt;\n<small>TABLE</small> &gt;s found in the <small>HTML</small>\nfile. We specialize the <b>start()</b> and <b>end()</b>\nmethods to count table tags and then make output not happen\nwhen inside a table.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">package\nTableStripper; <br>\nrequire HTML::Filter; <br>\n@ISA=qw(HTML::Filter); <br>\nsub start <br>\n{ <br>\nmy $self = shift; <br>\n$self-&gt;{table_seen}++ if $_[0] eq &quot;table&quot;; <br>\n$self-&gt;SUPER::start(@_); <br>\n} <br>\nsub end <br>\n{ <br>\nmy $self = shift; <br>\n$self-&gt;SUPER::end(@_); <br>\n$self-&gt;{table_seen}-- if $_[0] eq &quot;table&quot;; <br>\n} <br>\nsub output <br>\n{ <br>\nmy $self = shift; <br>\nunless ($self-&gt;{table_seen}) { <br>\n$self-&gt;SUPER::output(@_); <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\ncollect the parsed text internally you might want to do\nsomething like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">package\nFilterIntoString; <br>\nrequire HTML::Filter; <br>\n@ISA=qw(HTML::Filter); <br>\nsub output { push(@{$_[0]-&gt;{fhtml}}, $_[1]) } <br>\nsub filtered_html { join(&quot;&quot;, @{$_[0]-&gt;{fhtml}})\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::Parser</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1997-1999 Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#NOTE\">NOTE</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}