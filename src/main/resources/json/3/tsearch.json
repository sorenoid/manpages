{"name":"tsearch","description":"tsearch, tfind, tdelete, twalk, tdestroy - manage a binary search tree","body":"\n\n<h1 align=\"center\">TSEARCH</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">tsearch, tfind,\ntdelete, twalk, tdestroy - manage a binary search tree</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;search.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>typedef enum\n{ preorder, postorder, endorder, leaf } VISIT;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*tsearch(const void *</b><i>key</i><b>, void\n**</b><i>rootp</i><b>, <br>\nint (*</b><i>compar</i><b>)(const void *, const void\n*));</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*tfind(const void *</b><i>key</i><b>, void *const\n*</b><i>rootp</i><b>, <br>\nint (*</b><i>compar</i><b>)(const void *, const void\n*));</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*tdelete(const void *</b><i>key</i><b>, void\n**</b><i>rootp</i><b>, <br>\nint (*</b><i>compar</i><b>)(const void *, const void\n*));</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\ntwalk(const void *</b><i>root</i><b>, <br>\nvoid (*</b><i>action</i><b>)(const void\n*</b><i>nodep</i><b>, VISIT</b> <i>which</i><b>, <br>\nint</b> <i>depth</i><b>));</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;search.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\ntwalk_r(const void *</b><i>root</i><b>, <br>\nvoid (*</b><i>action</i><b>)(const void\n*</b><i>nodep</i><b>, VISIT</b> <i>which</i><b>, <br>\nvoid *</b><i>closure</i><b>), <br>\nvoid *</b><i>closure</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\ntdestroy(void *</b><i>root</i><b>, void\n(*</b><i>free_node</i><b>)(void\n*</b><i>nodep</i><b>));</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tsearch</b>(),\n<b>tfind</b>(), <b>twalk</b>(), and <b>tdelete</b>() manage\na binary search tree. They are generalized from Knuth\n(6.2.2) Algorithm T. The first field in each node of the\ntree is a pointer to the corresponding data item. (The\ncalling program must store the actual data.) <i>compar</i>\npoints to a comparison routine, which takes pointers to two\nitems. It should return an integer which is negative, zero,\nor positive, depending on whether the first item is less\nthan, equal to, or greater than the second.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tsearch</b>()\nsearches the tree for an item. <i>key</i> points to the item\nto be searched for. <i>rootp</i> points to a variable which\npoints to the root of the tree. If the tree is empty, then\nthe variable that <i>rootp</i> points to should be set to\nNULL. If the item is found in the tree, then\n<b>tsearch</b>() returns a pointer to the corresponding tree\nnode. (In other words, <b>tsearch</b>() returns a pointer to\na pointer to the data item.) If the item is not found, then\n<b>tsearch</b>() adds it, and returns a pointer to the\ncorresponding tree node.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tfind</b>()\nis like <b>tsearch</b>(), except that if the item is not\nfound, then <b>tfind</b>() returns NULL.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tdelete</b>()\ndeletes an item from the tree. Its arguments are the same as\nfor <b>tsearch</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>twalk</b>()\nperforms depth-first, left-to-right traversal of a binary\ntree. <i>root</i> points to the starting node for the\ntraversal. If that node is not the root, then only part of\nthe tree will be visited. <b>twalk</b>() calls the user\nfunction <i>action</i> each time a node is visited (that is,\nthree times for an internal node, and once for a leaf).\n<i>action</i>, in turn, takes three arguments. The first\nargument is a pointer to the node being visited. The\nstructure of the node is unspecified, but it is possible to\ncast the pointer to a pointer-to-pointer-to-element in order\nto access the element stored within the node. The\napplication must not modify the structure pointed to by this\nargument. The second argument is an integer which takes one\nof the values <b>preorder</b>, <b>postorder</b>, or\n<b>endorder</b> depending on whether this is the first,\nsecond, or third visit to the internal node, or the value\n<b>leaf</b> if this is the single visit to a leaf node.\n(These symbols are defined in <i>&lt;search.h&gt;</i>.) The\nthird argument is the depth of the node; the root node has\ndepth zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(More commonly,\n<b>preorder</b>, <b>postorder</b>, and <b>endorder</b> are\nknown as <b>preorder</b>, <b>inorder</b>, and\n<b>postorder</b>: before visiting the children, after the\nfirst and before the second, and after visiting the\nchildren. Thus, the choice of name <b>postorder</b> is\nrather confusing.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>twalk_r</b>()\nis similar to <b>twalk</b>(), but instead of the\n<i>depth</i> argument, the <i>closure</i> argument pointer\nis passed to each invocation of the action callback,\nunchanged. This pointer can be used to pass information to\nand from the callback function in a thread-safe fashion,\nwithout resorting to global variables.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tdestroy</b>()\nremoves the whole tree pointed to by <i>root</i>, freeing\nall resources allocated by the <b>tsearch</b>() function.\nFor the data in each tree node the function <i>free_node</i>\nis called. The pointer to the data is passed as the argument\nto the function. If no such work is necessary,\n<i>free_node</i> must point to a function doing nothing.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tsearch</b>()\nreturns a pointer to a matching node in the tree, or to the\nnewly added node, or NULL if there was insufficient memory\nto add the item. <b>tfind</b>() returns a pointer to the\nnode, or NULL if no match is found. If there are multiple\nitems that match the key, the item whose node is returned is\nunspecified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tdelete</b>()\nreturns a pointer to the parent of the node deleted, or NULL\nif the item was not found. If the deleted node was the root\nnode, <b>tdelete</b>() returns a dangling pointer that must\nnot be accessed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tsearch</b>(),\n<b>tfind</b>(), and <b>tdelete</b>() also return NULL if\n<i>rootp</i> was NULL on entry.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>twalk_r</b>()\nis available in glibc since version 2.30.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3425741.png\" alt=\"Image grohtml-3425741.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4. The functions <b>tdestroy</b>() and\n<b>twalk_r</b>() are GNU extensions.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>twalk</b>()\ntakes a pointer to the root, while the other functions take\na pointer to a variable which points to the root.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tdelete</b>()\nfrees the memory required for the node in the tree. The user\nis responsible for freeing the memory for the corresponding\ndata.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The example\nprogram depends on the fact that <b>twalk</b>() makes no\nfurther reference to a node after calling the user function\nwith argument &quot;endorder&quot; or &quot;leaf&quot;. This\nworks with the GNU library implementation, but is not in the\nSystem V documentation.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nprogram inserts twelve random numbers into a binary tree,\nwhere duplicate numbers are collapsed, then prints the\nnumbers in order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\n_GNU_SOURCE /* Expose declaration of tdestroy() */ <br>\n#include &lt;search.h&gt; <br>\n#include &lt;stddef.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;time.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n*root = NULL;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void *\n<br>\nxmalloc(size_t n) <br>\n{ <br>\nvoid *p; <br>\np = malloc(n); <br>\nif (p) <br>\nreturn p; <br>\nfprintf(stderr, &quot;insufficient memory\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int <br>\ncompare(const void *pa, const void *pb) <br>\n{ <br>\nif (*(int *) pa &lt; *(int *) pb) <br>\nreturn -1; <br>\nif (*(int *) pa &gt; *(int *) pb) <br>\nreturn 1; <br>\nreturn 0; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\naction(const void *nodep, VISIT which, int depth) <br>\n{ <br>\nint *datap;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">switch (which)\n{ <br>\ncase preorder: <br>\nbreak; <br>\ncase postorder: <br>\ndatap = *(int **) nodep; <br>\nprintf(&quot;%6d\\n&quot;, *datap); <br>\nbreak; <br>\ncase endorder: <br>\nbreak; <br>\ncase leaf: <br>\ndatap = *(int **) nodep; <br>\nprintf(&quot;%6d\\n&quot;, *datap); <br>\nbreak; <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(void) <br>\n{ <br>\nint **val;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">srand(time(NULL));\n<br>\nfor (int i = 0; i &lt; 12; i++) { <br>\nint *ptr = xmalloc(sizeof(*ptr)); <br>\n*ptr = rand() &amp; 0xff; <br>\nval = tsearch(ptr, &amp;root, compare); <br>\nif (val == NULL) <br>\nexit(EXIT_FAILURE); <br>\nelse if (*val != ptr) <br>\nfree(ptr); <br>\n} <br>\ntwalk(root, action); <br>\ntdestroy(root, free); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/bsearch\">bsearch(3)</a>,\n<a href=\"https://man.page/3/hsearch\">hsearch(3)</a>, <a href=\"https://man.page/3/lsearch\">lsearch(3)</a>, <a href=\"https://man.page/3/qsort\">qsort(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}