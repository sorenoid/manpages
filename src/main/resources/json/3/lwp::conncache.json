{"name":"lwp::conncache","description":"LWP::ConnCache - Connection cache manager","body":"\n\n<h1 align=\"center\">LWP::ConnCache</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">LWP::ConnCache\n- Connection cache manager</p>\n\n<h2>NOTE\n<a name=\"NOTE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\nexperimental. Details of its interface is likely to change\nin the future.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::ConnCache; <br>\nmy $cache = LWP::ConnCache-&gt;new; <br>\n$cache-&gt;deposit($type, $key, $sock); <br>\n$sock = $cache-&gt;withdraw($type, $key);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;LWP::ConnCache&quot; class is the standard connection\ncache manager for LWP::UserAgent.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nbasic methods are provided:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>new</b> <br>\nmy $cache = LWP::ConnCache-&gt;new( %options )</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This method\nconstructs a new LWP::ConnCache object. The only option\ncurrently accepted is &quot;total_capacity&quot;. If\nspecified it initializes the &quot;total_capacity&quot; in\nLWP::ConnCache option. It defaults to 1.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>total_capacity</b>\n<br>\nmy $cap = $cache-&gt;total_capacity; <br>\n$cache-&gt;total_capacity(0); # drop all immediately <br>\n$cache-&gt;total_capacity(undef); # no limit <br>\n$cache-&gt;total_capacity($number);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Get/sets the\nnumber of connection that will be cached. Connections will\nstart to be dropped when this limit is reached. If set to 0,\nthen all connections are immediately dropped. If set to\n&quot;undef&quot;, then there is no limit.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>capacity</b>\n<br>\nmy $http_capacity = $cache-&gt;capacity('http'); <br>\n$cache-&gt;capacity('http', 2 );</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Get/set a limit\nfor the number of connections of the specified type that can\nbe cached. The first parameter is a short string like\n&quot;http&quot; or &quot;ftp&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>drop</b>\n<br>\n$cache-&gt;drop(); # Drop ALL connections <br>\n# which is just a synonym for: <br>\n$cache-&gt;drop(sub{1}); # Drop ALL connections <br>\n# drop all connections older than 22 seconds and add a\nreason for it! <br>\n$cache-&gt;drop(22, &quot;Older than 22 secs dropped&quot;);\n<br>\n# which is just a synonym for: <br>\n$cache-&gt;drop(sub { <br>\nmy ($conn, $type, $key, $deposit_time) = @_; <br>\nif ($deposit_time &lt; 22) { <br>\n# true values drop the connection <br>\nreturn 1; <br>\n} <br>\n# false values don't drop the connection <br>\nreturn 0; <br>\n}, &quot;Older than 22 secs dropped&quot; );</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Drop\nconnections by some criteria. The $checker argument is a\nsubroutine that is called for each connection. If the\nroutine returns a <small>TRUE</small> value then the\nconnection is dropped. The routine is called with\n&quot;($conn, $type, $key, $deposit_time)&quot; as\narguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Shortcuts: If\nthe $checker argument is absent (or &quot;undef&quot;) all\ncached connections are dropped. If the $checker is a number\nthen all connections untouched that the given number of\nseconds or more are dropped. If $checker is a string then\nall connections of the given type are dropped.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;reason&quot; is passed on to the &quot;dropped&quot;\nin LWP::ConnCache method.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>prune</b>\n<br>\n$cache-&gt;prune();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Calling this\nmethod will drop all connections that are dead. This is\ntested by calling the &quot;ping&quot; in LWP::ConnCache\nmethod on the connections. If the &quot;ping&quot; in\nLWP::ConnCache method exists and returns a false value, then\nthe connection is dropped.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>get_types</b>\n<br>\nmy @types = $cache-&gt;get_types();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This returns\nall the &quot;type&quot; fields used for the currently\ncached connections.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>get_connections</b>\n<br>\nmy @conns = $cache-&gt;get_connections(); # all connections\n<br>\nmy @conns = $cache-&gt;get_connections('http'); #\nconnections for http</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This returns\nall connection objects of the specified type. If no type is\nspecified then all connections are returned. In scalar\ncontext the number of cached connections of the specified\ntype is returned.</p>\n\n<h2>PROTOCOL METHODS\n<a name=\"PROTOCOL METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are called by low-level protocol modules to try to\nsave away connections and to get them back.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>deposit</b>\n<br>\n$cache-&gt;deposit($type, $key, $conn);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This method\nadds a new connection to the cache. As a result, other\nalready cached connections might be dropped. Multiple\nconnections with the same type/key might be added.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>withdraw</b>\n<br>\nmy $conn = $cache-&gt;withdraw($type, $key);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This method\ntries to fetch back a connection that was previously\ndeposited. If no cached connection with the specified\n$type/$key is found, then &quot;undef&quot; is returned.\nThere is not guarantee that a deposited connection can be\nwithdrawn, as the cache manger is free to drop connections\nat any time.</p>\n\n<h2>INTERNAL METHODS\n<a name=\"INTERNAL METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are called internally. Subclasses might want to\noverride them.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>enforce_limits</b>\n<br>\n$conn-&gt;enforce_limits([$type])</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This method is\ncalled with after a new connection is added (deposited) in\nthe cache or capacity limits are adjusted. The default\nimplementation drops connections until the specified\ncapacity limits are not exceeded.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dropping</b>\n<br>\n$conn-&gt;dropping($conn_record, $reason)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This method is\ncalled when a connection is dropped. The record belonging to\nthe dropped connection is passed as the first argument and a\nstring describing the reason for the drop is passed as the\nsecond argument. The default implementation makes some noise\nif the $LWP::ConnCache::DEBUG variable is set and nothing\nmore.</p>\n\n<h2>SUBCLASSING\n<a name=\"SUBCLASSING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For specialized\ncache policy it makes sense to subclass\n&quot;LWP::ConnCache&quot; and perhaps override the\n&quot;deposit&quot; in LWP::ConnCache,\n&quot;enforce_limits&quot; in LWP::ConnCache, and\n&quot;dropping&quot; in LWP::ConnCache methods.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The object\nitself is a hash. Keys prefixed with &quot;cc_&quot; are\nreserved for the base class.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">LWP::UserAgent</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright 2001\nGisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#NOTE\">NOTE</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#PROTOCOL METHODS\">PROTOCOL METHODS</a>","<a href=\"#INTERNAL METHODS\">INTERNAL METHODS</a>","<a href=\"#SUBCLASSING\">SUBCLASSING</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}