{"name":"uri","description":"URI - Uniform Resource Identifiers (absolute and relative)","body":"\n\n<h1 align=\"center\">URI</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">URI - Uniform\nResource Identifiers (absolute and relative)</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use URI ();\n<br>\n$u1 = URI-&gt;new(&quot;http://www.example.com&quot;); <br>\n$u2 = URI-&gt;new(&quot;foo&quot;, &quot;http&quot;); <br>\n$u3 = $u2-&gt;abs($u1); <br>\n$u4 = $u3-&gt;clone; <br>\n$u5 =\nURI-&gt;new(&quot;HTTP://WWW.example.com:80&quot;)-&gt;canonical;\n<br>\n$str = $u-&gt;as_string; <br>\n$str = &quot;$u&quot;; <br>\n$scheme = $u-&gt;scheme; <br>\n$opaque = $u-&gt;opaque; <br>\n$path = $u-&gt;path; <br>\n$frag = $u-&gt;fragment; <br>\n$u-&gt;scheme(&quot;ftp&quot;); <br>\n$u-&gt;host(&quot;ftp.example.com&quot;); <br>\n$u-&gt;path(&quot;cpan/&quot;);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nimplements the &quot;URI&quot; class. Objects of this class\nrepresent &quot;Uniform Resource Identifier references&quot;\nas specified in <small>RFC 2396</small> (and updated by\n<small>RFC 2732</small> ).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A Uniform\nResource Identifier is a compact string of characters that\nidentifies an abstract or physical resource. A Uniform\nResource Identifier can be further classified as either a\nUniform Resource Locator ( <small>URL</small> ) or a Uniform\nResource Name ( <small>URN</small> ). The distinction\nbetween <small>URL</small> and <small>URN</small> does not\nmatter to the &quot;URI&quot; class interface. A\n&quot;URI-reference&quot; is a <small>URI</small> that may\nhave additional information attached in the form of a\nfragment identifier.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An absolute\n<small>URI</small> reference consists of three parts: a\n<i>scheme</i>, a <i>scheme-specific part</i> and a\n<i>fragment</i> identifier. A subset of <small>URI</small>\nreferences share a common syntax for hierarchical\nnamespaces. For these, the scheme-specific part is further\nbroken down into <i>authority</i>, <i>path</i> and\n<i>query</i> components. These URIs can also take the form\nof relative <small>URI</small> references, where the scheme\n(and usually also the authority) component is missing, but\nimplied by the context of the <small>URI</small> reference.\nThe three forms of <small>URI</small> reference syntax are\nsummarized as follows:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;scheme&gt;:&lt;scheme-specific-part&gt;#&lt;fragment&gt;\n<br>\n\n&lt;scheme&gt;://&lt;authority&gt;&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;\n<br>\n&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The components\ninto which a <small>URI</small> reference can be divided\ndepend on the <i>scheme</i>. The &quot;URI&quot; class\nprovides methods to get and set the individual components.\nThe methods available for a specific &quot;URI&quot; object\ndepend on the scheme.</p>\n\n<h2>CONSTRUCTORS\n<a name=\"CONSTRUCTORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods construct new &quot;URI&quot; objects: <br>\n$uri = <small>URI-</small> &gt;new( $str ) <br>\n$uri = <small>URI-</small> &gt;new( $str, $scheme )</p>\n\n<p style=\"margin-left:17%;\">Constructs a new\n<small>URI</small> object. The string representation of a\n<small>URI</small> is given as argument, together with an\noptional scheme specification. Common <small>URI</small>\nwrappers like &quot;&quot; and &lt;&gt;, as well as leading\nand trailing white space, are automatically removed from the\n$str argument before it is processed further.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The constructor\ndetermines the scheme, maps this to an appropriate\n<small>URI</small> subclass, constructs a new object of that\nclass and returns it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the scheme\nisn&rsquo;t one of those that <small>URI</small> recognizes,\nyou still get an <small>URI</small> object back that you can\naccess the generic methods on. The\n&quot;$uri-&gt;has_recognized_scheme&quot; method can be\nused to test for this.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $scheme\nargument is only used when $str is a relative\n<small>URI.</small> It can be either a simple string that\ndenotes the scheme, a string containing an absolute\n<small>URI</small> reference, or an absolute &quot;URI&quot;\nobject. If no $scheme is specified for a relative\n<small>URI</small> $str, then $str is simply treated as a\ngeneric <small>URI</small> (no scheme-specific methods\navailable).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The set of\ncharacters available for building <small>URI</small>\nreferences is restricted (see URI::Escape). Characters\noutside this set are automatically escaped by the\n<small>URI</small> constructor.</p>\n\n<p style=\"margin-left:11%;\">$uri = <small>URI-</small>\n&gt;new_abs( $str, $base_uri )</p>\n\n<p style=\"margin-left:17%;\">Constructs a new absolute\n<small>URI</small> object. The $str argument can denote a\nrelative or absolute <small>URI.</small> If relative, then\nit is absolutized using $base_uri as base. The $base_uri\nmust be an absolute <small>URI.</small></p>\n\n<p style=\"margin-left:11%;\">$uri = URI::file-&gt;new(\n$filename ) <br>\n$uri = URI::file-&gt;new( $filename, $os )</p>\n\n<p style=\"margin-left:17%;\">Constructs a new <i>file</i>\n<small>URI</small> from a file name. See URI::file.</p>\n\n<p style=\"margin-left:11%;\">$uri = URI::file-&gt;new_abs(\n$filename ) <br>\n$uri = URI::file-&gt;new_abs( $filename, $os )</p>\n\n<p style=\"margin-left:17%;\">Constructs a new absolute\n<i>file</i> <small>URI</small> from a file name. See\nURI::file.</p>\n\n<p style=\"margin-left:11%;\">$uri = URI::file-&gt;cwd</p>\n\n<p style=\"margin-left:17%;\">Returns the current working\ndirectory as a <i>file</i> <small>URI.</small> See\nURI::file.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;clone</p>\n\n<p style=\"margin-left:17%;\">Returns a copy of the $uri.</p>\n\n<h2>COMMON METHODS\n<a name=\"COMMON METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The methods\ndescribed in this section are available for all\n&quot;URI&quot; objects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Methods that\ngive access to components of a <small>URI</small> always\nreturn the old value of the component. The value returned is\n&quot;undef&quot; if the component was not present. There is\ngenerally a difference between a component that is empty\n(represented as &quot;&quot;) and a component that is\nmissing (represented as &quot;undef&quot;). If an accessor\nmethod is given an argument, it updates the corresponding\ncomponent in addition to returning the old value of the\ncomponent. Passing an undefined argument removes the\ncomponent (if possible). The description of each accessor\nmethod indicates whether the component is passed as an\nescaped (percent-encoded) or an unescaped string. A\ncomponent that can be further divided into sub-parts are\nusually passed escaped, as unescaping might change its\nsemantics.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The common\nmethods available for all <small>URI</small> are: <br>\n$uri-&gt;scheme <br>\n$uri-&gt;scheme( $new_scheme )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the scheme\npart of the $uri. If the $uri is relative, then\n$uri-&gt;scheme returns &quot;undef&quot;. If called with an\nargument, it updates the scheme of $uri, possibly changing\nthe class of $uri, and returns the old scheme value. The\nmethod croaks if the new scheme name is illegal; a scheme\nname must begin with a letter and must consist of only\nUS-ASCII letters, numbers, and a few special marks:\n&quot;.&quot;, &quot;+&quot;, &quot;-&quot;. This\nrestriction effectively means that the scheme must be passed\nunescaped. Passing an undefined argument to the scheme\nmethod makes the <small>URI</small> relative (if\npossible).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Letter case\ndoes not matter for scheme names. The string returned by\n$uri-&gt;scheme is always lowercase. If you want the scheme\njust as it was written in the <small>URI</small> in its\noriginal case, you can use the $uri-&gt;_scheme method\ninstead.</p>\n\n\n<p style=\"margin-left:11%;\">$uri-&gt;has_recognized_scheme</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe <small>URI</small> scheme is one that <small>URI</small>\nrecognizes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It will also be\n<small>TRUE</small> for relative URLs where a recognized\nscheme was provided to the constructor, even if\n&quot;$uri-&gt;scheme&quot; returns &quot;undef&quot; for\nthese.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;opaque <br>\n$uri-&gt;opaque( $new_opaque )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the\nscheme-specific part of the $uri (everything between the\nscheme and the fragment) as an escaped string.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;path <br>\n$uri-&gt;path( $new_path )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the same value\nas $uri-&gt;opaque unless the <small>URI</small> supports\nthe generic syntax for hierarchical namespaces. In that case\nthe generic method is overridden to set and return the part\nof the <small>URI</small> between the <i>host name</i> and\nthe <i>fragment</i>.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;fragment <br>\n$uri-&gt;fragment( $new_frag )</p>\n\n<p style=\"margin-left:17%;\">Returns the fragment identifier\nof a <small>URI</small> reference as an escaped string.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;as_string</p>\n\n<p style=\"margin-left:17%;\">Returns a <small>URI</small>\nobject to a plain <small>ASCII</small> string.\n<small>URI</small> objects are also converted to plain\nstrings automatically by overloading. This means that $uri\nobjects can be used as plain strings in most Perl\nconstructs.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;as_iri</p>\n\n<p style=\"margin-left:17%;\">Returns a Unicode string\nrepresenting the <small>URI.</small> Escaped\n<small>UTF-8</small> sequences representing non-ASCII\ncharacters are turned into their corresponding Unicode code\npoint.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;canonical</p>\n\n<p style=\"margin-left:17%;\">Returns a normalized version of\nthe <small>URI.</small> The rules for normalization are\nscheme-dependent. They usually involve lowercasing the\nscheme and Internet host name components, removing the\nexplicit port specification if it matches the default port,\nuppercasing all escape sequences, and unescaping octets that\ncan be better represented as plain characters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For efficiency\nreasons, if the $uri is already in normalized form, then a\nreference to it is returned instead of a copy.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;eq( $other_uri ) <br>\nURI::eq( $first_uri, $other_uri )</p>\n\n<p style=\"margin-left:17%;\">Tests whether two\n<small>URI</small> references are equal. <small>URI</small>\nreferences that normalize to the same string are considered\nequal. The method can also be used as a plain function which\ncan also test two string arguments.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you need to\ntest whether two &quot;URI&quot; object references denote\nthe same object, use the &rsquo;==&rsquo; operator.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;abs( $base_uri )</p>\n\n<p style=\"margin-left:17%;\">Returns an absolute\n<small>URI</small> reference. If $uri is already absolute,\nthen a reference to it is simply returned. If the $uri is\nrelative, then a new absolute <small>URI</small> is\nconstructed by combining the $uri and the $base_uri, and\nreturned.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;rel( $base_uri )</p>\n\n<p style=\"margin-left:17%;\">Returns a relative\n<small>URI</small> reference if it is possible to make one\nthat denotes the same resource relative to $base_uri. If\nnot, then $uri is simply returned.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;secure</p>\n\n<p style=\"margin-left:17%;\">Returns a <small>TRUE</small>\nvalue if the <small>URI</small> is considered to point to a\nresource on a secure channel, such as an <small>SSL</small>\nor <small>TLS</small> encrypted one.</p>\n\n<h2>GENERIC METHODS\n<a name=\"GENERIC METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are available to schemes that use the common/generic\nsyntax for hierarchical namespaces. The descriptions of\nschemes below indicate which these are. Unrecognized schemes\nare assumed to support the generic syntax, and therefore the\nfollowing methods: <br>\n$uri-&gt;authority <br>\n$uri-&gt;authority( $new_authority )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the escaped\nauthority component of the $uri.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;path <br>\n$uri-&gt;path( $new_path )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the escaped\npath component of the $uri (the part between the host name\nand the query or fragment). The path can never be undefined,\nbut it can be the empty string.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;path_query <br>\n$uri-&gt;path_query( $new_path_query )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the escaped\npath and query components as a single entity. The path and\nthe query are separated by a &quot;?&quot; character, but\nthe query can itself contain &quot;?&quot;.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;path_segments <br>\n$uri-&gt;path_segments( $segment, ... )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the path. In a\nscalar context, it returns the same value as $uri-&gt;path.\nIn a list context, it returns the unescaped path segments\nthat make up the path. Path segments that have parameters\nare returned as an anonymous array. The first element is the\nunescaped path segment proper; subsequent elements are\nescaped parameter strings. Such an anonymous array uses\noverloading so it can be treated as a string too, but this\nstring does not include the parameters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nabsolute paths have the empty string as their first\n<i>path_segment</i>, i.e. the <i>path</i>\n&quot;/foo/bar&quot; have 3 <i>path_segments</i>;\n&quot;&quot;, &quot;foo&quot; and &quot;bar&quot;.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;query <br>\n$uri-&gt;query( $new_query )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the escaped\nquery component of the $uri.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;query_form <br>\n$uri-&gt;query_form( $key1 =&gt; $val1, $key2 =&gt; $val2,\n... ) <br>\n$uri-&gt;query_form( $key1 =&gt; $val1, $key2 =&gt; $val2,\n..., $delim ) <br>\n$uri-&gt;query_form( \\@key_value_pairs ) <br>\n$uri-&gt;query_form( \\@key_value_pairs, $delim ) <br>\n$uri-&gt;query_form( \\%hash ) <br>\n$uri-&gt;query_form( \\%hash, $delim )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns query\ncomponents that use the\n<i>application/x-www-form-urlencoded</i> format. Key/value\npairs are separated by &quot;&amp;&quot;, and the key is\nseparated from the value by a &quot;=&quot; character.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The form can be\nset either by passing separate key/value pairs, or via an\narray or hash reference. Passing an empty array or an empty\nhash removes the query component, whereas passing no\narguments at all leaves the component unchanged. The order\nof keys is undefined if a hash reference is passed. The old\nvalue is always returned as a list of separate key/value\npairs. Assigning this list to a hash is unwise as the keys\nreturned might repeat.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The values\npassed when setting the form can be plain strings or\nreferences to arrays of strings. Passing an array of values\nhas the same effect as passing the key repeatedly with one\nvalue at a time. All the following statements have the same\neffect:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$uri-&gt;query_form(foo\n=&gt; 1, foo =&gt; 2); <br>\n$uri-&gt;query_form(foo =&gt; [1, 2]); <br>\n$uri-&gt;query_form([ foo =&gt; 1, foo =&gt; 2 ]); <br>\n$uri-&gt;query_form([ foo =&gt; [1, 2] ]); <br>\n$uri-&gt;query_form({ foo =&gt; [1, 2] });</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $delim\nparameter can be passed as &quot;;&quot; to force the\nkey/value pairs to be delimited by &quot;;&quot; instead of\n&quot;&amp;&quot; in the query string. This practice is\noften recommended for URLs embedded in <small>HTML</small>\nor <small>XML</small> documents as this avoids the trouble\nof escaping the &quot;&amp;&quot; character. You might also\nset the $URI::DEFAULT_QUERY_FORM_DELIMITER variable to\n&quot;;&quot; for the same global effect.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;URI::QueryParam&quot; module can be loaded to add\nfurther methods to manipulate the form of a\n<small>URI.</small> See URI::QueryParam for details.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;query_keywords <br>\n$uri-&gt;query_keywords( $keywords, ... ) <br>\n$uri-&gt;query_keywords( \\@keywords )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns query\ncomponents that use the keywords separated by &quot;+&quot;\nformat.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The keywords\ncan be set either by passing separate keywords directly or\nby passing a reference to an array of keywords. Passing an\nempty array removes the query component, whereas passing no\narguments at all leaves the component unchanged. The old\nvalue is always returned as a list of separate words.</p>\n\n<h2>SERVER METHODS\n<a name=\"SERVER METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For schemes\nwhere the <i>authority</i> component denotes an Internet\nhost, the following methods are available in addition to the\ngeneric methods. <br>\n$uri-&gt;userinfo <br>\n$uri-&gt;userinfo( $new_userinfo )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the escaped\nuserinfo part of the authority component.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For some\nschemes this is a user name and a password separated by a\ncolon. This practice is not recommended. Embedding passwords\nin clear text (such as <small>URI</small> ) has proven to be\na security risk in almost every case where it has been\nused.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;host <br>\n$uri-&gt;host( $new_host )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the unescaped\nhostname.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\n$new_host string ends with a colon and a number, then this\nnumber also sets the port.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For IPv6\naddresses the brackets around the raw address is removed in\nthe return value from $uri-&gt;host. When setting the host\nattribute to an IPv6 address you can use a raw address or\none enclosed in brackets. The address needs to be enclosed\nin brackets if you want to pass in a new port value as\nwell.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;ihost</p>\n\n<p style=\"margin-left:17%;\">Returns the host in Unicode\nform. Any <small>IDNA</small> A-labels are turned into\nU-labels.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;port <br>\n$uri-&gt;port( $new_port )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the port. The\nport is a simple integer that should be greater than 0.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a port is\nnot specified explicitly in the <small>URI,</small> then the\n<small>URI</small> scheme&rsquo;s default port is returned.\nIf you don&rsquo;t want the default port substituted, then\nyou can use the $uri-&gt;_port method instead.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;host_port <br>\n$uri-&gt;host_port( $new_host_port )</p>\n\n<p style=\"margin-left:17%;\">Sets and returns the host and\nport as a single unit. The returned value includes a port,\neven if it matches the default port. The host part and the\nport part are separated by a colon: &quot;:&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For IPv6\naddresses the bracketing is preserved; thus\n<small>URI-</small>\n&gt;new(&quot;http://[::1]/&quot;)-&gt;host_port returns\n&quot;[::1]:80&quot;. Contrast this with $uri-&gt;host which\nwill remove the brackets.</p>\n\n<p style=\"margin-left:11%;\">$uri-&gt;default_port</p>\n\n<p style=\"margin-left:17%;\">Returns the default port of the\n<small>URI</small> scheme to which $uri belongs. For\n<i>http</i> this is the number 80, for <i>ftp</i> this is\nthe number 21, etc. The default port for a scheme can not be\nchanged.</p>\n\n<h2>SCHEME-SPECIFIC SUPPORT\n<a name=\"SCHEME-SPECIFIC SUPPORT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Scheme-specific\nsupport is provided for the following <small>URI</small>\nschemes. For &quot;URI&quot; objects that do not belong to\none of these, you can only use the common and generic\nmethods. <b><br>\ndata</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>data</i>\n<small>URI</small> scheme is specified in <small>RFC\n2397.</small> It allows inclusion of small data items as\n&quot;immediate&quot; data, as if it had been included\nexternally.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the data scheme support the common\nmethods and two new methods to access their scheme-specific\ncomponents: $uri-&gt;media_type and $uri-&gt;data. See\nURI::data for details.</p>\n\n<p style=\"margin-left:11%;\"><b>file</b>:</p>\n\n<p style=\"margin-left:17%;\">An old specification of the\n<i>file</i> <small>URI</small> scheme is found in <small>RFC\n1738. A</small> new <small>RFC 2396</small> based\nspecification in not available yet, but file\n<small>URI</small> references are in common use.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the file scheme support the common and\ngeneric methods. In addition, they provide two methods for\nmapping file URIs back to local file names; $uri-&gt;file\nand $uri-&gt;dir. See URI::file for details.</p>\n\n<p style=\"margin-left:11%;\"><b>ftp</b>:</p>\n\n<p style=\"margin-left:17%;\">An old specification of the\n<i>ftp</i> <small>URI</small> scheme is found in <small>RFC\n1738.</small> A new <small>RFC 2396</small> based\nspecification in not available yet, but ftp\n<small>URI</small> references are in common use.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the ftp scheme support the common,\ngeneric and server methods. In addition, they provide two\nmethods for accessing the userinfo sub-components:\n$uri-&gt;user and $uri-&gt;password.</p>\n\n<p style=\"margin-left:11%;\"><b>gopher</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>gopher</i>\n<small>URI</small> scheme is specified in\n&lt;draft-murali-url-gopher-1996-12-04&gt; and will\nhopefully be available as a <small>RFC 2396</small> based\nspecification.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the gopher scheme support the common,\ngeneric and server methods. In addition, they support some\nmethods for accessing gopher-specific path components:\n$uri-&gt;gopher_type, $uri-&gt;selector, $uri-&gt;search,\n$uri-&gt;string.</p>\n\n<p style=\"margin-left:11%;\"><b>http</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>http</i>\n<small>URI</small> scheme is specified in <small>RFC\n2616.</small> The scheme is used to reference resources\nhosted by <small>HTTP</small> servers.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the http scheme support the common,\ngeneric and server methods.</p>\n\n<p style=\"margin-left:11%;\"><b>https</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>https</i>\n<small>URI</small> scheme is a Netscape invention which is\ncommonly implemented. The scheme is used to reference\n<small>HTTP</small> servers through <small>SSL</small>\nconnections. Its syntax is the same as http, but the default\nport is different.</p>\n\n<p style=\"margin-left:11%;\"><b>ldap</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>ldap</i>\n<small>URI</small> scheme is specified in <small>RFC 2255.\nLDAP</small> is the Lightweight Directory Access Protocol.\nAn ldap <small>URI</small> describes an <small>LDAP</small>\nsearch operation to perform to retrieve information from an\n<small>LDAP</small> directory.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the ldap scheme support the common,\ngeneric and server methods as well as ldap-specific methods:\n$uri-&gt;dn, $uri-&gt;attributes, $uri-&gt;scope,\n$uri-&gt;filter, $uri-&gt;extensions. See URI::ldap for\ndetails.</p>\n\n<p style=\"margin-left:11%;\"><b>ldapi</b>:</p>\n\n<p style=\"margin-left:17%;\">Like the <i>ldap</i>\n<small>URI</small> scheme, but uses a <small>UNIX</small>\ndomain socket. The server methods are not supported, and the\nlocal socket path is available as $uri-&gt;un_path. The\n<i>ldapi</i> scheme is used by the OpenLDAP package. There\nis no real specification for it, but it is mentioned in\nvarious OpenLDAP manual pages.</p>\n\n<p style=\"margin-left:11%;\"><b>ldaps</b>:</p>\n\n<p style=\"margin-left:17%;\">Like the <i>ldap</i>\n<small>URI</small> scheme, but uses an <small>SSL</small>\nconnection. This scheme is deprecated, as the preferred way\nis to use the <i>start_tls</i> mechanism.</p>\n\n<p style=\"margin-left:11%;\"><b>mailto</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>mailto</i>\n<small>URI</small> scheme is specified in <small>RFC\n2368.</small> The scheme was originally used to designate\nthe Internet mailing address of an individual or service. It\nhas (in <small>RFC 2368</small> ) been extended to allow\nsetting of other mail header fields and the message\nbody.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the mailto scheme support the common\nmethods and the generic query methods. In addition, they\nsupport the following mailto-specific methods: $uri-&gt;to,\n$uri-&gt;headers.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\n&quot;foo@example.com&quot; part of a mailto is <i>not</i>\nthe &quot;userinfo&quot; and &quot;host&quot; but instead\nthe &quot;path&quot;. This allows a mailto\n<small>URI</small> to contain multiple comma separated email\naddresses.</p>\n\n<p style=\"margin-left:11%;\"><b>mms</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>mms</i>\n<small>URL</small> specification can be found at\n&lt;http://sdp.ppona.com/&gt;. &quot;URI&quot; objects\nbelonging to the mms scheme support the common, generic, and\nserver methods, with the exception of userinfo and\nquery-related sub-components.</p>\n\n<p style=\"margin-left:11%;\"><b>news</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>news</i>, <i>nntp</i>\nand <i>snews</i> <small>URI</small> schemes are specified in\n&lt;draft-gilman-news-url-01&gt; and will hopefully be\navailable as an <small>RFC 2396</small> based specification\nsoon. (Update: as of April 2010, they are in <small>RFC\n5538</small>\n&lt;https://tools.ietf.org/html/rfc5538&gt;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the news scheme support the common,\ngeneric and server methods. In addition, they provide some\nmethods to access the path: $uri-&gt;group and\n$uri-&gt;message.</p>\n\n<p style=\"margin-left:11%;\"><b>nntp</b>:</p>\n\n<p style=\"margin-left:17%;\">See <i>news</i> scheme.</p>\n\n<p style=\"margin-left:11%;\"><b>nntps</b>:</p>\n\n<p style=\"margin-left:17%;\">See <i>news</i> scheme and\n<small>RFC 5538</small>\n&lt;https://tools.ietf.org/html/rfc5538&gt;.</p>\n\n<p style=\"margin-left:11%;\"><b>pop</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>pop</i>\n<small>URI</small> scheme is specified in <small>RFC\n2384.</small> The scheme is used to reference a\n<small>POP3</small> mailbox.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;URI&quot;\nobjects belonging to the pop scheme support the common,\ngeneric and server methods. In addition, they provide two\nmethods to access the userinfo components: $uri-&gt;user and\n$uri-&gt;auth</p>\n\n<p style=\"margin-left:11%;\"><b>rlogin</b>:</p>\n\n<p style=\"margin-left:17%;\">An old specification of the\n<i>rlogin</i> <small>URI</small> scheme is found in\n<small>RFC 1738.</small> &quot;URI&quot; objects belonging\nto the rlogin scheme support the common, generic and server\nmethods.</p>\n\n<p style=\"margin-left:11%;\"><b>rtsp</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>rtsp</i>\n<small>URL</small> specification can be found in section 3.2\nof <small>RFC 2326.</small> &quot;URI&quot; objects\nbelonging to the rtsp scheme support the common, generic,\nand server methods, with the exception of userinfo and\nquery-related sub-components.</p>\n\n<p style=\"margin-left:11%;\"><b>rtspu</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>rtspu</i>\n<small>URI</small> scheme is used to talk to\n<small>RTSP</small> servers over <small>UDP</small> instead\nof <small>TCP.</small> The syntax is the same as rtsp.</p>\n\n<p style=\"margin-left:11%;\"><b>rsync</b>:</p>\n\n<p style=\"margin-left:17%;\">Information about rsync is\navailable from &lt;http://rsync.samba.org/&gt;.\n&quot;URI&quot; objects belonging to the rsync scheme\nsupport the common, generic and server methods. In addition,\nthey provide methods to access the userinfo sub-components:\n$uri-&gt;user and $uri-&gt;password.</p>\n\n<p style=\"margin-left:11%;\"><b>sip</b>:</p>\n\n<p style=\"margin-left:17%;\">The <i>sip</i>\n<small>URI</small> specification is described in sections\n19.1 and 25 of <small>RFC 3261.</small> &quot;URI&quot;\nobjects belonging to the sip scheme support the common,\ngeneric, and server methods with the exception of path\nrelated sub-components. In addition, they provide two\nmethods to get and set <i>sip</i> parameters:\n$uri-&gt;params_form and $uri-&gt;params.</p>\n\n<p style=\"margin-left:11%;\"><b>sips</b>:</p>\n\n<p style=\"margin-left:17%;\">See <i>sip</i> scheme. Its\nsyntax is the same as sip, but the default port is\ndifferent.</p>\n\n<p style=\"margin-left:11%;\"><b>snews</b>:</p>\n\n<p style=\"margin-left:17%;\">See <i>news</i> scheme. Its\nsyntax is the same as news, but the default port is\ndifferent.</p>\n\n<p style=\"margin-left:11%;\"><b>telnet</b>:</p>\n\n<p style=\"margin-left:17%;\">An old specification of the\n<i>telnet</i> <small>URI</small> scheme is found in\n<small>RFC 1738.</small> &quot;URI&quot; objects belonging\nto the telnet scheme support the common, generic and server\nmethods.</p>\n\n<p style=\"margin-left:11%;\"><b>tn3270</b>:</p>\n\n<p style=\"margin-left:17%;\">These URIs are used like\n<i>telnet</i> URIs but for connections to <small>IBM</small>\nmainframes. &quot;URI&quot; objects belonging to the tn3270\nscheme support the common, generic and server methods.</p>\n\n<p style=\"margin-left:11%;\"><b>ssh</b>:</p>\n\n<p style=\"margin-left:17%;\">Information about ssh is\navailable at &lt;http://www.openssh.com/&gt;.\n&quot;URI&quot; objects belonging to the ssh scheme support\nthe common, generic and server methods. In addition, they\nprovide methods to access the userinfo sub-components:\n$uri-&gt;user and $uri-&gt;password.</p>\n\n<p style=\"margin-left:11%;\"><b>sftp</b>:</p>\n\n<p style=\"margin-left:17%;\">&quot;URI&quot; objects\nbelonging to the sftp scheme support the common, generic and\nserver methods. In addition, they provide methods to access\nthe userinfo sub-components: $uri-&gt;user and\n$uri-&gt;password.</p>\n\n<p style=\"margin-left:11%;\"><b>urn</b>:</p>\n\n<p style=\"margin-left:17%;\">The syntax of Uniform Resource\nNames is specified in <small>RFC 2141.</small>\n&quot;URI&quot; objects belonging to the urn scheme provide\nthe common methods, and also the methods $uri-&gt;nid and\n$uri-&gt;nss, which return the Namespace Identifier and the\nNamespace-Specific String respectively.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The Namespace\nIdentifier basically works like the Scheme identifier of\nURIs, and further divides the <small>URN</small> namespace.\nNamespace Identifier assignments are maintained at\n&lt;http://www.iana.org/assignments/urn-namespaces&gt;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Letter case is\nnot significant for the Namespace Identifier. It is always\nreturned in lower case by the $uri-&gt;nid method. The\n$uri-&gt;_nid method can be used if you want it in its\noriginal case.</p>\n\n<p style=\"margin-left:11%;\"><b>urn</b>:<b>isbn</b>:</p>\n\n<p style=\"margin-left:17%;\">The &quot;urn:isbn:&quot;\nnamespace contains International Standard Book Numbers\n(ISBNs) and is described in <small>RFC 3187.</small> A\n&quot;URI&quot; object belonging to this namespace has the\nfollowing extra methods (if the Business::ISBN module is\navailable): $uri-&gt;isbn, $uri-&gt;isbn_publisher_code,\n$uri-&gt;isbn_group_code (formerly isbn_country_code, which\nis still supported by issues a deprecation warning),\n$uri-&gt;isbn_as_ean.</p>\n\n<p style=\"margin-left:11%;\"><b>urn</b>:<b>oid</b>:</p>\n\n<p style=\"margin-left:17%;\">The &quot;urn:oid:&quot;\nnamespace contains Object Identifiers (OIDs) and is\ndescribed in <small>RFC 3061.</small> An object identifier\nconsists of sequences of digits separated by dots. A\n&quot;URI&quot; object belonging to this namespace has an\nadditional method called $uri-&gt;oid that can be used to\nget/set the oid value. In a list context, oid numbers are\nreturned as separate elements.</p>\n\n<h2>CONFIGURATION VARIABLES\n<a name=\"CONFIGURATION VARIABLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nconfiguration variables influence how the class and its\nmethods behave: <br>\n$URI::ABS_ALLOW_RELATIVE_SCHEME</p>\n\n<p style=\"margin-left:17%;\">Some older parsers used to\nallow the scheme name to be present in the relative\n<small>URL</small> if it was the same as the base\n<small>URL</small> scheme. <small>RFC 2396</small> says that\nthis should be avoided, but you can enable this old\nbehaviour by setting the $URI::ABS_ALLOW_RELATIVE_SCHEME\nvariable to a <small>TRUE</small> value. The difference is\ndemonstrated by the following examples:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">URI-&gt;new(&quot;http:foo&quot;)-&gt;abs(&quot;http://host/a/b&quot;)\n<br>\n==&gt; &quot;http:foo&quot; <br>\nlocal $URI::ABS_ALLOW_RELATIVE_SCHEME = 1; <br>\n\nURI-&gt;new(&quot;http:foo&quot;)-&gt;abs(&quot;http://host/a/b&quot;)\n<br>\n==&gt; &quot;http:/host/a/foo&quot;</p>\n\n\n<p style=\"margin-left:11%;\">$URI::ABS_REMOTE_LEADING_DOTS</p>\n\n<p style=\"margin-left:17%;\">You can also have the\n<b>abs()</b> method ignore excess &quot;..&quot; segments in\nthe relative <small>URI</small> by setting\n$URI::ABS_REMOTE_LEADING_DOTS to a <small>TRUE</small>\nvalue. The difference is demonstrated by the following\nexamples:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">URI-&gt;new(&quot;../../../foo&quot;)-&gt;abs(&quot;http://host/a/b&quot;)\n<br>\n==&gt; &quot;http://host/../../foo&quot; <br>\nlocal $URI::ABS_REMOTE_LEADING_DOTS = 1; <br>\n\nURI-&gt;new(&quot;../../../foo&quot;)-&gt;abs(&quot;http://host/a/b&quot;)\n<br>\n==&gt; &quot;http://host/foo&quot;</p>\n\n\n<p style=\"margin-left:11%;\">$URI::DEFAULT_QUERY_FORM_DELIMITER</p>\n\n<p style=\"margin-left:17%;\">This value can be set to\n&quot;;&quot; to have the query form &quot;key=value&quot;\npairs delimited by &quot;;&quot; instead of\n&quot;&amp;&quot; which is the default.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are some\nthings that are not quite right:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Using regexp variables like $1 directly as arguments to\nthe <small>URI</small> accessor methods does not work too\nwell with current perl implementations. I would argue that\nthis is actually a bug in perl. The workaround is to quote\nthem. Example:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/(...)/ || die;\n<br>\n$u-&gt;query(&quot;$1&quot;);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The escaping (percent encoding)\nof chars in the 128 .. 255 range passed to the\n<small>URI</small> constructor or when setting\n<small>URI</small> parts using the accessor methods depend\non the state of the internal <small>UTF8</small> flag (see\nutf8::is_utf8) of the string passed. If the\n<small>UTF8</small> flag is set the <small>UTF-8</small>\nencoded version of the character is percent encoded. If the\n<small>UTF8</small> flag isn&rsquo;t set the Latin-1 version\n(byte) of the character is percent encoded. This basically\nexposes the internal encoding of Perl strings.</p></td></tr>\n</table>\n\n<h2>PARSING URIs WITH REGEXP\n<a name=\"PARSING URIs WITH REGEXP\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">As an\nalternative to this module, the following (official) regular\nexpression can be used to decode a <small>URI:</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my($scheme,\n$authority, $path, $query, $fragment) = <br>\n$uri =~\nm|(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?|;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;URI::Split&quot; module provides the function\n<b>uri_split()</b> as a readable alternative.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">URI::file,\nURI::WithBase, URI::QueryParam, URI::Escape, URI::Split,\nURI::Heuristic</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>RFC\n2396:</small> &quot;Uniform Resource Identifiers (\n<small>URI</small> ): Generic Syntax&quot;, Berners-Lee,\nFielding, Masinter, August 1998.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;http://www.iana.org/assignments/uri-schemes&gt;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;http://www.iana.org/assignments/urn-namespaces&gt;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;http://www.w3.org/Addressing/&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1995-2009 Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright 1995\nMartijn Koster.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n\n<h2>AUTHORS / ACKNOWLEDGMENTS\n<a name=\"AUTHORS / ACKNOWLEDGMENTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\nbased on the &quot;URI::URL&quot; module, which in turn was\n(distantly) based on the &quot;wwwurl.pl&quot; code in the\nlibwww-perl for perl4 developed by Roy Fielding, as part of\nthe Arcadia project at the University of California, Irvine,\nwith contributions from Brooks Cutter.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;URI::URL&quot;\nwas developed by Gisle Aas, Tim Bunce, Roy Fielding and\nMartijn Koster with input from other people on the\nlibwww-perl mailing list.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;URI&quot;\nand related subclasses was developed by Gisle Aas.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONSTRUCTORS\">CONSTRUCTORS</a>","<a href=\"#COMMON METHODS\">COMMON METHODS</a>","<a href=\"#GENERIC METHODS\">GENERIC METHODS</a>","<a href=\"#SERVER METHODS\">SERVER METHODS</a>","<a href=\"#SCHEME-SPECIFIC SUPPORT\">SCHEME-SPECIFIC SUPPORT</a>","<a href=\"#CONFIGURATION VARIABLES\">CONFIGURATION VARIABLES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#PARSING URIs WITH REGEXP\">PARSING URIs WITH REGEXP</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#AUTHORS / ACKNOWLEDGMENTS\">AUTHORS / ACKNOWLEDGMENTS</a>"],"level":3}