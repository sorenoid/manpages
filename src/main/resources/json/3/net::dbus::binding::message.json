{"name":"net::dbus::binding::message","description":"Net::DBus::Binding::Message\n- Base class for messages","body":"\n\n<h1 align=\"center\">Net::DBus::Binding::Message</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Binding::Message\n- Base class for messages</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sending a\nmessage</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $msg = new\nNet::DBus::Binding::Message::Signal; <br>\nmy $iterator = $msg-&gt;iterator; <br>\n$iterator-&gt;append_byte(132); <br>\n$iterator-&gt;append_int32(14241); <br>\n$connection-&gt;send($msg);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Provides a base\nclass for the different kinds of message that can be\nsent/received. Instances of this class are never\ninstantiated directly, rather one of the four sub-types\nNet::DBus::Binding::Message::Signal,\nNet::DBus::Binding::Message::MethodCall,\nNet::DBus::Binding::Message::MethodReturn,\nNet::DBus::Binding::Message::Error should be used.</p>\n\n<h2>CONSTANTS\n<a name=\"CONSTANTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nconstants are defined in this module. They are not exported\ninto the caller&rsquo;s namespace &amp; thus must be\nreferenced with their fully qualified package names\n<small><br>\nTYPE_ARRAY</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the array data type.</p>\n\n\n<p style=\"margin-left:11%;\"><small>TYPE_BOOLEAN</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the boolean data type.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_BYTE</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the byte data type.</p>\n\n\n<p style=\"margin-left:11%;\"><small>TYPE_DICT_ENTRY</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the dictionary entry data\ntype.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_DOUBLE</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the <small>IEEE</small>\ndouble precision floating point data type.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_INT16</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the signed 16 bit integer\ndata type.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_INT32</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the signed 32 bit integer\ndata type.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_INT64</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the signed 64 bit integer\ndata type.</p>\n\n\n<p style=\"margin-left:11%;\"><small>TYPE_OBJECT_PATH</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the object path data\ntype.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_STRING</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the <small>UTF-8</small>\nstring data type.</p>\n\n\n<p style=\"margin-left:11%;\"><small>TYPE_SIGNATURE</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the signature data type.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_STRUCT</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the struct data type.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_UINT16</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the unsigned 16 bit integer\ndata type.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_UINT32</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the unsigned 32 bit integer\ndata type.</p>\n\n<p style=\"margin-left:11%;\"><small>TYPE_UINT64</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the unsigned 64 bit integer\ndata type.</p>\n\n\n<p style=\"margin-left:11%;\"><small>TYPE_VARIANT</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the variant data type.</p>\n\n\n<p style=\"margin-left:11%;\"><small>TYPE_UNIX_FD</small></p>\n\n<p style=\"margin-left:17%;\">Constant representing the\nsignature value associated with the unix file descriptor\ndata type.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $msg =\nNet::DBus::Binding::Message-&gt;new(message =&gt;\n$rawmessage);</p>\n\n<p style=\"margin-left:17%;\">Creates a new message object,\ninitializing it with the underlying C message object given\nby the &quot;message&quot; object. This constructor is\nintended for internal use only, instead refer to one of the\nfour sub-types for this class for specific message types</p>\n\n<p style=\"margin-left:11%;\">my $type =\n$msg-&gt;get_type</p>\n\n<p style=\"margin-left:17%;\">Retrieves the type code for\nthis message. The returned value corresponds to one of the\nfour &quot;Net::DBus::Binding::Message::MESSAGE_TYPE_*&quot;\nconstants.</p>\n\n<p style=\"margin-left:11%;\">my $interface =\n$msg-&gt;get_interface</p>\n\n<p style=\"margin-left:17%;\">Retrieves the name of the\ninterface targeted by this message, possibly an empty string\nif there is no applicable interface for this message.</p>\n\n<p style=\"margin-left:11%;\">my $path =\n$msg-&gt;get_path</p>\n\n<p style=\"margin-left:17%;\">Retrieves the object path\nassociated with the message, possibly an empty string if\nthere is no applicable object for this message.</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$msg-&gt;get_destination</p>\n\n<p style=\"margin-left:17%;\">Retrieves the unique or\nwell-known bus name for client intended to be the recipient\nof the message. Possibly returns an empty string if the\nmessage is being broadcast to all clients.</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$msg-&gt;get_sender</p>\n\n<p style=\"margin-left:17%;\">Retireves the unique name of\nthe client sending the message</p>\n\n<p style=\"margin-left:11%;\">my $serial =\n$msg-&gt;get_serial</p>\n\n<p style=\"margin-left:17%;\">Retrieves the unique serial\nnumber of this message. The number is guaranteed unique for\nas long as the connection over which the message was sent\nremains open. May return zero, if the message is yet to be\nsent.</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$msg-&gt;get_member</p>\n\n<p style=\"margin-left:17%;\">For method calls, retrieves the\nname of the method to be invoked, while for signals,\nretrieves the name of the signal.</p>\n\n<p style=\"margin-left:11%;\">my $sig =\n$msg-&gt;get_signature</p>\n\n<p style=\"margin-left:17%;\">Retrieves a string representing\nthe type signature of the values packed into the body of the\nmessage.</p>\n\n<p style=\"margin-left:11%;\">$msg-&gt;set_sender($name)</p>\n\n<p style=\"margin-left:17%;\">Set the name of the client\nsending the message. The name must be the unique name of the\nclient.</p>\n\n\n<p style=\"margin-left:11%;\">$msg-&gt;set_destination($name)</p>\n\n<p style=\"margin-left:17%;\">Set the name of the intended\nrecipient of the message. This is typically used for signals\nto switch them from broadcast to unicast.</p>\n\n<p style=\"margin-left:11%;\">my $iterator =\n$msg-&gt;iterator;</p>\n\n<p style=\"margin-left:17%;\">Retrieves an iterator which can\nbe used for reading or writing fields of the message. The\nreturned object is an instance of the\n&quot;Net::DBus::Binding::Iterator&quot; class.</p>\n\n<p style=\"margin-left:11%;\">$boolean =\n$msg-&gt;<b>get_no_reply()</b></p>\n\n<p style=\"margin-left:17%;\">Gets the flag indicating\nwhether the message is expecting a reply to be sent.</p>\n\n\n<p style=\"margin-left:11%;\">$msg-&gt;set_no_reply($boolean)</p>\n\n<p style=\"margin-left:17%;\">Toggles the flag indicating\nwhether the message is expecting a reply to be sent. All\nmethod call messages expect a reply by default. By toggling\nthis flag the communication latency is reduced by removing\nthe need for the client to wait</p>\n\n<p style=\"margin-left:11%;\">my @values =\n$msg-&gt;get_args_list</p>\n\n<p style=\"margin-left:17%;\">De-marshall all the values in\nthe body of the message, using the message signature to\nidentify data types. The values are returned as a list.</p>\n\n\n<p style=\"margin-left:11%;\">$msg-&gt;append_args_list(@values)</p>\n\n<p style=\"margin-left:17%;\">Append a set of values to the\nbody of the message. Values will be encoded as either a\nstring, list or dictionary as appropriate to their Perl data\ntype. For more specific data typing needs, the\nNet::DBus::Binding::Iterator object should be used\ninstead.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel P.\nBerrange</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2004-2011 Daniel P. Berrange</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Binding::Server,\nNet::DBus::Binding::Connection,\nNet::DBus::Binding::Message::Signal,\nNet::DBus::Binding::Message::MethodCall,\nNet::DBus::Binding::Message::MethodReturn,\nNet::DBus::Binding::Message::Error</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONSTANTS\">CONSTANTS</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}