{"name":"dpkg::version","body":"\n\n<h1 align=\"center\">Dpkg::Version</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Version -\nhandling and comparing dpkg-style version numbers</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nDpkg::Version module provides pure-Perl routines to compare\ndpkg-style version numbers (as used in Debian packages) and\nalso an object oriented interface overriding perl operators\nto do the right thing when you compare Dpkg::Version object\nbetween them.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$v =\nDpkg::Version-&gt;new($version, %opts)</p>\n\n<p style=\"margin-left:17%;\">Create a new Dpkg::Version\nobject corresponding to the version indicated in the string\n(scalar) $version. By default it will accepts any string and\nconsider it as a valid version. If you pass the option\n&quot;check =&gt; 1&quot;, it will return undef if the\nversion is invalid (see version_check for details).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can always\ncall $v-&gt;<b>is_valid()</b> later on to verify that the\nversion is valid.</p>\n\n<p style=\"margin-left:11%;\">boolean evaluation</p>\n\n<p style=\"margin-left:17%;\">When the Dpkg::Version object\nis used in a boolean evaluation (for example in &quot;if\n($v)&quot; or &quot;$v ? \\&quot;$v\\&quot; :\n&rsquo;default&rsquo;&quot;) it returns true if the version\nstored is valid ($v-&gt;<b>is_valid()</b>) and false\notherwise.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Notice</b>:\nBetween dpkg 1.15.7.2 and 1.19.1 this overload used to\nreturn $v-&gt;<b>as_string()</b> if\n$v-&gt;<b>is_valid()</b>, a breaking change in behavior that\ncaused &quot;0&quot; versions to be evaluated as false. To\ncatch any possibly intended code that relied on those\nsemantics, this overload will emit a warning with category\n&quot;Dpkg::Version::semantic_change::overload::bool&quot;\nuntil dpkg 1.20.x. Once fixed, or for already valid code the\nwarning can be quiesced with</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">no if\n$Dpkg::Version::VERSION ge '1.02', <br>\nwarnings =&gt;\nqw(Dpkg::Version::semantic_change::overload::bool);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">added after the\n&quot;use Dpkg::Version&quot;.</p>\n\n<p style=\"margin-left:11%;\">$v-&gt;<b>is_valid()</b></p>\n\n<p style=\"margin-left:17%;\">Returns true if the version is\nvalid, false otherwise.</p>\n\n<p style=\"margin-left:11%;\">$v-&gt;<b>epoch()</b>,\n$v-&gt;<b>version()</b>, $v-&gt;<b>revision()</b></p>\n\n<p style=\"margin-left:17%;\">Returns the corresponding part\nof the full version string.</p>\n\n<p style=\"margin-left:11%;\">$v-&gt;<b>is_native()</b></p>\n\n<p style=\"margin-left:17%;\">Returns true if the version is\nnative, false if it has a revision.</p>\n\n<p style=\"margin-left:11%;\">$v1 &lt;=&gt; $v2, $v1 &lt;\n$v2, $v1 &lt;= $v2, $v1 &gt; $v2, $v1 &gt;= $v2</p>\n\n<p style=\"margin-left:17%;\">Numerical comparison of various\nversions numbers. One of the two operands needs to be a\nDpkg::Version, the other one can be anything provided that\nits string representation is a version number.</p>\n\n<p style=\"margin-left:11%;\">&quot;$v&quot;,\n$v-&gt;<b>as_string()</b>, $v-&gt;as_string(%options)</p>\n\n<p style=\"margin-left:17%;\">Accepts an optional option hash\nreference, affecting the string conversion.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options: <br>\nomit_epoch (defaults to 0)</p>\n\n<p style=\"margin-left:29%;\">Omit the epoch, if present, in\nthe output string.</p>\n\n<p style=\"margin-left:17%;\">omit_revision (defaults to\n0)</p>\n\n<p style=\"margin-left:29%;\">Omit the revision, if present,\nin the output string.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nstring representation of the version number.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All the\nfunctions are exported by default. <br>\nversion_compare($a, $b)</p>\n\n<p style=\"margin-left:17%;\">Returns -1 if $a is earlier\nthan $b, 0 if they are equal and 1 if $a is later than\n$b.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If $a or $b are\nnot valid version numbers, it dies with an error.</p>\n\n<p style=\"margin-left:11%;\">version_compare_relation($a,\n$rel, $b)</p>\n\n<p style=\"margin-left:17%;\">Returns the result (0 or 1) of\nthe given comparison operation. This function is implemented\non top of <b>version_compare()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Allowed values\nfor $rel are the exported constants <small>REL_GT, REL_GE,\nREL_EQ, REL_LE, REL_LT.</small> Use\n<b>version_normalize_relation()</b> if you have an input\nstring containing the operator.</p>\n\n<p style=\"margin-left:11%;\">$rel =\nversion_normalize_relation($rel_string)</p>\n\n<p style=\"margin-left:17%;\">Returns the normalized constant\nof the relation $rel (a value among <small>REL_GT, REL_GE,\nREL_EQ, REL_LE</small> and <small>REL_LT</small> ).\nSupported relations names in input are: &quot;gt&quot;,\n&quot;ge&quot;, &quot;eq&quot;, &quot;le&quot;,\n&quot;lt&quot;, &quot;&gt;&gt;&quot;, &quot;&gt;=&quot;,\n&quot;=&quot;, &quot;&lt;=&quot;, &quot;&lt;&lt;&quot;.\n&quot;&gt;&quot; and &quot;&lt;&quot; are also supported but\nshould not be used as they are obsolete aliases of\n&quot;&gt;=&quot; and &quot;&lt;=&quot;.</p>\n\n<p style=\"margin-left:11%;\">version_compare_string($a,\n$b)</p>\n\n<p style=\"margin-left:17%;\">String comparison function used\nfor comparing non-numerical parts of version numbers.\nReturns -1 if $a is earlier than $b, 0 if they are equal and\n1 if $a is later than $b.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;~&quot; character always sort lower than anything\nelse. Digits sort lower than non-digits. Among remaining\ncharacters alphabetic characters (A-Z, a-z) sort lower than\nthe other ones. Within each range, the <small>ASCII</small>\ndecimal value of the character is used to sort between\ncharacters.</p>\n\n<p style=\"margin-left:11%;\">version_compare_part($a,\n$b)</p>\n\n<p style=\"margin-left:17%;\">Compare two corresponding\nsub-parts of a version number (either upstream version or\ndebian revision).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Each parameter\nis split by <b>version_split_digits()</b> and resulting\nitems are compared together. As soon as a difference\nhappens, it returns -1 if $a is earlier than $b, 0 if they\nare equal and 1 if $a is later than $b.</p>\n\n<p style=\"margin-left:11%;\">@items =\nversion_split_digits($version)</p>\n\n<p style=\"margin-left:17%;\">Splits a string in items that\nare each entirely composed either of digits or of\nnon-digits. For instance for &quot;1.024~beta1+svn234&quot;\nit would return (&quot;1&quot;, &quot;.&quot;,\n&quot;024&quot;, &quot;~beta&quot;, &quot;1&quot;,\n&quot;+svn&quot;, &quot;234&quot;).</p>\n\n<p style=\"margin-left:11%;\">($ok, $msg) =\nversion_check($version) <br>\n$ok = version_check($version)</p>\n\n<p style=\"margin-left:17%;\">Checks the validity of $version\nas a version number. Returns 1 in $ok if the version is\nvalid, 0 otherwise. In the latter case, $msg contains a\ndescription of the problem with the $version scalar.</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.03\n(dpkg 1.20.0)</b> <br>\nRemove deprecation warning from semantic change in 1.02.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.02\n(dpkg 1.19.1)</b> <br>\nSemantic change: bool evaluation semantics restored to their\noriginal behavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.01\n(dpkg 1.17.0)</b> <br>\nNew argument: Accept an options argument in\n$v-&gt;<b>as_string()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">New method:\n$v-&gt;<b>is_native()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.15.6)</b> <br>\nMark the module as public.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#CHANGES\">CHANGES</a>"],"level":3}