{"name":"http::headers::util","description":"HTTP::Headers::Util\n- Header value parsing utility functions\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\nversion\n6.36","body":"\n\n<h1 align=\"center\">HTTP::Headers::Util</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Headers::Util\n- Header value parsing utility functions</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.36</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTTP::Headers::Util qw(split_header_words); <br>\n@values =\nsplit_header_words($h-&gt;header(&quot;Content-Type&quot;));</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides a few functions that helps parsing and construction\nof valid <small>HTTP</small> header values. None of the\nfunctions are exported by default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are available: <br>\nsplit_header_words( @header_values )</p>\n\n<p style=\"margin-left:17%;\">This function will parse the\nheader values given as argument into a list of anonymous\narrays containing key/value pairs. The function knows how to\ndeal with &quot;,&quot;, &quot;;&quot; and &quot;=&quot; as\nwell as quoted values after &quot;=&quot;. A list of space\nseparated tokens are parsed as if they were separated by\n&quot;;&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\n@header_values passed as argument contains multiple values,\nthen they are treated as if they were a single value\nseparated by comma &quot;,&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This means that\nthis function is useful for parsing header fields that\nfollow this syntax ( <small>BNF</small> as from the\n<small>HTTP/1.1</small> specification, but we relax the\nrequirement for tokens).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">headers =\n#header <br>\nheader = (token | parameter) *( [&quot;;&quot;] (token |\nparameter)) <br>\ntoken = 1*&lt;any CHAR except CTLs or separators&gt; <br>\nseparators = &quot;(&quot; | &quot;)&quot; |\n&quot;&lt;&quot; | &quot;&gt;&quot; | &quot;@&quot; <br>\n| &quot;,&quot; | &quot;;&quot; | &quot;:&quot; |\n&quot;\\&quot; | &lt;&quot;&gt; <br>\n| &quot;/&quot; | &quot;[&quot; | &quot;]&quot; |\n&quot;?&quot; | &quot;=&quot; <br>\n| &quot;{&quot; | &quot;}&quot; | SP | HT <br>\nquoted-string = ( &lt;&quot;&gt; *(qdtext | quoted-pair )\n&lt;&quot;&gt; ) <br>\nqdtext = &lt;any TEXT except &lt;&quot;&gt;&gt; <br>\nquoted-pair = &quot;\\&quot; CHAR <br>\nparameter = attribute &quot;=&quot; value <br>\nattribute = token <br>\nvalue = token | quoted-string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Each\n<i>header</i> is represented by an anonymous array of\nkey/value pairs. The keys will be all be forced to lower\ncase. The value for a simple token (not part of a parameter)\nis &quot;undef&quot;. Syntactically incorrect headers will\nnot necessarily be parsed as you would want.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is easier\nto describe with some examples:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">split_header_words('foo=&quot;bar&quot;;\nport=&quot;80,81&quot;; DISCARD, BAR=baz'); <br>\nsplit_header_words('text/html;\ncharset=&quot;iso-8859-1&quot;'); <br>\nsplit_header_words('Basic\nrealm=&quot;\\\\&quot;foo\\\\\\\\bar\\\\&quot;&quot;');</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">will return</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">[foo=&gt;'bar',\nport=&gt;'80,81', discard=&gt; undef], [bar=&gt;'baz' ] <br>\n['text/html' =&gt; undef, charset =&gt; 'iso-8859-1'] <br>\n[basic =&gt; undef, realm =&gt;\n&quot;\\&quot;foo\\\\bar\\&quot;&quot;]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you\ndon&rsquo;t want the function to convert tokens and\nattribute keys to lower case you can call it as\n&quot;_split_header_words&quot; instead (with a leading\nunderscore).</p>\n\n<p style=\"margin-left:11%;\">join_header_words( @arrays\n)</p>\n\n<p style=\"margin-left:17%;\">This will do the opposite of\nthe conversion done by <b>split_header_words()</b>. It takes\na list of anonymous arrays as arguments (or a list of\nkey/value pairs) and produces a single header value.\nAttribute values are quoted if needed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">join_header_words([&quot;text/plain&quot;\n=&gt; undef, charset =&gt; &quot;iso-8859/1&quot;]); <br>\njoin_header_words(&quot;text/plain&quot; =&gt; undef,\ncharset =&gt; &quot;iso-8859/1&quot;);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">will both\nreturn the string:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">text/plain;\ncharset=&quot;iso-8859/1&quot;</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1994 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}