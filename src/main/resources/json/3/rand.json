{"name":"rand","body":"\n\n<h1 align=\"center\">RAND</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">rand, rand_r,\nsrand - pseudo-random number generator</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdlib.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nrand(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nrand_r(unsigned int *</b><i>seedp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nsrand(unsigned int</b> <i>seed</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>rand_r</b>():</p>\n\n<p style=\"margin-left:17%;\">Since glibc 2.24: <br>\n_POSIX_C_SOURCE &gt;= 199506L <br>\nGlibc 2.23 and earlier <br>\n_POSIX_C_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>rand</b>() function returns a pseudo-random integer in\nthe range 0 to <b>RAND_MAX</b> inclusive (i.e., the\nmathematical range [0,&nbsp;<b>RAND_MAX</b>]).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>srand</b>() function sets its argument as the seed for a\nnew sequence of pseudo-random integers to be returned by\n<b>rand</b>(). These sequences are repeatable by calling\n<b>srand</b>() with the same seed value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no seed\nvalue is provided, the <b>rand</b>() function is\nautomatically seeded with a value of 1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>rand</b>() is not reentrant, since it uses hidden state\nthat is modified on each call. This might just be the seed\nvalue to be used by the next call, or it might be something\nmore elaborate. In order to get reproducible behavior in a\nthreaded application, this state must be made explicit; this\ncan be done using the reentrant function\n<b>rand_r</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Like\n<b>rand</b>(), <b>rand_r</b>() returns a pseudo-random\ninteger in the range [0,&nbsp;<b>RAND_MAX</b>]. The\n<i>seedp</i> argument is a pointer to an <i>unsigned int</i>\nthat is used to store state between calls. If\n<b>rand_r</b>() is called with the same initial value for\nthe integer pointed to by <i>seedp</i>, and that value is\nnot modified between calls, then the same pseudo-random\nsequence will result.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value\npointed to by the <i>seedp</i> argument of <b>rand_r</b>()\nprovides only a very small amount of state, so this function\nwill be a weak pseudo-random generator. Try\n<a href=\"https://man.page/3/drand48_r\">drand48_r(3)</a> instead.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>rand</b>() and <b>rand_r</b>() functions return a value\nbetween 0 and <b>RAND_MAX</b> (inclusive). The\n<b>srand</b>() function returns no value.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3391171.png\" alt=\"Image grohtml-3391171.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>rand</b>() and <b>srand</b>() conform to SVr4, 4.3BSD,\nC89, C99, POSIX.1-2001. The function <b>rand_r</b>() is from\nPOSIX.1-2001. POSIX.1-2008 marks <b>rand_r</b>() as\nobsolete.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The versions of\n<b>rand</b>() and <b>srand</b>() in the Linux C Library use\nthe same random number generator as <a href=\"https://man.page/3/random\">random(3)</a> and\n<a href=\"https://man.page/3/srandom\">srandom(3)</a>, so the lower-order bits should be as\nrandom as the higher-order bits. However, on older\n<b>rand</b>() implementations, and on current\nimplementations on different systems, the lower-order bits\nare much less random than the higher-order bits. Do not use\nthis function in applications intended to be portable when\ngood randomness is needed. (Use <a href=\"https://man.page/3/random\">random(3)</a>\ninstead.)</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001\ngives the following example of an implementation of\n<b>rand</b>() and <b>srand</b>(), possibly useful when one\nneeds the same sequence on two different machines.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">static unsigned\nlong next = 1;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* RAND_MAX\nassumed to be 32767 */ <br>\nint myrand(void) { <br>\nnext = next * 1103515245 + 12345; <br>\nreturn((unsigned)(next/65536) % 32768); <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void\nmysrand(unsigned int seed) { <br>\nnext = seed; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nprogram can be used to display the pseudo-random sequence\nproduced by <b>rand</b>() when given a particular seed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#include\n&lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint r, nloops; <br>\nunsigned int seed;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if (argc != 3)\n{ <br>\nfprintf(stderr, &quot;Usage: %s &lt;seed&gt;\n&lt;nloops&gt;\\n&quot;, argv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">seed =\natoi(argv[1]); <br>\nnloops = atoi(argv[2]);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">srand(seed);\n<br>\nfor (int j = 0; j &lt; nloops; j++) { <br>\nr = rand(); <br>\nprintf(&quot;%d\\n&quot;, r); <br>\n}</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/drand48\">drand48(3)</a>,\n<a href=\"https://man.page/3/random\">random(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}