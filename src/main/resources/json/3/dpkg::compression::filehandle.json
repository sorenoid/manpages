{"name":"dpkg::compression::filehandle","description":"Dpkg::Compression::FileHandle\n- class dealing transparently with file compression","body":"\n\n<h1 align=\"center\">Dpkg::Compression::FileHandle</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Compression::FileHandle\n- class dealing transparently with file compression</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nDpkg::Compression::FileHandle; <br>\nmy ($fh, @lines); <br>\n$fh = Dpkg::Compression::FileHandle-&gt;new(filename =&gt;\n'sample.gz'); <br>\nprint $fh &quot;Something\\n&quot;; <br>\nclose $fh; <br>\n$fh = Dpkg::Compression::FileHandle-&gt;new(); <br>\nopen($fh, '&gt;', 'sample.bz2'); <br>\nprint $fh &quot;Something\\n&quot;; <br>\nclose $fh; <br>\n$fh = Dpkg::Compression::FileHandle-&gt;new(); <br>\n$fh-&gt;open('sample.xz', 'w'); <br>\n$fh-&gt;print(&quot;Something\\n&quot;); <br>\n$fh-&gt;close(); <br>\n$fh = Dpkg::Compression::FileHandle-&gt;new(filename =&gt;\n'sample.gz'); <br>\n@lines = &lt;$fh&gt;; <br>\nclose $fh; <br>\n$fh = Dpkg::Compression::FileHandle-&gt;new(); <br>\nopen($fh, '&lt;', 'sample.bz2'); <br>\n@lines = &lt;$fh&gt;; <br>\nclose $fh; <br>\n$fh = Dpkg::Compression::FileHandle-&gt;new(); <br>\n$fh-&gt;open('sample.xz', 'r'); <br>\n@lines = $fh-&gt;getlines(); <br>\n$fh-&gt;close();</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Compression::FileHandle\nis a class that can be used like any filehandle and that\ndeals transparently with compressed files. By default, the\ncompression scheme is guessed from the filename but you can\noverride this behaviour with the method\n&quot;set_compression&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you\ndon&rsquo;t open the file explicitly, it will be auto-opened\non the first read or write operation based on the filename\nset at creation time (or later with the\n&quot;set_filename&quot; method).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once a file has\nbeen opened, the filehandle must be closed before being able\nto open another file.</p>\n\n<h2>STANDARD FUNCTIONS\n<a name=\"STANDARD FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The standard\nfunctions acting on filehandles should accept a\nDpkg::Compression::FileHandle object transparently including\n&quot;open&quot; (only when using the variant with 3\nparameters), &quot;close&quot;, &quot;binmode&quot;,\n&quot;eof&quot;, &quot;fileno&quot;, &quot;getc&quot;,\n&quot;print&quot;, &quot;printf&quot;, &quot;read&quot;,\n&quot;sysread&quot;, &quot;say&quot;, &quot;write&quot;,\n&quot;syswrite&quot;, &quot;seek&quot;, &quot;sysseek&quot;,\n&quot;tell&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note however\nthat &quot;seek&quot; and &quot;sysseek&quot; will only work\non uncompressed files as compressed files are really pipes\nto the compressor programs and you can&rsquo;t seek on a\npipe.</p>\n\n<h2>FileHandle METHODS\n<a name=\"FileHandle METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The class\ninherits from IO::File so all methods that work on this\nclass should work for Dpkg::Compression::FileHandle too.\nThere may be exceptions though.</p>\n\n<h2>PUBLIC METHODS\n<a name=\"PUBLIC METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$fh =\nDpkg::Compression::FileHandle-&gt;new(%opts)</p>\n\n<p style=\"margin-left:17%;\">Creates a new filehandle\nsupporting on-the-fly compression/decompression. Supported\noptions are &quot;filename&quot;, &quot;compression&quot;,\n&quot;compression_level&quot; (see respective set_*\nfunctions) and &quot;add_comp_ext&quot;. If\n&quot;add_comp_ext&quot; evaluates to true, then the\nextension corresponding to the selected compression scheme\nis automatically added to the recorded filename. It&rsquo;s\nobviously incompatible with automatic detection of the\ncompression method.</p>\n\n<p style=\"margin-left:11%;\">$fh-&gt;ensure_open($mode,\n%opts)</p>\n\n<p style=\"margin-left:17%;\">Ensure the file is opened in\nthe requested mode (&quot;r&quot; for read and &quot;w&quot;\nfor write). The options are passed down to the\ncompressor&rsquo;s <b>spawn()</b> call, if one is used.\nOpens the file with the recorded filename if needed. If the\nfile is already open but not in the requested mode, then it\nerrors out.</p>\n\n\n<p style=\"margin-left:11%;\">$fh-&gt;set_compression($comp)</p>\n\n<p style=\"margin-left:17%;\">Defines the compression method\nused. $comp should one of the methods supported by\n<b>Dpkg::Compression</b> or &quot;none&quot; or\n&quot;auto&quot;. &quot;none&quot; indicates that the file\nis uncompressed and &quot;auto&quot; indicates that the\nmethod must be guessed based on the filename extension\nused.</p>\n\n\n<p style=\"margin-left:11%;\">$fh-&gt;set_compression_level($level)</p>\n\n<p style=\"margin-left:17%;\">Indicate the desired\ncompression level. It should be a value accepted by the\nfunction &quot;compression_is_valid_level&quot; of\n<b>Dpkg::Compression</b>.</p>\n\n<p style=\"margin-left:11%;\">$fh-&gt;set_filename($name,\n[$add_comp_ext])</p>\n\n<p style=\"margin-left:17%;\">Use $name as filename when the\nfile must be opened/created. If $add_comp_ext is passed, it\nindicates whether the default extension of the compression\nmethod must be automatically added to the filename (or\nnot).</p>\n\n<p style=\"margin-left:11%;\">$file =\n$fh-&gt;<b>get_filename()</b></p>\n\n<p style=\"margin-left:17%;\">Returns the filename that would\nbe used when the filehandle must be opened (both in read and\nwrite mode). This function errors out if\n&quot;add_comp_ext&quot; is enabled while the compression\nmethod is set to &quot;auto&quot;. The returned filename\nincludes the extension of the compression method if\n&quot;add_comp_ext&quot; is enabled.</p>\n\n<p style=\"margin-left:11%;\">$ret =\n$fh-&gt;<b>use_compression()</b></p>\n\n<p style=\"margin-left:17%;\">Returns &quot;0&quot; if no\ncompression is used and the compression method used\notherwise. If the compression is set to &quot;auto&quot;,\nthe value returned depends on the extension of the filename\nobtained with the <b>get_filename</b> method.</p>\n\n<p style=\"margin-left:11%;\">$real_fh =\n$fh-&gt;<b>get_filehandle()</b></p>\n\n<p style=\"margin-left:17%;\">Returns the real underlying\nfilehandle. Useful if you want to pass it along in a derived\nclass.</p>\n\n<h2>DERIVED CLASSES\n<a name=\"DERIVED CLASSES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\ncreate a class that inherits from\nDpkg::Compression::FileHandle you must be aware that the\nobject is a reference to a <small>GLOB</small> that is\nreturned by <b>Symbol::gensym()</b> and as such it&rsquo;s\nnot a <small>HASH.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can store\ninternal data in a hash but you have to use\n&quot;*$self-&quot;{...}&gt; to access the associated hash\nlike in the example below:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub set_option\n{ <br>\nmy ($self, $value) = @_; <br>\n*$self-&gt;{option} = $value; <br>\n}</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.01\n(dpkg 1.17.11)</b> <br>\nNew argument: $fh-&gt;<b>ensure_open()</b> accepts an %opts\nargument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.15.6)</b> <br>\nMark the module as public.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#STANDARD FUNCTIONS\">STANDARD FUNCTIONS</a>","<a href=\"#FileHandle METHODS\">FileHandle METHODS</a>","<a href=\"#PUBLIC METHODS\">PUBLIC METHODS</a>","<a href=\"#DERIVED CLASSES\">DERIVED CLASSES</a>","<a href=\"#CHANGES\">CHANGES</a>"],"level":3}