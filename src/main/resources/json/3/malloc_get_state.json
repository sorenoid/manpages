{"name":"malloc_get_state","body":"\n\n<h1 align=\"center\">MALLOC_GET_STATE</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">malloc_get_state,\nmalloc_set_state - record and restore state of malloc\nimplementation</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;malloc.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*malloc_get_state(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmalloc_set_state(void *</b><i>state</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>Note</i></b>:\nthese function are removed in glibc version 2.25.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>malloc_get_state</b>() function records the current state\nof all <a href=\"https://man.page/3/malloc\">malloc(3)</a> internal bookkeeping variables (but\nnot the actual contents of the heap or the state of\n<a href=\"https://man.page/3/malloc_hook\">malloc_hook(3)</a> functions pointers). The state is\nrecorded in a system-dependent opaque data structure\ndynamically allocated via <a href=\"https://man.page/3/malloc\">malloc(3)</a>, and a pointer to\nthat data structure is returned as the function result. (It\nis the caller&rsquo;s responsibility to <a href=\"https://man.page/3/free\">free(3)</a> this\nmemory.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>malloc_set_state</b>() function restores the state of all\n<a href=\"https://man.page/3/malloc\">malloc(3)</a> internal bookkeeping variables to the\nvalues recorded in the opaque data structure pointed to by\n<i>state</i>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>malloc_get_state</b>() returns a pointer to a newly\nallocated opaque data structure. On error (for example,\nmemory could not be allocated for the data structure),\n<b>malloc_get_state</b>() returns NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>malloc_set_state</b>() returns 0. If the implementation\ndetects that <i>state</i> does not point to a correctly\nformed data structure, <b>malloc_set_state</b>() returns -1.\nIf the implementation detects that the version of the data\nstructure referred to by <i>state</i> is a more recent\nversion than this implementation knows about,\n<b>malloc_set_state</b>() returns -2.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3347601.png\" alt=\"Image grohtml-3347601.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare GNU extensions.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare useful when using this <a href=\"https://man.page/3/malloc\">malloc(3)</a> implementation\nas part of a shared library, and the heap contents are\nsaved/restored via some other method. This technique is used\nby GNU Emacs to implement its &quot;dumping&quot;\nfunction.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Hook function\npointers are never saved or restored by these functions,\nwith two exceptions: if malloc checking (see\n<a href=\"https://man.page/3/mallopt\">mallopt(3)</a>) was in use when <b>malloc_get_state</b>()\nwas called, then <b>malloc_set_state</b>() resets malloc\nchecking hooks if possible; if malloc checking was not in\nuse in the recorded state, but the caller has requested\nmalloc checking, then the hooks are reset to 0.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/malloc\">malloc(3)</a>,\n<a href=\"https://man.page/3/mallopt\">mallopt(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}