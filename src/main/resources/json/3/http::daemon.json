{"name":"http::daemon","description":"HTTP::Daemon - A simple http server class","body":"\n\n<h1 align=\"center\">HTTP::Daemon</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Daemon -\nA simple http server class</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.13</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTTP::Daemon; <br>\nuse HTTP::Status; <br>\nmy $d = HTTP::Daemon-&gt;new || die; <br>\nprint &quot;Please contact me at: &lt;URL:&quot;,\n$d-&gt;url, &quot;&gt;\\n&quot;; <br>\nwhile (my $c = $d-&gt;accept) { <br>\nwhile (my $r = $c-&gt;get_request) { <br>\nif ($r-&gt;method eq 'GET' and $r-&gt;uri-&gt;path eq\n&quot;/xyzzy&quot;) { <br>\n# remember, this is *not* recommended practice :-) <br>\n$c-&gt;send_file_response(&quot;/etc/passwd&quot;); <br>\n} <br>\nelse { <br>\n$c-&gt;send_error(RC_FORBIDDEN) <br>\n} <br>\n} <br>\n$c-&gt;close; <br>\nundef($c); <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Instances of\nthe &quot;HTTP::Daemon&quot; class are\n<small>HTTP/1.1</small> servers that listen on a socket for\nincoming requests. The &quot;HTTP::Daemon&quot; is a\nsubclass of &quot;IO::Socket::IP&quot;, so you can perform\nsocket operations directly on it too.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat &quot;HTTP::Daemon&quot; used to be a subclass of\n&quot;IO::Socket::INET&quot;. To support IPv6, it switched\nthe parent class to &quot;IO::Socket::IP&quot; at version\n6.05. See &quot;IPv6 <small>SUPPORT&quot;</small> for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>accept()</b> method will return when a connection from a\nclient is available. The returned value will be an\n&quot;HTTP::Daemon::ClientConn&quot; object which is another\n&quot;IO::Socket::IP&quot; subclass. Calling the\n<b>get_request()</b> method on this object will read data\nfrom the client and return an &quot;HTTP::Request&quot;\nobject. The ClientConn object also provide methods to send\nback various responses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n<small>HTTP</small> daemon does not <a href=\"https://man.page/2/fork\">fork(2)</a> for you.\nYour application, i.e. the user of the\n&quot;HTTP::Daemon&quot; is responsible for forking if that\nis desirable. Also note that the user is responsible for\ngenerating responses that conform to the\n<small>HTTP/1.1</small> protocol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods of &quot;HTTP::Daemon&quot; are new (or enhanced)\nrelative to the &quot;IO::Socket::IP&quot; base class: <br>\n$d = HTTP::Daemon-&gt;new <br>\n$d = HTTP::Daemon-&gt;new( %opts )</p>\n\n<p style=\"margin-left:17%;\">The constructor method takes\nthe same arguments as the &quot;IO::Socket::IP&quot;\nconstructor, but unlike its base class it can also be called\nwithout any arguments. The daemon will then set up a listen\nqueue of 5 connections and allocate some random port\nnumber.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A server that\nwants to bind to some specific address on the standard\n<small>HTTP</small> port will be constructed like this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$d =\nHTTP::Daemon-&gt;new( <br>\nLocalAddr =&gt; 'www.thisplace.com', <br>\nLocalPort =&gt; 80, <br>\n);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See\nIO::Socket::IP for a description of other arguments that can\nbe used to configure the daemon during construction.</p>\n\n<p style=\"margin-left:11%;\">$c = $d-&gt;accept <br>\n$c = $d-&gt;accept( $pkg ) <br>\n($c, $peer_addr) = $d-&gt;accept</p>\n\n<p style=\"margin-left:17%;\">This method works the same as\nthe one provided by the base class, but it returns an\n&quot;HTTP::Daemon::ClientConn&quot; reference by default.\nIf a package name is provided as argument, then the returned\nobject will be blessed into the given class. It is probably\na good idea to make that class a subclass of\n&quot;HTTP::Daemon::ClientConn&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The accept\nmethod will return &quot;undef&quot; if timeouts have been\nenabled and no connection is made within the given time. The\n<b>timeout()</b> method is described in IO::Socket::IP.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In list context\nboth the client object and the peer address will be\nreturned; see the description of the accept method of\nIO::Socket for details.</p>\n\n<p style=\"margin-left:11%;\">$d-&gt;url</p>\n\n<p style=\"margin-left:17%;\">Returns a <small>URL</small>\nstring that can be used to access the server root.</p>\n\n<p style=\"margin-left:11%;\">$d-&gt;product_tokens</p>\n\n<p style=\"margin-left:17%;\">Returns the name that this\nserver will use to identify itself. This is the string that\nis sent with the &quot;Server&quot; response header. The\nmain reason to have this method is that subclasses can\noverride it if they want to use another product name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default is\nthe string &quot;libwww-perl-daemon/#.##&quot; where\n&quot;#.##&quot; is replaced with the version number of this\nmodule.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;HTTP::Daemon::ClientConn&quot; is a subclass of\n&quot;IO::Socket::IP&quot;. Instances of this class are\nreturned by the <b>accept()</b> method of\n&quot;HTTP::Daemon&quot;. The following methods are\nprovided: <br>\n$c-&gt;get_request <br>\n$c-&gt;get_request( $headers_only )</p>\n\n<p style=\"margin-left:17%;\">This method reads data from the\nclient and turns it into an &quot;HTTP::Request&quot; object\nwhich is returned. It returns &quot;undef&quot; if reading\nfails. If it fails, then the\n&quot;HTTP::Daemon::ClientConn&quot; object ($c) should be\ndiscarded, and you should not try to call this method again\non it. The $c-&gt;reason method might give you some\ninformation about why $c-&gt;get_request failed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>get_request()</b> method will normally not return until\nthe whole request has been received from the client. This\nmight not be what you want if the request is an upload of a\nlarge file (and with chunked transfer encoding\n<small>HTTP</small> can even support infinite request\nmessages - uploading live audio for instance). If you pass a\n<small>TRUE</small> value as the $headers_only argument,\nthen <b>get_request()</b> will return immediately after\nparsing the request headers and you are responsible for\nreading the rest of the request content. If you are going to\ncall $c-&gt;get_request again on the same connection you\nbetter read the correct number of bytes.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;read_buffer <br>\n$c-&gt;read_buffer( $new_value )</p>\n\n<p style=\"margin-left:17%;\">Bytes read by\n$c-&gt;get_request, but not used are placed in the <i>read\nbuffer</i>. The next time $c-&gt;get_request is called it\nwill consume the bytes in this buffer before reading more\ndata from the network connection itself. The read buffer is\ninvalid after $c-&gt;get_request has failed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you handle\nthe reading of the request content yourself you need to\nempty this buffer before you read more and you need to place\nunconsumed bytes here. You also need this buffer if you\nimplement services like <i>101 Switching Protocols</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This method\nalways returns the old buffer content and can optionally\nreplace the buffer content if you pass it an argument.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;reason</p>\n\n<p style=\"margin-left:17%;\">When $c-&gt;get_request returns\n&quot;undef&quot; you can obtain a short string describing\nwhy it happened by calling $c-&gt;reason.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;proto_ge( $proto )</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\nthe client announced a protocol with version number greater\nor equal to the given argument. The $proto argument can be a\nstring like &quot; <small>HTTP/1.1&quot;</small> or just\n&quot;1.1&quot;.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;antique_client</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\nthe client speaks the <small>HTTP/0.9</small> protocol. No\nstatus code and no headers should be returned to such a\nclient. This should be the same as !$c-&gt;proto_ge(&quot;\n<small>HTTP/1.0&quot;</small> ).</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;head_request</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\nthe last request was a &quot;HEAD&quot; request. No content\nbody must be generated for these requests.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;force_last_request</p>\n\n<p style=\"margin-left:17%;\">Make sure that\n$c-&gt;get_request will not try to read more requests off\nthis connection. If you generate a response that is not\nself-delimiting, then you should signal this fact by calling\nthis method.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This attribute\nis turned on automatically if the client announces protocol\n<small>HTTP/1.0</small> or worse and does not include a\n&quot;Connection: Keep-Alive&quot; header. It is also turned\non automatically when <small>HTTP/1.1</small> or better\nclients send the &quot;Connection: close&quot; request\nheader.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_status_line <br>\n$c-&gt;send_status_line( $code ) <br>\n$c-&gt;send_status_line( $code, $mess ) <br>\n$c-&gt;send_status_line( $code, $mess, $proto )</p>\n\n<p style=\"margin-left:17%;\">Send the status line back to\nthe client. If $code is omitted 200 is assumed. If $mess is\nomitted, then a message corresponding to $code is inserted.\nIf $proto is missing the content of the $HTTP::Daemon::PROTO\nvariable is used.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_crlf</p>\n\n<p style=\"margin-left:17%;\">Send the <small>CRLF</small>\nsequence to the client.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_basic_header <br>\n$c-&gt;send_basic_header( $code ) <br>\n$c-&gt;send_basic_header( $code, $mess ) <br>\n$c-&gt;send_basic_header( $code, $mess, $proto )</p>\n\n<p style=\"margin-left:17%;\">Send the status line and the\n&quot;Date:&quot; and &quot;Server:&quot; headers back to\nthe client. This header is assumed to be continued and does\nnot end with an empty <small>CRLF</small> line.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See the\ndescription of <b>send_status_line()</b> for the description\nof the accepted arguments.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_header( $field,\n$value ) <br>\n$c-&gt;send_header( $field1, $value1, $field2, $value2, ...\n)</p>\n\n<p style=\"margin-left:17%;\">Send one or more header\nlines.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_response( $res\n)</p>\n\n<p style=\"margin-left:17%;\">Write an\n&quot;HTTP::Response&quot; object to the client as a\nresponse. We try hard to make sure that the response is\nself-delimiting so that the connection can stay persistent\nfor further request/response exchanges.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The content\nattribute of the &quot;HTTP::Response&quot; object can be a\nnormal string or a subroutine reference. If it is a\nsubroutine, then whatever this callback routine returns is\nwritten back to the client as the response content. The\nroutine will be called until it returns an undefined or\nempty value. If the client is <small>HTTP/1.1</small> aware\nthen we will use chunked transfer encoding for the\nresponse.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_redirect( $loc )\n<br>\n$c-&gt;send_redirect( $loc, $code ) <br>\n$c-&gt;send_redirect( $loc, $code, $entity_body )</p>\n\n<p style=\"margin-left:17%;\">Send a redirect response back\nto the client. The location ($loc) can be an absolute or\nrelative <small>URL.</small> The $code must be one of the\nredirect status codes, and defaults to &quot;301 Moved\nPermanently&quot;</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_error <br>\n$c-&gt;send_error( $code ) <br>\n$c-&gt;send_error( $code, $error_message )</p>\n\n<p style=\"margin-left:17%;\">Send an error response back to\nthe client. If the $code is missing a &quot;Bad\nRequest&quot; error is reported. The $error_message is a\nstring that is incorporated in the body of the\n<small>HTML</small> entity.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_file_response(\n$filename )</p>\n\n<p style=\"margin-left:17%;\">Send back a response with the\nspecified $filename as content. If the file is a directory\nwe try to generate an <small>HTML</small> index of it.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;send_file( $filename )\n<br>\n$c-&gt;send_file( $fd )</p>\n\n<p style=\"margin-left:17%;\">Copy the file to the client.\nThe file can be a string (which will be interpreted as a\nfilename) or a reference to an &quot;IO::Handle&quot; or\nglob.</p>\n\n<p style=\"margin-left:11%;\">$c-&gt;daemon</p>\n\n<p style=\"margin-left:17%;\">Return a reference to the\ncorresponding &quot;HTTP::Daemon&quot; object.</p>\n\n<h2>IPv6 SUPPORT\n<a name=\"IPv6 SUPPORT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since version\n6.05, &quot;HTTP::Daemon&quot; is a subclass of\n&quot;IO::Socket::IP&quot; rather than\n&quot;IO::Socket::INET&quot;, so that it supports IPv6.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For some\nreasons, you may want to force &quot;HTTP::Daemon&quot; to\nlisten on IPv4 addresses only. Then pass &quot;Family&quot;\nargument to &quot;HTTP::Daemon-&gt;new&quot;:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTTP::Daemon; <br>\nuse Socket 'AF_INET'; <br>\nmy $d = HTTP::Daemon-&gt;new(Family =&gt; AF_INET);</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>RFC\n2616</small></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">IO::Socket::IP,\nIO::Socket</p>\n\n<h2>SUPPORT\n<a name=\"SUPPORT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bugs may be\nsubmitted through\n&lt;https://github.com/libwww-perl/HTTP-Daemon/issues&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is also a\nmailing list available for users of this distribution, at\n&lt;mailto:libwww@perl.org&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is also\nan irc channel available for users of this distribution, at\n&quot;#lwp&quot; on &quot;irc.perl.org&quot;\n&lt;irc://irc.perl.org/#lwp&gt;.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>CONTRIBUTORS\n<a name=\"CONTRIBUTORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p style=\"margin-top: 1em\">Olaf Alders\n&lt;olaf@wundersolutions.com&gt;</p> </td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Ville Skyttae &lt;ville.skytta@iki.fi&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Karen Etheridge &lt;ether@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Mark Stosberg &lt;MARKSTOS@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Shoichi Kaji &lt;skaji@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Chase Whitener &lt;capoeirab@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Slaven Rezic &lt;slaven@rezic.de&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Petr PisaX &lt;ppisar@redhat.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Zefram &lt;zefram@fysh.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Alexey Tourbin &lt;at@altlinux.ru&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Bron Gondwana &lt;brong@fastmail.fm&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Mike Schilli &lt;mschilli@yahoo-inc.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Tom Hukins &lt;tom@eborcom.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Adam Kennedy &lt;adamk@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Adam Sjogren &lt;asjo@koldfront.dk&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Alex Kapranoff &lt;ka@nadoby.ru&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>amire80 &lt;amir.aharoni@gmail.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Andreas J. Koenig &lt;andreas.koenig@anima.de&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Bill Mann &lt;wfmann@alum.mit.edu&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Daniel Hedlund &lt;Daniel.Hedlund@eprize.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>David E. Wheeler &lt;david@justatheory.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p><small>DAVIDRW</small> &lt;davidrw@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Father Chrysostomos &lt;sprout@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Ferenc Erki &lt;erkiferenc@gmail.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p><small>FWILES</small> &lt;FWILES@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Gavin Peters &lt;gpeters@deepsky.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Graeme Thompson\n&lt;Graeme.Thompson@mobilecohesion.com&gt;</p> </td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Hans-H. Froehlich &lt;hfroehlich@co-de-co.de&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Ian Kilgore &lt;iank@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Jacob J &lt;waif@chaos2.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>jefflee &lt;shaohua@gmail.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>john9art &lt;john9art@yahoo.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>murphy &lt;murphy@genome.chop.edu&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Ondrej Hanak &lt;ondrej.hanak@ubs.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Perlover &lt;perlover@perlover.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Peter Rabbitson &lt;ribasushi@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>phrstbrn &lt;phrstbrn@gmail.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Robert Stone &lt;talby@trap.mtview.ca.us&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Rolf Grossmann &lt;rg@progtech.net&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>ruff &lt;ruff@ukrpost.net&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>sasao &lt;sasao@yugen.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Sean M. Burke &lt;sburke@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Spiros Denaxas &lt;s.denaxas@gmail.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Steve Hay &lt;SteveHay@planit.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Todd Lipcon &lt;todd@amiestreet.com&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Tony Finch &lt;dot@dotat.at&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Toru Yamaguchi &lt;zigorou@cpan.org&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"80%\">\n\n\n<p>Yuri Karaban &lt;tech@askold.net&gt;</p></td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\n<h2>COPYRIGHT AND LICENCE\n<a name=\"COPYRIGHT AND LICENCE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1995 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#IPv6 SUPPORT\">IPv6 SUPPORT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#SUPPORT\">SUPPORT</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#CONTRIBUTORS\">CONTRIBUTORS</a>","<a href=\"#COPYRIGHT AND LICENCE\">COPYRIGHT AND LICENCE</a>"],"level":3}