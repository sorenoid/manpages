{"name":"regex","body":"\n\n<h1 align=\"center\">REGEX</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">regcomp,\nregexec, regerror, regfree - POSIX regex functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;regex.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nregcomp(regex_t *</b><i>preg</i><b>, const char\n*</b><i>regex</i><b>, int</b> <i>cflags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nregexec(const regex_t *</b><i>preg</i><b>, const char\n*</b><i>string</i><b>, size_t</b> <i>nmatch</i><b>, <br>\nregmatch_t</b> <i>pmatch[]</i><b>, int</b>\n<i>eflags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>size_t\nregerror(int</b> <i>errcode</i><b>, const regex_t\n*</b><i>preg</i><b>, char *</b><i>errbuf</i><b>, <br>\nsize_t</b> <i>errbuf_size</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nregfree(regex_t *</b><i>preg</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>POSIX regex\ncompiling <br>\nregcomp</b>() is used to compile a regular expression into a\nform that is suitable for subsequent <b>regexec</b>()\nsearches.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>regcomp</b>()\nis supplied with <i>preg</i>, a pointer to a pattern buffer\nstorage area; <i>regex</i>, a pointer to the null-terminated\nstring and <i>cflags</i>, flags used to determine the type\nof compilation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All regular\nexpression searching must be done via a compiled pattern\nbuffer, thus <b>regexec</b>() must always be supplied with\nthe address of a <b>regcomp</b>() initialized pattern\nbuffer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>cflags</i>\nis the bitwise-<b>or</b> of zero or more of the following:\n<b><br>\nREG_EXTENDED</b></p>\n\n<p style=\"margin-left:22%;\">Use <b>POSIX</b> Extended\nRegular Expression syntax when interpreting <i>regex</i>. If\nnot set, <b>POSIX</b> Basic Regular Expression syntax is\nused.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_ICASE</b></p>\n\n<p style=\"margin-left:22%;\">Do not differentiate case.\nSubsequent <b>regexec</b>() searches using this pattern\nbuffer will be case insensitive.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_NOSUB</b></p>\n\n<p style=\"margin-left:22%;\">Do not report position of\nmatches. The <i>nmatch</i> and <i>pmatch</i> arguments to\n<b>regexec</b>() are ignored if the pattern buffer supplied\nwas compiled with this flag set.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_NEWLINE</b></p>\n\n<p style=\"margin-left:22%;\">Match-any-character operators\ndon&rsquo;t match a newline.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A nonmatching\nlist (<b>[^...]</b>) not containing a newline does not match\na newline.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">Match-beginning-of-line\noperator (<b>^</b>) matches the empty string immediately\nafter a newline, regardless of whether <i>eflags</i>, the\nexecution flags of <b>regexec</b>(), contains\n<b>REG_NOTBOL</b>.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">Match-end-of-line\noperator (<b>$</b>) matches the empty string immediately\nbefore a newline, regardless of whether <i>eflags</i>\ncontains <b>REG_NOTEOL</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>POSIX regex\nmatching <br>\nregexec</b>() is used to match a null-terminated string\nagainst the precompiled pattern buffer, <i>preg</i>.\n<i>nmatch</i> and <i>pmatch</i> are used to provide\ninformation regarding the location of any matches.\n<i>eflags</i> is the bitwise-<b>or</b> of zero or more of\nthe following flags: <b><br>\nREG_NOTBOL</b></p>\n\n<p style=\"margin-left:22%;\">The match-beginning-of-line\noperator always fails to match (but see the compilation flag\n<b>REG_NEWLINE</b> above). This flag may be used when\ndifferent portions of a string are passed to\n<b>regexec</b>() and the beginning of the string should not\nbe interpreted as the beginning of the line.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_NOTEOL</b></p>\n\n<p style=\"margin-left:22%;\">The match-end-of-line operator\nalways fails to match (but see the compilation flag\n<b>REG_NEWLINE</b> above).</p>\n\n<p style=\"margin-left:11%;\"><b>REG_STARTEND</b></p>\n\n<p style=\"margin-left:22%;\">Use <i>pmatch[0]</i> on the\ninput string, starting at byte <i>pmatch[0].rm_so</i> and\nending before byte <i>pmatch[0].rm_eo</i>. This allows\nmatching embedded NUL bytes and avoids a <a href=\"https://man.page/3/strlen\">strlen(3)</a> on\nlarge strings. It does not use <i>nmatch</i> on input, and\ndoes not change <b>REG_NOTBOL</b> or <b>REG_NEWLINE</b>\nprocessing. This flag is a BSD extension, not present in\nPOSIX.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Byte\noffsets</b> <br>\nUnless <b>REG_NOSUB</b> was set for the compilation of the\npattern buffer, it is possible to obtain match addressing\ninformation. <i>pmatch</i> must be dimensioned to have at\nleast <i>nmatch</i> elements. These are filled in by\n<b>regexec</b>() with substring match addresses. The offsets\nof the subexpression starting at the <i>i</i>th open\nparenthesis are stored in <i>pmatch[i]</i>. The entire\nregular expression&rsquo;s match addresses are stored in\n<i>pmatch[0]</i>. (Note that to return the offsets of\n<i>N</i> subexpression matches, <i>nmatch</i> must be at\nleast <i>N+1</i>.) Any unused structure elements will\ncontain the value -1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>regmatch_t</i> structure which is the type of\n<i>pmatch</i> is defined in <i>&lt;regex.h&gt;</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nregoff_t rm_so; <br>\nregoff_t rm_eo; <br>\n} regmatch_t;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each\n<i>rm_so</i> element that is not -1 indicates the start\noffset of the next largest substring match within the\nstring. The relative <i>rm_eo</i> element indicates the end\noffset of the match, which is the offset of the first\ncharacter after the matching text.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>POSIX error\nreporting <br>\nregerror</b>() is used to turn the error codes that can be\nreturned by both <b>regcomp</b>() and <b>regexec</b>() into\nerror message strings.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>regerror</b>()\nis passed the error code, <i>errcode</i>, the pattern\nbuffer, <i>preg</i>, a pointer to a character string buffer,\n<i>errbuf</i>, and the size of the string buffer,\n<i>errbuf_size</i>. It returns the size of the <i>errbuf</i>\nrequired to contain the null-terminated error message\nstring. If both <i>errbuf</i> and <i>errbuf_size</i> are\nnonzero, <i>errbuf</i> is filled in with the first\n<i>errbuf_size - 1</i> characters of the error message and a\nterminating null byte ('\\0').</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>POSIX\npattern buffer freeing</b> <br>\nSupplying <b>regfree</b>() with a precompiled pattern\nbuffer, <i>preg</i> will free the memory allocated to the\npattern buffer by the compiling process,\n<b>regcomp</b>().</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>regcomp</b>()\nreturns zero for a successful compilation or an error code\nfor failure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>regexec</b>()\nreturns zero for a successful match or <b>REG_NOMATCH</b>\nfor failure.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nerrors can be returned by <b>regcomp</b>(): <b><br>\nREG_BADBR</b></p>\n\n<p style=\"margin-left:22%;\">Invalid use of back reference\noperator.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_BADPAT</b></p>\n\n<p style=\"margin-left:22%;\">Invalid use of pattern\noperators such as group or list.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_BADRPT</b></p>\n\n<p style=\"margin-left:22%;\">Invalid use of repetition\noperators such as using '*' as the first character.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_EBRACE</b></p>\n\n<p style=\"margin-left:22%;\">Un-matched brace interval\noperators.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_EBRACK</b></p>\n\n<p style=\"margin-left:22%;\">Un-matched bracket list\noperators.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_ECOLLATE</b></p>\n\n<p style=\"margin-left:22%;\">Invalid collating element.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_ECTYPE</b></p>\n\n<p style=\"margin-left:22%;\">Unknown character class\nname.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_EEND</b></p>\n\n<p style=\"margin-left:22%;\">Nonspecific error. This is not\ndefined by POSIX.2.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_EESCAPE</b></p>\n\n<p style=\"margin-left:22%;\">Trailing backslash.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_EPAREN</b></p>\n\n<p style=\"margin-left:22%;\">Un-matched parenthesis group\noperators.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_ERANGE</b></p>\n\n<p style=\"margin-left:22%;\">Invalid use of the range\noperator; for example, the ending point of the range occurs\nprior to the starting point.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_ESIZE</b></p>\n\n<p style=\"margin-left:22%;\">Compiled regular expression\nrequires a pattern buffer larger than 64&nbsp;kB. This is\nnot defined by POSIX.2.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_ESPACE</b></p>\n\n<p style=\"margin-left:22%;\">The regex routines ran out of\nmemory.</p>\n\n<p style=\"margin-left:11%;\"><b>REG_ESUBREG</b></p>\n\n<p style=\"margin-left:22%;\">Invalid back reference to a\nsubexpression.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3309241.png\" alt=\"Image grohtml-3309241.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stdint.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;regex.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nARRAY_SIZE(arr) (sizeof((arr)) / sizeof((arr)[0]))</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static const\nchar *const str = <br>\n&quot;1) John Driverhacker;\\n2) John Doe;\\n3) John\nFoo;\\n&quot;; <br>\nstatic const char *const re = &quot;John.*o&quot;;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int main(void)\n<br>\n{ <br>\nstatic const char *s = str; <br>\nregex_t regex; <br>\nregmatch_t pmatch[1]; <br>\nregoff_t off, len;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(regcomp(&amp;regex, re, REG_NEWLINE)) <br>\nexit(EXIT_FAILURE);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;String\n= \\&quot;%s\\&quot;\\n&quot;, str); <br>\nprintf(&quot;Matches:\\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (int i = 0;\n; i++) { <br>\nif (regexec(&amp;regex, s, ARRAY_SIZE(pmatch), pmatch, 0))\n<br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">off =\npmatch[0].rm_so + (s - str); <br>\nlen = pmatch[0].rm_eo - pmatch[0].rm_so; <br>\nprintf(&quot;#%d:\\n&quot;, i); <br>\nprintf(&quot;offset = %jd; length = %jd\\n&quot;, (intmax_t)\noff, <br>\n(intmax_t) len); <br>\nprintf(&quot;substring = \\&quot;%.*s\\&quot;\\n&quot;, len, s\n+ pmatch[0].rm_so);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s +=\npmatch[0].rm_eo; <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/grep\">grep(1)</a>,\n<a href=\"https://man.page/7/regex\">regex(7)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The glibc\nmanual section, <i>Regular Expressions</i></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}