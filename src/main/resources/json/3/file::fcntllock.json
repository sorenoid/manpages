{"name":"file::fcntllock","description":"File::FcntlLock\n- File locking with fcntl(2)\n\nThis text also\ndocuments the following sub-packages: <br>\nFile::FcntlLock::XS <br>\nFile::FcntlLock::Pure <br>\nFile::FcntlLock::Inline","body":"\n\n<h1 align=\"center\">File::FcntlLock</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::FcntlLock\n- File locking with fcntl(2)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This text also\ndocuments the following sub-packages: <br>\nFile::FcntlLock::XS <br>\nFile::FcntlLock::Pure <br>\nFile::FcntlLock::Inline</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nFile::FcntlLock; <br>\nmy $fs = new File::FcntlLock; <br>\n$fs-&gt;l_type( F_RDLCK ); <br>\n$fs-&gt;l_whence( SEEK_CUR ); <br>\n$fs-&gt;l_start( 100 ); <br>\n$fs-&gt;l_len( 123 ); <br>\nopen my $fh, '&lt;', 'file_name' or die &quot;Can't open\nfile: $!\\n&quot;; <br>\n$fs-&gt;lock( $fh, F_SETLK ) <br>\nor print &quot;Locking failed: &quot; . $fs-&gt;error .\n&quot;\\n&quot;; <br>\n$fs-&gt;l_type( F_UNLCK ); <br>\n$fs-&gt;lock( $fh, F_SETLK ) <br>\nor print &quot;Unlocking failed: &quot; . $fs-&gt;error .\n&quot;\\n&quot;;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File locking in\nPerl is usually done using the &quot;flock&quot; function.\nUnfortunately, this only allows locks on whole files and is\noften implemented in terms of the <a href=\"https://man.page/2/flock\">flock(2)</a> system\nfunction which has some shortcomings (especially concerning\nlocks on remotely mounted file systems) and slightly\ndifferent behaviour than <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using this\nmodule file locking via <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> can be done\n(obviously, this restricts the use of the module to systems\nthat have a <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> system call). Before a file (or\nparts of a file) can be locked, an object simulating a flock\nstructure, containing information in a binary format to be\npassed to <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> for locking requests, must be\ncreated and its properties set. Afterwards, by calling the\n<b>lock()</b> method a lock can be set and removed or it can\nbe determined if and which process currently holds the\nlock.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::FcntlLock\n(or its alias File::FcntlLock::XS) uses a shared library,\nbuild during installation, to call the <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>\nsystem function directly. If this is unsuitable there are\ntwo alternatives, File::FcntlLock::Pure and\nFile::FcntlLock::Inline. Both call the Perl\n&quot;fcntl&quot; function instead and use Perl code to\nassemble and disassemble the structure. For this at some\ntime the (system-dependent) binary layout of the flock\nstructure must have been determined via a program written in\nC. The difference between File::FcntlLock::Pure and\nFile::FcntlLock::Inline is that for the former this happened\nwhen the package is installed while for the latter it is\ndone each time the package is loaded (e.g., with\n&quot;use&quot;). Thus, for File::FcntlLock::Inline to work\na C compiler must be available. There are some minor\ndifferences in the functionality and the behaviour on\npassing the method for locking invalid arguments to be\ndescribed below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Creating\nobjects</b> <br>\n&quot;new()&quot;</p>\n\n<p style=\"margin-left:17%;\">To create a new object,\nrepresenting a flock structure, call <b>new()</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$fs = new\nFile::FcntlLock;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The object has\na number of properties, reflecting the members of the flock\nstructure to be passed to <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> (see below). Per\ndefault on object creation the l_type property is set to\n&quot;F_RDLCK&quot;, l_whence to &quot;SEEK_SET&quot;, and\nboth l_start and l_len to 0, i.e., the settings for a read\nlock on the whole file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These defaults\ncan be overruled by passing the <b>new()</b> method a set of\nkey-value pairs to initialize the objects properties, e.g.\nuse</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$fs = new\nFile::FcntlLock( l_type =&gt; F_WRLCK, <br>\nl_whence =&gt; SEEK_SET, <br>\nl_start =&gt; 0, <br>\nl_len =&gt; 100 );</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if you intend\nto obtain a write lock for the first 100 bytes of a\nfile.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Object\nproperties</b> <br>\nOnce the object simulating the flock structure has been\ncreated the following methods allow to query and, in most\ncases, to also modify its properties. <br>\n&quot;l_type()&quot;</p>\n\n<p style=\"margin-left:17%;\">If called without an argument\nthe method returns the current setting of the lock type,\notherwise the lock type is set to the argument&rsquo;s value\nwhich must be either &quot;F_RDLCK&quot;,\n&quot;F_WRLCK&quot; or &quot;F_UNLCK&quot; (for read lock,\nwrite lock or unlock).</p>\n\n<p style=\"margin-left:11%;\">&quot;l_whence()&quot;</p>\n\n<p style=\"margin-left:17%;\">This method sets, when called\nwith an argument, the l_whence property of the flock object,\ndetermining if the l_start value is relative to the start of\nthe file, to the current position in the file or to the end\nof the file. These values are &quot;SEEK_SET&quot;,\n&quot;SEEK_CUR&quot; and &quot;SEEK_END&quot; (also see the\nman page for <a href=\"https://man.page/2/lseek\">lseek(2)</a>). If called with no argument\nthe current value of the property is returned.</p>\n\n<p style=\"margin-left:11%;\">&quot;l_start()&quot;</p>\n\n<p style=\"margin-left:17%;\">Queries or sets the start\nposition (offset) of the lock in the file according to the\nmode selected by the l_whence member. See also the man page\nfor <a href=\"https://man.page/2/lseek\">lseek(2)</a>.</p>\n\n<p style=\"margin-left:11%;\">&quot;l_len()&quot;</p>\n\n<p style=\"margin-left:17%;\">Queries or sets the length of\nthe region (in bytes) in the file to be locked. A value of 0\nis interpreted to mean a lock, starting at\n&quot;l_start&quot;, to the end of the file. E.g., a lock\nobtained with l_whence set to &quot;SEEK_SET&quot; and both\nl_start and l_len set to 0 locks the complete file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">According to\nSUSv3 support for negative values for l_len are permitted,\nresulting in a lock ranging from &quot;l_start+l_len&quot;\nup to and including &quot;l_start-1&quot;. But not all\nsystems support negative values for l_len and will return an\nerror when you try to obtain such a lock, so please read the\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> man page of the system carefully for\ndetails.</p>\n\n<p style=\"margin-left:11%;\">&quot;l_pid()&quot;</p>\n\n<p style=\"margin-left:17%;\">If a call of the <b>lock()</b>\nmethod with &quot;F_GETLK&quot; indicates that another\nprocess is holding the lock (in which case the l_type\nproperty will be either &quot;F_WRLCK&quot; or\n&quot;F_RDLCK&quot;) a call of the <b>l_pid()</b> method\nreturns the <small>PID</small> of the process holding the\nlock. This method does not accept any arguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Locking</b>\n<br>\nAfter having set up the object representing a flock\nstructure one can then try to obtain a lock, release it or\ndetermine the current holder of the lock by invoking the\n<b>lock()</b> method: <br>\n&quot;lock()&quot;</p>\n\n<p style=\"margin-left:17%;\">This method expects two\narguments. The first one is a file handle (or typeglob).\nFile::FcntlLock, and thus File::FcntlLock::XS (<b>but\nneither</b> File::FcntlLock::Pure <b>nor</b>\nFile::FcntlLock::Inline), also accepts a &quot;raw&quot;\ninteger file descriptor. The second argument is a flag\nindicating the action to be taken. So call it as in</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$fs-&gt;lock(\n$fh, F_SETLK );</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">There are three\nvalues that can be used as the second argument: <br>\n&quot;F_SETLK&quot;</p>\n\n<p style=\"margin-left:23%;\">With &quot;F_SETLK&quot; the\n<b>lock()</b> method tries to obtain a lock (when l_type is\nset to either &quot;F_WRLCK&quot; or &quot;F_RDLCK&quot;) or\nreleases it (if l_type is set to &quot;F_UNLCK&quot;). If an\nattempt is made to obtain a lock but a lock is already being\nheld by some other process the method returns\n&quot;undef&quot; and &quot;errno&quot; is set to\n&quot;EACCESS&quot; or &quot;EAGAIN&quot; (please see the\nthe man page for <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> for more details).</p>\n\n<p style=\"margin-left:17%;\">&quot;F_SETLKW&quot;</p>\n\n<p style=\"margin-left:23%;\">is similar to\n&quot;F_SETLK&quot;, but instead of returning an error if\nthe lock can&rsquo;t be obtained immediately it puts the\ncalling process to sleep, i.e., it blocks, until the lock is\nobtained at some later time. If a signal is received while\nwaiting for the lock the method returns &quot;undef&quot;\nand &quot;errno&quot; is set to &quot;EINTR&quot;.</p>\n\n<p style=\"margin-left:17%;\">&quot;F_GETLK&quot;</p>\n\n<p style=\"margin-left:23%;\">With &quot;F_GETLK&quot; the\n<b>lock()</b> method determines if and which process\ncurrently is holding the lock. If there&rsquo;s no other\nlock the l_type property will be set to &quot;F_UNLCK&quot;.\nOtherwise the flock structure object is set to the values\nthat would prevent us from obtaining a lock. There may be\nseveral processes that keep us from getting a lock,\nincluding some that themselves are blocked waiting to obtain\na lock. &quot;F_GETLK&quot; will only make details of one of\nthese processes visible, and one has no control over which\nprocess this is.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">On success the\n<b>lock()</b> method returns the string &quot;0 but\ntrue&quot;, i.e., a value that is true in boolean but 0 in\nnumeric context. If the method fails (as indicated by an\n&quot;undef&quot; return value) you can either immediately\nevaluate the error number (using $!, $ERRNO or $OS_ERROR) or\ncheck for it via the methods discussed below at some later\ntime.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Error\nhandling</b> <br>\nThere are minor differences between File::FcntlLock on the\none hand and File::FcntlLock::Pure and\nFile::FcntlLock::Inline on the other, due to the first\ncalling the system function <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> directly while\nthe latter two invoke the Perl &quot;fcntl&quot; function.\nPerl&rsquo;s &quot;fcntl&quot; function already returns a\nPerl error on some types of invalid arguments. In contrast\nFile::FcntlLock passes them on to the <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> system\ncall and then returns the systems response to the\ncaller.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are three\nmethods for obtaining information about the reason the a\ncall of the <b>lock()</b> method failed: <br>\n&quot;lock_errno()&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns the &quot;errno&quot;\nerror number from the latest call of <b>lock()</b>. If the\nlast call did not result in an error &quot;undef&quot; is\nreturned.</p>\n\n<p style=\"margin-left:11%;\">&quot;error()&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a short description of\nthe error that happened during the latest call of\n<b>lock()</b>. Please take the messages with a grain of\nsalt, they represent what SUSv3 ( <small>IEEE\n1003.1-2001</small> ) and the Linux, <small>TRUE64,</small>\nOpenBSD3 and Solaris8 man pages tell what the error numbers\nmean. There could be differences (and additional error\nnumbers) on other systems. If there was no error the method\nreturns &quot;undef&quot;.</p>\n\n<p style=\"margin-left:11%;\">&quot;system_error()&quot;</p>\n\n<p style=\"margin-left:17%;\">While the <b>error()</b> method\ntries to return a string with some direct relevance to the\nlocking operation (i.e., &quot;File or segment already\nlocked by other process(es)&quot; instead of\n&quot;Permission denied&quot;) this method returns the\n&quot;normal&quot; system error message associated with\n&quot;errno&quot;. The method returns &quot;undef&quot; if\nthere was no error.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>EXPORT</small></b>\n<br>\nThe package exports the following constants: <br>\nF_GETLK F_SETLK F_SETLKW <br>\nF_RDLCK F_WRLCK F_UNLCK <small><br>\nSEEK_SET SEEK_CUR SEEK_END</small></p>\n\n<h2>INCOMPATIBILITIES\n<a name=\"INCOMPATIBILITIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Obviously, this\nmodule requires that there&rsquo;s a <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> system\ncall. Note also that under certain circumstances the\nFile::FcntlLock::Pure and File::FcntlLock::Inline modules\nmay not have been installed. This happens on 32-bit systems\nthat use 64-bit integers in their flock structure but where\nthe installed Perl version doesn&rsquo;t support the\n&rsquo;q&rsquo; format for its &quot;pack&quot; and\n&quot;unpack&quot; functions.</p>\n\n<h2>CREDITS\n<a name=\"CREDITS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thanks to Mark\nJason Dominus and Benjamin Goldberg for helpful discussions,\ncode examples and encouragement. Glenn Herteg pointed out\nseveral problems and also helped improve the documentation.\nJulian Moreno Patino helped correcting the documentation and\npointed out problems arising on <small>GNU</small> Hurd\nwhich seems to have only very rudimentary support for\nlocking with <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>. Niko Tyni and Guillem Jover\nencouraged and helped with implementing alternatives to an\nXS-only approach which hopefully will make the module more\nuseful under certain circumstances.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Jens Thoms\nToerring &lt;jt@toerring.de&gt;</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/perl\">perl(1)</a>,\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, <a href=\"https://man.page/2/lseek\">lseek(2)</a>.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software. You can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#INCOMPATIBILITIES\">INCOMPATIBILITIES</a>","<a href=\"#CREDITS\">CREDITS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#LICENSE\">LICENSE</a>"],"level":3}