{"name":"mallinfo","description":"mallinfo - obtain memory allocation information","body":"\n\n<h1 align=\"center\">MALLINFO</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mallinfo -\nobtain memory allocation information</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;malloc.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct\nmallinfo mallinfo(void);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mallinfo</b>() function returns a copy of a structure\ncontaining information about memory allocations performed by\n<a href=\"https://man.page/3/malloc\">malloc(3)</a> and related functions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that not\nall allocations are visible to <b>mallinfo</b>(); see BUGS\nand consider using <a href=\"https://man.page/3/malloc_info\">malloc_info(3)</a> instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The returned\nstructure is defined as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct mallinfo\n{ <br>\nint arena; /* Non-mmapped space allocated (bytes) */ <br>\nint ordblks; /* Number of free chunks */ <br>\nint smblks; /* Number of free fastbin blocks */ <br>\nint hblks; /* Number of mmapped regions */ <br>\nint hblkhd; /* Space allocated in mmapped regions (bytes) */\n<br>\nint usmblks; /* See below */ <br>\nint fsmblks; /* Space in freed fastbin blocks (bytes) */\n<br>\nint uordblks; /* Total allocated space (bytes) */ <br>\nint fordblks; /* Total free space (bytes) */ <br>\nint keepcost; /* Top-most, releasable space (bytes) */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fields of\nthe <i>mallinfo</i> structure contain the following\ninformation:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>arena</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The total amount of memory allocated by means other than\n<a href=\"https://man.page/2/mmap\">mmap(2)</a> (i.e., memory allocated on the heap). This\nfigure includes both in-use blocks and blocks on the free\nlist.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>ordblks</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of ordinary (i.e., non-fastbin) free\nblocks.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>smblks</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of fastbin free blocks (see\n<a href=\"https://man.page/3/mallopt\">mallopt(3)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>hblks</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of blocks currently allocated using\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>. (See the discussion of\n<b>M_MMAP_THRESHOLD</b> in <a href=\"https://man.page/3/mallopt\">mallopt(3)</a>.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>hblkhd</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of bytes in blocks currently allocated using\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>usmblks</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>This field is unused, and is always 0. Historically, it\nwas the &quot;highwater mark&quot; for allocated\nspace&mdash;that is, the maximum amount of space that was\never allocated (in bytes); this field was maintained only in\nnonthreading environments.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>fsmblks</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The total number of bytes in fastbin free blocks.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>uordblks</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The total number of bytes used by in-use\nallocations.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>fordblks</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The total number of bytes in free blocks.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>keepcost</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The total amount of releasable free space at the top of\nthe heap. This is the maximum number of bytes that could\nideally (i.e., ignoring page alignment restrictions, and so\non) be released by <a href=\"https://man.page/3/malloc_trim\">malloc_trim(3)</a>.</p></td></tr>\n</table>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3301051.png\" alt=\"Image grohtml-3301051.png\"></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mallinfo</b>()\nwould access some global internal objects. If modify them\nwith non-atomically, may get inconsistent results. The\nidentifier <i>mallopt</i> in <i>const:mallopt</i> mean that\n<b>mallopt</b>() would modify the global internal objects\nwith atomics, that make sure <b>mallinfo</b>() is safe\nenough, others modify with non-atomically maybe not.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis not specified by POSIX or the C standards. A similar\nfunction exists on many System V derivatives, and was\nspecified in the SVID.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Information\nis returned for only the main memory allocation area.</b>\nAllocations in other arenas are excluded. See\n<a href=\"https://man.page/3/malloc_stats\">malloc_stats(3)</a> and <a href=\"https://man.page/3/malloc_info\">malloc_info(3)</a> for\nalternatives that include information about other\narenas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fields of\nthe <i>mallinfo</i> structure are typed as <i>int</i>.\nHowever, because some internal bookkeeping values may be of\ntype <i>long</i>, the reported values may wrap around zero\nand thus be inaccurate.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow employs <b>mallinfo</b>() to retrieve memory\nallocation statistics before and after allocating and\nfreeing some blocks of memory. The statistics are displayed\non standard output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first two\ncommand-line arguments specify the number and size of blocks\nto be allocated with <a href=\"https://man.page/3/malloc\">malloc(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The remaining\nthree arguments specify which of the allocated blocks should\nbe freed with <a href=\"https://man.page/3/free\">free(3)</a>. These three arguments are\noptional, and specify (in order): the step size to be used\nin the loop that frees blocks (the default is 1, meaning\nfree all blocks in the range); the ordinal position of the\nfirst block to be freed (default 0, meaning the first\nallocated block); and a number one greater than the ordinal\nposition of the last block to be freed (default is one\ngreater than the maximum block number). If these three\narguments are omitted, then the defaults cause all allocated\nblocks to be freed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing example run of the program, 1000 allocations of\n100 bytes are performed, and then every second allocated\nblock is freed:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n1000 100 2</b> <br>\n============== Before allocating blocks ============== <br>\nTotal non-mmapped bytes (arena): 0 <br>\n# of free chunks (ordblks): 1 <br>\n# of free fastbin blocks (smblks): 0 <br>\n# of mapped regions (hblks): 0 <br>\nBytes in mapped regions (hblkhd): 0 <br>\nMax. total allocated space (usmblks): 0 <br>\nFree bytes held in fastbins (fsmblks): 0 <br>\nTotal allocated space (uordblks): 0 <br>\nTotal free space (fordblks): 0 <br>\nTopmost releasable block (keepcost): 0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">==============\nAfter allocating blocks ============== <br>\nTotal non-mmapped bytes (arena): 135168 <br>\n# of free chunks (ordblks): 1 <br>\n# of free fastbin blocks (smblks): 0 <br>\n# of mapped regions (hblks): 0 <br>\nBytes in mapped regions (hblkhd): 0 <br>\nMax. total allocated space (usmblks): 0 <br>\nFree bytes held in fastbins (fsmblks): 0 <br>\nTotal allocated space (uordblks): 104000 <br>\nTotal free space (fordblks): 31168 <br>\nTopmost releasable block (keepcost): 31168</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">==============\nAfter freeing blocks ============== <br>\nTotal non-mmapped bytes (arena): 135168 <br>\n# of free chunks (ordblks): 501 <br>\n# of free fastbin blocks (smblks): 0 <br>\n# of mapped regions (hblks): 0 <br>\nBytes in mapped regions (hblkhd): 0 <br>\nMax. total allocated space (usmblks): 0 <br>\nFree bytes held in fastbins (fsmblks): 0 <br>\nTotal allocated space (uordblks): 52000 <br>\nTotal free space (fordblks): 83168 <br>\nTopmost releasable block (keepcost): 31168</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;malloc.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;string.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\ndisplay_mallinfo(void) <br>\n{ <br>\nstruct mallinfo mi;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">mi =\nmallinfo();</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Total\nnon-mmapped bytes (arena): %d\\n&quot;, mi.arena); <br>\nprintf(&quot;# of free chunks (ordblks): %d\\n&quot;,\nmi.ordblks); <br>\nprintf(&quot;# of free fastbin blocks (smblks): %d\\n&quot;,\nmi.smblks); <br>\nprintf(&quot;# of mapped regions (hblks): %d\\n&quot;,\nmi.hblks); <br>\nprintf(&quot;Bytes in mapped regions (hblkhd): %d\\n&quot;,\nmi.hblkhd); <br>\nprintf(&quot;Max. total allocated space (usmblks):\n%d\\n&quot;, mi.usmblks); <br>\nprintf(&quot;Free bytes held in fastbins (fsmblks):\n%d\\n&quot;, mi.fsmblks); <br>\nprintf(&quot;Total allocated space (uordblks): %d\\n&quot;,\nmi.uordblks); <br>\nprintf(&quot;Total free space (fordblks): %d\\n&quot;,\nmi.fordblks); <br>\nprintf(&quot;Topmost releasable block (keepcost):\n%d\\n&quot;, mi.keepcost); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\n#define MAX_ALLOCS 2000000 <br>\nchar *alloc[MAX_ALLOCS]; <br>\nint numBlocks, freeBegin, freeEnd, freeStep; <br>\nsize_t blockSize;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &lt; 3\n|| strcmp(argv[1], &quot;--help&quot;) == 0) { <br>\nfprintf(stderr, &quot;%s num-blocks block-size [free-step\n&quot; <br>\n&quot;[start-free [end-free]]]\\n&quot;, argv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">numBlocks =\natoi(argv[1]); <br>\nblockSize = atoi(argv[2]); <br>\nfreeStep = (argc &gt; 3) ? atoi(argv[3]) : 1; <br>\nfreeBegin = (argc &gt; 4) ? atoi(argv[4]) : 0; <br>\nfreeEnd = (argc &gt; 5) ? atoi(argv[5]) : numBlocks;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;==============\nBefore allocating blocks ==============\\n&quot;); <br>\ndisplay_mallinfo();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (int j = 0;\nj &lt; numBlocks; j++) { <br>\nif (numBlocks &gt;= MAX_ALLOCS) { <br>\nfprintf(stderr, &quot;Too many allocations\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">alloc[j] =\nmalloc(blockSize); <br>\nif (alloc[j] == NULL) { <br>\nperror(&quot;malloc&quot;); <br>\nexit(EXIT_FAILURE); <br>\n} <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;\\n==============\nAfter allocating blocks ==============\\n&quot;); <br>\ndisplay_mallinfo();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (int j =\nfreeBegin; j &lt; freeEnd; j += freeStep) <br>\nfree(alloc[j]);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;\\n==============\nAfter freeing blocks ==============\\n&quot;); <br>\ndisplay_mallinfo();</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/mmap\">mmap(2)</a>,\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>, <a href=\"https://man.page/3/malloc_info\">malloc_info(3)</a>,\n<a href=\"https://man.page/3/malloc_stats\">malloc_stats(3)</a>, <a href=\"https://man.page/3/malloc_trim\">malloc_trim(3)</a>,\n<a href=\"https://man.page/3/mallopt\">mallopt(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}