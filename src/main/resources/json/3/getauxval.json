{"name":"getauxval","body":"\n\n<h1 align=\"center\">GETAUXVAL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getauxval -\nretrieve a value from the auxiliary vector</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/auxv.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned\nlong getauxval(unsigned long</b> <i>type</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getauxval</b>() function retrieves values from the\nauxiliary vector, a mechanism that the kernel&rsquo;s ELF\nbinary loader uses to pass certain information to user space\nwhen a program is executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each entry in\nthe auxiliary vector consists of a pair of values: a type\nthat identifies what this entry represents, and a value for\nthat type. Given the argument <i>type</i>,\n<b>getauxval</b>() returns the corresponding value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value\nreturned for each <i>type</i> is given in the following\nlist. Not all <i>type</i> values are present on all\narchitectures. <b><br>\nAT_BASE</b></p>\n\n<p style=\"margin-left:22%;\">The base address of the program\ninterpreter (usually, the dynamic linker).</p>\n\n<p style=\"margin-left:11%;\"><b>AT_BASE_PLATFORM</b></p>\n\n<p style=\"margin-left:22%;\">A pointer to a string (PowerPC\nand MIPS only). On PowerPC, this identifies the real\nplatform; may differ from <b>AT_PLATFORM</b>. On MIPS, this\nidentifies the ISA level (since Linux 5.7).</p>\n\n<p style=\"margin-left:11%;\"><b>AT_CLKTCK</b></p>\n\n<p style=\"margin-left:22%;\">The frequency with which\n<a href=\"https://man.page/2/times\">times(2)</a> counts. This value can also be obtained via\n<i>sysconf(_SC_CLK_TCK)</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_DCACHEBSIZE</b></p>\n\n<p style=\"margin-left:22%;\">The data cache block size.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_EGID</b></p>\n\n<p style=\"margin-left:22%;\">The effective group ID of the\nthread.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_ENTRY</b></p>\n\n<p style=\"margin-left:22%;\">The entry address of the\nexecutable.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_EUID</b></p>\n\n<p style=\"margin-left:22%;\">The effective user ID of the\nthread.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_EXECFD</b></p>\n\n<p style=\"margin-left:22%;\">File descriptor of program.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_EXECFN</b></p>\n\n<p style=\"margin-left:22%;\">A pointer to a string\ncontaining the pathname used to execute the program.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_FLAGS</b></p>\n\n<p style=\"margin-left:22%;\">Flags (unused).</p>\n\n<p style=\"margin-left:11%;\"><b>AT_FPUCW</b></p>\n\n<p style=\"margin-left:22%;\">Used FPU control word (SuperH\narchitecture only). This gives some information about the\nFPU initialization performed by the kernel.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>AT_GID</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"49%\">\n\n\n<p>The real group ID of the thread.</p></td>\n<td width=\"29%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>AT_HWCAP</b></p>\n\n<p style=\"margin-left:22%;\">An architecture and ABI\ndependent bit-mask whose settings indicate detailed\nprocessor capabilities. The contents of the bit mask are\nhardware dependent (for example, see the kernel source file\n<i>arch/x86/include/asm/cpufeature.h</i> for details\nrelating to the Intel x86 architecture; the value returned\nis the first 32-bit word of the array described there). A\nhuman-readable version of the same information is available\nvia <i>/proc/cpuinfo</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_HWCAP2</b> (since glibc\n2.18)</p>\n\n<p style=\"margin-left:22%;\">Further machine-dependent hints\nabout processor capabilities.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_ICACHEBSIZE</b></p>\n\n<p style=\"margin-left:22%;\">The instruction cache block\nsize.</p>\n\n\n<p style=\"margin-left:11%;\"><b>AT_L1D_CACHEGEOMETRY</b></p>\n\n<p style=\"margin-left:22%;\">Geometry of the L1 data cache,\nencoded with the cache line size in bytes in the bottom 16\nbits and the cache associativity in the next 16 bits. The\nassociativity is such that if N is the 16-bit value, the\ncache is N-way set associative.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_L1D_CACHESIZE</b></p>\n\n<p style=\"margin-left:22%;\">The L1 data cache size.</p>\n\n\n<p style=\"margin-left:11%;\"><b>AT_L1I_CACHEGEOMETRY</b></p>\n\n<p style=\"margin-left:22%;\">Geometry of the L1 instruction\ncache, encoded as for <b>AT_L1D_CACHEGEOMETRY</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_L1I_CACHESIZE</b></p>\n\n<p style=\"margin-left:22%;\">The L1 instruction cache\nsize.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_L2_CACHEGEOMETRY</b></p>\n\n<p style=\"margin-left:22%;\">Geometry of the L2 cache,\nencoded as for <b>AT_L1D_CACHEGEOMETRY</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_L2_CACHESIZE</b></p>\n\n<p style=\"margin-left:22%;\">The L2 cache size.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_L3_CACHEGEOMETRY</b></p>\n\n<p style=\"margin-left:22%;\">Geometry of the L3 cache,\nencoded as for <b>AT_L1D_CACHEGEOMETRY</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_L3_CACHESIZE</b></p>\n\n<p style=\"margin-left:22%;\">The L3 cache size.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_PAGESZ</b></p>\n\n<p style=\"margin-left:22%;\">The system page size (the same\nvalue returned by <i>sysconf(_SC_PAGESIZE)</i>).</p>\n\n<p style=\"margin-left:11%;\"><b>AT_PHDR</b></p>\n\n<p style=\"margin-left:22%;\">The address of the program\nheaders of the executable.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_PHENT</b></p>\n\n<p style=\"margin-left:22%;\">The size of program header\nentry.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_PHNUM</b></p>\n\n<p style=\"margin-left:22%;\">The number of program\nheaders.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_PLATFORM</b></p>\n\n<p style=\"margin-left:22%;\">A pointer to a string that\nidentifies the hardware platform that the program is running\non. The dynamic linker uses this in the interpretation of\n<i>rpath</i> values.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_RANDOM</b></p>\n\n<p style=\"margin-left:22%;\">The address of sixteen bytes\ncontaining a random value.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_SECURE</b></p>\n\n<p style=\"margin-left:22%;\">Has a nonzero value if this\nexecutable should be treated securely. Most commonly, a\nnonzero value indicates that the process is executing a\nset-user-ID or set-group-ID binary (so that its real and\neffective UIDs or GIDs differ from one another), or that it\ngained capabilities by executing a binary file that has\ncapabilities (see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>). Alternatively, a\nnonzero value may be triggered by a Linux Security Module.\nWhen this value is nonzero, the dynamic linker disables the\nuse of certain environment variables (see\n<b>ld-linux.so</b>(8)) and glibc changes other aspects of\nits behavior. (See also <a href=\"https://man.page/3/secure_getenv\">secure_getenv(3)</a>.)</p>\n\n<p style=\"margin-left:11%;\"><b>AT_SYSINFO</b></p>\n\n<p style=\"margin-left:22%;\">The entry point to the system\ncall function in the vDSO. Not present/needed on all\narchitectures (e.g., absent on x86-64).</p>\n\n<p style=\"margin-left:11%;\"><b>AT_SYSINFO_EHDR</b></p>\n\n<p style=\"margin-left:22%;\">The address of a page\ncontaining the virtual Dynamic Shared Object (vDSO) that the\nkernel creates in order to provide fast implementations of\ncertain system calls.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_UCACHEBSIZE</b></p>\n\n<p style=\"margin-left:22%;\">The unified cache block\nsize.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>AT_UID</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"47%\">\n\n\n<p>The real user ID of the thread.</p></td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>getauxval</b>() returns the value corresponding to\n<i>type</i>. If <i>type</i> is not found, 0 is returned.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ENOENT</b>\n(since glibc 2.19)</p>\n\n<p style=\"margin-left:22%;\">No entry corresponding to\n<i>type</i> could be found in the auxiliary vector.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getauxval</b>() function was added to glibc in version\n2.16.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3370871.png\" alt=\"Image grohtml-3370871.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis a nonstandard glibc extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The primary\nconsumer of the information in the auxiliary vector is the\ndynamic linker, <b>ld-linux.so</b>(8). The auxiliary vector\nis a convenient and efficient shortcut that allows the\nkernel to communicate a certain set of standard information\nthat the dynamic linker usually or always needs. In some\ncases, the same information could be obtained by system\ncalls, but using the auxiliary vector is cheaper.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The auxiliary\nvector resides just above the argument list and environment\nin the process address space. The auxiliary vector supplied\nto a program can be viewed by setting the\n<b>LD_SHOW_AUXV</b> environment variable when running a\nprogram:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\nLD_SHOW_AUXV=1 sleep 1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The auxiliary\nvector of any process can (subject to file permissions) be\nobtained via <i>/proc/[pid]/auxv</i>; see <a href=\"https://man.page/5/proc\">proc(5)</a> for\nmore information.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before the\naddition of the <b>ENOENT</b> error in glibc 2.19, there was\nno way to unambiguously distinguish the case where\n<i>type</i> could not be found from the case where the value\ncorresponding to <i>type</i> was zero.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/secure_getenv\">secure_getenv(3)</a>,\n<a href=\"https://man.page/7/vdso\">vdso(7)</a>, <b>ld-linux.so</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}