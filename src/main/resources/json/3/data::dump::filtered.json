{"name":"data::dump::filtered","description":"Data::Dump::Filtered - Pretty printing with filtering","body":"\n\n<h1 align=\"center\">Data::Dump::Filtered</h1>\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Data::Dump::Filtered\n- Pretty printing with filtering</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are provided: <br>\nadd_dump_filter( \\&amp;filter )</p>\n\n<p style=\"margin-left:17%;\">This registers a filter\nfunction to be used by the regular <b>Data::Dump::dump()</b>\nfunction. By default no filters are active.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Since\nregistering filters has a global effect is might be more\nappropriate to use the <b>dump_filtered()</b> function\ninstead.</p>\n\n<p style=\"margin-left:11%;\">remove_dump_filter(\n\\&amp;filter )</p>\n\n<p style=\"margin-left:17%;\">Unregister the given callback\nfunction as filter callback. This undoes the effect of\nadd_filter.</p>\n\n<p style=\"margin-left:11%;\">dump_filtered(..., \\&amp;filter\n)</p>\n\n<p style=\"margin-left:17%;\">Works like\n<b>Data::Dump::dump()</b>, but the last argument should be a\nfilter callback function. As objects are visited the filter\ncallback is invoked at it might influence how objects are\ndumped.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Any filters\nregistered with <b>add_filter()</b> are ignored when this\ninterface is invoked. Actually, passing &quot;undef&quot; as\n\\&amp;filter is allowed and &quot;dump_filtered(...,\nundef)&quot; is the official way to force unfiltered\ndumps.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Filter\ncallback</b> <br>\nA filter callback is a function that will be invoked with 2\narguments; a context object and reference to the object\ncurrently visited. The return value should either be a hash\nreference or &quot;undef&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub\nfilter_callback { <br>\nmy($ctx, $object_ref) = @_; <br>\n... <br>\nreturn { ... } <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the filter\ncallback returns &quot;undef&quot; (or nothing) then normal\nprocessing and formatting of the visited object happens. If\nthe filter callback returns a hash it might replace or\nannotate the representation of the current object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Filter\ncontext</b> <br>\nThe context object provide methods that can be used to\ndetermine what kind of object is currently visited and where\nit&rsquo;s located. The context object has the following\ninterface: <br>\n$ctx-&gt;object_ref</p>\n\n<p style=\"margin-left:17%;\">Alternative way to obtain a\nreference to the current object</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;class</p>\n\n<p style=\"margin-left:17%;\">If the object is blessed this\nreturn the class. Returns &quot;&quot; for objects not\nblessed.</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;reftype</p>\n\n<p style=\"margin-left:17%;\">Returns what kind of object\nthis is. It&rsquo;s a string like &quot;\n<small>SCALAR&quot;, &quot;ARRAY&quot;, &quot;HASH&quot;,\n&quot;CODE&quot;,...</small></p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;is_ref</p>\n\n<p style=\"margin-left:17%;\">Returns true if a reference was\nprovided.</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;is_blessed</p>\n\n<p style=\"margin-left:17%;\">Returns true if the object is\nblessed. Actually, this is just an alias for\n&quot;$ctx-&gt;class&quot;.</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;is_array</p>\n\n<p style=\"margin-left:17%;\">Returns true if the object is\nan array</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;is_hash</p>\n\n<p style=\"margin-left:17%;\">Returns true if the object is a\nhash</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;is_scalar</p>\n\n<p style=\"margin-left:17%;\">Returns true if the object is a\nscalar (a string or a number)</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;is_code</p>\n\n<p style=\"margin-left:17%;\">Returns true if the object is a\nfunction (aka subroutine)</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;container_class</p>\n\n<p style=\"margin-left:17%;\">Returns the class of the\ninnermost container that contains this object. Returns\n&quot;&quot; if there is no blessed container.</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;container_self</p>\n\n<p style=\"margin-left:17%;\">Returns an textual expression\nrelative to the container object that names this object. The\nvariable $self in this expression is the container\nitself.</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;object_isa( $class\n)</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe current object is of the given class or is of a\nsubclass.</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;container_isa( $class\n)</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe innermost container is of the given class or is of a\nsubclass.</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;depth</p>\n\n<p style=\"margin-left:17%;\">Returns how many levels deep\nhave we recursed into the structure (from the original\n<b>dump_filtered()</b> arguments).</p>\n\n<p style=\"margin-left:11%;\">$ctx-&gt;expr <br>\n$ctx-&gt;expr( $top_level_name )</p>\n\n<p style=\"margin-left:17%;\">Returns an textual expression\nthat denotes the current object. In the expression $var is\nused as the name of the top level object dumped. This can be\noverridden by providing a different name as argument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Filter\nreturn hash</b> <br>\nThe following elements has significance in the returned\nhash: <br>\ndump =&gt; $string</p>\n\n<p style=\"margin-left:17%;\">incorporate the given string as\nthe representation for the current value</p>\n\n<p style=\"margin-left:11%;\">object =&gt; $value</p>\n\n<p style=\"margin-left:17%;\">dump the given value instead of\nthe one visited and passed in as $object. Basically the same\nas specifying &quot;dump =&gt;\nData::Dump::dump($value)&quot;.</p>\n\n<p style=\"margin-left:11%;\">comment =&gt; $comment</p>\n\n<p style=\"margin-left:17%;\">prefix the value with the given\ncomment string</p>\n\n<p style=\"margin-left:11%;\">bless =&gt; $class</p>\n\n<p style=\"margin-left:17%;\">make it look as if the current\nobject is of the given $class instead of the class it really\nhas (if any). The internals of the object is dumped in the\nregular way. The $class can be the empty string to make\nData::Dump pretend the object wasn&rsquo;t blessed at\nall.</p>\n\n<p style=\"margin-left:11%;\">hide_keys =&gt;\n[&rsquo;key1&rsquo;, &rsquo;key2&rsquo;,...] <br>\nhide_keys =&gt; \\&amp;code</p>\n\n<p style=\"margin-left:17%;\">If the $object is a hash dump\nis as normal but pretend that the listed keys did not exist.\nIf the argument is a function then the function is called to\ndetermine if the given key should be hidden.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n \n<p style=\"margin-left:11%; margin-top: 1em\">Data::Dump</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}