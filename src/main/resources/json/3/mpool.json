{"name":"mpool","description":"mpool - shared\nmemory buffer pool","body":"\n\n<h1 align=\"center\">MPOOL</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mpool - shared\nmemory buffer pool</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;db.h&gt; <br>\n#include &lt;mpool.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MPOOL\n*mpool_open(DBT *</b><i>key</i><b>, int</b> <i>fd</i><b>,\npgno_t</b> <i>pagesize</i><b>, pgno_t</b>\n<i>maxcache</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nmpool_filter(MPOOL *</b><i>mp</i><b>, void (*pgin)(void *,\npgno_t, void *), <br>\nvoid (*</b><i>pgout</i><b>)(void *, pgno_t, void *), <br>\nvoid *</b><i>pgcookie</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*mpool_new(MPOOL *</b><i>mp</i><b>, pgno_t\n*</b><i>pgnoaddr</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*mpool_get(MPOOL *</b><i>mp</i><b>, pgno_t</b>\n<i>pgno</i><b>, unsigned int</b> <i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmpool_put(MPOOL *</b><i>mp</i><b>, void\n*</b><i>pgaddr</i><b>, unsigned int</b>\n<i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmpool_sync(MPOOL *</b><i>mp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmpool_close(MPOOL *</b><i>mp</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>Note\nwell</i></b>: This page documents interfaces provided in\nglibc up until version 2.1. Since version 2.2, glibc no\nlonger provides these interfaces. Probably, you are looking\nfor the APIs provided by the <i>libdb</i> library\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Mpool</i> is\nthe library interface intended to provide page oriented\nbuffer management of files. The buffers may be shared\nbetween processes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>mpool_open</b>() initializes a memory pool. The\n<i>key</i> argument is the byte string used to negotiate\nbetween multiple processes wishing to share buffers. If the\nfile buffers are mapped in shared memory, all processes\nusing the same key will share the buffers. If <i>key</i> is\nNULL, the buffers are mapped into private memory. The\n<i>fd</i> argument is a file descriptor for the underlying\nfile, which must be seekable. If <i>key</i> is non-NULL and\nmatches a file already being mapped, the <i>fd</i> argument\nis ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>pagesize</i> argument is the size, in bytes, of the pages\ninto which the file is broken up. The <i>maxcache</i>\nargument is the maximum number of pages from the underlying\nfile to cache at any one time. This value is not relative to\nthe number of processes which share a file&rsquo;s buffers,\nbut will be the largest value specified by any of the\nprocesses sharing the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mpool_filter</b>() function is intended to make\ntransparent input and output processing of the pages\npossible. If the <i>pgin</i> function is specified, it is\ncalled each time a buffer is read into the memory pool from\nthe backing file. If the <i>pgout</i> function is specified,\nit is called each time a buffer is written into the backing\nfile. Both functions are called with the <i>pgcookie</i>\npointer, the page number and a pointer to the page to being\nread or written.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>mpool_new</b>() takes an <i>MPOOL</i> pointer and an\naddress as arguments. If a new page can be allocated, a\npointer to the page is returned and the page number is\nstored into the <i>pgnoaddr</i> address. Otherwise, NULL is\nreturned and <i>errno</i> is set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>mpool_get</b>() takes an <i>MPOOL</i> pointer and a page\nnumber as arguments. If the page exists, a pointer to the\npage is returned. Otherwise, NULL is returned and\n<i>errno</i> is set. The <i>flags</i> argument is not\ncurrently used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>mpool_put</b>() unpins the page referenced by\n<i>pgaddr</i>. <i>pgaddr</i> must be an address previously\nreturned by <b>mpool_get</b>() or <b>mpool_new</b>(). The\nflag value is specified by ORing any of the following\nvalues: <b><br>\nMPOOL_DIRTY</b></p>\n\n<p style=\"margin-left:22%;\">The page has been modified and\nneeds to be written to the backing file.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mpool_put</b>()\nreturns 0 on success and -1 if an error occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>mpool_sync</b>() writes all modified pages associated\nwith the <i>MPOOL</i> pointer to the backing file.\n<b>mpool_sync</b>() returns 0 on success and -1 if an error\noccurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mpool_close</b>() function free&rsquo;s up any allocated\nmemory associated with the memory pool cookie. Modified\npages are <b>not</b> written to the backing file.\n<b>mpool_close</b>() returns 0 on success and -1 if an error\noccurs.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mpool_open</b>() function may fail and set <i>errno</i>\nfor any of the errors specified for the library routine\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mpool_get</b>() function may fail and set <i>errno</i>\nfor the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"14%\"></td>\n<td width=\"54%\">\n\n\n<p>The requested record doesn&rsquo;t exist.</p></td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mpool_new</b>() and <b>mpool_get</b>() functions may fail\nand set <i>errno</i> for any of the errors specified for the\nlibrary routines <a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>, and\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mpool_sync</b>() function may fail and set <i>errno</i>\nfor any of the errors specified for the library routine\n<a href=\"https://man.page/2/write\">write(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mpool_close</b>() function may fail and set <i>errno</i>\nfor any of the errors specified for the library routine\n<a href=\"https://man.page/3/free\">free(3)</a>.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Not in POSIX.1.\nPresent on the BSDs.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/btree\">btree(3)</a>,\n<a href=\"https://man.page/3/dbopen\">dbopen(3)</a>, <a href=\"https://man.page/3/hash\">hash(3)</a>, <a href=\"https://man.page/3/recno\">recno(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}