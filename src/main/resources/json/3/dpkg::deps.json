{"name":"dpkg::deps","description":"Dpkg::Deps - parse and manipulate dependencies of Debian packages","body":"\n\n<h1 align=\"center\">Dpkg::Deps</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Deps -\nparse and manipulate dependencies of Debian packages</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Dpkg::Deps\nmodule provides classes implementing various types of\ndependencies.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The most\nimportant function is <b>deps_parse()</b>, it turns a\ndependency line in a set of\nDpkg::Deps::{Simple,AND,OR,Union} objects depending on the\ncase.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All the deps_*\nfunctions are exported by default. <br>\ndeps_eval_implication($rel_p, $v_p, $rel_q, $v_q)</p>\n\n<p style=\"margin-left:17%;\">($rel_p, $v_p) and ($rel_q,\n$v_q) express two dependencies as (relation, version). The\nrelation variable can have the following values that are\nexported by Dpkg::Version: <small>REL_EQ, REL_LT, REL_LE,\nREL_GT, REL_GT.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This functions\nreturns 1 if the &quot;p&quot; dependency implies the\n&quot;q&quot; dependency. It returns 0 if the &quot;p&quot;\ndependency implies that &quot;q&quot; is not satisfied. It\nreturns undef when there&rsquo;s no implication.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $v_p and\n$v_q parameter should be Dpkg::Version objects.</p>\n\n<p style=\"margin-left:11%;\">$dep =\ndeps_concat(@dep_list)</p>\n\n<p style=\"margin-left:17%;\">This function concatenates\nmultiple dependency lines into a single line, joining them\nwith &quot;, &quot; if appropriate, and always returning a\nvalid string.</p>\n\n<p style=\"margin-left:11%;\">$dep = deps_parse($line,\n%options)</p>\n\n<p style=\"margin-left:17%;\">This function parses the\ndependency line and returns an object, either a\nDpkg::Deps::AND or a Dpkg::Deps::Union. Various options can\nalter the behaviour of that function. <br>\nuse_arch (defaults to 1)</p>\n\n<p style=\"margin-left:23%;\">Take into account the\narchitecture restriction part of the dependencies. Set to 0\nto completely ignore that information.</p>\n\n<p style=\"margin-left:17%;\">host_arch (defaults to the\ncurrent architecture)</p>\n\n<p style=\"margin-left:23%;\">Define the host architecture.\nBy default it uses <b>Dpkg::Arch::get_host_arch()</b> to\nidentify the proper architecture.</p>\n\n<p style=\"margin-left:17%;\">build_arch (defaults to the\ncurrent architecture)</p>\n\n<p style=\"margin-left:23%;\">Define the build architecture.\nBy default it uses <b>Dpkg::Arch::get_build_arch()</b> to\nidentify the proper architecture.</p>\n\n<p style=\"margin-left:17%;\">reduce_arch (defaults to 0)</p>\n\n<p style=\"margin-left:23%;\">If set to 1, ignore\ndependencies that do not concern the current host\narchitecture. This implicitly strips off the architecture\nrestriction list so that the resulting dependencies are\ndirectly applicable to the current architecture.</p>\n\n<p style=\"margin-left:17%;\">use_profiles (defaults to\n1)</p>\n\n<p style=\"margin-left:23%;\">Take into account the profile\nrestriction part of the dependencies. Set to 0 to completely\nignore that information.</p>\n\n<p style=\"margin-left:17%;\">build_profiles (defaults to no\nprofile)</p>\n\n<p style=\"margin-left:23%;\">Define the active build\nprofiles. By default no profile is defined.</p>\n\n<p style=\"margin-left:17%;\">reduce_profiles (defaults to\n0)</p>\n\n<p style=\"margin-left:23%;\">If set to 1, ignore\ndependencies that do not concern the current build profile.\nThis implicitly strips off the profile restriction formula\nso that the resulting dependencies are directly applicable\nto the current profiles.</p>\n\n<p style=\"margin-left:17%;\">reduce_restrictions (defaults\nto 0)</p>\n\n<p style=\"margin-left:23%;\">If set to 1, ignore\ndependencies that do not concern the current set of\nrestrictions. This implicitly strips off any architecture\nrestriction list or restriction formula so that the\nresulting dependencies are directly applicable to the\ncurrent restriction. This currently implies\n&quot;reduce_arch&quot; and &quot;reduce_profiles&quot;, and\noverrides them if set.</p>\n\n<p style=\"margin-left:17%;\">union (defaults to 0)</p>\n\n<p style=\"margin-left:23%;\">If set to 1, returns a\nDpkg::Deps::Union instead of a Dpkg::Deps::AND. Use this\nwhen parsing non-dependency fields like Conflicts.</p>\n\n<p style=\"margin-left:17%;\">virtual (defaults to 0)</p>\n\n<p style=\"margin-left:23%;\">If set to 1, allow only virtual\npackage version relations, that is none, or &acirc;=&acirc;.\nThis should be set whenever working with Provides\nfields.</p>\n\n<p style=\"margin-left:17%;\">build_dep (defaults to 0)</p>\n\n<p style=\"margin-left:23%;\">If set to 1, allow build-dep\nonly arch qualifiers, that is &acirc;:native&acirc;. This\nshould be set whenever working with build-deps.</p>\n\n<p style=\"margin-left:17%;\">tests_dep (defaults to 0)</p>\n\n<p style=\"margin-left:23%;\">If set to 1, allow\ntests-specific package names in dependencies, that is\n&quot;@&quot; and &quot;@builddeps@&quot; (since dpkg\n1.18.7). This should be set whenever working with dependency\nfields from <i>debian/tests/control</i>.</p>\n\n<p style=\"margin-left:11%;\">$bool = deps_iterate($deps,\n$callback_func)</p>\n\n<p style=\"margin-left:17%;\">This function visits all\nelements of the dependency object, calling the callback\nfunction for each element.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback\nfunction is expected to return true when everything is fine,\nor false if something went wrong, in which case the\niteration will stop.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return the same\nvalue as the callback function.</p>\n\n<p style=\"margin-left:11%;\">deps_compare($a, $b)</p>\n\n<p style=\"margin-left:17%;\">Implements a comparison\noperator between two dependency objects. This function is\nmainly used to implement the <b>sort()</b> method.</p>\n\n<h2>CLASSES - Dpkg::Deps::*\n<a name=\"CLASSES - Dpkg::Deps::*\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are\nseveral kind of dependencies. A Dpkg::Deps::Simple\ndependency represents a single dependency statement (it\nrelates to one package only). Dpkg::Deps::Multiple\ndependencies are built on top of this class and combine\nseveral dependencies in different manners. Dpkg::Deps::AND\nrepresents the logical &quot; <small>AND&quot;</small>\nbetween dependencies while Dpkg::Deps::OR represents the\nlogical &quot; <small>OR&quot;.</small> Dpkg::Deps::Multiple\nobjects can contain Dpkg::Deps::Simple object as well as\nother Dpkg::Deps::Multiple objects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In practice,\nthe code is only meant to handle the realistic cases which,\ngiven Debian&rsquo;s dependencies structure, imply those\nrestrictions: <small>AND</small> can contain Simple or\n<small>OR</small> objects, <small>OR</small> can only\ncontain Simple objects.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Deps::KnownFacts\nis a special class that is used while evaluating\ndependencies and while trying to simplify them. It\nrepresents a set of installed packages along with the\nvirtual packages that they might provide.</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.07\n(dpkg 1.20.0)</b> <br>\nNew option: Add virtual option to\n<b>Dpkg::Deps::deps_parse()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.06\n(dpkg 1.18.7; module version bumped on dpkg 1.18.24)</b>\n<br>\nNew option: Add tests_dep option to\n<b>Dpkg::Deps::deps_parse()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.05\n(dpkg 1.17.14)</b> <br>\nNew function: <b>Dpkg::Deps::deps_iterate()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.04\n(dpkg 1.17.10)</b> <br>\nNew options: Add use_profiles, build_profiles,\nreduce_profiles and reduce_restrictions to\n<b>Dpkg::Deps::deps_parse()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.03\n(dpkg 1.17.0)</b> <br>\nNew option: Add build_arch option to\n<b>Dpkg::Deps::deps_parse()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.02\n(dpkg 1.17.0)</b> <br>\nNew function: <b>Dpkg::Deps::deps_concat()</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.01\n(dpkg 1.16.1)</b> <br>\n&lt;Used to document changes to Dpkg::Deps::* modules before\nthey were split.&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.15.6)</b> <br>\nMark the module as public.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#CLASSES - Dpkg::Deps::*\">CLASSES - Dpkg::Deps::*</a>","<a href=\"#CHANGES\">CHANGES</a>"],"level":3}