{"name":"malloc_info","description":"malloc_info - export malloc state to a stream","body":"\n\n<h1 align=\"center\">MALLOC_INFO</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">malloc_info -\nexport malloc state to a stream</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;malloc.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmalloc_info(int</b> <i>options</i><b>, FILE\n*</b><i>stream</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>malloc_info</b>() function exports an XML string that\ndescribes the current state of the memory-allocation\nimplementation in the caller. The string is printed on the\nfile stream <i>stream</i>. The exported string includes\ninformation about all arenas (see <a href=\"https://man.page/3/malloc\">malloc(3)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As currently\nimplemented, <i>options</i> must be zero.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>malloc_info</b>() returns 0; on error, it returns -1,\nwith <i>errno</i> set to indicate the cause.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"30%\">\n\n\n<p style=\"margin-top: 1em\"><i>options</i> was nonzero.</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>malloc_info</b>()\nwas added to glibc in version 2.10.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3339351.png\" alt=\"Image grohtml-3339351.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis a GNU extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nmemory-allocation information is provided as an XML string\n(rather than a C structure) because the information may\nchange over time (according to changes in the underlying\nimplementation). The output XML string includes a version\nfield.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<a href=\"https://man.page/3/open_memstream\">open_memstream(3)</a> function can be used to send the\noutput of <b>malloc_info</b>() directly into a buffer in\nmemory, rather than to a file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>malloc_info</b>() function is designed to address\ndeficiencies in <a href=\"https://man.page/3/malloc_stats\">malloc_stats(3)</a> and\n<a href=\"https://man.page/3/mallinfo\">mallinfo(3)</a>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow takes up to four command-line arguments, of which the\nfirst three are mandatory. The first argument specifies the\nnumber of threads that the program should create. All of the\nthreads, including the main thread, allocate the number of\nblocks of memory specified by the second argument. The third\nargument controls the size of the blocks to be allocated.\nThe main thread creates blocks of this size, the second\nthread created by the program allocates blocks of twice this\nsize, the third thread allocates blocks of three times this\nsize, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\ncalls <b>malloc_info</b>() twice to display the\nmemory-allocation state. The first call takes place before\nany threads are created or memory allocated. The second call\nis performed after all threads have allocated memory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing example, the command-line arguments specify the\ncreation of one additional thread, and both the main thread\nand the additional thread allocate 10000 blocks of memory.\nAfter the blocks of memory have been allocated,\n<b>malloc_info</b>() shows the state of two allocation\narenas.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>getconf\nGNU_LIBC_VERSION</b> <br>\nglibc 2.13 <br>\n$ <b>./a.out 1 10000 100</b> <br>\n============ Before allocating blocks ============ <br>\n&lt;malloc version=&quot;1&quot;&gt; <br>\n&lt;heap nr=&quot;0&quot;&gt; <br>\n&lt;sizes&gt; <br>\n&lt;/sizes&gt; <br>\n&lt;total type=&quot;fast&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;total type=&quot;rest&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;system type=&quot;current&quot;\nsize=&quot;135168&quot;/&gt; <br>\n&lt;system type=&quot;max&quot; size=&quot;135168&quot;/&gt;\n<br>\n&lt;aspace type=&quot;total&quot;\nsize=&quot;135168&quot;/&gt; <br>\n&lt;aspace type=&quot;mprotect&quot;\nsize=&quot;135168&quot;/&gt; <br>\n&lt;/heap&gt; <br>\n&lt;total type=&quot;fast&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;total type=&quot;rest&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;system type=&quot;current&quot;\nsize=&quot;135168&quot;/&gt; <br>\n&lt;system type=&quot;max&quot; size=&quot;135168&quot;/&gt;\n<br>\n&lt;aspace type=&quot;total&quot;\nsize=&quot;135168&quot;/&gt; <br>\n&lt;aspace type=&quot;mprotect&quot;\nsize=&quot;135168&quot;/&gt; <br>\n&lt;/malloc&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">============\nAfter allocating blocks ============ <br>\n&lt;malloc version=&quot;1&quot;&gt; <br>\n&lt;heap nr=&quot;0&quot;&gt; <br>\n&lt;sizes&gt; <br>\n&lt;/sizes&gt; <br>\n&lt;total type=&quot;fast&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;total type=&quot;rest&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;system type=&quot;current&quot;\nsize=&quot;1081344&quot;/&gt; <br>\n&lt;system type=&quot;max&quot;\nsize=&quot;1081344&quot;/&gt; <br>\n&lt;aspace type=&quot;total&quot;\nsize=&quot;1081344&quot;/&gt; <br>\n&lt;aspace type=&quot;mprotect&quot;\nsize=&quot;1081344&quot;/&gt; <br>\n&lt;/heap&gt; <br>\n&lt;heap nr=&quot;1&quot;&gt; <br>\n&lt;sizes&gt; <br>\n&lt;/sizes&gt; <br>\n&lt;total type=&quot;fast&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;total type=&quot;rest&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;system type=&quot;current&quot;\nsize=&quot;1032192&quot;/&gt; <br>\n&lt;system type=&quot;max&quot;\nsize=&quot;1032192&quot;/&gt; <br>\n&lt;aspace type=&quot;total&quot;\nsize=&quot;1032192&quot;/&gt; <br>\n&lt;aspace type=&quot;mprotect&quot;\nsize=&quot;1032192&quot;/&gt; <br>\n&lt;/heap&gt; <br>\n&lt;total type=&quot;fast&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;total type=&quot;rest&quot; count=&quot;0&quot;\nsize=&quot;0&quot;/&gt; <br>\n&lt;system type=&quot;current&quot;\nsize=&quot;2113536&quot;/&gt; <br>\n&lt;system type=&quot;max&quot;\nsize=&quot;2113536&quot;/&gt; <br>\n&lt;aspace type=&quot;total&quot;\nsize=&quot;2113536&quot;/&gt; <br>\n&lt;aspace type=&quot;mprotect&quot;\nsize=&quot;2113536&quot;/&gt; <br>\n&lt;/malloc&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;pthread.h&gt; <br>\n#include &lt;malloc.h&gt; <br>\n#include &lt;errno.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static size_t\nblockSize; <br>\nstatic int numThreads, numBlocks;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nerrExit(msg) do { perror(msg); exit(EXIT_FAILURE); \\ <br>\n} while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void *\n<br>\nthread_func(void *arg) <br>\n{ <br>\nint tn = (int) arg;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* The\nmultiplier '(2 + tn)' ensures that each thread (including\n<br>\nthe main thread) allocates a different amount of memory\n*/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (int j = 0;\nj &lt; numBlocks; j++) <br>\nif (malloc(blockSize * (2 + tn)) == NULL) <br>\nerrExit(&quot;malloc-thread&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sleep(100); /*\nSleep until main thread terminates */ <br>\nreturn NULL; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint sleepTime;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &lt;\n4) { <br>\nfprintf(stderr, <br>\n&quot;%s num-threads num-blocks block-size\n[sleep-time]\\n&quot;, <br>\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">numThreads =\natoi(argv[1]); <br>\nnumBlocks = atoi(argv[2]); <br>\nblockSize = atoi(argv[3]); <br>\nsleepTime = (argc &gt; 4) ? atoi(argv[4]) : 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthread_t *thr\n= calloc(numThreads, sizeof(*thr)); <br>\nif (thr == NULL) <br>\nerrExit(&quot;calloc&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;============\nBefore allocating blocks ============\\n&quot;); <br>\nmalloc_info(0, stdout);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Create\nthreads that allocate different amounts of memory */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (int tn =\n0; tn &lt; numThreads; tn++) { <br>\nerrno = pthread_create(&amp;thr[tn], NULL, thread_func, <br>\n(void *) tn); <br>\nif (errno != 0) <br>\nerrExit(&quot;pthread_create&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* If we add a\nsleep interval after the start-up of each <br>\nthread, the threads likely won't contend for malloc <br>\nmutexes, and therefore additional arenas won't be <br>\nallocated (see malloc(3)). */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (sleepTime\n&gt; 0) <br>\nsleep(sleepTime); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* The main\nthread also allocates some memory */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (int j = 0;\nj &lt; numBlocks; j++) <br>\nif (malloc(blockSize) == NULL) <br>\nerrExit(&quot;malloc&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sleep(2); /*\nGive all threads a chance to <br>\ncomplete allocations */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;\\n============\nAfter allocating blocks ============\\n&quot;); <br>\nmalloc_info(0, stdout);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/mallinfo\">mallinfo(3)</a>,\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>, <a href=\"https://man.page/3/malloc_stats\">malloc_stats(3)</a>, <a href=\"https://man.page/3/mallopt\">mallopt(3)</a>,\n<a href=\"https://man.page/3/open_memstream\">open_memstream(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}