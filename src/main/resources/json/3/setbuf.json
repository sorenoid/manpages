{"name":"setbuf","body":"\n\n<h1 align=\"center\">SETBUF</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">setbuf,\nsetbuffer, setlinebuf, setvbuf - stream buffering\noperations</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdio.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nsetbuf(FILE *</b><i>stream</i><b>, char\n*</b><i>buf</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nsetbuffer(FILE *</b><i>stream</i><b>, char\n*</b><i>buf</i><b>, size_t</b> <i>size</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nsetlinebuf(FILE *</b><i>stream</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsetvbuf(FILE *</b><i>stream</i><b>, char *</b><i>buf</i><b>,\nint</b> <i>mode</i><b>, size_t</b> <i>size</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>setbuffer</b>(),\n<b>setlinebuf</b>(): <br>\nSince glibc 2.19: <br>\n_DEFAULT_SOURCE <br>\nGlibc 2.19 and earlier: <br>\n_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The three types\nof buffering available are unbuffered, block buffered, and\nline buffered. When an output stream is unbuffered,\ninformation appears on the destination file or terminal as\nsoon as written; when it is block buffered many characters\nare saved up and written as a block; when it is line\nbuffered characters are saved up until a newline is output\nor input is read from any stream attached to a terminal\ndevice (typically <i>stdin</i>). The function\n<a href=\"https://man.page/3/fflush\">fflush(3)</a> may be used to force the block out early.\n(See <a href=\"https://man.page/3/fclose\">fclose(3)</a>.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Normally all\nfiles are block buffered. If a stream refers to a terminal\n(as <i>stdout</i> normally does), it is line buffered. The\nstandard error stream <i>stderr</i> is always unbuffered by\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setvbuf</b>() function may be used on any open stream to\nchange its buffer. The <i>mode</i> argument must be one of\nthe following three macros:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>_IONBF</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"22%\">\n\n\n<p>unbuffered</p></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>_IOLBF</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"22%\">\n\n\n<p>line buffered</p></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>_IOFBF</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"22%\">\n\n\n<p>fully buffered</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Except for\nunbuffered files, the <i>buf</i> argument should point to a\nbuffer at least <i>size</i> bytes long; this buffer will be\nused instead of the current buffer. If the argument\n<i>buf</i> is NULL, only the mode is affected; a new buffer\nwill be allocated on the next read or write operation. The\n<b>setvbuf</b>() function may be used only after opening a\nstream and before any other operations have been performed\non it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The other three\ncalls are, in effect, simply aliases for calls to\n<b>setvbuf</b>(). The <b>setbuf</b>() function is exactly\nequivalent to the call</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">setvbuf(stream,\nbuf, buf ? _IOFBF : _IONBF, BUFSIZ);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setbuffer</b>() function is the same, except that the\nsize of the buffer is up to the caller, rather than being\ndetermined by the default <b>BUFSIZ</b>. The\n<b>setlinebuf</b>() function is exactly equivalent to the\ncall:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">setvbuf(stream,\nNULL, _IOLBF, 0);</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>setvbuf</b>() returns 0 on success. It returns nonzero on\nfailure (<i>mode</i> is invalid or the request cannot be\nhonored). It may set <i>errno</i> on failure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The other\nfunctions do not return a value.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3324391.png\" alt=\"Image grohtml-3324391.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setbuf</b>() and <b>setvbuf</b>() functions conform to\nC89 and C99.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You must make\nsure that the space that <i>buf</i> points to still exists\nby the time <i>stream</i> is closed, which also happens at\nprogram termination. For example, the following is\ninvalid:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stdio.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(void) <br>\n{ <br>\nchar buf[BUFSIZ]; <br>\nsetbuf(stdin, buf); <br>\nprintf(&quot;Hello, world!\\n&quot;); <br>\nreturn 0; <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/stdbuf\">stdbuf(1)</a>,\n<a href=\"https://man.page/3/fclose\">fclose(3)</a>, <a href=\"https://man.page/3/fflush\">fflush(3)</a>, <a href=\"https://man.page/3/fopen\">fopen(3)</a>,\n<a href=\"https://man.page/3/fread\">fread(3)</a>, <a href=\"https://man.page/3/malloc\">malloc(3)</a>, <a href=\"https://man.page/3/printf\">printf(3)</a>,\n<a href=\"https://man.page/3/puts\">puts(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}