{"name":"mail::address","description":"Mail::Address - parse mail addresses","body":"\n\n<h1 align=\"center\">Mail::Address</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Address -\nparse mail addresses</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nMail::Address; <br>\nmy @addrs = Mail::Address-&gt;parse($line); <br>\nforeach $addr (@addrs) { <br>\nprint $addr-&gt;format,&quot;\\n&quot;; <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Mail::Address&quot;\nextracts and manipulates email addresses from a message\nheader. It cannot be used to extract addresses from some\nrandom text. You can use this module to create\n<small>RFC822</small> compliant fields.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Although\n&quot;Mail::Address&quot; is a very popular subject for\nbooks, and is used in many applications, it does a very poor\njob on the more complex message fields. It does only handle\nsimple address formats (which covers about 95% of what can\nbe found). Problems are with</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>no support for address groups, even not with the\nsemi-colon as separator between addresses;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>limited support for escapes in phrases and comments.\nThere are cases where it can get wrong; and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>you have to take care of most escaping when you create\nan address yourself: &quot;Mail::Address&quot; does not do\nthat for you.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Often requests\nare made to the maintainers of this code improve this\nsituation, but this is not a good idea, where it will break\nzillions of existing applications. If you wish for a fully\n<small>RFC2822</small> compliant implementation you may take\na look at Mail::Message::Field::Full, part of MailBox.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>.\nExample</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $s =\nMail::Message::Field::Full-&gt;new($from_header); <br>\n# ref $s isa Mail::Message::Field::Addresses; <br>\nmy @g = $s-&gt;groups; # all groups, at least one <br>\n# ref $g[0] isa Mail::Message::Field::AddrGroup; <br>\nmy $ga = $g[0]-&gt;addresses; # group addresses <br>\nmy @a = $s-&gt;addresses; # all addresses <br>\n# ref $a[0] isa Mail::Message::Field::Address;</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Constructors</b>\n<br>\nMail::Address-&gt;<b>new</b>( $phrase, $address, [ $comment\n] )</p>\n\n<p style=\"margin-left:17%;\">Create a new\n&quot;Mail::Address&quot; object which represents an address\nwith the elements given. In a message these 3 elements would\nbe seen like:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">PHRASE\n&lt;ADDRESS&gt; (COMMENT) <br>\nADDRESS (COMMENT)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Mail::Address-&gt;new(&quot;Perl5\nPorters&quot;,\n&quot;perl5-porters@africa.nicoh.com&quot;);</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>parse</b>($line)</p>\n\n<p style=\"margin-left:17%;\">Parse the given line a return a\nlist of extracted &quot;Mail::Address&quot; objects. The\nline would normally be one taken from a To,Cc or Bcc line in\na message</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @addr =\nMail::Address-&gt;parse($line);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Accessors</b>\n<br>\n$obj-&gt;<b>address</b>()</p>\n\n<p style=\"margin-left:17%;\">Return the address part of the\nobject.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>comment</b>()</p>\n\n<p style=\"margin-left:17%;\">Return the comment part of the\nobject</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>format</b>(@addresses)</p>\n\n<p style=\"margin-left:17%;\">Return a string representing\nthe address in a suitable form to be placed on a\n&quot;To&quot;, &quot;Cc&quot;, or &quot;Bcc&quot; line of a\nmessage. This method is called on the first address to be\nused; other specified addresses will be appended, separated\nby commas.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>phrase</b>()</p>\n\n<p style=\"margin-left:17%;\">Return the phrase part of the\nobject.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Smart\naccessors</b> <br>\n$obj-&gt;<b>host</b>()</p>\n\n<p style=\"margin-left:17%;\">Return the address excluding\nthe user id and &rsquo;@&rsquo;</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>name</b>()</p>\n\n<p style=\"margin-left:17%;\">Using the information contained\nwithin the object attempt to identify what the person or\ngroups name is.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Note:</b>\nThis function tries to be smart with the &quot;phrase&quot;\nof the email address, which is probably a very bad idea.\nConsider to use <b>phrase()</b> itself.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>user</b>()</p>\n\n<p style=\"margin-left:17%;\">Return the address excluding\nthe &rsquo;@&rsquo; and the mail domain</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\npart of the MailTools distribution,\n<i>http://perl.overmeer.net/mailtools/</i>.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The MailTools\nbundle was developed by Graham Barr. Later, Mark Overmeer\ntook over maintenance without commitment to further\ndevelopment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Cap by\nGisle Aas &lt;aas@oslonett.no&gt;. Mail::Field::AddrList by\nPeter Orbaek &lt;poe@cit.dk&gt;. Mail::Mailer and Mail::Send\nby Tim Bunce &lt;Tim.Bunce@ig.co.uk&gt;. For other\ncontributors see ChangeLog.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyrights\n1995-2000 Graham Barr &lt;gbarr@pobox.com&gt; and 2001-2017\nMark Overmeer &lt;perl@overmeer.net&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself. See\n<i>http://www.perl.com/perl/misc/Artistic.html</i></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#LICENSE\">LICENSE</a>"],"level":3}