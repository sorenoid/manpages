{"name":"http::headers","description":"HTTP::Headers -\nClass encapsulating HTTP Message headers\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\nversion\n6.36","body":"\n\n<h1 align=\"center\">HTTP::Headers</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Headers -\nClass encapsulating HTTP Message headers</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.36</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">require\nHTTP::Headers; <br>\n$h = HTTP::Headers-&gt;new; <br>\n$h-&gt;header('Content-Type' =&gt; 'text/plain'); # set <br>\n$ct = $h-&gt;header('Content-Type'); # get <br>\n$h-&gt;remove_header('Content-Type'); # delete</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;HTTP::Headers&quot; class encapsulates HTTP-style\nmessage headers. The headers consist of attribute-value\npairs also called fields, which may be repeated, and which\nare printed in a particular order. The field names are cases\ninsensitive.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Instances of\nthis class are usually created as member variables of the\n&quot;HTTP::Request&quot; and &quot;HTTP::Response&quot;\nclasses, internal to the library.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are available: <br>\n$h = HTTP::Headers-&gt;new</p>\n\n<p style=\"margin-left:17%;\">Constructs a new\n&quot;HTTP::Headers&quot; object. You might pass some\ninitial attribute-value pairs as parameters to the\nconstructor. <i>E.g.</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$h =\nHTTP::Headers-&gt;new( <br>\nDate =&gt; 'Thu, 03 Feb 1994 00:00:00 GMT', <br>\nContent_Type =&gt; 'text/html; version=3.2', <br>\nContent_Base =&gt; 'http://www.perl.org/');</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The constructor\narguments are passed to the &quot;header&quot; method which\nis described below.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;clone</p>\n\n<p style=\"margin-left:17%;\">Returns a copy of this\n&quot;HTTP::Headers&quot; object.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;header( $field ) <br>\n$h-&gt;header( $field =&gt; $value ) <br>\n$h-&gt;header( $f1 =&gt; $v1, $f2 =&gt; $v2, ... )</p>\n\n<p style=\"margin-left:17%;\">Get or set the value of one or\nmore header fields. The header field name ($field) is not\ncase sensitive. To make the life easier for perl users who\nwants to avoid quoting before the =&gt; operator, you can\nuse &rsquo;_&rsquo; as a replacement for &rsquo;-&rsquo; in\nheader names.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>header()</b> method accepts multiple ($field =&gt;\n$value) pairs, which means that you can update several\nfields with a single invocation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $value\nargument may be a plain string or a reference to an array of\nstrings for a multi-valued field. If the $value is provided\nas &quot;undef&quot; then the field is removed. If the\n$value is not given, then that header field will remain\nunchanged. In addition to being a string, $value may be\nsomething that stringifies.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The old value\n(or values) of the last of the header fields is returned. If\nno such field exists &quot;undef&quot; will be returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A multi-valued\nfield will be returned as separate values in list context\nand will be concatenated with &quot;, &quot; as separator in\nscalar context. The <small>HTTP</small> spec ( <small>RFC\n2616</small> ) promises that joining multiple values in this\nway will not change the semantic of a header field, but in\npractice there are cases like old-style Netscape cookies\n(see HTTP::Cookies) where &quot;,&quot; is used as part of\nthe syntax of a single field value.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Examples:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$header-&gt;header(MIME_Version\n=&gt; '1.0', <br>\nUser_Agent =&gt; 'My-Web-Client/0.01'); <br>\n$header-&gt;header(Accept =&gt; &quot;text/html, text/plain,\nimage/*&quot;); <br>\n$header-&gt;header(Accept =&gt; [qw(text/html text/plain\nimage/*)]); <br>\n@accepts = $header-&gt;header('Accept'); # get multiple\nvalues <br>\n$accepts = $header-&gt;header('Accept'); # get values as a\nsingle string</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;push_header( $field\n=&gt; $value ) <br>\n$h-&gt;push_header( $f1 =&gt; $v1, $f2 =&gt; $v2, ... )</p>\n\n<p style=\"margin-left:17%;\">Add a new field value for the\nspecified header field. Previous values for the same field\nare retained.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As for the\n<b>header()</b> method, the field name ($field) is not case\nsensitive and &rsquo;_&rsquo; can be used as a replacement\nfor &rsquo;-&rsquo;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $value\nargument may be a scalar or a reference to a list of\nscalars.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$header-&gt;push_header(Accept\n=&gt; 'image/jpeg'); <br>\n$header-&gt;push_header(Accept =&gt; [map\n&quot;image/$_&quot;, qw(gif png tiff)]);</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;init_header( $field\n=&gt; $value )</p>\n\n<p style=\"margin-left:17%;\">Set the specified header to the\ngiven value, but only if no previous value for that field is\nset.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The header\nfield name ($field) is not case sensitive and\n&rsquo;_&rsquo; can be used as a replacement for\n&rsquo;-&rsquo;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $value\nargument may be a scalar or a reference to a list of\nscalars.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;remove_header( $field,\n... )</p>\n\n<p style=\"margin-left:17%;\">This function removes the\nheader fields with the specified names.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The header\nfield names ($field) are not case sensitive and\n&rsquo;_&rsquo; can be used as a replacement for\n&rsquo;-&rsquo;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The return\nvalue is the values of the fields removed. In scalar context\nthe number of fields removed is returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that if\nyou pass in multiple field names then it is generally not\npossible to tell which of the returned values belonged to\nwhich field.</p>\n\n\n<p style=\"margin-left:11%;\">$h-&gt;remove_content_headers</p>\n\n<p style=\"margin-left:17%;\">This will remove all the header\nfields used to describe the content of a message. All header\nfield names prefixed with &quot;Content-&quot; fall into\nthis category, as well as &quot;Allow&quot;,\n&quot;Expires&quot; and &quot;Last-Modified&quot;.\n<small>RFC 2616</small> denotes these fields as <i>Entity\nHeader Fields</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The return\nvalue is a new &quot;HTTP::Headers&quot; object that\ncontains the removed headers only.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;clear</p>\n\n<p style=\"margin-left:17%;\">This will remove all header\nfields.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;header_field_names</p>\n\n<p style=\"margin-left:17%;\">Returns the list of distinct\nnames for the fields present in the header. The field names\nhave case as suggested by <small>HTTP</small> spec, and the\nnames are returned in the recommended &quot;Good\nPractice&quot; order.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In scalar\ncontext return the number of distinct field names.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;scan(\n\\&amp;process_header_field )</p>\n\n<p style=\"margin-left:17%;\">Apply a subroutine to each\nheader field in turn. The callback routine is called with\ntwo parameters; the name of the field and a single value (a\nstring). If a header field is multi-valued, then the routine\nis called once for each value. The field name passed to the\ncallback routine has case as suggested by\n<small>HTTP</small> spec, and the headers will be visited in\nthe recommended &quot;Good Practice&quot; order.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Any return\nvalues of the callback routine are ignored. The loop can be\nbroken by raising an exception (&quot;die&quot;), but the\ncaller of <b>scan()</b> would have to trap the exception\nitself.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;<b>flatten()</b></p>\n\n<p style=\"margin-left:17%;\">Returns the list of pairs of\nkeys and values.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;as_string <br>\n$h-&gt;as_string( $eol )</p>\n\n<p style=\"margin-left:17%;\">Return the header fields as a\nformatted <small>MIME</small> header. Since it internally\nuses the &quot;scan&quot; method to build the string, the\nresult will use case as suggested by <small>HTTP</small>\nspec, and it will follow recommended &quot;Good\nPractice&quot; of ordering the header fields. Long header\nvalues are not folded.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The optional\n$eol parameter specifies the line ending sequence to use.\nThe default is &quot;\\n&quot;. Embedded &quot;\\n&quot;\ncharacters in header field values will be substituted with\nthis line ending sequence.</p>\n\n<h2>CONVENIENCE METHODS\n<a name=\"CONVENIENCE METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The most\nfrequently used headers can also be accessed through the\nfollowing convenience methods. Most of these methods can\nboth be used to read and to set the value of a header. The\nheader value is set if you pass an argument to the method.\nThe old header value is always returned. If the given header\ndid not exist then &quot;undef&quot; is returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Methods that\ndeal with dates/times always convert their value to system\ntime (seconds since Jan 1, 1970) and they also expect this\nkind of value when the header value is set. <br>\n$h-&gt;date</p>\n\n<p style=\"margin-left:17%;\">This header represents the date\nand time at which the message was originated.\n<i>E.g.</i>:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$h-&gt;date(time);\n# set current date</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;expires</p>\n\n<p style=\"margin-left:17%;\">This header gives the date and\ntime after which the entity should be considered stale.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;if_modified_since <br>\n$h-&gt;if_unmodified_since</p>\n\n<p style=\"margin-left:17%;\">These header fields are used to\nmake a request conditional. If the requested resource has\n(or has not) been modified since the time specified in this\nfield, then the server will return a &quot;304 Not\nModified&quot; response instead of the document itself.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;last_modified</p>\n\n<p style=\"margin-left:17%;\">This header indicates the date\nand time at which the resource was last modified.\n<i>E.g.</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># check if\ndocument is more than 1 hour old <br>\nif (my $last_mod = $h-&gt;last_modified) { <br>\nif ($last_mod &lt; time - 60*60) { <br>\n... <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;content_type</p>\n\n<p style=\"margin-left:17%;\">The Content-Type header field\nindicates the media type of the message content.\n<i>E.g.</i>:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$h-&gt;content_type('text/html');</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The value\nreturned will be converted to lower case, and potential\nparameters will be chopped off and returned as a separate\nvalue if in an array context. If there is no such header\nfield, then the empty string is returned. This makes it safe\nto do the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if\n($h-&gt;content_type eq 'text/html') { <br>\n# we enter this place even if the real header value happens\nto <br>\n# be 'TEXT/HTML; version=3.0' <br>\n... <br>\n}</p>\n\n\n<p style=\"margin-left:11%;\">$h-&gt;content_type_charset</p>\n\n<p style=\"margin-left:17%;\">Returns the upper-cased charset\nspecified in the Content-Type header. In list context return\nthe lower-cased bare content type followed by the\nupper-cased charset. Both values will be &quot;undef&quot;\nif not specified in the header.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;content_is_text</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe Content-Type header field indicate that the content is\ntextual.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;content_is_html</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe Content-Type header field indicate that the content is\nsome kind of <small>HTML</small> (including\n<small>XHTML</small> ). This method can&rsquo;t be used to\nset Content-Type.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;content_is_xhtml</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe Content-Type header field indicate that the content is\n<small>XHTML.</small> This method can&rsquo;t be used to set\nContent-Type.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;content_is_xml</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe Content-Type header field indicate that the content is\n<small>XML.</small> This method can&rsquo;t be used to set\nContent-Type.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;content_encoding</p>\n\n<p style=\"margin-left:17%;\">The Content-Encoding header\nfield is used as a modifier to the media type. When present,\nits value indicates what additional encoding mechanism has\nbeen applied to the resource.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;content_length</p>\n\n<p style=\"margin-left:17%;\">A decimal number indicating the\nsize in bytes of the message content.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;content_language</p>\n\n<p style=\"margin-left:17%;\">The natural language(s) of the\nintended audience for the message content. The value is one\nor more language tags as defined by <small>RFC 1766.</small>\nEg. &quot;no&quot; for some kind of Norwegian and\n&quot;en-US&quot; for English the way it is written in the\n<small>US.</small></p>\n\n<p style=\"margin-left:11%;\">$h-&gt;title</p>\n\n<p style=\"margin-left:17%;\">The title of the document. In\nlibwww-perl this header will be initialized automatically\nfrom the &lt; <small>TITLE</small> &gt;...&lt;/TITLE&gt;\nelement of <small>HTML</small> documents. <i>This header is\nno longer part of the <small>HTTP</small> standard.</i></p>\n\n<p style=\"margin-left:11%;\">$h-&gt;user_agent</p>\n\n<p style=\"margin-left:17%;\">This header field is used in\nrequest messages and contains information about the user\nagent originating the request. <i>E.g.</i>:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$h-&gt;user_agent('Mozilla/5.0\n(compatible; MSIE 7.0; Windows NT 6.0)');</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;server</p>\n\n<p style=\"margin-left:17%;\">The server header field\ncontains information about the software being used by the\noriginating server program handling the request.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;from</p>\n\n<p style=\"margin-left:17%;\">This header should contain an\nInternet e-mail address for the human user who controls the\nrequesting user agent. The address should be machine-usable,\nas defined by <small>RFC822.</small> E.g.:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$h-&gt;from('King\nKong &lt;king@kong.com&gt;');</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>This header\nis no longer part of the <small>HTTP</small>\nstandard.</i></p>\n\n<p style=\"margin-left:11%;\">$h-&gt;referer</p>\n\n<p style=\"margin-left:17%;\">Used to specify the address (\n<small>URI</small> ) of the document from which the\nrequested resource address was obtained.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The &quot;Free\nOn-line Dictionary of Computing&quot; as this to say about\nthe word <i>referer</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;World-Wide\nWeb&gt; A misspelling of &quot;referrer&quot; which <br>\nsomehow made it into the {HTTP} standard. A given {web <br>\npage}'s referer (sic) is the {URL} of whatever web page <br>\ncontains the link that the user followed to the current <br>\npage. Most browsers pass this information as part of a <br>\nrequest. <br>\n(1998-10-19)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By popular\ndemand &quot;referrer&quot; exists as an alias for this\nmethod so you can avoid this misspelling in your programs\nand still send the right thing on the wire.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When setting\nthe referrer, this method removes the fragment from the\ngiven <small>URI</small> if it is present, as mandated by\n<small>RFC2616.</small> Note that the removal does\n<i>not</i> happen automatically if using the\n<b>header()</b>, <b>push_header()</b> or\n<b>init_header()</b> methods to set the referrer.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;www_authenticate</p>\n\n<p style=\"margin-left:17%;\">This header must be included as\npart of a &quot;401 Unauthorized&quot; response. The field\nvalue consist of a challenge that indicates the\nauthentication scheme and parameters applicable to the\nrequested <small>URI.</small></p>\n\n<p style=\"margin-left:11%;\">$h-&gt;proxy_authenticate</p>\n\n<p style=\"margin-left:17%;\">This header must be included in\na &quot;407 Proxy Authentication Required&quot;\nresponse.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;authorization <br>\n$h-&gt;proxy_authorization</p>\n\n<p style=\"margin-left:17%;\">A user agent that wishes to\nauthenticate itself with a server or a proxy, may do so by\nincluding these headers.</p>\n\n<p style=\"margin-left:11%;\">$h-&gt;authorization_basic</p>\n\n<p style=\"margin-left:17%;\">This method is used to get or\nset an authorization header that use the &quot;Basic\nAuthentication Scheme&quot;. In array context it will return\ntwo values; the user name and the password. In scalar\ncontext it will return <i>&quot;uname:password&quot;</i> as\na single string value.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When used to\nset the header value, it expects two arguments.\n<i>E.g.</i>:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$h-&gt;authorization_basic($uname,\n$password);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The method will\ncroak if the $uname contains a colon &rsquo;:&rsquo;.</p>\n\n\n<p style=\"margin-left:11%;\">$h-&gt;proxy_authorization_basic</p>\n\n<p style=\"margin-left:17%;\">Same as\n<b>authorization_basic()</b> but will set the\n&quot;Proxy-Authorization&quot; header instead.</p>\n\n<h2>NON-CANONICALIZED FIELD NAMES\n<a name=\"NON-CANONICALIZED FIELD NAMES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The header\nfield name spelling is normally canonicalized including the\n&rsquo;_&rsquo; to &rsquo;-&rsquo; translation. There are\nsome application where this is not appropriate. Prefixing\nfield names with &rsquo;:&rsquo; allow you to force a\nspecific spelling. For example if you really want a header\nfield name to show up as &quot;foo_bar&quot; instead of\n&quot;Foo-Bar&quot;, you might set it like this:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$h-&gt;header(&quot;:foo_bar&quot;\n=&gt; 1);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These field\nnames are returned with the &rsquo;:&rsquo; intact for\n$h-&gt;header_field_names and the $h-&gt;scan callback, but\nthe colons do not show in $h-&gt;as_string.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1994 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONVENIENCE METHODS\">CONVENIENCE METHODS</a>","<a href=\"#NON-CANONICALIZED FIELD NAMES\">NON-CANONICALIZED FIELD NAMES</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}