{"name":"error","description":"Error - Error/exception handling in an OO-ish way","body":"\n\n<h1 align=\"center\">Error</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Error -\nError/exception handling in an OO-ish way</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n0.17029</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Error\nqw(:try); <br>\nthrow Error::Simple( &quot;A simple error&quot;); <br>\nsub xyz { <br>\n... <br>\nrecord Error::Simple(&quot;A simple error&quot;) <br>\nand return; <br>\n} <br>\nunlink($file) or throw Error::Simple(&quot;$file:\n$!&quot;,$!); <br>\ntry { <br>\ndo_some_stuff(); <br>\ndie &quot;error!&quot; if $condition; <br>\nthrow Error::Simple &quot;Oops!&quot; if $other_condition;\n<br>\n} <br>\ncatch Error::IO with { <br>\nmy $E = shift; <br>\nprint STDERR &quot;File &quot;, $E-&gt;{'-file'}, &quot; had\na problem\\n&quot;; <br>\n} <br>\nexcept { <br>\nmy $E = shift; <br>\nmy $general_handler=sub {send_message\n$E-&gt;{-description}}; <br>\nreturn { <br>\nUserException1 =&gt; $general_handler, <br>\nUserException2 =&gt; $general_handler <br>\n}; <br>\n} <br>\notherwise { <br>\nprint STDERR &quot;Well I don't know what to say\\n&quot;;\n<br>\n} <br>\nfinally { <br>\nclose_the_garage_door_already(); # Should be reliable <br>\n}; # Don't forget the trailing ; or you might be\nsurprised</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;Error&quot; package provides two interfaces. Firstly\n&quot;Error&quot; provides a procedural interface to\nexception handling. Secondly &quot;Error&quot; is a base\nclass for errors/exceptions that can either be thrown, for\nsubsequent catch, or can simply be recorded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Errors in the\nclass &quot;Error&quot; should not be thrown directly, but\nthe user should throw errors from a sub-class of\n&quot;Error&quot;.</p>\n\n<h2>WARNING\n<a name=\"WARNING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\n&quot;Error&quot; module is <b>no longer recommended</b> due\nto the black-magical nature of its syntactic sugar, which\noften tends to break. Its maintainers have stopped actively\nwriting code that uses it, and discourage people from doing\nso. See the &quot; <small>SEE ALSO&quot;</small> section\nbelow for better recommendations.</p>\n\n<h2>PROCEDURAL INTERFACE\n<a name=\"PROCEDURAL INTERFACE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Error&quot;\nexports subroutines to perform exception handling. These\nwill be exported if the &quot;:try&quot; tag is used in the\n&quot;use&quot; line. <br>\ntry <small>BLOCK CLAUSES</small></p>\n\n<p style=\"margin-left:17%;\">&quot;try&quot; is the main\nsubroutine called by the user. All other subroutines\nexported are clauses to the try subroutine.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>BLOCK</small> will be evaluated and, if no error is\nthrow, try will return the result of the block.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;CLAUSES&quot;\nare the subroutines below, which describe what to do in the\nevent of an error being thrown within\n<small>BLOCK.</small></p>\n\n<p style=\"margin-left:11%;\">catch <small>CLASS</small> with\n<small>BLOCK</small></p>\n\n<p style=\"margin-left:17%;\">This clauses will cause all\nerrors that satisfy &quot;$err-&gt;isa(CLASS)&quot; to be\ncaught and handled by evaluating &quot;BLOCK&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;BLOCK&quot;\nwill be passed two arguments. The first will be the error\nbeing thrown. The second is a reference to a scalar\nvariable. If this variable is set by the catch block then,\non return from the catch block, try will continue processing\nas if the catch block was never found. The error will also\nbe available in $@.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To propagate\nthe error the catch block may call\n&quot;$err-&gt;throw&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the scalar\nreference by the second argument is not set, and the error\nis not thrown. Then the current try block will return with\nthe result from the catch block.</p>\n\n<p style=\"margin-left:11%;\">except <small>BLOCK</small></p>\n\n<p style=\"margin-left:17%;\">When &quot;try&quot; is looking\nfor a handler, if an except clause is found\n&quot;BLOCK&quot; is evaluated. The return value from this\nblock should be a <small>HASHREF</small> or a list of\nkey-value pairs, where the keys are class names and the\nvalues are <small>CODE</small> references for the handler of\nerrors of that type.</p>\n\n<p style=\"margin-left:11%;\">otherwise\n<small>BLOCK</small></p>\n\n<p style=\"margin-left:17%;\">Catch any error by executing\nthe code in &quot;BLOCK&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When evaluated\n&quot;BLOCK&quot; will be passed one argument, which will be\nthe error being processed. The error will also be available\nin $@.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Only one\notherwise block may be specified per try block</p>\n\n<p style=\"margin-left:11%;\">finally\n<small>BLOCK</small></p>\n\n<p style=\"margin-left:17%;\">Execute the code in\n&quot;BLOCK&quot; either after the code in the try block has\nsuccessfully completed, or if the try block throws an error\nthen &quot;BLOCK&quot; will be executed after the handler\nhas completed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the handler\nthrows an error then the error will be caught, the finally\nblock will be executed and the error will be re-thrown.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Only one\nfinally block may be specified per try block</p>\n\n<h2>COMPATIBILITY\n<a name=\"COMPATIBILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Moose exports a\nkeyword called &quot;with&quot; which clashes with\nError&rsquo;s. This example returns a prototype mismatch\nerror:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">package MyTest;\n<br>\nuse warnings; <br>\nuse Moose; <br>\nuse Error qw(:try);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(Thanks to\n&quot;maik.hentsche@amd.com&quot; for the report.).</p>\n\n<h2>CLASS INTERFACE\n<a name=\"CLASS INTERFACE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>CONSTRUCTORS</small></b>\n<br>\nThe &quot;Error&quot; object is implemented as a\n<small>HASH.</small> This <small>HASH</small> is initialized\nwith the arguments that are passed to it&rsquo;s\nconstructor. The elements that are used by, or are\nretrievable by the &quot;Error&quot; class are listed below,\nother classes may add to these.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">-file <br>\n-line <br>\n-text <br>\n-value <br>\n-object</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n&quot;-file&quot; or &quot;-line&quot; are not specified in\nthe constructor arguments then these will be initialized\nwith the file name and line number where the constructor was\ncalled from.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the error is\nassociated with an object then the object should be passed\nas the &quot;-object&quot; argument. This will allow the\n&quot;Error&quot; package to associate the error with the\nobject.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;Error&quot; package remembers the last error created,\nand also the last error associated with a package. This\ncould either be the last error created by a sub in that\npackage, or the last error which passed an object blessed\ninto that package as the &quot;-object&quot; argument. <br>\nError-&gt;<b>new()</b></p>\n\n<p style=\"margin-left:17%;\">See the Error::Simple\ndocumentation.</p>\n\n<p style=\"margin-left:11%;\">throw ( [ <small>ARGS</small> ]\n)</p>\n\n<p style=\"margin-left:17%;\">Create a new &quot;Error&quot;\nobject and throw an error, which will be caught by a\nsurrounding &quot;try&quot; block, if there is one.\nOtherwise it will cause the program to exit.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;throw&quot;\nmay also be called on an existing error to re-throw it.</p>\n\n<p style=\"margin-left:11%;\">with ( [ <small>ARGS</small> ]\n)</p>\n\n<p style=\"margin-left:17%;\">Create a new &quot;Error&quot;\nobject and returns it. This is defined for syntactic sugar,\neg</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">die with\nSome::Error ( ... );</p>\n\n<p style=\"margin-left:11%;\">record ( [ <small>ARGS</small>\n] )</p>\n\n<p style=\"margin-left:17%;\">Create a new &quot;Error&quot;\nobject and returns it. This is defined for syntactic sugar,\neg</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">record\nSome::Error ( ... ) <br>\nand return;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>STATIC\nMETHODS</small></b> <br>\nprior ( [ <small>PACKAGE</small> ] )</p>\n\n<p style=\"margin-left:17%;\">Return the last error created,\nor the last error associated with &quot;PACKAGE&quot;</p>\n\n<p style=\"margin-left:11%;\">flush ( [\n<small>PACKAGE</small> ] )</p>\n\n<p style=\"margin-left:17%;\">Flush the last error created,\nor the last error associated with &quot;PACKAGE&quot;.It is\nnecessary to clear the error stack before exiting the\npackage or uncaught errors generated using\n&quot;record&quot; will be reported.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$Error-&gt;flush;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OBJECT\nMETHODS</small></b> <br>\nstacktrace</p>\n\n<p style=\"margin-left:17%;\">If the variable $Error::Debug\nwas non-zero when the error was created, then\n&quot;stacktrace&quot; returns a string created by calling\n&quot;Carp::longmess&quot;. If the variable was zero the\n&quot;stacktrace&quot; returns the text of the error\nappended with the filename and line number of where the\nerror was created, providing the text does not end with a\nnewline.</p>\n\n<p style=\"margin-left:11%;\">object</p>\n\n<p style=\"margin-left:17%;\">The object this error was\nassociated with</p>\n\n<p style=\"margin-left:11%;\">file</p>\n\n<p style=\"margin-left:17%;\">The file where the constructor\nof this error was called from</p>\n\n<p style=\"margin-left:11%;\">line</p>\n\n<p style=\"margin-left:17%;\">The line where the constructor\nof this error was called from</p>\n\n<p style=\"margin-left:11%;\">text</p>\n\n<p style=\"margin-left:17%;\">The text of the error</p>\n\n<p style=\"margin-left:11%;\">$err-&gt;associate($obj)</p>\n\n<p style=\"margin-left:17%;\">Associates an error with an\nobject to allow error propagation. I.e:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ber-&gt;encode(...)\nor <br>\nreturn Error-&gt;prior($ber)-&gt;associate($ldap);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OVERLOAD\nMETHODS</small></b> <br>\nstringify</p>\n\n<p style=\"margin-left:17%;\">A method that converts the\nobject into a string. This method may simply return the same\nas the &quot;text&quot; method, or it may append more\ninformation. For example the file name and line number.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By default this\nmethod returns the &quot;-text&quot; argument that was\npassed to the constructor, or the string &quot;Died&quot; if\nnone was given.</p>\n\n<p style=\"margin-left:11%;\">value</p>\n\n<p style=\"margin-left:17%;\">A method that will return a\nvalue that can be associated with the error. For example if\nan error was created due to the failure of a system call,\nthen this may return the numeric value of $! at the\ntime.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By default this\nmethod returns the &quot;-value&quot; argument that was\npassed to the constructor.</p>\n\n<h2>PRE-DEFINED ERROR CLASSES\n<a name=\"PRE-DEFINED ERROR CLASSES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Error::Simple</b>\n<br>\nThis class can be used to hold simple error strings and\nvalues. It&rsquo;s constructor takes two arguments. The\nfirst is a text value, the second is a numeric value. These\nvalues are what will be returned by the overload\nmethods.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the text\nvalue ends with &quot;at file line 1&quot; as $@ strings do,\nthen this information will be used to set the\n&quot;-file&quot; and &quot;-line&quot; arguments of the\nerror object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class is\nused internally if an eval&rsquo;d block die&rsquo;s with an\nerror that is a plain string. (Unless\n$Error::ObjectifyCallback is modified)</p>\n\n<h2>$Error::ObjectifyCallback\n<a name=\"$Error::ObjectifyCallback\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This variable\nholds a reference to a subroutine that converts errors that\nare plain strings to objects. It is used by Error.pm to\nconvert textual errors to objects, and can be overridden by\nthe user.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It accepts a\nsingle argument which is a hash reference to named\nparameters. Currently the only named parameter passed is\n'text' which is the text of the error, but others may be\navailable in the future.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example the\nfollowing code will cause Error.pm to throw objects of the\nclass MyError::Bar by default:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub\nthrow_MyError_Bar <br>\n{ <br>\nmy $args = shift; <br>\nmy $err = MyError::Bar-&gt;new(); <br>\n$err-&gt;{'MyBarText'} = $args-&gt;{'text'}; <br>\nreturn $err; <br>\n} <br>\n{ <br>\nlocal $Error::ObjectifyCallback = \\&amp;throw_MyError_Bar;\n<br>\n# Error handling here. <br>\n}</p>\n\n<h2>MESSAGE HANDLERS\n<a name=\"MESSAGE HANDLERS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Error&quot;\nalso provides handlers to extend the output of the\n&quot;warn()&quot; perl function, and to handle the printing\nof a thrown &quot;Error&quot; that is not caught or\notherwise handled. These are not installed by default, but\nare requested using the &quot;:warndie&quot; tag in the\n&quot;use&quot; line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Error qw(\n:warndie );</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These new error\nhandlers are installed in $SIG{__WARN__} and $SIG{__DIE__}.\nIf these handlers are already defined when the tag is\nimported, the old values are stored, and used during the new\ncode. Thus, to arrange for custom handling of warnings and\nerrors, you will need to perform something like the\nfollowing:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">BEGIN { <br>\n$SIG{__WARN__} = sub { <br>\nprint STDERR &quot;My special warning handler: $_[0]&quot;\n<br>\n}; <br>\n} <br>\nuse Error qw( :warndie );</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nsetting $SIG{__WARN__} after the &quot;:warndie&quot; tag\nhas been imported will overwrite the handler that\n&quot;Error&quot; provides. If this cannot be avoided, then\nthe tag can be explicitly &quot;import&quot;ed later</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Error; <br>\n$SIG{__WARN__} = ...; <br>\nimport Error qw( :warndie );</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>EXAMPLE</small></b>\n<br>\nThe &quot;__DIE__&quot; handler turns messages such as</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Can't call\nmethod &quot;foo&quot; on an undefined value at\nexamples/warndie.pl line 16.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">into</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unhandled perl\nerror caught at toplevel: <br>\nCan't call method &quot;foo&quot; on an undefined value <br>\nThrown from: examples/warndie.pl:16 <br>\nFull stack trace: <br>\nmain::inner('undef') called at examples/warndie.pl line 20\n<br>\nmain::outer('undef') called at examples/warndie.pl line\n23</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\nException::Class for a different module providing\nObject-Oriented exception handling, along with a convenient\nsyntax for declaring hierarchies for them. It doesn&rsquo;t\nprovide Error&rsquo;s syntactic sugar of &quot;try { ...\n}&quot;, &quot;catch { ... }&quot;, etc. which may be a good\nthing or a bad thing based on what you want. (Because\nError&rsquo;s syntactic sugar tends to break.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Error::Exception\naims to combine Error and Exception::Class &quot;with\ncorrect stringification&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">TryCatch and\nTry::Tiny are similar in concept to Error.pm only providing\na syntax that hopefully breaks less.</p>\n\n<h2>KNOWN BUGS\n<a name=\"KNOWN BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">None, but that\ndoes not mean there are not any.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Graham Barr\n&lt;gbarr@pobox.com&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The code that\ninspired me to write this was originally written by Peter\nSeibel &lt;peter@weblogic.com&gt; and adapted by Jesse Glick\n&lt;jglick@sig.bsh.com&gt;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;:warndie&quot;\nhandlers added by Paul Evans\n&lt;leonerd@leonerd.org.uk&gt;</p>\n\n<h2>MAINTAINER\n<a name=\"MAINTAINER\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Shlomi Fish,\n&lt;http://www.shlomifish.org/&gt; .</p>\n\n<h2>PAST MAINTAINERS\n<a name=\"PAST MAINTAINERS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Arun Kumar U\n&lt;u_arunkumar@yahoo.com&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n1997-8 Graham Barr. All rights reserved. This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n\n<h2>SUPPORT\n<a name=\"SUPPORT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Websites</b>\n<br>\nThe following websites have more information about this\nmodule, and may be of help to you. As always, in addition to\nthose websites please use your favorite search engine to\ndiscover more resources.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p>MetaCPAN</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A modern,\nopen-source <small>CPAN</small> search engine, useful to\nview <small>POD</small> in <small>HTML</small> format.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://metacpan.org/release/Error&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">Search <small>CPAN</small></p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\n<small>CPAN</small> search engine, useful to view\n<small>POD</small> in <small>HTML</small> format.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;http://search.cpan.org/dist/Error&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\"><small>RT: CPAN</small> &rsquo;s\nBug Tracker</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>RT</small> ( Request Tracker ) website is the default\nbug/issue tracking system for <small>CPAN.</small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://rt.cpan.org/Public/Dist/Display.html?Name=Error&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\"><small>CPAN</small> Ratings</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>CPAN</small> Ratings is a website that allows\ncommunity ratings and reviews of Perl modules.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;http://cpanratings.perl.org/d/Error&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><small>CPANTS</small></p></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>CPANTS</small> is a website that analyzes the\nKwalitee ( code metrics ) of a distribution.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;http://cpants.cpanauthors.org/dist/Error&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\"><small>CPAN</small> Testers</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>CPAN</small> Testers is a network of smoke testers\nwho run automated tests on uploaded <small>CPAN</small>\ndistributions.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;http://www.cpantesters.org/distro/E/Error&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\"><small>CPAN</small> Testers\nMatrix</p> </td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>CPAN</small> Testers Matrix is a website that\nprovides a visual overview of the test results for a\ndistribution on various Perls/platforms.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;http://matrix.cpantesters.org/?dist=Error&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\"><small>CPAN</small> Testers\nDependencies</p> </td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>CPAN</small> Testers Dependencies is a website that\nshows a chart of the test results of all dependencies for a\ndistribution.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;http://deps.cpantesters.org/?module=Error&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bugs /\nFeature Requests</b> <br>\nPlease report any bugs or feature requests by email to\n&quot;bug-error at rt.cpan.org&quot;, or through the web\ninterface at\n&lt;https://rt.cpan.org/Public/Bug/Report.html?Queue=Error&gt;.\nYou will be automatically notified of any progress on the\nrequest by the system.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Source\nCode</b> <br>\nThe code is open to the world, and available for you to hack\non. Please feel free to browse it and play with it, or\nwhatever. If you want to contribute patches, please send me\na diff or prod me to pull from your repository :)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;https://github.com/shlomif/perl-error.pm&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">git clone\ngit://github.com/shlomif/perl-error.pm.git</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Shlomi Fish (\nhttp://www.shlomifish.org/ )</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please report\nany bugs or feature requests on the bugtracker website\n&lt;https://github.com/shlomif/perl-error.pm/issues&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When submitting\na bug or request, please include a test-file or a patch to\nan existing test-file that illustrates the bug or desired\nfeature.</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 2020 by Shlomi Fish (\nhttp://www.shlomifish.org/ ).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#WARNING\">WARNING</a>","<a href=\"#PROCEDURAL INTERFACE\">PROCEDURAL INTERFACE</a>","<a href=\"#COMPATIBILITY\">COMPATIBILITY</a>","<a href=\"#CLASS INTERFACE\">CLASS INTERFACE</a>","<a href=\"#PRE-DEFINED ERROR CLASSES\">PRE-DEFINED ERROR CLASSES</a>","<a href=\"#$Error::ObjectifyCallback\">$Error::ObjectifyCallback</a>","<a href=\"#MESSAGE HANDLERS\">MESSAGE HANDLERS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#KNOWN BUGS\">KNOWN BUGS</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#MAINTAINER\">MAINTAINER</a>","<a href=\"#PAST MAINTAINERS\">PAST MAINTAINERS</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SUPPORT\">SUPPORT</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}