{"name":"dpkg::vendor::default","description":"Dpkg::Vendor::Default\n- default vendor class\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nA vendor class\nis used to provide vendor specific behaviour in various\nplaces. This is the default class used in case there&rsquo;s\nnone for the current vendor or in case the vendor could not\nbe identified (see Dpkg::Vendor documentation).\n\nIt provides\nsome hooks that are called by various dpkg-* tools. If you\nneed a new hook, please file a bug against dpkg-dev and\nexplain your need. Note that the hook <small>API</small> has\nno guarantee to be stable over an extended period of time.\nIf you run an important distribution that makes use of\nvendor hooks, you&rsquo;d better submit them for integration\nso that we avoid breaking your code.\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n$vendor_obj =\nDpkg::Vendor::Default-&gt;<b>new()</b>\n\n<p style=\"margin-left:17%;\">Creates the default vendor\nobject. Can be inherited by all vendor objects if they\ndon&rsquo;t need any specific initialization at object\ncreation time.\n\n<p style=\"margin-left:11%;\">$vendor_obj-&gt;run_hook($id,\n@params)\n\n<p style=\"margin-left:17%;\">Run the corresponding hook. The\nparameters are hook-specific. The supported hooks are: <br>\nbefore-source-build ($srcpkg)\n\n<p style=\"margin-left:29%;\">The first parameter is a\nDpkg::Source::Package object. The hook is called just before\nthe execution of $srcpkg-&gt;<b>build()</b>.\n\n<p style=\"margin-left:17%;\">package-keyrings ()\n\n<p style=\"margin-left:29%;\">The hook is called when\ndpkg-source is checking a signature on a source package\n(since dpkg 1.18.11). It takes no parameters, but returns a\n(possibly empty) list of vendor-specific keyrings.\n\n<p style=\"margin-left:17%;\">archive-keyrings ()\n\n<p style=\"margin-left:29%;\">The hook is called when there\nis a need to check signatures on artifacts from\nrepositories, for example by a download method (since dpkg\n1.18.11). It takes no parameters, but returns a (possibly\nempty) list of vendor-specific keyrings.\n\n<p style=\"margin-left:17%;\">archive-keyrings-historic\n()\n\n<p style=\"margin-left:29%;\">The hook is called when there\nis a need to check signatures on artifacts from historic\nrepositories, for example by a download method (since dpkg\n1.18.11). It takes no parameters, but returns a (possibly\nempty) list of vendor-specific keyrings.\n\n<p style=\"margin-left:17%;\">builtin-build-depends ()\n\n<p style=\"margin-left:29%;\">The hook is called when\ndpkg-checkbuilddeps is initializing the source package build\ndependencies (since dpkg 1.18.2). It takes no parameters,\nbut returns a (possibly empty) list of vendor-specific\n<b>Build-Depends</b>.\n\n<p style=\"margin-left:17%;\">builtin-build-conflicts ()\n\n<p style=\"margin-left:29%;\">The hook is called when\ndpkg-checkbuilddeps is initializing the source package build\nconflicts (since dpkg 1.18.2). It takes no parameters, but\nreturns a (possibly empty) list of vendor-specific\n<b>Build-Conflicts</b>.\n\n<p style=\"margin-left:17%;\">register-custom-fields ()\n\n<p style=\"margin-left:29%;\">The hook is called in\nDpkg::Control::Fields to register custom fields. You should\nreturn a list of arrays. Each array is an operation to\nperform. The first item is the name of the operation and\ncorresponds to a field_* function provided by\nDpkg::Control::Fields. The remaining fields are the\nparameters that are passed unchanged to the corresponding\nfunction.\n\n<p style=\"margin-left:29%; margin-top: 1em\">Known\noperations are &quot;register&quot;,\n&quot;insert_after&quot; and &quot;insert_before&quot;.\n\n<p style=\"margin-left:17%;\">post-process-changelog-entry\n($fields)\n\n<p style=\"margin-left:29%;\">The hook is called in\nDpkg::Changelog to post-process a Dpkg::Changelog::Entry\nafter it has been created and filled with the appropriate\nvalues.\n\n<p style=\"margin-left:17%;\">update-buildflags ($flags)\n\n<p style=\"margin-left:29%;\">The hook is called in\nDpkg::BuildFlags to allow the vendor to override the default\nvalues set for the various build flags. $flags is a\nDpkg::BuildFlags object.\n\n<p style=\"margin-left:17%;\">update-buildprofiles\n($build_profiles_ref)\n\n<p style=\"margin-left:29%;\">The hook is called in\nDpkg::BuildProfiles to allow the vendor to override the\ndefault values set. $build_profiles_ref is a array ref to\nDpkg::BuildProfiles object.\n\n<p style=\"margin-left:17%;\">builtin-system-build-paths\n()\n\n<p style=\"margin-left:29%;\">The hook is called by\ndpkg-genbuildinfo to determine if the current path should be\nrecorded in the <b>Build-Path</b> field (since dpkg\n1.18.11). It takes no parameters, but returns a (possibly\nempty) list of root paths considered acceptable. As an\nexample, if the list contains &quot;/build/&quot;, a\nBuild-Path field will be created if the current directory is\n&quot;/build/dpkg-1.18.0&quot;. If the list contains\n&quot;/&quot;, the path will always be recorded. If the list\nis empty, the current path will never be recorded.\n\n<p style=\"margin-left:17%;\">build-tainted-by ()\n\n<p style=\"margin-left:29%;\">The hook is called by\ndpkg-genbuildinfo to determine if the current system has\nbeen tainted in some way that could affect the resulting\nbuild, which will be recorded in the <b>Build-Tainted-By</b>\nfield (since dpkg 1.19.5). It takes no parameters, but\nreturns a (possibly empty) list of tainted reason tags\n(formed by alphanumeric and dash characters).\n\n<p style=\"margin-left:17%;\">sanitize-environment ()\n\n<p style=\"margin-left:29%;\">The hook is called by\ndpkg-buildpackage to sanitize its build environment (since\ndpkg 1.20.0).\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<b>Version\n0.xx</b> <br>\nThis is a private module.","body":"\n\n<h1 align=\"center\">Dpkg::Vendor::Default</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Vendor::Default\n- default vendor class</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A vendor class\nis used to provide vendor specific behaviour in various\nplaces. This is the default class used in case there&rsquo;s\nnone for the current vendor or in case the vendor could not\nbe identified (see Dpkg::Vendor documentation).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It provides\nsome hooks that are called by various dpkg-* tools. If you\nneed a new hook, please file a bug against dpkg-dev and\nexplain your need. Note that the hook <small>API</small> has\nno guarantee to be stable over an extended period of time.\nIf you run an important distribution that makes use of\nvendor hooks, you&rsquo;d better submit them for integration\nso that we avoid breaking your code.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$vendor_obj =\nDpkg::Vendor::Default-&gt;<b>new()</b></p>\n\n<p style=\"margin-left:17%;\">Creates the default vendor\nobject. Can be inherited by all vendor objects if they\ndon&rsquo;t need any specific initialization at object\ncreation time.</p>\n\n<p style=\"margin-left:11%;\">$vendor_obj-&gt;run_hook($id,\n@params)</p>\n\n<p style=\"margin-left:17%;\">Run the corresponding hook. The\nparameters are hook-specific. The supported hooks are: <br>\nbefore-source-build ($srcpkg)</p>\n\n<p style=\"margin-left:29%;\">The first parameter is a\nDpkg::Source::Package object. The hook is called just before\nthe execution of $srcpkg-&gt;<b>build()</b>.</p>\n\n<p style=\"margin-left:17%;\">package-keyrings ()</p>\n\n<p style=\"margin-left:29%;\">The hook is called when\ndpkg-source is checking a signature on a source package\n(since dpkg 1.18.11). It takes no parameters, but returns a\n(possibly empty) list of vendor-specific keyrings.</p>\n\n<p style=\"margin-left:17%;\">archive-keyrings ()</p>\n\n<p style=\"margin-left:29%;\">The hook is called when there\nis a need to check signatures on artifacts from\nrepositories, for example by a download method (since dpkg\n1.18.11). It takes no parameters, but returns a (possibly\nempty) list of vendor-specific keyrings.</p>\n\n<p style=\"margin-left:17%;\">archive-keyrings-historic\n()</p>\n\n<p style=\"margin-left:29%;\">The hook is called when there\nis a need to check signatures on artifacts from historic\nrepositories, for example by a download method (since dpkg\n1.18.11). It takes no parameters, but returns a (possibly\nempty) list of vendor-specific keyrings.</p>\n\n<p style=\"margin-left:17%;\">builtin-build-depends ()</p>\n\n<p style=\"margin-left:29%;\">The hook is called when\ndpkg-checkbuilddeps is initializing the source package build\ndependencies (since dpkg 1.18.2). It takes no parameters,\nbut returns a (possibly empty) list of vendor-specific\n<b>Build-Depends</b>.</p>\n\n<p style=\"margin-left:17%;\">builtin-build-conflicts ()</p>\n\n<p style=\"margin-left:29%;\">The hook is called when\ndpkg-checkbuilddeps is initializing the source package build\nconflicts (since dpkg 1.18.2). It takes no parameters, but\nreturns a (possibly empty) list of vendor-specific\n<b>Build-Conflicts</b>.</p>\n\n<p style=\"margin-left:17%;\">register-custom-fields ()</p>\n\n<p style=\"margin-left:29%;\">The hook is called in\nDpkg::Control::Fields to register custom fields. You should\nreturn a list of arrays. Each array is an operation to\nperform. The first item is the name of the operation and\ncorresponds to a field_* function provided by\nDpkg::Control::Fields. The remaining fields are the\nparameters that are passed unchanged to the corresponding\nfunction.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">Known\noperations are &quot;register&quot;,\n&quot;insert_after&quot; and &quot;insert_before&quot;.</p>\n\n<p style=\"margin-left:17%;\">post-process-changelog-entry\n($fields)</p>\n\n<p style=\"margin-left:29%;\">The hook is called in\nDpkg::Changelog to post-process a Dpkg::Changelog::Entry\nafter it has been created and filled with the appropriate\nvalues.</p>\n\n<p style=\"margin-left:17%;\">update-buildflags ($flags)</p>\n\n<p style=\"margin-left:29%;\">The hook is called in\nDpkg::BuildFlags to allow the vendor to override the default\nvalues set for the various build flags. $flags is a\nDpkg::BuildFlags object.</p>\n\n<p style=\"margin-left:17%;\">update-buildprofiles\n($build_profiles_ref)</p>\n\n<p style=\"margin-left:29%;\">The hook is called in\nDpkg::BuildProfiles to allow the vendor to override the\ndefault values set. $build_profiles_ref is a array ref to\nDpkg::BuildProfiles object.</p>\n\n<p style=\"margin-left:17%;\">builtin-system-build-paths\n()</p>\n\n<p style=\"margin-left:29%;\">The hook is called by\ndpkg-genbuildinfo to determine if the current path should be\nrecorded in the <b>Build-Path</b> field (since dpkg\n1.18.11). It takes no parameters, but returns a (possibly\nempty) list of root paths considered acceptable. As an\nexample, if the list contains &quot;/build/&quot;, a\nBuild-Path field will be created if the current directory is\n&quot;/build/dpkg-1.18.0&quot;. If the list contains\n&quot;/&quot;, the path will always be recorded. If the list\nis empty, the current path will never be recorded.</p>\n\n<p style=\"margin-left:17%;\">build-tainted-by ()</p>\n\n<p style=\"margin-left:29%;\">The hook is called by\ndpkg-genbuildinfo to determine if the current system has\nbeen tainted in some way that could affect the resulting\nbuild, which will be recorded in the <b>Build-Tainted-By</b>\nfield (since dpkg 1.19.5). It takes no parameters, but\nreturns a (possibly empty) list of tainted reason tags\n(formed by alphanumeric and dash characters).</p>\n\n<p style=\"margin-left:17%;\">sanitize-environment ()</p>\n\n<p style=\"margin-left:29%;\">The hook is called by\ndpkg-buildpackage to sanitize its build environment (since\ndpkg 1.20.0).</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version\n0.xx</b> <br>\nThis is a private module.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#CHANGES\">CHANGES</a>"],"level":3}