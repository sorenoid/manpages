{"name":"inet_net_pton","description":"inet_net_pton, inet_net_ntop - Internet network number conversion","body":"\n\n<h1 align=\"center\">INET_NET_PTON</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">inet_net_pton,\ninet_net_ntop - Internet network number conversion</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;arpa/inet.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ninet_net_pton(int</b> <i>af</i><b>, const char\n*</b><i>pres</i><b>, <br>\nvoid *</b><i>netp</i><b>, size_t</b>\n<i>nsize</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*inet_net_ntop(int</b> <i>af</i><b>, const void\n*</b><i>netp</i><b>, int</b> <i>bits</i><b>, <br>\nchar *</b><i>pres</i><b>, size_t</b>\n<i>psize</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Link with\n<i>-lresolv</i>.</p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_net_pton</b>(),\n<b>inet_net_ntop</b>():</p>\n\n<p style=\"margin-left:17%;\">Since glibc 2.20:</p>\n\n<p style=\"margin-left:23%;\">_DEFAULT_SOURCE</p>\n\n<p style=\"margin-left:17%;\">Before glibc 2.20:</p>\n\n<p style=\"margin-left:23%;\">_BSD_SOURCE || _SVID_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nconvert network numbers between presentation (i.e.,\nprintable) format and network (i.e., binary) format.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For both\nfunctions, <i>af</i> specifies the address family for the\nconversion; the only supported value is <b>AF_INET</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_net_pton()</b>\n<br>\nThe <b>inet_net_pton</b>() function converts <i>pres</i>, a\nnull-terminated string containing an Internet network number\nin presentation format to network format. The result of the\nconversion, which is in network byte order, is placed in the\nbuffer pointed to by <i>net</i>. (The <i>netp</i> argument\ntypically points to an <i>in_addr</i> structure.) The\n<i>nsize</i> argument specifies the number of bytes\navailable in <i>netp</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>inet_net_pton</b>() returns the number of bits in the\nnetwork number field of the result placed in <i>netp</i>.\nFor a discussion of the input presentation format and the\nreturn value, see NOTES.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nthe buffer pointed to by <i>netp</i> should be zeroed out\nbefore calling <b>inet_net_pton</b>(), since the call writes\nonly as many bytes as are required for the network number\n(or as are explicitly specified by <i>pres</i>), which may\nbe less than the number of bytes in a complete network\naddress.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_net_ntop()</b>\n<br>\nThe <b>inet_net_ntop</b>() function converts the network\nnumber in the buffer pointed to by <i>netp</i> to\npresentation format; <i>*netp</i> is interpreted as a value\nin network byte order. The <i>bits</i> argument specifies\nthe number of bits in the network number in\n<i>*netp</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nnull-terminated presentation-format string is placed in the\nbuffer pointed to by <i>pres</i>. The <i>psize</i> argument\nspecifies the number of bytes available in <i>pres</i>. The\npresentation string is in CIDR format: a dotted-decimal\nnumber representing the network address, followed by a\nslash, and the size of the network number in bits.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>inet_net_pton</b>() returns the number of bits in the\nnetwork number. On error, it returns -1, and <i>errno</i> is\nset to indicate the cause of the error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>inet_net_ntop</b>() returns <i>pres</i>. On error, it\nreturns NULL, and <i>errno</i> is set to indicate the cause\nof the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>EAFNOSUPPORT</b></p>\n\n<p style=\"margin-left:22%;\"><i>af</i> specified a value\nother than <b>AF_INET</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>EMSGSIZE</b></p>\n\n<p style=\"margin-left:22%;\">The size of the output buffer\nwas insufficient.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>inet_net_pton</b>()) <i>pres</i> was not in correct\npresentation format.</p></td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>inet_net_pton</b>() and <b>inet_net_ntop</b>() functions\nare nonstandard, but widely available.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Input\npresentation format for inet_net_pton()</b> <br>\nThe network number may be specified either as a hexadecimal\nvalue or in dotted-decimal notation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Hexadecimal\nvalues are indicated by an initial &quot;0x&quot; or\n&quot;0X&quot;. The hexadecimal digits populate the nibbles\n(half octets) of the network number from left to right in\nnetwork byte order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In\ndotted-decimal notation, up to four octets are specified, as\ndecimal numbers separated by dots. Thus, any of the\nfollowing forms are accepted:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">a.b.c.d <br>\na.b.c <br>\na.b <br>\na</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each part is a\nnumber in the range 0 to 255 that populates one byte of the\nresulting network number, going from left to right, in\nnetwork-byte (big endian) order. Where a part is omitted,\nthe resulting byte in the network number is zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For either\nhexadecimal or dotted-decimal format, the network number can\noptionally be followed by a slash and a number in the range\n0 to 32, which specifies the size of the network number in\nbits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Return value\nof inet_net_pton()</b> <br>\nThe return value of <b>inet_net_pton</b>() is the number of\nbits in the network number field. If the input presentation\nstring terminates with a slash and an explicit size value,\nthen that size becomes the return value of\n<b>inet_net_pton</b>(). Otherwise, the return value,\n<i>bits</i>, is inferred as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">If the most significant byte of\nthe network number is greater than or equal to 240, then\n<i>bits</i> is 32.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Otherwise, if the most significant byte of the network\nnumber is greater than or equal to 224, then <i>bits</i> is\n4.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Otherwise, if the most significant byte of the network\nnumber is greater than or equal to 192, then <i>bits</i> is\n24.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Otherwise, if the most significant byte of the network\nnumber is greater than or equal to 128, then <i>bits</i> is\n16.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Otherwise, <i>bits</i> is 8.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nresulting <i>bits</i> value from the above steps is greater\nthan or equal to 8, but the number of octets specified in\nthe network number exceed <i>bits/8</i>, then <i>bits</i> is\nset to 8 times the number of octets actually specified.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>inet_net_pton</b>() and\n<b>inet_net_ntop</b>(). It uses <b>inet_net_pton</b>() to\nconvert the presentation format network address provided in\nits first command-line argument to binary form, displays the\nreturn value from <b>inet_net_pton</b>(). It then uses\n<b>inet_net_ntop</b>() to convert the binary form back to\npresentation format, and displays the resulting string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\ndemonstrate that <b>inet_net_pton</b>() may not write to all\nbytes of its <i>netp</i> argument, the program allows an\noptional second command-line argument, a number used to\ninitialize the buffer before <b>inet_net_pton</b>() is\ncalled. As its final line of output, the program displays\nall of the bytes of the buffer returned by\n<b>inet_net_pton</b>() allowing the user to see which bytes\nhave not been touched by <b>inet_net_pton</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An example run,\nshowing that <b>inet_net_pton</b>() infers the number of\nbits in the network number:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n193.168</b> <br>\ninet_net_pton() returned: 24 <br>\ninet_net_ntop() yielded: 193.168.0/24 <br>\nRaw address: c1a80000</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Demonstrate\nthat <b>inet_net_pton</b>() does not zero out unused bytes\nin its result buffer:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n193.168 0xffffffff</b> <br>\ninet_net_pton() returned: 24 <br>\ninet_net_ntop() yielded: 193.168.0/24 <br>\nRaw address: c1a800ff</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Demonstrate\nthat <b>inet_net_pton</b>() will widen the inferred size of\nthe network number, if the supplied number of bytes in the\npresentation string exceeds the inferred value:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n193.168.1.128</b> <br>\ninet_net_pton() returned: 32 <br>\ninet_net_ntop() yielded: 193.168.1.128/32 <br>\nRaw address: c1a80180</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Explicitly\nspecifying the size of the network number overrides any\ninference about its size (but any extra bytes that are\nexplicitly specified will still be used by\n<b>inet_net_pton</b>(): to populate the result buffer):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n193.168.1.128/24</b> <br>\ninet_net_pton() returned: 24 <br>\ninet_net_ntop() yielded: 193.168.1/24 <br>\nRaw address: c1a80180</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n/* Link with &quot;-lresolv&quot; */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;arpa/inet.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nerrExit(msg) do { perror(msg); exit(EXIT_FAILURE); \\ <br>\n} while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nchar buf[100]; <br>\nstruct in_addr addr; <br>\nint bits;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &lt;\n2) { <br>\nfprintf(stderr, <br>\n&quot;Usage: %s presentation-form [addr-init-value]\\n&quot;,\n<br>\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* If argv[2]\nis supplied (a numeric value), use it to initialize <br>\nthe output buffer given to inet_net_pton(), so that we can\nsee <br>\nthat inet_net_pton() initializes only those bytes needed for\n<br>\nthe network number. If argv[2] is not supplied, then\ninitialize <br>\nthe buffer to zero (as is recommended practice). */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">addr.s_addr =\n(argc &gt; 2) ? strtod(argv[2], NULL) : 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Convert\npresentation network number in argv[1] to binary */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">bits =\ninet_net_pton(AF_INET, argv[1], &amp;addr, sizeof(addr));\n<br>\nif (bits == -1) <br>\nerrExit(&quot;inet_net_ntop&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;inet_net_pton()\nreturned: %d\\n&quot;, bits);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Convert\nbinary format back to presentation, using 'bits' <br>\nreturned by inet_net_pton() */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(inet_net_ntop(AF_INET, &amp;addr, bits, buf, sizeof(buf))\n== NULL) <br>\nerrExit(&quot;inet_net_ntop&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;inet_net_ntop()\nyielded: %s\\n&quot;, buf);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Display\n'addr' in raw form (in network byte order), so we can <br>\nsee bytes not displayed by inet_net_ntop(); some of those\nbytes <br>\nmay not have been touched by inet_net_ntop(), and so will\nstill <br>\nhave any initial value that was specified in argv[2]. */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Raw\naddress: %x\\n&quot;, htonl(addr.s_addr));</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/inet\">inet(3)</a>,\n<a href=\"https://man.page/5/networks\">networks(5)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}