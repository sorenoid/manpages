{"name":"getcontext","description":"getcontext, setcontext - get or set the user context","body":"\n\n<h1 align=\"center\">GETCONTEXT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getcontext,\nsetcontext - get or set the user context</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;ucontext.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetcontext(ucontext_t *</b><i>ucp</i><b>); <br>\nint setcontext(const ucontext_t *</b><i>ucp</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a System\nV-like environment, one has the two types <i>mcontext_t</i>\nand <i>ucontext_t</i> defined in <i>&lt;ucontext.h&gt;</i>\nand the four functions <b>getcontext</b>(),\n<b>setcontext</b>(), <a href=\"https://man.page/3/makecontext\">makecontext(3)</a>, and\n<a href=\"https://man.page/3/swapcontext\">swapcontext(3)</a> that allow user-level context\nswitching between multiple threads of control within a\nprocess.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>mcontext_t</i> type is machine-dependent and opaque. The\n<i>ucontext_t</i> type is a structure that has at least the\nfollowing fields:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\nucontext_t { <br>\nstruct ucontext_t *uc_link; <br>\nsigset_t uc_sigmask; <br>\nstack_t uc_stack; <br>\nmcontext_t uc_mcontext; <br>\n... <br>\n} ucontext_t;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">with\n<i>sigset_t</i> and <i>stack_t</i> defined in\n<i>&lt;signal.h&gt;</i>. Here <i>uc_link</i> points to the\ncontext that will be resumed when the current context\nterminates (in case the current context was created using\n<a href=\"https://man.page/3/makecontext\">makecontext(3)</a>), <i>uc_sigmask</i> is the set of\nsignals blocked in this context (see <a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>),\n<i>uc_stack</i> is the stack used by this context (see\n<a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>), and <i>uc_mcontext</i> is the\nmachine-specific representation of the saved context, that\nincludes the calling thread&rsquo;s machine registers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>getcontext</b>() initializes the structure pointed to by\n<i>ucp</i> to the currently active context.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>setcontext</b>() restores the user context pointed to by\n<i>ucp</i>. A successful call does not return. The context\nshould have been obtained by a call of <b>getcontext</b>(),\nor <a href=\"https://man.page/3/makecontext\">makecontext(3)</a>, or received as the third argument\nto a signal handler (see the discussion of the\n<b>SA_SIGINFO</b> flag in <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the context\nwas obtained by a call of <b>getcontext</b>(), program\nexecution continues as if this call just returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the context\nwas obtained by a call of <a href=\"https://man.page/3/makecontext\">makecontext(3)</a>, program\nexecution continues by a call to the function <i>func</i>\nspecified as the second argument of that call to\n<a href=\"https://man.page/3/makecontext\">makecontext(3)</a>. When the function <i>func</i>\nreturns, we continue with the <i>uc_link</i> member of the\nstructure <i>ucp</i> specified as the first argument of that\ncall to <a href=\"https://man.page/3/makecontext\">makecontext(3)</a>. When this member is NULL, the\nthread exits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the context\nwas obtained by a call to a signal handler, then old\nstandard text says that &quot;program execution continues\nwith the program instruction following the instruction\ninterrupted by the signal&quot;. However, this sentence was\nremoved in SUSv2, and the present verdict is &quot;the\nresult is unspecified&quot;.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\nsuccessful, <b>getcontext</b>() returns 0 and\n<b>setcontext</b>() does not return. On error, both return\n-1 and set <i>errno</i> appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">None\ndefined.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3405581.png\" alt=\"Image grohtml-3405581.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">SUSv2,\nPOSIX.1-2001. POSIX.1-2008 removes the specification of\n<b>getcontext</b>(), citing portability issues, and\nrecommending that applications be rewritten to use POSIX\nthreads instead.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The earliest\nincarnation of this mechanism was the\n<a href=\"https://man.page/3/setjmp\">setjmp(3)</a>/<a href=\"https://man.page/3/longjmp\">longjmp(3)</a> mechanism. Since that\ndoes not define the handling of the signal context, the next\nstage was the <a href=\"https://man.page/3/sigsetjmp\">sigsetjmp(3)</a>/<a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a> pair.\nThe present mechanism gives much more control. On the other\nhand, there is no easy way to detect whether a return from\n<b>getcontext</b>() is from the first call, or via a\n<b>setcontext</b>() call. The user has to invent their own\nbookkeeping device, and a register variable won&rsquo;t do\nsince registers are restored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a signal\noccurs, the current user context is saved and a new context\nis created by the kernel for the signal handler. Do not\nleave the handler using <a href=\"https://man.page/3/longjmp\">longjmp(3)</a>: it is undefined\nwhat would happen with contexts. Use <a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a> or\n<b>setcontext</b>() instead.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>, <a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>,\n<a href=\"https://man.page/3/longjmp\">longjmp(3)</a>, <a href=\"https://man.page/3/makecontext\">makecontext(3)</a>,\n<a href=\"https://man.page/3/sigsetjmp\">sigsetjmp(3)</a>, <a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}