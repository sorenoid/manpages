{"name":"libnetlink","body":"\n\n<h1 align=\"center\">libnetlink</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">libnetlink - A\nlibrary for accessing the netlink service</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;asm/types.h&gt; <br>\n#include &lt;libnetlink.h&gt; <br>\n#include &lt;linux/netlink.h&gt; <br>\n#include &lt;linux/rtnetlink.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrtnl_open(struct rtnl_handle *rth, unsigned\nsubscriptions)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrtnl_wilddump_request(struct rtnl_handle *rth, int family,\nint type)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrtnl_send(struct rtnl_handle *rth, char *buf, int len)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrtnl_dump_request(struct rtnl_handle *rth, int type, void\n*req, int len)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrtnl_dump_filter(struct rtnl_handle *rth,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n\n\n<p>int (*filter)(struct sockaddr_nl *, struct nlmsghdr *n,\nvoid *),</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n\n\n<p>void *arg1,</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n\n\n<p>int (*junk)(struct sockaddr_nl *,struct nlmsghdr *n,\nvoid *),</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n\n\n<p>void *arg2)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrtnl_talk(struct rtnl_handle *rtnl, struct nlmsghdr *n,\npid_t peer,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>unsigned groups, struct nlmsghdr *answer,</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>int (*junk)(struct sockaddr_nl *,struct nlmsghdr *n,\nvoid *),</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>void *jarg)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrtnl_listen(struct rtnl_handle *rtnl,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>int (*handler)(struct sockaddr_nl *, struct\nrtnl_ctrl_data *,</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n\n\n<p>struct nlmsghdr *n, void *),</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n\n\n<p>void *jarg)</p></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrtnl_from_file(FILE *rtnl,</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>int (*handler)(struct sockaddr_nl *,struct nlmsghdr *n,\nvoid *),</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>void *jarg)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\naddattr32(struct nlmsghdr *n, int maxlen, int type, __u32\ndata)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\naddattr_l(struct nlmsghdr *n, int maxlen, int type, void\n*data, int alen)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrta_addattr32(struct rtattr *rta, int maxlen, int type,\n__u32 data)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int\nrta_addattr_l(struct rtattr *rta, int maxlen, int type, void\n*data, int alen)</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">libnetlink\nprovides a higher level interface to <a href=\"https://man.page/7/rtnetlink\">rtnetlink(7)</a>.\nThe read functions return 0 on success and a negative errno\non failure. The send functions return the amount of data\nsent, or -1 on error. <br>\nrtnl_open</p>\n\n<p style=\"margin-left:22%;\">Open a rtnetlink socket and\nsave the state into the <b>rth</b> handle. This handle is\npassed to all subsequent calls. <b>subscriptions</b> is a\nbitmap of the rtnetlink multicast groups the socket will be\na member of.</p>\n\n<p style=\"margin-left:11%;\">rtnl_wilddump_request</p>\n\n<p style=\"margin-left:22%;\">Request a full dump of the\n<b>type</b> database for <b>family</b> addresses.\n<b>type</b> is a rtnetlink message type.</p>\n\n<p style=\"margin-left:11%;\">rtnl_dump_request</p>\n\n<p style=\"margin-left:22%;\">Request a full dump of the\n<b>type</b> data buffer into <b>buf</b> with maximum length\nof <b>len. type</b> is a rtnetlink message type.</p>\n\n<p style=\"margin-left:11%;\">rtnl_dump_filter</p>\n\n<p style=\"margin-left:22%;\">Receive netlink data after a\nrequest and filter it. The <b>filter</b> callback checks if\nthe received message is wanted. It gets the source address\nof the message, the message itself and <b>arg1</b> as\narguments. 0 as return means that the filter passed, a\nnegative value is returned by <i>rtnl_dump_filter</i> in\ncase of error. NULL for <i>filter</i> means to not use a\nfilter. <b>junk</b> is used to filter messages not destined\nto the local socket. Only one message bundle is received. If\nthere is a message pending, this function does not\nblock.</p>\n\n<p style=\"margin-left:11%;\">rtnl_listen</p>\n\n<p style=\"margin-left:22%;\">Receive netlink data after a\nrequest and pass it to <i>handler.</i> <b>handler</b> is a\ncallback that gets the message source address, anscillary\ndata, the message itself, and the <b>jarg</b> cookie as\narguments. It will get called for all received messages.\nOnly one message bundle is received. If there is a message\npending this function does not block.</p>\n\n<p style=\"margin-left:11%;\">rtnl_from_file</p>\n\n<p style=\"margin-left:22%;\">Works like <i>rtnl_listen,</i>\nbut reads a netlink message bundle from the file <b>file</b>\nand passes the messages to <b>handler</b> for parsing. The\nfile should contain raw data as received from a rtnetlink\nsocket.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are useful to construct custom rtnetlink messages.\nFor simple database dumping with filtering it is better to\nuse the higher level functions above. See\n<a href=\"https://man.page/3/rtnetlink\">rtnetlink(3)</a> and <a href=\"https://man.page/3/netlink\">netlink(3)</a> on how to generate\na rtnetlink message. The following utility functions require\na continuous buffer that already contains a netlink message\nheader and a rtnetlink request. <br>\nrtnl_send</p>\n\n<p style=\"margin-left:22%;\">Send the rtnetlink message in\n<b>buf</b> of length <b>len</b> to handle <b>rth.</b></p>\n\n<p style=\"margin-left:11%;\">addattr32</p>\n\n<p style=\"margin-left:22%;\">Add a __u32 attribute of type\n<b>type</b> and with value <b>data</b> to netlink message\n<b>n,</b> which is part of a buffer of length\n<b>maxlen.</b></p>\n\n<p style=\"margin-left:11%;\">addattr_l</p>\n\n<p style=\"margin-left:22%;\">Add a variable length attribute\nof type <b>type</b> and with value <b>data</b> and\n<b>alen</b> length to netlink message <b>n,</b> which is\npart of a buffer of length <b>maxlen. data</b> is\ncopied.</p>\n\n<p style=\"margin-left:11%;\">rta_addattr32</p>\n\n<p style=\"margin-left:22%;\">Initialize the rtnetlink\nattribute <b>rta</b> with a __u32 data value.</p>\n\n<p style=\"margin-left:11%;\">rta_addattr32</p>\n\n<p style=\"margin-left:22%;\">Initialize the rtnetlink\nattribute <b>rta</b> with a variable length data value.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nmeant for internal use, use libmnl for new programs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\nsometimes use fprintf and exit when a fatal error occurs.\nThis library should be named librtnetlink.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">netlink/rtnetlink\nwas designed and written by Alexey Kuznetsov. Andi Kleen\nwrote the man page.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/netlink\">netlink(7)</a>,\n<a href=\"https://man.page/7/rtnetlink\">rtnetlink(7)</a> <br>\n /usr/include/linux/rtnetlink.h</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}