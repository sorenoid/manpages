{"name":"mcheck","description":"mcheck, mcheck_check_all, mcheck_pedantic, mprobe - heap consistency checking","body":"\n\n<h1 align=\"center\">MCHECK</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mcheck,\nmcheck_check_all, mcheck_pedantic, mprobe - heap consistency\nchecking</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;mcheck.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmcheck(void (*</b><i>abortfunc</i><b>)(enum\nmcheck_status</b> <i>mstatus</i><b>));</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmcheck_pedantic(void (*</b><i>abortfunc</i><b>)(enum\nmcheck_status</b> <i>mstatus</i><b>));</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nmcheck_check_all(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>enum\nmcheck_status mprobe(void *</b><i>ptr</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mcheck</b>() function installs a set of debugging hooks\nfor the <a href=\"https://man.page/3/malloc\">malloc(3)</a> family of memory-allocation\nfunctions. These hooks cause certain consistency checks to\nbe performed on the state of the heap. The checks can detect\napplication errors such as freeing a block of memory more\nthan once or corrupting the bookkeeping data structures that\nimmediately precede a block of allocated memory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To be\neffective, the <b>mcheck</b>() function must be called\nbefore the first call to <a href=\"https://man.page/3/malloc\">malloc(3)</a> or a related\nfunction. In cases where this is difficult to ensure,\nlinking the program with <i>-lmcheck</i> inserts an implicit\ncall to <b>mcheck</b>() (with a NULL argument) before the\nfirst call to a memory-allocation function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mcheck_pedantic</b>() function is similar to\n<b>mcheck</b>(), but performs checks on all allocated blocks\nwhenever one of the memory-allocation functions is called.\nThis can be very slow!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mcheck_check_all</b>() function causes an immediate check\non all allocated blocks. This call is effective only if\n<b>mcheck</b>() is called beforehand.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the system\ndetects an inconsistency in the heap, the caller-supplied\nfunction pointed to by <i>abortfunc</i> is invoked with a\nsingle argument, <i>mstatus</i>, that indicates what type of\ninconsistency was detected. If <i>abortfunc</i> is NULL, a\ndefault function prints an error message on <i>stderr</i>\nand calls <a href=\"https://man.page/3/abort\">abort(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mprobe</b>() function performs a consistency check on the\nblock of allocated memory pointed to by <i>ptr</i>. The\n<b>mcheck</b>() function should be called beforehand\n(otherwise <b>mprobe</b>() returns\n<b>MCHECK_DISABLED</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nlist describes the values returned by <b>mprobe</b>() or\npassed as the <i>mstatus</i> argument when <i>abortfunc</i>\nis invoked: <b><br>\nMCHECK_DISABLED</b> (<b>mprobe</b>() only)</p>\n\n<p style=\"margin-left:22%;\"><b>mcheck</b>() was not called\nbefore the first memory allocation function was called.\nConsistency checking is not possible.</p>\n\n<p style=\"margin-left:11%;\"><b>MCHECK_OK</b>\n(<b>mprobe</b>() only)</p>\n\n<p style=\"margin-left:22%;\">No inconsistency detected.</p>\n\n<p style=\"margin-left:11%;\"><b>MCHECK_HEAD</b></p>\n\n<p style=\"margin-left:22%;\">Memory preceding an allocated\nblock was clobbered.</p>\n\n<p style=\"margin-left:11%;\"><b>MCHECK_TAIL</b></p>\n\n<p style=\"margin-left:22%;\">Memory following an allocated\nblock was clobbered.</p>\n\n<p style=\"margin-left:11%;\"><b>MCHECK_FREE</b></p>\n\n<p style=\"margin-left:22%;\">A block of memory was freed\ntwice.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mcheck</b>()\nand <b>mcheck_pedantic</b>() return 0 on success, or -1 on\nerror.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mcheck_pedantic</b>() and <b>mcheck_check_all</b>()\nfunctions are available since glibc 2.2. The <b>mcheck</b>()\nand <b>mprobe</b>() functions are present since at least\nglibc 2.0</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3382441.png\" alt=\"Image grohtml-3382441.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare GNU extensions.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linking a\nprogram with <i>-lmcheck</i> and using the\n<b>MALLOC_CHECK_</b> environment variable (described in\n<a href=\"https://man.page/3/mallopt\">mallopt(3)</a>) cause the same kinds of errors to be\ndetected. But, using <b>MALLOC_CHECK_</b> does not require\nthe application to be relinked.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow calls <b>mcheck</b>() with a NULL argument and then\nfrees the same block of memory twice. The following shell\nsession demonstrates what happens when running the\nprogram:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./a.out</b> <br>\nAbout to free</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">About to free a\nsecond time <br>\nblock freed twice <br>\nAborted (core dumped)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;mcheck.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nchar *p;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(mcheck(NULL) != 0) { <br>\nfprintf(stderr, &quot;mcheck() failed\\n&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_FAILURE);\n<br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">p =\nmalloc(1000);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fprintf(stderr,\n&quot;About to free\\n&quot;); <br>\nfree(p); <br>\nfprintf(stderr, &quot;\\nAbout to free a second\ntime\\n&quot;); <br>\nfree(p);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/malloc\">malloc(3)</a>,\n<a href=\"https://man.page/3/mallopt\">mallopt(3)</a>, <a href=\"https://man.page/3/mtrace\">mtrace(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}