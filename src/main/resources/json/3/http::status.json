{"name":"http::status","description":"HTTP::Status - HTTP Status code processing","body":"\n\n<h1 align=\"center\">HTTP::Status</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Status -\nHTTP Status code processing</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.36</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTTP::Status qw(:constants :is status_message); <br>\nif ($rc != HTTP_OK) { <br>\nprint status_message($rc), &quot;\\n&quot;; <br>\n} <br>\nif (is_success($rc)) { ... } <br>\nif (is_error($rc)) { ... } <br>\nif (is_redirect($rc)) { ... }</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>HTTP::Status</i>\nis a library of routines for defining and classifying\n<small>HTTP</small> status codes for libwww-perl. Status\ncodes are used to encode the overall outcome of an\n<small>HTTP</small> response message. Codes correspond to\nthose defined in <small>RFC 2616</small> and <small>RFC\n2518.</small></p>\n\n<h2>CONSTANTS\n<a name=\"CONSTANTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nconstant functions can be used as mnemonic status code\nnames. None of these are exported by default. Use the\n&quot;:constants&quot; tag to import them all.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP_CONTINUE\n(100) <br>\nHTTP_SWITCHING_PROTOCOLS (101) <br>\nHTTP_PROCESSING (102) <br>\nHTTP_EARLY_HINTS (103) <br>\nHTTP_OK (200) <br>\nHTTP_CREATED (201) <br>\nHTTP_ACCEPTED (202) <br>\nHTTP_NON_AUTHORITATIVE_INFORMATION (203) <br>\nHTTP_NO_CONTENT (204) <br>\nHTTP_RESET_CONTENT (205) <br>\nHTTP_PARTIAL_CONTENT (206) <br>\nHTTP_MULTI_STATUS (207) <br>\nHTTP_ALREADY_REPORTED (208) <br>\nHTTP_IM_USED (226) <br>\nHTTP_MULTIPLE_CHOICES (300) <br>\nHTTP_MOVED_PERMANENTLY (301) <br>\nHTTP_FOUND (302) <br>\nHTTP_SEE_OTHER (303) <br>\nHTTP_NOT_MODIFIED (304) <br>\nHTTP_USE_PROXY (305) <br>\nHTTP_TEMPORARY_REDIRECT (307) <br>\nHTTP_PERMANENT_REDIRECT (308) <br>\nHTTP_BAD_REQUEST (400) <br>\nHTTP_UNAUTHORIZED (401) <br>\nHTTP_PAYMENT_REQUIRED (402) <br>\nHTTP_FORBIDDEN (403) <br>\nHTTP_NOT_FOUND (404) <br>\nHTTP_METHOD_NOT_ALLOWED (405) <br>\nHTTP_NOT_ACCEPTABLE (406) <br>\nHTTP_PROXY_AUTHENTICATION_REQUIRED (407) <br>\nHTTP_REQUEST_TIMEOUT (408) <br>\nHTTP_CONFLICT (409) <br>\nHTTP_GONE (410) <br>\nHTTP_LENGTH_REQUIRED (411) <br>\nHTTP_PRECONDITION_FAILED (412) <br>\nHTTP_PAYLOAD_TOO_LARGE (413) <br>\nHTTP_URI_TOO_LONG (414) <br>\nHTTP_UNSUPPORTED_MEDIA_TYPE (415) <br>\nHTTP_RANGE_NOT_SATISFIABLE (416) <br>\nHTTP_EXPECTATION_FAILED (417) <br>\nHTTP_MISDIRECTED REQUEST (421) <br>\nHTTP_UNPROCESSABLE_ENTITY (422) <br>\nHTTP_LOCKED (423) <br>\nHTTP_FAILED_DEPENDENCY (424) <br>\nHTTP_TOO_EARLY (425) <br>\nHTTP_UPGRADE_REQUIRED (426) <br>\nHTTP_PRECONDITION_REQUIRED (428) <br>\nHTTP_TOO_MANY_REQUESTS (429) <br>\nHTTP_REQUEST_HEADER_FIELDS_TOO_LARGE (431) <br>\nHTTP_UNAVAILABLE_FOR_LEGAL_REASONS (451) <br>\nHTTP_INTERNAL_SERVER_ERROR (500) <br>\nHTTP_NOT_IMPLEMENTED (501) <br>\nHTTP_BAD_GATEWAY (502) <br>\nHTTP_SERVICE_UNAVAILABLE (503) <br>\nHTTP_GATEWAY_TIMEOUT (504) <br>\nHTTP_HTTP_VERSION_NOT_SUPPORTED (505) <br>\nHTTP_VARIANT_ALSO_NEGOTIATES (506) <br>\nHTTP_INSUFFICIENT_STORAGE (507) <br>\nHTTP_LOOP_DETECTED (508) <br>\nHTTP_NOT_EXTENDED (510) <br>\nHTTP_NETWORK_AUTHENTICATION_REQUIRED (511)</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nadditional functions are provided. Most of them are exported\nby default. The &quot;:is&quot; import tag can be used to\nimport all the classification functions. <br>\nstatus_message( $code )</p>\n\n<p style=\"margin-left:17%;\">The <b>status_message()</b>\nfunction will translate status codes to human readable\nstrings. The string is the same as found in the constant\nnames above. If the $code is not registered in the list of\n<small>IANA HTTP</small> Status Codes\n&lt;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&gt;\nthen &quot;undef&quot; is returned.</p>\n\n<p style=\"margin-left:11%;\">is_info( $code )</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\n$code is an <i>Informational</i> status code (1xx). This\nclass of status code indicates a provisional response which\ncan&rsquo;t have any content.</p>\n\n<p style=\"margin-left:11%;\">is_success( $code )</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\n$code is a <i>Successful</i> status code (2xx).</p>\n\n<p style=\"margin-left:11%;\">is_redirect( $code )</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\n$code is a <i>Redirection</i> status code (3xx). This class\nof status code indicates that further action needs to be\ntaken by the user agent in order to fulfill the request.</p>\n\n<p style=\"margin-left:11%;\">is_error( $code )</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\n$code is an <i>Error</i> status code (4xx or 5xx). The\nfunction returns <small>TRUE</small> for both client and\nserver error status codes.</p>\n\n<p style=\"margin-left:11%;\">is_client_error( $code )</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\n$code is a <i>Client Error</i> status code (4xx). This class\nof status code is intended for cases in which the client\nseems to have erred.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nis <b>not</b> exported by default.</p>\n\n<p style=\"margin-left:11%;\">is_server_error( $code )</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\n$code is a <i>Server Error</i> status code (5xx). This class\nof status codes is intended for cases in which the server is\naware that it has erred or is incapable of performing the\nrequest.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nis <b>not</b> exported by default.</p>\n\n<p style=\"margin-left:11%;\">is_cacheable_by_default( $code\n)</p>\n\n<p style=\"margin-left:17%;\">Return <small>TRUE</small> if\n$code indicates that a response is cacheable by default, and\nit can be reused by a cache with heuristic expiration. All\nother status codes are not cacheable by default. See\n<small>RFC 7231</small> - <small>HTTP/1.1</small> Semantics\nand Content, Section 6.1. Overview of Status Codes\n&lt;https://tools.ietf.org/html/rfc7231#section-6.1&gt;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nis <b>not</b> exported by default.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>IANA\nHTTP</small> Status Codes\n&lt;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&gt;</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For legacy\nreasons all the &quot;HTTP_&quot; constants are exported by\ndefault with the prefix &quot;RC_&quot;. It&rsquo;s\nrecommended to use explicit imports and the\n&quot;:constants&quot; tag instead of relying on this.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1994 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONSTANTS\">CONSTANTS</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}