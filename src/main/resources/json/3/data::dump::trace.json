{"name":"data::dump::trace","description":"Data::Dump::Trace\n- Helpers to trace function and method calls","body":"\n\n<h1 align=\"center\">Data::Dump::Trace</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Data::Dump::Trace\n- Helpers to trace function and method calls</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nData::Dump::Trace qw(autowrap mcall); <br>\nautowrap(&quot;LWP::UserAgent&quot; =&gt; &quot;ua&quot;,\n&quot;HTTP::Response&quot; =&gt; &quot;res&quot;); <br>\nuse LWP::UserAgent; <br>\n$ua = mcall(LWP::UserAgent =&gt; &quot;new&quot;); # instead\nof LWP::UserAgent-&gt;new; <br>\n\n$ua-&gt;get(&quot;http://www.example.com&quot;)-&gt;dump;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are provided: <br>\nautowrap( $class ) <br>\nautowrap( $class =&gt; $prefix ) <br>\nautowrap( $class1 =&gt; $prefix1, $class2 =&gt; $prefix2,\n... ) <br>\nautowrap( $class1 =&gt; \\%info1, $class2 =&gt; \\%info2, ...\n)</p>\n\n<p style=\"margin-left:17%;\">Register classes whose objects\nare automatically wrapped when returned by one of the call\nfunctions below. If $prefix is provided it will be used as\nto name the objects.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Alternative is\nto pass an %info hash for each class. The recognized keys\nare: <br>\nprefix =&gt; $string</p>\n\n<p style=\"margin-left:23%;\">The prefix string used to name\nobjects of this type.</p>\n\n<p style=\"margin-left:17%;\">proto =&gt; \\%hash</p>\n\n<p style=\"margin-left:23%;\">A hash of prototypes to use for\nthe methods when an object is wrapped.</p>\n\n<p style=\"margin-left:11%;\">wrap( name =&gt; $str, func\n=&gt; \\&amp;func, proto =&gt; $proto ) <br>\nwrap( name =&gt; $str, obj =&gt; $obj, proto =&gt; \\%hash\n)</p>\n\n<p style=\"margin-left:17%;\">Returns a wrapped function or\nobject. When a wrapped function is invoked then a trace is\nprinted after the underlying function has returned. When a\nmethod on a wrapped object is invoked then a trace is\nprinted after the methods on the underlying objects has\nreturned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See\n&quot;Prototypes&quot; for description of the\n&quot;proto&quot; argument.</p>\n\n<p style=\"margin-left:11%;\">call( $name, \\&amp;func,\n$proto, @ARGS )</p>\n\n<p style=\"margin-left:17%;\">Calls the given function with\nthe given arguments. The trace will use $name as the name of\nthe function.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See\n&quot;Prototypes&quot; for description of the $proto\nargument.</p>\n\n<p style=\"margin-left:11%;\">mcall( $class, $method, $proto,\n@ARGS ) <br>\nmcall( $object, $method, $proto, @ARGS )</p>\n\n<p style=\"margin-left:17%;\">Calls the given method with the\ngiven arguments.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See\n&quot;Prototypes&quot; for description of the $proto\nargument.</p>\n\n<p style=\"margin-left:11%;\">trace( $symbol, $prototype\n)</p>\n\n<p style=\"margin-left:17%;\">Replaces the function given by\n$symbol with a wrapped function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Prototypes\n<br>\nNote: The prototype string syntax described here is\nexperimental and likely to change in revisions of this\ninterface</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The $proto\nargument to <b>call()</b> and <b>mcall()</b> can optionally\nprovide a prototype for the function call. This give the\ntracer hints about how to best format the argument lists and\nif there are <i>in/out</i> or <i>out</i> arguments. The\ngeneral form for the prototype string is:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;arguments&gt;\n= &lt;return_value&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\nprototype is &quot;@ = @&quot;; list of values as input and\nlist of values as output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value\n&rsquo;%&rsquo; can be used for both arguments and return\nvalue to say that key/value pair style lists are used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alternatively,\nindividual positional arguments can be listed each\nrepresented by a letter:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>&quot;i&quot;</p></td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n\n\n<p>input argument</p></td>\n<td width=\"37%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>&quot;o&quot;</p></td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n\n\n<p>output argument</p></td>\n<td width=\"37%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>&quot;O&quot;</p></td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n\n\n<p>both input and output argument</p></td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the return\nvalue prototype has &quot;!&quot; appended, then it signals\nthat this function sets errno ($!) when it returns a false\nvalue. The trace will display the current value of errno in\nthat case.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the return\nvalue prototype looks like a variable name (with\n&quot;$&quot; prefix), and the function returns a blessed\nobject, then the variable name will be used as prefix and\nthe returned object automatically traced.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n \n<p style=\"margin-left:11%; margin-top: 1em\">Data::Dump</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}