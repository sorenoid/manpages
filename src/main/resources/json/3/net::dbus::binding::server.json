{"name":"net::dbus::binding::server","description":"Net::DBus::Binding::Server\n- A server to accept incoming connections","body":"\n\n<h1 align=\"center\">Net::DBus::Binding::Server</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Binding::Server\n- A server to accept incoming connections</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Creating a new\nserver and accepting client connections</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::DBus::Binding::Server; <br>\nmy $server = Net::DBus::Binding::Server-&gt;new(address\n=&gt; &quot;unix:path=/path/to/socket&quot;); <br>\n$server-&gt;connection_callback(\\&amp;new_connection); <br>\nsub new_connection { <br>\nmy $connection = shift; <br>\n.. work with new connection... <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Managing the\nserver and new connections in an event loop</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $reactor =\nNet::DBus::Binding::Reactor-&gt;new(); <br>\n$reactor-&gt;manage($server); <br>\n$reactor-&gt;run(); <br>\nsub new_connection { <br>\nmy $connection = shift; <br>\n$reactor-&gt;manage($connection); <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A server for\nreceiving connection from client programs. The methods\ndefined on this module have a close correspondence to the\ndbus_server_XXX methods in the C <small>API,</small> so for\nfurther details on their behaviour, the C <small>API</small>\ndocumentation may be of use.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $server =\nNet::DBus::Binding::Server-&gt;new(address =&gt; <br>\n&quot;unix:path=/path/to/socket&quot;);</p>\n\n<p style=\"margin-left:17%;\">Creates a new server binding it\nto the socket specified by the &quot;address&quot;\nparameter.</p>\n\n<p style=\"margin-left:11%;\">$status =\n$server-&gt;<b>is_connected()</b>;</p>\n\n<p style=\"margin-left:17%;\">Returns zero if the server has\nbeen disconnected, otherwise a positive value is\nreturned.</p>\n\n\n<p style=\"margin-left:11%;\">$server-&gt;<b>disconnect()</b></p>\n\n<p style=\"margin-left:17%;\">Closes this server to the\nremote host. This method is called automatically during\ngarbage collection (ie in the <small>DESTROY</small> method)\nif the programmer forgets to explicitly disconnect.</p>\n\n\n<p style=\"margin-left:11%;\">$server-&gt;set_watch_callbacks(\\&amp;add_watch,\n\\&amp;remove_watch, <br>\n\\&amp;toggle_watch);</p>\n\n<p style=\"margin-left:17%;\">Register a set of callbacks for\nadding, removing &amp; updating watches in the\napplication&rsquo;s event loop. Each parameter should be a\ncode reference, which on each invocation, will be supplied\nwith two parameters, the server object and the watch object.\nIf you are using a &quot;Net::DBus::Binding::Reactor&quot;\nobject as the application event loop, then the\n&rsquo;manage&rsquo; method on that object will call this on\nyour behalf.</p>\n\n\n<p style=\"margin-left:11%;\">$server-&gt;set_timeout_callbacks(\\&amp;add_timeout,\n\\&amp;remove_timeout, <br>\n\\&amp;toggle_timeout);</p>\n\n<p style=\"margin-left:17%;\">Register a set of callbacks for\nadding, removing &amp; updating timeouts in the\napplication&rsquo;s event loop. Each parameter should be a\ncode reference, which on each invocation, will be supplied\nwith two parameters, the server object and the timeout\nobject. If you are using a\n&quot;Net::DBus::Binding::Reactor&quot; object as the\napplication event loop, then the &rsquo;manage&rsquo; method\non that object will call this on your behalf.</p>\n\n\n<p style=\"margin-left:11%;\">$server-&gt;set_connection_callback(\\&amp;handler)</p>\n\n<p style=\"margin-left:17%;\">Registers the handler to use\nfor dealing with new incoming connections from clients. The\ncode reference will be invoked each time a new client\nconnects and supplied with a single parameter which is the\n&quot;Net::DBus::Binding::Connection&quot; object\nrepresenting the client.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel P.\nBerrange</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2004-2011 Daniel P. Berrange</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Binding::Connection,\nNet::DBus::Binding::Bus,\nNet::DBus::Binding::Message::Signal,\nNet::DBus::Binding::Message::MethodCall,\nNet::DBus::Binding::Message::MethodReturn,\nNet::DBus::Binding::Message::Error</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}