{"name":"http::date","body":"\n\n<h1 align=\"center\">HTTP::Date</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Date -\nHTTP::Date - date conversion routines</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.05</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use HTTP::Date;\n<br>\n$string = time2str($time); # Format as GMT ASCII time <br>\n$time = str2time($string); # convert ASCII date to machine\ntime</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides functions that deal the date formats used by the\n<small>HTTP</small> protocol (and then some more). Only the\nfirst two functions, <b>time2str()</b> and\n<b>str2time()</b>, are exported by default. <br>\ntime2str( [$time] )</p>\n\n<p style=\"margin-left:17%;\">The <b>time2str()</b> function\nconverts a machine time (seconds since epoch) to a string.\nIf the function is called without an argument or with an\nundefined argument, it will use the current time.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The string\nreturned is in the format preferred for the\n<small>HTTP</small> protocol. This is a fixed length subset\nof the format defined by <small>RFC 1123,</small>\nrepresented in Universal Time ( <small>GMT</small> ). An\nexample of a time stamp in this format is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sun, 06 Nov\n1994 08:49:37 GMT</p>\n\n<p style=\"margin-left:11%;\">str2time( $str [, $zone] )</p>\n\n<p style=\"margin-left:17%;\">The <b>str2time()</b> function\nconverts a string to machine time. It returns\n&quot;undef&quot; if the format of $str is unrecognized,\notherwise whatever the &quot;Time::Local&quot; functions can\nmake out of the parsed time. Dates before the system&rsquo;s\nepoch may not work on all operating systems. The time\nformats recognized are the same as for\n<b>parse_date()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nalso takes an optional second argument that specifies the\ndefault time zone to use when converting the date. This\nparameter is ignored if the zone is found in the date string\nitself. If this parameter is missing, and the date string\nformat does not contain any zone specification, then the\nlocal time zone is assumed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the zone is\nnot &quot;&quot;GMT&quot;&quot; or numerical (like\n&quot;&quot;-0800&quot;&quot; or &quot;+0100&quot;), then\nthe &quot;Time::Zone&quot; module must be installed in order\nto get the date recognized.</p>\n\n<p style=\"margin-left:11%;\">parse_date( $str )</p>\n\n<p style=\"margin-left:17%;\">This function will try to parse\na date string, and then return it as a list of numerical\nvalues followed by a (possible undefined) time zone\nspecifier; ($year, $month, $day, $hour, $min, $sec, $tz).\nThe $year will be the full 4-digit year, and $month numbers\nstart with 1 (for January).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In scalar\ncontext the numbers are interpolated in a string of the\n&quot;YYYY-MM-DD hh:mm:ss <small>TZ</small> &quot;-format\nand returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the date is\nunrecognized, then the empty list is returned\n(&quot;undef&quot; in scalar context).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function is\nable to parse the following formats:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;Wed, 09\nFeb 1994 22:23:32 GMT&quot; -- HTTP format <br>\n&quot;Thu Feb 3 17:03:55 GMT 1994&quot; -- ctime(3) format\n<br>\n&quot;Thu Feb 3 00:00:00 1994&quot;, -- ANSI C asctime()\nformat <br>\n&quot;Tuesday, 08-Feb-94 14:15:29 GMT&quot; -- old rfc850\nHTTP format <br>\n&quot;Tuesday, 08-Feb-1994 14:15:29 GMT&quot; -- broken\nrfc850 HTTP format <br>\n&quot;03/Feb/1994:17:03:55 -0700&quot; -- common logfile\nformat <br>\n&quot;09 Feb 1994 22:23:32 GMT&quot; -- HTTP format (no\nweekday) <br>\n&quot;08-Feb-94 14:15:29 GMT&quot; -- rfc850 format (no\nweekday) <br>\n&quot;08-Feb-1994 14:15:29 GMT&quot; -- broken rfc850 format\n(no weekday) <br>\n&quot;1994-02-03 14:15:29 -0100&quot; -- ISO 8601 format\n<br>\n&quot;1994-02-03 14:15:29&quot; -- zone is optional <br>\n&quot;1994-02-03&quot; -- only date <br>\n&quot;1994-02-03T14:15:29&quot; -- Use T as separator <br>\n&quot;19940203T141529Z&quot; -- ISO 8601 compact format <br>\n&quot;19940203&quot; -- only date <br>\n&quot;08-Feb-94&quot; -- old rfc850 HTTP format (no weekday,\nno time) <br>\n&quot;08-Feb-1994&quot; -- broken rfc850 HTTP format (no\nweekday, no time) <br>\n&quot;09 Feb 1994&quot; -- proposed new HTTP format (no\nweekday, no time) <br>\n&quot;03/Feb/1994&quot; -- common logfile format (no time,\nno offset) <br>\n&quot;Feb 3 1994&quot; -- Unix 'ls -l' format <br>\n&quot;Feb 3 17:03&quot; -- Unix 'ls -l' format <br>\n&quot;11-15-96 03:52PM&quot; -- Windows 'dir' format</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The parser\nignores leading and trailing whitespace. It also allow the\nseconds to be missing and the month to be numerical in most\nformats.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the year is\nmissing, then we assume that the date is the first matching\ndate <i>before</i> current month. If the year is given with\nonly 2 digits, then <b>parse_date()</b> will select the\ncentury that makes the year closest to the current date.</p>\n\n<p style=\"margin-left:11%;\">time2iso( [$time] )</p>\n\n<p style=\"margin-left:17%;\">Same as <b>time2str()</b>, but\nreturns a &quot;YYYY-MM-DD hh:mm:ss&quot;-formatted string\nrepresenting time in the local time zone.</p>\n\n<p style=\"margin-left:11%;\">time2isoz( [$time] )</p>\n\n<p style=\"margin-left:17%;\">Same as <b>time2str()</b>, but\nreturns a &quot;YYYY-MM-DD hh:mm:ssZ&quot;-formatted string\nrepresenting Universal Time.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;time&quot;\nin perlfunc, Time::Zone</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1995-2019 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}