{"name":"net::dbus::remoteobject","body":"\n\n<h1 align=\"center\">Net::DBus::RemoteObject</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::RemoteObject\n- Access objects provided on the bus</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $service =\n$bus-&gt;get_service(&quot;org.freedesktop.DBus&quot;); <br>\nmy $object =\n$service-&gt;get_object(&quot;/org/freedesktop/DBus&quot;);\n<br>\nprint &quot;Names on the bus {\\n&quot;; <br>\nforeach my $name (sort @{$object-&gt;ListNames}) { <br>\nprint &quot; &quot;, $name, &quot;\\n&quot;; <br>\n} <br>\nprint &quot;}\\n&quot;;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides the <small>API</small> for accessing remote objects\navailable on the bus. It uses the autoloader to fake the\npresence of methods based on the <small>API</small> of the\nremote object. There is also support for setting callbacks\nagainst signals, and accessing properties of the object.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $object =\nNet::DBus::RemoteObject-&gt;new($service, $object_path[,\n<br>\n$interface], \\%params);</p>\n\n<p style=\"margin-left:17%;\">Creates a new handle to a\nremote object. The $service parameter is an instance of the\nNet::DBus::RemoteService method, and $object_path is the\nidentifier of an object exported by this service, for\nexample &quot;/org/freedesktop/DBus&quot;. For remote\nobjects which implement more than one interface it is\npossible to specify an optional name of an interface as the\nthird parameter. This is only really required, however, if\ntwo interfaces in the object provide methods with the same\nname, since introspection data can be used to automatically\nresolve the correct interface to call cases where method\nnames are unique. Rather than using this constructor\ndirectly, it is preferable to use the &quot;get_object&quot;\nmethod on Net::DBus::RemoteService, since this caches\nhandles to remote objects, eliminating unnecessary\nintrospection data lookups.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The %params\nparameter contains extra configuration parameters for the\nobject. Currently a single parameter is supported,\n&quot;timeout&quot; which takes a value in milliseconds to\nuse as the timeout for method calls on the object.</p>\n\n<p style=\"margin-left:11%;\">my $object =\n$object-&gt;as_interface($interface);</p>\n\n<p style=\"margin-left:17%;\">Casts the object to a specific\ninterface, returning a new instance of the\nNet::DBus::RemoteObject specialized to the desired\ninterface. It is only necessary to cast objects to a\nspecific interface, if two interfaces export methods or\nsignals with the same name, or the remote object does not\nsupport introspection.</p>\n\n<p style=\"margin-left:11%;\">my $service =\n$object-&gt;get_service</p>\n\n<p style=\"margin-left:17%;\">Retrieves a handle for the\nremote service on which this object is attached. The\nreturned object is an instance of\nNet::DBus::RemoteService</p>\n\n<p style=\"margin-left:11%;\">my $path =\n$object-&gt;get_object_path</p>\n\n<p style=\"margin-left:17%;\">Retrieves the unique path\nidentifier for this object within the service.</p>\n\n<p style=\"margin-left:11%;\">my $object =\n$object-&gt;get_child_object($subpath, [$interface])</p>\n\n<p style=\"margin-left:17%;\">Retrieves a handle to a child\nof this object, identified by the relative path $subpath.\nThe returned object is an instance of\n&quot;Net::DBus::RemoteObject&quot;. The optional $interface\nparameter can be used to immediately cast the object to a\nspecific type.</p>\n\n<p style=\"margin-left:11%;\">my $sigid =\n$object-&gt;connect_to_signal($name, $coderef);</p>\n\n<p style=\"margin-left:17%;\">Connects a callback to a signal\nemitted by the object. The $name parameter is the name of\nthe signal within the object, and $coderef is a reference to\nan anonymous subroutine. When the signal $name is emitted by\nthe remote object, the subroutine $coderef will be invoked,\nand passed the parameters from the signal. A unique $sigid\nwill be returned, which can be later passed to\n&quot;disconnect_from_signal&quot; to remove the handler</p>\n\n\n<p style=\"margin-left:11%;\">$object-&gt;disconnect_from_signal($name,\n$sigid);</p>\n\n<p style=\"margin-left:17%;\">Disconnects from a signal\nemitted by the object. The $name parameter is the name of\nthe signal within the object. The $sigid must be the unique\nsignal handler <small>ID</small> returned by a previous\n&quot;connect_to_signal&quot; method call.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel Berrange\n&lt;dan@berrange.com&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copright (C)\n2004-2011, Daniel Berrange.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::RemoteService,\nNet::DBus::Object, Net::DBus::Annotation</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}