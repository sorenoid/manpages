{"name":"io::socket::ssl::utils","body":"\n\n<h1 align=\"center\">IO::Socket::SSL::Utils</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">IO::Socket::SSL::Utils\n-- loading, storing, creating certificates and keys</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nIO::Socket::SSL::Utils; <br>\n$cert = PEM_file2cert('cert.pem'); # load certificate from\nfile <br>\nmy $hash = CERT_asHash($cert); # get details from\ncertificate <br>\nPEM_cert2file('cert.pem',$cert); # write certificate to file\n<br>\nCERT_free($cert); # free memory within OpenSSL <br>\n@certs = PEM_file2certs('chain.pem'); # load multiple\ncertificates from file <br>\nPEM_certs2file('chain.pem', @certs); # write multiple\ncertificates to file <br>\nCERT_free(@certs); # free memory for all within OpenSSL <br>\nmy $cert = PEM_string2cert($pem); # load certificate from\nPEM string <br>\n$pem = PEM_cert2string($cert); # convert certificate to PEM\nstring <br>\n$key = KEY_create_rsa(2048); # create new 2048-bit RSA key\n<br>\nPEM_string2file($key,&quot;key.pem&quot;); # and write it to\nfile <br>\nKEY_free($key); # free memory within OpenSSL</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides various utility functions to work with certificates\nand private keys, shielding some of the complexity of the\nunderlying Net::SSLeay and OpenSSL.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Functions converting between\nstring or file and certificates and keys. They croak if the\noperation cannot be completed.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">PEM_file2cert(file) -&gt; cert\n<br>\nPEM_cert2file(cert,file) <br>\nPEM_file2certs(file) -&gt; @certs <br>\nPEM_certs2file(file,@certs) <br>\nPEM_string2cert(string) -&gt; cert <br>\nPEM_cert2string(cert) -&gt; string <br>\nPEM_file2key(file) -&gt; key <br>\nPEM_key2file(key,file) <br>\nPEM_string2key(string) -&gt; key <br>\nPEM_key2string(key) -&gt; string</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Functions for cleaning up. Each loaded or created cert\nand key must be freed to not leak memory.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">CERT_free(@certs) <br>\nKEY_free(@keys)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p>KEY_create_rsa(bits) -&gt; key</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates an\n<small>RSA</small> key pair, bits defaults to 2048.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">KEY_create_ec(curve) -&gt;\nkey</p> </td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates an\n<small>EC</small> key, curve defaults to\n&quot;prime256v1&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"60%\">\n\n\n<p style=\"margin-top: 1em\">CERT_asHash(cert,[digest_algo])\n-&gt; hash</p></td>\n<td width=\"23%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Extracts the\ninformation from the certificate into a hash and uses the\ngiven digest_algo (default: <small>SHA-256</small> ) to\ndetermine digest of pubkey and cert. The resulting hash\ncontains:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">subject</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">Hash with the parts of the\nsubject, e.g. commonName, countryName, organizationName,\nstateOrProvinceName, localityName. If there are multiple\nvalues for any of these parts the hash value will be an\narray ref with the values in order instead of just a\nscalar.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">subjectAltNames</p>\n\n<p style=\"margin-left:29%;\">Array with list of alternative\nnames. Each entry in the list is of\n&quot;[type,value]&quot;, where &quot;type&quot; can be\n<small>OTHERNAME, EMAIL, DNS, X400, DIRNAME, EDIPARTY, URI,\nIP</small> or <small>RID.</small></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"9%\">\n\n\n<p>issuer</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>Hash with the parts of the issuer, e.g. commonName,\ncountryName, organizationName, stateOrProvinceName,\nlocalityName. If there are multiple values for any of these\nparts the hash value will be an array ref with the values in\norder instead of just a scalar.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">not_before, not_after</p>\n\n<p style=\"margin-left:29%;\">The time frame, where the\ncertificate is valid, as time_t, e.g. can be converted with\nlocaltime or similar functions.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p>serial</p></td>\n<td width=\"1%\"></td>\n<td width=\"53%\">\n\n\n<p>The serial number</p></td>\n<td width=\"18%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p>crl_uri</p></td>\n<td width=\"1%\"></td>\n<td width=\"53%\">\n\n\n<p>List of URIs for <small>CRL</small> distribution.</p></td>\n<td width=\"18%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">ocsp_uri</p>\n\n<p style=\"margin-left:29%;\">List of URIs for revocation\nchecking using <small>OCSP.</small></p>\n\n<p style=\"margin-left:17%;\">keyusage</p>\n\n<p style=\"margin-left:29%;\">List of keyUsage information in\nthe certificate.</p>\n\n<p style=\"margin-left:17%;\">extkeyusage</p>\n\n<p style=\"margin-left:29%;\">List of extended key usage\ninformation from the certificate. Each entry in this list\nconsists of a hash with oid, nid, ln and sn.</p>\n\n<p style=\"margin-left:17%;\">pubkey_digest_xxx</p>\n\n<p style=\"margin-left:29%;\">Binary digest of the pubkey\nusing the given digest algorithm, e.g. pubkey_digest_sha256\nif (the default) <small>SHA-256</small> was used.</p>\n\n<p style=\"margin-left:17%;\">x509_digest_xxx</p>\n\n<p style=\"margin-left:29%;\">Binary digest of the X.509\ncertificate using the given digest algorithm, e.g.\nx509_digest_sha256 if (the default) <small>SHA-256</small>\nwas used.</p>\n\n<p style=\"margin-left:17%;\">fingerprint_xxx</p>\n\n<p style=\"margin-left:29%;\">Fingerprint of the certificate\nusing the given digest algorithm, e.g. fingerprint_sha256 if\n(the default) <small>SHA-256</small> was used. Contrary to\ndigest_* this is an <small>ASCII</small> string with a list\nif hexadecimal numbers, e.g.\n&quot;73:59:75:5C:6D...&quot;.</p>\n\n<p style=\"margin-left:17%;\">signature_alg</p>\n\n<p style=\"margin-left:29%;\">Algorithm used to sign\ncertificate, e.g. &quot;sha256WithRSAEncryption&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"17%\">\n\n\n<p>ext</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>List of extensions. Each entry in the list is a hash\nwith oid, nid, sn, critical flag (boolean) and data (string\nrepresentation given by X509V3_EXT_print).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"17%\">\n\n\n<p>version</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>Certificate version, usually 2 (x509v3)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"17%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">CERT_create(hash)\n-&gt; (cert,key)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a\ncertificate based on the given hash. If the issuer is not\nspecified the certificate will be self-signed. The following\nkeys can be given:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">subject</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">Hash with the parts of the\nsubject, e.g. commonName, countryName, ... as described in\n&quot;CERT_asHash&quot;. Default points to\nIO::Socket::SSL.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">not_before</p>\n\n<p style=\"margin-left:29%;\">A time_t value when the\ncertificate starts to be valid. Defaults to current\ntime.</p>\n\n<p style=\"margin-left:17%;\">not_after</p>\n\n<p style=\"margin-left:29%;\">A time_t value when the\ncertificate ends to be valid. Defaults to current time plus\none 365 days.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p>serial</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>The serial number. If not given a random number will be\nused.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p>version</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>The version of the certificate, default 2 (x509v3).</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\"><small>CA</small>\ntrue|false</p>\n\n<p style=\"margin-left:29%;\">If true declare certificate as\n<small>CA,</small> defaults to false.</p>\n\n<p style=\"margin-left:17%;\">purpose string|array|hash</p>\n\n<p style=\"margin-left:29%;\">Set the purpose of the\ncertificate. The different purposes can be given as a string\nseparated by non-word character, as array or hash. With\nstring or array each purpose can be prefixed with\n&rsquo;+&rsquo; (enable) or &rsquo;-&rsquo; (disable) and\nsame can be done with the value when given as a hash. By\ndefault enabling the purpose is assumed.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">If the\n<small>CA</small> option is given and true the defaults\n&quot;ca,sslca,emailca,objca&quot; are assumed, but can be\noverridden with explicit purpose. If the <small>CA</small>\noption is given and false the defaults\n&quot;server,client&quot; are assumed. If no\n<small>CA</small> option and no purpose is given it defaults\nto &quot;server,client&quot;.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">Purpose affects\nbasicConstraints, keyUsage, extKeyUsage and\nnetscapeCertType. The following purposes are defined (case\nis not important):</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">client <br>\nserver <br>\nemail <br>\nobjsign <br>\nCA <br>\nsslCA <br>\nemailCA <br>\nobjCA <br>\nemailProtection <br>\ncodeSigning <br>\ntimeStamping <br>\ndigitalSignature <br>\nnonRepudiation <br>\nkeyEncipherment <br>\ndataEncipherment <br>\nkeyAgreement <br>\nkeyCertSign <br>\ncRLSign <br>\nencipherOnly <br>\ndecipherOnly</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">Examples:</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\"># root-CA for\nSSL certificates <br>\npurpose =&gt; 'sslCA' # or CA =&gt; 1 <br>\n# server certificate and CA (typically self-signed) <br>\npurpose =&gt; 'sslCA,server' <br>\n# client certificate <br>\npurpose =&gt; 'client',</p>\n\n<p style=\"margin-left:17%;\">ext [{ sn =&gt; .., data =&gt;\n... }, ... ]</p>\n\n<p style=\"margin-left:29%;\">List of extensions. The type of\nthe extension can be specified as name with &quot;sn&quot;\nor as <small>NID</small> with &quot;nid&quot; and the data\nwith &quot;data&quot;. These data must be in the same syntax\nas expected within openssl.cnf, e.g. something like\n&quot;OCSP;URI=http://...&quot;. Additionally the critical\nflag can be set with &quot;critical =&quot; 1&gt;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p>key key</p></td>\n<td width=\"1%\"></td>\n<td width=\"71%\">\n\n\n<p>use given key as key for certificate, otherwise a new\none will be generated and returned</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">issuer_cert cert</p>\n\n<p style=\"margin-left:29%;\">set issuer for new\ncertificate</p>\n\n<p style=\"margin-left:17%;\">issuer_key key</p>\n\n<p style=\"margin-left:29%;\">sign new certificate with given\nkey</p>\n\n<p style=\"margin-left:17%;\">issuer [ cert, key ]</p>\n\n<p style=\"margin-left:29%;\">Instead of giving issuer_key\nand issuer_cert as separate arguments they can be given both\ntogether.</p>\n\n<p style=\"margin-left:17%;\">digest algorithm</p>\n\n<p style=\"margin-left:29%;\">specify the algorithm used to\nsign the certificate, default <small>SHA-256.</small></p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Steffen\nUllrich</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":3}