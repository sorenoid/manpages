{"name":"btree","description":"btree - btree\ndatabase access method","body":"\n\n<h1 align=\"center\">BTREE</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">btree - btree\ndatabase access method</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;db.h&gt;</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><i>Note\nwell</i></b>: This page documents interfaces provided in\nglibc up until version 2.1. Since version 2.2, glibc no\nlonger provides these interfaces. Probably, you are looking\nfor the APIs provided by the <i>libdb</i> library\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The routine\n<a href=\"https://man.page/3/dbopen\">dbopen(3)</a> is the library interface to database files.\nOne of the supported file formats is btree files. The\ngeneral description of the database access methods is in\n<a href=\"https://man.page/3/dbopen\">dbopen(3)</a>, this manual page describes only the\nbtree-specific information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The btree data\nstructure is a sorted, balanced tree structure storing\nassociated key/data pairs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The btree\naccess-method-specific data structure provided to\n<a href=\"https://man.page/3/dbopen\">dbopen(3)</a> is defined in the <i>&lt;db.h&gt;</i>\ninclude file as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nunsigned long flags; <br>\nunsigned int cachesize; <br>\nint maxkeypage; <br>\nint minkeypage; <br>\nunsigned int psize; <br>\nint (*compare)(const DBT *key1, const DBT *key2); <br>\nsize_t (*prefix)(const DBT *key1, const DBT *key2); <br>\nint lorder; <br>\n} BTREEINFO;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The elements of\nthis structure are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>flags</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The flag value is specified by ORing any of the\nfollowing values:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>R_DUP</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">Permit duplicate keys in the\ntree, that is, permit insertion if the key to be inserted\nalready exists in the tree. The default behavior, as\ndescribed in <a href=\"https://man.page/3/dbopen\">dbopen(3)</a>, is to overwrite a matching\nkey when inserting a new key or to fail if the\n<b>R_NOOVERWRITE</b> flag is specified. The <b>R_DUP</b>\nflag is overridden by the <b>R_NOOVERWRITE</b> flag, and if\nthe <b>R_NOOVERWRITE</b> flag is specified, attempts to\ninsert duplicate keys into the tree will fail.</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">If the database\ncontains duplicate keys, the order of retrieval of key/data\npairs is undefined if the <i>get</i> routine is used,\nhowever, <i>seq</i> routine calls with the <b>R_CURSOR</b>\nflag set will always return the logical &quot;first&quot; of\nany group of duplicate keys.</p>\n\n<p style=\"margin-left:11%;\"><i>cachesize</i></p>\n\n<p style=\"margin-left:22%;\">A suggested maximum size (in\nbytes) of the memory cache. This value is <i>only</i>\nadvisory, and the access method will allocate more memory\nrather than fail. Since every search examines the root page\nof the tree, caching the most recently used pages\nsubstantially improves access time. In addition, physical\nwrites are delayed as long as possible, so a moderate cache\ncan reduce the number of I/O operations significantly.\nObviously, using a cache increases (but only increases) the\nlikelihood of corruption or lost data if the system crashes\nwhile a tree is being modified. If <i>cachesize</i> is 0 (no\nsize is specified), a default cache is used.</p>\n\n<p style=\"margin-left:11%;\"><i>maxkeypage</i></p>\n\n<p style=\"margin-left:22%;\">The maximum number of keys\nwhich will be stored on any single page. Not currently\nimplemented.</p>\n\n<p style=\"margin-left:11%;\"><i>minkeypage</i></p>\n\n<p style=\"margin-left:22%;\">The minimum number of keys\nwhich will be stored on any single page. This value is used\nto determine which keys will be stored on overflow pages,\nthat is, if a key or data item is longer than the pagesize\ndivided by the minkeypage value, it will be stored on\noverflow pages instead of in the page itself. If\n<i>minkeypage</i> is 0 (no minimum number of keys is\nspecified), a value of 2 is used.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>psize</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Page size is the size (in bytes) of the pages used for\nnodes in the tree. The minimum page size is 512 bytes and\nthe maximum page size is 64&nbsp;KiB. If <i>psize</i> is 0\n(no page size is specified), a page size is chosen based on\nthe underlying filesystem I/O block size.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>compare</i></p>\n\n<p style=\"margin-left:22%;\">Compare is the key comparison\nfunction. It must return an integer less than, equal to, or\ngreater than zero if the first key argument is considered to\nbe respectively less than, equal to, or greater than the\nsecond key argument. The same comparison function must be\nused on a given tree every time it is opened. If\n<i>compare</i> is NULL (no comparison function is\nspecified), the keys are compared lexically, with shorter\nkeys considered less than longer keys.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>prefix</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Prefix is the prefix comparison function. If specified,\nthis routine must return the number of bytes of the second\nkey argument which are necessary to determine that it is\ngreater than the first key argument. If the keys are equal,\nthe key length should be returned. Note, the usefulness of\nthis routine is very data-dependent, but, in some data sets\ncan produce significantly reduced tree sizes and search\ntimes. If <i>prefix</i> is NULL (no prefix function is\nspecified), <i>and</i> no comparison function is specified,\na default lexical comparison routine is used. If\n<i>prefix</i> is NULL and a comparison routine is specified,\nno prefix comparison is done.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>lorder</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The byte order for integers in the stored database\nmetadata. The number should represent the order as an\ninteger; for example, big endian order would be the number\n4,321. If <i>lorder</i> is 0 (no order is specified), the\ncurrent host order is used.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the file\nalready exists (and the <b>O_TRUNC</b> flag is not\nspecified), the values specified for the arguments\n<i>flags</i>, <i>lorder</i>, and <i>psize</i> are ignored in\nfavor of the values used when the tree was created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Forward\nsequential scans of a tree are from the least key to the\ngreatest.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Space freed up\nby deleting key/data pairs from the tree is never reclaimed,\nalthough it is normally made available for reuse. This means\nthat the btree storage structure is grow-only. The only\nsolutions are to avoid excessive deletions, or to create a\nfresh tree periodically from a scan of an existing one.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Searches,\ninsertions, and deletions in a btree will all complete in O\nlg base N where base is the average fill factor. Often,\ninserting ordered data into btrees results in a low fill\nfactor. This implementation has been modified to make\nordered insertion the best case, resulting in a much better\nthan normal page fill factor.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>btree</i> access method routines may fail and set\n<i>errno</i> for any of the errors specified for the library\nroutine <a href=\"https://man.page/3/dbopen\">dbopen(3)</a>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only big and\nlittle endian byte order is supported.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/dbopen\">dbopen(3)</a>,\n<a href=\"https://man.page/3/hash\">hash(3)</a>, <a href=\"https://man.page/3/mpool\">mpool(3)</a>, <a href=\"https://man.page/3/recno\">recno(3)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>The\nUbiquitous B-tree</i>, Douglas Comer, ACM Comput. Surv. 11,\n2 (June 1979), 121-138.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Prefix\nB-trees</i>, Bayer and Unterauer, ACM Transactions on\nDatabase Systems, Vol. 2, 1 (March 1977), 11-26.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>The Art of\nComputer Programming Vol. 3: Sorting and Searching</i>, D.E.\nKnuth, 1968, pp 471-480.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}