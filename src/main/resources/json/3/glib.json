{"name":"glib","body":"\n\n<h1 align=\"center\">Glib</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib - Perl\nwrappers for the GLib utility and Object libraries</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Glib;</p>\n\n<h2>ABSTRACT\n<a name=\"ABSTRACT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides perl access to GLib and GLib&rsquo;s GObject\nlibraries. GLib is a portability and utility library;\nGObject provides a generic type system with inheritance and\na powerful signal system. Together these libraries are used\nas the foundation for many of the libraries that make up the\nGnome environment, and are used in many unrelated\nprojects.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This wrapper\nattempts to provide a perlish interface while remaining as\ntrue as possible to the underlying C <small>API,</small> so\nthat any reference materials you can find on using GLib may\nstill apply to using the libraries from perl. This module\nalso provides facilities for creating wrappers for other\nGObject-based libraries. The &quot; <small>SEE\nALSO&quot;</small> section contains pointers to all sorts of\ngood information.</p>\n\n<h2>PERL VERSUS C\n<a name=\"PERL VERSUS C\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GLib provides\nto C programs many of the same facilities Perl offers\nnatively. Where GLib&rsquo;s functionality overlaps\nPerl&rsquo;s, Perl&rsquo;s is favored. Some concepts have\nbeen eliminated entirely, as Perl is a higher-level language\nthan C. In other instances we&rsquo;ve had to add or change\nAPIs to make sense in Perl. Here&rsquo;s a quick\nrun-down:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Perl Already\nDoes That</b> <br>\nThe GLib types GList (a doubly-linked list), GSList\n(singly-linked list), GHashTable, GArray, etc have all been\nreplaced by native Perl datatypes. In fact, many functions\nwhich take GLists or arrays simply accept lists on the Perl\nstack. For the most part, GIOChannels are no more functional\nthan Perl file handles, so you won&rsquo;t see any\nGIOChannels. GClosures are not visible at the Perl level,\nbecause Perl code references do the same thing. Just about\nany function taking either a C function pointer or a\nGClosure will accept a code reference in Perl. (In fact, you\ncan probably get away with just a subroutine name in many\nspots, provided you aren&rsquo;t using strict subs.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Don&rsquo;t\nWorry About That</b> <br>\nSome concepts have been eliminated; you need never worry\nabout reference-counting on GObjects or having to free\nGBoxed structures. Perl is a garbage-collected language, and\nwe&rsquo;ve put a lot of work into making the bindings take\ncare of memory for you in a way that feels natural to a Perl\ndeveloper. You won&rsquo;t see GValues in Perl (that&rsquo;s\njust a C structure with Perl scalar envy, anyway).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>This Is Now\nThat</b> <br>\nOther GLib concepts have been converted to an analogous Perl\nconcept.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The GType id\nwill never be seen in Perl, as the package name serves that\npurpose. Several packages corresponding to the GTypes of the\nfundamental types have been registered for you:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">G_TYPE_STRING\nGlib::String <br>\nG_TYPE_INT Glib::Int <br>\nG_TYPE_UINT Glib::UInt <br>\nG_TYPE_DOUBLE Glib::Double <br>\nG_TYPE_BOOLEAN Glib::Boolean</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The remaining\nfundamentals (char/uchar, short, float, etc) are also\nregistered so that we can properly interact with properties\nof C objects, but perl really only uses ints, uints, and\ndoubles. Oh, and we created a GBoxed type for Perl scalars\nso you can use scalars where any boxed type would be allowed\n(e.g. GtkTreeModel columns):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Scalar</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Functions that\ncan return false and set a GError in C raise an exception in\nPerl, using an exception object based on the GError for $@;\nsee Glib::Error. Trapping exceptions in signals is a sticky\nissue, so they get their own section; see\n<small>EXCEPTIONS</small> .</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Enumerations\nand flags are treated as strings and arrays of strings,\nrespectively. GLib provides a way to register nicknames for\nenumeration values, and the Perl bindings use these\nnicknames for the real values, so that we never have to deal\nwith numbers in Perl. This can get a little cumbersome for\nbitfields, but it&rsquo;s very nice when you forget a flag\nvalue, as the bindings will tell you what values are\naccepted when you pass something invalid. Also, the bindings\nconsider the - and _ characters to be equivalent, so that\nsignal and property names can be properly stringified by the\n=&gt; operator. For example, the following are\nequivalent:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># property\nfoo-matic of type FooType, using the <br>\n# value FOO_SOMETHING_COOL. its nickname would be <br>\n# 'something-cool'. you may use either the full <br>\n# name or the nickname when supplying values to perl. <br>\n$object-&gt;set ('foo-matic', 'FOO_SOMETHING_COOL'); <br>\n$object-&gt;set ('foo_matic', 'something_cool'); <br>\n$object-&gt;set (foo_matic =&gt; 'something-cool');</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Beware that\nPerl will always return to you the nickname form, with the\ndash.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Flags have some\nadditional magic abilities in the form of overloaded\noperators:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">+ or | union of\ntwo flagsets (&quot;add&quot;) <br>\n- difference of two flagsets (&quot;sub&quot;,\n&quot;remove&quot;) <br>\n* or &amp; intersection of two bitsets (&quot;and&quot;)\n<br>\n/ or ^ symmetric difference (&quot;xor&quot;, you will\nrarely need this) <br>\n&gt;= contains-operator (&quot;is the left set a superset of\nthe right set?&quot;) <br>\n== equality</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\nflags in boolean context indicate whether they are empty or\nnot, which allows you to write common operations\nnaturally:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$widget-&gt;set_events\n($widget-&gt;get_events - &quot;motion_notify_mask&quot;);\n<br>\n$widget-&gt;set_events ($widget-&gt;get_events -\n[&quot;motion_notify_mask&quot;, <br>\n&quot;button_press_mask&quot;]); <br>\n# shift pressed (both work, it's a matter of taste) <br>\nif ($event-&gt;state &gt;= &quot;shift-mask&quot;) { ...\n<br>\nif ($event-&gt;state * &quot;shift-mask&quot;) { ... <br>\n# either shift OR control pressed? <br>\nif ($event-&gt;state * [&quot;shift-mask&quot;,\n&quot;control-mask&quot;]) { ... <br>\n# both shift AND control pressed? <br>\nif ($event-&gt;state &gt;= [&quot;shift-mask&quot;,\n&quot;control-mask&quot;]) { ...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general,\n&quot;+&quot; and &quot;-&quot; work as expected to add or\nremove flags. To test whether <i>any</i> bits are set in a\nmask, you use &quot;$mask * ...&quot;, and to test whether\n<i>all</i> bits are set in a mask, you use &quot;$mask &gt;=\n...&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\ndereferenced as an array @$flags or\n&quot;$flags-&gt;[...]&quot;, you can access the flag values\ndirectly as strings (but you are not allowed to modify the\narray), and when stringified &quot;$flags&quot; a flags\nvalue will output a human-readable version of its\ncontents.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>It&rsquo;s\nAll the Same</b> <br>\nFor the most part, the remaining bits of GLib are unchanged.\nGMainLoop is now Glib::MainLoop, GObject is now\nGlib::Object, GBoxed is now Glib::Boxed, etc.</p>\n\n<h2>FILENAMES, URIS AND ENCODINGS\n<a name=\"FILENAMES, URIS AND ENCODINGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Perl knows two\ndatatypes, unicode text and binary bytes. Filenames on a\nsystem that doesn&rsquo;t use a utf-8 locale are often\nstored in a local encoding (&quot;binary bytes&quot;). Gtk+\nand descendants, however, internally work in unicode most of\nthe time, so when feeding a filename into a GLib/Gtk+\nfunction that expects a filename, you first need to convert\nit from the local encoding to unicode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This involves\nsome elaborate guessing, which perl currently avoids, but\nGLib and Gtk+ do. As an exception, some Gtk+ functions want\na filename in local encoding, but the perl interface usually\nworks around this by automatically converting it for\nyou.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In short:\nEverything should be in unicode on the perl level.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions expose the conversion algorithm that GLib\nuses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare only necessary when you want to use perl functions to\nmanage filenames returned by a GLib/Gtk+ function, or when\nyou feed filenames into GLib/Gtk+ functions that have their\nsource outside your program (e.g. commandline arguments,\nreaddir results etc.).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare available as exports by request (see\n&quot;Exports&quot;), and also support method invocation\nsyntax for pathological consistency with the\n<small>OO</small> syntax of the rest of the bindings. <br>\n$filename = filename_to_unicode $filename_in_local_encoding\n<br>\n$filename = Glib-&gt;filename_to_unicode\n($filename_in_local_encoding)</p>\n\n<p style=\"margin-left:17%;\">Convert a perl string that\nsupposedly contains a filename in local encoding into a\nfilename represented as unicode, the same way that GLib does\nit internally.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$gtkfilesel-&gt;set_filename\n(filename_to_unicode $ARGV[1]);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nwill <b>croak()</b> if the conversion cannot be made, e.g.,\nbecause the utf-8 is invalid.</p>\n\n<p style=\"margin-left:11%;\">$filename_in_local_encoding =\nfilename_from_unicode $filename <br>\n$filename_in_local_encoding = Glib-&gt;filename_from_unicode\n($filename)</p>\n\n<p style=\"margin-left:17%;\">Converts a perl string\ncontaining a filename into a filename in the local encoding\nin the same way GLib does it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">open MY,\n&quot;&lt;&quot;, filename_from_unicode\n$gtkfilesel-&gt;get_filename;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It might be\nuseful to know that perl currently has no policy at all\nregarding filename issues, if your scalar happens to be in\nutf-8 internally it will use utf-8, if it happens to be\nstored as bytes, it will use it as-is.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When dealing\nwith filenames that you need to display, there is a much\neasier way, as of Glib 1.120 and glib 2.6.0: <br>\n$uft8_string = filename_display_name ($filename) <br>\n$uft8_string = filename_display_basename ($filename)</p>\n\n<p style=\"margin-left:17%;\">Given a <i>$filename</i> in\nfilename encoding, return the filename, or just the\nfile&rsquo;s basename, in utf-8. Unlike the other functions\ndescribed above, this one is guaranteed to return valid\nutf-8, but the conversion is not necessarily reversible.\nThese functions are intended to be used for failsafe display\nof filenames, for example in gtk+ labels.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Since glib 2.6,\nGlib 1.12</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nconvert filenames to and from <small>URI</small> encoding.\n(See also URI::file.) <br>\n$string = filename_to_uri ($filename, $hostname) <br>\n$string = Glib-&gt;filename_to_uri ($filename,\n$hostname)</p>\n\n<p style=\"margin-left:17%;\">Return a &quot;file://&quot;\nschema <small>URI</small> for a filename. Unsafe and\nnon-ascii chars in $filename are escaped with\n<small>URI</small> &quot;%&quot; forms.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$filename must\nbe an absolute path as a byte string in local filesystem\nencoding. $hostname is a utf-8 string, or empty or\n&quot;undef&quot; for no host specified. For example,</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">filename_to_uri\n('/my/x%y/&lt;dir&gt;/foo.html', undef); <br>\n# returns 'file:///my/x%25y/%3Cdir%3E/foo.html'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If $filename is\na relative path or $hostname doesn&rsquo;t look like a\nhostname then &quot;filename_to_uri&quot; croaks with a\n&quot;Glib::Error&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When using the\nclass style &quot;Glib-&gt;filename_to_uri&quot; remember\nthat the $hostname argument is mandatory. If you forget then\nit looks like a 2-argument call with filename of\n&quot;Glib&quot; and hostname of what you meant to be the\nfilename.</p>\n\n<p style=\"margin-left:11%;\">$filename = filename_from_uri\n($uri) <br>\n($filename, $hostname) = filename_from_uri ($uri)</p>\n\n<p style=\"margin-left:17%;\">Extract the filename and\nhostname from a &quot;file://&quot; schema\n<small>URI.</small> In scalar context just the filename is\nreturned, in array context both filename and hostname are\nreturned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The filename\nreturned is bytes in the local filesystem encoding and with\nthe <small>OS</small> path separator character. The hostname\nreturned is utf-8. For example,</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">($f,$h) =\nfilename_from_uri ('file://foo.com/r%26b/bar.html'); <br>\n# returns '/r&amp;b/bar.html' and 'foo.com' on Unix</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If $uri is not\na &quot;file:&quot;, or is mal-formed, or the hostname part\ndoesn&rsquo;t look like a host name then\n&quot;filename_from_uri&quot; croaks with a\n&quot;Glib::Error&quot;.</p>\n\n<h2>EXCEPTIONS\n<a name=\"EXCEPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The C language\ndoesn&rsquo;t support exceptions; GLib is a C library, and\nof course doesn&rsquo;t support exceptions either. In Perl,\nwe use die and eval to raise and trap exceptions as a rather\ncommon practice. So, the bindings have to work a little\nblack magic behind the scenes to keep GLib from exploding\nwhen the Perl program uses exceptions. Unfortunately, a\nlittle of this magic has to leak out to where you can see it\nat the Perl level.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Signal and\nevent handlers are run in an eval context; if an exception\noccurs in such a handler and you don&rsquo;t catch it, Perl\nwill report that an error occurred, and then go on about its\nbusiness like nothing happened.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You may\nregister subroutines as exception handlers, to be called\nwhen such an exception is trapped. Another function removes\nthem for you.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$tag =\nGlib-&gt;install_exception_handler (\\&amp;my_handler); <br>\nGlib-&gt;remove_exception_handler ($tag);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The exception\nhandler will get a fresh copy of the $@ of the offending\nexception on the argument stack, and is expected to return\nnon-zero if the handler is to remain installed. If it\nreturns false, the handler will be removed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub my_handler\n{ <br>\nif ($_[0] =~ m/ftang quisinart/) { <br>\nclean_up_after_ftang (); <br>\n} <br>\n1; # live to fight another day <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can\nregister as many handlers as you like; they will all run\nindependently.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An important\nthing to remember is that exceptions do not cross main\nloops. In fact, exceptions are completely distinct from main\nloops. If you need to quit a main loop when an exception\noccurs, install a handler that quits the main loop, but also\nask yourself if you are using exceptions for flow control or\nexception handling.</p>\n\n<h2>LOG MESSAGES\n<a name=\"LOG MESSAGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GLib&rsquo;s\ng_log function provides a flexible mechanism for reporting\nmessages, and most GLib-based C libraries use this mechanism\nfor warnings, assertions, critical messages, etc. The Perl\nbindings offer a mechanism for routing these messages\nthrough Perl&rsquo;s native system, <b>warn()</b> and\n<b>die()</b>. Extensions should register the log domains\nthey wrap for this to happen fluidly. [ <small>FIXME</small>\nsay more here]</p>\n\n<h2>64 BIT INTEGERS\n<a name=\"64 BIT INTEGERS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since\nperl&rsquo;s integer data type can only hold 32 bit values\non all 32 bit machines and even on some 64 bit machines,\nGlib converts 64 bit integers to and from strings if\nnecessary. These strings can then be used to feed one of the\nvarious big integer modules. Make sure you don&rsquo;t let\nyour strings get into numerical context before passing them\ninto a Glib function because in this case, perl will convert\nthe number to scientific notation which at this point is not\nunderstood by Glib&rsquo;s converters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here is an\noverview of what big integer modules are available. First of\nall, there&rsquo;s Math::BigInt. It has everything you will\never need, but its pure-Perl implementation is also rather\nslow. There are multiple ways around this, though. <br>\nMath::BigInt::FastCalc</p>\n\n<p style=\"margin-left:17%;\">Math::BigInt::FastCalc can help\navoid the glacial speed of vanilla Math::BigInt::Calc.\nRecent versions of Math::BigInt will automatically use\nMath::BigInt::FastCalc in place of Math::BigInt::Calc when\navailable. Other options include Math::BigInt::GMP or\nMath::BigInt::Pari, which however have much larger\ndependencies.</p>\n\n<p style=\"margin-left:11%;\">Math::BigInt::Lite</p>\n\n<p style=\"margin-left:17%;\">Then there&rsquo;s\nMath::BigInt::Lite, which uses native Perl integer\noperations as long as Perl integers have sufficient range,\nand upgrades itself to Math::BigInt when Perl integers would\noverflow. This must be used in place of Math::BigInt.</p>\n\n<p style=\"margin-left:11%;\">bigint / bignum / bigfloat</p>\n\n<p style=\"margin-left:17%;\">Finally, there&rsquo;s the\nbigint/bignum/bigfloat pragmata, which automatically load\nthe corresponding Math:: modules and which will autobox\nconstants. bignum/bigint will automatically use\nMath::BigInt::Lite if it&rsquo;s available.</p>\n\n<h2>EXPORTS\n<a name=\"EXPORTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the most\npart, gtk2-perl avoids exporting things. Nothing is exported\nby default, but some functions and constants in Glib are\navailable by request; you can also get all of them with the\nexport tag &quot;all&quot;. <br>\nTag: constants</p>\n\n<p style=\"margin-left:17%;\">TRUE <br>\nFALSE <br>\nSOURCE_CONTINUE <br>\nSOURCE_REMOVE <br>\nG_PRIORITY_HIGH <br>\nG_PRIORITY_DEFAULT <br>\nG_PRIORITY_HIGH_IDLE <br>\nG_PRIORITY_DEFAULT_IDLE <br>\nG_PRIORITY_LOW <br>\nG_PARAM_READWRITE</p>\n\n<p style=\"margin-left:11%;\">Tag: functions</p>\n\n<p style=\"margin-left:17%;\">filename_from_unicode <br>\nfilename_to_unicode <br>\nfilename_from_uri <br>\nfilename_to_uri <br>\nfilename_display_basename <br>\nfilename_display_name</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object::Subclass\nexplains how to create your own gobject subclasses in\nPerl.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::index\nlists the automatically-generated <small>API</small>\nreference for the various packages in Glib.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\nthe basis for the Gtk2 module, so most of the references\nyou&rsquo;ll be able to find about this one are tied to that\none. The perl interface aims to be very simply related to\nthe C <small>API,</small> so see the C <small>API</small>\nreference documentation:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">GLib -\nhttp://developer.gnome.org/doc/API/2.0/glib/ <br>\nGObject -\nhttp://developer.gnome.org/doc/API/2.0/gobject/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nserves as the foundation for any module which needs to bind\nGLib-based C libraries to perl.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::devel -\nBinding developer's overview of Glib's internals <br>\nGlib::xsapi - internal API reference for GPerl <br>\nGlib::ParseXSDoc - extract API docs from xs sources. <br>\nGlib::GenPod - turn the output of Glib::ParseXSDoc into POD\n<br>\nGlib::MakeHelper - Makefile.PL utilities for Glib-based\nextensions <br>\nYet another document, available separately, ties it all\ntogether: <br>\n\nhttp://gtk2-perl.sourceforge.net/doc/binding_howto.pod.html</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For gtk2-perl\nitself, see its website at</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">gtk2-perl -\nhttp://gtk2-perl.sourceforge.net/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A mailing list\nexists for discussion of using gtk2-perl and related\nmodules. Archives and subscription information are available\nat http://lists.gnome.org/.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">muppet,\n&lt;scott at asofyet dot org&gt;, who borrowed heavily from\nthe work of G&Atilde;&para;ran Thyni, &lt;gthyni at kirra\ndot net&gt; and Guillaume Cottenceau &lt;gc at mandrakesoft\ndot com&gt; on the first gtk2-perl module, and from the\nsourcecode of the original gtk-perl and pygtk projects. Marc\nLehmann &lt;pcg at goof dot com&gt; did lots of great work\non the magic of making Glib::Object wrapper and subclassing\nwork like they should. Ross McFarland &lt;rwmcfa1 at neces\ndot com&gt; wrote quite a bit of the documentation\ngeneration tools. Torsten Schoenfeld &lt;kaffeetisch at web\ndot de&gt; contributed little patches and tests here and\nthere.</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2003-2011 by muppet and the gtk2-perl team</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the terms of the Lesser General Public License (\n<small>LGPL</small> ). For more information, see\nhttp://www.fsf.org/licenses/lgpl.txt</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#ABSTRACT\">ABSTRACT</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#PERL VERSUS C\">PERL VERSUS C</a>","<a href=\"#FILENAMES, URIS AND ENCODINGS\">FILENAMES, URIS AND ENCODINGS</a>","<a href=\"#EXCEPTIONS\">EXCEPTIONS</a>","<a href=\"#LOG MESSAGES\">LOG MESSAGES</a>","<a href=\"#64 BIT INTEGERS\">64 BIT INTEGERS</a>","<a href=\"#EXPORTS\">EXPORTS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}