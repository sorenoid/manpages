{"name":"dpkg::buildflags","description":"Dpkg::BuildFlags - query build flags","body":"\n\n<h1 align=\"center\">Dpkg::BuildFlags</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::BuildFlags\n- query build flags</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class is\nused by dpkg-buildflags and can be used to query the same\ninformation.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$bf =\nDpkg::BuildFlags-&gt;<b>new()</b></p>\n\n<p style=\"margin-left:17%;\">Create a new Dpkg::BuildFlags\nobject. It will be initialized based on the value of several\nconfiguration files and environment variables.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;<b>load_vendor_defaults()</b></p>\n\n<p style=\"margin-left:17%;\">Reset the flags stored to the\ndefault set provided by the vendor.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;<b>load_system_config()</b></p>\n\n<p style=\"margin-left:17%;\">Update flags from the system\nconfiguration.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;<b>load_user_config()</b></p>\n\n<p style=\"margin-left:17%;\">Update flags from the user\nconfiguration.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;<b>load_environment_config()</b></p>\n\n<p style=\"margin-left:17%;\">Update flags based on user\ndirectives stored in the environment. See\n<a href=\"https://man.page/1/dpkg-buildflags\">dpkg-buildflags(1)</a> for details.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;<b>load_maintainer_config()</b></p>\n\n<p style=\"margin-left:17%;\">Update flags based on\nmaintainer directives stored in the environment. See\n<a href=\"https://man.page/1/dpkg-buildflags\">dpkg-buildflags(1)</a> for details.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;<b>load_config()</b></p>\n\n<p style=\"margin-left:17%;\">Call successively\n<b>load_system_config()</b>, <b>load_user_config()</b>,\n<b>load_environment_config()</b> and\n<b>load_maintainer_config()</b> to update the default build\nflags defined by the vendor.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;unset($flag)</p>\n\n<p style=\"margin-left:17%;\">Unset the build flag $flag, so\nthat it will not be known anymore.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;set($flag, $value,\n$source, $maint)</p>\n\n<p style=\"margin-left:17%;\">Update the build flag $flag\nwith value $value and record its origin as $source (if\ndefined). Record it as maintainer modified if $maint is\ndefined and true.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;set_feature($area,\n$feature, $enabled)</p>\n\n<p style=\"margin-left:17%;\">Update the boolean state of\nwhether a specific feature within a known feature area has\nbeen enabled. The only currently known feature areas are\n&quot;future&quot;, &quot;qa&quot;, &quot;sanitize&quot;,\n&quot;hardening&quot; and &quot;reproducible&quot;.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;strip($flag, $value,\n$source, $maint)</p>\n\n<p style=\"margin-left:17%;\">Update the build flag $flag by\nstripping the flags listed in $value and record its origin\nas $source (if defined). Record it as maintainer modified if\n$maint is defined and true.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;append($flag, $value,\n$source, $maint)</p>\n\n<p style=\"margin-left:17%;\">Append the options listed in\n$value to the current value of the flag $flag. Record its\norigin as $source (if defined). Record it as maintainer\nmodified if $maint is defined and true.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;prepend($flag, $value,\n$source, $maint)</p>\n\n<p style=\"margin-left:17%;\">Prepend the options listed in\n$value to the current value of the flag $flag. Record its\norigin as $source (if defined). Record it as maintainer\nmodified if $maint is defined and true.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;update_from_conffile($file,\n$source)</p>\n\n<p style=\"margin-left:17%;\">Update the current build flags\nbased on the configuration directives contained in $file.\nSee <a href=\"https://man.page/1/dpkg-buildflags\">dpkg-buildflags(1)</a> for the format of the\ndirectives.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$source is the\norigin recorded for any build flag set or modified.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;get($flag)</p>\n\n<p style=\"margin-left:17%;\">Return the value associated to\nthe flag. It might be undef if the flag doesn&rsquo;t\nexist.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;<b>get_feature_areas()</b></p>\n\n<p style=\"margin-left:17%;\">Return the feature areas (i.e.\nthe area values has_features will return true for).</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;get_features($area)</p>\n\n<p style=\"margin-left:17%;\">Return, for the given area, a\nhash with keys as feature names, and values as booleans\nindicating whether the feature is enabled or not.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;get_origin($flag)</p>\n\n<p style=\"margin-left:17%;\">Return the origin associated to\nthe flag. It might be undef if the flag doesn&rsquo;t\nexist.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;is_maintainer_modified($flag)</p>\n\n<p style=\"margin-left:17%;\">Return true if the flag is\nmodified by the maintainer.</p>\n\n\n<p style=\"margin-left:11%;\">$bf-&gt;has_features($area)</p>\n\n<p style=\"margin-left:17%;\">Returns true if the given area\nof features is known, and false otherwise. The only\ncurrently recognized feature areas are &quot;future&quot;,\n&quot;qa&quot;, &quot;sanitize&quot;, &quot;hardening&quot;\nand &quot;reproducible&quot;.</p>\n\n<p style=\"margin-left:11%;\">$bf-&gt;has($option)</p>\n\n<p style=\"margin-left:17%;\">Returns a boolean indicating\nwhether the flags exists in the object.</p>\n\n<p style=\"margin-left:11%;\">@flags =\n$bf-&gt;<b>list()</b></p>\n\n<p style=\"margin-left:17%;\">Returns the list of flags\nstored in the object.</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.04\n(dpkg 1.20.0)</b> <br>\nNew method: $bf-&gt;<b>unset()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.03\n(dpkg 1.16.5)</b> <br>\nNew method: $bf-&gt;<b>get_feature_areas()</b> to list\npossible values for $bf-&gt;get_features.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">New method\n$bf-&gt;<b>is_maintainer_modified()</b> and new optional\nparameter to $bf-&gt;<b>set()</b>, $bf-&gt;<b>append()</b>,\n$bf-&gt;<b>prepend()</b>, $bf-&gt;<b>strip()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.02\n(dpkg 1.16.2)</b> <br>\nNew methods: $bf-&gt;<b>get_features()</b>,\n$bf-&gt;<b>has_features()</b>,\n$bf-&gt;<b>set_feature()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.01\n(dpkg 1.16.1)</b> <br>\nNew method: $bf-&gt;<b>prepend()</b> very similar to\n<b>append()</b>. Implement support of the prepend operation\neverywhere.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">New method:\n$bf-&gt;<b>load_maintainer_config()</b> that update the\nbuild flags based on the package maintainer directives.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.15.7)</b> <br>\nMark the module as public.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#CHANGES\">CHANGES</a>"],"level":3}