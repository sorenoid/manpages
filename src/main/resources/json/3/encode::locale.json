{"name":"encode::locale","description":"Encode::Locale\n- Determine the locale encoding","body":"\n\n<h1 align=\"center\">Encode::Locale</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Encode::Locale\n- Determine the locale encoding</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nEncode::Locale; <br>\nuse Encode; <br>\n$string = decode(locale =&gt; $bytes); <br>\n$bytes = encode(locale =&gt; $string); <br>\nif (-t) { <br>\nbinmode(STDIN, &quot;:encoding(console_in)&quot;); <br>\nbinmode(STDOUT, &quot;:encoding(console_out)&quot;); <br>\nbinmode(STDERR, &quot;:encoding(console_out)&quot;); <br>\n} <br>\n# Processing file names passed in as arguments <br>\nmy $uni_filename = decode(locale =&gt; $ARGV[0]); <br>\nopen(my $fh, &quot;&lt;&quot;, encode(locale_fs =&gt;\n$uni_filename)) <br>\n|| die &quot;Can't open '$uni_filename': $!&quot;; <br>\nbinmode($fh, &quot;:encoding(locale)&quot;); <br>\n...</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In many\napplications it&rsquo;s wise to let Perl use Unicode for the\nstrings it processes. Most of the interfaces Perl has to the\noutside world are still byte based. Programs therefore need\nto decode byte strings that enter the program from the\noutside and encode them again on the way out.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>POSIX</small> locale system is used to specify both\nthe language conventions requested by the user and the\npreferred character set to consume and output. The\n&quot;Encode::Locale&quot; module looks up the charset and\nencoding (called a <small>CODESET</small> in the locale\njargon) and arranges for the Encode module to know this\nencoding under the name &quot;locale&quot;. It means bytes\nobtained from the environment can be converted to Unicode\nstrings by calling &quot;Encode::encode(locale =&gt;\n$bytes)&quot; and converted back again with\n&quot;Encode::decode(locale =&gt; $string)&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Where file\nsystems interfaces pass file names in and out of the program\nwe also need care. The trend is for operating systems to use\na fixed file encoding that don&rsquo;t actually depend on\nthe locale; and this module determines the most appropriate\nencoding for file names. The Encode module will know this\nencoding under the name &quot;locale_fs&quot;. For\ntraditional Unix systems this will be an alias to the same\nencoding as &quot;locale&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For programs\nrunning in a terminal window (called a &quot;Console&quot;\non some systems) the &quot;locale&quot; encoding is usually\na good choice for what to expect as input and output. Some\nsystems allows us to query the encoding set for the terminal\nand &quot;Encode::Locale&quot; will do that if available and\nmake these encodings known under the &quot;Encode&quot;\naliases &quot;console_in&quot; and &quot;console_out&quot;.\nFor systems where we can&rsquo;t determine the terminal\nencoding these will be aliased as the same encoding as\n&quot;locale&quot;. The advice is to use\n&quot;console_in&quot; for input known to come from the\nterminal and &quot;console_out&quot; for output to the\nterminal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\narranging for various Encode aliases the following functions\nand variables are provided: <br>\ndecode_argv( ) <br>\ndecode_argv( Encode::FB_CROAK )</p>\n\n<p style=\"margin-left:17%;\">This will decode the command\nline arguments to perl (the @ARGV array) in-place.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nwill by default replace characters that can&rsquo;t be\ndecoded by &quot;\\x{ <small>FFFD</small> }&quot;, the\nUnicode replacement character.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Any argument\nprovided is passed as <small>CHECK</small> to underlying\n<b>Encode::decode()</b> call. Pass the value\n&quot;Encode::FB_CROAK&quot; to have the decoding croak if\nnot all the command line arguments can be decoded. See\n&quot;Handling Malformed Data&quot; in Encode for details on\nother options for <small>CHECK.</small></p>\n\n<p style=\"margin-left:11%;\">env( $uni_key ) <br>\nenv( $uni_key =&gt; $uni_value )</p>\n\n<p style=\"margin-left:17%;\">Interface to get/set\nenvironment variables. Returns the current value as a\nUnicode string. The $uni_key and $uni_value arguments are\nexpected to be Unicode strings as well. Passing\n&quot;undef&quot; as $uni_value deletes the environment\nvariable named $uni_key.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The returned\nvalue will have the characters that can&rsquo;t be decoded\nreplaced by &quot;\\x{ <small>FFFD</small> }&quot;, the\nUnicode replacement character.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">There is no\ninterface to request alternative <small>CHECK</small>\nbehavior as for <b>decode_argv()</b>. If you need that you\nneed to call encode/decode yourself. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $key =\nEncode::encode(locale =&gt; $uni_key, Encode::FB_CROAK);\n<br>\nmy $uni_value = Encode::decode(locale =&gt; $ENV{$key},\nEncode::FB_CROAK);</p>\n\n<p style=\"margin-left:11%;\">reinit( ) <br>\nreinit( $encoding )</p>\n\n<p style=\"margin-left:17%;\">Reinitialize the encodings from\nthe locale. You want to call this function if you changed\nanything in the environment that might influence the\nlocale.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nwill croak if the determined encoding isn&rsquo;t recognized\nby the Encode module.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With argument\nforce $ENCODING_... variables to set to the given value.</p>\n\n<p style=\"margin-left:11%;\">$ENCODING_LOCALE</p>\n\n<p style=\"margin-left:17%;\">The encoding name determined to\nbe suitable for the current locale. Encode know this\nencoding as &quot;locale&quot;.</p>\n\n<p style=\"margin-left:11%;\">$ENCODING_LOCALE_FS</p>\n\n<p style=\"margin-left:17%;\">The encoding name determined to\nbe suitable for file system interfaces involving file names.\nEncode know this encoding as &quot;locale_fs&quot;.</p>\n\n<p style=\"margin-left:11%;\">$ENCODING_CONSOLE_IN <br>\n$ENCODING_CONSOLE_OUT</p>\n\n<p style=\"margin-left:17%;\">The encodings to be used for\nreading and writing output to the a console. Encode know\nthese encodings as &quot;console_in&quot; and\n&quot;console_out&quot;.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This table\nsummarizes the mapping of the encodings set up by the\n&quot;Encode::Locale&quot; module:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Encode | | |\n<br>\nAlias | Windows | Mac OS X | POSIX <br>\n------------+---------+--------------+------------ <br>\nlocale | ANSI | nl_langinfo | nl_langinfo <br>\nlocale_fs | ANSI | UTF-8 | nl_langinfo <br>\nconsole_in | OEM | nl_langinfo | nl_langinfo <br>\nconsole_out | OEM | nl_langinfo | nl_langinfo</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Windows</b>\n<br>\nWindows has basically 2 sets of APIs. A wide\n<small>API</small> (based on passing <small>UTF-16</small>\nstrings) and a byte based <small>API</small> based a\ncharacter set called <small>ANSI.</small> The regular Perl\ninterfaces to the <small>OS</small> currently only uses the\n<small>ANSI</small> APIs. Unfortunately <small>ANSI</small>\nis not a single character set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The encoding\nthat corresponds to <small>ANSI</small> varies between\ndifferent editions of Windows. For many western editions of\nWindows <small>ANSI</small> corresponds to\n<small>CP-1252</small> which is a character set similar to\n<small>ISO-8859-1.</small> Conceptually the\n<small>ANSI</small> character set is a similar concept to\nthe <small>POSIX</small> locale <small>CODESET</small> so\nthis module figures out what the <small>ANSI</small> code\npage is and make this available as $ENCODING_LOCALE and the\n&quot;locale&quot; Encoding alias.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Windows systems\nalso operate with another byte based character set.\nIt&rsquo;s called the <small>OEM</small> code page. This is\nthe encoding that the Console takes as input and output.\nIt&rsquo;s common for the <small>OEM</small> code page to\ndiffer from the <small>ANSI</small> code page.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mac\n<small>OS X</small></b> <br>\nOn Mac <small>OS X</small> the file system encoding is\nalways <small>UTF-8</small> while the locale can otherwise\nbe set up as normal for <small>POSIX</small> systems.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">File names on\nMac <small>OS X</small> will at the OS-level be converted to\nNFD-form. A file created by passing a NFC-filename will come\nin NFD-form from <b>readdir()</b>. See Unicode::Normalize\nfor details of <small>NFD/NFC.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Actually, Apple\ndoes not follow the Unicode <small>NFD</small> standard\nsince not all character ranges are decomposed. The claim is\nthat this avoids problems with round trip conversions from\nold Mac text encodings. See Encode::UTF8Mac for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>POSIX</small>\n(Linux and other Unixes)</b> <br>\nFile systems might vary in what encoding is to be used for\nfilenames. Since this module has no way to actually figure\nout what the is correct it goes with the best guess which is\nto assume filenames are encoding according to the current\nlocale. Users are advised to always specify\n<small>UTF-8</small> as the locale charset.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">I18N::Langinfo,\nEncode, Term::Encoding</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright 2010\nGisle Aas &lt;gisle@aas.no&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":3}