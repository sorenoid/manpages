{"name":"xdr","description":"xdr - library\nroutines for external data representation","body":"\n\n<h1 align=\"center\">XDR</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">xdr - library\nroutines for external data representation</p>\n\n<h2>SYNOPSIS AND DESCRIPTION\n<a name=\"SYNOPSIS AND DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These routines\nallow C programmers to describe arbitrary data structures in\na machine-independent fashion. Data for remote procedure\ncalls are transmitted using these routines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The prototypes\nbelow are declared in <i>&lt;rpc/xdr.h&gt;</i> and make use\nof the following types:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>typedef\nint</b> <i>bool_t</i><b>;</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>typedef\nbool_t (*</b><i>xdrproc_t</i><b>) (XDR *, void\n*,...);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the\ndeclaration of the <i>XDR</i> type, see\n<i>&lt;rpc/xdr.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_array(XDR *</b><i>xdrs</i><b>, char\n**</b><i>arrp</i><b>, unsigned int *</b><i>sizep</i><b>,\n<br>\nunsigned int</b> <i>maxsize</i><b>, unsigned int</b>\n<i>elsize</i><b>, <br>\nxdrproc_t</b> <i>elproc</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between variable-length arrays and\ntheir corresponding external representations. The argument\n<i>arrp</i> is the address of the pointer to the array,\nwhile <i>sizep</i> is the address of the element count of\nthe array; this element count cannot exceed <i>maxsize</i>.\nThe argument <i>elsize</i> is the <i>sizeof</i> each of the\narray&rsquo;s elements, and <i>elproc</i> is an XDR filter\nthat translates between the array elements&rsquo; C form,\nand their external representation. This routine returns one\nif it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_bool(XDR *</b><i>xdrs</i><b>, bool_t\n*</b><i>bp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between booleans (C integers) and\ntheir external representations. When encoding data, this\nfilter produces values of either one or zero. This routine\nreturns one if it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_bytes(XDR *</b><i>xdrs</i><b>, char **</b><i>sp</i><b>,\nunsigned int *</b><i>sizep</i><b>, <br>\nunsigned int</b> <i>maxsize</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between counted byte strings and\ntheir external representations. The argument <i>sp</i> is\nthe address of the string pointer. The length of the string\nis located at address <i>sizep</i>; strings cannot be longer\nthan <i>maxsize</i>. This routine returns one if it\nsucceeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_char(XDR *</b><i>xdrs</i><b>, char\n*</b><i>cp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C characters and their\nexternal representations. This routine returns one if it\nsucceeds, zero otherwise. Note: encoded characters are not\npacked, and occupy 4 bytes each. For arrays of characters,\nit is worthwhile to consider <b>xdr_bytes</b>(),\n<b>xdr_opaque</b>() or <b>xdr_string</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nxdr_destroy(XDR *</b><i>xdrs</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A macro that\ninvokes the destroy routine associated with the XDR stream,\n<i>xdrs</i>. Destruction usually involves freeing private\ndata structures associated with the stream. Using\n<i>xdrs</i> after invoking <b>xdr_destroy</b>() is\nundefined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_double(XDR *</b><i>xdrs</i><b>, double\n*</b><i>dp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C <i>double</i> precision\nnumbers and their external representations. This routine\nreturns one if it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_enum(XDR *</b><i>xdrs</i><b>, enum_t\n*</b><i>ep</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C <i>enum</i>s (actually\nintegers) and their external representations. This routine\nreturns one if it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_float(XDR *</b><i>xdrs</i><b>, float\n*</b><i>fp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C <i>float</i>s and their\nexternal representations. This routine returns one if it\nsucceeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nxdr_free(xdrproc_t</b> <i>proc</i><b>, char\n*</b><i>objp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Generic freeing\nroutine. The first argument is the XDR routine for the\nobject being freed. The second argument is a pointer to the\nobject itself. Note: the pointer passed to this routine is\n<i>not</i> freed, but what it points to <i>is</i> freed\n(recursively).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned int\nxdr_getpos(XDR *</b><i>xdrs</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A macro that\ninvokes the get-position routine associated with the XDR\nstream, <i>xdrs</i>. The routine returns an unsigned\ninteger, which indicates the position of the XDR byte\nstream. A desirable feature of XDR streams is that simple\narithmetic works with this number, although the XDR stream\ninstances need not guarantee this.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\n*xdr_inline(XDR *</b><i>xdrs</i><b>, int</b>\n<i>len</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A macro that\ninvokes the inline routine associated with the XDR stream,\n<i>xdrs</i>. The routine returns a pointer to a contiguous\npiece of the stream&rsquo;s buffer; <i>len</i> is the byte\nlength of the desired buffer. Note: pointer is cast to\n<i>long&nbsp;*</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Warning:\n<b>xdr_inline</b>() may return NULL (0) if it cannot\nallocate a contiguous piece of a buffer. Therefore the\nbehavior may vary among stream instances; it exists for the\nsake of efficiency.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_int(XDR *</b><i>xdrs</i><b>, int\n*</b><i>ip</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C integers and their\nexternal representations. This routine returns one if it\nsucceeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_long(XDR *</b><i>xdrs</i><b>, long\n*</b><i>lp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C <i>long</i> integers and\ntheir external representations. This routine returns one if\nit succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nxdrmem_create(XDR *</b><i>xdrs</i><b>, char\n*</b><i>addr</i><b>, unsigned int</b> <i>size</i><b>, <br>\nenum xdr_op</b> <i>op</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This routine\ninitializes the XDR stream object pointed to by <i>xdrs</i>.\nThe stream&rsquo;s data is written to, or read from, a chunk\nof memory at location <i>addr</i> whose length is no more\nthan <i>size</i> bytes long. The <i>op</i> determines the\ndirection of the XDR stream (either <b>XDR_ENCODE</b>,\n<b>XDR_DECODE</b>, or <b>XDR_FREE</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_opaque(XDR *</b><i>xdrs</i><b>, char *</b><i>cp</i><b>,\nunsigned int</b> <i>cnt</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between fixed size opaque data and\nits external representation. The argument <i>cp</i> is the\naddress of the opaque object, and <i>cnt</i> is its size in\nbytes. This routine returns one if it succeeds, zero\notherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_pointer(XDR *</b><i>xdrs</i><b>, char\n**</b><i>objpp</i><b>, <br>\nunsigned int</b> <i>objsize</i><b>, xdrproc_t</b>\n<i>xdrobj</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Like\n<b>xdr_reference</b>() except that it serializes null\npointers, whereas <b>xdr_reference</b>() does not. Thus,\n<b>xdr_pointer</b>() can represent recursive data\nstructures, such as binary trees or linked lists.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nxdrrec_create(XDR *</b><i>xdrs</i><b>, unsigned int</b>\n<i>sendsize</i><b>, <br>\nunsigned int</b> <i>recvsize</i><b>, char\n*</b><i>handle</i><b>, <br>\nint (*</b><i>readit</i><b>) (char *, char *, int), <br>\nint (*</b><i>writeit</i><b>) (char *, char *, int));</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This routine\ninitializes the XDR stream object pointed to by <i>xdrs</i>.\nThe stream&rsquo;s data is written to a buffer of size\n<i>sendsize</i>; a value of zero indicates the system should\nuse a suitable default. The stream&rsquo;s data is read from\na buffer of size <i>recvsize</i>; it too can be set to a\nsuitable default by passing a zero value. When a\nstream&rsquo;s output buffer is full, <i>writeit</i> is\ncalled. Similarly, when a stream&rsquo;s input buffer is\nempty, <i>readit</i> is called. The behavior of these two\nroutines is similar to the system calls <a href=\"https://man.page/2/read\">read(2)</a> and\n<a href=\"https://man.page/2/write\">write(2)</a>, except that <i>handle</i> is passed to the\nformer routines as the first argument. Note: the XDR\nstream&rsquo;s <i>op</i> field must be set by the\ncaller.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Warning: to\nread from an XDR stream created by this API, you&rsquo;ll\nneed to call <b>xdrrec_skiprecord</b>() first before calling\nany other XDR APIs. This inserts additional bytes in the\nstream to provide record boundary information. Also, XDR\nstreams created with different <b>xdr*_create</b> APIs are\nnot compatible for the same reason.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdrrec_endofrecord(XDR *</b><i>xdrs</i><b>, int</b>\n<i>sendnow</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This routine\ncan be invoked only on streams created by\n<b>xdrrec_create</b>(). The data in the output buffer is\nmarked as a completed record, and the output buffer is\noptionally written out if <i>sendnow</i> is nonzero. This\nroutine returns one if it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdrrec_eof(XDR *</b><i>xdrs</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This routine\ncan be invoked only on streams created by\n<b>xdrrec_create</b>(). After consuming the rest of the\ncurrent record in the stream, this routine returns one if\nthe stream has no more input, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdrrec_skiprecord(XDR *</b><i>xdrs</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This routine\ncan be invoked only on streams created by\n<b>xdrrec_create</b>(). It tells the XDR implementation that\nthe rest of the current record in the stream&rsquo;s input\nbuffer should be discarded. This routine returns one if it\nsucceeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_reference(XDR *</b><i>xdrs</i><b>, char\n**</b><i>pp</i><b>, unsigned int</b> <i>size</i><b>, <br>\nxdrproc_t</b> <i>proc</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A primitive\nthat provides pointer chasing within structures. The\nargument <i>pp</i> is the address of the pointer;\n<i>size</i> is the <i>sizeof</i> the structure that\n<i>*pp</i> points to; and <i>proc</i> is an XDR procedure\nthat filters the structure between its C form and its\nexternal representation. This routine returns one if it\nsucceeds, zero otherwise.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Warning: this\nroutine does not understand null pointers. Use\n<b>xdr_pointer</b>() instead.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>xdr_setpos(XDR\n*</b><i>xdrs</i><b>, unsigned int</b>\n<i>pos</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A macro that\ninvokes the set position routine associated with the XDR\nstream <i>xdrs</i>. The argument <i>pos</i> is a position\nvalue obtained from <b>xdr_getpos</b>(). This routine\nreturns one if the XDR stream could be repositioned, and\nzero otherwise.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Warning: it is\ndifficult to reposition some types of XDR streams, so this\nroutine may fail with one type of stream and succeed with\nanother.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_short(XDR *</b><i>xdrs</i><b>, short\n*</b><i>sp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C <i>short</i> integers\nand their external representations. This routine returns one\nif it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nxdrstdio_create(XDR *</b><i>xdrs</i><b>, FILE\n*</b><i>file</i><b>, enum xdr_op</b> <i>op</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This routine\ninitializes the XDR stream object pointed to by <i>xdrs</i>.\nThe XDR stream data is written to, or read from, the\n<i>stdio</i> stream <i>file</i>. The argument <i>op</i>\ndetermines the direction of the XDR stream (either\n<b>XDR_ENCODE</b>, <b>XDR_DECODE</b>, or\n<b>XDR_FREE</b>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Warning: the\ndestroy routine associated with such XDR streams calls\n<a href=\"https://man.page/3/fflush\">fflush(3)</a> on the <i>file</i> stream, but never\n<a href=\"https://man.page/3/fclose\">fclose(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_string(XDR *</b><i>xdrs</i><b>, char **</b><i>sp</i><b>,\nunsigned int</b> <i>maxsize</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C strings and their\ncorresponding external representations. Strings cannot be\nlonger than <i>maxsize</i>. Note: <i>sp</i> is the address\nof the string&rsquo;s pointer. This routine returns one if\nit succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_u_char(XDR *</b><i>xdrs</i><b>, unsigned char\n*</b><i>ucp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between <i>unsigned</i> C\ncharacters and their external representations. This routine\nreturns one if it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_u_int(XDR *</b><i>xdrs</i><b>, unsigned\n*</b><i>up</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C <i>unsigned</i> integers\nand their external representations. This routine returns one\nif it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_u_long(XDR *</b><i>xdrs</i><b>, unsigned long\n*</b><i>ulp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C <i>unsigned long</i>\nintegers and their external representations. This routine\nreturns one if it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_u_short(XDR *</b><i>xdrs</i><b>, unsigned short\n*</b><i>usp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between C <i>unsigned short</i>\nintegers and their external representations. This routine\nreturns one if it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_union(XDR *</b><i>xdrs</i><b>, int *</b><i>dscmp</i><b>,\nchar *</b><i>unp</i><b>, <br>\nstruct xdr_discrim *</b><i>choices</i><b>, <br>\nxdrproc_t</b> <i>defaultarm</i><b>); /* may equal NULL\n*/</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between a discriminated C\n<i>union</i> and its corresponding external representation.\nIt first translates the discriminant of the union located at\n<i>dscmp</i>. This discriminant is always an <i>enum_t</i>.\nNext the union located at <i>unp</i> is translated. The\nargument <i>choices</i> is a pointer to an array of\n<b>xdr_discrim</b>() structures. Each structure contains an\nordered pair of [<i>value</i>,<i>proc</i>]. If the\nunion&rsquo;s discriminant is equal to the associated\n<i>value</i>, then the <i>proc</i> is called to translate\nthe union. The end of the <b>xdr_discrim</b>() structure\narray is denoted by a routine of value NULL. If the\ndiscriminant is not found in the <i>choices</i> array, then\nthe <i>defaultarm</i> procedure is called (if it is not\nNULL). Returns one if it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_vector(XDR *</b><i>xdrs</i><b>, char\n*</b><i>arrp</i><b>, unsigned int</b> <i>size</i><b>, <br>\nunsigned int</b> <i>elsize</i><b>, xdrproc_t</b>\n<i>elproc</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A filter\nprimitive that translates between fixed-length arrays and\ntheir corresponding external representations. The argument\n<i>arrp</i> is the address of the pointer to the array,\nwhile <i>size</i> is the element count of the array. The\nargument <i>elsize</i> is the <i>sizeof</i> each of the\narray&rsquo;s elements, and <i>elproc</i> is an XDR filter\nthat translates between the array elements&rsquo; C form,\nand their external representation. This routine returns one\nif it succeeds, zero otherwise.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_void(void);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This routine\nalways returns one. It may be passed to RPC routines that\nrequire a function argument, where nothing is to be\ndone.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bool_t\nxdr_wrapstring(XDR *</b><i>xdrs</i><b>, char\n**</b><i>sp</i><b>);</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A primitive\nthat calls <b>xdr_string(xdrs, sp,MAXUN.UNSIGNED );</b>\nwhere <b>MAXUN.UNSIGNED</b> is the maximum value of an\nunsigned integer. <b>xdr_wrapstring</b>() is handy because\nthe RPC package passes a maximum of two XDR routines as\narguments, and <b>xdr_string</b>(), one of the most\nfrequently used primitives, requires three. Returns one if\nit succeeds, zero otherwise.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3310651.png\" alt=\"Image grohtml-3310651.png\"></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/rpc\">rpc(3)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmanuals:</p>\n\n<p style=\"margin-left:22%;\">eXternal Data Representation\nStandard: Protocol Specification <br>\neXternal Data Representation: Sun Technical Notes <i><br>\nXDR: External Data Representation Standard</i>,\nRFC&nbsp;1014, Sun Microsystems, Inc., USC-ISI.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS AND DESCRIPTION\">SYNOPSIS AND DESCRIPTION</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}