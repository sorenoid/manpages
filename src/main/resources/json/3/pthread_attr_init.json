{"name":"pthread_attr_init","body":"\n\n<h1 align=\"center\">PTHREAD_ATTR_INIT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthread_attr_init,\npthread_attr_destroy - initialize and destroy thread\nattributes object</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;pthread.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npthread_attr_init(pthread_attr_t *</b><i>attr</i><b>); <br>\nint pthread_attr_destroy(pthread_attr_t\n*</b><i>attr</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Compile and\nlink with <i>-pthread</i>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_attr_init</b>() function initializes the thread\nattributes object pointed to by <i>attr</i> with default\nattribute values. After this call, individual attributes of\nthe object can be set using various related functions\n(listed under SEE ALSO), and then the object can be used in\none or more <a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a> calls that create\nthreads.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Calling\n<b>pthread_attr_init</b>() on a thread attributes object\nthat has already been initialized results in undefined\nbehavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a thread\nattributes object is no longer required, it should be\ndestroyed using the <b>pthread_attr_destroy</b>() function.\nDestroying a thread attributes object has no effect on\nthreads that were created using that object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once a thread\nattributes object has been destroyed, it can be\nreinitialized using <b>pthread_attr_init</b>(). Any other\nuse of a destroyed thread attributes object has undefined\nresults.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nthese functions return 0; on error, they return a nonzero\nerror number.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1\ndocuments an <b>ENOMEM</b> error for\n<b>pthread_attr_init</b>(); on Linux these functions always\nsucceed (but portable and future-proof applications should\nnevertheless handle a possible error return).</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3356791.png\" alt=\"Image grohtml-3356791.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>pthread_attr_t</i> type should be treated as opaque: any\naccess to the object other than via pthreads functions is\nnonportable and produces undefined results.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow optionally makes use of <b>pthread_attr_init</b>() and\nvarious related functions to initialize a thread attributes\nobject that is used to create a single thread. Once created,\nthe thread uses the <a href=\"https://man.page/3/pthread_getattr_np\">pthread_getattr_np(3)</a> function (a\nnonstandard GNU extension) to retrieve the thread&rsquo;s\nattributes, and then displays those attributes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the program\nis run with no command-line argument, then it passes NULL as\nthe <i>attr</i> argument of <a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, so\nthat the thread is created with default attributes. Running\nthe program on Linux/x86-32 with the NPTL threading\nimplementation, we see the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>ulimit\n-s</b> # No stack limit ==&gt; default stack size is 2 MB\n<br>\nunlimited <br>\n$ <b>./a.out</b> <br>\nThread attributes: <br>\nDetach state = PTHREAD_CREATE_JOINABLE <br>\nScope = PTHREAD_SCOPE_SYSTEM <br>\nInherit scheduler = PTHREAD_INHERIT_SCHED <br>\nScheduling policy = SCHED_OTHER <br>\nScheduling priority = 0 <br>\nGuard size = 4096 bytes <br>\nStack address = 0x40196000 <br>\nStack size = 0x201000 bytes</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When we supply\na stack size as a command-line argument, the program\ninitializes a thread attributes object, sets various\nattributes in that object, and passes a pointer to the\nobject in the call to <a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>. Running the\nprogram on Linux/x86-32 with the NPTL threading\nimplementation, we see the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n0x3000000</b> <br>\nposix_memalign() allocated at 0x40197000 <br>\nThread attributes: <br>\nDetach state = PTHREAD_CREATE_DETACHED <br>\nScope = PTHREAD_SCOPE_SYSTEM <br>\nInherit scheduler = PTHREAD_EXPLICIT_SCHED <br>\nScheduling policy = SCHED_OTHER <br>\nScheduling priority = 0 <br>\nGuard size = 0 bytes <br>\nStack address = 0x40197000 <br>\nStack size = 0x3000000 bytes</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#define _GNU_SOURCE /* To get pthread_getattr_np()\ndeclaration */ <br>\n#include &lt;pthread.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;errno.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nhandle_error_en(en, msg) \\ <br>\ndo { errno = en; perror(msg); exit(EXIT_FAILURE); } while\n(0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\ndisplay_pthread_attr(pthread_attr_t *attr, char *prefix)\n<br>\n{ <br>\nint s, i; <br>\nsize_t v; <br>\nvoid *stkaddr; <br>\nstruct sched_param sp;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_getdetachstate(attr, &amp;i); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_getdetachstate&quot;);\n<br>\nprintf(&quot;%sDetach state = %s\\n&quot;, prefix, <br>\n(i == PTHREAD_CREATE_DETACHED) ?\n&quot;PTHREAD_CREATE_DETACHED&quot; : <br>\n(i == PTHREAD_CREATE_JOINABLE) ?\n&quot;PTHREAD_CREATE_JOINABLE&quot; : <br>\n&quot;???&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_getscope(attr, &amp;i); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_getscope&quot;); <br>\nprintf(&quot;%sScope = %s\\n&quot;, prefix, <br>\n(i == PTHREAD_SCOPE_SYSTEM) ?\n&quot;PTHREAD_SCOPE_SYSTEM&quot; : <br>\n(i == PTHREAD_SCOPE_PROCESS) ?\n&quot;PTHREAD_SCOPE_PROCESS&quot; : <br>\n&quot;???&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_getinheritsched(attr, &amp;i); <br>\nif (s != 0) <br>\nhandle_error_en(s,\n&quot;pthread_attr_getinheritsched&quot;); <br>\nprintf(&quot;%sInherit scheduler = %s\\n&quot;, prefix, <br>\n(i == PTHREAD_INHERIT_SCHED) ?\n&quot;PTHREAD_INHERIT_SCHED&quot; : <br>\n(i == PTHREAD_EXPLICIT_SCHED) ?\n&quot;PTHREAD_EXPLICIT_SCHED&quot; : <br>\n&quot;???&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_getschedpolicy(attr, &amp;i); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_getschedpolicy&quot;);\n<br>\nprintf(&quot;%sScheduling policy = %s\\n&quot;, prefix, <br>\n(i == SCHED_OTHER) ? &quot;SCHED_OTHER&quot; : <br>\n(i == SCHED_FIFO) ? &quot;SCHED_FIFO&quot; : <br>\n(i == SCHED_RR) ? &quot;SCHED_RR&quot; : <br>\n&quot;???&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_getschedparam(attr, &amp;sp); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_getschedparam&quot;);\n<br>\nprintf(&quot;%sScheduling priority = %d\\n&quot;, prefix,\nsp.sched_priority);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_getguardsize(attr, &amp;v); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_getguardsize&quot;);\n<br>\nprintf(&quot;%sGuard size = %zu bytes\\n&quot;, prefix,\nv);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_getstack(attr, &amp;stkaddr, &amp;v); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_getstack&quot;); <br>\nprintf(&quot;%sStack address = %p\\n&quot;, prefix, stkaddr);\n<br>\nprintf(&quot;%sStack size = %#zx bytes\\n&quot;, prefix, v);\n<br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void *\n<br>\nthread_start(void *arg) <br>\n{ <br>\nint s; <br>\npthread_attr_t gattr;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/*\npthread_getattr_np() is a non-standard GNU extension that\n<br>\nretrieves the attributes of the thread specified in its <br>\nfirst argument */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_getattr_np(pthread_self(), &amp;gattr); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_getattr_np&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Thread\nattributes:\\n&quot;); <br>\ndisplay_pthread_attr(&amp;gattr, &quot;\\t&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n/* Terminate all threads */ <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\npthread_t thr; <br>\npthread_attr_t attr; <br>\npthread_attr_t *attrp; /* NULL or &amp;attr */ <br>\nint s;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">attrp =\nNULL;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* If a\ncommand-line argument was supplied, use it to set the <br>\nstack-size attribute and set a few other thread attributes,\n<br>\nand set attrp pointing to thread attributes object */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &gt;\n1) { <br>\nsize_t stack_size; <br>\nvoid *sp;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">attrp =\n&amp;attr;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_init(&amp;attr); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_init&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_setdetachstate(&amp;attr,\nPTHREAD_CREATE_DETACHED); <br>\nif (s != 0) <br>\nhandle_error_en(s,\n&quot;pthread_attr_setdetachstate&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_setinheritsched(&amp;attr,\nPTHREAD_EXPLICIT_SCHED); <br>\nif (s != 0) <br>\nhandle_error_en(s,\n&quot;pthread_attr_setinheritsched&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">stack_size =\nstrtoul(argv[1], NULL, 0);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\nposix_memalign(&amp;sp, sysconf(_SC_PAGESIZE), stack_size);\n<br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;posix_memalign&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;posix_memalign()\nallocated at %p\\n&quot;, sp);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_attr_setstack(&amp;attr, sp, stack_size); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_setstack&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_create(&amp;thr, attrp, &amp;thread_start, NULL);\n<br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_create&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (attrp !=\nNULL) { <br>\ns = pthread_attr_destroy(attrp); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_attr_destroy&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pause(); /*\nTerminates when other thread calls exit() */ <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/pthread_attr_setaffinity_np\">pthread_attr_setaffinity_np(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setdetachstate\">pthread_attr_setdetachstate(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setguardsize\">pthread_attr_setguardsize(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setinheritsched\">pthread_attr_setinheritsched(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setschedparam\">pthread_attr_setschedparam(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setschedpolicy\">pthread_attr_setschedpolicy(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setscope\">pthread_attr_setscope(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setsigmask_np\">pthread_attr_setsigmask_np(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setstack\">pthread_attr_setstack(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setstackaddr\">pthread_attr_setstackaddr(3)</a>,\n<a href=\"https://man.page/3/pthread_attr_setstacksize\">pthread_attr_setstacksize(3)</a>,\n<a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, <a href=\"https://man.page/3/pthread_getattr_np\">pthread_getattr_np(3)</a>,\n<a href=\"https://man.page/3/pthread_setattr_default_np\">pthread_setattr_default_np(3)</a>, <a href=\"https://man.page/7/pthreads\">pthreads(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}