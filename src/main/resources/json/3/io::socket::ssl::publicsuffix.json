{"name":"io::socket::ssl::publicsuffix","body":"\n\n<h1 align=\"center\">IO::Socket::SSL::PublicSuffix</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">IO::Socket::SSL::PublicSuffix\n- provide access to Mozilla&rsquo;s list of effective TLD\nnames</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"># use builtin\ndefault <br>\nuse IO::Socket::SSL::PublicSuffix; <br>\n$ps = IO::Socket::SSL::PublicSuffix-&gt;default; <br>\n# load from string <br>\n$ps =\nIO::Socket::SSL::PublicSuffix-&gt;from_string(&quot;*.uk\\n*&quot;);\n<br>\n# load from file or file handle <br>\n$ps =\nIO::Socket::SSL::PublicSuffix-&gt;from_file($filename); <br>\n$ps = IO::Socket::SSL::PublicSuffix-&gt;from_file(\\*STDIN);\n<br>\n# --- string in -&gt; string out <br>\n# $rest -&gt; whatever.host <br>\n# $tld -&gt; co.uk <br>\nmy ($rest,$tld) =\n$ps-&gt;public_suffix('whatever.host.co.uk'); <br>\nmy $tld = $ps-&gt;public_suffix('whatever.host.co.uk'); <br>\n# $root_domain -&gt; host.co.uk <br>\nmy $root_domain =\n$ps-&gt;public_suffix('whatever.host.co.uk', 1); <br>\n# --- array in -&gt; array out <br>\n# $rest -&gt; [qw(whatever host)] <br>\n# $tld -&gt; [qw(co uk)] <br>\nmy ($rest,$tld) = $ps-&gt;public_suffix([qw(whatever host co\nuk)]); <br>\n---- <br>\n# To update this file with the current list: <br>\nperl -MIO::Socket::SSL::PublicSuffix -e\n'IO::Socket::SSL::PublicSuffix::update_self_from_url()'</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nuses the list of effective top level domain names from the\nmozilla project to determine the public top level domain for\na given hostname.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Method</b>\n<br>\nclass-&gt;default(%args)</p>\n\n<p style=\"margin-left:17%;\">Returns object with builtin\ndefault. &quot;min_suffix&quot; can be given in %args to\nspecify the minimal suffix, default is 1.</p>\n\n\n<p style=\"margin-left:11%;\">class-&gt;from_string(string,%args)</p>\n\n<p style=\"margin-left:17%;\">Returns object with\nconfiguration from string. See method &quot;default&quot;\nfor %args.</p>\n\n<p style=\"margin-left:11%;\">class-&gt;from_file( file name|\nfile handle, %args )</p>\n\n<p style=\"margin-left:17%;\">Returns object with\nconfiguration from file or file handle. See method\n&quot;default&quot; for %args.</p>\n\n<p style=\"margin-left:11%;\">$self-&gt;public_suffix(\n$host|\\@host, [ $add ] )</p>\n\n<p style=\"margin-left:17%;\">In array context the function\nreturns the non-tld part and the tld part of the given\nhostname, in scalar context only the tld part. It adds $add\nparts of the non-tld part to the tld, e.g. with\n&quot;$add=1&quot; it will return the root domain.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If there were\nno explicit matches against the public suffix configuration\nit will fall back to a suffix of length 1.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\naccepts a string or an array-ref (e.g. host split by\n&quot;.&quot;). In the first case it will return string(s),\nin the latter case array-ref(s).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">International\nhostnames or labels can be in <small>ASCII</small> (\n<small>IDNA</small> form starting with &quot;xn--&quot;) or\nunicode. In the latter case an <small>IDNA</small> handling\nlibrary needs to be available. <small>URI</small> is\npreferred, but Net::IDN:::Encode, Net::LibIDN are still\nsupported.</p>\n\n<p style=\"margin-left:11%;\">($self|class)-&gt;can_idn</p>\n\n<p style=\"margin-left:17%;\">Returns true if\n<small>IDN</small> support is available.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">http://publicsuffix.org/list/effective_tld_names.dat</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Domain::PublicSuffix,\nMozilla::PublicSuffix</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Q: Why yet\nanother module, we already have\nL&lt;Domain::PublicSuffix&gt; and <br>\nL&lt;Mozilla::PublicSuffix&gt;. <br>\nA: Because the public suffix data change more often than\nthese modules do, <br>\nIO::Socket::SSL needs this list and it is more easy this way\nto keep it <br>\nup-to-date.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Steffen\nUllrich</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":3}