{"name":"getifaddrs","description":"getifaddrs, freeifaddrs - get interface addresses","body":"\n\n<h1 align=\"center\">GETIFADDRS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getifaddrs,\nfreeifaddrs - get interface addresses</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;ifaddrs.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetifaddrs(struct ifaddrs **</b><i>ifap</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nfreeifaddrs(struct ifaddrs *</b><i>ifa</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getifaddrs</b>() function creates a linked list of\nstructures describing the network interfaces of the local\nsystem, and stores the address of the first item of the list\nin <i>*ifap</i>. The list consists of <i>ifaddrs</i>\nstructures, defined as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct ifaddrs\n{ <br>\nstruct ifaddrs *ifa_next; /* Next item in list */ <br>\nchar *ifa_name; /* Name of interface */ <br>\nunsigned int ifa_flags; /* Flags from SIOCGIFFLAGS */ <br>\nstruct sockaddr *ifa_addr; /* Address of interface */ <br>\nstruct sockaddr *ifa_netmask; /* Netmask of interface */\n<br>\nunion { <br>\nstruct sockaddr *ifu_broadaddr; <br>\n/* Broadcast address of interface */ <br>\nstruct sockaddr *ifu_dstaddr; <br>\n/* Point-to-point destination address */ <br>\n} ifa_ifu; <br>\n#define ifa_broadaddr ifa_ifu.ifu_broadaddr <br>\n#define ifa_dstaddr ifa_ifu.ifu_dstaddr <br>\nvoid *ifa_data; /* Address-specific data */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>ifa_next</i> field contains a pointer to the next\nstructure on the list, or NULL if this is the last item of\nthe list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>ifa_name</i> points to the null-terminated interface\nname.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>ifa_flags</i> field contains the interface flags, as\nreturned by the <b>SIOCGIFFLAGS ioctl</b>(2) operation (see\n<a href=\"https://man.page/7/netdevice\">netdevice(7)</a> for a list of these flags).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>ifa_addr</i> field points to a structure containing the\ninterface address. (The <i>sa_family</i> subfield should be\nconsulted to determine the format of the address structure.)\nThis field may contain a null pointer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>ifa_netmask</i> field points to a structure containing\nthe netmask associated with <i>ifa_addr</i>, if applicable\nfor the address family. This field may contain a null\npointer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Depending on\nwhether the bit <b>IFF_BROADCAST</b> or\n<b>IFF_POINTOPOINT</b> is set in <i>ifa_flags</i> (only one\ncan be set at a time), either <i>ifa_broadaddr</i> will\ncontain the broadcast address associated with\n<i>ifa_addr</i> (if applicable for the address family) or\n<i>ifa_dstaddr</i> will contain the destination address of\nthe point-to-point interface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>ifa_data</i> field points to a buffer containing\naddress-family-specific data; this field may be NULL if\nthere is no such data for this interface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The data\nreturned by <b>getifaddrs</b>() is dynamically allocated and\nshould be freed using <b>freeifaddrs</b>() when no longer\nneeded.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>getifaddrs</b>() returns zero; on error, -1 is returned,\nand <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getifaddrs</b>()\nmay fail and set <i>errno</i> for any of the errors\nspecified for <a href=\"https://man.page/2/socket\">socket(2)</a>, <a href=\"https://man.page/2/bind\">bind(2)</a>,\n<a href=\"https://man.page/2/getsockname\">getsockname(2)</a>, <a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a>, <a href=\"https://man.page/2/sendto\">sendto(2)</a>,\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>, or <a href=\"https://man.page/3/realloc\">realloc(3)</a>.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getifaddrs</b>() function first appeared in glibc 2.3,\nbut before glibc 2.3.3, the implementation supported only\nIPv4 addresses; IPv6 support was added in glibc 2.3.3.\nSupport of address families other than IPv4 is available\nonly on kernels that support netlink.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3279251.png\" alt=\"Image grohtml-3279251.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Not in POSIX.1.\nThis function first appeared in BSDi and is present on the\nBSD systems, but with slightly different semantics\ndocumented&mdash;returning one entry per interface, not per\naddress. This means <i>ifa_addr</i> and other fields can\nactually be NULL if the interface has no address, and no\nlink-level address is returned if the interface has an IP\naddress assigned. Also, the way of choosing either\n<i>ifa_broadaddr</i> or <i>ifa_dstaddr</i> differs on\nvarious systems.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The addresses\nreturned on Linux will usually be the IPv4 and IPv6\naddresses assigned to the interface, but also one\n<b>AF_PACKET</b> address per interface containing\nlower-level details about the interface and its physical\nlayer. In this case, the <i>ifa_data</i> field may contain a\npointer to a <i>struct rtnl_link_stats</i>, defined in\n<i>&lt;linux/if_link.h&gt;</i> (in Linux 2.4 and earlier,\n<i>struct net_device_stats</i>, defined in\n<i>&lt;linux/netdevice.h&gt;</i>), which contains various\ninterface attributes and statistics.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>getifaddrs</b>(),\n<b>freeifaddrs</b>(), and <a href=\"https://man.page/3/getnameinfo\">getnameinfo(3)</a>. Here is\nwhat we see when running this program on one system:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./a.out</b> <br>\nlo AF_PACKET (17) <br>\ntx_packets = 524; rx_packets = 524 <br>\ntx_bytes = 38788; rx_bytes = 38788 <br>\nwlp3s0 AF_PACKET (17) <br>\ntx_packets = 108391; rx_packets = 130245 <br>\ntx_bytes = 30420659; rx_bytes = 94230014 <br>\nem1 AF_PACKET (17) <br>\ntx_packets = 0; rx_packets = 0 <br>\ntx_bytes = 0; rx_bytes = 0 <br>\nlo AF_INET (2) <br>\naddress: &lt;127.0.0.1&gt; <br>\nwlp3s0 AF_INET (2) <br>\naddress: &lt;192.168.235.137&gt; <br>\nlo AF_INET6 (10) <br>\naddress: &lt;::1&gt; <br>\nwlp3s0 AF_INET6 (10) <br>\naddress: &lt;fe80::7ee9:d3ff:fef5:1a91%wlp3s0&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#define _GNU_SOURCE /* To get defns of NI_MAXSERV and\nNI_MAXHOST */ <br>\n#include &lt;arpa/inet.h&gt; <br>\n#include &lt;sys/socket.h&gt; <br>\n#include &lt;netdb.h&gt; <br>\n#include &lt;ifaddrs.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;linux/if_link.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int main(int\nargc, char *argv[]) <br>\n{ <br>\nstruct ifaddrs *ifaddr; <br>\nint family, s; <br>\nchar host[NI_MAXHOST];</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(getifaddrs(&amp;ifaddr) == -1) { <br>\nperror(&quot;getifaddrs&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Walk through\nlinked list, maintaining head pointer so we <br>\ncan free list later */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (struct\nifaddrs *ifa = ifaddr; ifa != NULL; <br>\nifa = ifa-&gt;ifa_next) { <br>\nif (ifa-&gt;ifa_addr == NULL) <br>\ncontinue;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">family =\nifa-&gt;ifa_addr-&gt;sa_family;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Display\ninterface name and family (including symbolic <br>\nform of the latter for the common families) */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;%-8s\n%s (%d)\\n&quot;, <br>\nifa-&gt;ifa_name, <br>\n(family == AF_PACKET) ? &quot;AF_PACKET&quot; : <br>\n(family == AF_INET) ? &quot;AF_INET&quot; : <br>\n(family == AF_INET6) ? &quot;AF_INET6&quot; :\n&quot;???&quot;, <br>\nfamily);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* For an\nAF_INET* interface address, display the address */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (family ==\nAF_INET || family == AF_INET6) { <br>\ns = getnameinfo(ifa-&gt;ifa_addr, <br>\n(family == AF_INET) ? sizeof(struct sockaddr_in) : <br>\nsizeof(struct sockaddr_in6), <br>\nhost, NI_MAXHOST, <br>\nNULL, 0, NI_NUMERICHOST); <br>\nif (s != 0) { <br>\nprintf(&quot;getnameinfo() failed: %s\\n&quot;,\ngai_strerror(s)); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;\\t\\taddress:\n&lt;%s&gt;\\n&quot;, host);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">} else if\n(family == AF_PACKET &amp;&amp; ifa-&gt;ifa_data != NULL) {\n<br>\nstruct rtnl_link_stats *stats = ifa-&gt;ifa_data;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;\\t\\ttx_packets\n= %10u; rx_packets = %10u\\n&quot; <br>\n&quot;\\t\\ttx_bytes = %10u; rx_bytes = %10u\\n&quot;, <br>\nstats-&gt;tx_packets, stats-&gt;rx_packets, <br>\nstats-&gt;tx_bytes, stats-&gt;rx_bytes); <br>\n} <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">freeifaddrs(ifaddr);\n<br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/bind\">bind(2)</a>,\n<a href=\"https://man.page/2/getsockname\">getsockname(2)</a>, <a href=\"https://man.page/2/socket\">socket(2)</a>, <a href=\"https://man.page/7/packet\">packet(7)</a>,\n<b>ifconfig</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}