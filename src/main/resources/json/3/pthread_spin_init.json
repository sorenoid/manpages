{"name":"pthread_spin_init","description":"pthread_spin_init, pthread_spin_destroy - initialize or destroy a spin lock","body":"\n\n<h1 align=\"center\">PTHREAD_SPIN_INIT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthread_spin_init,\npthread_spin_destroy - initialize or destroy a spin lock</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;pthread.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npthread_spin_init(pthread_spinlock_t *</b><i>lock</i><b>,\nint</b> <i>pshared</i><b>); <br>\nint pthread_spin_destroy(pthread_spinlock_t\n*</b><i>lock</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Compile and\nlink with <i>-pthread</i>.</p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pthread_spin_init</b>(),\n<b>pthread_spin_destroy</b>():</p>\n\n<p style=\"margin-left:17%;\">_POSIX_C_SOURCE &gt;=\n200112L</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>General\nnote</i>: Most programs should use mutexes instead of spin\nlocks. Spin locks are primarily useful in conjunction with\nreal-time scheduling policies. See NOTES.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_spin_init</b>() function allocates any resources\nrequired for the use of the spin lock referred to by\n<i>lock</i> and initializes the lock to be in the unlocked\nstate. The <i>pshared</i> argument must have one of the\nfollowing values: <b><br>\nPTHREAD_PROCESS_PRIVATE</b></p>\n\n<p style=\"margin-left:22%;\">The spin lock is to be operated\non only by threads in the same process as the thread that\ncalls <b>pthread_spin_init</b>(). (Attempting to share the\nspin lock between processes results in undefined\nbehavior.)</p>\n\n\n<p style=\"margin-left:11%;\"><b>PTHREAD_PROCESS_SHARED</b></p>\n\n<p style=\"margin-left:22%;\">The spin lock may be operated\non by any thread in any process that has access to the\nmemory containing the lock (i.e., the lock may be in a\nshared memory object that is shared among multiple\nprocesses).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Calling\n<b>pthread_spin_init</b>() on a spin lock that has already\nbeen initialized results in undefined behavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_spin_destroy</b>() function destroys a previously\ninitialized spin lock, freeing any resources that were\nallocated for that lock. Destroying a spin lock that has not\nbeen previously been initialized or destroying a spin lock\nwhile another thread holds the lock results in undefined\nbehavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once a spin\nlock has been destroyed, performing any operation on the\nlock other than once more initializing it with\n<b>pthread_spin_init</b>() results in undefined\nbehavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The result of\nperforming operations such as <a href=\"https://man.page/3/pthread_spin_lock\">pthread_spin_lock(3)</a>,\n<a href=\"https://man.page/3/pthread_spin_unlock\">pthread_spin_unlock(3)</a>, and\n<b>pthread_spin_destroy</b>() on <i>copies</i> of the object\nreferred to by <i>lock</i> is undefined.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nthere functions return zero. On failure, they return an\nerror number. In the event that <b>pthread_spin_init</b>()\nfails, the lock is not initialized.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pthread_spin_init</b>()\nmay fail with the following errors:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system has insufficient resources to initialize a\nnew spin lock.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Insufficient memory to initialize the spin lock.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nfirst appeared in glibc in version 2.2.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Support for\nprocess-shared spin locks is a POSIX option. The option is\nsupported in the glibc implementation.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Spin locks\nshould be employed in conjunction with real-time scheduling\npolicies (<b>SCHED_FIFO</b>, or possibly <b>SCHED_RR</b>).\nUse of spin locks with nondeterministic scheduling policies\nsuch as <b>SCHED_OTHER</b> probably indicates a design\nmistake. The problem is that if a thread operating under\nsuch a policy is scheduled off the CPU while it holds a spin\nlock, then other threads will waste time spinning on the\nlock until the lock holder is once more rescheduled and\nreleases the lock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If threads\ncreate a deadlock situation while employing spin locks,\nthose threads will spin forever consuming CPU time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">User-space spin\nlocks are <i>not</i> applicable as a general locking\nsolution. They are, by definition, prone to priority\ninversion and unbounded spin times. A programmer using spin\nlocks must be exceptionally careful not only in the code,\nbut also in terms of system configuration, thread placement,\nand priority assignment.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/pthread_mutex_init\">pthread_mutex_init(3)</a>,\n<a href=\"https://man.page/3/pthread_mutex_lock\">pthread_mutex_lock(3)</a>, <a href=\"https://man.page/3/pthread_spin_lock\">pthread_spin_lock(3)</a>,\n<a href=\"https://man.page/3/pthread_spin_unlock\">pthread_spin_unlock(3)</a>, <a href=\"https://man.page/7/pthreads\">pthreads(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}