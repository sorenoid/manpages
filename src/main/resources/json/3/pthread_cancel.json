{"name":"pthread_cancel","description":"pthread_cancel - send a cancellation request to a thread","body":"\n\n<h1 align=\"center\">PTHREAD_CANCEL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthread_cancel\n- send a cancellation request to a thread</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;pthread.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npthread_cancel(pthread_t</b> <i>thread</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Compile and\nlink with <i>-pthread</i>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_cancel</b>() function sends a cancellation\nrequest to the thread <i>thread</i>. Whether and when the\ntarget thread reacts to the cancellation request depends on\ntwo attributes that are under the control of that thread:\nits cancelability <i>state</i> and <i>type</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\nthread&rsquo;s cancelability state, determined by\n<a href=\"https://man.page/3/pthread_setcancelstate\">pthread_setcancelstate(3)</a>, can be <i>enabled</i> (the\ndefault for new threads) or <i>disabled</i>. If a thread has\ndisabled cancellation, then a cancellation request remains\nqueued until the thread enables cancellation. If a thread\nhas enabled cancellation, then its cancelability type\ndetermines when cancellation occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\nthread&rsquo;s cancellation type, determined by\n<a href=\"https://man.page/3/pthread_setcanceltype\">pthread_setcanceltype(3)</a>, may be either\n<i>asynchronous</i> or <i>deferred</i> (the default for new\nthreads). Asynchronous cancelability means that the thread\ncan be canceled at any time (usually immediately, but the\nsystem does not guarantee this). Deferred cancelability\nmeans that cancellation will be delayed until the thread\nnext calls a function that is a <i>cancellation point</i>. A\nlist of functions that are or may be cancellation points is\nprovided in <a href=\"https://man.page/7/pthreads\">pthreads(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a\ncancellation requested is acted on, the following steps\noccur for <i>thread</i> (in this order):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Cancellation clean-up handlers are popped (in the\nreverse of the order in which they were pushed) and called.\n(See <a href=\"https://man.page/3/pthread_cleanup_push\">pthread_cleanup_push(3)</a>.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Thread-specific data destructors are called, in an\nunspecified order. (See <a href=\"https://man.page/3/pthread_key_create\">pthread_key_create(3)</a>.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>The thread is terminated. (See\n<a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>.)</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above steps\nhappen asynchronously with respect to the\n<b>pthread_cancel</b>() call; the return status of\n<b>pthread_cancel</b>() merely informs the caller whether\nthe cancellation request was successfully queued.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After a\ncanceled thread has terminated, a join with that thread\nusing <a href=\"https://man.page/3/pthread_join\">pthread_join(3)</a> obtains <b>PTHREAD_CANCELED</b>\nas the thread&rsquo;s exit status. (Joining with a thread is\nthe only way to know that cancellation has completed.)</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>pthread_cancel</b>() returns 0; on error, it returns a\nnonzero error number.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><b>ESRCH</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"67%\">\n\n\n<p style=\"margin-top: 1em\">No thread with the ID\n<i>thread</i> could be found.</p></td>\n<td width=\"11%\">\n</td></tr>\n</table>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3429281.png\" alt=\"Image grohtml-3429281.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux,\ncancellation is implemented using signals. Under the NPTL\nthreading implementation, the first real-time signal (i.e.,\nsignal 32) is used for this purpose. On LinuxThreads, the\nsecond real-time signal is used, if real-time signals are\navailable, otherwise <b>SIGUSR2</b> is used.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow creates a thread and then cancels it. The main thread\njoins with the canceled thread to check that its exit status\nwas <b>PTHREAD_CANCELED</b>. The following shell session\nshows what happens when we run the program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ ./a.out <br>\nthread_func(): started; cancellation disabled <br>\nmain(): sending cancellation request <br>\nthread_func(): about to enable cancellation <br>\nmain(): thread was canceled</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;pthread.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;errno.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nhandle_error_en(en, msg) \\ <br>\ndo { errno = en; perror(msg); exit(EXIT_FAILURE); } while\n(0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void *\n<br>\nthread_func(void *ignored_argument) <br>\n{ <br>\nint s;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Disable\ncancellation for a while, so that we don't <br>\nimmediately react to a cancellation request */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_setcancelstate&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;thread_func():\nstarted; cancellation disabled\\n&quot;); <br>\nsleep(5); <br>\nprintf(&quot;thread_func(): about to enable\ncancellation\\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_setcancelstate&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* sleep() is a\ncancellation point */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sleep(1000); /*\nShould get canceled while we sleep */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Should never\nget here */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;thread_func():\nnot canceled!\\n&quot;); <br>\nreturn NULL; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(void) <br>\n{ <br>\npthread_t thr; <br>\nvoid *res; <br>\nint s;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Start a\nthread and then send it a cancellation request */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_create(&amp;thr, NULL, &amp;thread_func, NULL); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_create&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sleep(2); /*\nGive thread a chance to get started */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;main():\nsending cancellation request\\n&quot;); <br>\ns = pthread_cancel(thr); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_cancel&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Join with\nthread to see what its exit status was */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_join(thr, &amp;res); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_join&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (res ==\nPTHREAD_CANCELED) <br>\nprintf(&quot;main(): thread was canceled\\n&quot;); <br>\nelse <br>\nprintf(&quot;main(): thread wasn't canceled (shouldn't\nhappen!)\\n&quot;); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/pthread_cleanup_push\">pthread_cleanup_push(3)</a>,\n<a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, <a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>,\n<a href=\"https://man.page/3/pthread_join\">pthread_join(3)</a>, <a href=\"https://man.page/3/pthread_key_create\">pthread_key_create(3)</a>,\n<a href=\"https://man.page/3/pthread_setcancelstate\">pthread_setcancelstate(3)</a>,\n<a href=\"https://man.page/3/pthread_setcanceltype\">pthread_setcanceltype(3)</a>,\n<a href=\"https://man.page/3/pthread_testcancel\">pthread_testcancel(3)</a>, <a href=\"https://man.page/7/pthreads\">pthreads(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}