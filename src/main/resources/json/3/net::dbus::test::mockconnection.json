{"name":"net::dbus::test::mockconnection","description":"Net::DBus::Test::MockConnection - Fake a connection to the bus unit testing","body":"\n\n<h1 align=\"center\">Net::DBus::Test::MockConnection</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Test::MockConnection\n- Fake a connection to the bus unit testing</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Net::DBus;\n<br>\nmy $bus = Net::DBus-&gt;test <br>\n# Register a service, and the objec to be tested <br>\nuse MyObject <br>\nmy $service =\n$bus-&gt;export_service(&quot;org.example.MyService&quot;);\n<br>\nmy $object = MyObject-&gt;new($service); <br>\n# Acquire the service &amp; do tests <br>\nmy $remote_service =\n$bus-&gt;get_service('org.example.MyService'); <br>\nmy $remote_object =\n$service-&gt;get_object(&quot;/org/example/MyObjct&quot;);\n<br>\n# This traverses the mock connection, eventually <br>\n# invoking 'testSomething' on the $object above. <br>\n$remote_object-&gt;testSomething()</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This object\nprovides a fake implementation of the\nNet::DBus::Binding::Connection enabling a pure\n&rsquo;in-memory&rsquo; message bus to be mocked up. This is\nintended to facilitate creation of unit tests for services\nwhich would otherwise need to call out to other object on a\nlive message bus. It is used as a companion to the\nNet::DBus::Test::MockObject module which is how fake objects\nare to be provided on the fake bus.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $con =\nNet::DBus::Test::MockConnection-&gt;<b>new()</b></p>\n\n<p style=\"margin-left:17%;\">Create a new mock connection\nobject instance. It is not usually necessary to create\ninstances of this object directly, instead the\n&quot;test&quot; method on the Net::DBus object can be used\nto get a handle to a test bus.</p>\n\n<p style=\"margin-left:11%;\">$con-&gt;send($message)</p>\n\n<p style=\"margin-left:17%;\">Send a message over the mock\nconnection. If the message is a method call, it will be\ndispatched straight to any corresponding mock object\nregistered. If the message is an error or method return it\nwill be made available as a return value for the\n&quot;send_with_reply_and_block&quot; method. If the message\nis a signal it will be queued up for processing by the\n&quot;dispatch&quot; method.</p>\n\n\n<p style=\"margin-left:11%;\">$bus-&gt;request_name($service_name)</p>\n\n<p style=\"margin-left:17%;\">Pretend to send a request to\nthe bus registering the well known name specified in the\n$service_name parameter. In reality this is just a no-op\ngiving the impression that the name was successfully\nregistered.</p>\n\n<p style=\"margin-left:11%;\">my $reply =\n$con-&gt;send_with_reply_and_block($msg)</p>\n\n<p style=\"margin-left:17%;\">Send a message over the mock\nconnection and wait for a reply. The $msg should be an\ninstance of\n&quot;Net::DBus::Binding::Message::MethodCall&quot; and the\nreturn $reply will be an instance of\n&quot;Net::DBus::Binding::Message::MethodReturn&quot;. It is\nalso possible that an error will be thrown, with the thrown\nerror being blessed into the &quot;Net::DBus::Error&quot;\nclass.</p>\n\n<p style=\"margin-left:11%;\">$con-&gt;dispatch;</p>\n\n<p style=\"margin-left:17%;\">Dispatches any pending messages\nin the incoming queue to their message handlers. This method\nshould be called by test suites whenever they anticipate\nthat there are pending signals to be dealt with.</p>\n\n\n<p style=\"margin-left:11%;\">$con-&gt;add_filter($coderef);</p>\n\n<p style=\"margin-left:17%;\">Adds a filter to the connection\nwhich will be invoked whenever a message is received. The\n$coderef should be a reference to a subroutine, which\nreturns a true value if the message should be filtered out,\nor a false value if the normal message dispatch should be\nperformed.</p>\n\n<p style=\"margin-left:11%;\">$bus-&gt;add_match($rule)</p>\n\n<p style=\"margin-left:17%;\">Register a signal match rule\nwith the bus controller, allowing matching broadcast signals\nto routed to this client. In reality this is just a no-op\ngiving the impression that the match was successfully\nregistered.</p>\n\n\n<p style=\"margin-left:11%;\">$bus-&gt;remove_match($rule)</p>\n\n<p style=\"margin-left:17%;\">Unregister a signal match rule\nwith the bus controller, preventing further broadcast\nsignals being routed to this client. In reality this is just\na no-op giving the impression that the match was\nsuccessfully unregistered.</p>\n\n\n<p style=\"margin-left:11%;\">$con-&gt;register_object_path($path,\n\\&amp;handler)</p>\n\n<p style=\"margin-left:17%;\">Registers a handler for\nmessages whose path matches that specified in the $path\nparameter. The supplied code reference will be invoked with\ntwo parameters, the connection object on which the message\nwas received, and the message to be processed (an instance\nof the &quot;Net::DBus::Binding::Message&quot; class).</p>\n\n\n<p style=\"margin-left:11%;\">$con-&gt;register_fallback($path,\n\\&amp;handler)</p>\n\n<p style=\"margin-left:17%;\">Registers a handler for\nmessages whose path starts with the prefix specified in the\n$path parameter. The supplied code reference will be invoked\nwith two parameters, the connection object on which the\nmessage was received, and the message to be processed (an\ninstance of the &quot;Net::DBus::Binding::Message&quot;\nclass).</p>\n\n\n<p style=\"margin-left:11%;\">$con-&gt;unregister_object_path($path)</p>\n\n<p style=\"margin-left:17%;\">Unregisters the handler\nassociated with the object path $path. The handler would\npreviously have been registered with the\n&quot;register_object_path&quot; or\n&quot;register_fallback&quot; methods.</p>\n\n<p style=\"margin-left:11%;\">my $msg =\n$con-&gt;make_error_message($replyto, $name,\n$description)</p>\n\n<p style=\"margin-left:17%;\">Creates a new message,\nrepresenting an error which occurred during the handling of\nthe method call object passed in as the $replyto parameter.\nThe $name parameter is the formal name of the error\ncondition, while the $description is a short piece of text\ngiving more specific information on the error.</p>\n\n<p style=\"margin-left:11%;\">my $call =\n$con-&gt;make_method_call_message( $service_name,\n$object_path, <br>\n$interface, $method_name);</p>\n\n<p style=\"margin-left:17%;\">Create a message representing a\ncall on the object located at the path $object_path within\nthe client owning the well-known name given by\n$service_name. The method to be invoked has the name\n$method_name within the interface specified by the\n$interface parameter.</p>\n\n<p style=\"margin-left:11%;\">my $msg =\n$con-&gt;make_method_return_message($replyto)</p>\n\n<p style=\"margin-left:17%;\">Create a message representing a\nreply to the method call message passed in the $replyto\nparameter.</p>\n\n<p style=\"margin-left:11%;\">my $msg =\n$con-&gt;make_signal_message($object_path, $interface, <br>\n$signal_name);</p>\n\n<p style=\"margin-left:17%;\">Creates a new message,\nrepresenting a signal [to be] emitted by the object located\nunder the path given by the $object_path parameter. The name\nof the signal is given by the $signal_name parameter, and is\nscoped to the interface given by the $interface\nparameter.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">It\ndoesn&rsquo;t completely replicate the <small>API</small> of\nNet::DBus::Binding::Connection, merely enough to make the\nhigh level bindings work in a test scenario.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel P.\nBerrange</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2005-2009 Daniel P. Berrange</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus,\nNet::DBus::Test::MockObject, Net::DBus::Binding::Connection,\n&lt;http://www.mockobjects.com/Faq.html&gt;</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}