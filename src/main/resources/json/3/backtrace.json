{"name":"backtrace","description":"backtrace, backtrace_symbols, backtrace_symbols_fd - support for application self-debugging","body":"\n\n<h1 align=\"center\">BACKTRACE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">backtrace,\nbacktrace_symbols, backtrace_symbols_fd - support for\napplication self-debugging</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;execinfo.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nbacktrace(void **</b><i>buffer</i><b>, int</b>\n<i>size</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n**backtrace_symbols(void *const *</b><i>buffer</i><b>,\nint</b> <i>size</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nbacktrace_symbols_fd(void *const *</b><i>buffer</i><b>,\nint</b> <i>size</i><b>, int</b> <i>fd</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>backtrace</b>()\nreturns a backtrace for the calling program, in the array\npointed to by <i>buffer</i>. A backtrace is the series of\ncurrently active function calls for the program. Each item\nin the array pointed to by <i>buffer</i> is of type\n<i>void&nbsp;*</i>, and is the return address from the\ncorresponding stack frame. The <i>size</i> argument\nspecifies the maximum number of addresses that can be stored\nin <i>buffer</i>. If the backtrace is larger than\n<i>size</i>, then the addresses corresponding to the\n<i>size</i> most recent function calls are returned; to\nobtain the complete backtrace, make sure that <i>buffer</i>\nand <i>size</i> are large enough.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Given the set\nof addresses returned by <b>backtrace</b>() in\n<i>buffer</i>, <b>backtrace_symbols</b>() translates the\naddresses into an array of strings that describe the\naddresses symbolically. The <i>size</i> argument specifies\nthe number of addresses in <i>buffer</i>. The symbolic\nrepresentation of each address consists of the function name\n(if this can be determined), a hexadecimal offset into the\nfunction, and the actual return address (in hexadecimal).\nThe address of the array of string pointers is returned as\nthe function result of <b>backtrace_symbols</b>(). This\narray is <a href=\"https://man.page/3/malloc\">malloc(3)</a>ed by <b>backtrace_symbols</b>(),\nand must be freed by the caller. (The strings pointed to by\nthe array of pointers need not and should not be freed.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>backtrace_symbols_fd</b>()\ntakes the same <i>buffer</i> and <i>size</i> arguments as\n<b>backtrace_symbols</b>(), but instead of returning an\narray of strings to the caller, it writes the strings, one\nper line, to the file descriptor <i>fd</i>.\n<b>backtrace_symbols_fd</b>() does not call\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>, and so can be employed in situations where\nthe latter function might fail, but see NOTES.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>backtrace</b>()\nreturns the number of addresses returned in <i>buffer</i>,\nwhich is not greater than <i>size</i>. If the return value\nis less than <i>size</i>, then the full backtrace was\nstored; if it is equal to <i>size</i>, then it may have been\ntruncated, in which case the addresses of the oldest stack\nframes are not returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>backtrace_symbols</b>() returns a pointer to the array\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>ed by the call; on error, NULL is\nreturned.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>backtrace</b>(),\n<b>backtrace_symbols</b>(), and\n<b>backtrace_symbols_fd</b>() are provided in glibc since\nversion 2.1.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3349191.png\" alt=\"Image grohtml-3349191.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare GNU extensions.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nmake some assumptions about how a function&rsquo;s return\naddress is stored on the stack. Note the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Omission of the frame pointers (as implied by any of\n<a href=\"https://man.page/1/gcc\">gcc(1)</a>&rsquo;s nonzero optimization levels) may cause\nthese assumptions to be violated.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Inlined functions do not have stack frames.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Tail-call optimization causes one stack frame to replace\nanother.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>backtrace</b>() and <b>backtrace_symbols_fd</b>()\ndon&rsquo;t call <b>malloc</b>() explicitly, but they are\npart of <i>libgcc</i>, which gets loaded dynamically when\nfirst used. Dynamic loading usually triggers a call to\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>. If you need certain calls to these two\nfunctions to not allocate memory (in signal handlers, for\nexample), you need to make sure <i>libgcc</i> is loaded\nbeforehand.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The symbol\nnames may be unavailable without the use of special linker\noptions. For systems using the GNU linker, it is necessary\nto use the <i>-rdynamic</i> linker option. Note that names\nof &quot;static&quot; functions are not exposed, and\nwon&rsquo;t be available in the backtrace.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>backtrace</b>() and\n<b>backtrace_symbols</b>(). The following shell session\nshows what we might see when running the program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cc\n-rdynamic prog.c -o prog</b> <br>\n$ <b>./prog 3</b> <br>\nbacktrace() returned 8 addresses <br>\n./prog(myfunc3+0x5c) [0x80487f0] <br>\n./prog [0x8048871] <br>\n./prog(myfunc+0x21) [0x8048894] <br>\n./prog(myfunc+0x1a) [0x804888d] <br>\n./prog(myfunc+0x1a) [0x804888d] <br>\n./prog(main+0x65) [0x80488fb] <br>\n/lib/libc.so.6(__libc_start_main+0xdc) [0xb7e38f9c] <br>\n./prog [0x8048711]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;execinfo.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nBT_BUF_SIZE 100</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">void <br>\nmyfunc3(void) <br>\n{ <br>\nint nptrs; <br>\nvoid *buffer[BT_BUF_SIZE]; <br>\nchar **strings;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">nptrs =\nbacktrace(buffer, BT_BUF_SIZE); <br>\nprintf(&quot;backtrace() returned %d addresses\\n&quot;,\nnptrs);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* The call\nbacktrace_symbols_fd(buffer, nptrs, STDOUT_FILENO) <br>\nwould produce similar output to the following: */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">strings =\nbacktrace_symbols(buffer, nptrs); <br>\nif (strings == NULL) { <br>\nperror(&quot;backtrace_symbols&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (int j = 0;\nj &lt; nptrs; j++) <br>\nprintf(&quot;%s\\n&quot;, strings[j]);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">free(strings);\n<br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void /*\n&quot;static&quot; means don't export the symbol... */ <br>\nmyfunc2(void) <br>\n{ <br>\nmyfunc3(); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">void <br>\nmyfunc(int ncalls) <br>\n{ <br>\nif (ncalls &gt; 1) <br>\nmyfunc(ncalls - 1); <br>\nelse <br>\nmyfunc2(); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nif (argc != 2) { <br>\nfprintf(stderr, &quot;%s num-calls\\n&quot;, argv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">myfunc(atoi(argv[1]));\n<br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/addr2line\">addr2line(1)</a>,\n<a href=\"https://man.page/1/gcc\">gcc(1)</a>, <a href=\"https://man.page/1/gdb\">gdb(1)</a>, <a href=\"https://man.page/1/ld\">ld(1)</a>,\n<a href=\"https://man.page/3/dlopen\">dlopen(3)</a>, <a href=\"https://man.page/3/malloc\">malloc(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}