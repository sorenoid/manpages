{"name":"html::entities","body":"\n\n<h1 align=\"center\">HTML::Entities</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::Entities\n- Encode or decode strings with HTML entities</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTML::Entities; <br>\n$a = &quot;V&amp;aring;re norske tegn b&amp;oslash;r\n&amp;#230res&quot;; <br>\ndecode_entities($a); <br>\nencode_entities($a, &quot;\\200-\\377&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nthis:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$input =\n&quot;vis-&Atilde;&nbsp;-vis Beyonc&Atilde;&copy;'s\nna&Atilde;&macr;ve\\npapier-m&Atilde;&cent;ch&Atilde;&copy;\nr&Atilde;&copy;sum&Atilde;&copy;&quot;; <br>\nprint encode_entities($input), &quot;\\n&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Prints this\nout:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">vis-&amp;agrave;-vis\nBeyonc&amp;eacute;'s na&amp;iuml;ve <br>\npapier-m&amp;acirc;ch&amp;eacute;\nr&amp;eacute;sum&amp;eacute;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\ndeals with encoding and decoding of strings with\n<small>HTML</small> character entities. The module provides\nthe following functions: <br>\ndecode_entities( $string, ... )</p>\n\n<p style=\"margin-left:17%;\">This routine replaces\n<small>HTML</small> entities found in the $string with the\ncorresponding Unicode character. Unrecognized entities are\nleft alone.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If multiple\nstrings are provided as argument they are each decoded\nseparately and the same number of strings are returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If called in\nvoid context the arguments are decoded in-place.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This routine is\nexported by default.</p>\n\n<p style=\"margin-left:11%;\">_decode_entities( $string,\n\\%entity2char ) <br>\n_decode_entities( $string, \\%entity2char, $expand_prefix\n)</p>\n\n<p style=\"margin-left:17%;\">This will in-place replace\n<small>HTML</small> entities in $string. The %entity2char\nhash must be provided. Named entities not found in the\n%entity2char hash are left alone. Numeric entities are\nexpanded unless their value overflow.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The keys in\n%entity2char are the entity names to be expanded and their\nvalues are what they should expand into. The values do not\nhave to be single character strings. If a key has\n&quot;;&quot; as suffix, then occurrences in $string are\nonly expanded if properly terminated with &quot;;&quot;.\nEntities without &quot;;&quot; will be expanded regardless\nof how they are terminated for compatibility with how common\nbrowsers treat entities in the Latin-1 range.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n$expand_prefix is <small>TRUE</small> then entities without\ntrailing &quot;;&quot; in %entity2char will even be expanded\nas a prefix of a longer unrecognized name. The longest\nmatching name in %entity2char will be used. This is mainly\npresent for compatibility with an <small>MSIE</small>\nmisfeature.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$string =\n&quot;foo&amp;nbspbar&quot;; <br>\n_decode_entities($string, { nb =&gt; &quot;@&quot;, nbsp\n=&gt; &quot;\\xA0&quot; }, 1); <br>\nprint $string; # will print\n&quot;foo&Acirc;&nbsp;bar&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This routine is\nexported by default.</p>\n\n<p style=\"margin-left:11%;\">encode_entities( $string ) <br>\nencode_entities( $string, $unsafe_chars )</p>\n\n<p style=\"margin-left:17%;\">This routine replaces unsafe\ncharacters in $string with their entity representation. A\nsecond argument can be given to specify which characters to\nconsider unsafe. The unsafe characters is specified using\nthe regular expression character class syntax (what you find\nwithin brackets in regular expressions).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default set\nof characters to encode are control chars, high-bit chars,\nand the &quot;&lt;&quot;, &quot;&amp;&quot;,\n&quot;&gt;&quot;, &quot;'&quot; and &quot;&quot;&quot;\ncharacters. But this, for example, would encode <i>just</i>\nthe &quot;&lt;&quot;, &quot;&amp;&quot;, &quot;&gt;&quot;,\nand &quot;&quot;&quot; characters:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$encoded =\nencode_entities($input, '&lt;&gt;&amp;&quot;');</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">and this would\nonly encode non-plain <small>ASCII:</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$encoded =\nencode_entities($input, '^\\n\\x20-\\x25\\x27-\\x7e');</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This routine is\nexported by default.</p>\n\n<p style=\"margin-left:11%;\">encode_entities_numeric(\n$string ) <br>\nencode_entities_numeric( $string, $unsafe_chars )</p>\n\n<p style=\"margin-left:17%;\">This routine works just like\nencode_entities, except that the replacement entities are\nalways &quot;&amp;#x<i>hexnum</i>;&quot; and never\n&quot;&amp;<i>entname</i>;&quot;. For example,\n&quot;encode_entities(&quot;r\\xF4le&quot;)&quot; returns\n&quot;r&amp;ocirc;le&quot;, but\n&quot;encode_entities_numeric(&quot;r\\xF4le&quot;)&quot;\nreturns &quot;r&amp;#xF4;le&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This routine is\n<i>not</i> exported by default. But you can always export it\nwith &quot;use HTML::Entities\nqw(encode_entities_numeric);&quot; or even &quot;use\nHTML::Entities qw(:DEFAULT\nencode_entities_numeric);&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All these\nroutines modify the string passed as the first argument, if\ncalled in a void context. In scalar and array contexts, the\nencoded or decoded string is returned (without changing the\ninput string).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you prefer\nnot to import these routines into your namespace, you can\ncall them as:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTML::Entities (); <br>\n$decoded = HTML::Entities::decode($a); <br>\n$encoded = HTML::Entities::encode($a); <br>\n$encoded = HTML::Entities::encode_numeric($a);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The module can\nalso export the %char2entity and the %entity2char hashes,\nwhich contain the mapping from all characters to the\ncorresponding entities (and vice versa, respectively).</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1995-2006 Gisle Aas. All rights reserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}