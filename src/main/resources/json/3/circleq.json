{"name":"circleq","description":"CIRCLEQ_EMPTY,\nCIRCLEQ_ENTRY, CIRCLEQ_FIRST, CIRCLEQ_FOREACH,\nCIRCLEQ_FOREACH_REVERSE, CIRCLEQ_HEAD,\nCIRCLEQ_HEAD_INITIALIZER, CIRCLEQ_INIT,\nCIRCLEQ_INSERT_AFTER, CIRCLEQ_INSERT_BEFORE,\nCIRCLEQ_INSERT_HEAD, CIRCLEQ_INSERT_TAIL, CIRCLEQ_LAST,\nCIRCLEQ_LOOP_NEXT, CIRCLEQ_LOOP_PREV, CIRCLEQ_NEXT,\nCIRCLEQ_PREV, CIRCLEQ_REMOVE - implementation of a doubly\nlinked circular queue","body":"\n\n<h1 align=\"center\">CIRCLEQ</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">CIRCLEQ_EMPTY,\nCIRCLEQ_ENTRY, CIRCLEQ_FIRST, CIRCLEQ_FOREACH,\nCIRCLEQ_FOREACH_REVERSE, CIRCLEQ_HEAD,\nCIRCLEQ_HEAD_INITIALIZER, CIRCLEQ_INIT,\nCIRCLEQ_INSERT_AFTER, CIRCLEQ_INSERT_BEFORE,\nCIRCLEQ_INSERT_HEAD, CIRCLEQ_INSERT_TAIL, CIRCLEQ_LAST,\nCIRCLEQ_LOOP_NEXT, CIRCLEQ_LOOP_PREV, CIRCLEQ_NEXT,\nCIRCLEQ_PREV, CIRCLEQ_REMOVE - implementation of a doubly\nlinked circular queue</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/queue.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nCIRCLEQ_EMPTY(CIRCLEQ_HEAD *</b><i>head</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CIRCLEQ_ENTRY(TYPE);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct TYPE\n*CIRCLEQ_FIRST(CIRCLEQ_HEAD *</b><i>head</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CIRCLEQ_FOREACH(struct\nTYPE *</b><i>var</i><b>, CIRCLEQ_HEAD *</b><i>head</i><b>,\n<br>\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CIRCLEQ_FOREACH_REVERSE(struct\nTYPE *</b><i>var</i><b>, CIRCLEQ_HEAD *</b><i>head</i><b>,\n<br>\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CIRCLEQ_HEAD(HEADNAME,\nTYPE);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CIRCLEQ_HEAD\nCIRCLEQ_HEAD_INITIALIZER(CIRCLEQ_HEAD</b>\n<i>head</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nCIRCLEQ_INIT(CIRCLEQ_HEAD *</b><i>head</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nCIRCLEQ_INSERT_AFTER(CIRCLEQ_HEAD *</b><i>head</i><b>,\nstruct TYPE *</b><i>listelm</i><b>, <br>\nstruct TYPE *</b><i>elm</i><b>, CIRCLEQ_ENTRY</b>\n<i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nCIRCLEQ_INSERT_BEFORE(CIRCLEQ_HEAD *</b><i>head</i><b>,\nstruct TYPE *</b><i>listelm</i><b>, <br>\nstruct TYPE *</b><i>elm</i><b>, CIRCLEQ_ENTRY</b>\n<i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nCIRCLEQ_INSERT_HEAD(CIRCLEQ_HEAD *</b><i>head</i><b>, struct\nTYPE *</b><i>elm</i><b>, <br>\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nCIRCLEQ_INSERT_TAIL(CIRCLEQ_HEAD *</b><i>head</i><b>, struct\nTYPE *</b><i>elm</i><b>, <br>\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct TYPE\n*CIRCLEQ_LAST(CIRCLEQ_HEAD *</b><i>head</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nCIRCLEQ_LOOP_NEXT(CIRCLEQ_HEAD *</b><i>head</i><b>, struct\nTYPE *</b><i>elm</i><b>, <br>\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nCIRCLEQ_LOOP_PREV(CIRCLEQ_HEAD *</b><i>head</i><b>, struct\nTYPE *</b><i>elm</i><b>, <br>\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct TYPE\n*CIRCLEQ_NEXT(struct TYPE *</b><i>elm</i><b>,\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct TYPE\n*CIRCLEQ_PREV(struct TYPE *</b><i>elm</i><b>,\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nCIRCLEQ_REMOVE(CIRCLEQ_HEAD *</b><i>head</i><b>, struct TYPE\n*</b><i>elm</i><b>, <br>\nCIRCLEQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These macros\ndefine and operate on doubly linked circular queues.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the macro\ndefinitions, <i>TYPE</i> is the name of a user-defined\nstructure, that must contain a field of type\n<i>CIRCLEQ_ENTRY</i>, named <i>NAME</i>. The argument\n<i>HEADNAME</i> is the name of a user-defined structure that\nmust be declared using the macro <b>CIRCLEQ_HEAD</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A circular\nqueue is headed by a structure defined by the\n<b>CIRCLEQ_HEAD</b>() macro. This structure contains a pair\nof pointers, one to the first element in the circular queue\nand the other to the last element in the circular queue. The\nelements are doubly linked so that an arbitrary element can\nbe removed without traversing the circular queue. New\nelements can be added to the circular queue after an\nexisting element, before an existing element, at the head of\nthe circular queue, or at the end of the circular queue. A\n<i>CIRCLEQ_HEAD</i> structure is declared as follows:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">CIRCLEQ_HEAD(HEADNAME,\nTYPE) head;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where <i>struct\nHEADNAME</i> is the structure to be defined, and <i>struct\nTYPE</i> is the type of the elements to be linked into the\ncircular queue. A pointer to the head of the circular queue\ncan later be declared as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct HEADNAME\n*headp;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(The names\n<i>head</i> and <i>headp</i> are user selectable.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_HEAD_INITIALIZER</b>() evaluates to an\ninitializer for the circular queue <i>head</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_EMPTY</b>() evaluates to true if there are no\nitems on the circular queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_ENTRY</b>() declares a structure that connects\nthe elements in the circular queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_FIRST</b>() returns the first item on the\ncircular queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_FOREACH</b>() traverses the circular queue\nreferenced by <i>head</i> in the forward direction,\nassigning each element in turn to <i>var</i>. <i>var</i> is\nset to <i>&amp;head</i> if the loop completes normally, or\nif there were no elements.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_FOREACH_REVERSE</b>() traverses the circular\nqueue referenced by <i>head</i> in the reverse direction,\nassigning each element in turn to <i>var</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_INIT</b>() initializes the circular queue\nreferenced by <i>head</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_INSERT_HEAD</b>() inserts the new element\n<i>elm</i> at the head of the circular queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_INSERT_TAIL</b>() inserts the new element\n<i>elm</i> at the end of the circular queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_INSERT_AFTER</b>() inserts the new element\n<i>elm</i> after the element <i>listelm</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_INSERT_BEFORE</b>() inserts the new element\n<i>elm</i> before the element <i>listelm</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_LAST</b>() returns the last item on the circular\nqueue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_NEXT</b>() returns the next item on the circular\nqueue, or <i>&amp;head</i> if this item is the last one.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_PREV</b>() returns the previous item on the\ncircular queue, or <i>&amp;head</i> if this item is the\nfirst one.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_LOOP_NEXT</b>() returns the next item on the\ncircular queue. If <i>elm</i> is the last element on the\ncircular queue, the first element is returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_LOOP_PREV</b>() returns the previous item on the\ncircular queue. If <i>elm</i> is the first element on the\ncircular queue, the last element is returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>CIRCLEQ_REMOVE</b>() removes the element <i>elm</i> from\nthe circular queue.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CIRCLEQ_EMPTY</b>()\nreturns nonzero if the queue is empty, and zero if the queue\ncontains at least one entry.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CIRCLEQ_FIRST</b>(),\n<b>CIRCLEQ_LAST</b>(), <b>CIRCLEQ_NEXT</b>(), and\n<b>CIRCLEQ_PREV</b>() return a pointer to the first, last,\nnext or previous <i>TYPE</i> structure, respectively.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CIRCLEQ_HEAD_INITIALIZER</b>()\nreturns an initializer that can be assigned to the queue\n<i>head</i>.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Not in POSIX.1,\nPOSIX.1-2001 or POSIX.1-2008. Present on the BSDs (CIRCLEQ\nmacros first appeared in 4.4BSD).</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macros\n<b>CIRCLEQ_FOREACH</b>() and\n<b>CIRCLEQ_FOREACH_REVERSE</b>() don&rsquo;t allow\n<i>var</i> to be removed or freed within the loop, as it\nwould interfere with the traversal. The macros\n<b>CIRCLEQ_FOREACH_SAFE</b>() and\n<b>CIRCLEQ_FOREACH_REVERSE_SAFE</b>(), which are present on\nthe BSDs but are not present in glibc, fix this limitation\nby allowing <i>var</i> to safely be removed from the list\nand freed from within the loop without interfering with the\ntraversal.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stddef.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;sys/queue.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">struct entry {\n<br>\nint data; <br>\nCIRCLEQ_ENTRY(entry) entries; /* Queue. */ <br>\n};</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">CIRCLEQ_HEAD(circlehead,\nentry);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(void) <br>\n{ <br>\nstruct entry *n1, *n2, *n3, *np; <br>\nstruct circlehead head; /* Queue head. */ <br>\nint i;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">CIRCLEQ_INIT(&amp;head);\n/* Initialize the queue. */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">n1 =\nmalloc(sizeof(struct entry)); /* Insert at the head. */ <br>\nCIRCLEQ_INSERT_HEAD(&amp;head, n1, entries);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">n1 =\nmalloc(sizeof(struct entry)); /* Insert at the tail. */ <br>\nCIRCLEQ_INSERT_TAIL(&amp;head, n1, entries);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">n2 =\nmalloc(sizeof(struct entry)); /* Insert after. */ <br>\nCIRCLEQ_INSERT_AFTER(&amp;head, n1, n2, entries);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">n3 =\nmalloc(sizeof(struct entry)); /* Insert before. */ <br>\nCIRCLEQ_INSERT_BEFORE(&amp;head, n2, n3, entries);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">CIRCLEQ_REMOVE(&amp;head,\nn2, entries); /* Deletion. */ <br>\nfree(n2); <br>\n/* Forward traversal. */ <br>\ni = 0; <br>\nCIRCLEQ_FOREACH(np, &amp;head, entries) <br>\nnp-&gt;data = i++; <br>\n/* Reverse traversal. */ <br>\nCIRCLEQ_FOREACH_REVERSE(np, &amp;head, entries) <br>\nprintf(&quot;%i\\n&quot;, np-&gt;data); <br>\n/* Queue deletion. */ <br>\nn1 = CIRCLEQ_FIRST(&amp;head); <br>\nwhile (n1 != (void *)&amp;head) { <br>\nn2 = CIRCLEQ_NEXT(n1, entries); <br>\nfree(n1); <br>\nn1 = n2; <br>\n} <br>\nCIRCLEQ_INIT(&amp;head);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/insque\">insque(3)</a>,\n<a href=\"https://man.page/7/queue\">queue(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}