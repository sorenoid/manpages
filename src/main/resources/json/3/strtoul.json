{"name":"strtoul","body":"\n\n<h1 align=\"center\">STRTOUL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">strtoul,\nstrtoull, strtouq - convert a string to an unsigned long\ninteger</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdlib.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned\nlong strtoul(const char *</b><i>nptr</i><b>, char\n**</b><i>endptr</i><b>, int</b> <i>base</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned\nlong long strtoull(const char *</b><i>nptr</i><b>, char\n**</b><i>endptr</i><b>, <br>\nint</b> <i>base</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strtoull</b>():</p>\n\n<p style=\"margin-left:17%;\">_ISOC99_SOURCE || <br>\n|| /* Glibc versions &lt;= 2.19: */ _SVID_SOURCE ||\n_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtoul</b>() function converts the initial part of the\nstring in <i>nptr</i> to an <i>unsigned long</i> value\naccording to the given <i>base</i>, which must be between 2\nand 36 inclusive, or be the special value 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The string may\nbegin with an arbitrary amount of white space (as determined\nby <a href=\"https://man.page/3/isspace\">isspace(3)</a>) followed by a single optional '+' or\n'-' sign. If <i>base</i> is zero or 16, the string may then\ninclude a &quot;0x&quot; prefix, and the number will be read\nin base 16; otherwise, a zero <i>base</i> is taken as 10\n(decimal) unless the next character is '0', in which case it\nis taken as 8 (octal).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The remainder\nof the string is converted to an <i>unsigned long</i> value\nin the obvious manner, stopping at the first character which\nis not a valid digit in the given base. (In bases above 10,\nthe letter 'A' in either uppercase or lowercase represents\n10, 'B' represents 11, and so forth, with 'Z' representing\n35.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>endptr</i> is not NULL, <b>strtoul</b>() stores the\naddress of the first invalid character in <i>*endptr</i>. If\nthere were no digits at all, <b>strtoul</b>() stores the\noriginal value of <i>nptr</i> in <i>*endptr</i> (and returns\n0). In particular, if <i>*nptr</i> is not '\\0' but\n<i>**endptr</i> is '\\0' on return, the entire string is\nvalid.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtoull</b>() function works just like the\n<b>strtoul</b>() function but returns an <i>unsigned long\nlong</i> value.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtoul</b>() function returns either the result of the\nconversion or, if there was a leading minus sign, the\nnegation of the result of the conversion represented as an\nunsigned value, unless the original (nonnegated) value would\noverflow; in the latter case, <b>strtoul</b>() returns\n<b>ULONG_MAX</b> and sets <i>errno</i> to <b>ERANGE</b>.\nPrecisely the same holds for <b>strtoull</b>() (with\n<b>ULLONG_MAX</b> instead of <b>ULONG_MAX</b>).</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">(not in C99) The given\n<i>base</i> contains an unsupported value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ERANGE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The resulting value was out of range.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nimplementation may also set <i>errno</i> to <b>EINVAL</b> in\ncase no conversion was performed (no digits seen, and 0\nreturned).</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3433511.png\" alt=\"Image grohtml-3433511.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strtoul</b>():\nPOSIX.1-2001, POSIX.1-2008, C89, C99 SVr4.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strtoull</b>():\nPOSIX.1-2001, POSIX.1-2008, C99.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since\n<b>strtoul</b>() can legitimately return 0 or\n<b>ULONG_MAX</b> (<b>ULLONG_MAX</b> for <b>strtoull</b>())\non both success and failure, the calling program should set\n<i>errno</i> to 0 before the call, and then determine if an\nerror occurred by checking whether <i>errno</i> has a\nnonzero value after the call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In locales\nother than the &quot;C&quot; locale, other strings may be\naccepted. (For example, the thousands separator of the\ncurrent locale may be supported.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">BSD also\nhas</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>u_quad_t\nstrtouq(const char *</b><i>nptr</i><b>, char\n**</b><i>endptr</i><b>, int</b> <i>base</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">with completely\nanalogous definition. Depending on the wordsize of the\ncurrent architecture, this may be equivalent to\n<b>strtoull</b>() or to <b>strtoul</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Negative values\nare considered valid input and are silently converted to the\nequivalent <i>unsigned long</i> value.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the example\non the <a href=\"https://man.page/3/strtol\">strtol(3)</a> manual page; the use of the\nfunctions described in this manual page is similar.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/a64l\">a64l(3)</a>,\n<a href=\"https://man.page/3/atof\">atof(3)</a>, <a href=\"https://man.page/3/atoi\">atoi(3)</a>, <a href=\"https://man.page/3/atol\">atol(3)</a>,\n<a href=\"https://man.page/3/strtod\">strtod(3)</a>, <a href=\"https://man.page/3/strtol\">strtol(3)</a>, <a href=\"https://man.page/3/strtoumax\">strtoumax(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}