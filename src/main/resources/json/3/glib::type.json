{"name":"glib::type","description":"Glib::Type -\nUtilities for dealing with the GLib Type system\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nThis package\ndefines several utilities for dealing with the GLib type\nsystem from Perl. Because of some fundamental differences in\nhow the GLib and Perl type systems work, a fair amount of\nthe binding magic leaks out, and you can find most of that\nin the &quot;Glib::Type::register*&quot; functions, which\nregister new types with the GLib type system.\n\nMost of the\nrest of the functions provide introspection functionality,\nsuch as listing properties and values and other cool stuff\nthat is used mainly by Glib&rsquo;s reference documentation\ngenerator (see Glib::GenPod).\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<b>list =\nGlib::Type-&gt;list_ancestors ($package)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p>$package (string)</td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\nList the\nancestry of <i>package</i>, as seen by the GLib type system.\nThe important difference is that GLib&rsquo;s type system\nimplements only single inheritance, whereas Perl&rsquo;s\n@ISA allows multiple inheritance.\n\nThis returns\nthe package names of the ancestral types in reverse order,\nwith the root of the tree at the end of the list.\n\nSee also\nlist_interfaces ().\n\n<b>list =\nGlib::Type-&gt;list_interfaces ($package)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">$package (string)</td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\nList the\nGInterfaces implemented by the type associated with\n<i>package</i>. The interfaces are returned as package\nnames.\n\n<b>list =\nGlib::Type-&gt;list_signals ($package)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">$package (string)</td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\nList the\nsignals associated with <i>package</i>. This lists only the\nsignals for <i>package</i>, not any of its parents. The\nsignals are returned as a list of anonymous hashes which\nmirror the GSignalQuery structure defined in the C\n<small>API</small> reference. <br>\n- signal_id\n\n<p style=\"margin-left:17%;\">Numeric id of a signal.\nIt&rsquo;s rare that you&rsquo;ll need this in\nGtk2-Perl.\n\n<p style=\"margin-left:11%;\">- signal_name\n\n<p style=\"margin-left:17%;\">Name of the signal, such as\nwhat you&rsquo;d pass to &quot;signal_connect&quot;.\n\n<p style=\"margin-left:11%;\">- itype\n\n<p style=\"margin-left:17%;\">The <i>i</i>nstance <i>type</i>\nfor which this signal is defined.\n\n<p style=\"margin-left:11%;\">- signal_flags\n\n<p style=\"margin-left:17%;\">GSignalFlags describing this\nsignal.\n\n<p style=\"margin-left:11%;\">- return_type\n\n<p style=\"margin-left:17%;\">The return type expected from\nhandlers for this signal. If undef or not present, then no\nreturn is expected. The type name is mapped to the\ncorresponding Perl package name if it is known, otherwise\nyou get the raw C name straight from GLib.\n\n<p style=\"margin-left:11%;\">- param_types\n\n<p style=\"margin-left:17%;\">The types of the parameters\npassed to any callbacks connected to the emission of this\nsignal. The list does not include the instance, which is\nalways first, and the user data from\n&quot;signal_connect&quot;, which is always last (unless the\nsignal was connected with &quot;swap&quot;, which swaps the\ninstance and the data, but you get the point).\n\n<b>list =\nGlib::Type-&gt;list_values ($package)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p>$package (string)</td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\nList the legal\nvalues for the GEnum or GFlags type <i>$package</i>. If\n<i>$package</i> is not a package name registered with the\nbindings, this name is passed on to\n<b>g_type_from_name()</b> to see if it&rsquo;s a registered\nflags or enum type that just hasn&rsquo;t been registered\nwith the bindings by\n&quot;gperl_register_fundamental()&quot; (see Glib::xsapi).\nIf <i>$package</i> is not the name of an enum or flags type,\nthis function will croak.\n\nReturns the\nvalues as a list of hashes, one hash for each value,\ncontaining the value, name and nickname, eg. for\nGlib::SignalFlags\n\n{ value =&gt;\n8, <br>\nname =&gt; 'G_SIGNAL_NO_RECURSE', <br>\nnick =&gt; 'no-recurse' <br>\n}\n\n<b>string =\nGlib::Type-&gt;package_from_cname ($cname)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">$cname (string)</td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\nConvert a C\ntype name to the corresponding Perl package name. If no\npackage is registered to that type, returns\n<i>$cname</i>.\n\n\n<b>Glib::Type-&gt;register\n($parent_class, $new_class, ...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\">$parent_class (package) type\nfrom which to derive</td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>$new_class (package) name of new type</td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>... (list) arguments for creation</td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\nRegister a new\ntype with the GLib type system.\n\nThis is a\ntraffic-cop function. If <i>$parent_type</i> derives from\nGlib::Object, this passes the arguments through to\n&quot;register_object&quot;. If <i>$parent_type</i> is\nGlib::Flags or Glib::Enum, this strips <i>$parent_type</i>\nand passes the remaining args on to\n&quot;register_enum&quot; or &quot;register_flags&quot;. See\nthose functions&rsquo; documentation for more\ninformation.\n\n\n<b>Glib::Type-&gt;register_enum\n($name, ...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">$name (string) package name for\nnew enum type</td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p>... (list) new enum&rsquo;s values; see description.</td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\nRegister and\ninitialize a new Glib::Enum type with the provided\n&quot;values&quot;. This creates a type properly registered\nGLib so that it can be used for property and signal\nparameter or return types created with\n&quot;Glib::Type-&gt;register&quot; or\n&quot;Glib::Object::Subclass&quot;.\n\nThe list of\nvalues is used to create the &quot;nicknames&quot; that are\nused in general Perl code; the actual numeric values used at\nthe C level are automatically assigned, starting with 1. If\nyou need to specify a particular numeric value for a nick,\nuse an array reference containing the nickname and the\nnumeric value, instead. You may mix and match the two\nstyles.\n\n\nGlib::Type-&gt;register_enum\n('MyFoo::Bar', <br>\n'value-one', # assigned 1 <br>\n'value-two', # assigned 2 <br>\n['value-three' =&gt; 15 ], # explicit 15 <br>\n['value-four' =&gt; 35 ], # explicit 35 <br>\n'value-five', # assigned 5 <br>\n);\n\nIf you use the\narray-ref form, beware: the code performs no validation for\nunique values.\n\n\n<b>Glib::Type-&gt;register_flags\n($name, ...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p style=\"margin-top: 1em\">$name (string) package name of\nnew flags type</td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>... (list) flag values, see discussion.</td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\nRegister and\ninitialize a new Glib::Flags type with the provided\n&quot;values&quot;. This creates a type properly registered\nGLib so that it can be used for property and signal\nparameter or return types created with\n&quot;Glib::Type-&gt;register&quot; or\n&quot;Glib::Object::Subclass&quot;.\n\nThe list of\nvalues is used to create the &quot;nicknames&quot; that are\nused in general Perl code; the actual numeric values used at\nthe C level are automatically assigned, of the form\n1&lt;&lt;i, starting with i = 0. If you need to specify a\nparticular numeric value for a nick, use an array reference\ncontaining the nickname and the numeric value, instead. You\nmay mix and match the two styles.\n\n\nGlib::Type-&gt;register_flags\n('MyFoo::Baz', <br>\n'value-one', # assigned 1&lt;&lt;0 <br>\n'value-two', # assigned 1&lt;&lt;1 <br>\n['value-three' =&gt; 1&lt;&lt;10 ], # explicit 1&lt;&lt;10\n<br>\n['value-four' =&gt; 0x0f ], # explicit 0x0f <br>\n'value-five', # assigned 1&lt;&lt;4 <br>\n);\n\nIf you use the\narray-ref form, beware: the code performs no validation for\nunique values.\n\n\n<b>Glib::Type-&gt;register_object\n($parent_package, $new_package, ...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$parent_package (string) name of\nthe parent package, which must be a derivative of\nGlib::Object. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$new_package (string) usually __PACKAGE__.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>... (list) key/value pairs controlling how the class is\ncreated. </td></tr>\n</table>\n\nRegister\n<i>new_package</i> as an officially GLib-sanctioned\nderivative of the (GObject derivative)\n<i>parent_package</i>. This automatically sets up an @ISA\nentry for you, and creates a new GObjectClass under the\nhood.\n\nThe <i>...</i>\nparameters are key/value pairs, currently supporting: <br>\nsignals =&gt; <small>HASHREF</small>\n\n<p style=\"margin-left:17%;\">The &quot;signals&quot; key\ncontains a hash, keyed by signal names, which describes how\nto set up the signals for <i>new_package</i>.\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the value is\na code reference, the named signal must exist somewhere in\n<i>parent_package</i> or its ancestry; the code reference\nwill be used to override the class closure for that signal.\nThis is the officially sanctioned way to override virtual\nmethods on Glib::Objects. The value may be a string rather\nthan a code reference, in which case the sub with that name\nin <i>new_package</i> will be used. (The function should not\nbe inherited.)\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the value is\na hash reference, the key will be the name of a new signal\ncreated with the properties defined in the hash. All of the\nproperties are optional, with defaults provided: <br>\nclass_closure =&gt; subroutine or undef\n\n<p style=\"margin-left:23%;\">Use this code reference (or sub\nname) as the class closure (that is, the default handler for\nthe signal). If not specified,\n&quot;do_<i>signal_name</i>&quot;, in the current package,\nis used.\n\n<p style=\"margin-left:17%;\">return_type =&gt; package name\nor undef\n\n<p style=\"margin-left:23%;\">Return type for the signal. If\nnot specified, then the signal has void return.\n\n<p style=\"margin-left:17%;\">param_types =&gt;\n<small>ARRAYREF</small>\n\n<p style=\"margin-left:23%;\">Reference to a list of\nparameter types (package names), <i>omitting the instance\nand user data</i>. Callbacks connected to this signal will\nreceive the instance object as the first argument, followed\nby arguments with the types listed here, and finally by any\nuser data that was supplied when the callback was connected.\nNot specifying this key is equivalent to supplying an empty\nlist, which actually means instance and maybe data.\n\n<p style=\"margin-left:17%;\">flags =&gt;\nGlib::SignalFlags\n\n<p style=\"margin-left:23%;\">Flags describing this\nsignal&rsquo;s properties. See the GObject C\n<small>API</small> reference&rsquo; description of\nGSignalFlags for a complete description.\n\n<p style=\"margin-left:17%;\">accumulator =&gt; subroutine or\nundef\n\n<p style=\"margin-left:23%;\">The signal accumulator is a\nspecial callback that can be used to collect return values\nof the various callbacks that are called during a signal\nemission. Generally, you can omit this parameter; custom\naccumulators are used to do things like stopping signal\npropagation by return value or creating a list of returns,\netc. See &quot; <small>SIGNALS&quot;</small> in\nGlib::Object::Subclass for details.\n\n<p style=\"margin-left:11%;\">properties =&gt;\n<small>ARRAYREF</small>\n\n<p style=\"margin-left:17%;\">Array of Glib::ParamSpec\nobjects, each describing an object property to add to the\nnew type. These properties are available for use by all code\nthat can access the object, regardless of implementation\nlanguage. See Glib::ParamSpec. This list may be empty; if it\nis not, the functions &quot;GET_PROPERTY&quot; and\n&quot;SET_PROPERTY&quot; in <i>$new_package</i> will be\ncalled to get and set the values. Note that an object\nproperty is just a mechanism for getting and setting a value\n-- it implies no storage. As a convenience, however,\nGlib::Object provides fallbacks for\n<small>GET_PROPERTY</small> and <small>SET_PROPERTY</small>\nwhich use the property nicknames as hash keys in the object\nvariable for storage.\n\n<p style=\"margin-left:17%; margin-top: 1em\">Additionally,\nyou may specify ParamSpecs as a describing hash instead of\nas an object; this form allows you to supply explicit getter\nand setter methods which override <small>GET_PROPERY</small>\nand <small>SET_PROPERTY.</small> The getter and setter are\nboth optional in the hash form. For example:\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Glib::Type-&gt;register_object\n('Glib::Object', 'Foo', <br>\nproperties =&gt; [ <br>\n# specified normally <br>\nGlib::ParamSpec-&gt;string (...), <br>\n# specified explicitly <br>\n{ <br>\npspec =&gt; Glib::ParamSpec-&gt;int (...), <br>\nset =&gt; sub { <br>\nmy ($object, $newval) = @_; <br>\n... <br>\n}, <br>\nget =&gt; sub { <br>\nmy ($object) = @_; <br>\n... <br>\nreturn $val; <br>\n}, <br>\n}, <br>\n] <br>\n);\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can mix the\ntwo declaration styles as you like. If you have individual\n&quot;get_foo&quot; / &quot;set_foo&quot; methods with the\noperative code for a property then the\n&quot;get&quot;/&quot;set&quot; form is a handy way to go\nstraight to that.\n\n<p style=\"margin-left:11%;\">interfaces =&gt;\n<small>ARRAYREF</small>\n\n<p style=\"margin-left:17%;\">Array of interface package\nnames that the new object implements. Interfaces are the\nGObject way of doing multiple inheritance, thus, in Perl,\nthe package names will be prepended to @ISA and certain\ninheritable and overrideable <small>ALLCAPS</small> methods\nwill automatically be called whenever needed. Which methods\nexactly depends on the interface -- Gtk2::CellEditable for\nexample uses <small>START_EDITING, EDITING_DONE,</small> and\n<small>REMOVE_WIDGET.</small>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\nGlib\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\nCopyright (C)\n2003-2011 by the gtk2-perl team.\n\nThis software\nis licensed under the <small>LGPL.</small> See Glib for a\nfull notice.","body":"\n\n<h1 align=\"center\">Glib::Type</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Type -\nUtilities for dealing with the GLib Type system</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This package\ndefines several utilities for dealing with the GLib type\nsystem from Perl. Because of some fundamental differences in\nhow the GLib and Perl type systems work, a fair amount of\nthe binding magic leaks out, and you can find most of that\nin the &quot;Glib::Type::register*&quot; functions, which\nregister new types with the GLib type system.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most of the\nrest of the functions provide introspection functionality,\nsuch as listing properties and values and other cool stuff\nthat is used mainly by Glib&rsquo;s reference documentation\ngenerator (see Glib::GenPod).</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>list =\nGlib::Type-&gt;list_ancestors ($package)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p>$package (string)</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">List the\nancestry of <i>package</i>, as seen by the GLib type system.\nThe important difference is that GLib&rsquo;s type system\nimplements only single inheritance, whereas Perl&rsquo;s\n@ISA allows multiple inheritance.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This returns\nthe package names of the ancestral types in reverse order,\nwith the root of the tree at the end of the list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See also\nlist_interfaces ().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>list =\nGlib::Type-&gt;list_interfaces ($package)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">$package (string)</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">List the\nGInterfaces implemented by the type associated with\n<i>package</i>. The interfaces are returned as package\nnames.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>list =\nGlib::Type-&gt;list_signals ($package)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">$package (string)</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">List the\nsignals associated with <i>package</i>. This lists only the\nsignals for <i>package</i>, not any of its parents. The\nsignals are returned as a list of anonymous hashes which\nmirror the GSignalQuery structure defined in the C\n<small>API</small> reference. <br>\n- signal_id</p>\n\n<p style=\"margin-left:17%;\">Numeric id of a signal.\nIt&rsquo;s rare that you&rsquo;ll need this in\nGtk2-Perl.</p>\n\n<p style=\"margin-left:11%;\">- signal_name</p>\n\n<p style=\"margin-left:17%;\">Name of the signal, such as\nwhat you&rsquo;d pass to &quot;signal_connect&quot;.</p>\n\n<p style=\"margin-left:11%;\">- itype</p>\n\n<p style=\"margin-left:17%;\">The <i>i</i>nstance <i>type</i>\nfor which this signal is defined.</p>\n\n<p style=\"margin-left:11%;\">- signal_flags</p>\n\n<p style=\"margin-left:17%;\">GSignalFlags describing this\nsignal.</p>\n\n<p style=\"margin-left:11%;\">- return_type</p>\n\n<p style=\"margin-left:17%;\">The return type expected from\nhandlers for this signal. If undef or not present, then no\nreturn is expected. The type name is mapped to the\ncorresponding Perl package name if it is known, otherwise\nyou get the raw C name straight from GLib.</p>\n\n<p style=\"margin-left:11%;\">- param_types</p>\n\n<p style=\"margin-left:17%;\">The types of the parameters\npassed to any callbacks connected to the emission of this\nsignal. The list does not include the instance, which is\nalways first, and the user data from\n&quot;signal_connect&quot;, which is always last (unless the\nsignal was connected with &quot;swap&quot;, which swaps the\ninstance and the data, but you get the point).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>list =\nGlib::Type-&gt;list_values ($package)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p>$package (string)</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">List the legal\nvalues for the GEnum or GFlags type <i>$package</i>. If\n<i>$package</i> is not a package name registered with the\nbindings, this name is passed on to\n<b>g_type_from_name()</b> to see if it&rsquo;s a registered\nflags or enum type that just hasn&rsquo;t been registered\nwith the bindings by\n&quot;gperl_register_fundamental()&quot; (see Glib::xsapi).\nIf <i>$package</i> is not the name of an enum or flags type,\nthis function will croak.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returns the\nvalues as a list of hashes, one hash for each value,\ncontaining the value, name and nickname, eg. for\nGlib::SignalFlags</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">{ value =&gt;\n8, <br>\nname =&gt; 'G_SIGNAL_NO_RECURSE', <br>\nnick =&gt; 'no-recurse' <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>string =\nGlib::Type-&gt;package_from_cname ($cname)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">$cname (string)</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Convert a C\ntype name to the corresponding Perl package name. If no\npackage is registered to that type, returns\n<i>$cname</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glib::Type-&gt;register\n($parent_class, $new_class, ...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\">$parent_class (package) type\nfrom which to derive</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>$new_class (package) name of new type</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>... (list) arguments for creation</p></td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Register a new\ntype with the GLib type system.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is a\ntraffic-cop function. If <i>$parent_type</i> derives from\nGlib::Object, this passes the arguments through to\n&quot;register_object&quot;. If <i>$parent_type</i> is\nGlib::Flags or Glib::Enum, this strips <i>$parent_type</i>\nand passes the remaining args on to\n&quot;register_enum&quot; or &quot;register_flags&quot;. See\nthose functions&rsquo; documentation for more\ninformation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glib::Type-&gt;register_enum\n($name, ...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">$name (string) package name for\nnew enum type</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p>... (list) new enum&rsquo;s values; see description.</p></td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Register and\ninitialize a new Glib::Enum type with the provided\n&quot;values&quot;. This creates a type properly registered\nGLib so that it can be used for property and signal\nparameter or return types created with\n&quot;Glib::Type-&gt;register&quot; or\n&quot;Glib::Object::Subclass&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The list of\nvalues is used to create the &quot;nicknames&quot; that are\nused in general Perl code; the actual numeric values used at\nthe C level are automatically assigned, starting with 1. If\nyou need to specify a particular numeric value for a nick,\nuse an array reference containing the nickname and the\nnumeric value, instead. You may mix and match the two\nstyles.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Type-&gt;register_enum\n('MyFoo::Bar', <br>\n'value-one', # assigned 1 <br>\n'value-two', # assigned 2 <br>\n['value-three' =&gt; 15 ], # explicit 15 <br>\n['value-four' =&gt; 35 ], # explicit 35 <br>\n'value-five', # assigned 5 <br>\n);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you use the\narray-ref form, beware: the code performs no validation for\nunique values.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glib::Type-&gt;register_flags\n($name, ...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p style=\"margin-top: 1em\">$name (string) package name of\nnew flags type</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>... (list) flag values, see discussion.</p></td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Register and\ninitialize a new Glib::Flags type with the provided\n&quot;values&quot;. This creates a type properly registered\nGLib so that it can be used for property and signal\nparameter or return types created with\n&quot;Glib::Type-&gt;register&quot; or\n&quot;Glib::Object::Subclass&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The list of\nvalues is used to create the &quot;nicknames&quot; that are\nused in general Perl code; the actual numeric values used at\nthe C level are automatically assigned, of the form\n1&lt;&lt;i, starting with i = 0. If you need to specify a\nparticular numeric value for a nick, use an array reference\ncontaining the nickname and the numeric value, instead. You\nmay mix and match the two styles.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Type-&gt;register_flags\n('MyFoo::Baz', <br>\n'value-one', # assigned 1&lt;&lt;0 <br>\n'value-two', # assigned 1&lt;&lt;1 <br>\n['value-three' =&gt; 1&lt;&lt;10 ], # explicit 1&lt;&lt;10\n<br>\n['value-four' =&gt; 0x0f ], # explicit 0x0f <br>\n'value-five', # assigned 1&lt;&lt;4 <br>\n);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you use the\narray-ref form, beware: the code performs no validation for\nunique values.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glib::Type-&gt;register_object\n($parent_package, $new_package, ...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$parent_package (string) name of\nthe parent package, which must be a derivative of\nGlib::Object.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$new_package (string) usually __PACKAGE__.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>... (list) key/value pairs controlling how the class is\ncreated.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Register\n<i>new_package</i> as an officially GLib-sanctioned\nderivative of the (GObject derivative)\n<i>parent_package</i>. This automatically sets up an @ISA\nentry for you, and creates a new GObjectClass under the\nhood.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>...</i>\nparameters are key/value pairs, currently supporting: <br>\nsignals =&gt; <small>HASHREF</small></p>\n\n<p style=\"margin-left:17%;\">The &quot;signals&quot; key\ncontains a hash, keyed by signal names, which describes how\nto set up the signals for <i>new_package</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the value is\na code reference, the named signal must exist somewhere in\n<i>parent_package</i> or its ancestry; the code reference\nwill be used to override the class closure for that signal.\nThis is the officially sanctioned way to override virtual\nmethods on Glib::Objects. The value may be a string rather\nthan a code reference, in which case the sub with that name\nin <i>new_package</i> will be used. (The function should not\nbe inherited.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the value is\na hash reference, the key will be the name of a new signal\ncreated with the properties defined in the hash. All of the\nproperties are optional, with defaults provided: <br>\nclass_closure =&gt; subroutine or undef</p>\n\n<p style=\"margin-left:23%;\">Use this code reference (or sub\nname) as the class closure (that is, the default handler for\nthe signal). If not specified,\n&quot;do_<i>signal_name</i>&quot;, in the current package,\nis used.</p>\n\n<p style=\"margin-left:17%;\">return_type =&gt; package name\nor undef</p>\n\n<p style=\"margin-left:23%;\">Return type for the signal. If\nnot specified, then the signal has void return.</p>\n\n<p style=\"margin-left:17%;\">param_types =&gt;\n<small>ARRAYREF</small></p>\n\n<p style=\"margin-left:23%;\">Reference to a list of\nparameter types (package names), <i>omitting the instance\nand user data</i>. Callbacks connected to this signal will\nreceive the instance object as the first argument, followed\nby arguments with the types listed here, and finally by any\nuser data that was supplied when the callback was connected.\nNot specifying this key is equivalent to supplying an empty\nlist, which actually means instance and maybe data.</p>\n\n<p style=\"margin-left:17%;\">flags =&gt;\nGlib::SignalFlags</p>\n\n<p style=\"margin-left:23%;\">Flags describing this\nsignal&rsquo;s properties. See the GObject C\n<small>API</small> reference&rsquo; description of\nGSignalFlags for a complete description.</p>\n\n<p style=\"margin-left:17%;\">accumulator =&gt; subroutine or\nundef</p>\n\n<p style=\"margin-left:23%;\">The signal accumulator is a\nspecial callback that can be used to collect return values\nof the various callbacks that are called during a signal\nemission. Generally, you can omit this parameter; custom\naccumulators are used to do things like stopping signal\npropagation by return value or creating a list of returns,\netc. See &quot; <small>SIGNALS&quot;</small> in\nGlib::Object::Subclass for details.</p>\n\n<p style=\"margin-left:11%;\">properties =&gt;\n<small>ARRAYREF</small></p>\n\n<p style=\"margin-left:17%;\">Array of Glib::ParamSpec\nobjects, each describing an object property to add to the\nnew type. These properties are available for use by all code\nthat can access the object, regardless of implementation\nlanguage. See Glib::ParamSpec. This list may be empty; if it\nis not, the functions &quot;GET_PROPERTY&quot; and\n&quot;SET_PROPERTY&quot; in <i>$new_package</i> will be\ncalled to get and set the values. Note that an object\nproperty is just a mechanism for getting and setting a value\n-- it implies no storage. As a convenience, however,\nGlib::Object provides fallbacks for\n<small>GET_PROPERTY</small> and <small>SET_PROPERTY</small>\nwhich use the property nicknames as hash keys in the object\nvariable for storage.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Additionally,\nyou may specify ParamSpecs as a describing hash instead of\nas an object; this form allows you to supply explicit getter\nand setter methods which override <small>GET_PROPERY</small>\nand <small>SET_PROPERTY.</small> The getter and setter are\nboth optional in the hash form. For example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Glib::Type-&gt;register_object\n('Glib::Object', 'Foo', <br>\nproperties =&gt; [ <br>\n# specified normally <br>\nGlib::ParamSpec-&gt;string (...), <br>\n# specified explicitly <br>\n{ <br>\npspec =&gt; Glib::ParamSpec-&gt;int (...), <br>\nset =&gt; sub { <br>\nmy ($object, $newval) = @_; <br>\n... <br>\n}, <br>\nget =&gt; sub { <br>\nmy ($object) = @_; <br>\n... <br>\nreturn $val; <br>\n}, <br>\n}, <br>\n] <br>\n);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can mix the\ntwo declaration styles as you like. If you have individual\n&quot;get_foo&quot; / &quot;set_foo&quot; methods with the\noperative code for a property then the\n&quot;get&quot;/&quot;set&quot; form is a handy way to go\nstraight to that.</p>\n\n<p style=\"margin-left:11%;\">interfaces =&gt;\n<small>ARRAYREF</small></p>\n\n<p style=\"margin-left:17%;\">Array of interface package\nnames that the new object implements. Interfaces are the\nGObject way of doing multiple inheritance, thus, in Perl,\nthe package names will be prepended to @ISA and certain\ninheritable and overrideable <small>ALLCAPS</small> methods\nwill automatically be called whenever needed. Which methods\nexactly depends on the interface -- Gtk2::CellEditable for\nexample uses <small>START_EDITING, EDITING_DONE,</small> and\n<small>REMOVE_WIDGET.</small></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2003-2011 by the gtk2-perl team.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis licensed under the <small>LGPL.</small> See Glib for a\nfull notice.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}