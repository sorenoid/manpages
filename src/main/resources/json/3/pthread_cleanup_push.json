{"name":"pthread_cleanup_push","body":"\n\n<h1 align=\"center\">PTHREAD_CLEANUP_PUSH</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthread_cleanup_push,\npthread_cleanup_pop - push and pop thread cancellation\nclean-up handlers</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;pthread.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\npthread_cleanup_push(void (*</b><i>routine</i><b>)(void *),\n<br>\nvoid *</b><i>arg</i><b>); <br>\nvoid pthread_cleanup_pop(int</b> <i>execute</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Compile and\nlink with <i>-pthread</i>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nmanipulate the calling thread&rsquo;s stack of\nthread-cancellation clean-up handlers. A clean-up handler is\na function that is automatically executed when a thread is\ncanceled (or in various other circumstances described\nbelow); it might, for example, unlock a mutex so that it\nbecomes available to other threads in the process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_cleanup_push</b>() function pushes <i>routine</i>\nonto the top of the stack of clean-up handlers. When\n<i>routine</i> is later invoked, it will be given <i>arg</i>\nas its argument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_cleanup_pop</b>() function removes the routine at\nthe top of the stack of clean-up handlers, and optionally\nexecutes it if <i>execute</i> is nonzero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A cancellation\nclean-up handler is popped from the stack and executed in\nthe following circumstances:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>When a thread is canceled, all of the stacked clean-up\nhandlers are popped and executed in the reverse of the order\nin which they were pushed onto the stack.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>When a thread terminates by calling\n<a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>, all clean-up handlers are executed\nas described in the preceding point. (Clean-up handlers are\n<i>not</i> called if the thread terminates by performing a\n<i>return</i> from the thread start function.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>When a thread calls <b>pthread_cleanup_pop</b>() with a\nnonzero <i>execute</i> argument, the top-most clean-up\nhandler is popped and executed.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 permits\n<b>pthread_cleanup_push</b>() and\n<b>pthread_cleanup_pop</b>() to be implemented as macros\nthat expand to text containing '<b>{</b>' and '<b>}</b>',\nrespectively. For this reason, the caller must ensure that\ncalls to these functions are paired within the same\nfunction, and at the same lexical nesting level. (In other\nwords, a clean-up handler is established only during the\nexecution of a specified section of code.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Calling\n<a href=\"https://man.page/3/longjmp\">longjmp(3)</a> (<a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a>) produces undefined\nresults if any call has been made to\n<b>pthread_cleanup_push</b>() or\n<b>pthread_cleanup_pop</b>() without the matching call of\nthe pair since the jump buffer was filled by\n<a href=\"https://man.page/3/setjmp\">setjmp(3)</a> (<a href=\"https://man.page/3/sigsetjmp\">sigsetjmp(3)</a>). Likewise, calling\n<a href=\"https://man.page/3/longjmp\">longjmp(3)</a> (<a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a>) from inside a\nclean-up handler produces undefined results unless the jump\nbuffer was also filled by <a href=\"https://man.page/3/setjmp\">setjmp(3)</a>\n(<a href=\"https://man.page/3/sigsetjmp\">sigsetjmp(3)</a>) inside the handler.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\ndo not return a value.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are no\nerrors.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3312511.png\" alt=\"Image grohtml-3312511.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux, the\n<b>pthread_cleanup_push</b>() and\n<b>pthread_cleanup_pop</b>() functions <i>are</i>\nimplemented as macros that expand to text containing\n'<b>{</b>' and '<b>}</b>', respectively. This means that\nvariables declared within the scope of paired calls to these\nfunctions will be visible within only that scope.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 says\nthat the effect of using <i>return</i>, <i>break</i>,\n<i>continue</i>, or <i>goto</i> to prematurely leave a block\nbracketed <b>pthread_cleanup_push</b>() and\n<b>pthread_cleanup_pop</b>() is undefined. Portable\napplications should avoid doing this.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow provides a simple example of the use of the functions\ndescribed in this page. The program creates a thread that\nexecutes a loop bracketed by <b>pthread_cleanup_push</b>()\nand <b>pthread_cleanup_pop</b>(). This loop increments a\nglobal variable, <i>cnt</i>, once each second. Depending on\nwhat command-line arguments are supplied, the main thread\nsends the other thread a cancellation request, or sets a\nglobal variable that causes the other thread to exit its\nloop and terminate normally (by doing a <i>return</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing shell session, the main thread sends a\ncancellation request to the other thread:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./a.out</b> <br>\nNew thread started <br>\ncnt = 0 <br>\ncnt = 1 <br>\nCanceling thread <br>\nCalled clean-up handler <br>\nThread was canceled; cnt = 0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From the above,\nwe see that the thread was canceled, and that the\ncancellation clean-up handler was called and it reset the\nvalue of the global variable <i>cnt</i> to 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the next\nrun, the main program sets a global variable that causes\nother thread to terminate normally:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\nx</b> <br>\nNew thread started <br>\ncnt = 0 <br>\ncnt = 1 <br>\nThread terminated normally; cnt = 2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From the above,\nwe see that the clean-up handler was not executed (because\n<i>cleanup_pop_arg</i> was 0), and therefore the value of\n<i>cnt</i> was not reset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the next\nrun, the main program sets a global variable that causes the\nother thread to terminate normally, and supplies a nonzero\nvalue for <i>cleanup_pop_arg</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out x\n1</b> <br>\nNew thread started <br>\ncnt = 0 <br>\ncnt = 1 <br>\nCalled clean-up handler <br>\nThread terminated normally; cnt = 0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the above,\nwe see that although the thread was not canceled, the\nclean-up handler was executed, because the argument given to\n<b>pthread_cleanup_pop</b>() was nonzero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;pthread.h&gt; <br>\n#include &lt;sys/types.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;errno.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nhandle_error_en(en, msg) \\ <br>\ndo { errno = en; perror(msg); exit(EXIT_FAILURE); } while\n(0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int done\n= 0; <br>\nstatic int cleanup_pop_arg = 0; <br>\nstatic int cnt = 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\ncleanup_handler(void *arg) <br>\n{ <br>\nprintf(&quot;Called clean-up handler\\n&quot;); <br>\ncnt = 0; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void *\n<br>\nthread_start(void *arg) <br>\n{ <br>\ntime_t start, curr;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;New\nthread started\\n&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthread_cleanup_push(cleanup_handler,\nNULL);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">curr = start =\ntime(NULL);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">while (!done) {\n<br>\npthread_testcancel(); /* A cancellation point */ <br>\nif (curr &lt; time(NULL)) { <br>\ncurr = time(NULL); <br>\nprintf(&quot;cnt = %d\\n&quot;, cnt); /* A cancellation point\n*/ <br>\ncnt++; <br>\n} <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthread_cleanup_pop(cleanup_pop_arg);\n<br>\nreturn NULL; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\npthread_t thr; <br>\nint s; <br>\nvoid *res;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_create(&amp;thr, NULL, thread_start, NULL); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_create&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sleep(2); /*\nAllow new thread to run a while */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &gt;\n1) { <br>\nif (argc &gt; 2) <br>\ncleanup_pop_arg = atoi(argv[2]); <br>\ndone = 1;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">} else { <br>\nprintf(&quot;Canceling thread\\n&quot;); <br>\ns = pthread_cancel(thr); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_cancel&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\npthread_join(thr, &amp;res); <br>\nif (s != 0) <br>\nhandle_error_en(s, &quot;pthread_join&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (res ==\nPTHREAD_CANCELED) <br>\nprintf(&quot;Thread was canceled; cnt = %d\\n&quot;, cnt);\n<br>\nelse <br>\nprintf(&quot;Thread terminated normally; cnt = %d\\n&quot;,\ncnt); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/pthread_cancel\">pthread_cancel(3)</a>,\n<a href=\"https://man.page/3/pthread_cleanup_push_defer_np\">pthread_cleanup_push_defer_np(3)</a>,\n<a href=\"https://man.page/3/pthread_setcancelstate\">pthread_setcancelstate(3)</a>,\n<a href=\"https://man.page/3/pthread_testcancel\">pthread_testcancel(3)</a>, <a href=\"https://man.page/7/pthreads\">pthreads(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}