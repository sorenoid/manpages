{"name":"random_r","description":"random_r, srandom_r, initstate_r, setstate_r - reentrant random number generator","body":"\n\n<h1 align=\"center\">RANDOM_R</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">random_r,\nsrandom_r, initstate_r, setstate_r - reentrant random number\ngenerator</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdlib.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nrandom_r(struct random_data *</b><i>buf</i><b>, int32_t\n*</b><i>result</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsrandom_r(unsigned int</b> <i>seed</i><b>, struct\nrandom_data *</b><i>buf</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ninitstate_r(unsigned int</b> <i>seed</i><b>, char\n*</b><i>statebuf</i><b>, <br>\nsize_t</b> <i>statelen</i><b>, struct random_data\n*</b><i>buf</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsetstate_r(char *</b><i>statebuf</i><b>, struct random_data\n*</b><i>buf</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>random_r</b>(),\n<b>srandom_r</b>(), <b>initstate_r</b>(),\n<b>setstate_r</b>():</p>\n\n<p style=\"margin-left:17%;\">/* Glibc since 2.19: */\n_DEFAULT_SOURCE <br>\n|| /* Glibc versions &lt;= 2.19: */ _SVID_SOURCE ||\n_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare the reentrant equivalents of the functions described in\n<a href=\"https://man.page/3/random\">random(3)</a>. They are suitable for use in multithreaded\nprograms where each thread needs to obtain an independent,\nreproducible sequence of random numbers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>random_r</b>() function is like <a href=\"https://man.page/3/random\">random(3)</a>, except\nthat instead of using state information maintained in a\nglobal variable, it uses the state information in the\nargument pointed to by <i>buf</i>, which must have been\npreviously initialized by <b>initstate_r</b>(). The\ngenerated random number is returned in the argument\n<i>result</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>srandom_r</b>() function is like <a href=\"https://man.page/3/srandom\">srandom(3)</a>,\nexcept that it initializes the seed for the random number\ngenerator whose state is maintained in the object pointed to\nby <i>buf</i>, which must have been previously initialized\nby <b>initstate_r</b>(), instead of the seed associated with\nthe global state variable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>initstate_r</b>() function is like <a href=\"https://man.page/3/initstate\">initstate(3)</a>\nexcept that it initializes the state in the object pointed\nto by <i>buf</i>, rather than initializing the global state\nvariable. Before calling this function, the <i>buf.state</i>\nfield must be initialized to NULL. The <b>initstate_r</b>()\nfunction records a pointer to the <i>statebuf</i> argument\ninside the structure pointed to by <i>buf</i>. Thus,\n<i>statebuf</i> should not be deallocated so long as\n<i>buf</i> is still in use. (So, <i>statebuf</i> should\ntypically be allocated as a static variable, or allocated on\nthe heap using <a href=\"https://man.page/3/malloc\">malloc(3)</a> or similar.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setstate_r</b>() function is like <a href=\"https://man.page/3/setstate\">setstate(3)</a>\nexcept that it modifies the state in the object pointed to\nby <i>buf</i>, rather than modifying the global state\nvariable. <i>state</i> must first have been initialized\nusing <b>initstate_r</b>() or be the result of a previous\ncall of <b>setstate_r</b>().</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of these\nfunctions return 0 on success. On error, -1 is returned,\nwith <i>errno</i> set to indicate the cause of the\nerror.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">A state array of less than 8\nbytes was specified to <b>initstate_r</b>().</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>statebuf</i> or <i>buf</i> argument to\n<b>setstate_r</b>() was NULL.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>buf</i> or <i>result</i> argument to\n<b>random_r</b>() was NULL.</p></td></tr>\n</table>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3402761.png\" alt=\"Image grohtml-3402761.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare nonstandard glibc extensions.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>initstate_r</b>() interface is confusing. It appears that\nthe <i>random_data</i> type is intended to be opaque, but\nthe implementation requires the user to either initialize\nthe <i>buf.state</i> field to NULL or zero out the entire\nstructure before the call.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/drand48\">drand48(3)</a>,\n<a href=\"https://man.page/3/rand\">rand(3)</a>, <a href=\"https://man.page/3/random\">random(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}