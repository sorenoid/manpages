{"name":"glib::object::subclass","description":"Glib::Object::Subclass\n- register a perl class as a GObject class","body":"\n\n<h1 align=\"center\">Glib::Object::Subclass</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object::Subclass\n- register a perl class as a GObject class</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nGlib::Object::Subclass <br>\nSome::Base::Class::, # parent class, derived from\nGlib::Object <br>\nsignals =&gt; { <br>\nsomething_changed =&gt; { <br>\nclass_closure =&gt; sub { do_something_fun () }, <br>\nflags =&gt; [qw(run-first)], <br>\nreturn_type =&gt; undef, <br>\nparam_types =&gt; [], <br>\n}, <br>\nsome_existing_signal =&gt; \\&amp;class_closure_override,\n<br>\n}, <br>\nproperties =&gt; [ <br>\nGlib::ParamSpec-&gt;string ( <br>\n'some_string', <br>\n'Some String Property', <br>\n'This property is a string that is used as an example', <br>\n'default value', <br>\n[qw/readable writable/] <br>\n), <br>\n];</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nallows you to create your own GObject classes, which is\nuseful to e.g. implement your own Gtk2 widgets.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It\ndoesn&rsquo;t &quot;export&quot; anything into your\nnamespace, but acts more like a pragmatic module that\nmodifies your class to make it work as a GObject class.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You may be\nwondering why you can&rsquo;t just bless a Glib::Object into\na different package and add some subs. Well, if you\naren&rsquo;t interested in object parameters, signals, or\nhaving your new class interoperate transparently with other\nGObject-based modules (e.g., Gtk2 and friends), then you can\njust re-bless.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However, a\nGObject&rsquo;s signals, properties, virtual functions, and\nGInterface implementations are specific to its GObjectClass.\nIf you want to create a new GObject which was a derivative\nof GtkDrawingArea, but adds a new signal, you must create a\nnew GObjectClass to which to add the new signal. If you\ndon&rsquo;t, then <i>all</i> of the GtkDrawingAreas in your\napplication will get that new signal!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thus, the only\nway to create a new signal or object property in the Perl\nbindings for Glib is to register a new subclass with the\nGLib type system via <b>Glib::Type::register_object()</b>.\nThe Glib::Object::Subclass module is a\nPerl-developer-friendly interface to this bit of paradigm\nmismatch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>USAGE</small></b>\n<br>\nThis module works similar to the &quot;use base&quot; pragma\nin that it registers the current package as a subclass of\nsome other class (which must be a GObjectClass implemented\neither in C or some other language).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The pragma\nrequires at least one argument, the parent class name. The\nremaining arguments are key/value pairs, in any order, all\noptional: <br>\n- properties =&gt; []</p>\n\n<p style=\"margin-left:17%;\">Add object properties; see\n&quot; <small>PROPERTIES&quot;</small> .</p>\n\n<p style=\"margin-left:11%;\">- signals =&gt; {}</p>\n\n<p style=\"margin-left:17%;\">Add or override signals; see\n&quot; <small>SIGNALS&quot;</small> and &quot;\n<small>OVERRIDING BASE METHODS&quot;</small> .</p>\n\n<p style=\"margin-left:11%;\">- interfaces =&gt; []</p>\n\n<p style=\"margin-left:17%;\">Add GInterfaces to your class;\nsee &quot; <small>INTERFACES&quot;</small> .</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(Actually,\nthese parameters are all passed straight through to\n<b>Glib::Type::register_object()</b>, adding __PACKAGE__\n(the current package name) as the name of the new child\nclass.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OBJECT\nMETHODS AND FUNCTIONS</small></b> <br>\nThe following methods are either added to your class on\nrequest (not yet implemented), or by default unless your own\nclass implements them itself. This means that all these\nmethods and functions will get sensible default\nimplementations unless explicitly overwritten by you (by\ndefining your own version).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Except for\n&quot;new&quot;, all of the following are <i>functions</i>\nand no <i>methods</i>. That means that you should <i>not</i>\ncall the superclass method. Instead, the GObject system will\ncall these functions per class as required, emulating normal\ninheritance. <br>\n$class-&gt;new (attr =&gt; value, ...)</p>\n\n<p style=\"margin-left:17%;\">The default constructor just\ncalls &quot;Glib::Object::new&quot;, which allows you to set\nproperties on the newly created object. This is done because\nmany &quot;new&quot; methods inherited by Gtk2 or other\nlibraries don&rsquo;t have &quot;new&quot; methods suitable\nfor subclassing.</p>\n\n<p style=\"margin-left:11%;\"><small>INIT_INSTANCE</small>\n$self [not a method]</p>\n\n<p style=\"margin-left:17%;\">&quot;INIT_INSTANCE&quot; is\ncalled on each class in the hierarchy as the object is being\ncreated (i.e., from &quot;Glib::Object::new&quot; or our\ndefault &quot;new&quot;). Use this function to initialize\nany member data. The default implementation will leave the\nobject untouched.</p>\n\n<p style=\"margin-left:11%;\"><small>GET_PROPERTY</small>\n$self, $pspec [not a method] <small><br>\nSET_PROPERTY</small> $self, $pspec, $newval [not a\nmethod]</p>\n\n<p style=\"margin-left:17%;\">&quot;GET_PROPERTY&quot; and\n&quot;SET_PROPERTY&quot; are called whenever somebody does\n&quot;$object-&gt;get ($propname)&quot; or\n&quot;$object-&gt;set ($propname =&gt; $newval)&quot; (from\nother languages, too). The default implementations hold\nproperty values in the object hash, equivalent to</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub\nGET_PROPERTY { <br>\nmy ($self, $pspec) = @_; <br>\nmy $pname = $pspec-&gt;get_name; <br>\nreturn (exists $self-&gt;{$pname} ? $self-&gt;{$pname} <br>\n: $pspec-&gt;get_default_value); # until set <br>\n} <br>\nsub SET_PROPERTY { <br>\nmy ($self, $pspec, $newval) = @_; <br>\n$self-&gt;{$pspec-&gt;get_name} = $newval; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Because\n&quot;$pspec-&gt;get_name&quot; converts hyphens to\nunderscores, a property &quot;line-style&quot; is in the\nhash as &quot;line_style&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These methods\nlet you store/fetch properties in any way you need to. They\ndon&rsquo;t have to be in the hash, you can calculate\nsomething, read a file, whatever.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Most often\nyou&rsquo;ll write your own &quot;SET_PROPERTY&quot; so you\ncan take action when a property changes, like redraw or\nresize a widget. Eg.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub\nSET_PROPERTY { <br>\nmy ($self, $pspec, $newval) = @_; <br>\nmy $pname = $pspec-&gt;get_name <br>\n$self-&gt;{$pname} = $newval; # ready for default\nGET_PROPERTY <br>\nif ($pname eq 'line_style') { <br>\n$self-&gt;queue_draw; # redraw with new lines <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Care must be\ntaken with boxed non-reference-counted types such as\n&quot;Gtk2::Gdk::Color&quot;. In &quot;SET_PROPERTY&quot;\nthe $newval is generally good only for the duration of the\ncall. Use &quot;copy&quot; or similar if keeping it longer\n(see Glib::Boxed). In &quot;GET_PROPERTY&quot; the returned\nmemory must last long enough to reach the caller, which\ngenerally means returning a field, not a newly created\nobject (which is destroyed with the scalar holding it).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;GET_PROPERTY&quot;\nis different from a C get_property method in that the perl\nmethod returns the retrieved value. For symmetry, the\n$newval and $pspec args on &quot;SET_PROPERTY&quot; are\nswapped from the C usage.</p>\n\n\n<p style=\"margin-left:11%;\"><small>FINALIZE_INSTANCE</small>\n$self [not a method]</p>\n\n<p style=\"margin-left:17%;\">&quot;FINALIZE_INSTANCE&quot;\nis called as the GObject is being finalized, that is, as it\nis being really destroyed. This is independent of the more\ncommon <small>DESTROY</small> on the perl object; in fact,\nyou must <i><small>NOT</small></i> override\n&quot;DESTROY&quot; (it&rsquo;s not useful to you, in any\ncase, as it is being called multiple times!).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Use this hook\nto release anything you have to clean up manually.\n<small>FINALIZE_INSTANCE</small> will be called for each\nperl instance, in reverse order of construction.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\nfinalizer does nothing.</p>\n\n<p style=\"margin-left:11%;\">$object-&gt;\n<small>DESTROY</small> [ <small>DO NOT OVERWRITE</small>\n]</p>\n\n<p style=\"margin-left:17%;\">Don&rsquo;t <i>ever</i>\noverwrite &quot;DESTROY&quot;, use\n&quot;FINALIZE_INSTANCE&quot; instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>DESTROY</small> method of all perl classes derived\nfrom GTypes is implemented in the Glib module and (ab-)used\nfor its own internal purposes. Overwriting it is not useful\nas it will be called <i>multiple</i> times, and often long\nbefore the object actually gets destroyed. Overwriting might\nbe very harmful to your program, so <i>never</i> do that.\nEspecially watch out for other classes in your\n<small>ISA</small> tree.</p>\n\n<h2>PROPERTIES\n<a name=\"PROPERTIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To create\ngobject properties, supply a list of Glib::ParamSpec objects\nas the value for the key &rsquo;properties&rsquo;. There are\nlots of different paramspec constructors, documented in the\nC <small>API</small> reference&rsquo;s Parameters and Values\npage, as well as Glib::ParamSpec.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As of Glib\n1.060, you can also specify explicit getters and setters for\nyour properties at creation time. The default values in your\nproperties are also honored if you don&rsquo;t set anything\nelse. See Glib::Type::register_object in Glib::Type for an\nexample.</p>\n\n<h2>SIGNALS\n<a name=\"SIGNALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Creating new\nsignals for your new object is easy. Just provide a hash of\nsignal names and signal descriptions under the key\n&rsquo;signals&rsquo;. Each signal description is also a\nhash, with a few expected keys. All the keys are allowed to\ndefault. <br>\nflags =&gt; GSignalFlags</p>\n\n<p style=\"margin-left:17%;\">If not present, assumed to be\n&rsquo;run-first&rsquo;.</p>\n\n<p style=\"margin-left:11%;\">param_types =&gt; reference to\na list of package names</p>\n\n<p style=\"margin-left:17%;\">If not present, assumed to be\nempty (no parameters).</p>\n\n<p style=\"margin-left:11%;\">class_closure =&gt; reference\nto a subroutine to call as the class <br>\nclosure.</p>\n\n<p style=\"margin-left:17%;\">may also be a string\ninterpreted as the name of a subroutine to call, but you\nshould be very very very careful about that.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If not present,\nthe library will attempt to call the method named\n&quot;do_signal_name&quot; for the signal\n&quot;signal_name&quot; (uses underscores).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You&rsquo;ll\nwant to be careful not to let this handler method be a\npublically callable method, or one that has the name name as\nsomething that emits the signal. Due to the funky ways in\nwhich Glib is different from Perl, the class closures\n<i>should not</i> inherit through normal perl\ninheritance.</p>\n\n<p style=\"margin-left:11%;\">return_type =&gt; package name\nfor return value.</p>\n\n<p style=\"margin-left:17%;\">If undefined or not present,\nthe signal expects no return value. if defined, the signal\nis expected to return a value; flags must be set such that\nthe signal does not run only first (at least use\n&rsquo;run-last&rsquo;).</p>\n\n<p style=\"margin-left:11%;\">accumulator =&gt; signal return\nvalue accumulator</p>\n\n<p style=\"margin-left:17%;\">quoting the Glib manual:\n&quot;The signal accumulator is a special callback function\nthat can be used to collect return values of the various\ncallbacks that are called during a signal\nemission.&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If not\nspecified, the default accumulator is used, and you just get\nthe return value of the last handler to run.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Accumulators\nare not really documented very much in the C reference, and\nthe perl interface here is slightly different, so\nhere&rsquo;s an inordinate amount of detail for this arcane\nfeature:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The accumulator\nfunction is called for every handler as</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">($cont, $acc) =\n&amp;$func ($invocation_hint, $acc, $ret)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$invocation_hint\nis an anonymous hash (including the signal name); $acc is\nthe current accumulated return value; $ret is the value from\nthe most recent handler.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The two return\nvalues are a boolean $cont for whether signal emission\nshould continue (false to stop); and a new $acc accumulated\nreturn value. (This is different from the C version, which\nwrites through a return_accu.)</p>\n\n<h2>OVERRIDING BASE METHODS\n<a name=\"OVERRIDING BASE METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GLib pulls some\nfancy tricks with function pointers to implement methods in\nC. This is not very language-binding-friendly, as you might\nguess.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However, as\ndescribed above, every signal allows a &quot;class\nclosure&quot;; you may override the class closure with your\nown function, and you can chain from the overridden method\nto the original. This serves to implement virtual overrides\nfor language bindings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So, to override\na method, you supply a subroutine reference instead of a\nsignal description hash as the value for the name of the\nexisting signal in the &quot;signals&quot; hash described in\n&quot; <small>SIGNALS&quot;</small> .</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># override some\nimportant widget methods: <br>\nuse Glib::Object::Subclass <br>\nGtk2::Widget::, <br>\nsignals =&gt; { <br>\nexpose_event =&gt; \\&amp;expose_event, <br>\nconfigure_event =&gt; \\&amp;configure_event, <br>\nbutton_press_event =&gt; \\&amp;button_press_event, <br>\nbutton_release_event =&gt; \\&amp;button_release_event, <br>\nmotion_notify_event =&gt; \\&amp;motion_notify_event, <br>\n# note the choice of names here... see the discussion. <br>\nsize_request =&gt; \\&amp;do_size_request, <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It&rsquo;s\nimportant to note that the handlers you supply for these are\nclass-specific, and that normal perl method inheritance\nrules are not followed to invoke them from within the\nlibrary. However, perl code can still find them! Therefore\nit&rsquo;s rather important that you choose your\nhandlers&rsquo; names carefully, avoiding any public\ninterfaces that you might call from perl. Case in point,\nsince size_request is a widget method, i chose\ndo_size_request as the override handler.</p>\n\n<h2>INTERFACES\n<a name=\"INTERFACES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GObject\nsupports only single inheritance; in place of multiple\ninheritance, GObject uses GInterfaces. In the Perl bindings\nwe have mostly masqueraded this with multiple inheritance\n(that is, simply adding the GInterface class to the @ISA of\nthe implementing class), but in deriving new objects the\nfacade breaks and the magic leaks out.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\nderive an object that implements a GInterface, you have to\ntell the GLib type system you want your class to include a\nGInterface. To do this, simply pass a list of package names\nthrough the &quot;interfaces&quot; key; this will add these\npackages to your @ISA, and cause perl to invoke methods that\nyou must provide.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">package\nMup::MultilineEntry; <br>\nuse Glib::Object::Subclass <br>\n'Gtk2::TextView', <br>\ninterfaces =&gt; [ 'Gtk2::CellEditable' ], <br>\n; <br>\n# perl will now invoke these methods, which are part of the\n<br>\n# GtkCellEditable GInterface, when somebody invokes the <br>\n# corresponding lower-case methods on your objects. <br>\nsub START_EDITING { warn &quot;start editing\\n&quot;; } <br>\nsub EDITING_DONE { warn &quot;editing done\\n&quot;; } <br>\nsub REMOVE_WIDGET { warn &quot;remove widget\\n&quot;; }</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GObject -\nhttp://developer.gnome.org/doc/API/2.0/gobject/</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Marc Lehmann\n&lt;schmorp@schmorp.de&gt;, muppet &lt;scott at asofyet dot\norg&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2003-2004, 2010 by muppet and the gtk2-perl team</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the terms of the Lesser General Public License (\n<small>LGPL</small> ). For more information, see\nhttp://www.fsf.org/licenses/lgpl.txt</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#PROPERTIES\">PROPERTIES</a>","<a href=\"#SIGNALS\">SIGNALS</a>","<a href=\"#OVERRIDING BASE METHODS\">OVERRIDING BASE METHODS</a>","<a href=\"#INTERFACES\">INTERFACES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}