{"name":"mail::field","body":"\n\n<h1 align=\"center\">Mail::Field</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Field -\nbase-class for manipulation of mail header fields</p>\n\n<h2>INHERITANCE\n<a name=\"INHERITANCE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Field is\nextended by <br>\nMail::Field::AddrList <br>\nMail::Field::Date <br>\nMail::Field::Generic</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nMail::Field; <br>\nmy $field = Mail::Field-&gt;new('Subject', 'some subject\ntext'); <br>\nmy $field = Mail::Field-&gt;new(Subject =&gt; 'some subject\ntext'); <br>\nprint $field-&gt;tag,&quot;:\n&quot;,$field-&gt;stringify,&quot;\\n&quot;; <br>\nmy $field = Mail::Field-&gt;subject('some subject\ntext');</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Mail::Field&quot;\ncreates and manipulates fields in <small>MIME</small>\nheaders, collected within a Mail::Header object. Different\nfield types have their own sub-class (extension), defining\nadditional useful accessors to the field content.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">People are\ninvited to merge their implementation to special fields into\nMailTools, to maintain a consistent set of packages and\ndocumentation.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Constructors</b>\n<br>\nMail::Field (and it&rsquo;s sub-classes) define several\nmethods which return new objects. These can all be\ncategorized as constructor. <br>\nMail::Field-&gt;<b>combine</b>($fields)</p>\n\n<p style=\"margin-left:17%;\">Take a <small>LIST</small> of\n&quot;Mail::Field&quot; objects (which should all be of the\nsame sub-class) and create a new object in that same\nclass.</p>\n\n\n<p style=\"margin-left:11%;\">Mail::Field-&gt;<b>extract</b>(\n$tag, $head [, $index ] )</p>\n\n<p style=\"margin-left:17%;\">Takes as arguments the tag\nname, a &quot;Mail::Head&quot; object and optionally an\nindex.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the index\nargument is given then &quot;extract&quot; will retrieve the\ngiven tag from the &quot;Mail::Head&quot; object and create\na new &quot;Mail::Field&quot; based object. <i>undef</i>\nwill be returned in the field does not exist.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the index\nargument is not given the result depends on the context in\nwhich &quot;extract&quot; is called. If called in a scalar\ncontext the result will be as if &quot;extract&quot; was\ncalled with an index value of zero. If called in an array\ncontext then all tags will be retrieved and a list of\n&quot;Mail::Field&quot; objects will be returned.</p>\n\n<p style=\"margin-left:11%;\">Mail::Field-&gt;<b>new</b>(\n$tag [, <small>STRING</small> | %options] )</p>\n\n<p style=\"margin-left:17%;\">Create an object in the class\nwhich defines the field specified by the $tag argument.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&quot;Fake&quot;\nconstructors</b> <br>\n$obj-&gt;<b>create</b>(%options)</p>\n\n<p style=\"margin-left:17%;\">This constructor is used\ninternally with preprocessed field information. When called\non an existing object, its original content will get\nreplaced.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>parse</b>()</p>\n\n<p style=\"margin-left:17%;\">Parse a field line.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Accessors</b>\n<br>\n$obj-&gt;<b>set</b>(%options)</p>\n\n<p style=\"margin-left:17%;\">Change the settings (the\ncontent, but then smart) of this field.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>stringify</b>()</p>\n\n<p style=\"margin-left:17%;\">Returns the field as a\nstring.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>tag</b>() <br>\nMail::Field-&gt;<b>tag</b>()</p>\n\n<p style=\"margin-left:17%;\">Return the tag (in the correct\ncase) for this item. Well, actually any casing is\n<small>OK,</small> because the field tags are treated\ncase-insensitive; however people have some preferences.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Smart\naccessors</b> <br>\n$obj-&gt;<b>text</b>( [ <small>STRING</small> ] )</p>\n\n<p style=\"margin-left:17%;\">Without arguments, the field is\nreturned as <b>stringify()</b> does. Otherwise, the\n<small>STRING</small> is parsed with <b>parse()</b> to\nreplace the object&rsquo;s content.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It is more\nclear to call either <b>stringify()</b> or <b>parse()</b>\ndirectly, because this method does not add additional\nprocessing.</p>\n\n<h2>DETAILS\n<a name=\"DETAILS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SUB-CLASS\n<small>PACKAGE NAMES</small></b> <br>\nAll sub-classes should be called Mail::Field::<i>name</i>\nwhere <i>name</i> is derived from the tag using these\nrules.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Consider a tag as being made up of elements separated by\n&rsquo;-&rsquo;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Convert all characters to lowercase except the first in\neach element, which should be uppercase.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><i>name</i> is then created from these elements by using\nthe first N characters from each element.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>N is calculated by using the formula :-</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">int((7 +\n#elements) / #elements)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><i>name</i> is then limited to a\nmaximum of 8 characters, keeping the first 8 characters.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an example\nof this take a look at the definition of the\n&quot;_header_pkg_name()&quot; subroutine in\n&quot;Mail::Field&quot;</p>\n\n<h2>DIAGNOSTICS\n<a name=\"DIAGNOSTICS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Error:\nUndefined subroutine &lt;method&gt; called</p>\n\n<p style=\"margin-left:17%;\">Mail::Field objects use\nautoloading to compile new functionality. Apparently, the\nmethod called is not implemented for the specific class of\nthe field object.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\npart of the MailTools distribution,\n<i>http://perl.overmeer.net/mailtools/</i>.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The MailTools\nbundle was developed by Graham Barr. Later, Mark Overmeer\ntook over maintenance without commitment to further\ndevelopment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Cap by\nGisle Aas &lt;aas@oslonett.no&gt;. Mail::Field::AddrList by\nPeter Orbaek &lt;poe@cit.dk&gt;. Mail::Mailer and Mail::Send\nby Tim Bunce &lt;Tim.Bunce@ig.co.uk&gt;. For other\ncontributors see ChangeLog.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyrights\n1995-2000 Graham Barr &lt;gbarr@pobox.com&gt; and 2001-2017\nMark Overmeer &lt;perl@overmeer.net&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself. See\n<i>http://www.perl.com/perl/misc/Artistic.html</i></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#INHERITANCE\">INHERITANCE</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#DETAILS\">DETAILS</a>","<a href=\"#DIAGNOSTICS\">DIAGNOSTICS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#LICENSE\">LICENSE</a>"],"level":3}