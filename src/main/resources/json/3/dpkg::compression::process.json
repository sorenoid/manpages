{"name":"dpkg::compression::process","description":"Dpkg::Compression::Process\n- run compression/decompression processes\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nThis module\nprovides an object oriented interface to run and manage\ncompression/decompression processes.\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n$proc =\nDpkg::Compression::Process-&gt;new(%opts)\n\n<p style=\"margin-left:17%;\">Create a new instance of the\nobject. Supported options are &quot;compression&quot; and\n&quot;compression_level&quot; (see corresponding set_*\nfunctions).\n\n\n<p style=\"margin-left:11%;\">$proc-&gt;set_compression($comp)\n\n<p style=\"margin-left:17%;\">Select the compression method\nto use. It errors out if the method is not supported\naccording to &quot;compression_is_supported&quot; (of\n<b>Dpkg::Compression</b>).\n\n\n<p style=\"margin-left:11%;\">$proc-&gt;set_compression_level($level)\n\n<p style=\"margin-left:17%;\">Select the compression level to\nuse. It errors out if the level is not valid according to\n&quot;compression_is_valid_level&quot; (of\n<b>Dpkg::Compression</b>).\n\n<p style=\"margin-left:11%;\">@exec =\n$proc-&gt;<b>get_compress_cmdline()</b> <br>\n@exec = $proc-&gt;<b>get_uncompress_cmdline()</b>\n\n<p style=\"margin-left:17%;\">Returns a list ready to be\npassed to &quot;exec&quot;, its first element is the program\nname (either for compression or decompression) and the\nfollowing elements are parameters for the program.\n\n<p style=\"margin-left:17%; margin-top: 1em\">When executed\nthe program acts as a filter between its standard input and\nits standard output.\n\n<p style=\"margin-left:11%;\">$proc-&gt;compress(%opts)\n\n<p style=\"margin-left:17%;\">Starts a compressor program.\nYou must indicate where it will read its uncompressed data\nfrom and where it will write its compressed data to. This is\naccomplished by passing one parameter &quot;to_*&quot; and\none parameter &quot;from_*&quot; as accepted by\n<b>Dpkg::IPC::spawn</b>.\n\n<p style=\"margin-left:17%; margin-top: 1em\">You must call\n&quot;wait_end_process&quot; after having called this method\nto properly close the sub-process (and verify that it exited\nwithout error).\n\n\n<p style=\"margin-left:11%;\">$proc-&gt;uncompress(%opts)\n\n<p style=\"margin-left:17%;\">Starts a decompressor program.\nYou must indicate where it will read its compressed data\nfrom and where it will write its uncompressed data to. This\nis accomplished by passing one parameter &quot;to_*&quot;\nand one parameter &quot;from_*&quot; as accepted by\n<b>Dpkg::IPC::spawn</b>.\n\n<p style=\"margin-left:17%; margin-top: 1em\">You must call\n&quot;wait_end_process&quot; after having called this method\nto properly close the sub-process (and verify that it exited\nwithout error).\n\n\n<p style=\"margin-left:11%;\">$proc-&gt;wait_end_process(%opts)\n\n<p style=\"margin-left:17%;\">Call\n<b>Dpkg::IPC::wait_child</b> to wait until the sub-process\nhas exited and verify its return code. Any given option will\nbe forwarded to the &quot;wait_child&quot; function. Most\nnotably you can use the &quot;nocheck&quot; option to verify\nthe return code yourself instead of letting\n&quot;wait_child&quot; do it for you.\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<b>Version 1.00\n(dpkg 1.15.6)</b> <br>\nMark the module as public.","body":"\n\n<h1 align=\"center\">Dpkg::Compression::Process</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Compression::Process\n- run compression/decompression processes</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides an object oriented interface to run and manage\ncompression/decompression processes.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$proc =\nDpkg::Compression::Process-&gt;new(%opts)</p>\n\n<p style=\"margin-left:17%;\">Create a new instance of the\nobject. Supported options are &quot;compression&quot; and\n&quot;compression_level&quot; (see corresponding set_*\nfunctions).</p>\n\n\n<p style=\"margin-left:11%;\">$proc-&gt;set_compression($comp)</p>\n\n<p style=\"margin-left:17%;\">Select the compression method\nto use. It errors out if the method is not supported\naccording to &quot;compression_is_supported&quot; (of\n<b>Dpkg::Compression</b>).</p>\n\n\n<p style=\"margin-left:11%;\">$proc-&gt;set_compression_level($level)</p>\n\n<p style=\"margin-left:17%;\">Select the compression level to\nuse. It errors out if the level is not valid according to\n&quot;compression_is_valid_level&quot; (of\n<b>Dpkg::Compression</b>).</p>\n\n<p style=\"margin-left:11%;\">@exec =\n$proc-&gt;<b>get_compress_cmdline()</b> <br>\n@exec = $proc-&gt;<b>get_uncompress_cmdline()</b></p>\n\n<p style=\"margin-left:17%;\">Returns a list ready to be\npassed to &quot;exec&quot;, its first element is the program\nname (either for compression or decompression) and the\nfollowing elements are parameters for the program.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When executed\nthe program acts as a filter between its standard input and\nits standard output.</p>\n\n<p style=\"margin-left:11%;\">$proc-&gt;compress(%opts)</p>\n\n<p style=\"margin-left:17%;\">Starts a compressor program.\nYou must indicate where it will read its uncompressed data\nfrom and where it will write its compressed data to. This is\naccomplished by passing one parameter &quot;to_*&quot; and\none parameter &quot;from_*&quot; as accepted by\n<b>Dpkg::IPC::spawn</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You must call\n&quot;wait_end_process&quot; after having called this method\nto properly close the sub-process (and verify that it exited\nwithout error).</p>\n\n\n<p style=\"margin-left:11%;\">$proc-&gt;uncompress(%opts)</p>\n\n<p style=\"margin-left:17%;\">Starts a decompressor program.\nYou must indicate where it will read its compressed data\nfrom and where it will write its uncompressed data to. This\nis accomplished by passing one parameter &quot;to_*&quot;\nand one parameter &quot;from_*&quot; as accepted by\n<b>Dpkg::IPC::spawn</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You must call\n&quot;wait_end_process&quot; after having called this method\nto properly close the sub-process (and verify that it exited\nwithout error).</p>\n\n\n<p style=\"margin-left:11%;\">$proc-&gt;wait_end_process(%opts)</p>\n\n<p style=\"margin-left:17%;\">Call\n<b>Dpkg::IPC::wait_child</b> to wait until the sub-process\nhas exited and verify its return code. Any given option will\nbe forwarded to the &quot;wait_child&quot; function. Most\nnotably you can use the &quot;nocheck&quot; option to verify\nthe return code yourself instead of letting\n&quot;wait_child&quot; do it for you.</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.15.6)</b> <br>\nMark the module as public.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#CHANGES\">CHANGES</a>"],"level":3}