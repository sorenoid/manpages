{"name":"file::mimeinfo::magic","description":"File::MimeInfo::Magic\n- Determine file type with magic","body":"\n\n<h1 align=\"center\">File::MimeInfo::Magic</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::MimeInfo::Magic\n- Determine file type with magic</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nFile::MimeInfo::Magic; <br>\nmy $mime_type = mimetype($file);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\ninherits from File::MimeInfo, it is transparent to its\nfunctions but adds support for the freedesktop magic\nfile.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Magic data is\nhashed when you need it for the first time. If you want to\nforce hashing earlier use the &quot;rehash()&quot;\nfunction.</p>\n\n<h2>EXPORT\n<a name=\"EXPORT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The method\n&quot;mimetype&quot; is exported by default. The methods\n&quot;magic&quot;, &quot;inodetype&quot;, &quot;globs&quot;\nand &quot;describe&quot; can be exported on demand.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See also\nFile::MimeInfo for methods that are inherited. <br>\n&quot;mimetype($file)&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a mime-type string for\n$file, returns undef on failure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This method\nbundles &quot;inodetype()&quot;, &quot;globs()&quot; and\n&quot;magic()&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Magic rules\nwith an priority of 80 and higher are checked before\n&quot;globs()&quot; is called, all other magic rules\nafterwards.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If this\ndoesn&rsquo;t work the file is read and the mime-type\ndefaults to &rsquo;text/plain&rsquo; or to\n&rsquo;application/octet-stream&rsquo; when the first ten\nchars of the file match ascii control chars (white spaces\nexcluded). If the file doesn&rsquo;t exist or isn&rsquo;t\nreadable &quot;undef&quot; is returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If $file is an\nobject reference only &quot;magic&quot; and the default\nmethod are used. See below for details.</p>\n\n<p style=\"margin-left:11%;\">&quot;magic($file)&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a mime-type string for\n$file based on the magic rules, returns undef on\nfailure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$file can be an\nobject reference, in that case it is supposed to have a\n&quot;seek()&quot; and a &quot;read()&quot; method. This\nallows you for example to determine the mimetype of data in\nmemory by using IO::Scalar.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Be aware that\nwhen using a filehandle or an &quot;IO::&quot; object you\nneed to set the &quot;:utf8&quot; binmode yourself if\nappropriate.</p>\n\n<p style=\"margin-left:11%;\">&quot;rehash()&quot;</p>\n\n<p style=\"margin-left:17%;\">Rehash the data files. Glob and\nmagic information is preparsed when this method is\ncalled.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nby-pass the <small>XDG</small> basedir system you can\nspecify your database directories by setting\n@File::MimeInfo::DIRS. But normally it is better to change\nthe <small>XDG</small> basedir environment variables.</p>\n\n<p style=\"margin-left:11%;\">&quot;default&quot; <br>\n&quot;describe&quot; <br>\n&quot;extensions&quot; <br>\n&quot;globs&quot; <br>\n&quot;inodetype&quot;</p>\n\n<p style=\"margin-left:17%;\">These routines are imported\nfrom File::MimeInfo.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::MimeInfo</p>\n\n<h2>LIMITATIONS\n<a name=\"LIMITATIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only word sizes\nof 1, 2 or 4 are supported. Any other word size is ignored\nand will cause a warning.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Jaap\nKarssenberg &lt;pardus@cpan.org&gt; Maintained by Michiel\nBeijen &lt;mb@x14.nl&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2003, 2012 Jaap G Karssenberg. All rights reserved. This\nprogram is free software; you can redistribute it and/or\nmodify it under the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXPORT\">EXPORT</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#LIMITATIONS\">LIMITATIONS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}