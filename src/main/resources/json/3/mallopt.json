{"name":"mallopt","description":"mallopt - set\nmemory allocation parameters","body":"\n\n<h1 align=\"center\">MALLOPT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mallopt - set\nmemory allocation parameters</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;malloc.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmallopt(int</b> <i>param</i><b>, int</b>\n<i>value</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mallopt</b>() function adjusts parameters that control\nthe behavior of the memory-allocation functions (see\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>). The <i>param</i> argument specifies the\nparameter to be modified, and <i>value</i> specifies the new\nvalue for that parameter.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalues can be specified for <i>param</i>: <b><br>\nM_ARENA_MAX</b></p>\n\n<p style=\"margin-left:22%;\">If this parameter has a nonzero\nvalue, it defines a hard limit on the maximum number of\narenas that can be created. An arena represents a pool of\nmemory that can be used by <a href=\"https://man.page/3/malloc\">malloc(3)</a> (and similar)\ncalls to service allocation requests. Arenas are thread safe\nand therefore may have multiple concurrent memory requests.\nThe trade-off is between the number of threads and the\nnumber of arenas. The more arenas you have, the lower the\nper-thread contention, but the higher the memory usage.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue of this parameter is 0, meaning that the limit on the\nnumber of arenas is determined according to the setting of\n<b>M_ARENA_TEST</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This parameter\nhas been available since glibc 2.10 via\n<b>--enable-experimental-malloc</b>, and since glibc 2.15 by\ndefault. In some versions of the allocator there was no\nlimit on the number of created arenas (e.g., CentOS 5, RHEL\n5).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When employing\nnewer glibc versions, applications may in some cases exhibit\nhigh contention when accessing arenas. In these cases, it\nmay be beneficial to increase <b>M_ARENA_MAX</b> to match\nthe number of threads. This is similar in behavior to\nstrategies taken by tcmalloc and jemalloc (e.g., per-thread\nallocation pools).</p>\n\n<p style=\"margin-left:11%;\"><b>M_ARENA_TEST</b></p>\n\n<p style=\"margin-left:22%;\">This parameter specifies a\nvalue, in number of arenas created, at which point the\nsystem configuration will be examined to determine a hard\nlimit on the number of created arenas. (See\n<b>M_ARENA_MAX</b> for the definition of an arena.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The computation\nof the arena hard limit is implementation-defined and is\nusually calculated as a multiple of the number of available\nCPUs. Once the hard limit is computed, the result is final\nand constrains the total number of arenas.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue for the <b>M_ARENA_TEST</b> parameter is 2 on systems\nwhere <i>sizeof(long)</i> is 4; otherwise the default value\nis 8.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This parameter\nhas been available since glibc 2.10 via\n<b>--enable-experimental-malloc</b>, and since glibc 2.15 by\ndefault.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value of\n<b>M_ARENA_TEST</b> is not used when <b>M_ARENA_MAX</b> has\na nonzero value.</p>\n\n<p style=\"margin-left:11%;\"><b>M_CHECK_ACTION</b></p>\n\n<p style=\"margin-left:22%;\">Setting this parameter controls\nhow glibc responds when various kinds of programming errors\nare detected (e.g., freeing the same pointer twice). The 3\nleast significant bits (2, 1, and 0) of the value assigned\nto this parameter determine the glibc behavior, as\nfollows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p>Bit 0</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>If this bit is set, then print a one-line message on\n<i>stderr</i> that provides details about the error. The\nmessage starts with the string &quot;***&nbsp;glibc\ndetected&nbsp;***&quot;, followed by the program name, the\nname of the memory-allocation function in which the error\nwas detected, a brief description of the error, and the\nmemory address where the error was detected.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p>Bit 1</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>If this bit is set, then, after printing any error\nmessage specified by bit 0, the program is terminated by\ncalling <a href=\"https://man.page/3/abort\">abort(3)</a>. In glibc versions since 2.4, if bit\n0 is also set, then, between printing the error message and\naborting, the program also prints a stack trace in the\nmanner of <a href=\"https://man.page/3/backtrace\">backtrace(3)</a>, and prints the\nprocess&rsquo;s memory mapping in the style of\n<i>/proc/[pid]/maps</i> (see <a href=\"https://man.page/5/proc\">proc(5)</a>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">Bit 2 (since glibc 2.4)</p>\n\n<p style=\"margin-left:32%;\">This bit has an effect only if\nbit 0 is also set. If this bit is set, then the one-line\nmessage describing the error is simplified to contain just\nthe name of the function where the error was detected and\nthe brief description of the error.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The remaining\nbits in <i>value</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Combining the\nabove details, the following numeric values are meaningful\nfor <b>M_CHECK_ACTION</b>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>Ignore error conditions; continue execution (with\nundefined results).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>Print a detailed error message and continue\nexecution.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>Abort the program.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>3</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>Print detailed error message, stack trace, and memory\nmappings, and abort the program.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>5</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>Print a simple error message and continue execution.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"29%\"></td>\n<td width=\"2%\">\n\n\n<p>7</p></td>\n<td width=\"3%\"></td>\n<td width=\"66%\">\n\n\n<p>Print simple error message, stack trace, and memory\nmappings, and abort the program.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since glibc\n2.3.4, the default value for the <b>M_CHECK_ACTION</b>\nparameter is 3. In glibc version 2.3.3 and earlier, the\ndefault value is 1.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Using a nonzero\n<b>M_CHECK_ACTION</b> value can be useful because otherwise\na crash may happen much later, and the true cause of the\nproblem is then very hard to track down.</p>\n\n<p style=\"margin-left:11%;\"><b>M_MMAP_MAX</b></p>\n\n<p style=\"margin-left:22%;\">This parameter specifies the\nmaximum number of allocation requests that may be\nsimultaneously serviced using <a href=\"https://man.page/2/mmap\">mmap(2)</a>. This parameter\nexists because some systems have a limited number of\ninternal tables for use by <a href=\"https://man.page/2/mmap\">mmap(2)</a>, and using more\nthan a few of them may degrade performance.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue is 65,536, a value which has no special significance\nand which serves only as a safeguard. Setting this parameter\nto 0 disables the use of <a href=\"https://man.page/2/mmap\">mmap(2)</a> for servicing large\nallocation requests.</p>\n\n<p style=\"margin-left:11%;\"><b>M_MMAP_THRESHOLD</b></p>\n\n<p style=\"margin-left:22%;\">For allocations greater than or\nequal to the limit specified (in bytes) by\n<b>M_MMAP_THRESHOLD</b> that can&rsquo;t be satisfied from\nthe free list, the memory-allocation functions employ\n<a href=\"https://man.page/2/mmap\">mmap(2)</a> instead of increasing the program break using\n<a href=\"https://man.page/2/sbrk\">sbrk(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Allocating\nmemory using <a href=\"https://man.page/2/mmap\">mmap(2)</a> has the significant advantage\nthat the allocated memory blocks can always be independently\nreleased back to the system. (By contrast, the heap can be\ntrimmed only if memory is freed at the top end.) On the\nother hand, there are some disadvantages to the use of\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>: deallocated space is not placed on the free\nlist for reuse by later allocations; memory may be wasted\nbecause <a href=\"https://man.page/2/mmap\">mmap(2)</a> allocations must be page-aligned; and\nthe kernel must perform the expensive task of zeroing out\nmemory allocated via <a href=\"https://man.page/2/mmap\">mmap(2)</a>. Balancing these factors\nleads to a default setting of 128*1024 for the\n<b>M_MMAP_THRESHOLD</b> parameter.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The lower limit\nfor this parameter is 0. The upper limit is\n<b>DEFAULT_MMAP_THRESHOLD_MAX</b>: 512*1024 on 32-bit\nsystems or <i>4*1024*1024*sizeof(long)</i> on 64-bit\nsystems.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>Note:</i>\nNowadays, glibc uses a dynamic mmap threshold by default.\nThe initial value of the threshold is 128*1024, but when\nblocks larger than the current threshold and less than or\nequal to <b>DEFAULT_MMAP_THRESHOLD_MAX</b> are freed, the\nthreshold is adjusted upward to the size of the freed block.\nWhen dynamic mmap thresholding is in effect, the threshold\nfor trimming the heap is also dynamically adjusted to be\ntwice the dynamic mmap threshold. Dynamic adjustment of the\nmmap threshold is disabled if any of the\n<b>M_TRIM_THRESHOLD</b>, <b>M_TOP_PAD</b>,\n<b>M_MMAP_THRESHOLD</b>, or <b>M_MMAP_MAX</b> parameters is\nset.</p>\n\n<p style=\"margin-left:11%;\"><b>M_MXFAST</b> (since glibc\n2.3)</p>\n\n<p style=\"margin-left:22%;\">Set the upper limit for memory\nallocation requests that are satisfied using\n&quot;fastbins&quot;. (The measurement unit for this\nparameter is bytes.) Fastbins are storage areas that hold\ndeallocated blocks of memory of the same size without\nmerging adjacent free blocks. Subsequent reallocation of\nblocks of the same size can be handled very quickly by\nallocating from the fastbin, although memory fragmentation\nand the overall memory footprint of the program can\nincrease.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue for this parameter is <i>64*sizeof(size_t)/4</i>\n(i.e., 64 on 32-bit architectures). The range for this\nparameter is 0 to <i>80*sizeof(size_t)/4</i>. Setting\n<b>M_MXFAST</b> to 0 disables the use of fastbins.</p>\n\n<p style=\"margin-left:11%;\"><b>M_PERTURB</b> (since glibc\n2.4)</p>\n\n<p style=\"margin-left:22%;\">If this parameter is set to a\nnonzero value, then bytes of allocated memory (other than\nallocations via <a href=\"https://man.page/3/calloc\">calloc(3)</a>) are initialized to the\ncomplement of the value in the least significant byte of\n<i>value</i>, and when allocated memory is released using\n<a href=\"https://man.page/3/free\">free(3)</a>, the freed bytes are set to the least\nsignificant byte of <i>value</i>. This can be useful for\ndetecting errors where programs incorrectly rely on\nallocated memory being initialized to zero, or reuse values\nin memory that has already been freed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue for this parameter is 0.</p>\n\n<p style=\"margin-left:11%;\"><b>M_TOP_PAD</b></p>\n\n<p style=\"margin-left:22%;\">This parameter defines the\namount of padding to employ when calling <a href=\"https://man.page/2/sbrk\">sbrk(2)</a> to\nmodify the program break. (The measurement unit for this\nparameter is bytes.) This parameter has an effect in the\nfollowing circumstances:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>When the program break is increased, then\n<b>M_TOP_PAD</b> bytes are added to the <a href=\"https://man.page/2/sbrk\">sbrk(2)</a>\nrequest.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>When the heap is trimmed as a consequence of calling\n<a href=\"https://man.page/3/free\">free(3)</a> (see the discussion of\n<b>M_TRIM_THRESHOLD</b>) this much free space is preserved\nat the top of the heap.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In either case,\nthe amount of padding is always rounded to a system page\nboundary.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Modifying\n<b>M_TOP_PAD</b> is a trade-off between increasing the\nnumber of system calls (when the parameter is set low) and\nwasting unused memory at the top of the heap (when the\nparameter is set high).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue for this parameter is 128*1024.</p>\n\n<p style=\"margin-left:11%;\"><b>M_TRIM_THRESHOLD</b></p>\n\n<p style=\"margin-left:22%;\">When the amount of contiguous\nfree memory at the top of the heap grows sufficiently large,\n<a href=\"https://man.page/3/free\">free(3)</a> employs <a href=\"https://man.page/2/sbrk\">sbrk(2)</a> to release this memory\nback to the system. (This can be useful in programs that\ncontinue to execute for a long period after freeing a\nsignificant amount of memory.) The <b>M_TRIM_THRESHOLD</b>\nparameter specifies the minimum size (in bytes) that this\nblock of memory must reach before <a href=\"https://man.page/2/sbrk\">sbrk(2)</a> is used to\ntrim the heap.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue for this parameter is 128*1024. Setting\n<b>M_TRIM_THRESHOLD</b> to -1 disables trimming\ncompletely.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Modifying\n<b>M_TRIM_THRESHOLD</b> is a trade-off between increasing\nthe number of system calls (when the parameter is set low)\nand wasting unused memory at the top of the heap (when the\nparameter is set high).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Environment\nvariables</b> <br>\nA number of environment variables can be defined to modify\nsome of the same parameters as are controlled by\n<b>mallopt</b>(). Using these variables has the advantage\nthat the source code of the program need not be changed. To\nbe effective, these variables must be defined before the\nfirst call to a memory-allocation function. (If the same\nparameters are adjusted via <b>mallopt</b>(), then the\n<b>mallopt</b>() settings take precedence.) For security\nreasons, these variables are ignored in set-user-ID and\nset-group-ID programs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The environment\nvariables are as follows (note the trailing underscore at\nthe end of the name of some variables): <b><br>\nMALLOC_ARENA_MAX</b></p>\n\n<p style=\"margin-left:22%;\">Controls the same parameter as\n<b>mallopt</b>() <b>M_ARENA_MAX</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MALLOC_ARENA_TEST</b></p>\n\n<p style=\"margin-left:22%;\">Controls the same parameter as\n<b>mallopt</b>() <b>M_ARENA_TEST</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MALLOC_CHECK_</b></p>\n\n<p style=\"margin-left:22%;\">This environment variable\ncontrols the same parameter as <b>mallopt</b>()\n<b>M_CHECK_ACTION</b>. If this variable is set to a nonzero\nvalue, then a special implementation of the\nmemory-allocation functions is used. (This is accomplished\nusing the <a href=\"https://man.page/3/malloc_hook\">malloc_hook(3)</a> feature.) This\nimplementation performs additional error checking, but is\nslower than the standard set of memory-allocation functions.\n(This implementation does not detect all possible errors;\nmemory leaks can still occur.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value\nassigned to this environment variable should be a single\ndigit, whose meaning is as described for\n<b>M_CHECK_ACTION</b>. Any characters beyond the initial\ndigit are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For security\nreasons, the effect of <b>MALLOC_CHECK_</b> is disabled by\ndefault for set-user-ID and set-group-ID programs. However,\nif the file <i>/etc/suid-debug</i> exists (the content of\nthe file is irrelevant), then <b>MALLOC_CHECK_</b> also has\nan effect for set-user-ID and set-group-ID programs.</p>\n\n<p style=\"margin-left:11%;\"><b>MALLOC_MMAP_MAX_</b></p>\n\n<p style=\"margin-left:22%;\">Controls the same parameter as\n<b>mallopt</b>() <b>M_MMAP_MAX</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>MALLOC_MMAP_THRESHOLD_</b></p>\n\n<p style=\"margin-left:22%;\">Controls the same parameter as\n<b>mallopt</b>() <b>M_MMAP_THRESHOLD</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MALLOC_PERTURB_</b></p>\n\n<p style=\"margin-left:22%;\">Controls the same parameter as\n<b>mallopt</b>() <b>M_PERTURB</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>MALLOC_TRIM_THRESHOLD_</b></p>\n\n<p style=\"margin-left:22%;\">Controls the same parameter as\n<b>mallopt</b>() <b>M_TRIM_THRESHOLD</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MALLOC_TOP_PAD_</b></p>\n\n<p style=\"margin-left:22%;\">Controls the same parameter as\n<b>mallopt</b>() <b>M_TOP_PAD</b>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>mallopt</b>() returns 1. On error, it returns 0.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On error,\n<i>errno</i> is <i>not</i> set.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis not specified by POSIX or the C standards. A similar\nfunction exists on many System V derivatives, but the range\nof values for <i>param</i> varies across systems. The SVID\ndefined options <b>M_MXFAST</b>, <b>M_NLBLKS</b>,\n<b>M_GRAIN</b>, and <b>M_KEEP</b>, but only the first of\nthese is implemented in glibc.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Specifying an\ninvalid value for <i>param</i> does not generate an\nerror.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A calculation\nerror within the glibc implementation means that a call of\nthe form:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">mallopt(M_MXFAST,\nn)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">does not result\nin fastbins being employed for all allocations of size up to\n<i>n</i>. To ensure desired results, <i>n</i> should be\nrounded up to the next multiple greater than or equal to\n<i>(2k+1)*sizeof(size_t)</i>, where <i>k</i> is an\ninteger.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>mallopt</b>() is used to set <b>M_PERTURB</b>, then, as\nexpected, the bytes of allocated memory are initialized to\nthe complement of the byte in <i>value</i>, and when that\nmemory is freed, the bytes of the region are initialized to\nthe byte specified in <i>value</i>. However, there is an\noff-by-<i>sizeof(size_t)</i> error in the implementation:\ninstead of initializing precisely the block of memory being\nfreed by the call <i>free(p)</i>, the block starting at\n<i>p+sizeof(size_t)</i> is initialized.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>M_CHECK_ACTION</b>. If the\nprogram is supplied with an (integer) command-line argument,\nthen that argument is used to set the <b>M_CHECK_ACTION</b>\nparameter. The program then allocates a block of memory, and\nfrees it twice (an error).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nshell session shows what happens when we run this program\nunder glibc, with the default value for\n<b>M_CHECK_ACTION</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./a.out</b> <br>\nmain(): returned from first free() call <br>\n*** glibc detected *** ./a.out: double free or corruption\n(top): 0x09d30008 *** <br>\n======= Backtrace: ========= <br>\n/lib/libc.so.6(+0x6c501)[0x523501] <br>\n/lib/libc.so.6(+0x6dd70)[0x524d70] <br>\n/lib/libc.so.6(cfree+0x6d)[0x527e5d] <br>\n./a.out[0x80485db] <br>\n/lib/libc.so.6(__libc_start_main+0xe7)[0x4cdce7] <br>\n./a.out[0x8048471] <br>\n======= Memory map: ======== <br>\n001e4000-001fe000 r-xp 00000000 08:06 1083555\n/lib/libgcc_s.so.1 <br>\n001fe000-001ff000 r--p 00019000 08:06 1083555\n/lib/libgcc_s.so.1 <br>\n[some lines omitted] <br>\nb7814000-b7817000 rw-p 00000000 00:00 0 <br>\nbff53000-bff74000 rw-p 00000000 00:00 0 [stack] <br>\nAborted (core dumped)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nruns show the results when employing other values for\n<b>M_CHECK_ACTION</b>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n1</b> # Diagnose error and continue <br>\nmain(): returned from first free() call <br>\n*** glibc detected *** ./a.out: double free or corruption\n(top): 0x09cbe008 *** <br>\nmain(): returned from second free() call <br>\n$ <b>./a.out 2</b> # Abort without error message <br>\nmain(): returned from first free() call <br>\nAborted (core dumped) <br>\n$ <b>./a.out 0</b> # Ignore error and continue <br>\nmain(): returned from first free() call <br>\nmain(): returned from second free() call</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The next run\nshows how to set the same parameter using the\n<b>MALLOC_CHECK_</b> environment variable:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>MALLOC_CHECK_=1 ./a.out</b> <br>\nmain(): returned from first free() call <br>\n*** glibc detected *** ./a.out: free(): invalid pointer:\n0x092c2008 *** <br>\nmain(): returned from second free() call</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;malloc.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nchar *p;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &gt;\n1) { <br>\nif (mallopt(M_CHECK_ACTION, atoi(argv[1])) != 1) { <br>\nfprintf(stderr, &quot;mallopt() failed&quot;); <br>\nexit(EXIT_FAILURE); <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">p =\nmalloc(1000); <br>\nif (p == NULL) { <br>\nfprintf(stderr, &quot;malloc() failed&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">free(p); <br>\nprintf(&quot;main(): returned from first free()\ncall\\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">free(p); <br>\nprintf(&quot;main(): returned from second free()\ncall\\n&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/mmap\">mmap(2)</a>,\n<a href=\"https://man.page/2/sbrk\">sbrk(2)</a>, <a href=\"https://man.page/3/mallinfo\">mallinfo(3)</a>, <a href=\"https://man.page/3/malloc\">malloc(3)</a>,\n<a href=\"https://man.page/3/malloc_hook\">malloc_hook(3)</a>, <a href=\"https://man.page/3/malloc_info\">malloc_info(3)</a>,\n<a href=\"https://man.page/3/malloc_stats\">malloc_stats(3)</a>, <a href=\"https://man.page/3/malloc_trim\">malloc_trim(3)</a>,\n<a href=\"https://man.page/3/mcheck\">mcheck(3)</a>, <a href=\"https://man.page/3/mtrace\">mtrace(3)</a>,\n<a href=\"https://man.page/3/posix_memalign\">posix_memalign(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}