{"name":"uri::queryparam","description":"URI::QueryParam\n- Additional query methods for URIs","body":"\n\n<h1 align=\"center\">URI::QueryParam</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">URI::QueryParam\n- Additional query methods for URIs</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use URI; <br>\nuse URI::QueryParam; <br>\n$u = URI-&gt;new(&quot;&quot;, &quot;http&quot;); <br>\n$u-&gt;query_param(foo =&gt; 1, 2, 3); <br>\nprint $u-&gt;query; # prints foo=1&amp;foo=2&amp;foo=3 <br>\nfor my $key ($u-&gt;query_param) { <br>\nprint &quot;$key: &quot;, join(&quot;, &quot;,\n$u-&gt;query_param($key)), &quot;\\n&quot;; <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Loading the\n&quot;URI::QueryParam&quot; module adds some extra methods\nto URIs that support query methods. These methods provide an\nalternative interface to the $u-&gt;query_form data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nquery_param_* methods have deliberately been made identical\nto the interface of the corresponding &quot;CGI.pm&quot;\nmethods.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nadditional methods are made available: <br>\n@keys = $u-&gt;query_param <br>\n@values = $u-&gt;query_param( $key ) <br>\n$first_value = $u-&gt;query_param( $key ) <br>\n$u-&gt;query_param( $key, $value,... )</p>\n\n<p style=\"margin-left:17%;\">If $u-&gt;query_param is called\nwith no arguments, it returns all the distinct parameter\nkeys of the <small>URI.</small> In a scalar context it\nreturns the number of distinct keys.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When a $key\nargument is given, the method returns the parameter values\nwith the given key. In a scalar context, only the first\nparameter value is returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If additional\narguments are given, they are used to update successive\nparameters with the given key. If any of the values provided\nare array references, then the array is dereferenced to get\nthe actual values.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Please note\nthat you can supply multiple values to this method, but you\ncannot supply multiple keys.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Do this:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$uri-&gt;query_param(\nwidget_id =&gt; 1, 5, 9 );</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Do\n<small>NOT</small> do this:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$uri-&gt;query_param(\nwidget_id =&gt; 1, frobnicator_id =&gt; 99 );</p>\n\n\n<p style=\"margin-left:11%;\">$u-&gt;query_param_append($key,\n$value,...)</p>\n\n<p style=\"margin-left:17%;\">Adds new parameters with the\ngiven key without touching any old parameters with the same\nkey. It can be explained as a more efficient version of:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$u-&gt;query_param($key,\n<br>\n$u-&gt;query_param($key), <br>\n$value,...);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">One difference\nis that this expression would return the old values of $key,\nwhereas the <b>query_param_append()</b> method does not.</p>\n\n<p style=\"margin-left:11%;\">@values =\n$u-&gt;query_param_delete($key) <br>\n$first_value = $u-&gt;query_param_delete($key)</p>\n\n<p style=\"margin-left:17%;\">Deletes all key/value pairs\nwith the given key. The old values are returned. In a scalar\ncontext, only the first value is returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Using the\n<b>query_param_delete()</b> method is slightly more\nefficient than the equivalent:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$u-&gt;query_param($key,\n[]);</p>\n\n<p style=\"margin-left:11%;\">$hashref =\n$u-&gt;query_form_hash <br>\n$u-&gt;query_form_hash( \\%new_form )</p>\n\n<p style=\"margin-left:17%;\">Returns a reference to a hash\nthat represents the query form&rsquo;s key/value pairs. If a\nkey occurs multiple times, then the hash value becomes an\narray reference.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nsequence information is lost. This means that:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$u-&gt;query_form_hash($u-&gt;query_form_hash);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">is not\nnecessarily a no-op, as it may reorder the key/value pairs.\nThe values returned by the <b>query_param()</b> method\nshould stay the same though.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>URI</small>\n, <small>CGI</small></p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright 2002\nGisle Aas.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}