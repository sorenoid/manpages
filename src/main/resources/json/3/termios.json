{"name":"termios","body":"\n\n<h1 align=\"center\">TERMIOS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">termios,\ntcgetattr, tcsetattr, tcsendbreak, tcdrain, tcflush, tcflow,\ncfmakeraw, cfgetospeed, cfgetispeed, cfsetispeed,\ncfsetospeed, cfsetspeed - get and set terminal attributes,\nline control, get and set baud rate</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;termios.h&gt; <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntcgetattr(int</b> <i>fd</i><b>, struct termios\n*</b><i>termios_p</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntcsetattr(int</b> <i>fd</i><b>, int</b>\n<i>optional_actions</i><b>, <br>\nconst struct termios *</b><i>termios_p</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntcsendbreak(int</b> <i>fd</i><b>, int</b>\n<i>duration</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntcdrain(int</b> <i>fd</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntcflush(int</b> <i>fd</i><b>, int</b>\n<i>queue_selector</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntcflow(int</b> <i>fd</i><b>, int</b>\n<i>action</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\ncfmakeraw(struct termios *</b><i>termios_p</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>speed_t\ncfgetispeed(const struct termios\n*</b><i>termios_p</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>speed_t\ncfgetospeed(const struct termios\n*</b><i>termios_p</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ncfsetispeed(struct termios *</b><i>termios_p</i><b>,\nspeed_t</b> <i>speed</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ncfsetospeed(struct termios *</b><i>termios_p</i><b>,\nspeed_t</b> <i>speed</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ncfsetspeed(struct termios *</b><i>termios_p</i><b>,\nspeed_t</b> <i>speed</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfsetspeed</b>(),\n<b>cfmakeraw</b>(): <br>\nSince glibc 2.19: <br>\n_DEFAULT_SOURCE <br>\nGlibc 2.19 and earlier: <br>\n_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The termios\nfunctions describe a general terminal interface that is\nprovided to control asynchronous communications ports.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The termios\nstructure</b> <br>\nMany of the functions described here have a <i>termios_p</i>\nargument that is a pointer to a <i>termios</i> structure.\nThis structure contains at least the following members:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">tcflag_t\nc_iflag; /* input modes */ <br>\ntcflag_t c_oflag; /* output modes */ <br>\ntcflag_t c_cflag; /* control modes */ <br>\ntcflag_t c_lflag; /* local modes */ <br>\ncc_t c_cc[NCCS]; /* special characters */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The values that\nmay be assigned to these fields are described below. In the\ncase of the first four bit-mask fields, the definitions of\nsome of the associated flags that may be set are exposed\nonly if a specific feature test macro (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>) is defined, as noted in\nbrackets (&quot;[]&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\ndescriptions below, &quot;not in POSIX&quot; means that the\nvalue is not specified in POSIX.1-2001, and &quot;XSI&quot;\nmeans that the value is specified in POSIX.1-2001 as part of\nthe XSI extension.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>c_iflag</i>\nflag constants:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IGNBRK</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Ignore BREAK condition on input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>BRKINT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>If <b>IGNBRK</b> is set, a BREAK is ignored. If it is\nnot set but <b>BRKINT</b> is set, then a BREAK causes the\ninput and output queues to be flushed, and if the terminal\nis the controlling terminal of a foreground process group,\nit will cause a <b>SIGINT</b> to be sent to this foreground\nprocess group. When neither <b>IGNBRK</b> nor <b>BRKINT</b>\nare set, a BREAK reads as a null byte ('\\0'), except when\n<b>PARMRK</b> is set, in which case it reads as the sequence\n\\377 \\0 \\0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IGNPAR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Ignore framing errors and parity errors.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>PARMRK</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>If this bit is set, input bytes with parity or framing\nerrors are marked when passed to the program. This bit is\nmeaningful only when <b>INPCK</b> is set and <b>IGNPAR</b>\nis not set. The way erroneous bytes are marked is with two\npreceding bytes, \\377 and \\0. Thus, the program actually\nreads three bytes for one erroneous byte received from the\nterminal. If a valid byte has the value \\377, and\n<b>ISTRIP</b> (see below) is not set, the program might\nconfuse it with the prefix that marks a parity error.\nTherefore, a valid byte \\377 is passed to the program as two\nbytes, \\377 \\377, in this case.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If neither\n<b>IGNPAR</b> nor <b>PARMRK</b> is set, read a character\nwith a parity error or framing error as \\0.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>INPCK</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Enable input parity\nchecking.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ISTRIP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Strip off eighth bit.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>INLCR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Translate NL to CR on input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IGNCR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Ignore carriage return on input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ICRNL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Translate carriage return to newline on input (unless\n<b>IGNCR</b> is set).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IUCLC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX) Map uppercase characters to lowercase on\ninput.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IXON</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Enable XON/XOFF flow control on output.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IXANY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(XSI) Typing any character will restart stopped output.\n(The default is to allow just the START character to restart\noutput.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IXOFF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Enable XON/XOFF flow control on input.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>IMAXBEL</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX) Ring bell when\ninput queue is full. Linux does not implement this bit, and\nacts as if it is always set.</p>\n\n<p style=\"margin-left:11%;\"><b>IUTF8</b> (since Linux\n2.6.4)</p>\n\n<p style=\"margin-left:22%;\">(not in POSIX) Input is UTF8;\nthis allows character-erase to be correctly performed in\ncooked mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>c_oflag</i>\nflag constants:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OPOST</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Enable implementation-defined output processing.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OLCUC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX) Map lowercase characters to uppercase on\noutput.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ONLCR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(XSI) Map NL to CR-NL on output.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OCRNL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Map CR to NL on output.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ONOCR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Don&rsquo;t output CR at column 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ONLRET</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Don&rsquo;t output CR.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OFILL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Send fill characters for a delay, rather than using a\ntimed delay.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>OFDEL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Fill character is ASCII DEL (0177). If unset, fill\ncharacter is ASCII NUL ('\\0'). (Not implemented on\nLinux.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>NLDLY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Newline delay mask. Values are <b>NL0</b> and\n<b>NL1</b>. [requires <b>_BSD_SOURCE</b> or\n<b>_SVID_SOURCE</b> or <b>_XOPEN_SOURCE</b>]</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CRDLY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Carriage return delay mask. Values are <b>CR0</b>,\n<b>CR1</b>, <b>CR2</b>, or <b>CR3</b>. [requires\n<b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b> or\n<b>_XOPEN_SOURCE</b>]</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>TABDLY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Horizontal tab delay mask. Values are <b>TAB0</b>,\n<b>TAB1</b>, <b>TAB2</b>, <b>TAB3</b> (or <b>XTABS</b>, but\nsee the <b>BUGS</b> section). A value of TAB3, that is,\nXTABS, expands tabs to spaces (with tab stops every eight\ncolumns). [requires <b>_BSD_SOURCE</b> or\n<b>_SVID_SOURCE</b> or <b>_XOPEN_SOURCE</b>]</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>BSDLY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Backspace delay mask. Values are <b>BS0</b> or\n<b>BS1</b>. (Has never been implemented.) [requires\n<b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b> or\n<b>_XOPEN_SOURCE</b>]</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VTDLY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Vertical tab delay mask. Values are <b>VT0</b> or\n<b>VT1</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FFDLY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Form feed delay mask. Values are <b>FF0</b> or\n<b>FF1</b>. [requires <b>_BSD_SOURCE</b> or\n<b>_SVID_SOURCE</b> or <b>_XOPEN_SOURCE</b>]</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>c_cflag</i>\nflag constants:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><b>CBAUD</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">(not in POSIX) Baud speed mask\n(4+1 bits). [requires <b>_BSD_SOURCE</b> or\n<b>_SVID_SOURCE</b>]</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CBAUDEX</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX) Extra baud speed\nmask (1 bit), included in <b>CBAUD</b>. [requires\n<b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b>]</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">(POSIX says\nthat the baud speed is stored in the <i>termios</i>\nstructure without specifying where precisely, and provides\n<b>cfgetispeed</b>() and <b>cfsetispeed</b>() for getting at\nit. Some systems use bits selected by <b>CBAUD</b> in\n<i>c_cflag</i>, other systems use separate fields, for\nexample, <i>sg_ispeed</i> and <i>sg_ospeed</i>.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CSIZE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Character size mask. Values are <b>CS5</b>, <b>CS6</b>,\n<b>CS7</b>, or <b>CS8</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CSTOPB</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Set two stop bits, rather than one.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CREAD</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Enable receiver.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>PARENB</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Enable parity generation on output and parity checking\nfor input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>PARODD</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>If set, then parity for input and output is odd;\notherwise even parity is used.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>HUPCL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Lower modem control lines after last process closes the\ndevice (hang up).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CLOCAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Ignore modem control lines.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>LOBLK</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX) Block output from a noncurrent shell\nlayer. For use by <b>shl</b> (shell layers). (Not\nimplemented on Linux.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CIBAUD</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX) Mask for input speeds. The values for the\n<b>CIBAUD</b> bits are the same as the values for the\n<b>CBAUD</b> bits, shifted left <b>IBSHIFT</b> bits.\n[requires <b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b>] (Not\nimplemented on Linux.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CMSPAR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX) Use &quot;stick&quot; (mark/space) parity\n(supported on certain serial devices): if <b>PARODD</b> is\nset, the parity bit is always 1; if <b>PARODD</b> is not\nset, then the parity bit is always 0. [requires\n<b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b>]</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CRTSCTS</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX) Enable RTS/CTS\n(hardware) flow control. [requires <b>_BSD_SOURCE</b> or\n<b>_SVID_SOURCE</b>]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>c_lflag</i>\nflag constants:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ISIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>When any of the characters INTR, QUIT, SUSP, or DSUSP\nare received, generate the corresponding signal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ICANON</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Enable canonical mode (described below).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>XCASE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX; not supported under Linux) If\n<b>ICANON</b> is also set, terminal is uppercase only. Input\nis converted to lowercase, except for characters preceded by\n\\. On output, uppercase characters are preceded by \\ and\nlowercase characters are converted to uppercase. [requires\n<b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b> or\n<b>_XOPEN_SOURCE</b>]</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ECHO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Echo input characters.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ECHOE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>If <b>ICANON</b> is also set, the ERASE character erases\nthe preceding input character, and WERASE erases the\npreceding word.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ECHOK</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>If <b>ICANON</b> is also set, the KILL character erases\nthe current line.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ECHONL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>If <b>ICANON</b> is also set, echo the NL character even\nif ECHO is not set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ECHOCTL</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX) If <b>ECHO</b>\nis also set, terminal special characters other than TAB, NL,\nSTART, and STOP are echoed as <b>^X</b>, where X is the\ncharacter with ASCII code 0x40 greater than the special\ncharacter. For example, character 0x08 (BS) is echoed as\n<b>^H</b>. [requires <b>_BSD_SOURCE</b> or\n<b>_SVID_SOURCE</b>]</p>\n\n<p style=\"margin-left:11%;\"><b>ECHOPRT</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX) If <b>ICANON</b>\nand <b>ECHO</b> are also set, characters are printed as they\nare being erased. [requires <b>_BSD_SOURCE</b> or\n<b>_SVID_SOURCE</b>]</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ECHOKE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX) If <b>ICANON</b> is also set, KILL is\nechoed by erasing each character on the line, as specified\nby <b>ECHOE</b> and <b>ECHOPRT</b>. [requires\n<b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b>]</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>DEFECHO</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX) Echo only when a\nprocess is reading. (Not implemented on Linux.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FLUSHO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX; not supported under Linux) Output is\nbeing flushed. This flag is toggled by typing the DISCARD\ncharacter. [requires <b>_BSD_SOURCE</b> or\n<b>_SVID_SOURCE</b>]</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>NOFLSH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Disable flushing the input and output queues when\ngenerating signals for the INT, QUIT, and SUSP\ncharacters.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>TOSTOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Send the <b>SIGTTOU</b> signal to the process group of a\nbackground process which tries to write to its controlling\nterminal.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>PENDIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX; not supported under Linux) All characters\nin the input queue are reprinted when the next character is\nread. (<a href=\"https://man.page/1/bash\">bash(1)</a> handles typeahead this way.) [requires\n<b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b>]</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IEXTEN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Enable implementation-defined input processing. This\nflag, as well as <b>ICANON</b> must be enabled for the\nspecial characters EOL2, LNEXT, REPRINT, WERASE to be\ninterpreted, and for the <b>IUCLC</b> flag to be\neffective.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>c_cc</i>\narray defines the terminal special characters. The symbolic\nindices (initial values) and meaning are: <b><br>\nVDISCARD</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX; not supported\nunder Linux; 017, SI, Ctrl-O) Toggle: start/stop discarding\npending output. Recognized when <b>IEXTEN</b> is set, and\nthen not passed as input.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VDSUSP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX; not supported under Linux; 031, EM,\nCtrl-Y) Delayed suspend character (DSUSP): send\n<b>SIGTSTP</b> signal when the character is read by the user\nprogram. Recognized when <b>IEXTEN</b> and <b>ISIG</b> are\nset, and the system supports job control, and then not\npassed as input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VEOF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(004, EOT, Ctrl-D) End-of-file character (EOF). More\nprecisely: this character causes the pending tty buffer to\nbe sent to the waiting user program without waiting for\nend-of-line. If it is the first character of the line, the\n<a href=\"https://man.page/2/read\">read(2)</a> in the user program returns 0, which\nsignifies end-of-file. Recognized when <b>ICANON</b> is set,\nand then not passed as input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VEOL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(0, NUL) Additional end-of-line character (EOL).\nRecognized when <b>ICANON</b> is set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VEOL2</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX; 0, NUL) Yet another end-of-line character\n(EOL2). Recognized when <b>ICANON</b> is set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VERASE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(0177, DEL, rubout, or 010, BS, Ctrl-H, or also #) Erase\ncharacter (ERASE). This erases the previous not-yet-erased\ncharacter, but does not erase past EOF or beginning-of-line.\nRecognized when <b>ICANON</b> is set, and then not passed as\ninput.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(003, ETX, Ctrl-C, or also 0177, DEL, rubout) Interrupt\ncharacter (INTR). Send a <b>SIGINT</b> signal. Recognized\nwhen <b>ISIG</b> is set, and then not passed as input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VKILL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(025, NAK, Ctrl-U, or Ctrl-X, or also @) Kill character\n(KILL). This erases the input since the last EOF or\nbeginning-of-line. Recognized when <b>ICANON</b> is set, and\nthen not passed as input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VLNEXT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX; 026, SYN, Ctrl-V) Literal next (LNEXT).\nQuotes the next input character, depriving it of a possible\nspecial meaning. Recognized when <b>IEXTEN</b> is set, and\nthen not passed as input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VMIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Minimum number of characters for noncanonical read\n(MIN).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VQUIT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(034, FS, Ctrl-\\) Quit character (QUIT). Send\n<b>SIGQUIT</b> signal. Recognized when <b>ISIG</b> is set,\nand then not passed as input.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>VREPRINT</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX; 022, DC2,\nCtrl-R) Reprint unread characters (REPRINT). Recognized when\n<b>ICANON</b> and <b>IEXTEN</b> are set, and then not passed\nas input.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VSTART</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(021, DC1, Ctrl-Q) Start character (START). Restarts\noutput stopped by the Stop character. Recognized when\n<b>IXON</b> is set, and then not passed as input.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>VSTATUS</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX; not supported\nunder Linux; status request: 024, DC4, Ctrl-T). Status\ncharacter (STATUS). Display status information at terminal,\nincluding state of foreground process and amount of CPU time\nit has consumed. Also sends a <b>SIGINFO</b> signal (not\nsupported on Linux) to the foreground process group.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VSTOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(023, DC3, Ctrl-S) Stop character (STOP). Stop output\nuntil Start character typed. Recognized when <b>IXON</b> is\nset, and then not passed as input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VSUSP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(032, SUB, Ctrl-Z) Suspend character (SUSP). Send\n<b>SIGTSTP</b> signal. Recognized when <b>ISIG</b> is set,\nand then not passed as input.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VSWTCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(not in POSIX; not supported under Linux; 0, NUL) Switch\ncharacter (SWTCH). Used in System V to switch shells in\n<i>shell layers</i>, a predecessor to shell job control.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>VTIME</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Timeout in deciseconds for noncanonical read (TIME).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>VWERASE</b></p>\n\n<p style=\"margin-left:22%;\">(not in POSIX; 027, ETB,\nCtrl-W) Word erase (WERASE). Recognized when <b>ICANON</b>\nand <b>IEXTEN</b> are set, and then not passed as input.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An individual\nterminal special character can be disabled by setting the\nvalue of the corresponding <i>c_cc</i> element to\n<b>_POSIX_VDISABLE</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above\nsymbolic subscript values are all different, except that\n<b>VTIME</b>, <b>VMIN</b> may have the same value as\n<b>VEOL</b>, <b>VEOF</b>, respectively. In noncanonical mode\nthe special character meaning is replaced by the timeout\nmeaning. For an explanation of <b>VMIN</b> and <b>VTIME</b>,\nsee the description of noncanonical mode below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Retrieving\nand changing terminal settings <br>\ntcgetattr</b>() gets the parameters associated with the\nobject referred by <i>fd</i> and stores them in the\n<i>termios</i> structure referenced by <i>termios_p</i>.\nThis function may be invoked from a background process;\nhowever, the terminal attributes may be subsequently changed\nby a foreground process.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tcsetattr</b>()\nsets the parameters associated with the terminal (unless\nsupport is required from the underlying hardware that is not\navailable) from the <i>termios</i> structure referred to by\n<i>termios_p</i>. <i>optional_actions</i> specifies when the\nchanges take effect: <b><br>\nTCSANOW</b></p>\n\n<p style=\"margin-left:22%;\">the change occurs\nimmediately.</p>\n\n<p style=\"margin-left:11%;\"><b>TCSADRAIN</b></p>\n\n<p style=\"margin-left:22%;\">the change occurs after all\noutput written to <i>fd</i> has been transmitted. This\noption should be used when changing parameters that affect\noutput.</p>\n\n<p style=\"margin-left:11%;\"><b>TCSAFLUSH</b></p>\n\n<p style=\"margin-left:22%;\">the change occurs after all\noutput written to the object referred by <i>fd</i> has been\ntransmitted, and all input that has been received but not\nread will be discarded before the change is made.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Canonical\nand noncanonical mode</b> <br>\nThe setting of the <b>ICANON</b> canon flag in\n<i>c_lflag</i> determines whether the terminal is operating\nin canonical mode (<b>ICANON</b> set) or noncanonical mode\n(<b>ICANON</b> unset). By default, <b>ICANON</b> is set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In canonical\nmode:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Input is made available line by line. An input line is\navailable when one of the line delimiters is typed (NL, EOL,\nEOL2; or EOF at the start of line). Except in the case of\nEOF, the line delimiter is included in the buffer returned\nby <a href=\"https://man.page/2/read\">read(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Line editing is enabled (ERASE, KILL; and if the\n<b>IEXTEN</b> flag is set: WERASE, REPRINT, LNEXT). A\n<a href=\"https://man.page/2/read\">read(2)</a> returns at most one line of input; if the\n<a href=\"https://man.page/2/read\">read(2)</a> requested fewer bytes than are available in\nthe current line of input, then only as many bytes as\nrequested are read, and the remaining characters will be\navailable for a future <a href=\"https://man.page/2/read\">read(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The maximum line length is 4096 chars (including the\nterminating newline character); lines longer than 4096 chars\nare truncated. After 4095 characters, input processing\n(e.g., <b>ISIG</b> and <b>ECHO*</b> processing) continues,\nbut any input data after 4095 characters up to (but not\nincluding) any terminating newline is discarded. This\nensures that the terminal can always receive more input\nuntil at least one line can be read.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In noncanonical\nmode input is available immediately (without the user having\nto type a line-delimiter character), no input processing is\nperformed, and line editing is disabled. The read buffer\nwill only accept 4095 chars; this provides the necessary\nspace for a newline char if the input mode is switched to\ncanonical. The settings of MIN (<i>c_cc[VMIN]</i>) and TIME\n(<i>c_cc[VTIME]</i>) determine the circumstances in which a\n<a href=\"https://man.page/2/read\">read(2)</a> completes; there are four distinct cases:\n<br>\nMIN == 0, TIME == 0 (polling read)</p>\n\n<p style=\"margin-left:22%;\">If data is available,\n<a href=\"https://man.page/2/read\">read(2)</a> returns immediately, with the lesser of the\nnumber of bytes available, or the number of bytes requested.\nIf no data is available, <a href=\"https://man.page/2/read\">read(2)</a> returns 0.</p>\n\n<p style=\"margin-left:11%;\">MIN &gt; 0, TIME == 0 (blocking\nread)</p>\n\n<p style=\"margin-left:22%;\"><a href=\"https://man.page/2/read\">read(2)</a> blocks until MIN\nbytes are available, and returns up to the number of bytes\nrequested.</p>\n\n<p style=\"margin-left:11%;\">MIN == 0, TIME &gt; 0 (read\nwith timeout)</p>\n\n<p style=\"margin-left:22%;\">TIME specifies the limit for a\ntimer in tenths of a second. The timer is started when\n<a href=\"https://man.page/2/read\">read(2)</a> is called. <a href=\"https://man.page/2/read\">read(2)</a> returns either when\nat least one byte of data is available, or when the timer\nexpires. If the timer expires without any input becoming\navailable, <a href=\"https://man.page/2/read\">read(2)</a> returns 0. If data is already\navailable at the time of the call to <a href=\"https://man.page/2/read\">read(2)</a>, the\ncall behaves as though the data was received immediately\nafter the call.</p>\n\n<p style=\"margin-left:11%;\">MIN &gt; 0, TIME &gt; 0 (read\nwith interbyte timeout)</p>\n\n<p style=\"margin-left:22%;\">TIME specifies the limit for a\ntimer in tenths of a second. Once an initial byte of input\nbecomes available, the timer is restarted after each further\nbyte is received. <a href=\"https://man.page/2/read\">read(2)</a> returns when any of the\nfollowing conditions is met:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>MIN bytes have been received.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The interbyte timer expires.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of bytes requested by <a href=\"https://man.page/2/read\">read(2)</a> has been\nreceived. (POSIX does not specify this termination\ncondition, and on some other implementations <a href=\"https://man.page/2/read\">read(2)</a>\ndoes not return in this case.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Because the\ntimer is started only after the initial byte becomes\navailable, at least one byte will be read. If data is\nalready available at the time of the call to <a href=\"https://man.page/2/read\">read(2)</a>,\nthe call behaves as though the data was received immediately\nafter the call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX does not\nspecify whether the setting of the <b>O_NONBLOCK</b> file\nstatus flag takes precedence over the MIN and TIME settings.\nIf <b>O_NONBLOCK</b> is set, a <a href=\"https://man.page/2/read\">read(2)</a> in\nnoncanonical mode may return immediately, regardless of the\nsetting of MIN or TIME. Furthermore, if no data is\navailable, POSIX permits a <a href=\"https://man.page/2/read\">read(2)</a> in noncanonical\nmode to return either 0, or -1 with <i>errno</i> set to\n<b>EAGAIN</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Raw mode\n<br>\ncfmakeraw</b>() sets the terminal to something like the\n&quot;raw&quot; mode of the old Version 7 terminal driver:\ninput is available character by character, echoing is\ndisabled, and all special processing of terminal input and\noutput characters is disabled. The terminal attributes are\nset as follows:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">termios_p-&gt;c_iflag\n&amp;= ~(IGNBRK | BRKINT | PARMRK | ISTRIP <br>\n| INLCR | IGNCR | ICRNL | IXON); <br>\ntermios_p-&gt;c_oflag &amp;= ~OPOST; <br>\ntermios_p-&gt;c_lflag &amp;= ~(ECHO | ECHONL | ICANON | ISIG\n| IEXTEN); <br>\ntermios_p-&gt;c_cflag &amp;= ~(CSIZE | PARENB); <br>\ntermios_p-&gt;c_cflag |= CS8;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Line control\n<br>\ntcsendbreak</b>() transmits a continuous stream of\nzero-valued bits for a specific duration, if the terminal is\nusing asynchronous serial data transmission. If\n<i>duration</i> is zero, it transmits zero-valued bits for\nat least 0.25 seconds, and not more than 0.5 seconds. If\n<i>duration</i> is not zero, it sends zero-valued bits for\nsome implementation-defined length of time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the terminal\nis not using asynchronous serial data transmission,\n<b>tcsendbreak</b>() returns without taking any action.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tcdrain</b>()\nwaits until all output written to the object referred to by\n<i>fd</i> has been transmitted.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tcflush</b>()\ndiscards data written to the object referred to by <i>fd</i>\nbut not transmitted, or data received but not read,\ndepending on the value of <i>queue_selector</i>: <b><br>\nTCIFLUSH</b></p>\n\n<p style=\"margin-left:22%;\">flushes data received but not\nread.</p>\n\n<p style=\"margin-left:11%;\"><b>TCOFLUSH</b></p>\n\n<p style=\"margin-left:22%;\">flushes data written but not\ntransmitted.</p>\n\n<p style=\"margin-left:11%;\"><b>TCIOFLUSH</b></p>\n\n<p style=\"margin-left:22%;\">flushes both data received but\nnot read, and data written but not transmitted.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tcflow</b>()\nsuspends transmission or reception of data on the object\nreferred to by <i>fd</i>, depending on the value of\n<i>action</i>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>TCOOFF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>suspends output.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>TCOON</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>restarts suspended output.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>TCIOFF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>transmits a STOP character, which stops the terminal\ndevice from transmitting data to the system.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>TCION</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>transmits a START character, which starts the terminal\ndevice transmitting data to the system.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default on\nopen of a terminal file is that neither its input nor its\noutput is suspended.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Line\nspeed</b> <br>\nThe baud rate functions are provided for getting and setting\nthe values of the input and output baud rates in the\n<i>termios</i> structure. The new values do not take effect\nuntil <b>tcsetattr</b>() is successfully called.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Setting the\nspeed to <b>B0</b> instructs the modem to &quot;hang\nup&quot;. The actual bit rate corresponding to <b>B38400</b>\nmay be altered with <b>setserial</b>(8).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The input and\noutput baud rates are stored in the <i>termios</i>\nstructure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfgetospeed</b>()\nreturns the output baud rate stored in the <i>termios</i>\nstructure pointed to by <i>termios_p</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfsetospeed</b>()\nsets the output baud rate stored in the <i>termios</i>\nstructure pointed to by <i>termios_p</i> to <i>speed</i>,\nwhich must be one of these constants:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>B0</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B50</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B75</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B110</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B134</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B150</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B200</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B300</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B600</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B1200</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B1800</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B2400</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B4800</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B9600</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B19200</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B38400</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B57600</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B115200</b></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p><b>B230400</b></p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The zero baud\nrate, <b>B0</b>, is used to terminate the connection. If B0\nis specified, the modem control lines shall no longer be\nasserted. Normally, this will disconnect the line.\n<b>CBAUDEX</b> is a mask for the speeds beyond those defined\nin POSIX.1 (57600 and above). Thus, <b>B57600</b> &amp;\n<b>CBAUDEX</b> is nonzero.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfgetispeed</b>()\nreturns the input baud rate stored in the <i>termios</i>\nstructure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfsetispeed</b>()\nsets the input baud rate stored in the <i>termios</i>\nstructure to <i>speed</i>, which must be specified as one of\nthe <b>Bnnn</b> constants listed above for\n<b>cfsetospeed</b>(). If the input baud rate is set to zero,\nthe input baud rate will be equal to the output baud\nrate.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfsetspeed</b>()\nis a 4.4BSD extension. It takes the same arguments as\n<b>cfsetispeed</b>(), and sets both input and output\nspeed.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfgetispeed</b>()\nreturns the input baud rate stored in the <i>termios</i>\nstructure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfgetospeed</b>()\nreturns the output baud rate stored in the <i>termios</i>\nstructure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All other\nfunctions return:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">0</p></td>\n<td width=\"8%\"></td>\n<td width=\"72%\">\n\n\n<p style=\"margin-top: 1em\">on success.</p></td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-1</p></td>\n<td width=\"8%\"></td>\n<td width=\"72%\">\n\n\n<p>on failure and set <i>errno</i> to indicate the\nerror.</p> </td>\n<td width=\"6%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\n<b>tcsetattr</b>() returns success if <i>any</i> of the\nrequested changes could be successfully carried out.\nTherefore, when making multiple changes it may be necessary\nto follow this call with a further call to\n<b>tcgetattr</b>() to check that all changes have been\nperformed successfully.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3337011.png\" alt=\"Image grohtml-3337011.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tcgetattr</b>(),\n<b>tcsetattr</b>(), <b>tcsendbreak</b>(), <b>tcdrain</b>(),\n<b>tcflush</b>(), <b>tcflow</b>(), <b>cfgetispeed</b>(),\n<b>cfgetospeed</b>(), <b>cfsetispeed</b>(), and\n<b>cfsetospeed</b>() are specified in POSIX.1-2001.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cfmakeraw</b>()\nand <b>cfsetspeed</b>() are nonstandard, but available on\nthe BSDs.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">UNIX&nbsp;V7\nand several later systems have a list of baud rates where\nafter the fourteen values B0, ..., B9600 one finds the two\nconstants EXTA, EXTB (&quot;External A&quot; and\n&quot;External B&quot;). Many systems extend the list with\nmuch higher baud rates.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The effect of a\nnonzero <i>duration</i> with <b>tcsendbreak</b>() varies.\nSunOS specifies a break of <i>duration&nbsp;*&nbsp;N</i>\nseconds, where <i>N</i> is at least 0.25, and not more than\n0.5. Linux, AIX, DU, Tru64 send a break of <i>duration</i>\nmilliseconds. FreeBSD and NetBSD and HP-UX and MacOS ignore\nthe value of <i>duration</i>. Under Solaris and UnixWare,\n<b>tcsendbreak</b>() with nonzero <i>duration</i> behaves\nlike <b>tcdrain</b>().</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On the Alpha\narchitecture before Linux 4.16 (and glibc before 2.28), the\n<b>XTABS</b> value was different from <b>TAB3</b> and it was\nignored by the <b>N_TTY</b> line discipline code of the\nterminal driver as a result (because as it wasn&rsquo;t part\nof the <b>TABDLY</b> mask).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/reset\">reset(1)</a>,\n<a href=\"https://man.page/1/setterm\">setterm(1)</a>, <a href=\"https://man.page/1/stty\">stty(1)</a>, <a href=\"https://man.page/1/tput\">tput(1)</a>,\n<a href=\"https://man.page/1/tset\">tset(1)</a>, <a href=\"https://man.page/1/tty\">tty(1)</a>, <a href=\"https://man.page/2/ioctl_console\">ioctl_console(2)</a>,\n<a href=\"https://man.page/2/ioctl_tty\">ioctl_tty(2)</a>, <b>setserial</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}