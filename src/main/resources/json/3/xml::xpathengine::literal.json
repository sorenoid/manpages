{"name":"xml::xpathengine::literal","description":"XML::XPathEngine::Literal\n- Simple string values.\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nIn XPath terms\na Literal is what we know as a string.\n\n<h2>API\n<a name=\"API\"></a>\n</h2>\n\n\n\n<b>new($string)</b>\n<br>\nCreate a new Literal object with the value in $string. Note\nthat &amp;quot; and &amp;apos; will be converted to &quot;\nand &rsquo; respectively. That is not part of the XPath\nspecification, but I consider it useful. Note though that\nyou have to go to extraordinary lengths in an\n<small>XML</small> template file (be it <small>XSLT</small>\nor whatever) to make use of this:\n\n\n&lt;xsl:value-of\nselect=&quot;&amp;quot;I'm feeling\n&amp;amp;quot;sad&amp;amp;quot;&amp;quot;&quot;/&gt;\n\nWhich produces\na Literal of:\n\nI'm feeling\n&quot;sad&quot;\n\n<i>value()</i>\n<br>\nAlso overloaded as stringification, simply returns the\nliteral string value.\n\n\n<b>cmp($literal)</b>\n<br>\nReturns the equivalent of perl&rsquo;s cmp operator against\nthe given $literal.","body":"\n\n<h1 align=\"center\">XML::XPathEngine::Literal</h1>\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">XML::XPathEngine::Literal\n- Simple string values.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In XPath terms\na Literal is what we know as a string.</p>\n\n<h2>API\n<a name=\"API\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>new($string)</b>\n<br>\nCreate a new Literal object with the value in $string. Note\nthat &amp;quot; and &amp;apos; will be converted to &quot;\nand &rsquo; respectively. That is not part of the XPath\nspecification, but I consider it useful. Note though that\nyou have to go to extraordinary lengths in an\n<small>XML</small> template file (be it <small>XSLT</small>\nor whatever) to make use of this:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;xsl:value-of\nselect=&quot;&amp;quot;I'm feeling\n&amp;amp;quot;sad&amp;amp;quot;&amp;quot;&quot;/&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Which produces\na Literal of:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">I'm feeling\n&quot;sad&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>value()</i>\n<br>\nAlso overloaded as stringification, simply returns the\nliteral string value.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cmp($literal)</b>\n<br>\nReturns the equivalent of perl&rsquo;s cmp operator against\nthe given $literal.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#API\">API</a>"],"level":3}