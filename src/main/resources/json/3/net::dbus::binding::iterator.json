{"name":"net::dbus::binding::iterator","description":"Net::DBus::Binding::Iterator\n- Reading and writing message parameters","body":"\n\n<h1 align=\"center\">Net::DBus::Binding::Iterator</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Binding::Iterator\n- Reading and writing message parameters</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Creating a new\nmessage</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $msg = new\nNet::DBus::Binding::Message::Signal; <br>\nmy $iterator = $msg-&gt;iterator; <br>\n$iterator-&gt;append_boolean(1); <br>\n$iterator-&gt;append_byte(123);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Reading from a\nmessage</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $msg =\n...get it from somewhere... <br>\nmy $iter = $msg-&gt;iterator(); <br>\nmy $i = 0; <br>\nwhile ($iter-&gt;has_next()) { <br>\n$iter-&gt;next(); <br>\n$i++; <br>\nif ($i == 1) { <br>\nmy $val = $iter-&gt;get_boolean(); <br>\n} elsif ($i == 2) { <br>\nmy $val = $iter-&gt;get_byte(); <br>\n} <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Provides an\niterator for reading or writing message fields. This module\nprovides a Perl <small>API</small> to access the\ndbus_message_iter_XXX methods in the C <small>API.</small>\nThe array and dictionary types are not yet supported, and\nthere are bugs in the Quad support (ie it always returns\n-1!).</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$res =\n$iter-&gt;<b>has_next()</b></p>\n\n<p style=\"margin-left:17%;\">Determines if there are any\nmore fields in the message itertor to be read. Returns a\npositive value if there are more fields, zero otherwise.</p>\n\n<p style=\"margin-left:11%;\">$success =\n$iter-&gt;<b>next()</b></p>\n\n<p style=\"margin-left:17%;\">Skips the iterator onto the\nnext field in the message. Returns a positive value if the\ncurrent field pointer was successfully advanced, zero\notherwise.</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_boolean()</b> <br>\n$iter-&gt;append_boolean($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a boolean value\nfrom/to the message iterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_byte()</b> <br>\n$iter-&gt;append_byte($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a single byte\nvalue from/to the message iterator.</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_string()</b> <br>\n$iter-&gt;append_string($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a\n<small>UTF-8</small> string value from/to the message\niterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_object_path()</b> <br>\n$iter-&gt;append_object_path($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a\n<small>UTF-8</small> string value, whose contents is a valid\nobject path, from/to the message iterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_signature()</b> <br>\n$iter-&gt;append_signature($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a\n<small>UTF-8</small> string, whose contents is a valid type\nsignature, value from/to the message iterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_int16()</b> <br>\n$iter-&gt;append_int16($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a signed 16 bit\nvalue from/to the message iterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_uint16()</b> <br>\n$iter-&gt;append_uint16($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write an unsigned 16\nbit value from/to the message iterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_int32()</b> <br>\n$iter-&gt;append_int32($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a signed 32 bit\nvalue from/to the message iterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_uint32()</b> <br>\n$iter-&gt;append_uint32($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write an unsigned 32\nbit value from/to the message iterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_int64()</b> <br>\n$iter-&gt;append_int64($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a signed 64 bit\nvalue from/to the message iterator. An error will be raised\nif this build of Perl does not support 64 bit integers</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_uint64()</b> <br>\n$iter-&gt;append_uint64($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write an unsigned 64\nbit value from/to the message iterator. An error will be\nraised if this build of Perl does not support 64 bit\nintegers</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_double()</b> <br>\n$iter-&gt;append_double($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a double\nprecision floating point value from/to the message\niterator</p>\n\n<p style=\"margin-left:11%;\">my $val =\n$iter-&gt;<b>get_unix_fd()</b> <br>\n$iter-&gt;append_unix_fd($val);</p>\n\n<p style=\"margin-left:17%;\">Read or write a unix_fd value\nfrom/to the message iterator</p>\n\n<p style=\"margin-left:11%;\">my $value =\n$iter-&gt;<b>get()</b> <br>\nmy $value = $iter-&gt;get($type);</p>\n\n<p style=\"margin-left:17%;\">Get the current value pointed\nto by this iterator. If the optional $type parameter is\nsupplied, the wire type will be compared with the desired\ntype &amp; a warning output if their differ. The $type value\nmust be one of the\n&quot;Net::DBus::Binding::Message::TYPE*&quot;\nconstants.</p>\n\n<p style=\"margin-left:11%;\">my $hashref =\n$iter-&gt;<b>get_dict()</b></p>\n\n<p style=\"margin-left:17%;\">If the iterator currently\npoints to a dictionary value, unmarshalls and returns the\nvalue as a hash reference.</p>\n\n<p style=\"margin-left:11%;\">my $hashref =\n$iter-&gt;<b>get_array()</b></p>\n\n<p style=\"margin-left:17%;\">If the iterator currently\npoints to an array value, unmarshalls and returns the value\nas a array reference.</p>\n\n<p style=\"margin-left:11%;\">my $hashref =\n$iter-&gt;<b>get_variant()</b></p>\n\n<p style=\"margin-left:17%;\">If the iterator currently\npoints to a variant value, unmarshalls and returns the value\ncontained in the variant.</p>\n\n<p style=\"margin-left:11%;\">my $hashref =\n$iter-&gt;<b>get_struct()</b></p>\n\n<p style=\"margin-left:17%;\">If the iterator currently\npoints to an struct value, unmarshalls and returns the value\nas a array reference. The values in the array correspond to\nmembers of the struct.</p>\n\n<p style=\"margin-left:11%;\">$iter-&gt;append($value) <br>\n$iter-&gt;append($value, $type)</p>\n\n<p style=\"margin-left:17%;\">Appends a value to the message\nassociated with this iterator. The value is marshalled into\nwire format, according to the following rules.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the $value\nis an instance of Net::DBus::Binding::Value, the embedded\ndata type is used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the $type\nparameter is supplied, that is taken to represent the data\ntype. The type must be one of the\n&quot;Net::DBus::Binding::Message::TYPE_*&quot;\nconstants.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Otherwise, the\ndata type is chosen to be a string, dict or array according\nto the perl data types <small>SCALAR, HASH</small> or\n<small>ARRAY.</small></p>\n\n<p style=\"margin-left:11%;\">my $type =\n$iter-&gt;guess_type($value)</p>\n\n<p style=\"margin-left:17%;\">Make a best guess at the on the\nwire data type to use for marshalling $value. If the value\nis a hash reference, the dictionary type is returned; if the\nvalue is an array reference the array type is returned;\notherwise the string type is returned.</p>\n\n<p style=\"margin-left:11%;\">my $sig =\n$iter-&gt;format_signature($type)</p>\n\n<p style=\"margin-left:17%;\">Given a data type\nrepresentation, construct a corresponding signature\nstring</p>\n\n<p style=\"margin-left:11%;\">$iter-&gt;append_array($value,\n$type)</p>\n\n<p style=\"margin-left:17%;\">Append an array of values to\nthe message. The $value parameter must be an array\nreference, whose elements all have the same data type\nspecified by the $type parameter.</p>\n\n\n<p style=\"margin-left:11%;\">$iter-&gt;append_struct($value,\n$type)</p>\n\n<p style=\"margin-left:17%;\">Append a struct to the message.\nThe $value parameter must be an array reference, whose\nelements correspond to members of the structure. The $type\nparameter encodes the type of each member of the struct.</p>\n\n<p style=\"margin-left:11%;\">$iter-&gt;append_dict($value,\n$type)</p>\n\n<p style=\"margin-left:17%;\">Append a dictionary to the\nmessage. The $value parameter must be an hash reference.The\n$type parameter encodes the type of the key and value of the\nhash.</p>\n\n\n<p style=\"margin-left:11%;\">$iter-&gt;append_variant($value)</p>\n\n<p style=\"margin-left:17%;\">Append a value to the message,\nencoded as a variant type. The $value can be of any type,\nhowever, the variant will be encoded as either a string,\ndictionary or array according to the rules of the\n&quot;guess_type&quot; method.</p>\n\n<p style=\"margin-left:11%;\">my $type =\n$iter-&gt;get_arg_type</p>\n\n<p style=\"margin-left:17%;\">Retrieves the type code of the\nvalue pointing to by this iterator. The returned code will\ncorrespond to one of the constants\n&quot;Net::DBus::Binding::Message::TYPE_*&quot;</p>\n\n<p style=\"margin-left:11%;\">my $type =\n$iter-&gt;get_element_type</p>\n\n<p style=\"margin-left:17%;\">If the iterator points to an\narray, retrieves the type code of array elements. The\nreturned code will correspond to one of the constants\n&quot;Net::DBus::Binding::Message::TYPE_*&quot;</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel P.\nBerrange</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2004-2011 Daniel P. Berrange</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Binding::Message</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}