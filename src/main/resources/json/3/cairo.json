{"name":"cairo","body":"\n\n<h1 align=\"center\">Cairo</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Cairo - Perl\ninterface to the cairo 2d vector graphics library</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Cairo; <br>\nmy $surface = Cairo::ImageSurface-&gt;create ('argb32', 100,\n100); <br>\nmy $cr = Cairo::Context-&gt;create ($surface); <br>\n$cr-&gt;rectangle (10, 10, 40, 40); <br>\n$cr-&gt;set_source_rgb (0, 0, 0); <br>\n$cr-&gt;fill; <br>\n$cr-&gt;rectangle (50, 50, 40, 40); <br>\n$cr-&gt;set_source_rgb (1, 1, 1); <br>\n$cr-&gt;fill; <br>\n$cr-&gt;show_page; <br>\n$surface-&gt;write_to_png ('output.png');</p>\n\n<h2>ABSTRACT\n<a name=\"ABSTRACT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Cairo provides\nPerl bindings for the vector graphics library cairo. It\nsupports multiple output targets, including <small>PNG,\nPDF</small> and <small>SVG.</small> Cairo produces identical\noutput on all those targets.</p>\n\n<h2>API DOCUMENTATION\n<a name=\"API DOCUMENTATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is a\nlisting of the <small>API</small> Cairo provides. For more\nverbose information, refer to the cairo manual at\n&lt;http://cairographics.org/manual/&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Drawing</b>\n<i><br>\nCairo::Context -- The cairo drawing context</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Cairo::Context</i>\nis the main object used when drawing with Cairo. To draw\nwith Cairo, you create a <i>Cairo::Context</i>, set the\ntarget surface, and drawing options for the\n<i>Cairo::Context</i>, create shapes with methods like\n&quot;$cr-&gt;move_to&quot; and &quot;$cr-&gt;line_to&quot;,\nand then draw shapes with &quot;$cr-&gt;stroke&quot; or\n&quot;$cr-&gt;fill&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Cairo::Context</i>&rsquo;s\ncan be pushed to a stack via &quot;$cr-&gt;save&quot;. They\nmay then safely be changed, without loosing the current\nstate. Use &quot;$cr-&gt;restore&quot; to restore to the\nsaved state. <br>\n$cr = Cairo::Context-&gt;create ($surface)</p>\n\n<p style=\"margin-left:17%;\">$surface:\n<i>Cairo::Surface</i></p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;save <br>\n$cr-&gt;restore <br>\n$status = $cr-&gt;status <br>\n$surface = $cr-&gt;get_target <br>\n$cr-&gt;push_group [1.2] <br>\n$cr-&gt;push_group_with_content ($content) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$content:\n<i>Cairo::Content</i></p>\n\n<p style=\"margin-left:11%;\">$pattern = $cr-&gt;pop_group\n[1.2] <br>\n$cr-&gt;pop_group_to_source [1.2] <br>\n$surface = $cr-&gt;get_group_target [1.2] <br>\n$cr-&gt;set_source_rgb ($red, $green, $blue)</p>\n\n<p style=\"margin-left:17%;\">$red: double <br>\n$green: double <br>\n$blue: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;set_source_rgba ($red,\n$green, $blue, $alpha)</p>\n\n<p style=\"margin-left:17%;\">$red: double <br>\n$green: double <br>\n$blue: double <br>\n$alpha: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;set_source\n($source)</p>\n\n<p style=\"margin-left:17%;\">$source:\n<i>Cairo::Pattern</i></p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;set_source_surface\n($surface, $x, $y)</p>\n\n<p style=\"margin-left:17%;\">$surface: <i>Cairo::Surface</i>\n<br>\n$x: double <br>\n$y: double</p>\n\n<p style=\"margin-left:11%;\">$source = $cr-&gt;get_source\n<br>\n$cr-&gt;set_antialias ($antialias)</p>\n\n<p style=\"margin-left:17%;\">$antialias:\n<i>Cairo::Antialias</i></p>\n\n<p style=\"margin-left:11%;\">$antialias =\n$cr-&gt;get_antialias <br>\n$cr-&gt;set_dash ($offset, ...)</p>\n\n<p style=\"margin-left:17%;\">$offset: double <br>\n...: list of doubles</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;set_fill_rule\n($fill_rule)</p>\n\n<p style=\"margin-left:17%;\">$fill_rule:\n<i>Cairo::FillRule</i></p>\n\n<p style=\"margin-left:11%;\">$fill_rule =\n$cr-&gt;get_fill_rule <br>\n$cr-&gt;set_line_cap ($line_cap)</p>\n\n<p style=\"margin-left:17%;\">$line_cap:\n<i>Cairo::LineCap</i></p>\n\n<p style=\"margin-left:11%;\">$line_cap =\n$cr-&gt;get_line_cap <br>\n$cr-&gt;set_line_join ($line_join)</p>\n\n<p style=\"margin-left:17%;\">$line_join:\n<i>Cairo::LineJoin</i></p>\n\n<p style=\"margin-left:11%;\">$line_join =\n$cr-&gt;get_line_join <br>\n$cr-&gt;set_line_width ($width)</p>\n\n<p style=\"margin-left:17%;\">$width: double</p>\n\n<p style=\"margin-left:11%;\">$width = $cr-&gt;get_line_width\n<br>\n$cr-&gt;set_miter_limit ($limit)</p>\n\n<p style=\"margin-left:17%;\">$limit: double</p>\n\n<p style=\"margin-left:11%;\">($offset, @dashes) =\n$cr-&gt;get_dash [1.4] <br>\n$limit = $cr-&gt;get_miter_limit <br>\n$cr-&gt;set_operator ($op)</p>\n\n<p style=\"margin-left:17%;\">$op: <i>Cairo::Operator</i></p>\n\n<p style=\"margin-left:11%;\">$op = $cr-&gt;get_operator <br>\n$cr-&gt;set_tolerance ($tolerance)</p>\n\n<p style=\"margin-left:17%;\">$tolerance: double</p>\n\n<p style=\"margin-left:11%;\">$tolerance =\n$cr-&gt;get_tolerance <br>\n$cr-&gt;clip <br>\n$cr-&gt;clip_preserve <br>\n($x1, $y1, $x2, $y2) = $cr-&gt;clip_extents [1.4] <br>\n$bool = $cr-&gt;in_clip ($x, $y) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double</p>\n\n<p style=\"margin-left:11%;\">@rectangles =\n$cr-&gt;copy_clip_rectangle_list [1.4] <br>\n$cr-&gt;reset_clip <br>\n$cr-&gt;fill <br>\n$cr-&gt;fill_preserve <br>\n($x1, $y1, $x2, $y2) = $cr-&gt;fill_extents <br>\n$bool = $cr-&gt;in_fill ($x, $y)</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;mask ($pattern)</p>\n\n<p style=\"margin-left:17%;\">$pattern:\n<i>Cairo::Pattern</i></p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;mask_surface ($surface,\n$surface_x, $surface_y)</p>\n\n<p style=\"margin-left:17%;\">$surface: <i>Cairo::Surface</i>\n<br>\n$surface_x: double <br>\n$surface_y: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;paint <br>\n$cr-&gt;paint_with_alpha ($alpha)</p>\n\n<p style=\"margin-left:17%;\">$alpha: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;stroke <br>\n$cr-&gt;stroke_preserve <br>\n($x1, $y1, $x2, $y2) = $cr-&gt;stroke_extents <br>\n$bool = $cr-&gt;in_stroke ($x, $y)</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;tag_begin($name, $atts)\n[1.16]</p>\n\n<p style=\"margin-left:17%;\">$name: string <br>\n$atts: string</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;tag_end($name)\n[1.16]</p>\n\n<p style=\"margin-left:17%;\">$name: string</p>\n\n<p style=\"margin-left:11%;\">Predefined names:</p>\n\n<p style=\"margin-left:17%;\">Cairo::TAG_DEST [1.16] <br>\nCairo::TAG_LINK [1.16]</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;copy_page <br>\n$cr-&gt;show_page</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Paths --\nCreating paths and manipulating path data</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$path = [ <br>\n{ type =&gt; &quot;move-to&quot;, points =&gt; [[1, 2]] },\n<br>\n{ type =&gt; &quot;line-to&quot;, points =&gt; [[3, 4]] },\n<br>\n{ type =&gt; &quot;curve-to&quot;, points =&gt; [[5, 6], [7,\n8], [9, 10]] }, <br>\n... <br>\n{ type =&gt; &quot;close-path&quot;, points =&gt; [] }, <br>\n];</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Cairo::Path</i>\nis a data structure for holding a path. This data structure\nserves as the return value for &quot;$cr-&gt;copy_path&quot;\nand &quot;$cr-&gt;copy_path_flat&quot; as well the input\nvalue for &quot;$cr-&gt;append_path&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Cairo::Path</i>\nis represented as an array reference that contains path\nelements, represented by hash references with two keys:\n<i>type</i> and <i>points</i>. The value for <i>type</i> can\nbe either of the following: <br>\n&quot;move-to&quot; <br>\n&quot;line-to&quot; <br>\n&quot;curve-to&quot; <br>\n&quot;close-path&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value for\n<i>points</i> is an array reference which contains zero or\nmore points. Points are represented as array references that\ncontain two doubles: <i>x</i> and <i>y</i>. The necessary\nnumber of points depends on the <i>type</i> of the path\nelement: <br>\n&quot;move-to&quot;: 1 point <br>\n&quot;line_to&quot;: 1 point <br>\n&quot;curve-to&quot;: 3 points <br>\n&quot;close-path&quot;: 0 points</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The semantics\nand ordering of the coordinate values are consistent with\n&quot;$cr-&gt;move_to&quot;, &quot;$cr-&gt;line_to&quot;,\n&quot;$cr-&gt;curve_to&quot;, and\n&quot;$cr-&gt;close_path&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\npaths returned by Cairo are implemented as tied array\nreferences which do <b>not</b> support adding, removing or\nshuffling of path segments. For these operations, you need\nto make a shallow copy first:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my @path_clone\n= @{$path}; <br>\n# now you can alter @path_clone which ever way you want</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The points of a\nsingle path element can be changed directly, however,\nwithout the need for a shallow copy:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$path-&gt;[$i]{points}\n= [[3, 4], [5, 6], [7, 8]]; <br>\n$path = $cr-&gt;copy_path <br>\n$path = $cr-&gt;copy_path_flat <br>\n$cr-&gt;append_path ($path)</p>\n\n<p style=\"margin-left:17%;\">$path: <i>Cairo::Path</i></p>\n\n<p style=\"margin-left:11%;\">$bool =\n$cr-&gt;has_current_point [1.6] <br>\n($x, $y) = $cr-&gt;get_current_point <br>\n$cr-&gt;new_path <br>\n$cr-&gt;new_sub_path [1.2] <br>\n$cr-&gt;close_path <br>\n($x1, $y1, $x2, $y2) = $cr-&gt;path_extents [1.6] <br>\n$cr-&gt;arc ($xc, $yc, $radius, $angle1, $angle2)</p>\n\n<p style=\"margin-left:17%;\">$xc: double <br>\n$yc: double <br>\n$radius: double <br>\n$angle1: double <br>\n$angle2: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;arc_negative ($xc, $yc,\n$radius, $angle1, $angle2)</p>\n\n<p style=\"margin-left:17%;\">$xc: double <br>\n$yc: double <br>\n$radius: double <br>\n$angle1: double <br>\n$angle2: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;curve_to ($x1, $y1,\n$x2, $y2, $x3, $y3)</p>\n\n<p style=\"margin-left:17%;\">$x1: double <br>\n$y1: double <br>\n$x2: double <br>\n$y2: double <br>\n$x3: double <br>\n$y3: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;line_to ($x, $y)</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;move_to ($x, $y)</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;rectangle ($x, $y,\n$width, $height)</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double <br>\n$width: double <br>\n$height: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;glyph_path (...)</p>\n\n<p style=\"margin-left:17%;\">...: list of\n<i>Cairo::Glyph</i>&rsquo;s</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;text_path ($utf8)</p>\n\n<p style=\"margin-left:17%;\">$utf8: string in utf8\nencoding</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;rel_curve_to ($dx1,\n$dy1, $dx2, $dy2, $dx3, $dy3)</p>\n\n<p style=\"margin-left:17%;\">$dx1: double <br>\n$dy1: double <br>\n$dx2: double <br>\n$dy2: double <br>\n$dx3: double <br>\n$dy3: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;rel_line_to ($dx,\n$dy)</p>\n\n<p style=\"margin-left:17%;\">$dx: double <br>\n$dy: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;rel_move_to ($dx,\n$dy)</p>\n\n<p style=\"margin-left:17%;\">$dx: double <br>\n$dy: double</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Patterns --\nGradients and filtered sources</i> <br>\n$status = $pattern-&gt;status <br>\n$type = $pattern-&gt;get_type [1.2] <br>\n$pattern-&gt;set_extend ($extend)</p>\n\n<p style=\"margin-left:17%;\">$extend:\n<i>Cairo::Extend</i></p>\n\n<p style=\"margin-left:11%;\">$extend =\n$pattern-&gt;get_extend <br>\n$pattern-&gt;set_filter ($filter)</p>\n\n<p style=\"margin-left:17%;\">$filter:\n<i>Cairo::Filter</i></p>\n\n<p style=\"margin-left:11%;\">$filter =\n$pattern-&gt;get_filter <br>\n$pattern-&gt;set_matrix ($matrix)</p>\n\n<p style=\"margin-left:17%;\">$matrix:\n<i>Cairo::Matrix</i></p>\n\n<p style=\"margin-left:11%;\">$matrix =\n$pattern-&gt;get_matrix <br>\n$pattern = Cairo::SolidPattern-&gt;create_rgb ($red, $green,\n$blue)</p>\n\n<p style=\"margin-left:17%;\">$red: double <br>\n$green: double <br>\n$blue: double</p>\n\n<p style=\"margin-left:11%;\">$pattern =\nCairo::SolidPattern-&gt;create_rgba ($red, $green, $blue,\n<br>\n$alpha)</p>\n\n<p style=\"margin-left:17%;\">$red: double <br>\n$green: double <br>\n$blue: double <br>\n$alpha: double</p>\n\n<p style=\"margin-left:11%;\">($r, $g, $b, $a) =\n$pattern-&gt;get_rgba [1.4] <br>\n$pattern = Cairo::SurfacePattern-&gt;create ($surface)</p>\n\n<p style=\"margin-left:17%;\">$surface:\n<i>Cairo::Surface</i></p>\n\n<p style=\"margin-left:11%;\">$surface =\n$pattern-&gt;get_surface [1.4] <br>\n$pattern = Cairo::LinearGradient-&gt;create ($x0, $y0, $x1,\n$y1)</p>\n\n<p style=\"margin-left:17%;\">$x0: double <br>\n$y0: double <br>\n$x1: double <br>\n$y1: double</p>\n\n<p style=\"margin-left:11%;\">($x0, $y0, $x1, $y1) =\n$pattern-&gt;get_points [1.4] <br>\n$pattern = Cairo::RadialGradient-&gt;create ($cx0, $cy0,\n$radius0, $cx1, <br>\n$cy1, $radius1)</p>\n\n<p style=\"margin-left:17%;\">$cx0: double <br>\n$cy0: double <br>\n$radius0: double <br>\n$cx1: double <br>\n$cy1: double <br>\n$radius1: double</p>\n\n<p style=\"margin-left:11%;\">($x0, $y0, $r0, $x1, $y1, $r1)\n= $pattern-&gt;get_circles [1.4] <br>\n$pattern-&gt;add_color_stop_rgb ($offset, $red, $green,\n$blue)</p>\n\n<p style=\"margin-left:17%;\">$offset: double <br>\n$red: double <br>\n$green: double <br>\n$blue: double</p>\n\n\n<p style=\"margin-left:11%;\">$pattern-&gt;add_color_stop_rgba\n($offset, $red, $green, $blue, $alpha)</p>\n\n<p style=\"margin-left:17%;\">$offset: double <br>\n$red: double <br>\n$green: double <br>\n$blue: double <br>\n$alpha: double</p>\n\n<p style=\"margin-left:11%;\">@stops =\n$pattern-&gt;get_color_stops [1.4]</p>\n\n<p style=\"margin-left:17%;\">A color stop is represented as\nan array reference with five elements: offset, red, green,\nblue, and alpha.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Regions --\nRepresenting a pixel-aligned area</i> <br>\n$region = Cairo::Region-&gt;create (...) [1.10]</p>\n\n<p style=\"margin-left:17%;\">...: zero or more\n<i>Cairo::RectangleInt</i></p>\n\n<p style=\"margin-left:11%;\">$status = $region-&gt;status\n[1.10] <br>\n$num = $region-&gt;num_rectangles [1.10] <br>\n$rect = $region-&gt;get_rectangle ($i) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$i: integer</p>\n\n<p style=\"margin-left:11%;\">$bool = $region-&gt;is_empty\n[1.10] <br>\n$bool = $region-&gt;contains_point ($x, $y) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$x: integer <br>\n$y: integer</p>\n\n<p style=\"margin-left:11%;\">$bool = $region_one-&gt;equal\n($region_two) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$region_two:\n<i>Cairo::Region</i></p>\n\n<p style=\"margin-left:11%;\">$region-&gt;translate ($dx,\n$dy) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$dx: integer <br>\n$dy: integer</p>\n\n<p style=\"margin-left:11%;\">$status = $dst-&gt;intersect\n($other) [1.10] <br>\n$status = $dst-&gt;intersect_rectangle ($rect) [1.10] <br>\n$status = $dst-&gt;subtract ($other) [1.10] <br>\n$status = $dst-&gt;subtract_rectangle ($rect) [1.10] <br>\n$status = $dst-&gt;union ($other) [1.10] <br>\n$status = $dst-&gt;union_rectangle ($rect) [1.10] <br>\n$status = $dst-&gt;xor ($other) [1.10] <br>\n$status = $dst-&gt;xor_rectangle ($rect) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$other: <i>Cairo::Region</i>\n<br>\n$rect: <i>Cairo::RectangleInt</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Transformations\n-- Manipulating the current transformation matrix</i> <br>\n$cr-&gt;translate ($tx, $ty)</p>\n\n<p style=\"margin-left:17%;\">$tx: double <br>\n$ty: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;scale ($sx, $sy)</p>\n\n<p style=\"margin-left:17%;\">$sx: double <br>\n$sy: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;rotate ($angle)</p>\n\n<p style=\"margin-left:17%;\">$angle: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;transform ($matrix)</p>\n\n<p style=\"margin-left:17%;\">$matrix:\n<i>Cairo::Matrix</i></p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;set_matrix\n($matrix)</p>\n\n<p style=\"margin-left:17%;\">$matrix:\n<i>Cairo::Matrix</i></p>\n\n<p style=\"margin-left:11%;\">$matrix = $cr-&gt;get_matrix\n<br>\n$cr-&gt;identity_matrix <br>\n($x, $y) = $cr-&gt;user_to_device ($x, $y)</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double</p>\n\n<p style=\"margin-left:11%;\">($dx, $dy) =\n$cr-&gt;user_to_device_distance ($dx, $dy)</p>\n\n<p style=\"margin-left:17%;\">$dx: double <br>\n$dy: double</p>\n\n<p style=\"margin-left:11%;\">($x, $y) =\n$cr-&gt;device_to_user ($x, $y)</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double</p>\n\n<p style=\"margin-left:11%;\">($dx, $dy) =\n$cr-&gt;device_to_user_distance ($dx, $dy)</p>\n\n<p style=\"margin-left:17%;\">$dx: double <br>\n$dy: double</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Text --\nRendering text and sets of glyphs</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glyphs are\nrepresented as anonymous hash references with three keys:\n<i>index</i>, <i>x</i> and <i>y</i>. Example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my @glyphs = ({\nindex =&gt; 1, x =&gt; 2, y =&gt; 3 }, <br>\n{ index =&gt; 2, x =&gt; 3, y =&gt; 4 }, <br>\n{ index =&gt; 3, x =&gt; 4, y =&gt; 5 }); <br>\n$cr-&gt;select_font_face ($family, $slant, $weight)</p>\n\n<p style=\"margin-left:17%;\">$family: string <br>\n$slant: <i>Cairo::FontSlant</i> <br>\n$weight: <i>Cairo::FontWeight</i></p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;set_font_size\n($size)</p>\n\n<p style=\"margin-left:17%;\">$size: double</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;set_font_matrix\n($matrix)</p>\n\n<p style=\"margin-left:17%;\">$matrix:\n<i>Cairo::Matrix</i></p>\n\n<p style=\"margin-left:11%;\">$matrix =\n$cr-&gt;get_font_matrix <br>\n$cr-&gt;set_font_options ($options)</p>\n\n<p style=\"margin-left:17%;\">$options:\n<i>Cairo::FontOptions</i></p>\n\n<p style=\"margin-left:11%;\">$options =\n$cr-&gt;get_font_options <br>\n$cr-&gt;set_scaled_font ($scaled_font) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$scaled_font:\n<i>Cairo::ScaledFont</i></p>\n\n<p style=\"margin-left:11%;\">$scaled_font =\n$cr-&gt;get_scaled_font [1.4] <br>\n$cr-&gt;show_text ($utf8)</p>\n\n<p style=\"margin-left:17%;\">$utf8: string</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;show_glyphs (...)</p>\n\n<p style=\"margin-left:17%;\">...: list of glyphs</p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;show_text_glyphs\n($utf8, $glyphs, $clusters, $cluster_flags) [1.8]</p>\n\n<p style=\"margin-left:17%;\">$utf8: string <br>\n$glyphs: array ref of glyphs <br>\n$clusters: array ref of clusters <br>\n$cluster_flags: <i>Cairo::TextClusterFlags</i></p>\n\n<p style=\"margin-left:11%;\">$face = $cr-&gt;get_font_face\n<br>\n$extents = $cr-&gt;font_extents <br>\n$cr-&gt;set_font_face ($font_face)</p>\n\n<p style=\"margin-left:17%;\">$font_face:\n<i>Cairo::FontFace</i></p>\n\n<p style=\"margin-left:11%;\">$cr-&gt;set_scaled_font\n($scaled_font)</p>\n\n<p style=\"margin-left:17%;\">$scaled_font:\n<i>Cairo::ScaledFont</i></p>\n\n<p style=\"margin-left:11%;\">$extents = $cr-&gt;text_extents\n($utf8)</p>\n\n<p style=\"margin-left:17%;\">$utf8: string</p>\n\n<p style=\"margin-left:11%;\">$extents =\n$cr-&gt;glyph_extents (...)</p>\n\n<p style=\"margin-left:17%;\">...: list of glyphs</p>\n\n<p style=\"margin-left:11%;\">$face =\nCairo::ToyFontFace-&gt;create ($family, $slant, $weight)\n[1.8]</p>\n\n<p style=\"margin-left:17%;\">$family: string <br>\n$slant: <i>Cairo::FontSlant</i> <br>\n$weight: <i>Cairo::FontWeight</i></p>\n\n<p style=\"margin-left:11%;\">$family = $face-&gt;get_family\n[1.8] <br>\n$slang = $face-&gt;get_slant [1.8] <br>\n$weight = $face-&gt;get_weight [1.8]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Fonts</b>\n<i><br>\nCairo::FontFace -- Base class for fonts</i> <br>\n$status = $font_face-&gt;status <br>\n$type = $font_face-&gt;get_type [1.2]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Scaled Fonts\n-- Caching metrics for a particular font size</i> <br>\n$scaled_font = Cairo::ScaledFont-&gt;create ($font_face,\n$font_matrix, <br>\n$ctm, $options)</p>\n\n<p style=\"margin-left:17%;\">$font_face:\n<i>Cairo::FontFace</i> <br>\n$font_matrix: <i>Cairo::Matrix</i> <br>\n$ctm: <i>Cairo::Matrix</i> <br>\n$options: <i>Cairo::FontOptions</i></p>\n\n<p style=\"margin-left:11%;\">$status =\n$scaled_font-&gt;status <br>\n$extents = $scaled_font-&gt;extents <br>\n$extents = $scaled_font-&gt;text_extents ($utf8) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$utf8: string</p>\n\n<p style=\"margin-left:11%;\">$extents =\n$scaled_font-&gt;glyph_extents (...)</p>\n\n<p style=\"margin-left:17%;\">...: list of glyphs</p>\n\n<p style=\"margin-left:11%;\">($status, $glyphs, $clusters,\n$cluster_flags) = <br>\n$scaled_font-&gt;text_to_glyphs ($x, $y, $utf8) [1.8]</p>\n\n<p style=\"margin-left:17%;\">$x: double <br>\n$y: double <br>\n$utf8: string</p>\n\n<p style=\"margin-left:11%;\">$font_face =\n$scaled_font-&gt;get_font_face [1.2] <br>\n$options = $scaled_font-&gt;get_font_options [1.2] <br>\n$font_matrix = $scaled_font-&gt;get_font_matrix [1.2] <br>\n$ctm = $scaled_font-&gt;get_ctm [1.2] <br>\n$scale_matrix = $scaled_font-&gt;get_scale_matrix [1.8] <br>\n$type = $scaled_font-&gt;get_type [1.2]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Font Options\n-- How a font should be rendered</i> <br>\n$font_options = Cairo::FontOptions-&gt;create <br>\n$status = $font_options-&gt;status <br>\n$font_options-&gt;merge ($other)</p>\n\n<p style=\"margin-left:17%;\">$other:\n<i>Cairo::FontOptions</i></p>\n\n<p style=\"margin-left:11%;\">$hash = $font_options-&gt;hash\n<br>\n$bools = $font_options-&gt;equal ($other)</p>\n\n<p style=\"margin-left:17%;\">$other:\n<i>Cairo::FontOptions</i></p>\n\n\n<p style=\"margin-left:11%;\">$font_options-&gt;set_antialias\n($antialias)</p>\n\n<p style=\"margin-left:17%;\">$antialias:\n<i>Cairo::AntiAlias</i></p>\n\n<p style=\"margin-left:11%;\">$antialias =\n$font_options-&gt;get_antialias <br>\n$font_options-&gt;set_subpixel_order ($subpixel_order)</p>\n\n<p style=\"margin-left:17%;\">$subpixel_order:\n<i>Cairo::SubpixelOrder</i></p>\n\n<p style=\"margin-left:11%;\">$subpixel_order =\n$font_options-&gt;get_subpixel_order <br>\n$font_options-&gt;set_hint_style ($hint_style)</p>\n\n<p style=\"margin-left:17%;\">$hint_style:\n<i>Cairo::HintStyle</i></p>\n\n<p style=\"margin-left:11%;\">$hint_style =\n$font_options-&gt;get_hint_style <br>\n$font_options-&gt;set_hint_metrics ($hint_metrics)</p>\n\n<p style=\"margin-left:17%;\">$hint_metrics:\n<i>Cairo::HintMetrics</i></p>\n\n<p style=\"margin-left:11%;\">$hint_metrics =\n$font_options-&gt;get_hint_metrics</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>FreeType\nFonts -- Font support for FreeType</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If your cairo\nlibrary supports it, the FreeType integration allows you to\nload font faces from font files. You can query for this\ncapability with &quot;Cairo::HAS_FT_FONT&quot;. To actually\nuse this, you&rsquo;ll need the Font::FreeType module. <br>\nmy $face = Cairo::FtFontFace-&gt;create ($ft_face,\n$load_flags=0)</p>\n\n<p style=\"margin-left:17%;\">$ft_face:\n<i>Font::FreeType::Face</i> <br>\n$load_flags: integer</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This method\nallows you to create a <i>Cairo::FontFace</i> from a\n<i>Font::FreeType::Face</i>. To obtain the latter, you can\nfor example load it from a file:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $file =\n'/usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf';\n<br>\nmy $ft_face = Font::FreeType-&gt;new-&gt;face ($file); <br>\nmy $face = Cairo::FtFontFace-&gt;create ($ft_face);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Surfaces</b>\n<i><br>\nCairo::Surface -- Base class for surfaces</i> <br>\n$similar = Cairo::Surface-&gt;create_similar ($other,\n$content, $width, <br>\n$height)</p>\n\n<p style=\"margin-left:17%;\">$other: <i>Cairo::Surface</i>\n<br>\n$content: <i>Cairo::Content</i> <br>\n$width: integer <br>\n$height: integer</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For hysterical\nreasons, you can also use the following syntax:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$similar =\n$other-&gt;create_similar ($content, $width, $height)</p>\n\n<p style=\"margin-left:11%;\">$new =\nCairo::Surface-&gt;create_for_rectangle ($target, $x, $y,\n$width, <br>\n$height) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$target: <i>Cairo::Surface</i>\n<br>\n$x: double <br>\n$y: double <br>\n$width: double <br>\n$height: double</p>\n\n<p style=\"margin-left:11%;\">$status = $surface-&gt;status\n<br>\n$surface-&gt;finish <br>\n$surface-&gt;flush <br>\n$font_options = $surface-&gt;get_font_options <br>\n$content = $surface-&gt;get_content [1.2] <br>\n$surface-&gt;mark_dirty <br>\n$surface-&gt;mark_dirty_rectangle ($x, $y, $width,\n$height)</p>\n\n<p style=\"margin-left:17%;\">$x: integer <br>\n$y: integer <br>\n$width: integer <br>\n$height: integer</p>\n\n<p style=\"margin-left:11%;\">$surface-&gt;set_device_offset\n($x_offset, $y_offset)</p>\n\n<p style=\"margin-left:17%;\">$x_offset: integer <br>\n$y_offset: integer</p>\n\n<p style=\"margin-left:11%;\">($x_offset, $y_offset) =\n$surface-&gt;get_device_offset [1.2] <br>\n$surface-&gt;set_fallback_resolution ($x_pixels_per_inch,\n<br>\n$y_pixels_per_inch) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$x_pixels_per_inch: double <br>\n$y_pixels_per_inch: double</p>\n\n<p style=\"margin-left:11%;\">($x_pixels_per_inch,\n$y_pixels_per_inch) = <br>\n$surface-&gt;get_fallback_resolution [1.8] <br>\n$type = $surface-&gt;get_type [1.2] <br>\n$surface-&gt;set_mime_data ($mime_type, $mime_data) [1.10]\n<br>\n$mime_data = $surface-&gt;get_mime_data ($mime_type) [1.10]\n<br>\n$bool = $surface-&gt;supports_mime_type ($mime_type)\n[1.12]</p>\n\n<p style=\"margin-left:17%;\">$mime_type: string</p>\n\n<p style=\"margin-left:23%;\">Predefined <small>MIME</small>\ntypes:</p>\n\n<p style=\"margin-left:29%;\">Cairo::Surface::MIME_TYPE_JP2\n[1.10] <br>\nCairo::Surface::MIME_TYPE_JPEG [1.10] <br>\nCairo::Surface::MIME_TYPE_PNG [1.10] <br>\nCairo::Surface::MIME_TYPE_URI [1.10] <br>\nCairo::Surface::MIME_TYPE_UNIQUE_ID [1.12] <br>\nCairo::Surface::MIME_TYPE_JBIG2 [1.14] <br>\nCairo::Surface::MIME_TYPE_JBIG2_GLOBAL [1.14] <br>\nCairo::Surface::MIME_TYPE_JBIG2_GLOBAL_PARAMS [1.14] <br>\nCairo::Surface::MIME_TYPE_CCITT_FAX [1.16] <br>\nCairo::Surface::MIME_TYPE_CCITT_FAX_PARAMS [1.16] <br>\nCairo::Surface::MIME_TYPE_EPS [1.16] <br>\nCairo::Surface::MIME_TYPE_EPS_PARAMS [1.16]</p>\n\n<p style=\"margin-left:17%;\">$mime_data: binary data\nstring</p>\n\n<p style=\"margin-left:11%;\">$status =\n$surface-&gt;copy_page [1.6]</p>\n\n<p style=\"margin-left:17%;\">$status:\n<i>Cairo::Status</i></p>\n\n<p style=\"margin-left:11%;\">$status =\n$surface-&gt;show_page [1.6]</p>\n\n<p style=\"margin-left:17%;\">$status:\n<i>Cairo::Status</i></p>\n\n<p style=\"margin-left:11%;\">$boolean =\n$surface-&gt;has_show_text_glyphs [1.8]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Image\nSurfaces -- Rendering to memory buffers</i> <br>\n$surface = Cairo::ImageSurface-&gt;create ($format, $width,\n$height)</p>\n\n<p style=\"margin-left:17%;\">$format: <i>Cairo::Format</i>\n<br>\n$width: integer <br>\n$height: integer</p>\n\n<p style=\"margin-left:11%;\">$surface =\nCairo::ImageSurface-&gt;create_for_data ($data, $format,\n<br>\n$width, $height, $stride)</p>\n\n<p style=\"margin-left:17%;\">$data: image data <br>\n$format: <i>Cairo::Format</i> <br>\n$width: integer <br>\n$height: integer <br>\n$stride: integer</p>\n\n<p style=\"margin-left:11%;\">$data = $surface-&gt;get_data\n[1.2] <br>\n$format = $surface-&gt;get_format [1.2] <br>\n$width = $surface-&gt;get_width <br>\n$height = $surface-&gt;get_height <br>\n$stride = $surface-&gt;get_stride [1.2] <br>\n$stride = Cairo::Format::stride_for_width ($format, $width)\n[1.6]</p>\n\n<p style=\"margin-left:17%;\">$format: <i>Cairo::Format</i>\n<br>\n$width: integer</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><small>PDF</small>\nSurfaces -- Rendering <small>PDF</small> documents</i> <br>\n$surface = Cairo::PdfSurface-&gt;create ($filename,\n$width_in_points, <br>\n$height_in_points) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$filename: string <br>\n$width_in_points: double <br>\n$height_in_points: double</p>\n\n<p style=\"margin-left:11%;\">$surface =\nCairo::PdfSurface-&gt;create_for_stream ($callback, <br>\n$callback_data, $width_in_points, $height_in_points)\n[1.2]</p>\n\n<p style=\"margin-left:17%;\">$callback:\n<i>Cairo::WriteFunc</i> <br>\n$callback_data: scalar <br>\n$width_in_points: double <br>\n$height_in_points: double</p>\n\n<p style=\"margin-left:11%;\">$surface-&gt;set_size\n($width_in_points, $height_in_points) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$width_in_points: double <br>\n$height_in_points: double</p>\n\n\n<p style=\"margin-left:11%;\">$surface-&gt;restrict_to_version\n($version) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$version:\n<i>Cairo::PdfVersion</i></p>\n\n<p style=\"margin-left:11%;\">@versions =\nCairo::PdfSurface::get_versions [1.10] <br>\n$string = Cairo::PdfSurface::version_to_string ($version)\n[1.10]</p>\n\n<p style=\"margin-left:17%;\">$version:\n<i>Cairo::PdfVersion</i></p>\n\n<p style=\"margin-left:11%;\">$item_id =\n$surface-&gt;add_outline($parent_id, $name, $attributes,\n<br>\n$flags) [1.16]</p>\n\n<p style=\"margin-left:17%;\">$item_id: int, item\n<small>ID</small> <br>\n$parent_id: parent item id or\nCairo::PdfSurface::OUTLINE_ROOT <br>\n$name: string, item display <br>\n$attributes: string, item attributes <br>\n$flags: list reference, item flags</p>\n\n\n<p style=\"margin-left:11%;\">$surface-&gt;set_metadata($name,\n$value) [1.16]</p>\n\n<p style=\"margin-left:17%;\">$name: string <br>\n$value: string</p>\n\n\n<p style=\"margin-left:11%;\">$surface-&gt;set_page_label($label)\n[1.16]</p>\n\n<p style=\"margin-left:17%;\">$label: string, page label</p>\n\n\n<p style=\"margin-left:11%;\">$surface-&gt;set_thumbnail_size($width,\n$height) [1.16]</p>\n\n<p style=\"margin-left:17%;\">$width: int, thumbnail width\n<br>\n$height: int, thumbnail height</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><small>PNG</small>\nSupport -- Reading and writing <small>PNG</small> images</i>\n<br>\n$surface = Cairo::ImageSurface-&gt;create_from_png\n($filename)</p>\n\n<p style=\"margin-left:17%;\">$filename: string</p>\n\n<p style=\"margin-left:11%;\">Cairo::ReadFunc: $data = sub {\nmy ($callback_data, $length) = @_; }</p>\n\n<p style=\"margin-left:17%;\">$data: binary image data, of\nlength $length <br>\n$callback_data: scalar, user data <br>\n$length: integer, bytes to read</p>\n\n<p style=\"margin-left:11%;\">$surface =\nCairo::ImageSurface-&gt;create_from_png_stream ($callback,\n<br>\n$callback_data)</p>\n\n<p style=\"margin-left:17%;\">$callback:\n<i>Cairo::ReadFunc</i> <br>\n$callback_data: scalar</p>\n\n<p style=\"margin-left:11%;\">$status =\n$surface-&gt;write_to_png ($filename)</p>\n\n<p style=\"margin-left:17%;\">$filename: string</p>\n\n<p style=\"margin-left:11%;\">Cairo::WriteFunc: sub { my\n($callback_data, $data) = @_; }</p>\n\n<p style=\"margin-left:17%;\">$callback_data: scalar, user\ndata <br>\n$data: binary image data, to be written</p>\n\n<p style=\"margin-left:11%;\">$status =\n$surface-&gt;write_to_png_stream ($callback,\n$callback_data)</p>\n\n<p style=\"margin-left:17%;\">$callback:\n<i>Cairo::WriteFunc</i> <br>\n$callback_data: scalar</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>PostScript\nSurfaces -- Rendering PostScript documents</i> <br>\n$surface = Cairo::PsSurface-&gt;create ($filename,\n$width_in_points, <br>\n$height_in_points) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$filename: string <br>\n$width_in_points: double <br>\n$height_in_points: double</p>\n\n<p style=\"margin-left:11%;\">$surface =\nCairo::PsSurface-&gt;create_for_stream ($callback, <br>\n$callback_data, $width_in_points, $height_in_points)\n[1.2]</p>\n\n<p style=\"margin-left:17%;\">$callback:\n<i>Cairo::WriteFunc</i> <br>\n$callback_data: scalar <br>\n$width_in_points: double <br>\n$height_in_points: double</p>\n\n<p style=\"margin-left:11%;\">$surface-&gt;set_size\n($width_in_points, $height_in_points) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$width_in_points: double <br>\n$height_in_points: double</p>\n\n<p style=\"margin-left:11%;\">$surface-&gt;dsc_begin_setup\n[1.2] <br>\n$surface-&gt;dsc_begin_page_setup [1.2] <br>\n$surface-&gt;dsc_comment ($comment) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$comment: string</p>\n\n<p style=\"margin-left:11%;\">$surface-&gt;restrict_to_level\n($level) [1.6]</p>\n\n<p style=\"margin-left:17%;\">$level:\n<i>Cairo::PsLevel</i></p>\n\n<p style=\"margin-left:11%;\">@levels =\nCairo::PsSurface::get_levels [1.6] <br>\n$string = Cairo::PsSurface::level_to_string ($level)\n[1.6]</p>\n\n<p style=\"margin-left:17%;\">$level:\n<i>Cairo::PsLevel</i></p>\n\n<p style=\"margin-left:11%;\">$surface-&gt;set_eps ($eps)\n[1.6]</p>\n\n<p style=\"margin-left:17%;\">$eps: boolean</p>\n\n<p style=\"margin-left:11%;\">$eps = $surface-&gt;get_eps\n[1.6]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Recording\nSurfaces -- Records all drawing operations</i> <br>\n$surface = Cairo::RecordingSurface-&gt;create ($content,\n$extents) [1.10]</p>\n\n<p style=\"margin-left:17%;\">$content: <i>Cairo::Content</i>\n<br>\n$extents: <i>Cairo::Rectangle</i></p>\n\n<p style=\"margin-left:11%;\">($x0, $y0, $width, $height) =\n$surface-&gt;ink_extents [1.10] <br>\n$extents_ref = $surface-&gt;get_extents [1.12]</p>\n\n<p style=\"margin-left:17%;\">$extents_ref:\n<i>Cairo::Rectangle</i> reference</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><small>SVG</small>\nSurfaces -- Rendering <small>SVG</small> documents</i> <br>\n$surface = Cairo::SvgSurface-&gt;create ($filename,\n$width_in_points, <br>\n$height_in_points) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$filename: string <br>\n$width_in_points: double <br>\n$height_in_points: double</p>\n\n<p style=\"margin-left:11%;\">$surface =\nCairo::SvgSurface-&gt;create_for_stream ($callback, <br>\n$callback_data, $width_in_points, $height_in_points)\n[1.2]</p>\n\n<p style=\"margin-left:17%;\">$callback:\n<i>Cairo::WriteFunc</i> <br>\n$callback_data: scalar <br>\n$width_in_points: double <br>\n$height_in_points: double</p>\n\n\n<p style=\"margin-left:11%;\">$surface-&gt;restrict_to_version\n($version) [1.2]</p>\n\n<p style=\"margin-left:17%;\">$version:\n<i>Cairo::SvgVersion</i></p>\n\n<p style=\"margin-left:11%;\">@versions =\nCairo::SvgSurface::get_versions [1.2] <br>\n$string = Cairo::SvgSurface::version_to_string ($version)\n[1.2]</p>\n\n<p style=\"margin-left:17%;\">$version:\n<i>Cairo::SvgVersion</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Utilities</b>\n<i><br>\nVersion Information -- Run-time and compile-time version\nchecks.</i> <br>\n$version_code = Cairo-&gt;lib_version <br>\n$version_string = Cairo-&gt;lib_version_string</p>\n\n<p style=\"margin-left:17%;\">These two functions return the\nversion of libcairo that the program is currently running\nagainst.</p>\n\n<p style=\"margin-left:11%;\">$version_code = Cairo-&gt;\n<small>LIB_VERSION</small></p>\n\n<p style=\"margin-left:17%;\">Returns the version of libcairo\nthat Cairo was compiled against.</p>\n\n<p style=\"margin-left:11%;\">$version_code = Cairo-&gt;\n<small>LIB_VERSION_ENCODE</small> ($major, $minor,\n$micro)</p>\n\n<p style=\"margin-left:17%;\">$major: integer <br>\n$minor: integer <br>\n$micro: integer</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Encodes the\nversion &quot;$major.$minor.$micro&quot; as an integer\nsuitable for comparison against\n&quot;Cairo-&gt;lib_version&quot; and\n&quot;Cairo-&gt;LIB_VERSION&quot;.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;http://cairographics.org/documentation&gt;</p>\n\n<p style=\"margin-left:17%;\">Lists many available resources\nincluding tutorials and examples</p>\n\n\n<p style=\"margin-left:11%;\">&lt;http://cairographics.org/manual/&gt;</p>\n\n<p style=\"margin-left:17%;\">Contains the reference\nmanual</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Ross McFarland\n&lt;rwmcfa1 at neces dot com&gt; <br>\nTorsten Schoenfeld &lt;kaffeetisch at gmx dot de&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2004-2013 by the cairo perl team</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#ABSTRACT\">ABSTRACT</a>","<a href=\"#API DOCUMENTATION\">API DOCUMENTATION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}