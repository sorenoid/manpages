{"name":"glib::codegen","body":"\n\n<h1 align=\"center\">Glib::CodeGen</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::CodeGen -\ncode generation utilities for Glib-based bindings.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"># usually in\nMakefile.PL <br>\nuse Glib::CodeGen; <br>\n# most common, use all defaults <br>\nGlib::CodeGen-&gt;parse_maps ('myprefix'); <br>\nGlib::CodeGen-&gt;write_boot; <br>\n# more exotic, change everything <br>\nGlib::CodeGen-&gt;parse_maps ('foo', <br>\ninput =&gt; 'foo.maps', <br>\nheader =&gt; 'foo-autogen.h', <br>\ntypemap =&gt; 'foo.typemap', <br>\nregister =&gt; 'register-foo.xsh'); <br>\nGlib::CodeGen-&gt;write_boot (filename =&gt; 'bootfoo.xsh',\n<br>\nglob =&gt; 'Foo*.xs', <br>\nignore =&gt; '^(Foo|Foo::Bar)$'); <br>\n# add a custom type handler (rarely necessary) <br>\nGlib::CodeGen-&gt;add_type_handler (FooType =&gt;\n\\&amp;gen_foo_stuff); <br>\n# (see the section EXTENDING TYPE SUPPORT for more\ninfo.)</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\npackages some of the boilerplate code needed for performing\ncode generation typically used by perl bindings for\ngobject-based libraries, using the Glib module as a\nbase.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\noutput filenames are in the subdirectory\n&rsquo;build&rsquo;, which usually will be present if you\nare using ExtUtils::Depends (as most Glib-based extensions\nprobably should).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>METHODS</small></b>\n<br>\nGlib::CodeGen-&gt;write_boot; <br>\nGlib::CodeGen-&gt;write_boot ( <small>KEY</small> =&gt;\n<small>VAL, ...</small> )</p>\n\n<p style=\"margin-left:17%;\">Many GObject-based libraries to\nbe bound to perl will be too large to put in a single\n<small>XS</small> file; however, a single <small>PM</small>\nfile typically only bootstraps one <small>XS</small>\nfile&rsquo;s code. &quot;write_boot&quot; generates an\n<small>XSH</small> file to be included from the\n<small>BOOT</small> section of that one bootstrapped module,\ncalling the boot code for all the other <small>XS</small>\nfiles in the project.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options are\npassed to the function in a set of key/val pairs, and all\noptions may default.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">filename the\nname of the output file to be created. <br>\nthe default is 'build/boot.xsh'. <br>\nglob a glob pattern that specifies the names of <br>\nthe xs files to scan for MODULE lines. <br>\nthe default is 'xs/*.xs'. <br>\nxs_files use this to supply an explicit list of file <br>\nnames (as an array reference) to use instead <br>\nof a glob pattern. the default is to use <br>\nthe glob pattern. <br>\nignore regular expression matching any and all <br>\nmodule names which should be ignored, i.e. <br>\nNOT included in the list of symbols to boot. <br>\nthis parameter is extremely important for <br>\navoiding infinite loops at startup; see the <br>\ndiscussion for an explanation and rationale. <br>\nthe default is '^[^:]+$', or, any name that <br>\ncontains no colons, i.e., any toplevel <br>\npackage name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nperforms a glob (using perl&rsquo;s builtin glob operator)\non the pattern specified by the &rsquo;glob&rsquo; option to\nretrieve a list of file names. It then scans each file in\nthat list for lines matching the pattern &quot;^MODULE&quot;\n-- that is, the <small>MODULE</small> directive in an\n<small>XS</small> file. The module name is pulled out and\nmatched against the regular expression specified by the\nignore parameter. If this module is not to be ignored, we\nnext check to see if the name has been seen. If not, the\nname will be converted to a boot symbol (basically, s/:/_/\nand prepend &quot;boot_&quot;) and this symbol will be added\nto a call to <small>GPERL_CALL_BOOT</small> in the generated\nfile; it is then marked as seen so we don&rsquo;t call it\nagain.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">What is this\nall about, you ask? In order to bind an XSub to perl, the C\nfunction must be registered with the interpreter. This is\nthe function of the &quot;boot&quot; code, which is\ntypically called in the bootstrapping process. However, when\nmultiple <small>XS</small> files are used with only one\n<small>PM</small> file, some other mechanism must call the\nboot code from each <small>XS</small> file before any of the\nfunction therein will be available.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A typical setup\nfor a multiple-XS, single-PM module will be to call the\nvarious bits of boot code from the <small>BOOT:</small>\nsection of the toplevel module&rsquo;s <small>XS</small>\nfile.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To use Gtk2 as\nan example, when you do &rsquo;use Gtk2&rsquo;, Gtk2.pm\ncalls bootstrap on Gtk2, which calls the C function\nboot_Gtk2. This function calls the boot symbols for all the\nother xs files in the module. The distinction is that the\ntoplevel module, Gtk2, has no colons in its name.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;xsubpp&quot;\ngenerates the boot function&rsquo;s name by replacing the\ncolons in the <small>MODULE</small> name with underscores\nand prepending &quot;boot_&quot;. We need to be careful not\nto include the boot code for the bootstrapped module, (say\nToplevel, or Gtk2, or whatever) because the bootstrap code\nin Toplevel.pm will call boot_Toplevel when loaded, and\nboot_Toplevel should actually include the file we are\ncreating here.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The default\nvalue for the ignore parameter ignores any name not\ncontaining colons, because it is assumed that this will be a\ntoplevel module, and any other packages/modules it boots\nwill be <i>below</i> this namespace, i.e., they will contain\ncolons. This assumption holds true for Gtk2 and Gnome2, but\nobviously fails for something like Gnome2::Canvas. To boot\nthat module properly, you must use a regular expression such\nas &quot;^Gnome2::Canvas$&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that you\ncan, of course, match more than just one name, e.g.\n&quot;^(Foo|Foo::Bar)$&quot;, if you wanted to have Foo::Bar\nbe included in the same dynamically loaded object but only\nbe booted when absolutely necessary. (If you get that to\nwork, more power to you.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Also, since\nthis code scans for ^MODULE, you must comment the\n<small>MODULE</small> section out with leading # marks if\nyou want to hide it from &quot;write_boot&quot;.</p>\n\n<p style=\"margin-left:11%;\">Glib::CodeGen-&gt;parse_maps (\n<small>PREFIX,</small> [ <small>KEY</small> =&gt;\n<small>VAL, ...</small> ])</p>\n\n<p style=\"margin-left:17%;\">Convention within Glib/Gtk2 and\nfriends is to use preprocessor macros in the style of\nSvMyType and newSVMyType to get values in and out of perl,\nand to use those same macros from both hand-written code as\nwell as the typemaps. However, if you have a lot of types in\nyour library (such as the nearly 200 types in Gtk+ 2.x),\nthen writing those macros becomes incredibly tedious,\nespecially so when you factor in all of the variants and\nsuch.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">So, this\nfunction can turn a flat file containing terse descriptions\nof the types into a header containing all the cast macros, a\ntypemap file using them, and an <small>XSH</small> file\ncontaining the proper code to register each of those types\n(to be included by your module&rsquo;s <small>BOOT</small>\ncode).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i><small>PREFIX</small></i> is mandatory, and is used in\nsome of the resulting filenames, You can also override the\ndefaults by providing key=&gt;val pairs:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">input input\nfile name. default is 'maps'. if this <br>\nkey's value is an array reference, all the <br>\nfilenames in the array will be scanned. <br>\nheader name of the header file to create, default is <br>\nbuild/$prefix-autogen.h <br>\ntypemap name of the typemap file to create, default is <br>\nbuild/$prefix.typemap <br>\nregister name of the xsh file to contain all of the <br>\ntype registrations, default is build/register.xsh</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">the maps file\nis a table of type descriptions, one per line, with fields\nseparated by whitespace. the fields should be:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">TYPE macro\ne.g., GTK_TYPE_WIDGET <br>\nclass name e.g. GtkWidget, name of the C type <br>\nbase type one of GObject, GBoxed, GEnum, GFlags. <br>\nTo support other base types, see <br>\nEXTENDING TYPE SUPPORT for info on <br>\non how to add a custom type handler. <br>\npackage name of the perl package to which this <br>\nclass name should be mapped, e.g. <br>\nGtk2::Widget</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As a special\ncase, you can also use this same format to register error\ndomains; in this case two of the four columns take on\nslightly different meanings:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">domain macro\ne.g., GDK_PIXBUF_ERROR <br>\nenum type macro e.g., GDK_TYPE_PIXBUF_ERROR <br>\nbase type GError <br>\npackage name of the Perl package to which this <br>\nclass name should be mapped, e.g., <br>\nGtk2::Gdk::Pixbuf::Error.</p>\n\n<h2>EXTENDING TYPE SUPPORT\n<a name=\"EXTENDING TYPE SUPPORT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;parse_maps&quot;\nuses the base type entry in each maps record to decide how\nto generate output for that type. In the base module, type\nsupport is included for the base types provided by Glib. It\nis easy to add support for your own types, by merely adding\na type handler. This type handler will call utility\nfunctions to add typemaps, <small>BOOT</small> lines, and\nheader lines. <br>\nGlib::CodeGen-&gt;add_type_handler ($base_type =&gt;\n$handler)</p>\n\n<p style=\"margin-left:17%;\">$base_type (string) C name of\nthe base type to handle. <br>\n$handler (subroutine) Callback used to handle this type.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Use\n<i>$handler</i> to generate output for records whose base\ntype is <i>$base_type</i>. <i>$base_type</i> is the C type\nname as found in the third column of a maps file entry.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>$handler</i>\nwill be called with the (possibly preprocessed) contents of\nthe current maps file record, and should call the\n&quot;add_typemap&quot;, &quot;add_register&quot;, and\n&quot;add_header&quot; functions to set up the necessary\nC/XS glue for that type.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For\nexample:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Glib::CodeGen-&gt;add_type_handler\n(CoolThing =&gt; sub { <br>\nmy ($typemacro, $classname, $base, $package) = @_; <br>\n# $typemacro is the C type macro, like COOL_TYPE_THING. <br>\n# $classname is the actual C type name, like CoolFooThing.\n<br>\n# $base is the C name of the base type. If CoolFooThing <br>\n# isa CoolThing, $base will be CoolThing. This <br>\n# parameter is useful when using the same type handler <br>\n# for multiple base types. <br>\n# $package is the package name that corresponds to <br>\n# $classname, as specified in the maps file. <br>\n... <br>\n});</p>\n\n<p style=\"margin-left:11%;\">add_typemap $type, $typemap [,\n$input, $output]</p>\n\n<p style=\"margin-left:17%;\">Add a typemap entry for $type,\nnamed $typemap. If <i>$input</i> and/or <i>$output</i> are\ndefined, their text will be used as the &quot;INPUT&quot;\nand/or &quot;OUTPUT&quot; typemap implementations\n(respectively) for <i>$typemap</i>. Note that in general,\nyou&rsquo;ll use &quot;T_GPERL_GENERIC_WRAPPER&quot; or some\nother existing typemap for <i>$typemap</i>, so <i>$input</i>\nand <i>$output</i> are very rarely used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># map\n$classname pointers and all their variants to the generic\n<br>\n# wrapper typemap. <br>\nadd_typemap &quot;$classname *&quot;,\n&quot;T_GPERL_GENERIC_WRAPPER&quot;; <br>\nadd_typemap &quot;const $classname *&quot;,\n&quot;T_GPERL_GENERIC_WRAPPER&quot;; <br>\nadd_typemap &quot;$classname\\_ornull *&quot;,\n&quot;T_GPERL_GENERIC_WRAPPER&quot;; <br>\nadd_typemap &quot;const $classname\\_ornull *&quot;,\n&quot;T_GPERL_GENERIC_WRAPPER&quot;; <br>\nadd_typemap &quot;$classname\\_own *&quot;,\n&quot;T_GPERL_GENERIC_WRAPPER&quot;; <br>\nadd_typemap &quot;$classname\\_copy *&quot;,\n&quot;T_GPERL_GENERIC_WRAPPER&quot;; <br>\nadd_typemap &quot;$classname\\_own_ornull *&quot;,\n&quot;T_GPERL_GENERIC_WRAPPER&quot;; <br>\n# custom code for an int-like enum: <br>\nadd_typemap $class =&gt; T_FOO, <br>\n&quot;\\$var = foo_unwrap (\\$arg);&quot;, # input <br>\n&quot;\\$arg = foo_wrap (\\$var);&quot;; # output</p>\n\n<p style=\"margin-left:11%;\">add_register $text</p>\n\n<p style=\"margin-left:17%;\">Add <i>$text</i> to the\ngenerated &quot;register.xsh&quot;. This is usually used for\nregistering types with the bindings, e.g.:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">add_register\n&quot;#ifdef $typemacro\\n&quot; <br>\n. &quot;gperl_register_object ($typemacro,\n\\&quot;$package\\&quot;);\\n&quot; <br>\n. &quot;#endif /* $typemacro */&quot;;</p>\n\n<p style=\"margin-left:11%;\">add_header $text</p>\n\n<p style=\"margin-left:17%;\">Add <i>$text</i> to the\ngenerated C header. You&rsquo;ll put variant typedefs and\nwrap/unwrap macros in the header, and will usually want to\nwrap the declarations in &quot;#ifdef $typemacro&quot; for\nsafety.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GInterfaces are\nmostly just ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The code is\nugly.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">muppet\n&lt;scott at asofyet dot org&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2003-2005, 2013 by the gtk2-perl team (see the file\n<small>AUTHORS</small> for the full list)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the terms of the <small>GNU</small> Library General\nPublic License as published by the Free Software Foundation;\neither version 2.1 of the License, or (at your option) any\nlater version.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\ndistributed in the hope that it will be useful, but\n<small>WITHOUT ANY WARRANTY</small> ; without even the\nimplied warranty of <small>MERCHANTABILITY</small> or\n<small>FITNESS FOR A PARTICULAR PURPOSE.</small> See the\n<small>GNU</small> Library General Public License for more\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You should have\nreceived a copy of the <small>GNU</small> Library General\nPublic License along with this library; if not, write to the\nFree Software Foundation, Inc., 51 Franklin Street, Fifth\nFloor, Boston, <small>MA 02110-1301 USA.</small></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXTENDING TYPE SUPPORT\">EXTENDING TYPE SUPPORT</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}