{"name":"http::config","body":"\n\n<h1 align=\"center\">HTTP::Config</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Config -\nConfiguration for request and response objects</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.36</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTTP::Config; <br>\nmy $c = HTTP::Config-&gt;new; <br>\n$c-&gt;add(m_domain =&gt; &quot;.example.com&quot;, m_scheme\n=&gt; &quot;http&quot;, verbose =&gt; 1); <br>\nuse HTTP::Request; <br>\nmy $request = HTTP::Request-&gt;new(GET =&gt;\n&quot;http://www.example.com&quot;); <br>\nif (my @m = $c-&gt;matching($request)) { <br>\nprint &quot;Yadayada\\n&quot; if $m[0]-&gt;{verbose}; <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n&quot;HTTP::Config&quot; object is a list of entries that\ncan be matched against request or request/response pairs.\nIts purpose is to hold configuration data that can be looked\nup given a request or response object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each\nconfiguration entry is a hash. Some keys specify matching to\noccur against attributes of request/response objects. Other\nkeys can be used to hold user data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are provided: <br>\n$conf = HTTP::Config-&gt;new</p>\n\n<p style=\"margin-left:17%;\">Constructs a new empty\n&quot;HTTP::Config&quot; object and returns it.</p>\n\n<p style=\"margin-left:11%;\">$conf-&gt;entries</p>\n\n<p style=\"margin-left:17%;\">Returns the list of entries in\nthe configuration object. In scalar context returns the\nnumber of entries.</p>\n\n<p style=\"margin-left:11%;\">$conf-&gt;empty</p>\n\n<p style=\"margin-left:17%;\">Return true if there are no\nentries in the configuration object. This is just a\nshorthand for &quot;not $conf-&gt;entries&quot;.</p>\n\n<p style=\"margin-left:11%;\">$conf-&gt;add( %matchspec,\n%other ) <br>\n$conf-&gt;add( \\%entry )</p>\n\n<p style=\"margin-left:17%;\">Adds a new entry to the\nconfiguration. You can either pass separate key/value pairs\nor a hash reference.</p>\n\n<p style=\"margin-left:11%;\">$conf-&gt;remove( %spec )</p>\n\n<p style=\"margin-left:17%;\">Removes (and returns) the\nentries that have matches for all the key/value pairs in\n%spec. If %spec is empty this will match all entries; so it\nwill empty the configuration object.</p>\n\n<p style=\"margin-left:11%;\">$conf-&gt;matching( $uri,\n$request, $response ) <br>\n$conf-&gt;matching( $uri ) <br>\n$conf-&gt;matching( $request ) <br>\n$conf-&gt;matching( $response )</p>\n\n<p style=\"margin-left:17%;\">Returns the entries that match\nthe given $uri, $request and $response triplet.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If called with\na single $request object then the $uri is obtained by\ncalling its &rsquo;uri_canonical&rsquo; method. If called\nwith a single $response object, then the request object is\nobtained by calling its &rsquo;request&rsquo; method; and\nthen the $uri is obtained as if a single $request was\nprovided.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The entries are\nreturned with the most specific matches first. In scalar\ncontext returns the most specific match or &quot;undef&quot;\nin none match.</p>\n\n<p style=\"margin-left:11%;\">$conf-&gt;add_item( $item,\n%matchspec ) <br>\n$conf-&gt;remove_items( %spec ) <br>\n$conf-&gt;matching_items( $uri, $request, $response )</p>\n\n<p style=\"margin-left:17%;\">Wrappers that hides the entries\nthemselves.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Matching</b>\n<br>\nThe following keys on a configuration entry specify\nmatching. For all of these you can provide an array of\nvalues instead of a single value. The entry matches if at\nleast one of the values in the array matches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Entries that\nrequire match against a response object attribute will never\nmatch unless a response object was provided. <br>\nm_scheme =&gt; $scheme</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> uses the specified scheme; e.g.\n&quot;http&quot;.</p>\n\n<p style=\"margin-left:11%;\">m_secure =&gt; $bool</p>\n\n<p style=\"margin-left:17%;\">If $bool is <small>TRUE</small>\n; matches if the <small>URI</small> uses a secure scheme. If\n$bool is <small>FALSE</small> ; matches if the\n<small>URI</small> does not use a secure scheme. An example\nof a secure scheme is &quot;https&quot;.</p>\n\n<p style=\"margin-left:11%;\">m_host_port =&gt;\n&quot;$hostname:$port&quot;</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> &rsquo;s host_port method return the\nspecified value.</p>\n\n<p style=\"margin-left:11%;\">m_host =&gt; $hostname</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> &rsquo;s host method returns the\nspecified value.</p>\n\n<p style=\"margin-left:11%;\">m_port =&gt; $port</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> &rsquo;s port method returns the\nspecified value.</p>\n\n<p style=\"margin-left:11%;\">m_domain =&gt;\n&quot;.$domain&quot;</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> &rsquo;s host method return a value that\nwithin the given domain. The hostname\n&quot;www.example.com&quot; will for instance match the\ndomain &quot;.com&quot;.</p>\n\n<p style=\"margin-left:11%;\">m_path =&gt; $path</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> &rsquo;s path method returns the\nspecified value.</p>\n\n<p style=\"margin-left:11%;\">m_path_prefix =&gt; $path</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> &rsquo;s path is the specified path or\nhas the specified path as prefix.</p>\n\n<p style=\"margin-left:11%;\">m_path_match =&gt; $Regexp</p>\n\n<p style=\"margin-left:17%;\">Matches if the regular\nexpression matches the <small>URI</small> &rsquo;s path. Eg.\nqr/\\.html$/.</p>\n\n<p style=\"margin-left:11%;\">m_method =&gt; $method</p>\n\n<p style=\"margin-left:17%;\">Matches if the request method\nmatches the specified value. Eg. &quot;\n<small>GET&quot;</small> or &quot;\n<small>POST&quot;.</small></p>\n\n<p style=\"margin-left:11%;\">m_code =&gt; $digit <br>\nm_code =&gt; $status_code</p>\n\n<p style=\"margin-left:17%;\">Matches if the response status\ncode matches. If a single digit is specified; matches for\nall response status codes beginning with that digit.</p>\n\n<p style=\"margin-left:11%;\">m_proxy =&gt; $url</p>\n\n<p style=\"margin-left:17%;\">Matches if the request is to be\nsent to the given Proxy server.</p>\n\n<p style=\"margin-left:11%;\">m_media_type =&gt;\n&quot;*/*&quot; <br>\nm_media_type =&gt; &quot;text/*&quot; <br>\nm_media_type =&gt; &quot;html&quot; <br>\nm_media_type =&gt; &quot;xhtml&quot; <br>\nm_media_type =&gt; &quot;text/html&quot;</p>\n\n<p style=\"margin-left:17%;\">Matches if the response media\ntype matches.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With a value of\n&quot;html&quot; matches if $response-&gt;content_is_html\nreturns <small>TRUE.</small> With a value of\n&quot;xhtml&quot; matches if $response-&gt;content_is_xhtml\nreturns <small>TRUE.</small></p>\n\n<p style=\"margin-left:11%;\">m_uri__<i>$method</i> =&gt;\nundef</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> object provides the method.</p>\n\n<p style=\"margin-left:11%;\">m_uri__<i>$method</i> =&gt;\n$string</p>\n\n<p style=\"margin-left:17%;\">Matches if the\n<small>URI</small> &rsquo;s $method method returns the given\nvalue.</p>\n\n<p style=\"margin-left:11%;\">m_header__<i>$field</i> =&gt;\n$string</p>\n\n<p style=\"margin-left:17%;\">Matches if either the request\nor the response have a header $field with the given\nvalue.</p>\n\n<p style=\"margin-left:11%;\">m_response_attr__<i>$key</i>\n=&gt; undef <br>\nm_response_attr__<i>$key</i> =&gt; $string</p>\n\n<p style=\"margin-left:17%;\">Matches if the response object\nhas that key, or the entry has the given value.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>URI</small>\n, HTTP::Request, HTTP::Response</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1994 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}