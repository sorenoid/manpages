{"name":"dpkg::control::fieldscore","body":"\n\n<h1 align=\"center\">Dpkg::Control::FieldsCore</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Control::FieldsCore\n- manage (list of official) control fields</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The modules\ncontains a list of fieldnames with associated meta-data\nexplaining in which type of control information they are\nallowed. The types are the CTRL_* constants exported by\nDpkg::Control.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$f =\nfield_capitalize($field_name)</p>\n\n<p style=\"margin-left:17%;\">Returns the field name properly\ncapitalized. All characters are lowercase, except the first\nof each word (words are separated by a hyphen in field\nnames).</p>\n\n<p style=\"margin-left:11%;\">field_is_official($fname)</p>\n\n<p style=\"margin-left:17%;\">Returns true if the field is\nofficial and known.</p>\n\n<p style=\"margin-left:11%;\">field_is_allowed_in($fname,\n@types)</p>\n\n<p style=\"margin-left:17%;\">Returns true (1) if the field\n$fname is allowed in all the types listed in the list. Note\nthat you can use type sets instead of individual types (ex:\n<small>CTRL_FILE_CHANGES</small> |\n<small>CTRL_CHANGELOG</small> ).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">field_allowed_in(A|B,\nC) returns true only if the field is allowed in C and either\nA or B.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Undef is\nreturned for non-official fields.</p>\n\n<p style=\"margin-left:11%;\">field_transfer_single($from,\n$to, $field)</p>\n\n<p style=\"margin-left:17%;\">If appropriate, copy the value\nof the field named $field taken from the $from Dpkg::Control\nobject to the $to Dpkg::Control object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Official fields\nare copied only if the field is allowed in both types of\nobjects. Custom fields are treated in a specific manner.\nWhen the target is not among <small>CTRL_PKG_SRC,\nCTRL_PKG_DEB</small> or <small>CTRL_FILE_CHANGES,</small>\nthen they are always copied as is (the X- prefix is kept).\nOtherwise they are not copied except if the target object\nmatches the target destination encoded in the field name.\nThe initial X denoting custom fields can be followed by one\nor more letters among &quot;S&quot; (Source: corresponds to\n<small>CTRL_PKG_SRC</small> ), &quot;B&quot; (Binary:\ncorresponds to <small>CTRL_PKG_DEB</small> ) or\n&quot;C&quot; (Changes: corresponds to\n<small>CTRL_FILE_CHANGES</small> ).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns undef\nif nothing has been copied or the name of the new field\nadded to $to otherwise.</p>\n\n<p style=\"margin-left:11%;\">field_transfer_all($from,\n$to)</p>\n\n<p style=\"margin-left:17%;\">Transfer all appropriate fields\nfrom $from to $to. Calls <b>field_transfer_single()</b> on\nall fields available in $from.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nlist of fields that have been added to $to.</p>\n\n<p style=\"margin-left:11%;\">field_ordered_list($type)</p>\n\n<p style=\"margin-left:17%;\">Returns an ordered list of\nfields for a given type of control information. This list\ncan be used to output the fields in a predictable order. The\nlist might be empty for types where the order does not\nmatter much.</p>\n\n<p style=\"margin-left:11%;\">($source, $version) =\nfield_parse_binary_source($ctrl)</p>\n\n<p style=\"margin-left:17%;\">Parse the <b>Source</b> field\nin a binary package control stanza. The field contains the\nsource package name where it was built from, and optionally\na space and the source version enclosed in parenthesis if it\nis different from the binary version.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a list\nwith the $source name, and the source $version, or undef or\nan empty list when $ctrl does not contain a binary package\ncontrol stanza. Neither $source nor $version are validated,\nbut that can be done with\n<b>Dpkg::Package::pkg_name_is_illegal()</b> and\n<b>Dpkg::Version::version_check()</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>field_list_src_dep()</b></p>\n\n<p style=\"margin-left:17%;\">List of fields that contains\ndependencies-like information in a source Debian\npackage.</p>\n\n\n<p style=\"margin-left:11%;\"><b>field_list_pkg_dep()</b></p>\n\n<p style=\"margin-left:17%;\">List of fields that contains\ndependencies-like information in a binary Debian package.\nThe fields that express real dependencies are sorted from\nthe stronger to the weaker.</p>\n\n<p style=\"margin-left:11%;\">field_get_dep_type($field)</p>\n\n<p style=\"margin-left:17%;\">Return the type of the\ndependency expressed by the given field. Can either be\n&quot;normal&quot; for a real dependency field (Pre-Depends,\nDepends, ...) or &quot;union&quot; for other relation fields\nsharing the same syntax (Conflicts, Breaks, ...). Returns\nundef for fields which are not dependencies.</p>\n\n<p style=\"margin-left:11%;\">field_get_sep_type($field)</p>\n\n<p style=\"margin-left:17%;\">Return the type of the field\nvalue separator. Can be one of <small>FIELD_SEP_UNKNOWN,\nFIELD_SEP_SPACE, FIELD_SEP_COMMA</small> or\n<small>FIELD_SEP_LINE.</small></p>\n\n<p style=\"margin-left:11%;\">field_register($field,\n$allowed_types, %opts)</p>\n\n<p style=\"margin-left:17%;\">Register a new field as being\nallowed in control information of specified types. %opts is\noptional</p>\n\n<p style=\"margin-left:11%;\">field_insert_after($type, $ref,\n@fields)</p>\n\n<p style=\"margin-left:17%;\">Place field after another one\n($ref) in output of control information of type $type.</p>\n\n<p style=\"margin-left:11%;\">field_insert_before($type,\n$ref, @fields)</p>\n\n<p style=\"margin-left:17%;\">Place field before another one\n($ref) in output of control information of type $type.</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.01\n(dpkg 1.21.0)</b> <br>\nNew function: <b>field_parse_binary_source()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.17.0)</b> <br>\nMark the module as public.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#CHANGES\">CHANGES</a>"],"level":3}