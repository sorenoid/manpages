{"name":"pthread_setcancelstate","description":"pthread_setcancelstate, pthread_setcanceltype - set cancelability state and type","body":"\n\n<h1 align=\"center\">PTHREAD_SETCANCELSTATE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthread_setcancelstate,\npthread_setcanceltype - set cancelability state and type</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;pthread.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npthread_setcancelstate(int</b> <i>state</i><b>, int\n*</b><i>oldstate</i><b>); <br>\nint pthread_setcanceltype(int</b> <i>type</i><b>, int\n*</b><i>oldtype</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Compile and\nlink with <i>-pthread</i>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_setcancelstate</b>() sets the cancelability state\nof the calling thread to the value given in <i>state</i>.\nThe previous cancelability state of the thread is returned\nin the buffer pointed to by <i>oldstate</i>. The\n<i>state</i> argument must have one of the following values:\n<b><br>\nPTHREAD_CANCEL_ENABLE</b></p>\n\n<p style=\"margin-left:22%;\">The thread is cancelable. This\nis the default cancelability state in all new threads,\nincluding the initial thread. The thread&rsquo;s\ncancelability type determines when a cancelable thread will\nrespond to a cancellation request.</p>\n\n\n<p style=\"margin-left:11%;\"><b>PTHREAD_CANCEL_DISABLE</b></p>\n\n<p style=\"margin-left:22%;\">The thread is not cancelable.\nIf a cancellation request is received, it is blocked until\ncancelability is enabled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_setcanceltype</b>() sets the cancelability type\nof the calling thread to the value given in <i>type</i>. The\nprevious cancelability type of the thread is returned in the\nbuffer pointed to by <i>oldtype</i>. The <i>type</i>\nargument must have one of the following values: <b><br>\nPTHREAD_CANCEL_DEFERRED</b></p>\n\n<p style=\"margin-left:22%;\">A cancellation request is\ndeferred until the thread next calls a function that is a\ncancellation point (see <a href=\"https://man.page/7/pthreads\">pthreads(7)</a>). This is the\ndefault cancelability type in all new threads, including the\ninitial thread.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Even with\ndeferred cancellation, a cancellation point in an\nasynchronous signal handler may still be acted upon and the\neffect is as if it was an asynchronous cancellation.</p>\n\n\n<p style=\"margin-left:11%;\"><b>PTHREAD_CANCEL_ASYNCHRONOUS</b></p>\n\n<p style=\"margin-left:22%;\">The thread can be canceled at\nany time. (Typically, it will be canceled immediately upon\nreceiving a cancellation request, but the system\ndoesn&rsquo;t guarantee this.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The set-and-get\noperation performed by each of these functions is atomic\nwith respect to other threads in the process calling the\nsame function.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nthese functions return 0; on error, they return a nonzero\nerror number.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_setcancelstate</b>() can fail with the following\nerror:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"36%\">\n\n\n<p>Invalid value for <i>state</i>.</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pthread_setcanceltype</b>() can fail with the following\nerror:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">Invalid value for\n<i>type</i>.</p> </td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3406931.png\" alt=\"Image grohtml-3406931.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For details of\nwhat happens when a thread is canceled, see\n<a href=\"https://man.page/3/pthread_cancel\">pthread_cancel(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Briefly\ndisabling cancelability is useful if a thread performs some\ncritical action that must not be interrupted by a\ncancellation request. Beware of disabling cancelability for\nlong periods, or around operations that may block for long\nperiods, since that will render the thread unresponsive to\ncancellation requests.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Asynchronous\ncancelability</b> <br>\nSetting the cancelability type to\n<b>PTHREAD_CANCEL_ASYNCHRONOUS</b> is rarely useful. Since\nthe thread could be canceled at <i>any</i> time, it cannot\nsafely reserve resources (e.g., allocating memory with\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>), acquire mutexes, semaphores, or locks,\nand so on. Reserving resources is unsafe because the\napplication has no way of knowing what the state of these\nresources is when the thread is canceled; that is, did\ncancellation occur before the resources were reserved, while\nthey were reserved, or after they were released?\nFurthermore, some internal data structures (e.g., the linked\nlist of free blocks managed by the <a href=\"https://man.page/3/malloc\">malloc(3)</a> family\nof functions) may be left in an inconsistent state if\ncancellation occurs in the middle of the function call.\nConsequently, clean-up handlers cease to be useful.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Functions that\ncan be safely asynchronously canceled are called\n<i>async-cancel-safe functions</i>. POSIX.1-2001 and\nPOSIX.1-2008 require only that <a href=\"https://man.page/3/pthread_cancel\">pthread_cancel(3)</a>,\n<b>pthread_setcancelstate</b>(), and\n<b>pthread_setcanceltype</b>() be async-cancel-safe. In\ngeneral, other library functions can&rsquo;t be safely\ncalled from an asynchronously cancelable thread.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One of the few\ncircumstances in which asynchronous cancelability is useful\nis for cancellation of a thread that is in a pure\ncompute-bound loop.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Portability\nnotes</b> <br>\nThe Linux threading implementations permit the\n<i>oldstate</i> argument of <b>pthread_setcancelstate</b>()\nto be NULL, in which case the information about the previous\ncancelability state is not returned to the caller. Many\nother implementations also permit a NULL <i>oldstat</i>\nargument, but POSIX.1 does not specify this point, so\nportable applications should always specify a non-NULL value\nin <i>oldstate</i>. A precisely analogous set of statements\napplies for the <i>oldtype</i> argument of\n<b>pthread_setcanceltype</b>().</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/3/pthread_cancel\">pthread_cancel(3)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/pthread_cancel\">pthread_cancel(3)</a>,\n<a href=\"https://man.page/3/pthread_cleanup_push\">pthread_cleanup_push(3)</a>,\n<a href=\"https://man.page/3/pthread_testcancel\">pthread_testcancel(3)</a>, <a href=\"https://man.page/7/pthreads\">pthreads(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}