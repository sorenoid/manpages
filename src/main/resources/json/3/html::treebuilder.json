{"name":"html::treebuilder","description":"HTML::TreeBuilder\n- Parser that builds a HTML syntax tree\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\nThis document\ndescribes version 5.07 of HTML::TreeBuilder, released August\n31, 2017 as part of HTML-Tree.","body":"\n\n<h1 align=\"center\">HTML::TreeBuilder</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::TreeBuilder\n- Parser that builds a HTML syntax tree</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This document\ndescribes version 5.07 of HTML::TreeBuilder, released August\n31, 2017 as part of HTML-Tree.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTML::TreeBuilder 5 -weak; # Ensure weak references in use\n<br>\nforeach my $file_name (@ARGV) { <br>\nmy $tree = HTML::TreeBuilder-&gt;new; # empty tree <br>\n$tree-&gt;parse_file($file_name); <br>\nprint &quot;Hey, here's a dump of the parse tree of\n$file_name:\\n&quot;; <br>\n$tree-&gt;dump; # a method we inherit from HTML::Element\n<br>\nprint &quot;And here it is, bizarrely rerendered as\nHTML:\\n&quot;, <br>\n$tree-&gt;as_HTML, &quot;\\n&quot;; <br>\n# Now that we're done with it, we must destroy it. <br>\n# $tree = $tree-&gt;delete; # Not required with weak\nreferences <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">(This class is\npart of the HTML::Tree dist.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class is\nfor <small>HTML</small> syntax trees that get built out of\n<small>HTML</small> source. The way to use it is to:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">1. start a new\n(empty) HTML::TreeBuilder object,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">2. then use one\nof the methods from HTML::Parser (presumably with\n&quot;$tree-&gt;parse_file($filename)&quot; for files, or\nwith &quot;$tree-&gt;parse($document_content)&quot; and\n&quot;$tree-&gt;eof&quot; if you&rsquo;ve got the content in\na string) to parse the <small>HTML</small> document into the\ntree $tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(You can\ncombine steps 1 and 2 with the &quot;new_from_file&quot; or\n&quot;new_from_content&quot; methods.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">2b. call\n&quot;$root-&gt;elementify()&quot; if you want.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">3. do whatever\nyou need to do with the syntax tree, presumably involving\ntraversing it looking for some bit of information in it,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">4. previous\nversions of HTML::TreeBuilder required you to call\n&quot;$tree-&gt;delete()&quot; to erase the contents of the\ntree from memory when you&rsquo;re done with the tree. This\nis not normally required anymore. See &quot;Weak\nReferences&quot; in HTML::Element for details.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most of the\nfollowing attributes native to HTML::TreeBuilder control how\nparsing takes place; they should be set <i>before</i> you\ntry parsing into the given object. You can set the\nattributes by passing a <small>TRUE</small> or\n<small>FALSE</small> value as argument. E.g.,\n&quot;$root-&gt;implicit_tags&quot; returns the current\nsetting for the &quot;implicit_tags&quot; option,\n&quot;$root-&gt;implicit_tags(1)&quot; turns that option on,\nand &quot;$root-&gt;implicit_tags(0)&quot; turns it off.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>implicit_tags</b>\n<br>\nSetting this attribute to true will instruct the parser to\ntry to deduce implicit elements and implicit end tags. If it\nis false you get a parse tree that just reflects the text as\nit stands, which is unlikely to be useful for anything but\nquick and dirty parsing. (In fact, I&rsquo;d be curious to\nhear from anyone who finds it useful to have\n&quot;implicit_tags&quot; set to false.) Default is\ntrue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Implicit\nelements have the &quot;implicit&quot; in HTML::Element\nattribute set.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>implicit_body_p_tag</b>\n<br>\nThis controls an aspect of implicit element behavior, if\n&quot;implicit_tags&quot; is on: If a text element (\n<small>PCDATA</small> ) or a phrasal element (such as\n&quot;&lt;em&gt;&quot;) is to be inserted under\n&quot;&lt;body&gt;&quot;, two things can happen: if\n&quot;implicit_body_p_tag&quot; is true, it&rsquo;s placed\nunder a new, implicit &quot;&lt;p&gt;&quot; tag. (Past DTDs\nsuggested this was the only correct behavior, and this is\nhow past versions of this module behaved.) But if\n&quot;implicit_body_p_tag&quot; is false, nothing is\nimplicated -- the <small>PCDATA</small> or phrasal element\nis simply placed under &quot;&lt;body&gt;&quot;. Default is\nfalse.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>no_expand_entities</b>\n<br>\nThis attribute controls whether entities are decoded during\nthe initial parse of the source. Enable this if you\ndon&rsquo;t want entities decoded to their character value.\ne.g. &rsquo;&amp;amp;&rsquo; is decoded to\n&rsquo;&amp;&rsquo; by default, but will be unchanged if\nthis is enabled. Default is false (entities will be\ndecoded.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ignore_unknown</b>\n<br>\nThis attribute controls whether unknown tags should be\nrepresented as elements in the parse tree, or whether they\nshould be ignored. Default is true (to ignore unknown\ntags.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ignore_text</b>\n<br>\nDo not represent the text content of elements. This saves\nspace if all you want is to examine the structure of the\ndocument. Default is false.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ignore_ignorable_whitespace</b>\n<br>\nIf set to true, TreeBuilder will try to avoid creating\nignorable whitespace text nodes in the tree. Default is\ntrue. (In fact, I&rsquo;d be interested in hearing if\nthere&rsquo;s ever a case where you need this off, or where\nleaving it on leads to incorrect behavior.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>no_space_compacting</b>\n<br>\nThis determines whether TreeBuilder compacts all whitespace\nstrings in the document (well, outside of <small>PRE</small>\nor <small>TEXTAREA</small> elements), or leaves them alone.\nNormally (default, value of 0), each string of contiguous\nwhitespace in the document is turned into a single space.\nBut that&rsquo;s not done if &quot;no_space_compacting&quot;\nis set to 1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Setting\n&quot;no_space_compacting&quot; to 1 might be useful if you\nwant to read in a tree just to make some minor changes to it\nbefore writing it back out.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This method is\nexperimental. If you use it, be sure to report any problems\nyou might have with it.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>p_strict</b>\n<br>\nIf set to true (and it defaults to false), TreeBuilder will\ntake a narrower than normal view of what can be under a\n&quot;&lt;p&gt;&quot; element; if it sees a non-phrasal\nelement about to be inserted under a &quot;&lt;p&gt;&quot;,\nit will close that &quot;&lt;p&gt;&quot;. Otherwise it will\nclose &quot;&lt;p&gt;&quot; elements only for other\n&quot;&lt;p&gt;&quot;&rsquo;s, headings, and\n&quot;&lt;form&gt;&quot; (although the latter may be removed\nin future versions).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nwhen going thru this snippet of code,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;p&gt;stuff\n<br>\n&lt;ul&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">TreeBuilder\nwill normally (with &quot;p_strict&quot; false) put the\n&quot;&lt;ul&gt;&quot; element under the\n&quot;&lt;p&gt;&quot; element. However, with\n&quot;p_strict&quot; set to true, it will close the\n&quot;&lt;p&gt;&quot; first.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In theory,\nthere should be strictness options like this for other/all\nelements besides just &quot;&lt;p&gt;&quot;; but I treat\nthis as a special case simply because of the fact that\n&quot;&lt;p&gt;&quot; occurs so frequently and its end-tag\nis omitted so often; and also because application of\nstrictness rules at parse-time across all elements often\nmakes tiny errors in <small>HTML</small> coding produce\ndrastically bad parse-trees, in my experience.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you find\nthat you wish you had an option like this to enforce\ncontent-models on all elements, then I suggest that what you\nwant is content-model checking as a stage after TreeBuilder\nhas finished parsing.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>store_comments</b>\n<br>\nThis determines whether TreeBuilder will normally store\ncomments found while parsing content into $root. Currently,\nthis is off by default.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>store_declarations</b>\n<br>\nThis determines whether TreeBuilder will normally store\nmarkup declarations found while parsing content into $root.\nThis is on by default.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>store_pis</b>\n<br>\nThis determines whether TreeBuilder will normally store\nprocessing instructions found while parsing content into\n$root -- assuming a recent version of HTML::Parser (old\nversions won&rsquo;t parse PIs correctly). Currently, this\nis off (false) by default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is somewhat\nof a known bug (to be fixed one of these days, if anyone\nneeds it?) that PIs in the preamble (before the\n&quot;&lt;html&gt;&quot; start-tag) end up actually\n<i>under</i> the &quot;&lt;html&gt;&quot; element.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>warn</b>\n<br>\nThis determines whether syntax errors during parsing should\ngenerate warnings, emitted via Perl&rsquo;s &quot;warn&quot;\nfunction.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is off\n(false) by default.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Objects of this\nclass inherit the methods of both HTML::Parser and\nHTML::Element. The methods inherited from HTML::Parser are\nused for building the <small>HTML</small> tree, and the\nmethods inherited from HTML::Element are what you use to\nscrutinize the tree. Besides this (HTML::TreeBuilder)\ndocumentation, you must also carefully read the\nHTML::Element documentation, and also skim the HTML::Parser\ndocumentation -- probably only its parse and parse_file\nmethods are of interest.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>new_from_file</b>\n<br>\n$root =\nHTML::TreeBuilder-&gt;new_from_file($filename_or_filehandle);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n&quot;shortcut&quot; constructor merely combines\nconstructing a new object (with the &quot;new&quot; method,\nbelow), and calling &quot;$new-&gt;parse_file(...)&quot; on\nit. Returns the new object. Note that this provides no way\nof setting any parse options like &quot;store_comments&quot;\n(for that, call &quot;new&quot;, and then set options,\nbefore calling &quot;parse_file&quot;). See the notes\n(below) on parameters to &quot;parse_file&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\nHTML::TreeBuilder is unable to read the file, then\n&quot;new_from_file&quot; dies. The error can also be found\nin $!. (This behavior is new in HTML-Tree 5. Previous\nversions returned a tree with only implicit elements.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>new_from_content</b>\n<br>\n$root = HTML::TreeBuilder-&gt;new_from_content(...);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n&quot;shortcut&quot; constructor merely combines\nconstructing a new object (with the &quot;new&quot; method,\nbelow), and calling &quot;for(...){$new-&gt;parse($_)}&quot;\nand &quot;$new-&gt;eof&quot; on it. Returns the new object.\nNote that this provides no way of setting any parse options\nlike &quot;store_comments&quot; (for that, call\n&quot;new&quot;, and then set options, before calling\n&quot;parse&quot;). Example usages:\n&quot;HTML::TreeBuilder-&gt;new_from_content(@lines)&quot;,\nor\n&quot;HTML::TreeBuilder-&gt;new_from_content($content)&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>new_from_url</b>\n<br>\n$root = HTML::TreeBuilder-&gt;new_from_url($url)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n&quot;shortcut&quot; constructor combines constructing a new\nobject (with the &quot;new&quot; method, below), loading\nLWP::UserAgent, fetching the specified <small>URL,</small>\nand calling &quot;$new-&gt;parse(\n$response-&gt;decoded_content)&quot; and\n&quot;$new-&gt;eof&quot; on it. Returns the new object. Note\nthat this provides no way of setting any parse options like\n&quot;store_comments&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<small>LWP</small> is unable to fetch the\n<small>URL,</small> or the response is not\n<small>HTML</small> (as determined by\n&quot;content_is_html&quot; in HTTP::Headers), then\n&quot;new_from_url&quot; dies, and the HTTP::Response object\nis found in $HTML::TreeBuilder::lwp_response.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You must have\ninstalled LWP::UserAgent for this method to work.\n<small>LWP</small> is not installed automatically, because\nit&rsquo;s a large set of modules and you might not need\nit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>new</b> <br>\n$root = HTML::TreeBuilder-&gt;new();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This creates a\nnew HTML::TreeBuilder object. This method takes no\nattributes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>parse_file</b>\n<br>\n$root-&gt;parse_file(...)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">[An important\nmethod inherited from HTML::Parser, which see. Current\nversions of HTML::Parser can take a filespec, or a\nfilehandle object, like *FOO, or some object from class\nIO::Handle, IO::File, IO::Socket) or the like. I think you\nshould check that a given file exists <i>before</i> calling\n&quot;$root-&gt;parse_file($filespec)&quot;.]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When you pass a\nfilename to &quot;parse_file&quot;, HTML::Parser opens it in\nbinary mode, which means it&rsquo;s interpreted as Latin-1 (\n<small>ISO-8859-1</small> ). If the file is in another\nencoding, like <small>UTF-8</small> or\n<small>UTF-16,</small> this will not do the right thing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One solution is\nto open the file yourself using the proper\n&quot;:encoding&quot; layer, and pass the filehandle to\n&quot;parse_file&quot;. You can automate this process by\nusing &quot;html_file&quot; in <small>IO::HTML</small> ,\nwhich will use the <small>HTML5</small> encoding sniffing\nalgorithm to automatically determine the proper\n&quot;:encoding&quot; layer and apply it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the next\nmajor release of HTML-Tree, I plan to have it use\n<small>IO::HTML</small> automatically. If you really want\nyour file opened in binary mode, you should open it yourself\nand pass the filehandle to &quot;parse_file&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nvalue is &quot;undef&quot; if there&rsquo;s an error opening\nthe file. In that case, the error will be in $!.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>parse</b>\n<br>\n$root-&gt;parse(...)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">[A important\nmethod inherited from HTML::Parser, which see. See the note\nbelow for &quot;$root-&gt;eof()&quot;.]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>eof</b> <br>\n$root-&gt;eof();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This signals\nthat you&rsquo;re finished parsing content into this tree;\nthis runs various kinds of crucial cleanup on the tree. This\nis called <i>for you</i> when you call\n&quot;$root-&gt;parse_file(...)&quot;, but not when you call\n&quot;$root-&gt;parse(...)&quot;. So if you call\n&quot;$root-&gt;parse(...)&quot;, then you <i>must</i> call\n&quot;$root-&gt;eof()&quot; once you&rsquo;ve finished\nfeeding all the chunks to &quot;parse(...)&quot;, and before\nyou actually start doing anything else with the tree in\n$root.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>parse_content</b>\n<br>\n$root-&gt;parse_content(...);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Basically a\nhandy alias for &quot;$root-&gt;parse(...);\n$root-&gt;eof&quot;. Takes the exact same arguments as\n&quot;$root-&gt;parse()&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>delete</b>\n<br>\n$root-&gt;delete();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">[A previously\nimportant method inherited from HTML::Element, which\nsee.]</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>elementify</b>\n<br>\n$root-&gt;elementify();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This changes\nthe class of the object in $root from HTML::TreeBuilder to\nthe class used for all the rest of the elements in that tree\n(generally HTML::Element). Returns $root.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For most\npurposes, this is unnecessary, but if you call this after\n(after!!) you&rsquo;ve finished building a tree, then it\nkeeps you from accidentally trying to call anything but\nHTML::Element methods on it. (I.e., if you accidentally call\n&quot;$root-&gt;parse_file(...)&quot; on the\nalready-complete and elementified tree, then instead of\ncharging ahead and <i>wreaking havoc</i>, it&rsquo;ll throw\na fatal error -- since $root is now an object just of class\nHTML::Element which has no &quot;parse_file&quot;\nmethod.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\n&quot;elementify&quot; currently deletes all the private\nattributes of $root except for &quot;_tag&quot;,\n&quot;_parent&quot;, &quot;_content&quot;, &quot;_pos&quot;,\nand &quot;_implicit&quot;. If anyone requests that I change\nthis to leave in yet more private attributes, I might do so,\nin future versions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>guts</b>\n<br>\n@nodes = $root-&gt;guts(); <br>\n$parent_for_nodes = $root-&gt;guts();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In list context\n(as in the first case), this method returns the topmost\nnon-implicit nodes in a tree. This is useful when\nyou&rsquo;re parsing <small>HTML</small> code that you know\ndoesn&rsquo;t expect an <small>HTML</small> document, but\ninstead just a fragment of an <small>HTML</small> document.\nFor example, if you wanted the parse tree for a file\nconsisting of just this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;li&gt;I\nlike pie!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then you would\nget that with &quot;@nodes = $root-&gt;guts();&quot;. It so\nhappens that in this case, @nodes will contain just one\nelement object, representing the &quot;&lt;li&gt;&quot; node\n(with &quot;I like pie!&quot; being its text child node).\nHowever, consider if you were parsing this:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;hr&gt;Hooboy!&lt;hr&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In that case,\n&quot;$root-&gt;guts()&quot; would return three items: an\nelement object for the first &quot;&lt;hr&gt;&quot;, a text\nstring &quot;Hooboy!&quot;, and another\n&quot;&lt;hr&gt;&quot; element object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For cases where\nyou want definitely one element (so you can treat it as a\n&quot;document fragment&quot;, roughly speaking), call\n&quot;guts()&quot; in scalar context, as in\n&quot;$parent_for_nodes = $root-&gt;guts()&quot;. That works\nlike &quot;guts()&quot; in list context; in fact,\n&quot;guts()&quot; in list context would have returned\nexactly one value, and if it would have been an object (as\nopposed to a text string), then that&rsquo;s what\n&quot;guts&quot; in scalar context will return. Otherwise,\nif &quot;guts()&quot; in list context would have returned no\nvalues at all, then &quot;guts()&quot; in scalar context\nreturns undef. In all other cases, &quot;guts()&quot; in\nscalar context returns an implicit &quot;&lt;div&gt;&quot;\nelement node, with children consisting of whatever nodes\n&quot;guts()&quot; in list context would have returned. Note\nthat that may detach those nodes from $root&rsquo;s\ntree.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>disembowel</b>\n<br>\n@nodes = $root-&gt;disembowel(); <br>\n$parent_for_nodes = $root-&gt;disembowel();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;disembowel()&quot; method works just like the\n&quot;guts()&quot; method, except that disembowel\ndefinitively destroys the tree above the nodes that are\nreturned. Usually when you want the guts from a tree,\nyou&rsquo;re just going to toss out the rest of the tree\nanyway, so this saves you the bother. (Remember,\n&quot;disembowel&quot; means &quot;remove the guts\nfrom&quot;.)</p>\n\n<h2>INTERNAL METHODS\n<a name=\"INTERNAL METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You should not\nneed to call any of the following methods directly.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>element_class</b>\n<br>\n$classname = $h-&gt;element_class;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This method\nreturns the class which will be used for new elements. It\ndefaults to HTML::Element, but can be overridden by\nsubclassing or esoteric means best left to those will will\nread the source and then not complain when those esoteric\nmeans change. (Just subclass.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>comment</b>\n<br>\nAccept a &quot;here&rsquo;s a comment&quot; signal from\nHTML::Parser.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>declaration</b>\n<br>\nAccept a &quot;here&rsquo;s a markup declaration&quot;\nsignal from HTML::Parser.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>done</b>\n<small><br>\nTODO:</small> document</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>end</b> <br>\nEither: Accept an end-tag signal from HTML::Parser Or:\nMethod for closing currently open elements in some fairly\ncomplex way, as used by other methods in this class.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>TODO:</small>\nWhy is this hidden?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>process</b>\n<br>\nAccept a &quot;here&rsquo;s a <small>PI&quot;</small> signal\nfrom HTML::Parser.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>start</b>\n<br>\nAccept a signal from HTML::Parser for start-tags.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>TODO:</small>\nWhy is this hidden?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>stunt</b>\n<small><br>\nTODO:</small> document</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>stunted</b>\n<small><br>\nTODO:</small> document</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>text</b>\n<br>\nAccept a &quot;here&rsquo;s a text token&quot; signal from\nHTML::Parser.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>TODO:</small>\nWhy is this hidden?</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tighten_up</b>\n<br>\nLegacy</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Redirects to\n&quot;delete_ignorable_whitespace&quot; in\nHTML::Element.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>warning</b>\n<br>\nWrapper for CORE::warn</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>TODO:</small>\nwhy not just use carp?</p>\n\n<h2>SUBROUTINES\n<a name=\"SUBROUTINES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>DEBUG</small></b>\n<br>\nAre we in Debug mode? This is a constant subroutine, to\nallow compile-time optimizations. To control debug mode, set\n$HTML::TreeBuilder::DEBUG <i>before</i> loading\nHTML::TreeBuilder.</p>\n\n<h2>HTML AND ITS DISCONTENTS\n<a name=\"HTML AND ITS DISCONTENTS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>HTML</small>\nis rather harder to parse than people who write it generally\nsuspect.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here&rsquo;s\nthe problem: <small>HTML</small> is a kind of\n<small>SGML</small> that permits &quot;minimization&quot;\nand &quot;implication&quot;. In short, this means that you\ndon&rsquo;t have to close every tag you open (because the\nopening of a subsequent tag may implicitly close it), and if\nyou use a tag that can&rsquo;t occur in the context you seem\nto using it in, under certain conditions the parser will be\nable to realize you mean to leave the current context and\nenter the new one, that being the only one that your code\ncould correctly be interpreted in.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now, this would\nall work flawlessly and unproblematically if: 1) all the\nrules that both prescribe and describe <small>HTML</small>\nwere (and had been) clearly set out, and 2) everyone was\naware of these rules and wrote their code in compliance to\nthem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However, it\ndidn&rsquo;t happen that way, and so most\n<small>HTML</small> pages are difficult if not impossible to\ncorrectly parse with nearly any set of straightforward\n<small>SGML</small> rules. That&rsquo;s why the internals of\nHTML::TreeBuilder consist of lots and lots of special cases\n-- instead of being just a generic <small>SGML</small>\nparser with <small>HTML DTD</small> rules plugged in.</p>\n\n<h2>TRANSLATIONS?\n<a name=\"TRANSLATIONS?\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The techniques\nthat HTML::TreeBuilder uses to perform what I consider very\nrobust parses on everyday code are not things that can work\nonly in Perl. To date, the algorithms at the center of\nHTML::TreeBuilder have been implemented only in Perl, as far\nas I know; and I don&rsquo;t foresee getting around to\nimplementing them in any other language any time soon.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If, however,\nanyone is looking for a semester project for an applied\nprogramming class (or if they merely enjoy\n<i>extra-curricular</i> masochism), they might do well to\nsee about choosing as a topic the implementation/adaptation\nof these routines to any other interesting programming\nlanguage that you feel currently suffers from a lack of\nrobust HTML-parsing. I welcome correspondence on this\nsubject, and point out that one can learn a great deal about\nlanguages by trying to translate between them, and then\ncomparing the result.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nHTML::TreeBuilder source may seem long and complex, but it\nis rather well commented, and symbol names are generally\nself-explanatory. (You are encouraged to read the Mozilla\n<small>HTML</small> parser source for comparison.) Some of\nthe complexity comes from little-used features, and some of\nit comes from having the <small>HTML</small> tokenizer\n(HTML::Parser) being a separate module, requiring somewhat\nof a different interface than you&rsquo;d find in a combined\ntokenizer and tree-builder. But most of the length of the\nsource comes from the fact that it&rsquo;s essentially a\nlong list of special cases, with lots and lots of\nsanity-checking, and sanity-recovery -- because, as Roseanne\nRosannadanna once said, &quot;it&rsquo;s always\n<i>something</i>&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Users looking\nto compare several <small>HTML</small> parsers should look\nat the source for Raggett&rsquo;s Tidy\n(&quot;&lt;http://www.w3.org/People/Raggett/tidy/&gt;&quot;),\nMozilla (&quot;&lt;http://www.mozilla.org/&gt;&quot;), and\npossibly root around the browsers section of Yahoo to find\nthe various open-source ones\n(&quot;&lt;http://dir.yahoo.com/Computers_and_Internet/Software/Internet/World_Wide_Web/Browsers/&gt;&quot;).</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">* Framesets\nseem to work correctly now. Email me if you get a strange\nparse from a document with framesets.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">* Really bad\n<small>HTML</small> code will, often as not, make for a\nsomewhat objectionable parse tree. Regrettable, but\nunavoidably true.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">* If\nyou&rsquo;re running with &quot;implicit_tags&quot; off (God\nhelp you!), consider that &quot;$tree-&gt;content_list&quot;\nprobably contains the tree or grove from the parse, and not\n$tree itself (which will, oddly enough, be an implicit\n&quot;&lt;html&gt;&quot; element). This seems\ncounter-intuitive and problematic; but seeing as how almost\nno <small>HTML</small> ever parses correctly with\n&quot;implicit_tags&quot; off, this interface oddity seems\nthe least of your problems.</p>\n\n<h2>BUG REPORTS\n<a name=\"BUG REPORTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a document\nparses in a way different from how you think it should, I\nask that you report this to me as a bug. The first thing you\nshould do is copy the document, trim out as much of it as\nyou can while still producing the bug in question, and\n<i>then</i> email me that mini-document <i>and</i> the code\nyou&rsquo;re using to parse it, to the HTML::Tree bug queue\nat\n&quot;&lt;bug-html-tree&nbsp;at&nbsp;rt.cpan.org&gt;&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Include a note\nas to how it parses (presumably including its\n&quot;$tree-&gt;dump&quot; output), and then a <i>careful\nand clear</i> explanation of where you think the parser is\ngoing astray, and how you would prefer that it work\ninstead.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For more\ninformation about the HTML-Tree distribution:\nHTML::Tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Modules used by\nHTML::TreeBuilder: HTML::Parser, HTML::Element,\nHTML::Tagset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For converting\nbetween XML::DOM::Node, HTML::Element, and XML::Element\ntrees: HTML::DOMbo.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For opening a\n<small>HTML</small> file with automatic charset detection:\n<small>IO::HTML</small> .</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Current\nmaintainers:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"68%\">\n\n\n<p>Christopher J. Madsen\n&quot;&lt;perl&nbsp;AT&nbsp;cjmweb.net&gt;&quot;</p> </td>\n<td width=\"15%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"68%\">\n\n\n<p>Jeff Fearn\n&quot;&lt;jfearn&nbsp;AT&nbsp;cpan.org&gt;&quot;</p> </td>\n<td width=\"15%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Original\nHTML-Tree author:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">Gisle Aas</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Former\nmaintainers:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"54%\">\n\n\n<p style=\"margin-top: 1em\">Sean M. Burke</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"54%\">\n\n\n<p>Andy Lester</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"54%\">\n\n\n<p>Pete Krawczyk\n&quot;&lt;petek&nbsp;AT&nbsp;cpan.org&gt;&quot;</p> </td>\n<td width=\"29%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can follow\nor contribute to HTML-Tree&rsquo;s development at\n&lt;https://github.com/kentfredric/HTML-Tree&gt;.</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1995-1998 Gisle Aas, 1999-2004 Sean M. Burke, 2005 Andy\nLester, 2006 Pete Krawczyk, 2010 Jeff Fearn, 2012\nChristopher J. Madsen.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The programs in\nthis library are distributed in the hope that they will be\nuseful, but without any warranty; without even the implied\nwarranty of merchantability or fitness for a particular\npurpose.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#INTERNAL METHODS\">INTERNAL METHODS</a>","<a href=\"#SUBROUTINES\">SUBROUTINES</a>","<a href=\"#HTML AND ITS DISCONTENTS\">HTML AND ITS DISCONTENTS</a>","<a href=\"#TRANSLATIONS?\">TRANSLATIONS?</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#BUG REPORTS\">BUG REPORTS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}