{"name":"makecontext","body":"\n\n<h1 align=\"center\">MAKECONTEXT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">makecontext,\nswapcontext - manipulate user context</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;ucontext.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nmakecontext(ucontext_t *</b><i>ucp</i><b>, void\n(*</b><i>func</i><b>)(), int</b> <i>argc</i><b>,\n...);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nswapcontext(ucontext_t *</b><i>oucp</i><b>, const ucontext_t\n*</b><i>ucp</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a System\nV-like environment, one has the type <i>ucontext_t</i>\n(defined in <i>&lt;ucontext.h&gt;</i> and described in\n<a href=\"https://man.page/3/getcontext\">getcontext(3)</a>) and the four functions\n<a href=\"https://man.page/3/getcontext\">getcontext(3)</a>, <a href=\"https://man.page/3/setcontext\">setcontext(3)</a>,\n<b>makecontext</b>(), and <b>swapcontext</b>() that allow\nuser-level context switching between multiple threads of\ncontrol within a process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>makecontext</b>() function modifies the context pointed\nto by <i>ucp</i> (which was obtained from a call to\n<a href=\"https://man.page/3/getcontext\">getcontext(3)</a>). Before invoking <b>makecontext</b>(),\nthe caller must allocate a new stack for this context and\nassign its address to <i>ucp-&gt;uc_stack</i>, and define a\nsuccessor context and assign its address to\n<i>ucp-&gt;uc_link</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When this\ncontext is later activated (using <a href=\"https://man.page/3/setcontext\">setcontext(3)</a> or\n<b>swapcontext</b>()) the function <i>func</i> is called,\nand passed the series of integer (<i>int</i>) arguments that\nfollow <i>argc</i>; the caller must specify the number of\nthese arguments in <i>argc</i>. When this function returns,\nthe successor context is activated. If the successor context\npointer is NULL, the thread exits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>swapcontext</b>() function saves the current context in\nthe structure pointed to by <i>oucp</i>, and then activates\nthe context pointed to by <i>ucp</i>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\nsuccessful, <b>swapcontext</b>() does not return. (But we\nmay return later, in case <i>oucp</i> is activated, in which\ncase it looks like <b>swapcontext</b>() returns 0.) On\nerror, <b>swapcontext</b>() returns -1 and sets <i>errno</i>\nappropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"46%\">\n\n\n<p style=\"margin-top: 1em\">Insufficient stack space\nleft.</p> </td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>makecontext</b>()\nand <b>swapcontext</b>() are provided in glibc since version\n2.1.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3333861.png\" alt=\"Image grohtml-3333861.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">SUSv2,\nPOSIX.1-2001. POSIX.1-2008 removes the specifications of\n<b>makecontext</b>() and <b>swapcontext</b>(), citing\nportability issues, and recommending that applications be\nrewritten to use POSIX threads instead.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ninterpretation of <i>ucp-&gt;uc_stack</i> is just as in\n<a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>, namely, this struct contains the\nstart and length of a memory area to be used as the stack,\nregardless of the direction of growth of the stack. Thus, it\nis not necessary for the user program to worry about this\ndirection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On\narchitectures where <i>int</i> and pointer types are the\nsame size (e.g., x86-32, where both types are 32 bits), you\nmay be able to get away with passing pointers as arguments\nto <b>makecontext</b>() following <i>argc</i>. However,\ndoing this is not guaranteed to be portable, is undefined\naccording to the standards, and won&rsquo;t work on\narchitectures where pointers are larger than <i>int</i>s.\nNevertheless, starting with version 2.8, glibc makes some\nchanges to <b>makecontext</b>(), to permit this on some\n64-bit architectures (e.g., x86-64).</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The example\nprogram below demonstrates the use of <a href=\"https://man.page/3/getcontext\">getcontext(3)</a>,\n<b>makecontext</b>(), and <b>swapcontext</b>(). Running the\nprogram produces the following output:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./a.out</b> <br>\nmain: swapcontext(&amp;uctx_main, &amp;uctx_func2) <br>\nfunc2: started <br>\nfunc2: swapcontext(&amp;uctx_func2, &amp;uctx_func1) <br>\nfunc1: started <br>\nfunc1: swapcontext(&amp;uctx_func1, &amp;uctx_func2) <br>\nfunc2: returning <br>\nfunc1: returning <br>\nmain: exiting</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;ucontext.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static\nucontext_t uctx_main, uctx_func1, uctx_func2;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nhandle_error(msg) \\ <br>\ndo { perror(msg); exit(EXIT_FAILURE); } while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nfunc1(void) <br>\n{ <br>\nprintf(&quot;func1: started\\n&quot;); <br>\nprintf(&quot;func1: swapcontext(&amp;uctx_func1,\n&amp;uctx_func2)\\n&quot;); <br>\nif (swapcontext(&amp;uctx_func1, &amp;uctx_func2) == -1)\n<br>\nhandle_error(&quot;swapcontext&quot;); <br>\nprintf(&quot;func1: returning\\n&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nfunc2(void) <br>\n{ <br>\nprintf(&quot;func2: started\\n&quot;); <br>\nprintf(&quot;func2: swapcontext(&amp;uctx_func2,\n&amp;uctx_func1)\\n&quot;); <br>\nif (swapcontext(&amp;uctx_func2, &amp;uctx_func1) == -1)\n<br>\nhandle_error(&quot;swapcontext&quot;); <br>\nprintf(&quot;func2: returning\\n&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nchar func1_stack[16384]; <br>\nchar func2_stack[16384];</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(getcontext(&amp;uctx_func1) == -1) <br>\nhandle_error(&quot;getcontext&quot;); <br>\nuctx_func1.uc_stack.ss_sp = func1_stack; <br>\nuctx_func1.uc_stack.ss_size = sizeof(func1_stack); <br>\nuctx_func1.uc_link = &amp;uctx_main; <br>\nmakecontext(&amp;uctx_func1, func1, 0);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(getcontext(&amp;uctx_func2) == -1) <br>\nhandle_error(&quot;getcontext&quot;); <br>\nuctx_func2.uc_stack.ss_sp = func2_stack; <br>\nuctx_func2.uc_stack.ss_size = sizeof(func2_stack); <br>\n/* Successor context is f1(), unless argc &gt; 1 */ <br>\nuctx_func2.uc_link = (argc &gt; 1) ? NULL : &amp;uctx_func1;\n<br>\nmakecontext(&amp;uctx_func2, func2, 0);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;main:\nswapcontext(&amp;uctx_main, &amp;uctx_func2)\\n&quot;); <br>\nif (swapcontext(&amp;uctx_main, &amp;uctx_func2) == -1) <br>\nhandle_error(&quot;swapcontext&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;main:\nexiting\\n&quot;); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>, <a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>,\n<a href=\"https://man.page/3/getcontext\">getcontext(3)</a>, <a href=\"https://man.page/3/sigsetjmp\">sigsetjmp(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}