{"name":"file::desktopentry","body":"\n\n<h1 align=\"center\">File::DesktopEntry</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::DesktopEntry\n- Object to handle .desktop files</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nFile::DesktopEntry; <br>\nmy $entry = File::DesktopEntry-&gt;new('firefox'); <br>\nprint &quot;Using &quot;.$entry-&gt;Name.&quot; to open\nhttp://perl.org\\n&quot;; <br>\n$entry-&gt;run('http://perl.org');</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\ndesigned to work with <i>.desktop</i> files. The format of\nthese files is specified by the freedesktop &quot;Desktop\nEntry&quot; specification. This module can parse these files\nbut also knows how to run the applications defined by these\nfiles.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For this module\nversion 1.0 of the specification was used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module was\nwritten to support File::MimeInfo::Applications.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please\nremember: case is significant for the names of Desktop Entry\nkeys.</p>\n\n<h2>VARIABLES\n<a name=\"VARIABLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can set the\nglobal variable $File::DesktopEntry::VERBOSE. If set the\nmodule prints a warning every time a command gets\nexecuted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The global\nvariable $File::DesktopEntry::LOCALE tells you what the\ndefault locale being used is. However, changing it will not\nchange the default locale.</p>\n\n<h2>AUTOLOAD\n<a name=\"AUTOLOAD\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All methods\nthat start with a capital are autoloaded as\n&quot;get(KEY)&quot; where key is the autoloaded method\nname.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;new(FILE)&quot;\n<br>\n&quot;new(\\$TEXT)&quot; <br>\n&quot;new(NAME)&quot;</p>\n\n<p style=\"margin-left:17%;\">Constructor. <small>FILE,\nNAME</small> or <small>TEXT</small> are optional\narguments.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When a name is\ngiven (a string without &rsquo;&quot;/&quot;&rsquo;,\n&rsquo;&quot;\\&quot;&rsquo; or &rsquo;&quot;.&quot;&rsquo;)\na lookup is done using File::BaseDir. If the file found in\nthis lookup is not writable or if no file was found, the\n<small>XDG_DATA_HOME</small> path will be used when\nwriting.</p>\n\n<p style=\"margin-left:11%;\">&quot;lookup(NAME)&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a filename for a\ndesktop entry with desktop file id <small>NAME.</small></p>\n\n<p style=\"margin-left:11%;\">&quot;wants_uris( )&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns true if the Exec string\nfor this desktop entry specifies that the application uses\nURIs instead of paths. This can be used to determine whether\nan application uses a <small>VFS</small> library.</p>\n\n<p style=\"margin-left:11%;\">&quot;wants_list( )&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns true if the Exec string\nfor this desktop entry specifies that the application can\nhandle multiple arguments at once.</p>\n\n<p style=\"margin-left:11%;\">&quot;run(@FILES)&quot;</p>\n\n<p style=\"margin-left:17%;\">Forks and runs the application\nspecified in this Desktop Entry with arguments\n<small>FILES</small> as a background process. Returns the\npid.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The child\nprocess fails when this is not a Desktop Entry of type\nApplication or if the Exec key is missing or invalid.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the desktop\nentry specifies that the program needs to be executed in a\nterminal the $TERMINAL environment variable is used. If this\nvariable is not set &quot;x-terminal-emulator -e&quot; is\nused as default on Debian systems.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">(On Windows\nthis method returns a Win32::Process object.)</p>\n\n<p style=\"margin-left:11%;\">&quot;system(@FILES)&quot;</p>\n\n<p style=\"margin-left:17%;\">Like &quot;run()&quot; but\nusing the &quot;system()&quot; system call. It only return\nafter the application has ended.</p>\n\n<p style=\"margin-left:11%;\">&quot;exec(@FILES)&quot;</p>\n\n<p style=\"margin-left:17%;\">Like &quot;run()&quot; but\nusing the &quot;exec()&quot; system call. This method is\nexpected not to return but to replace the current process\nwith the application you try to run.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">On Windows this\nmethod doesn&rsquo;t always work the way you want it to due\nto the &quot;fork()&quot; emulation on this platform. Try\nusing &quot;run()&quot; or &quot;system()&quot; instead.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;parse_Exec(@FILES)&quot;</p>\n\n<p style=\"margin-left:17%;\">Expands the Exec format in this\ndesktop entry with. Returns a properly quoted string in\nscalar context or a list of words in list context. Dies when\nthe Exec key is invalid.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It supports the\nfollowing fields:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">%f single file\n<br>\n%F multiple files <br>\n%u single url <br>\n%U multiple urls <br>\n%i Icon field prefixed by --icon <br>\n%c Name field, possibly translated <br>\n%k location of this .desktop file <br>\n%% literal '%'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If necessary\nthis method tries to convert between paths and URLs but this\nis not perfect.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Fields that are\ndeprecated, but (still) supported by this module:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">%d single\ndirectory <br>\n%D multiple directories</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The fields %n,\n%N, %v and %m are deprecated and will cause a warning if\n$VERBOSE is used. Any other unknown fields will cause an\nerror.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The fields %F,\n%U, %D and %i can only occur as separate words because they\nexpand to multiple arguments.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Also see &quot;\n<small>LIMITATIONS&quot;</small> .</p>\n\n<p style=\"margin-left:11%;\">&quot;get(KEY)&quot; <br>\n&quot;get(GROUP, KEY)&quot;</p>\n\n<p style=\"margin-left:17%;\">Get a value for\n<small>KEY</small> from <small>GROUP.</small> If\n<small>GROUP</small> is not specified &rsquo;Desktop\nEntry&rsquo; is used. All values are treated as string, so\ne.g. booleans will be returned as the literal strings\n&quot;true&quot; and &quot;false&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\n<small>KEY</small> does not contain a language code you get\nthe translation in the current locale if available or a\nsensible default. The request a specific language you can\nadd the language part. E.g.\n&quot;$entry-&gt;get('Name[nl_NL]')&quot; can return either\nthe value of the &rsquo;Name[nl_NL]&rsquo;, the\n&rsquo;Name[nl]&rsquo; or the &rsquo;Name&rsquo; key in the\nDesktop Entry file. Exact language parsing order can be\nfound in the spec. To force you get the untranslated key use\neither &rsquo;Name[C]&rsquo; or &rsquo;Name[\n<small>POSIX</small> ]&rsquo;.</p>\n\n<p style=\"margin-left:11%;\">&quot;set(KEY =&gt; VALUE,\n...)&quot; <br>\n&quot;set(GROUP, KEY =&gt; VALUE, ...)&quot;</p>\n\n<p style=\"margin-left:17%;\">Set values for one or more\nkeys. If <small>GROUP</small> is not given &quot;Desktop\nEntry&quot; is used. All values are treated as strings,\nbackslashes, newlines and tabs are escaped. To set a boolean\nkey you need to use the literal strings &quot;true&quot; and\n&quot;false&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unlike the\n&quot;get()&quot; call languages are not handled\nautomatically for &quot;set()&quot;. <small>KEY</small>\nshould include the language part if you want to set a\ntranslation. E.g.\n&quot;$entry-&gt;set(&quot;Name[nl_NL]&quot; =&gt;\n&quot;Tekst Verwerker&quot;)&quot; will set a Dutch\ntranslation for the Name key. Using either\n&quot;Name[C]&quot; or &quot;Name[ <small>POSIX</small>\n]&quot; will be equivalent with not giving a language\nargument.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When setting\nthe Exec key without specifying a group it will be parsed\nand quoted correctly as required by the spec. You can use\nquoted arguments to include whitespace in a argument,\nescaping whitespace does not work. To circumvent this\nquoting explicitly give the group name &rsquo;Desktop\nEntry&rsquo;.</p>\n\n<p style=\"margin-left:11%;\">&quot;text()&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns the (modified) text of\nthe file.</p>\n\n<p style=\"margin-left:11%;\">&quot;read(FILE)&quot; <br>\n&quot;read(\\$SCALAR)&quot;</p>\n\n<p style=\"margin-left:17%;\">Read Desktop Entry data from\nfile or memory buffer. Without argument defaults to file\ngiven at constructor.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you gave a\nfile, text buffer or name to the constructor this method\nwill be called automatically.</p>\n\n<p style=\"margin-left:11%;\">&quot;read_fh(IO)&quot;</p>\n\n<p style=\"margin-left:17%;\">Read Desktop Entry data from\nfilehandle or <small>IO</small> object.</p>\n\n<p style=\"margin-left:11%;\">&quot;write(FILE)&quot;</p>\n\n<p style=\"margin-left:17%;\">Write the Desktop Entry data to\n<small>FILE.</small> Without arguments it writes to the\nfilename given to the constructor if any.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The keys Name\nand Type are required. Type can be either\n&quot;Application&quot;, &quot;Link&quot; or\n&quot;Directory&quot;. For an application set the optional\nkey &quot;Exec&quot;. For a link set the &quot;URL&quot;\nkey.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Backwards\nCompatibility</b> <br>\nMethods supported for backwards compatibility with 0.02.\n<br>\n&quot;new_from_file(FILE)&quot;</p>\n\n<p style=\"margin-left:17%;\">Alias for\n&quot;new(FILE)&quot;.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;new_from_data(TEXT)&quot;</p>\n\n<p style=\"margin-left:17%;\">Alias for\n&quot;new(\\$TEXT)&quot;.</p>\n\n<p style=\"margin-left:11%;\">&quot;get_value(NAME, GROUP,\nLANG)&quot;</p>\n\n<p style=\"margin-left:17%;\">Identical to &quot;get(GROUP,\n&quot;NAME[LANG]&quot;)&quot;. <small>LANG</small> defaults\nto &rsquo;C&rsquo;, <small>GROUP</small> is optional.</p>\n\n<h2>NON-UNIX PLATFORMS\n<a name=\"NON-UNIX PLATFORMS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module has\na few bits of code to make it work on Windows. It handles\n&quot;file://&quot; uri a bit different and it uses\nWin32::Process. On other platforms your mileage may\nvary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat the specification is targeting Unix platforms only and\nwill only have limited relevance on other platforms. Any\nplatform-dependent behavior in this module should be\nconsidered an extension of the spec.</p>\n\n<h2>LIMITATIONS\n<a name=\"LIMITATIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you try to\nexec a remote file with an application that can only handle\nfiles on the local file system we should -according to the\nspec- download the file to a temp location. This is not\nsupported. Use the &quot;wants_uris()&quot; method to check\nif an application supports urls.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The values of\nthe various Desktop Entry keys are not parsed (except for\nthe Exec key). This means that booleans will be returned as\nthe strings &quot;true&quot; and &quot;false&quot; and lists\nwill still be &quot;;&quot; separated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the icon is\ngiven as name and not as path it should be resolved for the\n%i code in the Exec key. We need a separate module for the\nicon spec to deal with this.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nthe spec comments can contain any encoding. However since\nthis module read files as utf8, invalid <small>UTF-8</small>\ncharacters in a comment will cause an error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is no\nsupport for Legacy-Mixed Encoding. Everybody is using utf8\nnow ... right ?</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Jaap\nKarssenberg (Pardus) &lt;pardus@cpan.org&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Maintained by\nMichiel Beijen &lt;michielb@cpan.org&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2005, 2007 Jaap G Karssenberg. All rights reserved.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;http://standards.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::BaseDir\nand File::MimeInfo::Applications</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">X11::FreeDesktop::DesktopEntry</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#VARIABLES\">VARIABLES</a>","<a href=\"#AUTOLOAD\">AUTOLOAD</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#NON-UNIX PLATFORMS\">NON-UNIX PLATFORMS</a>","<a href=\"#LIMITATIONS\">LIMITATIONS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#LICENSE\">LICENSE</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}