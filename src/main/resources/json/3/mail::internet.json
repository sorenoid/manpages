{"name":"mail::internet","description":"Mail::Internet\n- manipulate email messages","body":"\n\n<h1 align=\"center\">Mail::Internet</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Internet\n- manipulate email messages</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nMail::Internet; <br>\nmy $msg = Mail::Internet-&gt;new(\\*STDIN);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This package\nimplements reading, creating, manipulating, and writing\nemail messages. Sometimes, the implementation tries to be\ntoo smart, but in the general case it works as expected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you start\nwriting a <b>new application</b>, you should use the\nMail::Box distribution, which has more features and handles\nmessages much better according to the RFCs. See\n&lt;http://perl.overmeer.net/mailbox/&gt;. You may also\nchose MIME::Entity, to get at least some multipart support\nin your application.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Constructors</b>\n<br>\n$obj-&gt;<b>dup</b>()</p>\n\n<p style=\"margin-left:17%;\">Duplicate the message as a\nwhole. Both header and body will be deep-copied: a new\nMail::Internet object is returned.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>extract</b>(\\@lines)</p>\n\n<p style=\"margin-left:17%;\">Extract header and body from an\n<small>ARRAY</small> of message lines. Requires an object\nalready created with <b>new()</b>, which contents will get\noverwritten.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>new</b>( [$arg],\n[%options] ) <br>\nMail::Internet-&gt;<b>new</b>( [$arg], [%options] )</p>\n\n<p style=\"margin-left:17%;\">$arg is optional and may be\neither a file descriptor (reference to a <small>GLOB</small>\n) or a reference to an array. If given the new object will\nbe initialized with headers and body either from the array\nof read from the file descriptor.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>Mail::Header::new()</b> %options &quot;Modify&quot;,\n&quot;MailFrom&quot; and &quot;FoldLength&quot; may also be\ngiven.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">-Option--Default\n<br>\nBody [] <br>\nHeader undef <br>\nBody =&gt; ARRAY-of-LINES</p>\n\n<p style=\"margin-left:20%;\">The value of this option should\nbe a reference to an array which contains the lines for the\nbody of the message. Each line should be terminated with\n&quot;\\n&quot; ( <small>LF</small> ). If Body is given then\n&quot;Mail::Internet&quot; will not attempt to read the body\nfrom $arg (even if it is specified).</p>\n\n<p style=\"margin-left:17%;\">Header =&gt; Mail::Header</p>\n\n<p style=\"margin-left:20%;\">The value of this option should\nbe a Mail::Header object. If given then\n&quot;Mail::Internet&quot; will not attempt to read a mail\nheader from $arg, if it was specified.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>read</b>($fh)</p>\n\n<p style=\"margin-left:17%;\">Read a message from the $fh\ninto an already existing message object. Better use\n<b>new()</b> with the $fh as first argument.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Accessors</b>\n<br>\n$obj-&gt;<b>body</b>( [$body] )</p>\n\n<p style=\"margin-left:17%;\">Returns the body of the\nmessage. This is a reference to an array. Each entry in the\narray represents a single line in the message.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If <i>$body</i>\nis given, it can be a reference to an array or an array,\nthen the body will be replaced. If a reference is passed, it\nis used directly and not copied, so any subsequent changes\nto the array will change the contents of the body.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>head</b>()</p>\n\n<p style=\"margin-left:17%;\">Returns the\n&quot;Mail::Header&quot; object which holds the headers for\nthe current message</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Processing\nthe message as a whole</b> <br>\n$obj-&gt;<b>as_mbox_string</b>( [$already_escaped] )</p>\n\n<p style=\"margin-left:17%;\">Returns the message as a string\nin mbox format. $already_escaped, if given and true,\nindicates that <b>escape_from()</b> has already been called\non this object.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>as_string</b>()</p>\n\n<p style=\"margin-left:17%;\">Returns the message as a single\nstring.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>print</b>( [$fh]\n)</p>\n\n<p style=\"margin-left:17%;\">Print the header, body or whole\nmessage to file descriptor <i>$fh</i>. <i>$fd</i> should be\na reference to a <small>GLOB.</small> If <i>$fh</i> is not\ngiven the output will be sent to <small>STDOUT.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$mail-&gt;print(\n\\*STDOUT ); # Print message to STDOUT</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>print_body</b>(\n[$fh] )</p>\n\n<p style=\"margin-left:17%;\">Print only the body to the $fh\n(default <small>STDOUT</small> ).</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>print_header</b>(\n[$fh] )</p>\n\n<p style=\"margin-left:17%;\">Print only the header to the\n$fh (default <small>STDOUT</small> ).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Processing\nthe header</b> <br>\nMost of these methods are simply wrappers around methods\nprovided by Mail::Header. <br>\n$obj-&gt;<b>add</b>( <small>PAIRS</small> )</p>\n\n<p style=\"margin-left:17%;\">The <small>PAIRS</small> are\nfield-name and field-content. For each <small>PAIR,</small>\n<b>Mail::Header::add()</b> is called. All fields are added\nafter existing fields. The last addition is returned.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>combine</b>( $tag,\n[$with] )</p>\n\n<p style=\"margin-left:17%;\">See\n<b>Mail::Header::combine()</b>.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>delete</b>( $tag,\n[$tags] )</p>\n\n<p style=\"margin-left:17%;\">Delete all fields with the name\n$tag. <b>Mail::Header::delete()</b> is doing the work.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>fold</b>( [$length]\n)</p>\n\n<p style=\"margin-left:17%;\">See\n<b>Mail::Header::fold()</b>.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>fold_length</b>(\n[$tag], [$length] )</p>\n\n<p style=\"margin-left:17%;\">See\n<b>Mail::Header::fold_length()</b>.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>get</b>( $tag,\n[$tags] )</p>\n\n<p style=\"margin-left:17%;\">In <small>LIST</small> context,\nall fields with the name $tag are returned. In\n<small>SCALAR</small> context, only the first field which\nmatches the earliest $tag is returned.\n<b>Mail::Header::get()</b> is called to collect the\ndata.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>header</b>(\\@lines)</p>\n\n<p style=\"margin-left:17%;\">See\n<b>Mail::Header::header()</b>.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>replace</b>(\n<small>PAIRS</small> )</p>\n\n<p style=\"margin-left:17%;\">The <small>PAIRS</small> are\nfield-name and field-content. For each <small>PAIR,</small>\n<b>Mail::Header::replace()</b> is called with index 0. If a\n$field is already in the header, it will be removed first.\nDo not specified the same field-name twice.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Processing\nthe body</b> <br>\n$obj-&gt;<b>remove_sig</b>( [$nlines] )</p>\n\n<p style=\"margin-left:17%;\">Attempts to remove a\nuser&rsquo;s signature from the body of a message. It does\nthis by looking for a line equal to '-- ' within the last\n$nlines of the message. If found then that line and all\nlines after it will be removed. If $nlines is not given a\ndefault value of 10 will be used. This would be of most use\nin auto-reply scripts.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>sign</b>(%options)</p>\n\n<p style=\"margin-left:17%;\">Add your signature to the body.\n<b>remove_sig()</b> will strip existing signatures\nfirst.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">-Option\n--Default <br>\nFile undef <br>\nSignature [] <br>\nFile =&gt; <small>FILEHANDLE</small></p>\n\n<p style=\"margin-left:20%;\">Take from the\n<small>FILEHANDLE</small> all lines starting from the first\n&quot;--&quot;.</p>\n\n<p style=\"margin-left:17%;\">Signature =&gt;\nSTRING|ARRAY-of-LINES</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>tidy_body</b>()</p>\n\n<p style=\"margin-left:17%;\">Removes all leading and\ntrailing lines from the body that only contain white\nspaces.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>High-level\nfunctionality</b> <br>\n$obj-&gt;<b>escape_from</b>()</p>\n\n<p style=\"margin-left:17%;\">It can cause problems with some\napplications if a message contains a line starting with\n`From ', in particular when attempting to split a folder.\nThis method inserts a leading &quot;`&quot;&rsquo;&gt; on\nany line that matches the regular expression\n&quot;/^&quot;*From/&gt;</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>nntppost</b>(\n[%options] )</p>\n\n<p style=\"margin-left:17%;\">Post an article via\n<small>NNTP.</small> Requires Net::NNTP to be installed.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">-Option--Default\n<br>\nDebug &lt;false&gt; <br>\nHost &lt;required&gt; <br>\nPort 119 <br>\nDebug =&gt; <small>BOOLEAN</small></p>\n\n<p style=\"margin-left:20%;\">Debug value to pass to\nNet::NNTP, see Net::NNTP</p>\n\n<p style=\"margin-left:17%;\">Host =&gt; HOSTNAME|Net::NNTP\nobject</p>\n\n<p style=\"margin-left:20%;\">Name of <small>NNTP</small>\nserver to connect to, or a Net::NNTP object to use.</p>\n\n<p style=\"margin-left:17%;\">Port =&gt;\n<small>INTEGER</small></p>\n\n<p style=\"margin-left:20%;\">Port number to connect to on\nremote host</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>reply</b>(%options)</p>\n\n<p style=\"margin-left:17%;\">Create a new object with header\ninitialised for a reply to the current object. And the body\nwill be a copy of the current message indented.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;.mailhdr&quot; file in your home directory (if exists)\nwill be read first, to provide defaults.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">-Option\n--Default <br>\nExclude [] <br>\nIndent '&gt;' <br>\nKeep [] <br>\nReplyAll false <br>\nExclude =&gt; ARRAY-of-FIELDS</p>\n\n<p style=\"margin-left:20%;\">Remove the listed\n<small>FIELDS</small> from the produced message.</p>\n\n<p style=\"margin-left:17%;\">Indent =&gt;\n<small>STRING</small></p>\n\n<p style=\"margin-left:20%;\">Use as indentation string. The\nstring may contain &quot;%%&quot; to get a single\n&quot;%&quot;, %f to get the first from name, %F is the\nfirst character of %f, %l is the last name, %L its first\ncharacter, %n the whole from string, and %I the first\ncharacter of each of the names in the from string.</p>\n\n<p style=\"margin-left:17%;\">Keep =&gt; ARRAY-of-FIELDS</p>\n\n<p style=\"margin-left:20%;\">Copy the listed\n<small>FIELDS</small> from the original message.</p>\n\n<p style=\"margin-left:17%;\">ReplyAll =&gt;\n<small>BOOLEAN</small></p>\n\n<p style=\"margin-left:20%;\">Automatically include all To\nand Cc addresses of the original mail, excluding those\nmentioned in the Bcc list.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>send</b>( [$type,\n[$args...]] )</p>\n\n<p style=\"margin-left:17%;\">Send a Mail::Internet message\nusing Mail::Mailer. $type and $args are passed on to\n<b>Mail::Mailer::new()</b>.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>smtpsend</b>(\n[%options] )</p>\n\n<p style=\"margin-left:17%;\">Send a Mail::Internet message\nusing direct <small>SMTP</small> to the given\n<small>ADDRESSES,</small> each can be either a string or a\nreference to a list of email addresses. If none of\n&quot;To&quot;, &lt;Cc&gt; or &quot;Bcc&quot; are given then\nthe addresses are extracted from the message being sent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The return\nvalue will be a list of email addresses that the message was\nsent to. If the message was not sent the list will be\nempty.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Requires\nNet::SMTP and Net::Domain to be installed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">-Option\n--Default <br>\nBcc undef <br>\nCc undef <br>\nDebug &lt;false&gt; <br>\nHello localhost.localdomain <br>\nHost $ENV{SMTPHOSTS} <br>\nMailFrom Mail::Util::mailaddress() <br>\nPort 25 <br>\nTo undef <br>\nBcc =&gt; <small>ADDRESSES</small> <br>\nCc =&gt; <small>ADDRESSES</small> <br>\nDebug =&gt; <small>BOOLEAN</small></p>\n\n<p style=\"margin-left:20%;\">Debug value to pass to\nNet::SMTP, see &lt;Net::SMTP&gt;</p>\n\n<p style=\"margin-left:17%;\">Hello =&gt;\n<small>STRING</small></p>\n\n<p style=\"margin-left:20%;\">Send a <small>HELO</small> (or\n<small>EHLO</small> ) command to the server with the given\nname.</p>\n\n<p style=\"margin-left:17%;\">Host =&gt;\n<small>HOSTNAME</small></p>\n\n<p style=\"margin-left:20%;\">Name of the <small>SMTP</small>\nserver to connect to, or a Net::SMTP object to use</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">If\n&quot;Host&quot; is not given then the <small>SMTP</small>\nhost is found by attempting connections first to hosts\nspecified in $ENV{SMTPHOSTS}, a colon separated list, then\n&quot;mailhost&quot; and &quot;localhost&quot;.</p>\n\n<p style=\"margin-left:17%;\">MailFrom =&gt;\n<small>ADDRESS</small></p>\n\n<p style=\"margin-left:20%;\">The e-mail address which is\nused as sender. By default, <b>Mail::Util::mailaddress()</b>\nprovides the address of the sender.</p>\n\n<p style=\"margin-left:17%;\">Port =&gt;\n<small>INTEGER</small></p>\n\n<p style=\"margin-left:20%;\">Port number to connect to on\nremote host</p>\n\n<p style=\"margin-left:17%;\">To =&gt;\n<small>ADDRESSES</small></p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>unescape_from</b>(())</p>\n\n<p style=\"margin-left:17%;\">Remove the escaping added by\n<b>escape_from()</b>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\npart of the MailTools distribution,\n<i>http://perl.overmeer.net/mailtools/</i>.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The MailTools\nbundle was developed by Graham Barr. Later, Mark Overmeer\ntook over maintenance without commitment to further\ndevelopment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Cap by\nGisle Aas &lt;aas@oslonett.no&gt;. Mail::Field::AddrList by\nPeter Orbaek &lt;poe@cit.dk&gt;. Mail::Mailer and Mail::Send\nby Tim Bunce &lt;Tim.Bunce@ig.co.uk&gt;. For other\ncontributors see ChangeLog.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyrights\n1995-2000 Graham Barr &lt;gbarr@pobox.com&gt; and 2001-2017\nMark Overmeer &lt;perl@overmeer.net&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself. See\n<i>http://www.perl.com/perl/misc/Artistic.html</i></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#LICENSE\">LICENSE</a>"],"level":3}