{"name":"net::dbus::binding::introspector","body":"\n\n<h1 align=\"center\">Net::DBus::Binding::Introspector</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Binding::Introspector\n- Handler for object introspection data</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"># Create an\nobject populating with info from an <br>\n# XML doc containing introspection data. <br>\nmy $ins = Net::DBus::Binding::Introspector-&gt;new(xml =&gt;\n$data); <br>\n# Create an object, defining introspection data <br>\n# programmatically <br>\nmy $ins =\nNet::DBus::Binding::Introspector-&gt;new(object_path =&gt;\n$object-&gt;get_object_path); <br>\n$ins-&gt;add_method(&quot;DoSomething&quot;,\n[&quot;string&quot;], [], &quot;org.example.MyObject&quot;);\n<br>\n$ins-&gt;add_method(&quot;TestSomething&quot;,\n[&quot;int32&quot;], [],\n&quot;org.example.MyObject&quot;);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class is\nresponsible for managing introspection data, and answering\nquestions about it. This is not intended for use by\napplication developers, whom should instead consult the\nhigher level <small>API</small> in Net::DBus::Exporter.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $ins =\nNet::DBus::Binding::Introspector-&gt;new(object_path =&gt;\n<br>\n$object_path, xml =&gt; $xml);</p>\n\n<p style=\"margin-left:17%;\">Creates a new introspection\ndata manager for the object registered at the path specified\nfor the &quot;object_path&quot; parameter. The optional\n&quot;xml&quot; parameter can be used to pre-load the\nmanager with introspection metadata from an\n<small>XML</small> document.</p>\n\n\n<p style=\"margin-left:11%;\">$ins-&gt;add_interface($name)</p>\n\n<p style=\"margin-left:17%;\">Register the object as\nproviding an interface with the name $name</p>\n\n<p style=\"margin-left:11%;\">my $bool =\n$ins-&gt;has_interface($name)</p>\n\n<p style=\"margin-left:17%;\">Return a true value if the\nobject is registered as providing an interface with the name\n$name; returns false otherwise.</p>\n\n<p style=\"margin-left:11%;\">my @interfaces =\n$ins-&gt;has_method($name, [$interface])</p>\n\n<p style=\"margin-left:17%;\">Return a list of all interfaces\nprovided by the object, which contain a method called $name.\nThis may be an empty list. The optional $interface parameter\ncan restrict the check to just that one interface.</p>\n\n<p style=\"margin-left:11%;\">my $boolean =\n$ins-&gt;is_method_allowed($name[, $interface])</p>\n\n<p style=\"margin-left:17%;\">Checks according to whether the\nremote caller is allowed to invoke the method $name on the\nobject associated with this introspector. If this object has\n&rsquo;strict exports&rsquo; enabled, then only explicitly\nexported methods will be allowed. The optional $interface\nparameter can restrict the check to just that one interface.\nReturns a non-zero value if the method should be\nallowed.</p>\n\n<p style=\"margin-left:11%;\">my @interfaces =\n$ins-&gt;has_signal($name)</p>\n\n<p style=\"margin-left:17%;\">Return a list of all interfaces\nprovided by the object, which contain a signal called $name.\nThis may be an empty list.</p>\n\n<p style=\"margin-left:11%;\">my @interfaces =\n$ins-&gt;has_property($name)</p>\n\n<p style=\"margin-left:17%;\">Return a list of all interfaces\nprovided by the object, which contain a property called\n$name. This may be an empty list. The optional $interface\nparameter can restrict the check to just that one\ninterface.</p>\n\n<p style=\"margin-left:11%;\">$ins-&gt;add_method($name,\n$params, $returns, $interface, $attributes, <br>\n$paramnames, $returnnames);</p>\n\n<p style=\"margin-left:17%;\">Register the object as\nproviding a method called $name accepting parameters whose\ntypes are declared by $params and returning values whose\ntype are declared by $returns. The method will be scoped to\nthe interface named by $interface. The $attributes parameter\nis a hash reference for annotating the method. The\n$paramnames and $returnames parameters are a list of\nargument and return value names.</p>\n\n<p style=\"margin-left:11%;\">$ins-&gt;add_signal($name,\n$params, $interface, $attributes);</p>\n\n<p style=\"margin-left:17%;\">Register the object as\nproviding a signal called $name with parameters whose types\nare declared by $params. The signal will be scoped to the\ninterface named by $interface. The $attributes parameter is\na hash reference for annotating the signal.</p>\n\n<p style=\"margin-left:11%;\">$ins-&gt;add_property($name,\n$type, $access, $interface, $attributes);</p>\n\n<p style=\"margin-left:17%;\">Register the object as\nproviding a property called $name with a type of $type. The\n$access parameter can be one of &quot;read&quot;,\n&quot;write&quot;, or &quot;readwrite&quot;. The property\nwill be scoped to the interface named by $interface. The\n$attributes parameter is a hash reference for annotating the\nsignal.</p>\n\n<p style=\"margin-left:11%;\">my $boolean =\n$ins-&gt;is_method_deprecated($name, $interface)</p>\n\n<p style=\"margin-left:17%;\">Returns a true value if the\nmethod called $name in the interface $interface is marked as\ndeprecated</p>\n\n<p style=\"margin-left:11%;\">my $boolean =\n$ins-&gt;is_signal_deprecated($name, $interface)</p>\n\n<p style=\"margin-left:17%;\">Returns a true value if the\nsignal called $name in the interface $interface is marked as\ndeprecated</p>\n\n<p style=\"margin-left:11%;\">my $boolean =\n$ins-&gt;is_property_deprecated($name, $interface)</p>\n\n<p style=\"margin-left:17%;\">Returns a true value if the\nproperty called $name in the interface $interface is marked\nas deprecated</p>\n\n<p style=\"margin-left:11%;\">my $boolean =\n$ins-&gt;does_method_reply($name, $interface)</p>\n\n<p style=\"margin-left:17%;\">Returns a true value if the\nmethod called $name in the interface $interface will\ngenerate a reply. Returns a false value otherwise.</p>\n\n<p style=\"margin-left:11%;\">my $boolean =\n$ins-&gt;method_has_strict_exceptions($name, $interface)</p>\n\n<p style=\"margin-left:17%;\">Returns true if the method\ncalled $name in the interface $interface has the\nstrict_exceptions attribute; that is any exceptions which\naren&rsquo;t Net::DBus::Error objects should not be caught\nand allowed to travel up the stack.</p>\n\n<p style=\"margin-left:11%;\">my @names =\n$ins-&gt;list_interfaces</p>\n\n<p style=\"margin-left:17%;\">Returns a list of all\ninterfaces registered as being provided by the object.</p>\n\n<p style=\"margin-left:11%;\">my @names =\n$ins-&gt;list_methods($interface)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of all methods\nregistered as being provided by the object, within the\ninterface $interface.</p>\n\n<p style=\"margin-left:11%;\">my @names =\n$ins-&gt;list_signals($interface)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of all signals\nregistered as being provided by the object, within the\ninterface $interface.</p>\n\n<p style=\"margin-left:11%;\">my @names =\n$ins-&gt;list_properties($interface)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of all\nproperties registered as being provided by the object,\nwithin the interface $interface.</p>\n\n<p style=\"margin-left:11%;\">my @paths =\n$self-&gt;list_children;</p>\n\n<p style=\"margin-left:17%;\">Returns a list of object paths\nrepresenting all the children of this node.</p>\n\n<p style=\"margin-left:11%;\">my $path =\n$ins-&gt;get_object_path</p>\n\n<p style=\"margin-left:17%;\">Returns the path of the object\nassociated with this introspection data</p>\n\n<p style=\"margin-left:11%;\">my @types =\n$ins-&gt;get_method_params($interface, $name)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of declared data\ntypes for parameters of the method called $name within the\ninterface $interface.</p>\n\n<p style=\"margin-left:11%;\">my @types =\n$ins-&gt;get_method_param_names($interface, $name)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of declared\nnames for parameters of the method called $name within the\ninterface $interface.</p>\n\n<p style=\"margin-left:11%;\">my @types =\n$ins-&gt;get_method_returns($interface, $name)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of declared data\ntypes for return values of the method called $name within\nthe interface $interface.</p>\n\n<p style=\"margin-left:11%;\">my @types =\n$ins-&gt;get_method_return_names($interface, $name)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of declared\nnames for return values of the method called $name within\nthe interface $interface.</p>\n\n<p style=\"margin-left:11%;\">my @types =\n$ins-&gt;get_signal_params($interface, $name)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of declared data\ntypes for values associated with the signal called $name\nwithin the interface $interface.</p>\n\n<p style=\"margin-left:11%;\">my @types =\n$ins-&gt;get_signal_param_names($interface, $name)</p>\n\n<p style=\"margin-left:17%;\">Returns a list of declared\nnames for values associated with the signal called $name\nwithin the interface $interface.</p>\n\n<p style=\"margin-left:11%;\">my $type =\n$ins-&gt;get_property_type($interface, $name)</p>\n\n<p style=\"margin-left:17%;\">Returns the declared data type\nfor property called $name within the interface\n$interface.</p>\n\n<p style=\"margin-left:11%;\">my $bool =\n$ins-&gt;is_property_readable($interface, $name);</p>\n\n<p style=\"margin-left:17%;\">Returns a true value if the\nproperty called $name within the interface $interface can\nhave its value read.</p>\n\n<p style=\"margin-left:11%;\">my $bool =\n$ins-&gt;is_property_writable($interface, $name);</p>\n\n<p style=\"margin-left:17%;\">Returns a true value if the\nproperty called $name within the interface $interface can\nhave its value written to.</p>\n\n<p style=\"margin-left:11%;\">my $xml =\n$ins-&gt;format([$obj])</p>\n\n<p style=\"margin-left:17%;\">Return a string containing an\n<small>XML</small> document representing the state of the\nintrospection data. The optional $obj parameter can be an\ninstance of Net::DBus::Object to include object specific\ninformation in the <small>XML</small> (eg child nodes).</p>\n\n<p style=\"margin-left:11%;\">my $xml_fragment =\n$ins-&gt;to_xml</p>\n\n<p style=\"margin-left:17%;\">Returns a string containing an\n<small>XML</small> fragment representing the state of the\nintrospection data. This is basically the same as the\n&quot;format&quot; method, but without the leading doctype\ndeclaration.</p>\n\n<p style=\"margin-left:11%;\">$type =\n$ins-&gt;to_xml_type($type)</p>\n\n<p style=\"margin-left:17%;\">Takes a text-based\nrepresentation of a data type and returns the compact\nrepresentation used in <small>XML</small> introspection\ndata.</p>\n\n<p style=\"margin-left:11%;\">$ins-&gt;encode($message,\n$type, $name, $direction, @args)</p>\n\n<p style=\"margin-left:17%;\">Append a set of values\n&lt;@args&gt; to a message object $message. The $type\nparameter is either &quot;signal&quot; or &quot;method&quot;\nand $direction is either &quot;params&quot; or\n&quot;returns&quot;. The introspection data will be queried\nto obtain the declared data types &amp; the argument\nmarshalling accordingly.</p>\n\n<p style=\"margin-left:11%;\">my @args =\n$ins-&gt;decode($message, $type, $name, $direction)</p>\n\n<p style=\"margin-left:17%;\">Unmarshalls the contents of a\nmessage object $message. The $type parameter is either\n&quot;signal&quot; or &quot;method&quot; and $direction is\neither &quot;params&quot; or &quot;returns&quot;. The\nintrospection data will be queried to obtain the declared\ndata types &amp; the arguments unmarshalled accordingly.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel P.\nBerrange</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2004-2011 Daniel P. Berrange</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Exporter,\nNet::DBus::Binding::Message</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}