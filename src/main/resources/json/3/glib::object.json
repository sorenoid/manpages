{"name":"glib::object","description":"Glib::Object -\nBindings for GObject\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nGObject is the\nbase object class provided by the gobject library. It\nprovides object properties with a notification system, and\nemittable signals.\n\nGlib::Object is\nthe corresponding Perl object class. Glib::Objects are\nrepresented by blessed hash references, with a magical\nconnection to the underlying C object.\n\n<b>get and\nset</b> <br>\nSome subclasses of &quot;Glib::Object&quot; override\n&quot;get&quot; and &quot;set&quot; with methods more useful\nto the subclass, for example &quot;Gtk2::TreeModel&quot;\ngetting and setting row contents.\n\nThis is usually\ndone when the subclass has no object properties. Any object\nproperties it or a further subclass does have can always be\naccessed with &quot;get_property&quot; and\n&quot;set_property&quot; (together with\n&quot;find_property&quot; and &quot;list_properties&quot; to\nenquire about them).\n\nGeneric code\nfor any object subclass can use the names\n&quot;get_property&quot; and &quot;set_property&quot; to be\nsure of getting the object properties as such.\n\n<h2>HIERARCHY\n<a name=\"HIERARCHY\"></a>\n</h2>\n\n\n\nGlib::Object\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<b>object =\n$class-&gt;new (...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>... (list) key/value pairs, property values to set on\ncreation </td></tr>\n</table>\n\nInstantiate a\nGlib::Object of type <i>$class</i>. Any key/value pairs in\n<i>...</i> are used to set properties on the new object; see\n&quot;set&quot;. This is designed to be inherited by\nPerl-derived subclasses (see Glib::Object::Subclass), but\nyou can actually use it to create any GObject-derived\ntype.\n\n<b>scalar =\nGlib::Object-&gt;new_from_pointer ($pointer,\n$noinc=FALSE)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$pointer (unsigned) a C pointer\nvalue as an integer.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$noinc (boolean) if true, do not increase the\nGObject&rsquo;s reference count when creating the Perl\nwrapper. this typically means that when the Perl wrapper\nwill own the object. in general you don&rsquo;t want to do\nthat, so the default is false.</td></tr>\n</table>\n\nCreate a Perl\nGlib::Object reference for the C object pointed to by\n<i>$pointer</i>. You should need this <i>very</i> rarely;\nit&rsquo;s intended to support foreign objects.\n\n\n<small>NOTE:</small>\nthe cast from arbitrary integer to GObject may result in a\ncore dump without warning, because the type-checking macro\n<b>G_OBJECT()</b> attempts to dereference the pointer to\nfind a GTypeClass structure, and there is no portable way to\nvalidate the pointer.\n\n<b>unsigned =\n$object-&gt;get_data ($key)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">$key (string)</td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\nFetch the\ninteger stored under the object data key <i>$key</i>. These\nvalues do not have types; type conversions must be done\nmanually. See &quot;set_data&quot;.\n\n\n<b>$object-&gt;set_data\n($key, $data)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">$key (string)</td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p>$data (scalar)</td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\nGObject\nprovides an arbitrary data mechanism that assigns unsigned\nintegers to key names. Functionality overlaps with the hash\nused as the Perl object instance, so we strongly recommend\nyou use hash keys for your data storage. The GObject data\nvalues cannot store type information, so they are not safe\nto use for anything but integer values, and you really\nshould use this method only if you know what you are\ndoing.\n\n<b>pspec or\nundef = $object_or_class_name-&gt;find_property\n($name)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">$name (string)</td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\nFind the\ndefinition of object property <i>$name</i> for\n<i>$object_or_class_name</i>. Return &quot;undef&quot; if no\nsuch property. For the returned data see\nGlib::Object::list_properties.\n\n\n<b>$object-&gt;freeze_notify</b>\n<br>\nStops emission of &quot;notify&quot; signals on\n<i>$object</i>. The signals are queued until\n&quot;thaw_notify&quot; is called on <i>$object</i>.\n\n\n<b>$object-&gt;get\n(...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"51%\">\n\n\n<p style=\"margin-top: 1em\">... (list) list of property\nnames </td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\nAlias for\n&quot;get_property&quot; (see &quot;get and set&quot;\nabove).\n\n\n<b>$object-&gt;set\n(key =&gt; $value, ...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">... (list) key/value pairs</td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\nAlias for\n&quot;set_property&quot; (see &quot;get and set&quot;\nabove).\n\n<b>list =\n$object_or_class_name-&gt;list_properties</b> <br>\nList all the object properties for\n<i>$object_or_class_name</i>; returns them as a list of\nhashes, containing these keys: <br>\nname\n\n<p style=\"margin-left:17%;\">The name of the property\n\n<p style=\"margin-left:11%;\">type\n\n<p style=\"margin-left:17%;\">The type of the property\n\n<p style=\"margin-left:11%;\">owner_type\n\n<p style=\"margin-left:17%;\">The type that owns the\nproperty\n\n<p style=\"margin-left:11%;\">descr\n\n<p style=\"margin-left:17%;\">The description of the\nproperty\n\n<p style=\"margin-left:11%;\">flags\n\n<p style=\"margin-left:17%;\">The Glib::ParamFlags of the\nproperty\n\n\n<b>$object-&gt;notify\n($property_name)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p>$property_name (string)</td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\nEmits a\n&quot;notify&quot; signal for the property <i>$property</i>\non <i>$object</i>.\n\n<b>gpointer =\n$object-&gt;get_pointer</b> <br>\nComplement of &quot;new_from_pointer&quot;.\n\n\n<b>$object-&gt;get_property\n(...)</b> <br>\nFetch and return the values for the object properties named\nin <i>...</i>.\n\n\n<b>$object-&gt;set_property\n(key =&gt; $value, ...)</b> <br>\nSet object properties.\n\n<b>unsigned =\n$object_or_class_name-&gt;signal_add_emission_hook\n($detailed_signal, $hook_func, $hook_data=undef)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string) of the\nform &quot;signal-name::detail&quot;</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$hook_func (subroutine)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$hook_data (scalar)</td></tr>\n</table>\n\nAdd an emission\nhook for a signal. The hook will be called for any emission\nof that signal, independent of the instance. This is\npossible only for signals which don&rsquo;t have the\n&quot;G_SIGNAL_NO_HOOKS&quot; flag set.\n\nThe\n<i>$hook_func</i> should be reference to a subroutine that\nlooks something like this:\n\nsub\nemission_hook { <br>\nmy ($invocation_hint, $parameters, $hook_data) = @_; <br>\n# $parameters is a reference to the @_ to be passed to <br>\n# signal handlers, including the instance as\n$parameters-&gt;[0]. <br>\nreturn $stay_connected; # boolean <br>\n}\n\nThis function\nreturns an id that can be used with\n&quot;remove_emission_hook&quot;.\n\nSince\n1.100.\n\n<b>list =\n$instance-&gt;signal_chain_from_overridden (...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">... (list)</td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\nChain up to an\noverridden class closure; it is only valid to call this from\na class closure override.\n\nTranslation:\nbecause of various details in how GObjects are implemented,\nthe way to override a virtual method on a GObject is to\nprovide a new &quot;class closure&quot;, or default handler\nfor a signal. This happens when a class is registered with\nthe type system (see Glib::Type::register and\nGlib::Object::Subclass). When called from inside such an\noverride, this method runs the overridden class closure.\nThis is equivalent to calling $self-&gt;SUPER::$method (@_)\nin normal Perl objects.\n\n<b>unsigned =\n$instance-&gt;signal_connect ($detailed_signal, $callback,\n$data=undef)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$callback (subroutine)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$data (scalar) arbitrary data to be passed to each\ninvocation of <i>callback</i></td></tr>\n</table>\n\nRegister\n<i>callback</i> to be called on each emission of\n<i>$detailed_signal</i>. Returns an identifier that may be\nused to remove this handler with\n&quot;$object-&gt;signal_handler_disconnect&quot;.\n\n<b>unsigned =\n$instance-&gt;signal_connect_after ($detailed_signal,\n$callback, $data=undef)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string)</td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$callback (scalar)</td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$data (scalar)</td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\nLike\n&quot;signal_connect&quot;, except that <i>$callback</i>\nwill be run after the default handler.\n\n<b>unsigned =\n$instance-&gt;signal_connect_swapped ($detailed_signal,\n$callback, $data=undef)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string)</td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$callback (scalar)</td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$data (scalar)</td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\nLike\n&quot;signal_connect&quot;, except that <i>$data</i> and\n<i>$object</i> will be swapped on invocation of\n<i>$callback</i>.\n\n<b>retval =\n$object-&gt;signal_emit ($name, ...)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p style=\"margin-top: 1em\">$name (string) the name of the\nsignal </td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>... (list) any arguments to pass to handlers.</td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\nEmit the signal\n<i>name</i> on <i>$object</i>. The number and types of\nadditional arguments in <i>...</i> are determined by the\nsignal; similarly, the presence and type of return value\ndepends on the signal being emitted.\n\n<b>$ihint =\n$instance-&gt;signal_get_invocation_hint</b> <br>\nGet a reference to a hash describing the innermost signal\ncurrently active on $instance. Returns undef if no signal\nemission is active. This invocation hint is the same object\npassed to signal emission hooks, and contains these keys:\n<br>\nsignal_name\n\n<p style=\"margin-left:17%;\">The name of the signal being\nemitted.\n\n<p style=\"margin-left:11%;\">detail\n\n<p style=\"margin-left:17%;\">The detail passed on for this\nemission. For example, a &quot;notify&quot; signal will have\nthe property name as the detail.\n\n<p style=\"margin-left:11%;\">run_type\n\n<p style=\"margin-left:17%;\">The current stage of signal\nemission, one of &quot;run-first&quot;,\n&quot;run-last&quot;, or &quot;run-cleanup&quot;.\n\n\n<b>$object-&gt;signal_handler_block\n($handler_id)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p>$handler_id (unsigned)</td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<b>$object-&gt;signal_handler_disconnect\n($handler_id)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">$handler_id (unsigned)</td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<b>boolean =\n$object-&gt;signal_handler_is_connected\n($handler_id)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">$handler_id (unsigned)</td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<b>$object-&gt;signal_handler_unblock\n($handler_id)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">$handler_id (unsigned)</td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<b>integer =\n$instance-&gt;signal_handlers_block_by_func ($func,\n$data=undef)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">$func (subroutine) function to\nblock </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p>$data (scalar) data to match, ignored if undef</td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<b>integer =\n$instance-&gt;signal_handlers_disconnect_by_func ($func,\n$data=undef)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">$func (subroutine) function to\nblock </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p>$data (scalar) data to match, ignored if undef</td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<b>integer =\n$instance-&gt;signal_handlers_unblock_by_func ($func,\n$data=undef)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">$func (subroutine) function to\nblock </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p>$data (scalar) data to match, ignored if undef</td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<b>scalar =\n$object_or_class_name-&gt;signal_query ($name)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">$name (string)</td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\nLook up\ninformation about the signal <i>$name</i> on the instance\ntype <i>$object_or_class_name</i>, which may be either a\nGlib::Object or a package name.\n\nSee also\n&quot;Glib::Type::list_signals&quot;, which returns the same\nkind of hash refs as this does.\n\nSince\n1.080.\n\n\n<b>$object_or_class_name-&gt;signal_remove_emission_hook\n($signal_name, $hook_id)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">$signal_name (string)</td>\n<td width=\"51%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p>$hook_id (unsigned)</td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\nRemove a hook\nthat was installed by &quot;add_emission_hook&quot;.\n\nSince\n1.100.\n\n\n<b>$instance-&gt;signal_stop_emission_by_name\n($detailed_signal)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string)</td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<b>$object-&gt;thaw_notify</b>\n<br>\nReverts the effect of a previous call to\n&quot;freeze_notify&quot;. This causes all queued\n&quot;notify&quot; signals on <i>$object</i> to be\nemitted.\n\n<b>boolean =\nGlib::Object-&gt;set_threadsafe ($threadsafe)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">$threadsafe (boolean)</td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\nEnables/disables\nthreadsafe gobject tracking. Returns whether or not tracking\nwill be successful and thus whether using perl ithreads will\nbe possible.\n\n\n<b>$object-&gt;tie_properties\n($all=FALSE)</b>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$all (boolean) if\n<small>FALSE</small> (or omitted) tie only properties for\nthis object&rsquo;s class, if <small>TRUE</small> tie the\nproperties of this and all parent classes.</td></tr>\n</table>\n\nA special\nmethod available to Glib::Object derivatives, it uses\nperl&rsquo;s tie facilities to associate hash keys with the\nproperties of the object. For example:\n\n\n$button-&gt;tie_properties;\n<br>\n# equivilent to $button-&gt;set (label =&gt; 'Hello World');\n<br>\n$button-&gt;{label} = 'Hello World'; <br>\nprint &quot;the label is:\n&quot;.$button-&gt;{label}.&quot;\\n&quot;;\n\nAttempts to\nwrite to read-only properties will croak, reading a\nwrite-only property will return\n&rsquo;[write-only]&rsquo;.\n\nCare must be\ntaken when using tie_properties with objects of types\ncreated with Glib::Object::Subclass as there may be clashes\nwith existing hash keys that could cause infinite loops. The\nsolution is to use custom property get/set functions to\nalter the storage locations of the properties.\n\n<h2>SIGNALS\n<a name=\"SIGNALS\"></a>\n</h2>\n\n\n<b>notify</b>\n(Glib::Object, Glib::ParamSpec)\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\nGlib\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\nCopyright (C)\n2003-2011 by the gtk2-perl team.\n\nThis software\nis licensed under the <small>LGPL.</small> See Glib for a\nfull notice.","body":"\n\n<h1 align=\"center\">Glib::Object</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object -\nBindings for GObject</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GObject is the\nbase object class provided by the gobject library. It\nprovides object properties with a notification system, and\nemittable signals.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object is\nthe corresponding Perl object class. Glib::Objects are\nrepresented by blessed hash references, with a magical\nconnection to the underlying C object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>get and\nset</b> <br>\nSome subclasses of &quot;Glib::Object&quot; override\n&quot;get&quot; and &quot;set&quot; with methods more useful\nto the subclass, for example &quot;Gtk2::TreeModel&quot;\ngetting and setting row contents.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is usually\ndone when the subclass has no object properties. Any object\nproperties it or a further subclass does have can always be\naccessed with &quot;get_property&quot; and\n&quot;set_property&quot; (together with\n&quot;find_property&quot; and &quot;list_properties&quot; to\nenquire about them).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generic code\nfor any object subclass can use the names\n&quot;get_property&quot; and &quot;set_property&quot; to be\nsure of getting the object properties as such.</p>\n\n<h2>HIERARCHY\n<a name=\"HIERARCHY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>object =\n$class-&gt;new (...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>... (list) key/value pairs, property values to set on\ncreation</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Instantiate a\nGlib::Object of type <i>$class</i>. Any key/value pairs in\n<i>...</i> are used to set properties on the new object; see\n&quot;set&quot;. This is designed to be inherited by\nPerl-derived subclasses (see Glib::Object::Subclass), but\nyou can actually use it to create any GObject-derived\ntype.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>scalar =\nGlib::Object-&gt;new_from_pointer ($pointer,\n$noinc=FALSE)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$pointer (unsigned) a C pointer\nvalue as an integer.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$noinc (boolean) if true, do not increase the\nGObject&rsquo;s reference count when creating the Perl\nwrapper. this typically means that when the Perl wrapper\nwill own the object. in general you don&rsquo;t want to do\nthat, so the default is false.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Create a Perl\nGlib::Object reference for the C object pointed to by\n<i>$pointer</i>. You should need this <i>very</i> rarely;\nit&rsquo;s intended to support foreign objects.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>NOTE:</small>\nthe cast from arbitrary integer to GObject may result in a\ncore dump without warning, because the type-checking macro\n<b>G_OBJECT()</b> attempts to dereference the pointer to\nfind a GTypeClass structure, and there is no portable way to\nvalidate the pointer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned =\n$object-&gt;get_data ($key)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">$key (string)</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Fetch the\ninteger stored under the object data key <i>$key</i>. These\nvalues do not have types; type conversions must be done\nmanually. See &quot;set_data&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;set_data\n($key, $data)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">$key (string)</p></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p>$data (scalar)</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">GObject\nprovides an arbitrary data mechanism that assigns unsigned\nintegers to key names. Functionality overlaps with the hash\nused as the Perl object instance, so we strongly recommend\nyou use hash keys for your data storage. The GObject data\nvalues cannot store type information, so they are not safe\nto use for anything but integer values, and you really\nshould use this method only if you know what you are\ndoing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pspec or\nundef = $object_or_class_name-&gt;find_property\n($name)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">$name (string)</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Find the\ndefinition of object property <i>$name</i> for\n<i>$object_or_class_name</i>. Return &quot;undef&quot; if no\nsuch property. For the returned data see\nGlib::Object::list_properties.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;freeze_notify</b>\n<br>\nStops emission of &quot;notify&quot; signals on\n<i>$object</i>. The signals are queued until\n&quot;thaw_notify&quot; is called on <i>$object</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;get\n(...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"51%\">\n\n\n<p style=\"margin-top: 1em\">... (list) list of property\nnames</p> </td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alias for\n&quot;get_property&quot; (see &quot;get and set&quot;\nabove).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;set\n(key =&gt; $value, ...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">... (list) key/value pairs</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alias for\n&quot;set_property&quot; (see &quot;get and set&quot;\nabove).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>list =\n$object_or_class_name-&gt;list_properties</b> <br>\nList all the object properties for\n<i>$object_or_class_name</i>; returns them as a list of\nhashes, containing these keys: <br>\nname</p>\n\n<p style=\"margin-left:17%;\">The name of the property</p>\n\n<p style=\"margin-left:11%;\">type</p>\n\n<p style=\"margin-left:17%;\">The type of the property</p>\n\n<p style=\"margin-left:11%;\">owner_type</p>\n\n<p style=\"margin-left:17%;\">The type that owns the\nproperty</p>\n\n<p style=\"margin-left:11%;\">descr</p>\n\n<p style=\"margin-left:17%;\">The description of the\nproperty</p>\n\n<p style=\"margin-left:11%;\">flags</p>\n\n<p style=\"margin-left:17%;\">The Glib::ParamFlags of the\nproperty</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;notify\n($property_name)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p>$property_name (string)</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Emits a\n&quot;notify&quot; signal for the property <i>$property</i>\non <i>$object</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>gpointer =\n$object-&gt;get_pointer</b> <br>\nComplement of &quot;new_from_pointer&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;get_property\n(...)</b> <br>\nFetch and return the values for the object properties named\nin <i>...</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;set_property\n(key =&gt; $value, ...)</b> <br>\nSet object properties.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned =\n$object_or_class_name-&gt;signal_add_emission_hook\n($detailed_signal, $hook_func, $hook_data=undef)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string) of the\nform &quot;signal-name::detail&quot;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$hook_func (subroutine)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$hook_data (scalar)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Add an emission\nhook for a signal. The hook will be called for any emission\nof that signal, independent of the instance. This is\npossible only for signals which don&rsquo;t have the\n&quot;G_SIGNAL_NO_HOOKS&quot; flag set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>$hook_func</i> should be reference to a subroutine that\nlooks something like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub\nemission_hook { <br>\nmy ($invocation_hint, $parameters, $hook_data) = @_; <br>\n# $parameters is a reference to the @_ to be passed to <br>\n# signal handlers, including the instance as\n$parameters-&gt;[0]. <br>\nreturn $stay_connected; # boolean <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nreturns an id that can be used with\n&quot;remove_emission_hook&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since\n1.100.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>list =\n$instance-&gt;signal_chain_from_overridden (...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">... (list)</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Chain up to an\noverridden class closure; it is only valid to call this from\na class closure override.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Translation:\nbecause of various details in how GObjects are implemented,\nthe way to override a virtual method on a GObject is to\nprovide a new &quot;class closure&quot;, or default handler\nfor a signal. This happens when a class is registered with\nthe type system (see Glib::Type::register and\nGlib::Object::Subclass). When called from inside such an\noverride, this method runs the overridden class closure.\nThis is equivalent to calling $self-&gt;SUPER::$method (@_)\nin normal Perl objects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned =\n$instance-&gt;signal_connect ($detailed_signal, $callback,\n$data=undef)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$callback (subroutine)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$data (scalar) arbitrary data to be passed to each\ninvocation of <i>callback</i></p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Register\n<i>callback</i> to be called on each emission of\n<i>$detailed_signal</i>. Returns an identifier that may be\nused to remove this handler with\n&quot;$object-&gt;signal_handler_disconnect&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned =\n$instance-&gt;signal_connect_after ($detailed_signal,\n$callback, $data=undef)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string)</p></td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$callback (scalar)</p></td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$data (scalar)</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Like\n&quot;signal_connect&quot;, except that <i>$callback</i>\nwill be run after the default handler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned =\n$instance-&gt;signal_connect_swapped ($detailed_signal,\n$callback, $data=undef)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string)</p></td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$callback (scalar)</p></td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$data (scalar)</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Like\n&quot;signal_connect&quot;, except that <i>$data</i> and\n<i>$object</i> will be swapped on invocation of\n<i>$callback</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>retval =\n$object-&gt;signal_emit ($name, ...)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p style=\"margin-top: 1em\">$name (string) the name of the\nsignal</p> </td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>... (list) any arguments to pass to handlers.</p></td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Emit the signal\n<i>name</i> on <i>$object</i>. The number and types of\nadditional arguments in <i>...</i> are determined by the\nsignal; similarly, the presence and type of return value\ndepends on the signal being emitted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$ihint =\n$instance-&gt;signal_get_invocation_hint</b> <br>\nGet a reference to a hash describing the innermost signal\ncurrently active on $instance. Returns undef if no signal\nemission is active. This invocation hint is the same object\npassed to signal emission hooks, and contains these keys:\n<br>\nsignal_name</p>\n\n<p style=\"margin-left:17%;\">The name of the signal being\nemitted.</p>\n\n<p style=\"margin-left:11%;\">detail</p>\n\n<p style=\"margin-left:17%;\">The detail passed on for this\nemission. For example, a &quot;notify&quot; signal will have\nthe property name as the detail.</p>\n\n<p style=\"margin-left:11%;\">run_type</p>\n\n<p style=\"margin-left:17%;\">The current stage of signal\nemission, one of &quot;run-first&quot;,\n&quot;run-last&quot;, or &quot;run-cleanup&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;signal_handler_block\n($handler_id)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p>$handler_id (unsigned)</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;signal_handler_disconnect\n($handler_id)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">$handler_id (unsigned)</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>boolean =\n$object-&gt;signal_handler_is_connected\n($handler_id)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">$handler_id (unsigned)</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;signal_handler_unblock\n($handler_id)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">$handler_id (unsigned)</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\n$instance-&gt;signal_handlers_block_by_func ($func,\n$data=undef)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">$func (subroutine) function to\nblock</p> </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p>$data (scalar) data to match, ignored if undef</p></td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\n$instance-&gt;signal_handlers_disconnect_by_func ($func,\n$data=undef)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">$func (subroutine) function to\nblock</p> </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p>$data (scalar) data to match, ignored if undef</p></td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\n$instance-&gt;signal_handlers_unblock_by_func ($func,\n$data=undef)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p style=\"margin-top: 1em\">$func (subroutine) function to\nblock</p> </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"71%\">\n\n\n<p>$data (scalar) data to match, ignored if undef</p></td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>scalar =\n$object_or_class_name-&gt;signal_query ($name)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">$name (string)</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Look up\ninformation about the signal <i>$name</i> on the instance\ntype <i>$object_or_class_name</i>, which may be either a\nGlib::Object or a package name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See also\n&quot;Glib::Type::list_signals&quot;, which returns the same\nkind of hash refs as this does.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since\n1.080.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object_or_class_name-&gt;signal_remove_emission_hook\n($signal_name, $hook_id)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">$signal_name (string)</p></td>\n<td width=\"51%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p>$hook_id (unsigned)</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Remove a hook\nthat was installed by &quot;add_emission_hook&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since\n1.100.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$instance-&gt;signal_stop_emission_by_name\n($detailed_signal)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">$detailed_signal (string)</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;thaw_notify</b>\n<br>\nReverts the effect of a previous call to\n&quot;freeze_notify&quot;. This causes all queued\n&quot;notify&quot; signals on <i>$object</i> to be\nemitted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>boolean =\nGlib::Object-&gt;set_threadsafe ($threadsafe)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">$threadsafe (boolean)</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Enables/disables\nthreadsafe gobject tracking. Returns whether or not tracking\nwill be successful and thus whether using perl ithreads will\nbe possible.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$object-&gt;tie_properties\n($all=FALSE)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$all (boolean) if\n<small>FALSE</small> (or omitted) tie only properties for\nthis object&rsquo;s class, if <small>TRUE</small> tie the\nproperties of this and all parent classes.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A special\nmethod available to Glib::Object derivatives, it uses\nperl&rsquo;s tie facilities to associate hash keys with the\nproperties of the object. For example:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$button-&gt;tie_properties;\n<br>\n# equivilent to $button-&gt;set (label =&gt; 'Hello World');\n<br>\n$button-&gt;{label} = 'Hello World'; <br>\nprint &quot;the label is:\n&quot;.$button-&gt;{label}.&quot;\\n&quot;;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Attempts to\nwrite to read-only properties will croak, reading a\nwrite-only property will return\n&rsquo;[write-only]&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Care must be\ntaken when using tie_properties with objects of types\ncreated with Glib::Object::Subclass as there may be clashes\nwith existing hash keys that could cause infinite loops. The\nsolution is to use custom property get/set functions to\nalter the storage locations of the properties.</p>\n\n<h2>SIGNALS\n<a name=\"SIGNALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>notify</b>\n(Glib::Object, Glib::ParamSpec)</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2003-2011 by the gtk2-perl team.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis licensed under the <small>LGPL.</small> See Glib for a\nfull notice.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#HIERARCHY\">HIERARCHY</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SIGNALS\">SIGNALS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}