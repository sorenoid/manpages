{"name":"inet","description":"inet_aton, inet_addr, inet_network, inet_ntoa, inet_makeaddr, inet_lnaof, inet_netof - Internet address manipulation routines","body":"\n\n<h1 align=\"center\">INET</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">inet_aton,\ninet_addr, inet_network, inet_ntoa, inet_makeaddr,\ninet_lnaof, inet_netof - Internet address manipulation\nroutines</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/socket.h&gt; <br>\n#include &lt;netinet/in.h&gt; <br>\n#include &lt;arpa/inet.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ninet_aton(const char *</b><i>cp</i><b>, struct in_addr\n*</b><i>inp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>in_addr_t\ninet_addr(const char *</b><i>cp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>in_addr_t\ninet_network(const char *</b><i>cp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*inet_ntoa(struct in_addr</b> <i>in</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct\nin_addr inet_makeaddr(in_addr_t</b> <i>net</i><b>,\nin_addr_t</b> <i>host</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>in_addr_t\ninet_lnaof(struct in_addr</b> <i>in</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>in_addr_t\ninet_netof(struct in_addr</b> <i>in</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_aton</b>(),\n<b>inet_ntoa</b>(): <br>\nSince glibc 2.19: <br>\n_DEFAULT_SOURCE <br>\nIn glibc up to and including 2.19: <br>\n_BSD_SOURCE || _BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_aton</b>()\nconverts the Internet host address <i>cp</i> from the IPv4\nnumbers-and-dots notation into binary form (in network byte\norder) and stores it in the structure that <i>inp</i> points\nto. <b>inet_aton</b>() returns nonzero if the address is\nvalid, zero if not. The address supplied in <i>cp</i> can\nhave one of the following forms:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p><i>a.b.c.d</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"74%\">\n\n\n<p>Each of the four numeric parts specifies a byte of the\naddress; the bytes are assigned in left-to-right order to\nproduce the binary address.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p><i>a.b.c</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"74%\">\n\n\n<p>Parts <i>a</i> and <i>b</i> specify the first two bytes\nof the binary address. Part <i>c</i> is interpreted as a\n16-bit value that defines the rightmost two bytes of the\nbinary address. This notation is suitable for specifying\n(outmoded) Class B network addresses.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p><i>a.b</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"74%\">\n\n\n<p>Part <i>a</i> specifies the first byte of the binary\naddress. Part <i>b</i> is interpreted as a 24-bit value that\ndefines the rightmost three bytes of the binary address.\nThis notation is suitable for specifying (outmoded) Class A\nnetwork addresses.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p><i>a</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"74%\">\n\n\n<p>The value <i>a</i> is interpreted as a 32-bit value that\nis stored directly into the binary address without any byte\nrearrangement.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In all of the\nabove forms, components of the dotted address can be\nspecified in decimal, octal (with a leading <i>0</i>), or\nhexadecimal, with a leading <i>0X</i>). Addresses in any of\nthese forms are collectively termed <i>IPV4 numbers-and-dots\nnotation</i>. The form that uses exactly four decimal\nnumbers is referred to as <i>IPv4 dotted-decimal\nnotation</i> (or sometimes: <i>IPv4 dotted-quad\nnotation</i>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_aton</b>()\nreturns 1 if the supplied string was successfully\ninterpreted, or 0 if the string is invalid (<b>errno</b> is\n<i>not</i> set on error).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>inet_addr</b>() function converts the Internet host\naddress <i>cp</i> from IPv4 numbers-and-dots notation into\nbinary data in network byte order. If the input is invalid,\n<b>INADDR_NONE</b> (usually -1) is returned. Use of this\nfunction is problematic because -1 is a valid address\n(255.255.255.255). Avoid its use in favor of\n<b>inet_aton</b>(), <a href=\"https://man.page/3/inet_pton\">inet_pton(3)</a>, or\n<a href=\"https://man.page/3/getaddrinfo\">getaddrinfo(3)</a>, which provide a cleaner way to\nindicate error return.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>inet_network</b>() function converts <i>cp</i>, a string\nin IPv4 numbers-and-dots notation, into a number in host\nbyte order suitable for use as an Internet network address.\nOn success, the converted address is returned. If the input\nis invalid, -1 is returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>inet_ntoa</b>() function converts the Internet host\naddress <i>in</i>, given in network byte order, to a string\nin IPv4 dotted-decimal notation. The string is returned in a\nstatically allocated buffer, which subsequent calls will\noverwrite.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>inet_lnaof</b>() function returns the local network\naddress part of the Internet address <i>in</i>. The returned\nvalue is in host byte order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>inet_netof</b>() function returns the network number part\nof the Internet address <i>in</i>. The returned value is in\nhost byte order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>inet_makeaddr</b>() function is the converse of\n<b>inet_netof</b>() and <b>inet_lnaof</b>(). It returns an\nInternet host address in network byte order, created by\ncombining the network number <i>net</i> with the local\naddress <i>host</i>, both in host byte order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The structure\n<i>in_addr</i> as used in <b>inet_ntoa</b>(),\n<b>inet_makeaddr</b>(), <b>inet_lnaof</b>(), and\n<b>inet_netof</b>() is defined in\n<i>&lt;netinet/in.h&gt;</i> as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef\nuint32_t in_addr_t;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct in_addr\n{ <br>\nin_addr_t s_addr; <br>\n};</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3326851.png\" alt=\"Image grohtml-3326851.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_addr</b>(),\n<b>inet_ntoa</b>(): POSIX.1-2001, POSIX.1-2008, 4.3BSD.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_aton</b>()\nis not specified in POSIX.1, but is available on most\nsystems.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On x86\narchitectures, the host byte order is Least Significant Byte\nfirst (little endian), whereas the network byte order, as\nused on the Internet, is Most Significant Byte first (big\nendian).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>inet_lnaof</b>(),\n<b>inet_netof</b>(), and <b>inet_makeaddr</b>() are legacy\nfunctions that assume they are dealing with <i>classful\nnetwork addresses</i>. Classful networking divides IPv4\nnetwork addresses into host and network components at byte\nboundaries, as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">Class A</p></td>\n<td width=\"4%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\">This address type is indicated\nby the value 0 in the most significant bit of the (network\nbyte ordered) address. The network address is contained in\nthe most significant byte, and the host address occupies the\nremaining three bytes.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p>Class B</p></td>\n<td width=\"4%\"></td>\n<td width=\"74%\">\n\n\n<p>This address type is indicated by the binary value 10 in\nthe most significant two bits of the address. The network\naddress is contained in the two most significant bytes, and\nthe host address occupies the remaining two bytes.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"11%\">\n\n\n<p>Class C</p></td>\n<td width=\"4%\"></td>\n<td width=\"74%\">\n\n\n<p>This address type is indicated by the binary value 110\nin the most significant three bits of the address. The\nnetwork address is contained in the three most significant\nbytes, and the host address occupies the remaining byte.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Classful\nnetwork addresses are now obsolete, having been superseded\nby Classless Inter-Domain Routing (CIDR), which divides\naddresses into network and host components at arbitrary bit\n(rather than byte) boundaries.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An example of\nthe use of <b>inet_aton</b>() and <b>inet_ntoa</b>() is\nshown below. Here are some example runs:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n226.000.000.037</b> # Last byte is in octal <br>\n226.0.0.31 <br>\n$ <b>./a.out 0x7f.1</b> # First byte is in hex <br>\n127.0.0.1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#define _BSD_SOURCE <br>\n#include &lt;arpa/inet.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nstruct in_addr addr;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 2)\n{ <br>\nfprintf(stderr, &quot;%s &lt;dotted-address&gt;\\n&quot;,\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(inet_aton(argv[1], &amp;addr) == 0) { <br>\nfprintf(stderr, &quot;Invalid address\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;%s\\n&quot;,\ninet_ntoa(addr)); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/byteorder\">byteorder(3)</a>,\n<a href=\"https://man.page/3/getaddrinfo\">getaddrinfo(3)</a>, <a href=\"https://man.page/3/gethostbyname\">gethostbyname(3)</a>,\n<a href=\"https://man.page/3/getnameinfo\">getnameinfo(3)</a>, <a href=\"https://man.page/3/getnetent\">getnetent(3)</a>,\n<a href=\"https://man.page/3/inet_net_pton\">inet_net_pton(3)</a>, <a href=\"https://man.page/3/inet_ntop\">inet_ntop(3)</a>,\n<a href=\"https://man.page/3/inet_pton\">inet_pton(3)</a>, <a href=\"https://man.page/5/hosts\">hosts(5)</a>, <a href=\"https://man.page/5/networks\">networks(5)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}