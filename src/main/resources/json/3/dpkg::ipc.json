{"name":"dpkg::ipc","description":"Dpkg::IPC -\nhelper functions for IPC\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nDpkg::IPC\noffers helper functions to allow you to execute other\nprograms in an easy, yet flexible way, while hiding all the\ngory details of <small>IPC</small> (Inter-Process\nCommunication) from you.\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n$pid =\nspawn(%opts)\n\n<p style=\"margin-left:17%;\">Creates a child process and\nexecutes another program in it. The arguments are\ninterpreted as a hash of options, specifying how to handle\nthe in and output of the program to execute. Returns the pid\nof the child process (unless the wait_child option was\ngiven).\n\n<p style=\"margin-left:17%; margin-top: 1em\">Any error will\ncause the function to exit with one of the\nDpkg::ErrorHandling functions.\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options: <br>\nexec\n\n<p style=\"margin-left:23%;\">Can be either a scalar, i.e.\nthe name of the program to be executed, or an array\nreference, i.e. the name of the program plus additional\narguments. Note that the program will never be executed via\nthe shell, so you can&rsquo;t specify additional arguments\nin the scalar string and you can&rsquo;t use any shell\nfacilities like globbing.\n\n<p style=\"margin-left:23%; margin-top: 1em\">Mandatory\nOption.\n\n<p style=\"margin-left:17%;\">from_file, to_file,\nerror_to_file\n\n<p style=\"margin-left:23%;\">Filename as scalar. Standard\ninput/output/error of the child process will be redirected\nto the file specified.\n\n<p style=\"margin-left:17%;\">from_handle, to_handle,\nerror_to_handle\n\n<p style=\"margin-left:23%;\">Filehandle. Standard\ninput/output/error of the child process will be dup&rsquo;ed\nfrom the handle.\n\n<p style=\"margin-left:17%;\">from_pipe, to_pipe,\nerror_to_pipe\n\n<p style=\"margin-left:23%;\">Scalar reference or object\nbased on IO::Handle. A pipe will be opened for each of the\ntwo options and either the reading (&quot;to_pipe&quot; and\n&quot;error_to_pipe&quot;) or the writing end\n(&quot;from_pipe&quot;) will be returned in the referenced\nscalar. Standard input/output/error of the child process\nwill be dup&rsquo;ed to the other ends of the pipes.\n\n<p style=\"margin-left:17%;\">from_string, to_string,\nerror_to_string\n\n<p style=\"margin-left:23%;\">Scalar reference. Standard\ninput/output/error of the child process will be redirected\nto the string given as reference. Note that it\nwouldn&rsquo;t be strictly necessary to use a scalar\nreference for &quot;from_string&quot;, as the string is not\nmodified in any way. This was chosen only for reasons of\nsymmetry with &quot;to_string&quot; and\n&quot;error_to_string&quot;. &quot;to_string&quot; and\n&quot;error_to_string&quot; imply the &quot;wait_child&quot;\noption.\n\n<p style=\"margin-left:17%;\">wait_child\n\n<p style=\"margin-left:23%;\">Scalar. If containing a true\nvalue, <b>wait_child()</b> will be called before returning.\nThe return value of <b>spawn()</b> will be a true value, not\nthe pid.\n\n<p style=\"margin-left:17%;\">nocheck\n\n<p style=\"margin-left:23%;\">Scalar. Option of the\n<b>wait_child()</b> call.\n\n<p style=\"margin-left:17%;\">timeout\n\n<p style=\"margin-left:23%;\">Scalar. Option of the\n<b>wait_child()</b> call.\n\n<p style=\"margin-left:17%;\">chdir\n\n<p style=\"margin-left:23%;\">Scalar. The child process will\nchdir in the indicated directory before calling exec.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>env</td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Hash reference. The child process will populate %ENV\nwith the items of the hash before calling exec. This allows\nexporting environment variables.</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">delete_env\n\n<p style=\"margin-left:23%;\">Array reference. The child\nprocess will remove all environment variables listed in the\narray before calling exec.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>sig</td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Hash reference. The child process will populate %SIG\nwith the items of the hash before calling exec. This allows\nsetting signal dispositions.</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">delete_sig\n\n<p style=\"margin-left:23%;\">Array reference. The child\nprocess will reset all signals listed in the array to their\ndefault dispositions before calling exec.\n\n<p style=\"margin-left:11%;\">wait_child($pid, %opts)\n\n<p style=\"margin-left:17%;\">Takes as first argument the pid\nof the process to wait for. Remaining arguments are taken as\na hash of options. Returns nothing. Fails if the child has\nbeen ended by a signal or if it exited non-zero.\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options: <br>\ncmdline\n\n<p style=\"margin-left:23%;\">String to identify the child\nprocess in error messages. Defaults to &quot;child\nprocess&quot;.\n\n<p style=\"margin-left:17%;\">nocheck\n\n<p style=\"margin-left:23%;\">If true do not check the return\nstatus of the child (and thus do not fail it has been killed\nor if it exited with a non-zero return code).\n\n<p style=\"margin-left:17%;\">timeout\n\n<p style=\"margin-left:23%;\">Set a maximum time to wait for\nthe process, after that kill the process and fail with an\nerror message.\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<b>Version 1.02\n(dpkg 1.18.0)</b> <br>\nChange options: <b>wait_child()</b> now kills the process\nwhen reaching the &rsquo;timeout&rsquo;.\n\n<b>Version 1.01\n(dpkg 1.17.11)</b> <br>\nNew options: <b>spawn()</b> now accepts &rsquo;sig&rsquo;\nand &rsquo;delete_sig&rsquo;.\n\n<b>Version 1.00\n(dpkg 1.15.6)</b> <br>\nMark the module as public.\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\nDpkg,\nDpkg::ErrorHandling","body":"\n\n<h1 align=\"center\">Dpkg::IPC</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::IPC -\nhelper functions for IPC</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::IPC\noffers helper functions to allow you to execute other\nprograms in an easy, yet flexible way, while hiding all the\ngory details of <small>IPC</small> (Inter-Process\nCommunication) from you.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$pid =\nspawn(%opts)</p>\n\n<p style=\"margin-left:17%;\">Creates a child process and\nexecutes another program in it. The arguments are\ninterpreted as a hash of options, specifying how to handle\nthe in and output of the program to execute. Returns the pid\nof the child process (unless the wait_child option was\ngiven).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Any error will\ncause the function to exit with one of the\nDpkg::ErrorHandling functions.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options: <br>\nexec</p>\n\n<p style=\"margin-left:23%;\">Can be either a scalar, i.e.\nthe name of the program to be executed, or an array\nreference, i.e. the name of the program plus additional\narguments. Note that the program will never be executed via\nthe shell, so you can&rsquo;t specify additional arguments\nin the scalar string and you can&rsquo;t use any shell\nfacilities like globbing.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Mandatory\nOption.</p>\n\n<p style=\"margin-left:17%;\">from_file, to_file,\nerror_to_file</p>\n\n<p style=\"margin-left:23%;\">Filename as scalar. Standard\ninput/output/error of the child process will be redirected\nto the file specified.</p>\n\n<p style=\"margin-left:17%;\">from_handle, to_handle,\nerror_to_handle</p>\n\n<p style=\"margin-left:23%;\">Filehandle. Standard\ninput/output/error of the child process will be dup&rsquo;ed\nfrom the handle.</p>\n\n<p style=\"margin-left:17%;\">from_pipe, to_pipe,\nerror_to_pipe</p>\n\n<p style=\"margin-left:23%;\">Scalar reference or object\nbased on IO::Handle. A pipe will be opened for each of the\ntwo options and either the reading (&quot;to_pipe&quot; and\n&quot;error_to_pipe&quot;) or the writing end\n(&quot;from_pipe&quot;) will be returned in the referenced\nscalar. Standard input/output/error of the child process\nwill be dup&rsquo;ed to the other ends of the pipes.</p>\n\n<p style=\"margin-left:17%;\">from_string, to_string,\nerror_to_string</p>\n\n<p style=\"margin-left:23%;\">Scalar reference. Standard\ninput/output/error of the child process will be redirected\nto the string given as reference. Note that it\nwouldn&rsquo;t be strictly necessary to use a scalar\nreference for &quot;from_string&quot;, as the string is not\nmodified in any way. This was chosen only for reasons of\nsymmetry with &quot;to_string&quot; and\n&quot;error_to_string&quot;. &quot;to_string&quot; and\n&quot;error_to_string&quot; imply the &quot;wait_child&quot;\noption.</p>\n\n<p style=\"margin-left:17%;\">wait_child</p>\n\n<p style=\"margin-left:23%;\">Scalar. If containing a true\nvalue, <b>wait_child()</b> will be called before returning.\nThe return value of <b>spawn()</b> will be a true value, not\nthe pid.</p>\n\n<p style=\"margin-left:17%;\">nocheck</p>\n\n<p style=\"margin-left:23%;\">Scalar. Option of the\n<b>wait_child()</b> call.</p>\n\n<p style=\"margin-left:17%;\">timeout</p>\n\n<p style=\"margin-left:23%;\">Scalar. Option of the\n<b>wait_child()</b> call.</p>\n\n<p style=\"margin-left:17%;\">chdir</p>\n\n<p style=\"margin-left:23%;\">Scalar. The child process will\nchdir in the indicated directory before calling exec.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>env</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Hash reference. The child process will populate %ENV\nwith the items of the hash before calling exec. This allows\nexporting environment variables.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">delete_env</p>\n\n<p style=\"margin-left:23%;\">Array reference. The child\nprocess will remove all environment variables listed in the\narray before calling exec.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>sig</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>Hash reference. The child process will populate %SIG\nwith the items of the hash before calling exec. This allows\nsetting signal dispositions.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">delete_sig</p>\n\n<p style=\"margin-left:23%;\">Array reference. The child\nprocess will reset all signals listed in the array to their\ndefault dispositions before calling exec.</p>\n\n<p style=\"margin-left:11%;\">wait_child($pid, %opts)</p>\n\n<p style=\"margin-left:17%;\">Takes as first argument the pid\nof the process to wait for. Remaining arguments are taken as\na hash of options. Returns nothing. Fails if the child has\nbeen ended by a signal or if it exited non-zero.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options: <br>\ncmdline</p>\n\n<p style=\"margin-left:23%;\">String to identify the child\nprocess in error messages. Defaults to &quot;child\nprocess&quot;.</p>\n\n<p style=\"margin-left:17%;\">nocheck</p>\n\n<p style=\"margin-left:23%;\">If true do not check the return\nstatus of the child (and thus do not fail it has been killed\nor if it exited with a non-zero return code).</p>\n\n<p style=\"margin-left:17%;\">timeout</p>\n\n<p style=\"margin-left:23%;\">Set a maximum time to wait for\nthe process, after that kill the process and fail with an\nerror message.</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.02\n(dpkg 1.18.0)</b> <br>\nChange options: <b>wait_child()</b> now kills the process\nwhen reaching the &rsquo;timeout&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.01\n(dpkg 1.17.11)</b> <br>\nNew options: <b>spawn()</b> now accepts &rsquo;sig&rsquo;\nand &rsquo;delete_sig&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.15.6)</b> <br>\nMark the module as public.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg,\nDpkg::ErrorHandling</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#CHANGES\">CHANGES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}