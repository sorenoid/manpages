{"name":"http::request","body":"\n\n<h1 align=\"center\">HTTP::Request</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Request -\nHTTP style request message</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.36</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">require\nHTTP::Request; <br>\n$request = HTTP::Request-&gt;new(GET =&gt;\n'http://www.example.com/');</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and usually\nused like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$ua =\nLWP::UserAgent-&gt;new; <br>\n$response = $ua-&gt;request($request);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;HTTP::Request&quot;\nis a class encapsulating <small>HTTP</small> style requests,\nconsisting of a request line, some headers, and a content\nbody. Note that the <small>LWP</small> library uses\n<small>HTTP</small> style requests even for non-HTTP\nprotocols. Instances of this class are usually passed to the\n<b>request()</b> method of an &quot;LWP::UserAgent&quot;\nobject.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;HTTP::Request&quot;\nis a subclass of &quot;HTTP::Message&quot; and therefore\ninherits its methods. The following additional methods are\navailable: <br>\n$r = HTTP::Request-&gt;new( $method, $uri ) <br>\n$r = HTTP::Request-&gt;new( $method, $uri, $header ) <br>\n$r = HTTP::Request-&gt;new( $method, $uri, $header, $content\n)</p>\n\n<p style=\"margin-left:17%;\">Constructs a new\n&quot;HTTP::Request&quot; object describing a request on the\nobject $uri using method $method. The $method argument must\nbe a string. The $uri argument can be either a string, or a\nreference to a &quot;URI&quot; object. The optional $header\nargument should be a reference to an\n&quot;HTTP::Headers&quot; object or a plain array reference\nof key/value pairs. The optional $content argument should be\na string of bytes.</p>\n\n<p style=\"margin-left:11%;\">$r = HTTP::Request-&gt;parse(\n$str )</p>\n\n<p style=\"margin-left:17%;\">This constructs a new request\nobject by parsing the given string.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;method <br>\n$r-&gt;method( $val )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set the\nmethod attribute. The method should be a short string like\n&quot; <small>GET&quot;, &quot;HEAD&quot;, &quot;PUT&quot;,\n&quot;PATCH&quot;</small> or &quot;\n<small>POST&quot;.</small></p>\n\n<p style=\"margin-left:11%;\">$r-&gt;uri <br>\n$r-&gt;uri( $val )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set the uri\nattribute. The $val can be a reference to a\n<small>URI</small> object or a plain string. If a string is\ngiven, then it should be parsable as an absolute\n<small>URI.</small></p>\n\n<p style=\"margin-left:11%;\">$r-&gt;header( $field ) <br>\n$r-&gt;header( $field =&gt; $value )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set header\nvalues and it is inherited from &quot;HTTP::Headers&quot;\nvia &quot;HTTP::Message&quot;. See HTTP::Headers for details\nand other similar methods that can be used to access the\nheaders.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;accept_decodable</p>\n\n<p style=\"margin-left:17%;\">This will set the\n&quot;Accept-Encoding&quot; header to the list of encodings\nthat <b>decoded_content()</b> can decode.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;content <br>\n$r-&gt;content( $bytes )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set the\ncontent and it is inherited from the\n&quot;HTTP::Message&quot; base class. See HTTP::Message for\ndetails and other methods that can be used to access the\ncontent.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\ncontent should be a string of bytes. Strings in perl can\ncontain characters outside the range of a byte. The\n&quot;Encode&quot; module can be used to turn such strings\ninto a string of bytes.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;as_string <br>\n$r-&gt;as_string( $eol )</p>\n\n<p style=\"margin-left:17%;\">Method returning a textual\nrepresentation of the request.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Creating\nrequests to be sent with LWP::UserAgent or others can be\neasy. Here are a few examples.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Simple\n<small>POST</small></b> <br>\nHere, we&rsquo;ll create a simple <small>POST</small>\nrequest that could be used to send <small>JSON</small> data\nto an endpoint.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#!/usr/bin/env\nperl <br>\nuse strict; <br>\nuse warnings; <br>\nuse HTTP::Request (); <br>\nuse JSON::MaybeXS qw(encode_json); <br>\nmy $url = 'https://www.example.com/api/user/123'; <br>\nmy $header = ['Content-Type' =&gt; 'application/json;\ncharset=UTF-8']; <br>\nmy $data = {foo =&gt; 'bar', baz =&gt; 'quux'}; <br>\nmy $encoded_data = encode_json($data); <br>\nmy $r = HTTP::Request-&gt;new('POST', $url, $header,\n$encoded_data); <br>\n# at this point, we could send it via LWP::UserAgent <br>\n# my $ua = LWP::UserAgent-&gt;new(); <br>\n# my $res = $ua-&gt;request($r);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Batch\n<small>POST</small> Request</b> <br>\nSome services, like Google, allow multiple requests to be\nsent in one batch.\n&lt;https://developers.google.com/drive/v3/web/batch&gt; for\nexample. Using the &quot;add_part&quot; method from\nHTTP::Message makes this simple.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#!/usr/bin/env\nperl <br>\nuse strict; <br>\nuse warnings; <br>\nuse HTTP::Request (); <br>\nuse JSON::MaybeXS qw(encode_json); <br>\nmy $auth_token = 'auth_token'; <br>\nmy $batch_url = 'https://www.googleapis.com/batch'; <br>\nmy $url =\n'https://www.googleapis.com/drive/v3/files/fileId/permissions?fields=id';\n<br>\nmy $url_no_email =\n'https://www.googleapis.com/drive/v3/files/fileId/permissions?fields=id&amp;sendNotificationEmail=false';\n<br>\n# generate a JSON post request for one of the batch entries\n<br>\nmy $req1 = build_json_request($url, { <br>\nemailAddress =&gt; 'example@appsrocks.com', <br>\nrole =&gt; &quot;writer&quot;, <br>\ntype =&gt; &quot;user&quot;, <br>\n}); <br>\n# generate a JSON post request for one of the batch entries\n<br>\nmy $req2 = build_json_request($url_no_email, { <br>\ndomain =&gt; &quot;appsrocks.com&quot;, <br>\nrole =&gt; &quot;reader&quot;, <br>\ntype =&gt; &quot;domain&quot;, <br>\n}); <br>\n# generate a multipart request to send all of the other\nrequests <br>\nmy $r = HTTP::Request-&gt;new('POST', $batch_url, [ <br>\n'Accept-Encoding' =&gt; 'gzip', <br>\n# if we don't provide a boundary here, HTTP::Message will\ngenerate <br>\n# one for us. We could use UUID::uuid() here if we wanted.\n<br>\n'Content-Type' =&gt; 'multipart/mixed; boundary=END_OF_PART'\n<br>\n]); <br>\n# add the two POST requests to the main request <br>\n$r-&gt;add_part($req1, $req2); <br>\n# at this point, we could send it via LWP::UserAgent <br>\n# my $ua = LWP::UserAgent-&gt;new(); <br>\n# my $res = $ua-&gt;request($r); <br>\nexit(); <br>\nsub build_json_request { <br>\nmy ($url, $href) = @_; <br>\nmy $header = ['Authorization' =&gt; &quot;Bearer\n$auth_token&quot;, 'Content-Type' =&gt; 'application/json;\ncharset=UTF-8']; <br>\nreturn HTTP::Request-&gt;new('POST', $url, $header,\nencode_json($href)); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Headers,\nHTTP::Message, HTTP::Request::Common, HTTP::Response</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1994 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}