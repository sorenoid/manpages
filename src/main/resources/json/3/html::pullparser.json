{"name":"html::pullparser","description":"HTML::PullParser\n- Alternative HTML::Parser interface","body":"\n\n<h1 align=\"center\">HTML::PullParser</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::PullParser\n- Alternative HTML::Parser interface</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTML::PullParser; <br>\n$p = HTML::PullParser-&gt;new(file =&gt;\n&quot;index.html&quot;, <br>\nstart =&gt; 'event, tagname, @attr', <br>\nend =&gt; 'event, tagname', <br>\nignore_elements =&gt; [qw(script style)], <br>\n) || die &quot;Can't open: $!&quot;; <br>\nwhile (my $token = $p-&gt;get_token) { <br>\n#...do something with $token <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nHTML::PullParser is an alternative interface to the\nHTML::Parser class. It basically turns the HTML::Parser\ninside out. You associate a file (or any IO::Handle object\nor string) with the parser at construction time and then\nrepeatedly call $parser-&gt;get_token to obtain the tags and\ntext found in the parsed document.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are provided: <br>\n$p = HTML::PullParser-&gt;new( file =&gt; $file, %options )\n<br>\n$p = HTML::PullParser-&gt;new( doc =&gt; \\$doc, %options\n)</p>\n\n<p style=\"margin-left:17%;\">A &quot;HTML::PullParser&quot;\ncan be made to parse from either a file or a literal\ndocument based on whether the &quot;file&quot; or\n&quot;doc&quot; option is passed to the parser&rsquo;s\nconstructor.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;file&quot; passed in can either be a file name or a\nfile handle object. If a file name is passed, and it\ncan&rsquo;t be opened for reading, then the constructor will\nreturn an undefined value and $! will tell you why it\nfailed. Otherwise the argument is taken to be some object\nthat the &quot;HTML::PullParser&quot; can <b>read()</b> from\nwhen it needs more data. The stream will be <b>read()</b>\nuntil <small>EOF,</small> but not closed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A\n&quot;doc&quot; can be passed plain or as a reference to a\nscalar. If a reference is passed then the value of this\nscalar should not be changed before all tokens have been\nextracted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Next the\ninformation to be returned for the different token types\nmust be set up. This is done by simply associating an\nargspec (as defined in HTML::Parser) with the events you\nhave an interest in. For instance, if you want\n&quot;start&quot; tokens to be reported as the string 'S'\nfollowed by the tagname and the attributes you might pass an\n&quot;start&quot;-option like this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$p =\nHTML::PullParser-&gt;new( <br>\ndoc =&gt; $document_to_parse, <br>\nstart =&gt; '&quot;S&quot;, tagname, @attr', <br>\nend =&gt; '&quot;E&quot;, tagname', <br>\n);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">At last other\n&quot;HTML::Parser&quot; options, like\n&quot;ignore_tags&quot;, and &quot;unbroken_text&quot;, can\nbe passed in. Note that you should not use the\n<i>event</i>_h options to set up parser handlers. That would\nconfuse the inner logic of &quot;HTML::PullParser&quot;.</p>\n\n<p style=\"margin-left:11%;\">$token = $p-&gt;get_token</p>\n\n<p style=\"margin-left:17%;\">This method will return the\nnext <i>token</i> found in the <small>HTML</small> document,\nor &quot;undef&quot; at the end of the document. The token\nis returned as an array reference. The content of this array\nmatch the argspec set up during &quot;HTML::PullParser&quot;\nconstruction.</p>\n\n<p style=\"margin-left:11%;\">$p-&gt;unget_token( @tokens\n)</p>\n\n<p style=\"margin-left:17%;\">If you find out you have read\ntoo many tokens you can push them back, so that they are\nreturned again the next time $p-&gt;get_token is called.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&rsquo;eg/hform&rsquo; script shows how we might parse the\nform section of HTML::Documents using HTML::PullParser.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::Parser,\nHTML::TokeParser</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1998-2001 Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}