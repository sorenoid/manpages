{"name":"parser","description":"XML::Parser - A perl module for parsing XML documents","body":"\n\n<h1 align=\"center\">Parser</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">XML::Parser - A\nperl module for parsing XML documents</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nXML::Parser; <br>\n$p1 = XML::Parser-&gt;new(Style =&gt; 'Debug'); <br>\n$p1-&gt;parsefile('REC-xml-19980210.xml'); <br>\n$p1-&gt;parse('&lt;foo id=&quot;me&quot;&gt;Hello\nWorld&lt;/foo&gt;'); <br>\n# Alternative <br>\n$p2 = XML::Parser-&gt;new(Handlers =&gt; {Start =&gt;\n\\&amp;handle_start, <br>\nEnd =&gt; \\&amp;handle_end, <br>\nChar =&gt; \\&amp;handle_char}); <br>\n$p2-&gt;parse($socket); <br>\n# Another alternative <br>\n$p3 = XML::Parser-&gt;new(ErrorContext =&gt; 2); <br>\n$p3-&gt;setHandlers(Char =&gt; \\&amp;text, <br>\nDefault =&gt; \\&amp;other); <br>\nopen(my $fh, 'xmlgenerator |'); <br>\n$p3-&gt;parse($foo, ProtocolEncoding =&gt; 'ISO-8859-1');\n<br>\nclose($foo); <br>\n$p3-&gt;parsefile('junk.xml', ErrorContext =&gt; 3);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides ways to parse <small>XML</small> documents. It is\nbuilt on top of XML::Parser::Expat, which is a lower level\ninterface to James Clark&rsquo;s expat library. Each call to\none of the parsing methods creates a new instance of\nXML::Parser::Expat which is then used to parse the document.\nExpat options may be provided when the XML::Parser object is\ncreated. These options are then passed on to the Expat\nobject on each parse call. They can also be given as extra\narguments to the parse methods, in which case they override\noptions given at XML::Parser creation time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The behavior of\nthe parser is controlled either by &quot;STYLES&quot; and/or\n&quot;HANDLERS&quot; options, or by &quot;setHandlers&quot;\nmethod. These all provide mechanisms for XML::Parser to set\nthe handlers needed by XML::Parser::Expat. If neither\n&quot;Style&quot; nor &quot;Handlers&quot; are specified,\nthen parsing just checks the document for being\nwell-formed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When underlying\nhandlers get called, they receive as their first parameter\nthe <i>Expat</i> object, not the Parser object.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\">new</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">This is a class method, the\nconstructor for XML::Parser. Options are passed as keyword\nvalue pairs. Recognized options are:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">&bull;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"23%\"></td>\n<td width=\"8%\">\n\n\n<p style=\"margin-top: 1em\">Style</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This option\nprovides an easy way to create a given style of parser. The\nbuilt in styles are: &quot;Debug&quot;, &quot;Subs&quot;,\n&quot;Tree&quot;, &quot;Objects&quot;, and\n&quot;Stream&quot;. These are all defined in separate\npackages under &quot;XML::Parser::Style::*&quot;, and you\ncan find further documentation for each style both below,\nand in those packages.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Custom styles\ncan be provided by giving a full package name containing at\nleast one &rsquo;::&rsquo;. This package should then have\nsubs defined for each handler it wishes to have installed.\nSee &quot; <small>STYLES&quot;</small> below for a\ndiscussion of each built in style.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">Handlers</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">When provided,\nthis option should be an anonymous hash containing as keys\nthe type of handler and as values a sub reference to handle\nthat type of event. All the handlers get passed as their 1st\nparameter the instance of expat that is parsing the\ndocument. Further details on handlers can be found in &quot;\n<small>HANDLERS&quot;</small> . Any handler set here\noverrides the corresponding handler set with the Style\noption.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\">Pkg</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Some styles\nwill refer to subs defined in this package. If not provided,\nit defaults to the package which called the constructor.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"19%\">\n\n\n<p style=\"margin-top: 1em\">ErrorContext</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is an\nExpat option. When this option is defined, errors are\nreported in context. The value should be the number of lines\nto show on either side of the line in which the error\noccurred.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">ProtocolEncoding</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is an\nExpat option. This sets the protocol encoding name. It\ndefaults to none. The built-in encodings are:\n&quot;UTF-8&quot;, &quot;ISO-8859-1&quot;,\n&quot;UTF-16&quot;, and &quot;US-ASCII&quot;. Other\nencodings may be used if they have encoding maps in one of\nthe directories in the @Encoding_Path list. Check &quot;\n<small>ENCODINGS&quot;</small> for more information on\nencoding maps. Setting the protocol encoding overrides any\nencoding in the <small>XML</small> declaration.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">Namespaces</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is an\nExpat option. If this is set to a true value, then namespace\nprocessing is done during the parse. See\n&quot;Namespaces&quot; in XML::Parser::Expat for further\ndiscussion of namespace processing.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">NoExpand</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is an\nExpat option. Normally, the parser will try to expand\nreferences to entities defined in the internal subset. If\nthis option is set to a true value, and a default handler is\nalso set, then the default handler will be called when an\nentity reference is seen in text. This has no effect if a\ndefault handler has not been registered, and it has no\neffect on the expansion of entity references inside\nattribute values.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">Stream_Delimiter</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is an\nExpat option. It takes a string value. When this string is\nfound alone on a line while parsing from a stream, then the\nparse is ended as if it saw an end of file. The intended use\nis with a stream of xml documents in a <small>MIME</small>\nmultipart format. The string should not contain a trailing\nnewline.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">ParseParamEnt</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is an\nExpat option. Unless standalone is set to &quot;yes&quot; in\nthe <small>XML</small> declaration, setting this to a true\nvalue allows the external <small>DTD</small> to be read, and\nparameter entities to be parsed and expanded.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"8%\">\n\n\n<p style=\"margin-top: 1em\">NoLWP</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This option has\nno effect if the ExternEnt or ExternEntFin handlers are\ndirectly set. Otherwise, if true, it forces the use of a\nfile based external entity handler.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">Non_Expat_Options</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">If provided,\nthis should be an anonymous hash whose keys are options that\nshouldn&rsquo;t be passed to Expat. This should only be of\nconcern to those subclassing XML::Parser.</p>\n\n<p style=\"margin-left:11%;\">setHandlers( <small>TYPE,\nHANDLER</small> [, <small>TYPE, HANDLER</small> [...]])</p>\n\n<p style=\"margin-left:17%;\">This method registers handlers\nfor various parser events. It overrides any previous\nhandlers registered through the Style or Handler options or\nthrough earlier calls to setHandlers. By providing a false\nor undefined value as the handler, the existing handler can\nbe unset.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This method\nreturns a list of type, handler pairs corresponding to the\ninput. The handlers returned are the ones that were in\neffect prior to the call.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See a\ndescription of the handler types in &quot;\n<small>HANDLERS&quot;</small> .</p>\n\n<p style=\"margin-left:11%;\">parse( <small>SOURCE</small> [,\n<small>OPT</small> =&gt; <small>OPT_VALUE</small>\n[...]])</p>\n\n<p style=\"margin-left:17%;\">The <small>SOURCE</small>\nparameter should either be a string containing the whole\n<small>XML</small> document, or it should be an open\nIO::Handle. Constructor options to XML::Parser::Expat given\nas keyword-value pairs may follow the <small>SOURCE</small>\nparameter. These override, for this call, any options or\nattributes passed through from the XML::Parser instance.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A die call is\nthrown if a parse error occurs. Otherwise it will return 1\nor whatever is returned from the <b>Final</b> handler, if\none is installed. In other words, what parse may return\ndepends on the style.</p>\n\n<p style=\"margin-left:11%;\">parsestring</p>\n\n<p style=\"margin-left:17%;\">This is just an alias for parse\nfor backwards compatibility.</p>\n\n<p style=\"margin-left:11%;\">parsefile( <small>FILE</small>\n[, <small>OPT</small> =&gt; <small>OPT_VALUE</small>\n[...]])</p>\n\n<p style=\"margin-left:17%;\">Open <small>FILE</small> for\nreading, then call parse with the open handle. The file is\nclosed no matter how parse returns. Returns what parse\nreturns.</p>\n\n<p style=\"margin-left:11%;\">parse_start([\n<small>OPT</small> =&gt; <small>OPT_VALUE</small>\n[...]])</p>\n\n<p style=\"margin-left:17%;\">Create and return a new\ninstance of XML::Parser::ExpatNB. Constructor options may be\nprovided. If an init handler has been provided, it is called\nbefore returning the ExpatNB object. Documents are parsed by\nmaking incremental calls to the parse_more method of this\nobject, which takes a string. A single call to the\nparse_done method of this object, which takes no arguments,\nindicates that the document is finished.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If there is a\nfinal handler installed, it is executed by the parse_done\nmethod before returning and the parse_done method returns\nwhatever is returned by the final handler.</p>\n\n<h2>HANDLERS\n<a name=\"HANDLERS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Expat is an\nevent based parser. As the parser recognizes parts of the\ndocument (say the start or end tag for an <small>XML</small>\nelement), then any handlers registered for that type of an\nevent are called with suitable parameters. All handlers\nreceive an instance of XML::Parser::Expat as their first\nargument. See &quot; <small>METHODS&quot;</small> in\nXML::Parser::Expat for a discussion of the methods that can\nbe called on this object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Init\n(Expat)</b> <br>\nThis is called just before the parsing of the document\nstarts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Final\n(Expat)</b> <br>\nThis is called just after parsing has finished, but only if\nno errors occurred during the parse. Parse returns what this\nreturns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Start\n(Expat, Element [, Attr, Val [,...]])</b> <br>\nThis event is generated when an <small>XML</small> start tag\nis recognized. Element is the name of the <small>XML</small>\nelement type that is opened with the start tag. The Attr\n&amp; Val pairs are generated for each attribute in the\nstart tag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>End (Expat,\nElement)</b> <br>\nThis event is generated when an <small>XML</small> end tag\nis recognized. Note that an <small>XML</small> empty tag\n(&lt;foo/&gt;) generates both a start and an end event.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Char (Expat,\nString)</b> <br>\nThis event is generated when non-markup is recognized. The\nnon-markup sequence of characters is in String. A single\nnon-markup sequence of characters may generate multiple\ncalls to this handler. Whatever the encoding of the string\nin the original document, this is given to the handler in\n<small>UTF-8.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Proc (Expat,\nTarget, Data)</b> <br>\nThis event is generated when a processing instruction is\nrecognized.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Comment\n(Expat, Data)</b> <br>\nThis event is generated when a comment is recognized.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CdataStart\n(Expat)</b> <br>\nThis is called at the start of a <small>CDATA</small>\nsection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>CdataEnd\n(Expat)</b> <br>\nThis is called at the end of a <small>CDATA</small>\nsection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Default\n(Expat, String)</b> <br>\nThis is called for any characters that don&rsquo;t have a\nregistered handler. This includes both characters that are\npart of markup for which no events are generated (markup\ndeclarations) and characters that could generate events, but\nfor which no handler has been registered.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Whatever the\nencoding in the original document, the string is returned to\nthe handler in <small>UTF-8.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Unparsed\n(Expat, Entity, Base, Sysid, Pubid, Notation)</b> <br>\nThis is called for a declaration of an unparsed entity.\nEntity is the name of the entity. Base is the base to be\nused for resolving a relative <small>URI.</small> Sysid is\nthe system id. Pubid is the public id. Notation is the\nnotation name. Base and Pubid may be undefined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Notation\n(Expat, Notation, Base, Sysid, Pubid)</b> <br>\nThis is called for a declaration of notation. Notation is\nthe notation name. Base is the base to be used for resolving\na relative <small>URI.</small> Sysid is the system id. Pubid\nis the public id. Base, Sysid, and Pubid may all be\nundefined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ExternEnt\n(Expat, Base, Sysid, Pubid)</b> <br>\nThis is called when an external entity is referenced. Base\nis the base to be used for resolving a relative\n<small>URI.</small> Sysid is the system id. Pubid is the\npublic id. Base, and Pubid may be undefined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This handler\nshould either return a string, which represents the contents\nof the external entity, or return an open filehandle that\ncan be read to obtain the contents of the external entity,\nor return undef, which indicates the external entity\ncouldn&rsquo;t be found and will generate a parse error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If an open\nfilehandle is returned, it must be returned as either a glob\n(*FOO) or as a reference to a glob (e.g. an instance of\nIO::Handle).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A default\nhandler is installed for this event. The default handler is\nXML::Parser::lwp_ext_ent_handler unless the NoLWP option was\nprovided with a true value, otherwise\nXML::Parser::file_ext_ent_handler is the default handler for\nexternal entities. Even without the NoLWP option, if the\n<small>URI</small> or <small>LWP</small> modules are\nmissing, the file based handler ends up being used after\ngiving a warning on the first external entity reference.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>LWP</small> external entity handler will use proxies\ndefined in the environment (http_proxy, ftp_proxy,\netc.).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat the <small>LWP</small> external entity handler reads\nthe entire entity into a string and returns it, where as the\nfile handler opens a filehandle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also note that\nthe file external entity handler will likely choke on\nabsolute URIs or file names that don&rsquo;t fit the\nconventions of the local operating system.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The expat base\nmethod can be used to set a basename for relative pathnames.\nIf no basename is given, or if the basename is itself a\nrelative name, then it is relative to the current working\ndirectory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ExternEntFin\n(Expat)</b> <br>\nThis is called after parsing an external entity. It&rsquo;s\nnot called unless an ExternEnt handler is also set. There is\na default handler installed that pairs with the default\nExternEnt handler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you&rsquo;re\ngoing to install your own ExternEnt handler, then you should\nset (or unset) this handler too.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Entity\n(Expat, Name, Val, Sysid, Pubid, Ndata, IsParam)</b> <br>\nThis is called when an entity is declared. For internal\nentities, the Val parameter will contain the value and the\nremaining three parameters will be undefined. For external\nentities, the Val parameter will be undefined, the Sysid\nparameter will have the system id, the Pubid parameter will\nhave the public id if it was provided (it will be undefined\notherwise), the Ndata parameter will contain the notation\nfor unparsed entities. If this is a parameter entity\ndeclaration, then the IsParam parameter is true.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that this\nhandler and the Unparsed handler above overlap. If both are\nset, then this handler will not be called for unparsed\nentities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Element\n(Expat, Name, Model)</b> <br>\nThe element handler is called when an element declaration is\nfound. Name is the element name, and Model is the content\nmodel as an XML::Parser::Content object. See\n&quot;XML::Parser::ContentModel Methods&quot; in\nXML::Parser::Expat for methods available for this class.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Attlist\n(Expat, Elname, Attname, Type, Default, Fixed)</b> <br>\nThis handler is called for each attribute in an\n<small>ATTLIST</small> declaration. So an\n<small>ATTLIST</small> declaration that has multiple\nattributes will generate multiple calls to this handler. The\nElname parameter is the name of the element with which the\nattribute is being associated. The Attname parameter is the\nname of the attribute. Type is the attribute type, given as\na string. Default is the default value, which will either be\n&quot;#REQUIRED&quot;, &quot;#IMPLIED&quot; or a quoted\nstring (i.e. the returned string will begin and end with a\nquote character). If Fixed is true, then this is a fixed\nattribute.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Doctype\n(Expat, Name, Sysid, Pubid, Internal)</b> <br>\nThis handler is called for <small>DOCTYPE</small>\ndeclarations. Name is the document type name. Sysid is the\nsystem id of the document type, if it was provided,\notherwise it&rsquo;s undefined. Pubid is the public id of\nthe document type, which will be undefined if no public id\nwas given. Internal is the internal subset, given as a\nstring. If there was no internal subset, it will be\nundefined. Internal will contain all whitespace, comments,\nprocessing instructions, and declarations seen in the\ninternal subset. The declarations will be there whether or\nnot they have been processed by another handler (except for\nunparsed entities processed by the Unparsed handler).\nHowever, comments and processing instructions will not\nappear if they&rsquo;ve been processed by their respective\nhandlers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>* DoctypeFin\n(Parser)</b> <br>\nThis handler is called after parsing of the\n<small>DOCTYPE</small> declaration has finished, including\nany internal or external <small>DTD</small>\ndeclarations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>XMLDecl\n(Expat, Version, Encoding, Standalone)</b> <br>\nThis handler is called for xml declarations. Version is a\nstring containing the version. Encoding is either undefined\nor contains an encoding string. Standalone will be either\ntrue, false, or undefined if the standalone attribute is\nyes, no, or not made respectively.</p>\n\n<h2>STYLES\n<a name=\"STYLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Debug</b>\n<br>\nThis just prints out the document in outline form. Nothing\nspecial is returned by parse.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Subs</b>\n<br>\nEach time an element starts, a sub by that name in the\npackage specified by the Pkg option is called with the same\nparameters that the Start handler gets called with.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each time an\nelement ends, a sub with that name appended with an\nunderscore (&quot;_&quot;), is called with the same\nparameters that the End handler gets called with.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Nothing special\nis returned by parse.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Tree</b>\n<br>\nParse will return a parse tree for the document. Each node\nin the tree takes the form of a tag, content pair. Text\nnodes are represented with a pseudo-tag of &quot;0&quot; and\nthe string that is their content. For elements, the content\nis an array reference. The first item in the array is a\n(possibly empty) hash reference containing attributes. The\nremainder of the array is a sequence of tag-content pairs\nrepresenting the content of the element.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So for example\nthe result of parsing:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;foo&gt;&lt;head\nid=&quot;a&quot;&gt;Hello\n&lt;em&gt;there&lt;/em&gt;&lt;/head&gt;&lt;bar&gt;Howdy&lt;ref/&gt;&lt;/bar&gt;do&lt;/foo&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">would be:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Tag Content\n<br>\n\n==================================================================\n<br>\n[foo, [{}, head, [{id =&gt; &quot;a&quot;}, 0, &quot;Hello\n&quot;, em, [{}, 0, &quot;there&quot;]], <br>\nbar, [ {}, 0, &quot;Howdy&quot;, ref, [{}]], <br>\n0, &quot;do&quot; <br>\n] <br>\n]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The root\ndocument &quot;foo&quot;, has 3 children: a &quot;head&quot;\nelement, a &quot;bar&quot; element and the text\n&quot;do&quot;. After the empty attribute hash, these are\nrepresented in it&rsquo;s contents by 3 tag-content\npairs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Objects</b>\n<br>\nThis is similar to the Tree style, except that a hash object\nis created for each element. The corresponding object will\nbe in the class whose name is created by appending\n&quot;::&quot; and the element name to the package set with\nthe Pkg option. Non-markup text will be in the ::Characters\nclass. The contents of the corresponding object will be in\nan anonymous array that is the value of the Kids property\nfor that object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Stream</b>\n<br>\nThis style also uses the Pkg package. If none of the subs\nthat this style looks for is there, then the effect of\nparsing with this style is to print a canonical copy of the\ndocument without comments or declarations. All the subs\nreceive as their 1st parameter the Expat instance for the\ndocument they&rsquo;re parsing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It looks for\nthe following routines:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p>StartDocument</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Called at the\nstart of the parse .</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">StartTag</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Called for\nevery start tag with a second parameter of the element type.\nThe $_ variable will contain a copy of the tag and the %_\nvariable will contain attribute values supplied for that\nelement.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\">EndTag</p></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Called for\nevery end tag with a second parameter of the element type.\nThe $_ variable will contain a copy of the end tag.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">Text</p></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Called just\nbefore start or end tags with accumulated non-markup text in\nthe $_ variable.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><small>PI</small></p></td>\n<td width=\"80%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Called for\nprocessing instructions. The $_ variable will contain a copy\nof the <small>PI</small> and the target and data are sent as\n2nd and 3rd parameters respectively.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">EndDocument</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Called at\nconclusion of the parse.</p>\n\n<h2>ENCODINGS\n<a name=\"ENCODINGS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>XML</small>\ndocuments may be encoded in character sets other than\nUnicode as long as they may be mapped into the Unicode\ncharacter set. Expat has further restrictions on encodings.\nRead the xmlparse.h header file in the expat distribution to\nsee details on these restrictions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Expat has\nbuilt-in encodings for: &quot;UTF-8&quot;,\n&quot;ISO-8859-1&quot;, &quot;UTF-16&quot;, and\n&quot;US-ASCII&quot;. Encodings are set either through the\n<small>XML</small> declaration encoding attribute or through\nthe ProtocolEncoding option to XML::Parser or\nXML::Parser::Expat.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For encodings\nother than the built-ins, expat calls the function\nload_encoding in the Expat package with the encoding name.\nThis function looks for a file in the path list\n@XML::Parser::Expat::Encoding_Path, that matches the\nlower-cased name with a &rsquo;.enc&rsquo; extension. The\nfirst one it finds, it loads.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you wish to\nbuild your own encoding maps, check out the XML::Encoding\nmodule from <small>CPAN.</small></p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Larry Wall\n&lt;<i>larry@wall.org</i>&gt; wrote version 1.0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Clark Cooper\n&lt;<i>coopercc@netheaven.com</i>&gt; picked up support,\nchanged the <small>API</small> for this version (2.x),\nprovided documentation, and added some standard package\nfeatures.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Matt Sergeant\n&lt;<i>matt@sergeant.org</i>&gt; is now maintaining\nXML::Parser</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#HANDLERS\">HANDLERS</a>","<a href=\"#STYLES\">STYLES</a>","<a href=\"#ENCODINGS\">ENCODINGS</a>","<a href=\"#AUTHORS\">AUTHORS</a>"],"level":3}