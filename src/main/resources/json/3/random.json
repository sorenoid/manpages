{"name":"random","description":"random,\nsrandom, initstate, setstate - random number generator","body":"\n\n<h1 align=\"center\">RANDOM</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">random,\nsrandom, initstate, setstate - random number generator</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdlib.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nrandom(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nsrandom(unsigned</b> <i>seed</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*initstate(unsigned</b> <i>seed</i><b>, char\n*</b><i>state</i><b>, size_t</b> <i>n</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*setstate(char *</b><i>state</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>random</b>(),\n<b>srandom</b>(), <b>initstate</b>(), <b>setstate</b>():</p>\n\n\n<p style=\"margin-left:17%;\">_XOPEN_SOURCE&nbsp;&gt;=&nbsp;500\n<br>\n|| /* Glibc since 2.19: */ _DEFAULT_SOURCE <br>\n|| /* Glibc versions &lt;= 2.19: */ _SVID_SOURCE ||\n_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>random</b>() function uses a nonlinear additive feedback\nrandom number generator employing a default table of size 31\nlong integers to return successive pseudo-random numbers in\nthe range from 0 to 2^31&nbsp;-&nbsp;1. The period of this\nrandom number generator is very large, approximately\n<i>16&nbsp;*&nbsp;((2^31)&nbsp;-&nbsp;1)</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>srandom</b>() function sets its argument as the seed for\na new sequence of pseudo-random integers to be returned by\n<b>random</b>(). These sequences are repeatable by calling\n<b>srandom</b>() with the same seed value. If no seed value\nis provided, the <b>random</b>() function is automatically\nseeded with a value of 1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>initstate</b>() function allows a state array\n<i>state</i> to be initialized for use by <b>random</b>().\nThe size of the state array <i>n</i> is used by\n<b>initstate</b>() to decide how sophisticated a random\nnumber generator it should use&mdash;the larger the state\narray, the better the random numbers will be. Current\n&quot;optimal&quot; values for the size of the state array\n<i>n</i> are 8, 32, 64, 128, and 256 bytes; other amounts\nwill be rounded down to the nearest known amount. Using less\nthan 8 bytes results in an error. <i>seed</i> is the seed\nfor the initialization, which specifies a starting point for\nthe random number sequence, and provides for restarting at\nthe same point.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setstate</b>() function changes the state array used by\nthe <b>random</b>() function. The state array <i>state</i>\nis used for random number generation until the next call to\n<b>initstate</b>() or <b>setstate</b>(). <i>state</i> must\nfirst have been initialized using <b>initstate</b>() or be\nthe result of a previous call of <b>setstate</b>().</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>random</b>() function returns a value between 0 and\n<i>(2^31)&nbsp;-&nbsp;1</i>. The <b>srandom</b>() function\nreturns no value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>initstate</b>() function returns a pointer to the\nprevious state array. On error, <i>errno</i> is set to\nindicate the cause.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>setstate</b>() returns a pointer to the previous state\narray. On error, it returns NULL, with <i>errno</i> set to\nindicate the cause of the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The <i>state</i> argument given\nto <b>setstate</b>() was NULL.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A state array of less than 8 bytes was specified to\n<b>initstate</b>().</p> </td></tr>\n</table>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3377221.png\" alt=\"Image grohtml-3377221.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, 4.3BSD.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>random</b>() function should not be used in multithreaded\nprograms where reproducible behavior is required. Use\n<a href=\"https://man.page/3/random_r\">random_r(3)</a> for that purpose.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Random-number\ngeneration is a complex topic. <i>Numerical Recipes in C:\nThe Art of Scientific Computing</i> (William H. Press, Brian\nP. Flannery, Saul A. Teukolsky, William T. Vetterling; New\nYork: Cambridge University Press, 2007, 3rd ed.) provides an\nexcellent discussion of practical random-number generation\nissues in Chapter 7 (Random Numbers).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a more\ntheoretical discussion which also covers many practical\nissues in depth, see Chapter 3 (Random Numbers) in Donald E.\nKnuth&rsquo;s <i>The Art of Computer Programming</i>, volume\n2 (Seminumerical Algorithms), 2nd ed.; Reading,\nMassachusetts: Addison-Wesley Publishing Company, 1981.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX, <b>initstate</b>() should return NULL on error. In\nthe glibc implementation, <i>errno</i> is (as specified) set\non error, but the function does not return NULL.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/getrandom\">getrandom(2)</a>,\n<a href=\"https://man.page/3/drand48\">drand48(3)</a>, <a href=\"https://man.page/3/rand\">rand(3)</a>, <a href=\"https://man.page/3/random_r\">random_r(3)</a>,\n<a href=\"https://man.page/3/srand\">srand(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}