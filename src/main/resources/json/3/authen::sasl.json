{"name":"authen::sasl","description":"Authen::SASL -\nSASL Authentication framework","body":"\n\n<h1 align=\"center\">Authen::SASL</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Authen::SASL -\nSASL Authentication framework</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nAuthen::SASL; <br>\n$sasl = Authen::SASL-&gt;new( <br>\nmechanism =&gt; 'CRAM-MD5 PLAIN ANONYMOUS', <br>\ncallback =&gt; { <br>\npass =&gt; \\&amp;fetch_password, <br>\nuser =&gt; $user, <br>\n} <br>\n);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>SASL</small>\nis a generic mechanism for authentication used by several\nnetwork protocols. <b>Authen::SASL</b> provides an\nimplementation framework that all protocols should be able\nto share.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The framework\nallows different implementations of the connection class to\nbe plugged in. At the time of writing there were two such\nplugins. <br>\nAuthen::SASL::Perl</p>\n\n<p style=\"margin-left:17%;\">This module implements several\nmechanisms and is implemented entirely in Perl.</p>\n\n<p style=\"margin-left:11%;\">Authen::SASL::XS</p>\n\n<p style=\"margin-left:17%;\">This module uses the Cyrus\n<small>SASL</small> C-library (both version 1 and 2 are\nsupported).</p>\n\n<p style=\"margin-left:11%;\">Authen::SASL::Cyrus</p>\n\n<p style=\"margin-left:17%;\">This module is the predecessor\nto Authen::SASL::XS. It is reccomended to use\nAuthen::SASL::XS</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default the\norder in which these plugins are selected is\nAuthen::SASL::XS, Authen::SASL::Cyrus and then\nAuthen::SASL::Perl.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nchange it or want to specifically use one implementation\nonly simply do</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nAuthen::SASL qw(Perl);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">or if you have\nanother plugin module that supports the Authen::SASL\n<small>API</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nAuthen::SASL qw(My::SASL::Plugin);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>CONTRUCTOR</small></b>\n<br>\nnew ( <small>OPTIONS</small> )</p>\n\n<p style=\"margin-left:17%;\">The constructor may be called\nwith or without arguments. Passing arguments is just a short\ncut to calling the &quot;mechanism&quot; and\n&quot;callback&quot; methods. <br>\ncallback =&gt; { <small>NAME</small> =&gt; <small>VALUE,\nNAME</small> =&gt; <small>VALUE, ...</small> }</p>\n\n<p style=\"margin-left:23%;\">Set the callbacks. See the\ncallback method for details.</p>\n\n<p style=\"margin-left:17%;\">mechanism =&gt;\n<small>NAMES</small> <br>\nmech =&gt; <small>NAMES</small></p>\n\n<p style=\"margin-left:23%;\">Set the list of mechanisms to\nchoose from. See the mechanism method for details.</p>\n\n<p style=\"margin-left:17%;\">debug =&gt;\n<small>VALUE</small></p>\n\n<p style=\"margin-left:23%;\">Set the debug level bit-value\nto &quot;VALUE&quot;</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Debug output\nwill be sent to &quot;STDERR&quot;. The bits of this value\nare:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">1 Show debug\nmessages in the Perl modules for the mechanisms. <br>\n(Currently only used in GSSAPI) <br>\n4 With security layers in place show information on packages\nread. <br>\n8 With security layers in place show information on packages\nwritten.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">The default\nvalue is 0.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>METHODS</small></b>\n<br>\nmechanism ( )</p>\n\n<p style=\"margin-left:17%;\">Returns the current list of\nmechanisms</p>\n\n<p style=\"margin-left:11%;\">mechanism (\n<small>NAMES</small> )</p>\n\n<p style=\"margin-left:17%;\">Set the list of mechanisms to\nchoose from. &quot;NAMES&quot; should be a space separated\nstring of the names.</p>\n\n<p style=\"margin-left:11%;\">callback ( <small>NAME</small>\n)</p>\n\n<p style=\"margin-left:17%;\">Returns the current callback\nassociated with &quot;NAME&quot;.</p>\n\n<p style=\"margin-left:11%;\">callback ( <small>NAME</small>\n=&gt; <small>VALUE, NAME</small> =&gt; <small>VALUE,\n...</small> )</p>\n\n<p style=\"margin-left:17%;\">Sets the given callbacks to the\ngiven values</p>\n\n<p style=\"margin-left:11%;\">client_new ( <small>SERVICE,\nHOST, SECURITY</small> )</p>\n\n<p style=\"margin-left:17%;\">Creates and returns a new\nconnection object for a client-side connection.</p>\n\n<p style=\"margin-left:11%;\">server_new ( <small>SERVICE,\nHOST, OPTIONS</small> )</p>\n\n<p style=\"margin-left:17%;\">Creates and returns a new\nconnection object for a server-side connection.</p>\n\n<p style=\"margin-left:11%;\">error ( )</p>\n\n<p style=\"margin-left:17%;\">Returns any error from the last\nconnection</p>\n\n<h2>The Connection Class\n<a name=\"The Connection Class\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">server_start (\n<small>CHALLENGE</small> )</p>\n\n<p style=\"margin-left:17%;\">server_start begins the\nauthentication using the chosen mechanism. If the mechanism\nis not supported by the installed <small>SASL</small> it\nfails. Because for some mechanisms the client has to start\nthe negotiation, you can give the client challenge as a\nparameter.</p>\n\n<p style=\"margin-left:11%;\">server_step (\n<small>CHALLENGE</small> )</p>\n\n<p style=\"margin-left:17%;\">server_step performs the next\nstep in the negotiation process. The first parameter you\ngive is the clients challenge/response.</p>\n\n<p style=\"margin-left:11%;\">client_start ( )</p>\n\n<p style=\"margin-left:17%;\">The initial step to be\nperformed. Returns the initial value to pass to the server\nor an empty list on error.</p>\n\n<p style=\"margin-left:11%;\">client_step (\n<small>CHALLENGE</small> )</p>\n\n<p style=\"margin-left:17%;\">This method is called when a\nresponse from the server requires it.\n<small>CHALLENGE</small> is the value from the server.\nReturns the next value to pass to the server or an empty\nlist on error.</p>\n\n<p style=\"margin-left:11%;\">need_step ( )</p>\n\n<p style=\"margin-left:17%;\">Returns true if the selected\nmechanism requires another step before completion (error or\nsuccess).</p>\n\n<p style=\"margin-left:11%;\">answer ( <small>NAME</small>\n)</p>\n\n<p style=\"margin-left:17%;\">The method will return the\nvalue returned from the last call to the callback\n<small>NAME</small></p>\n\n<p style=\"margin-left:11%;\">property ( <small>NAME</small>\n)</p>\n\n<p style=\"margin-left:17%;\">Returns the property value\nassociated with &quot;NAME&quot;.</p>\n\n<p style=\"margin-left:11%;\">property ( <small>NAME</small>\n=&gt; <small>VALUE, NAME</small> =&gt; <small>VALUE,\n...</small> )</p>\n\n<p style=\"margin-left:17%;\">Sets the named properties to\ntheir associated values.</p>\n\n<p style=\"margin-left:11%;\">service ( )</p>\n\n<p style=\"margin-left:17%;\">Returns the service argument\nthat was passed to *_new-methods.</p>\n\n<p style=\"margin-left:11%;\">host ( )</p>\n\n<p style=\"margin-left:17%;\">Returns the host argument that\nwas passed to *_new-methods.</p>\n\n<p style=\"margin-left:11%;\">mechanism ( )</p>\n\n<p style=\"margin-left:17%;\">Returns the name of the chosen\nmechanism.</p>\n\n<p style=\"margin-left:11%;\">is_success ( )</p>\n\n<p style=\"margin-left:17%;\">Once <b>need_step()</b> returns\nfalse, then you can check if the authentication succeeded by\ncalling this method which returns a boolean value.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Callbacks</b>\n<br>\nThere are three different ways in which a callback may be\npassed <small><br>\nCODEREF</small></p>\n\n<p style=\"margin-left:17%;\">If the value passed is a code\nreference then, when needed, it will be called and the\nconnection object will be passed as the first argument. In\naddition some callbacks may be passed additional\narguments.</p>\n\n<p style=\"margin-left:11%;\"><small>ARRAYREF</small></p>\n\n<p style=\"margin-left:17%;\">If the value passed is an array\nreference, the first element in the array must be a code\nreference. When the callback is called the code reference\nwill be called with the connection object passed as the\nfirst argument and all other values from the array passed\nafter.</p>\n\n<p style=\"margin-left:11%;\"><small>SCALAR</small></p>\n\n<p style=\"margin-left:17%;\">All other values passed will be\nused directly. ie it is the same as passing an code\nreference that, when called, returns the value.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Authen::SASL::Perl,\nAuthen::SASL::XS, Authen::SASL::Cyrus</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Graham Barr\n&lt;gbarr@pobox.com&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please report\nany bugs, or post any suggestions, to the perl-ldap mailing\nlist &lt;perl-ldap@perl.org&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n1998-2005 Graham Barr. All rights reserved. This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#The Connection Class\">The Connection Class</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}