{"name":"dpkg::deps::simple","description":"Dpkg::Deps::Simple - represents a single dependency statement","body":"\n\n<h1 align=\"center\">Dpkg::Deps::Simple</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dpkg::Deps::Simple\n- represents a single dependency statement</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class\nrepresents a single dependency statement. It has several\ninteresting properties: <br>\npackage</p>\n\n<p style=\"margin-left:17%;\">The package name (can be undef\nif the dependency has not been initialized or if the\nsimplification of the dependency lead to its removal).</p>\n\n<p style=\"margin-left:11%;\">relation</p>\n\n<p style=\"margin-left:17%;\">The relational operator:\n&quot;=&quot;, &quot;&lt;&lt;&quot;, &quot;&lt;=&quot;,\n&quot;&gt;=&quot; or &quot;&gt;&gt;&quot;. It can be\nundefined if the dependency had no version restriction. In\nthat case the following field is also undefined.</p>\n\n<p style=\"margin-left:11%;\">version</p>\n\n<p style=\"margin-left:17%;\">The version.</p>\n\n<p style=\"margin-left:11%;\">arches</p>\n\n<p style=\"margin-left:17%;\">The list of architectures where\nthis dependency is applicable. It is undefined when\nthere&rsquo;s no restriction, otherwise it is an array ref.\nIt can contain an exclusion list, in that case each\narchitecture is prefixed with an exclamation mark.</p>\n\n<p style=\"margin-left:11%;\">archqual</p>\n\n<p style=\"margin-left:17%;\">The arch qualifier of the\ndependency (can be undef if there is none). In the\ndependency &quot;python:any (&gt;= 2.6)&quot;, the arch\nqualifier is &quot;any&quot;.</p>\n\n<p style=\"margin-left:11%;\">restrictions</p>\n\n<p style=\"margin-left:17%;\">The restrictions formula for\nthis dependency. It is undefined when there is no\nrestriction formula. Otherwise it is an array ref.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$dep =\nDpkg::Deps::Simple-&gt;new([$dep[, %opts]]);</p>\n\n<p style=\"margin-left:17%;\">Creates a new object. Some\noptions can be set through %opts: <br>\nhost_arch</p>\n\n<p style=\"margin-left:23%;\">Sets the host architecture.</p>\n\n<p style=\"margin-left:17%;\">build_arch</p>\n\n<p style=\"margin-left:23%;\">Sets the build\narchitecture.</p>\n\n<p style=\"margin-left:17%;\">build_dep</p>\n\n<p style=\"margin-left:23%;\">Specifies whether the parser\nshould consider it a build dependency. Defaults to 0.</p>\n\n<p style=\"margin-left:17%;\">tests_dep</p>\n\n<p style=\"margin-left:23%;\">Specifies whether the parser\nshould consider it a tests dependency. Defaults to 0.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;<b>reset()</b></p>\n\n<p style=\"margin-left:17%;\">Clears any dependency\ninformation stored in $dep so that\n$dep-&gt;<b>is_empty()</b> returns true.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;parse_string($dep_string)</p>\n\n<p style=\"margin-left:17%;\">Parses the dependency string\nand modifies internal properties to match the parsed\ndependency.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;parse($fh, $desc)</p>\n\n<p style=\"margin-left:17%;\">Parse a dependency line from a\nfilehandle.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;load($filename)</p>\n\n<p style=\"margin-left:17%;\">Parse a dependency line from\n$filename.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;output([$fh]) <br>\n&quot;$dep&quot;</p>\n\n<p style=\"margin-left:17%;\">Returns a string representing\nthe dependency. If $fh is set, it prints the string to the\nfilehandle.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;save($filename)</p>\n\n<p style=\"margin-left:17%;\">Save the dependency into the\ngiven $filename.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;implies($other_dep)</p>\n\n<p style=\"margin-left:17%;\">Returns 1 when $dep implies\n$other_dep. Returns 0 when $dep implies <small>NOT</small>\n($other_dep). Returns undef when there is no implication.\n$dep and $other_dep do not need to be of the same type.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;<b>get_deps()</b></p>\n\n<p style=\"margin-left:17%;\">Returns a list of\nsub-dependencies, which for this object it means it returns\nitself.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;<b>sort()</b></p>\n\n<p style=\"margin-left:17%;\">This method is a no-op for this\nobject.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;arch_is_concerned($arch)</p>\n\n<p style=\"margin-left:17%;\">Returns true if the dependency\napplies to the indicated architecture.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;reduce_arch($arch)</p>\n\n<p style=\"margin-left:17%;\">Simplifies the dependency to\ncontain only information relevant to the given architecture.\nThis object can be left empty after this operation. This\ntrims off the architecture restriction list of these\nobjects.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;<b>has_arch_restriction()</b></p>\n\n<p style=\"margin-left:17%;\">Returns the package name if the\ndependency applies only to a subset of architectures.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;<b>profile_is_concerned()</b></p>\n\n<p style=\"margin-left:17%;\">Returns true if the dependency\napplies to the indicated profile.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;<b>reduce_profiles()</b></p>\n\n<p style=\"margin-left:17%;\">Simplifies the dependency to\ncontain only information relevant to the given profile. This\nobject can be left empty after this operation. This trims\noff the profile restriction list of this object.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;get_evaluation($facts)</p>\n\n<p style=\"margin-left:17%;\">Evaluates the dependency given\na list of installed packages and a list of virtual packages\nprovided. These lists are part of the Dpkg::Deps::KnownFacts\nobject given as parameters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns 1 when\nit&rsquo;s true, 0 when it&rsquo;s false, undef when some\ninformation is lacking to conclude.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;simplify_deps($facts,\n@assumed_deps)</p>\n\n<p style=\"margin-left:17%;\">Simplifies the dependency as\nmuch as possible given the list of facts (see class\nDpkg::Deps::KnownFacts) and a list of other dependencies\nthat are known to be true.</p>\n\n<p style=\"margin-left:11%;\">$dep-&gt;<b>is_empty()</b></p>\n\n<p style=\"margin-left:17%;\">Returns true if the dependency\nis empty and doesn&rsquo;t contain any useful information.\nThis is true when the object has not yet been\ninitialized.</p>\n\n\n<p style=\"margin-left:11%;\">$dep-&gt;merge_union($other_dep)</p>\n\n<p style=\"margin-left:17%;\">Returns true if $dep could be\nmodified to represent the union of both dependencies.\nOtherwise returns false.</p>\n\n<h2>CHANGES\n<a name=\"CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.02\n(dpkg 1.17.10)</b> <br>\nNew methods: Add $dep-&gt;<b>profile_is_concerned()</b> and\n$dep-&gt;<b>reduce_profiles()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.01\n(dpkg 1.16.1)</b> <br>\nNew method: Add $dep-&gt;<b>reset()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">New property:\nrecognizes the arch qualifier &quot;any&quot; and stores it\nin the &quot;archqual&quot; property when present.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Version 1.00\n(dpkg 1.15.6)</b> <br>\nMark the module as public.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#CHANGES\">CHANGES</a>"],"level":3}