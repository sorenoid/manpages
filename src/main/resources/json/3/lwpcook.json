{"name":"lwpcook","description":"lwpcook - The libwww-perl cookbook","body":"\n\n<h1 align=\"center\">lwpcook</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">lwpcook - The\nlibwww-perl cookbook</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This document\ncontain some examples that show typical usage of the\nlibwww-perl library. You should consult the documentation\nfor the individual modules for more detail.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All examples\nshould be runnable programs. You can, in most cases, test\nthe code sections by piping the program text directly to\nperl.</p>\n\n<h2>GET\n<a name=\"GET\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is very easy\nto use this library to just fetch documents from the net.\nThe LWP::Simple module provides the <b>get()</b> function\nthat return the document specified by its <small>URL</small>\nargument:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::Simple; <br>\n$doc = get 'http://search.cpan.org/dist/libwww-perl/';</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">or, as a perl\none-liner using the <b>getprint()</b> function:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl\n-MLWP::Simple -e 'getprint\n&quot;http://search.cpan.org/dist/libwww-perl/&quot;'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">or, how about\nfetching the latest perl by running this command:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl\n-MLWP::Simple -e ' <br>\ngetstore\n&quot;ftp://ftp.sunet.se/pub/lang/perl/CPAN/src/latest.tar.gz&quot;,\n<br>\n&quot;perl.tar.gz&quot;'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You will\nprobably first want to find a <small>CPAN</small> site\ncloser to you by running something like the following\ncommand:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl\n-MLWP::Simple -e 'getprint\n&quot;http://www.cpan.org/SITES.html&quot;'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Enough of this\nsimple stuff! The <small>LWP</small> object oriented\ninterface gives you more control over the request sent to\nthe server. Using this interface you have full control over\nheaders sent and how you want to handle the response\nreturned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\n$ua-&gt;agent(&quot;$0/0.1 &quot; . $ua-&gt;agent); <br>\n# $ua-&gt;agent(&quot;Mozilla/8.0&quot;) # pretend we are\nvery capable browser <br>\n$req = HTTP::Request-&gt;new( <br>\nGET =&gt; 'http://search.cpan.org/dist/libwww-perl/'); <br>\n$req-&gt;header('Accept' =&gt; 'text/html'); <br>\n# send request <br>\n$res = $ua-&gt;request($req); <br>\n# check the outcome <br>\nif ($res-&gt;is_success) { <br>\nprint $res-&gt;decoded_content; <br>\n} <br>\nelse { <br>\nprint &quot;Error: &quot; . $res-&gt;status_line .\n&quot;\\n&quot;; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The lwp-request\nprogram (alias <small>GET</small> ) that is distributed with\nthe library can also be used to fetch documents from\n<small>WWW</small> servers.</p>\n\n<h2>HEAD\n<a name=\"HEAD\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you just\nwant to check if a document is present (i.e. the\n<small>URL</small> is valid) try to run code that looks like\nthis:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::Simple; <br>\nif (head($url)) { <br>\n# ok document exists <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>head()</b> function really returns a list of\nmeta-information about the document. The first three values\nof the list returned are the document type, the size of the\ndocument, and the age of the document.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">More control\nover the request or access to all header values returned\nrequire that you use the object oriented interface described\nfor <small>GET</small> above. Just s/GET/HEAD/g.</p>\n\n<h2>POST\n<a name=\"POST\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is no\nsimple procedural interface for posting data to a\n<small>WWW</small> server. You must use the object oriented\ninterface for this. The most common <small>POST</small>\noperation is to access a <small>WWW</small> form\napplication:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\nmy $req = HTTP::Request-&gt;new( <br>\nPOST =&gt; 'https://rt.cpan.org/Public/Dist/Display.html');\n<br>\n$req-&gt;content_type('application/x-www-form-urlencoded');\n<br>\n$req-&gt;content('Status=Active&amp;Name=libwww-perl'); <br>\nmy $res = $ua-&gt;request($req); <br>\nprint $res-&gt;as_string;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Lazy people use\nthe HTTP::Request::Common module to set up a suitable\n<small>POST</small> request message (it handles all the\nescaping issues) and has a suitable default for the\ncontent_type:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTTP::Request::Common qw(POST); <br>\nuse LWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\nmy $req = POST\n'https://rt.cpan.org/Public/Dist/Display.html', <br>\n[ Status =&gt; 'Active', Name =&gt; 'libwww-perl' ]; <br>\nprint $ua-&gt;request($req)-&gt;as_string;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The lwp-request\nprogram (alias <small>POST</small> ) that is distributed\nwith the library can also be used for posting data.</p>\n\n<h2>PROXIES\n<a name=\"PROXIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some sites use\nproxies to go through fire wall machines, or just as cache\nin order to improve performance. Proxies can also be used\nfor accessing resources through protocols not supported\ndirectly (or supported badly :-) by the libwww-perl\nlibrary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You should\ninitialize your proxy setting before you start sending\nrequests:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\n$ua-&gt;env_proxy; # initialize from environment variables\n<br>\n# or <br>\n$ua-&gt;proxy(ftp =&gt; 'http://proxy.myorg.com'); <br>\n$ua-&gt;proxy(wais =&gt; 'http://proxy.myorg.com'); <br>\n$ua-&gt;no_proxy(qw(no se fi)); <br>\nmy $req = HTTP::Request-&gt;new(GET =&gt;\n'wais://xxx.com/'); <br>\nprint $ua-&gt;request($req)-&gt;as_string;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The LWP::Simple\ninterface will call <b>env_proxy()</b> for you\nautomatically. Applications that use the\n$ua-&gt;<b>env_proxy()</b> method will normally not use the\n$ua-&gt;<b>proxy()</b> and $ua-&gt;<b>no_proxy()</b>\nmethods.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some proxies\nalso require that you send it a username/password in order\nto let requests through. You should be able to add the\nrequired header, with something like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\n$ua-&gt;proxy(['http', 'ftp'] =&gt;\n'http://username:password@proxy.myorg.com'); <br>\n$req =\nHTTP::Request-&gt;new('GET',&quot;http://www.perl.com&quot;);\n<br>\n$res = $ua-&gt;request($req); <br>\nprint $res-&gt;decoded_content if $res-&gt;is_success;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Replace\n&quot;proxy.myorg.com&quot;, &quot;username&quot; and\n&quot;password&quot; with something suitable for your\nsite.</p>\n\n<h2>ACCESS TO PROTECTED DOCUMENTS\n<a name=\"ACCESS TO PROTECTED DOCUMENTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Documents\nprotected by basic authorization can easily be accessed like\nthis:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\n$req = HTTP::Request-&gt;new(GET =&gt;\n'http://www.linpro.no/secret/'); <br>\n$req-&gt;authorization_basic('aas', 'mypassword'); <br>\nprint $ua-&gt;request($req)-&gt;as_string;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The other\nalternative is to provide a subclass of\n<i>LWP::UserAgent</i> that overrides the\n<b>get_basic_credentials()</b> method. Study the\n<i>lwp-request</i> program for an example of this.</p>\n\n<h2>COOKIES\n<a name=\"COOKIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some sites like\nto play games with cookies. By default <small>LWP</small>\nignores cookies provided by the servers it visits.\n<small>LWP</small> will collect cookies and respond to\ncookie requests if you set up a cookie jar.\n<small>LWP</small> doesn&rsquo;t provide a cookie jar\nitself, but if you install HTTP::CookieJar::LWP, it can be\nused like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\nuse HTTP::CookieJar::LWP; <br>\n$ua = LWP::UserAgent-&gt;new( <br>\ncookie_jar =&gt; HTTP::CookieJar::LWP-&gt;new, <br>\n); <br>\n# and then send requests just as you used to do <br>\n$res = $ua-&gt;request(HTTP::Request-&gt;new(GET =&gt;\n&quot;http://no.yahoo.com/&quot;)); <br>\nprint $res-&gt;status_line, &quot;\\n&quot;;</p>\n\n<h2>HTTPS\n<a name=\"HTTPS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">URLs with https\nscheme are accessed in exactly the same way as with http\nscheme, provided that an <small>SSL</small> interface module\nfor <small>LWP</small> has been properly installed (see the\n<i><small>README.SSL</small></i> file found in the\nlibwww-perl distribution for more details). If no\n<small>SSL</small> interface is installed for\n<small>LWP</small> to use, then you will get &quot;501\nProtocol scheme &rsquo;https&rsquo; is not supported&quot;\nerrors when accessing such URLs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here&rsquo;s an\nexample of fetching and printing a <small>WWW</small> page\nusing <small>SSL:</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\nmy $ua = LWP::UserAgent-&gt;new; <br>\nmy $req = HTTP::Request-&gt;new(GET =&gt;\n'https://www.helsinki.fi/'); <br>\nmy $res = $ua-&gt;request($req); <br>\nif ($res-&gt;is_success) { <br>\nprint $res-&gt;as_string; <br>\n} <br>\nelse { <br>\nprint &quot;Failed: &quot;, $res-&gt;status_line,\n&quot;\\n&quot;; <br>\n}</p>\n\n<h2>MIRRORING\n<a name=\"MIRRORING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nmirror documents from a <small>WWW</small> server, then try\nto run code similar to this at regular intervals:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::Simple; <br>\n%mirrors = ( <br>\n'http://www.sn.no/' =&gt; 'sn.html', <br>\n'http://www.perl.com/' =&gt; 'perl.html', <br>\n'http://search.cpan.org/distlibwww-perl/' =&gt; 'lwp.html',\n<br>\n'gopher://gopher.sn.no/' =&gt; 'gopher.html', <br>\n); <br>\nwhile (($url, $localfile) = each(%mirrors)) { <br>\nmirror($url, $localfile); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or, as a perl\none-liner:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl\n-MLWP::Simple -e 'mirror(&quot;http://www.perl.com/&quot;,\n&quot;perl.html&quot;)';</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The document\nwill not be transferred unless it has been updated.</p>\n\n<h2>LARGE DOCUMENTS\n<a name=\"LARGE DOCUMENTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the document\nyou want to fetch is too large to be kept in memory, then\nyou have two alternatives. You can instruct the library to\nwrite the document content to a file (second\n$ua-&gt;<b>request()</b> argument is a file name):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\nmy $req = HTTP::Request-&gt;new(GET =&gt; <br>\n\n'http://www.cpan.org/CPAN/authors/id/O/OA/OALDERS/libwww-perl-6.26.tar.gz');\n<br>\n$res = $ua-&gt;request($req,\n&quot;libwww-perl.tar.gz&quot;); <br>\nif ($res-&gt;is_success) { <br>\nprint &quot;ok\\n&quot;; <br>\n} <br>\nelse { <br>\nprint $res-&gt;status_line, &quot;\\n&quot;; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or you can\nprocess the document as it arrives (second\n$ua-&gt;<b>request()</b> argument is a code reference):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\n$URL = 'ftp://ftp.isc.org/pub/rfc/rfc-index.txt'; <br>\nmy $expected_length; <br>\nmy $bytes_received = 0; <br>\nmy $res = <br>\n$ua-&gt;request(HTTP::Request-&gt;new(GET =&gt; $URL), <br>\nsub { <br>\nmy($chunk, $res) = @_; <br>\n$bytes_received += length($chunk); <br>\nunless (defined $expected_length) { <br>\n$expected_length = $res-&gt;content_length || 0; <br>\n} <br>\nif ($expected_length) { <br>\nprintf STDERR &quot;%d%% - &quot;, <br>\n100 * $bytes_received / $expected_length; <br>\n} <br>\nprint STDERR &quot;$bytes_received bytes received\\n&quot;;\n<br>\n# XXX Should really do something with the chunk itself <br>\n# print $chunk; <br>\n}); <br>\nprint $res-&gt;status_line, &quot;\\n&quot;;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1996-2001, Gisle Aas</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#GET\">GET</a>","<a href=\"#HEAD\">HEAD</a>","<a href=\"#POST\">POST</a>","<a href=\"#PROXIES\">PROXIES</a>","<a href=\"#ACCESS TO PROTECTED DOCUMENTS\">ACCESS TO PROTECTED DOCUMENTS</a>","<a href=\"#COOKIES\">COOKIES</a>","<a href=\"#HTTPS\">HTTPS</a>","<a href=\"#MIRRORING\">MIRRORING</a>","<a href=\"#LARGE DOCUMENTS\">LARGE DOCUMENTS</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}