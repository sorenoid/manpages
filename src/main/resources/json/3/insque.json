{"name":"insque","description":"insque, remque\n- insert/remove an item from a queue","body":"\n\n<h1 align=\"center\">INSQUE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">insque, remque\n- insert/remove an item from a queue</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;search.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\ninsque(void *</b><i>elem</i><b>, void\n*</b><i>prev</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nremque(void *</b><i>elem</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>insque</b>(),\n<b>remque</b>():</p>\n\n\n<p style=\"margin-left:17%;\">_XOPEN_SOURCE&nbsp;&gt;=&nbsp;500\n<br>\n|| /* Glibc since 2.19: */ _DEFAULT_SOURCE <br>\n|| /* Glibc versions &lt;= 2.19: */ _SVID_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>insque</b>() and <b>remque</b>() functions manipulate\ndoubly linked lists. Each element in the list is a structure\nof which the first two elements are a forward and a backward\npointer. The linked list may be linear (i.e., NULL forward\npointer at the end of the list and NULL backward pointer at\nthe start of the list) or circular.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>insque</b>() function inserts the element pointed to by\n<i>elem</i> immediately after the element pointed to by\n<i>prev</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the list is\nlinear, then the call <i>insque(elem, NULL)</i> can be used\nto insert the initial list element, and the call sets the\nforward and backward pointers of <i>elem</i> to NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the list is\ncircular, the caller should ensure that the forward and\nbackward pointers of the first element are initialized to\npoint to that element, and the <i>prev</i> argument of the\n<b>insque</b>() call should also point to the element.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>remque</b>() function removes the element pointed to by\n<i>elem</i> from the doubly linked list.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3405791.png\" alt=\"Image grohtml-3405791.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On ancient\nsystems, the arguments of these functions were of type\n<i>struct qelem *</i>, defined as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct qelem {\n<br>\nstruct qelem *q_forw; <br>\nstruct qelem *q_back; <br>\nchar q_data[1]; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is still\nwhat you will get if <b>_GNU_SOURCE</b> is defined before\nincluding <i>&lt;search.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The location of\nthe prototypes for these functions differs among several\nversions of UNIX. The above is the POSIX version. Some\nsystems place them in <i>&lt;string.h&gt;</i>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In glibc 2.4\nand earlier, it was not possible to specify <i>prev</i> as\nNULL. Consequently, to build a linear list, the caller had\nto build a list using an initial call that contained the\nfirst two elements of the list, with the forward and\nbackward pointers in each element suitably initialized.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>insque</b>(). Here is an\nexample run of the program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out -c\na b c</b> <br>\nTraversing completed list: <br>\na <br>\nb <br>\nc <br>\nThat was a circular list</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;search.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">struct element\n{ <br>\nstruct element *forward; <br>\nstruct element *backward; <br>\nchar *name; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static struct\nelement * <br>\nnew_element(void) <br>\n{ <br>\nstruct element *e = malloc(sizeof(*e)); <br>\nif (e == NULL) { <br>\nfprintf(stderr, &quot;malloc() failed\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return e; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nstruct element *first, *elem, *prev; <br>\nint circular, opt, errfnd;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* The\n&quot;-c&quot; command-line option can be used to specify\nthat the <br>\nlist is circular */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">errfnd = 0;\n<br>\ncircular = 0; <br>\nwhile ((opt = getopt(argc, argv, &quot;c&quot;)) != -1) {\n<br>\nswitch (opt) { <br>\ncase 'c': <br>\ncircular = 1; <br>\nbreak; <br>\ndefault: <br>\nerrfnd = 1; <br>\nbreak; <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (errfnd ||\noptind &gt;= argc) { <br>\nfprintf(stderr, &quot;Usage: %s [-c] string...\\n&quot;,\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Create first\nelement and place it in the linked list */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">elem =\nnew_element(); <br>\nfirst = elem;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">elem-&gt;name =\nargv[optind];</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (circular) {\n<br>\nelem-&gt;forward = elem; <br>\nelem-&gt;backward = elem; <br>\ninsque(elem, elem); <br>\n} else { <br>\ninsque(elem, NULL); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Add\nremaining command-line arguments as list elements */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">while (++optind\n&lt; argc) { <br>\nprev = elem;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">elem =\nnew_element(); <br>\nelem-&gt;name = argv[optind]; <br>\ninsque(elem, prev); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Traverse the\nlist from the start, printing element names */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Traversing\ncompleted list:\\n&quot;); <br>\nelem = first; <br>\ndo { <br>\nprintf(&quot; %s\\n&quot;, elem-&gt;name); <br>\nelem = elem-&gt;forward; <br>\n} while (elem != NULL &amp;&amp; elem != first);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (elem ==\nfirst) <br>\nprintf(&quot;That was a circular list\\n&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/queue\">queue(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}