{"name":"readline","description":"readline - get\na line from a user with editing","body":"\n\n<h1 align=\"center\">READLINE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">readline - get\na line from a user with editing</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdio.h&gt; <br>\n#include &lt;readline/readline.h&gt; <br>\n#include &lt;readline/history.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>char *</i>\n<b><br>\nreadline</b> (<i>const char *prompt</i>);</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Readline is\nCopyright (C) 1989-2020 Free Software Foundation, Inc.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>readline</b>\nwill read a line from the terminal and return it, using\n<b>prompt</b> as a prompt. If <b>prompt</b> is <b>NULL</b>\nor the empty string, no prompt is issued. The line returned\nis allocated with <i>malloc</i>(3); the caller must free it\nwhen finished. The line returned has the final newline\nremoved, so only the text of the line remains.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>readline</b>\noffers editing capabilities while the user is entering the\nline. By default, the line editing commands are similar to\nthose of emacs. A vi-style line editing interface is also\navailable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage describes only the most basic use of <b>readline</b>.\nMuch more functionality is available; see <i>The GNU\nReadline Library</i> and <i>The GNU History Library</i> for\nadditional information.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>readline</b>\nreturns the text of the line read. A blank line returns the\nempty string. If <b>EOF</b> is encountered while reading a\nline, and the line is empty, <b>NULL</b> is returned. If an\n<b>EOF</b> is read with a non-empty line, it is treated as a\nnewline.</p>\n\n<h2>NOTATION\n<a name=\"NOTATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An Emacs-style\nnotation is used to denote keystrokes. Control keys are\ndenoted by C-<i>key</i>, e.g., C-n means Control-N.\nSimilarly, <i>meta</i> keys are denoted by M-<i>key</i>, so\nM-x means Meta-X. (On keyboards without a <i>meta</i> key,\nM-<i>x</i> means ESC <i>x</i>, i.e., press the Escape key\nthen the <i>x</i> key. This makes ESC the <i>meta\nprefix</i>. The combination M-C-<i>x</i> means\nESC-Control-<i>x</i>, or press the Escape key then hold the\nControl key while pressing the <i>x</i> key.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Readline\ncommands may be given numeric <i>arguments</i>, which\nnormally act as a repeat count. Sometimes, however, it is\nthe sign of the argument that is significant. Passing a\nnegative argument to a command that acts in the forward\ndirection (e.g., <b>kill-line</b>) causes that command to\nact in a backward direction. Commands whose behavior with\narguments deviates from this are noted below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a command\nis described as <i>killing</i> text, the text deleted is\nsaved for possible future retrieval (<i>yanking</i>). The\nkilled text is saved in a <i>kill ring</i>. Consecutive\nkills cause the text to be accumulated into one unit, which\ncan be yanked all at once. Commands which do not kill text\nseparate the chunks of text on the kill ring.</p>\n\n<h2>INITIALIZATION FILE\n<a name=\"INITIALIZATION FILE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Readline is\ncustomized by putting commands in an initialization file\n(the <i>inputrc</i> file). The name of this file is taken\nfrom the value of the <b>INPUTRC</b> environment variable.\nIf that variable is unset, the default is <i>~/.inputrc</i>.\nIf that file does not exist or cannot be read, the ultimate\ndefault is <i>/etc/inputrc</i>. When a program which uses\nthe readline library starts up, the init file is read, and\nthe key bindings and variables are set. There are only a few\nbasic constructs allowed in the readline init file. Blank\nlines are ignored. Lines beginning with a <b>#</b> are\ncomments. Lines beginning with a <b>$</b> indicate\nconditional constructs. Other lines denote key bindings and\nvariable settings. Each program using this library may add\nits own commands and bindings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nplacing</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">M-Control-u:\nuniversal-argument</p>\n\n<p style=\"margin-left:11%;\">or</p>\n\n<p style=\"margin-left:22%;\">C-Meta-u:\nuniversal-argument</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">into the\n<i>inputrc</i> would make M-C-u execute the readline command\n<i>universal-argument</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nsymbolic character names are recognized while processing key\nbindings: <i>DEL</i>, <i>ESC</i>, <i>ESCAPE</i>, <i>LFD</i>,\n<i>NEWLINE</i>, <i>RET</i>, <i>RETURN</i>, <i>RUBOUT</i>,\n<i>SPACE</i>, <i>SPC</i>, and <i>TAB</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\ncommand names, readline allows keys to be bound to a string\nthat is inserted when the key is pressed (a\n<i>macro</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Key\nBindings</b> <br>\nThe syntax for controlling key bindings in the\n<i>inputrc</i> file is simple. All that is required is the\nname of the command or the text of a macro and a key\nsequence to which it should be bound. The name may be\nspecified in one of two ways: as a symbolic key name,\npossibly with <i>Meta-</i> or <i>Control-</i> prefixes, or\nas a key sequence. The name and key sequence are separated\nby a colon. There can be no whitespace between the name and\nthe colon.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When using the\nform <b>keyname</b>:<i>function-name</i> or <i>macro</i>,\n<i>keyname</i> is the name of a key spelled out in English.\nFor example:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Control-u:\nuniversal-argument <br>\nMeta-Rubout: backward-kill-word <br>\nControl-o: &quot;&gt; output&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the above\nexample, <i>C-u</i> is bound to the function\n<b>universal-argument</b>, <i>M-DEL</i> is bound to the\nfunction <b>backward-kill-word</b>, and <i>C-o</i> is bound\nto run the macro expressed on the right hand side (that is,\nto insert the text &rsquo;&rsquo;&gt; output&rsquo;&rsquo;\ninto the line).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the second\nform, <b>&quot;keyseq&quot;</b>:<i>function-name</i> or\n<i>macro</i>, <b>keyseq</b> differs from <b>keyname</b>\nabove in that strings denoting an entire key sequence may be\nspecified by placing the sequence within double quotes. Some\nGNU Emacs style key escapes can be used, as in the following\nexample, but the symbolic character names are not\nrecognized.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">&quot;\\C-u&quot;:\nuniversal-argument <br>\n&quot;\\C-x\\C-r&quot;: re-read-init-file <br>\n&quot;\\e[11~&quot;: &quot;Function Key 1&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this\nexample, <i>C-u</i> is again bound to the function\n<b>universal-argument</b>. <i>C-x C-r</i> is bound to the\nfunction <b>re-read-init-file</b>, and <i>ESC [ 1 1 ~</i> is\nbound to insert the text &rsquo;&rsquo;Function Key\n1&rsquo;&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The full set of\nGNU Emacs style escape sequences available when specifying\nkey sequences is</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\C-</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"39%\">\n\n\n<p>control prefix</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\M-</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"39%\">\n\n\n<p>meta prefix</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\e</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"39%\">\n\n\n<p>an escape character</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\\\</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"39%\">\n\n\n<p>backslash</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\&quot;</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"39%\">\n\n\n<p>literal &quot;, a double quote</p></td>\n<td width=\"29%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>\\&rsquo;</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"39%\">\n\n\n<p>literal &rsquo;, a single quote</p></td>\n<td width=\"29%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe GNU Emacs style escape sequences, a second set of\nbackslash escapes is available:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><b>\\a</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">alert (bell)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\b</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>backspace</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\d</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>delete</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\f</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>form feed</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\n</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>newline</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\r</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>carriage return</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\t</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>horizontal tab</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\v</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>vertical tab</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\</b><i>nnn</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the eight-bit character whose value is the octal value\n<i>nnn</i> (one to three digits)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>\\x</b><i>HH</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the eight-bit character whose value is the hexadecimal\nvalue <i>HH</i> (one or two hex digits)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When entering\nthe text of a macro, single or double quotes should be used\nto indicate a macro definition. Unquoted text is assumed to\nbe a function name. In the macro body, the backslash escapes\ndescribed above are expanded. Backslash will quote any other\ncharacter in the macro text, including &quot; and\n&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bash</b>\nallows the current readline key bindings to be displayed or\nmodified with the <b>bind</b> builtin command. The editing\nmode may be switched during interactive use by using the\n<b>-o</b> option to the <b>set</b> builtin command. Other\nprograms using this library provide similar mechanisms. The\n<i>inputrc</i> file may be edited and re-read if a program\ndoes not provide any other means to incorporate new\nbindings.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Variables</b>\n<br>\nReadline has variables that can be used to further customize\nits behavior. A variable may be set in the <i>inputrc</i>\nfile with a statement of the form</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>set</b>\n<i>variable-name value</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Except where\nnoted, readline variables can take the values <b>On</b> or\n<b>Off</b> (without regard to case). Unrecognized variable\nnames are ignored. When a variable value is read, empty or\nnull values, &quot;on&quot; (case-insensitive), and\n&quot;1&quot; are equivalent to <b>On</b>. All other values\nare equivalent to <b>Off</b>. The variables and their\ndefault values are: <b><br>\nbell-style (audible)</b></p>\n\n<p style=\"margin-left:22%;\">Controls what happens when\nreadline wants to ring the terminal bell. If set to\n<b>none</b>, readline never rings the bell. If set to\n<b>visible</b>, readline uses a visible bell if one is\navailable. If set to <b>audible</b>, readline attempts to\nring the terminal&rsquo;s bell.</p>\n\n<p style=\"margin-left:11%;\"><b>bind-tty-special-chars\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b> (the\ndefault), readline attempts to bind the control characters\ntreated specially by the kernel&rsquo;s terminal driver to\ntheir readline equivalents.</p>\n\n<p style=\"margin-left:11%;\"><b>blink-matching-paren\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nattempts to briefly move the cursor to an opening\nparenthesis when a closing parenthesis is inserted.</p>\n\n<p style=\"margin-left:11%;\"><b>colored-completion-prefix\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, when\nlisting completions, readline displays the common prefix of\nthe set of possible completions using a different color. The\ncolor definitions are taken from the value of the\n<b>LS_COLORS</b> environment variable.</p>\n\n<p style=\"margin-left:11%;\"><b>colored-stats (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\ndisplays possible completions using different colors to\nindicate their file type. The color definitions are taken\nfrom the value of the <b>LS_COLORS</b> environment\nvariable.</p>\n\n<p style=\"margin-left:11%;\"><b>comment-begin\n(&rsquo;&rsquo;#&rsquo;&rsquo;)</b></p>\n\n<p style=\"margin-left:22%;\">The string that is inserted in\n<b>vi</b> mode when the <b>insert-comment</b> command is\nexecuted. This command is bound to <b>M-#</b> in emacs mode\nand to <b>#</b> in vi command mode.</p>\n\n<p style=\"margin-left:11%;\"><b>completion-display-width\n(-1)</b></p>\n\n<p style=\"margin-left:22%;\">The number of screen columns\nused to display possible matches when performing completion.\nThe value is ignored if it is less than 0 or greater than\nthe terminal screen width. A value of 0 will cause matches\nto be displayed one per line. The default value is -1.</p>\n\n<p style=\"margin-left:11%;\"><b>completion-ignore-case\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nperforms filename matching and completion in a\ncase-insensitive fashion.</p>\n\n<p style=\"margin-left:11%;\"><b>completion-map-case\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, and\n<b>completion-ignore-case</b> is enabled, readline treats\nhyphens (<i>-</i>) and underscores (<i>_</i>) as equivalent\nwhen performing case-insensitive filename matching and\ncompletion.</p>\n\n\n<p style=\"margin-left:11%;\"><b>completion-prefix-display-length\n(0)</b></p>\n\n<p style=\"margin-left:22%;\">The length in characters of the\ncommon prefix of a list of possible completions that is\ndisplayed without modification. When set to a value greater\nthan zero, common prefixes longer than this value are\nreplaced with an ellipsis when displaying possible\ncompletions.</p>\n\n<p style=\"margin-left:11%;\"><b>completion-query-items\n(100)</b></p>\n\n<p style=\"margin-left:22%;\">This determines when the user\nis queried about viewing the number of possible completions\ngenerated by the <b>possible-completions</b> command. It may\nbe set to any integer value greater than or equal to zero.\nIf the number of possible completions is greater than or\nequal to the value of this variable, readline will ask\nwhether or not the user wishes to view them; otherwise they\nare simply listed on the terminal. A negative value causes\nreadline to never ask.</p>\n\n<p style=\"margin-left:11%;\"><b>convert-meta (On)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill convert characters with the eighth bit set to an ASCII\nkey sequence by stripping the eighth bit and prefixing it\nwith an escape character (in effect, using escape as the\n<i>meta prefix</i>). The default is <i>On</i>, but readline\nwill set it to <i>Off</i> if the locale contains eight-bit\ncharacters.</p>\n\n<p style=\"margin-left:11%;\"><b>disable-completion\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill inhibit word completion. Completion characters will be\ninserted into the line as if they had been mapped to\n<b>self-insert</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>echo-control-characters\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, on\noperating systems that indicate they support it, readline\nechoes a character corresponding to a signal generated from\nthe keyboard.</p>\n\n<p style=\"margin-left:11%;\"><b>editing-mode (emacs)</b></p>\n\n<p style=\"margin-left:22%;\">Controls whether readline\nbegins with a set of key bindings similar to <i>Emacs</i> or\n<i>vi</i>. <b>editing-mode</b> can be set to either\n<b>emacs</b> or <b>vi</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>emacs-mode-string\n(@)</b></p>\n\n<p style=\"margin-left:22%;\">If the\n<i>show-mode-in-prompt</i> variable is enabled, this string\nis displayed immediately before the last line of the primary\nprompt when emacs editing mode is active. The value is\nexpanded like a key binding, so the standard set of meta-\nand control prefixes and backslash escape sequences is\navailable. Use the \\1 and \\2 escapes to begin and end\nsequences of non-printing characters, which can be used to\nembed a terminal control sequence into the mode string.</p>\n\n<p style=\"margin-left:11%;\"><b>enable-bracketed-paste\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, readline\nwill configure the terminal in a way that will enable it to\ninsert each paste into the editing buffer as a single string\nof characters, instead of treating each character as if it\nhad been read from the keyboard. This can prevent pasted\ncharacters from being interpreted as editing commands.</p>\n\n<p style=\"margin-left:11%;\"><b>enable-keypad (Off)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, readline\nwill try to enable the application keypad when it is called.\nSome systems need this to enable the arrow keys.</p>\n\n<p style=\"margin-left:11%;\"><b>enable-meta-key (On)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, readline\nwill try to enable any meta modifier key the terminal claims\nto support when it is called. On many terminals, the meta\nkey is used to send eight-bit characters.</p>\n\n<p style=\"margin-left:11%;\"><b>expand-tilde (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, tilde\nexpansion is performed when readline attempts word\ncompletion.</p>\n\n<p style=\"margin-left:11%;\"><b>history-preserve-point\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, the\nhistory code attempts to place point at the same location on\neach history line retrieved with <b>previous-history</b> or\n<b>next-history</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>history-size (unset)</b></p>\n\n<p style=\"margin-left:22%;\">Set the maximum number of\nhistory entries saved in the history list. If set to zero,\nany existing history entries are deleted and no new entries\nare saved. If set to a value less than zero, the number of\nhistory entries is not limited. By default, the number of\nhistory entries is not limited. If an attempt is made to set\n<i>history-size</i> to a non-numeric value, the maximum\nnumber of history entries will be set to 500.</p>\n\n<p style=\"margin-left:11%;\"><b>horizontal-scroll-mode\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">When set to <b>On</b>, makes\nreadline use a single line for display, scrolling the input\nhorizontally on a single screen line when it becomes longer\nthan the screen width rather than wrapping to a new line.\nThis setting is automatically enabled for terminals of\nheight 1.</p>\n\n<p style=\"margin-left:11%;\"><b>input-meta (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill enable eight-bit input (that is, it will not clear the\neighth bit in the characters it reads), regardless of what\nthe terminal claims it can support. The name\n<b>meta-flag</b> is a synonym for this variable. The default\nis <i>Off</i>, but readline will set it to <i>On</i> if the\nlocale contains eight-bit characters.</p>\n\n<p style=\"margin-left:11%;\"><b>isearch-terminators\n(&rsquo;&rsquo;C-[ C-J&rsquo;&rsquo;)</b></p>\n\n<p style=\"margin-left:22%;\">The string of characters that\nshould terminate an incremental search without subsequently\nexecuting the character as a command. If this variable has\nnot been given a value, the characters <i>ESC</i> and\n<i>C-J</i> will terminate an incremental search.</p>\n\n<p style=\"margin-left:11%;\"><b>keymap (emacs)</b></p>\n\n<p style=\"margin-left:22%;\">Set the current readline\nkeymap. The set of legal keymap names is <i>emacs,\nemacs-standard, emacs-meta, emacs-ctlx, vi, vi-move,\nvi-command</i>, and <i>vi-insert</i>. <i>vi</i> is\nequivalent to <i>vi-command</i>; <i>emacs</i> is equivalent\nto <i>emacs-standard</i>. The default value is <i>emacs</i>.\nThe value of <b>editing-mode</b> also affects the default\nkeymap.</p>\n\n<p style=\"margin-left:11%;\"><b>keyseq-timeout (500)</b></p>\n\n<p style=\"margin-left:22%;\">Specifies the duration\n<i>readline</i> will wait for a character when reading an\nambiguous key sequence (one that can form a complete key\nsequence using the input read so far, or can take additional\ninput to complete a longer key sequence). If no input is\nreceived within the timeout, <i>readline</i> will use the\nshorter but complete key sequence. The value is specified in\nmilliseconds, so a value of 1000 means that <i>readline</i>\nwill wait one second for additional input. If this variable\nis set to a value less than or equal to zero, or to a\nnon-numeric value, <i>readline</i> will wait until another\nkey is pressed to decide which key sequence to complete.</p>\n\n<p style=\"margin-left:11%;\"><b>mark-directories\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, completed\ndirectory names have a slash appended.</p>\n\n<p style=\"margin-left:11%;\"><b>mark-modified-lines\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, history\nlines that have been modified are displayed with a preceding\nasterisk (<b>*</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>mark-symlinked-directories\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, completed\nnames which are symbolic links to directories have a slash\nappended (subject to the value of\n<b>mark-directories</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>match-hidden-files\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">This variable, when set to\n<b>On</b>, causes readline to match files whose names begin\nwith a &rsquo;.&rsquo; (hidden files) when performing\nfilename completion. If set to <b>Off</b>, the leading\n&rsquo;.&rsquo; must be supplied by the user in the filename\nto be completed.</p>\n\n\n<p style=\"margin-left:11%;\"><b>menu-complete-display-prefix\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, menu\ncompletion displays the common prefix of the list of\npossible completions (which may be empty) before cycling\nthrough the list.</p>\n\n<p style=\"margin-left:11%;\"><b>output-meta (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill display characters with the eighth bit set directly\nrather than as a meta-prefixed escape sequence. The default\nis <i>Off</i>, but readline will set it to <i>On</i> if the\nlocale contains eight-bit characters.</p>\n\n<p style=\"margin-left:11%;\"><b>page-completions\n(On)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nuses an internal <i>more</i>-like pager to display a\nscreenful of possible completions at a time.</p>\n\n\n<p style=\"margin-left:11%;\"><b>print-completions-horizontally\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill display completions with matches sorted horizontally in\nalphabetical order, rather than down the screen.</p>\n\n<p style=\"margin-left:11%;\"><b>revert-all-at-newline\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, readline\nwill undo all changes to history lines before returning when\n<b>accept-line</b> is executed. By default, history lines\nmay be modified and retain individual undo lists across\ncalls to <b>readline</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>show-all-if-ambiguous\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">This alters the default\nbehavior of the completion functions. If set to <b>On</b>,\nwords which have more than one possible completion cause the\nmatches to be listed immediately instead of ringing the\nbell.</p>\n\n<p style=\"margin-left:11%;\"><b>show-all-if-unmodified\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">This alters the default\nbehavior of the completion functions in a fashion similar to\n<b>show-all-if-ambiguous</b>. If set to <b>On</b>, words\nwhich have more than one possible completion without any\npossible partial completion (the possible completions\ndon&rsquo;t share a common prefix) cause the matches to be\nlisted immediately instead of ringing the bell.</p>\n\n<p style=\"margin-left:11%;\"><b>show-mode-in-prompt\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, add a\nstring to the beginning of the prompt indicating the editing\nmode: emacs, vi command, or vi insertion. The mode strings\nare user-settable (e.g., <i>emacs-mode-string</i>).</p>\n\n<p style=\"margin-left:11%;\"><b>skip-completed-text\n(Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, this\nalters the default completion behavior when inserting a\nsingle match into the line. It&rsquo;s only active when\nperforming completion in the middle of a word. If enabled,\nreadline does not insert characters from the completion that\nmatch characters after point in the word being completed, so\nportions of the word following the cursor are not\nduplicated.</p>\n\n<p style=\"margin-left:11%;\"><b>vi-cmd-mode-string\n((cmd))</b></p>\n\n<p style=\"margin-left:22%;\">If the\n<i>show-mode-in-prompt</i> variable is enabled, this string\nis displayed immediately before the last line of the primary\nprompt when vi editing mode is active and in command mode.\nThe value is expanded like a key binding, so the standard\nset of meta- and control prefixes and backslash escape\nsequences is available. Use the \\1 and \\2 escapes to begin\nand end sequences of non-printing characters, which can be\nused to embed a terminal control sequence into the mode\nstring.</p>\n\n<p style=\"margin-left:11%;\"><b>vi-ins-mode-string\n((ins))</b></p>\n\n<p style=\"margin-left:22%;\">If the\n<i>show-mode-in-prompt</i> variable is enabled, this string\nis displayed immediately before the last line of the primary\nprompt when vi editing mode is active and in insertion mode.\nThe value is expanded like a key binding, so the standard\nset of meta- and control prefixes and backslash escape\nsequences is available. Use the \\1 and \\2 escapes to begin\nand end sequences of non-printing characters, which can be\nused to embed a terminal control sequence into the mode\nstring.</p>\n\n<p style=\"margin-left:11%;\"><b>visible-stats (Off)</b></p>\n\n<p style=\"margin-left:22%;\">If set to <b>On</b>, a\ncharacter denoting a file&rsquo;s type as reported by\n<i>stat</i>(2) is appended to the filename when listing\npossible completions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Conditional\nConstructs</b> <br>\nReadline implements a facility similar in spirit to the\nconditional compilation features of the C preprocessor which\nallows key bindings and variable settings to be performed as\nthe result of tests. There are four parser directives\nused.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>$if</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The <b>$if</b> construct allows bindings to be made\nbased on the editing mode, the terminal being used, or the\napplication using readline. The text of the test, after any\ncomparison operator, extends to the end of the line; unless\notherwise noted, no characters are required to isolate\nit.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>mode</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\"></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">The <b>mode=</b> form of the\n<b>$if</b> directive is used to test whether readline is in\nemacs or vi mode. This may be used in conjunction with the\n<b>set keymap</b> command, for instance, to set bindings in\nthe <i>emacs-standard</i> and <i>emacs-ctlx</i> keymaps only\nif readline is starting out in emacs mode.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><b>term</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>The <b>term=</b> form may be used to include\nterminal-specific key bindings, perhaps to bind the key\nsequences output by the terminal&rsquo;s function keys. The\nword on the right side of the <b>=</b> is tested against the\nfull name of the terminal and the portion of the terminal\nname before the first <b>-</b>. This allows <i>sun</i> to\nmatch both <i>sun</i> and <i>sun-cmd</i>, for instance.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>version</b></p>\n\n<p style=\"margin-left:32%;\">The <b>version</b> test may be\nused to perform comparisons against specific readline\nversions. The <b>version</b> expands to the current readline\nversion. The set of comparison operators includes <b>=</b>,\n(and <b>==</b>), <b>!=</b>, <b>&lt;=</b>, <b>&gt;=</b>,\n<b>&lt;</b>, and <b>&gt;</b>. The version number supplied on\nthe right side of the operator consists of a major version\nnumber, an optional decimal point, and an optional minor\nversion (e.g., <b>7.1</b>). If the minor version is omitted,\nit is assumed to be <b>0</b>. The operator may be separated\nfrom the string <b>version</b> and from the version number\nargument by whitespace.</p>\n\n<p style=\"margin-left:22%;\"><b>application</b></p>\n\n<p style=\"margin-left:32%;\">The <b>application</b>\nconstruct is used to include application-specific settings.\nEach program using the readline library sets the\n<i>application name</i>, and an initialization file can test\nfor a particular value. This could be used to bind key\nsequences to functions useful for a specific program. For\ninstance, the following command adds a key sequence that\nquotes the current or previous word in <b>bash</b>:</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\"><b>$if</b> Bash\n<br>\n# Quote the current or previous word <br>\n&quot;\\C-xq&quot;: &quot;\\eb\\&quot;\\ef\\&quot;&quot; <b><br>\n$endif</b></p>\n\n<p style=\"margin-left:22%;\"><i>variable</i></p>\n\n<p style=\"margin-left:32%;\">The <i>variable</i> construct\nprovides simple equality tests for readline variables and\nvalues. The permitted comparison operators are <i>=</i>,\n<i>==</i>, and <i>!=</i>. The variable name must be\nseparated from the comparison operator by whitespace; the\noperator may be separated from the value on the right hand\nside by whitespace. Both string and boolean variables may be\ntested. Boolean variables must be tested against the values\n<i>on</i> and <i>off</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$endif</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This command, as seen in the previous example,\nterminates an <b>$if</b> command.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>$else</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Commands in this branch of the <b>$if</b> directive are\nexecuted if the test fails.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>$include</b></p>\n\n<p style=\"margin-left:22%;\">This directive takes a single\nfilename as an argument and reads commands and bindings from\nthat file. For example, the following directive would read\n<i>/etc/inputrc</i>:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>$include</b>\n<i>/etc/inputrc</i></p>\n\n<h2>SEARCHING\n<a name=\"SEARCHING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Readline\nprovides commands for searching through the command history\nfor lines containing a specified string. There are two\nsearch modes: <i>incremental</i> and\n<i>non-incremental</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Incremental\nsearches begin before the user has finished typing the\nsearch string. As each character of the search string is\ntyped, readline displays the next entry from the history\nmatching the string typed so far. An incremental search\nrequires only as many characters as needed to find the\ndesired history entry. To search backward in the history for\na particular string, type <b>C-r</b>. Typing <b>C-s</b>\nsearches forward through the history. The characters present\nin the value of the <b>isearch-terminators</b> variable are\nused to terminate an incremental search. If that variable\nhas not been assigned a value the <i>Escape</i> and\n<b>C-J</b> characters will terminate an incremental search.\n<b>C-G</b> will abort an incremental search and restore the\noriginal line. When the search is terminated, the history\nentry containing the search string becomes the current\nline.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To find other\nmatching entries in the history list, type <b>C-s</b> or\n<b>C-r</b> as appropriate. This will search backward or\nforward in the history for the next line matching the search\nstring typed so far. Any other key sequence bound to a\nreadline command will terminate the search and execute that\ncommand. For instance, a newline will terminate the search\nand accept the line, thereby executing the command from the\nhistory list. A movement command will terminate the search,\nmake the last line found the current line, and begin\nediting.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Non-incremental\nsearches read the entire search string before starting to\nsearch for matching history lines. The search string may be\ntyped by the user or be part of the contents of the current\nline.</p>\n\n<h2>EDITING COMMANDS\n<a name=\"EDITING COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nis a list of the names of the commands and the default key\nsequences to which they are bound. Command names without an\naccompanying key sequence are unbound by default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing descriptions, <i>point</i> refers to the current\ncursor position, and <i>mark</i> refers to a cursor position\nsaved by the <b>set-mark</b> command. The text between the\npoint and mark is referred to as the <i>region</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commands for\nMoving <br>\nbeginning-of-line (C-a)</b></p>\n\n<p style=\"margin-left:22%;\">Move to the start of the\ncurrent line.</p>\n\n<p style=\"margin-left:11%;\"><b>end-of-line (C-e)</b></p>\n\n<p style=\"margin-left:22%;\">Move to the end of the\nline.</p>\n\n<p style=\"margin-left:11%;\"><b>forward-char (C-f)</b></p>\n\n<p style=\"margin-left:22%;\">Move forward a character.</p>\n\n<p style=\"margin-left:11%;\"><b>backward-char (C-b)</b></p>\n\n<p style=\"margin-left:22%;\">Move back a character.</p>\n\n<p style=\"margin-left:11%;\"><b>forward-word (M-f)</b></p>\n\n<p style=\"margin-left:22%;\">Move forward to the end of the\nnext word. Words are composed of alphanumeric characters\n(letters and digits).</p>\n\n<p style=\"margin-left:11%;\"><b>backward-word (M-b)</b></p>\n\n<p style=\"margin-left:22%;\">Move back to the start of the\ncurrent or previous word. Words are composed of alphanumeric\ncharacters (letters and digits).</p>\n\n\n<p style=\"margin-left:11%;\"><b>previous-screen-line</b></p>\n\n<p style=\"margin-left:22%;\">Attempt to move point to the\nsame physical screen column on the previous physical screen\nline. This will not have the desired effect if the current\nReadline line does not take up more than one physical line\nor if point is not greater than the length of the prompt\nplus the screen width.</p>\n\n<p style=\"margin-left:11%;\"><b>next-screen-line</b></p>\n\n<p style=\"margin-left:22%;\">Attempt to move point to the\nsame physical screen column on the next physical screen\nline. This will not have the desired effect if the current\nReadline line does not take up more than one physical line\nor if the length of the current Readline line is not greater\nthan the length of the prompt plus the screen width.</p>\n\n<p style=\"margin-left:11%;\"><b>clear-display\n(M-C-l)</b></p>\n\n<p style=\"margin-left:22%;\">Clear the screen and, if\npossible, the terminal&rsquo;s scrollback buffer, then\nredraw the current line, leaving the current line at the top\nof the screen.</p>\n\n<p style=\"margin-left:11%;\"><b>clear-screen (C-l)</b></p>\n\n<p style=\"margin-left:22%;\">Clear the screen, then redraw\nthe current line, leaving the current line at the top of the\nscreen. With an argument, refresh the current line without\nclearing the screen.</p>\n\n<p style=\"margin-left:11%;\"><b>redraw-current-line</b></p>\n\n<p style=\"margin-left:22%;\">Refresh the current line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commands for\nManipulating the History <br>\naccept-line (Newline, Return)</b></p>\n\n<p style=\"margin-left:22%;\">Accept the line regardless of\nwhere the cursor is. If this line is non-empty, it may be\nadded to the history list for future recall with\n<b>add_history()</b>. If the line is a modified history\nline, the history line is restored to its original\nstate.</p>\n\n<p style=\"margin-left:11%;\"><b>previous-history\n(C-p)</b></p>\n\n<p style=\"margin-left:22%;\">Fetch the previous command from\nthe history list, moving back in the list.</p>\n\n<p style=\"margin-left:11%;\"><b>next-history (C-n)</b></p>\n\n<p style=\"margin-left:22%;\">Fetch the next command from the\nhistory list, moving forward in the list.</p>\n\n<p style=\"margin-left:11%;\"><b>beginning-of-history\n(M-&lt;)</b></p>\n\n<p style=\"margin-left:22%;\">Move to the first line in the\nhistory.</p>\n\n<p style=\"margin-left:11%;\"><b>end-of-history\n(M-&gt;)</b></p>\n\n<p style=\"margin-left:22%;\">Move to the end of the input\nhistory, i.e., the line currently being entered.</p>\n\n<p style=\"margin-left:11%;\"><b>reverse-search-history\n(C-r)</b></p>\n\n<p style=\"margin-left:22%;\">Search backward starting at the\ncurrent line and moving &rsquo;up&rsquo; through the history\nas necessary. This is an incremental search.</p>\n\n<p style=\"margin-left:11%;\"><b>forward-search-history\n(C-s)</b></p>\n\n<p style=\"margin-left:22%;\">Search forward starting at the\ncurrent line and moving &rsquo;down&rsquo; through the\nhistory as necessary. This is an incremental search.</p>\n\n\n<p style=\"margin-left:11%;\"><b>non-incremental-reverse-search-history\n(M-p)</b></p>\n\n<p style=\"margin-left:22%;\">Search backward through the\nhistory starting at the current line using a non-incremental\nsearch for a string supplied by the user.</p>\n\n\n<p style=\"margin-left:11%;\"><b>non-incremental-forward-search-history\n(M-n)</b></p>\n\n<p style=\"margin-left:22%;\">Search forward through the\nhistory using a non-incremental search for a string supplied\nby the user.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-search-backward</b></p>\n\n<p style=\"margin-left:22%;\">Search backward through the\nhistory for the string of characters between the start of\nthe current line and the current cursor position (the\n<i>point</i>). The search string must match at the beginning\nof a history line. This is a non-incremental search.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-search-forward</b></p>\n\n<p style=\"margin-left:22%;\">Search forward through the\nhistory for the string of characters between the start of\nthe current line and the point. The search string must match\nat the beginning of a history line. This is a\nnon-incremental search.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-substring-search-backward</b></p>\n\n<p style=\"margin-left:22%;\">Search backward through the\nhistory for the string of characters between the start of\nthe current line and the current cursor position (the\n<i>point</i>). The search string may match anywhere in a\nhistory line. This is a non-incremental search.</p>\n\n\n<p style=\"margin-left:11%;\"><b>history-substring-search-forward</b></p>\n\n<p style=\"margin-left:22%;\">Search forward through the\nhistory for the string of characters between the start of\nthe current line and the point. The search string may match\nanywhere in a history line. This is a non-incremental\nsearch.</p>\n\n<p style=\"margin-left:11%;\"><b>yank-nth-arg (M-C-y)</b></p>\n\n<p style=\"margin-left:22%;\">Insert the first argument to\nthe previous command (usually the second word on the\nprevious line) at point. With an argument <i>n</i>, insert\nthe <i>n</i>th word from the previous command (the words in\nthe previous command begin with word 0). A negative argument\ninserts the <i>n</i>th word from the end of the previous\ncommand. Once the argument <i>n</i> is computed, the\nargument is extracted as if the &quot;!<i>n</i>&quot;\nhistory expansion had been specified.</p>\n\n<p style=\"margin-left:11%;\"><b>yank-last-arg (M-.,\nM-_)</b></p>\n\n<p style=\"margin-left:22%;\">Insert the last argument to the\nprevious command (the last word of the previous history\nentry). With a numeric argument, behave exactly like\n<b>yank-nth-arg</b>. Successive calls to\n<b>yank-last-arg</b> move back through the history list,\ninserting the last word (or the word specified by the\nargument to the first call) of each line in turn. Any\nnumeric argument supplied to these successive calls\ndetermines the direction to move through the history. A\nnegative argument switches the direction through the history\n(back or forward). The history expansion facilities are used\nto extract the last argument, as if the &quot;!$&quot;\nhistory expansion had been specified.</p>\n\n<p style=\"margin-left:11%;\"><b>operate-and-get-next\n(C-o)</b></p>\n\n<p style=\"margin-left:22%;\">Accept the current line for\nreturn to the calling application as if a newline had been\nentered, and fetch the next line relative to the current\nline from the history for editing. A numeric argument, if\nsupplied, specifies the history entry to use instead of the\ncurrent line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Commands for\nChanging Text</b> <i><br>\nend-of-file</i> <b>(usually C-d)</b></p>\n\n<p style=\"margin-left:22%;\">The character indicating\nend-of-file as set, for example, by\n&rsquo;&rsquo;stty&rsquo;&rsquo;. If this character is read\nwhen there are no characters on the line, and point is at\nthe beginning of the line, Readline interprets it as the end\nof input and returns\n<b><small>EOF</small></b><small>.</small></p>\n\n<p style=\"margin-left:11%;\"><b>delete-char (C-d)</b></p>\n\n<p style=\"margin-left:22%;\">Delete the character at point.\nIf this function is bound to the same character as the tty\n<b>EOF</b> character, as <b>C-d</b> commonly is, see above\nfor the effects.</p>\n\n<p style=\"margin-left:11%;\"><b>backward-delete-char\n(Rubout)</b></p>\n\n<p style=\"margin-left:22%;\">Delete the character behind the\ncursor. When given a numeric argument, save the deleted text\non the kill ring.</p>\n\n\n<p style=\"margin-left:11%;\"><b>forward-backward-delete-char</b></p>\n\n<p style=\"margin-left:22%;\">Delete the character under the\ncursor, unless the cursor is at the end of the line, in\nwhich case the character behind the cursor is deleted.</p>\n\n<p style=\"margin-left:11%;\"><b>quoted-insert (C-q,\nC-v)</b></p>\n\n<p style=\"margin-left:22%;\">Add the next character that you\ntype to the line verbatim. This is how to insert characters\nlike <b>C-q</b>, for example.</p>\n\n<p style=\"margin-left:11%;\"><b>tab-insert (M-TAB)</b></p>\n\n<p style=\"margin-left:22%;\">Insert a tab character.</p>\n\n<p style=\"margin-left:11%;\"><b>self-insert\n(a,&nbsp;b,&nbsp;A,&nbsp;1,&nbsp;!,&nbsp;...)</b></p>\n\n<p style=\"margin-left:22%;\">Insert the character typed.</p>\n\n<p style=\"margin-left:11%;\"><b>transpose-chars\n(C-t)</b></p>\n\n<p style=\"margin-left:22%;\">Drag the character before point\nforward over the character at point, moving point forward as\nwell. If point is at the end of the line, then this\ntransposes the two characters before point. Negative\narguments have no effect.</p>\n\n<p style=\"margin-left:11%;\"><b>transpose-words\n(M-t)</b></p>\n\n<p style=\"margin-left:22%;\">Drag the word before point past\nthe word after point, moving point over that word as well.\nIf point is at the end of the line, this transposes the last\ntwo words on the line.</p>\n\n<p style=\"margin-left:11%;\"><b>upcase-word (M-u)</b></p>\n\n<p style=\"margin-left:22%;\">Uppercase the current (or\nfollowing) word. With a negative argument, uppercase the\nprevious word, but do not move point.</p>\n\n<p style=\"margin-left:11%;\"><b>downcase-word (M-l)</b></p>\n\n<p style=\"margin-left:22%;\">Lowercase the current (or\nfollowing) word. With a negative argument, lowercase the\nprevious word, but do not move point.</p>\n\n<p style=\"margin-left:11%;\"><b>capitalize-word\n(M-c)</b></p>\n\n<p style=\"margin-left:22%;\">Capitalize the current (or\nfollowing) word. With a negative argument, capitalize the\nprevious word, but do not move point.</p>\n\n<p style=\"margin-left:11%;\"><b>overwrite-mode</b></p>\n\n<p style=\"margin-left:22%;\">Toggle overwrite mode. With an\nexplicit positive numeric argument, switches to overwrite\nmode. With an explicit non-positive numeric argument,\nswitches to insert mode. This command affects only\n<b>emacs</b> mode; <b>vi</b> mode does overwrite\ndifferently. Each call to <i>readline()</i> starts in insert\nmode. In overwrite mode, characters bound to\n<b>self-insert</b> replace the text at point rather than\npushing the text to the right. Characters bound to\n<b>backward-delete-char</b> replace the character before\npoint with a space. By default, this command is unbound.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Killing and\nYanking <br>\nkill-line (C-k)</b></p>\n\n<p style=\"margin-left:22%;\">Kill the text from point to the\nend of the line.</p>\n\n<p style=\"margin-left:11%;\"><b>backward-kill-line (C-x\nRubout)</b></p>\n\n<p style=\"margin-left:22%;\">Kill backward to the beginning\nof the line.</p>\n\n<p style=\"margin-left:11%;\"><b>unix-line-discard\n(C-u)</b></p>\n\n<p style=\"margin-left:22%;\">Kill backward from point to the\nbeginning of the line. The killed text is saved on the\nkill-ring.</p>\n\n<p style=\"margin-left:11%;\"><b>kill-whole-line</b></p>\n\n<p style=\"margin-left:22%;\">Kill all characters on the\ncurrent line, no matter where point is.</p>\n\n<p style=\"margin-left:11%;\"><b>kill-word (M-d)</b></p>\n\n<p style=\"margin-left:22%;\">Kill from point the end of the\ncurrent word, or if between words, to the end of the next\nword. Word boundaries are the same as those used by\n<b>forward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>backward-kill-word\n(M-Rubout)</b></p>\n\n<p style=\"margin-left:22%;\">Kill the word behind point.\nWord boundaries are the same as those used by\n<b>backward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>unix-word-rubout\n(C-w)</b></p>\n\n<p style=\"margin-left:22%;\">Kill the word behind point,\nusing white space as a word boundary. The killed text is\nsaved on the kill-ring.</p>\n\n\n<p style=\"margin-left:11%;\"><b>unix-filename-rubout</b></p>\n\n<p style=\"margin-left:22%;\">Kill the word behind point,\nusing white space and the slash character as the word\nboundaries. The killed text is saved on the kill-ring.</p>\n\n<p style=\"margin-left:11%;\"><b>delete-horizontal-space\n(M-\\)</b></p>\n\n<p style=\"margin-left:22%;\">Delete all spaces and tabs\naround point.</p>\n\n<p style=\"margin-left:11%;\"><b>kill-region</b></p>\n\n<p style=\"margin-left:22%;\">Kill the text between the point\nand <i>mark</i> (saved cursor position). This text is\nreferred to as the <i>region</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>copy-region-as-kill</b></p>\n\n<p style=\"margin-left:22%;\">Copy the text in the region to\nthe kill buffer.</p>\n\n<p style=\"margin-left:11%;\"><b>copy-backward-word</b></p>\n\n<p style=\"margin-left:22%;\">Copy the word before point to\nthe kill buffer. The word boundaries are the same as\n<b>backward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>copy-forward-word</b></p>\n\n<p style=\"margin-left:22%;\">Copy the word following point\nto the kill buffer. The word boundaries are the same as\n<b>forward-word</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>yank (C-y)</b></p>\n\n<p style=\"margin-left:22%;\">Yank the top of the kill ring\ninto the buffer at point.</p>\n\n<p style=\"margin-left:11%;\"><b>yank-pop (M-y)</b></p>\n\n<p style=\"margin-left:22%;\">Rotate the kill ring, and yank\nthe new top. Only works following <b>yank</b> or\n<b>yank-pop</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Numeric\nArguments <br>\ndigit-argument (M-0, M-1, ..., M--)</b></p>\n\n<p style=\"margin-left:22%;\">Add this digit to the argument\nalready accumulating, or start a new argument. M-- starts a\nnegative argument.</p>\n\n<p style=\"margin-left:11%;\"><b>universal-argument</b></p>\n\n<p style=\"margin-left:22%;\">This is another way to specify\nan argument. If this command is followed by one or more\ndigits, optionally with a leading minus sign, those digits\ndefine the argument. If the command is followed by digits,\nexecuting <b>universal-argument</b> again ends the numeric\nargument, but is otherwise ignored. As a special case, if\nthis command is immediately followed by a character that is\nneither a digit or minus sign, the argument count for the\nnext command is multiplied by four. The argument count is\ninitially one, so executing this function the first time\nmakes the argument count four, a second time makes the\nargument count sixteen, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Completing\n<br>\ncomplete (TAB)</b></p>\n\n<p style=\"margin-left:22%;\">Attempt to perform completion\non the text before point. The actual completion performed is\napplication-specific. <b>Bash</b>, for instance, attempts\ncompletion treating the text as a variable (if the text\nbegins with <b>$</b>), username (if the text begins with\n<b>~</b>), hostname (if the text begins with <b>@</b>), or\ncommand (including aliases and functions) in turn. If none\nof these produces a match, filename completion is attempted.\n<b>Gdb</b>, on the other hand, allows completion of program\nfunctions and variables, and only attempts filename\ncompletion under certain circumstances.</p>\n\n<p style=\"margin-left:11%;\"><b>possible-completions\n(M-?)</b></p>\n\n<p style=\"margin-left:22%;\">List the possible completions\nof the text before point. When displaying completions,\nreadline sets the number of columns used for display to the\nvalue of <b>completion-display-width</b>, the value of the\nenvironment variable\n<b><small>COLUMNS</small></b><small>,</small> or the screen\nwidth, in that order.</p>\n\n<p style=\"margin-left:11%;\"><b>insert-completions\n(M-*)</b></p>\n\n<p style=\"margin-left:22%;\">Insert all completions of the\ntext before point that would have been generated by\n<b>possible-completions</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>menu-complete</b></p>\n\n<p style=\"margin-left:22%;\">Similar to <b>complete</b>, but\nreplaces the word to be completed with a single match from\nthe list of possible completions. Repeated execution of\n<b>menu-complete</b> steps through the list of possible\ncompletions, inserting each match in turn. At the end of the\nlist of completions, the bell is rung (subject to the\nsetting of <b>bell-style</b>) and the original text is\nrestored. An argument of <i>n</i> moves <i>n</i> positions\nforward in the list of matches; a negative argument may be\nused to move backward through the list. This command is\nintended to be bound to <b>TAB</b>, but is unbound by\ndefault.</p>\n\n\n<p style=\"margin-left:11%;\"><b>menu-complete-backward</b></p>\n\n<p style=\"margin-left:22%;\">Identical to\n<b>menu-complete</b>, but moves backward through the list of\npossible completions, as if <b>menu-complete</b> had been\ngiven a negative argument. This command is unbound by\ndefault.</p>\n\n<p style=\"margin-left:11%;\"><b>delete-char-or-list</b></p>\n\n<p style=\"margin-left:22%;\">Deletes the character under the\ncursor if not at the beginning or end of the line (like\n<b>delete-char</b>). If at the end of the line, behaves\nidentically to <b>possible-completions</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Keyboard\nMacros <br>\nstart-kbd-macro (C-x ()</b></p>\n\n<p style=\"margin-left:22%;\">Begin saving the characters\ntyped into the current keyboard macro.</p>\n\n<p style=\"margin-left:11%;\"><b>end-kbd-macro (C-x\n))</b></p>\n\n<p style=\"margin-left:22%;\">Stop saving the characters\ntyped into the current keyboard macro and store the\ndefinition.</p>\n\n<p style=\"margin-left:11%;\"><b>call-last-kbd-macro (C-x\ne)</b></p>\n\n<p style=\"margin-left:22%;\">Re-execute the last keyboard\nmacro defined, by making the characters in the macro appear\nas if typed at the keyboard.</p>\n\n<p style=\"margin-left:11%;\"><b>print-last-kbd-macro\n()</b></p>\n\n<p style=\"margin-left:22%;\">Print the last keyboard macro\ndefined in a format suitable for the <i>inputrc</i>\nfile.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Miscellaneous\n<br>\nre-read-init-file (C-x C-r)</b></p>\n\n<p style=\"margin-left:22%;\">Read in the contents of the\n<i>inputrc</i> file, and incorporate any bindings or\nvariable assignments found there.</p>\n\n<p style=\"margin-left:11%;\"><b>abort (C-g)</b></p>\n\n<p style=\"margin-left:22%;\">Abort the current editing\ncommand and ring the terminal&rsquo;s bell (subject to the\nsetting of <b>bell-style</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>do-lowercase-version (M-A,\nM-B, M-</b><i>x</i><b>, ...)</b></p>\n\n<p style=\"margin-left:22%;\">If the metafied character\n<i>x</i> is uppercase, run the command that is bound to the\ncorresponding metafied lowercase character. The behavior is\nundefined if <i>x</i> is already lowercase.</p>\n\n<p style=\"margin-left:11%;\"><b>prefix-meta (ESC)</b></p>\n\n<p style=\"margin-left:22%;\">Metafy the next character\ntyped. <b><small>ESC</small> f</b> is equivalent to\n<b>Meta-f</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>undo (C-_, C-x C-u)</b></p>\n\n<p style=\"margin-left:22%;\">Incremental undo, separately\nremembered for each line.</p>\n\n<p style=\"margin-left:11%;\"><b>revert-line (M-r)</b></p>\n\n<p style=\"margin-left:22%;\">Undo all changes made to this\nline. This is like executing the <b>undo</b> command enough\ntimes to return the line to its initial state.</p>\n\n<p style=\"margin-left:11%;\"><b>tilde-expand\n(M-&amp;)</b></p>\n\n<p style=\"margin-left:22%;\">Perform tilde expansion on the\ncurrent word.</p>\n\n<p style=\"margin-left:11%;\"><b>set-mark (C-@,\nM-&lt;space&gt;)</b></p>\n\n<p style=\"margin-left:22%;\">Set the mark to the point. If a\nnumeric argument is supplied, the mark is set to that\nposition.</p>\n\n<p style=\"margin-left:11%;\"><b>exchange-point-and-mark (C-x\nC-x)</b></p>\n\n<p style=\"margin-left:22%;\">Swap the point with the mark.\nThe current cursor position is set to the saved position,\nand the old cursor position is saved as the mark.</p>\n\n<p style=\"margin-left:11%;\"><b>character-search\n(C-])</b></p>\n\n<p style=\"margin-left:22%;\">A character is read and point\nis moved to the next occurrence of that character. A\nnegative count searches for previous occurrences.</p>\n\n<p style=\"margin-left:11%;\"><b>character-search-backward\n(M-C-])</b></p>\n\n<p style=\"margin-left:22%;\">A character is read and point\nis moved to the previous occurrence of that character. A\nnegative count searches for subsequent occurrences.</p>\n\n<p style=\"margin-left:11%;\"><b>skip-csi-sequence</b></p>\n\n<p style=\"margin-left:22%;\">Read enough characters to\nconsume a multi-key sequence such as those defined for keys\nlike Home and End. Such sequences begin with a Control\nSequence Indicator (CSI), usually ESC-[. If this sequence is\nbound to &quot;\\[&quot;, keys producing such sequences will\nhave no effect unless explicitly bound to a readline\ncommand, instead of inserting stray characters into the\nediting buffer. This is unbound by default, but usually\nbound to ESC-[.</p>\n\n<p style=\"margin-left:11%;\"><b>insert-comment (M-#)</b></p>\n\n<p style=\"margin-left:22%;\">Without a numeric argument, the\nvalue of the readline <b>comment-begin</b> variable is\ninserted at the beginning of the current line. If a numeric\nargument is supplied, this command acts as a toggle: if the\ncharacters at the beginning of the line do not match the\nvalue of <b>comment-begin</b>, the value is inserted,\notherwise the characters in <b>comment-begin</b> are deleted\nfrom the beginning of the line. In either case, the line is\naccepted as if a newline had been typed. The default value\nof <b>comment-begin</b> makes the current line a shell\ncomment. If a numeric argument causes the comment character\nto be removed, the line will be executed by the shell.</p>\n\n<p style=\"margin-left:11%;\"><b>dump-functions</b></p>\n\n<p style=\"margin-left:22%;\">Print all of the functions and\ntheir key bindings to the readline output stream. If a\nnumeric argument is supplied, the output is formatted in\nsuch a way that it can be made part of an <i>inputrc</i>\nfile.</p>\n\n<p style=\"margin-left:11%;\"><b>dump-variables</b></p>\n\n<p style=\"margin-left:22%;\">Print all of the settable\nvariables and their values to the readline output stream. If\na numeric argument is supplied, the output is formatted in\nsuch a way that it can be made part of an <i>inputrc</i>\nfile.</p>\n\n<p style=\"margin-left:11%;\"><b>dump-macros</b></p>\n\n<p style=\"margin-left:22%;\">Print all of the readline key\nsequences bound to macros and the strings they output. If a\nnumeric argument is supplied, the output is formatted in\nsuch a way that it can be made part of an <i>inputrc</i>\nfile.</p>\n\n<p style=\"margin-left:11%;\"><b>emacs-editing-mode\n(C-e)</b></p>\n\n<p style=\"margin-left:22%;\">When in <b>vi</b> command mode,\nthis causes a switch to <b>emacs</b> editing mode.</p>\n\n<p style=\"margin-left:11%;\"><b>vi-editing-mode\n(M-C-j)</b></p>\n\n<p style=\"margin-left:22%;\">When in <b>emacs</b> editing\nmode, this causes a switch to <b>vi</b> editing mode.</p>\n\n<h2>DEFAULT KEY BINDINGS\n<a name=\"DEFAULT KEY BINDINGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nis a list of the default emacs and vi bindings. Characters\nwith the eighth bit set are written as M-&lt;character&gt;,\nand are referred to as <i>metafied</i> characters. The\nprintable ASCII characters not mentioned in the list of\nemacs standard bindings are bound to the <b>self-insert</b>\nfunction, which just inserts the given character into the\ninput line. In vi insertion mode, all characters not\nspecifically mentioned are bound to <b>self-insert</b>.\nCharacters assigned to signal generation by <i>stty</i>(1)\nor the terminal driver, such as C-Z or C-C, retain that\nfunction. Upper and lower case metafied characters are bound\nto the same function in the emacs mode meta keymap. The\nremaining characters are unbound, which causes readline to\nring the bell (subject to the setting of the\n<b>bell-style</b> variable).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Emacs\nMode</b></p>\n\n<p style=\"margin-left:20%;\">Emacs Standard bindings</p>\n\n\n<p style=\"margin-left:20%; margin-top: 1em\">&quot;C-@&quot;\nset-mark <br>\n&quot;C-A&quot; beginning-of-line <br>\n&quot;C-B&quot; backward-char <br>\n&quot;C-D&quot; delete-char <br>\n&quot;C-E&quot; end-of-line <br>\n&quot;C-F&quot; forward-char <br>\n&quot;C-G&quot; abort <br>\n&quot;C-H&quot; backward-delete-char <br>\n&quot;C-I&quot; complete <br>\n&quot;C-J&quot; accept-line <br>\n&quot;C-K&quot; kill-line <br>\n&quot;C-L&quot; clear-screen <br>\n&quot;C-M&quot; accept-line <br>\n&quot;C-N&quot; next-history <br>\n&quot;C-P&quot; previous-history <br>\n&quot;C-Q&quot; quoted-insert <br>\n&quot;C-R&quot; reverse-search-history <br>\n&quot;C-S&quot; forward-search-history <br>\n&quot;C-T&quot; transpose-chars <br>\n&quot;C-U&quot; unix-line-discard <br>\n&quot;C-V&quot; quoted-insert <br>\n&quot;C-W&quot; unix-word-rubout <br>\n&quot;C-Y&quot; yank <br>\n&quot;C-]&quot; character-search <br>\n&quot;C-_&quot; undo <br>\n&quot; &quot; to &quot;/&quot; self-insert <br>\n&quot;0&quot; to &quot;9&quot; self-insert <br>\n&quot;:&quot; to &quot;~&quot; self-insert <br>\n&quot;C-?&quot; backward-delete-char</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">Emacs Meta\nbindings</p>\n\n\n<p style=\"margin-left:20%; margin-top: 1em\">&quot;M-C-G&quot;\nabort <br>\n&quot;M-C-H&quot; backward-kill-word <br>\n&quot;M-C-I&quot; tab-insert <br>\n&quot;M-C-J&quot; vi-editing-mode <br>\n&quot;M-C-L&quot; clear-display <br>\n&quot;M-C-M&quot; vi-editing-mode <br>\n&quot;M-C-R&quot; revert-line <br>\n&quot;M-C-Y&quot; yank-nth-arg <br>\n&quot;M-C-[&quot; complete <br>\n&quot;M-C-]&quot; character-search-backward <br>\n&quot;M-space&quot; set-mark <br>\n&quot;M-#&quot; insert-comment <br>\n&quot;M-&amp;&quot; tilde-expand <br>\n&quot;M-*&quot; insert-completions <br>\n&quot;M--&quot; digit-argument <br>\n&quot;M-.&quot; yank-last-arg <br>\n&quot;M-0&quot; digit-argument <br>\n&quot;M-1&quot; digit-argument <br>\n&quot;M-2&quot; digit-argument <br>\n&quot;M-3&quot; digit-argument <br>\n&quot;M-4&quot; digit-argument <br>\n&quot;M-5&quot; digit-argument <br>\n&quot;M-6&quot; digit-argument <br>\n&quot;M-7&quot; digit-argument <br>\n&quot;M-8&quot; digit-argument <br>\n&quot;M-9&quot; digit-argument <br>\n&quot;M-&lt;&quot; beginning-of-history <br>\n&quot;M-=&quot; possible-completions <br>\n&quot;M-&gt;&quot; end-of-history <br>\n&quot;M-?&quot; possible-completions <br>\n&quot;M-B&quot; backward-word <br>\n&quot;M-C&quot; capitalize-word <br>\n&quot;M-D&quot; kill-word <br>\n&quot;M-F&quot; forward-word <br>\n&quot;M-L&quot; downcase-word <br>\n&quot;M-N&quot; non-incremental-forward-search-history <br>\n&quot;M-P&quot; non-incremental-reverse-search-history <br>\n&quot;M-R&quot; revert-line <br>\n&quot;M-T&quot; transpose-words <br>\n&quot;M-U&quot; upcase-word <br>\n&quot;M-Y&quot; yank-pop <br>\n&quot;M-\\&quot; delete-horizontal-space <br>\n&quot;M-~&quot; tilde-expand <br>\n&quot;M-C-?&quot; backward-kill-word <br>\n&quot;M-_&quot; yank-last-arg</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">Emacs Control-X\nbindings</p>\n\n\n<p style=\"margin-left:20%; margin-top: 1em\">&quot;C-XC-G&quot;\nabort <br>\n&quot;C-XC-R&quot; re-read-init-file <br>\n&quot;C-XC-U&quot; undo <br>\n&quot;C-XC-X&quot; exchange-point-and-mark <br>\n&quot;C-X(&quot; start-kbd-macro <br>\n&quot;C-X)&quot; end-kbd-macro <br>\n&quot;C-XE&quot; call-last-kbd-macro <br>\n&quot;C-XC-?&quot; backward-kill-line</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>VI Mode\nbindings</b></p>\n\n<p style=\"margin-left:20%;\">VI Insert Mode functions</p>\n\n\n<p style=\"margin-left:20%; margin-top: 1em\">&quot;C-D&quot;\nvi-eof-maybe <br>\n&quot;C-H&quot; backward-delete-char <br>\n&quot;C-I&quot; complete <br>\n&quot;C-J&quot; accept-line <br>\n&quot;C-M&quot; accept-line <br>\n&quot;C-R&quot; reverse-search-history <br>\n&quot;C-S&quot; forward-search-history <br>\n&quot;C-T&quot; transpose-chars <br>\n&quot;C-U&quot; unix-line-discard <br>\n&quot;C-V&quot; quoted-insert <br>\n&quot;C-W&quot; unix-word-rubout <br>\n&quot;C-Y&quot; yank <br>\n&quot;C-[&quot; vi-movement-mode <br>\n&quot;C-_&quot; undo <br>\n&quot; &quot; to &quot;~&quot; self-insert <br>\n&quot;C-?&quot; backward-delete-char</p>\n\n<p style=\"margin-left:20%; margin-top: 1em\">VI Command Mode\nfunctions</p>\n\n\n<p style=\"margin-left:20%; margin-top: 1em\">&quot;C-D&quot;\nvi-eof-maybe <br>\n&quot;C-E&quot; emacs-editing-mode <br>\n&quot;C-G&quot; abort <br>\n&quot;C-H&quot; backward-char <br>\n&quot;C-J&quot; accept-line <br>\n&quot;C-K&quot; kill-line <br>\n&quot;C-L&quot; clear-screen <br>\n&quot;C-M&quot; accept-line <br>\n&quot;C-N&quot; next-history <br>\n&quot;C-P&quot; previous-history <br>\n&quot;C-Q&quot; quoted-insert <br>\n&quot;C-R&quot; reverse-search-history <br>\n&quot;C-S&quot; forward-search-history <br>\n&quot;C-T&quot; transpose-chars <br>\n&quot;C-U&quot; unix-line-discard <br>\n&quot;C-V&quot; quoted-insert <br>\n&quot;C-W&quot; unix-word-rubout <br>\n&quot;C-Y&quot; yank <br>\n&quot;C-_&quot; vi-undo <br>\n&quot; &quot; forward-char <br>\n&quot;#&quot; insert-comment <br>\n&quot;$&quot; end-of-line <br>\n&quot;%&quot; vi-match <br>\n&quot;&amp;&quot; vi-tilde-expand <br>\n&quot;*&quot; vi-complete <br>\n&quot;+&quot; next-history <br>\n&quot;,&quot; vi-char-search <br>\n&quot;-&quot; previous-history <br>\n&quot;.&quot; vi-redo <br>\n&quot;/&quot; vi-search <br>\n&quot;0&quot; beginning-of-line <br>\n&quot;1&quot; to &quot;9&quot; vi-arg-digit <br>\n&quot;;&quot; vi-char-search <br>\n&quot;=&quot; vi-complete <br>\n&quot;?&quot; vi-search <br>\n&quot;A&quot; vi-append-eol <br>\n&quot;B&quot; vi-prev-word <br>\n&quot;C&quot; vi-change-to <br>\n&quot;D&quot; vi-delete-to <br>\n&quot;E&quot; vi-end-word <br>\n&quot;F&quot; vi-char-search <br>\n&quot;G&quot; vi-fetch-history <br>\n&quot;I&quot; vi-insert-beg <br>\n&quot;N&quot; vi-search-again <br>\n&quot;P&quot; vi-put <br>\n&quot;R&quot; vi-replace <br>\n&quot;S&quot; vi-subst <br>\n&quot;T&quot; vi-char-search <br>\n&quot;U&quot; revert-line <br>\n&quot;W&quot; vi-next-word <br>\n&quot;X&quot; backward-delete-char <br>\n&quot;Y&quot; vi-yank-to <br>\n&quot;\\&quot; vi-complete <br>\n&quot;^&quot; vi-first-print <br>\n&quot;_&quot; vi-yank-arg <br>\n&quot;&rsquo;&quot; vi-goto-mark <br>\n&quot;a&quot; vi-append-mode <br>\n&quot;b&quot; vi-prev-word <br>\n&quot;c&quot; vi-change-to <br>\n&quot;d&quot; vi-delete-to <br>\n&quot;e&quot; vi-end-word <br>\n&quot;f&quot; vi-char-search <br>\n&quot;h&quot; backward-char <br>\n&quot;i&quot; vi-insertion-mode <br>\n&quot;j&quot; next-history <br>\n&quot;k&quot; prev-history <br>\n&quot;l&quot; forward-char <br>\n&quot;m&quot; vi-set-mark <br>\n&quot;n&quot; vi-search-again <br>\n&quot;p&quot; vi-put <br>\n&quot;r&quot; vi-change-char <br>\n&quot;s&quot; vi-subst <br>\n&quot;t&quot; vi-char-search <br>\n&quot;u&quot; vi-undo <br>\n&quot;w&quot; vi-next-word <br>\n&quot;x&quot; vi-delete <br>\n&quot;y&quot; vi-yank-to <br>\n&quot;|&quot; vi-column <br>\n&quot;~&quot; vi-change-case</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>The Gnu\nReadline Library</i>, Brian Fox and Chet Ramey <i><br>\nThe Gnu History Library</i>, Brian Fox and Chet Ramey\n<i><br>\nbash</i>(1)</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>~/.inputrc</i></p>\n\n<p style=\"margin-left:22%;\">Individual <b>readline</b>\ninitialization file</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Brian Fox, Free\nSoftware Foundation <br>\nbfox@gnu.org</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Chet Ramey,\nCase Western Reserve University <br>\nchet.ramey@case.edu</p>\n\n<h2>BUG REPORTS\n<a name=\"BUG REPORTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you find a\nbug in <b>readline,</b> you should report it. But first, you\nshould make sure that it really is a bug, and that it\nappears in the latest version of the <b>readline</b> library\nthat you have.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once you have\ndetermined that a bug actually exists, mail a bug report to\n<i>bug-readline</i>@<i>gnu.org</i>. If you have a fix, you\nare welcome to mail that as well! Suggestions and\n&rsquo;philosophical&rsquo; bug reports may be mailed to\n<i>bug-readline</i>@<i>gnu.org</i> or posted to the Usenet\nnewsgroup <b>gnu.bash.bug</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Comments and\nbug reports concerning this manual page should be directed\nto <i>chet.ramey@case.edu</i>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">It&rsquo;s too\nbig and too slow.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#NOTATION\">NOTATION</a>","<a href=\"#INITIALIZATION FILE\">INITIALIZATION FILE</a>","<a href=\"#SEARCHING\">SEARCHING</a>","<a href=\"#EDITING COMMANDS\">EDITING COMMANDS</a>","<a href=\"#DEFAULT KEY BINDINGS\">DEFAULT KEY BINDINGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#BUG REPORTS\">BUG REPORTS</a>","<a href=\"#BUGS\">BUGS</a>"],"level":3}