{"name":"html::linkextor","description":"HTML::LinkExtor\n- Extract links from an HTML document","body":"\n\n<h1 align=\"center\">HTML::LinkExtor</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::LinkExtor\n- Extract links from an HTML document</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">require\nHTML::LinkExtor; <br>\n$p = HTML::LinkExtor-&gt;new(\\&amp;cb,\n&quot;http://www.perl.org/&quot;); <br>\nsub cb { <br>\nmy($tag, %links) = @_; <br>\nprint &quot;$tag @{[%links]}\\n&quot;; <br>\n} <br>\n$p-&gt;parse_file(&quot;index.html&quot;);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>HTML::LinkExtor</i>\nis an <small>HTML</small> parser that extracts links from an\n<small>HTML</small> document. The <i>HTML::LinkExtor</i> is\na subclass of <i>HTML::Parser</i>. This means that the\ndocument should be given to the parser by calling the\n$p-&gt;<b>parse()</b> or $p-&gt;<b>parse_file()</b> methods.\n<br>\n$p = HTML::LinkExtor-&gt;new <br>\n$p = HTML::LinkExtor-&gt;new( $callback ) <br>\n$p = HTML::LinkExtor-&gt;new( $callback, $base )</p>\n\n<p style=\"margin-left:17%;\">The constructor takes two\noptional arguments. The first is a reference to a callback\nroutine. It will be called as links are found. If a callback\nis not provided, then links are just accumulated internally\nand can be retrieved by calling the $p-&gt;<b>links()</b>\nmethod.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $base\nargument is an optional base <small>URL</small> used to\nabsolutize all URLs found. You need to have the\n<i><small>URI</small></i> module installed if you provide\n$base.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback is\ncalled with the lowercase tag name as first argument, and\nthen all link attributes as separate key/value pairs. All\nnon-link attributes are removed.</p>\n\n<p style=\"margin-left:11%;\">$p-&gt;links</p>\n\n<p style=\"margin-left:17%;\">Returns a list of all links\nfound in the document. The returned values will be anonymous\narrays with the following elements:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[$tag, $attr\n=&gt; $url1, $attr2 =&gt; $url2,...]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n$p-&gt;links method will also truncate the internal link\nlist. This means that if the method is called twice without\nany parsing between them the second call will return an\nempty list.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Also note that\n$p-&gt;links will always be empty if a callback routine was\nprovided when the <i>HTML::LinkExtor</i> was created.</p>\n\n<h2>EXAMPLE\n<a name=\"EXAMPLE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is an\nexample showing how you can extract links from a document\nreceived using <small>LWP:</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::UserAgent; <br>\nuse HTML::LinkExtor; <br>\nuse URI::URL; <br>\n$url = &quot;http://www.perl.org/&quot;; # for instance <br>\n$ua = LWP::UserAgent-&gt;new; <br>\n# Set up a callback that collect image links <br>\nmy @imgs = (); <br>\nsub callback { <br>\nmy($tag, %attr) = @_; <br>\nreturn if $tag ne 'img'; # we only look closer at &lt;img\n...&gt; <br>\npush(@imgs, values %attr); <br>\n} <br>\n# Make the parser. Unfortunately, we don't know the base yet\n<br>\n# (it might be different from $url) <br>\n$p = HTML::LinkExtor-&gt;new(\\&amp;callback); <br>\n# Request document and parse it as it arrives <br>\n$res = $ua-&gt;request(HTTP::Request-&gt;new(GET =&gt;\n$url), <br>\nsub {$p-&gt;parse($_[0])}); <br>\n# Expand all image URLs to absolute ones <br>\nmy $base = $res-&gt;base; <br>\n@imgs = map { $_ = url($_, $base)-&gt;abs; } @imgs; <br>\n# Print them out <br>\nprint join(&quot;\\n&quot;, @imgs), &quot;\\n&quot;;</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::Parser,\nHTML::Tagset, <small>LWP</small> ,\n<small>URI::URL</small></p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1996-2001 Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLE\">EXAMPLE</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}