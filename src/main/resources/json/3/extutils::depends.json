{"name":"extutils::depends","body":"\n\n<h1 align=\"center\">ExtUtils::Depends</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ExtUtils::Depends\n- Easily build XS extensions that depend on XS\nextensions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nExtUtils::Depends; <br>\n$package = new ExtUtils::Depends ('pkg::name',\n'base::package') <br>\n# set the flags and libraries to compile and link the module\n<br>\n$package-&gt;set_inc(&quot;-I/opt/blahblah&quot;); <br>\n$package-&gt;set_libs(&quot;-lmylib&quot;); <br>\n# add a .c and an .xs file to compile <br>\n$package-&gt;add_c('code.c'); <br>\n$package-&gt;add_xs('module-code.xs'); <br>\n# add the typemaps to use <br>\n$package-&gt;add_typemaps(&quot;typemap&quot;); <br>\n# install some extra data files and headers <br>\n$package-&gt;install (qw/foo.h data.txt/); <br>\n# save the info <br>\n$package-&gt;save_config('Files.pm'); <br>\nWriteMakefile( <br>\n'NAME' =&gt; 'Mymodule', <br>\n$package-&gt;get_makefile_vars() <br>\n);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\ntries to make it easy to build Perl extensions that use\nfunctions and typemaps provided by other perl extensions.\nThis means that a perl extension is treated like a shared\nlibrary that provides also a C and an <small>XS</small>\ninterface besides the perl one.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This works as\nlong as the base extension is loaded with the\n<small>RTLD_GLOBAL</small> flag (usually done with a</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub\ndl_load_flags {0x01}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">in the main .pm\nfile) if you need to use functions defined in the\nmodule.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The basic\nscheme of operation is to collect information about a module\nin the instance, and then store that data in the Perl\nlibrary where it may be retrieved later. The object can also\nreformat this information into the data structures required\nby ExtUtils::MakeMaker&rsquo;s WriteMakefile function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For information\non how to make your module fit into this scheme, see\n&quot;hashref = ExtUtils::Depends::load (name)&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When creating a\nnew Depends object, you give it a name, which is the name of\nthe module you are building. You can also specify the names\nof modules on which this module depends. These dependencies\nwill be loaded automatically, and their typemaps, header\nfiles, etc merged with your new object&rsquo;s stuff. When\nyou store the data for your object, the list of dependencies\nare stored with it, so that another module depending on your\nneedn&rsquo;t know on exactly which modules yours\ndepends.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gtk2 depends on\nGlib <br>\nGnome2::Canvas depends on Gtk2 <br>\nExtUtils::Depends-&gt;new ('Gnome2::Canvas', 'Gtk2'); <br>\nthis command automatically brings in all the stuff needed\n<br>\nfor Glib, since Gtk2 depends on it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\nconfiguration information is saved, it also includes a class\nmethod called &quot;Inline&quot;, inheritable by your\nmodule. This allows you in your module to simply say at the\ntop:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">package Mymod;\n<br>\nuse parent 'Mymod::Install::Files'; # to inherit 'Inline'\nmethod</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">And users of\n&quot;Mymod&quot; who want to write inline code (using\nInline) will simply be able to write:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Inline with\n=&gt; 'Mymod';</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">And all the\nnecessary header files, defines, and libraries will be added\nfor them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;Mymod::Install::Files&quot; will also implement a\n&quot;deps&quot; method, which will return a list of any\nmodules that &quot;Mymod&quot; depends on - you will not\nnormally need to use this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">require\nMymod::Install::Files; <br>\n@deps = Mymod::Install::Files-&gt;deps;</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$object =\nExtUtils::Depends-&gt;new($name, @deps)</p>\n\n<p style=\"margin-left:17%;\">Create a new depends object\nnamed <i>$name</i>. Any modules listed in <i>@deps</i>\n(which may be empty) are added as dependencies and their\ndependency information is loaded. An exception is raised if\nany dependency information cannot be loaded.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;add_deps\n(@deps)</p>\n\n<p style=\"margin-left:17%;\">Add modules listed in\n<i>@deps</i> as dependencies.</p>\n\n<p style=\"margin-left:11%;\">(hashes) =\n$depends-&gt;get_deps</p>\n\n<p style=\"margin-left:17%;\">Fetch information on the\ndependencies of <i>$depends</i> as a hash of hashes, which\nare dependency information indexed by module name. See\n&quot;load&quot;.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;set_inc\n(@newinc)</p>\n\n<p style=\"margin-left:17%;\">Add strings to the includes or\ncflags variables.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;set_libs\n(@newlibs)</p>\n\n<p style=\"margin-left:17%;\">Add strings to the libs (linker\nflags) variable.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;add_pm\n(%pm_files)</p>\n\n<p style=\"margin-left:17%;\">Add files to the hash to be\npassed through ExtUtils::WriteMakefile&rsquo;s\n<small>PM</small> key.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;add_xs\n(@xs_files)</p>\n\n<p style=\"margin-left:17%;\">Add xs files to be\ncompiled.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;add_c\n(@c_files)</p>\n\n<p style=\"margin-left:17%;\">Add C files to be compiled.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;add_typemaps\n(@typemaps)</p>\n\n<p style=\"margin-left:17%;\">Add typemap files to be used\nand installed.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;add_headers\n(list)</p>\n\n<p style=\"margin-left:17%;\">No-op, for backward\ncompatibility.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;install\n(@files)</p>\n\n<p style=\"margin-left:17%;\">Install <i>@files</i> to the\ndata directory for <i>$depends</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This actually\nworks by adding them to the hash of pm files that gets\npassed through WriteMakefile&rsquo;s <small>PM</small>\nkey.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;save_config\n($filename)</p>\n\n<p style=\"margin-left:17%;\">Save the important information\nfrom <i>$depends</i> to <i>$filename</i>, and set it up to\nbe installed as <i>name</i>::Install::Files.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: the\nactual value of <i>$filename</i> is unimportant so long as\nit doesn&rsquo;t clash with any other local files. It will\nbe installed as <i>name</i>::Install::Files.</p>\n\n<p style=\"margin-left:11%;\">hash =\n$depends-&gt;get_makefile_vars</p>\n\n<p style=\"margin-left:17%;\">Return the information in\n<i>$depends</i> in a format digestible by WriteMakefile.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This sets at\nleast the following keys:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">INC <br>\nLIBS <br>\nTYPEMAPS <br>\nPM</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">And these if\nthere is data to fill them:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">clean <br>\nOBJECT <br>\nXS</p>\n\n<p style=\"margin-left:11%;\">hashref =\nExtUtils::Depends::load (name)</p>\n\n<p style=\"margin-left:17%;\">Load and return dependency\ninformation for <i>name</i>. Croaks if no such information\ncan be found. The information is returned as an anonymous\nhash containing these keys: <br>\ninstpath</p>\n\n<p style=\"margin-left:23%;\">The absolute path to the data\ninstall directory for this module.</p>\n\n<p style=\"margin-left:17%;\">typemaps</p>\n\n<p style=\"margin-left:23%;\">List of absolute pathnames for\nthis module&rsquo;s typemap files.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>inc</p></td>\n<td width=\"1%\"></td>\n<td width=\"46%\">\n\n\n<p><small>CFLAGS</small> string for this module.</p></td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">libs</p>\n\n<p style=\"margin-left:23%;\"><small>LIBS</small> string for\nthis module.</p>\n\n<p style=\"margin-left:17%;\">deps</p>\n\n<p style=\"margin-left:23%;\">List of modules on which this\none depends. This key will not exist when loading files\ncreated by old versions of ExtUtils::Depends.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nmake module <i>name</i> support this, you must provide a\nmodule <i>name</i>::Install::Files, which on loading will\nimplement the following class methods:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$hashref =\nname::Install::Files-&gt;Inline('C'); <br>\n# hash to contain any necessary TYPEMAPS (array-ref), LIBS,\nINC <br>\n@deps = name::Install::Files-&gt;deps; <br>\n# any modules on which &quot;name&quot; depends</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">An easy way to\nachieve this is to use the method\n&quot;$depends-&gt;save_config ($filename)&quot;, but your\npackage may have different facilities already.</p>\n\n<p style=\"margin-left:11%;\">$depends-&gt;load_deps</p>\n\n<p style=\"margin-left:17%;\">Load <i>$depends</i>\ndependencies, by calling &quot;load&quot; on each dependency\nmodule. This is usually done for you, and should only be\nneeded if you want to call &quot;get_deps&quot; after\ncalling &quot;add_deps&quot; manually.</p>\n\n<h2>SUPPORT\n<a name=\"SUPPORT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bugs/Feature\nRequests</b> <br>\nVersion 0.2 discards some of the more esoteric features\nprovided by the older versions. As they were completely\nundocumented, and this module has yet to reach 1.0, this may\nnot exactly be a bug.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\ntightly coupled to the ExtUtils::MakeMaker architecture.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can submit\nnew bugs/feature requests by using one of two bug trackers\n(below). <small><br>\nCPAN</small> Request Tracker</p>\n\n<p style=\"margin-left:17%;\">You can submit bugs/feature\nrequests via the web by going to\n&lt;https://rt.cpan.org/Public/Bug/Report.html?Queue=ExtUtils-Depends&gt;\n(requires <small>PAUSE ID</small> or Bitcard), or by sending\nan e-mail to &quot;bug-ExtUtils-Depends at\nrt.cpan.org&quot;.</p>\n\n<p style=\"margin-left:11%;\">Gnome.org Bugzilla</p>\n\n<p style=\"margin-left:17%;\">Report bugs/feature requests to\nthe &rsquo;gnome-perl&rsquo; product (requires login)\n&lt;http://bugzilla.gnome.org/enter_bug.cgi?product=gnome-perl&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Patches that\nimplement new features with test cases, and/or test cases\nthat exercise existing bugs are always welcome.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Gtk-Perl\nmailing list is at &quot;gtk-perl-list at gnome dot\norg&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Source\nCode</b> <br>\nThe source code to ExtUtils::Depends is available at the\nGnome.org Git repo\n(&lt;https://git.gnome.org/browse/perl-ExtUtils-Depends/&gt;).\nCreate your own copy of the Git repo with:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">git clone\ngit://git.gnome.org/perl-ExtUtils-Depends (Git protocol)\n<br>\ngit clone\nhttps://git.gnome.org/browse/perl-ExtUtils-Depends/\n(HTTPS)</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ExtUtils::MakeMaker.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Paolo Molaro\n&lt;lupus at debian dot org&gt; wrote the original version\nfor Gtk-Perl. muppet &lt;scott at asofyet dot org&gt;\nrewrote the innards for version 0.2, borrowing liberally\nfrom Paolo&rsquo;s code.</p>\n\n<h2>MAINTAINER\n<a name=\"MAINTAINER\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Gtk2\nproject, &lt;http://gtk2-perl.sf.net&gt;/&quot;gtk-perl-list\nat gnome dot org&quot;.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you may redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SUPPORT\">SUPPORT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#MAINTAINER\">MAINTAINER</a>","<a href=\"#LICENSE\">LICENSE</a>"],"level":3}