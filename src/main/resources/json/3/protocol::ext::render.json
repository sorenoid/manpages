{"name":"protocol::ext::render","body":"\n\n<h1 align=\"center\">Protocol::Ext::RENDER</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">X11::Protocol::Ext::RENDER\n- Perl module for the X Rendering Extension</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nX11::Protocol; <br>\n$x = X11::Protocol-&gt;new($ENV{'DISPLAY'}); <br>\n$x-&gt;init_extension('RENDER') or die;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>RENDER</small> extension adds a new set of drawing\nprimitives which effectively represent a replacement of the\ndrawing routines in the core protocol, redesigned based on\nthe needs of more modern clients. It adds long-desired\nfeatures such as subpixel positioning, alpha compositing,\ndirect specification of colors, and multicolored or animated\ncursors. On the other hand, it omits features that are no\nlonger commonly used: wide lines, arbitrary polygons (only\ntriangles and horizontally-aligned trapezoids are\nsupported), ellipses, bitwise rendering operations, and\nserver-side fonts (in favor of &quot;glyphs&quot; that are\nrendered on the client side and transmitted once).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As of this\nwriting (early 2004), the specification and implementation\nboth have rough edges, but there are relatively few\nalternatives for offloading fancy graphics processing to the\nserver, as is necessary over slow links or if the client is\nwritten in a slow language. Another possibility you might\nconsider is the 2D subset of OpenGL, though it doesn&rsquo;t\nyet have an X11::Protocol-compatible interface.</p>\n\n<h2>SYMBOLIC CONSTANTS\n<a name=\"SYMBOLIC CONSTANTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This extension\nadds the constant types &rsquo;PictType&rsquo;,\n&rsquo;PictOp&rsquo;, &rsquo;SubPixel&rsquo;,\n&rsquo;PolyEdge&rsquo;, and &rsquo;PolyMode&rsquo;, with\nvalues as defined in the standard.</p>\n\n<h2>REQUESTS\n<a name=\"REQUESTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This extension\nadds several requests, called as shown below:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$x-&gt;RenderQueryVersion($major,\n$minor) <br>\n=&gt; <br>\n($major, $minor) <br>\n$x-&gt;RenderQueryPictFormats() <br>\n=&gt; <br>\n([[$id, $type, $depth, <br>\n$red, $red_m, $green, $green_m, $blue, $blue_m, <br>\n$alpha, $alpha_m, $cmap], ...], <br>\n[[$fallback, [$depth, [$visual, $format], ...], ...], ...],\n<br>\n[$subpixel, ...]) <br>\n$x-&gt;RenderQueryPictIndexValues($pict_format) <br>\n=&gt; <br>\n([$index, $red, $green, $blue, $alpha], ...) <br>\n$x-&gt;RenderQueryFilters($drawable) <br>\n=&gt; <br>\n([@filters], [@aliases]) <br>\n$x-&gt;RenderCreatePicture($picture, $drawable, $format,\n<br>\n'attribute' =&gt; $value, ...) <br>\n$x-&gt;RenderChangePicture($picture, 'attribute' =&gt;\n$value, ...) <br>\n$x-&gt;RenderSetPictureClipRectangles($pic, $x_origin,\n$y_origin, <br>\n[$x, $y, $width, $height], ...) <br>\n$x-&gt;RenderSetPictureTransform($pict, $m11, $m12, $m13,\n<br>\n$m21, $m22, $m23, <br>\n$m31, $m32, $m33); <br>\n$x-&gt;RenderSetPictureFilter($pict, $filter, @args) <br>\n$x-&gt;RenderComposite($op, $src, $mask, $dst, $src_x,\n$src_y, <br>\n$mask_x, $mask_y, $dst_x, $dst_y, <br>\n$width, $height) <br>\n$x-&gt;RenderFillRectangles($op, $dst, [$red, $green, $blue,\n$alpha], <br>\n[$x, $y, $width, $height], ...) <br>\n$x-&gt;RenderTrapezoids($op, $src, $src_x, $src_y, $dst,\n$mask_format, <br>\n[$top, $bottom, $lx1, $ly1, $lx2, $ly2, <br>\n$rx1, $ry1, $rx2, $ry2] ,...) <br>\n$x-&gt;RenderTriangles($op, $src, $src_x, $src_y, $dst,\n$mask_format, <br>\n[$x1, $y1, $x2, $y2, $x3, $y3]) <br>\n$x-&gt;RenderTriStrip($op, $src, $src_x, $src_y, $dst,\n$mask_format, <br>\n[$x, $y], [$x, $y], [$x, $y], [$x, $y], ...) <br>\n$x-&gt;RenderTriFan($op, $src, $src_x, $src_y, $dst,\n$mask_format, <br>\n[$x, $y], [$x, $y], [$x, $y], [$x, $y], ...) <br>\n$x-&gt;RenderCreateGlyphSet($gsid, $format) <br>\n$x-&gt;RenderReferenceGlyphSet($gsid, $existing) <br>\n$x-&gt;RenderFreeGlyphSet($gsid) <br>\n$x-&gt;RenderAddGlyphs($gsid, [$glyph, $width, $height, <br>\n$x, $y, $x_off, $y_off, $data], ...)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Warning: with\nsome server implementations (including XFree86 through 4.4)\npassing more than one glyph to AddGlyphs can hang or crash\nthe server. So don&rsquo;t do that.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$x-&gt;RenderFreeGylphs($gsid,\n@glyphs) <br>\n$x-&gt;RenderCompositeGlyphs8($op, $src, $dst, $mask_format,\n$gsid, <br>\n$src_x, $src_y, <br>\n[$delta_x, $delta_y, $str], ...) <br>\n$x-&gt;RenderCompositeGlyphs16($op, $src, $dst,\n$mask_format, $gsid, <br>\n$src_x, $src_y, <br>\n[$delta_x, $delta_y, $str], ...) <br>\n$x-&gt;RenderCompositeGlyphs32($op, $src, $dst,\n$mask_format, $gsid, <br>\n$src_x, $src_y, <br>\n[$delta_x, $delta_y, $str], ...)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In these three\nrequests, new GlyphSetIDs can also be interspersed with the\narray references.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$x-&gt;RenderCreateCursor($cid,\n$source, $hot_x, $hot_y) <br>\n$x-&gt;RenderCreateAnimCursor($cid, [$cursor, $delay],\n...)</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Stephen\nMcCamant &lt;SMCCAM@cpan.org&gt;.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/perl\">perl(1)</a>,\nX11::Protocol, <i>The X Rendering Extension (XFree86 draft\nstandard)</i>.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SYMBOLIC CONSTANTS\">SYMBOLIC CONSTANTS</a>","<a href=\"#REQUESTS\">REQUESTS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}