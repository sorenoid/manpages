{"name":"parser::style::tree","description":"XML::Parser::Style::Tree - Tree style parser","body":"\n\n<h1 align=\"center\">Parser::Style::Tree</h1>\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">XML::Parser::Style::Tree\n- Tree style parser</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nXML::Parser; <br>\nmy $p = XML::Parser-&gt;new(Style =&gt; 'Tree'); <br>\nmy $tree = $p-&gt;parsefile('foo.xml');</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nimplements XML::Parser&rsquo;s Tree style parser.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When parsing a\ndocument, &quot;parse()&quot; will return a parse tree for\nthe document. Each node in the tree takes the form of a tag,\ncontent pair. Text nodes are represented with a pseudo-tag\nof &quot;0&quot; and the string that is their content. For\nelements, the content is an array reference. The first item\nin the array is a (possibly empty) hash reference containing\nattributes. The remainder of the array is a sequence of\ntag-content pairs representing the content of the\nelement.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So for example\nthe result of parsing:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;foo&gt;&lt;head\nid=&quot;a&quot;&gt;Hello\n&lt;em&gt;there&lt;/em&gt;&lt;/head&gt;&lt;bar&gt;Howdy&lt;ref/&gt;&lt;/bar&gt;do&lt;/foo&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">would be: <br>\nTag Content <br>\n\n==================================================================\n<br>\n[foo, [{}, head, [{id =&gt; &quot;a&quot;}, 0, &quot;Hello\n&quot;, em, [{}, 0, &quot;there&quot;]], <br>\nbar, [ {}, 0, &quot;Howdy&quot;, ref, [{}]], <br>\n0, &quot;do&quot; <br>\n] <br>\n]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The root\ndocument &quot;foo&quot;, has 3 children: a &quot;head&quot;\nelement, a &quot;bar&quot; element and the text\n&quot;do&quot;. After the empty attribute hash, these are\nrepresented in it&rsquo;s contents by 3 tag-content\npairs.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>"],"level":3}