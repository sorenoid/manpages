{"name":"printf","description":"printf,\nfprintf, dprintf, sprintf, snprintf, vprintf, vfprintf,\nvdprintf, vsprintf, vsnprintf - formatted output\nconversion","body":"\n\n<h1 align=\"center\">PRINTF</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf,\nfprintf, dprintf, sprintf, snprintf, vprintf, vfprintf,\nvdprintf, vsprintf, vsnprintf - formatted output\nconversion</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdio.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nprintf(const char *</b><i>format</i><b>, ...); <br>\nint fprintf(FILE *</b><i>stream</i><b>, const char\n*</b><i>format</i><b>, ...); <br>\nint dprintf(int</b> <i>fd</i><b>, const char\n*</b><i>format</i><b>, ...); <br>\nint sprintf(char *</b><i>str</i><b>, const char\n*</b><i>format</i><b>, ...); <br>\nint snprintf(char *</b><i>str</i><b>, size_t</b>\n<i>size</i><b>, const char *</b><i>format</i><b>,\n...);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdarg.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nvprintf(const char *</b><i>format</i><b>, va_list</b>\n<i>ap</i><b>); <br>\nint vfprintf(FILE *</b><i>stream</i><b>, const char\n*</b><i>format</i><b>, va_list</b> <i>ap</i><b>); <br>\nint vdprintf(int</b> <i>fd</i><b>, const char\n*</b><i>format</i><b>, va_list</b> <i>ap</i><b>); <br>\nint vsprintf(char *</b><i>str</i><b>, const char\n*</b><i>format</i><b>, va_list</b> <i>ap</i><b>); <br>\nint vsnprintf(char *</b><i>str</i><b>, size_t</b>\n<i>size</i><b>, const char *</b><i>format</i><b>,\nva_list</b> <i>ap</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>snprintf</b>(),\n<b>vsnprintf</b>():</p>\n\n\n<p style=\"margin-left:17%;\">_XOPEN_SOURCE&nbsp;&gt;=&nbsp;500\n|| _ISOC99_SOURCE || <br>\n|| /* Glibc versions &lt;= 2.19: */ _BSD_SOURCE</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dprintf</b>(),\n<b>vdprintf</b>():</p>\n\n<p style=\"margin-left:17%;\">Since glibc 2.10:</p>\n\n\n<p style=\"margin-left:23%;\">_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;200809L</p>\n\n<p style=\"margin-left:17%;\">Before glibc 2.10:</p>\n\n<p style=\"margin-left:23%;\">_GNU_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\nin the <b>printf</b>() family produce output according to a\n<i>format</i> as described below. The functions\n<b>printf</b>() and <b>vprintf</b>() write output to\n<i>stdout</i>, the standard output stream; <b>fprintf</b>()\nand <b>vfprintf</b>() write output to the given output\n<i>stream</i>; <b>sprintf</b>(), <b>snprintf</b>(),\n<b>vsprintf</b>(), and <b>vsnprintf</b>() write to the\ncharacter string <i>str</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>dprintf</b>() is the same as <b>fprintf</b>() except that\nit outputs to a file descriptor, <i>fd</i>, instead of to a\n<i>stdio</i> stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>snprintf</b>() and <b>vsnprintf</b>() write at most\n<i>size</i> bytes (including the terminating null byte\n('\\0')) to <i>str</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>vprintf</b>(), <b>vfprintf</b>(), <b>vdprintf</b>(),\n<b>vsprintf</b>(), <b>vsnprintf</b>() are equivalent to the\nfunctions <b>printf</b>(), <b>fprintf</b>(),\n<b>dprintf</b>(), <b>sprintf</b>(), <b>snprintf</b>(),\nrespectively, except that they are called with a\n<i>va_list</i> instead of a variable number of arguments.\nThese functions do not call the <i>va_end</i> macro. Because\nthey invoke the <i>va_arg</i> macro, the value of <i>ap</i>\nis undefined after the call. See <a href=\"https://man.page/3/stdarg\">stdarg(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of these\nfunctions write the output under the control of a\n<i>format</i> string that specifies how subsequent arguments\n(or arguments accessed via the variable-length argument\nfacilities of <a href=\"https://man.page/3/stdarg\">stdarg(3)</a>) are converted for\noutput.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">C99 and\nPOSIX.1-2001 specify that the results are undefined if a\ncall to <b>sprintf</b>(), <b>snprintf</b>(),\n<b>vsprintf</b>(), or <b>vsnprintf</b>() would cause copying\nto take place between objects that overlap (e.g., if the\ntarget string array and one of the supplied input arguments\nrefer to the same buffer). See NOTES.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Format of\nthe format string</b> <br>\nThe format string is a character string, beginning and\nending in its initial shift state, if any. The format string\nis composed of zero or more directives: ordinary characters\n(not <b>%</b>), which are copied unchanged to the output\nstream; and conversion specifications, each of which results\nin fetching zero or more subsequent arguments. Each\nconversion specification is introduced by the character\n<b>%</b>, and ends with a <i>conversion specifier</i>. In\nbetween there may be (in this order) zero or more\n<i>flags</i>, an optional minimum <i>field width</i>, an\noptional <i>precision</i> and an optional <i>length\nmodifier</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The arguments\nmust correspond properly (after type promotion) with the\nconversion specifier. By default, the arguments are used in\nthe order given, where each '*' (see <i>Field width</i> and\n<i>Precision</i> below) and each conversion specifier asks\nfor the next argument (and it is an error if insufficiently\nmany arguments are given). One can also specify explicitly\nwhich argument is taken, at each place where an argument is\nrequired, by writing &quot;%m$&quot; instead of '%' and\n&quot;*m$&quot; instead of '*', where the decimal integer\n<i>m</i> denotes the position in the argument list of the\ndesired argument, indexed starting from 1. Thus,</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">printf(&quot;%*d&quot;,\nwidth, num);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">printf(&quot;%2$*1$d&quot;,\nwidth, num);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">are equivalent.\nThe second style allows repeated references to the same\nargument. The C99 standard does not include the style using\n'$', which comes from the Single UNIX Specification. If the\nstyle using '$' is used, it must be used throughout for all\nconversions taking an argument and all width and precision\narguments, but it may be mixed with &quot;%%&quot; formats,\nwhich do not consume an argument. There may be no gaps in\nthe numbers of arguments specified using '$'; for example,\nif arguments 1 and 3 are specified, argument 2 must also be\nspecified somewhere in the format string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For some\nnumeric conversions a radix character (&quot;decimal\npoint&quot;) or thousands&rsquo; grouping character is used.\nThe actual character used depends on the <b>LC_NUMERIC</b>\npart of the locale. (See <a href=\"https://man.page/3/setlocale\">setlocale(3)</a>.) The POSIX\nlocale uses '.' as radix character, and does not have a\ngrouping character. Thus,</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">printf(&quot;%'.2f&quot;,\n1234567.89);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">results in\n&quot;1234567.89&quot; in the POSIX locale, in\n&quot;1234567,89&quot; in the nl_NL locale, and in\n&quot;1.234.567,89&quot; in the da_DK locale.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Flag\ncharacters</b> <br>\nThe character % is followed by zero or more of the following\nflags:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>#</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The value should be converted to an &quot;alternate\nform&quot;. For <b>o</b> conversions, the first character of\nthe output string is made zero (by prefixing a 0 if it was\nnot zero already). For <b>x</b> and <b>X</b> conversions, a\nnonzero result has the string &quot;0x&quot; (or\n&quot;0X&quot; for <b>X</b> conversions) prepended to it.\nFor <b>a</b>, <b>A</b>, <b>e</b>, <b>E</b>, <b>f</b>,\n<b>F</b>, <b>g</b>, and <b>G</b> conversions, the result\nwill always contain a decimal point, even if no digits\nfollow it (normally, a decimal point appears in the results\nof those conversions only if a digit follows). For <b>g</b>\nand <b>G</b> conversions, trailing zeros are not removed\nfrom the result as they would otherwise be. For other\nconversions, the result is undefined.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>0</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The value should be zero padded. For <b>d</b>, <b>i</b>,\n<b>o</b>, <b>u</b>, <b>x</b>, <b>X</b>, <b>a</b>, <b>A</b>,\n<b>e</b>, <b>E</b>, <b>f</b>, <b>F</b>, <b>g</b>, and\n<b>G</b> conversions, the converted value is padded on the\nleft with zeros rather than blanks. If the <b>0</b> and\n<b>-</b> flags both appear, the <b>0</b> flag is ignored. If\na precision is given with a numeric conversion (<b>d</b>,\n<b>i</b>, <b>o</b>, <b>u</b>, <b>x</b>, and <b>X</b>), the\n<b>0</b> flag is ignored. For other conversions, the\nbehavior is undefined.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>-</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>The converted value is to be left adjusted on the field\nboundary. (The default is right justification.) The\nconverted value is padded on the right with blanks, rather\nthan on the left with blanks or zeros. A <b>-</b> overrides\na <b>0</b> if both are given.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>' '</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>(a space) A blank should be left before a positive\nnumber (or empty string) produced by a signed\nconversion.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>+</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>A sign (+ or -) should always be placed before a number\nproduced by a signed conversion. By default, a sign is used\nonly for negative numbers. A <b>+</b> overrides a space if\nboth are used.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The five flag\ncharacters above are defined in the C99 standard. The Single\nUNIX Specification specifies one further flag character.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>'</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">For decimal conversion\n(<b>i</b>, <b>d</b>, <b>u</b>, <b>f</b>, <b>F</b>, <b>g</b>,\n<b>G</b>) the output is to be grouped with thousands&rsquo;\ngrouping characters if the locale information indicates any.\n(See <a href=\"https://man.page/3/setlocale\">setlocale(3)</a>.) Note that many versions of\n<a href=\"https://man.page/1/gcc\">gcc(1)</a> cannot parse this option and will issue a\nwarning. (SUSv2 did not include <i>%'F</i>, but SUSv3 added\nit.)</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">glibc 2.2 adds\none further flag character.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>I</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">For decimal integer conversion\n(<b>i</b>, <b>d</b>, <b>u</b>) the output uses the\nlocale&rsquo;s alternative output digits, if any. For\nexample, since glibc 2.2.3 this will give Arabic-Indic\ndigits in the Persian (&quot;fa_IR&quot;) locale.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Field\nwidth</b> <br>\nAn optional decimal digit string (with nonzero first digit)\nspecifying a minimum field width. If the converted value has\nfewer characters than the field width, it will be padded\nwith spaces on the left (or right, if the left-adjustment\nflag has been given). Instead of a decimal digit string one\nmay write &quot;*&quot; or &quot;*m$&quot; (for some decimal\ninteger <i>m</i>) to specify that the field width is given\nin the next argument, or in the <i>m</i>-th argument,\nrespectively, which must be of type <i>int</i>. A negative\nfield width is taken as a '-' flag followed by a positive\nfield width. In no case does a nonexistent or small field\nwidth cause truncation of a field; if the result of a\nconversion is wider than the field width, the field is\nexpanded to contain the conversion result.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Precision</b>\n<br>\nAn optional precision, in the form of a period ('.')\nfollowed by an optional decimal digit string. Instead of a\ndecimal digit string one may write &quot;*&quot; or\n&quot;*m$&quot; (for some decimal integer <i>m</i>) to\nspecify that the precision is given in the next argument, or\nin the <i>m</i>-th argument, respectively, which must be of\ntype <i>int</i>. If the precision is given as just '.', the\nprecision is taken to be zero. A negative precision is taken\nas if the precision were omitted. This gives the minimum\nnumber of digits to appear for <b>d</b>, <b>i</b>, <b>o</b>,\n<b>u</b>, <b>x</b>, and <b>X</b> conversions, the number of\ndigits to appear after the radix character for <b>a</b>,\n<b>A</b>, <b>e</b>, <b>E</b>, <b>f</b>, and <b>F</b>\nconversions, the maximum number of significant digits for\n<b>g</b> and <b>G</b> conversions, or the maximum number of\ncharacters to be printed from a string for <b>s</b> and\n<b>S</b> conversions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Length\nmodifier</b> <br>\nHere, &quot;integer conversion&quot; stands for <b>d</b>,\n<b>i</b>, <b>o</b>, <b>u</b>, <b>x</b>, or <b>X</b>\nconversion.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\"><b>hh</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">A following integer conversion\ncorresponds to a <i>signed char</i> or <i>unsigned char</i>\nargument, or a following <b>n</b> conversion corresponds to\na pointer to a <i>signed char</i> argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>h</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>A following integer conversion corresponds to a\n<i>short</i> or <i>unsigned short</i> argument, or a\nfollowing <b>n</b> conversion corresponds to a pointer to a\n<i>short</i> argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>l</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>(ell) A following integer conversion corresponds to a\n<i>long</i> or <i>unsigned long</i> argument, or a following\n<b>n</b> conversion corresponds to a pointer to a\n<i>long</i> argument, or a following <b>c</b> conversion\ncorresponds to a <i>wint_t</i> argument, or a following\n<b>s</b> conversion corresponds to a pointer to\n<i>wchar_t</i> argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>ll</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>(ell-ell). A following integer conversion corresponds to\na <i>long long</i> or <i>unsigned long long</i> argument, or\na following <b>n</b> conversion corresponds to a pointer to\na <i>long long</i> argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>q</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>A synonym for <b>ll</b>. This is a nonstandard\nextension, derived from BSD; avoid its use in new code.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>L</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>A following <b>a</b>, <b>A</b>, <b>e</b>, <b>E</b>,\n<b>f</b>, <b>F</b>, <b>g</b>, or <b>G</b> conversion\ncorresponds to a <i>long double</i> argument. (C99 allows\n%LF, but SUSv2 does not.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>j</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>A following integer conversion corresponds to an\n<i>intmax_t</i> or <i>uintmax_t</i> argument, or a following\n<b>n</b> conversion corresponds to a pointer to an\n<i>intmax_t</i> argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>z</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>A following integer conversion corresponds to a\n<i>size_t</i> or <i>ssize_t</i> argument, or a following\n<b>n</b> conversion corresponds to a pointer to a\n<i>size_t</i> argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>Z</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>A nonstandard synonym for <b>z</b> that predates the\nappearance of <b>z</b>. Do not use in new code.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>t</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>A following integer conversion corresponds to a\n<i>ptrdiff_t</i> argument, or a following <b>n</b>\nconversion corresponds to a pointer to a <i>ptrdiff_t</i>\nargument.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">SUSv3 specifies\nall of the above, except for those modifiers explicitly\nnoted as being nonstandard extensions. SUSv2 specified only\nthe length modifiers <b>h</b> (in <b>hd</b>, <b>hi</b>,\n<b>ho</b>, <b>hx</b>, <b>hX</b>, <b>hn</b>) and <b>l</b> (in\n<b>ld</b>, <b>li</b>, <b>lo</b>, <b>lx</b>, <b>lX</b>,\n<b>ln</b>, <b>lc</b>, <b>ls</b>) and <b>L</b> (in <b>Le</b>,\n<b>LE</b>, <b>Lf</b>, <b>Lg</b>, <b>LG</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As a\nnonstandard extension, the GNU implementations treats\n<b>ll</b> and <b>L</b> as synonyms, so that one can, for\nexample, write <b>llg</b> (as a synonym for the\nstandards-compliant <b>Lg</b>) and <b>Ld</b> (as a synonym\nfor the standards compliant <b>lld</b>). Such usage is\nnonportable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Conversion\nspecifiers</b> <br>\nA character that specifies the type of conversion to be\napplied. The conversion specifiers and their meanings\nare:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><b>d</b>, <b>i</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The <i>int</i> argument is\nconverted to signed decimal notation. The precision, if any,\ngives the minimum number of digits that must appear; if the\nconverted value requires fewer digits, it is padded on the\nleft with zeros. The default precision is 1. When 0 is\nprinted with an explicit precision 0, the output is\nempty.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>o</b>, <b>u</b>, <b>x</b>,\n<b>X</b></p>\n\n<p style=\"margin-left:22%;\">The <i>unsigned int</i>\nargument is converted to unsigned octal (<b>o</b>), unsigned\ndecimal (<b>u</b>), or unsigned hexadecimal (<b>x</b> and\n<b>X</b>) notation. The letters <b>abcdef</b> are used for\n<b>x</b> conversions; the letters <b>ABCDEF</b> are used for\n<b>X</b> conversions. The precision, if any, gives the\nminimum number of digits that must appear; if the converted\nvalue requires fewer digits, it is padded on the left with\nzeros. The default precision is 1. When 0 is printed with an\nexplicit precision 0, the output is empty.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>e</b>, <b>E</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>double</i> argument is rounded and converted in\nthe style [-]d<b>.</b>ddd<b>e</b>&plusmn;dd where there is\none digit (which is nonzero if the argument is nonzero)\nbefore the decimal-point character and the number of digits\nafter it is equal to the precision; if the precision is\nmissing, it is taken as 6; if the precision is zero, no\ndecimal-point character appears. An <b>E</b> conversion uses\nthe letter <b>E</b> (rather than <b>e</b>) to introduce the\nexponent. The exponent always contains at least two digits;\nif the value is zero, the exponent is 00.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>f</b>, <b>F</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>double</i> argument is rounded and converted to\ndecimal notation in the style [-]ddd<b>.</b>ddd, where the\nnumber of digits after the decimal-point character is equal\nto the precision specification. If the precision is missing,\nit is taken as 6; if the precision is explicitly zero, no\ndecimal-point character appears. If a decimal point appears,\nat least one digit appears before it.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">(SUSv2 does not\nknow about <b>F</b> and says that character string\nrepresentations for infinity and NaN may be made available.\nSUSv3 adds a specification for <b>F</b>. The C99 standard\nspecifies &quot;[-]inf&quot; or &quot;[-]infinity&quot; for\ninfinity, and a string starting with &quot;nan&quot; for\nNaN, in the case of <b>f</b> conversion, and\n&quot;[-]INF&quot; or &quot;[-]INFINITY&quot; or\n&quot;NAN&quot; in the case of <b>F</b> conversion.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><b>g</b>, <b>G</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The <i>double</i> argument is\nconverted in style <b>f</b> or <b>e</b> (or <b>F</b> or\n<b>E</b> for <b>G</b> conversions). The precision specifies\nthe number of significant digits. If the precision is\nmissing, 6 digits are given; if the precision is zero, it is\ntreated as 1. Style <b>e</b> is used if the exponent from\nits conversion is less than -4 or greater than or equal to\nthe precision. Trailing zeros are removed from the\nfractional part of the result; a decimal point appears only\nif it is followed by at least one digit.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>a</b>, <b>A</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>(C99; not in SUSv2, but added in SUSv3) For <b>a</b>\nconversion, the <i>double</i> argument is converted to\nhexadecimal notation (using the letters abcdef) in the style\n[-]<b>0x</b>h<b>.</b>hhhh<b>p</b>&plusmn;d; for <b>A</b>\nconversion the prefix <b>0X</b>, the letters ABCDEF, and the\nexponent separator <b>P</b> is used. There is one\nhexadecimal digit before the decimal point, and the number\nof digits after it is equal to the precision. The default\nprecision suffices for an exact representation of the value\nif an exact representation in base 2 exists and otherwise is\nsufficiently large to distinguish values of type\n<i>double</i>. The digit before the decimal point is\nunspecified for nonnormalized numbers, and nonzero but\notherwise unspecified for normalized numbers. The exponent\nalways contains at least one digit; if the value is zero,\nthe exponent is 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>c</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>If no <b>l</b> modifier is present, the <i>int</i>\nargument is converted to an <i>unsigned char</i>, and the\nresulting character is written. If an <b>l</b> modifier is\npresent, the <i>wint_t</i> (wide character) argument is\nconverted to a multibyte sequence by a call to the\n<a href=\"https://man.page/3/wcrtomb\">wcrtomb(3)</a> function, with a conversion state starting\nin the initial state, and the resulting multibyte string is\nwritten.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>s</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>If no <b>l</b> modifier is present: the <i>const\nchar&nbsp;*</i> argument is expected to be a pointer to an\narray of character type (pointer to a string). Characters\nfrom the array are written up to (but not including) a\nterminating null byte ('\\0'); if a precision is specified,\nno more than the number specified are written. If a\nprecision is given, no null byte need be present; if the\nprecision is not specified, or is greater than the size of\nthe array, the array must contain a terminating null\nbyte.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If an <b>l</b>\nmodifier is present: the <i>const wchar_t&nbsp;*</i>\nargument is expected to be a pointer to an array of wide\ncharacters. Wide characters from the array are converted to\nmultibyte characters (each by a call to the\n<a href=\"https://man.page/3/wcrtomb\">wcrtomb(3)</a> function, with a conversion state starting\nin the initial state before the first wide character), up to\nand including a terminating null wide character. The\nresulting multibyte characters are written up to (but not\nincluding) the terminating null byte. If a precision is\nspecified, no more bytes than the number specified are\nwritten, but no partial multibyte characters are written.\nNote that the precision determines the number of\n<i>bytes</i> written, not the number of <i>wide\ncharacters</i> or <i>screen positions</i>. The array must\ncontain a terminating null wide character, unless a\nprecision is given and it is so small that the number of\nbytes written exceeds it before the end of the array is\nreached.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>C</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">(Not in C99 or C11, but in\nSUSv2, SUSv3, and SUSv4.) Synonym for <b>lc</b>. Don&rsquo;t\nuse.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>S</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>(Not in C99 or C11, but in SUSv2, SUSv3, and SUSv4.)\nSynonym for <b>ls</b>. Don&rsquo;t use.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>p</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>void&nbsp;*</i> pointer argument is printed in\nhexadecimal (as if by <b>%#x</b> or <b>%#lx</b>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>n</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>The number of characters written so far is stored into\nthe integer pointed to by the corresponding argument. That\nargument shall be an <i>int&nbsp;*</i>, or variant whose\nsize matches the (optionally) supplied integer length\nmodifier. No argument is converted. (This specifier is not\nsupported by the bionic C library.) The behavior is\nundefined if the conversion specification includes any\nflags, a field width, or a precision.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>m</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>(Glibc extension; supported by uClibc and musl.) Print\noutput of <i>strerror(errno)</i>. No argument is\nrequired.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>%</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>A '%' is written. No argument is converted. The complete\nconversion specification is '%%'.</p></td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Upon successful\nreturn, these functions return the number of characters\nprinted (excluding the null byte used to end output to\nstrings).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>snprintf</b>() and <b>vsnprintf</b>() do not write more\nthan <i>size</i> bytes (including the terminating null byte\n('\\0')). If the output was truncated due to this limit, then\nthe return value is the number of characters (excluding the\nterminating null byte) which would have been written to the\nfinal string if enough space had been available. Thus, a\nreturn value of <i>size</i> or more means that the output\nwas truncated. (See also below under NOTES.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If an output\nerror is encountered, a negative value is returned.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3345961.png\" alt=\"Image grohtml-3345961.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fprintf</b>(),\n<b>printf</b>(), <b>sprintf</b>(), <b>vprintf</b>(),\n<b>vfprintf</b>(), <b>vsprintf</b>(): POSIX.1-2001,\nPOSIX.1-2008, C89, C99.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>snprintf</b>(),\n<b>vsnprintf</b>(): POSIX.1-2001, POSIX.1-2008, C99.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>dprintf</b>() and <b>vdprintf</b>() functions were\noriginally GNU extensions that were later standardized in\nPOSIX.1-2008.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Concerning the\nreturn value of <b>snprintf</b>(), SUSv2 and C99 contradict\neach other: when <b>snprintf</b>() is called with\n<i>size</i>=0 then SUSv2 stipulates an unspecified return\nvalue less than 1, while C99 allows <i>str</i> to be NULL in\nthis case, and gives the return value (as always) as the\nnumber of characters that would have been written in case\nthe output string has been large enough. POSIX.1-2001 and\nlater align their specification of <b>snprintf</b>() with\nC99.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">glibc 2.1 adds\nlength modifiers <b>hh</b>, <b>j</b>, <b>t</b>, and <b>z</b>\nand conversion characters <b>a</b> and <b>A</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">glibc 2.2 adds\nthe conversion character <b>F</b> with C99 semantics, and\nthe flag character <b>I</b>.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some programs\nimprudently rely on code such as the following</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sprintf(buf,\n&quot;%s some further text&quot;, buf);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">to append text\nto <i>buf</i>. However, the standards explicitly note that\nthe results are undefined if source and destination buffers\noverlap when calling <b>sprintf</b>(), <b>snprintf</b>(),\n<b>vsprintf</b>(), and <b>vsnprintf</b>(). Depending on the\nversion of <a href=\"https://man.page/1/gcc\">gcc(1)</a> used, and the compiler options\nemployed, calls such as the above will <b>not</b> produce\nthe expected results.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The glibc\nimplementation of the functions <b>snprintf</b>() and\n<b>vsnprintf</b>() conforms to the C99 standard, that is,\nbehaves as described above, since glibc version 2.1. Until\nglibc 2.0.6, they would return -1 when the output was\ntruncated.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because\n<b>sprintf</b>() and <b>vsprintf</b>() assume an arbitrarily\nlong string, callers must be careful not to overflow the\nactual space; this is often impossible to assure. Note that\nthe length of the strings produced is locale-dependent and\ndifficult to predict. Use <b>snprintf</b>() and\n<b>vsnprintf</b>() instead (or <a href=\"https://man.page/3/asprintf\">asprintf(3)</a> and\n<a href=\"https://man.page/3/vasprintf\">vasprintf(3)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Code such as\n<b>printf(</b><i>foo</i><b>);</b> often indicates a bug,\nsince <i>foo</i> may contain a % character. If <i>foo</i>\ncomes from untrusted user input, it may contain <b>%n</b>,\ncausing the <b>printf</b>() call to write to memory and\ncreating a security hole.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To print\n<i>Pi</i> to five decimal places:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#include\n&lt;math.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\nfprintf(stdout, &quot;pi = %.5f\\n&quot;, 4 * atan(1.0));</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To print a date\nand time in the form &quot;Sunday, July 3, 10:02&quot;,\nwhere <i>weekday</i> and <i>month</i> are pointers to\nstrings:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#include\n&lt;stdio.h&gt; <br>\nfprintf(stdout, &quot;%s, %s %d, %.2d:%.2d\\n&quot;, <br>\nweekday, month, day, hour, min);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many countries\nuse the day-month-year order. Hence, an internationalized\nversion must be able to print the arguments in an order\nspecified by the format:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#include\n&lt;stdio.h&gt; <br>\nfprintf(stdout, format, <br>\nweekday, month, day, hour, min);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n<i>format</i> depends on locale, and may permute the\narguments. With the value:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;%1$s,\n%3$d. %2$s, %4$d:%5$.2d\\n&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">one might\nobtain &quot;Sonntag, 3. Juli, 10:02&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To allocate a\nsufficiently large string and print into it (code correct\nfor both glibc 2.0 and glibc 2.1):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdarg.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">char * <br>\nmake_message(const char *fmt, ...) <br>\n{ <br>\nint n = 0; <br>\nsize_t size = 0; <br>\nchar *p = NULL; <br>\nva_list ap;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Determine\nrequired size */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">va_start(ap,\nfmt); <br>\nn = vsnprintf(p, size, fmt, ap); <br>\nva_end(ap);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (n &lt; 0)\n<br>\nreturn NULL;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* One extra\nbyte for '\\0' */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">size = (size_t)\nn + 1; <br>\np = malloc(size); <br>\nif (p == NULL) <br>\nreturn NULL;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">va_start(ap,\nfmt); <br>\nn = vsnprintf(p, size, fmt, ap); <br>\nva_end(ap);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (n &lt; 0) {\n<br>\nfree(p); <br>\nreturn NULL; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return p; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If truncation\noccurs in glibc versions prior to 2.0.6, this is treated as\nan error instead of being handled gracefully.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/printf\">printf(1)</a>,\n<a href=\"https://man.page/3/asprintf\">asprintf(3)</a>, <a href=\"https://man.page/3/puts\">puts(3)</a>, <a href=\"https://man.page/3/scanf\">scanf(3)</a>,\n<a href=\"https://man.page/3/setlocale\">setlocale(3)</a>, <a href=\"https://man.page/3/strfromd\">strfromd(3)</a>, <a href=\"https://man.page/3/wcrtomb\">wcrtomb(3)</a>,\n<a href=\"https://man.page/3/wprintf\">wprintf(3)</a>, <a href=\"https://man.page/5/locale\">locale(5)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}