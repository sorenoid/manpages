{"name":"fts","body":"\n\n<h1 align=\"center\">FTS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fts, fts_open,\nfts_read, fts_children, fts_set, fts_close - traverse a file\nhierarchy</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;fts.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FTS\n*fts_open(char * const *</b><i>path_argv</i><b>, int</b>\n<i>options</i><b>, <br>\nint (*</b><i>compar</i><b>)(const FTSENT **, const FTSENT\n**));</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FTSENT\n*fts_read(FTS *</b><i>ftsp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FTSENT\n*fts_children(FTS *</b><i>ftsp</i><b>, int</b>\n<i>instr</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfts_set(FTS *</b><i>ftsp</i><b>, FTSENT *</b><i>f</i><b>,\nint</b> <i>instr</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfts_close(FTS *</b><i>ftsp</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fts\nfunctions are provided for traversing file hierarchies. A\nsimple overview is that the <b>fts_open</b>() function\nreturns a &quot;handle&quot; (of type <i>FTS&nbsp;*</i>)\nthat refers to a file hierarchy &quot;stream&quot;. This\nhandle is then supplied to the other fts functions. The\nfunction <b>fts_read</b>() returns a pointer to a structure\ndescribing one of the files in the file hierarchy. The\nfunction <b>fts_children</b>() returns a pointer to a linked\nlist of structures, each of which describes one of the files\ncontained in a directory in the hierarchy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general,\ndirectories are visited two distinguishable times; in\npreorder (before any of their descendants are visited) and\nin postorder (after all of their descendants have been\nvisited). Files are visited once. It is possible to walk the\nhierarchy &quot;logically&quot; (visiting the files that\nsymbolic links point to) or physically (visiting the\nsymbolic links themselves), order the walk of the hierarchy\nor prune and/or revisit portions of the hierarchy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Two structures\n(and associated types) are defined in the include file\n<i>&lt;fts.h&gt;</i>. The first type is <i>FTS</i>, the\nstructure that represents the file hierarchy itself. The\nsecond type is <i>FTSENT</i>, the structure that represents\na file in the file hierarchy. Normally, an <i>FTSENT</i>\nstructure is returned for every file in the file hierarchy.\nIn this manual page, &quot;file&quot; and &quot;FTSENT\nstructure&quot; are generally interchangeable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>FTSENT</i> structure contains fields describing a file.\nThe structure contains at least the following fields (there\nare additional fields that should be considered private to\nthe implementation):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n_ftsent { <br>\nunsigned short fts_info; /* flags for FTSENT structure */\n<br>\nchar *fts_accpath; /* access path */ <br>\nchar *fts_path; /* root path */ <br>\nshort fts_pathlen; /* strlen(fts_path) + <br>\nstrlen(fts_name) */ <br>\nchar *fts_name; /* filename */ <br>\nshort fts_namelen; /* strlen(fts_name) */ <br>\nshort fts_level; /* depth (-1 to N) */ <br>\nint fts_errno; /* file errno */ <br>\nlong fts_number; /* local numeric value */ <br>\nvoid *fts_pointer; /* local address value */ <br>\nstruct _ftsent *fts_parent; /* parent directory */ <br>\nstruct _ftsent *fts_link; /* next file structure */ <br>\nstruct _ftsent *fts_cycle; /* cycle structure */ <br>\nstruct stat *fts_statp; /* stat(2) information */ <br>\n} FTSENT;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These fields\nare defined as follows: <i><br>\nfts_info</i></p>\n\n<p style=\"margin-left:22%;\">One of the following values\ndescribing the returned <i>FTSENT</i> structure and the file\nit represents. With the exception of directories without\nerrors (<b>FTS_D</b>), all of these entries are terminal,\nthat is, they will not be revisited, nor will any of their\ndescendants be visited.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTS_D</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>A directory being visited in preorder.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTS_DC</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>A directory that causes a cycle in the tree. (The\n<i>fts_cycle</i> field of the <i>FTSENT</i> structure will\nbe filled in as well.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>FTS_DEFAULT</b></p>\n\n<p style=\"margin-left:32%;\">Any <i>FTSENT</i> structure\nthat represents a file type not explicitly described by one\nof the other <i>fts_info</i> values.</p>\n\n<p style=\"margin-left:22%;\"><b>FTS_DNR</b></p>\n\n<p style=\"margin-left:32%;\">A directory which cannot be\nread. This is an error return, and the <i>fts_errno</i>\nfield will be set to indicate what caused the error.</p>\n\n<p style=\"margin-left:22%;\"><b>FTS_DOT</b></p>\n\n<p style=\"margin-left:32%;\">A file named &quot;.&quot; or\n&quot;..&quot; which was not specified as a filename to\n<b>fts_open</b>() (see <b>FTS_SEEDOT</b>).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTS_DP</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>A directory being visited in postorder. The contents of\nthe <i>FTSENT</i> structure will be unchanged from when it\nwas returned in preorder, that is, with the <i>fts_info</i>\nfield set to <b>FTS_D</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>FTS_ERR</b></p>\n\n<p style=\"margin-left:32%;\">This is an error return, and\nthe <i>fts_errno</i> field will be set to indicate what\ncaused the error.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTS_F</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>A regular file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTS_NS</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>A file for which no <a href=\"https://man.page/2/stat\">stat(2)</a> information was\navailable. The contents of the <i>fts_statp</i> field are\nundefined. This is an error return, and the <i>fts_errno</i>\nfield will be set to indicate what caused the error.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>FTS_NSOK</b></p>\n\n<p style=\"margin-left:32%;\">A file for which no\n<a href=\"https://man.page/2/stat\">stat(2)</a> information was requested. The contents of\nthe <i>fts_statp</i> field are undefined.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTS_SL</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"25%\">\n\n\n<p>A symbolic link.</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>FTS_SLNONE</b></p>\n\n<p style=\"margin-left:32%;\">A symbolic link with a\nnonexistent target. The contents of the <i>fts_statp</i>\nfield reference the file characteristic information for the\nsymbolic link itself.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_accpath</i></p>\n\n<p style=\"margin-left:22%;\">A path for accessing the file\nfrom the current directory.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_path</i></p>\n\n<p style=\"margin-left:22%;\">The path for the file relative\nto the root of the traversal. This path contains the path\nspecified to <b>fts_open</b>() as a prefix.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_pathlen</i></p>\n\n<p style=\"margin-left:22%;\">The sum of the lengths of the\nstrings referenced by <i>fts_path</i> and\n<i>fts_name</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_name</i></p>\n\n<p style=\"margin-left:22%;\">The name of the file.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_namelen</i></p>\n\n<p style=\"margin-left:22%;\">The length of the string\nreferenced by <i>fts_name</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_level</i></p>\n\n<p style=\"margin-left:22%;\">The depth of the traversal,\nnumbered from -1 to N, where this file was found. The\n<i>FTSENT</i> structure representing the parent of the\nstarting point (or root) of the traversal is numbered -1,\nand the <i>FTSENT</i> structure for the root itself is\nnumbered 0.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_errno</i></p>\n\n<p style=\"margin-left:22%;\">If <b>fts_children</b>() or\n<b>fts_read</b>() returns an <i>FTSENT</i> structure whose\n<i>fts_info</i> field is set to <b>FTS_DNR</b>,\n<b>FTS_ERR</b>, or <b>FTS_NS</b>, the <i>fts_errno</i> field\ncontains the error number (i.e., the <i>errno</i> value)\nspecifying the cause of the error. Otherwise, the contents\nof the <i>fts_errno</i> field are undefined.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_number</i></p>\n\n<p style=\"margin-left:22%;\">This field is provided for the\nuse of the application program and is not modified by the\nfts functions. It is initialized to 0.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_pointer</i></p>\n\n<p style=\"margin-left:22%;\">This field is provided for the\nuse of the application program and is not modified by the\nfts functions. It is initialized to NULL.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_parent</i></p>\n\n<p style=\"margin-left:22%;\">A pointer to the <i>FTSENT</i>\nstructure referencing the file in the hierarchy immediately\nabove the current file, that is, the directory of which this\nfile is a member. A parent structure for the initial entry\npoint is provided as well, however, only the\n<i>fts_level</i>, <i>fts_number</i>, and <i>fts_pointer</i>\nfields are guaranteed to be initialized.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_link</i></p>\n\n<p style=\"margin-left:22%;\">Upon return from the\n<b>fts_children</b>() function, the <i>fts_link</i> field\npoints to the next structure in the NULL-terminated linked\nlist of directory members. Otherwise, the contents of the\n<i>fts_link</i> field are undefined.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_cycle</i></p>\n\n<p style=\"margin-left:22%;\">If a directory causes a cycle\nin the hierarchy (see <b>FTS_DC</b>), either because of a\nhard link between two directories, or a symbolic link\npointing to a directory, the <i>fts_cycle</i> field of the\nstructure will point to the <i>FTSENT</i> structure in the\nhierarchy that references the same file as the current\n<i>FTSENT</i> structure. Otherwise, the contents of the\n<i>fts_cycle</i> field are undefined.</p>\n\n<p style=\"margin-left:11%;\"><i>fts_statp</i></p>\n\n<p style=\"margin-left:22%;\">A pointer to <a href=\"https://man.page/2/stat\">stat(2)</a>\ninformation for the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A single buffer\nis used for all of the paths of all of the files in the file\nhierarchy. Therefore, the <i>fts_path</i> and\n<i>fts_accpath</i> fields are guaranteed to be\nnull-terminated <i>only</i> for the file most recently\nreturned by <b>fts_read</b>(). To use these fields to\nreference any files represented by other <i>FTSENT</i>\nstructures will require that the path buffer be modified\nusing the information contained in that <i>FTSENT</i>\nstructure&rsquo;s <i>fts_pathlen</i> field. Any such\nmodifications should be undone before further calls to\n<b>fts_read</b>() are attempted. The <i>fts_name</i> field\nis always null-terminated.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fts_open()</b>\n<br>\nThe <b>fts_open</b>() function takes a pointer to an array\nof character pointers naming one or more paths which make up\na logical file hierarchy to be traversed. The array must be\nterminated by a null pointer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are a\nnumber of options, at least one of which (either\n<b>FTS_LOGICAL</b> or <b>FTS_PHYSICAL</b>) must be\nspecified. The options are selected by ORing the following\nvalues: <b><br>\nFTS_COMFOLLOW</b></p>\n\n<p style=\"margin-left:22%;\">This option causes any symbolic\nlink specified as a root path to be followed immediately\nwhether or not <b>FTS_LOGICAL</b> is also specified.</p>\n\n<p style=\"margin-left:11%;\"><b>FTS_LOGICAL</b></p>\n\n<p style=\"margin-left:22%;\">This option causes the fts\nroutines to return <i>FTSENT</i> structures for the targets\nof symbolic links instead of the symbolic links themselves.\nIf this option is set, the only symbolic links for which\n<i>FTSENT</i> structures are returned to the application are\nthose referencing nonexistent files. Either\n<b>FTS_LOGICAL</b> or <b>FTS_PHYSICAL</b> <i>must</i> be\nprovided to the <b>fts_open</b>() function.</p>\n\n<p style=\"margin-left:11%;\"><b>FTS_NOCHDIR</b></p>\n\n<p style=\"margin-left:22%;\">As a performance optimization,\nthe fts functions change directories as they walk the file\nhierarchy. This has the side-effect that an application\ncannot rely on being in any particular directory during the\ntraversal. The <b>FTS_NOCHDIR</b> option turns off this\noptimization, and the fts functions will not change the\ncurrent directory. Note that applications should not\nthemselves change their current directory and try to access\nfiles unless <b>FTS_NOCHDIR</b> is specified and absolute\npathnames were provided as arguments to\n<b>fts_open</b>().</p>\n\n<p style=\"margin-left:11%;\"><b>FTS_NOSTAT</b></p>\n\n<p style=\"margin-left:22%;\">By default, returned\n<i>FTSENT</i> structures reference file characteristic\ninformation (the <i>statp</i> field) for each file visited.\nThis option relaxes that requirement as a performance\noptimization, allowing the fts functions to set the\n<i>fts_info</i> field to <b>FTS_NSOK</b> and leave the\ncontents of the <i>statp</i> field undefined.</p>\n\n<p style=\"margin-left:11%;\"><b>FTS_PHYSICAL</b></p>\n\n<p style=\"margin-left:22%;\">This option causes the fts\nroutines to return <i>FTSENT</i> structures for symbolic\nlinks themselves instead of the target files they point to.\nIf this option is set, <i>FTSENT</i> structures for all\nsymbolic links in the hierarchy are returned to the\napplication. Either <b>FTS_LOGICAL</b> or\n<b>FTS_PHYSICAL</b> <i>must</i> be provided to the\n<b>fts_open</b>() function.</p>\n\n<p style=\"margin-left:11%;\"><b>FTS_SEEDOT</b></p>\n\n<p style=\"margin-left:22%;\">By default, unless they are\nspecified as path arguments to <b>fts_open</b>(), any files\nnamed &quot;.&quot; or &quot;..&quot; encountered in the\nfile hierarchy are ignored. This option causes the fts\nroutines to return <i>FTSENT</i> structures for them.</p>\n\n<p style=\"margin-left:11%;\"><b>FTS_XDEV</b></p>\n\n<p style=\"margin-left:22%;\">This option prevents fts from\ndescending into directories that have a different device\nnumber than the file from which the descent began.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The argument\n<b>compar</b>() specifies a user-defined function which may\nbe used to order the traversal of the hierarchy. It takes\ntwo pointers to pointers to <i>FTSENT</i> structures as\narguments and should return a negative value, zero, or a\npositive value to indicate if the file referenced by its\nfirst argument comes before, in any order with respect to,\nor after, the file referenced by its second argument. The\n<i>fts_accpath</i>, <i>fts_path</i>, and <i>fts_pathlen</i>\nfields of the <i>FTSENT</i> structures may <i>never</i> be\nused in this comparison. If the <i>fts_info</i> field is set\nto <b>FTS_NS</b> or <b>FTS_NSOK</b>, the <i>fts_statp</i>\nfield may not either. If the <b>compar</b>() argument is\nNULL, the directory traversal order is in the order listed\nin <i>path_argv</i> for the root paths, and in the order\nlisted in the directory for everything else.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fts_read()</b>\n<br>\nThe <b>fts_read</b>() function returns a pointer to an\n<i>FTSENT</i> structure describing a file in the hierarchy.\nDirectories (that are readable and do not cause cycles) are\nvisited at least twice, once in preorder and once in\npostorder. All other files are visited at least once. (Hard\nlinks between directories that do not cause cycles or\nsymbolic links to symbolic links may cause files to be\nvisited more than once, or directories more than twice.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If all the\nmembers of the hierarchy have been returned,\n<b>fts_read</b>() returns NULL and sets the external\nvariable <i>errno</i> to 0. If an error unrelated to a file\nin the hierarchy occurs, <b>fts_read</b>() returns NULL and\nsets <i>errno</i> appropriately. If an error related to a\nreturned file occurs, a pointer to an <i>FTSENT</i>\nstructure is returned, and <i>errno</i> may or may not have\nbeen set (see <i>fts_info</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>FTSENT</i> structures returned by <b>fts_read</b>() may\nbe overwritten after a call to <b>fts_close</b>() on the\nsame file hierarchy stream, or, after a call to\n<b>fts_read</b>() on the same file hierarchy stream unless\nthey represent a file of type directory, in which case they\nwill not be overwritten until after a call to\n<b>fts_read</b>() after the <i>FTSENT</i> structure has been\nreturned by the function <b>fts_read</b>() in postorder.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fts_children()</b>\n<br>\nThe <b>fts_children</b>() function returns a pointer to an\n<i>FTSENT</i> structure describing the first entry in a\nNULL-terminated linked list of the files in the directory\nrepresented by the <i>FTSENT</i> structure most recently\nreturned by <b>fts_read</b>(). The list is linked through\nthe <i>fts_link</i> field of the <i>FTSENT</i> structure,\nand is ordered by the user-specified comparison function, if\nany. Repeated calls to <b>fts_children</b>() will re-create\nthis linked list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As a special\ncase, if <b>fts_read</b>() has not yet been called for a\nhierarchy, <b>fts_children</b>() will return a pointer to\nthe files in the logical directory specified to\n<b>fts_open</b>(), that is, the arguments specified to\n<b>fts_open</b>(). Otherwise, if the <i>FTSENT</i> structure\nmost recently returned by <b>fts_read</b>() is not a\ndirectory being visited in preorder, or the directory does\nnot contain any files, <b>fts_children</b>() returns NULL\nand sets <i>errno</i> to zero. If an error occurs,\n<b>fts_children</b>() returns NULL and sets <i>errno</i>\nappropriately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>FTSENT</i> structures returned by <b>fts_children</b>()\nmay be overwritten after a call to <b>fts_children</b>(),\n<b>fts_close</b>(), or <b>fts_read</b>() on the same file\nhierarchy stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>instr</i> argument is either zero or the following value:\n<b><br>\nFTS_NAMEONLY</b></p>\n\n<p style=\"margin-left:22%;\">Only the names of the files are\nneeded. The contents of all the fields in the returned\nlinked list of structures are undefined with the exception\nof the <i>fts_name</i> and <i>fts_namelen</i> fields.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fts_set()</b>\n<br>\nThe function <b>fts_set</b>() allows the user application to\ndetermine further processing for the file <i>f</i> of the\nstream <i>ftsp</i>. The <b>fts_set</b>() function returns 0\non success, and -1 if an error occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>instr</i> argument is either 0 (meaning &quot;do\nnothing&quot;) or one of the following values: <b><br>\nFTS_AGAIN</b></p>\n\n<p style=\"margin-left:22%;\">Revisit the file; any file type\nmay be revisited. The next call to <b>fts_read</b>() will\nreturn the referenced file. The <i>fts_stat</i> and\n<i>fts_info</i> fields of the structure will be\nreinitialized at that time, but no other fields will have\nbeen changed. This option is meaningful only for the most\nrecently returned file from <b>fts_read</b>(). Normal use is\nfor postorder directory visits, where it causes the\ndirectory to be revisited (in both preorder and postorder)\nas well as all of its descendants.</p>\n\n<p style=\"margin-left:11%;\"><b>FTS_FOLLOW</b></p>\n\n<p style=\"margin-left:22%;\">The referenced file must be a\nsymbolic link. If the referenced file is the one most\nrecently returned by <b>fts_read</b>(), the next call to\n<b>fts_read</b>() returns the file with the <i>fts_info</i>\nand <i>fts_statp</i> fields reinitialized to reflect the\ntarget of the symbolic link instead of the symbolic link\nitself. If the file is one of those most recently returned\nby <b>fts_children</b>(), the <i>fts_info</i> and\n<i>fts_statp</i> fields of the structure, when returned by\n<b>fts_read</b>(), will reflect the target of the symbolic\nlink instead of the symbolic link itself. In either case, if\nthe target of the symbolic link does not exist, the fields\nof the returned structure will be unchanged and the\n<i>fts_info</i> field will be set to <b>FTS_SLNONE</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the target\nof the link is a directory, the preorder return, followed by\nthe return of all of its descendants, followed by a\npostorder return, is done.</p>\n\n<p style=\"margin-left:11%;\"><b>FTS_SKIP</b></p>\n\n<p style=\"margin-left:22%;\">No descendants of this file are\nvisited. The file may be one of those most recently returned\nby either <b>fts_children</b>() or <b>fts_read</b>().</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fts_close()</b>\n<br>\nThe <b>fts_close</b>() function closes the file hierarchy\nstream referred to by <i>ftsp</i> and restores the current\ndirectory to the directory from which <b>fts_open</b>() was\ncalled to open <i>ftsp</i>. The <b>fts_close</b>() function\nreturns 0 on success, and -1 if an error occurs.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>fts_open</b>() may fail and set <i>errno</i> for any of\nthe errors specified for <a href=\"https://man.page/2/open\">open(2)</a> and\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>fts_close</b>() may fail and set <i>errno</i> for any of\nthe errors specified for <a href=\"https://man.page/2/chdir\">chdir(2)</a> and\n<a href=\"https://man.page/2/close\">close(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>fts_read</b>() and <b>fts_children</b>() may fail and set\n<i>errno</i> for any of the errors specified for\n<a href=\"https://man.page/2/chdir\">chdir(2)</a>, <a href=\"https://man.page/3/malloc\">malloc(3)</a>, <a href=\"https://man.page/3/opendir\">opendir(3)</a>,\n<a href=\"https://man.page/3/readdir\">readdir(3)</a>, and <a href=\"https://man.page/2/stat\">stat(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\n<b>fts_children</b>(), <b>fts_open</b>(), and\n<b>fts_set</b>() may fail and set <i>errno</i> as\nfollows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"44%\">\n\n\n<p><i>options</i> or <i>instr</i> was invalid.</p></td>\n<td width=\"34%\">\n</td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare available in Linux since glibc2.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3327281.png\" alt=\"Image grohtml-3327281.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">4.4BSD.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In versions of\nglibc before 2.23, all of the APIs described in this man\npage are not safe when compiling a program using the LFS\nAPIs (e.g., when compiling with\n<i>-D_FILE_OFFSET_BITS=64</i>).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/find\">find(1)</a>,\n<a href=\"https://man.page/2/chdir\">chdir(2)</a>, <a href=\"https://man.page/2/stat\">stat(2)</a>, <a href=\"https://man.page/3/ftw\">ftw(3)</a>,\n<a href=\"https://man.page/3/qsort\">qsort(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}