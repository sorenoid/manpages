{"name":"ctime","body":"\n\n<h1 align=\"center\">CTIME</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">asctime, ctime,\ngmtime, localtime, mktime, asctime_r, ctime_r, gmtime_r,\nlocaltime_r - transform date and time to broken-down time or\nASCII</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;time.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*asctime(const struct tm *</b><i>tm</i><b>); <br>\nchar *asctime_r(const struct tm *</b><i>tm</i><b>, char\n*</b><i>buf</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*ctime(const time_t *</b><i>timep</i><b>); <br>\nchar *ctime_r(const time_t *</b><i>timep</i><b>, char\n*</b><i>buf</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct tm\n*gmtime(const time_t *</b><i>timep</i><b>); <br>\nstruct tm *gmtime_r(const time_t *</b><i>timep</i><b>,\nstruct tm *</b><i>result</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct tm\n*localtime(const time_t *</b><i>timep</i><b>); <br>\nstruct tm *localtime_r(const time_t *</b><i>timep</i><b>,\nstruct tm *</b><i>result</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>time_t\nmktime(struct tm *</b><i>tm</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>asctime_r</b>(),\n<b>ctime_r</b>(), <b>gmtime_r</b>(),\n<b>localtime_r</b>():</p>\n\n<p style=\"margin-left:22%;\">_POSIX_C_SOURCE <br>\n|| /* Glibc versions &lt;= 2.19: */ _BSD_SOURCE ||\n_SVID_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ctime</b>(), <b>gmtime</b>(), and <b>localtime</b>()\nfunctions all take an argument of data type <i>time_t</i>,\nwhich represents calendar time. When interpreted as an\nabsolute time value, it represents the number of seconds\nelapsed since the Epoch, 1970-01-01 00:00:00 +0000\n(UTC).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>asctime</b>() and <b>mktime</b>() functions both take an\nargument representing broken-down time, which is a\nrepresentation separated into year, month, day, and so\non.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Broken-down\ntime is stored in the structure <i>tm</i>, which is defined\nin <i>&lt;time.h&gt;</i> as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct tm {\n<br>\nint tm_sec; /* Seconds (0-60) */ <br>\nint tm_min; /* Minutes (0-59) */ <br>\nint tm_hour; /* Hours (0-23) */ <br>\nint tm_mday; /* Day of the month (1-31) */ <br>\nint tm_mon; /* Month (0-11) */ <br>\nint tm_year; /* Year - 1900 */ <br>\nint tm_wday; /* Day of the week (0-6, Sunday = 0) */ <br>\nint tm_yday; /* Day in the year (0-365, 1 Jan = 0) */ <br>\nint tm_isdst; /* Daylight saving time */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The members of\nthe <i>tm</i> structure are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_sec</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of seconds after the minute, normally in the\nrange 0 to 59, but can be up to 60 to allow for leap\nseconds.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_min</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of minutes after the hour, in the range 0 to\n59.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_hour</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of hours past midnight, in the range 0 to\n23.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_mday</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The day of the month, in the range 1 to 31.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_mon</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of months since January, in the range 0 to\n11.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_year</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of years since 1900.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_wday</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of days since Sunday, in the range 0 to\n6.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_yday</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The number of days since January 1, in the range 0 to\n365.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><i>tm_isdst</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>A flag that indicates whether daylight saving time is in\neffect at the time described. The value is positive if\ndaylight saving time is in effect, zero if it is not, and\nnegative if the information is not available.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The call\n<b>ctime(</b><i>t</i><b>)</b> is equivalent to\n<b>asctime(localtime(</b><i>t</i><b>))</b>. It converts the\ncalendar time <i>t</i> into a null-terminated string of the\nform</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;Wed Jun\n30 21:49:08 1993\\n&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nabbreviations for the days of the week are &quot;Sun&quot;,\n&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;,\n&quot;Thu&quot;, &quot;Fri&quot;, and &quot;Sat&quot;. The\nabbreviations for the months are &quot;Jan&quot;,\n&quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;,\n&quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;,\n&quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;,\n&quot;Nov&quot;, and &quot;Dec&quot;. The return value\npoints to a statically allocated string which might be\noverwritten by subsequent calls to any of the date and time\nfunctions. The function also sets the external variables\n<i>tzname</i>, <i>timezone</i>, and <i>daylight</i> (see\n<a href=\"https://man.page/3/tzset\">tzset(3)</a>) with information about the current\ntimezone. The reentrant version <b>ctime_r</b>() does the\nsame, but stores the string in a user-supplied buffer which\nshould have room for at least 26 bytes. It need not set\n<i>tzname</i>, <i>timezone</i>, and <i>daylight</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>gmtime</b>() function converts the calendar time\n<i>timep</i> to broken-down time representation, expressed\nin Coordinated Universal Time (UTC). It may return NULL when\nthe year does not fit into an integer. The return value\npoints to a statically allocated struct which might be\noverwritten by subsequent calls to any of the date and time\nfunctions. The <b>gmtime_r</b>() function does the same, but\nstores the data in a user-supplied struct.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>localtime</b>() function converts the calendar time\n<i>timep</i> to broken-down time representation, expressed\nrelative to the user&rsquo;s specified timezone. The\nfunction acts as if it called <a href=\"https://man.page/3/tzset\">tzset(3)</a> and sets the\nexternal variables <i>tzname</i> with information about the\ncurrent timezone, <i>timezone</i> with the difference\nbetween Coordinated Universal Time (UTC) and local standard\ntime in seconds, and <i>daylight</i> to a nonzero value if\ndaylight savings time rules apply during some part of the\nyear. The return value points to a statically allocated\nstruct which might be overwritten by subsequent calls to any\nof the date and time functions. The <b>localtime_r</b>()\nfunction does the same, but stores the data in a\nuser-supplied struct. It need not set <i>tzname</i>,\n<i>timezone</i>, and <i>daylight</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>asctime</b>() function converts the broken-down time\nvalue <i>tm</i> into a null-terminated string with the same\nformat as <b>ctime</b>(). The return value points to a\nstatically allocated string which might be overwritten by\nsubsequent calls to any of the date and time functions. The\n<b>asctime_r</b>() function does the same, but stores the\nstring in a user-supplied buffer which should have room for\nat least 26 bytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mktime</b>() function converts a broken-down time\nstructure, expressed as local time, to calendar time\nrepresentation. The function ignores the values supplied by\nthe caller in the <i>tm_wday</i> and <i>tm_yday</i> fields.\nThe value specified in the <i>tm_isdst</i> field informs\n<b>mktime</b>() whether or not daylight saving time (DST) is\nin effect for the time supplied in the <i>tm</i> structure:\na positive value means DST is in effect; zero means that DST\nis not in effect; and a negative value means that\n<b>mktime</b>() should (use timezone information and system\ndatabases to) attempt to determine whether DST is in effect\nat the specified time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mktime</b>() function modifies the fields of the\n<i>tm</i> structure as follows: <i>tm_wday</i> and\n<i>tm_yday</i> are set to values determined from the\ncontents of the other fields; if structure members are\noutside their valid interval, they will be normalized (so\nthat, for example, 40 October is changed into 9 November);\n<i>tm_isdst</i> is set (regardless of its initial value) to\na positive value or to 0, respectively, to indicate whether\nDST is or is not in effect at the specified time. Calling\n<b>mktime</b>() also sets the external variable\n<i>tzname</i> with information about the current\ntimezone.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nspecified broken-down time cannot be represented as calendar\ntime (seconds since the Epoch), <b>mktime</b>() returns\n<i>(time_t)&nbsp;-1</i> and does not alter the members of\nthe broken-down time structure.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>gmtime</b>() and <b>localtime</b>() return a pointer to a\n<i>struct&nbsp;tm</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>gmtime_r</b>() and <b>localtime_r</b>() return the\naddress of the structure pointed to by <i>result</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>asctime</b>() and <b>ctime</b>() return a pointer to a\nstring.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>asctime_r</b>() and <b>ctime_r</b>() return a pointer to\nthe string pointed to by <i>buf</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>mktime</b>() returns the calendar time (seconds since the\nEpoch), expressed as a value of type <i>time_t</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On error,\n<b>mktime</b>() returns the value <i>(time_t)&nbsp;-1</i>.\nThe remaining functions return NULL on error. On error,\n<i>errno</i> is set to indicate the cause of the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>EOVERFLOW</b></p>\n\n<p style=\"margin-left:22%;\">The result cannot be\nrepresented.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3312841.png\" alt=\"Image grohtml-3312841.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001.\nC89 and C99 specify <b>asctime</b>(), <b>ctime</b>(),\n<b>gmtime</b>(), <b>localtime</b>(), and <b>mktime</b>().\nPOSIX.1-2008 marks <b>asctime</b>(), <b>asctime_r</b>(),\n<b>ctime</b>(), and <b>ctime_r</b>() as obsolete,\nrecommending the use of <a href=\"https://man.page/3/strftime\">strftime(3)</a> instead.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The four\nfunctions <b>asctime</b>(), <b>ctime</b>(), <b>gmtime</b>(),\nand <b>localtime</b>() return a pointer to static data and\nhence are not thread-safe. The thread-safe versions,\n<b>asctime_r</b>(), <b>ctime_r</b>(), <b>gmtime_r</b>(), and\n<b>localtime_r</b>(), are specified by SUSv2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001\nsays: &quot;The <b>asctime</b>(), <b>ctime</b>(),\n<b>gmtime</b>(), and <b>localtime</b>() functions shall\nreturn values in one of two static objects: a broken-down\ntime structure and an array of type <i>char</i>. Execution\nof any of the functions may overwrite the information\nreturned in either of these objects by any of the other\nfunctions.&quot; This can occur in the glibc\nimplementation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In many\nimplementations, including glibc, a 0 in <i>tm_mday</i> is\ninterpreted as meaning the last day of the preceding\nmonth.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The glibc\nversion of <i>struct tm</i> has additional fields</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">const char\n*tm_zone; /* Timezone abbreviation */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">defined when\n<b>_BSD_SOURCE</b> was set before including\n<i>&lt;time.h&gt;</i>. This is a BSD extension, present in\n4.3BSD-Reno.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX.1-2001, <b>localtime</b>() is required to behave as\nthough <a href=\"https://man.page/3/tzset\">tzset(3)</a> was called, while\n<b>localtime_r</b>() does not have this requirement. For\nportable code, <a href=\"https://man.page/3/tzset\">tzset(3)</a> should be called before\n<b>localtime_r</b>().</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/date\">date(1)</a>,\n<a href=\"https://man.page/2/gettimeofday\">gettimeofday(2)</a>, <a href=\"https://man.page/2/time\">time(2)</a>, <a href=\"https://man.page/2/utime\">utime(2)</a>,\n<a href=\"https://man.page/3/clock\">clock(3)</a>, <a href=\"https://man.page/3/difftime\">difftime(3)</a>, <a href=\"https://man.page/3/strftime\">strftime(3)</a>,\n<a href=\"https://man.page/3/strptime\">strptime(3)</a>, <a href=\"https://man.page/3/timegm\">timegm(3)</a>, <a href=\"https://man.page/3/tzset\">tzset(3)</a>,\n<a href=\"https://man.page/7/time\">time(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}