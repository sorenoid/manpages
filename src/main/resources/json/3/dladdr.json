{"name":"dladdr","body":"\n\n<h1 align=\"center\">DLADDR</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dladdr, dladdr1\n- translate address to symbolic information</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE <br>\n#include &lt;dlfcn.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ndladdr(void *</b><i>addr</i><b>, Dl_info\n*</b><i>info</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ndladdr1(void *</b><i>addr</i><b>, Dl_info\n*</b><i>info</i><b>, void **</b><i>extra_info</i><b>,\nint</b> <i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Link with\n<i>-ldl</i>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>dladdr</b>() determines whether the address specified in\n<i>addr</i> is located in one of the shared objects loaded\nby the calling application. If it is, then <b>dladdr</b>()\nreturns information about the shared object and symbol that\noverlaps <i>addr</i>. This information is returned in a\n<i>Dl_info</i> structure:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nconst char *dli_fname; /* Pathname of shared object that\n<br>\ncontains address */ <br>\nvoid *dli_fbase; /* Base address at which shared <br>\nobject is loaded */ <br>\nconst char *dli_sname; /* Name of symbol whose definition\n<br>\noverlaps <i>addr</i> */ <br>\nvoid *dli_saddr; /* Exact address of symbol named <br>\nin <i>dli_sname</i> */ <br>\n} Dl_info;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no symbol\nmatching <i>addr</i> could be found, then <i>dli_sname</i>\nand <i>dli_saddr</i> are set to NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>dladdr1</b>() is like <b>dladdr</b>(), but returns\nadditional information via the argument <i>extra_info</i>.\nThe information returned depends on the value specified in\n<i>flags</i>, which can have one of the following values:\n<b><br>\nRTLD_DL_LINKMAP</b></p>\n\n<p style=\"margin-left:22%;\">Obtain a pointer to the link\nmap for the matched file. The <i>extra_info</i> argument\npoints to a pointer to a <i>link_map</i> structure (i.e.,\n<i>struct link_map&nbsp;**</i>), defined in\n<i>&lt;link.h&gt;</i> as:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct link_map\n{ <br>\nElfW(Addr) l_addr; /* Difference between the <br>\naddress in the ELF file and <br>\nthe address in memory */ <br>\nchar *l_name; /* Absolute pathname where <br>\nobject was found */ <br>\nElfW(Dyn) *l_ld; /* Dynamic section of the <br>\nshared object */ <br>\nstruct link_map *l_next, *l_prev; <br>\n/* Chain of loaded objects */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* Plus\nadditional fields private to the <br>\nimplementation */ <br>\n};</p>\n\n<p style=\"margin-left:11%;\"><b>RTLD_DL_SYMENT</b></p>\n\n<p style=\"margin-left:22%;\">Obtain a pointer to the ELF\nsymbol table entry of the matching symbol. The\n<i>extra_info</i> argument is a pointer to a symbol pointer:\n<i>const ElfW(Sym) **</i>. The <i>ElfW</i>() macro\ndefinition turns its argument into the name of an ELF data\ntype suitable for the hardware architecture. For example, on\na 64-bit platform, <i>ElfW(Sym)</i> yields the data type\nname <i>Elf64_Sym</i>, which is defined in\n<i>&lt;elf.h&gt;</i> as:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">typedef struct\n{ <br>\nElf64_Word st_name; /* Symbol name */ <br>\nunsigned char st_info; /* Symbol type and binding */ <br>\nunsigned char st_other; /* Symbol visibility */ <br>\nElf64_Section st_shndx; /* Section index */ <br>\nElf64_Addr st_value; /* Symbol value */ <br>\nElf64_Xword st_size; /* Symbol size */ <br>\n} Elf64_Sym;</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>st_name</i> field is an index into the string table.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>st_info</i> field encodes the symbol&rsquo;s type and\nbinding. The type can be extracted using the macro\n<b>ELF64_ST_TYPE(st_info)</b> (or <b>ELF32_ST_TYPE()</b> on\n32-bit platforms), which yields one of the following\nvalues:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3309451.png\" alt=\"Image grohtml-3309451.png\"></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The symbol\nbinding can be extracted from the <i>st_info</i> field using\nthe macro <b>ELF64_ST_BIND(st_info)</b> (or\n<b>ELF32_ST_BIND()</b> on 32-bit platforms), which yields\none of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3309452.png\" alt=\"Image grohtml-3309452.png\"></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>st_other</i> field contains the symbol&rsquo;s\nvisibility, which can be extracted using the macro\n<b>ELF64_ST_VISIBILITY(st_info)</b> (or\n<b>ELF32_ST_VISIBILITY()</b> on 32-bit platforms), which\nyields one of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3309453.png\" alt=\"Image grohtml-3309453.png\"></p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nthese functions return a nonzero value. If the address\nspecified in <i>addr</i> could be matched to a shared\nobject, but not to a symbol in the shared object, then the\n<i>info-&gt;dli_sname</i> and <i>info-&gt;dli_saddr</i>\nfields are set to NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the address\nspecified in <i>addr</i> could not be matched to a shared\nobject, then these functions return 0. In this case, an\nerror message is <i>not</i> available via\n<a href=\"https://man.page/3/dlerror\">dlerror(3)</a>.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dladdr</b>()\nis present in glibc 2.0 and later. <b>dladdr1</b>() first\nappeared in glibc 2.3.3.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3309454.png\" alt=\"Image grohtml-3309454.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare nonstandard GNU extensions that are also present on\nSolaris.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sometimes, the\nfunction pointers you pass to <b>dladdr</b>() may surprise\nyou. On some architectures (notably i386 and x86-64),\n<i>dli_fname</i> and <i>dli_fbase</i> may end up pointing\nback at the object from which you called <b>dladdr</b>(),\neven if the function used as an argument should come from a\ndynamically linked library.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The problem is\nthat the function pointer will still be resolved at compile\ntime, but merely point to the <i>plt</i> (Procedure Linkage\nTable) section of the original object (which dispatches the\ncall after asking the dynamic linker to resolve the symbol).\nTo work around this, you can try to compile the code to be\nposition-independent: then, the compiler cannot prepare the\npointer at compile time any more and <a href=\"https://man.page/1/gcc\">gcc(1)</a> will\ngenerate code that just loads the final symbol address from\nthe <i>got</i> (Global Offset Table) at run time before\npassing it to <b>dladdr</b>().</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/dl_iterate_phdr\">dl_iterate_phdr(3)</a>,\n<a href=\"https://man.page/3/dlinfo\">dlinfo(3)</a>, <a href=\"https://man.page/3/dlopen\">dlopen(3)</a>, <a href=\"https://man.page/3/dlsym\">dlsym(3)</a>,\n<b>ld.so</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}