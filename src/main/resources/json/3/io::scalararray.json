{"name":"io::scalararray","description":"IO::ScalarArray - IO:: interface for reading/writing an array of scalars","body":"\n\n<h1 align=\"center\">IO::ScalarArray</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">IO::ScalarArray\n- IO:: interface for reading/writing an array of scalars</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Perform I/O on\nstrings, using the basic <small>OO</small> interface...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nIO::ScalarArray; <br>\n@data = (&quot;My mes&quot;, &quot;sage:\\n&quot;); <br>\n### Open a handle on an array, and append to it: <br>\n$AH = new IO::ScalarArray \\@data; <br>\n$AH-&gt;print(&quot;Hello&quot;); <br>\n$AH-&gt;print(&quot;, world!\\nBye now!\\n&quot;); <br>\nprint &quot;The array is now: &quot;, @data, &quot;\\n&quot;;\n<br>\n### Open a handle on an array, read it line-by-line, then\nclose it: <br>\n$AH = new IO::ScalarArray \\@data; <br>\nwhile (defined($_ = $AH-&gt;getline)) { <br>\nprint &quot;Got line: $_&quot;; <br>\n} <br>\n$AH-&gt;close; <br>\n### Open a handle on an array, and slurp in all the lines:\n<br>\n$AH = new IO::ScalarArray \\@data; <br>\nprint &quot;All lines:\\n&quot;, $AH-&gt;getlines; <br>\n### Get the current position (either of two ways): <br>\n$pos = $AH-&gt;getpos; <br>\n$offset = $AH-&gt;tell; <br>\n### Set the current position (either of two ways): <br>\n$AH-&gt;setpos($pos); <br>\n$AH-&gt;seek($offset, 0); <br>\n### Open an anonymous temporary array: <br>\n$AH = new IO::ScalarArray; <br>\n$AH-&gt;print(&quot;Hi there!&quot;); <br>\nprint &quot;I printed: &quot;, @{$AH-&gt;aref},\n&quot;\\n&quot;; ### get at value</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Don&rsquo;t\nlike <small>OO</small> for your I/O? No problem. Thanks to\nthe magic of an invisible <b>tie()</b>, the following now\nworks out of the box, just as it does with IO::Handle:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nIO::ScalarArray; <br>\n@data = (&quot;My mes&quot;, &quot;sage:\\n&quot;); <br>\n### Open a handle on an array, and append to it: <br>\n$AH = new IO::ScalarArray \\@data; <br>\nprint $AH &quot;Hello&quot;; <br>\nprint $AH &quot;, world!\\nBye now!\\n&quot;; <br>\nprint &quot;The array is now: &quot;, @data, &quot;\\n&quot;;\n<br>\n### Open a handle on a string, read it line-by-line, then\nclose it: <br>\n$AH = new IO::ScalarArray \\@data; <br>\nwhile (&lt;$AH&gt;) { <br>\nprint &quot;Got line: $_&quot;; <br>\n} <br>\nclose $AH; <br>\n### Open a handle on a string, and slurp in all the lines:\n<br>\n$AH = new IO::ScalarArray \\@data; <br>\nprint &quot;All lines:\\n&quot;, &lt;$AH&gt;; <br>\n### Get the current position (WARNING: requires 5.6): <br>\n$offset = tell $AH; <br>\n### Set the current position (WARNING: requires 5.6): <br>\nseek $AH, $offset, 0; <br>\n### Open an anonymous temporary scalar: <br>\n$AH = new IO::ScalarArray; <br>\nprint $AH &quot;Hi there!&quot;; <br>\nprint &quot;I printed: &quot;, @{$AH-&gt;aref},\n&quot;\\n&quot;; ### get at value</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">And for you\nfolks with 1.x code out there: the old <b>tie()</b> style\nstill works, though this is <i>unnecessary and\ndeprecated</i>:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nIO::ScalarArray; <br>\n### Writing to a scalar... <br>\nmy @a; <br>\ntie *OUT, 'IO::ScalarArray', \\@a; <br>\nprint OUT &quot;line 1\\nline 2\\n&quot;, &quot;line\n3\\n&quot;; <br>\nprint &quot;Array is now: &quot;, @a, &quot;\\n&quot; <br>\n### Reading and writing an anonymous scalar... <br>\ntie *OUT, 'IO::ScalarArray'; <br>\nprint OUT &quot;line 1\\nline 2\\n&quot;, &quot;line\n3\\n&quot;; <br>\ntied(OUT)-&gt;seek(0,0); <br>\nwhile (&lt;OUT&gt;) { <br>\nprint &quot;Got line: &quot;, $_; <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class is\npart of the IO::Stringy distribution; see IO::Stringy for\nchange log and general information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nIO::ScalarArray class implements objects which behave just\nlike IO::Handle (or FileHandle) objects, except that you may\nuse them to write to (or read from) arrays of scalars.\nLogically, an array of scalars defines an in-core\n&quot;file&quot; whose contents are the concatenation of the\nscalars in the array. The handles created by this class are\nautomatically tiehandle&rsquo;d (though please see &quot;\n<small>WARNINGS&quot;</small> for information relevant to\nyour Perl version).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For writing\nlarge amounts of data with individual <b>print()</b>\nstatements, this class is likely to be more efficient than\nIO::Scalar.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Basically,\nthis:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my @a; <br>\n$AH = new IO::ScalarArray \\@a; <br>\n$AH-&gt;print(&quot;Hel&quot;, &quot;lo, &quot;); ### OO\nstyle <br>\n$AH-&gt;print(&quot;world!\\n&quot;); ### ditto</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my @a; <br>\n$AH = new IO::ScalarArray \\@a; <br>\nprint $AH &quot;Hel&quot;, &quot;lo, &quot;; ### non-OO\nstyle <br>\nprint $AH &quot;world!\\n&quot;; ### ditto</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Causes @a to be\nset to the following array of 3 strings:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(\n&quot;Hel&quot; , <br>\n&quot;lo, &quot; , <br>\n&quot;world!\\n&quot; )</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See IO::Scalar\nand compare with this class.</p>\n\n<h2>PUBLIC INTERFACE\n<a name=\"PUBLIC INTERFACE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Construction</b>\n<br>\nnew [ <small>ARGS...</small> ]</p>\n\n<p style=\"margin-left:17%;\"><i>Class method.</i> Return a\nnew, unattached array handle. If any arguments are given,\nthey&rsquo;re sent to <b>open()</b>.</p>\n\n<p style=\"margin-left:11%;\">open [ <small>ARRAYREF</small>\n]</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Open\nthe array handle on a new array, pointed to by\n<small>ARRAYREF.</small> If no <small>ARRAYREF</small> is\ngiven, a &quot;private&quot; array is created to hold the\nfile data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nself object on success, undefined on error.</p>\n\n<p style=\"margin-left:11%;\">opened</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Is the\narray handle opened on something?</p>\n\n<p style=\"margin-left:11%;\">close</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i>\nDisassociate the array handle from its underlying array.\nDone automatically on destroy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Input and\noutput</b> <br>\nflush</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> No-op,\nprovided for <small>OO</small> compatibility.</p>\n\n<p style=\"margin-left:11%;\">fileno</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> No-op,\nreturns undef</p>\n\n<p style=\"margin-left:11%;\">getc</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\nthe next character, or undef if none remain. This does a\n<a href=\"https://man.page/1/read\">read(1)</a>, which is somewhat costly.</p>\n\n<p style=\"margin-left:11%;\">getline</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\nthe next line, or undef on end of data. Can safely be called\nin an array context. Currently, lines are delimited by\n&quot;\\n&quot;.</p>\n\n<p style=\"margin-left:11%;\">getlines</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Get all\nremaining lines. It will <b>croak()</b> if accidentally\ncalled in a scalar context.</p>\n\n<p style=\"margin-left:11%;\">print\n<small>ARGS...</small></p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Print\n<small>ARGS</small> to the underlying array.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Currently, this\nalways causes a &quot;seek to the end of the array&quot; and\ngenerates a new array entry. This may change in the\nfuture.</p>\n\n<p style=\"margin-left:11%;\">read <small>BUF,\nNBYTES,</small> [ <small>OFFSET</small> ];</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Read\nsome bytes from the array. Returns the number of bytes\nactually read, 0 on end-of-file, undef on error.</p>\n\n<p style=\"margin-left:11%;\">write <small>BUF,\nNBYTES,</small> [ <small>OFFSET</small> ];</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Write\nsome bytes into the array.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Seeking/telling\nand other attributes</b> <br>\nautoflush</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> No-op,\nprovided for <small>OO</small> compatibility.</p>\n\n<p style=\"margin-left:11%;\">binmode</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> No-op,\nprovided for <small>OO</small> compatibility.</p>\n\n<p style=\"margin-left:11%;\">clearerr</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Clear\nthe error and <small>EOF</small> flags. A no-op.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>eof</p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p><i>Instance method.</i> Are we at end of file?</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">seek\n<small>POS,WHENCE</small></p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Seek to\na given position in the stream. Only a <small>WHENCE</small>\nof 0 ( <small>SEEK_SET</small> ) is supported.</p>\n\n<p style=\"margin-left:11%;\">tell</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\nthe current position in the stream, as a numeric offset.</p>\n\n<p style=\"margin-left:11%;\">setpos <small>POS</small></p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Seek to\na given position in the array, using the opaque\n<b>getpos()</b> value. Don&rsquo;t expect this to be a\nnumber.</p>\n\n<p style=\"margin-left:11%;\">getpos</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\nthe current position in the array, as an opaque value.\nDon&rsquo;t expect this to be a number.</p>\n\n<p style=\"margin-left:11%;\">aref</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\na reference to the underlying array.</p>\n\n<h2>WARNINGS\n<a name=\"WARNINGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Perl&rsquo;s\n<small>TIEHANDLE</small> spec was incomplete prior to\n5.005_57; it was missing support for &quot;seek()&quot;,\n&quot;tell()&quot;, and &quot;eof()&quot;. Attempting to use\nthese functions with an IO::ScalarArray will not work prior\nto 5.005_57. IO::ScalarArray will not have the relevant\nmethods invoked; and even worse, this kind of bug can lie\ndormant for a while. If you turn warnings on (via $^W or\n&quot;perl -w&quot;), and you see something like this...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">attempt to seek\non unopened filehandle</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">...then you are\nprobably trying to use one of these functions on an\nIO::ScalarArray with an old Perl. The remedy is to simply\nuse the <small>OO</small> version; e.g.:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$AH-&gt;seek(0,0);\n### GOOD: will work on any 5.005 <br>\nseek($AH,0,0); ### WARNING: will only work on 5.005_57 and\nbeyond</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$Id:\nScalarArray.pm,v 1.7 2005/02/10 21:21:53 dfs Exp $</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Primary\nMaintainer</b> <br>\nDianne Skoll (<i>dfs@roaringpenguin.com</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Principal\nauthor</b> <br>\nEryq (<i>eryq@zeegee.com</i>). President, ZeeGee Software\nInc (<i>http://www.zeegee.com</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Other\ncontributors</b> <br>\nThanks to the following individuals for their invaluable\ncontributions (if I&rsquo;ve forgotten or misspelled your\nname, please email me!):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Andy\nGlew,</i> for suggesting &quot;getc()&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Brandon\nBrowning,</i> for suggesting &quot;opened()&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Eric L.\nBrine,</i> for his offset-using <b>read()</b> and\n<b>write()</b> implementations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Doug\nWilson,</i> for the IO::Handle inheritance and automatic\ntie-ing.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#PUBLIC INTERFACE\">PUBLIC INTERFACE</a>","<a href=\"#WARNINGS\">WARNINGS</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":3}