{"name":"try::tiny","body":"\n\n<h1 align=\"center\">Try::Tiny</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Try::Tiny -\nMinimal try/catch with proper preservation of $@</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n0.31</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can use\nTry::Tiny&rsquo;s &quot;try&quot; and &quot;catch&quot; to\nexpect and handle exceptional conditions, avoiding quirks in\nPerl and common mistakes:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># handle errors\nwith a catch handler <br>\ntry { <br>\ndie &quot;foo&quot;; <br>\n} catch { <br>\nwarn &quot;caught error: $_&quot;; # not $@ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can also\nuse it like a standalone &quot;eval&quot; to catch and\nignore any error conditions. Obviously, this is an extreme\nmeasure not to be undertaken lightly:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># just silence\nerrors <br>\ntry { <br>\ndie &quot;foo&quot;; <br>\n};</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides bare bones\n&quot;try&quot;/&quot;catch&quot;/&quot;finally&quot;\nstatements that are designed to minimize common mistakes\nwith eval blocks, and <small>NOTHING</small> else.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is unlike\nTryCatch which provides a nice syntax and avoids adding\nanother call stack layer, and supports calling\n&quot;return&quot; from the &quot;try&quot; block to return\nfrom the parent subroutine. These extra features come at a\ncost of a few dependencies, namely Devel::Declare and\nScope::Upper which are occasionally problematic, and the\nadditional catch filtering uses Moose type constraints which\nmay not be desirable either.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The main focus\nof this module is to provide simple and reliable error\nhandling for those having a hard time installing TryCatch,\nbut who still want to write correct &quot;eval&quot; blocks\nwithout 5 lines of boilerplate each time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It&rsquo;s\ndesigned to work as correctly as possible in light of the\nvarious pathological edge cases (see &quot;\n<small>BACKGROUND&quot;</small> ) and to be compatible with\nany style of error values (simple strings, references,\nobjects, overloaded objects, etc).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n&quot;try&quot; block dies, it returns the value of the last\nstatement executed in the &quot;catch&quot; block, if there\nis one. Otherwise, it returns &quot;undef&quot; in scalar\ncontext or the empty list in list context. The following\nexamples all assign &quot;bar&quot; to $x:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $x = try {\ndie &quot;foo&quot; } catch { &quot;bar&quot; }; <br>\nmy $x = try { die &quot;foo&quot; } || &quot;bar&quot;; <br>\nmy $x = (try { die &quot;foo&quot; }) // &quot;bar&quot;;\n<br>\nmy $x = eval { die &quot;foo&quot; } || &quot;bar&quot;;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can add\n&quot;finally&quot; blocks, yielding the following:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $x; <br>\ntry { die 'foo' } finally { $x = 'bar' }; <br>\ntry { die 'foo' } catch { warn &quot;Got a die: $_&quot; }\nfinally { $x = 'bar' };</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;finally&quot;\nblocks are always executed making them suitable for cleanup\ncode which cannot be handled using local. You can add as\nmany &quot;finally&quot; blocks to a given &quot;try&quot;\nblock as you like.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nadding a &quot;finally&quot; block without a preceding\n&quot;catch&quot; block suppresses any errors. This\nbehaviour is consistent with using a standalone\n&quot;eval&quot;, but it is not consistent with\n&quot;try&quot;/&quot;finally&quot; patterns found in other\nprogramming languages, such as Java, Python, Javascript or\nC#. If you learned the &quot;try&quot;/&quot;finally&quot;\npattern from one of these languages, watch out for this.</p>\n\n<h2>EXPORTS\n<a name=\"EXPORTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All functions\nare exported by default using Exporter.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you need to\nrename the &quot;try&quot;, &quot;catch&quot; or\n&quot;finally&quot; keyword consider using Sub::Import to\nget Sub::Exporter&rsquo;s flexibility. <br>\ntry (&amp;;@)</p>\n\n<p style=\"margin-left:17%;\">Takes one mandatory\n&quot;try&quot; subroutine, an optional &quot;catch&quot;\nsubroutine and &quot;finally&quot; subroutine.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The mandatory\nsubroutine is evaluated in the context of an\n&quot;eval&quot; block.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If no error\noccurred the value from the first block is returned,\npreserving list/scalar context.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If there was an\nerror and the second subroutine was given it will be invoked\nwith the error in $_ (localized) and as that block&rsquo;s\nfirst and only argument.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$@ does\n<b>not</b> contain the error. Inside the &quot;catch&quot;\nblock it has the same value it had before the\n&quot;try&quot; block was executed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\nerror may be false, but if that happens the\n&quot;catch&quot; block will still be invoked.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Once all\nexecution is finished then the &quot;finally&quot; block, if\ngiven, will execute.</p>\n\n<p style=\"margin-left:11%;\">catch (&amp;;@)</p>\n\n<p style=\"margin-left:17%;\">Intended to be used in the\nsecond argument position of &quot;try&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nreference to the subroutine it was given but blessed as\n&quot;Try::Tiny::Catch&quot; which allows try to decode\ncorrectly what to do with this code reference.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">catch { ...\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Inside the\n&quot;catch&quot; block the caught error is stored in $_,\nwhile previous value of $@ is still available for use. This\nvalue may or may not be meaningful depending on what\nhappened before the &quot;try&quot;, but it might be a good\nidea to preserve it in an error stack.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For code that\ncaptures $@ when throwing new errors (i.e.\nClass::Throwable), you&rsquo;ll need to do:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">local $@ =\n$_;</p>\n\n<p style=\"margin-left:11%;\">finally (&amp;;@)</p>\n\n<p style=\"margin-left:17%;\">try { ... } <br>\ncatch { ... } <br>\nfinally { ... };</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Or</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">try { ... }\n<br>\nfinally { ... };</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Or even</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">try { ... }\n<br>\nfinally { ... } <br>\ncatch { ... };</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Intended to be\nthe second or third element of &quot;try&quot;.\n&quot;finally&quot; blocks are always executed in the event\nof a successful &quot;try&quot; or if &quot;catch&quot; is\nrun. This allows you to locate cleanup code which cannot be\ndone via &quot;local()&quot; e.g. closing a file handle.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When invoked,\nthe &quot;finally&quot; block is passed the error that was\ncaught. If no error was caught, it is passed nothing. (Note\nthat the &quot;finally&quot; block does not localize $_ with\nthe error, since unlike in a &quot;catch&quot; block, there\nis no way to know if &quot;$_ == undef&quot; implies that\nthere were no errors.) In other words, the following code\ndoes just what you would expect:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">try { <br>\ndie_sometimes(); <br>\n} catch { <br>\n# ...code run in case of error <br>\n} finally { <br>\nif (@_) { <br>\nprint &quot;The try block died with: @_\\n&quot;; <br>\n} else { <br>\nprint &quot;The try block ran without error.\\n&quot;; <br>\n} <br>\n};</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>You must\nalways do your own error handling in the &quot;finally&quot;\nblock</b>. &quot;Try::Tiny&quot; will not do anything about\nhandling possible errors coming from code located in these\nblocks.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Furthermore\n<b>exceptions in &quot;finally&quot; blocks are not\ntrappable and are unable to influence the execution of your\nprogram</b>. This is due to limitation of\n&quot;DESTROY&quot;-based scope guards, which\n&quot;finally&quot; is implemented on top of. This may\nchange in a future version of Try::Tiny.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In the same way\n&quot;catch()&quot; blesses the code reference this\nsubroutine does the same except it bless them as\n&quot;Try::Tiny::Finally&quot;.</p>\n\n<h2>BACKGROUND\n<a name=\"BACKGROUND\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are a\nnumber of issues with &quot;eval&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Clobbering\n$@</b> <br>\nWhen you run an &quot;eval&quot; block and it succeeds, $@\nwill be cleared, potentially clobbering an error that is\ncurrently being caught.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This causes\naction at a distance, clearing previous errors your caller\nmay have not yet handled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$@ must be\nproperly localized before invoking &quot;eval&quot; in order\nto avoid this issue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">More\nspecifically, before Perl version 5.14.0 $@ was clobbered at\nthe beginning of the &quot;eval&quot;, which also made it\nimpossible to capture the previous error before you die (for\ninstance when making exception objects with error\nstacks).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For this reason\n&quot;try&quot; will actually set $@ to its previous value\n(the one available before entering the &quot;try&quot;\nblock) in the beginning of the &quot;eval&quot; block.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Localizing\n$@ silently masks errors</b> <br>\nInside an &quot;eval&quot; block, &quot;die&quot; behaves\nsort of like:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub die { <br>\n$@ = $_[0]; <br>\nreturn_undef_from_eval(); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This means that\nif you were polite and localized $@ you can&rsquo;t die in\nthat scope, or your error will be discarded (printing\n&quot;Something&rsquo;s wrong&quot; instead).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The workaround\nis very ugly:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $error = do\n{ <br>\nlocal $@; <br>\neval { ... }; <br>\n$@; <br>\n}; <br>\n... <br>\ndie $error;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>$@ might not\nbe a true value</b> <br>\nThis code is wrong:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if ( $@ ) {\n<br>\n... <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">because due to\nthe previous caveats it may have been unset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$@ could also\nbe an overloaded error object that evaluates to false, but\nthat&rsquo;s asking for trouble anyway.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The classic\nfailure mode (fixed in Perl 5.14.0) is:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub\nObject::DESTROY { <br>\neval { ... } <br>\n} <br>\neval { <br>\nmy $obj = Object-&gt;new; <br>\ndie &quot;foo&quot;; <br>\n}; <br>\nif ( $@ ) { <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this case\nsince &quot;Object::DESTROY&quot; is not localizing $@ but\nstill uses &quot;eval&quot;, it will set $@ to\n&quot;&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The destructor\nis called when the stack is unwound, after &quot;die&quot;\nsets $@ to &quot;foo at Foo.pm line 42\\n&quot;, so by the\ntime &quot;if ( $@ )&quot; is evaluated it has been cleared\nby &quot;eval&quot; in the destructor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The workaround\nfor this is even uglier than the previous ones. Even though\nwe can&rsquo;t save the value of $@ from code that\ndoesn&rsquo;t localize, we can at least be sure the\n&quot;eval&quot; was aborted due to an error:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $failed =\nnot eval { <br>\n... <br>\nreturn 1; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is because\nan &quot;eval&quot; that caught a &quot;die&quot; will\nalways return a false value.</p>\n\n<h2>ALTERNATE SYNTAX\n<a name=\"ALTERNATE SYNTAX\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using Perl 5.10\nyou can use &quot;Switch statements&quot; in perlsyn (but\nplease don&rsquo;t, because that syntax has since been\ndeprecated because there was too much unexpected magical\nbehaviour).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;catch&quot; block is invoked in a topicalizer context\n(like a &quot;given&quot; block), but note that you\ncan&rsquo;t return a useful value from &quot;catch&quot;\nusing the &quot;when&quot; blocks without an explicit\n&quot;return&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is\nsomewhat similar to Perl 6&rsquo;s &quot;CATCH&quot; blocks.\nYou can use it to concisely match errors:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">try { <br>\nrequire Foo; <br>\n} catch { <br>\nwhen (/^Can't locate .*?\\.pm in \\@INC/) { } # ignore <br>\ndefault { die $_ } <br>\n};</p>\n\n<h2>CAVEATS\n<a name=\"CAVEATS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">@_ is not available within the\n&quot;try&quot; block, so you need to copy your argument\nlist. In case you want to work with argument values directly\nvia @_ aliasing (i.e. allow &quot;$_[1] =\n&quot;foo&quot;&quot;), you need to pass @_ by\nreference:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub foo { <br>\nmy ( $self, @args ) = @_; <br>\ntry { $self-&gt;bar(@args) } <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">or</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub\nbar_in_place { <br>\nmy $self = shift; <br>\nmy $args = \\@_; <br>\ntry { $_ = $self-&gt;bar($_) for @$args } <br>\n}</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">&quot;return&quot; returns from\nthe &quot;try&quot; block, not from the parent sub (note\nthat this is also how &quot;eval&quot; works, but not how\nTryCatch works):</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub parent_sub\n{ <br>\ntry { <br>\ndie; <br>\n} <br>\ncatch { <br>\nreturn; <br>\n}; <br>\nsay &quot;this text WILL be displayed, even though an\nexception is thrown&quot;; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Instead, you\nshould capture the return value:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub parent_sub\n{ <br>\nmy $success = try { <br>\ndie; <br>\n1; <br>\n}; <br>\nreturn unless $success; <br>\nsay &quot;This text WILL NEVER appear!&quot;; <br>\n} <br>\n# OR <br>\nsub parent_sub_with_catch { <br>\nmy $success = try { <br>\ndie; <br>\n1; <br>\n} <br>\ncatch { <br>\n# do something with $_ <br>\nreturn undef; #see note <br>\n}; <br>\nreturn unless $success; <br>\nsay &quot;This text WILL NEVER appear!&quot;; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that if\nyou have a &quot;catch&quot; block, it must return\n&quot;undef&quot; for this to work, since if a\n&quot;catch&quot; block exists, its return value is returned\nin place of &quot;undef&quot; when an exception is\nthrown.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">&quot;try&quot; introduces\nanother caller stack frame. Sub::Uplevel is not used. Carp\nwill not report this when using full stack traces, though,\nbecause %Carp::Internal is used. This lack of magic is\nconsidered a feature.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The value of $_ in the &quot;catch&quot; block is not\nguaranteed to be the value of the exception thrown ($@) in\nthe &quot;try&quot; block. There is no safe way to ensure\nthis, since &quot;eval&quot; may be used unhygienically in\ndestructors. The only guarantee is that the\n&quot;catch&quot; will be called if an exception is\nthrown.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>The return value of the &quot;catch&quot; block is not\nignored, so if testing the result of the expression for\ntruth on success, be sure to return a false value from the\n&quot;catch&quot; block:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $obj = try {\n<br>\nMightFail-&gt;new; <br>\n} catch { <br>\n... <br>\nreturn; # avoid returning a true value; <br>\n}; <br>\nreturn unless $obj;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"51%\">\n\n\n<p style=\"margin-top: 1em\">$SIG{__DIE__} is still in\neffect.</p> </td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Though it can\nbe argued that $SIG{__DIE__} should be disabled inside of\n&quot;eval&quot; blocks, since it isn&rsquo;t people have\ngrown to rely on it. Therefore in the interests of\ncompatibility, &quot;try&quot; does not disable\n$SIG{__DIE__} for the scope of the error throwing code.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"72%\">\n\n\n<p style=\"margin-top: 1em\">Lexical $_ may override the one\nset by &quot;catch&quot;.</p></td>\n<td width=\"11%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example\nPerl 5.10&rsquo;s &quot;given&quot; form uses a lexical $_,\ncreating some confusing behavior:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">given ($foo) {\n<br>\nwhen (...) { <br>\ntry { <br>\n... <br>\n} catch { <br>\nwarn $_; # will print $foo, not the error <br>\nwarn $_[0]; # instead, get the error like this <br>\n} <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that this\nbehavior was changed once again in Perl5 version 18\n&lt;https://metacpan.org/module/perldelta#given-now-aliases-the-global-_&gt;.\nHowever, since the entirety of lexical $_ is now considered\nexperimental <br>\n\n&lt;https://metacpan.org/module/perldelta#Lexical-_-is-now-experimental&gt;,\nit is unclear whether the new version 18 behavior is\nfinal.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Syntax::Keyword::Try</p>\n\n<p style=\"margin-left:17%;\">Only available on perls &gt;=\n5.14, with a slightly different syntax (e.g. no trailing\n&quot;;&quot; because it&rsquo;s actually a keyword, not a\nsub, but this means you can &quot;return&quot; and\n&quot;next&quot; within it). Use Feature::Compat::Try to\nautomatically switch to the native &quot;try&quot; syntax in\nnewer perls (when available). See also Try Catch Exception\nHandling.</p>\n\n<p style=\"margin-left:11%;\">TryCatch</p>\n\n<p style=\"margin-left:17%;\">Much more feature complete,\nmore convenient semantics, but at the cost of implementation\ncomplexity.</p>\n\n<p style=\"margin-left:11%;\">autodie</p>\n\n<p style=\"margin-left:17%;\">Automatic error throwing for\nbuiltin functions and more. Also designed to work well with\n&quot;given&quot;/&quot;when&quot;.</p>\n\n<p style=\"margin-left:11%;\">Throwable</p>\n\n<p style=\"margin-left:17%;\">A lightweight role for rolling\nyour own exception classes.</p>\n\n<p style=\"margin-left:11%;\">Error</p>\n\n<p style=\"margin-left:17%;\">Exception object implementation\nwith a &quot;try&quot; statement. Does not localize $@.</p>\n\n<p style=\"margin-left:11%;\">Exception::Class::TryCatch</p>\n\n<p style=\"margin-left:17%;\">Provides a &quot;catch&quot;\nstatement, but properly calling &quot;eval&quot; is your\nresponsibility.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;try&quot; keyword pushes $@ onto an error stack,\navoiding some of the issues with $@, but you still need to\nlocalize to prevent clobbering.</p>\n\n<h2>LIGHTNING TALK\n<a name=\"LIGHTNING TALK\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">I gave a\nlightning talk about this module, you can see the slides\n(Firefox only):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;http://web.archive.org/web/20100628040134/http://nothingmuch.woobling.org/talks/takahashi.xul&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or read the\nsource:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;http://web.archive.org/web/20100305133605/http://nothingmuch.woobling.org/talks/yapc_asia_2009/try_tiny.yml&gt;</p>\n\n<h2>SUPPORT\n<a name=\"SUPPORT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Bugs may be\nsubmitted through the <small>RT</small> bug tracker\n&lt;https://rt.cpan.org/Public/Dist/Display.html?Name=Try-Tiny&gt;\n(or bug-Try-Tiny@rt.cpan.org\n&lt;mailto:bug-Try-Tiny@rt.cpan.org&gt;).</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">&times;&times;&times;&times;\n&times;&sect;&times;&times;&rsquo;&times;&times; (Yuval\nKogman) &lt;nothingmuch@woobling.org&gt;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Jesse Luehrs &lt;doy@tozt.net&gt;</p></td></tr>\n</table>\n\n<h2>CONTRIBUTORS\n<a name=\"CONTRIBUTORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p style=\"margin-top: 1em\">Karen Etheridge\n&lt;ether@cpan.org&gt;</p> </td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Peter Rabbitson &lt;ribasushi@cpan.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Ricardo Signes &lt;rjbs@cpan.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Mark Fowler &lt;mark@twoshortplanks.com&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Graham Knop &lt;haarg@haarg.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Aristotle Pagaltzis &lt;pagaltzis@gmx.de&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Dagfinn Ilmari Manns&Atilde;&yen;ker\n&lt;ilmari@ilmari.org&gt;</p> </td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Lukas Mai &lt;l.mai@web.de&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Alex &lt;alex@koban.(none)&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>anaxagoras &lt;walkeraj@gmail.com&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Andrew Yates &lt;ayates@haddock.local&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>awalker &lt;awalker@sourcefire.com&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>chromatic &lt;chromatic@wgz.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>cm-perl &lt;cm-perl@users.noreply.github.com&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>David Lowe &lt;davidl@lokku.com&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Glenn Fowler &lt;cebjyre@cpan.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Hans Dieter Pearcey &lt;hdp@weftsoar.net&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Jens Berthold &lt;jens@jebecs.de&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Jonathan Yu &lt;JAWNSY@cpan.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Marc Mims &lt;marc@questright.com&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Mark Stosberg &lt;mark@stosberg.com&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Pali &lt;pali@cpan.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Paul Howarth &lt;paul@city-fan.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"69%\">\n\n\n<p>Rudolf Leermakers &lt;rudolf@hatsuseno.org&gt;</p></td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\n<h2>COPYRIGHT AND LICENCE\n<a name=\"COPYRIGHT AND LICENCE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis Copyright (c) 2009 by &times;&times;&times;&times;\n&times;&sect;&times;&times;&rsquo;&times;&times; (Yuval\nKogman).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware, licensed under:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The MIT (X11)\nLicense</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXPORTS\">EXPORTS</a>","<a href=\"#BACKGROUND\">BACKGROUND</a>","<a href=\"#ALTERNATE SYNTAX\">ALTERNATE SYNTAX</a>","<a href=\"#CAVEATS\">CAVEATS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#LIGHTNING TALK\">LIGHTNING TALK</a>","<a href=\"#SUPPORT\">SUPPORT</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#CONTRIBUTORS\">CONTRIBUTORS</a>","<a href=\"#COPYRIGHT AND LICENCE\">COPYRIGHT AND LICENCE</a>"],"level":3}