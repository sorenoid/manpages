{"name":"glib::version","body":"\n\n<h1 align=\"center\">Glib::version</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::version -\nLibrary Versioning Utilities</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"># require at\nleast version 1.021 of the Glib module <br>\nuse Glib '1.021'; <br>\n# g_set_application_name() was introduced in GLib 2.2.0, and\n<br>\n# first supported by version 1.040 of the Glib Perl module.\n<br>\nif ($Glib::VERSION &gt;= 1.040 and Glib-&gt;CHECK_VERSION\n(2,2,0)) { <br>\nGlib::set_application_name ('My Cool Program'); <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both the Glib\nmodule and the GLib C library are works-in-progress, and\ntheir interfaces grow over time. As more features are added\nto each, and your code uses those new features, you will\nintroduce version-specific dependencies, and naturally,\nyou&rsquo;ll want to be able to code around them. Enter the\nversioning <small>API.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For simple Perl\nmodules, a single version number is sufficient; however,\nGlib is a binding to another software library, and this\nintroduces some complexity. We have three versions that\nfully specify the <small>API</small> available to you. <br>\nPerl Bindings Version</p>\n\n<p style=\"margin-left:17%;\">Perl modules use a version\nnumber, and Glib is no exception. <i>$Glib::VERSION</i> is\nthe version of the current Glib module. By ad hoc\nconvention, gtk2-perl modules generally use version numbers\nin the form x.yyz, where even yy values denote stable\nreleases and z is a patchlevel.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$Glib::VERSION\n<br>\nuse Glib 1.040; # require at least version 1.040</p>\n\n<p style=\"margin-left:11%;\">Compile-time\n(&quot;Bound&quot;) Library Version</p>\n\n<p style=\"margin-left:17%;\">This is the version of the GLib\nC library that was available when the Perl module was\ncompiled and installed. These version constants are\nequivalent to the version macros provided in the GLib C\nheaders. GLib uses a major.minor.micro convention, where\neven minor versions are stable. (gtk2-perl does not\nofficially support unstable versions.)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Glib::MAJOR_VERSION\n<br>\nGlib::MINOR_VERSION <br>\nGlib::MICRO_VERSION <br>\nGlib-&gt;CHECK_VERSION($maj,$min,$mic)</p>\n\n<p style=\"margin-left:11%;\">Run-time (&quot;Linked&quot;)\nLibrary Version</p>\n\n<p style=\"margin-left:17%;\">This is the version of the GLib\nC library that is available at run time; it may be newer\nthan the compile-time version, but should never be older.\nThese are equivalent to the version variables exported by\nthe GLib C library.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Glib::major_version\n<br>\nGlib::minor_version <br>\nGlib::micro_version</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Which one do\nI use when?</b> <br>\nWhere do you use which version? It depends entirely on what\nyou&rsquo;re doing. Let&rsquo;s explain by example: <br>\no Use the Perl module version for bindings support\nissues</p>\n\n<p style=\"margin-left:17%;\">You need to register a new enum\nfor use as the type of an object property. This is something\nyou can do with all versions of the underlying C library,\nbut which wasn&rsquo;t supported in the Glib Perl module\nuntil $Glib::VERSION &gt;= 1.040.</p>\n\n<p style=\"margin-left:11%;\">o Use the bound version for\nlibrary features</p>\n\n<p style=\"margin-left:17%;\">You want to call\nGlib::set_application_name to set a human-readable name for\nyour application (which is used by various parts of Gtk2 and\nGnome2). <b>g_set_application_name()</b> (the underlying C\nfunction) was added in version 2.2.0 of glib, and support\nfor it was introduced into the Glib Perl module in Glib\nversion 1.040. However, you can build the Perl module\nagainst any stable 2.x.x version of glib, so you might not\nhave that function available even if your Glib module is new\nenough! <br>\nThus, you need to check two things to see if the this\nfunction is available:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if\n($Glib::VERSION &gt;= 1.040 &amp;&amp;\nGlib-&gt;CHECK_VERSION (2,2,0)) { <br>\n# it's available, and we can call it! <br>\nGlib::set_application_name ('My Cool Application'); <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Now what\nhappens if you installed the Perl module when your system\nhad glib 2.0.6, and you upgraded glib to 2.4.1?\nWouldn&rsquo;t <b>g_set_application_name()</b> be available?\nWell, it&rsquo;s there, under the hood, but the bindings\nwere compiled when it wasn&rsquo;t there, so you won&rsquo;t\nbe able to call it! That&rsquo;s why we check the\n&quot;bound&quot; or compile-time version. By the way, to\nenable support for the new function, you&rsquo;d need to\nreinstall (or upgrade) the Perl module.</p>\n\n<p style=\"margin-left:11%;\">o Use the linked version for\nruntime work-arounds</p>\n\n<p style=\"margin-left:17%;\">Suppose there&rsquo;s a\nfunction whose <small>API</small> did not change, but whose\nimplementation had a bug in one version that was fixed in\nanother version. To determine whether you need to apply a\nworkaround, you would check the version that is actually\nbeing used at runtime.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if\n(Glib::major_version == 2 &amp;&amp; <br>\nGlib::minor_version == 2 &amp;&amp; <br>\nGlib::micro_version == 1) { <br>\n# work around bug that exists only in glib 2.2.1. <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In practice,\nsuch situations are very rare.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>boolean =\nGlib-&gt; <small>CHECK_VERSION</small> ($required_major,\n$required_minor, $required_micro)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$required_major (integer)</p></td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$required_minor (integer)</p></td>\n<td width=\"45%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p>$required_micro (integer)</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Provides a\nmechanism for checking the version information that Glib was\ncompiled against. Essentially equvilent to the macro\n<small>GLIB_CHECK_VERSION.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>(\n<small>MAJOR, MINOR, MICRO</small> ) = Glib-&gt;\n<small>GET_VERSION_INFO</small></b> <br>\nShorthand to fetch as a list the glib version for which Glib\nwas compiled. See &quot;Glib::MAJOR_VERSION&quot;, etc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\nGlib::MAJOR_VERSION</b> <br>\nProvides access to the version information that Glib was\ncompiled against. Essentially equivalent to the\n#define&rsquo;s <small>GLIB_MAJOR_VERSION.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\nGlib::MICRO_VERSION</b> <br>\nProvides access to the version information that Glib was\ncompiled against. Essentially equivalent to the\n#define&rsquo;s <small>GLIB_MICRO_VERSION.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\nGlib::MINOR_VERSION</b> <br>\nProvides access to the version information that Glib was\ncompiled against. Essentially equivalent to the\n#define&rsquo;s <small>GLIB_MINOR_VERSION.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\nGlib::major_version</b> <br>\nProvides access to the version information that Glib is\nlinked against. Essentially equivalent to the global\nvariable glib_major_version.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\nGlib::micro_version</b> <br>\nProvides access to the version information that Glib is\nlinked against. Essentially equivalent to the global\nvariable glib_micro_version.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\nGlib::minor_version</b> <br>\nProvides access to the version information that Glib is\nlinked against. Essentially equivalent to the global\nvariable glib_minor_version.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2003-2011 by the gtk2-perl team.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis licensed under the <small>LGPL.</small> See Glib for a\nfull notice.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}