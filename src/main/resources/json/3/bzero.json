{"name":"bzero","description":"bzero, explicit_bzero - zero a byte string","body":"\n\n<h1 align=\"center\">BZERO</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">bzero,\nexplicit_bzero - zero a byte string</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;strings.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nbzero(void *</b><i>s</i><b>, size_t</b>\n<i>n</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;string.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nexplicit_bzero(void *</b><i>s</i><b>, size_t</b>\n<i>n</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>bzero</b>() function erases the data in the <i>n</i>\nbytes of the memory starting at the location pointed to by\n<i>s</i>, by writing zeros (bytes containing '\\0') to that\narea.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>explicit_bzero</b>() function performs the same task as\n<b>bzero</b>(). It differs from <b>bzero</b>() in that it\nguarantees that compiler optimizations will not remove the\nerase operation if the compiler deduces that the operation\nis &quot;unnecessary&quot;.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">None.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>explicit_bzero</b>()\nfirst appeared in glibc 2.25.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3334071.png\" alt=\"Image grohtml-3334071.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>bzero</b>() function is deprecated (marked as LEGACY in\nPOSIX.1-2001); use <a href=\"https://man.page/3/memset\">memset(3)</a> in new programs.\nPOSIX.1-2008 removes the specification of <b>bzero</b>().\nThe <b>bzero</b>() function first appeared in 4.3BSD.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>explicit_bzero</b>() function is a nonstandard extension\nthat is also present on some of the BSDs. Some other\nimplementations have a similar function, such as\n<b>memset_explicit</b>() or <b>memset_s</b>().</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>explicit_bzero</b>() function addresses a problem that\nsecurity-conscious applications may run into when using\n<b>bzero</b>(): if the compiler can deduce that the location\nto zeroed will never again be touched by a <i>correct</i>\nprogram, then it may remove the <b>bzero</b>() call\naltogether. This is a problem if the intent of the\n<b>bzero</b>() call was to erase sensitive data (e.g.,\npasswords) to prevent the possibility that the data was\nleaked by an incorrect or compromised program. Calls to\n<b>explicit_bzero</b>() are never optimized away by the\ncompiler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>explicit_bzero</b>() function does not solve all problems\nassociated with erasing sensitive data:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>The <b>explicit_bzero</b>() function does <i>not</i>\nguarantee that sensitive data is completely erased from\nmemory. (The same is true of <b>bzero</b>().) For example,\nthere may be copies of the sensitive data in a register and\nin &quot;scratch&quot; stack areas. The\n<b>explicit_bzero</b>() function is not aware of these\ncopies, and can&rsquo;t erase them.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>In some circumstances, <b>explicit_bzero</b>() can\n<i>decrease</i> security. If the compiler determined that\nthe variable containing the sensitive data could be\noptimized to be stored in a register (because it is small\nenough to fit in a register, and no operation other than the\n<b>explicit_bzero</b>() call would need to take the address\nof the variable), then the <b>explicit_bzero</b>() call will\nforce the data to be copied from the register to a location\nin RAM that is then immediately erased (while the copy in\nthe register remains unaffected). The problem here is that\ndata in RAM is more likely to be exposed by a bug than data\nin a register, and thus the <b>explicit_bzero</b>() call\ncreates a brief time window where the sensitive data is more\nvulnerable than it would otherwise have been if no attempt\nhad been made to erase the data.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\ndeclaring the sensitive variable with the <b>volatile</b>\nqualifier does <i>not</i> eliminate the above problems.\nIndeed, it will make them worse, since, for example, it may\nforce a variable that would otherwise have been optimized\ninto a register to instead be maintained in (more\nvulnerable) RAM for its entire lifetime.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Notwithstanding\nthe above details, for security-conscious applications,\nusing <b>explicit_bzero</b>() is generally preferable to not\nusing it. The developers of <b>explicit_bzero</b>()\nanticipate that future compilers will recognize calls to\n<b>explicit_bzero</b>() and take steps to ensure that all\ncopies of the sensitive data are erased, including copies in\nregisters or in &quot;scratch&quot; stack areas.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/bstring\">bstring(3)</a>,\n<a href=\"https://man.page/3/memset\">memset(3)</a>, <a href=\"https://man.page/3/swab\">swab(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}