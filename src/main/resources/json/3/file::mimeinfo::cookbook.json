{"name":"file::mimeinfo::cookbook","description":"File::MimeInfo::Cookbook - various code snippets","body":"\n\n<h1 align=\"center\">File::MimeInfo::Cookbook</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::MimeInfo::Cookbook\n- various code snippets</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some code\nsnippets for non-basic uses of the File::MimeInfo module:\n<b><br>\nMatching an extension</b></p>\n\n<p style=\"margin-left:17%;\">A file does not have to\nactually exist in order to get a mimetype for it. This means\nthat the following will work:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $extension =\n'*.txt'; <br>\nmy $mimetype = mimetype( $extension );</p>\n\n<p style=\"margin-left:11%;\"><b>Mimetyping an scalar</b></p>\n\n<p style=\"margin-left:17%;\">If you want to find the\nmimetype of a scalar value you need magic mimetyping; after\nall a scalar doesn&rsquo;t have a filename or inode. What\nyou need to do is to use IO::Scalar :</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">use\nFile::MimeInfo::Magic; <br>\nuse IO::Scalar; <br>\nmy $io_scalar = new IO::Scalar \\$data; <br>\nmy $mimetype = mimetype( $io_scalar );</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In fact most\nother &quot;IO::&quot; will work as long as they support the\n&quot;seek()&quot; and &quot;read()&quot; methods. Of course\nif you want really obscure things to happen you can always\nwrite your own <small>IO</small> object and feed it in\nthere.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Be aware that\nwhen using a filehandle like this you need to set the\n&quot;:utf8&quot; binmode yourself if appropriate.</p>\n\n<p style=\"margin-left:11%;\"><b>Mimetyping a\nfilehandle</b></p>\n\n<p style=\"margin-left:17%;\">Regrettably for non-seekable\nfilehandles like <small>STDIN</small> simply using an\n&quot;IO::&quot; object will not work. You will need to\nbuffer enough of the data for a proper mimetyping. For\nexample you could mimetype data from <small>STDIN</small>\nlike this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">use\nFile::MimeInfo::Magic; <br>\nuse IO::Scalar; <br>\nmy $data; <br>\nread(STDIN, $data, $File::MimeInfo::Magic::max_buffer); <br>\nmy $io_scalar = new IO::Scalar \\$data; <br>\nmy $mimetype = mimetype( $io_scalar );</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Be aware that\nwhen using a filehandle like this you need to set the\n&quot;:utf8&quot; binmode yourself if appropriate.</p>\n\n<p style=\"margin-left:11%;\"><b>Creating a new\nfilename</b></p>\n\n<p style=\"margin-left:17%;\">Say you have a temporary file\nthat you want to save with a more proper filename.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">use\nFile::MimeInfo::Magic qw#mimetype extensions#; <br>\nuse File::Copy; <br>\nmy $tmpfile = '/tmp/foo'; <br>\nmy $mimetype = mimetype($tmpfile); <br>\nmy $extension = extensions($mimetype); <br>\nmy $newfile = 'untitled1'; <br>\n$newfile .= '.'.$extension if length $extension; <br>\nmove($tmpfile, $newfile);</p>\n\n<p style=\"margin-left:11%;\"><b>Force the use of a certain\ndatabase directory</b></p>\n\n<p style=\"margin-left:17%;\">Normally you just need to add\nthe dir where your mime database lives to either the\n<small>XDG_DATA_HOME</small> or <small>XDG_DATA_DIRS</small>\nenvironment variables for it to be found. But in some rare\ncases you may want to by-pass this system all together. Try\none of the following:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">@File::MimeInfo::DIRS\n= ('/home/me/share/mime'); <br>\neval 'use File::MimeInfo'; <br>\ndie if $@;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">or:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">use\nFile::MimeInfo; <br>\n@File::MimeInfo::DIRS = ('/home/me/share/mime'); <br>\nFile::MimeInfo-&gt;rehash();</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This can also\nbe used for switching between databases at run time while\nleaving other <small>XDG</small> configuration stuff\nalone.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Jaap\nKarssenberg &lt;pardus@cpan.org&gt; Maintained by Michiel\nBeijen &lt;mb@x14.nl&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2005, 2012 Jaap G Karssenberg. All rights reserved. This\nprogram is free software; you can redistribute it and/or\nmodify it under the same terms as Perl itself.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">File::MimeInfo</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}