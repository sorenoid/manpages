{"name":"alloca","description":"alloca - allocate memory that is automatically freed","body":"\n\n<h1 align=\"center\">ALLOCA</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">alloca -\nallocate memory that is automatically freed</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;alloca.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*alloca(size_t</b> <i>size</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>alloca</b>() function allocates <i>size</i> bytes of\nspace in the stack frame of the caller. This temporary space\nis automatically freed when the function that called\n<b>alloca</b>() returns to its caller.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>alloca</b>() function returns a pointer to the beginning\nof the allocated space. If the allocation causes stack\noverflow, program behavior is undefined.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3370241.png\" alt=\"Image grohtml-3370241.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis not in POSIX.1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is\nevidence that the <b>alloca</b>() function appeared in 32V,\nPWB, PWB.2, 3BSD, and 4BSD. There is a man page for it in\n4.3BSD. Linux uses the GNU version.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>alloca</b>() function is machine- and compiler-dependent.\nFor certain applications, its use can improve efficiency\ncompared to the use of <a href=\"https://man.page/3/malloc\">malloc(3)</a> plus <a href=\"https://man.page/3/free\">free(3)</a>.\nIn certain cases, it can also simplify memory deallocation\nin applications that use <a href=\"https://man.page/3/longjmp\">longjmp(3)</a> or\n<a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a>. Otherwise, its use is discouraged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because the\nspace allocated by <b>alloca</b>() is allocated within the\nstack frame, that space is automatically freed if the\nfunction return is jumped over by a call to\n<a href=\"https://man.page/3/longjmp\">longjmp(3)</a> or <a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The space\nallocated by <b>alloca</b>() is <i>not</i> automatically\ndeallocated if the pointer that refers to it simply goes out\nof scope.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Do not attempt\nto <a href=\"https://man.page/3/free\">free(3)</a> space allocated by <b>alloca</b>()!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Notes on the\nGNU version</b> <br>\nNormally, <a href=\"https://man.page/1/gcc\">gcc(1)</a> translates calls to <b>alloca</b>()\nwith inlined code. This is not done when either the\n<i>-ansi</i>, <i>-std=c89</i>, <i>-std=c99</i>, or the\n<i>-std=c11</i> option is given <b>and</b> the header\n<i>&lt;alloca.h&gt;</i> is not included. Otherwise, (without\nan -ansi or -std=c* option) the glibc version of\n<i>&lt;stdlib.h&gt;</i> includes <i>&lt;alloca.h&gt;</i> and\nthat contains the lines:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#ifdef __GNUC__\n<br>\n#define alloca(size) __builtin_alloca (size) <br>\n#endif</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">with messy\nconsequences if one has a private version of this\nfunction.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fact that\nthe code is inlined means that it is impossible to take the\naddress of this function, or to change its behavior by\nlinking with a different library.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The inlined\ncode often consists of a single instruction adjusting the\nstack pointer, and does not check for stack overflow. Thus,\nthere is no NULL error return.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is no\nerror indication if the stack frame cannot be extended.\n(However, after a failed allocation, the program is likely\nto receive a <b>SIGSEGV</b> signal if it attempts to access\nthe unallocated space.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On many systems\n<b>alloca</b>() cannot be used inside the list of arguments\nof a function call, because the stack space reserved by\n<b>alloca</b>() would appear on the stack in the middle of\nthe space for the function arguments.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/brk\">brk(2)</a>,\n<a href=\"https://man.page/3/longjmp\">longjmp(3)</a>, <a href=\"https://man.page/3/malloc\">malloc(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}