{"name":"lwp::mediatypes","body":"\n\n<h1 align=\"center\">LWP::MediaTypes</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">LWP::MediaTypes\n- guess media type for a file or a URL</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nLWP::MediaTypes qw(guess_media_type); <br>\n$type = guess_media_type(&quot;/tmp/foo.gif&quot;);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides functions for handling media (also known as\n<small>MIME</small> ) types and encodings. The mapping from\nfile extensions to media types is defined by the\n<i>media.types</i> file. If the <i>~/.media.types</i> file\nexists it is used instead. For backwards compatibility we\nwill also look for <i>~/.mime.types</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are exported by default: <br>\nguess_media_type( $filename ) <br>\nguess_media_type( $uri ) <br>\nguess_media_type( $filename_or_object, $header_to_modify\n)</p>\n\n<p style=\"margin-left:17%;\">This function tries to guess\nmedia type and encoding for a file or objects that support\nthe a &quot;path&quot; or &quot;filename&quot; method, eg,\n<small>URI</small> or File::Temp objects. When an object\ndoes not support either method, it will be stringified to\ndetermine the filename. It returns the content type, which\nis a string like &quot;text/html&quot;. In array context it\nalso returns any content encodings applied (in the order\nused to encode the file). You can pass a <small>URI</small>\nobject reference, instead of the file name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the type can\nnot be deduced from looking at the file name, then\n<b>guess_media_type()</b> will let the &quot;-T&quot; Perl\noperator take a look. If this works (and &quot;-T&quot;\nreturns a <small>TRUE</small> value) then we return\n<i>text/plain</i> as the type, otherwise we return\n<i>application/octet-stream</i> as the type.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The optional\nsecond argument should be a reference to a HTTP::Headers\nobject or any object that implements the $obj-&gt;header\nmethod in a similar way. When it is present the values of\nthe &rsquo;Content-Type&rsquo; and\n&rsquo;Content-Encoding&rsquo; will be set for this\nheader.</p>\n\n<p style=\"margin-left:11%;\">media_suffix( $type, ... )</p>\n\n<p style=\"margin-left:17%;\">This function will return all\nsuffixes that can be used to denote the specified media\ntype(s). Wildcard types can be used. In a scalar context it\nwill return the first suffix found. Examples:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">@suffixes =\nmedia_suffix('image/*', 'audio/basic'); <br>\n$suffix = media_suffix('text/html');</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are only exported by explicit request: <br>\nadd_type( $type, @exts )</p>\n\n<p style=\"margin-left:17%;\">Associate a list of file\nextensions with the given media type. Example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">add_type(&quot;x-world/x-vrml&quot;\n=&gt; qw(wrl vrml));</p>\n\n<p style=\"margin-left:11%;\">add_encoding( $type, @ext )</p>\n\n<p style=\"margin-left:17%;\">Associate a list of file\nextensions with an encoding type. Example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">add_encoding(&quot;x-gzip&quot;\n=&gt; &quot;gz&quot;);</p>\n\n<p style=\"margin-left:11%;\">read_media_types( @files )</p>\n\n<p style=\"margin-left:17%;\">Parse media types files and add\nthe type mappings found there. Example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">read_media_types(&quot;conf/mime.types&quot;);</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1995-1999 Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}