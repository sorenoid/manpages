{"name":"ftw","description":"ftw, nftw -\nfile tree walk","body":"\n\n<h1 align=\"center\">FTW</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ftw, nftw -\nfile tree walk</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;ftw.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nnftw(const char *</b><i>dirpath</i><b>, <br>\nint (*</b><i>fn</i><b>) (const char *</b><i>fpath</i><b>,\nconst struct stat *</b><i>sb</i><b>, <br>\nint</b> <i>typeflag</i><b>, struct FTW\n*</b><i>ftwbuf</i><b>), <br>\nint</b> <i>nopenfd</i><b>, int</b> <i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;ftw.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nftw(const char *</b><i>dirpath</i><b>, <br>\nint (*</b><i>fn</i><b>) (const char *</b><i>fpath</i><b>,\nconst struct stat *</b><i>sb</i><b>, <br>\nint</b> <i>typeflag</i><b>), <br>\nint</b> <i>nopenfd</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>nftw</b>():\n_XOPEN_SOURCE &gt;= 500</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>nftw</b>()\nwalks through the directory tree that is located under the\ndirectory <i>dirpath</i>, and calls <i>fn</i>() once for\neach entry in the tree. By default, directories are handled\nbefore the files and subdirectories they contain (preorder\ntraversal).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To avoid using\nup all of the calling process&rsquo;s file descriptors,\n<i>nopenfd</i> specifies the maximum number of directories\nthat <b>nftw</b>() will hold open simultaneously. When the\nsearch depth exceeds this, <b>nftw</b>() will become slower\nbecause directories have to be closed and reopened.\n<b>nftw</b>() uses at most one file descriptor for each\nlevel in the directory tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For each entry\nfound in the tree, <b>nftw</b>() calls <i>fn</i>() with four\narguments: <i>fpath</i>, <i>sb</i>, <i>typeflag</i>, and\n<i>ftwbuf</i>. <i>fpath</i> is the pathname of the entry,\nand is expressed either as a pathname relative to the\ncalling process&rsquo;s current working directory at the\ntime of the call to <b>nftw</b>(), if <i>dirpath</i> was\nexpressed as a relative pathname, or as an absolute\npathname, if <i>dirpath</i> was expressed as an absolute\npathname. <i>sb</i> is a pointer to the <i>stat</i>\nstructure returned by a call to <a href=\"https://man.page/2/stat\">stat(2)</a> for\n<i>fpath</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>typeflag</i> argument passed to <i>fn</i>() is an integer\nthat has one of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>FTW_F</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"36%\">\n\n\n<p><i>fpath</i> is a regular file.</p></td>\n<td width=\"42%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>FTW_D</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"36%\">\n\n\n<p><i>fpath</i> is a directory.</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>FTW_DNR</b></p>\n\n<p style=\"margin-left:22%;\"><i>fpath</i> is a directory\nwhich can&rsquo;t be read.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTW_DP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fpath</i> is a directory, and <b>FTW_DEPTH</b> was\nspecified in <i>flags</i>. (If <b>FTW_DEPTH</b> was not\nspecified in <i>flags</i>, then directories will always be\nvisited with <i>typeflag</i> set to <b>FTW_D</b>.) All of\nthe files and subdirectories within <i>fpath</i> have been\nprocessed.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTW_NS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <a href=\"https://man.page/2/stat\">stat(2)</a> call failed on <i>fpath</i>, which is\nnot a symbolic link. The probable cause for this is that the\ncaller had read permission on the parent directory, so that\nthe filename <i>fpath</i> could be seen, but did not have\nexecute permission, so that the file could not be reached\nfor <a href=\"https://man.page/2/stat\">stat(2)</a>. The contents of the buffer pointed to by\n<i>sb</i> are undefined.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>FTW_SL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fpath</i> is a symbolic link, and <b>FTW_PHYS</b> was\nset in <i>flags</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>FTW_SLN</b></p>\n\n<p style=\"margin-left:22%;\"><i>fpath</i> is a symbolic link\npointing to a nonexistent file. (This occurs only if\n<b>FTW_PHYS</b> is not set.) In this case the <i>sb</i>\nargument passed to <i>fn</i>() contains information returned\nby performing <a href=\"https://man.page/2/lstat\">lstat(2)</a> on the &quot;dangling&quot;\nsymbolic link. (But see BUGS.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fourth\nargument (<i>ftwbuf</i>) that <b>nftw</b>() supplies when\ncalling <i>fn</i>() is a pointer to a structure of type\n<i>FTW</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct FTW {\n<br>\nint base; <br>\nint level; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>base</i> is\nthe offset of the filename (i.e., basename component) in the\npathname given in <i>fpath</i>. <i>level</i> is the depth of\n<i>fpath</i> in the directory tree, relative to the root of\nthe tree (<i>dirpath</i>, which has depth 0).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To stop the\ntree walk, <i>fn</i>() returns a nonzero value; this value\nwill become the return value of <b>nftw</b>(). As long as\n<i>fn</i>() returns 0, <b>nftw</b>() will continue either\nuntil it has traversed the entire tree, in which case it\nwill return zero, or until it encounters an error (such as a\n<a href=\"https://man.page/3/malloc\">malloc(3)</a> failure), in which case it will return\n-1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because\n<b>nftw</b>() uses dynamic data structures, the only safe\nway to exit out of a tree walk is to return a nonzero value\nfrom <i>fn</i>(). To allow a signal to terminate the walk\nwithout causing a memory leak, have the handler set a global\nflag that is checked by <i>fn</i>(). <i>Don&rsquo;t</i> use\n<a href=\"https://man.page/3/longjmp\">longjmp(3)</a> unless the program is going to\nterminate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument of <b>nftw</b>() is formed by ORing\nzero or more of the following flags: <b><br>\nFTW_ACTIONRETVAL</b> (since glibc 2.3.3)</p>\n\n<p style=\"margin-left:22%;\">If this glibc-specific flag is\nset, then <b>nftw</b>() handles the return value from\n<i>fn</i>() differently. <i>fn</i>() should return one of\nthe following values: <b><br>\nFTW_CONTINUE</b></p>\n\n<p style=\"margin-left:32%;\">Instructs <b>nftw</b>() to\ncontinue normally.</p>\n\n<p style=\"margin-left:22%;\"><b>FTW_SKIP_SIBLINGS</b></p>\n\n<p style=\"margin-left:32%;\">If <i>fn</i>() returns this\nvalue, then siblings of the current entry will be skipped,\nand processing continues in the parent.</p>\n\n<p style=\"margin-left:22%;\"><b>FTW_SKIP_SUBTREE</b></p>\n\n<p style=\"margin-left:32%;\">If <i>fn</i>() is called with\nan entry that is a directory (<i>typeflag</i> is\n<b>FTW_D</b>), this return value will prevent objects within\nthat directory from being passed as arguments to\n<i>fn</i>(). <b>nftw</b>() continues processing with the\nnext sibling of the directory.</p>\n\n<p style=\"margin-left:22%;\"><b>FTW_STOP</b></p>\n\n<p style=\"margin-left:32%;\">Causes <b>nftw</b>() to return\nimmediately with the return value <b>FTW_STOP</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Other return\nvalues could be associated with new actions in the future;\n<i>fn</i>() should not return values other than those listed\nabove.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The feature\ntest macro <b>_GNU_SOURCE</b> must be defined (before\nincluding <i>any</i> header files) in order to obtain the\ndefinition of <b>FTW_ACTIONRETVAL</b> from\n<i>&lt;ftw.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>FTW_CHDIR</b></p>\n\n<p style=\"margin-left:22%;\">If set, do a <a href=\"https://man.page/2/chdir\">chdir(2)</a> to\neach directory before handling its contents. This is useful\nif the program needs to perform some action in the directory\nin which <i>fpath</i> resides. (Specifying this flag has no\neffect on the pathname that is passed in the <i>fpath</i>\nargument of <i>fn</i>.)</p>\n\n<p style=\"margin-left:11%;\"><b>FTW_DEPTH</b></p>\n\n<p style=\"margin-left:22%;\">If set, do a post-order\ntraversal, that is, call <i>fn</i>() for the directory\nitself <i>after</i> handling the contents of the directory\nand its subdirectories. (By default, each directory is\nhandled <i>before</i> its contents.)</p>\n\n<p style=\"margin-left:11%;\"><b>FTW_MOUNT</b></p>\n\n<p style=\"margin-left:22%;\">If set, stay within the same\nfilesystem (i.e., do not cross mount points).</p>\n\n<p style=\"margin-left:11%;\"><b>FTW_PHYS</b></p>\n\n<p style=\"margin-left:22%;\">If set, do not follow symbolic\nlinks. (This is what you want.) If not set, symbolic links\nare followed, but no file is reported twice.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<b>FTW_PHYS</b> is not set, but <b>FTW_DEPTH</b> is set,\nthen the function <i>fn</i>() is never called for a\ndirectory that would be a descendant of itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ftw() <br>\nftw</b>() is an older function that offers a subset of the\nfunctionality of <b>nftw</b>(). The notable differences are\nas follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>ftw</b>() has no <i>flags</i> argument. It behaves\nthe same as when <b>nftw</b>() is called with <i>flags</i>\nspecified as zero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The callback function, <i>fn</i>(), is not supplied with\na fourth argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The range of values that is passed via the\n<i>typeflag</i> argument supplied to <i>fn</i>() is smaller:\njust <b>FTW_F</b>, <b>FTW_D</b>, <b>FTW_DNR</b>,\n<b>FTW_NS</b>, and (possibly) <b>FTW_SL</b>.</p></td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nreturn 0 on success, and -1 if an error occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>fn</i>()\nreturns nonzero, then the tree walk is terminated and the\nvalue returned by <i>fn</i>() is returned as the result of\n<b>ftw</b>() or <b>nftw</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>nftw</b>() is called with the <b>FTW_ACTIONRETVAL</b>\nflag, then the only nonzero value that should be used by\n<i>fn</i>() to terminate the tree walk is <b>FTW_STOP</b>,\nand that value is returned as the result of\n<b>nftw</b>().</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>nftw</b>()\nis available under glibc since version 2.1.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3319891.png\" alt=\"Image grohtml-3319891.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4, SUSv1. POSIX.1-2008 marks <b>ftw</b>()\nas obsolete.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2008\nnotes that the results are unspecified if <i>fn</i> does not\npreserve the current working directory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>nftw</b>() and the use of <b>FTW_SL</b> with <b>ftw</b>()\nwere introduced in SUSv1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In some\nimplementations (e.g., glibc), <b>ftw</b>() will never use\n<b>FTW_SL</b>, on other systems <b>FTW_SL</b> occurs only\nfor symbolic links that do not point to an existing file,\nand again on other systems <b>ftw</b>() will use\n<b>FTW_SL</b> for each symbolic link. If <i>fpath</i> is a\nsymbolic link and <a href=\"https://man.page/2/stat\">stat(2)</a> failed, POSIX.1-2008 states\nthat it is undefined whether <b>FTW_NS</b> or <b>FTW_SL</b>\nis passed in <i>typeflag</i>. For predictable results, use\n<b>nftw</b>().</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX.1-2008, when the <i>typeflag</i> argument passed to\n<i>fn</i>() contains <b>FTW_SLN</b>, the buffer pointed to\nby <i>sb</i> should contain information about the dangling\nsymbolic link (obtained by calling <a href=\"https://man.page/2/lstat\">lstat(2)</a> on the\nlink). Early glibc versions correctly followed the POSIX\nspecification on this point. However, as a result of a\nregression introduced in glibc 2.4, the contents of the\nbuffer pointed to by <i>sb</i> were undefined when\n<b>FTW_SLN</b> is passed in <i>typeflag</i>. (More\nprecisely, the contents of the buffer were left unchanged in\nthis case.) This regression was eventually fixed in glibc\n2.30, so that the glibc implementation (once more) follows\nthe POSIX specification.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nprogram traverses the directory tree under the path named in\nits first command-line argument, or under the current\ndirectory if no argument is supplied. It displays various\ninformation about each file. The second command-line\nargument can be used to specify characters that control the\nvalue assigned to the <i>flags</i> argument when calling\n<b>nftw</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#define _XOPEN_SOURCE 500 <br>\n#include &lt;ftw.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;string.h&gt; <br>\n#include &lt;stdint.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int <br>\ndisplay_info(const char *fpath, const struct stat *sb, <br>\nint tflag, struct FTW *ftwbuf) <br>\n{ <br>\nprintf(&quot;%-3s %2d &quot;, <br>\n(tflag == FTW_D) ? &quot;d&quot; : (tflag == FTW_DNR) ?\n&quot;dnr&quot; : <br>\n(tflag == FTW_DP) ? &quot;dp&quot; : (tflag == FTW_F) ?\n&quot;f&quot; : <br>\n(tflag == FTW_NS) ? &quot;ns&quot; : (tflag == FTW_SL) ?\n&quot;sl&quot; : <br>\n(tflag == FTW_SLN) ? &quot;sln&quot; : &quot;???&quot;, <br>\nftwbuf-&gt;level);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (tflag ==\nFTW_NS) <br>\nprintf(&quot;-------&quot;); <br>\nelse <br>\nprintf(&quot;%7jd&quot;, (intmax_t) sb-&gt;st_size);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;\n%-40s %d %s\\n&quot;, <br>\nfpath, ftwbuf-&gt;base, fpath + ftwbuf-&gt;base);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return 0; /* To\ntell nftw() to continue */ <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint flags = 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &gt; 2\n&amp;&amp; strchr(argv[2], 'd') != NULL) <br>\nflags |= FTW_DEPTH; <br>\nif (argc &gt; 2 &amp;&amp; strchr(argv[2], 'p') != NULL)\n<br>\nflags |= FTW_PHYS;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (nftw((argc\n&lt; 2) ? &quot;.&quot; : argv[1], display_info, 20, flags)\n<br>\n== -1) { <br>\nperror(&quot;nftw&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/stat\">stat(2)</a>,\n<a href=\"https://man.page/3/fts\">fts(3)</a>, <a href=\"https://man.page/3/readdir\">readdir(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}