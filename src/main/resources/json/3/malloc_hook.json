{"name":"malloc_hook","body":"\n\n<h1 align=\"center\">MALLOC_HOOK</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">__malloc_hook,\n__malloc_initialize_hook, __memalign_hook, __free_hook,\n__realloc_hook, __after_morecore_hook - malloc debugging\nvariables</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;malloc.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*(*__malloc_hook)(size_t</b> <i>size</i><b>, const void\n*</b><i>caller</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*(*__realloc_hook)(void *</b><i>ptr</i><b>, size_t</b>\n<i>size</i><b>, const void *</b><i>caller</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n*(*__memalign_hook)(size_t</b> <i>alignment</i><b>,\nsize_t</b> <i>size</i><b>, <br>\nconst void *</b><i>caller</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n(*__free_hook)(void *</b><i>ptr</i><b>, const void\n*</b><i>caller</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n(*__malloc_initialize_hook)(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\n(*__after_morecore_hook)(void);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The GNU C\nlibrary lets you modify the behavior of <a href=\"https://man.page/3/malloc\">malloc(3)</a>,\n<a href=\"https://man.page/3/realloc\">realloc(3)</a>, and <a href=\"https://man.page/3/free\">free(3)</a> by specifying\nappropriate hook functions. You can use these hooks to help\nyou debug programs that use dynamic memory allocation, for\nexample.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The variable\n<b>__malloc_initialize_hook</b> points at a function that is\ncalled once when the malloc implementation is initialized.\nThis is a weak variable, so it can be overridden in the\napplication with a definition like the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void\n(*__malloc_initialize_hook)(void) = my_init_hook;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now the\nfunction <i>my_init_hook</i>() can do the initialization of\nall hooks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The four\nfunctions pointed to by <b>__malloc_hook</b>,\n<b>__realloc_hook</b>, <b>__memalign_hook</b>,\n<b>__free_hook</b> have a prototype like the functions\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>, <a href=\"https://man.page/3/realloc\">realloc(3)</a>, <a href=\"https://man.page/3/memalign\">memalign(3)</a>,\n<a href=\"https://man.page/3/free\">free(3)</a>, respectively, except that they have a final\nargument <i>caller</i> that gives the address of the caller\nof <a href=\"https://man.page/3/malloc\">malloc(3)</a>, etc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The variable\n<b>__after_morecore_hook</b> points at a function that is\ncalled each time after <a href=\"https://man.page/2/sbrk\">sbrk(2)</a> was asked for more\nmemory.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare GNU extensions.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The use of\nthese hook functions is not safe in multithreaded programs,\nand they are now deprecated. From glibc 2.24 onwards, the\n<b>__malloc_initialize_hook</b> variable has been removed\nfrom the API. Programmers should instead preempt calls to\nthe relevant functions by defining and exporting functions\nsuch as &quot;malloc&quot; and &quot;free&quot;.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here is a short\nexample of how to use these variables.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stdio.h&gt; <br>\n#include &lt;malloc.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Prototypes\nfor our hooks. */ <br>\nstatic void my_init_hook(void); <br>\nstatic void *my_malloc_hook(size_t, const void *);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Variables to\nsave original hooks. */ <br>\nstatic void *(*old_malloc_hook)(size_t, const void *);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Override\ninitializing hook from the C library. */ <br>\nvoid (*__malloc_initialize_hook) (void) = my_init_hook;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nmy_init_hook(void) <br>\n{ <br>\nold_malloc_hook = __malloc_hook; <br>\n__malloc_hook = my_malloc_hook; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void *\n<br>\nmy_malloc_hook(size_t size, const void *caller) <br>\n{ <br>\nvoid *result;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Restore all\nold hooks */ <br>\n__malloc_hook = old_malloc_hook;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Call\nrecursively */ <br>\nresult = malloc(size);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Save\nunderlying hooks */ <br>\nold_malloc_hook = __malloc_hook;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* printf()\nmight call malloc(), so protect it too. */ <br>\nprintf(&quot;malloc(%zu) called from %p returns %p\\n&quot;,\n<br>\nsize, caller, result);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Restore our\nown hooks */ <br>\n__malloc_hook = my_malloc_hook;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return result;\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/mallinfo\">mallinfo(3)</a>,\n<a href=\"https://man.page/3/malloc\">malloc(3)</a>, <a href=\"https://man.page/3/mcheck\">mcheck(3)</a>, <a href=\"https://man.page/3/mtrace\">mtrace(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}