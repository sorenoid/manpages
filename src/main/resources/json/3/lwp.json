{"name":"lwp","body":"\n\n<h1 align=\"center\">LWP</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">LWP - The\nWorld-Wide Web library for Perl</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use LWP; <br>\nprint &quot;This is libwww-perl-$LWP::VERSION\\n&quot;;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The libwww-perl\ncollection is a set of Perl modules which provides a simple\nand consistent application programming interface (\n<small>API</small> ) to the World-Wide Web. The main focus\nof the library is to provide classes and functions that\nallow you to write <small>WWW</small> clients. The library\nalso contain modules that are of more general use and even\nclasses that help you implement simple <small>HTTP</small>\nservers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most modules in\nthis library provide an object oriented <small>API.</small>\nThe user agent, requests sent and responses received from\nthe <small>WWW</small> server are all represented by\nobjects. This makes a simple and powerful interface to these\nservices. The interface is easy to extend and customize for\nyour own needs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The main\nfeatures of the library are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Contains various reusable components (modules) that can\nbe used separately or together.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Provides an object oriented model of HTTP-style\ncommunication. Within this framework we currently support\naccess to &quot;http&quot;, &quot;https&quot;,\n&quot;gopher&quot;, &quot;ftp&quot;, &quot;news&quot;,\n&quot;file&quot;, and &quot;mailto&quot; resources.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Provides a full object oriented interface or a very\nsimple procedural interface.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Supports the basic and digest authorization schemes.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Supports transparent redirect handling.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Supports access through proxy servers.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Provides parser for <i>robots.txt</i> files and a\nframework for constructing robots.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Supports parsing of <small>HTML</small> forms.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Implements <small>HTTP</small> content negotiation\nalgorithm that can be used both in protocol modules and in\nserver scripts (like <small>CGI</small> scripts).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Supports <small>HTTP</small> cookies.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Some simple command line clients, for instance\n&quot;lwp-request&quot; and &quot;lwp-download&quot;.</p></td></tr>\n</table>\n\n<h2>HTTP STYLE COMMUNICATION\n<a name=\"HTTP STYLE COMMUNICATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The libwww-perl\nlibrary is based on <small>HTTP</small> style communication.\nThis section tries to describe what that means.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Let us start\nwith this quote from the <small>HTTP</small> specification\ndocument &lt;http://www.w3.org/Protocols/&gt;:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The <small>HTTP</small> protocol\nis based on a request/response paradigm. A client\nestablishes a connection with a server and sends a request\nto the server in the form of a request method,\n<small>URI,</small> and protocol version, followed by a\nMIME-like message containing request modifiers, client\ninformation, and possible body content. The server responds\nwith a status line, including the message&rsquo;s protocol\nversion and a success or error code, followed by a MIME-like\nmessage containing server information, entity\nmeta-information, and possible body content.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">What this means\nto libwww-perl is that communication always take place\nthrough these steps: First a <i>request</i> object is\ncreated and configured. This object is then passed to a\nserver and we get a <i>response</i> object in return that we\ncan examine. A request is always independent of any previous\nrequests, i.e. the service is stateless. The same simple\nmodel is used for any kind of service we want to access.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example, if\nwe want to fetch a document from a remote file server, then\nwe send it a request that contains a name for that document\nand the response will contain the document itself. If we\naccess a search engine, then the content of the request will\ncontain the query parameters and the response will contain\nthe query result. If we want to send a mail message to\nsomebody then we send a request object which contains our\nmessage to the mail server and the response object will\ncontain an acknowledgment that tells us that the message has\nbeen accepted and will be forwarded to the recipient(s).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is as simple\nas that!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The Request\nObject</b> <br>\nThe libwww-perl request object has the class name\nHTTP::Request. The fact that the class name uses\n&quot;HTTP::&quot; as a prefix only implies that we use the\n<small>HTTP</small> model of communication. It does not\nlimit the kind of services we can try to pass this\n<i>request</i> to. For instance, we will send HTTP::Requests\nboth to ftp and gopher servers, as well as to the local file\nsystem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The main\nattributes of the request objects are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\"><b>method</b> is a short string\nthat tells what kind of request this is. The most common\nmethods are <b><small>GET</small></b> ,\n<b><small>PUT</small></b> , <b><small>POST</small></b> and\n<b><small>HEAD</small></b> .</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>uri</b> is a string denoting the protocol, server and\nthe name of the &quot;document&quot; we want to access. The\n<b>uri</b> might also encode various other parameters.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>headers</b> contains additional information about the\nrequest and can also used to describe the content. The\nheaders are a set of keyword/value pairs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>content</b> is an arbitrary amount of data.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The Response\nObject</b> <br>\nThe libwww-perl response object has the class name\nHTTP::Response. The main attributes of objects of this class\nare:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\"><b>code</b> is a numerical value\nthat indicates the overall outcome of the request.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>message</b> is a short, human readable string that\ncorresponds to the <i>code</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>headers</b> contains additional information about the\nresponse and describe the content.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>content</b> is an arbitrary amount of data.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since we\ndon&rsquo;t want to handle all possible <i>code</i> values\ndirectly in our programs, a libwww-perl response object has\nmethods that can be used to query what kind of response this\nis. The most commonly used response classification methods\nare: <b><br>\nis_success()</b></p>\n\n<p style=\"margin-left:15%;\">The request was successfully\nreceived, understood or accepted.</p>\n\n<p style=\"margin-left:11%;\"><b>is_error()</b></p>\n\n<p style=\"margin-left:15%;\">The request failed. The server\nor the resource might not be available, access to the\nresource might be denied or other things might have failed\nfor some reason.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The User\nAgent</b> <br>\nLet us assume that we have created a <i>request</i> object.\nWhat do we actually do with it in order to receive a\n<i>response</i>?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The answer is\nthat you pass it to a <i>user agent</i> object and this\nobject takes care of all the things that need to be done\n(like low-level communication and error handling) and\nreturns a <i>response</i> object. The user agent represents\nyour application on the network and provides you with an\ninterface that can accept <i>requests</i> and return\n<i>responses</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The user agent\nis an interface layer between your application code and the\nnetwork. Through this interface you are able to access the\nvarious servers on the network.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The class name\nfor the user agent is LWP::UserAgent. Every libwww-perl\napplication that wants to communicate should create at least\none object of this class. The main method provided by this\nobject is <b>request()</b>. This method takes an\nHTTP::Request object as argument and (eventually) returns a\nHTTP::Response object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The user agent\nhas many other attributes that let you configure how it will\ninteract with the network and with your application.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>timeout</b> specifies how much time we give remote\nservers to respond before the library disconnects and\ncreates an internal <i>timeout</i> response.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>agent</b> specifies the name that your application\nuses when it presents itself on the network.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>from</b> can be set to the e-mail address of the\nperson responsible for running the application. If this is\nset, then the address will be sent to the servers with every\nrequest.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>parse_head</b> specifies whether we should initialize\nresponse headers from the &quot;&lt;head&gt;&quot; section\nof <small>HTML</small> documents.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>proxy</b> and <b>no_proxy</b> specify if and when to\ngo through a proxy server.\n&lt;http://www.w3.org/History/1994/WWW/Proxies/&gt;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>credentials</b> provides a way to set up user names\nand passwords needed to access certain services.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many\napplications want even more control over how they interact\nwith the network and they get this by sub-classing\nLWP::UserAgent. The library includes a sub-class,\nLWP::RobotUA, for robot applications.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>An\nExample</b> <br>\nThis example shows how the user agent, a request and a\nresponse are represented in actual perl code:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># Create a user\nagent object <br>\nuse LWP::UserAgent; <br>\nmy $ua = LWP::UserAgent-&gt;new; <br>\n$ua-&gt;agent(&quot;MyApp/0.1 &quot;); <br>\n# Create a request <br>\nmy $req = HTTP::Request-&gt;new(POST =&gt;\n'http://search.cpan.org/search'); <br>\n$req-&gt;content_type('application/x-www-form-urlencoded');\n<br>\n$req-&gt;content('query=libwww-perl&amp;mode=dist'); <br>\n# Pass request to the user agent and get a response back\n<br>\nmy $res = $ua-&gt;request($req); <br>\n# Check the outcome of the response <br>\nif ($res-&gt;is_success) { <br>\nprint $res-&gt;content; <br>\n} <br>\nelse { <br>\nprint $res-&gt;status_line, &quot;\\n&quot;; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The $ua is\ncreated once when the application starts up. New request\nobjects should normally created for each request sent.</p>\n\n<h2>NETWORK SUPPORT\n<a name=\"NETWORK SUPPORT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This section\ndiscusses the various protocol schemes and the\n<small>HTTP</small> style methods that headers may be used\nfor each.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For all\nrequests, a &quot;User-Agent&quot; header is added and\ninitialized from the &quot;$ua-&gt;agent&quot; attribute\nbefore the request is handed to the network layer. In the\nsame way, a &quot;From&quot; header is initialized from the\n$ua-&gt;from attribute.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For all\nresponses, the library adds a header called\n&quot;Client-Date&quot;. This header holds the time when the\nresponse was received by your application. The format and\nsemantics of the header are the same as the server created\n&quot;Date&quot; header. You may also encounter other\n&quot;Client-XXX&quot; headers. They are all generated by\nthe library internally and are not received from the\nservers.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>HTTP</small>\nRequests</b> <small><br>\nHTTP</small> requests are just handed off to an\n<small>HTTP</small> server and it decides what happens. Few\nservers implement methods beside the usual &quot;\n<small>GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;</small>\nand &quot; <small>PUT&quot;,</small> but CGI-scripts may\nimplement any method they like.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the server\nis not available then the library will generate an internal\nerror response.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The library\nautomatically adds a &quot;Host&quot; and a\n&quot;Content-Length&quot; header to the <small>HTTP</small>\nrequest before it is sent over the network.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a\n<small>GET</small> request you might want to add an\n&quot;If-Modified-Since&quot; or &quot;If-None-Match&quot;\nheader to make the request conditional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a\n<small>POST</small> request you should add the\n&quot;Content-Type&quot; header. When you try to emulate\n<small>HTML</small> &lt; <small>FORM</small> &gt; handling\nyou should usually let the value of the\n&quot;Content-Type&quot; header be\n&quot;application/x-www-form-urlencoded&quot;. See lwpcook\nfor examples of this.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The libwww-perl\n<small>HTTP</small> implementation currently support the\n<small>HTTP/1.1</small> and <small>HTTP/1.0</small>\nprotocol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The library\nallows you to access proxy server through\n<small>HTTP.</small> This means that you can set up the\nlibrary to forward all types of request through the\n<small>HTTP</small> protocol module. See LWP::UserAgent for\ndocumentation of this.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>HTTPS</small>\nRequests</b> <small><br>\nHTTPS</small> requests are <small>HTTP</small> requests over\nan encrypted network connection using the <small>SSL</small>\nprotocol developed by Netscape. Everything about\n<small>HTTP</small> requests above also apply to\n<small>HTTPS</small> requests. In addition the library will\nadd the headers &quot;Client-SSL-Cipher&quot;,\n&quot;Client-SSL-Cert-Subject&quot; and\n&quot;Client-SSL-Cert-Issuer&quot; to the response. These\nheaders denote the encryption method used and the name of\nthe server owner.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The request can\ncontain the header &quot;If-SSL-Cert-Subject&quot; in order\nto make the request conditional on the content of the server\ncertificate. If the certificate subject does not match, no\nrequest is sent to the server and an internally generated\nerror response is returned. The value of the\n&quot;If-SSL-Cert-Subject&quot; header is interpreted as a\nPerl regular expression.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>FTP</small>\nRequests</b> <br>\nThe library currently supports <small>GET, HEAD</small> and\n<small>PUT</small> requests. <small>GET</small> retrieves a\nfile or a directory listing from an <small>FTP</small>\nserver. <small>PUT</small> stores a file on a ftp\nserver.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can specify\na ftp account for servers that want this in addition to user\nname and password. This is specified by including an\n&quot;Account&quot; header in the request.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">User\nname/password can be specified using basic authorization or\nbe encoded in the <small>URL.</small> Failed logins return\nan <small>UNAUTHORIZED</small> response with\n&quot;WWW-Authenticate: Basic&quot; and can be treated like\nbasic authorization for <small>HTTP.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The library\nsupports ftp <small>ASCII</small> transfer mode by\nspecifying the &quot;type=a&quot; parameter in the\n<small>URL.</small> It also supports transfer of ranges for\n<small>FTP</small> transfers using the &quot;Range&quot;\nheader.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Directory\nlistings are by default returned unprocessed (as returned\nfrom the ftp server) with the content media type reported to\nbe &quot;text/ftp-dir-listing&quot;. The File::Listing\nmodule provides methods for parsing of these directory\nlisting.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The ftp module\nis also able to convert directory listings to\n<small>HTML</small> and this can be requested via the\nstandard <small>HTTP</small> content negotiation mechanisms\n(add an &quot;Accept: text/html&quot; header in the request\nif you want this).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For normal file\nretrievals, the &quot;Content-Type&quot; is guessed based on\nthe file name suffix. See LWP::MediaTypes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;If-Modified-Since&quot; request header works for\nservers that implement the &quot;MDTM&quot; command. It will\nprobably not work for directory listings though.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$req =\nHTTP::Request-&gt;new(GET =&gt;\n'ftp://me:passwd@ftp.some.where.com/'); <br>\n$req-&gt;header(Accept =&gt; &quot;text/html,\n*/*;q=0.1&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>News\nRequests</b> <br>\nAccess to the <small>USENET</small> News system is\nimplemented through the <small>NNTP</small> protocol. The\nname of the news server is obtained from the\n<small>NNTP_SERVER</small> environment variable and defaults\nto &quot;news&quot;. It is not possible to specify the\nhostname of the <small>NNTP</small> server in news:\nURLs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The library\nsupports <small>GET</small> and <small>HEAD</small> to\nretrieve news articles through the <small>NNTP</small>\nprotocol. You can also post articles to newsgroups by using\n(surprise!) the <small>POST</small> method.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>GET</small>\non newsgroups is not implemented yet.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Examples:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$req =\nHTTP::Request-&gt;new(GET =&gt; 'news:abc1234@a.sn.no');\n<br>\n$req = HTTP::Request-&gt;new(POST =&gt;\n'news:comp.lang.perl.test'); <br>\n$req-&gt;header(Subject =&gt; 'This is a test', <br>\nFrom =&gt; 'me@some.where.org'); <br>\n$req-&gt;content(&lt;&lt;EOT); <br>\nThis is the content of the message that we are sending to\n<br>\nthe world. <br>\nEOT</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Gopher\nRequest</b> <br>\nThe library supports the <small>GET</small> and\n<small>HEAD</small> methods for gopher requests. All request\nheader values are ignored. <small>HEAD</small> cheats and\nreturns a response without even talking to server.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gopher menus\nare always converted to <small>HTML.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The response\n&quot;Content-Type&quot; is generated from the document type\nencoded (as the first letter) in the request\n<small>URL</small> path itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$req =\nHTTP::Request-&gt;new(GET =&gt;\n'gopher://gopher.sn.no/');</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>File\nRequest</b> <br>\nThe library supports <small>GET</small> and\n<small>HEAD</small> methods for file requests. The\n&quot;If-Modified-Since&quot; header is supported. All other\nheaders are ignored. The <i>host</i> component of the file\n<small>URL</small> must be empty or set to\n&quot;localhost&quot;. Any other <i>host</i> value will be\ntreated as an error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Directories are\nalways converted to an <small>HTML</small> document. For\nnormal files, the &quot;Content-Type&quot; and\n&quot;Content-Encoding&quot; in the response are guessed\nbased on the file suffix.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$req =\nHTTP::Request-&gt;new(GET =&gt; 'file:/etc/passwd');</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mailto\nRequest</b> <br>\nYou can send (aka &quot; <small>POST&quot;</small> ) mail\nmessages using the library. All headers specified for the\nrequest are passed on to the mail system. The &quot;To&quot;\nheader is initialized from the mail address in the\n<small>URL.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$req =\nHTTP::Request-&gt;new(POST =&gt; 'mailto:libwww@perl.org');\n<br>\n$req-&gt;header(Subject =&gt; &quot;subscribe&quot;); <br>\n$req-&gt;content(&quot;Please subscribe me to the\nlibwww-perl mailing list!\\n&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>CPAN</small>\nRequests</b> <br>\nURLs with scheme &quot;cpan:&quot; are redirected to a\nsuitable <small>CPAN</small> mirror. If you have your own\nlocal mirror of <small>CPAN</small> you might tell\n<small>LWP</small> to use it for &quot;cpan:&quot; URLs by\nan assignment like this:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$LWP::Protocol::cpan::CPAN\n= &quot;file:/local/CPAN/&quot;;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Suitable\n<small>CPAN</small> mirrors are also picked up from the\nconfiguration for the <small>CPAN</small> .pm, so if you\nhave used that module a suitable mirror should be picked\nautomatically. If neither of these apply, then a redirect to\nthe generic <small>CPAN</small> http location is issued.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Example request\nto download the newest perl:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$req =\nHTTP::Request-&gt;new(GET =&gt;\n&quot;cpan:src/latest.tar.gz&quot;);</p>\n\n<h2>OVERVIEW OF CLASSES AND PACKAGES\n<a name=\"OVERVIEW OF CLASSES AND PACKAGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This table\nshould give you a quick overview of the classes provided by\nthe library. Indentation shows class inheritance.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">LWP::MemberMixin\n-- Access to member variables of Perl5 classes <br>\nLWP::UserAgent -- WWW user agent class <br>\nLWP::RobotUA -- When developing a robot applications <br>\nLWP::Protocol -- Interface to various protocol schemes <br>\nLWP::Protocol::http -- http:// access <br>\nLWP::Protocol::file -- file:// access <br>\nLWP::Protocol::ftp -- ftp:// access <br>\n... <br>\nLWP::Authen::Basic -- Handle 401 and 407 responses <br>\nLWP::Authen::Digest <br>\nHTTP::Headers -- MIME/RFC822 style header (used by\nHTTP::Message) <br>\nHTTP::Message -- HTTP style message <br>\nHTTP::Request -- HTTP request <br>\nHTTP::Response -- HTTP response <br>\nHTTP::Daemon -- A HTTP server class <br>\nWWW::RobotRules -- Parse robots.txt files <br>\nWWW::RobotRules::AnyDBM_File -- Persistent RobotRules <br>\nNet::HTTP -- Low level HTTP client</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmodules provide various functions and definitions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">LWP -- This\nfile. Library version number and documentation. <br>\nLWP::MediaTypes -- MIME types configuration (text/html etc.)\n<br>\nLWP::Simple -- Simplified procedural interface for common\nfunctions <br>\nHTTP::Status -- HTTP status code (200 OK etc) <br>\nHTTP::Date -- Date parsing module for HTTP date formats <br>\nHTTP::Negotiate -- HTTP content negotiation calculation <br>\nFile::Listing -- Parse directory listings <br>\nHTML::Form -- Processing for &lt;form&gt;s in HTML\ndocuments</p>\n\n<h2>MORE DOCUMENTATION\n<a name=\"MORE DOCUMENTATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All modules\ncontain detailed information on the interfaces they provide.\nThe lwpcook manpage is the libwww-perl cookbook that contain\nexamples of typical usage of the library. You might want to\ntake a look at how the scripts lwp-request, lwp-download,\nlwp-dump and lwp-mirror are implemented.</p>\n\n<h2>ENVIRONMENT\n<a name=\"ENVIRONMENT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nenvironment variables are used by <small>LWP: <br>\nHOME</small></p>\n\n<p style=\"margin-left:17%;\">The LWP::MediaTypes functions\nwill look for the <i>.media.types</i> and <i>.mime.types</i>\nfiles relative to you home directory.</p>\n\n<p style=\"margin-left:11%;\">http_proxy <br>\nftp_proxy <br>\nxxx_proxy <br>\nno_proxy</p>\n\n<p style=\"margin-left:17%;\">These environment variables can\nbe set to enable communication through a proxy server. See\nthe description of the &quot;env_proxy&quot; method in\nLWP::UserAgent.</p>\n\n\n<p style=\"margin-left:11%;\"><small>PERL_LWP_ENV_PROXY</small></p>\n\n<p style=\"margin-left:17%;\">If set to a <small>TRUE</small>\nvalue, then the LWP::UserAgent will by default call\n&quot;env_proxy&quot; during initialization. This makes\n<small>LWP</small> honor the proxy variables described\nabove.</p>\n\n\n<p style=\"margin-left:11%;\"><small>PERL_LWP_SSL_VERIFY_HOSTNAME</small></p>\n\n<p style=\"margin-left:17%;\">The default\n&quot;verify_hostname&quot; setting for LWP::UserAgent. If\nnot set the default will be 1. Set it as 0 to disable\nhostname verification (the default prior to libwww-perl\n5.840.</p>\n\n<p style=\"margin-left:11%;\"><small>PERL_LWP_SSL_CA_FILE\n<br>\nPERL_LWP_SSL_CA_PATH</small></p>\n\n<p style=\"margin-left:17%;\">The file and/or directory where\nthe trusted Certificate Authority certificates is located.\nSee LWP::UserAgent for details.</p>\n\n\n<p style=\"margin-left:11%;\"><small>PERL_HTTP_URI_CLASS</small></p>\n\n<p style=\"margin-left:17%;\">Used to decide what\n<small>URI</small> objects to instantiate. The default is\n<small>URI</small> . You might want to set it to\n<small>URI::URL</small> for compatibility with old\ntimes.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>LWP</small>\nwas made possible by contributions from Adam Newby, Albert\nDvornik, Alexandre Duret-Lutz, Andreas Gustafsson, Andreas\nK&Atilde;&para;nig, Andrew Pimlott, Andy Lester, Ben\nColeman, Benjamin Low, Ben Low, Ben Tilly, Blair Zajac, Bob\nDalgleish, BooK, Brad Hughes, Brian J. Murrell, Brian\nMcCauley, Charles C. Fu, Charles Lane, Chris Nandor,\nChristian Gilmore, Chris W. Unger, Craig Macdonald, Dale\nCouch, Dan Kubb, Dave Dunkin, Dave W. Smith, David Coppit,\nDavid Dick, David D. Kilzer, Doug MacEachern, Edward Avis,\nerik, Gary Shea, Gisle Aas, Graham Barr, Gurusamy Sarathy,\nHans de Graaff, Harald Joerg, Harry Bochner, Hugo, Ilya\nZakharevich, <small>INOUE</small> Yoshinari, Ivan Panchenko,\nJack Shirazi, James Tillman, Jan Dubois, Jared Rhine, Jim\nStern, Joao Lopes, John Klar, Johnny Lee, Josh Kronengold,\nJosh Rai, Joshua Chamas, Joshua Hoblitt, Kartik Subbarao,\nKeiichiro Nagano, Ken Williams, <small>KONISHI</small>\nKatsuhiro, Lee T Lindley, Liam Quinn, Marc Hedlund, Marc\nLangheinrich, Mark D. Anderson, Marko Asplund, Mark\nStosberg, Markus B Kr&Atilde;&frac14;ger, Markus Laker,\nMartijn Koster, Martin Thurn, Matthew Eldridge,\nMatthew.van.Eerde, Matt Sergeant, Michael A. Chase, Michael\nQuaranta, Michael Thompson, Mike Schilli, Moshe Kaminsky,\nNathan Torkington, Nicolai Langfeldt, Norton Allen, Olly\nBetts, Paul J. Schinder, peterm, Philip Guenther, Daniel\nBuenzli, Pon Hwa Lin, Radoslaw Zielinski, Radu Greab, Randal\nL. Schwartz, Richard Chen, Robin Barker, Roy Fielding,\nSander van Zoest, Sean M. Burke, shildreth, Slaven Rezic,\nSteve A Fink, Steve Hay, Steven Butler, Steve_Kilbane,\nTakanori Ugai, Thomas Lotterer, Tim Bunce, Tom Hughes, Tony\nFinch, Ville Skytt&Atilde;&curren;, Ward Vandewege, William\nYork, Yale Huang, and Yitzchak Scott-Thoennes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>LWP</small>\nowes a lot in motivation, design, and code, to the\nlibwww-perl library for Perl4 by Roy Fielding, which\nincluded work from Alberto Accomazzi, James Casey, Brooks\nCutter, Martijn Koster, Oscar Nierstrasz, Mel Melchner,\nGertjan van Oosten, Jared Rhine, Jack Shirazi, Gene\nSpafford, Marc VanHeyningen, Steven E. Brenner, Marion\nHakanson, Waldemar Kebsch, Tony Sanders, and Larry Wall; see\nthe libwww-perl-0.40 library for details.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1995-2009, Gisle Aas <br>\nCopyright 1995, Martijn Koster</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n\n<h2>AVAILABILITY\n<a name=\"AVAILABILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The latest\nversion of this library is likely to be available from\n<small>CPAN</small> as well as:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">http://github.com/libwww-perl/libwww-perl</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The best place\nto discuss this code is on the &lt;libwww@perl.org&gt;\nmailing list.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#HTTP STYLE COMMUNICATION\">HTTP STYLE COMMUNICATION</a>","<a href=\"#NETWORK SUPPORT\">NETWORK SUPPORT</a>","<a href=\"#OVERVIEW OF CLASSES AND PACKAGES\">OVERVIEW OF CLASSES AND PACKAGES</a>","<a href=\"#MORE DOCUMENTATION\">MORE DOCUMENTATION</a>","<a href=\"#ENVIRONMENT\">ENVIRONMENT</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#AVAILABILITY\">AVAILABILITY</a>"],"level":3}