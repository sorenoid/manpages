{"name":"net::dbus::test::mockmessage","description":"Net::DBus::Test::MockMessage\n- Fake a message object when unit testing","body":"\n\n<h1 align=\"center\">Net::DBus::Test::MockMessage</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Test::MockMessage\n- Fake a message object when unit testing</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sending a\nmessage</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $msg = new\nNet::DBus::Test::MockMessage; <br>\nmy $iterator = $msg-&gt;iterator; <br>\n$iterator-&gt;append_byte(132); <br>\n$iterator-&gt;append_int32(14241); <br>\n$connection-&gt;send($msg);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides a &quot;mock&quot; counterpart to the\nNet::DBus::Binding::Message class. It is basically a pure\nPerl fake message object providing the same contract as the\nreal message object. It is intended for use internally by\nthe testing APIs.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $call =\nNet::DBus::Test::MockMessage-&gt;new_method_call(\nservice_name <br>\n=&gt; $service, object_path =&gt; $object, interface =&gt;\n$interface, <br>\nmethod_name =&gt; $name);</p>\n\n<p style=\"margin-left:17%;\">Create a message representing a\ncall on the object located at the path\n&quot;object_path&quot; within the client owning the\nwell-known name given by &quot;service_name&quot;. The\nmethod to be invoked has the name &quot;method_name&quot;\nwithin the interface specified by the &quot;interface&quot;\nparameter.</p>\n\n<p style=\"margin-left:11%;\">my $msg =\nNet::DBus::Test::MockMessage-&gt;new_method_return( replyto\n=&gt; <br>\n$method_call);</p>\n\n<p style=\"margin-left:17%;\">Create a message representing a\nreply to the method call passed in the &quot;replyto&quot;\nparameter.</p>\n\n<p style=\"margin-left:11%;\">my $signal =\nNet::DBus::Test::MockMessage-&gt;new_signal( object_path\n=&gt; <br>\n$path, interface =&gt; $interface, signal_name =&gt;\n$name);</p>\n\n<p style=\"margin-left:17%;\">Creates a new message,\nrepresenting a signal [to be] emitted by the object located\nunder the path given by the &quot;object_path&quot;\nparameter. The name of the signal is given by the\n&quot;signal_name&quot; parameter, and is scoped to the\ninterface given by the &quot;interface&quot; parameter.</p>\n\n<p style=\"margin-left:11%;\">my $msg =\nNet::DBus::Test::MockMessage-&gt;new_error( replyto =&gt;\n<br>\n$method_call, name =&gt; $name, description =&gt;\n$description);</p>\n\n<p style=\"margin-left:17%;\">Creates a new message,\nrepresenting an error which occurred during the handling of\nthe method call object passed in as the &quot;replyto&quot;\nparameter. The &quot;name&quot; parameter is the formal name\nof the error condition, while the &quot;description&quot; is\na short piece of text giving more specific information on\nthe error.</p>\n\n<p style=\"margin-left:11%;\">my $type =\n$msg-&gt;get_type</p>\n\n<p style=\"margin-left:17%;\">Retrieves the type code for\nthis message. The returned value corresponds to one of the\nfour\n&quot;Net::DBus::Test::MockMessage::MESSAGE_TYPE_*&quot;\nconstants.</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$msg-&gt;get_error_name</p>\n\n<p style=\"margin-left:17%;\">Returns the formal name of the\nerror, as previously passed in via the &quot;name&quot;\nparameter in the constructor.</p>\n\n<p style=\"margin-left:11%;\">my $interface =\n$msg-&gt;get_interface</p>\n\n<p style=\"margin-left:17%;\">Retrieves the name of the\ninterface targeted by this message, possibly an empty string\nif there is no applicable interface for this message.</p>\n\n<p style=\"margin-left:11%;\">my $path =\n$msg-&gt;get_path</p>\n\n<p style=\"margin-left:17%;\">Retrieves the object path\nassociated with the message, possibly an empty string if\nthere is no applicable object for this message.</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$msg-&gt;get_destination</p>\n\n<p style=\"margin-left:17%;\">Retrieves the unique or\nwell-known bus name for client intended to be the recipient\nof the message. Possibly returns an empty string if the\nmessage is being broadcast to all clients.</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$msg-&gt;get_sender</p>\n\n<p style=\"margin-left:17%;\">Retireves the unique name of\nthe client sending the message</p>\n\n<p style=\"margin-left:11%;\">my $serial =\n$msg-&gt;get_serial</p>\n\n<p style=\"margin-left:17%;\">Retrieves the unique serial\nnumber of this message. The number is guaranteed unique for\nas long as the connection over which the message was sent\nremains open. May return zero, if the message is yet to be\nsent.</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$msg-&gt;get_member</p>\n\n<p style=\"margin-left:17%;\">For method calls, retrieves the\nname of the method to be invoked, while for signals,\nretrieves the name of the signal.</p>\n\n<p style=\"margin-left:11%;\">$msg-&gt;set_sender($name)</p>\n\n<p style=\"margin-left:17%;\">Set the name of the client\nsending the message. The name must be the unique name of the\nclient.</p>\n\n\n<p style=\"margin-left:11%;\">$msg-&gt;set_destination($name)</p>\n\n<p style=\"margin-left:17%;\">Set the name of the intended\nrecipient of the message. This is typically used for signals\nto switch them from broadcast to unicast.</p>\n\n<p style=\"margin-left:11%;\">my $iterator =\n$msg-&gt;iterator;</p>\n\n<p style=\"margin-left:17%;\">Retrieves an iterator which can\nbe used for reading or writing fields of the message. The\nreturned object is an instance of the\n&quot;Net::DBus::Binding::Iterator&quot; class.</p>\n\n<p style=\"margin-left:11%;\">$boolean =\n$msg-&gt;<b>get_no_reply()</b></p>\n\n<p style=\"margin-left:17%;\">Gets the flag indicating\nwhether the message is expecting a reply to be sent.</p>\n\n\n<p style=\"margin-left:11%;\">$msg-&gt;set_no_reply($boolean)</p>\n\n<p style=\"margin-left:17%;\">Toggles the flag indicating\nwhether the message is expecting a reply to be sent. All\nmethod call messages expect a reply by default. By toggling\nthis flag the communication latency is reduced by removing\nthe need for the client to wait</p>\n\n<p style=\"margin-left:11%;\">my @values =\n$msg-&gt;get_args_list</p>\n\n<p style=\"margin-left:17%;\">De-marshall all the values in\nthe body of the message, using the message signature to\nidentify data types. The values are returned as a list.</p>\n\n\n<p style=\"margin-left:11%;\">$msg-&gt;append_args_list(@values)</p>\n\n<p style=\"margin-left:17%;\">Append a set of values to the\nbody of the message. Values will be encoded as either a\nstring, list or dictionary as appropriate to their Perl data\ntype. For more specific data typing needs, the\nNet::DBus::Binding::Iterator object should be used\ninstead.</p>\n\n<p style=\"margin-left:11%;\">my $sig =\n$msg-&gt;get_signature</p>\n\n<p style=\"margin-left:17%;\">Retrieves a string representing\nthe type signature of the values packed into the body of the\nmessage.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel P.\nBerrange</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2005-2009 Daniel P. Berrange</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Binding::Message,\nNet::DBus::Test::MockConnection,\nNet::DBus::Test::MockIterator</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}