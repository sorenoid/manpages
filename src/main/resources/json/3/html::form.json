{"name":"html::form","description":"HTML::Form - Class that represents an HTML form element","body":"\n\n<h1 align=\"center\">HTML::Form</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTML::Form -\nClass that represents an HTML form element</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.07</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use HTML::Form;\n<br>\n$form = HTML::Form-&gt;parse($html, $base_uri); <br>\n$form-&gt;value(query =&gt; &quot;Perl&quot;); <br>\nuse LWP::UserAgent; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\n$response = $ua-&gt;request($form-&gt;click);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Objects of the\n&quot;HTML::Form&quot; class represents a single\n<small>HTML</small> &quot;&lt;form&gt; ...\n&lt;/form&gt;&quot; instance. A form consists of a sequence\nof inputs that usually have names, and which can take on\nvarious values. The state of a form can be tweaked and it\ncan then be asked to provide HTTP::Request objects that can\nbe passed to the <b>request()</b> method of\nLWP::UserAgent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are available: <br>\n@forms = HTML::Form-&gt;parse( $html_document, $base_uri )\n<br>\n@forms = HTML::Form-&gt;parse( $html_document, base =&gt;\n$base_uri, %opt ) <br>\n@forms = HTML::Form-&gt;parse( $response, %opt )</p>\n\n<p style=\"margin-left:17%;\">The <b>parse()</b> class method\nwill parse an <small>HTML</small> document and build up\n&quot;HTML::Form&quot; objects for each &lt;form&gt; element\nfound. If called in scalar context only returns the first\n&lt;form&gt;. Returns an empty list if there are no forms to\nbe found.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The required\narguments is the <small>HTML</small> document to parse\n($html_document) and the <small>URI</small> used to retrieve\nthe document ($base_uri). The base <small>URI</small> is\nneeded to resolve relative action URIs. The provided\n<small>HTML</small> document should be a Unicode string (or\nUS-ASCII).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">By default\nHTML::Form assumes that the original document was\n<small>UTF-8</small> encoded and thus encode forms that\ndon&rsquo;t specify an explicit <i>accept-charset</i> as\n<small>UTF-8.</small> The charset assumed can be overridden\nby providing the &quot;charset&quot; option to\n<b>parse()</b>. It&rsquo;s a good idea to be explicit about\nthis parameter as well, thus the recommended simplest\ninvocation becomes:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @forms =\nHTML::Form-&gt;parse( <br>\nEncode::decode($encoding, $html_document_bytes), <br>\nbase =&gt; $base_uri, <br>\ncharset =&gt; $encoding, <br>\n);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the document\nwas retrieved with <small>LWP</small> then the response\nobject provide methods to obtain a proper value for\n&quot;base&quot; and &quot;charset&quot;:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $ua =\nLWP::UserAgent-&gt;new; <br>\nmy $response =\n$ua-&gt;get(&quot;http://www.example.com/form.html&quot;);\n<br>\nmy @forms =\nHTML::Form-&gt;parse($response-&gt;decoded_content, <br>\nbase =&gt; $response-&gt;base, <br>\ncharset =&gt; $response-&gt;content_charset, <br>\n);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In fact, the\n<b>parse()</b> method can parse from an HTTP::Response\nobject directly, so the example above can be more\nconveniently written as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $ua =\nLWP::UserAgent-&gt;new; <br>\nmy $response =\n$ua-&gt;get(&quot;http://www.example.com/form.html&quot;);\n<br>\nmy @forms = HTML::Form-&gt;parse($response);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that any\nobject that implements a <b>decoded_content()</b>,\n<b>base()</b> and <b>content_charset()</b> method with\nsimilar behaviour as HTTP::Response will do.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Additional\noptions might be passed in to control how the parse method\nbehaves. The following are all the options currently\nrecognized: <br>\n&quot;base =&gt; $uri&quot;</p>\n\n<p style=\"margin-left:23%;\">This is the <small>URI</small>\nused to retrieve the original document. This option is not\noptional ;-)</p>\n\n<p style=\"margin-left:17%;\">&quot;charset =&gt;\n$str&quot;</p>\n\n<p style=\"margin-left:23%;\">Specify what charset the\noriginal document was encoded in. This is used as the\ndefault for accept_charset. If not provided this defaults to\n&quot; <small>UTF-8&quot;.</small></p>\n\n<p style=\"margin-left:17%;\">&quot;verbose =&gt;\n$bool&quot;</p>\n\n<p style=\"margin-left:23%;\">Warn (print messages to\n<small>STDERR</small> ) about any bad <small>HTML</small>\nform constructs found. You can trap these with\n$SIG{__WARN__}. The default is not to issue warnings.</p>\n\n<p style=\"margin-left:17%;\">&quot;strict =&gt;\n$bool&quot;</p>\n\n<p style=\"margin-left:23%;\">Initialize any form objects\nwith the given strict attribute. If the strict is turned on\nthe methods that change values of the form will croak if you\ntry to set illegal values or modify readonly fields. The\ndefault is not to be strict.</p>\n\n<p style=\"margin-left:11%;\">$form-&gt;push_input( $type,\n\\%attr, $verbose )</p>\n\n<p style=\"margin-left:17%;\">This method adds additional\ninputs to the form. The first argument is the type of input\n(e.g. hidden, option, etc.). The second argument is a\nreference to a hash of the input attributes. The third\nargument is optional, and will issue warnings about unknown\ninput types.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">push_input(\n'hidden', { <br>\nname =&gt; 'NewFormElement', <br>\nid =&gt; 'NewFormElementId', <br>\nvalue =&gt; 'some value', <br>\n});</p>\n\n<p style=\"margin-left:11%;\">$method = $form-&gt;method <br>\n$form-&gt;method( $new_method )</p>\n\n<p style=\"margin-left:17%;\">This method is gets/sets the\n<i>method</i> name used for the HTTP::Request generated. It\nis a string like &quot; <small>GET&quot;</small> or &quot;\n<small>POST&quot;.</small></p>\n\n<p style=\"margin-left:11%;\">$action = $form-&gt;action <br>\n$form-&gt;action( $new_action )</p>\n\n<p style=\"margin-left:17%;\">This method gets/sets the\n<small>URI</small> which we want to apply the request\n<i>method</i> to.</p>\n\n<p style=\"margin-left:11%;\">$enctype = $form-&gt;enctype\n<br>\n$form-&gt;enctype( $new_enctype )</p>\n\n<p style=\"margin-left:17%;\">This method gets/sets the\nencoding type for the form data. It is a string like\n&quot;application/x-www-form-urlencoded&quot; or\n&quot;multipart/form-data&quot;.</p>\n\n<p style=\"margin-left:11%;\">$accept =\n$form-&gt;accept_charset <br>\n$form-&gt;accept_charset( $new_accept )</p>\n\n<p style=\"margin-left:17%;\">This method gets/sets the list\nof charset encodings that the server processing the form\naccepts. Current implementation supports only one-element\nlists. Default value is &quot; <small>UNKNOWN&quot;</small>\nwhich we interpret as a request to use document charset as\nspecified by the &rsquo;charset&rsquo; parameter of the\n<b>parse()</b> method.</p>\n\n<p style=\"margin-left:11%;\">$value = $form-&gt;attr( $name\n) <br>\n$form-&gt;attr( $name, $new_value )</p>\n\n<p style=\"margin-left:17%;\">This method give access to the\noriginal <small>HTML</small> attributes of the &lt;form&gt;\ntag. The $name should always be passed in lower case.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">@f =\nHTML::Form-&gt;parse( $html, $foo ); <br>\n@f = grep $_-&gt;attr(&quot;id&quot;) eq &quot;foo&quot;,\n@f; <br>\ndie &quot;No form named 'foo' found&quot; unless @f; <br>\n$foo = shift @f;</p>\n\n<p style=\"margin-left:11%;\">$bool = $form-&gt;strict <br>\n$form-&gt;strict( $bool )</p>\n\n<p style=\"margin-left:17%;\">Gets/sets the strict attribute\nof a form. If the strict is turned on the methods that\nchange values of the form will croak if you try to set\nillegal values or modify readonly fields. The default is not\nto be strict.</p>\n\n<p style=\"margin-left:11%;\">@inputs = $form-&gt;inputs</p>\n\n<p style=\"margin-left:17%;\">This method returns the list of\ninputs in the form. If called in scalar context it returns\nthe number of inputs contained in the form. See &quot;\n<small>INPUTS&quot;</small> for what methods are available\nfor the input objects returned.</p>\n\n<p style=\"margin-left:11%;\">$input = $form-&gt;find_input(\n$selector ) <br>\n$input = $form-&gt;find_input( $selector, $type ) <br>\n$input = $form-&gt;find_input( $selector, $type, $index )\n<br>\n@inputs = $form-&gt;find_input( $selector ) <br>\n@inputs = $form-&gt;find_input( $selector, $type )</p>\n\n<p style=\"margin-left:17%;\">This method is used to locate\nspecific inputs within the form. All inputs that match the\narguments given are returned. In scalar context only the\nfirst is returned, or &quot;undef&quot; if none match.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If $selector is\nnot &quot;undef&quot;, then the input&rsquo;s name, id,\nclass attribute must match. A selector prefixed with\n&rsquo;#&rsquo; must match the id attribute of the input. A\nselector prefixed with &rsquo;.&rsquo; matches the class\nattribute. A selector prefixed with &rsquo;^&rsquo; or with\nno prefix matches the name attribute.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If $type is not\n&quot;undef&quot;, then the input must have the specified\ntype. The following type names are used: &quot;text&quot;,\n&quot;password&quot;, &quot;hidden&quot;,\n&quot;textarea&quot;, &quot;file&quot;, &quot;image&quot;,\n&quot;submit&quot;, &quot;radio&quot;, &quot;checkbox&quot;\nand &quot;option&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $index is\nthe sequence number of the input matched where 1 is the\nfirst. If combined with $name and/or $type, then it selects\nthe <i>n</i>th input with the given name and/or type.</p>\n\n<p style=\"margin-left:11%;\">$value = $form-&gt;value(\n$selector ) <br>\n$form-&gt;value( $selector, $new_value )</p>\n\n<p style=\"margin-left:17%;\">The <b>value()</b> method can\nbe used to get/set the value of some input. If strict is\nenabled and no input has the indicated name, then this\nmethod will croak.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If multiple\ninputs have the same name, only the first one will be\naffected.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The call:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$form-&gt;value('foo')</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">is basically a\nshort-hand for:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$form-&gt;find_input('foo')-&gt;value;</p>\n\n<p style=\"margin-left:11%;\">@names = $form-&gt;param <br>\n@values = $form-&gt;param( $name ) <br>\n$form-&gt;param( $name, $value, ... ) <br>\n$form-&gt;param( $name, \\@values )</p>\n\n<p style=\"margin-left:17%;\">Alternative interface to\nexamining and setting the values of the form.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If called\nwithout arguments then it returns the names of all the\ninputs in the form. The names will not repeat even if\nmultiple inputs have the same name. In scalar context the\nnumber of different names is returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If called with\na single argument then it returns the value or values of\ninputs with the given name. If called in scalar context only\nthe first value is returned. If no input exists with the\ngiven name, then &quot;undef&quot; is returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If called with\n2 or more arguments then it will set values of the named\ninputs. This form will croak if no inputs have the given\nname or if any of the values provided does not fit. Values\ncan also be provided as a reference to an array. This form\nwill allow unsetting all values with the given name as\nwell.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This interface\nresembles that of the <b>param()</b> function of the\n<small>CGI</small> module.</p>\n\n<p style=\"margin-left:11%;\">$form-&gt;try_others(\n\\&amp;callback )</p>\n\n<p style=\"margin-left:17%;\">This method will iterate over\nall permutations of unvisited enumerated values\n(&lt;select&gt;, &lt;radio&gt;, &lt;checkbox&gt;) and invoke\nthe callback for each. The callback is passed the $form as\nargument. The return value from the callback is ignored and\nthe <b>try_others()</b> method itself does not return\nanything.</p>\n\n<p style=\"margin-left:11%;\">$request =\n$form-&gt;make_request</p>\n\n<p style=\"margin-left:17%;\">Will return an HTTP::Request\nobject that reflects the current setting of the form. You\nmight want to use the <b>click()</b> method instead.</p>\n\n<p style=\"margin-left:11%;\">$request = $form-&gt;click <br>\n$request = $form-&gt;click( $selector ) <br>\n$request = $form-&gt;click( $x, $y ) <br>\n$request = $form-&gt;click( $selector, $x, $y )</p>\n\n<p style=\"margin-left:17%;\">Will &quot;click&quot; on the\nfirst clickable input (which will be of type\n&quot;submit&quot; or &quot;image&quot;). The result of\nclicking is an HTTP::Request object that can then be passed\nto LWP::UserAgent if you want to obtain the server\nresponse.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a $selector\nis specified, we will click on the first clickable input\nmatching the selector, and the method will croak if no\nmatching clickable input is found. If $selector is\n<i>not</i> specified, then it is ok if the form contains no\nclickable inputs. In this case the <b>click()</b> method\nreturns the same request as the <b>make_request()</b> method\nwould do. See description of the <b>find_input()</b> method\nabove for how the $selector is specified.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If there are\nmultiple clickable inputs with the same name, then there is\nno way to get the <b>click()</b> method of the\n&quot;HTML::Form&quot; to click on any but the first. If you\nneed this you would have to locate the input with\n<b>find_input()</b> and invoke the <b>click()</b> method on\nthe given input yourself.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A click\ncoordinate pair can also be provided, but this only makes a\ndifference if you clicked on an image. The default\ncoordinate is (1,1). The upper-left corner of the image is\n(0,0), but some badly coded <small>CGI</small> scripts are\nknown to not recognize this. Therefore (1,1) was selected as\na safer default.</p>\n\n<p style=\"margin-left:11%;\">@kw = $form-&gt;form</p>\n\n<p style=\"margin-left:17%;\">Returns the current setting as\na sequence of key/value pairs. Note that keys might be\nrepeated, which means that some values might be lost if the\nreturn values are assigned to a hash.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In scalar\ncontext this method returns the number of key/value pairs\ngenerated.</p>\n\n<p style=\"margin-left:11%;\">$form-&gt;dump</p>\n\n<p style=\"margin-left:17%;\">Returns a textual\nrepresentation of current state of the form. Mainly useful\nfor debugging. If called in void context, then the dump is\nprinted on <small>STDERR.</small></p>\n\n<h2>INPUTS\n<a name=\"INPUTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n&quot;HTML::Form&quot; objects contains a sequence of\n<i>inputs</i>. References to the inputs can be obtained with\nthe $form-&gt;inputs or $form-&gt;find_input methods.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that there\nis <i>not</i> a one-to-one correspondence between input\n<i>objects</i> and &lt;input&gt; <i>elements</i> in the\n<small>HTML</small> document. An input object basically\nrepresents a name/value pair, so when multiple\n<small>HTML</small> elements contribute to the same\nname/value pair in the submitted form they are combined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The input\nelements that are mapped one-to-one are &quot;text&quot;,\n&quot;textarea&quot;, &quot;password&quot;,\n&quot;hidden&quot;, &quot;file&quot;, &quot;image&quot;,\n&quot;submit&quot; and &quot;checkbox&quot;. For the\n&quot;radio&quot; and &quot;option&quot; inputs the story is\nnot as simple: All &lt;input type=&quot;radio&quot;&gt;\nelements with the same name will contribute to the same\ninput radio object. The number of radio input objects will\nbe the same as the number of distinct names used for the\n&lt;input type=&quot;radio&quot;&gt; elements. For a\n&lt;select&gt; element without the &quot;multiple&quot;\nattribute there will be one input object of type of\n&quot;option&quot;. For a &lt;select multiple&gt; element\nthere will be one input object for each contained\n&lt;option&gt; element. Each one of these option objects\nwill have the same name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods are available for the <i>input</i> objects: <br>\n$input-&gt;type</p>\n\n<p style=\"margin-left:17%;\">Returns the type of this input.\nThe type is one of the following strings: &quot;text&quot;,\n&quot;password&quot;, &quot;hidden&quot;,\n&quot;textarea&quot;, &quot;file&quot;, &quot;image&quot;,\n&quot;submit&quot;, &quot;radio&quot;, &quot;checkbox&quot;\nor &quot;option&quot;.</p>\n\n<p style=\"margin-left:11%;\">$name = $input-&gt;name <br>\n$input-&gt;name( $new_name )</p>\n\n<p style=\"margin-left:17%;\">This method can be used to\nget/set the current name of the input.</p>\n\n<p style=\"margin-left:11%;\">$input-&gt;id <br>\n$input-&gt;class</p>\n\n<p style=\"margin-left:17%;\">These methods can be used to\nget/set the current id or class attribute for the input.</p>\n\n<p style=\"margin-left:11%;\">$input-&gt;selected( $selector\n)</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe given selector matched the input. See the description of\nthe <b>find_input()</b> method above for a description of\nthe selector syntax.</p>\n\n<p style=\"margin-left:11%;\">$value = $input-&gt;value <br>\n$input-&gt;value( $new_value )</p>\n\n<p style=\"margin-left:17%;\">This method can be used to\nget/set the current value of an input.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If strict is\nenabled and the input only can take an enumerated list of\nvalues, then it is an error to try to set it to something\nelse and the method will croak if you try.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You will also\nbe able to set the value of read-only inputs, but a warning\nwill be generated if running under &quot;perl -w&quot;.</p>\n\n<p style=\"margin-left:11%;\">$autocomplete =\n$input-&gt;autocomplete <br>\n$input-&gt;autocomplete( $new_autocomplete )</p>\n\n<p style=\"margin-left:17%;\">This method can be used to\nget/set the current value (if any) of\n&quot;autcomplete&quot; for the input.</p>\n\n<p style=\"margin-left:11%;\">$input-&gt;possible_values</p>\n\n<p style=\"margin-left:17%;\">Returns a list of all values\nthat an input can take. For inputs that do not have discrete\nvalues, this returns an empty list.</p>\n\n\n<p style=\"margin-left:11%;\">$input-&gt;other_possible_values</p>\n\n<p style=\"margin-left:17%;\">Returns a list of all values\nnot tried yet.</p>\n\n<p style=\"margin-left:11%;\">$input-&gt;value_names</p>\n\n<p style=\"margin-left:17%;\">For some inputs the values can\nhave names that are different from the values themselves.\nThe number of names returned by this method will match the\nnumber of values reported by $input-&gt;possible_values.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When setting\nvalues using the <b>value()</b> method it is also possible\nto use the value names in place of the value itself.</p>\n\n<p style=\"margin-left:11%;\">$bool = $input-&gt;readonly\n<br>\n$input-&gt;readonly( $bool )</p>\n\n<p style=\"margin-left:17%;\">This method is used to get/set\nthe value of the readonly attribute. You are allowed to\nmodify the value of readonly inputs, but setting the value\nwill generate some noise when warnings are enabled. Hidden\nfields always start out readonly.</p>\n\n<p style=\"margin-left:11%;\">$bool = $input-&gt;disabled\n<br>\n$input-&gt;disabled( $bool )</p>\n\n<p style=\"margin-left:17%;\">This method is used to get/set\nthe value of the disabled attribute. Disabled inputs do not\ncontribute any key/value pairs for the form value.</p>\n\n<p style=\"margin-left:11%;\">$input-&gt;form_name_value</p>\n\n<p style=\"margin-left:17%;\">Returns a (possible empty) list\nof key/value pairs that should be incorporated in the form\nvalue from this input.</p>\n\n<p style=\"margin-left:11%;\">$input-&gt;check</p>\n\n<p style=\"margin-left:17%;\">Some input types represent\ntoggles that can be turned on/off. This includes\n&quot;checkbox&quot; and &quot;option&quot; inputs. Calling\nthis method turns this input on without having to know the\nvalue name. If the input is already on, then nothing\nhappens.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This has the\nsame effect as:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$input-&gt;value($input-&gt;possible_values[1]);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The input can\nbe turned off with:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$input-&gt;value(undef);</p>\n\n<p style=\"margin-left:11%;\">$input-&gt;click($form, $x,\n$y)</p>\n\n<p style=\"margin-left:17%;\">Some input types (currently\n&quot;submit&quot; buttons and &quot;images&quot;) can be\nclicked to submit the form. The <b>click()</b> method\nreturns the corresponding HTTP::Request object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the input is\nof type &quot;file&quot;, then it has these additional\nmethods: <br>\n$input-&gt;file</p>\n\n<p style=\"margin-left:17%;\">This is just an alias for the\n<b>value()</b> method. It sets the filename to read data\nfrom.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For security\nreasons this field will never be initialized from the\nparsing of a form. This prevents the server from triggering\nstealth uploads of arbitrary files from the client\nmachine.</p>\n\n<p style=\"margin-left:11%;\">$filename = $input-&gt;filename\n<br>\n$input-&gt;filename( $new_filename )</p>\n\n<p style=\"margin-left:17%;\">This get/sets the filename\nreported to the server during file upload. This attribute\ndefaults to the value reported by the <b>file()</b>\nmethod.</p>\n\n<p style=\"margin-left:11%;\">$content = $input-&gt;content\n<br>\n$input-&gt;content( $new_content )</p>\n\n<p style=\"margin-left:17%;\">This get/sets the file content\nprovided to the server during file upload. This method can\nbe used if you do not want the content to be read from an\nactual file.</p>\n\n<p style=\"margin-left:11%;\">@headers = $input-&gt;headers\n<br>\ninput-&gt;headers($key =&gt; $value, .... )</p>\n\n<p style=\"margin-left:17%;\">This get/set additional header\nfields describing the file uploaded. This can for instance\nbe used to set the &quot;Content-Type&quot; reported for the\nfile.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>LWP</small>\n, LWP::UserAgent, HTML::Parser</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1998 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#INPUTS\">INPUTS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}