{"name":"glib::object::introspection","description":"Glib::Object::Introspection - Dynamically create Perl language bindings","body":"\n\n<h1 align=\"center\">Glib::Object::Introspection</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object::Introspection\n- Dynamically create Perl language bindings</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nGlib::Object::Introspection; <br>\nGlib::Object::Introspection-&gt;setup( <br>\nbasename =&gt; 'Gtk', <br>\nversion =&gt; '3.0', <br>\npackage =&gt; 'Gtk3'); <br>\n# now GtkWindow, to mention just one example, is available\nas <br>\n# Gtk3::Window, and you can call gtk_window_new as\nGtk3::Window-&gt;new</p>\n\n<h2>ABSTRACT\n<a name=\"ABSTRACT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object::Introspection\nuses the gobject-introspection and libffi projects to\ndynamically create Perl bindings for a wide variety of\nlibraries. Examples include gtk+, webkit, libsoup and many\nmore.</p>\n\n<h2>DESCRIPTION FOR LIBRARY USERS\n<a name=\"DESCRIPTION FOR LIBRARY USERS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To allow\nGlib::Object::Introspection to create bindings for a\nlibrary, the library must have installed a typelib file, for\nexample\n&quot;$prefix/lib/girepository-1.0/Gtk-3.0.typelib&quot;. In\nyour code you then simply call\n&quot;Glib::Object::Introspection-&gt;setup&quot; with the\nfollowing key-value pairs to set everything up: <br>\nbasename =&gt; $basename</p>\n\n<p style=\"margin-left:17%;\">The basename of the library\nthat should be wrapped. If your typelib is called\n&quot;Gtk-3.0.typelib&quot;, then the basename is\n&rsquo;Gtk&rsquo;.</p>\n\n<p style=\"margin-left:11%;\">version =&gt; $version</p>\n\n<p style=\"margin-left:17%;\">The particular version of the\nlibrary that should be wrapped, in string form. For\n&quot;Gtk-3.0.typelib&quot;, it is &rsquo;3.0&rsquo;.</p>\n\n<p style=\"margin-left:11%;\">package =&gt; $package</p>\n\n<p style=\"margin-left:17%;\">The name of the Perl package\nwhere every class and method of the library should be\nrooted. If a library with basename &rsquo;Gtk&rsquo;\ncontains an class &rsquo;GtkWindow&rsquo;, and you pick as\nthe package &rsquo;Gtk3&rsquo;, then that class will be\navailable as &rsquo;Gtk3::Window&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Perl\nwrappers created by &quot;Glib::Object::Introspection&quot;\nfollow the conventions of the Glib module and old\nhand-written bindings like Gtk2. You can use the included\ntool &quot;perli11ndoc&quot; to view the documentation of\nall installed libraries organized and displayed in\naccordance with these conventions. The guiding principles\nunderlying the conventions are described in the\nfollowing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Namespaces\nand Objects</b> <br>\nThe namespaces of the C libraries are mapped to Perl\npackages according to the &quot;package&quot; option\nspecified, for example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">gtk_ =&gt; Gtk3\n<br>\ngdk_ =&gt; Gtk3::Gdk <br>\ngdk_pixbuf_ =&gt; Gtk3::Gdk::Pixbuf <br>\npango_ =&gt; Pango</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Classes,\ninterfaces and boxed and fundamental types get their own\nnamespaces, in a way, as the concept of the GType is\ncompletely replaced in the Perl bindings by the Perl package\nname.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">GtkButton =&gt;\nGtk3::Button <br>\nGdkPixbuf =&gt; Gtk3::Gdk::Pixbuf <br>\nGtkScrolledWindow =&gt; Gtk3::ScrolledWindow <br>\nPangoFontDescription =&gt; Pango::FontDescription</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With this\npackage mapping and Perl&rsquo;s built-in method lookup, the\nbindings can do object casting for you. This gives us a\nrather comfortably object-oriented syntax, using normal Perl\nobject semantics:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">in C: <br>\nGtkWidget * b; <br>\nb = gtk_check_button_new_with_mnemonic\n(&quot;_Something&quot;); <br>\ngtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (b), TRUE);\n<br>\ngtk_widget_show (b); <br>\nin Perl: <br>\nmy $b = Gtk3::CheckButton-&gt;new_with_mnemonic\n('_Something'); <br>\n$b-&gt;set_active (1); <br>\n$b-&gt;show;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You see from\nthis that cast macros are not necessary and that you\ndon&rsquo;t need to type namespace prefixes quite so often,\nso your code is a lot shorter.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Flags and\nEnums</b> <br>\nFlags and enum values are handled as strings, because\nit&rsquo;s much more readable than numbers, and because\nit&rsquo;s automagical thanks to the GType system. Values\nare referred to by their nicknames; basically, strip the\ncommon prefix, lower-case it, and optionally convert\n&rsquo;_&rsquo; to &rsquo;-&rsquo;:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">GTK_WINDOW_TOPLEVEL\n=&gt; 'toplevel' <br>\nGTK_BUTTONS_OK_CANCEL =&gt; 'ok-cancel' (or 'ok_cancel')</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Flags are a\nspecial case. You can&rsquo;t (sensibly) bitwise-or these\nstring-constants, so you provide a reference to an array of\nthem instead. Anonymous arrays are useful here, and an empty\nanonymous array is a simple way to say &rsquo;no\nflags&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">FOO_BAR_BAZ |\nFOO_BAR_QUU | FOO_BAR_QUUX =&gt; [qw/baz quu qux/] <br>\n0 =&gt; []</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In some cases\nyou need to see if a bit is set in a bitfield; methods\nreturning flags therefore return an overloaded object. See\nGlib for more details on which operations are allowed on\nthese flag objects, but here is a quick example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">in C: <br>\n/* event-&gt;state is a bitfield */ <br>\nif (event-&gt;state &amp; GDK_CONTROL_MASK) g_printerr\n(&quot;control was down\\n&quot;); <br>\nin Perl: <br>\n# $event-&gt;state is a special object <br>\nwarn &quot;control was down\\n&quot; if $event-&gt;state\n&amp; &quot;control-mask&quot;;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">But this also\nworks:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">warn\n&quot;control was down\\n&quot; if $event-&gt;state *\n&quot;control-mask&quot;; <br>\nwarn &quot;control was down\\n&quot; if $event-&gt;state\n&gt;= &quot;control-mask&quot;; <br>\nwarn &quot;control and shift were down\\n&quot; <br>\nif $event-&gt;state &gt;= [&quot;control-mask&quot;,\n&quot;shift-mask&quot;];</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Memory\nHandling</b> <br>\nThe functions for ref&rsquo;ing and unref&rsquo;ing objects\nand free&rsquo;ing boxed structures are not even mapped to\nPerl, because it&rsquo;s all handled automagically by the\nbindings. Objects will be kept alive so long as you have a\nPerl scalar pointing to it or the object is referenced in\nanother way, e.g. from a container.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The only thing\nyou have to be careful about is the lifespan of non\nreference counted structures, which means most things\nderived from &quot;Glib::Boxed&quot;. If it comes from a\nsignal callback it might be good only until you return, or\nif it&rsquo;s the insides of another object then it might be\ngood only while that object lives. If in doubt you can\n&quot;copy&quot;. Structs from &quot;copy&quot; or\n&quot;new&quot; are yours and live as long as referred to\nfrom Perl.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Callbacks</b>\n<br>\nUse normal Perl callback/closure tricks with callbacks. The\nmost common use you&rsquo;ll have for callbacks is with the\nGlib &quot;signal_connect&quot; method:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$widget-&gt;signal_connect\n(event =&gt; \\&amp;event_handler, $user_data); <br>\n$button-&gt;signal_connect (clicked =&gt; sub { warn\n&quot;hi!\\n&quot; });</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$user_data is\noptional, and with Perl closures you don&rsquo;t often need\nit (see &quot;Persistent variables with closures&quot; in\nperlsub).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The userdata is\nheld in a scalar, initialized from what you give in\n&quot;signal_connect&quot; etc. It&rsquo;s passed to the\ncallback in usual Perl &quot;call by reference&quot; style\nwhich means the callback can modify its last argument, ie.\n$_[-1], to modify the held userdata. This is a little\nsubtle, but you can use it for some &quot;state&quot;\nassociated with the connection.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$widget-&gt;signal_connect\n(activate =&gt; \\&amp;my_func, 1); <br>\nsub my_func { <br>\nprint &quot;activation count: $_[-1]\\n&quot;; <br>\n$_[-1] ++; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because the\nheld userdata is a new scalar there&rsquo;s no change to the\nvariable (etc.) you originally passed to\n&quot;signal_connect&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you have a\nparent object in the userdata (or closure) you have to be\ncareful about circular references preventing parent and\nchild being destroyed. See &quot;Two-Phased Garbage\nCollection&quot; in perlobj about this generally. Toplevel\nwidgets like &quot;Gtk3::Window&quot; always need an\nexplicit &quot;$widget-&gt;destroy&quot; so their\n&quot;destroy&quot; signal is a good place to break circular\nreferences. But for other widgets it&rsquo;s usually\nfriendliest to avoid circularities in the first place,\neither by using weak references in the userdata, or possibly\nlocating a parent dynamically with\n&quot;$widget-&gt;get_ancestor&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Exception\nhandling</b> <br>\nAnything that uses GError in C will &quot;croak&quot; on\nfailure, setting $@ to a magical exception object, which is\noverloaded to print as the returned error message. The\nideology here is that GError is to be used for runtime\nexceptions, and &quot;croak&quot; is how you do that in\nPerl. You can catch a croak very easily by wrapping the\nfunction in an eval:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">eval { <br>\nmy $pixbuf = Gtk3::Gdk::Pixbuf-&gt;new_from_file\n($filename); <br>\n$image-&gt;set_from_pixbuf ($pixbuf); <br>\n}; <br>\nif ($@) { <br>\nprint &quot;$@\\n&quot;; # prints the possibly-localized\nerror message <br>\nif (Glib::Error::matches ($@, 'Gtk3::Gdk::Pixbuf::Error',\n<br>\n'unknown-format')) { <br>\nchange_format_and_try_again (); <br>\n} elsif (Glib::Error::matches ($@, 'Glib::File::Error',\n'noent')) { <br>\nchange_source_dir_and_try_again (); <br>\n} else { <br>\n# don't know how to handle this <br>\ndie $@; <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This has the\nadded advantage of letting you bunch things together as you\nwould with a try/throw/catch block in C <small>++</small> --\nyou get cleaner code. By using Glib::Error exception\nobjects, you don&rsquo;t have to rely on string matching on\na possibly localized error message; you can match errors by\nexplicit and predictable conditions. See Glib::Error for\nmore information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Output\narguments, lists, hashes</b> <br>\nIn C you can only return one value from a function, and it\nis a common practice to modify pointers passed in to\nsimulate returning multiple values. In Perl, you can return\nlists; any functions which modify arguments are changed to\nreturn them instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Arguments and\nreturn values that have the types GList or GSList or which\nare C arrays of values will be converted to and from\nreferences to normal Perl arrays. The same holds for\nGHashTable and references to normal Perl hashes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Object class\nfunctions</b> <br>\nObject class functions like\n&quot;Gtk3::WidgetClass::find_style_propery&quot; can be\ncalled either with a package name or with an instance of the\npackage. For example:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gtk3::WidgetClass::find_style_property\n('Gtk3::Button', 'image-spacing') <br>\nmy $button = Gtk3::Button-&gt;new; <br>\nGtk3::WidgetClass::find_style_property ($button,\n'image-spacing')</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Overriding\nvirtual functions</b> <br>\nWhen subclassing a gtk+ class or when implementing a gtk+\ninterface with Glib::Object::Subclass, you can override any\nvirtual functions that the class has by simply defining sub\nroutines with names obtained by capitalizing the original\nnames of the virtual functions. So, for example, if you\nimplement a custom subclass of\n&quot;Gtk3::CellRenderer&quot; and want to override its\nvirtual function &quot;render&quot;, you provide a sub\nroutine with the name &quot;RENDER&quot; in your\npackage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub RENDER {\n<br>\nmy ($cell, $cr, $widget, $background_area, $cell_area,\n$flags) = @_; <br>\n# do something <br>\n}</p>\n\n<h2>DESCRIPTION FOR LIBRARY BINDING AUTHORS\n<a name=\"DESCRIPTION FOR LIBRARY BINDING AUTHORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&quot;Glib::Object::Introspection-&gt;setup&quot;</b>\n<br>\n&quot;Glib::Object::Introspection-&gt;setup&quot; takes a\nfew optional arguments that augment the generated\n<small>API:</small> <br>\nsearch_path =&gt; $search_path</p>\n\n<p style=\"margin-left:17%;\">A path that should be used when\nlooking for typelibs. If you use typelibs from system\ndirectories, or if your environment contains a properly set\n&quot;GI_TYPELIB_PATH&quot; variable, then this should not\nbe necessary.</p>\n\n<p style=\"margin-left:11%;\">name_corrections =&gt; {\nauto_name =&gt; new_name, ... }</p>\n\n<p style=\"margin-left:17%;\">A hash ref that is used to\nrename functions and methods. Use this if you don&rsquo;t\nlike the automatically generated mapping for a function or\nmethod. For example, if &quot;g_file_hash&quot; is\nautomatically represented as &quot;Glib::IO::file_hash&quot;\nbut you want &quot;Glib::IO::File::hash&quot; then pass</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">name_corrections\n=&gt; { <br>\n'Glib::IO::file_hash' =&gt; 'Glib::IO::File::hash' <br>\n}</p>\n\n<p style=\"margin-left:11%;\">class_static_methods =&gt; [\nfunction1, ... ]</p>\n\n<p style=\"margin-left:17%;\">An array ref of function names\nthat you want to be treated as class-static methods. That\nis, if you want be able to call\n&quot;Gtk3::Window::list_toplevels&quot; as\n&quot;Gtk3::Window-&gt;list_toplevels&quot;, then pass</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">class_static_methods\n=&gt; [ <br>\n'Gtk3::Window::list_toplevels' <br>\n]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nnames refer to those after name corrections.</p>\n\n<p style=\"margin-left:11%;\">flatten_array_ref_return_for\n=&gt; [ function1, ... ]</p>\n\n<p style=\"margin-left:17%;\">An array ref of function names\nthat return an array ref that you want to be flattened so\nthat they return plain lists. For example</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">flatten_array_ref_return_for\n=&gt; [ <br>\n'Gtk3::Window::list_toplevels' <br>\n]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nnames refer to those after name corrections. Functions\noccurring in &quot;flatten_array_ref_return_for&quot; may\nalso occur in &quot;class_static_methods&quot;.</p>\n\n<p style=\"margin-left:11%;\">handle_sentinel_boolean_for\n=&gt; [ function1, ... ]</p>\n\n<p style=\"margin-left:17%;\">An array ref of function names\nthat return multiple values, the first of which is to be\ninterpreted as indicating whether the rest of the returned\nvalues are valid. This frequently occurs with functions that\nhave out arguments; the boolean then indicates whether the\nout arguments have been written. With\n&quot;handle_sentinel_boolean_for&quot;, the first return\nvalue is taken to be the sentinel boolean. If it is true,\nthe rest of the original return values will be returned, and\notherwise an empty list will be returned.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">handle_sentinel_boolean_for\n=&gt; [ <br>\n'Gtk3::TreeSelection::get_selected' <br>\n]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nnames refer to those after name corrections. Functions\noccurring in &quot;handle_sentinel_boolean_for&quot; may\nalso occur in &quot;class_static_methods&quot;.</p>\n\n\n<p style=\"margin-left:11%;\">use_generic_signal_marshaller_for\n=&gt; [ [package1, signal1, <br>\n[arg_converter1]], ... ]</p>\n\n<p style=\"margin-left:17%;\">Use an introspection-based\ngeneric signal marshaller for the signal &quot;signal1&quot;\nof type &quot;package1&quot;. If given, use the code\nreference &quot;arg_converter1&quot; to convert the\narguments that are passed to the signal handler. In contrast\nto Glib&rsquo;s normal signal marshaller, the generic signal\nmarshaller supports, among other things, pointer arrays and\nout arguments.</p>\n\n<p style=\"margin-left:11%;\">reblessers =&gt; { package\n=&gt; \\&amp;reblesser, ... }</p>\n\n<p style=\"margin-left:17%;\">Tells G:O:I to invoke\n<i>reblesser</i> whenever a Perl object is created for an\nobject of type <i>package</i>. Currently, this only applies\nto boxed unions. The reblesser gets passed the pre-created\nPerl object and needs to return the modified Perl object.\nFor example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub\nGtk3::Gdk::Event::_rebless { <br>\nmy ($event) = @_; <br>\nreturn bless $event, lookup_real_package_for ($event); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&quot;Glib::Object::Introspection-&gt;invoke&quot;</b>\n<br>\nTo invoke specific functions manually, you can use the\nlow-level\n&quot;Glib::Object::Introspection-&gt;invoke&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object::Introspection-&gt;invoke(\n<br>\n$basename, $namespace, $function, @args)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$basename is the basename of a library, like\n&rsquo;Gtk&rsquo;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$namespace refers to a namespace inside that library,\nlike &rsquo;Window&rsquo;. Use undef here if you want to\ncall a library-global function.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$function is the name of the function you want to\ninvoke. It can also refer to the name of a constant.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>@args are the arguments that should be passed to the\nfunction. For a method, this should include the invocant.\nFor a constructor, this should include the package name.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Glib::Object::Introspection-&gt;invoke&quot;\nreturns whatever the function being invoked returns.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Overrides</b>\n<br>\nTo override the behavior of a specific function or method,\ncreate an appropriately named sub in the correct package and\nhave it call\n&quot;Glib::Object::Introspection-&gt;invoke&quot;. Say you\nwant to override &quot;Gtk3::Window::list_toplevels&quot;,\nthen do this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub\nGtk3::Window::list_toplevels { <br>\n# ...do something... <br>\nmy $ref = Glib::Object::Introspection-&gt;invoke ( <br>\n'Gtk', 'Window', 'list_toplevels', <br>\n@_); <br>\n# ...do something... <br>\nreturn wantarray ? @$ref : $ref-&gt;[$#$ref]; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The sub&rsquo;s\nname and package must be those after name corrections.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Converting a\nPerl variable to a GValue</b> <br>\nIf you need to marshal into a GValue, then\nGlib::Object::Introspection cannot do this automatically\nbecause the type information is missing. If you do have this\ninformation in your module, however, you can use\nGlib::Object::Introspection::GValueWrapper to do the\nconversion. In the wrapper for a function that expects a\nGValue, do this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">... <br>\nmy $type = ...; # somehow get the package name that <br>\n# corresponds to the correct GType <br>\nmy $wrapper = <br>\nGlib::Object::Introspection::GValueWrapper-&gt;new ($type,\n$value); <br>\n# now use Glib::Object::Introspection-&gt;invoke and <br>\n# substitute $wrapper where you'd use $value <br>\n...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you need to\ncall a function that expects an already set-up GValue and\nmodifies it, use &quot;get_value&quot; on the wrapper\nafterwards to obtain the value. For example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $wrapper =\n<br>\nGlib::Object::Introspection::GValueWrapper-&gt;new\n('Glib::Boolean', 0); <br>\n$box-&gt;child_get_property ($label, 'expand', $gvalue);\n<br>\nmy $value = $gvalue-&gt;get_value</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Handling raw\nenumerations and flags</b> <br>\nIf you need to handle raw enumerations/flags or extendable\nenumerations for which more than the pre-defined values\nmight be valid, then use\n&quot;Glib::Object::Introspection-&gt;convert_enum_to_sv&quot;,\n&quot;Glib::Object::Introspection-&gt;convert_sv_to_enum&quot;,\n&quot;Glib::Object::Introspection-&gt;convert_flags_to_sv&quot;\nand\n&quot;Glib::Object::Introspection-&gt;convert_sv_to_flags&quot;.\nThey will raise an exception on unknown values; catching it\nthen allows you to implement fallback behavior.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Object::Introspection-&gt;convert_enum_to_sv\n(package, enum_value) <br>\nGlib::Object::Introspection-&gt;convert_sv_to_enum (package,\nsv) <br>\nGlib::Object::Introspection-&gt;convert_flags_to_sv\n(package, flags_value) <br>\nGlib::Object::Introspection-&gt;convert_sv_to_flags\n(package, sv)</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">perl-Glib: Glib\n<br>\ngobject-introspection:\n&lt;http://live.gnome.org/GObjectIntrospection&gt; <br>\nlibffi: &lt;http://sourceware.org/libffi/&gt;</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Emmanuele Bassi\n&lt;ebassi at linux intel com&gt; <br>\nmuppet &lt;scott asofyet org&gt; <br>\nTorsten Sch&Atilde;&para;nfeld &lt;kaffeetisch at gmx\nde&gt;</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the terms of the Lesser General Public License (\n<small>LGPL</small> ). For more information, see\nhttp://www.fsf.org/licenses/lgpl.txt</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#ABSTRACT\">ABSTRACT</a>","<a href=\"#DESCRIPTION FOR LIBRARY USERS\">DESCRIPTION FOR LIBRARY USERS</a>","<a href=\"#DESCRIPTION FOR LIBRARY BINDING AUTHORS\">DESCRIPTION FOR LIBRARY BINDING AUTHORS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#LICENSE\">LICENSE</a>"],"level":3}