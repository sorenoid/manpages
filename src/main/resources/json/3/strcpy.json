{"name":"strcpy","body":"\n\n<h1 align=\"center\">STRCPY</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">strcpy, strncpy\n- copy a string</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;string.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*strcpy(char *</b><i>dest</i><b>, const char\n*</b><i>src</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*strncpy(char *</b><i>dest</i><b>, const char\n*</b><i>src</i><b>, size_t</b> <i>n</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strcpy</b>() function copies the string pointed to by\n<i>src</i>, including the terminating null byte ('\\0'), to\nthe buffer pointed to by <i>dest</i>. The strings may not\noverlap, and the destination string <i>dest</i> must be\nlarge enough to receive the copy. <i>Beware of buffer\noverruns!</i> (See BUGS.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strncpy</b>() function is similar, except that at most\n<i>n</i> bytes of <i>src</i> are copied. <b>Warning</b>: If\nthere is no null byte among the first <i>n</i> bytes of\n<i>src</i>, the string placed in <i>dest</i> will not be\nnull-terminated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the length\nof <i>src</i> is less than <i>n</i>, <b>strncpy</b>() writes\nadditional null bytes to <i>dest</i> to ensure that a total\nof <i>n</i> bytes are written.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A simple\nimplementation of <b>strncpy</b>() might be:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">char * <br>\nstrncpy(char *dest, const char *src, size_t n) <br>\n{ <br>\nsize_t i;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">for (i = 0; i\n&lt; n &amp;&amp; src[i] != '\\0'; i++) <br>\ndest[i] = src[i]; <br>\nfor ( ; i &lt; n; i++) <br>\ndest[i] = '\\0';</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">return dest;\n<br>\n}</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strcpy</b>() and <b>strncpy</b>() functions return a\npointer to the destination string <i>dest</i>.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3307441.png\" alt=\"Image grohtml-3307441.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, C89, C99, SVr4, 4.3BSD.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some\nprogrammers consider <b>strncpy</b>() to be inefficient and\nerror prone. If the programmer knows (i.e., includes code to\ntest!) that the size of <i>dest</i> is greater than the\nlength of <i>src</i>, then <b>strcpy</b>() can be used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One valid (and\nintended) use of <b>strncpy</b>() is to copy a C string to a\nfixed-length buffer while ensuring both that the buffer is\nnot overflowed and that unused bytes in the destination\nbuffer are zeroed out (perhaps to prevent information leaks\nif the buffer is to be written to media or transmitted to\nanother process via an interprocess communication\ntechnique).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there is no\nterminating null byte in the first <i>n</i> bytes of\n<i>src</i>, <b>strncpy</b>() produces an unterminated string\nin <i>dest</i>. If <i>buf</i> has length <i>buflen</i>, you\ncan force termination using something like the\nfollowing:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if (buflen &gt;\n0) { <br>\nstrncpy(buf, str, buflen - 1); <br>\nbuf[buflen - 1]= '\\0'; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(Of course, the\nabove technique ignores the fact that, if <i>src</i>\ncontains more than <i>buflen&nbsp;-&nbsp;1</i> bytes,\ninformation is lost in the copying to <i>dest</i>.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strlcpy()</b>\n<br>\nSome systems (the BSDs, Solaris, and others) provide the\nfollowing function:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">size_t\nstrlcpy(char *dest, const char *src, size_t size);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis similar to <b>strncpy</b>(), but it copies at most\n<i>size-1</i> bytes to <i>dest</i>, always adds a\nterminating null byte, and does not pad the destination with\n(further) null bytes. This function fixes some of the\nproblems of <b>strcpy</b>() and <b>strncpy</b>(), but the\ncaller must still handle the possibility of data loss if\n<i>size</i> is too small. The return value of the function\nis the length of <i>src</i>, which allows truncation to be\neasily detected: if the return value is greater than or\nequal to <i>size</i>, truncation occurred. If loss of data\nmatters, the caller <i>must</i> either check the arguments\nbefore the call, or test the function return value.\n<b>strlcpy</b>() is not present in glibc and is not\nstandardized by POSIX, but is available on Linux via the\n<i>libbsd</i> library.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\ndestination string of a <b>strcpy</b>() is not large enough,\nthen anything might happen. Overflowing fixed-length string\nbuffers is a favorite cracker technique for taking complete\ncontrol of the machine. Any time a program reads or copies\ndata into a buffer, the program first needs to check that\nthere&rsquo;s enough space. This may be unnecessary if you\ncan show that overflow is impossible, but be careful:\nprograms can get changed over time, in ways that may make\nthe impossible possible.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/bcopy\">bcopy(3)</a>,\n<a href=\"https://man.page/3/memccpy\">memccpy(3)</a>, <a href=\"https://man.page/3/memcpy\">memcpy(3)</a>, <a href=\"https://man.page/3/memmove\">memmove(3)</a>,\n<a href=\"https://man.page/3/stpcpy\">stpcpy(3)</a>, <a href=\"https://man.page/3/stpncpy\">stpncpy(3)</a>, <a href=\"https://man.page/3/strdup\">strdup(3)</a>,\n<a href=\"https://man.page/3/string\">string(3)</a>, <a href=\"https://man.page/3/wcscpy\">wcscpy(3)</a>, <a href=\"https://man.page/3/wcsncpy\">wcsncpy(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}