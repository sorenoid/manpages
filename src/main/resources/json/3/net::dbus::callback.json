{"name":"net::dbus::callback","description":"Net::DBus::Callback\n- a callback for receiving reactor events","body":"\n\n<h1 align=\"center\">Net::DBus::Callback</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Callback\n- a callback for receiving reactor events</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::DBus::Callback; <br>\n# Assume we have a 'terminal' object and its got a method\n<br>\n# to be invoked every time there is input on its terminal.\n<br>\n# <br>\n# To create a callback to invoke this method one might use\n<br>\nmy $cb = Net::DBus::Callback-&gt;new(object =&gt; $terminal,\n<br>\nmethod =&gt; &quot;handle_stdio&quot;); <br>\n# Whatever is monitoring the stdio channel, would then <br>\n# invoke the callback, perhaps passing in a parameter with\n<br>\n# some 'interesting' data, such as number of bytes available\n<br>\n$cb-&gt;invoke($nbytes) <br>\n#... which results in a call to <br>\n# $terminal-&gt;handle_stdio($nbytes)</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides a simple container for storing details about a\ncallback to be invoked at a later date. It is used when\nregistering to receive events from the Net::DBus::Reactor\nclass. <small>NB</small> use of this module in application\ncode is no longer necessary and it remains purely for\nbackwards compatibility. Instead you can simply pass a\nsubroutine code reference in any place where a callback is\ndesired.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $cb =\nNet::DBus::Callback-&gt;new(method =&gt; $name, [args =&gt;\n\\@args])</p>\n\n<p style=\"margin-left:17%;\">Creates a new callback object,\nfor invoking a plain old function. The &quot;method&quot;\nparameter should be the fully qualified function name to\ninvoke, including the package name. The optional\n&quot;args&quot; parameter is an array reference of\nparameters to be pass to the callback, in addition to those\npassed into the &quot;invoke&quot; method.</p>\n\n<p style=\"margin-left:11%;\">my $cb =\nNet::DBus::Callback-&gt;new(object =&gt; $object, method\n=&gt; $name, <br>\n[args =&gt; \\@args])</p>\n\n<p style=\"margin-left:17%;\">Creates a new callback object,\nfor invoking a method on an object. The &quot;method&quot;\nparameter should be the name of the method to invoke, while\nthe &quot;object&quot; parameter should be a blessed object\non which the method will be invoked. The optional\n&quot;args&quot; parameter is an array reference of\nparameters to be pass to the callback, in addition to those\npassed into the &quot;invoke&quot; method.</p>\n\n<p style=\"margin-left:11%;\">$cb-&gt;invoke(@args)</p>\n\n<p style=\"margin-left:17%;\">Invokes the callback. The\nargument list passed to the callback is a combination of the\narguments supplied in the callback constructor, followed by\nthe arguments supplied in the &quot;invoke&quot; method.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel P.\nBerrange.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2004-2011 Daniel P. Berrange</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Reactor</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}