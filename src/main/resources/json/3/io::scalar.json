{"name":"io::scalar","description":"IO::Scalar -\nIO:: interface for reading/writing a scalar","body":"\n\n<h1 align=\"center\">IO::Scalar</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">IO::Scalar -\nIO:: interface for reading/writing a scalar</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Perform I/O on\nstrings, using the basic <small>OO</small> interface...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use 5.005; <br>\nuse IO::Scalar; <br>\n$data = &quot;My message:\\n&quot;; <br>\n### Open a handle on a string, and append to it: <br>\n$SH = new IO::Scalar \\$data; <br>\n$SH-&gt;print(&quot;Hello&quot;); <br>\n$SH-&gt;print(&quot;, world!\\nBye now!\\n&quot;); <br>\nprint &quot;The string is now: &quot;, $data,\n&quot;\\n&quot;; <br>\n### Open a handle on a string, read it line-by-line, then\nclose it: <br>\n$SH = new IO::Scalar \\$data; <br>\nwhile (defined($_ = $SH-&gt;getline)) { <br>\nprint &quot;Got line: $_&quot;; <br>\n} <br>\n$SH-&gt;close; <br>\n### Open a handle on a string, and slurp in all the lines:\n<br>\n$SH = new IO::Scalar \\$data; <br>\nprint &quot;All lines:\\n&quot;, $SH-&gt;getlines; <br>\n### Get the current position (either of two ways): <br>\n$pos = $SH-&gt;getpos; <br>\n$offset = $SH-&gt;tell; <br>\n### Set the current position (either of two ways): <br>\n$SH-&gt;setpos($pos); <br>\n$SH-&gt;seek($offset, 0); <br>\n### Open an anonymous temporary scalar: <br>\n$SH = new IO::Scalar; <br>\n$SH-&gt;print(&quot;Hi there!&quot;); <br>\nprint &quot;I printed: &quot;, ${$SH-&gt;sref},\n&quot;\\n&quot;; ### get at value</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Don&rsquo;t\nlike <small>OO</small> for your I/O? No problem. Thanks to\nthe magic of an invisible <b>tie()</b>, the following now\nworks out of the box, just as it does with IO::Handle:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use 5.005; <br>\nuse IO::Scalar; <br>\n$data = &quot;My message:\\n&quot;; <br>\n### Open a handle on a string, and append to it: <br>\n$SH = new IO::Scalar \\$data; <br>\nprint $SH &quot;Hello&quot;; <br>\nprint $SH &quot;, world!\\nBye now!\\n&quot;; <br>\nprint &quot;The string is now: &quot;, $data,\n&quot;\\n&quot;; <br>\n### Open a handle on a string, read it line-by-line, then\nclose it: <br>\n$SH = new IO::Scalar \\$data; <br>\nwhile (&lt;$SH&gt;) { <br>\nprint &quot;Got line: $_&quot;; <br>\n} <br>\nclose $SH; <br>\n### Open a handle on a string, and slurp in all the lines:\n<br>\n$SH = new IO::Scalar \\$data; <br>\nprint &quot;All lines:\\n&quot;, &lt;$SH&gt;; <br>\n### Get the current position (WARNING: requires 5.6): <br>\n$offset = tell $SH; <br>\n### Set the current position (WARNING: requires 5.6): <br>\nseek $SH, $offset, 0; <br>\n### Open an anonymous temporary scalar: <br>\n$SH = new IO::Scalar; <br>\nprint $SH &quot;Hi there!&quot;; <br>\nprint &quot;I printed: &quot;, ${$SH-&gt;sref},\n&quot;\\n&quot;; ### get at value</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">And for you\nfolks with 1.x code out there: the old <b>tie()</b> style\nstill works, though this is <i>unnecessary and\ndeprecated</i>:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use IO::Scalar;\n<br>\n### Writing to a scalar... <br>\nmy $s; <br>\ntie *OUT, 'IO::Scalar', \\$s; <br>\nprint OUT &quot;line 1\\nline 2\\n&quot;, &quot;line\n3\\n&quot;; <br>\nprint &quot;String is now: $s\\n&quot; <br>\n### Reading and writing an anonymous scalar... <br>\ntie *OUT, 'IO::Scalar'; <br>\nprint OUT &quot;line 1\\nline 2\\n&quot;, &quot;line\n3\\n&quot;; <br>\ntied(OUT)-&gt;seek(0,0); <br>\nwhile (&lt;OUT&gt;) { <br>\nprint &quot;Got line: &quot;, $_; <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Stringification\nworks, too!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $SH = new\nIO::Scalar \\$data; <br>\nprint $SH &quot;Hello, &quot;; <br>\nprint $SH &quot;world!&quot;; <br>\nprint &quot;I printed: $SH\\n&quot;;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class is\npart of the IO::Stringy distribution; see IO::Stringy for\nchange log and general information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The IO::Scalar\nclass implements objects which behave just like IO::Handle\n(or FileHandle) objects, except that you may use them to\nwrite to (or read from) scalars. These handles are\nautomatically tiehandle&rsquo;d (though please see &quot;\n<small>WARNINGS&quot;</small> for information relevant to\nyour Perl version).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Basically,\nthis:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $s; <br>\n$SH = new IO::Scalar \\$s; <br>\n$SH-&gt;print(&quot;Hel&quot;, &quot;lo, &quot;); ### OO\nstyle <br>\n$SH-&gt;print(&quot;world!\\n&quot;); ### ditto</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $s; <br>\n$SH = tie *OUT, 'IO::Scalar', \\$s; <br>\nprint OUT &quot;Hel&quot;, &quot;lo, &quot;; ### non-OO\nstyle <br>\nprint OUT &quot;world!\\n&quot;; ### ditto</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Causes $s to be\nset to:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Hello,\nworld!\\n&quot;</p>\n\n<h2>PUBLIC INTERFACE\n<a name=\"PUBLIC INTERFACE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Construction</b>\n<br>\nnew [ <small>ARGS...</small> ]</p>\n\n<p style=\"margin-left:17%;\"><i>Class method.</i> Return a\nnew, unattached scalar handle. If any arguments are given,\nthey&rsquo;re sent to <b>open()</b>.</p>\n\n<p style=\"margin-left:11%;\">open [ <small>SCALARREF</small>\n]</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Open\nthe scalar handle on a new scalar, pointed to by\n<small>SCALARREF.</small> If no <small>SCALARREF</small> is\ngiven, a &quot;private&quot; scalar is created to hold the\nfile data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nself object on success, undefined on error.</p>\n\n<p style=\"margin-left:11%;\">opened</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Is the\nscalar handle opened on something?</p>\n\n<p style=\"margin-left:11%;\">close</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i>\nDisassociate the scalar handle from its underlying scalar.\nDone automatically on destroy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Input and\noutput</b> <br>\nflush</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> No-op,\nprovided for <small>OO</small> compatibility.</p>\n\n<p style=\"margin-left:11%;\">fileno</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> No-op,\nreturns undef</p>\n\n<p style=\"margin-left:11%;\">getc</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\nthe next character, or undef if none remain.</p>\n\n<p style=\"margin-left:11%;\">getline</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\nthe next line, or undef on end of string. Can safely be\ncalled in an array context. Currently, lines are delimited\nby &quot;\\n&quot;.</p>\n\n<p style=\"margin-left:11%;\">getlines</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Get all\nremaining lines. It will <b>croak()</b> if accidentally\ncalled in a scalar context.</p>\n\n<p style=\"margin-left:11%;\">print\n<small>ARGS...</small></p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Print\n<small>ARGS</small> to the underlying scalar.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Warning:</b>\nthis continues to always cause a seek to the end of the\nstring, but if you perform <b>seek()</b>s and\n<b>tell()</b>s, it is still safer to explicitly seek-to-end\nbefore subsequent <b>print()</b>s.</p>\n\n<p style=\"margin-left:11%;\">read <small>BUF,\nNBYTES,</small> [ <small>OFFSET</small> ]</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Read\nsome bytes from the scalar. Returns the number of bytes\nactually read, 0 on end-of-file, undef on error.</p>\n\n<p style=\"margin-left:11%;\">write <small>BUF,\nNBYTES,</small> [ <small>OFFSET</small> ]</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Write\nsome bytes to the scalar.</p>\n\n<p style=\"margin-left:11%;\">sysread <small>BUF,\nLEN,</small> [ <small>OFFSET</small> ]</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Read\nsome bytes from the scalar. Returns the number of bytes\nactually read, 0 on end-of-file, undef on error.</p>\n\n<p style=\"margin-left:11%;\">syswrite <small>BUF,\nNBYTES,</small> [ <small>OFFSET</small> ]</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Write\nsome bytes to the scalar.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Seeking/telling\nand other attributes</b> <br>\nautoflush</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> No-op,\nprovided for <small>OO</small> compatibility.</p>\n\n<p style=\"margin-left:11%;\">binmode</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> No-op,\nprovided for <small>OO</small> compatibility.</p>\n\n<p style=\"margin-left:11%;\">clearerr</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Clear\nthe error and <small>EOF</small> flags. A no-op.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>eof</p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p><i>Instance method.</i> Are we at end of file?</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">seek <small>OFFSET,\nWHENCE</small></p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Seek to\na given position in the stream.</p>\n\n<p style=\"margin-left:11%;\">sysseek <small>OFFSET,\nWHENCE</small></p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i>\nIdentical to &quot;seek OFFSET, WHENCE&quot;,\n<i>q.v.</i></p>\n\n<p style=\"margin-left:11%;\">tell</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\nthe current position in the stream, as a numeric offset.</p>\n\n<p style=\"margin-left:11%;\">setpos <small>POS</small></p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Set the\ncurrent position, using the opaque value returned by\n&quot;getpos()&quot;.</p>\n\n<p style=\"margin-left:11%;\">getpos</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\nthe current position in the string, as an opaque object.</p>\n\n<p style=\"margin-left:11%;\">sref</p>\n\n<p style=\"margin-left:17%;\"><i>Instance method.</i> Return\na reference to the underlying scalar.</p>\n\n<h2>WARNINGS\n<a name=\"WARNINGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Perl&rsquo;s\n<small>TIEHANDLE</small> spec was incomplete prior to\n5.005_57; it was missing support for &quot;seek()&quot;,\n&quot;tell()&quot;, and &quot;eof()&quot;. Attempting to use\nthese functions with an IO::Scalar will not work prior to\n5.005_57. IO::Scalar will not have the relevant methods\ninvoked; and even worse, this kind of bug can lie dormant\nfor a while. If you turn warnings on (via $^W or &quot;perl\n-w&quot;), and you see something like this...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">attempt to seek\non unopened filehandle</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">...then you are\nprobably trying to use one of these functions on an\nIO::Scalar with an old Perl. The remedy is to simply use the\n<small>OO</small> version; e.g.:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$SH-&gt;seek(0,0);\n### GOOD: will work on any 5.005 <br>\nseek($SH,0,0); ### WARNING: will only work on 5.005_57 and\nbeyond</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$Id:\nScalar.pm,v 1.6 2005/02/10 21:21:53 dfs Exp $</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Primary\nMaintainer</b> <br>\nDianne Skoll (<i>dfs@roaringpenguin.com</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Principal\nauthor</b> <br>\nEryq (<i>eryq@zeegee.com</i>). President, ZeeGee Software\nInc (<i>http://www.zeegee.com</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Other\ncontributors</b> <br>\nThe full set of contributors always includes the folks\nmentioned in &quot; <small>CHANGE LOG&quot;</small> in\nIO::Stringy. But just the same, special thanks to the\nfollowing individuals for their invaluable contributions (if\nI&rsquo;ve forgotten or misspelled your name, please email\nme!):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Andy\nGlew,</i> for contributing &quot;getc()&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Brandon\nBrowning,</i> for suggesting &quot;opened()&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>David\nRichter,</i> for finding and fixing the bug in\n&quot;PRINTF()&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Eric L.\nBrine,</i> for his offset-using <b>read()</b> and\n<b>write()</b> implementations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Richard\nJones,</i> for his patches to massively improve the\nperformance of &quot;getline()&quot; and add\n&quot;sysread&quot; and &quot;syswrite&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>B. K. Oxley\n(binkley),</i> for stringification and inheritance\nimprovements, and sundry good ideas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Doug\nWilson,</i> for the IO::Handle inheritance and automatic\ntie-ing.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">IO::String,\nwhich is quite similar but which was designed more-recently\nand with an IO::Handle-like interface in mind, so you could\nmix <small>OO-</small> and native-filehandle usage without\nusing <b>tied()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note:</i> as\nof version 2.x, these classes all work like their IO::Handle\ncounterparts, so we have comparable functionality to\nIO::String.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#PUBLIC INTERFACE\">PUBLIC INTERFACE</a>","<a href=\"#WARNINGS\">WARNINGS</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}