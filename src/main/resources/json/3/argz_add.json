{"name":"argz_add","description":"argz_add(3) - linux command line manual","body":"\n\n<h1 align=\"center\">ARGZ_ADD</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">argz_add,\nargz_add_sep, argz_append, argz_count, argz_create,\nargz_create_sep, argz_delete, argz_extract, argz_insert,\nargz_next, argz_replace, argz_stringify - functions to\nhandle an argz list</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;argz.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>error_t\nargz_add(char **</b><i>argz</i><b>, size_t\n*</b><i>argz_len</i><b>, const char\n*</b><i>str</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>error_t\nargz_add_sep(char **</b><i>argz</i><b>, size_t\n*</b><i>argz_len</i><b>, <br>\nconst char *</b><i>str</i><b>, int</b>\n<i>delim</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>error_t\nargz_append(char **</b><i>argz</i><b>, size_t\n*</b><i>argz_len</i><b>, <br>\nconst char *</b><i>buf</i><b>, size_t</b>\n<i>buf_len</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>size_t\nargz_count(const char *</b><i>argz</i><b>, size_t</b>\n<i>argz_len</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>error_t\nargz_create(char * const</b> <i>argv</i><b>[], char\n**</b><i>argz</i><b>, <br>\nsize_t *</b><i>argz_len</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>error_t\nargz_create_sep(const char *</b><i>str</i><b>, int</b>\n<i>sep</i><b>, char **</b><i>argz</i><b>, <br>\nsize_t *</b><i>argz_len</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nargz_delete(char **</b><i>argz</i><b>, size_t\n*</b><i>argz_len</i><b>, char *</b><i>entry</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nargz_extract(const char *</b><i>argz</i><b>, size_t</b>\n<i>argz_len</i><b>, char **</b><i>argv</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>error_t\nargz_insert(char **</b><i>argz</i><b>, size_t\n*</b><i>argz_len</i><b>, char *</b><i>before</i><b>, <br>\nconst char *</b><i>entry</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*argz_next(const char *</b><i>argz</i><b>, size_t</b>\n<i>argz_len</i><b>, const char\n*</b><i>entry</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>error_t\nargz_replace(char **</b><i>argz</i><b>, size_t\n*</b><i>argz_len</i><b>, const char *</b><i>str</i><b>, <br>\nconst char *</b><i>with</i><b>, unsigned int\n*</b><i>replace_count</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nargz_stringify(char *</b><i>argz</i><b>, size_t</b>\n<i>len</i><b>, int</b> <i>sep</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare glibc-specific.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An argz vector\nis a pointer to a character buffer together with a length.\nThe intended interpretation of the character buffer is an\narray of strings, where the strings are separated by null\nbytes ('\\0'). If the length is nonzero, the last byte of the\nbuffer must be a null byte.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare for handling argz vectors. The pair (NULL,0) is an argz\nvector, and, conversely, argz vectors of length 0 must have\nnull pointer. Allocation of nonempty argz vectors is done\nusing <a href=\"https://man.page/3/malloc\">malloc(3)</a>, so that <a href=\"https://man.page/3/free\">free(3)</a> can be used\nto dispose of them again.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_add</b>()\nadds the string <i>str</i> at the end of the array\n<i>*argz</i>, and updates <i>*argz</i> and\n<i>*argz_len</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_add_sep</b>()\nis similar, but splits the string <i>str</i> into substrings\nseparated by the delimiter <i>delim</i>. For example, one\nmight use this on a UNIX search path with delimiter ':'.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_append</b>()\nappends the argz vector (<i>buf</i>,&nbsp;<i>buf_len</i>)\nafter (<i>*argz</i>,&nbsp;<i>*argz_len</i>) and updates\n<i>*argz</i> and <i>*argz_len</i>. (Thus, <i>*argz_len</i>\nwill be increased by <i>buf_len</i>.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_count</b>()\ncounts the number of strings, that is, the number of null\nbytes ('\\0'), in (<i>argz</i>,&nbsp;<i>argz_len</i>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_create</b>()\nconverts a UNIX-style argument vector <i>argv</i>,\nterminated by <i>(char&nbsp;*)&nbsp;0</i>, into an argz\nvector (<i>*argz</i>,&nbsp;<i>*argz_len</i>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_create_sep</b>()\nconverts the null-terminated string <i>str</i> into an argz\nvector (<i>*argz</i>,&nbsp;<i>*argz_len</i>) by breaking it\nup at every occurrence of the separator <i>sep</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_delete</b>()\nremoves the substring pointed to by <i>entry</i> from the\nargz vector (<i>*argz</i>,&nbsp;<i>*argz_len</i>) and\nupdates <i>*argz</i> and <i>*argz_len</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_extract</b>()\nis the opposite of <b>argz_create</b>(). It takes the argz\nvector (<i>argz</i>,&nbsp;<i>argz_len</i>) and fills the\narray starting at <i>argv</i> with pointers to the\nsubstrings, and a final NULL, making a UNIX-style argv\nvector. The array <i>argv</i> must have room for\n<i>argz_count</i>(<i>argz</i>, <i>argz_len</i>) + 1\npointers.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_insert</b>()\nis the opposite of <b>argz_delete</b>(). It inserts the\nargument <i>entry</i> at position <i>before</i> into the\nargz vector (<i>*argz</i>,&nbsp;<i>*argz_len</i>) and\nupdates <i>*argz</i> and <i>*argz_len</i>. If <i>before</i>\nis NULL, then <i>entry</i> will inserted at the end.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_next</b>()\nis a function to step through the argz vector. If\n<i>entry</i> is NULL, the first entry is returned.\nOtherwise, the entry following is returned. It returns NULL\nif there is no following entry.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_replace</b>()\nreplaces each occurrence of <i>str</i> with <i>with</i>,\nreallocating argz as necessary. If <i>replace_count</i> is\nnon-NULL, <i>*replace_count</i> will be incremented by the\nnumber of replacements.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>argz_stringify</b>()\nis the opposite of <b>argz_create_sep</b>(). It transforms\nthe argz vector into a normal string by replacing all null\nbytes ('\\0') except the last by <i>sep</i>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All argz\nfunctions that do memory allocation have a return type of\n<i>error_t</i> (an integer type), and return 0 for success,\nand <b>ENOMEM</b> if an allocation error occurs.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3298741.png\" alt=\"Image grohtml-3298741.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare a GNU extension.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Argz vectors\nwithout a terminating null byte may lead to Segmentation\nFaults.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/envz_add\">envz_add(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}