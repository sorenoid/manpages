{"name":"drand48","description":"drand48,\nerand48, lrand48, nrand48, mrand48, jrand48, srand48,\nseed48, lcong48 - generate uniformly distributed\npseudo-random numbers","body":"\n\n<h1 align=\"center\">DRAND48</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">drand48,\nerand48, lrand48, nrand48, mrand48, jrand48, srand48,\nseed48, lcong48 - generate uniformly distributed\npseudo-random numbers</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdlib.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>double\ndrand48(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>double\nerand48(unsigned short</b> <i>xsubi</i><b>[3]);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nlrand48(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nnrand48(unsigned short</b> <i>xsubi</i><b>[3]);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nmrand48(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\njrand48(unsigned short</b> <i>xsubi</i><b>[3]);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nsrand48(long</b> <i>seedval</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned\nshort *seed48(unsigned short</b>\n<i>seed16v</i><b>[3]);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nlcong48(unsigned short</b> <i>param</i><b>[7]);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All functions\nshown above: _XOPEN_SOURCE <br>\n|| /* Glibc since 2.19: */ _DEFAULT_SOURCE <br>\n|| /* Glibc versions &lt;= 2.19: */ _SVID_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\ngenerate pseudo-random numbers using the linear congruential\nalgorithm and 48-bit integer arithmetic.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>drand48</b>() and <b>erand48</b>() functions return\nnonnegative double-precision floating-point values uniformly\ndistributed over the interval [0.0,&nbsp;1.0).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>lrand48</b>() and <b>nrand48</b>() functions return\nnonnegative long integers uniformly distributed over the\ninterval [0,&nbsp;2^31).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mrand48</b>() and <b>jrand48</b>() functions return\nsigned long integers uniformly distributed over the interval\n[-2^31,&nbsp;2^31).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>srand48</b>(), <b>seed48</b>(), and <b>lcong48</b>()\nfunctions are initialization functions, one of which should\nbe called before using <b>drand48</b>(), <b>lrand48</b>() or\n<b>mrand48</b>(). The functions <b>erand48</b>(),\n<b>nrand48</b>(), and <b>jrand48</b>() do not require an\ninitialization function to be called first.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All the\nfunctions work by generating a sequence of 48-bit integers,\n<i>Xi</i>, according to the linear congruential formula:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Xn+1 = (aXn\n+ c) mod m, where n &gt;= 0</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The parameter\n<i>m</i> = 2^48, hence 48-bit integer arithmetic is\nperformed. Unless <b>lcong48</b>() is called, <i>a</i> and\n<i>c</i> are given by:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>a =\n0x5DEECE66D <br>\nc = 0xB</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value\nreturned by any of the functions <b>drand48</b>(),\n<b>erand48</b>(), <b>lrand48</b>(), <b>nrand48</b>(),\n<b>mrand48</b>() or <b>jrand48</b>() is computed by first\ngenerating the next 48-bit <i>Xi</i> in the sequence. Then\nthe appropriate number of bits, according to the type of\ndata item to be returned, is copied from the high-order bits\nof <i>Xi</i> and transformed into the returned value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>drand48</b>(), <b>lrand48</b>(), and <b>mrand48</b>()\nstore the last 48-bit <i>Xi</i> generated in an internal\nbuffer. The functions <b>erand48</b>(), <b>nrand48</b>(),\nand <b>jrand48</b>() require the calling program to provide\nstorage for the successive <i>Xi</i> values in the array\nargument <i>xsubi</i>. The functions are initialized by\nplacing the initial value of <i>Xi</i> into the array before\ncalling the function for the first time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The initializer\nfunction <b>srand48</b>() sets the high order 32-bits of\n<i>Xi</i> to the argument <i>seedval</i>. The low order\n16-bits are set to the arbitrary value 0x330E.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The initializer\nfunction <b>seed48</b>() sets the value of <i>Xi</i> to the\n48-bit value specified in the array argument <i>seed16v</i>.\nThe previous value of <i>Xi</i> is copied into an internal\nbuffer and a pointer to this buffer is returned by\n<b>seed48</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ninitialization function <b>lcong48</b>() allows the user to\nspecify initial values for <i>Xi</i>, <i>a</i>, and\n<i>c</i>. Array argument elements <i>param[0-2]</i> specify\n<i>Xi</i>, <i>param[3-5]</i> specify <i>a</i>, and\n<i>param[6]</i> specifies <i>c</i>. After <b>lcong48</b>()\nhas been called, a subsequent call to either\n<b>srand48</b>() or <b>seed48</b>() will restore the\nstandard values of <i>a</i> and <i>c</i>.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3308011.png\" alt=\"Image grohtml-3308011.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above\nfunctions record global state information for the random\nnumber generator, so they are not thread-safe.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/rand\">rand(3)</a>,\n<a href=\"https://man.page/3/random\">random(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}