{"name":"net::dbus::error","body":"\n\n<h1 align=\"center\">Net::DBus::Error</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Error\n- Error details for remote method invocation</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">package\nMusic::Player::UnknownFormat; <br>\nuse base qw(Net::DBus::Error); <br>\n# Define an error type for unknown track encoding type <br>\n# for a music player service <br>\nsub new { <br>\nmy $proto = shift; <br>\nmy $class = ref($proto) || $proto; <br>\nmy $self = $class-&gt;SUPER::new(name =&gt;\n&quot;org.example.music.UnknownFormat&quot;, <br>\nmessage =&gt; &quot;Unknown track encoding format&quot;);\n<br>\n} <br>\npackage Music::Player::Engine; <br>\n...snip... <br>\n# Play either mp3 or ogg music tracks, otherwise <br>\n# thrown an error <br>\nsub play { <br>\nmy $self = shift; <br>\nmy $url = shift; <br>\nif ($url =~ /\\.(mp3|ogg)$/) { <br>\n...play the track <br>\n} else { <br>\ndie Music::Player::UnknownFormat-&gt;new(); <br>\n} <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This objects\nprovides for strongly typed error handling. Normally a\nservice would simply call</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">die &quot;some\nmessage text&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When returning\nthe error condition to the calling DBus client, the message\nis associated with a generic error code or\n&quot;org.freedesktop.DBus.Failed&quot;. While this suffices\nfor many applications, occasionally it is desirable to be\nable to catch and handle specific error conditions. For such\nscenarios the service should create subclasses of the\n&quot;Net::DBus::Error&quot; object providing in a custom\nerror name. This error name is then sent back to the client\ninstead of the genreic\n&quot;org.freedesktop.DBus.Failed&quot; code.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $error =\nNet::DBus::Error-&gt;new(name =&gt; $error_name, message\n=&gt; <br>\n$description);</p>\n\n<p style=\"margin-left:17%;\">Creates a new error object\nwhose name is given by the &quot;name&quot; parameter, and\nlong descriptive text is provided by the &quot;message&quot;\nparameter. The &quot;name&quot; parameter has certain\nformatting rules which must be adhered to. It must only\ncontain the letters &rsquo;a&rsquo;-&rsquo;Z&rsquo;,\n&rsquo;0&rsquo;-&rsquo;9&rsquo;, &rsquo;-&rsquo;,\n&rsquo;_&rsquo; and &rsquo;.&rsquo;. There must be at least\ntwo components separated by a &rsquo;.&rsquo;, For example a\nvalid name is\n&rsquo;org.example.Music.UnknownFormat&rsquo;.</p>\n\n<p style=\"margin-left:11%;\">$error-&gt;name</p>\n\n<p style=\"margin-left:17%;\">Returns the DBus error name\nassociated with the object.</p>\n\n<p style=\"margin-left:11%;\">$error-&gt;message</p>\n\n<p style=\"margin-left:17%;\">Returns the descriptive\ntext/message associated with the error condition.</p>\n\n<p style=\"margin-left:11%;\">$error-&gt;stringify</p>\n\n<p style=\"margin-left:17%;\">Formats the error as a string\nin a manner suitable for printing out / logging / displaying\nto the user, etc.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel P.\nBerrange</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2005-2011 Daniel P. Berrange</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus,\nNet::DBus::Object</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}