{"name":"http::response","body":"\n\n<h1 align=\"center\">HTTP::Response</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Response\n- HTTP style response message</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.36</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Response\nobjects are returned by the <b>request()</b> method of the\n&quot;LWP::UserAgent&quot;:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># ... <br>\n$response = $ua-&gt;request($request); <br>\nif ($response-&gt;is_success) { <br>\nprint $response-&gt;decoded_content; <br>\n} <br>\nelse { <br>\nprint STDERR $response-&gt;status_line, &quot;\\n&quot;; <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;HTTP::Response&quot; class encapsulates\n<small>HTTP</small> style responses. A response consists of\na response line, some headers, and a content body. Note that\nthe <small>LWP</small> library uses <small>HTTP</small>\nstyle responses even for non-HTTP protocol schemes.\nInstances of this class are usually created and returned by\nthe <b>request()</b> method of an &quot;LWP::UserAgent&quot;\nobject.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;HTTP::Response&quot;\nis a subclass of &quot;HTTP::Message&quot; and therefore\ninherits its methods. The following additional methods are\navailable: <br>\n$r = HTTP::Response-&gt;new( $code ) <br>\n$r = HTTP::Response-&gt;new( $code, $msg ) <br>\n$r = HTTP::Response-&gt;new( $code, $msg, $header ) <br>\n$r = HTTP::Response-&gt;new( $code, $msg, $header, $content\n)</p>\n\n<p style=\"margin-left:17%;\">Constructs a new\n&quot;HTTP::Response&quot; object describing a response with\nresponse code $code and optional message $msg. The optional\n$header argument should be a reference to an\n&quot;HTTP::Headers&quot; object or a plain array reference\nof key/value pairs. The optional $content argument should be\na string of bytes. The meanings of these arguments are\ndescribed below.</p>\n\n<p style=\"margin-left:11%;\">$r = HTTP::Response-&gt;parse(\n$str )</p>\n\n<p style=\"margin-left:17%;\">This constructs a new response\nobject by parsing the given string.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;code <br>\n$r-&gt;code( $code )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set the\ncode attribute. The code is a 3 digit number that encode the\noverall outcome of an <small>HTTP</small> response. The\n&quot;HTTP::Status&quot; module provide constants that\nprovide mnemonic names for the code attribute.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;message <br>\n$r-&gt;message( $message )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set the\nmessage attribute. The message is a short human readable\nsingle line string that explains the response code.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;header( $field ) <br>\n$r-&gt;header( $field =&gt; $value )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set header\nvalues and it is inherited from &quot;HTTP::Headers&quot;\nvia &quot;HTTP::Message&quot;. See HTTP::Headers for details\nand other similar methods that can be used to access the\nheaders.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;content <br>\n$r-&gt;content( $bytes )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set the raw\ncontent and it is inherited from the\n&quot;HTTP::Message&quot; base class. See HTTP::Message for\ndetails and other methods that can be used to access the\ncontent.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;decoded_content(\n%options )</p>\n\n<p style=\"margin-left:17%;\">This will return the content\nafter any &quot;Content-Encoding&quot; and charsets have\nbeen decoded. See HTTP::Message for details.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;request <br>\n$r-&gt;request( $request )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set the\nrequest attribute. The request attribute is a reference to\nthe request that caused this response. It does not have to\nbe the same request passed to the $ua-&gt;<b>request()</b>\nmethod, because there might have been redirects and\nauthorization retries in between.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;previous <br>\n$r-&gt;previous( $response )</p>\n\n<p style=\"margin-left:17%;\">This is used to get/set the\nprevious attribute. The previous attribute is used to link\ntogether chains of responses. You get chains of responses if\nthe first response is redirect or unauthorized. The value is\n&quot;undef&quot; if this is the first response in a\nchain.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\nmethod $r-&gt;redirects is provided as a more convenient way\nto access the response chain.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;status_line</p>\n\n<p style=\"margin-left:17%;\">Returns the string\n&quot;&lt;code&gt; &lt;message&gt;&quot;. If the message\nattribute is not set then the official name of &lt;code&gt;\n(see HTTP::Status) is substituted.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;base</p>\n\n<p style=\"margin-left:17%;\">Returns the base\n<small>URI</small> for this response. The return value will\nbe a reference to a <small>URI</small> object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The base\n<small>URI</small> is obtained from one the following\nsources (in priority order):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>Embedded in the document content, for instance &lt;\n<small>BASE</small> HREF=&quot;...&quot;&gt; in\n<small>HTML</small> documents.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>A &quot;Content-Base:&quot; or a\n&quot;Content-Location:&quot; header in the response.</p></td></tr>\n</table>\n\n<p style=\"margin-left:23%; margin-top: 1em\">For backwards\ncompatibility with older <small>HTTP</small> implementations\nwe will also look for the &quot;Base:&quot; header.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">3.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">The <small>URI</small> used to\nrequest this response. This might not be the original\n<small>URI</small> that was passed to\n$ua-&gt;<b>request()</b> method, because we might have\nreceived some redirect responses first.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If none of\nthese sources provide an absolute <small>URI,</small> undef\nis returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When the\n<small>LWP</small> protocol modules produce the\nHTTP::Response object, then any base <small>URI</small>\nembedded in the document (step 1) will already have\ninitialized the &quot;Content-Base:&quot; header. (See\n&quot;parse_head&quot; in LWP::UserAgent). This means that\nthis method only performs the last 2 steps (the content is\nnot always available either).</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;filename</p>\n\n<p style=\"margin-left:17%;\">Returns a filename for this\nresponse. Note that doing sanity checks on the returned\nfilename (eg. removing characters that cannot be used on the\ntarget filesystem where the filename would be used, and\nlaundering it for security purposes) are the caller&rsquo;s\nresponsibility; the only related thing done by this method\nis that it makes a simple attempt to return a plain filename\nwith no preceding path segments.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The filename is\nobtained from one the following sources (in priority\norder):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>A &quot;Content-Disposition:&quot; header in the\nresponse. Proper decoding of <small>RFC 2047</small> encoded\nfilenames requires the &quot;MIME::QuotedPrint&quot; (for\n&quot;Q&quot; encoding), &quot;MIME::Base64&quot; (for\n&quot;B&quot; encoding), and &quot;Encode&quot; modules.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>A &quot;Content-Location:&quot; header in the\nresponse.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p>The <small>URI</small> used to request this response.\nThis might not be the original <small>URI</small> that was\npassed to $ua-&gt;<b>request()</b> method, because we might\nhave received some redirect responses first.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a filename\ncannot be derived from any of these sources, undef is\nreturned.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;as_string <br>\n$r-&gt;as_string( $eol )</p>\n\n<p style=\"margin-left:17%;\">Returns a textual\nrepresentation of the response.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;is_info <br>\n$r-&gt;is_success <br>\n$r-&gt;is_redirect <br>\n$r-&gt;is_error <br>\n$r-&gt;is_client_error <br>\n$r-&gt;is_server_error</p>\n\n<p style=\"margin-left:17%;\">These methods indicate if the\nresponse was informational, successful, a redirection, or an\nerror. See HTTP::Status for the meaning of these.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;error_as_HTML</p>\n\n<p style=\"margin-left:17%;\">Returns a string containing a\ncomplete <small>HTML</small> document indicating what error\noccurred. This method should only be called when\n$r-&gt;is_error is <small>TRUE.</small></p>\n\n<p style=\"margin-left:11%;\">$r-&gt;redirects</p>\n\n<p style=\"margin-left:17%;\">Returns the list of redirect\nresponses that lead up to this response by following the\n$r-&gt;previous chain. The list order is oldest first.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In scalar\ncontext return the number of redirect responses leading up\nto this one.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;current_age</p>\n\n<p style=\"margin-left:17%;\">Calculates the &quot;current\nage&quot; of the response as specified by <small>RFC\n2616</small> section 13.2.3. The age of a response is the\ntime since it was sent by the origin server. The returned\nvalue is a number representing the age in seconds.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;freshness_lifetime( %opt\n)</p>\n\n<p style=\"margin-left:17%;\">Calculates the &quot;freshness\nlifetime&quot; of the response as specified by <small>RFC\n2616</small> section 13.2.4. The &quot;freshness\nlifetime&quot; is the length of time between the generation\nof a response and its expiration time. The returned value is\nthe number of seconds until expiry.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the response\ndoes not contain an &quot;Expires&quot; or a\n&quot;Cache-Control&quot; header, then this function will\napply some simple heuristic based on the\n&quot;Last-Modified&quot; header to determine a suitable\nlifetime. The following options might be passed to control\nthe heuristics: <br>\nheuristic_expiry =&gt; $bool</p>\n\n<p style=\"margin-left:23%;\">If passed as a\n<small>FALSE</small> value, don&rsquo;t apply heuristics and\njust return &quot;undef&quot; when &quot;Expires&quot; or\n&quot;Cache-Control&quot; is lacking.</p>\n\n<p style=\"margin-left:17%;\">h_lastmod_fraction =&gt;\n$num</p>\n\n<p style=\"margin-left:23%;\">This number represent the\nfraction of the difference since the\n&quot;Last-Modified&quot; timestamp to make the expiry time.\nThe default is 0.10, the suggested typical setting of 10% in\n<small>RFC 2616.</small></p>\n\n<p style=\"margin-left:17%;\">h_min =&gt; $sec</p>\n\n<p style=\"margin-left:23%;\">This is the lower limit of the\nheuristic expiry age to use. The default is 60 (1\nminute).</p>\n\n<p style=\"margin-left:17%;\">h_max =&gt; $sec</p>\n\n<p style=\"margin-left:23%;\">This is the upper limit of the\nheuristic expiry age to use. The default is 86400 (24\nhours).</p>\n\n<p style=\"margin-left:17%;\">h_default =&gt; $sec</p>\n\n<p style=\"margin-left:23%;\">This is the expiry age to use\nwhen nothing else applies. The default is 3600 (1 hour) or\n&quot;h_min&quot; if greater.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;is_fresh( %opt )</p>\n\n<p style=\"margin-left:17%;\">Returns <small>TRUE</small> if\nthe response is fresh, based on the values of\n<b>freshness_lifetime()</b> and <b>current_age()</b>. If the\nresponse is no longer fresh, then it has to be re-fetched or\nre-validated by the origin server.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options might\nbe passed to control expiry heuristics, see the description\nof <b>freshness_lifetime()</b>.</p>\n\n<p style=\"margin-left:11%;\">$r-&gt;fresh_until( %opt )</p>\n\n<p style=\"margin-left:17%;\">Returns the time (seconds since\nepoch) when this entity is no longer fresh.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Options might\nbe passed to control expiry heuristics, see the description\nof <b>freshness_lifetime()</b>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Headers,\nHTTP::Message, HTTP::Status, HTTP::Request</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1994 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}