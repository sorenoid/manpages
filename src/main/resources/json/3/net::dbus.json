{"name":"net::dbus","description":"Net::DBus - Perl extension for the DBus message system","body":"\n\n<h1 align=\"center\">Net::DBus</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus -\nPerl extension for the DBus message system</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#######\nAttaching to the bus ########### <br>\nuse Net::DBus; <br>\n# Find the most appropriate bus <br>\nmy $bus = Net::DBus-&gt;find; <br>\n# ... or explicitly go for the session bus <br>\nmy $bus = Net::DBus-&gt;session; <br>\n# .... or explicitly go for the system bus <br>\nmy $bus = Net::DBus-&gt;system <br>\n######## Accessing remote services ######### <br>\n# Get a handle to the HAL service <br>\nmy $hal =\n$bus-&gt;get_service(&quot;org.freedesktop.Hal&quot;); <br>\n# Get the device manager <br>\nmy $manager =\n$hal-&gt;get_object(&quot;/org/freedesktop/Hal/Manager&quot;,\n<br>\n&quot;org.freedesktop.Hal.Manager&quot;); <br>\n# List devices <br>\nforeach my $dev (@{$manager-&gt;GetAllDevices}) { <br>\nprint $dev, &quot;\\n&quot;; <br>\n} <br>\n######### Providing services ############## <br>\n# Register a service known as 'org.example.Jukebox' <br>\nmy $service =\n$bus-&gt;export_service(&quot;org.example.Jukebox&quot;);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus\nprovides a Perl <small>API</small> for the DBus message\nsystem. The DBus Perl interface is currently operating\nagainst the 0.32 development version of DBus, but should\nwork with later versions too, providing the\n<small>API</small> changes have not been too drastic.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Users of this\npackage are either typically, service providers in which\ncase the Net::DBus::Service and Net::DBus::Object modules\nare of most relevance, or are client consumers, in which\ncase Net::DBus::RemoteService and Net::DBus::RemoteObject\nare of most relevance.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $bus =\nNet::DBus-&gt;find(%params);</p>\n\n<p style=\"margin-left:17%;\">Search for the most appropriate\nbus to connect to and return a connection to it. The\nheuristic used for the search is</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">- If\nDBUS_STARTER_BUS_TYPE is set to 'session' attach <br>\nto the session bus <br>\n- Else If DBUS_STARTER_BUS_TYPE is set to 'system' attach\n<br>\nto the system bus <br>\n- Else If DBUS_SESSION_BUS_ADDRESS is set attach to the <br>\nsession bus <br>\n- Else attach to the system bus</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The optional\n&quot;params&quot; hash can contain be used to specify\nconnection options. The only support option at this time is\n&quot;nomainloop&quot; which prevents the bus from being\nautomatically attached to the main Net::DBus::Reactor event\nloop.</p>\n\n<p style=\"margin-left:11%;\">my $bus =\nNet::DBus-&gt;system(%params);</p>\n\n<p style=\"margin-left:17%;\">Return a handle for the system\nmessage bus. Note that the system message bus is locked down\nby default, so unless appropriate access control rules are\nadded in /etc/dbus/system.d/, an application may access\nservices, but won&rsquo;t be able to export services.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The optional\n&quot;params&quot; hash can be used to specify the following\noptions: <br>\nnomainloop</p>\n\n<p style=\"margin-left:23%;\">If true, prevents the bus from\nbeing automatically attached to the main Net::DBus::Reactor\nevent loop.</p>\n\n<p style=\"margin-left:17%;\">private</p>\n\n<p style=\"margin-left:23%;\">If true, the socket opened is\nprivate; any existing socket will be ignored and any future\nattempts to open the same bus will return a different\nexisting socket or open a fresh one.</p>\n\n<p style=\"margin-left:11%;\">my $bus =\nNet::DBus-&gt;session(%params);</p>\n\n<p style=\"margin-left:17%;\">Return a handle for the session\nmessage bus.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The optional\n&quot;params&quot; hash can be used to specify the following\noptions: <br>\nnomainloop</p>\n\n<p style=\"margin-left:23%;\">If true, prevents the bus from\nbeing automatically attached to the main Net::DBus::Reactor\nevent loop.</p>\n\n<p style=\"margin-left:17%;\">private</p>\n\n<p style=\"margin-left:23%;\">If true, the socket opened is\nprivate; any existing socket will be ignored and any future\nattempts to open the same bus will return a different\nexisting socket or open a fresh one.</p>\n\n<p style=\"margin-left:11%;\">my $bus =\nNet::DBus-&gt;test(%params);</p>\n\n<p style=\"margin-left:17%;\">Returns a handle for a virtual\nbus for use in unit tests. This bus does not make any\nnetwork connections, but rather has an in-memory message\npipeline. Consult Net::DBus::Test::MockConnection for\nfurther details of how to use this special bus.</p>\n\n<p style=\"margin-left:11%;\">my $bus =\nNet::DBus-&gt;new($address, %params);</p>\n\n<p style=\"margin-left:17%;\">Return a connection to a\nspecific message bus. The $address parameter must contain\nthe address of the message bus to connect to. An example\naddress for a session bus might look like\n&quot;unix:abstract=/tmp/dbus-PBFyyuUiVb,guid=191e0a43c3efc222e0818be556d67500&quot;,\nwhile one for a system bus would look like\n&quot;unix:/var/run/dbus/system_bus_socket&quot;. The\noptional &quot;params&quot; hash can contain be used to\nspecify connection options. The only support option at this\ntime is &quot;nomainloop&quot; which prevents the bus from\nbeing automatically attached to the main Net::DBus::Reactor\nevent loop.</p>\n\n<p style=\"margin-left:11%;\">my $connection =\n$bus-&gt;get_connection;</p>\n\n<p style=\"margin-left:17%;\">Return a handle to the\nunderlying, low level connection object associated with this\nbus. The returned object will be an instance of the\nNet::DBus::Binding::Bus class. This method is not intended\nfor use by (most!) application developers, so if you\ndon&rsquo;t understand what this is for, then you\ndon&rsquo;t need to be calling it!</p>\n\n<p style=\"margin-left:11%;\">my $service =\n$bus-&gt;get_service($name);</p>\n\n<p style=\"margin-left:17%;\">Retrieves a handle for the\nremote service identified by the service name $name. The\nreturned object will be an instance of the\nNet::DBus::RemoteService class.</p>\n\n<p style=\"margin-left:11%;\">my $service =\n$bus-&gt;export_service($name);</p>\n\n<p style=\"margin-left:17%;\">Registers a service with the\nbus, returning a handle to the service. The returned object\nis an instance of the Net::DBus::Service class.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When $name is\nnot specified or is &quot;undef&quot; then returned handle\nto the service is identified only by the unique name of\nclient&rsquo;s connection to the bus.</p>\n\n<p style=\"margin-left:11%;\">my $object =\n$bus-&gt;get_bus_object;</p>\n\n<p style=\"margin-left:17%;\">Retrieves a handle to the bus\nobject, &quot;/org/freedesktop/DBus&quot;, provided by the\nservice &quot;org.freedesktop.DBus&quot;. The returned\nobject is an instance of Net::DBus::RemoteObject</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$bus-&gt;get_unique_name;</p>\n\n<p style=\"margin-left:17%;\">Retrieves the unique name of\nthis client&rsquo;s connection to the bus.</p>\n\n<p style=\"margin-left:11%;\">my $name =\n$bus-&gt;get_service_owner($service);</p>\n\n<p style=\"margin-left:17%;\">Retrieves the unique name of\nthe client on the bus owning the service named by the\n$service parameter.</p>\n\n<p style=\"margin-left:11%;\">my $timeout =\n$bus-&gt;timeout(60 * 1000);</p>\n\n<p style=\"margin-left:17%;\">Sets or retrieves the timeout\nvalue which will be used for DBus requests belongs to this\nbus connection. The timeout should be specified in\nmilliseconds, with the default value being 60 seconds.</p>\n\n<h2>DATA TYPING METHODS\n<a name=\"DATA TYPING METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These methods\nare not usually used, since most services provide\nintrospection data to inform clients of their data typing\nrequirements. If introspection data is incomplete, however,\nit may be necessary for a client to mark values with\nspecific data types. In such a case, the following methods\ncan be used. They are not, however, exported by default so\nmust be requested at import time by specifying &rsquo;use\nNet::DBus qw(:typing)&rsquo; <br>\n$typed_value = dbus_int16($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a signed,\n16-bit integer.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_uint16($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being an\nunsigned, 16-bit integer.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_int32($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a signed,\n32-bit integer.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_uint32($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being an\nunsigned, 32-bit integer.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_int64($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being an\nunsigned, 64-bit integer.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_uint64($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being an\nunsigned, 64-bit integer.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_double($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a double\nprecision <small>IEEE</small> floating point.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_byte($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being an\nunsigned, byte.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_string($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a\n<small>UTF-8</small> string. This is not usually required\nsince &rsquo;string&rsquo; is the default data type for any\nPerl scalar value.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_signature($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a\n<small>UTF-8</small> string, whose contents is a valid type\nsignature</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_object_path($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a\n<small>UTF-8</small> string, whose contents is a valid\nobject path.</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_boolean($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being an\nboolean</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_array($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being an\narray</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_struct($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a\nstructure</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_dict($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a\ndictionary</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_variant($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a\nvariant</p>\n\n<p style=\"margin-left:11%;\">$typed_value =\ndbus_unix_fd($value);</p>\n\n<p style=\"margin-left:17%;\">Mark a value as being a unix\nfile descriptor</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus,\nNet::DBus::RemoteService, Net::DBus::Service,\nNet::DBus::RemoteObject, Net::DBus::Object,\nNet::DBus::Exporter, Net::DBus::Dumper, Net::DBus::Reactor,\n&quot;dbus-monitor(1)&quot;, &quot;dbus-daemon-1(1)&quot;,\n&quot;dbus-send(1)&quot;,\n&lt;http://dbus.freedesktop.org&gt;,</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel Berrange\n&lt;dan@berrange.com&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2004-2011 by Daniel Berrange</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#DATA TYPING METHODS\">DATA TYPING METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}