{"name":"http::request::common","description":"HTTP::Request::Common - Construct common HTTP::Request objects","body":"\n\n<h1 align=\"center\">HTTP::Request::Common</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Request::Common\n- Construct common HTTP::Request objects</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">version\n6.36</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nHTTP::Request::Common; <br>\n$ua = LWP::UserAgent-&gt;new; <br>\n$ua-&gt;request(GET 'http://www.sn.no/'); <br>\n$ua-&gt;request(POST 'http://somewhere/foo', foo =&gt; bar,\nbar =&gt; foo); <br>\n$ua-&gt;request(PATCH 'http://somewhere/foo', foo =&gt; bar,\nbar =&gt; foo); <br>\n$ua-&gt;request(PUT 'http://somewhere/foo', foo =&gt; bar,\nbar =&gt; foo); <br>\n$ua-&gt;request(OPTIONS 'http://somewhere/foo', foo =&gt;\nbar, bar =&gt; foo);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides functions that return newly created\n&quot;HTTP::Request&quot; objects. These functions are\nusually more convenient to use than the standard\n&quot;HTTP::Request&quot; constructor for the most common\nrequests.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nLWP::UserAgent has several convenience methods, including\n&quot;get&quot;, &quot;head&quot;, &quot;delete&quot;,\n&quot;post&quot; and &quot;put&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are provided: <small><br>\nGET</small> $url <small><br>\nGET</small> $url, Header =&gt; Value,...</p>\n\n<p style=\"margin-left:17%;\">The &quot;GET&quot; function\nreturns an HTTP::Request object initialized with the &quot;\n<small>GET&quot;</small> method and the specified\n<small>URL.</small> It is roughly equivalent to the\nfollowing call</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">HTTP::Request-&gt;new(\n<br>\nGET =&gt; $url, <br>\nHTTP::Headers-&gt;new(Header =&gt; Value,...), <br>\n)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">but is less\ncluttered. What is different is that a header named\n&quot;Content&quot; will initialize the content part of the\nrequest instead of setting a header field. Note that\n<small>GET</small> requests should normally not have a\ncontent, so this hack makes more sense for the\n&quot;PUT&quot;, &quot;PATCH&quot; <br>\nand &quot;POST&quot; functions described below.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;get(...)&quot; method of LWP::UserAgent exists as a\nshortcut for &quot;$ua-&gt;request(GET ...)&quot;.</p>\n\n<p style=\"margin-left:11%;\"><small>HEAD</small> $url\n<small><br>\nHEAD</small> $url, Header =&gt; Value,...</p>\n\n<p style=\"margin-left:17%;\">Like <b><small>GET</small>\n()</b> but the method in the request is &quot;\n<small>HEAD&quot;.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;head(...)&quot; method of LWP::UserAgent exists as a\nshortcut for &quot;$ua-&gt;request(HEAD ...)&quot;.</p>\n\n<p style=\"margin-left:11%;\"><small>DELETE</small> $url\n<small><br>\nDELETE</small> $url, Header =&gt; Value,...</p>\n\n<p style=\"margin-left:17%;\">Like &quot;GET&quot; but the\nmethod in the request is &quot;DELETE&quot;. This function\nis not exported by default.</p>\n\n<p style=\"margin-left:11%;\"><small>PATCH</small> $url\n<small><br>\nPATCH</small> $url, Header =&gt; Value,... <small><br>\nPATCH</small> $url, $form_ref, Header =&gt; Value,...\n<small><br>\nPATCH</small> $url, Header =&gt; Value,..., Content =&gt;\n$form_ref <small><br>\nPATCH</small> $url, Header =&gt; Value,..., Content =&gt;\n$content</p>\n\n<p style=\"margin-left:17%;\">The same as &quot;POST&quot;\nbelow, but the method in the request is\n&quot;PATCH&quot;.</p>\n\n<p style=\"margin-left:11%;\"><small>PUT</small> $url\n<small><br>\nPUT</small> $url, Header =&gt; Value,... <small><br>\nPUT</small> $url, $form_ref, Header =&gt; Value,...\n<small><br>\nPUT</small> $url, Header =&gt; Value,..., Content =&gt;\n$form_ref <small><br>\nPUT</small> $url, Header =&gt; Value,..., Content =&gt;\n$content</p>\n\n<p style=\"margin-left:17%;\">The same as &quot;POST&quot;\nbelow, but the method in the request is &quot;PUT&quot;</p>\n\n<p style=\"margin-left:11%;\"><small>OPTIONS</small> $url\n<small><br>\nOPTIONS</small> $url, Header =&gt; Value,... <small><br>\nOPTIONS</small> $url, $form_ref, Header =&gt; Value,...\n<small><br>\nOPTIONS</small> $url, Header =&gt; Value,..., Content =&gt;\n$form_ref <small><br>\nOPTIONS</small> $url, Header =&gt; Value,..., Content =&gt;\n$content</p>\n\n<p style=\"margin-left:17%;\">The same as &quot;POST&quot;\nbelow, but the method in the request is\n&quot;OPTIONS&quot;</p>\n\n<p style=\"margin-left:11%;\"><small>POST</small> $url\n<small><br>\nPOST</small> $url, Header =&gt; Value,... <small><br>\nPOST</small> $url, $form_ref, Header =&gt; Value,...\n<small><br>\nPOST</small> $url, Header =&gt; Value,..., Content =&gt;\n$form_ref <small><br>\nPOST</small> $url, Header =&gt; Value,..., Content =&gt;\n$content</p>\n\n<p style=\"margin-left:17%;\">&quot;POST&quot;,\n&quot;PATCH&quot; and &quot;PUT&quot; all work with the same\nparameters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">%data = ( title\n=&gt; 'something', body =&gt; something else' ); <br>\n$ua = LWP::UserAgent-&gt;new(); <br>\n$request = HTTP::Request::Common::POST( $url, [ %data ] );\n<br>\n$response = $ua-&gt;request($request);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">They take a\nsecond optional array or hash reference parameter $form_ref.\nThe content can also be specified directly using the\n&quot;Content&quot; pseudo-header, and you may also provide\nthe $form_ref this way.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;Content&quot; pseudo-header steals a bit of the header\nfield namespace as there is no way to directly specify a\nheader that is actually called &quot;Content&quot;. If you\nreally need this you must update the request returned in a\nseparate statement.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $form_ref\nargument can be used to pass key/value pairs for the form\ncontent. By default we will initialize a request using the\n&quot;application/x-www-form-urlencoded&quot; content type.\nThis means that you can emulate an <small>HTML</small>\n&lt;form&gt; POSTing like this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">POST\n'http://www.perl.org/survey.cgi', <br>\n[ name =&gt; 'Gisle Aas', <br>\nemail =&gt; 'gisle@aas.no', <br>\ngender =&gt; 'M', <br>\nborn =&gt; '1964', <br>\nperc =&gt; '3%', <br>\n];</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This will\ncreate an HTTP::Request object that looks like this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">POST\nhttp://www.perl.org/survey.cgi <br>\nContent-Length: 66 <br>\nContent-Type: application/x-www-form-urlencoded <br>\n\nname=Gisle%20Aas&amp;email=gisle%40aas.no&amp;gender=M&amp;born=1964&amp;perc=3%25</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Multivalued\nform fields can be specified by either repeating the field\nname or by passing the value as an array reference.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<small>POST</small> method also supports the\n&quot;multipart/form-data&quot; content used for\n<i>Form-based File Upload</i> as specified in <small>RFC\n1867.</small> You trigger this content format by specifying\na content type of 'form-data' as one of the request headers.\nIf one of the values in the $form_ref is an array reference,\nthen it is treated as a file part specification with the\nfollowing interpretation:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[ $file,\n$filename, Header =&gt; Value... ] <br>\n[ undef, $filename, Header =&gt; Value,..., Content =&gt;\n$content ]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The first value\nin the array ($file) is the name of a file to open. This\nfile will be read and its content placed in the request. The\nroutine will croak if the file can&rsquo;t be opened. Use an\n&quot;undef&quot; as $file value if you want to specify the\ncontent directly with a &quot;Content&quot; header. The\n$filename is the filename to report in the request. If this\nvalue is undefined, then the basename of the $file will be\nused. You can specify an empty string as $filename if you\nwant to suppress sending the filename when you provide a\n$file value.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a $file is\nprovided by no &quot;Content-Type&quot; header, then\n&quot;Content-Type&quot; and &quot;Content-Encoding&quot;\nwill be filled in automatically with the values returned by\n&quot;LWP::MediaTypes::guess_media_type()&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sending my\n<i>~/.profile</i> to the survey used as example above can be\nachieved by this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">POST\n'http://www.perl.org/survey.cgi', <br>\nContent_Type =&gt; 'form-data', <br>\nContent =&gt; [ name =&gt; 'Gisle Aas', <br>\nemail =&gt; 'gisle@aas.no', <br>\ngender =&gt; 'M', <br>\nborn =&gt; '1964', <br>\ninit =&gt; [&quot;$ENV{HOME}/.profile&quot;], <br>\n]</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This will\ncreate an HTTP::Request object that almost looks this (the\nboundary and the content of your <i>~/.profile</i> is likely\nto be different):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">POST\nhttp://www.perl.org/survey.cgi <br>\nContent-Length: 388 <br>\nContent-Type: multipart/form-data; boundary=&quot;6G+f&quot;\n<br>\n--6G+f <br>\nContent-Disposition: form-data; name=&quot;name&quot; <br>\nGisle Aas <br>\n--6G+f <br>\nContent-Disposition: form-data; name=&quot;email&quot; <br>\ngisle@aas.no <br>\n--6G+f <br>\nContent-Disposition: form-data; name=&quot;gender&quot; <br>\nM <br>\n--6G+f <br>\nContent-Disposition: form-data; name=&quot;born&quot; <br>\n1964 <br>\n--6G+f <br>\nContent-Disposition: form-data; name=&quot;init&quot;;\nfilename=&quot;.profile&quot; <br>\nContent-Type: text/plain <br>\nPATH=/local/perl/bin:$PATH <br>\nexport PATH <br>\n--6G+f--</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you set the\n$DYNAMIC_FILE_UPLOAD variable (exportable) to some\n<small>TRUE</small> value, then you get back a request\nobject with a subroutine closure as the content attribute.\nThis subroutine will read the content of any files on demand\nand return it in suitable chunks. This allow you to upload\narbitrary big files without using lots of memory. You can\neven upload infinite files like <i>/dev/audio</i> if you\nwish; however, if the file is not a plain file, there will\nbe no &quot;Content-Length&quot; header defined for the\nrequest. Not all servers (or server applications) like this.\nAlso, if the file(s) change in size between the time the\n&quot;Content-Length&quot; is calculated and the time that\nthe last chunk is delivered, the subroutine will\n&quot;Croak&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;post(...)&quot; method of LWP::UserAgent exists as a\nshortcut for &quot;$ua-&gt;request(POST ...)&quot;.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">HTTP::Request,\nLWP::UserAgent</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also, there are\nsome examples in &quot; <small>EXAMPLES&quot;</small> in\nHTTP::Request that you might find useful. For example, batch\nrequests are explained there.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gisle Aas\n&lt;gisle@activestate.com&gt;</p>\n\n<h2>COPYRIGHT AND LICENSE\n<a name=\"COPYRIGHT AND LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis copyright (c) 1994 by Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is free\nsoftware; you can redistribute it and/or modify it under the\nsame terms as the Perl 5 programming language system\nitself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT AND LICENSE\">COPYRIGHT AND LICENSE</a>"],"level":3}