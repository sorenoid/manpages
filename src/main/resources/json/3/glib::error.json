{"name":"glib::error","description":"Glib::Error -\nException Objects based on GError","body":"\n\n<h1 align=\"center\">Glib::Error</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Error -\nException Objects based on GError</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">eval { <br>\nmy $pixbuf = Gtk2::Gdk::Pixbuf-&gt;new_from_file\n($filename); <br>\n$image-&gt;set_from_pixbuf ($pixbuf); <br>\n}; <br>\nif ($@) { <br>\nprint &quot;$@\\n&quot;; <br>\nif (Glib::Error::matches ($@, 'Gtk2::Gdk::Pixbuf::Error',\n<br>\n'unknown-format')) { <br>\nchange_format_and_try_again (); <br>\n} elsif (Glib::Error::matches ($@, 'Glib::File::Error',\n'noent')) { <br>\nchange_source_dir_and_try_again (); <br>\n} else { <br>\n# don't know how to handle this <br>\ndie $@; <br>\n} <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Gtk2-Perl\ntranslates GLib&rsquo;s GError runtime errors into Perl\nexceptions, by creating exception objects based on\nGlib::Error. Glib::Error overloads the stringification\noperator, so a Glib::Error object will act like a string if\nused with <b>print()</b> or <b>warn()</b>, so most code\nusing $@ will not even know the difference.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The point of\nhaving exception objects, however, is that the error\nmessages in GErrors are often localized with\n<small>NLS</small> translation. Thus, it&rsquo;s not good\nfor your code to attempt to handle errors by string matching\non the the error message. Glib::Error provides a way to get\nto the deterministic error code.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You will\ntypically deal with objects that inherit from Glib::Error,\nsuch as Glib::Convert::Error, Glib::File::Error,\nGtk2::Gdk::Pixbuf::Error, etc; these classes are provided by\nthe libraries that define the error domains. However, it is\npossible to get a base Glib::Error when the bindings\nencounter an unknown or unbound error domain. The interface\nused here degrades nicely in such a situation, but in\ngeneral you should submit a bug report to the binding\nmaintainer if you get such an exception.</p>\n\n<h2>HIERARCHY\n<a name=\"HIERARCHY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib::Boxed\n<br>\n+----Glib::Error</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>scalar =\nGlib::Error::new ($class, $code, $message) <br>\nscalar = $class-&gt;new ($code, $message)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$code (Glib::Enum) an enumeration value, depends on\n<i>$class</i></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$message (string)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Create a new\nexception object of type <i>$class</i>, where <i>$class</i>\nis associated with a GError domain. <i>$code</i> should be a\nvalue from the enumeration type associated with this error\ndomain. <i>$message</i> can be anything you like, but should\nexplain what happened from the point of view of a user.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>integer =\n$error-&gt;code</b> <br>\nThis is the numeric error code. Normally, you&rsquo;ll want\nto use &quot;value&quot; instead, for readability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>string =\n$error-&gt;domain</b> <br>\nThe error domain. You normally do not need this, as the\nobject will be blessed into a corresponding class.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>string =\n$error-&gt;location</b> <br>\nThe source line and file closest to the emission of the\nexception, in the same format that you&rsquo;d get from\n<b>croak()</b> or <b>die()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\nthere&rsquo;s non-ascii characters in the filename Perl\nleaves them as raw bytes, so you may have to put the string\nthrough Glib::filename_display_name for a wide-char\nform.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>boolean =\n$error-&gt;matches ($domain, $code)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">$domain (string)</p></td>\n<td width=\"58%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p>$code (scalar)</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returns true if\nthe exception in <i>$error</i> matches the given\n<i>$domain</i> and <i>$code</i>. <i>$domain</i> may be a\nclass name or domain quark (that is, the real string used in\nC). <i>$code</i> may be an integer value or an enum\nnickname; the enum type depends on the value of\n<i>$domain</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>string =\n$error-&gt;message</b> <br>\nThe error message. This may be localized, as it is intended\nto be shown to a user.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glib::Error::register\n($package, $enum_package)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$package (string) class name to\nregister as a Glib::Error.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$enum_package (string) class name of the enum type to\nuse for this domain&rsquo;s error codes.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Register a new\nerror domain. Glib::Error will be added @<i>package</i>::ISA\nfor you. <i>enum_package</i> must be a valid Glib::Enum\ntype, either from a C library or registered with\n&quot;Glib::Type::register_enum&quot;. After registering an\nerror domain, you can create or throw exceptions of this\ntype.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>scalar =\nGlib::Error::throw ($class, $code, $message) <br>\nscalar = $class-&gt;throw ($code, $message)</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">$code (Glib::Enum) an\nenumeration value, depends on <i>$class</i></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>$message (string)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Throw an\nexception with a Glib::Error exception object. Equivalent to\n&quot;croak (Glib::Error::new ($class, $code,\n$message));&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>string =\n$error-&gt;value</b> <br>\nThe enumeration value nickname of the integer value in\n&quot;$error-&gt;code&quot;, according to this error domain.\nThis will not be available if the error object is a base\nGlib::Error, because the bindings will have no idea how to\nget to the correct nickname.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glib,\nGlib::Boxed</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (C)\n2003-2011 by the gtk2-perl team.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This software\nis licensed under the <small>LGPL.</small> See Glib for a\nfull notice.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#HIERARCHY\">HIERARCHY</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}