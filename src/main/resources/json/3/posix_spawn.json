{"name":"posix_spawn","description":"posix_spawn, posix_spawnp - spawn a process","body":"\n\n<h1 align=\"center\">POSIX_SPAWN</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">posix_spawn,\nposix_spawnp - spawn a process</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;spawn.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nposix_spawn(pid_t *</b><i>pid</i><b>, const char\n*</b><i>path</i><b>, <br>\nconst posix_spawn_file_actions_t\n*</b><i>file_actions</i><b>, <br>\nconst posix_spawnattr_t *</b><i>attrp</i><b>, <br>\nchar *const</b> <i>argv[]</i><b>, char *const</b>\n<i>envp[]</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nposix_spawnp(pid_t *</b><i>pid</i><b>, const char\n*</b><i>file</i><b>, <br>\nconst posix_spawn_file_actions_t\n*</b><i>file_actions</i><b>, <br>\nconst posix_spawnattr_t *</b><i>attrp</i><b>, <br>\nchar *const</b> <i>argv[]</i><b>, char *const</b>\n<i>envp[]</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>posix_spawn</b>() and <b>posix_spawnp</b>() functions are\nused to create a new child process that executes a specified\nfile. These functions were specified by POSIX to provide a\nstandardized method of creating new processes on machines\nthat lack the capability to support the <a href=\"https://man.page/2/fork\">fork(2)</a>\nsystem call. These machines are generally small, embedded\nsystems lacking MMU support.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>posix_spawn</b>() and <b>posix_spawnp</b>() functions\nprovide the functionality of a combined <a href=\"https://man.page/2/fork\">fork(2)</a> and\n<a href=\"https://man.page/3/exec\">exec(3)</a>, with some optional housekeeping steps in the\nchild process before the <a href=\"https://man.page/3/exec\">exec(3)</a>. These functions are\nnot meant to replace the <a href=\"https://man.page/2/fork\">fork(2)</a> and <a href=\"https://man.page/2/execve\">execve(2)</a>\nsystem calls. In fact, they provide only a subset of the\nfunctionality that can be achieved by using the system\ncalls.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The only\ndifference between <b>posix_spawn</b>() and\n<b>posix_spawnp</b>() is the manner in which they specify\nthe file to be executed by the child process. With\n<b>posix_spawn</b>(), the executable file is specified as a\npathname (which can be absolute or relative). With\n<b>posix_spawnp</b>(), the executable file is specified as a\nsimple filename; the system searches for this file in the\nlist of directories specified by <b>PATH</b> (in the same\nway as for <a href=\"https://man.page/3/execvp\">execvp(3)</a>). For the remainder of this\npage, the discussion is phrased in terms of\n<b>posix_spawn</b>(), with the understanding that\n<b>posix_spawnp</b>() differs only on the point just\ndescribed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The remaining\narguments to these two functions are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <i>pid</i> argument points to a buffer that is used\nto return the process ID of the new child process.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <i>file_actions</i> argument points to a <i>spawn\nfile actions object</i> that specifies file-related actions\nto be performed in the child between the <a href=\"https://man.page/2/fork\">fork(2)</a> and\n<a href=\"https://man.page/3/exec\">exec(3)</a> steps. This object is initialized and\npopulated before the <b>posix_spawn</b>() call using\n<a href=\"https://man.page/3/posix_spawn_file_actions_init\">posix_spawn_file_actions_init(3)</a> and the\n<b>posix_spawn_file_actions_*</b>() functions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <i>attrp</i> argument points to an <i>attributes\nobjects</i> that specifies various attributes of the created\nchild process. This object is initialized and populated\nbefore the <b>posix_spawn</b>() call using\n<a href=\"https://man.page/3/posix_spawnattr_init\">posix_spawnattr_init(3)</a> and the\n<b>posix_spawnattr_*</b>() functions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <i>argv</i> and <i>envp</i> arguments specify the\nargument list and environment for the program that is\nexecuted in the child process, as for <a href=\"https://man.page/2/execve\">execve(2)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Below, the\nfunctions are described in terms of a three-step process:\nthe <b>fork</b>() step, the pre-<b>exec</b>() step (executed\nin the child), and the <b>exec</b>() step (executed in the\nchild).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fork()\nstep</b> <br>\nSince glibc 2.24, the <b>posix_spawn</b>() function\ncommences by calling <a href=\"https://man.page/2/clone\">clone(2)</a> with <b>CLONE_VM</b>\nand <b>CLONE_VFORK</b> flags. Older implementations use\n<a href=\"https://man.page/2/fork\">fork(2)</a>, or possibly <a href=\"https://man.page/2/vfork\">vfork(2)</a> (see below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The PID of the\nnew child process is placed in <i>*pid</i>. The\n<b>posix_spawn</b>() function then returns control to the\nparent process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Subsequently,\nthe parent can use one of the system calls described in\n<a href=\"https://man.page/2/wait\">wait(2)</a> to check the status of the child process. If\nthe child fails in any of the housekeeping steps described\nbelow, or fails to execute the desired file, it exits with a\nstatus of 127.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before glibc\n2.24, the child process is created using <a href=\"https://man.page/2/vfork\">vfork(2)</a>\ninstead of <a href=\"https://man.page/2/fork\">fork(2)</a> when either of the following is\ntrue:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">the <i>spawn-flags</i> element\nof the attributes object pointed to by <i>attrp</i> contains\nthe GNU-specific flag <b>POSIX_SPAWN_USEVFORK</b>; or</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><i>file_actions</i> is NULL and the <i>spawn-flags</i>\nelement of the attributes object pointed to by <i>attrp</i>\ndoes <i>not</i> contain <b>POSIX_SPAWN_SETSIGMASK</b>,\n<b>POSIX_SPAWN_SETSIGDEF</b>,\n<b>POSIX_SPAWN_SETSCHEDPARAM</b>,\n<b>POSIX_SPAWN_SETSCHEDULER</b>,\n<b>POSIX_SPAWN_SETPGROUP</b>, or\n<b>POSIX_SPAWN_RESETIDS</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In other words,\n<a href=\"https://man.page/2/vfork\">vfork(2)</a> is used if the caller requests it, or if\nthere is no cleanup expected in the child before it\n<a href=\"https://man.page/3/exec\">exec(3)</a>s the requested file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pre-exec()\nstep: housekeeping</b> <br>\nIn between the <b>fork()</b> and the <b>exec()</b> steps, a\nchild process may need to perform a set of housekeeping\nactions. The <b>posix_spawn</b>() and <b>posix_spawnp</b>()\nfunctions support a small, well-defined set of system tasks\nthat the child process can accomplish before it executes the\nexecutable file. These operations are controlled by the\nattributes object pointed to by <i>attrp</i> and the file\nactions object pointed to by <i>file_actions</i>. In the\nchild, processing is done in the following sequence:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Process attribute actions:\nsignal mask, signal default handlers, scheduling algorithm\nand parameters, process group, and effective user and group\nIDs are changed as specified by the attributes object\npointed to by <i>attrp</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>File actions, as specified in the <i>file_actions</i>\nargument, are performed in the order that they were\nspecified using calls to the\n<b>posix_spawn_file_actions_add*</b>() functions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>File descriptors with the <b>FD_CLOEXEC</b> flag set are\nclosed.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All process\nattributes in the child, other than those affected by\nattributes specified in the object pointed to by\n<i>attrp</i> and the file actions in the object pointed to\nby <i>file_actions</i>, will be affected as though the child\nwas created with <a href=\"https://man.page/2/fork\">fork(2)</a> and it executed the program\nwith <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The process\nattributes actions are defined by the attributes object\npointed to by <i>attrp</i>. The <i>spawn-flags</i> attribute\n(set using <a href=\"https://man.page/3/posix_spawnattr_setflags\">posix_spawnattr_setflags(3)</a>) controls the\ngeneral actions that occur, and other attributes in the\nobject specify values to be used during those actions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The effects of\nthe flags that may be specified in <i>spawn-flags</i> are as\nfollows: <b><br>\nPOSIX_SPAWN_SETSIGMASK</b></p>\n\n<p style=\"margin-left:22%;\">Set the signal mask to the\nsignal set specified in the <i>spawn-sigmask</i> attribute\nof the object pointed to by <i>attrp</i>. If the\n<b>POSIX_SPAWN_SETSIGMASK</b> flag is not set, then the\nchild inherits the parent&rsquo;s signal mask.</p>\n\n\n<p style=\"margin-left:11%;\"><b>POSIX_SPAWN_SETSIGDEF</b></p>\n\n<p style=\"margin-left:22%;\">Reset the disposition of all\nsignals in the set specified in the <i>spawn-sigdefault</i>\nattribute of the object pointed to by <i>attrp</i> to the\ndefault. For the treatment of the dispositions of signals\nnot specified in the <i>spawn-sigdefault</i> attribute, or\nthe treatment when <b>POSIX_SPAWN_SETSIGDEF</b> is not\nspecified, see <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>POSIX_SPAWN_SETSCHEDPARAM</b></p>\n\n<p style=\"margin-left:22%;\">If this flag is set, and the\n<b>POSIX_SPAWN_SETSCHEDULER</b> flag is not set, then set\nthe scheduling parameters to the parameters specified in the\n<i>spawn-schedparam</i> attribute of the object pointed to\nby <i>attrp</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>POSIX_SPAWN_SETSCHEDULER</b></p>\n\n<p style=\"margin-left:22%;\">Set the scheduling policy\nalgorithm and parameters of the child, as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The scheduling policy is set to the value specified in\nthe <i>spawn-schedpolicy</i> attribute of the object pointed\nto by <i>attrp</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The scheduling parameters are set to the value specified\nin the <i>spawn-schedparam</i> attribute of the object\npointed to by <i>attrp</i> (but see BUGS).</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<b>POSIX_SPAWN_SETSCHEDPARAM</b> and\n<b>POSIX_SPAWN_SETSCHEDPOLICY</b> flags are not specified,\nthe child inherits the corresponding scheduling attributes\nfrom the parent.</p>\n\n\n<p style=\"margin-left:11%;\"><b>POSIX_SPAWN_RESETIDS</b></p>\n\n<p style=\"margin-left:22%;\">If this flag is set, reset the\neffective UID and GID to the real UID and GID of the parent\nprocess. If this flag is not set, then the child retains the\neffective UID and GID of the parent. In either case, if the\nset-user-ID and set-group-ID permission bits are enabled on\nthe executable file, their effect will override the setting\nof the effective UID and GID (se <a href=\"https://man.page/2/execve\">execve(2)</a>).</p>\n\n\n<p style=\"margin-left:11%;\"><b>POSIX_SPAWN_SETPGROUP</b></p>\n\n<p style=\"margin-left:22%;\">Set the process group to the\nvalue specified in the <i>spawn-pgroup</i> attribute of the\nobject pointed to by <i>attrp</i>. If the\n<i>spawn-pgroup</i> attribute has the value 0, the\nchild&rsquo;s process group ID is made the same as its\nprocess ID. If the <b>POSIX_SPAWN_SETPGROUP</b> flag is not\nset, the child inherits the parent&rsquo;s process group\nID.</p>\n\n\n<p style=\"margin-left:11%;\"><b>POSIX_SPAWN_USEVFORK</b></p>\n\n<p style=\"margin-left:22%;\">Since glibc 2.24, this flag has\nno effect. On older implementations, setting this flag\nforces the <b>fork()</b> step to use <a href=\"https://man.page/2/vfork\">vfork(2)</a> instead\nof <a href=\"https://man.page/2/fork\">fork(2)</a>. The <b>_GNU_SOURCE</b> feature test macro\nmust be defined to obtain the definition of this\nconstant.</p>\n\n<p style=\"margin-left:11%;\"><b>POSIX_SPAWN_SETSID</b>\n(since glibc 2.26)</p>\n\n<p style=\"margin-left:22%;\">If this flag is set, the child\nprocess shall create a new session and become the session\nleader. The child process shall also become the process\ngroup leader of the new process group in the session (see\n<a href=\"https://man.page/2/setsid\">setsid(2)</a>). The <b>_GNU_SOURCE</b> feature test macro\nmust be defined to obtain the definition of this\nconstant.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>attrp</i>\nis NULL, then the default behaviors described above for each\nflag apply.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>file_actions</i> argument specifies a sequence of file\noperations that are performed in the child process after the\ngeneral processing described above, and before it performs\nthe <a href=\"https://man.page/3/exec\">exec(3)</a>. If <i>file_actions</i> is NULL, then no\nspecial action is taken, and standard <a href=\"https://man.page/3/exec\">exec(3)</a>\nsemantics apply&mdash;file descriptors open before the exec\nremain open in the new process, except those for which the\n<b>FD_CLOEXEC</b> flag has been set. File locks remain in\nplace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>file_actions</i> is not NULL, then it contains an ordered\nset of requests to <a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/2/close\">close(2)</a>, and\n<a href=\"https://man.page/2/dup2\">dup2(2)</a> files. These requests are added to the\n<i>file_actions</i> by\n<a href=\"https://man.page/3/posix_spawn_file_actions_addopen\">posix_spawn_file_actions_addopen(3)</a>,\n<a href=\"https://man.page/3/posix_spawn_file_actions_addclose\">posix_spawn_file_actions_addclose(3)</a>, and\n<a href=\"https://man.page/3/posix_spawn_file_actions_adddup2\">posix_spawn_file_actions_adddup2(3)</a>. The requested\noperations are performed in the order they were added to\n<i>file_actions</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If any of the\nhousekeeping actions fails (due to bogus values being passed\nor other reasons why signal handling, process scheduling,\nprocess group ID functions, and file descriptor operations\nmight fail), the child process exits with exit value\n127.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>exec()\nstep</b> <br>\nOnce the child has successfully forked and performed all\nrequested pre-exec steps, the child runs the requested\nexecutable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The child\nprocess takes its environment from the <i>envp</i> argument,\nwhich is interpreted as if it had been passed to\n<a href=\"https://man.page/2/execve\">execve(2)</a>. The arguments to the created process come\nfrom the <i>argv</i> argument, which is processed as for\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Upon successful\ncompletion, <b>posix_spawn</b>() and <b>posix_spawnp</b>()\nplace the PID of the child process in <i>pid</i>, and return\n0. If there is an error during the <b>fork()</b> step, then\nno child is created, the contents of <i>*pid</i> are\nunspecified, and these functions return an error number as\ndescribed below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Even when these\nfunctions return a success status, the child process may\nstill fail for a plethora of reasons related to its\npre-<b>exec</b>() initialization. In addition, the\n<a href=\"https://man.page/3/exec\">exec(3)</a> may fail. In all of these cases, the child\nprocess will exit with the exit value of 127.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>posix_spawn</b>() and <b>posix_spawnp</b>() functions\nfail only in the case where the underlying <a href=\"https://man.page/2/fork\">fork(2)</a>,\n<a href=\"https://man.page/2/vfork\">vfork(2)</a> or <a href=\"https://man.page/2/clone\">clone(2)</a> call fails; in these\ncases, these functions return an error number, which will be\none of the errors described for <a href=\"https://man.page/2/fork\">fork(2)</a>,\n<a href=\"https://man.page/2/vfork\">vfork(2)</a> or <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\nthese functions fail if:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSYS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"58%\">\n\n\n<p>Function not supported on this system.</p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>posix_spawn</b>() and <b>posix_spawnp</b>() functions are\navailable since glibc 2.2.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nhousekeeping activities in the child are controlled by the\nobjects pointed to by <i>attrp</i> (for non-file actions)\nand <i>file_actions</i> In POSIX parlance, the\n<i>posix_spawnattr_t</i> and\n<i>posix_spawn_file_actions_t</i> data types are referred to\nas objects, and their elements are not specified by name.\nPortable programs should initialize these objects using only\nthe POSIX-specified functions. (In other words, although\nthese objects may be implemented as structures containing\nfields, portable programs must avoid dependence on such\nimplementation details.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX, it is unspecified whether fork handlers established\nwith <a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a> are called when\n<b>posix_spawn</b>() is invoked. Since glibc 2.24, the fork\nhandlers are not executed in any case. On older\nimplementations, fork handlers are called only if the child\nis created using <a href=\"https://man.page/2/fork\">fork(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is no\n&quot;posix_fspawn&quot; function (i.e., a function that is\nto <b>posix_spawn</b>() as <a href=\"https://man.page/3/fexecve\">fexecve(3)</a> is to\n<a href=\"https://man.page/2/execve\">execve(2)</a>). However, this functionality can be\nobtained by specifying the <i>path</i> argument as one of\nthe files in the caller&rsquo;s <i>/proc/self/fd</i>\ndirectory.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 says\nthat when <b>POSIX_SPAWN_SETSCHEDULER</b> is specified in\n<i>spawn-flags</i>, then the\n<b>POSIX_SPAWN_SETSCHEDPARAM</b> (if present) is ignored.\nHowever, before glibc 2.14, calls to <b>posix_spawn</b>()\nfailed with an error if <b>POSIX_SPAWN_SETSCHEDULER</b> was\nspecified without also specifying\n<b>POSIX_SPAWN_SETSCHEDPARAM</b>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of various functions in the POSIX\nspawn API. The program accepts command-line attributes that\ncan be used to create file actions and attributes objects.\nThe remaining command-line arguments are used as the\nexecutable name and command-line arguments of the program\nthat is executed in the child.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the first\nrun, the <a href=\"https://man.page/1/date\">date(1)</a> command is executed in the child,\nand the <b>posix_spawn</b>() call employs no file actions or\nattributes objects.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\ndate</b> <br>\nPID of child: 7634 <br>\nTue Feb 1 19:47:50 CEST 2011 <br>\nChild status: exited, status=0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the next\nrun, the <i>-c</i> command-line option is used to create a\nfile actions object that closes standard output in the\nchild. Consequently, <a href=\"https://man.page/1/date\">date(1)</a> fails when trying to\nperform output and exits with a status of 1.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out -c\ndate</b> <br>\nPID of child: 7636 <br>\ndate: write error: Bad file descriptor <br>\nChild status: exited, status=1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the next\nrun, the <i>-s</i> command-line option is used to create an\nattributes object that specifies that all (blockable)\nsignals in the child should be blocked. Consequently, trying\nto kill child with the default signal sent by <a href=\"https://man.page/1/kill\">kill(1)</a>\n(i.e., <b>SIGTERM</b>) fails, because that signal is\nblocked. Therefore, to kill the child, <b>SIGKILL</b> is\nnecessary (<b>SIGKILL</b> can&rsquo;t be blocked).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out -s\nsleep 60 &amp;</b> <br>\n[1] 7637 <br>\n$ PID of child: 7638</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>kill\n7638</b> <br>\n$ <b>kill -KILL 7638</b> <br>\n$ Child status: killed by signal 9 <br>\n[1]+ Done ./a.out -s sleep 60</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When we try to\nexecute a nonexistent command in the child, the\n<a href=\"https://man.page/3/exec\">exec(3)</a> fails and the child exits with a status of\n127.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\nxxxxx <br>\nPID of child: 10190 <br>\nChild status: exited, status=127</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;spawn.h&gt; <br>\n#include &lt;stdint.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;string.h&gt; <br>\n#include &lt;wait.h&gt; <br>\n#include &lt;errno.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nerrExit(msg) do { perror(msg); \\ <br>\nexit(EXIT_FAILURE); } while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nerrExitEN(en, msg) \\ <br>\ndo { errno = en; perror(msg); \\ <br>\nexit(EXIT_FAILURE); } while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">char\n**environ;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\npid_t child_pid; <br>\nint s, opt, status; <br>\nsigset_t mask; <br>\nposix_spawnattr_t attr; <br>\nposix_spawnattr_t *attrp; <br>\nposix_spawn_file_actions_t file_actions; <br>\nposix_spawn_file_actions_t *file_actionsp;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Parse\ncommand-line options, which can be used to specify an <br>\nattributes object and file actions object for the child.\n*/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">attrp = NULL;\n<br>\nfile_actionsp = NULL;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">while ((opt =\ngetopt(argc, argv, &quot;sc&quot;)) != -1) { <br>\nswitch (opt) { <br>\ncase 'c': /* -c: close standard output in child */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Create a\nfile actions object and add a &quot;close&quot; <br>\naction to it */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\nposix_spawn_file_actions_init(&amp;file_actions); <br>\nif (s != 0) <br>\nerrExitEN(s, &quot;posix_spawn_file_actions_init&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\nposix_spawn_file_actions_addclose(&amp;file_actions, <br>\nSTDOUT_FILENO); <br>\nif (s != 0) <br>\nerrExitEN(s,\n&quot;posix_spawn_file_actions_addclose&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">file_actionsp =\n&amp;file_actions; <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">case 's': /*\n-s: block all signals in child */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Create an\nattributes object and add a &quot;set signal mask&quot; <br>\naction to it */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\nposix_spawnattr_init(&amp;attr); <br>\nif (s != 0) <br>\nerrExitEN(s, &quot;posix_spawnattr_init&quot;); <br>\ns = posix_spawnattr_setflags(&amp;attr,\nPOSIX_SPAWN_SETSIGMASK); <br>\nif (s != 0) <br>\nerrExitEN(s, &quot;posix_spawnattr_setflags&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sigfillset(&amp;mask);\n<br>\ns = posix_spawnattr_setsigmask(&amp;attr, &amp;mask); <br>\nif (s != 0) <br>\nerrExitEN(s, &quot;posix_spawnattr_setsigmask&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">attrp =\n&amp;attr; <br>\nbreak; <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Spawn the\nchild. The name of the program to execute and the <br>\ncommand-line arguments are taken from the command-line\narguments <br>\nof this program. The environment of the program execed in\nthe <br>\nchild is made the same as the parent's environment. */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">s =\nposix_spawnp(&amp;child_pid, argv[optind], file_actionsp,\nattrp, <br>\n&amp;argv[optind], environ); <br>\nif (s != 0) <br>\nerrExitEN(s, &quot;posix_spawn&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Destroy any\nobjects that we created earlier */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (attrp !=\nNULL) { <br>\ns = posix_spawnattr_destroy(attrp); <br>\nif (s != 0) <br>\nerrExitEN(s, &quot;posix_spawnattr_destroy&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(file_actionsp != NULL) { <br>\ns = posix_spawn_file_actions_destroy(file_actionsp); <br>\nif (s != 0) <br>\nerrExitEN(s, &quot;posix_spawn_file_actions_destroy&quot;);\n<br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;PID\nof child: %jd\\n&quot;, (intmax_t) child_pid);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Monitor\nstatus of the child until it terminates */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">do { <br>\ns = waitpid(child_pid, &amp;status, WUNTRACED | WCONTINUED);\n<br>\nif (s == -1) <br>\nerrExit(&quot;waitpid&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Child\nstatus: &quot;); <br>\nif (WIFEXITED(status)) { <br>\nprintf(&quot;exited, status=%d\\n&quot;,\nWEXITSTATUS(status)); <br>\n} else if (WIFSIGNALED(status)) { <br>\nprintf(&quot;killed by signal %d\\n&quot;, WTERMSIG(status));\n<br>\n} else if (WIFSTOPPED(status)) { <br>\nprintf(&quot;stopped by signal %d\\n&quot;,\nWSTOPSIG(status)); <br>\n} else if (WIFCONTINUED(status)) { <br>\nprintf(&quot;continued\\n&quot;); <br>\n} <br>\n} while (!WIFEXITED(status) &amp;&amp;\n!WIFSIGNALED(status));</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/close\">close(2)</a>,\n<a href=\"https://man.page/2/dup2\">dup2(2)</a>, <a href=\"https://man.page/2/execl\">execl(2)</a>, <a href=\"https://man.page/2/execlp\">execlp(2)</a>,\n<a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/2/sched_setparam\">sched_setparam(2)</a>,\n<a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a>, <a href=\"https://man.page/2/setpgid\">setpgid(2)</a>,\n<a href=\"https://man.page/2/setuid\">setuid(2)</a>, <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>,\n<a href=\"https://man.page/3/posix_spawn_file_actions_addclose\">posix_spawn_file_actions_addclose(3)</a>,\n<a href=\"https://man.page/3/posix_spawn_file_actions_adddup2\">posix_spawn_file_actions_adddup2(3)</a>,\n<a href=\"https://man.page/3/posix_spawn_file_actions_addopen\">posix_spawn_file_actions_addopen(3)</a>,\n<a href=\"https://man.page/3/posix_spawn_file_actions_destroy\">posix_spawn_file_actions_destroy(3)</a>,\n<a href=\"https://man.page/3/posix_spawn_file_actions_init\">posix_spawn_file_actions_init(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_destroy\">posix_spawnattr_destroy(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_getflags\">posix_spawnattr_getflags(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_getpgroup\">posix_spawnattr_getpgroup(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_getschedparam\">posix_spawnattr_getschedparam(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_getschedpolicy\">posix_spawnattr_getschedpolicy(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_getsigdefault\">posix_spawnattr_getsigdefault(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_getsigmask\">posix_spawnattr_getsigmask(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_init\">posix_spawnattr_init(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_setflags\">posix_spawnattr_setflags(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_setpgroup\">posix_spawnattr_setpgroup(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_setschedparam\">posix_spawnattr_setschedparam(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_setschedpolicy\">posix_spawnattr_setschedpolicy(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_setsigdefault\">posix_spawnattr_setsigdefault(3)</a>,\n<a href=\"https://man.page/3/posix_spawnattr_setsigmask\">posix_spawnattr_setsigmask(3)</a>,\n<a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a>, <i>&lt;spawn.h&gt;</i>, Base\nDefinitions volume of POSIX.1-2001,\n<i>http://www.opengroup.org/unix/online.html</i></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}