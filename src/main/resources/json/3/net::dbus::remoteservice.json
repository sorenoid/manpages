{"name":"net::dbus::remoteservice","body":"\n\n<h1 align=\"center\">Net::DBus::RemoteService</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::RemoteService\n- Access services provided on the bus</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $bus =\nNet::DBus-&gt;find; <br>\nmy $service =\n$bus-&gt;get_service(&quot;org.freedesktop.DBus&quot;); <br>\nmy $object =\n$service-&gt;get_object(&quot;/org/freedesktop/DBus&quot;);\n<br>\nforeach (@{$object-&gt;ListNames}) { <br>\nprint &quot;$_\\n&quot;; <br>\n}</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This object\nprovides a handle to a remote service on the bus. From this\nhandle it is possible to access objects associated with the\nservice. If a service is not running, an attempt will be\nmade to activate it the first time a method is called\nagainst one of its objects.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $service =\nNet::DBus::RemoteService-&gt;new($bus, $owner, <br>\n$service_name);</p>\n\n<p style=\"margin-left:17%;\">Creates a new handle for a\nremote service. The $bus parameter is an instance of\nNet::DBus, $owner is the name of the client providing the\nservice, while $service_name is the well known name of the\nservice on the bus. Service names consist of two or more\ntokens, separated by periods, while the tokens comprise the\nletters a-z, A-Z, 0-9 and _, for example\n&quot;org.freedesktop.DBus&quot;. There is generally no need\nto call this constructor, instead the\n&quot;get_service&quot; method on Net::DBus should be used.\nThis caches handles to remote services, eliminating repeated\nretrieval of introspection data.</p>\n\n<p style=\"margin-left:11%;\">my $bus =\n$service-&gt;get_bus;</p>\n\n<p style=\"margin-left:17%;\">Retrieves a handle for the bus\nto which this service is attached. The returned object will\nbe an instance of Net::DBus.</p>\n\n<p style=\"margin-left:11%;\">my $service_name =\n$service-&gt;get_service_name</p>\n\n<p style=\"margin-left:17%;\">Retrieves the name of the\nremote service as known to the bus.</p>\n\n<p style=\"margin-left:11%;\">my $owner_name =\n$service-&gt;get_owner_name;</p>\n\n<p style=\"margin-left:17%;\">Retrieves the name of the\nclient owning the service at the time it was connected\nto.</p>\n\n<p style=\"margin-left:11%;\">my $object =\n$service-&gt;get_object($object_path[, $interface]); =item\nmy <br>\n$object = $service-&gt;get_object($object_path,\n\\%params);</p>\n\n<p style=\"margin-left:17%;\">Retrieves a handle to the\nremote object provided by the service with the name of\n$object_path. If the optional $interface parameter is\nprovided, the object will immediately be cast to the\ndesignated interface. <small>NB,</small> it is only\nnecessary to cast an object to a specific interface if there\nare multiple interfaces on the object providing methods with\nthe same name, or the remote object does support\nintrospection. The returned object will be an instance of\nNet::DBus::RemoteObject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">An alternate\nform of the method is available, passing a hash reference of\nextra parameters. Valid keys in the hash are\n&quot;interface&quot; specifying the interface name to cast\nto, and &quot;timeout&quot; specifying a timeout in\nmilliseconds</p>\n\n<p style=\"margin-left:11%;\">my $timeout =\n$service-&gt;timeout(60 * 1000);</p>\n\n<p style=\"margin-left:17%;\">Sets or retrieves the timeout\nvalue which will be used for DBus requests belongs to this\nservice. The value is in milliseconds. If the timeout for a\nservice is undefined, then the default timeout from the bus\nwill apply.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel Berrange\n&lt;dan@berrange.com&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copright (C)\n2004-2011, Daniel Berrange.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::RemoteObject,\nNet::DBus::Service, Net::DBus</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}