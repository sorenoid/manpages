{"name":"ether_aton","description":"ether_aton, ether_ntoa, ether_ntohost, ether_hostton, ether_line, ether_ntoa_r, ether_aton_r - Ethernet address manipulation routines","body":"\n\n<h1 align=\"center\">ETHER_ATON</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ether_aton,\nether_ntoa, ether_ntohost, ether_hostton, ether_line,\nether_ntoa_r, ether_aton_r - Ethernet address manipulation\nroutines</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;netinet/ether.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*ether_ntoa(const struct ether_addr\n*</b><i>addr</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct\nether_addr *ether_aton(const char\n*</b><i>asc</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nether_ntohost(char *</b><i>hostname</i><b>, const struct\nether_addr *</b><i>addr</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nether_hostton(const char *</b><i>hostname</i><b>, struct\nether_addr *</b><i>addr</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nether_line(const char *</b><i>line</i><b>, struct ether_addr\n*</b><i>addr</i><b>, <br>\nchar *</b><i>hostname</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* GNU\nextensions */ <b><br>\nchar *ether_ntoa_r(const struct ether_addr\n*</b><i>addr</i><b>, char *</b><i>buf</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct\nether_addr *ether_aton_r(const char *</b><i>asc</i><b>, <br>\nstruct ether_addr *</b><i>addr</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ether_aton</b>()\nconverts the 48-bit Ethernet host address <i>asc</i> from\nthe standard hex-digits-and-colons notation into binary data\nin network byte order and returns a pointer to it in a\nstatically allocated buffer, which subsequent calls will\noverwrite. <b>ether_aton</b>() returns NULL if the address\nis invalid.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ether_ntoa</b>() function converts the Ethernet host\naddress <i>addr</i> given in network byte order to a string\nin standard hex-digits-and-colons notation, omitting leading\nzeros. The string is returned in a statically allocated\nbuffer, which subsequent calls will overwrite.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ether_ntohost</b>() function maps an Ethernet address to\nthe corresponding hostname in <i>/etc/ethers</i> and returns\nnonzero if it cannot be found.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ether_hostton</b>() function maps a hostname to the\ncorresponding Ethernet address in <i>/etc/ethers</i> and\nreturns nonzero if it cannot be found.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ether_line</b>() function parses a line in\n<i>/etc/ethers</i> format (ethernet address followed by\nwhitespace followed by hostname; '#' introduces a comment)\nand returns an address and hostname pair, or nonzero if it\ncannot be parsed. The buffer pointed to by <i>hostname</i>\nmust be sufficiently long, for example, have the same length\nas <i>line</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>ether_ntoa_r</b>() and <b>ether_aton_r</b>() are\nreentrant thread-safe versions of <b>ether_ntoa</b>() and\n<b>ether_aton</b>() respectively, and do not use static\nbuffers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The structure\n<i>ether_addr</i> is defined in\n<i>&lt;net/ethernet.h&gt;</i> as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nether_addr { <br>\nuint8_t ether_addr_octet[6]; <br>\n}</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3328361.png\" alt=\"Image grohtml-3328361.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">4.3BSD,\nSunOS.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In glibc 2.2.5\nand earlier, the implementation of <b>ether_line</b>() is\nbroken.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/5/ethers\">ethers(5)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}