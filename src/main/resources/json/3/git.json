{"name":"git","description":"Git - Perl interface to the Git version control system","body":"\n\n<h1 align=\"center\">Git</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git - Perl\ninterface to the Git version control system</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Git; <br>\nmy $version = Git::command_oneline('version'); <br>\ngit_cmd_try { Git::command_noisy('update-server-info') }\n<br>\n'%s failed w/ code %d'; <br>\nmy $repo = Git-&gt;repository (Directory =&gt;\n'/srv/git/cogito.git'); <br>\nmy @revs = $repo-&gt;command('rev-list', '--since=last\nmonday', '--all'); <br>\nmy ($fh, $c) = $repo-&gt;command_output_pipe('rev-list',\n'--since=last monday', '--all'); <br>\nmy $lastrev = &lt;$fh&gt;; chomp $lastrev; <br>\n$repo-&gt;command_close_pipe($fh, $c); <br>\nmy $lastrev = $repo-&gt;command_oneline( [ 'rev-list',\n'--all' ], <br>\nSTDERR =&gt; 0 ); <br>\nmy $sha1 = $repo-&gt;hash_and_insert_object('file.txt');\n<br>\nmy $tempfile = tempfile(); <br>\nmy $size = $repo-&gt;cat_blob($sha1, $tempfile);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides Perl scripts easy way to interface the Git version\ncontrol system. The modules have an easy and well-tested way\nto call arbitrary Git commands; in the future, the interface\nwill also provide specialized methods for doing easily\noperations which are not totally trivial to do over the\ngeneric command interface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While some\ncommands can be executed outside of any context (e.g.\n&rsquo;version&rsquo; or &rsquo;init&rsquo;), most\noperations require a repository context, which in practice\nmeans getting an instance of the Git object using the\n<b>repository()</b> constructor. (In the future, we will\nalso get a <b>new_repository()</b> constructor.) All\ncommands called as methods of the object are then executed\nin the context of the repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n&quot;repository state&quot; is also information about path\nto the attached working copy (unless you work with a bare\nrepository). You can also navigate inside of the working\ncopy using the &quot;wc_chdir()&quot; method. (Note that the\nrepository object is self-contained and will not change\nworking directory of your process.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>TODO:</small>\nIn the future, we might also do</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $remoterepo\n= $repo-&gt;remote_repository (Name =&gt; 'cogito', Branch\n=&gt; 'master'); <br>\n$remoterepo ||= Git-&gt;remote_repository\n('http://git.or.cz/cogito.git/'); <br>\nmy @refs = $remoterepo-&gt;refs();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently, the\nmodule merely wraps calls to external Git tools. In the\nfuture, it will provide a much faster way to interact with\nGit by linking directly to libgit. This should be completely\nopaque to the user, though (performance increase\nnotwithstanding).</p>\n\n<h2>CONSTRUCTORS\n<a name=\"CONSTRUCTORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">repository (\n<small>OPTIONS</small> ) <br>\nrepository ( <small>DIRECTORY</small> ) <br>\nrepository ()</p>\n\n<p style=\"margin-left:17%;\">Construct a new repository\nobject. &quot;OPTIONS&quot; are passed in a hash like\nfashion, using key and value pairs. Possible options\nare:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Repository</b>\n- Path to the Git repository.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>WorkingCopy</b>\n- Path to the associated working copy; not strictly required\nas many commands will happily crunch on a bare\nrepository.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>WorkingSubdir</b>\n- Subdirectory in the working copy to work inside. Just left\nundefined if you do not want to limit the scope of\noperations.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>Directory</b>\n- Path to the Git working directory in its usual setup. The\n&quot;.git&quot; directory is searched in the directory and\nall the parent directories; if found,\n&quot;WorkingCopy&quot; is set to the directory containing\nit and &quot;Repository&quot; to the &quot;.git&quot;\ndirectory itself. If no &quot;.git&quot; directory was\nfound, the &quot;Directory&quot; is assumed to be a bare\nrepository, &quot;Repository&quot; is set to point at it and\n&quot;WorkingCopy&quot; is left undefined. If the $GIT_DIR\nenvironment variable is set, things behave as expected as\nwell.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You should not\nuse both &quot;Directory&quot; and either of\n&quot;Repository&quot; and &quot;WorkingCopy&quot; - the\nresults of that are undefined.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Alternatively,\na directory path may be passed as a single scalar argument\nto the constructor; it is equivalent to setting only the\n&quot;Directory&quot; option field.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Calling the\nconstructor with no options whatsoever is equivalent to\ncalling it with &quot;Directory =&gt; '.'&quot;. In general,\nif you are building a standard porcelain command, simply\ndoing &quot;Git-&gt;repository()&quot; should do the right\nthing and setup the object to reflect exactly where the user\nis right now.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">command (\n<small>COMMAND</small> [, <small>ARGUMENTS...</small> ] )\n<br>\ncommand ( [ <small>COMMAND, ARGUMENTS...</small> ], { Opt\n=&gt; Val ... } )</p>\n\n<p style=\"margin-left:17%;\">Execute the given Git\n&quot;COMMAND&quot; (specify it without the\n&rsquo;git-&rsquo; prefix), optionally with the specified\nextra &quot;ARGUMENTS&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The second more\nelaborate form can be used if you want to further adjust the\ncommand execution. Currently, only one option is\nsupported:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>STDERR</small></b>\n- How to deal with the command&rsquo;s error output. By\ndefault (&quot;undef&quot;) it is delivered to the\ncaller&rsquo;s &quot;STDERR&quot;. A false value (0 or\n&rsquo;&rsquo;) will cause it to be thrown away. If you want\nto process it, you can get it in a filehandle you specify,\nbut you must be extremely careful; if the error output is\nnot very short and you want to read it in the same process\nas where you called &quot;command()&quot;, you are set up\nfor a nice deadlock!</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The method can\nbe called without any instance or on a specified Git\nrepository (in that case the command will be run in the\nrepository context).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In scalar\ncontext, it returns all the command output in a single\nstring (verbatim).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In array\ncontext, it returns an array containing lines printed to the\ncommand&rsquo;s stdout (without trailing newlines).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In both cases,\nthe command&rsquo;s stdin and stderr are the same as the\ncaller&rsquo;s.</p>\n\n<p style=\"margin-left:11%;\">command_oneline (\n<small>COMMAND</small> [, <small>ARGUMENTS...</small> ] )\n<br>\ncommand_oneline ( [ <small>COMMAND, ARGUMENTS...</small> ],\n{ Opt =&gt; Val ... } )</p>\n\n<p style=\"margin-left:17%;\">Execute the given\n&quot;COMMAND&quot; in the same way as <b>command()</b> does\nbut always return a scalar string containing the first line\nof the command&rsquo;s standard output.</p>\n\n<p style=\"margin-left:11%;\">command_output_pipe (\n<small>COMMAND</small> [, <small>ARGUMENTS...</small> ] )\n<br>\ncommand_output_pipe ( [ <small>COMMAND, ARGUMENTS...</small>\n], { Opt =&gt; Val ... } )</p>\n\n<p style=\"margin-left:17%;\">Execute the given\n&quot;COMMAND&quot; in the same way as <b>command()</b> does\nbut return a pipe filehandle from which the command output\ncan be read.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\ncan return &quot;($pipe, $ctx)&quot; in array context. See\n&quot;command_close_pipe()&quot; for details.</p>\n\n<p style=\"margin-left:11%;\">command_input_pipe (\n<small>COMMAND</small> [, <small>ARGUMENTS...</small> ] )\n<br>\ncommand_input_pipe ( [ <small>COMMAND, ARGUMENTS...</small>\n], { Opt =&gt; Val ... } )</p>\n\n<p style=\"margin-left:17%;\">Execute the given\n&quot;COMMAND&quot; in the same way as\n<b>command_output_pipe()</b> does but return an input pipe\nfilehandle instead; the command output is not captured.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\ncan return &quot;($pipe, $ctx)&quot; in array context. See\n&quot;command_close_pipe()&quot; for details.</p>\n\n<p style=\"margin-left:11%;\">command_close_pipe (\n<small>PIPE</small> [, <small>CTX</small> ] )</p>\n\n<p style=\"margin-left:17%;\">Close the &quot;PIPE&quot; as\nreturned from &quot;command_*_pipe()&quot;, checking whether\nthe command finished successfully. The optional\n&quot;CTX&quot; argument is required if you want to see the\ncommand name in the error message, and it is the second\nvalue returned by &quot;command_*_pipe()&quot; when called\nin array context. The call idiom is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my ($fh, $ctx)\n= $r-&gt;command_output_pipe('status'); <br>\nwhile (&lt;$fh&gt;) { ... } <br>\n$r-&gt;command_close_pipe($fh, $ctx);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that you\nshould not rely on whatever actually is in &quot;CTX&quot;;\ncurrently it is simply the command name but in future the\ncontext might have more complicated structure.</p>\n\n<p style=\"margin-left:11%;\">command_bidi_pipe (\n<small>COMMAND</small> [, <small>ARGUMENTS...</small> ]\n)</p>\n\n<p style=\"margin-left:17%;\">Execute the given\n&quot;COMMAND&quot; in the same way as\n<b>command_output_pipe()</b> does but return both an input\npipe filehandle and an output pipe filehandle.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nwill return &quot;($pid, $pipe_in, $pipe_out, $ctx)&quot;.\nSee &quot;command_close_bidi_pipe()&quot; for details.</p>\n\n<p style=\"margin-left:11%;\">command_close_bidi_pipe (\n<small>PID, PIPE_IN, PIPE_OUT</small> [, <small>CTX</small>\n] )</p>\n\n<p style=\"margin-left:17%;\">Close the &quot;PIPE_IN&quot;\nand &quot;PIPE_OUT&quot; as returned from\n&quot;command_bidi_pipe()&quot;, checking whether the\ncommand finished successfully. The optional &quot;CTX&quot;\nargument is required if you want to see the command name in\nthe error message, and it is the fourth value returned by\n&quot;command_bidi_pipe()&quot;. The call idiom is:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my ($pid, $in,\n$out, $ctx) = $r-&gt;command_bidi_pipe('cat-file\n--batch-check'); <br>\nprint $out &quot;000000000\\n&quot;; <br>\nwhile (&lt;$in&gt;) { ... } <br>\n$r-&gt;command_close_bidi_pipe($pid, $in, $out, $ctx);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that you\nshould not rely on whatever actually is in &quot;CTX&quot;;\ncurrently it is simply the command name but in future the\ncontext might have more complicated structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;PIPE_IN&quot;\nand &quot;PIPE_OUT&quot; may be &quot;undef&quot; if they\nhave been closed prior to calling this function. This may be\nuseful in a query-response type of commands where caller\nfirst writes a query and later reads response, eg:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my ($pid, $in,\n$out, $ctx) = $r-&gt;command_bidi_pipe('cat-file\n--batch-check'); <br>\nprint $out &quot;000000000\\n&quot;; <br>\nclose $out; <br>\nwhile (&lt;$in&gt;) { ... } <br>\n$r-&gt;command_close_bidi_pipe($pid, $in, undef, $ctx);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This idiom may\nprevent potential dead locks caused by data sent to the\noutput pipe not being flushed and thus not reaching the\nexecuted command.</p>\n\n<p style=\"margin-left:11%;\">command_noisy (\n<small>COMMAND</small> [, <small>ARGUMENTS...</small> ]\n)</p>\n\n<p style=\"margin-left:17%;\">Execute the given\n&quot;COMMAND&quot; in the same way as <b>command()</b> does\nbut do not capture the command output - the standard output\nis not redirected and goes to the standard output of the\ncaller application.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">While the\nmethod is called <b>command_noisy()</b>, you might want to\nas well use it for the most silent Git commands which you\nknow will never pollute your stdout but you want to avoid\nthe overhead of the pipe setup when calling them.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nreturns only after the command has finished running.</p>\n\n<p style=\"margin-left:11%;\">version ()</p>\n\n<p style=\"margin-left:17%;\">Return the Git version in\nuse.</p>\n\n<p style=\"margin-left:11%;\">exec_path ()</p>\n\n<p style=\"margin-left:17%;\">Return path to the Git\nsub-command executables (the same as &quot;git\n--exec-path&quot;). Useful mostly only internally.</p>\n\n<p style=\"margin-left:11%;\">html_path ()</p>\n\n<p style=\"margin-left:17%;\">Return path to the Git html\ndocumentation (the same as &quot;git --html-path&quot;).\nUseful mostly only internally.</p>\n\n<p style=\"margin-left:11%;\">get_tz_offset (\n<small>TIME</small> )</p>\n\n<p style=\"margin-left:17%;\">Return the time zone offset\nfrom <small>GMT</small> in the form +/-HHMM where\n<small>HH</small> is the number of hours from\n<small>GMT</small> and <small>MM</small> is the number of\nminutes. This is the equivalent of what\nstrftime(&quot;%z&quot;, ...) would provide on a\n<small>GNU</small> platform.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<small>TIME</small> is not supplied, the current local time\nis used.</p>\n\n<p style=\"margin-left:11%;\">get_record ( <small>FILEHANDLE,\nINPUT_RECORD_SEPARATOR</small> )</p>\n\n<p style=\"margin-left:17%;\">Read one record from\n<small>FILEHANDLE</small> delimited by\n<small>INPUT_RECORD_SEPARATOR,</small> removing any trailing\n<small>INPUT_RECORD_SEPARATOR.</small></p>\n\n<p style=\"margin-left:11%;\">prompt ( <small>PROMPT ,\nISPASSWORD</small> )</p>\n\n<p style=\"margin-left:17%;\">Query user &quot;PROMPT&quot;\nand return answer from user.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Honours\n<small>GIT_ASKPASS</small> and <small>SSH_ASKPASS</small>\nenvironment variables for querying the user. If no *_ASKPASS\nvariable is set or an error occurred, the terminal is tried\nas a fallback. If &quot;ISPASSWORD&quot; is set and true,\nthe terminal disables echo.</p>\n\n<p style=\"margin-left:11%;\">repo_path ()</p>\n\n<p style=\"margin-left:17%;\">Return path to the git\nrepository. Must be called on a repository instance.</p>\n\n<p style=\"margin-left:11%;\">wc_path ()</p>\n\n<p style=\"margin-left:17%;\">Return path to the working\ncopy. Must be called on a repository instance.</p>\n\n<p style=\"margin-left:11%;\">wc_subdir ()</p>\n\n<p style=\"margin-left:17%;\">Return path to the subdirectory\ninside of a working copy. Must be called on a repository\ninstance.</p>\n\n<p style=\"margin-left:11%;\">wc_chdir (\n<small>SUBDIR</small> )</p>\n\n<p style=\"margin-left:17%;\">Change the working copy\nsubdirectory to work within. The &quot;SUBDIR&quot; is\nrelative to the working copy root directory (not the current\nsubdirectory). Must be called on a repository instance\nattached to a working copy and the directory must exist.</p>\n\n<p style=\"margin-left:11%;\">config (\n<small>VARIABLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Retrieve the configuration\n&quot;VARIABLE&quot; in the same manner as\n&quot;config&quot; does. In scalar context requires the\nvariable to be set only one time (exception is thrown\notherwise), in array context returns allows the variable to\nbe set multiple times and returns all the values.</p>\n\n<p style=\"margin-left:11%;\">config_bool (\n<small>VARIABLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Retrieve the bool configuration\n&quot;VARIABLE&quot;. The return value is usable as a\nboolean in perl (and &quot;undef&quot; if it&rsquo;s not\ndefined, of course).</p>\n\n<p style=\"margin-left:11%;\">config_path (\n<small>VARIABLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Retrieve the path configuration\n&quot;VARIABLE&quot;. The return value is an expanded path\nor &quot;undef&quot; if it&rsquo;s not defined.</p>\n\n<p style=\"margin-left:11%;\">config_int (\n<small>VARIABLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Retrieve the integer\nconfiguration &quot;VARIABLE&quot;. The return value is\nsimple decimal number. An optional value suffix of\n&rsquo;k&rsquo;, &rsquo;m&rsquo;, or &rsquo;g&rsquo; in the\nconfig file will cause the value to be multiplied by 1024,\n1048576 (1024^2), or 1073741824 (1024^3) prior to output. It\nwould return &quot;undef&quot; if configuration variable is\nnot defined.</p>\n\n<p style=\"margin-left:11%;\">config_regexp (\n<small>RE</small> )</p>\n\n<p style=\"margin-left:17%;\">Retrieve the list of\nconfiguration key names matching the regular expression\n&quot;RE&quot;. The return value is a list of strings\nmatching this regex.</p>\n\n<p style=\"margin-left:11%;\">get_colorbool (\n<small>NAME</small> )</p>\n\n<p style=\"margin-left:17%;\">Finds if color should be used\nfor NAMEd operation from the configuration, and returns\nboolean (true for &quot;use color&quot;, false for &quot;do\nnot use color&quot;).</p>\n\n<p style=\"margin-left:11%;\">get_color ( <small>SLOT,\nCOLOR</small> )</p>\n\n<p style=\"margin-left:17%;\">Finds color for\n<small>SLOT</small> from the configuration, while defaulting\nto <small>COLOR,</small> and returns the <small>ANSI</small>\ncolor escape sequence:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">print\n$repo-&gt;get_color(&quot;color.interactive.prompt&quot;,\n&quot;underline blue white&quot;); <br>\nprint &quot;some text&quot;; <br>\nprint $repo-&gt;get_color(&quot;&quot;,\n&quot;normal&quot;);</p>\n\n<p style=\"margin-left:11%;\">remote_refs (\n<small>REPOSITORY</small> [, <small>GROUPS</small> [,\n<small>REFGLOBS</small> ] ] )</p>\n\n<p style=\"margin-left:17%;\">This function returns a hashref\nof refs stored in a given remote repository. The hash is in\nthe format &quot;refname =\\&quot; hash&gt;. For tags, the\n&quot;refname&quot; entry contains the tag object while a\n&quot;refname^{}&quot; entry gives the tagged objects.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;REPOSITORY&quot;\nhas the same meaning as the appropriate\n&quot;git-ls-remote&quot; argument; either a\n<small>URL</small> or a remote name (if called on a\nrepository instance). &quot;GROUPS&quot; is an optional\narrayref that can contain &rsquo;tags&rsquo; to return all\nthe tags and/or &rsquo;heads&rsquo; to return all the heads.\n&quot;REFGLOB&quot; is an optional array of strings\ncontaining a shell-like glob to further limit the refs\nreturned in the hash; the meaning is again the same as the\nappropriate &quot;git-ls-remote&quot; argument.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nmay or may not be called on a repository instance. In the\nformer case, remote names as defined in the repository are\nrecognized as repository specifiers.</p>\n\n<p style=\"margin-left:11%;\">ident ( <small>TYPE</small> |\n<small>IDENTSTR</small> ) <br>\nident_person ( <small>TYPE</small> | <small>IDENTSTR</small>\n| <small>IDENTARRAY</small> )</p>\n\n<p style=\"margin-left:17%;\">This suite of functions\nretrieves and parses ident information, as stored in the\ncommit and tag objects or produced by &quot;var\nGIT_type_IDENT&quot; (thus &quot;TYPE&quot; can be either\n<i>author</i> or <i>committer</i>; case is\ninsignificant).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n&quot;ident&quot; method retrieves the ident information\nfrom &quot;git var&quot; and either returns it as a scalar\nstring or as an array with the fields parsed. Alternatively,\nit can take a prepared ident string (e.g. from the commit\nobject) and just parse it.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;ident_person&quot;\nreturns the person part of the ident - name and email; it\ncan take the same arguments as &quot;ident&quot; or the\narray returned by &quot;ident&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The synopsis is\nlike:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my ($name,\n$email, $time_tz) = ident('author'); <br>\n&quot;$name &lt;$email&gt;&quot; eq ident_person('author');\n<br>\n&quot;$name &lt;$email&gt;&quot; eq ident_person($name);\n<br>\n$time_tz =~ /^\\d+ [+-]\\d{4}$/;</p>\n\n<p style=\"margin-left:11%;\">hash_object ( <small>TYPE,\nFILENAME</small> )</p>\n\n<p style=\"margin-left:17%;\">Compute the <small>SHA1</small>\nobject id of the given &quot;FILENAME&quot; considering it\nis of the &quot;TYPE&quot; object type (&quot;blob&quot;,\n&quot;commit&quot;, &quot;tree&quot;).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The method can\nbe called without any instance or on a specified Git\nrepository, it makes zero difference.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nreturns the <small>SHA1</small> hash.</p>\n\n<p style=\"margin-left:11%;\">hash_and_insert_object (\n<small>FILENAME</small> )</p>\n\n<p style=\"margin-left:17%;\">Compute the <small>SHA1</small>\nobject id of the given &quot;FILENAME&quot; and add the\nobject to the object database.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The function\nreturns the <small>SHA1</small> hash.</p>\n\n<p style=\"margin-left:11%;\">cat_blob ( <small>SHA1,\nFILEHANDLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Prints the contents of the blob\nidentified by &quot;SHA1&quot; to &quot;FILEHANDLE&quot; and\nreturns the number of bytes printed.</p>\n\n<p style=\"margin-left:11%;\">credential_read(\n<small>FILEHANDLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Reads credential key-value\npairs from &quot;FILEHANDLE&quot;. Reading stops at\n<small>EOF</small> or when an empty line is encountered.\nEach line must be of the form &quot;key=value&quot; with a\nnon-empty key. Function returns hash with all read values.\nAny white space (other than new-line character) is\npreserved.</p>\n\n<p style=\"margin-left:11%;\">credential_write(\n<small>FILEHANDLE, CREDENTIAL_HASHREF</small> )</p>\n\n<p style=\"margin-left:17%;\">Writes credential key-value\npairs from hash referenced by &quot;CREDENTIAL_HASHREF&quot;\nto &quot;FILEHANDLE&quot;. Keys and values cannot contain\nnew-lines or <small>NUL</small> bytes characters, and key\ncannot contain equal signs nor be empty (if they do\nError::Simple is thrown). Any white space is preserved. If\nvalue for a key is &quot;undef&quot;, it will be\nskipped.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If 'url' key\nexists it will be written first. (All the other key-value\npairs are written in sorted order but you should not depend\non that). Once all lines are written, an empty line is\nprinted.</p>\n\n<p style=\"margin-left:11%;\">credential(\n<small>CREDENTIAL_HASHREF</small> [,\n<small>OPERATION</small> ] ) <br>\ncredential( <small>CREDENTIAL_HASHREF, CODE</small> )</p>\n\n<p style=\"margin-left:17%;\">Executes &quot;git\ncredential&quot; for a given set of credentials and\nspecified operation. In both forms\n&quot;CREDENTIAL_HASHREF&quot; needs to be a reference to a\nhash which stores credentials. Under certain conditions the\nhash can change.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In the first\nform, &quot;OPERATION&quot; can be 'fill', 'approve' or\n'reject', and function will execute corresponding &quot;git\ncredential&quot; sub-command. If it&rsquo;s omitted 'fill'\nis assumed. In case of 'fill' the values stored in\n&quot;CREDENTIAL_HASHREF&quot; will be changed to the ones\nreturned by the &quot;git credential fill&quot; command. The\nusual usage would look something like:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my %cred = (\n<br>\n'protocol' =&gt; 'https', <br>\n'host' =&gt; 'example.com', <br>\n'username' =&gt; 'bob' <br>\n); <br>\nGit::credential \\%cred; <br>\nif (try_to_authenticate($cred{'username'},\n$cred{'password'})) { <br>\nGit::credential \\%cred, 'approve'; <br>\n... do more stuff ... <br>\n} else { <br>\nGit::credential \\%cred, 'reject'; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In the second\nform, &quot;CODE&quot; needs to be a reference to a\nsubroutine. The function will execute &quot;git credential\nfill&quot; to fill the provided credential hash, then call\n&quot;CODE&quot; with &quot;CREDENTIAL_HASHREF&quot; as the\nsole argument. If &quot;CODE&quot;&rsquo;s return value is\ndefined, the function will execute &quot;git credential\napprove&quot; (if return value yields true) or &quot;git\ncredential reject&quot; (if return value is false). If the\nreturn value is undef, nothing at all is executed; this is\nuseful, for example, if the credential could neither be\nverified nor rejected due to an unrelated network error. The\nreturn value is the same as what &quot;CODE&quot; returns.\nWith this form, the usage might look as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if\n(Git::credential { <br>\n'protocol' =&gt; 'https', <br>\n'host' =&gt; 'example.com', <br>\n'username' =&gt; 'bob' <br>\n}, sub { <br>\nmy $cred = shift; <br>\nreturn !!try_to_authenticate($cred-&gt;{'username'}, <br>\n$cred-&gt;{'password'}); <br>\n}) { <br>\n... do more stuff ... <br>\n}</p>\n\n<p style=\"margin-left:11%;\">temp_acquire (\n<small>NAME</small> )</p>\n\n<p style=\"margin-left:17%;\">Attempts to retrieve the\ntemporary file mapped to the string &quot;NAME&quot;. If an\nassociated temp file has not been created this session or\nwas closed, it is created, cached, and set for autoflush and\nbinmode.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Internally\nlocks the file mapped to &quot;NAME&quot;. This lock must be\nreleased with &quot;temp_release()&quot; when the temp file\nis no longer needed. Subsequent attempts to retrieve\ntemporary files mapped to the same &quot;NAME&quot; while\nstill locked will cause an error. This locking mechanism\nprovides a weak guarantee and is not threadsafe. It does\nprovide some error checking to help prevent temp file refs\nwriting over one another.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In general, the\nFile::Handle returned should not be closed by consumers as\nit defeats the purpose of this caching mechanism. If you\nneed to close the temp file handle, then you should use\nFile::Temp or another temp file faculty directly. If a\nhandle is closed and then requested again, then a warning\nwill issue.</p>\n\n<p style=\"margin-left:11%;\">temp_is_locked (\n<small>NAME</small> )</p>\n\n<p style=\"margin-left:17%;\">Returns true if the internal\nlock created by a previous &quot;temp_acquire()&quot; call\nwith &quot;NAME&quot; is still in effect.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\ntemp_acquire is called on a &quot;NAME&quot;, it internally\nlocks the temporary file mapped to &quot;NAME&quot;. That\nlock will not be released until &quot;temp_release()&quot;\nis called with either the original &quot;NAME&quot; or the\nFile::Handle that was returned from the original call to\ntemp_acquire.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Subsequent\nattempts to call &quot;temp_acquire()&quot; with the same\n&quot;NAME&quot; will fail unless there has been an\nintervening &quot;temp_release()&quot; call for that\n&quot;NAME&quot; (or its corresponding File::Handle that was\nreturned by the original &quot;temp_acquire()&quot;\ncall).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If true is\nreturned by &quot;temp_is_locked()&quot; for a\n&quot;NAME&quot;, an attempt to &quot;temp_acquire()&quot;\nthe same &quot;NAME&quot; will cause an error unless\n&quot;temp_release&quot; is first called on that\n&quot;NAME&quot; (or its corresponding File::Handle that was\nreturned by the original &quot;temp_acquire()&quot;\ncall).</p>\n\n<p style=\"margin-left:11%;\">temp_release (\n<small>NAME</small> ) <br>\ntemp_release ( <small>FILEHANDLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Releases a lock acquired\nthrough &quot;temp_acquire()&quot;. Can be called either\nwith the &quot;NAME&quot; mapping used when acquiring the\ntemp file or with the &quot;FILEHANDLE&quot; referencing a\nlocked temp file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Warns if an\nattempt is made to release a file that is not locked.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The temp file\nwill be truncated before being released. This can help to\nreduce disk I/O where the system is smart enough to detect\nthe truncation while data is in the output buffers. Beware\nthat after the temp file is released and truncated, any\noperations on that file may fail miserably until it is\nre-acquired. All contents are lost between each release and\nacquire mapped to the same string.</p>\n\n<p style=\"margin-left:11%;\">temp_reset (\n<small>FILEHANDLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Truncates and resets the\nposition of the &quot;FILEHANDLE&quot;.</p>\n\n<p style=\"margin-left:11%;\">temp_path ( <small>NAME</small>\n) <br>\ntemp_path ( <small>FILEHANDLE</small> )</p>\n\n<p style=\"margin-left:17%;\">Returns the filename associated\nwith the given tempfile.</p>\n\n<p style=\"margin-left:11%;\">prefix_lines ( <small>PREFIX,\nSTRING</small> [, <small>STRING...</small> ])</p>\n\n<p style=\"margin-left:17%;\">Prefixes lines in\n&quot;STRING&quot; with &quot;PREFIX&quot;.</p>\n\n<p style=\"margin-left:11%;\">unquote_path (\n<small>PATH</small> )</p>\n\n<p style=\"margin-left:17%;\">Unquote a quoted path\ncontaining c-escapes as returned by ls-files etc. when not\nusing -z or when parsing the output of diff -u.</p>\n\n<p style=\"margin-left:11%;\">get_comment_line_char ( )</p>\n\n<p style=\"margin-left:17%;\">Gets the core.commentchar\nconfiguration value. The value falls-back to &rsquo;#&rsquo;\nif core.commentchar is set to &rsquo;auto&rsquo;.</p>\n\n<p style=\"margin-left:11%;\">comment_lines (\n<small>STRING</small> [, <small>STRING...</small> ])</p>\n\n<p style=\"margin-left:17%;\">Comments lines following\ncore.commentchar configuration.</p>\n\n<h2>ERROR HANDLING\n<a name=\"ERROR HANDLING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All functions\nare supposed to throw Perl exceptions in case of errors. See\nthe Error module on how to catch those. Most exceptions are\nmere Error::Simple instances.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However, the\n&quot;command()&quot;, &quot;command_oneline()&quot; and\n&quot;command_noisy()&quot; functions suite can throw\n&quot;Git::Error::Command&quot; exceptions as well: those\nare thrown when the external command returns an error code\nand contain the error code as well as access to the captured\ncommand&rsquo;s output. The exception class provides the\nusual &quot;stringify&quot; and &quot;value&quot;\n(command&rsquo;s exit code) methods and in addition also a\n&quot;cmd_output&quot; method that returns either an array\nor a string with the captured command output (depending on\nthe original function call context;\n&quot;command_noisy()&quot; returns &quot;undef&quot;) and\n$&lt;cmdline&gt; which returns the command and its arguments\n(but without proper quoting).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\n&quot;command_*_pipe()&quot; functions cannot throw this\nexception since it has no idea whether the command failed or\nnot. You will only find out at the time you\n&quot;close&quot; the pipe; if you want to have that\nautomated, use &quot;command_close_pipe()&quot;, which can\nthrow the exception. <br>\ngit_cmd_try { <small>CODE</small> }\n<small>ERRMSG</small></p>\n\n<p style=\"margin-left:17%;\">This magical statement will\nautomatically catch any &quot;Git::Error::Command&quot;\nexceptions thrown by &quot;CODE&quot; and make your program\ndie with &quot;ERRMSG&quot; on its lips; the message will\nhave %s substituted for the command line and %d for the exit\nstatus. This statement is useful mostly for producing more\nuser-friendly error messages.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In case of no\nexception caught the statement returns\n&quot;CODE&quot;&rsquo;s return value.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that this\nis the only auto-exported function.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright 2006\nby Petr Baudis &lt;pasky@suse.cz&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\nfree software; it may be used, copied, modified and\ndistributed under the terms of the <small>GNU</small>\nGeneral Public Licence, either version 2, or (at your\noption) any later version.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONSTRUCTORS\">CONSTRUCTORS</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#ERROR HANDLING\">ERROR HANDLING</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}