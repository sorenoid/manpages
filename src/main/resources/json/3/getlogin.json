{"name":"getlogin","description":"getlogin, getlogin_r, cuserid - get username","body":"\n\n<h1 align=\"center\">GETLOGIN</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getlogin,\ngetlogin_r, cuserid - get username</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*getlogin(void); <br>\nint getlogin_r(char *</b><i>buf</i><b>, size_t</b>\n<i>bufsize</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdio.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*cuserid(char *</b><i>string</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getlogin_r</b>():\n_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;199506L</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cuserid</b>():\n<br>\nSince glibc 2.24: <br>\n(_XOPEN_SOURCE &amp;&amp; ! (_POSIX_C_SOURCE &gt;= 200112L)\n<br>\n|| _GNU_SOURCE <br>\nUp to and including glibc 2.23: <br>\n_XOPEN_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getlogin</b>()\nreturns a pointer to a string containing the name of the\nuser logged in on the controlling terminal of the process,\nor a null pointer if this information cannot be determined.\nThe string is statically allocated and might be overwritten\non subsequent calls to this function or to\n<b>cuserid</b>().</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getlogin_r</b>()\nreturns this same username in the array <i>buf</i> of size\n<i>bufsize</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>cuserid</b>()\nreturns a pointer to a string containing a username\nassociated with the effective user ID of the process. If\n<i>string</i> is not a null pointer, it should be an array\nthat can hold at least <b>L_cuserid</b> characters; the\nstring is returned in this array. Otherwise, a pointer to a\nstring in a static area is returned. This string is\nstatically allocated and might be overwritten on subsequent\ncalls to this function or to <b>getlogin</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>L_cuserid</b> is an integer constant that indicates how\nlong an array you might need to store a username.\n<b>L_cuserid</b> is declared in <i>&lt;stdio.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nlet your program identify positively the user who is running\n(<b>cuserid</b>()) or the user who logged in this session\n(<b>getlogin</b>()). (These can differ when set-user-ID\nprograms are involved.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For most\npurposes, it is more useful to use the environment variable\n<b>LOGNAME</b> to find out who the user is. This is more\nflexible precisely because the user can set <b>LOGNAME</b>\narbitrarily.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getlogin</b>()\nreturns a pointer to the username when successful, and NULL\non failure, with <i>errno</i> set to indicate the cause of\nthe error. <b>getlogin_r</b>() returns 0 when successful,\nand nonzero on failure.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX\nspecifies:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system-wide limit on the total number of open files\nhas been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENXIO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process has no controlling terminal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ERANGE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(getlogin_r) The length of the username, including the\nterminating null byte ('\\0'), is larger than\n<i>bufsize</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux/glibc\nalso has:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">There was no corresponding entry\nin the utmp-file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Insufficient memory to allocate passwd structure.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOTTY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Standard input didn&rsquo;t refer to a terminal. (See\nBUGS.)</p> </td></tr>\n</table>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/etc/passwd</i></p>\n\n<p style=\"margin-left:22%;\">password database file</p>\n\n<p style=\"margin-left:11%;\"><i>/var/run/utmp</i></p>\n\n<p style=\"margin-left:22%;\">(traditionally\n<i>/etc/utmp</i>; some libc versions used\n<i>/var/adm/utmp</i>)</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3315661.png\" alt=\"Image grohtml-3315661.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the above\ntable, <i>utent</i> in <i>race:utent</i> signifies that if\nany of the functions <a href=\"https://man.page/3/setutent\">setutent(3)</a>, <a href=\"https://man.page/3/getutent\">getutent(3)</a>,\nor <a href=\"https://man.page/3/endutent\">endutent(3)</a> are used in parallel in different\nthreads of a program, then data races could occur.\n<b>getlogin</b>() and <b>getlogin_r</b>() call those\nfunctions, so we use race:utent to remind users.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getlogin</b>()\nand <b>getlogin_r</b>(): POSIX.1-2001, POSIX.1-2008.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">System V has a\n<b>cuserid</b>() function which uses the real user ID rather\nthan the effective user ID. The <b>cuserid</b>() function\nwas included in the 1988 version of POSIX, but removed from\nthe 1990 version. It was present in SUSv2, but removed in\nPOSIX.1-2001.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">OpenBSD has\n<b>getlogin</b>() and <b>setlogin</b>(), and a username\nassociated with a session, even if it has no controlling\nterminal.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unfortunately,\nit is often rather easy to fool <b>getlogin</b>(). Sometimes\nit does not work at all, because some program messed up the\nutmp file. Often, it gives only the first 8 characters of\nthe login name. The user currently logged in on the\ncontrolling terminal of our program need not be the user who\nstarted it. Avoid <b>getlogin</b>() for security-related\npurposes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that glibc\ndoes not follow the POSIX specification and uses\n<i>stdin</i> instead of <i>/dev/tty</i>. A bug. (Other\nrecent systems, like SunOS 5.8 and HP-UX 11.11 and FreeBSD\n4.8 all return the login name also when <i>stdin</i> is\nredirected.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Nobody knows\nprecisely what <b>cuserid</b>() does; avoid it in portable\nprograms. Or avoid it altogether: use\n<i>getpwuid(geteuid())</i> instead, if that is what you\nmeant. <b>Do not use cuserid</b>().</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/logname\">logname(1)</a>,\n<a href=\"https://man.page/2/geteuid\">geteuid(2)</a>, <a href=\"https://man.page/2/getuid\">getuid(2)</a>, <a href=\"https://man.page/5/utmp\">utmp(5)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}