{"name":"redland","description":"redland -\nResource Description Framework (RDF) Library\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n\n<small>1.0.16</small>","body":"\n\n<h1 align=\"center\">redland</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">redland -\nResource Description Framework (RDF) Library</p>\n\n<h2>VERSION\n<a name=\"VERSION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>1.0.16</small></p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;redland.h&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>redland</b>\nis a library providing support for the Resource Description\nFramework ( <small>RDF</small> ) written in\n<small>ANSI</small> C with APIs in several other\nlanguages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage lists most of the redland public <small>API</small>\nfunctions but does not claim to be a complete summary of the\nentire <small>API</small> . For the complete\n<small>API</small> with full details of the function\ninterface, see the <small>HTML API</small> documentation\neither on the Redland web site at &lt;http://librdf.org/&gt;\nor with the software release in the docs/api directory.</p>\n\n<h2>FUNCTIONS\n<a name=\"FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\ndefined by <b>redland</b> are all defined with the\n&quot;librdf_&quot; prefix</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nworld</b> <br>\nlibrdf_world* <b>librdf_new_world</b>(<i>void</i>) <br>\nvoid <b>librdf_free_world</b>(librdf_world* <i>world</i>)\n<br>\nvoid <b>librdf_world_open</b>(librdf_world* <i>world</i>)\n<br>\nvoid <b>librdf_world_set_error</b>(librdf_world*\n<i>world</i>, void* <i>user_data</i>, void <br>\n(*<i>error_fn</i>)(void* <i>user_data</i>, const char*\n<i>msg</i>, ...)) <br>\nvoid <b>librdf_world_set_warning</b>(librdf_world*\n<i>world</i>, void* <i>user_data</i>, <br>\nvoid (*<i>warning_fn</i>)(void* <i>user_data</i>, const\nchar* <i>msg</i>, ...)) <br>\nvoid <b>librdf_world_set_digest</b>(librdf_world*, const\nchar* <i>name</i>) <br>\nvoid <b>librdf_world_set_uris_hash</b>(librdf_world*\n<i>world</i>, librdf_hash* <i><br>\nuris_hash</i>) <br>\nconst char* <b>librdf_world_get_feature</b>(librdf_world*\n<i>world</i>, librdf_uri* <i><br>\nfeature</i>) <br>\nint <b>librdf_world_set_feature</b>(librdf_world*\n<i>world</i>, librdf_uri* <i>feature</i>, <br>\nconst char* <i>value</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\niterator</b> <br>\nlibrdf_iterator* <b>librdf_new_iterator</b>(librdf_world*\n<i>world</i>, void* <i><br>\ncontext</i>, int (*<i>is_end</i>)(void*), void*\n(*<i>get_next</i>)(void*), void <br>\n(*<i>finished</i>)(void*)) <br>\nvoid <b>librdf_free_iterator</b>(librdf_iterator*) <br>\nint <b>librdf_iterator_end</b>(librdf_iterator*\n<i>iterator</i>) <br>\nint <b>librdf_iterator_finished</b>(librdf_iterator*\n<i>iterator</i>) <br>\nint <b>librdf_iterator_next</b>(librdf_iterator*\n<i>iterator</i>) <br>\nvoid* <b>librdf_iterator_get_object</b>(librdf_iterator*\n<i>iterator</i>) <br>\nvoid* <b>librdf_iterator_get_context</b>(librdf_iterator*\n<i>iterator</i>) <br>\nvoid* <b>librdf_iterator_get_key</b>(librdf_iterator*\n<i>iterator</i>) <br>\nvoid* <b>librdf_iterator_get_value</b>(librdf_iterator*\n<i>iterator</i>) <br>\nint <b>librdf_iterator_add_map</b>(librdf_iterator*\n<i>iterator</i>, void* <br>\n(*<i>fn</i>)(void* <i>context</i>, void* <i>item</i>), void*\n<i>context</i>) <br>\nvoid*\n<b>librdf_iterator_map_remove_duplicate_nodes</b>(void*\n<i>item</i>, void* <i><br>\nuser_data</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\ndigest</b> <br>\nvoid <b>librdf_digest_register_factory</b>(librdf_world*\n<i>world</i>, const char* <i><br>\nname</i>, void (*<i>factory</i>) (librdf_digest_factory*))\n<br>\nlibrdf_digest_factory*\n<b>librdf_get_digest_factory</b>(librdf_world* <i>world</i>,\n<br>\nconst char* <i>name</i>) <br>\nlibrdf_digest* <b>librdf_new_digest</b>(librdf_world*\n<i>world</i>, char* <i>name</i>) <br>\nlibrdf_digest*\n<b>librdf_new_digest_from_factory</b>(librdf_world*\n<i>world</i>, <br>\nlibrdf_digest_factory* <i>factory</i>) <br>\nvoid <b>librdf_free_digest</b>(librdf_digest* <i>digest</i>)\n<br>\nvoid <b>librdf_digest_init</b>(librdf_digest* <i>digest</i>)\n<br>\nvoid <b>librdf_digest_update</b>(librdf_digest*\n<i>digest</i>, unsigned char* <i>buf</i>, <br>\nsize_t <i>length</i>) <br>\nvoid <b>librdf_digest_final</b>(librdf_digest*\n<i>digest</i>) <br>\nvoid* <b>librdf_digest_get_digest</b>(librdf_digest*\n<i>digest</i>) <br>\nchar* <b>librdf_digest_to_string</b>(librdf_digest*\n<i>digest</i>) <br>\nvoid <b>librdf_digest_print</b>(librdf_digest*\n<i>digest</i>, FILE* <i>fh</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nuri</b> <br>\nlibrdf_uri* <b>librdf_new_uri</b>(librdf_world*\n<i>world</i>, const unsigned char * <i><br>\nstring</i>) <br>\nlibrdf_uri* <b>librdf_new_uri_from_uri</b>(librdf_uri*\n<i>uri</i>) <br>\nlibrdf_uri*\n<b>librdf_new_uri_from_uri_local_name</b>(librdf_uri*\n<i>uri</i>, const <br>\nunsigned char* <i>local_name</i>) <br>\nvoid <b>librdf_free_uri</b>(librdf_uri* <i>uri</i>) <br>\nunsigned char* <b>librdf_uri_as_string</b>(librdf_uri*\n<i>uri</i>) <br>\nunsigned char*\n<b>librdf_uri_as_counted_string</b>(librdf_uri* <i>uri</i>,\nsize_t* <i><br>\nlen_p</i>) <br>\nlibrdf_digest* <b>librdf_uri_get_digest</b>(librdf_uri*\n<i>uri</i>) <br>\nvoid librdf_uri_print&gt;(librdf_uri* <i>uri</i>, FILE*\n<i>fh</i>) <br>\nunsigned char* <b>librdf_uri_to_string</b>(librdf_uri*\n<i>uri</i>) <br>\nunsigned char*\n<b>librdf_uri_to_counted_string</b>(librdf_uri* <i>uri</i>,\nsize_t* <i><br>\nlen_p</i>) <br>\nint <b>librdf_uri_equals</b>(librdf_uri* <i>first_uri</i>,\nlibrdf_uri* <i>second_uri</i>) <br>\nint <b>librdf_uri_is_file_uri</b>(librdf_uri* <i>uri</i>)\n<br>\nconst char* <b>librdf_uri_to_filename</b>(librdf_uri*\n<i>uri</i>) <br>\nlibrdf_uri* <b>librdf_new_uri_normalised_to_base</b>(const\nunsigned char* <i><br>\nuri_string</i>, librdf_uri* <i>source_uri</i>, librdf_uri*\n<i>base_uri</i>) <br>\nlibrdf_uri*\n<b>librdf_new_uri_relative_to_base</b>(librdf_uri*\n<i>base_uri</i>, const <br>\nunsigned char* <i>uri_string</i>) <br>\nlibrdf_uri*\n<b>librdf_new_uri_from_filename</b>(librdf_world*\n<i>world</i>, const <br>\nchar* <i>filename</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nnode</b> <br>\nlibrdf_node* <b>librdf_new_node</b>(librdf_world*\n<i>world</i>) <br>\nlibrdf_node*\n<b>librdf_new_node_from_uri_string</b>(librdf_world*\n<i>world</i>, const <br>\nchar* <i>string</i>) <br>\nlibrdf_node* <b>librdf_new_node_from_uri</b>(librdf_world*\n<i>world</i>, librdf_uri* <i><br>\nuri</i>) <br>\nlibrdf_node*\n<b>librdf_new_node_from_uri_local_name</b>(librdf_world*\n<i>world</i>, <br>\nlibrdf_uri* <i>uri</i>, const char* <i>local_name</i>) <br>\nlibrdf_node*\n<b>librdf_new_node_from_normalised_uri_string</b>(librdf_world*\n<i><br>\nworld</i>, const char* <i>uri_string</i>, librdf_uri*\n<i>source_uri</i>, librdf_uri* <i><br>\nbase_uri</i>) <br>\nlibrdf_node*\n<b>librdf_new_node_from_literal</b>(librdf_world*\n<i>world</i>, const <br>\nchar* <i>string</i>, const char* <i>xml_language</i>, int\n<i>xml_space</i>, int <i>is_wf_xml</i>) <br>\nlibrdf_node*\n<b>librdf_new_node_from_typed_literal</b>(librdf_world*\n<i>world</i>, <br>\nconst unsigned char* <i>string</i>, const char*\n<i>xml_language</i>, librdf_uri* <i><br>\ndatatype_uri</i>) <br>\nlibrdf_node*\n<b>librdf_new_node_from_blank_identifier</b>(librdf_world*\n<i>world</i>, <br>\nconst unsigned char* <i>identifier</i>) <br>\nlibrdf_node* <b>librdf_new_node_from_node</b>(librdf_node*\n<i>node</i>) <br>\nvoid <b>librdf_node_init</b>(librdf_world* <i>world</i>,\nlibrdf_node* <i>node</i>) <br>\nvoid <b>librdf_free_node</b>(librdf_node* <i>r</i>) <br>\nlibrdf_uri* <b>librdf_node_get_uri</b>(librdf_node*\n<i>node</i>) <br>\nlibrdf_node_type <b>librdf_node_get_type</b>(librdf_node*\n<i>node</i>) <br>\nunsigned char*\n<b>librdf_node_get_literal_value</b>(librdf_node*\n<i>node</i>) <br>\nunsigned char* <b><br>\n\nlibrdf_node_get_literal_value_as_counted_string</b>(librdf_node*\n<i>node</i>, <br>\nsize_t* <i>len_p</i>) <br>\nchar*\n<b>librdf_node_get_literal_value_as_latin1</b>(librdf_node*\n<i>node</i>) <br>\nchar*\n<b>librdf_node_get_literal_value_language</b>(librdf_node*\n<i>node</i>) <br>\nint\n<b>librdf_node_get_literal_value_is_wf_xml</b>(librdf_node*\n<i>node</i>) <br>\nlibrdf_uri*\n<b>librdf_node_get_literal_value_datatype_uri</b>(librdf_node*\n<i><br>\nnode</i>) <br>\nint <b>librdf_node_get_li_ordinal</b>(librdf_node*\n<i>node</i>) <br>\nunsigned char*\n<b>librdf_node_get_blank_identifier</b>(librdf_node*\n<i>node</i>) <br>\nint <b>librdf_node_is_resource</b>(librdf_node* <i>node</i>)\n<br>\nint <b>librdf_node_is_literal</b>(librdf_node* <i>node</i>)\n<br>\nint <b>librdf_node_is_blank</b>(librdf_node* <i>node</i>)\n<br>\nlibrdf_digest* <b>librdf_node_get_digest</b>(librdf_node*\n<i>node</i>) <br>\nsize_t <b>librdf_node_encode</b>(librdf_node* <i>node</i>,\nunsigned char* <i>buffer</i>, <br>\nsize_t <i>length</i>) <br>\nsize_t <b>librdf_node_decode</b>(librdf_node* <i>node</i>,\nunsigned char* <i>buffer</i>, <br>\nsize_t <i>length</i>) <br>\nunsigned char* <b>librdf_node_to_string</b>(librdf_node*\n<i>node</i>) <br>\nunsigned char*\n<b>librdf_node_to_counted_string</b>(librdf_node*\n<i>node</i>, size_t* <i><br>\nlen_p</i>) <br>\nvoid <b>librdf_node_print</b>(librdf_node* <i>node</i>,\nFILE* <i>fh</i>) <br>\nint <b>librdf_node_equals</b>(librdf_node*\n<i>first_node</i>, librdf_node* <i><br>\nsecond_node</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nconcepts</b> <br>\nThe library provides macros for all of the\n<small>RDF</small> and <small>RDFS</small> concepts - nodes\nand URIs. For example, &quot;LIBRDF_MS_Alt&quot; for the\nlibrdf_node for the rdf:Alt concept and\n&quot;LIBRDF_MS_Alt_URI&quot; for the librdf_uri for the\n<small>URI</small> reference of rdf:Alt.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;LIBRDF_URI_RDF_MS&quot;\nand &quot;LIBRDF_URI_RDF_SCHEMA&quot; provide the librdf_uri\nobjects for the <small>RDF</small> and <small>RDFS</small>\nnamespace URIs. They must be copied using\n<b>librdf_new_uri_from_uri</b> to be shared correctly. <br>\nvoid <b>librdf_get_concept_by_name</b>(librdf_world*\n<i>world</i>, int <i>is_ms</i>, const <br>\nchar* <i>name</i>, librdf_uri **<i>uri_p</i>, librdf_node\n**<i>node_p</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nstatement</b> <br>\nlibrdf_statement* <b>librdf_new_statement</b>(librdf_world*\n<i>world</i>) <br>\nlibrdf_statement*\n<b>librdf_new_statement_from_statement</b>(librdf_statement*\n<i><br>\nstatement</i>) <br>\nlibrdf_statement*\n<b>librdf_new_statement_from_nodes</b>(librdf_world*\n<i>world</i>, <br>\nlibrdf_node* <i>subject</i>, librdf_node* <i>predicate</i>,\nlibrdf_node* <i>object</i>) <br>\nvoid <b>librdf_statement_init</b>(librdf_world*\n<i>world</i>, librdf_statement* <i><br>\nstatement</i>) <br>\nvoid <b>librdf_statement_clear</b>(librdf_statement*\n<i>statement</i>) <br>\nvoid <b>librdf_free_statement</b>(librdf_statement*\n<i>statement</i>) <br>\nlibrdf_node*\n<b>librdf_statement_get_subject</b>(librdf_statement*\n<i>statement</i>) <br>\nvoid <b>librdf_statement_set_subject</b>(librdf_statement*\n<i>statement</i>, <br>\nlibrdf_node* <i>subject</i>) <br>\nlibrdf_node*\n<b>librdf_statement_get_predicate</b>(librdf_statement*\n<i><br>\nstatement</i>) <br>\nvoid <b>librdf_statement_set_predicate</b>(librdf_statement*\n<i>statement</i>, <br>\nlibrdf_node* <i>predicate</i>) <br>\nlibrdf_node*\n<b>librdf_statement_get_object</b>(librdf_statement*\n<i>statement</i>) <br>\nvoid <b>librdf_statement_set_object</b>(librdf_statement*\n<i>statement</i>, <br>\nlibrdf_node* <i>object</i>) <br>\nint <b>librdf_statement_is_complete</b>(librdf_statement*\n<i>statement</i>) <br>\nchar* <b>librdf_statement_to_string</b>(librdf_statement*\n<i>statement</i>) <br>\nvoid <b>librdf_statement_print</b>(librdf_statement*\n<i>statement</i>, FILE* <i>fh</i>) <br>\nint <b>librdf_statement_equals</b>(librdf_statement*\n<i>statement1</i>, <br>\nlibrdf_statement* <i>statement2</i>) <br>\nint <b>librdf_statement_match</b>(librdf_statement*\n<i>statement</i>, <br>\nlibrdf_statement* <i>partial_statement</i>) <br>\nsize_t <b>librdf_statement_encode</b>(librdf_statement*\n<i>statement</i>, unsigned <br>\nchar* <i>buffer</i>, size_t <i>length</i>) <br>\nsize_t\n<b>librdf_statement_encode_parts</b>(librdf_statement*\n<i>statement</i>, <br>\nunsigned char* <i>buffer</i>, size_t <i>length</i>,\nlibrdf_statement_part <i>fields</i>) <br>\nsize_t <b>librdf_statement_decode</b>(librdf_statement*\n<i>statement</i>, unsigned <br>\nchar* <i>buffer</i>, size_t <i>length</i>) <br>\nsize_t\n<b>librdf_statement_decode_parts</b>(librdf_statement*\n<i>statement</i>, <br>\nlibrdf_node** <i>context_node</i>, unsigned char*\n<i>buffer</i>, size_t <i>length</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nmodel</b> <br>\nlibrdf_model* <b>librdf_new_model</b>(librdf_world*\n<i>world</i>, librdf_storage* <i><br>\nstorage</i>, char* <i>options_string</i>) <br>\nlibrdf_model*\n<b>librdf_new_model_with_options</b>(librdf_world*\n<i>world</i>, <br>\nlibrdf_storage* <i>storage</i>, librdf_hash* <i>options</i>)\n<br>\nlibrdf_model*\n<b>librdf_new_model_from_model</b>(librdf_model*\n<i>model</i>) <br>\nvoid <b>librdf_free_model</b>(librdf_model* <i>model</i>)\n<br>\nint <b>librdf_model_size</b>(librdf_model* <i>model</i>)\n<br>\nint <b>librdf_model_add</b>(librdf_model* <i>model</i>,\nlibrdf_node* <i>subject</i>, <br>\nlibrdf_node* <i>predicate</i>, librdf_node* <i>object</i>)\n<br>\nint\n<b>librdf_model_add_string_literal_statement</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_node* <i>subject</i>, librdf_node* <i>predicate</i>,\nchar* <i>string</i>, char* <i><br>\nxml_language</i>, int <i>xml_space</i>, int\n<i>is_wf_xml</i>) <br>\nint\n<b>librdf_model_add_typed_literal_statement</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_node* <i>subject</i>, librdf_node* <i>predicate</i>,\nconst unsigned char* <i><br>\nstring</i>, char* <i>xml_language</i>, librdf_uri*\n<i>datatype_uri</i>) <br>\nint <b>librdf_model_add_statement</b>(librdf_model*\n<i>model</i>, librdf_statement* <i><br>\nstatement</i>) <br>\nint <b>librdf_model_add_statements</b>(librdf_model*\n<i>model</i>, librdf_stream* <i><br>\nstatement_stream</i>) <br>\nint <b>librdf_model_remove_statement</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_statement* <i>statement</i>) <br>\nint <b>librdf_model_contains_statement</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_statement* <i>statement</i>) <br>\nint <b>librdf_model_has_arc_in</b>(librdf_model*\n<i>model</i>, librdf_node* <i>node</i>, <br>\nlibrdf_node* <i>property</i>) <br>\nint <b>librdf_model_has_arc_out</b>(librdf_model*\n<i>model</i>, librdf_node* <i>node</i>, <br>\nlibrdf_node* <i>property</i>) <br>\nlibrdf_stream* <b>librdf_model_as_stream</b>(librdf_model*\n<i>model</i>) <br>\nlibrdf_stream*\n<b>librdf_model_find_statements</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_statement* <i>statement</i>) <br>\nlibrdf_stream*\n<b>librdf_model_find_statements_in_context</b>(librdf_model*\n<i><br>\nmodel</i>, librdf_statement* <i>statement</i>, librdf_node*\n<i>context_node</i>) <br>\nlibrdf_stream*\n<b>librdf_model_find_statements_with_options</b>(librdf_model*\n<i><br>\nmodel</i>, librdf_statement* <i>statement</i>, librdf_node*\n<i>context_node</i>, <br>\nlibrdf_hash* <i>options</i>) <br>\nlibrdf_iterator*\n<b>librdf_model_get_contexts</b>(librdf_model* <i>model</i>)\n<br>\nlibrdf_iterator*\n<b>librdf_model_get_sources</b>(librdf_model* <i>model</i>,\n<br>\nlibrdf_node* <i>arc</i>, librdf_node* <i>target</i>) <br>\nlibrdf_iterator* <b>librdf_model_get_arcs</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_node* <i>source</i>, librdf_node* <i>target</i>) <br>\nlibrdf_iterator*\n<b>librdf_model_get_targets</b>(librdf_model* <i>model</i>,\n<br>\nlibrdf_node* <i>source</i>, librdf_node* <i>arc</i>) <br>\nlibrdf_node* <b>librdf_model_get_source</b>(librdf_model*\n<i>model</i>, librdf_node* <i><br>\narc</i>, librdf_node* <i>target</i>) <br>\nlibrdf_node* <b>librdf_model_get_arc</b>(librdf_model*\n<i>model</i>, librdf_node* <i><br>\nsource</i>, librdf_node* <i>target</i>) <br>\nlibrdf_node* <b>librdf_model_get_target</b>(librdf_model*\n<i>model</i>, librdf_node* <i><br>\nsource</i>, librdf_node* <i>arc</i>) <br>\nlibrdf_iterator*\n<b>librdf_model_get_arcs_in</b>(librdf_model* <i>model</i>,\n<br>\nlibrdf_node* <i>node</i>) <br>\nlibrdf_iterator*\n<b>librdf_model_get_arcs_out</b>(librdf_model* <i>model</i>,\n<br>\nlibrdf_node* <i>node</i>) <br>\nint <b>librdf_model_add_submodel</b>(librdf_model*\n<i>model</i>, librdf_model* <i><br>\nsub_model</i>) <br>\nint <b>librdf_model_remove_submodel</b>(librdf_model*\n<i>model</i>, librdf_model* <i><br>\nsub_model</i>) <br>\nvoid <b>librdf_model_print</b>(librdf_model* <i>model</i>,\nFILE* <i>fh</i>) <br>\nint <b>librdf_model_context_add_statement</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_node* <i>context</i>, librdf_statement*\n<i>statement</i>) <br>\nint <b>librdf_model_context_add_statements</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_node* <i>context</i>, librdf_stream* <i>stream</i>)\n<br>\nint\n<b>librdf_model_context_remove_statement</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_node* <i>context</i>, librdf_statement*\n<i>statement</i>) <br>\nint\n<b>librdf_model_context_remove_statements</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_node* <i>context</i>) <br>\nlibrdf_stream*\n<b>librdf_model_context_as_stream</b>(librdf_model*\n<i>model</i>, <br>\nlibrdf_node* <i>context</i>) <br>\nlibrdf_stream* <b>librdf_model_query</b>(librdf_model*\n<i>model</i>, librdf_query* <i><br>\nquery</i>) <br>\nlibrdf_stream*\n<b>librdf_model_query_string</b>(librdf_model* <i>model</i>,\nconst <br>\nchar* <i>name</i>, librdf_uri* <i>uri</i>, const unsigned\nchar* <i>query_string</i>) <br>\nvoid <b>librdf_model_sync</b>(librdf_model* <i>model</i>)\n<br>\nlibrdf_storage*\n<b>librdf_model_get_storage</b>(librdf_model* <i>model</i>)\n<br>\nlibrdf_node* <b>librdf_model_get_feature</b>(librdf_model*\n<i>model</i>, librdf_uri* <i><br>\nfeature</i>) =item int\n<b>librdf_model_set_feature</b>(librdf_model* <i>model</i>,\n<br>\nlibrdf_uri* <i>feature</i>, librdf_node* <i>value</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nstorage</b> <br>\nvoid <b>librdf_storage_register_factory</b>(const char*\n<i>name</i>, void (*<i>factory</i>) <br>\n(librdf_storage_factory*)) <br>\nlibrdf_storage* <b>librdf_new_storage</b>(librdf_world*\n<i>world</i>, char* <i><br>\nstorage_name</i>, char* <i>name</i>, char*\n<i>options_string</i>) <br>\nlibrdf_storage*\n<b>librdf_new_storage_with_options</b>(librdf_world*\n<i>world</i>, <br>\nchar* <i>storage_name</i>, char* <i>name</i>, librdf_hash*\n<i>options</i>) <br>\nlibrdf_storage*\n<b>librdf_new_storage_from_storage</b>(librdf_storage*\n<i><br>\nold_storage</i>) <br>\nlibrdf_storage*\n<b>librdf_new_storage_from_factory</b>(librdf_world*\n<i>world</i>, <br>\nlibrdf_storage_factory* <i>factory</i>, char* <i>name</i>,\nlibrdf_hash* <i>options</i>) <br>\nvoid <b>librdf_free_storage</b>(librdf_storage*\n<i>storage</i>) <br>\nint <b>librdf_storage_open</b>(librdf_storage*\n<i>storage</i>, librdf_model* <i>model</i>) <br>\nint <b>librdf_storage_close</b>(librdf_storage*\n<i>storage</i>) <br>\nint <b>librdf_storage_get</b>(librdf_storage*\n<i>storage</i>, void* <i>key</i>, size_t <i><br>\nkey_len</i>, void **<i>value</i>, size_t* <i>value_len</i>,\nunsigned int <i>flags</i>) <br>\nint <b>librdf_storage_size</b>(librdf_storage*\n<i>storage</i>) <br>\nint <b>librdf_storage_add_statement</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_statement* <i>statement</i>) <br>\nint <b>librdf_storage_add_statements</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_stream* <i>statement_stream</i>) <br>\nint <b>librdf_storage_remove_statement</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_statement* <i>statement</i>) <br>\nint <b>librdf_storage_contains_statement</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_statement* <i>statement</i>) <br>\nlibrdf_stream*\n<b>librdf_storage_serialise</b>(librdf_storage*\n<i>storage</i>) <br>\nlibrdf_stream*\n<b>librdf_storage_find_statements</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_statement* <i>statement</i>) <br>\nlibrdf_iterator*\n<b>librdf_storage_get_sources</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>arc</i>, librdf_node* <i>target</i>) <br>\nlibrdf_iterator*\n<b>librdf_storage_get_arcs</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>source</i>, librdf_node* <i>target</i>) <br>\nlibrdf_iterator*\n<b>librdf_storage_get_targets</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>source</i>, librdf_node* <i>arc</i>) <br>\nlibrdf_iterator*\n<b>librdf_storage_get_arcs_in</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>node</i>) <br>\nlibrdf_iterator*\n<b>librdf_storage_get_arcs_out</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>node</i>) <br>\nint <b>librdf_storage_has_arc_in</b>(librdf_storage*\n<i>storage</i>, librdf_node* <i><br>\nnode</i>, librdf_node* <i>property</i>) <br>\nint <b>librdf_storage_has_arc_out</b>(librdf_storage*\n<i>storage</i>, librdf_node* <i><br>\nnode</i>, librdf_node* <i>property</i>) <br>\nint\n<b>librdf_storage_context_add_statement</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>context</i>, librdf_statement*\n<i>statement</i>) <br>\nint\n<b>librdf_storage_context_add_statements</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>context</i>, librdf_stream* <i>stream</i>)\n<br>\nint\n<b>librdf_storage_context_remove_statement</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>context</i>, librdf_statement*\n<i>statement</i>) <br>\nint\n<b>librdf_storage_context_remove_statements</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_node* <i>context</i>) <br>\nlibrdf_stream*\n<b>librdf_storage_context_as_stream</b>(librdf_storage*\n<i><br>\nstorage</i>, librdf_node* <i>context</i>) <br>\nint <b>librdf_storage_supports_query</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_query* <i>query</i>) <br>\nlibrdf_stream* <b>librdf_storage_query</b>(librdf_storage*\n<i>storage</i>, <br>\nlibrdf_query* <i>query</i>) <br>\nvoid <b>librdf_storage_sync</b>(librdf_storage*\n<i>storage</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nparser</b> <br>\nvoid <b>librdf_parser_register_factory</b>(librdf_world*\n<i>world</i>, const char* <i><br>\nname</i>, const char* <i>mime_type</i>, const char*\n<i>uri_string</i>, void (*<i>factory</i>) <br>\n(librdf_parser_factory*)) <br>\nlibrdf_parser* <b>librdf_new_parser</b>(librdf_world*\n<i>world</i>, const char* <i>name</i>, <br>\nconst char* <i>mime_type</i>, librdf_uri* <i>type_uri</i>)\n<br>\nlibrdf_parser*\n<b>librdf_new_parser_from_factory</b>(librdf_world*\n<i>world</i>, <br>\nlibrdf_parser_factory* <i>factory</i>) <br>\nvoid <b>librdf_free_parser</b>(librdf_parser* <i>parser</i>)\n<br>\nlibrdf_stream*\n<b>librdf_parser_parse_as_stream</b>(librdf_parser*\n<i>parser</i>, <br>\nlibrdf_uri* <i>uri</i>, librdf_uri* <i>base_uri</i>) <br>\nint <b>librdf_parser_parse_into_model</b>(librdf_parser*\n<i>parser</i>, librdf_uri* <i><br>\nuri</i>, librdf_uri* <i>base_uri</i>, librdf_model*\n<i>model</i>) <br>\nlibrdf_stream*\n<b>librdf_parser_parse_string_as_stream</b>(librdf_parser*\n<i><br>\nparser</i>, const unsigned char* <i>string</i>, librdf_uri*\n<i>base_uri</i>) <br>\nint librdf_parser_parse_string_into_model(librdf_parser*\n<i>parser</i>, const <br>\nunsigned char* <i>string</i>, librdf_uri* <i>base_uri</i>,\nlibrdf_model* <i>model</i>) <br>\nvoid <b>librdf_parser_set_error</b>(librdf_parser*\n<i>parser</i>, void* <i>user_data</i>, <br>\nvoid (*<i>error_fn</i>)(void* <i>user_data</i>, const char*\n<i>msg</i>, ...)) <br>\nvoid <b>librdf_parser_set_warning</b>(librdf_parser*\n<i>parser</i>, void* <i>user_data</i>, <br>\nvoid (*<i>warning_fn</i>)(void* <i>user_data</i>, const\nchar* <i>msg</i>, ...)) <br>\nlibrdf_node* <b>librdf_parser_get_feature</b>(librdf_parser*\n<i>parser</i>, <br>\nlibrdf_uri* <i>feature</i>) <br>\nint <b>librdf_parser_set_feature</b>(librdf_parser*\n<i>parser</i>, librdf_uri* <i><br>\nfeature</i>, librdf_node* <i>value</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nserializer</b> <br>\nlibrdf_serializer* librdf_new_serializer(librdf_world*\n<i>world</i>, const <br>\nchar *<i>name</i>, const char *<i>mime_type</i>, librdf_uri\n*<i>type_uri</i>) <br>\nlibrdf_serializer*\nlibrdf_new_serializer_from_factory(librdf_world* <i><br>\nworld</i>, librdf_serializer_factory *<i>factory</i>) <br>\nvoid librdf_free_serializer(librdf_serializer\n*<i>serializer</i>) <br>\nint librdf_serializer_serialize_model(librdf_serializer*\n<i>serializer</i>, <br>\nFILE* <i>handle</i>, librdf_uri* <i>base_uri</i>,\nlibrdf_model* <i>model</i>) <br>\nint\nlibrdf_serializer_serialize_model_to_file(librdf_serializer*\n<i><br>\nserializer</i>, const char *<i>name</i>, librdf_uri*\n<i>base_uri</i>, librdf_model* <i><br>\nmodel</i>) <br>\nvoid librdf_serializer_set_error(librdf_serializer*\n<i>serializer</i>, void <br>\n*<i>user_data</i>, void (*<i>error_fn</i>)(void *user_data,\nconst char *msg, ...)) <br>\nvoid librdf_serializer_set_warning(librdf_serializer*\n<i>serializer</i>, void <br>\n*<i>user_data</i>, void (*<i>warning_fn</i>)(void\n*user_data, const char *msg, ...)) <br>\nlibrdf_node*\nlibrdf_serializer_get_feature(librdf_serializer* <i><br>\nserializer</i>, librdf_uri* <i>feature</i>) <br>\nint librdf_serializer_set_feature(librdf_serializer*\n<i>serializer</i>, <br>\nlibrdf_uri* <i>feature</i>, librdf_node* <i>value</i>)b <br>\nint librdf_serializer_set_namespace(librdf_serializer*\n<i>serializer</i>, <br>\nlibrdf_uri* <i>uri</i>, const char* <i>prefix</i>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>class\nstream</b> <br>\nlibrdf_stream* <b>librdf_new_stream</b>(librdf_world*\n<i>world</i>, void* <i>context</i>, <br>\nint (*<i>end_of_stream</i>)(void*), librdf_statement* <br>\n(*<i>next_statement</i>)(void*), void\n(*<i>finished</i>)(void*)) <br>\nlibrdf_stream*\n<b>librdf_new_stream_from_node_iterator</b>(librdf_iterator*\n<i><br>\niterator</i>, librdf_statement* <i>statement</i>,\nlibrdf_statement_part <i>field</i>) <br>\nvoid <b>librdf_free_stream</b>(librdf_stream* <i>stream</i>)\n<br>\nint <b>librdf_stream_end</b>(librdf_stream* <i>stream</i>)\n<br>\nint <b>librdf_stream_next</b>(librdf_stream* <i>stream</i>)\n<br>\nlibrdf_statement*\n<b>librdf_stream_get_object</b>(librdf_stream*\n<i>stream</i>) <br>\nvoid* <b>librdf_stream_get_context</b>(librdf_stream*\n<i>stream</i>) <br>\nvoid <b>librdf_stream_set_map</b>(librdf_stream*\n<i>stream</i>, librdf_statement* <br>\n(*<i>map</i>)(void* <i>context</i>, librdf_statement*\n<i>statement</i>), void* <i>map_context</i>) <br>\nvoid <b>librdf_stream_print</b>(librdf_stream*\n<i>stream</i>, FILE* <i>fh</i>)</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;redland.h&gt; <br>\nlibrdf_storage *storage; <br>\nlibrdf_model* model; <br>\nlibrdf_statement* statement; <br>\nlibrdf_world* world <br>\nworld=librdf_new_world(); <br>\nlibrdf_world_open(world); <br>\nstorage=librdf_new_storage(world, &quot;hashes&quot;,\n&quot;test&quot;, &quot;hash-type='bdb',dir='.'&quot;); <br>\nmodel=librdf_new_model(world, storage, NULL); <br>\nstatement=librdf_new_statement_from_nodes(world,\nlibrdf_new_node_from_uri_string(world,\n&quot;http://purl.org/net/dajobe/&quot;),\nlibrdf_new_node_from_uri_string(world,\n&quot;http://purl.org/dc/elements/1.1/creator&quot;),\nlibrdf_new_node_from_literal(world, &quot;Dave\nBeckett&quot;, NULL, 0)); <br>\nlibrdf_model_add_statement(model, statement); <br>\nlibrdf_free_statement(statement); <br>\nlibrdf_model_print(model, stdout); <br>\nlibrdf_free_model(model); <br>\nlibrdf_free_storage(storage); <br>\nlibrdf_free_world(world);</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>libraptor</i>(3),\n<i>libxml</i>(4).</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>redland</b> <small>RDF</small> library was created by\nDave Beckett in June 2000.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dave Beckett\n&lt;http://purl.org/net/dajobe/&gt;,</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#VERSION\">VERSION</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FUNCTIONS\">FUNCTIONS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#AUTHOR\">AUTHOR</a>"],"level":3}