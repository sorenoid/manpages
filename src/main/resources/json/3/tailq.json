{"name":"tailq","description":"TAILQ_CONCAT,\nTAILQ_EMPTY, TAILQ_ENTRY, TAILQ_FIRST, TAILQ_FOREACH,\nTAILQ_FOREACH_REVERSE, TAILQ_HEAD, TAILQ_HEAD_INITIALIZER,\nTAILQ_INIT, TAILQ_INSERT_AFTER, TAILQ_INSERT_BEFORE,\nTAILQ_INSERT_HEAD, TAILQ_INSERT_TAIL, TAILQ_LAST,\nTAILQ_NEXT, TAILQ_PREV, TAILQ_REMOVE - implementation of a\ndoubly linked tail queue","body":"\n\n<h1 align=\"center\">TAILQ</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">TAILQ_CONCAT,\nTAILQ_EMPTY, TAILQ_ENTRY, TAILQ_FIRST, TAILQ_FOREACH,\nTAILQ_FOREACH_REVERSE, TAILQ_HEAD, TAILQ_HEAD_INITIALIZER,\nTAILQ_INIT, TAILQ_INSERT_AFTER, TAILQ_INSERT_BEFORE,\nTAILQ_INSERT_HEAD, TAILQ_INSERT_TAIL, TAILQ_LAST,\nTAILQ_NEXT, TAILQ_PREV, TAILQ_REMOVE - implementation of a\ndoubly linked tail queue</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/queue.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nTAILQ_CONCAT(TAILQ_HEAD *</b><i>head1</i><b>, TAILQ_HEAD\n*</b><i>head2</i><b>, <br>\nTAILQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nTAILQ_EMPTY(TAILQ_HEAD *</b><i>head</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TAILQ_ENTRY(TYPE);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct TYPE\n*TAILQ_FIRST(TAILQ_HEAD *</b><i>head</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TAILQ_FOREACH(struct\nTYPE *</b><i>var</i><b>, TAILQ_HEAD *</b><i>head</i><b>,\nTAILQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TAILQ_FOREACH_REVERSE(struct\nTYPE *</b><i>var</i><b>, TAILQ_HEAD *</b><i>head</i><b>,\nHEADNAME, <br>\nTAILQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TAILQ_HEAD(HEADNAME,\nTYPE);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TAILQ_HEAD\nTAILQ_HEAD_INITIALIZER(TAILQ_HEAD</b>\n<i>head</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nTAILQ_INIT(TAILQ_HEAD *</b><i>head</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nTAILQ_INSERT_AFTER(TAILQ_HEAD *</b><i>head</i><b>, struct\nTYPE *</b><i>listelm</i><b>, <br>\nstruct TYPE *</b><i>elm</i><b>, TAILQ_ENTRY</b>\n<i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nTAILQ_INSERT_BEFORE(struct TYPE *</b><i>listelm</i><b>,\nstruct TYPE *</b><i>elm</i><b>, <br>\nTAILQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nTAILQ_INSERT_HEAD(TAILQ_HEAD *</b><i>head</i><b>, struct\nTYPE *</b><i>elm</i><b>, <br>\nTAILQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nTAILQ_INSERT_TAIL(TAILQ_HEAD *</b><i>head</i><b>, struct\nTYPE *</b><i>elm</i><b>, <br>\nTAILQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct TYPE\n*TAILQ_LAST(TAILQ_HEAD *</b><i>head</i><b>,\nHEADNAME);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct TYPE\n*TAILQ_NEXT(struct TYPE *</b><i>elm</i><b>, TAILQ_ENTRY</b>\n<i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct TYPE\n*TAILQ_PREV(struct TYPE *</b><i>elm</i><b>, HEADNAME,\nTAILQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nTAILQ_REMOVE(TAILQ_HEAD *</b><i>head</i><b>, struct TYPE\n*</b><i>elm</i><b>, TAILQ_ENTRY</b> <i>NAME</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These macros\ndefine and operate on doubly linked tail queues.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the macro\ndefinitions, <i>TYPE</i> is the name of a user defined\nstructure, that must contain a field of type\n<i>TAILQ_ENTRY</i>, named <i>NAME</i>. The argument\n<i>HEADNAME</i> is the name of a user defined structure that\nmust be declared using the macro <b>TAILQ_HEAD</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A tail queue is\nheaded by a structure defined by the <b>TAILQ_HEAD</b>()\nmacro. This structure contains a pair of pointers, one to\nthe first element in the tail queue and the other to the\nlast element in the tail queue. The elements are doubly\nlinked so that an arbitrary element can be removed without\ntraversing the tail queue. New elements can be added to the\ntail queue after an existing element, before an existing\nelement, at the head of the tail queue, or at the end of the\ntail queue. A <i>TAILQ_HEAD</i> structure is declared as\nfollows:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">TAILQ_HEAD(HEADNAME,\nTYPE) head;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where <i>struct\nHEADNAME</i> is the structure to be defined, and <i>struct\nTYPE</i> is the type of the elements to be linked into the\ntail queue. A pointer to the head of the tail queue can\nlater be declared as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct HEADNAME\n*headp;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(The names\n<i>head</i> and <i>headp</i> are user selectable.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_HEAD_INITIALIZER</b>() evaluates to an initializer\nfor the tail queue <i>head</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_CONCAT</b>() concatenates the tail queue headed by\n<i>head2</i> onto the end of the one headed by <i>head1</i>\nremoving all entries from the former.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_EMPTY</b>() evaluates to true if there are no items\non the tail queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_ENTRY</b>() declares a structure that connects the\nelements in the tail queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_FIRST</b>() returns the first item on the tail\nqueue or NULL if the tail queue is empty.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_FOREACH</b>() traverses the tail queue referenced\nby <i>head</i> in the forward direction, assigning each\nelement in turn to <i>var</i>. <i>var</i> is set to NULL if\nthe loop completes normally, or if there were no\nelements.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_FOREACH_REVERSE</b>() traverses the tail queue\nreferenced by <i>head</i> in the reverse direction,\nassigning each element in turn to <i>var</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_INIT</b>() initializes the tail queue referenced by\n<i>head</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_INSERT_HEAD</b>() inserts the new element\n<i>elm</i> at the head of the tail queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_INSERT_TAIL</b>() inserts the new element\n<i>elm</i> at the end of the tail queue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_INSERT_AFTER</b>() inserts the new element\n<i>elm</i> after the element <i>listelm</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_INSERT_BEFORE</b>() inserts the new element\n<i>elm</i> before the element <i>listelm</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_LAST</b>() returns the last item on the tail queue.\nIf the tail queue is empty the return value is NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_NEXT</b>() returns the next item on the tail queue,\nor NULL if this item is the last.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_PREV</b>() returns the previous item on the tail\nqueue, or NULL if this item is the first.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macro\n<b>TAILQ_REMOVE</b>() removes the element <i>elm</i> from\nthe tail queue.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TAILQ_EMPTY</b>()\nreturns nonzero if the queue is empty, and zero if the queue\ncontains at least one entry.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TAILQ_FIRST</b>(),\n<b>TAILQ_LAST</b>(), <b>TAILQ_NEXT</b>(), and\n<b>TAILQ_PREV</b>() return a pointer to the first, last,\nnext or previous <i>TYPE</i> structure, respectively.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TAILQ_HEAD_INITIALIZER</b>()\nreturns an initializer that can be assigned to the queue\n<i>head</i>.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Not in POSIX.1,\nPOSIX.1-2001 or POSIX.1-2008. Present on the BSDs. (TAILQ\nfunctions first appeared in 4.4BSD).</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The macros\n<b>TAILQ_FOREACH</b>() and <b>TAILQ_FOREACH_REVERSE</b>()\ndon&rsquo;t allow <i>var</i> to be removed or freed within\nthe loop, as it would interfere with the traversal. The\nmacros <b>TAILQ_FOREACH_SAFE</b>() and\n<b>TAILQ_FOREACH_REVERSE_SAFE</b>(), which are present on\nthe BSDs but are not present in glibc, fix this limitation\nby allowing <i>var</i> to safely be removed from the list\nand freed from within the loop without interfering with the\ntraversal.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stddef.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;sys/queue.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">struct entry {\n<br>\nint data; <br>\nTAILQ_ENTRY(entry) entries; /* Tail queue. */ <br>\n};</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">TAILQ_HEAD(tailhead,\nentry);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(void) <br>\n{ <br>\nstruct entry *n1, *n2, *n3, *np; <br>\nstruct tailhead head; /* Tail queue head. */ <br>\nint i;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">TAILQ_INIT(&amp;head);\n/* Initialize the queue. */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">n1 =\nmalloc(sizeof(struct entry)); /* Insert at the head. */ <br>\nTAILQ_INSERT_HEAD(&amp;head, n1, entries);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">n1 =\nmalloc(sizeof(struct entry)); /* Insert at the tail. */ <br>\nTAILQ_INSERT_TAIL(&amp;head, n1, entries);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">n2 =\nmalloc(sizeof(struct entry)); /* Insert after. */ <br>\nTAILQ_INSERT_AFTER(&amp;head, n1, n2, entries);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">n3 =\nmalloc(sizeof(struct entry)); /* Insert before. */ <br>\nTAILQ_INSERT_BEFORE(n2, n3, entries);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">TAILQ_REMOVE(&amp;head,\nn2, entries); /* Deletion. */ <br>\nfree(n2); <br>\n/* Forward traversal. */ <br>\ni = 0; <br>\nTAILQ_FOREACH(np, &amp;head, entries) <br>\nnp-&gt;data = i++; <br>\n/* Reverse traversal. */ <br>\nTAILQ_FOREACH_REVERSE(np, &amp;head, tailhead, entries) <br>\nprintf(&quot;%i\\n&quot;, np-&gt;data); <br>\n/* TailQ Deletion. */ <br>\nn1 = TAILQ_FIRST(&amp;head); <br>\nwhile (n1 != NULL) { <br>\nn2 = TAILQ_NEXT(n1, entries); <br>\nfree(n1); <br>\nn1 = n2; <br>\n} <br>\nTAILQ_INIT(&amp;head);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/insque\">insque(3)</a>,\n<a href=\"https://man.page/7/queue\">queue(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}