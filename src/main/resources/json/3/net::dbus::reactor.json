{"name":"net::dbus::reactor","description":"Net::DBus::Reactor - application event loop","body":"\n\n<h1 align=\"center\">Net::DBus::Reactor</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Reactor\n- application event loop</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Create and run\nan event loop:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::DBus::Reactor; <br>\nmy $reactor = Net::DBus::Reactor-&gt;main(); <br>\n$reactor-&gt;run();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Manage some\nfile handlers</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$reactor-&gt;add_read($fd,\n<br>\nNet::DBus::Callback-&gt;new(method =&gt; sub { <br>\nmy $fd = shift; <br>\n...read some data... <br>\n}, args =&gt; [$fd])); <br>\n$reactor-&gt;add_write($fd, <br>\nNet::DBus::Callback-&gt;new(method =&gt; sub { <br>\nmy $fd = shift; <br>\n...write some data... <br>\n}, args =&gt; [$fd]));</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Temporarily\n(dis|en)able a handle</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># Disable <br>\n$reactor-&gt;toggle_read($fd, 0); <br>\n# Enable <br>\n$reactor-&gt;toggle_read($fd, 1);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permanently\nremove a handle</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$reactor-&gt;remove_read($fd);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Manage a\nregular timeout every 100 milliseconds</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $timer =\n$reactor-&gt;add_timeout(100, <br>\nNet::DBus::Callback-&gt;new( <br>\nmethod =&gt; sub { <br>\n...process the alarm... <br>\n}));</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Temporarily\n(dis|en)able a timer</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># Disable <br>\n$reactor-&gt;toggle_timeout($timer, 0); <br>\n# Enable <br>\n$reactor-&gt;toggle_timeout($timer, 1);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permanently\nremove a timer</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$reactor-&gt;remove_timeout($timer);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Add a\npost-dispatch hook</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $hook =\n$reactor-&gt;add_hook(Net::DBus::Callback-&gt;new( <br>\nmethod =&gt; sub { <br>\n... do some work... <br>\n}));</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Remove a\nhook</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$reactor-&gt;remove_hook($hook);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class\nprovides a general purpose event loop for the purposes of\nmultiplexing I/O events and timeouts in a single process.\nThe underlying implementation is done using the select\nsystem call. File handles can be registered for monitoring\non read, write and exception (out-of-band data) events.\nTimers can be registered to expire with a periodic\nfrequency. These are implemented using the timeout parameter\nof the select system call. Since this parameter merely\nrepresents an upper bound on the amount of time the select\nsystem call is allowed to sleep, the actual period of the\ntimers may vary. Under normal load this variance is\ntypically 10 milliseconds. Finally, hooks may be registered\nwhich will be invoked on each iteration of the event loop\n(ie after processing the file events, or timeouts indicated\nby the select system call returning).</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $reactor =\nNet::DBus::Reactor-&gt;<b>new()</b>;</p>\n\n<p style=\"margin-left:17%;\">Creates a new event loop ready\nfor monitoring file handles, or generating timeouts. Except\nin very unusual circumstances (examples of which I\ncan&rsquo;t think up) it is not necessary or desriable to\nexplicitly create new reactor instances. Instead call the\nmain method to get a handle to the singleton instance.</p>\n\n<p style=\"margin-left:11%;\">$reactor =\nNet::DBus::Reactor-&gt;main;</p>\n\n<p style=\"margin-left:17%;\">Return a handle to the\nsingleton instance of the reactor. This is the recommended\nway of getting hold of a reactor, since it removes the need\nfor modules to pass around handles to their privately\ncreated reactors.</p>\n\n\n<p style=\"margin-left:11%;\">$reactor-&gt;manage($connection);\n<br>\n$reactor-&gt;manage($server);</p>\n\n<p style=\"margin-left:17%;\">Registers a\n&quot;Net::DBus::Binding::Connection&quot; or\n&quot;Net::DBus::Binding::Server&quot; object for management\nby the event loop. This basically involves hooking up the\nwatch &amp; timeout callbacks to the event loop. For\nconnections it will also register a hook to invoke the\n&quot;dispatch&quot; method periodically.</p>\n\n<p style=\"margin-left:11%;\">$reactor-&gt;<b>run()</b>;</p>\n\n<p style=\"margin-left:17%;\">Starts the event loop\nmonitoring any registered file handles and timeouts. At\nleast one file handle, or timer must have been registered\nprior to running the reactor, otherwise it will immediately\nexit. The reactor will run until all registered file\nhandles, or timeouts have been removed, or disabled. The\nreactor can be explicitly stopped by calling the\n&quot;shutdown&quot; method.</p>\n\n\n<p style=\"margin-left:11%;\">$reactor-&gt;<b>shutdown()</b>;</p>\n\n<p style=\"margin-left:17%;\">Explicitly shutdown the reactor\nafter pending events have been processed.</p>\n\n\n<p style=\"margin-left:11%;\">$reactor-&gt;<b>step()</b>;</p>\n\n<p style=\"margin-left:17%;\">Perform one iteration of the\nevent loop, going to sleep until an event occurs on a\nregistered file handle, or a timeout occurrs. This method is\ngenerally not required in day-to-day use.</p>\n\n<p style=\"margin-left:11%;\">$reactor-&gt;add_read($fd,\n$callback[, $status]);</p>\n\n<p style=\"margin-left:17%;\">Registers a file handle for\nmonitoring of read events. The $callback parameter specifies\neither a code reference to a subroutine, or an instance of\nthe &quot;Net::DBus::Callback&quot; object to invoke each\ntime an event occurs. The optional $status parameter is a\nboolean value to specify whether the watch is initially\nenabled.</p>\n\n<p style=\"margin-left:11%;\">$reactor-&gt;add_write($fd,\n$callback[, $status]);</p>\n\n<p style=\"margin-left:17%;\">Registers a file handle for\nmonitoring of write events. The $callback parameter\nspecifies either a code reference to a subroutine, or an\ninstance of the &quot;Net::DBus::Callback&quot; object to\ninvoke each time an event occurs. The optional $status\nparameter is a boolean value to specify whether the watch is\ninitially enabled.</p>\n\n\n<p style=\"margin-left:11%;\">$reactor-&gt;add_exception($fd,\n$callback[, $status]);</p>\n\n<p style=\"margin-left:17%;\">Registers a file handle for\nmonitoring of exception events. The $callback parameter\nspecifies either a code reference to a subroutine, or an\ninstance of the &quot;Net::DBus::Callback&quot; object to\ninvoke each time an event occurs. The optional $status\nparameter is a boolean value to specify whether the watch is\ninitially enabled.</p>\n\n<p style=\"margin-left:11%;\">my $id =\n$reactor-&gt;add_timeout($interval, $callback, $status);</p>\n\n<p style=\"margin-left:17%;\">Registers a new timeout to\nexpire every $interval milliseconds. The $callback parameter\nspecifies either a code reference to a subroutine, or an\ninstance of the &quot;Net::DBus::Callback&quot; object to\ninvoke each time the timeout expires. The optional $status\nparameter is a boolean value to specify whether the timeout\nis initially enabled. The return parameter is a unique\nidentifier which can be used to later remove or disable the\ntimeout.</p>\n\n\n<p style=\"margin-left:11%;\">$reactor-&gt;remove_timeout($id);</p>\n\n<p style=\"margin-left:17%;\">Removes a previously registered\ntimeout specified by the $id parameter.</p>\n\n\n<p style=\"margin-left:11%;\">$reactor-&gt;toggle_timeout($id,\n$status[, $interval]);</p>\n\n<p style=\"margin-left:17%;\">Updates the state of a\npreviously registered timeout specified by the $id\nparameter. The $status parameter specifies whether the\ntimeout is to be enabled or disabled, while the optional\n$interval parameter can be used to change the period of the\ntimeout.</p>\n\n<p style=\"margin-left:11%;\">my $id =\n$reactor-&gt;add_hook($callback[, $status]);</p>\n\n<p style=\"margin-left:17%;\">Registers a new hook to be\nfired on each iteration of the event loop. The $callback\nparameter specifies either a code reference to a subroutine,\nor an instance of the &quot;Net::DBus::Callback&quot; class\nto invoke. The $status parameter determines whether the hook\nis initially enabled, or disabled. The return parameter is a\nunique id which should be used to later remove, or disable\nthe hook.</p>\n\n\n<p style=\"margin-left:11%;\">$reactor-&gt;remove_hook($id)</p>\n\n<p style=\"margin-left:17%;\">Removes the previously\nregistered hook identified by $id.</p>\n\n<p style=\"margin-left:11%;\">$reactor-&gt;toggle_hook($id,\n$status)</p>\n\n<p style=\"margin-left:17%;\">Updates the status of the\npreviously registered hook identified by $id. The $status\nparameter determines whether the hook is to be enabled or\ndisabled.</p>\n\n<p style=\"margin-left:11%;\">$reactor-&gt;remove_read($fd);\n<br>\n$reactor-&gt;remove_write($fd); <br>\n$reactor-&gt;remove_exception($fd);</p>\n\n<p style=\"margin-left:17%;\">Removes a watch on the file\nhandle $fd.</p>\n\n<p style=\"margin-left:11%;\">$reactor-&gt;toggle_read($fd,\n$status); <br>\n$reactor-&gt;toggle_write($fd, $status); <br>\n$reactor-&gt;toggle_exception($fd, $status);</p>\n\n<p style=\"margin-left:17%;\">Updates the status of a watch\non the file handle $fd. The $status parameter species\nwhether the watch is to be enabled or disabled.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::DBus::Callback,\nNet::DBus::Connection, Net::DBus::Server</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Daniel Berrange\n&lt;dan@berrange.com&gt;</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2004-2011 by Daniel Berrange</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}