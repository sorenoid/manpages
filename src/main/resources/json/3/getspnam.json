{"name":"getspnam","description":"getspnam,\ngetspnam_r, getspent, getspent_r, setspent, endspent,\nfgetspent, fgetspent_r, sgetspent, sgetspent_r, putspent,\nlckpwdf, ulckpwdf - get shadow password file entry","body":"\n\n<h1 align=\"center\">GETSPNAM</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getspnam,\ngetspnam_r, getspent, getspent_r, setspent, endspent,\nfgetspent, fgetspent_r, sgetspent, sgetspent_r, putspent,\nlckpwdf, ulckpwdf - get shadow password file entry</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* General\nshadow password file API */ <b><br>\n#include &lt;shadow.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct spwd\n*getspnam(const char *</b><i>name</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct spwd\n*getspent(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nsetspent(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nendspent(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct spwd\n*fgetspent(FILE *</b><i>stream</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct spwd\n*sgetspent(const char *</b><i>s</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nputspent(const struct spwd *</b><i>p</i><b>, FILE\n*</b><i>stream</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nlckpwdf(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nulckpwdf(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* GNU\nextension */ <b><br>\n#include &lt;shadow.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetspent_r(struct spwd *</b><i>spbuf</i><b>, <br>\nchar *</b><i>buf</i><b>, size_t</b> <i>buflen</i><b>, struct\nspwd **</b><i>spbufp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetspnam_r(const char *</b><i>name</i><b>, struct spwd\n*</b><i>spbuf</i><b>, <br>\nchar *</b><i>buf</i><b>, size_t</b> <i>buflen</i><b>, struct\nspwd **</b><i>spbufp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfgetspent_r(FILE *</b><i>stream</i><b>, struct spwd\n*</b><i>spbuf</i><b>, <br>\nchar *</b><i>buf</i><b>, size_t</b> <i>buflen</i><b>, struct\nspwd **</b><i>spbufp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsgetspent_r(const char *</b><i>s</i><b>, struct spwd\n*</b><i>spbuf</i><b>, <br>\nchar *</b><i>buf</i><b>, size_t</b> <i>buflen</i><b>, struct\nspwd **</b><i>spbufp</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getspent_r</b>(),\n<b>getspnam_r</b>(), <b>fgetspent_r</b>(),\n<b>sgetspent_r</b>(): <br>\nSince glibc 2.19: <br>\n_DEFAULT_SOURCE <br>\nGlibc 2.19 and earlier: <br>\n_BSD_SOURCE || _SVID_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Long ago it was\nconsidered safe to have encrypted passwords openly visible\nin the password file. When computers got faster and people\ngot more security-conscious, this was no longer acceptable.\nJulianne Frances Haugh implemented the shadow password suite\nthat keeps the encrypted passwords in the shadow password\ndatabase (e.g., the local shadow password file\n<i>/etc/shadow</i>, NIS, and LDAP), readable only by\nroot.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\ndescribed below resemble those for the traditional password\ndatabase (e.g., see <a href=\"https://man.page/3/getpwnam\">getpwnam(3)</a> and\n<a href=\"https://man.page/3/getpwent\">getpwent(3)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getspnam</b>() function returns a pointer to a structure\ncontaining the broken-out fields of the record in the shadow\npassword database that matches the username <i>name</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getspent</b>() function returns a pointer to the next\nentry in the shadow password database. The position in the\ninput stream is initialized by <b>setspent</b>(). When done\nreading, the program may call <b>endspent</b>() so that\nresources can be deallocated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fgetspent</b>() function is similar to <b>getspent</b>()\nbut uses the supplied stream instead of the one implicitly\nopened by <b>setspent</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>sgetspent</b>() function parses the supplied string\n<i>s</i> into a struct <i>spwd</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>putspent</b>() function writes the contents of the\nsupplied struct <i>spwd *p</i> as a text line in the shadow\npassword file format to <i>stream</i>. String entries with\nvalue NULL and numerical entries with value -1 are written\nas an empty string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>lckpwdf</b>() function is intended to protect against\nmultiple simultaneous accesses of the shadow password\ndatabase. It tries to acquire a lock, and returns 0 on\nsuccess, or -1 on failure (lock not obtained within 15\nseconds). The <b>ulckpwdf</b>() function releases the lock\nagain. Note that there is no protection against direct\naccess of the shadow password file. Only programs that use\n<b>lckpwdf</b>() will notice the lock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These were the\nfunctions that formed the original shadow API. They are\nwidely available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Reentrant\nversions</b> <br>\nAnalogous to the reentrant functions for the password\ndatabase, glibc also has reentrant functions for the shadow\npassword database. The <b>getspnam_r</b>() function is like\n<b>getspnam</b>() but stores the retrieved shadow password\nstructure in the space pointed to by <i>spbuf</i>. This\nshadow password structure contains pointers to strings, and\nthese strings are stored in the buffer <i>buf</i> of size\n<i>buflen</i>. A pointer to the result (in case of success)\nor NULL (in case no entry was found or an error occurred) is\nstored in <i>*spbufp</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>getspent_r</b>(), <b>fgetspent_r</b>(), and\n<b>sgetspent_r</b>() are similarly analogous to their\nnonreentrant counterparts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some non-glibc\nsystems also have functions with these names, often with\ndifferent prototypes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Structure</b>\n<br>\nThe shadow password structure is defined in\n<i>&lt;shadow.h&gt;</i> as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct spwd {\n<br>\nchar *sp_namp; /* Login name */ <br>\nchar *sp_pwdp; /* Encrypted password */ <br>\nlong sp_lstchg; /* Date of last change <br>\n(measured in days since <br>\n1970-01-01 00:00:00 +0000 (UTC)) */ <br>\nlong sp_min; /* Min # of days between changes */ <br>\nlong sp_max; /* Max # of days between changes */ <br>\nlong sp_warn; /* # of days before password expires <br>\nto warn user to change it */ <br>\nlong sp_inact; /* # of days after password expires <br>\nuntil account is disabled */ <br>\nlong sp_expire; /* Date when account expires <br>\n(measured in days since <br>\n1970-01-01 00:00:00 +0000 (UTC)) */ <br>\nunsigned long sp_flag; /* Reserved */ <br>\n};</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\nthat return a pointer return NULL if no more entries are\navailable or if an error occurs during processing. The\nfunctions which have <i>int</i> as the return value return 0\nfor success and -1 for failure, with <i>errno</i> set to\nindicate the cause of the error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the\nnonreentrant functions, the return value may point to static\narea, and may be overwritten by subsequent calls to these\nfunctions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The reentrant\nfunctions return zero on success. In case of error, an error\nnumber is returned.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The caller does not have\npermission to access the shadow password file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ERANGE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Supplied buffer is too small.</p></td></tr>\n</table>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/etc/shadow</i></p>\n\n<p style=\"margin-left:22%;\">local shadow password database\nfile</p>\n\n<p style=\"margin-left:11%;\"><i>/etc/.pwd.lock</i></p>\n\n<p style=\"margin-left:22%;\">lock file</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The include\nfile <i>&lt;paths.h&gt;</i> defines the constant\n<b>_PATH_SHADOW</b> to the pathname of the shadow password\nfile.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3373221.png\" alt=\"Image grohtml-3373221.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the above\ntable, <i>getspent</i> in <i>race:getspent</i> signifies\nthat if any of the functions <b>setspent</b>(),\n<b>getspent</b>(), <b>getspent_r</b>(), or <b>endspent</b>()\nare used in parallel in different threads of a program, then\ndata races could occur.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The shadow\npassword database and its associated API are not specified\nin POSIX.1. However, many other systems provide a similar\nAPI.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/getgrnam\">getgrnam(3)</a>,\n<a href=\"https://man.page/3/getpwnam\">getpwnam(3)</a>, <a href=\"https://man.page/3/getpwnam_r\">getpwnam_r(3)</a>,\n<a href=\"https://man.page/5/shadow\">shadow(5)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}