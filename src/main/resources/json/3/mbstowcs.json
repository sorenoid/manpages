{"name":"mbstowcs","body":"\n\n<h1 align=\"center\">MBSTOWCS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mbstowcs -\nconvert a multibyte string to a wide-character string</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdlib.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>size_t\nmbstowcs(wchar_t *</b><i>dest</i><b>, const char\n*</b><i>src</i><b>, size_t</b> <i>n</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>dest</i>\nis not NULL, the <b>mbstowcs</b>() function converts the\nmultibyte string <i>src</i> to a wide-character string\nstarting at <i>dest</i>. At most <i>n</i> wide characters\nare written to <i>dest</i>. The sequence of characters in\nthe string <i>src</i> shall begin in the initial shift\nstate. The conversion can stop for three reasons:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>An invalid multibyte sequence has been encountered. In\nthis case, <i>(size_t)&nbsp;-1</i> is returned.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p><i>n</i> non-L'\\0' wide characters have been stored at\n<i>dest</i>. In this case, the number of wide characters\nwritten to <i>dest</i> is returned, but the shift state at\nthis point is lost.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>The multibyte string has been completely converted,\nincluding the terminating null character ('\\0'). In this\ncase, the number of wide characters written to <i>dest</i>,\nexcluding the terminating null wide character, is\nreturned.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The programmer\nmust ensure that there is room for at least <i>n</i> wide\ncharacters at <i>dest</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>dest</i>\nis NULL, <i>n</i> is ignored, and the conversion proceeds as\nabove, except that the converted wide characters are not\nwritten out to memory, and that no length limit exists.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\navoid the case 2 above, the programmer should make sure\n<i>n</i> is greater than or equal to\n<i>mbstowcs(NULL,src,0)+1</i>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>mbstowcs</b>() function returns the number of wide\ncharacters that make up the converted part of the\nwide-character string, not including the terminating null\nwide character. If an invalid multibyte sequence was\nencountered, <i>(size_t)&nbsp;-1</i> is returned.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3358021.png\" alt=\"Image grohtml-3358021.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, C99.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The behavior of\n<b>mbstowcs</b>() depends on the <b>LC_CTYPE</b> category of\nthe current locale.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<a href=\"https://man.page/3/mbsrtowcs\">mbsrtowcs(3)</a> provides a better interface to the same\nfunctionality.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow illustrates the use of <b>mbstowcs</b>(), as well as\nsome of the wide character classification functions. An\nexample run is the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ ./t_mbstowcs\nde_DE.UTF-8 Gr&Atilde;&frac14;&Atilde;e! <br>\nLength of source string (excluding terminator): <br>\n8 bytes <br>\n6 multibyte characters</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Wide character\nstring is: Gr&Atilde;&frac14;&Atilde;e! (6 characters) <br>\nG alpha upper <br>\nr alpha lower <br>\n&Atilde;&frac14; alpha lower <br>\n&Atilde; alpha lower <br>\ne alpha lower <br>\n! !alpha</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;wctype.h&gt; <br>\n#include &lt;locale.h&gt; <br>\n#include &lt;wchar.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;string.h&gt; <br>\n#include &lt;stdlib.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nsize_t mbslen; /* Number of multibyte characters in source\n*/ <br>\nwchar_t *wcs; /* Pointer to converted wide character string\n*/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &lt;\n3) { <br>\nfprintf(stderr, &quot;Usage: %s &lt;locale&gt;\n&lt;string&gt;\\n&quot;, argv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Apply the\nspecified locale */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(setlocale(LC_ALL, argv[1]) == NULL) { <br>\nperror(&quot;setlocale&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Calculate\nthe length required to hold argv[2] converted to <br>\na wide character string */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">mbslen =\nmbstowcs(NULL, argv[2], 0); <br>\nif (mbslen == (size_t) -1) { <br>\nperror(&quot;mbstowcs&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Describe the\nsource string to the user */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Length\nof source string (excluding terminator):\\n&quot;); <br>\nprintf(&quot; %zu bytes\\n&quot;, strlen(argv[2])); <br>\nprintf(&quot; %zu multibyte characters\\n\\n&quot;,\nmbslen);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Allocate\nwide character string of the desired size. Add 1 <br>\nto allow for terminating null wide character (L'\\0'). */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">wcs =\ncalloc(mbslen + 1, sizeof(*wcs)); <br>\nif (wcs == NULL) { <br>\nperror(&quot;calloc&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Convert the\nmultibyte character string in argv[2] to a <br>\nwide character string */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(mbstowcs(wcs, argv[2], mbslen + 1) == (size_t) -1) { <br>\nperror(&quot;mbstowcs&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Wide\ncharacter string is: %ls (%zu characters)\\n&quot;, <br>\nwcs, mbslen);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Now do some\ninspection of the classes of the characters in <br>\nthe wide character string */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (wchar_t\n*wp = wcs; *wp != 0; wp++) { <br>\nprintf(&quot; %lc &quot;, (wint_t) *wp);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(!iswalpha(*wp)) <br>\nprintf(&quot;!&quot;); <br>\nprintf(&quot;alpha &quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(iswalpha(*wp)) { <br>\nif (iswupper(*wp)) <br>\nprintf(&quot;upper &quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(iswlower(*wp)) <br>\nprintf(&quot;lower &quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">putchar('\\n');\n<br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/mblen\">mblen(3)</a>,\n<a href=\"https://man.page/3/mbsrtowcs\">mbsrtowcs(3)</a>, <a href=\"https://man.page/3/mbtowc\">mbtowc(3)</a>, <a href=\"https://man.page/3/wcstombs\">wcstombs(3)</a>,\n<a href=\"https://man.page/3/wctomb\">wctomb(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}