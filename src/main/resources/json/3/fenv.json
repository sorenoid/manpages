{"name":"fenv","description":"fenv(3) - linux command line manual","body":"\n\n<h1 align=\"center\">FENV</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">feclearexcept,\nfegetexceptflag, feraiseexcept, fesetexceptflag,\nfetestexcept, fegetenv, fegetround, feholdexcept,\nfesetround, fesetenv, feupdateenv, feenableexcept,\nfedisableexcept, fegetexcept - floating-point rounding and\nexception handling</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;fenv.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfeclearexcept(int</b> <i>excepts</i><b>); <br>\nint fegetexceptflag(fexcept_t *</b><i>flagp</i><b>, int</b>\n<i>excepts</i><b>); <br>\nint feraiseexcept(int</b> <i>excepts</i><b>); <br>\nint fesetexceptflag(const fexcept_t *</b><i>flagp</i><b>,\nint</b> <i>excepts</i><b>); <br>\nint fetestexcept(int</b> <i>excepts</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfegetround(void); <br>\nint fesetround(int</b> <i>rounding_mode</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfegetenv(fenv_t *</b><i>envp</i><b>); <br>\nint feholdexcept(fenv_t *</b><i>envp</i><b>); <br>\nint fesetenv(const fenv_t *</b><i>envp</i><b>); <br>\nint feupdateenv(const fenv_t *</b><i>envp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Link with\n<i>-lm</i>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These eleven\nfunctions were defined in C99, and describe the handling of\nfloating-point rounding and exceptions (overflow,\nzero-divide, etc.).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Exceptions</b>\n<br>\nThe <i>divide-by-zero</i> exception occurs when an operation\non finite numbers produces infinity as exact answer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>overflow</i> exception occurs when a result has to be\nrepresented as a floating-point number, but has (much)\nlarger absolute value than the largest (finite)\nfloating-point number that is representable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>underflow</i> exception occurs when a result has to be\nrepresented as a floating-point number, but has smaller\nabsolute value than the smallest positive normalized\nfloating-point number (and would lose much accuracy when\nrepresented as a denormalized number).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>inexact</i> exception occurs when the rounded result of\nan operation is not equal to the infinite precision result.\nIt may occur whenever <i>overflow</i> or <i>underflow</i>\noccurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>invalid</i> exception occurs when there is no\nwell-defined result for an operation, as for 0/0 or infinity\n- infinity or sqrt(-1).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Exception\nhandling</b> <br>\nExceptions are represented in two ways: as a single bit\n(exception present/absent), and these bits correspond in\nsome implementation-defined way with bit positions in an\ninteger, and also as an opaque structure that may contain\nmore information about the exception (perhaps the code\naddress where it occurred).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of the\nmacros <b>FE_DIVBYZERO</b>, <b>FE_INEXACT</b>,\n<b>FE_INVALID</b>, <b>FE_OVERFLOW</b>, <b>FE_UNDERFLOW</b>\nis defined when the implementation supports handling of the\ncorresponding exception, and if so then defines the\ncorresponding bit(s), so that one can call exception\nhandling functions, for example, using the integer argument\n<b>FE_OVERFLOW</b>|<b>FE_UNDERFLOW</b>. Other exceptions may\nbe supported. The macro <b>FE_ALL_EXCEPT</b> is the bitwise\nOR of all bits corresponding to supported exceptions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>feclearexcept</b>() function clears the supported\nexceptions represented by the bits in its argument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fegetexceptflag</b>() function stores a representation of\nthe state of the exception flags represented by the argument\n<i>excepts</i> in the opaque object <i>*flagp</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>feraiseexcept</b>() function raises the supported\nexceptions represented by the bits in <i>excepts</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fesetexceptflag</b>() function sets the complete status\nfor the exceptions represented by <i>excepts</i> to the\nvalue <i>*flagp</i>. This value must have been obtained by\nan earlier call of <b>fegetexceptflag</b>() with a last\nargument that contained all bits in <i>excepts</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fetestexcept</b>() function returns a word in which the\nbits are set that were set in the argument <i>excepts</i>\nand for which the corresponding exception is currently\nset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Rounding\nmode</b> <br>\nThe rounding mode determines how the result of\nfloating-point operations is treated when the result cannot\nbe exactly represented in the significand. Various rounding\nmodes may be provided: round to nearest (the default), round\nup (toward positive infinity), round down (toward negative\ninfinity), and round toward zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of the\nmacros <b>FE_TONEAREST</b>, <b>FE_UPWARD</b>,\n<b>FE_DOWNWARD</b>, and <b>FE_TOWARDZERO</b> is defined when\nthe implementation supports getting and setting the\ncorresponding rounding direction.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fegetround</b>() function returns the macro corresponding\nto the current rounding mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fesetround</b>() function sets the rounding mode as\nspecified by its argument and returns zero when it was\nsuccessful.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">C99 and\nPOSIX.1-2008 specify an identifier, <b>FLT_ROUNDS</b>,\ndefined in <i>&lt;float.h&gt;</i>, which indicates the\nimplementation-defined rounding behavior for floating-point\naddition. This identifier has one of the following\nvalues:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>-1</p></td>\n<td width=\"8%\"></td>\n<td width=\"58%\">\n\n\n<p>The rounding mode is not determinable.</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>0</p></td>\n<td width=\"8%\"></td>\n<td width=\"58%\">\n\n\n<p>Rounding is toward 0.</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1</p></td>\n<td width=\"8%\"></td>\n<td width=\"58%\">\n\n\n<p>Rounding is toward nearest number.</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2</p></td>\n<td width=\"8%\"></td>\n<td width=\"58%\">\n\n\n<p>Rounding is toward positive infinity.</p></td>\n<td width=\"20%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3</p></td>\n<td width=\"8%\"></td>\n<td width=\"58%\">\n\n\n<p>Rounding is toward negative infinity.</p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other values\nrepresent machine-dependent, nonstandard rounding modes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The value of\n<b>FLT_ROUNDS</b> should reflect the current rounding mode\nas set by <b>fesetround</b>() (but see BUGS).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Floating-point\nenvironment</b> <br>\nThe entire floating-point environment, including control\nmodes and status flags, can be handled as one opaque object,\nof type <i>fenv_t</i>. The default environment is denoted by\n<b>FE_DFL_ENV</b> (of type <i>const fenv_t&nbsp;*</i>). This\nis the environment setup at program start and it is defined\nby ISO C to have round to nearest, all exceptions cleared\nand a nonstop (continue on exceptions) mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fegetenv</b>() function saves the current floating-point\nenvironment in the object <i>*envp</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>feholdexcept</b>() function does the same, then clears\nall exception flags, and sets a nonstop (continue on\nexceptions) mode, if available. It returns zero when\nsuccessful.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fesetenv</b>() function restores the floating-point\nenvironment from the object <i>*envp</i>. This object must\nbe known to be valid, for example, the result of a call to\n<b>fegetenv</b>() or <b>feholdexcept</b>() or equal to\n<b>FE_DFL_ENV</b>. This call does not raise exceptions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>feupdateenv</b>() function installs the floating-point\nenvironment represented by the object <i>*envp</i>, except\nthat currently raised exceptions are not cleared. After\ncalling this function, the raised exceptions will be a\nbitwise OR of those previously set with those in\n<i>*envp</i>. As before, the object <i>*envp</i> must be\nknown to be valid.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nreturn zero on success and nonzero if an error occurred.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nfirst appeared in glibc in version 2.1.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3305401.png\" alt=\"Image grohtml-3305401.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">IEC 60559 (IEC\n559:1989), ANSI/IEEE 854, C99, POSIX.1-2001.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glibc\nnotes</b> <br>\nIf possible, the GNU C Library defines a macro\n<b>FE_NOMASK_ENV</b> which represents an environment where\nevery exception raised causes a trap to occur. You can test\nfor this macro using <b>#ifdef</b>. It is defined only if\n<b>_GNU_SOURCE</b> is defined. The C99 standard does not\ndefine a way to set individual bits in the floating-point\nmask, for example, to trap on specific flags. Since version\n2.2, glibc supports the functions <b>feenableexcept</b>()\nand <b>fedisableexcept</b>() to set individual\nfloating-point traps, and <b>fegetexcept</b>() to query the\nstate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;fenv.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfeenableexcept(int</b> <i>excepts</i><b>); <br>\nint fedisableexcept(int</b> <i>excepts</i><b>); <br>\nint fegetexcept(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>feenableexcept</b>() and <b>fedisableexcept</b>()\nfunctions enable (disable) traps for each of the exceptions\nrepresented by <i>excepts</i> and return the previous set of\nenabled exceptions when successful, and -1 otherwise. The\n<b>fegetexcept</b>() function returns the set of all\ncurrently enabled exceptions.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">C99 specifies\nthat the value of <b>FLT_ROUNDS</b> should reflect changes\nto the current rounding mode, as set by <b>fesetround</b>().\nCurrently, this does not occur: <b>FLT_ROUNDS</b> always has\nthe value 1.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/math_error\">math_error(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}