{"name":"lwp::protocol","description":"LWP::Protocol - Base class for LWP protocols","body":"\n\n<h1 align=\"center\">LWP::Protocol</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">LWP::Protocol -\nBase class for LWP protocols</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">package\nLWP::Protocol::foo; <br>\nuse parent qw(LWP::Protocol);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This class is\nused as the base class for all protocol implementations\nsupported by the <small>LWP</small> library.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When creating\nan instance of this class using\n&quot;LWP::Protocol::create($url)&quot;, and you get an\ninitialized subclass appropriate for that access method. In\nother words, the &quot;create&quot; in LWP::Protocol\nfunction calls the constructor for one of its\nsubclasses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All derived\n&quot;LWP::Protocol&quot; classes need to override the\n&quot;request()&quot; method which is used to service a\nrequest. The overridden method can make use of the\n&quot;collect()&quot; method to collect together chunks of\ndata as it is received.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nmethods and functions are provided:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>new</b> <br>\nmy $prot = LWP::Protocol-&gt;new();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nLWP::Protocol constructor is inherited by subclasses. As\nthis is a virtual base class this method should <b>not</b>\nbe called directly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>create</b>\n<br>\nmy $prot = LWP::Protocol::create($scheme)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Create an\nobject of the class implementing the protocol to handle the\ngiven scheme. This is a function, not a method. It is more\nan object factory than a constructor. This is the function\nuser agents should use to access protocols.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>implementor</b>\n<br>\nmy $class = LWP::Protocol::implementor($scheme,\n[$class])</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Get and/or set\nimplementor class for a scheme. Returns '' if the specified\nscheme is not supported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>request</b>\n<br>\n$response = $protocol-&gt;request($request, $proxy, undef);\n<br>\n$response = $protocol-&gt;request($request, $proxy,\n'/tmp/sss'); <br>\n$response = $protocol-&gt;request($request, $proxy,\n\\&amp;callback, 1024);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Dispatches a\nrequest over the protocol, and returns a response object.\nThis method needs to be overridden in subclasses. Refer to\nLWP::UserAgent for description of the arguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>collect</b>\n<br>\nmy $res = $prot-&gt;collect(undef, $response, $collector); #\nstored in $response <br>\nmy $res = $prot-&gt;collect($filename, $response,\n$collector); <br>\nmy $res = $prot-&gt;collect(sub { ... }, $response,\n$collector);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Collect the\ncontent of a request, and process it appropriately into a\nscalar, file, or by calling a callback. If the first\nparameter is undefined, then the content is stored within\nthe $response. If it&rsquo;s a simple scalar, then\nit&rsquo;s interpreted as a file name and the content is\nwritten to this file. If it&rsquo;s a code reference, then\ncontent is passed to this routine.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The collector\nis a routine that will be called and which is responsible\nfor returning pieces (as ref to scalar) of the content to\nprocess. The $collector signals &quot;EOF&quot; by returning\na reference to an empty string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nvalue is the HTTP::Response object reference.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Note:</b> We\nwill only use the callback or file argument if\n&quot;$response-&gt;is_success()&quot;. This avoids sending\ncontent data for redirects and authentication responses to\nthe callback which would be confusing.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>collect_once</b>\n<br>\n$prot-&gt;collect_once($arg, $response, $content)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Can be called\nwhen the whole response content is available as content.\nThis will invoke &quot;collect&quot; in LWP::Protocol with a\ncollector callback that returns a reference to $content the\nfirst time and an empty string the next.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Inspect the\n<i>LWP/Protocol/file.pm</i> and <i>LWP/Protocol/http.pm</i>\nfiles for examples of usage.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n1995-2001 Gisle Aas.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This library is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":3}