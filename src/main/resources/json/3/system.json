{"name":"system","description":"system - execute a shell command","body":"\n\n<h1 align=\"center\">SYSTEM</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">system -\nexecute a shell command</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdlib.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsystem(const char *</b><i>command</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>system</b>() library function uses <a href=\"https://man.page/2/fork\">fork(2)</a> to\ncreate a child process that executes the shell command\nspecified in <i>command</i> using <a href=\"https://man.page/3/execl\">execl(3)</a> as\nfollows:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">execl(&quot;/bin/sh&quot;,\n&quot;sh&quot;, &quot;-c&quot;, command, (char *) NULL);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>system</b>()\nreturns after the command has been completed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">During\nexecution of the command, <b>SIGCHLD</b> will be blocked,\nand <b>SIGINT</b> and <b>SIGQUIT</b> will be ignored, in the\nprocess that calls <b>system</b>(). (These signals will be\nhandled according to their defaults inside the child process\nthat executes <i>command</i>.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>command</i> is NULL, then <b>system</b>() returns a\nstatus indicating whether a shell is available on the\nsystem.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nvalue of <b>system</b>() is one of the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If <i>command</i> is NULL, then a nonzero value if a\nshell is available, or 0 if no shell is available.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If a child process could not be created, or its status\ncould not be retrieved, the return value is -1 and\n<i>errno</i> is set to indicate the error.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If a shell could not be executed in the child process,\nthen the return value is as though the child shell\nterminated by calling <a href=\"https://man.page/2/_exit\">_exit(2)</a> with the status\n127.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If all system calls succeed, then the return value is\nthe termination status of the child shell used to execute\n<i>command</i>. (The termination status of a shell is the\ntermination status of the last command it executes.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the last two\ncases, the return value is a &quot;wait status&quot; that\ncan be examined using the macros described in\n<a href=\"https://man.page/2/waitpid\">waitpid(2)</a>. (i.e., <b>WIFEXITED</b>(),\n<b>WEXITSTATUS</b>(), and so on).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>system</b>()\ndoes not affect the wait status of any other children.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>system</b>()\ncan fail with any of the same errors as <a href=\"https://man.page/2/fork\">fork(2)</a>.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3415781.png\" alt=\"Image grohtml-3415781.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, C89, C99.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>system</b>()\nprovides simplicity and convenience: it handles all of the\ndetails of calling <a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/3/execl\">execl(3)</a>, and\n<a href=\"https://man.page/2/waitpid\">waitpid(2)</a>, as well as the necessary manipulations of\nsignals; in addition, the shell performs the usual\nsubstitutions and I/O redirections for <i>command</i>. The\nmain cost of <b>system</b>() is inefficiency: additional\nsystem calls are required to create the process that runs\nthe shell and to execute the shell.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<b>_XOPEN_SOURCE</b> feature test macro is defined (before\nincluding <i>any</i> header files), then the macros\ndescribed in <a href=\"https://man.page/2/waitpid\">waitpid(2)</a> (<b>WEXITSTATUS</b>(), etc.)\nare made available when including\n<i>&lt;stdlib.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As mentioned,\n<b>system</b>() ignores <b>SIGINT</b> and <b>SIGQUIT</b>.\nThis may make programs that call it from a loop\nuninterruptible, unless they take care themselves to check\nthe exit status of the child. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">while\n(something) { <br>\nint ret = system(&quot;foo&quot;);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if\n(WIFSIGNALED(ret) &amp;&amp; <br>\n(WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT)) <br>\nbreak; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX.1, it is unspecified whether handlers registered using\n<a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a> are called during the execution of\n<b>system</b>(). In the glibc implementation, such handlers\nare not called.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In versions of\nglibc before 2.1.3, the check for the availability of\n<i>/bin/sh</i> was not actually performed if <i>command</i>\nwas NULL; instead it was always assumed to be available, and\n<b>system</b>() always returned 1 in this case. Since glibc\n2.1.3, this check is performed because, even though\nPOSIX.1-2001 requires a conforming implementation to provide\na shell, that shell may not be available or executable if\nthe calling program has previously called <a href=\"https://man.page/2/chroot\">chroot(2)</a>\n(which is not specified by POSIX.1-2001).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is possible\nfor the shell command to terminate with a status of 127,\nwhich yields a <b>system</b>() return value that is\nindistinguishable from the case where a shell could not be\nexecuted in the child process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Caveats</b>\n<br>\nDo not use <b>system</b>() from a privileged program (a\nset-user-ID or set-group-ID program, or a program with\ncapabilities) because strange values for some environment\nvariables might be used to subvert system integrity. For\nexample, <b>PATH</b> could be manipulated so that an\narbitrary program is executed with privilege. Use the\n<a href=\"https://man.page/3/exec\">exec(3)</a> family of functions instead, but not\n<a href=\"https://man.page/3/execlp\">execlp(3)</a> or <a href=\"https://man.page/3/execvp\">execvp(3)</a> (which also use the\n<b>PATH</b> environment variable to search for an\nexecutable).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>system</b>()\nwill not, in fact, work properly from programs with\nset-user-ID or set-group-ID privileges on systems on which\n<i>/bin/sh</i> is bash version 2: as a security measure,\nbash 2 drops privileges on startup. (Debian uses a different\nshell, <a href=\"https://man.page/1/dash\">dash(1)</a>, which does not do this when invoked\nas <b>sh</b>.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any user input\nthat is employed as part of <i>command</i> should be\n<i>carefully</i> sanitized, to ensure that unexpected shell\ncommands or command options are not executed. Such risks are\nespecially grave when using <b>system</b>() from a\nprivileged program.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/sh\">sh(1)</a>,\n<a href=\"https://man.page/2/execve\">execve(2)</a>, <a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>, <a href=\"https://man.page/2/wait\">wait(2)</a>, <a href=\"https://man.page/3/exec\">exec(3)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}