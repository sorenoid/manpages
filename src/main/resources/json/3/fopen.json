{"name":"fopen","description":"fopen, fdopen, freopen - stream open functions","body":"\n\n<h1 align=\"center\">FOPEN</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fopen, fdopen,\nfreopen - stream open functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdio.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FILE\n*fopen(const char *</b><i>pathname</i><b>, const char\n*</b><i>mode</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FILE\n*fdopen(int</b> <i>fd</i><b>, const char\n*</b><i>mode</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FILE\n*freopen(const char *</b><i>pathname</i><b>, const char\n*</b><i>mode</i><b>, FILE *</b><i>stream</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fdopen</b>():\n_POSIX_C_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fopen</b>() function opens the file whose name is the\nstring pointed to by <i>pathname</i> and associates a stream\nwith it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The argument\n<i>mode</i> points to a string beginning with one of the\nfollowing sequences (possibly followed by additional\ncharacters, as described below):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>r</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Open text file for reading. The stream is positioned at\nthe beginning of the file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>r+</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Open for reading and writing. The stream is positioned\nat the beginning of the file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>w</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Truncate file to zero length or create text file for\nwriting. The stream is positioned at the beginning of the\nfile.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>w+</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Open for reading and writing. The file is created if it\ndoes not exist, otherwise it is truncated. The stream is\npositioned at the beginning of the file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>a</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Open for appending (writing at end of file). The file is\ncreated if it does not exist. The stream is positioned at\nthe end of the file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>a+</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>Open for reading and appending (writing at end of file).\nThe file is created if it does not exist. Output is always\nappended to the end of the file. POSIX is silent on what the\ninitial read position is when using this mode. For glibc,\nthe initial file position for reading is at the beginning of\nthe file, but for Android/BSD/MacOS, the initial file\nposition for reading is at the end of the file.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>mode</i>\nstring can also include the letter 'b' either as a last\ncharacter or as a character between the characters in any of\nthe two-character strings described above. This is strictly\nfor compatibility with C89 and has no effect; the 'b' is\nignored on all POSIX conforming systems, including Linux.\n(Other systems may treat text files and binary files\ndifferently, and adding the 'b' may be a good idea if you do\nI/O to a binary file and expect that your program may be\nported to non-UNIX environments.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See NOTES below\nfor details of glibc extensions for <i>mode</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any created\nfile will have the mode <b>S_IRUSR</b> | <b>S_IWUSR</b> |\n<b>S_IRGRP</b> | <b>S_IWGRP</b> | <b>S_IROTH</b> |\n<b>S_IWOTH</b> (0666), as modified by the process&rsquo;s\numask value (see <a href=\"https://man.page/2/umask\">umask(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Reads and\nwrites may be intermixed on read/write streams in any order.\nNote that ANSI C requires that a file positioning function\nintervene between output and input, unless an input\noperation encounters end-of-file. (If this condition is not\nmet, then a read is allowed to return the result of writes\nother than the most recent.) Therefore it is good practice\n(and indeed sometimes necessary under Linux) to put an\n<a href=\"https://man.page/3/fseek\">fseek(3)</a> or <a href=\"https://man.page/3/fgetpos\">fgetpos(3)</a> operation between write\nand read operations on such a stream. This operation may be\nan apparent no-op (as in <i>fseek(..., 0L, SEEK_CUR)</i>\ncalled for its synchronizing side effect).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Opening a file\nin append mode (<b>a</b> as the first character of\n<i>mode</i>) causes all subsequent write operations to this\nstream to occur at end-of-file, as if preceded the call:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">fseek(stream,\n0, SEEK_END);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The file\ndescriptor associated with the stream is opened as if by a\ncall to <a href=\"https://man.page/2/open\">open(2)</a> with the following flags:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3317461.png\" alt=\"Image grohtml-3317461.png\"></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fdopen()</b>\n<br>\nThe <b>fdopen</b>() function associates a stream with the\nexisting file descriptor, <i>fd</i>. The <i>mode</i> of the\nstream (one of the values &quot;r&quot;, &quot;r+&quot;,\n&quot;w&quot;, &quot;w+&quot;, &quot;a&quot;,\n&quot;a+&quot;) must be compatible with the mode of the file\ndescriptor. The file position indicator of the new stream is\nset to that belonging to <i>fd</i>, and the error and\nend-of-file indicators are cleared. Modes &quot;w&quot; or\n&quot;w+&quot; do not cause truncation of the file. The file\ndescriptor is not dup&rsquo;ed, and will be closed when the\nstream created by <b>fdopen</b>() is closed. The result of\napplying <b>fdopen</b>() to a shared memory object is\nundefined.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>freopen()</b>\n<br>\nThe <b>freopen</b>() function opens the file whose name is\nthe string pointed to by <i>pathname</i> and associates the\nstream pointed to by <i>stream</i> with it. The original\nstream (if it exists) is closed. The <i>mode</i> argument is\nused just as in the <b>fopen</b>() function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<i>pathname</i> argument is a null pointer, <b>freopen</b>()\nchanges the mode of the stream to that specified in\n<i>mode</i>; that is, <b>freopen</b>() reopens the pathname\nthat is associated with the stream. The specification for\nthis behavior was added in the C99 standard, which says:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In this case,\nthe file descriptor associated with the stream need not be\nclosed if the call to <b>freopen</b>() succeeds. It is\nimplementation-defined which changes of mode are permitted\n(if any), and under what circumstances.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The primary use\nof the <b>freopen</b>() function is to change the file\nassociated with a standard text stream (<i>stderr</i>,\n<i>stdin</i>, or <i>stdout</i>).</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Upon successful\ncompletion <b>fopen</b>(), <b>fdopen</b>(), and\n<b>freopen</b>() return a <i>FILE</i> pointer. Otherwise,\nNULL is returned and <i>errno</i> is set to indicate the\nerror.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The <i>mode</i> provided to\n<b>fopen</b>(), <b>fdopen</b>(), or <b>freopen</b>() was\ninvalid.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fopen</b>(), <b>fdopen</b>(), and <b>freopen</b>()\nfunctions may also fail and set <i>errno</i> for any of the\nerrors specified for the routine <a href=\"https://man.page/3/malloc\">malloc(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fopen</b>() function may also fail and set <i>errno</i>\nfor any of the errors specified for the routine\n<a href=\"https://man.page/2/open\">open(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>fdopen</b>() function may also fail and set <i>errno</i>\nfor any of the errors specified for the routine\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>freopen</b>() function may also fail and set <i>errno</i>\nfor any of the errors specified for the routines\n<a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/3/fclose\">fclose(3)</a>, and <a href=\"https://man.page/3/fflush\">fflush(3)</a>.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3317462.png\" alt=\"Image grohtml-3317462.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fopen</b>(),\n<b>freopen</b>(): POSIX.1-2001, POSIX.1-2008, C89, C99.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fdopen</b>():\nPOSIX.1-2001, POSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glibc\nnotes</b> <br>\nThe GNU C library allows the following extensions for the\nstring specified in <i>mode</i>: <b><br>\nc</b> (since glibc 2.3.3)</p>\n\n<p style=\"margin-left:22%;\">Do not make the open operation,\nor subsequent read and write operations, thread cancellation\npoints. This flag is ignored for <b>fdopen</b>().</p>\n\n<p style=\"margin-left:11%;\"><b>e</b> (since glibc 2.7)</p>\n\n<p style=\"margin-left:22%;\">Open the file with the\n<b>O_CLOEXEC</b> flag. See <a href=\"https://man.page/2/open\">open(2)</a> for more\ninformation. This flag is ignored for <b>fdopen</b>().</p>\n\n<p style=\"margin-left:11%;\"><b>m</b> (since glibc 2.3)</p>\n\n<p style=\"margin-left:22%;\">Attempt to access the file\nusing <a href=\"https://man.page/2/mmap\">mmap(2)</a>, rather than I/O system calls\n(<a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>). Currently, use of\n<a href=\"https://man.page/2/mmap\">mmap(2)</a> is attempted only for a file opened for\nreading.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p><b>x</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"78%\">\n\n\n<p>Open the file exclusively (like the <b>O_EXCL</b> flag\nof <a href=\"https://man.page/2/open\">open(2)</a>). If the file already exists,\n<b>fopen</b>() fails, and sets <i>errno</i> to\n<b>EEXIST</b>. This flag is ignored for <b>fdopen</b>().</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe above characters, <b>fopen</b>() and <b>freopen</b>()\nsupport the following syntax in <i>mode</i>:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>,ccs=</b><i>string</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The given\n<i>string</i> is taken as the name of a coded character set\nand the stream is marked as wide-oriented. Thereafter,\ninternal conversion functions convert I/O to and from the\ncharacter set <i>string</i>. If the\n<b>,ccs=</b><i>string</i> syntax is not specified, then the\nwide-orientation of the stream is determined by the first\nfile operation. If that operation is a wide-character\noperation, the stream is marked wide-oriented, and functions\nto convert to the coded character set are loaded.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When parsing\nfor individual flag characters in <i>mode</i> (i.e., the\ncharacters preceding the &quot;ccs&quot; specification), the\nglibc implementation of <b>fopen</b>() and <b>freopen</b>()\nlimits the number of characters examined in <i>mode</i> to 7\n(or, in glibc versions before 2.14, to 6, which was not\nenough to include possible specifications such as\n&quot;rb+cmxe&quot;). The current implementation of\n<b>fdopen</b>() parses at most 5 characters in\n<i>mode</i>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/open\">open(2)</a>,\n<a href=\"https://man.page/3/fclose\">fclose(3)</a>, <a href=\"https://man.page/3/fileno\">fileno(3)</a>, <a href=\"https://man.page/3/fmemopen\">fmemopen(3)</a>,\n<a href=\"https://man.page/3/fopencookie\">fopencookie(3)</a>, <a href=\"https://man.page/3/open_memstream\">open_memstream(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}