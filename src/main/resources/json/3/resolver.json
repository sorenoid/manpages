{"name":"resolver","description":"resolver(3) - linux command line manual","body":"\n\n<h1 align=\"center\">RESOLVER</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">res_ninit,\nres_nclose, res_nquery, res_nsearch, res_nquerydomain,\nres_nmkquery, res_nsend, res_init, res_query, res_search,\nres_querydomain, res_mkquery, res_send, dn_comp, dn_expand -\nresolver routines</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;netinet/in.h&gt; <br>\n#include &lt;arpa/nameser.h&gt; <br>\n#include &lt;resolv.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>struct\n__res_state; <br>\ntypedef struct __res_state *res_state;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_ninit(res_state</b> <i>statep</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nres_nclose(res_state</b> <i>statep</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_nquery(res_state</b> <i>statep</i><b>, <br>\nconst char *</b><i>dname</i><b>, int</b> <i>class</i><b>,\nint</b> <i>type</i><b>, <br>\nunsigned char *</b><i>answer</i><b>, int</b>\n<i>anslen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_nsearch(res_state</b> <i>statep</i><b>, <br>\nconst char *</b><i>dname</i><b>, int</b> <i>class</i><b>,\nint</b> <i>type</i><b>, <br>\nunsigned char *</b><i>answer</i><b>, int</b>\n<i>anslen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_nquerydomain(res_state</b> <i>statep</i><b>, <br>\nconst char *</b><i>name</i><b>, const char\n*</b><i>domain</i><b>, <br>\nint</b> <i>class</i><b>, int</b> <i>type</i><b>, unsigned\nchar *</b><i>answer</i><b>, <br>\nint</b> <i>anslen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_nmkquery(res_state</b> <i>statep</i><b>, <br>\nint</b> <i>op</i><b>, const char *</b><i>dname</i><b>,\nint</b> <i>class</i><b>, <br>\nint</b> <i>type</i><b>, const unsigned char\n*</b><i>data</i><b>, int</b> <i>datalen</i><b>, <br>\nconst unsigned char *</b><i>newrr</i><b>, <br>\nunsigned char *</b><i>buf</i><b>, int</b>\n<i>buflen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_nsend(res_state</b> <i>statep</i><b>, <br>\nconst unsigned char *</b><i>msg</i><b>, int</b>\n<i>msglen</i><b>, <br>\nunsigned char *</b><i>answer</i><b>, int</b>\n<i>anslen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ndn_comp(const char *</b><i>exp_dn</i><b>, unsigned char\n*</b><i>comp_dn</i><b>, <br>\nint</b> <i>length</i><b>, unsigned char\n**</b><i>dnptrs</i><b>, <br>\nunsigned char **</b><i>lastdnptr</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ndn_expand(const unsigned char *</b><i>msg</i><b>, <br>\nconst unsigned char *</b><i>eomorig</i><b>, <br>\nconst unsigned char *</b><i>comp_dn</i><b>, char\n*</b><i>exp_dn</i><b>, <br>\nint</b> <i>length</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Deprecated\n<br>\nextern struct __res_state _res;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_init(void);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_query(const char *</b><i>dname</i><b>, int</b>\n<i>class</i><b>, int</b> <i>type</i><b>, <br>\nunsigned char *</b><i>answer</i><b>, int</b>\n<i>anslen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_search(const char *</b><i>dname</i><b>, int</b>\n<i>class</i><b>, int</b> <i>type</i><b>, <br>\nunsigned char *</b><i>answer</i><b>, int</b>\n<i>anslen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_querydomain(const char *</b><i>name</i><b>, const char\n*</b><i>domain</i><b>, <br>\nint</b> <i>class</i><b>, int</b> <i>type</i><b>, unsigned\nchar *</b><i>answer</i><b>, <br>\nint</b> <i>anslen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_mkquery(int</b> <i>op</i><b>, const char\n*</b><i>dname</i><b>, int</b> <i>class</i><b>, <br>\nint</b> <i>type</i><b>, const unsigned char\n*</b><i>data</i><b>, int</b> <i>datalen</i><b>, <br>\nconst unsigned char *</b><i>newrr</i><b>, <br>\nunsigned char *</b><i>buf</i><b>, int</b>\n<i>buflen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nres_send(const unsigned char *</b><i>msg</i><b>, int</b>\n<i>msglen</i><b>, <br>\nunsigned char *</b><i>answer</i><b>, int</b>\n<i>anslen</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Link with\n<i>-lresolv</i>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Note:</b>\nThis page is incomplete (various resolver functions provided\nby glibc are not described) and likely out of date.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\ndescribed below make queries to and interpret the responses\nfrom Internet domain name servers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The API\nconsists of a set of more modern, reentrant functions and an\nolder set of nonreentrant functions that have been\nsuperseded. The traditional resolver interfaces such as\n<b>res_init</b>() and <b>res_query</b>() use some static\n(global) state stored in the <i>_res</i> structure,\nrendering these functions non-thread-safe. BIND 8.2\nintroduced a set of new interfaces <b>res_ninit</b>(),\n<b>res_nquery</b>(), and so on, which take a\n<i>res_state</i> as their first argument, so you can use a\nper-thread resolver state.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>res_ninit</b>() and <b>res_init</b>() functions read the\nconfiguration files (see <b>resolv.conf</b>(5)) to get the\ndefault domain name and name server address(es). If no\nserver is given, the local host is tried. If no domain is\ngiven, that associated with the local host is used. It can\nbe overridden with the environment variable\n<b>LOCALDOMAIN</b>. <b>res_ninit</b>() or <b>res_init</b>()\nis normally executed by the first call to one of the other\nfunctions. Every call to <b>res_ninit</b>() requires a\ncorresponding call to <b>res_nclose</b>() to free memory\nallocated by <b>res_ninit</b>() and subsequent calls to\n<b>res_nquery</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>res_nquery</b>() and <b>res_query</b>() functions query\nthe name server for the fully qualified domain name\n<i>name</i> of specified <i>type</i> and <i>class</i>. The\nreply is left in the buffer <i>answer</i> of length\n<i>anslen</i> supplied by the caller.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>res_nsearch</b>() and <b>res_search</b>() functions make\na query and waits for the response like <b>res_nquery</b>()\nand <b>res_query</b>(), but in addition they implement the\ndefault and search rules controlled by <b>RES_DEFNAMES</b>\nand <b>RES_DNSRCH</b> (see description of <i>_res</i>\noptions below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>res_nquerydomain</b>() and <b>res_querydomain</b>()\nfunctions make a query using\n<b>res_nquery</b>()/<b>res_query</b>() on the concatenation\nof <i>name</i> and <i>domain</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are lower-level routines used by\n<b>res_nquery</b>()/<b>res_query</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>res_nmkquery</b>() and <b>res_mkquery</b>() functions\nconstruct a query message in <i>buf</i> of length\n<i>buflen</i> for the domain name <i>dname</i>. The query\ntype <i>op</i> is one of the following (typically\n<b>QUERY</b>):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>QUERY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Standard query.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>IQUERY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Inverse query. This option was removed in glibc 2.26,\nsince it has not been supported by DNS servers for a very\nlong time.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>NS_NOTIFY_OP</b></p>\n\n<p style=\"margin-left:22%;\">Notify secondary of SOA (Start\nof Authority) change.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>newrr</i> is\ncurrently unused.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>res_nsend</b>() and <b>res_send</b>() function send a\npreformatted query given in <i>msg</i> of length\n<i>msglen</i> and returns the answer in <i>answer</i> which\nis of length <i>anslen</i>. They will call\n<b>res_ninit</b>()/<b>res_init</b>() if it has not already\nbeen called.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>dn_comp</b>() function compresses the domain name\n<i>exp_dn</i> and stores it in the buffer <i>comp_dn</i> of\nlength <i>length</i>. The compression uses an array of\npointers <i>dnptrs</i> to previously compressed names in the\ncurrent message. The first pointer points to the beginning\nof the message and the list ends with NULL. The limit of the\narray is specified by <i>lastdnptr</i>. If <i>dnptr</i> is\nNULL, domain names are not compressed. If <i>lastdnptr</i>\nis NULL, the list of labels is not updated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>dn_expand</b>() function expands the compressed domain\nname <i>comp_dn</i> to a full domain name, which is placed\nin the buffer <i>exp_dn</i> of size <i>length</i>. The\ncompressed name is contained in a query or reply message,\nand <i>msg</i> points to the beginning of the message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The resolver\nroutines use configuration and state information contained\nin a <i>__res_state</i> structure (either passed as the\n<i>statep</i> argument, or in the global variable\n<i>_res</i>, in the case of the older nonreentrant\nfunctions). The only field of this structure that is\nnormally manipulated by the user is the <i>options</i>\nfield. This field can contain the bitwise &quot;OR&quot; of\nthe following options: <b><br>\nRES_INIT</b></p>\n\n<p style=\"margin-left:22%;\">True if <b>res_ninit</b>() or\n<b>res_init</b>() has been called.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_DEBUG</b></p>\n\n<p style=\"margin-left:22%;\">Print debugging messages. This\noption is available only if glibc was built with debugging\nenabled, which is not the default.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_AAONLY</b>\n(unimplemented; deprecated in glibc 2.25)</p>\n\n<p style=\"margin-left:22%;\">Accept authoritative answers\nonly. <b>res_send</b>() continues until it finds an\nauthoritative answer or returns an error. This option was\npresent but unimplemented in glibc until version 2.24; since\nglibc 2.25, it is deprecated, and its usage produces a\nwarning.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_USEVC</b></p>\n\n<p style=\"margin-left:22%;\">Use TCP connections for queries\nrather than UDP datagrams.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_PRIMARY</b>\n(unimplemented; deprecated in glibc 2.25)</p>\n\n<p style=\"margin-left:22%;\">Query primary domain name\nserver only. This option was present but unimplemented in\nglibc until version 2.24; since glibc 2.25, it is\ndeprecated, and its usage produces a warning.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_IGNTC</b></p>\n\n<p style=\"margin-left:22%;\">Ignore truncation errors.\nDon&rsquo;t retry with TCP.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_RECURSE</b></p>\n\n<p style=\"margin-left:22%;\">Set the recursion desired bit\nin queries. Recursion is carried out by the domain name\nserver, not by <b>res_send</b>(). [Enabled by default].</p>\n\n<p style=\"margin-left:11%;\"><b>RES_DEFNAMES</b></p>\n\n<p style=\"margin-left:22%;\">If set, <b>res_search</b>()\nwill append the default domain name to single component\nnames&mdash;that is, those that do not contain a dot.\n[Enabled by default].</p>\n\n<p style=\"margin-left:11%;\"><b>RES_STAYOPEN</b></p>\n\n<p style=\"margin-left:22%;\">Used with <b>RES_USEVC</b> to\nkeep the TCP connection open between queries.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_DNSRCH</b></p>\n\n<p style=\"margin-left:22%;\">If set, <b>res_search</b>()\nwill search for hostnames in the current domain and in\nparent domains. This option is used by\n<a href=\"https://man.page/3/gethostbyname\">gethostbyname(3)</a>. [Enabled by default].</p>\n\n<p style=\"margin-left:11%;\"><b>RES_INSECURE1</b></p>\n\n<p style=\"margin-left:22%;\">Accept a response from a wrong\nserver. This can be used to detect potential security\nhazards, but you need to compile glibc with debugging\nenabled and use <b>RES_DEBUG</b> option (for debug purpose\nonly).</p>\n\n<p style=\"margin-left:11%;\"><b>RES_INSECURE2</b></p>\n\n<p style=\"margin-left:22%;\">Accept a response which\ncontains a wrong query. This can be used to detect potential\nsecurity hazards, but you need to compile glibc with\ndebugging enabled and use <b>RES_DEBUG</b> option (for debug\npurpose only).</p>\n\n<p style=\"margin-left:11%;\"><b>RES_NOALIASES</b></p>\n\n<p style=\"margin-left:22%;\">Disable usage of\n<b>HOSTALIASES</b> environment variable.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_USE_INET6</b></p>\n\n<p style=\"margin-left:22%;\">Try an AAAA query before an A\nquery inside the <a href=\"https://man.page/3/gethostbyname\">gethostbyname(3)</a> function, and map\nIPv4 responses in IPv6 &quot;tunneled form&quot; if no AAAA\nrecords are found but an A record set exists. Since glibc\n2.25, this option is deprecated, and its usage produces a\nwarning; applications should use <a href=\"https://man.page/3/getaddrinfo\">getaddrinfo(3)</a>,\nrather than <a href=\"https://man.page/3/gethostbyname\">gethostbyname(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_ROTATE</b></p>\n\n<p style=\"margin-left:22%;\">Causes round-robin selection of\nname servers from among those listed. This has the effect of\nspreading the query load among all listed servers, rather\nthan having all clients try the first listed server first\nevery time.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_NOCHECKNAME</b>\n(unimplemented; deprecated in glibc 2.25)</p>\n\n<p style=\"margin-left:22%;\">Disable the modern BIND\nchecking of incoming hostnames and mail names for invalid\ncharacters such as underscore (_), non-ASCII, or control\ncharacters. This option was present in glibc until version\n2.24; since glibc 2.25, it is deprecated, and its usage\nproduces a warning.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_KEEPTSIG</b>\n(unimplemented; deprecated in glibc 2.25)</p>\n\n<p style=\"margin-left:22%;\">Do not strip TSIG records. This\noption was present but unimplemented in glibc until version\n2.24; since glibc 2.25, it is deprecated, and its usage\nproduces a warning.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_BLAST</b>\n(unimplemented; deprecated in glibc 2.25)</p>\n\n<p style=\"margin-left:22%;\">Send each query simultaneously\nand recursively to all servers. This option was present but\nunimplemented in glibc until version 2.24; since glibc 2.25,\nit is deprecated, and its usage produces a warning.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_USEBSTRING</b> (glibc\n2.3.4 to 2.24)</p>\n\n<p style=\"margin-left:22%;\">Make reverse IPv6 lookups using\nthe bit-label format described in RFC 2673; if this option\nis not set (which is the default), then nibble format is\nused. This option was removed in glibc 2.25, since it relied\non a backward-incompatible DNS extension that was never\ndeployed on the Internet.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_NOIP6DOTINT</b> (glibc\n2.24 and earlier)</p>\n\n<p style=\"margin-left:22%;\">Use <i>ip6.arpa</i> zone in\nIPv6 reverse lookup instead of <i>ip6.int</i>, which is\ndeprecated since glibc 2.3.4. This option is present in\nglibc up to and including version 2.24, where it is enabled\nby default. In glibc 2.25, this option was removed.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_USE_EDNS0</b> (since\nglibc 2.6)</p>\n\n<p style=\"margin-left:22%;\">Enables support for the DNS\nextensions (EDNS0) described in RFC 2671.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_SNGLKUP</b> (since glibc\n2.10)</p>\n\n<p style=\"margin-left:22%;\">By default, glibc performs IPv4\nand IPv6 lookups in parallel since version 2.9. Some\nappliance DNS servers cannot handle these queries properly\nand make the requests time out. This option disables the\nbehavior and makes glibc perform the IPv6 and IPv4 requests\nsequentially (at the cost of some slowdown of the resolving\nprocess).</p>\n\n<p style=\"margin-left:11%;\"><b>RES_SNGLKUPREOP</b></p>\n\n<p style=\"margin-left:22%;\">When <b>RES_SNGLKUP</b> option\nis enabled, opens a new socket for the each request.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_USE_DNSSEC</b></p>\n\n<p style=\"margin-left:22%;\">Use DNSSEC with OK bit in OPT\nrecord. This option implies <b>RES_USE_EDNS0</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>RES_NOTLDQUERY</b></p>\n\n<p style=\"margin-left:22%;\">Do not look up unqualified name\nas a top-level domain (TLD).</p>\n\n<p style=\"margin-left:11%;\"><b>RES_DEFAULT</b></p>\n\n<p style=\"margin-left:22%;\">Default option which implies:\n<b>RES_RECURSE</b>, <b>RES_DEFNAMES</b>, <b>RES_DNSRCH</b>,\nand <b>RES_NOIP6DOTINT</b>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>res_ninit</b>() and <b>res_init</b>() functions return 0\non success, or -1 if an error occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>res_nquery</b>(), <b>res_query</b>(),\n<b>res_nsearch</b>(), <b>res_search</b>(),\n<b>res_nquerydomain</b>(), <b>res_querydomain</b>(),\n<b>res_nmkquery</b>(), <b>res_mkquery</b>(),\n<b>res_nsend</b>(), and <b>res_send</b>() functions return\nthe length of the response, or -1 if an error occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>dn_comp</b>() and <b>dn_expand</b>() functions return the\nlength of the compressed name, or -1 if an error occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the case of\nan error return from <b>res_nquery</b>(),\n<b>res_query</b>(), <b>res_nsearch</b>(),\n<b>res_search</b>(), <b>res_nquerydomain</b>(), or\n<b>res_querydomain</b>(), the global variable <i>h_errno</i>\n(see <a href=\"https://man.page/3/gethostbyname\">gethostbyname(3)</a>) can be consulted to determine\nthe cause of the error.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/etc/resolv.conf</i></p>\n\n<p style=\"margin-left:22%;\">resolver configuration file</p>\n\n<p style=\"margin-left:11%;\"><i>/etc/host.conf</i></p>\n\n<p style=\"margin-left:22%;\">resolver configuration file</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3303211.png\" alt=\"Image grohtml-3303211.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">4.3BSD.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/gethostbyname\">gethostbyname(3)</a>,\n<b>resolv.conf</b>(5), <a href=\"https://man.page/5/resolver\">resolver(5)</a>,\n<a href=\"https://man.page/7/hostname\">hostname(7)</a>, <b>named</b>(8)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The GNU C\nlibrary source file <i>resolv/README</i>.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}