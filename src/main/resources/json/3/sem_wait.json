{"name":"sem_wait","body":"\n\n<h1 align=\"center\">SEM_WAIT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sem_wait,\nsem_timedwait, sem_trywait - lock a semaphore</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;semaphore.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsem_wait(sem_t *</b><i>sem</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsem_trywait(sem_t *</b><i>sem</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsem_timedwait(sem_t *</b><i>sem</i><b>, const struct\ntimespec *</b><i>abs_timeout</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Link with\n<i>-pthread</i>.</p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sem_timedwait</b>():\n_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;200112L</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sem_wait</b>()\ndecrements (locks) the semaphore pointed to by <i>sem</i>.\nIf the semaphore&rsquo;s value is greater than zero, then\nthe decrement proceeds, and the function returns,\nimmediately. If the semaphore currently has the value zero,\nthen the call blocks until either it becomes possible to\nperform the decrement (i.e., the semaphore value rises above\nzero), or a signal handler interrupts the call.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sem_trywait</b>()\nis the same as <b>sem_wait</b>(), except that if the\ndecrement cannot be immediately performed, then call returns\nan error (<i>errno</i> set to <b>EAGAIN</b>) instead of\nblocking.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sem_timedwait</b>()\nis the same as <b>sem_wait</b>(), except that\n<i>abs_timeout</i> specifies a limit on the amount of time\nthat the call should block if the decrement cannot be\nimmediately performed. The <i>abs_timeout</i> argument\npoints to a structure that specifies an absolute timeout in\nseconds and nanoseconds since the Epoch, 1970-01-01 00:00:00\n+0000 (UTC). This structure is defined as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct timespec\n{ <br>\ntime_t tv_sec; /* Seconds */ <br>\nlong tv_nsec; /* Nanoseconds [0 .. 999999999] */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the timeout\nhas already expired by the time of the call, and the\nsemaphore could not be locked immediately, then\n<b>sem_timedwait</b>() fails with a timeout error\n(<i>errno</i> set to <b>ETIMEDOUT</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\noperation can be performed immediately, then\n<b>sem_timedwait</b>() never fails with a timeout error,\nregardless of the value of <i>abs_timeout</i>. Furthermore,\nthe validity of <i>abs_timeout</i> is not checked in this\ncase.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of these\nfunctions return 0 on success; on error, the value of the\nsemaphore is left unchanged, -1 is returned, and\n<i>errno</i> is set to indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The call was interrupted by a\nsignal handler; see <a href=\"https://man.page/7/signal\">signal(7)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>sem</i> is not a valid semaphore.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nadditional error can occur for <b>sem_trywait</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The operation could not be\nperformed without blocking (i.e., the semaphore currently\nhas the value zero).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nadditional errors can occur for <b>sem_timedwait</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The value of\n<i>abs_timeout.tv_nsecs</i> is less than 0, or greater than\nor equal to 1000 million.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ETIMEDOUT</b></p>\n\n<p style=\"margin-left:22%;\">The call timed out before the\nsemaphore could be locked.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3358351.png\" alt=\"Image grohtml-3358351.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The (somewhat\ntrivial) program shown below operates on an unnamed\nsemaphore. The program expects two command-line arguments.\nThe first argument specifies a seconds value that is used to\nset an alarm timer to generate a <b>SIGALRM</b> signal. This\nhandler performs a <a href=\"https://man.page/3/sem_post\">sem_post(3)</a> to increment the\nsemaphore that is being waited on in <i>main()</i> using\n<b>sem_timedwait</b>(). The second command-line argument\nspecifies the length of the timeout, in seconds, for\n<b>sem_timedwait</b>(). The following shows what happens on\ntwo different runs of the program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out 2\n3</b> <br>\nAbout to call sem_timedwait() <br>\nsem_post() from handler <br>\nsem_timedwait() succeeded <br>\n$ <b>./a.out 2 1</b> <br>\nAbout to call sem_timedwait() <br>\nsem_timedwait() timed out</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;semaphore.h&gt; <br>\n#include &lt;time.h&gt; <br>\n#include &lt;assert.h&gt; <br>\n#include &lt;errno.h&gt; <br>\n#include &lt;signal.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sem_t sem;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nhandle_error(msg) \\ <br>\ndo { perror(msg); exit(EXIT_FAILURE); } while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nhandler(int sig) <br>\n{ <br>\nwrite(STDOUT_FILENO, &quot;sem_post() from handler\\n&quot;,\n24); <br>\nif (sem_post(&amp;sem) == -1) { <br>\nwrite(STDERR_FILENO, &quot;sem_post() failed\\n&quot;, 18);\n<br>\n_exit(EXIT_FAILURE); <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nstruct sigaction sa; <br>\nstruct timespec ts; <br>\nint s;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 3)\n{ <br>\nfprintf(stderr, &quot;Usage: %s &lt;alarm-secs&gt;\n&lt;wait-secs&gt;\\n&quot;, <br>\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(sem_init(&amp;sem, 0, 0) == -1) <br>\nhandle_error(&quot;sem_init&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Establish\nSIGALRM handler; set alarm timer using argv[1] */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sa.sa_handler =\nhandler; <br>\nsigemptyset(&amp;sa.sa_mask); <br>\nsa.sa_flags = 0; <br>\nif (sigaction(SIGALRM, &amp;sa, NULL) == -1) <br>\nhandle_error(&quot;sigaction&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">alarm(atoi(argv[1]));</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Calculate\nrelative interval as current time plus <br>\nnumber of seconds given argv[2] */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(clock_gettime(CLOCK_REALTIME, &amp;ts) == -1) <br>\nhandle_error(&quot;clock_gettime&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ts.tv_sec +=\natoi(argv[2]);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;main()\nabout to call sem_timedwait()\\n&quot;); <br>\nwhile ((s = sem_timedwait(&amp;sem, &amp;ts)) == -1\n&amp;&amp; errno == EINTR) <br>\ncontinue; /* Restart if interrupted by handler */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Check what\nhappened */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (s == -1) {\n<br>\nif (errno == ETIMEDOUT) <br>\nprintf(&quot;sem_timedwait() timed out\\n&quot;); <br>\nelse <br>\nperror(&quot;sem_timedwait&quot;); <br>\n} else <br>\nprintf(&quot;sem_timedwait() succeeded\\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit((s == 0) ?\nEXIT_SUCCESS : EXIT_FAILURE); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clock_gettime\">clock_gettime(2)</a>,\n<a href=\"https://man.page/3/sem_getvalue\">sem_getvalue(3)</a>, <a href=\"https://man.page/3/sem_post\">sem_post(3)</a>,\n<a href=\"https://man.page/7/sem_overview\">sem_overview(7)</a>, <a href=\"https://man.page/7/time\">time(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}