{"name":"net::ssleay","body":"\n\n<h1 align=\"center\">Net::SSLeay</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay -\nPerl bindings for OpenSSL and LibreSSL</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Net::SSLeay\nqw(get_https post_https sslcat make_headers make_form); <br>\n($page) = get_https('www.bacus.pt', 443, '/'); # Case 1 <br>\n($page, $response, %reply_headers) <br>\n= get_https('www.bacus.pt', 443, '/', # Case 2 <br>\nmake_headers(User-Agent =&gt; 'Cryptozilla/5.0b1', <br>\nReferer =&gt; 'https://www.bacus.pt' <br>\n)); <br>\n($page, $result, %headers) = # Case 2b <br>\n= get_https('www.bacus.pt', 443, '/protected.html', <br>\nmake_headers(Authorization =&gt; <br>\n'Basic ' . MIME::Base64::encode(&quot;$user:$pass&quot;,''))\n<br>\n); <br>\n($page, $response, %reply_headers) <br>\n= post_https('www.bacus.pt', 443, '/foo.cgi', '', # Case 3\n<br>\nmake_form(OK =&gt; '1', <br>\nname =&gt; 'Sampo' <br>\n)); <br>\n$reply = sslcat($host, $port, $request); # Case 4 <br>\n($reply, $err, $server_cert) = sslcat($host, $port,\n$request); # Case 5 <br>\n$Net::SSLeay::trace = 2; # 0=no debugging, 1=ciphers,\n2=trace, 3=dump data <br>\nNet::SSLeay::initialize(); # Initialize ssl library once</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\nprovides Perl bindings for libssl (an <small>SSL/TLS\nAPI</small> ) and libcrypto (a cryptography\n<small>API</small> ).</p>\n\n<h2>COMPATIBILITY\n<a name=\"COMPATIBILITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay\nsupports the following libssl implementations:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Any stable release of OpenSSL\n&lt;https://www.openssl.org&gt; in the 0.9.8 - 3.0 branches,\nexcept for OpenSSL 0.9.8 - 0.9.8b.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Any stable release of LibreSSL\n&lt;https://www.libressl.org&gt; in the 2.0 - 3.4 series,\nexcept for LibreSSL 3.2.2 and 3.2.3.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay may\nnot function as expected with releases other than the ones\nlisted above due to libssl <small>API</small>\nincompatibilities, or, in the case of LibreSSL, because of\ndeviations from the libssl <small>API.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay is\nonly as secure as the underlying libssl implementation you\nuse. Although Net::SSLeay maintains compatibility with old\nversions of OpenSSL and LibreSSL, it is <b>strongly\nrecommended</b> that you use a version of OpenSSL or\nLibreSSL that is supported by the OpenSSL/LibreSSL\ndevelopers and/or your operating system vendor. Many\nunsupported versions of OpenSSL and LibreSSL are known to\ncontain severe security vulnerabilities. Refer to the\nOpenSSL Release Strategy\n&lt;https://www.openssl.org/policies/releasestrat.html&gt;\nand LibreSSL Support Schedule\n&lt;https://www.libressl.org/releases.html&gt; for\ninformation on which versions are currently supported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The libssl\n<small>API</small> has changed significantly since OpenSSL\n0.9.8: hundreds of functions have been added, deprecated or\nremoved in the intervening versions. Although this\ndocumentation lists all of the functions and constants that\nNet::SSLeay may expose, they will not be available for use\nif they are missing from the underlying libssl\nimplementation. Refer to the compatibility notes in this\ndocumentation, as well as the OpenSSL/LibreSSL manual pages,\nfor information on which OpenSSL/LibreSSL versions support\neach function or constant. At run-time, you can check\nwhether a function or constant is exposed before calling it\nusing the following convention:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if ( defined\n&amp;Net::SSLeay::libssl_function ) { <br>\n# libssl_function() (or SSL_libssl_function()) is available\n<br>\nNet::SSLeay::libssl_function(...); <br>\n}</p>\n\n<h2>OVERVIEW\n<a name=\"OVERVIEW\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay\nmodule basically comprise of:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">High level functions for\naccessing web servers (by using <small>HTTP/HTTPS</small>\n)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Low level <small>API</small> (mostly mapped 1:1 to\nopenssl&rsquo;s C functions)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Convenience functions (related to low level\n<small>API</small> but with more perl friendly\ninterface)</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is also a\nrelated module called Net::SSLeay::Handle included in this\ndistribution that you might want to use instead. It has its\nown pod documentation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>High level\nfunctions for accessing web servers</b> <br>\nThis module offers some high level convenience functions for\naccessing web pages on <small>SSL</small> servers (for\nsymmetry, the same <small>API</small> is offered for\naccessing http servers, too), an &quot;sslcat()&quot;\nfunction for writing your own clients, and finally access to\nthe <small>SSL</small> api of the SSLeay/OpenSSL package so\nyou can write servers or clients for more complicated\napplications.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For high level\nfunctions it is most convenient to import them into your\nmain namespace as indicated in the synopsis.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Basic set of\nfunctions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">get_https</p></td>\n<td width=\"65%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p>post_https</p></td>\n<td width=\"65%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p>put_https</p></td>\n<td width=\"65%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p>head_https</p></td>\n<td width=\"65%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p>do_https</p></td>\n<td width=\"65%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p>sslcat</p></td>\n<td width=\"65%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p>https_cat</p></td>\n<td width=\"65%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p>make_form</p></td>\n<td width=\"65%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p>make_headers</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Case 1 (in\n<small>SYNOPSIS</small> )</b> demonstrates the typical\ninvocation of <b>get_https()</b> to fetch an\n<small>HTML</small> page from secure server. The first\nargument provides the hostname or <small>IP</small> in\ndotted decimal notation of the remote server to contact. The\nsecond argument is the <small>TCP</small> port at the remote\nend (your own port is picked arbitrarily from high numbered\nports as usual for <small>TCP</small> ). The third argument\nis the <small>URL</small> of the page without the host name\npart. If in doubt consult the <small>HTTP</small>\nspecifications at &lt;http://www.w3c.org&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Case 2 (in\n<small>SYNOPSIS</small> )</b> demonstrates full fledged use\nof &quot;get_https()&quot;. As can be seen,\n&quot;get_https()&quot; parses the response and response\nheaders and returns them as a list, which can be captured in\na hash for later reference. Also a fourth argument to\n&quot;get_https()&quot; is used to insert some additional\nheaders in the request. &quot;make_headers()&quot; is a\nfunction that will convert a list or hash to such headers.\nBy default &quot;get_https()&quot; supplies &quot;Host&quot;\n(to make virtual hosting easy) and &quot;Accept&quot;\n(reportedly needed by <small>IIS</small> ) headers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Case 2b (in\n<small>SYNOPSIS</small> )</b> demonstrates how to get a\npassword protected page. Refer to the <small>HTTP</small>\nprotocol specifications for further details (e.g.\n<small>RFC-2617</small> ).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Case 3 (in\n<small>SYNOPSIS</small> )</b> invokes\n&quot;post_https()&quot; to submit a <small>HTML/CGI</small>\nform to a secure server. The first four arguments are equal\nto &quot;get_https()&quot; (note that the empty string ('')\nis passed as header argument). The fifth argument is the\ncontents of the form formatted according to\n<small>CGI</small> specification. Do not post\n<small>UTF-8</small> data as content: use utf8::downgrade\nfirst. In this case the helper function\n&quot;make_https()&quot; is used to do the formatting, but\nyou could pass any string. &quot;post_https()&quot;\nautomatically adds &quot;Content-Type&quot; and\n&quot;Content-Length&quot; headers to the request.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Case 4 (in\n<small>SYNOPSIS</small> )</b> shows the fundamental\n&quot;sslcat()&quot; function (inspired in spirit by the\n&quot;netcat&quot; utility :-). It&rsquo;s your swiss army\nknife that allows you to easily contact servers, send some\ndata, and then get the response. You are responsible for\nformatting the data and parsing the response -\n&quot;sslcat()&quot; is just a transport.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Case 5 (in\n<small>SYNOPSIS</small> )</b> is a full invocation of\n&quot;sslcat()&quot; which allows the return of errors as\nwell as the server (peer) certificate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The $trace\nglobal variable can be used to control the verbosity of the\nhigh level functions. Level 0 guarantees silence, level 1\n(the default) only emits error messages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Alternate\nversions of high-level <small>API</small></i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">get_https3</p></td>\n<td width=\"66%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p>post_https3</p></td>\n<td width=\"66%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p>put_https3</p></td>\n<td width=\"66%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p>get_https4</p></td>\n<td width=\"66%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p>post_https4</p></td>\n<td width=\"66%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p>put_https4</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The above\nmentioned functions actually return the response headers as\na list, which only gets converted to hash upon assignment\n(this assignment looses information if the same header\noccurs twice, as may be the case with cookies). There are\nalso other variants of the functions that return unprocessed\nheaders and that return a reference to a hash.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">($page,\n$response, @headers) = get_https('www.bacus.pt', 443, '/');\n<br>\nfor ($i = 0; $i &lt; $#headers; $i+=2) { <br>\nprint &quot;$headers[$i] = &quot; . $headers[$i+1] .\n&quot;\\n&quot;; <br>\n} <br>\n($page, $response, $headers, $server_cert) <br>\n= get_https3('www.bacus.pt', 443, '/'); <br>\nprint &quot;$headers\\n&quot;; <br>\n($page, $response, $headers_ref) <br>\n= get_https4('www.bacus.pt', 443, '/'); <br>\nfor $k (sort keys %{$headers_ref}) { <br>\nfor $v (@{$$headers_ref{$k}}) { <br>\nprint &quot;$k = $v\\n&quot;; <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of the\nabove code fragments accomplish the same thing: display all\nvalues of all headers. The <small>API</small> functions\nending in &quot;3&quot; return the headers simply as a\nscalar string and it is up to the application to split them\nup. The functions ending in &quot;4&quot; return a reference\nto a hash of arrays (see perlref and perllol if you are not\nfamiliar with complex perl data structures). To access a\nsingle value of such a header hash you would do something\nlike</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">print\n$$headers_ref{COOKIE}[0];</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Variants 3 and\n4 also allow you to discover the server certificate in case\nyou would like to store or display it, e.g.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">($p, $resp,\n$hdrs, $server_cert) = get_https3('www.bacus.pt', 443, '/');\n<br>\nif (!defined($server_cert) || ($server_cert == 0)) { <br>\nwarn &quot;Subject Name: undefined, Issuer Name:\nundefined&quot;; <br>\n} else { <br>\nwarn 'Subject Name: ' <br>\n. Net::SSLeay::X509_NAME_oneline( <br>\nNet::SSLeay::X509_get_subject_name($server_cert)) <br>\n. 'Issuer Name: ' <br>\n. Net::SSLeay::X509_NAME_oneline( <br>\nNet::SSLeay::X509_get_issuer_name($server_cert)); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Beware that\nthis method only allows after the fact verification of the\ncertificate: by the time &quot;get_https3()&quot; has\nreturned the https request has already been sent to the\nserver, whether you decide to trust it or not. To do the\nverification correctly you must either employ the OpenSSL\ncertificate verification framework or use the lower level\n<small>API</small> to first connect and verify the\ncertificate and only then send the http data. See the\nimplementation of &quot;ds_https3()&quot; for guidance on\nhow to do this.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Using client\ncertificates</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Secure web\ncommunications are encrypted using symmetric crypto keys\nexchanged using encryption based on the certificate of the\nserver. Therefore in all <small>SSL</small> connections the\nserver must have a certificate. This serves both to\nauthenticate the server to the clients and to perform the\nkey exchange.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sometimes it is\nnecessary to authenticate the client as well. Two options\nare available: <small>HTTP</small> basic authentication and\na client side certificate. The basic authentication over\n<small>HTTPS</small> is actually quite safe because\n<small>HTTPS</small> guarantees that the password will not\ntravel in the clear. Never-the-less, problems like easily\nguessable passwords remain. The client certificate method\ninvolves authentication of the client at the\n<small>SSL</small> level using a certificate. For this to\nwork, both the client and the server have certificates\n(which typically are different) and private keys.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>API</small> functions outlined above accept\nadditional arguments that allow one to supply the client\nside certificate and key files. The format of these files is\nthe same as used for server certificates and the caveat\nabout encrypting private keys applies.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">($page,\n$result, %headers) = # 2c <br>\n= get_https('www.bacus.pt', 443, '/protected.html', <br>\nmake_headers(Authorization =&gt; <br>\n'Basic ' .\nMIME::Base64::encode(&quot;$user:$pass&quot;,'')), <br>\n'', $mime_type6, $path_to_crt7, $path_to_key8); <br>\n($page, $response, %reply_headers) <br>\n= post_https('www.bacus.pt', 443, '/foo.cgi', # 3b <br>\nmake_headers('Authorization' =&gt; <br>\n'Basic ' .\nMIME::Base64::encode(&quot;$user:$pass&quot;,'')), <br>\nmake_form(OK =&gt; '1', name =&gt; 'Sampo'), <br>\n$mime_type6, $path_to_crt7, $path_to_key8);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Case 2c (in\n<small>SYNOPSIS</small> )</b> demonstrates getting a\npassword protected page that also requires a client\ncertificate, i.e. it is possible to use both authentication\nmethods simultaneously.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Case 3b (in\n<small>SYNOPSIS</small> )</b> is a full blown\n<small>POST</small> to a secure server that requires both\npassword authentication and a client certificate, just like\nin case 2c.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note: The\nclient will not send a certificate unless the server\nrequests one. This is typically achieved by setting the\nverify mode to &quot;VERIFY_PEER&quot; on the server:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::set_verify(ssl,\nNet::SSLeay::VERIFY_PEER, 0);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n&quot;perldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod&quot;\nfor a full description.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Working\nthrough a web proxy</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">set_proxy</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Net::SSLeay&quot;\ncan use a web proxy to make its connections. You need to\nfirst set the proxy host and port using\n&quot;set_proxy()&quot; and then just use the normal\n<small>API</small> functions, e.g:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::set_proxy('gateway.myorg.com',\n8080); <br>\n($page) = get_https('www.bacus.pt', 443, '/');</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If your proxy\nrequires authentication, you can supply a username and\npassword as well</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::set_proxy('gateway.myorg.com',\n8080, 'joe', 'salainen'); <br>\n($page, $result, %headers) = <br>\n= get_https('www.bacus.pt', 443, '/protected.html', <br>\nmake_headers(Authorization =&gt; <br>\n'Basic ' . MIME::Base64::encode(&quot;susie:pass&quot;,''))\n<br>\n);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\ndemonstrates the case where we authenticate to the proxy as\n&quot;joe&quot; and to the final web server as\n&quot;susie&quot;. Proxy authentication requires the\n&quot;MIME::Base64&quot; module to work.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><small>HTTP</small>\n(without S) <small>API</small></i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">get_http</p></td>\n<td width=\"68%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p>post_http</p></td>\n<td width=\"68%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p>tcpcat</p></td>\n<td width=\"68%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p>get_httpx</p></td>\n<td width=\"68%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p>post_httpx</p></td>\n<td width=\"68%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p>tcpxcat</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Over the years\nit has become clear that it would be convenient to use the\nlight-weight flavour <small>API</small> of\n&quot;Net::SSLeay&quot; for normal <small>HTTP</small> as\nwell (see &quot;LWP&quot; for the heavy-weight\nobject-oriented approach). In fact it would be nice to be\nable to flip https on and off on the fly. Thus regular\n<small>HTTP</small> support was evolved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Net::SSLeay\nqw(get_http post_http tcpcat <br>\nget_httpx post_httpx tcpxcat <br>\nmake_headers make_form); <br>\n($page, $result, %headers) <br>\n= get_http('www.bacus.pt', 443, '/protected.html', <br>\nmake_headers(Authorization =&gt; <br>\n'Basic ' . MIME::Base64::encode(&quot;$user:$pass&quot;,''))\n<br>\n); <br>\n($page, $response, %reply_headers) <br>\n= post_http('www.bacus.pt', 443, '/foo.cgi', '', <br>\nmake_form(OK =&gt; '1', <br>\nname =&gt; 'Sampo' <br>\n)); <br>\n($reply, $err) = tcpcat($host, $port, $request); <br>\n($page, $result, %headers) <br>\n= get_httpx($usessl, 'www.bacus.pt', 443, '/protected.html',\n<br>\nmake_headers(Authorization =&gt; <br>\n'Basic ' . MIME::Base64::encode(&quot;$user:$pass&quot;,''))\n<br>\n); <br>\n($page, $response, %reply_headers) <br>\n= post_httpx($usessl, 'www.bacus.pt', 443, '/foo.cgi', '',\n<br>\nmake_form(OK =&gt; '1', name =&gt; 'Sampo' )); <br>\n($reply, $err, $server_cert) = tcpxcat($usessl, $host,\n$port, $request);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As can be seen,\nthe &quot;x&quot; family of APIs takes as the first argument\na flag which indicates whether <small>SSL</small> is used or\nnot.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Certificate\nverification and Certificate Revocation Lists (CRLs)</b>\n<br>\nOpenSSL supports the ability to verify peer certificates. It\ncan also optionally check the peer certificate against a\nCertificate Revocation List ( <small>CRL</small> ) from the\ncertificates issuer. A <small>CRL</small> is a file, created\nby the certificate issuer that lists all the certificates\nthat it previously signed, but which it now revokes. CRLs\nare in <small>PEM</small> format.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can enable\n&quot;Net::SSLeay CRL&quot; checking like this:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&amp;Net::SSLeay::X509_STORE_set_flags\n<br>\n(&amp;Net::SSLeay::CTX_get_cert_store($ssl), <br>\n&amp;Net::SSLeay::X509_V_FLAG_CRL_CHECK);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After setting\nthis flag, if OpenSSL checks a peer&rsquo;s certificate,\nthen it will attempt to find a <small>CRL</small> for the\nissuer. It does this by looking for a specially named file\nin the search directory specified by\nCTX_load_verify_locations. <small>CRL</small> files are\nnamed with the hash of the issuer&rsquo;s subject name,\nfollowed by &quot;.r0&quot;, &quot;.r1&quot; etc. For\nexample &quot;ab1331b2.r0&quot;, &quot;ab1331b2.r1&quot;. It\nwill read all the .r files for the issuer, and then check\nfor a revocation of the peer certificate in all of them.\n(You can also force it to look in a specific named\n<small>CRL</small> file., see below). You can find out the\nhash of the issuer subject name in a <small>CRL</small>\nwith</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">openssl crl -in\ncrl.pem -hash -noout</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the peer\ncertificate does not pass the revocation list, or if no\n<small>CRL</small> is found, then the handshaking fails with\nan error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can also\nforce OpenSSL to look for CRLs in one or more arbitrarily\nnamed files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my $bio =\nNet::SSLeay::BIO_new_file($crlfilename, 'r'); <br>\nmy $crl = Net::SSLeay::PEM_read_bio_X509_CRL($bio); <br>\nif ($crl) { <br>\nNet::SSLeay::X509_STORE_add_crl( <br>\nNet::SSLeay::CTX_get_cert_store($ssl, $crl) <br>\n); <br>\n} else { <br>\nerror reading CRL.... <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Usually the\nURLs where you can download the CRLs is contained in the\ncertificate itself and you can extract them with</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">my @url =\nNet::SSLeay::P_X509_get_crl_distribution_points($cert)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">But there is no\nautomatic downloading of the CRLs and often these CRLs are\ntoo huge to just download them to verify a single\ncertificate. Also, these CRLs are often in\n<small>DER</small> format which you need to convert to\n<small>PEM</small> before you can use it:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">openssl crl -in\ncrl.der -inform der -out crl.pem</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So as an\nalternative for faster and timely revocation checks you\nbetter use the Online Status Revocation Protocol (\n<small>OCSP</small> ).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Certificate\nverification and Online Status Revocation Protocol (\n<small>OCSP</small> )</b> <br>\nWhile checking for revoked certificates is possible and fast\nwith Certificate Revocation Lists, you need to download the\ncomplete and often huge list before you can verify a single\ncertificate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A faster way is\nto ask the <small>CA</small> to check the revocation of just\na single or a few certificates using <small>OCSP.</small>\nBasically you generate for each certificate an\n<small>OCSP_CERTID</small> based on the certificate itself\nand its issuer, put the ids togetether into an\n<small>OCSP_REQUEST</small> and send the request to the\n<small>URL</small> given in the certificate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As a result you\nget back an <small>OCSP_RESPONSE</small> and need to check\nthe status of the response, check that it is valid (e.g.\nsigned by the <small>CA</small> ) and finally extract the\ninformation about each <small>OCSP_CERTID</small> to find\nout if the certificate is still valid or got revoked.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With\nNet::SSLeay this can be done like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># get id(s) for\ngiven certs, like from get_peer_certificate <br>\n# or get_peer_cert_chain. This will croak if <br>\n# - one tries to make an OCSP_CERTID for a self-signed\ncertificate <br>\n# - the issuer of the certificate cannot be found in the SSL\nobjects <br>\n# store, nor in the current certificate chain <br>\nmy $cert = Net::SSLeay::get_peer_certificate($ssl); <br>\nmy $id = eval { Net::SSLeay::OCSP_cert2ids($ssl,$cert) };\n<br>\ndie &quot;failed to make OCSP_CERTID: $@&quot; if $@; <br>\n# create OCSP_REQUEST from id(s) <br>\n# Multiple can be put into the same request, if the same\nOCSP responder <br>\n# is responsible for them. <br>\nmy $req = Net::SSLeay::OCSP_ids2req($id); <br>\n# determine URI of OCSP responder <br>\nmy $uri = Net::SSLeay::P_X509_get_ocsp_uri($cert); <br>\n# Send stringified OCSP_REQUEST with POST to $uri. <br>\n# We can ignore certificate verification for https, because\nthe OCSP <br>\n# response itself is signed. <br>\nmy $ua = HTTP::Tiny-&gt;new(verify_SSL =&gt; 0); <br>\nmy $res = $ua-&gt;request( 'POST',$uri, { <br>\nheaders =&gt; { 'Content-type' =&gt;\n'application/ocsp-request' }, <br>\ncontent =&gt; Net::SSLeay::i2d_OCSP_REQUEST($req) <br>\n}); <br>\nmy $content = $res &amp;&amp; $res-&gt;{success} &amp;&amp;\n$res-&gt;{content} <br>\nor die &quot;query failed&quot;; <br>\n# Extract OCSP_RESPONSE. <br>\n# this will croak if the string is not an OCSP_RESPONSE <br>\nmy $resp = eval { Net::SSLeay::d2i_OCSP_RESPONSE($content)\n}; <br>\n# Check status of response. <br>\nmy $status = Net::SSLeay::OCSP_response_status($resp); <br>\nif ($status !=\nNet::SSLeay::OCSP_RESPONSE_STATUS_SUCCESSFUL()) <br>\ndie &quot;OCSP response failed: &quot;. <br>\nNet::SSLeay::OCSP_response_status_str($status); <br>\n} <br>\n# Verify signature of response and if nonce matches request.\n<br>\n# This will croak if there is a nonce in the response, but\nit does not match <br>\n# the request. It will return false if the signature could\nnot be verified, <br>\n# in which case details can be retrieved with\nNet::SSLeay::ERR_get_error. <br>\n# It will not complain if the response does not contain a\nnonce, which is <br>\n# usually the case with pre-signed responses. <br>\nif ( ! eval {\nNet::SSLeay::OCSP_response_verify($ssl,$resp,$req) }) { <br>\ndie &quot;OCSP response verification failed&quot;; <br>\n} <br>\n# Extract information from OCSP_RESPONSE for each of the\nids. <br>\n# If called in scalar context it will return the time (as\ntime_t), when the <br>\n# next update is due (minimum of all successful responses\ninside $resp). It <br>\n# will croak on the following problems: <br>\n# - response is expired or not yet valid <br>\n# - no response for given OCSP_CERTID <br>\n# - certificate status is not good (e.g. revoked or unknown)\n<br>\nif ( my $nextupd = eval {\nNet::SSLeay::OCSP_response_results($resp,$id) }) { <br>\nwarn &quot;certificate is valid, next update in &quot;. <br>\n($nextupd-time()).&quot; seconds\\n&quot;; <br>\n} else { <br>\ndie &quot;certificate is not valid: $@&quot;; <br>\n} <br>\n# But in array context it will return detailed information\nabout each given <br>\n# OCSP_CERTID instead croaking on errors: <br>\n# if no @ids are given it will return information about all\nsingle responses <br>\n# in the OCSP_RESPONSE <br>\nmy @results =\nNet::SSLeay::OCSP_response_results($resp,@ids); <br>\nfor my $r (@results) { <br>\nprint Dumper($r); <br>\n# @results are in the same order as the @ids and contain:\n<br>\n# $r-&gt;[0] - OCSP_CERTID <br>\n# $r-&gt;[1] - undef if no error (certificate good) OR error\nmessage as string <br>\n# $r-&gt;[2] - hash with details: <br>\n# thisUpdate - time_t of this single response <br>\n# nextUpdate - time_t when update is expected <br>\n# statusType - integer: <br>\n# V_OCSP_CERTSTATUS_GOOD(0) <br>\n# V_OCSP_CERTSTATUS_REVOKED(1) <br>\n# V_OCSP_CERTSTATUS_UNKNOWN(2) <br>\n# revocationTime - time_t (only if revoked) <br>\n# revocationReason - integer (only if revoked) <br>\n# revocationReason_str - reason as string (only if revoked)\n<br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To further\nspeed up certificate revocation checking one can use a\n<small>TLS</small> extension to instruct the server to\nstaple the <small>OCSP</small> response:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># set TLS\nextension before doing SSL_connect <br>\nNet::SSLeay::set_tlsext_status_type($ssl, <br>\nNet::SSLeay::TLSEXT_STATUSTYPE_ocsp()); <br>\n# setup callback to verify OCSP response <br>\nmy $cert_valid = undef; <br>\nNet::SSLeay::CTX_set_tlsext_status_cb($context,sub { <br>\nmy ($ssl,$resp) = @_; <br>\nif (!$resp) { <br>\n# Lots of servers don't return an OCSP response. <br>\n# In this case we must check the OCSP status outside the SSL\n<br>\n# handshake. <br>\nwarn &quot;server did not return stapled OCSP\nresponse\\n&quot;; <br>\nreturn 1; <br>\n} <br>\n# verify status <br>\nmy $status = Net::SSLeay::OCSP_response_status($resp); <br>\nif ($status !=\nNet::SSLeay::OCSP_RESPONSE_STATUS_SUCCESSFUL()) { <br>\nwarn &quot;OCSP response failure: $status\\n&quot;; <br>\nreturn 1; <br>\n} <br>\n# verify signature - we have no OCSP_REQUEST here to check\nnonce <br>\nif (!eval { Net::SSLeay::OCSP_response_verify($ssl,$resp) })\n{ <br>\nwarn &quot;OCSP response verify failed\\n&quot;; <br>\nreturn 1; <br>\n} <br>\n# check if the certificate is valid <br>\n# we should check here against the peer_certificate <br>\nmy $cert = Net::SSLeay::get_peer_certificate(); <br>\nmy $certid = eval { Net::SSLeay::OCSP_cert2ids($ssl,$cert) }\nor do { <br>\nwarn &quot;cannot get certid from cert: $@&quot;; <br>\n$cert_valid = -1; <br>\nreturn 1; <br>\n}; <br>\nif ( $nextupd = eval { <br>\nNet::SSLeay::OCSP_response_results($resp,$certid) }) { <br>\nwarn &quot;certificate not revoked\\n&quot;; <br>\n$cert_valid = 1; <br>\n} else { <br>\nwarn &quot;certificate not valid: $@&quot;; <br>\n$cert_valid = 0; <br>\n} <br>\n}); <br>\n# do SSL handshake here <br>\n.... <br>\n# check if certificate revocation was checked already <br>\nif ( ! defined $cert_valid) { <br>\n# check revocation outside of SSL handshake by asking OCSP\nresponder <br>\n... <br>\n} elsif ( ! $cert_valid ) { <br>\ndie &quot;certificate not valid - closing SSL\nconnection&quot;; <br>\n} elsif ( $cert_valid&lt;0 ) { <br>\ndie &quot;cannot verify certificate revocation - self-signed\n?&quot;; <br>\n} else { <br>\n# everything fine <br>\n... <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using\nNet::SSLeay in multi-threaded applications <small><br>\nIMPORTANT:</small> versions 1.42 or earlier are not\nthread-safe!</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay\nmodule implements all necessary stuff to be ready for\nmulti-threaded environment - it requires openssl-0.9.7 or\nnewer. The implementation fully follows thread safety\nrelated requirements of openssl library(see\n&lt;http://www.openssl.org/docs/crypto/threads.html&gt;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you are\nabout to use Net::SSLeay (or any other module based on\nNet::SSLeay) in multi-threaded perl application it is\nrecommended to follow this best-practice:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Initialization</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Load and\ninitialize Net::SSLeay module in the main thread:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use threads;\n<br>\nuse Net::SSLeay; <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize(); <br>\nsub do_master_job { <br>\n#... call whatever from Net::SSLeay <br>\n} <br>\nsub do_worker_job { <br>\n#... call whatever from Net::SSLeay <br>\n} <br>\n#start threads <br>\nmy $master = threads-&gt;new(\\&amp;do_master_job, 'param1',\n'param2'); <br>\nmy @workers = threads-&gt;new(\\&amp;do_worker_job, 'arg1',\n'arg2') for (1..10); <br>\n#waiting for all threads to finish <br>\n$_-&gt;join() for (threads-&gt;list);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>NOTE:</small>\nOpenssl&rsquo;s &quot;int SSL_library_init(void)&quot;\nfunction (which is also aliased as\n&quot;SSLeay_add_ssl_algorithms&quot;,\n&quot;OpenSSL_add_ssl_algorithms&quot; and\n&quot;add_ssl_algorithms&quot;) is not re-entrant and\nmultiple calls can cause a crash in threaded application.\nNet::SSLeay implements flags preventing repeated calls to\nthis function, therefore even multiple initialization via\n<b>Net::SSLeay::SSLeay_add_ssl_algorithms()</b> should work\nwithout trouble.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Using\ncallbacks</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Do not use\ncallbacks across threads (the module blocks cross-thread\ncallback operations and throws a warning). Always do the\ncallback setup, callback use and callback destruction within\nthe same thread.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Using\nopenssl elements</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All openssl\nelements (X509, <small>SSL_CTX, ...</small> ) can be\ndirectly passed between threads.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use threads;\n<br>\nuse Net::SSLeay; <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize(); <br>\nsub do_job { <br>\nmy $context = shift; <br>\nNet::SSLeay::CTX_set_default_passwd_cb($context, sub {\n&quot;secret&quot; }); <br>\n#... <br>\n} <br>\nmy $c = Net::SSLeay::CTX_new(); <br>\nthreads-&gt;create(\\&amp;do_job, $c);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use threads;\n<br>\nuse Net::SSLeay; <br>\nmy $context; #does not need to be 'shared' <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize(); <br>\nsub do_job { <br>\nNet::SSLeay::CTX_set_default_passwd_cb($context, sub {\n&quot;secret&quot; }); <br>\n#... <br>\n} <br>\n$context = Net::SSLeay::CTX_new(); <br>\nthreads-&gt;create(\\&amp;do_job);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Using other\nperl modules based on Net::SSLeay</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It should be\nfine to use any other module based on Net::SSLeay (like\nIO::Socket::SSL) in multi-threaded applications. It is\ngenerally recommended to do any global initialization of\nsuch a module in the main thread before calling\n&quot;threads-&gt;new(..)&quot; or\n&quot;threads-&gt;create(..)&quot; but it might differ\nmodule by module.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To be safe you\ncan load and init Net::SSLeay explicitly in the main\nthread:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::SSLeay; <br>\nuse Other::SSLeay::Based::Module; <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or even\nsafer:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::SSLeay; <br>\nuse Other::SSLeay::Based::Module; <br>\nBEGIN { <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize(); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Combining\nNet::SSLeay with other modules linked with openssl</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>BEWARE:</small>\nThis might be a big trouble! This is not guaranteed be\nthread-safe!</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are many\nother ( <small>XS</small> ) modules linked directly to\nopenssl library (like Crypt::SSLeay).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As it is\nexpected that also &quot;another&quot; module will call\n&quot;SSLeay_add_ssl_algorithms&quot; at some point we have\nagain a trouble with multiple openssl initialization by\nNet::SSLeay and &quot;another&quot; module.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As you can\nexpect Net::SSLeay is not able to avoid multiple\ninitialization of openssl library called by\n&quot;another&quot; module, thus you have to handle this on\nyour own (in some cases it might not be possible at all to\navoid this).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Threading\nwith get_https and friends</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The convenience\nfunctions get_https, post_https etc all initialize the\n<small>SSL</small> library by calling\nNet::SSLeay::initialize which does the conventional library\ninitialization:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::load_error_strings();\n<br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize();</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::initialize\ninitializes the <small>SSL</small> library at most once. You\ncan override the Net::SSLeay::initialize function if you\ndesire some other type of initialization behaviour by\nget_https and friends. You can call Net::SSLeay::initialize\nfrom your own code if you desire this conventional library\ninitialization.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Convenience\nroutines</b> <br>\nTo be used with Low level <small>API</small></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::randomize($rn_seed_file,$additional_seed);\n<br>\nNet::SSLeay::set_cert_and_key($ctx, $cert_path, $key_path);\n<br>\n$cert = Net::SSLeay::dump_peer_certificate($ssl); <br>\nNet::SSLeay::ssl_write_all($ssl, $message) or die &quot;ssl\nwrite failure&quot;; <br>\n$got = Net::SSLeay::ssl_read_all($ssl) or die &quot;ssl read\nfailure&quot;; <br>\n$got = Net::SSLeay::ssl_read_CRLF($ssl [, $max_length]);\n<br>\n$got = Net::SSLeay::ssl_read_until($ssl [, $delimit [,\n$max_length]]); <br>\nNet::SSLeay::ssl_write_CRLF($ssl, $message);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">randomize</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">seeds the\nopenssl <small>PRNG</small> with &quot;/dev/urandom&quot;\n(see the top of &quot;SSLeay.pm&quot; for how to change or\nconfigure this) and optionally with user provided data. It\nis very important to properly seed your random numbers, so\ndo not forget to call this. The high level\n<small>API</small> functions automatically call\n&quot;randomize()&quot; so it is not needed with them. See\nalso caveats.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">set_cert_and_key</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">takes two file\nnames as arguments and sets the certificate and private key\nto those. This can be used to set either server certificates\nor client certificates.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">dump_peer_certificate</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">allows you to\nget a plaintext description of the certificate the peer\n(usually the server) presented to us.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">ssl_read_all</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">see\nssl_write_all (below)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">ssl_write_all</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;ssl_read_all()&quot;\nand &quot;ssl_write_all()&quot; provide true blocking\nsemantics for these operations (see limitation, below, for\nexplanation). These are much preferred to the low level\n<small>API</small> equivalents (which implement\n<small>BSD</small> blocking semantics). The message argument\nto &quot;ssl_write_all()&quot; can be a reference. This is\nhelpful to avoid unnecessary copying when writing something\nbig, e.g:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$data = 'A' x\n1000000000; <br>\nNet::SSLeay::ssl_write_all($ssl, \\$data) or die &quot;ssl\nwrite failed&quot;;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">ssl_read_CRLF</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">uses\n&quot;ssl_read_all()&quot; to read in a line terminated with\na carriage return followed by a linefeed (\n<small>CRLF</small> ). The <small>CRLF</small> is included\nin the returned scalar.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">ssl_read_until</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">uses\n&quot;ssl_read_all()&quot; to read from the\n<small>SSL</small> input stream until it encounters a\nprogrammer specified delimiter. If the delimiter is\nundefined, $/ is used. If $/ is undefined, &quot;\\n&quot; is\nused. One can optionally set a maximum length of bytes to\nread from the <small>SSL</small> input stream.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">ssl_write_CRLF</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">writes $message\nand appends <small>CRLF</small> to the <small>SSL</small>\noutput stream.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Initialization</b>\n<br>\nIn order to use the low level <small>API</small> you should\nstart your programs with the following incantation:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Net::SSLeay\nqw(die_now die_if_ssl_error); <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); # Important! <br>\nNet::SSLeay::ENGINE_load_builtin_engines(); # If you want\nbuilt-in engines <br>\nNet::SSLeay::ENGINE_register_all_complete(); # If you want\nbuilt-in engines <br>\nNet::SSLeay::randomize();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Error\nhandling functions</b> <br>\nI can not emphasize the need to check for error enough. Use\nthese functions even in the most simple programs, they will\nreduce debugging time greatly. Do not ask questions on the\nmailing list without having first sprinkled these in your\ncode.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">die_now</p></td>\n<td width=\"58%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p>die_if_ssl_error</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;die_now()&quot;\nand &quot;die_if_ssl_error()&quot; are used to conveniently\nprint the SSLeay error stack when something goes wrong:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::connect($ssl)\nor die_now(&quot;Failed SSL connect ($!)&quot;); <br>\nNet::SSLeay::write($ssl, &quot;foo&quot;) or\ndie_if_ssl_error(&quot;SSL write ($!)&quot;);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">print_errs</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can also\nuse &quot;Net::SSLeay::print_errs()&quot; to dump the error\nstack without exiting the program. As can be seen, your code\nbecomes much more readable if you import the error reporting\nfunctions into your main name space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Sockets</b>\n<br>\nPerl uses file handles for all I/O. While SSLeay has a quite\nflexible <small>BIO</small> mechanism and perl has an\nevolved PerlIO mechanism, this module still sticks to using\nfile descriptors. Thus to attach SSLeay to a socket you\nshould use &quot;fileno()&quot; to extract the underlying\nfile descriptor:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::set_fd($ssl,\nfileno(S)); # Must use fileno</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You should also\nset $| to 1 to eliminate <small>STDIO</small> buffering so\nyou do not get confused if you use perl I/O functions to\nmanipulate your socket handle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you need to\nselect(2) on the socket, go right ahead, but be warned that\nOpenSSL does some internal buffering so SSL_read does not\nalways return data even if the socket selected for reading\n(just keep on selecting and trying to read).\n&quot;Net::SSLeay&quot; is no different from the C language\nOpenSSL in this respect.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Callbacks</b>\n<br>\nYou can establish a per-context verify callback function\nsomething like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub verify {\n<br>\nmy ($ok, $x509_store_ctx) = @_; <br>\nprint &quot;Verifying certificate...\\n&quot;; <br>\n... <br>\nreturn $ok; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is used like\nthis:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::set_verify\n($ssl, Net::SSLeay::VERIFY_PEER, \\&amp;verify);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Per-context\ncallbacks for decrypting private keys are implemented.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::CTX_set_default_passwd_cb($ctx,\nsub { &quot;top-secret&quot; }); <br>\nNet::SSLeay::CTX_use_PrivateKey_file($ctx,\n&quot;key.pem&quot;, <br>\nNet::SSLeay::FILETYPE_PEM) <br>\nor die &quot;Error reading private key&quot;; <br>\nNet::SSLeay::CTX_set_default_passwd_cb($ctx, undef);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If Hello\nExtensions are supported by your OpenSSL, a session secret\ncallback can be set up to be called when a session secret is\nset by openssl.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Establish it\nlike this:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::set_session_secret_cb($ssl,\n\\&amp;session_secret_cb, $somedata);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It will be\ncalled like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub\nsession_secret_cb <br>\n{ <br>\nmy ($secret, \\@cipherlist, \\$preferredcipher, $somedata) =\n@_; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">No other\ncallbacks are implemented. You do not need to use any\ncallback for simple (i.e. normal) cases where the SSLeay\nbuilt-in verify mechanism satisfies your needs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is required\nto reset these callbacks to undef immediately after use to\nprevent memory leaks, thread safety problems and crashes on\nexit that can occur if different threads set different\ncallbacks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you want to\nuse callback stuff, see examples/callback.pl! It&rsquo;s the\nonly one I am able to make work reliably.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Low level\n<small>API</small></b> <br>\nIn addition to the high level functions outlined above, this\nmodule contains straight-forward access to\n<small>CRYPTO</small> and <small>SSL</small> parts of\nOpenSSL C <small>API.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the\n&quot;*.h&quot; headers from OpenSSL C distribution for a\nlist of low level SSLeay functions to call (check SSLeay.xs\nto see if some function has been implemented). The module\nstrips the initial &quot;SSL_&quot; off of the SSLeay names.\nGenerally you should use &quot;Net::SSLeay::&quot; in its\nplace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that some\nfunctions are prefixed with &quot;P_&quot; - these are very\nclose to the original <small>API</small> however contain\nsome kind of a wrapper making its interface more perl\nfriendly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In C:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;ssl.h&gt; <br>\nerr = SSL_set_verify (ssl, SSL_VERIFY_CLIENT_ONCE, <br>\n&amp;your_call_back_here);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In Perl:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::SSLeay; <br>\n$err = Net::SSLeay::set_verify ($ssl, <br>\nNet::SSLeay::VERIFY_CLIENT_ONCE, <br>\n\\&amp;your_call_back_here);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the function\ndoes not start with &quot;SSL_&quot; you should use the full\nfunction name, e.g.:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$err =\nNet::SSLeay::ERR_get_error;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nnew functions behave in perlish way:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$got =\nNet::SSLeay::read($ssl); <br>\n# Performs SSL_read, but returns $got <br>\n# resized according to data received. <br>\n# Returns undef on failure. <br>\nNet::SSLeay::write($ssl, $foo) || die; <br>\n# Performs SSL_write, but automatically <br>\n# figures out the size of $foo</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> Version and library information related\nfunctions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"46%\">\n\n\n<p style=\"margin-top: 1em\">OpenSSL_version_num and\nSSLeay</p> </td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small>\nSSLeay()</b> is not available in Net-SSLeay-1.42 and before.\n<b>SSLeay()</b> was made an alias of\n<b>OpenSSL_version_num()</b> in OpenSSL 1.1.0 and LibreSSL\n2.7.0.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small>\nOpenSSL_version_num()</b> requires at least Net-SSLeay-1.82\nwith OpenSSL 1.1.0, or Net-SSLeay-1.88 with LibreSSL\n2.7.0.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Both functions\nreturn <small>OPENSSL_VERSION_NUMBER</small> constant\n(numeric) as defined by the underlying OpenSSL or LibreSSL\nlibrary.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $ver_number\n= Net::SSLeay::SSLeay(); <br>\nor <br>\nmy $ver_number = Net::SSLeay::OpenSSL_version_num(); <br>\n# returns: OPENSSL_VERSION_NUMBER constant <br>\nOpenSSL version numbering is: <br>\n# 0x00903100 =&gt; openssl-0.9.3 <br>\n# 0x00904100 =&gt; openssl-0.9.4 <br>\n# 0x00905100 =&gt; openssl-0.9.5 <br>\n# 0x0090600f =&gt; openssl-0.9.6 <br>\n# 0x0090601f =&gt; openssl-0.9.6a <br>\n# ... <br>\n# 0x009060df =&gt; openssl-0.9.6m <br>\n# 0x0090700f =&gt; openssl-0.9.7 <br>\n# 0x0090701f =&gt; openssl-0.9.7a <br>\n# ... <br>\n# 0x009070df =&gt; openssl-0.9.7m <br>\n# 0x0090800f =&gt; openssl-0.9.8 <br>\n# 0x0090801f =&gt; openssl-0.9.8a <br>\n# ... <br>\n# 0x0090821f =&gt; openssl-0.9.8zh <br>\n# 0x1000000f =&gt; openssl-1.0.0 <br>\n# ... <br>\n# 0x1000014f =&gt; openssl-1.0.0t <br>\n# 0x1000100f =&gt; openssl-1.0.1 <br>\n# ... <br>\n# 0x1000115f =&gt; openssl-1.0.1u <br>\n# 0x1000200f =&gt; openssl-1.0.2 <br>\n# ... <br>\n# 0x1000215f =&gt; openssl-1.0.2u <br>\n# 0x1010000f =&gt; openssl-1.1.0 <br>\n# ... <br>\n# 0x101000cf =&gt; openssl-1.1.0l <br>\n# 0x1010100f =&gt; openssl-1.1.1 <br>\n# ... <br>\n# 0x101010df =&gt; openssl-1.1.1m <br>\n# 0x30000000 =&gt; openssl-3.0.0 <br>\n# 0x30000010 =&gt; openssl-3.0.1 <br>\nNote that OpenSSL 3.0.0 and later do not set the status\nnibble in the <br>\nleast significant octet to f. <br>\nLibreSSL returns 0x20000000 always: <br>\n# 0x20000000 =&gt; libressl-2.2.1 <br>\n# ... <br>\n# 0x20000000 =&gt; libressl-3.4.2</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can use the\nversion number like this when you know that the underlying\nlibrary is OpenSSL:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if\n(Net::SSLeay::SSLeay() &lt; 0x0090800f) { <br>\ndie &quot;You need OpenSSL 0.9.8 or higher&quot;; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">LibresSSL 2.2.2\nand later define constant\n<small>LIBRESSL_VERSION_NUMBER</small> that gives the\nLibreSSL version number. The format is the same that OpenSSL\nuses with <small>OPENSSL_VERSION_NUMBER.</small> You can do\nthis if you need to check that the underlying library is\nLibreSSL and it&rsquo;s recent enough:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if\n(Net::SSLeay::SSLeay() != 0x20000000 || <br>\nNet::SSLeay::LIBRESSL_VERSION_NUMBER() &lt; 0x3040200f) {\n<br>\ndie &quot;You need LibreSSL. Version 3.4.2 or higher&quot;;\n<br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OpenSSL_version_num.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See OpenSSL\n1.1.1 and earlier documentation for the details of status\nnibble and the format interpretation.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">SSLeay_version</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\ndifferent strings depending on $type.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $ver_string\n= Net::SSLeay::SSLeay_version($type); <br>\n# $type <br>\n# SSLEAY_VERSION - e.g. 'OpenSSL 1.0.0d 8 Feb 2011' <br>\n# SSLEAY_CFLAGS - e.g. 'compiler: gcc -D_WINDLL\n-DOPENSSL_USE_APPLINK .....' <br>\n# SSLEAY_BUILT_ON - e.g. 'built on: Fri May 6 00:00:46 GMT\n2011' <br>\n# SSLEAY_PLATFORM - e.g. 'platform: mingw' <br>\n# SSLEAY_DIR - e.g. 'OPENSSLDIR: &quot;z:/....&quot;' <br>\n# <br>\n# returns: string <br>\nNet::SSLeay::SSLeay_version(); <br>\n#is equivalent to <br>\nNet::SSLeay::SSLeay_version(SSLEAY_VERSION);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">OpenSSL 1.1.0\nchanged <b>SSLeay_version()</b> to an alias of\n<b>OpenSSL_version()</b>. To ensure correct functionality\nwith LibreSSL, use SSLEAY_* constants with\n<b>SSLeay_version()</b> and OPENSSL_* constants with\n<b>OpenSSL_version()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OpenSSL_version.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">OpenSSL website\nno longer has a manual page for <b>SSLeay_version()</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">OpenSSL_version</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nrequires at least Net-SSLeay-1.82 with OpenSSL 1.1.0, or\nNet-SSLeay-1.88 with LibreSSL 2.7.0.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\ndifferent strings depending on $t. Available $t constants\ndepend on the library version.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $ver_string\n= Net::SSLeay::OpenSSL_version($t); <br>\n# $t <br>\n# OPENSSL_VERSION - e.g. 'OpenSSL 1.1.0g 2 Nov 2017' <br>\n# OPENSSL_CFLAGS - e.g. 'compiler: cc -DDSO_DLFCN\n-DHAVE_DLFCN_H .....' <br>\n# OPENSSL_BUILT_ON - e.g. 'built on: reproducible build,\ndate unspecified' <br>\n# OPENSSL_PLATFORM - e.g. 'platform: darwin64-x86_64-cc'\n<br>\n# OPENSSL_DIR - e.g. 'OPENSSLDIR:\n&quot;/opt/openssl-1.1.0g&quot;' <br>\n# OPENSSL_ENGINES_DIR - e.g. 'ENGINESDIR:\n&quot;/opt/openssl-1.1.0g/lib/engines-1.1&quot;' <br>\n# <br>\n# returns: string <br>\nNet::SSLeay::OpenSSL_version(); <br>\n#is equivalent to <br>\nNet::SSLeay::OpenSSL_version(OPENSSL_VERSION);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OpenSSL_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">OPENSSL_info</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.90 and before; requires at\nleast OpenSSL 3.0.0-alpha1</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\ndifferent strings depending on $t. Available $t constants\ndepend on the library version.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $info_string\n= Net::SSLeay::OPENSSL_info($t); <br>\n# $t <br>\n# OPENSSL_INFO_CONFIG_DIR - e.g. '/opt/openssl-3.0.1' <br>\n# OPENSSL_INFO_... <br>\n# <br>\n# returns: string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OPENSSL_info.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\">OPENSSL_version_major,\nOPENSSL_version_minor and OPENSSL_version_patch</p></td>\n<td width=\"9%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.90 and before; requires at\nleast OpenSSL 3.0.0-alpha1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return\nconstants <small>OPENSSL_VERSION_MAJOR,\nOPENSSL_VERSION_MINOR</small> and\n<small>OPENSSL_VERSION_PATCH,</small> respectively.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $major =\nNet::SSLeay::OPENSSL_version_major(); <br>\nmy $minor = Net::SSLeay::OPENSSL_version_minor(); <br>\nmy $patch = Net::SSLeay::OPENSSL_version_patch(); <br>\n# <br>\n# return: integer</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example\nwith OpenSSL 3.0.1, $major is 3, $minor is 0 and $patch is\n1.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: the\nconstants record Net::SSLeay compile time values whereas the\nthree functions return values from the library. Typically\nthese are the same, but they can be different if the library\nversion is updated but Net::SSLeay is not re-compiled. See\nthe OpenSSL and LibreSSL <small>API/ABI</small>\ncompatibility statements for more information.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OPENSSL_version_major.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">OPENSSL_version_pre_release</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.90 and before; requires at\nleast OpenSSL 3.0.0-alpha1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return constant\nstring defined by C macro\n<small>OPENSSL_VERSION_PRE_RELEASE.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $pre_release\n= Net::SSLeay::OPENSSL_version_pre_release(); <br>\n# <br>\n# returns: string <br>\nFor example: &quot;-alpha3&quot; or &quot;&quot; for a\nrelease version.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When the macro\nis not defined, an empty string is returned instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OPENSSL_version_pre_release.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n\n<p style=\"margin-top: 1em\"><b>OPENSSL_version_build_metadata()</b></p> </td>\n<td width=\"34%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.90 and before; requires at\nleast OpenSSL 3.0.0-alpha1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return constant\nstring defined by C macro\n<small>OPENSSL_VERSION_BUILD_METADATA.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $metadata =\nNet::SSLeay::OPENSSL_version_build_metadata(); <br>\n# <br>\n# returns: string <br>\nFor example: &quot;+fips&quot; or &quot;&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When the macro\nis not defined, an empty string is returned instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OPENSSL_version_build_metadata.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> Initialization related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">library_init</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Initialize\n<small>SSL</small> library by registering algorithms.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::library_init();</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_library_init.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">While the\noriginal function from OpenSSL always returns 1, Net::SSLeay\nadds a wrapper around it to make sure that the OpenSSL\nfunction is only called once. Thus the function will return\n1 if initialization was done and 0 if not, i.e. if\ninitialization was done already before.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">add_ssl_algorithms</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The alias for\n&quot;library_init&quot;</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::add_ssl_algorithms();</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">OpenSSL_add_ssl_algorithms</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The alias for\n&quot;library_init&quot;</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::OpenSSL_add_ssl_algorithms();</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">SSLeay_add_ssl_algorithms</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The alias for\n&quot;library_init&quot;</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::SSLeay_add_ssl_algorithms();</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">load_error_strings</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Registers the\nerror strings for all libcrypto + libssl related\nfunctions.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::load_error_strings();\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">ERR_load_crypto_strings</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Registers the\nerror strings for all libcrypto functions. No need to call\nthis function if you have already called\n&quot;load_error_strings&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::ERR_load_crypto_strings();\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/ERR_load_crypto_strings.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">ERR_load_RAND_strings</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Registers the\nerror strings for <small>RAND</small> related functions. No\nneed to call this function if you have already called\n&quot;load_error_strings&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::ERR_load_RAND_strings();\n<br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">ERR_load_SSL_strings</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Registers the\nerror strings for <small>SSL</small> related functions. No\nneed to call this function if you have already called\n&quot;load_error_strings&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::ERR_load_SSL_strings();\n<br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">OpenSSL_add_all_algorithms</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Add algorithms\nto internal table.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::OpenSSL_add_all_algorithms();\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"48%\">\n\n\n\n<p style=\"margin-top: 1em\">OPENSSL_add_all_algorithms_conf</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Similar to\n&quot;OpenSSL_add_all_algorithms&quot; - will\n<small>ALWAYS</small> load the config file</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::OPENSSL_add_all_algorithms_conf();\n<br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"51%\">\n\n\n\n<p style=\"margin-top: 1em\">OPENSSL_add_all_algorithms_noconf</p> </td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Similar to\n&quot;OpenSSL_add_all_algorithms&quot; - will\n<small>NEVER</small> load the config file</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::OPENSSL_add_all_algorithms_noconf();\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> ERR_* and SSL_alert_* related\nfunctions</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>NOTE:</small></b>\nPlease note that SSL_alert_* function have &quot;\n<small>SSL_&quot;</small> part stripped from their\nnames.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">ERR_clear_error</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Clear the error\nqueue.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::ERR_clear_error();\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/ERR_clear_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">ERR_error_string</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Generates a\nhuman-readable string representing the error code\n$error.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ERR_error_string($error); <br>\n# $error - (unsigned integer) error code <br>\n# <br>\n# returns: string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/ERR_error_string.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">ERR_get_error</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nearliest error code from the thread&rsquo;s error queue and\nremoves the entry. This function can be called repeatedly\nuntil there are no more error codes to return.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ERR_get_error(); <br>\n# <br>\n# returns: (unsigned integer) error code</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/ERR_get_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">ERR_peek_error</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nearliest error code from the thread&rsquo;s error queue\nwithout modifying it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ERR_peek_error(); <br>\n# <br>\n# returns: (unsigned integer) error code</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/ERR_get_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">ERR_put_error</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds an error\ncode to the thread&rsquo;s error queue. It signals that the\nerror of $reason code reason occurred in function $func of\nlibrary $lib, in line number $line of $file.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::ERR_put_error($lib,\n$func, $reason, $file, $line); <br>\n# $lib - (integer) library id (check openssl/err.h for\nconstants e.g. ERR_LIB_SSL) <br>\n# $func - (integer) function id (check openssl/ssl.h for\nconstants e.g. SSL_F_SSL23_READ) <br>\n# $reason - (integer) reason id (check openssl/ssl.h for\nconstants e.g. SSL_R_SSL_HANDSHAKE_FAILURE) <br>\n# $file - (string) file name <br>\n# $line - (integer) line number in $file <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/ERR_put_error.html&gt;\nand &lt;http://www.openssl.org/docs/crypto/err.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">alert_desc_string</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a two\nletter string as a short form describing the reason of the\nalert specified by value.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::alert_desc_string($value); <br>\n# $value - (integer) allert id (check openssl/ssl.h for\nSSL3_AD_* and TLS1_AD_* constants) <br>\n# <br>\n# returns: description string (2 letters)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_alert_type_string.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">alert_desc_string_long</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nstring describing the reason of the alert specified by\nvalue.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::alert_desc_string_long($value); <br>\n# $value - (integer) allert id (check openssl/ssl.h for\nSSL3_AD_* and TLS1_AD_* constants) <br>\n# <br>\n# returns: description string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_alert_type_string.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">alert_type_string</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a one\nletter string indicating the type of the alert specified by\nvalue.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::alert_type_string($value); <br>\n# $value - (integer) allert id (check openssl/ssl.h for\nSSL3_AD_* and TLS1_AD_* constants) <br>\n# <br>\n# returns: string (1 letter)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_alert_type_string.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">alert_type_string_long</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nstring indicating the type of the alert specified by\nvalue.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::alert_type_string_long($value); <br>\n# $value - (integer) allert id (check openssl/ssl.h for\nSSL3_AD_* and TLS1_AD_* constants) <br>\n# <br>\n# returns: string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_alert_type_string.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> SSL_METHOD_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">SSLv23_method,\nSSLv23_server_method and SSLv23_client_method</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL_METHOD</small> structure corresponding to\ngeneral-purpose version-flexible <small>TLS</small> method,\nthe return value can be later used as a param of\n&quot;CTX_new_with_method&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nConsider using TLS_method, TLS_server_method or\nTLS_client_method with new code.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SSLv2_method(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_METHOD\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">SSLv2_method</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL_METHOD</small> structure corresponding to SSLv2\nmethod, the return value can be later used as a param of\n&quot;CTX_new_with_method&quot;. Only available where\nsupported by the underlying openssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SSLv2_method(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_METHOD\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">SSLv3_method</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL_METHOD</small> structure corresponding to SSLv3\nmethod, the return value can be later used as a param of\n&quot;CTX_new_with_method&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SSLv3_method(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_METHOD\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">TLSv1_method,\nTLSv1_server_method and TLSv1_client_method</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nServer and client methods not available in Net-SSLeay-1.82\nand before.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL_METHOD</small> structure corresponding to TLSv1\nmethod, the return value can be later used as a param of\n&quot;CTX_new_with_method&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::TLSv1_method(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_METHOD\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">TLSv1_1_method,\nTLSv1_1_server_method and TLSv1_1_client_method</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nServer and client methods not available in Net-SSLeay-1.82\nand before.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL_METHOD</small> structure corresponding to TLSv1_1\nmethod, the return value can be later used as a param of\n&quot;CTX_new_with_method&quot;. Only available where\nsupported by the underlying openssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::TLSv1_1_method(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_METHOD\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">TLSv1_2_method,\nTLSv1_2_server_method and TLSv1_2_client_method</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nServer and client methods not available in Net-SSLeay-1.82\nand before.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL_METHOD</small> structure corresponding to TLSv1_2\nmethod, the return value can be later used as a param of\n&quot;CTX_new_with_method&quot;. Only available where\nsupported by the underlying openssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::TLSv1_2_method(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_METHOD\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">TLS_method, TLS_server_method\nand TLS_client_method</p></td>\n<td width=\"5%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nNot available in Net-SSLeay-1.82 and before.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL_METHOD</small> structure corresponding to\ngeneral-purpose version-flexible <small>TLS</small> method,\nthe return value can be later used as a param of\n&quot;CTX_new_with_method&quot;. Only available where\nsupported by the underlying openssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::TLS_method(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_METHOD\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_new.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> ENGINE_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">ENGINE_load_builtin_engines</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nRequires an OpenSSL build with dynamic engine loading\nsupport.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Load all\nbundled ENGINEs into memory and make them visible.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::ENGINE_load_builtin_engines();\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/engine.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">ENGINE_register_all_complete</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nRequires an OpenSSL build with dynamic engine loading\nsupport.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Register all\nloaded ENGINEs for every algorithm they collectively\nimplement.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::ENGINE_register_all_complete();\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/engine.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">ENGINE_set_default</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nRequires an OpenSSL build with dynamic engine loading\nsupport.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set default\nengine to $e + set its flags to $flags.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ENGINE_set_default($e, $flags); <br>\n# $e - value corresponding to openssl's ENGINE structure\n<br>\n# $flags - (integer) engine flags <br>\n# flags value can be made by bitwise &quot;OR&quot;ing: <br>\n# 0x0001 - ENGINE_METHOD_RSA <br>\n# 0x0002 - ENGINE_METHOD_DSA <br>\n# 0x0004 - ENGINE_METHOD_DH <br>\n# 0x0008 - ENGINE_METHOD_RAND <br>\n# 0x0010 - ENGINE_METHOD_ECDH <br>\n# 0x0020 - ENGINE_METHOD_ECDSA <br>\n# 0x0040 - ENGINE_METHOD_CIPHERS <br>\n# 0x0080 - ENGINE_METHOD_DIGESTS <br>\n# 0x0100 - ENGINE_METHOD_STORE <br>\n# 0x0200 - ENGINE_METHOD_PKEY_METHS <br>\n# 0x0400 - ENGINE_METHOD_PKEY_ASN1_METHS <br>\n# Obvious all-or-nothing cases: <br>\n# 0xFFFF - ENGINE_METHOD_ALL <br>\n# 0x0000 - ENGINE_METHOD_NONE <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/engine.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">ENGINE_by_id</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get\n<small>ENGINE</small> by its identification $id.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nRequires an OpenSSL build with dynamic engine loading\nsupport.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ENGINE_by_id($id); <br>\n# $id - (string) engine identification e.g.\n&quot;dynamic&quot; <br>\n# <br>\n# returns: value corresponding to openssl's ENGINE structure\n(0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/engine.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> EVP_PKEY_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">EVP_PKEY_copy_parameters</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Copies the\nparameters from key $from to key $to.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_PKEY_copy_parameters($to, $from); <br>\n# $to - value corresponding to openssl's EVP_PKEY structure\n<br>\n# $from - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/EVP_PKEY_cmp.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">EVP_PKEY_new</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>EVP_PKEY</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_PKEY_new(); <br>\n# <br>\n# returns: value corresponding to openssl's EVP_PKEY\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/EVP_PKEY_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">EVP_PKEY_free</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Free an\nallocated <small>EVP_PKEY</small> structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::EVP_PKEY_free($pkey);\n<br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/EVP_PKEY_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">EVP_PKEY_assign_RSA</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set the key\nreferenced by $pkey to $key</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nNo reference counter will be increased, i.e. $key will be\nfreed if $pkey is freed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_PKEY_assign_RSA($pkey, $key); <br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# $key - value corresponding to openssl's RSA structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/EVP_PKEY_assign_RSA.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">EVP_PKEY_assign_EC_KEY</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.74 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set the key\nreferenced by $pkey to $key</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nNo reference counter will be increased, i.e. $key will be\nfreed if $pkey is freed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_PKEY_assign_EC_KEY($pkey, $key); <br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# $key - value corresponding to openssl's EC_KEY structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/EVP_PKEY_assign_EC_KEY.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">EVP_PKEY_bits</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nsize of the key $pkey in bits.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_PKEY_bits($pkey); <br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: size in bits</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">EVP_PKEY_size</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nmaximum size of a signature in bytes. The actual signature\nmay be smaller.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_PKEY_size($pkey); <br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: the maximum size in bytes</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/EVP_SignInit.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">EVP_PKEY_id</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-1.0.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns $pkey\ntype (integer value of corresponding <small>NID</small>\n).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_PKEY_id($pkey); <br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: (integer) key type</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $pubkey =\nNet::SSLeay::X509_get_pubkey($x509); <br>\nmy $type = Net::SSLeay::EVP_PKEY_id($pubkey); <br>\nprint Net::SSLeay::OBJ_nid2sn($type); #prints e.g.\n'rsaEncryption'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> PEM_* related functions</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Check openssl\ndoc &lt;http://www.openssl.org/docs/crypto/pem.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">PEM_read_bio_X509</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads\n<small>PEM</small> formatted X509 certificate via given\n<small>BIO</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::PEM_read_bio_X509($bio); <br>\n# $bio - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: value corresponding to openssl's X509 structure\n(0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $bio =\nNet::SSLeay::BIO_new_file($filename, 'r'); <br>\nmy $x509 = Net::SSLeay::PEM_read_bio_X509($bio); <br>\nNet::SSLeay::BIO_free($bio);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">PEM_read_bio_X509_REQ</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads\n<small>PEM</small> formatted X509_REQ object via given\n<small>BIO</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::PEM_read_bio_X509_REQ($bio, $x=NULL, $cb=NULL,\n$u=NULL); <br>\n# $bio - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: value corresponding to openssl's X509_REQ\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $bio =\nNet::SSLeay::BIO_new_file($filename, 'r'); <br>\nmy $x509_req = Net::SSLeay::PEM_read_bio_X509_REQ($bio);\n<br>\nNet::SSLeay::BIO_free($bio);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">PEM_read_bio_DHparams</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Reads\n<small>DH</small> structure from <small>BIO.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::PEM_read_bio_DHparams($bio); <br>\n# $bio - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: value corresponding to openssl's DH structure (0\non failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">PEM_read_bio_X509_CRL</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Reads X509_CRL\nstructure from <small>BIO.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::PEM_read_bio_X509_CRL($bio); <br>\n# $bio - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: value corresponding to openssl's X509_CRL\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">PEM_read_bio_PrivateKey</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads\n<small>PEM</small> formatted private key via given\n<small>BIO</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::PEM_read_bio_PrivateKey($bio, $cb, $data); <br>\n# $bio - value corresponding to openssl's BIO structure <br>\n# $cb - reference to perl callback function <br>\n# $data - data that will be passed to callback function (see\nexamples below) <br>\n# <br>\n# returns: value corresponding to openssl's EVP_PKEY\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $bio =\nNet::SSLeay::BIO_new_file($filename, 'r'); <br>\nmy $privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio);\n#ask for password if needed <br>\nNet::SSLeay::BIO_free($bio);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To use password\nyou have the following options:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$privkey =\nNet::SSLeay::PEM_read_bio_PrivateKey($bio,\n\\&amp;callback_func); # use callback func for getting\npassword <br>\n$privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio,\n\\&amp;callback_func, $data); # use callback_func + pass\n$data to callback_func <br>\n$privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef,\n&quot;secret&quot;); # use password &quot;secret&quot; <br>\n$privkey = Net::SSLeay::PEM_read_bio_PrivateKey($bio, undef,\n&quot;&quot;); # use empty password</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Callback\nfunction signature:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub\ncallback_func { <br>\nmy ($max_passwd_size, $rwflag, $data) = @_; <br>\n# $max_passwd_size - maximum size of returned password\n(longer values will be discarded) <br>\n# $rwflag - indicates whether we are loading (0) or storing\n(1) - for PEM_read_bio_PrivateKey always 0 <br>\n# $data - the data passed to PEM_read_bio_PrivateKey as 3rd\nparameter <br>\nreturn &quot;secret&quot;; <br>\n}</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">PEM_X509_INFO_read_bio</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Reads a\n<small>BIO</small> containing a <small>PEM</small> formatted\nfile into a <small>STACK_OF</small> (X509_INFO)\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::PEM_X509_INFO_read_bio($bio); <br>\n# $bio - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: value corresponding to openssl's\nSTACK_OF(X509_INFO) structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $bio =\nNet::SSLeay::BIO_new_file($filename, 'r'); <br>\nmy $sk_x509_info =\nNet::SSLeay::PEM_X509_INFO_read_bio($bio); <br>\nNet::SSLeay::BIO_free($bio);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">PEM_get_string_X509</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Converts/exports\nX509 certificate to string ( <small>PEM</small> format).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::PEM_get_string_X509($x509);\n<br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: string with $x509 in PEM format</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">PEM_get_string_PrivateKey</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Converts public\nkey $pk into <small>PEM</small> formatted string (optionally\nprotected with password).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::PEM_get_string_PrivateKey($pk, $passwd,\n$enc_alg); <br>\n# $pk - value corresponding to openssl's EVP_PKEY structure\n<br>\n# $passwd - [optional] (string) password to use for key\nencryption <br>\n# $enc_alg - [optional] algorithm to use for key encryption\n(default: DES_CBC) - value corresponding to openssl's\nEVP_CIPHER structure <br>\n# <br>\n# returns: PEM formatted string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Examples:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$pem_privkey =\nNet::SSLeay::PEM_get_string_PrivateKey($pk); <br>\n$pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk,\n&quot;secret&quot;); <br>\n$pem_privkey = Net::SSLeay::PEM_get_string_PrivateKey($pk,\n&quot;secret&quot;,\nNet::SSLeay::EVP_get_cipherbyname(&quot;DES-EDE3-CBC&quot;));</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">PEM_get_string_X509_CRL</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Converts\nX509_CRL object $x509_crl into <small>PEM</small> formatted\nstring.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::PEM_get_string_X509_CRL($x509_crl);\n<br>\n# $x509_crl - value corresponding to openssl's X509_CRL\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">PEM_get_string_X509_REQ</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Converts\nX509_REQ object $x509_crl into <small>PEM</small> formatted\nstring.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::PEM_get_string_X509_REQ($x509_req);\n<br>\n# $x509_req - value corresponding to openssl's X509_REQ\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> d2i_* ( <small>DER</small> format)\nrelated functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">d2i_X509_bio</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads\n<small>DER</small> formatted X509 certificate via given\n<small>BIO</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::d2i_X509_bio($bp); <br>\n# $bp - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: value corresponding to openssl's X509 structure\n(0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $bio =\nNet::SSLeay::BIO_new_file($filename, 'rb'); <br>\nmy $x509 = Net::SSLeay::d2i_X509_bio($bio); <br>\nNet::SSLeay::BIO_free($bio);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/d2i_X509.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">d2i_X509_CRL_bio</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads\n<small>DER</small> formatted X509_CRL object via given\n<small>BIO</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::d2i_X509_CRL_bio($bp); <br>\n# $bp - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: value corresponding to openssl's X509_CRL\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $bio =\nNet::SSLeay::BIO_new_file($filename, 'rb'); <br>\nmy $x509_crl = Net::SSLeay::d2i_X509_CRL_bio($bio); <br>\nNet::SSLeay::BIO_free($bio);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">d2i_X509_REQ_bio</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads\n<small>DER</small> formatted X509_REQ object via given\n<small>BIO</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::d2i_X509_REQ_bio($bp); <br>\n# $bp - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: value corresponding to openssl's X509_REQ\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $bio =\nNet::SSLeay::BIO_new_file($filename, 'rb'); <br>\nmy $x509_req = Net::SSLeay::d2i_X509_REQ_bio($bio); <br>\nNet::SSLeay::BIO_free($bio);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API: PKCS12</small> related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">P_PKCS12_load_file</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads X509\ncertificate + private key + certificates of\n<small>CA</small> chain (if present in <small>PKCS12</small>\nfile).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my ($privkey,\n$cert, @cachain) =\nNet::SSLeay::P_PKCS12_load_file($filename, $load_chain,\n$password); <br>\n# $filename - name of PKCS12 file <br>\n# $load_chain - [optional] whether load (1) or not(0) CA\nchain (default: 0) <br>\n# $password - [optional] password for private key <br>\n# <br>\n# returns: triplet ($privkey, $cert, @cachain) <br>\n# $privkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# @cachain - array of values corresponding to openssl's X509\nstructure (empty if no CA chain in PKCS12)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>IMPORTANT\nNOTE:</small></b> after you do the job you need to call\n<b>X509_free()</b> on $privkey + all members of @cachain and\n<b>EVP_PKEY_free()</b> on $privkey.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Examples:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my ($privkey,\n$cert) = Net::SSLeay::P_PKCS12_load_file($filename); <br>\n#or <br>\nmy ($privkey, $cert) =\nNet::SSLeay::P_PKCS12_load_file($filename, 0, $password);\n<br>\n#or <br>\nmy ($privkey, $cert, @cachain) =\nNet::SSLeay::P_PKCS12_load_file($filename, 1); <br>\n#or <br>\nmy ($privkey, $cert, @cachain) =\nNet::SSLeay::P_PKCS12_load_file($filename, 1, $password);\n<br>\n#BEWARE: THIS IS WRONG - MEMORY LEAKS! (you cannot free\n@cachain items) <br>\nmy ($privkey, $cert) =\nNet::SSLeay::P_PKCS12_load_file($filename, 1,\n$password);</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE</small></b>\nWith some combinations of Windows, perl, compiler and\ncompiler options, you may see a runtime error &quot;no\nOPENSSL_Applink&quot;, when calling\nNet::SSLeay::P_PKCS12_load_file. See <small>README</small>\n.Win32 for more details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> SESSION_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">d2i_SSL_SESSION</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\ndoes not work in Net-SSLeay-1.85 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Transforms the\nbinary <small>ASN1</small> representation string of an\n<small>SSL/TLS</small> session into an\n<small>SSL_SESSION</small> object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $ses =\nNet::SSLeay::d2i_SSL_SESSION($data); <br>\n# $data - the session as ASN1 representation string <br>\n# <br>\n# returns: $ses - the new SSL_SESSION</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/i2d_SSL_SESSION.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">i2d_SSL_SESSION</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\ndoes not work in Net-SSLeay-1.85 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Transforms the\n<small>SSL_SESSION</small> object in into the\n<small>ASN1</small> representation and returns it as\nstring.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $data =\nNet::SSLeay::i2d_SSL_SESSION($ses); <br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: $data - session as string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/d2i_SSL_SESSION.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_new</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL_SESSION</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_new(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_SESSION\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_free</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Free an\nallocated <small>SSL_SESSION</small> structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::SESSION_free($ses);\n<br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_SESSION_free.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_up_ref</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.0-pre4 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Increases the\nreference counter on a <small>SSL_SESSION</small>\nstructure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::SESSION_up_ref($ses);\n<br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: 1 on success else 0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_SESSION_up_ref.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_dup</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Duplicates a\n<small>SSL_SESSION</small> structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::SESSION_dup($ses);\n<br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: the duplicated session</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_SESSION_dup.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_is_resumable</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Determine\nwhether an <small>SSL_SESSION</small> object can be used for\nresumption.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::SESSION_is_resumable($ses);\n<br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: (integer) 1 if it can or 0 if not</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_SESSION_is_resumable.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_cmp</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Compare two\n<small>SSL_SESSION</small> structures.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_cmp($sesa, $sesb); <br>\n# $sesa - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# $sesb - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: 0 if the two structures are the same</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nNot available in openssl 1.0 or later</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_get_app_data</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Can be used to\nget application defined value/data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_get_app_data($ses); <br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: string/buffer/pointer ???</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_set_app_data</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Can be used to\nset some application defined value/data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_set_app_data($s, $a); <br>\n# $s - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# $a - (string/buffer/pointer ???) data <br>\n# <br>\n# returns: ???</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_get_ex_data</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nretrieve the information for $idx from session $ses.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_get_ex_data($ses, $idx); <br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# $idx - (integer) index for application specific data <br>\n# <br>\n# returns: pointer to ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_set_ex_data</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nstore application data at arg for idx into the session\nobject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_set_ex_data($ss, $idx, $data); <br>\n# $ss - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# $idx - (integer) ??? <br>\n# $data - (pointer) ??? <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_get_ex_new_index</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nregister a new index for application specific data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_get_ex_new_index($argl, $argp,\n$new_func, $dup_func, $free_func); <br>\n# $argl - (long) ??? <br>\n# $argp - (pointer) ??? <br>\n# $new_func - function pointer ??? (CRYPTO_EX_new *) <br>\n# $dup_func - function pointer ??? (CRYPTO_EX_dup *) <br>\n# $free_func - function pointer ??? (CRYPTO_EX_free *) <br>\n# <br>\n# returns: (integer) ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_SESSION_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_get_master_key</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n&rsquo;master_key&rsquo; value from\n<small>SSL_SESSION</small> structure $s</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::SESSION_get_master_key($s);\n<br>\n# $s - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: master key (binary data)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_set_master_key</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets\n&rsquo;master_key&rsquo; value for\n<small>SSL_SESSION</small> structure $s</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::SESSION_set_master_key($s,\n$key); <br>\n# $s - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# $key - master key (binary data) <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Not available\nwith OpenSSL 1.1 and later. Code that previously used <br>\nSESSION_set_master_key must now set $secret in the\nsession_secret <br>\ncallback set with SSL_set_session_secret_cb.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_get_time</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ntime at which the session s was established. The time is\ngiven in seconds since 1.1.1970.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_get_time($s); <br>\n# $s - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: timestamp (seconds since 1.1.1970)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">get_time</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Technically the\nsame functionality as &quot;SESSION_get_time&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_time($s);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_get_timeout</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ntimeout value set for session $s in seconds.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_get_timeout($s); <br>\n# $s - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: timeout (in seconds)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">get_timeout</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Technically the\nsame functionality as &quot;SESSION_get_timeout&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_timeout($s);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_print</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Prints session\ndetails (e.g. protocol version, cipher, session-id ...) to\n<small>BIO.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_print($fp, $ses); <br>\n# $fp - value corresponding to openssl's BIO structure <br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You have to use\nnecessary <small>BIO</small> functions like this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># let us have\n$ssl corresponding to openssl's SSL structure <br>\nmy $ses = Net::SSLeay::get_session($ssl); <br>\nmy $bio = Net::SSLeay::BIO_new(&amp;Net::SSLeay::BIO_s_mem);\n<br>\nNet::SSLeay::SESSION_print($bio, $ses); <br>\nprint Net::SSLeay::BIO_read($bio);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_print_fp</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Prints session\ndetails (e.g. protocol version, cipher, session-id ...) to\nfile handle.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_print_fp($fp, $ses); <br>\n# $fp - perl file handle <br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># let us have\n$ssl corresponding to openssl's SSL structure <br>\nmy $ses = Net::SSLeay::get_session($ssl); <br>\nopen my $fh, &quot;&gt;&quot;, &quot;output.txt&quot;; <br>\nNet::SSLeay::SESSION_print_fp($fh,$ses);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_set_time</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Replaces the\ncreation time of the session s with the chosen value $t\n(seconds since 1.1.1970).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_set_time($ses, $t); <br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# $t - time value <br>\n# <br>\n# returns: 1 on success</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">set_time</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Technically the\nsame functionality as &quot;SESSION_set_time&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_time($ses, $t);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">SESSION_set_timeout</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ntimeout value for session s in seconds to $t.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SESSION_set_timeout($s, $t); <br>\n# $s - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# $t - timeout (in seconds) <br>\n# <br>\n# returns: 1 on success</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_SESSION_get_time.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">set_timeout</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Technically the\nsame functionality as &quot;SESSION_set_timeout&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_timeout($ses, $t);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> SSL_CTX_* related functions</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>NOTE:</small></b>\nPlease note that the function described in this chapter have\n&quot; <small>SSL_&quot;</small> part stripped from their\noriginal openssl names.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">CTX_add_client_CA</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\n<small>CA</small> name extracted from $cacert to the list of\nCAs sent to the client when requesting a client certificate\nfor $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_add_client_CA($ctx, $cacert); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $cacert - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">CTX_add_extra_chain_cert</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\ncertificate $x509 to the certificate chain presented\ntogether with the certificate. Several certificates can be\nadded one after the other.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_add_extra_chain_cert($ctx, $x509); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: 1 on success, check out the error stack to find\nout the reason for failure otherwise</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_add_extra_chain_cert.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_add_session</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\nsession $ses to the context $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_add_session($ctx, $ses); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">CTX_callback_ctrl</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_callback_ctrl($ctx, $cmd, $fp); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $cmd - (integer) command id <br>\n# $fp - (function pointer) ??? <br>\n# <br>\n# returns: ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">CTX_check_private_key</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Checks the\nconsistency of a private key with the corresponding\ncertificate loaded into $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_check_private_key($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">CTX_ctrl</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Internal\nhandling function for <small>SSL_CTX</small> objects.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>BEWARE:</small></b>\nopenssl doc says: This function should never be called\ndirectly!</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_ctrl($ctx, $cmd, $larg, $parg); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $cmd - (integer) command id <br>\n# $larg - (integer) long ??? <br>\n# $parg - (string/pointer) ??? <br>\n# <br>\n# returns: (long) result of given command ??? <br>\n#valid $cmd values <br>\n1 - SSL_CTRL_NEED_TMP_RSA <br>\n2 - SSL_CTRL_SET_TMP_RSA <br>\n3 - SSL_CTRL_SET_TMP_DH <br>\n4 - SSL_CTRL_SET_TMP_ECDH <br>\n5 - SSL_CTRL_SET_TMP_RSA_CB <br>\n6 - SSL_CTRL_SET_TMP_DH_CB <br>\n7 - SSL_CTRL_SET_TMP_ECDH_CB <br>\n8 - SSL_CTRL_GET_SESSION_REUSED <br>\n9 - SSL_CTRL_GET_CLIENT_CERT_REQUEST <br>\n10 - SSL_CTRL_GET_NUM_RENEGOTIATIONS <br>\n11 - SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS <br>\n12 - SSL_CTRL_GET_TOTAL_RENEGOTIATIONS <br>\n13 - SSL_CTRL_GET_FLAGS <br>\n14 - SSL_CTRL_EXTRA_CHAIN_CERT <br>\n15 - SSL_CTRL_SET_MSG_CALLBACK <br>\n16 - SSL_CTRL_SET_MSG_CALLBACK_ARG <br>\n17 - SSL_CTRL_SET_MTU <br>\n20 - SSL_CTRL_SESS_NUMBER <br>\n21 - SSL_CTRL_SESS_CONNECT <br>\n22 - SSL_CTRL_SESS_CONNECT_GOOD <br>\n23 - SSL_CTRL_SESS_CONNECT_RENEGOTIATE <br>\n24 - SSL_CTRL_SESS_ACCEPT <br>\n25 - SSL_CTRL_SESS_ACCEPT_GOOD <br>\n26 - SSL_CTRL_SESS_ACCEPT_RENEGOTIATE <br>\n27 - SSL_CTRL_SESS_HIT <br>\n28 - SSL_CTRL_SESS_CB_HIT <br>\n29 - SSL_CTRL_SESS_MISSES <br>\n30 - SSL_CTRL_SESS_TIMEOUTS <br>\n31 - SSL_CTRL_SESS_CACHE_FULL <br>\n32 - SSL_CTRL_OPTIONS <br>\n33 - SSL_CTRL_MODE <br>\n40 - SSL_CTRL_GET_READ_AHEAD <br>\n41 - SSL_CTRL_SET_READ_AHEAD <br>\n42 - SSL_CTRL_SET_SESS_CACHE_SIZE <br>\n43 - SSL_CTRL_GET_SESS_CACHE_SIZE <br>\n44 - SSL_CTRL_SET_SESS_CACHE_MODE <br>\n45 - SSL_CTRL_GET_SESS_CACHE_MODE <br>\n50 - SSL_CTRL_GET_MAX_CERT_LIST <br>\n51 - SSL_CTRL_SET_MAX_CERT_LIST <br>\n52 - SSL_CTRL_SET_MAX_SEND_FRAGMENT <br>\n53 - SSL_CTRL_SET_TLSEXT_SERVERNAME_CB <br>\n54 - SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG <br>\n55 - SSL_CTRL_SET_TLSEXT_HOSTNAME <br>\n56 - SSL_CTRL_SET_TLSEXT_DEBUG_CB <br>\n57 - SSL_CTRL_SET_TLSEXT_DEBUG_ARG <br>\n58 - SSL_CTRL_GET_TLSEXT_TICKET_KEYS <br>\n59 - SSL_CTRL_SET_TLSEXT_TICKET_KEYS <br>\n60 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT <br>\n61 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB <br>\n62 - SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG <br>\n63 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB <br>\n64 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG <br>\n65 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE <br>\n66 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS <br>\n67 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS <br>\n68 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS <br>\n69 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS <br>\n70 - SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP <br>\n71 - SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP <br>\n72 - SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB <br>\n73 - DTLS_CTRL_GET_TIMEOUT <br>\n74 - DTLS_CTRL_HANDLE_TIMEOUT <br>\n75 - DTLS_CTRL_LISTEN <br>\n76 - SSL_CTRL_GET_RI_SUPPORT <br>\n77 - SSL_CTRL_CLEAR_OPTIONS <br>\n78 - SSL_CTRL_CLEAR_MODE <br>\n82 - SSL_CTRL_GET_EXTRA_CHAIN_CERTS <br>\n83 - SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS <br>\n88 - SSL_CTRL_CHAIN <br>\n89 - SSL_CTRL_CHAIN_CERT <br>\n90 - SSL_CTRL_GET_CURVES <br>\n91 - SSL_CTRL_SET_CURVES <br>\n92 - SSL_CTRL_SET_CURVES_LIST <br>\n93 - SSL_CTRL_GET_SHARED_CURVE <br>\n94 - SSL_CTRL_SET_ECDH_AUTO <br>\n97 - SSL_CTRL_SET_SIGALGS <br>\n98 - SSL_CTRL_SET_SIGALGS_LIST <br>\n99 - SSL_CTRL_CERT_FLAGS <br>\n100 - SSL_CTRL_CLEAR_CERT_FLAGS <br>\n101 - SSL_CTRL_SET_CLIENT_SIGALGS <br>\n102 - SSL_CTRL_SET_CLIENT_SIGALGS_LIST <br>\n103 - SSL_CTRL_GET_CLIENT_CERT_TYPES <br>\n104 - SSL_CTRL_SET_CLIENT_CERT_TYPES <br>\n105 - SSL_CTRL_BUILD_CERT_CHAIN <br>\n106 - SSL_CTRL_SET_VERIFY_CERT_STORE <br>\n107 - SSL_CTRL_SET_CHAIN_CERT_STORE <br>\n108 - SSL_CTRL_GET_PEER_SIGNATURE_NID <br>\n109 - SSL_CTRL_GET_SERVER_TMP_KEY <br>\n110 - SSL_CTRL_GET_RAW_CIPHERLIST <br>\n111 - SSL_CTRL_GET_EC_POINT_FORMATS <br>\n112 - SSL_CTRL_GET_TLSA_RECORD <br>\n113 - SSL_CTRL_SET_TLSA_RECORD <br>\n114 - SSL_CTRL_PULL_TLSA_RECORD</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CTX_flush_sessions</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Causes a run\nthrough the session cache of $ctx to remove sessions expired\nat time $tm.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_flush_sessions($ctx,\n$tm); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $tm - specifies the time which should be used for the\nexpiration test (seconds since 1.1.1970) <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_flush_sessions.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">CTX_free</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Free an\nallocated <small>SSL_CTX</small> object.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_free($ctx);\n<br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_free.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_app_data</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Can be used to\nget application defined value/data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_app_data($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: string/buffer/pointer ???</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_app_data</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Can be used to\nset some application defined value/data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_app_data($ctx, $arg); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $arg - (string/buffer/pointer ???) data <br>\n# <br>\n# returns: ???</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get0_param</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncurrent verification parameters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $vpm =\nNet::SSLeay::CTX_get0_param($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: value corresponding to openssl's\nX509_VERIFY_PARAM structure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_CTX_get0_param.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_cert_store</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncurrent certificate verification storage.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_cert_store($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: value corresponding to openssl's X509_STORE\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_client_CA_list</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nlist of client CAs explicitly set for $ctx using\n&quot;CTX_set_client_CA_list&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_client_CA_list($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: value corresponding to openssl's X509_NAME_STACK\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_ex_data</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nretrieve the information for index $idx from $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_ex_data($ssl, $idx); <br>\n# $ssl - value corresponding to openssl's SSL_CTX structure\n<br>\n# $idx - (integer) index for application specific data <br>\n# <br>\n# returns: pointer to ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_ex_new_index</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nregister a new index for application specific data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_ex_new_index($argl, $argp, $new_func,\n$dup_func, $free_func); <br>\n# $argl - (long) ??? <br>\n# $argp - (pointer) ??? <br>\n# $new_func - function pointer ??? (CRYPTO_EX_new *) <br>\n# $dup_func - function pointer ??? (CRYPTO_EX_dup *) <br>\n# $free_func - function pointer ??? (CRYPTO_EX_free *) <br>\n# <br>\n# returns: (integer) ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_mode</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nmode set for ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_mode($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: mode (bitmask) <br>\n#to decode the return value (bitmask) use: <br>\n0x00000001 corresponds to SSL_MODE_ENABLE_PARTIAL_WRITE <br>\n0x00000002 corresponds to\nSSL_MODE_ACCEPT_MOVING_WRITE_BUFFER <br>\n0x00000004 corresponds to SSL_MODE_AUTO_RETRY <br>\n0x00000008 corresponds to SSL_MODE_NO_AUTO_CHAIN <br>\n0x00000010 corresponds to SSL_MODE_RELEASE_BUFFERS <br>\n(note: some of the bits might not be supported by older\nopenssl versions)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_mode</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the mode\nset via bitmask in $mode to $ctx. Options already set before\nare not cleared.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_mode($ctx, $mode); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $mode - mode bitmask <br>\n# <br>\n# returns: the new mode bitmask after adding $mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For bitmask\ndetails see &quot;CTX_get_mode&quot; (above).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_options</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\noptions (bitmask) set for $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_options($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: options (bitmask)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>BEWARE:</small></b>\nThe available constants and their values in bitmask depend\non the <small>TLS</small> library. For example,\nSSL_OP_NO_TLSv1_3 became available much later than\n<small>SSL_OP_NO_COMPRESS</small> which is already\ndeprecated by some libraries. Also, some previously used\noption values have been recycled and are now used for newer\noptions. See the list of constants in this document for\noptions Net::SSLeay currently supports.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You are\nstrongly encouraged to <b>check your <small>TLS</small>\nlibrary</b> if you need to use numeric values directly. The\nfollowing is a sample of historic values. It may not be\ncorrect anymore.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#to decode the\nreturn value (bitmask) use: <br>\n0x00000004 corresponds to SSL_OP_LEGACY_SERVER_CONNECT <br>\n0x00000800 corresponds to SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n<br>\n0x00004000 corresponds to SSL_OP_NO_TICKET <br>\n0x00010000 corresponds to\nSSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION <br>\n0x00400000 corresponds to SSL_OP_CIPHER_SERVER_PREFERENCE\n<br>\n0x04000000 corresponds to SSL_OP_NO_TLSv1</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_options.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_options</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\noptions set via bitmask in $options to ctx. Options already\nset before are not cleared.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_options($ctx,\n$options); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $options - options bitmask <br>\n# <br>\n# returns: the new options bitmask after adding $options</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For bitmask\ndetails see &quot;CTX_get_options&quot; (above).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_options.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_quiet_shutdown</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\n&rsquo;quiet shutdown&rsquo; setting of $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_quiet_shutdown($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: (integer) the current setting</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_read_ahead</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_read_ahead($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: (integer) read_ahead value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_session_cache_mode</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncurrently used cache mode (bitmask).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_session_cache_mode($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: mode (bitmask)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>BEWARE:</small></b>\n<small>SESS_CACHE_OFF</small> and other constants are not\navailable in Net-SSLeay-1.82 and before. If the constants\nare not available, the following values have historically\nbeen correct. You are strongly encouraged to <b>check your\n<small>TLS</small> library</b> for the current values.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#to decode the\nreturn value (bitmask) use: <br>\n0x0000 corresponds to SSL_SESS_CACHE_OFF <br>\n0x0001 corresponds to SSL_SESS_CACHE_CLIENT <br>\n0x0002 corresponds to SSL_SESS_CACHE_SERVER <br>\n0x0080 corresponds to SSL_SESS_CACHE_NO_AUTO_CLEAR <br>\n0x0100 corresponds to SSL_SESS_CACHE_NO_INTERNAL_LOOKUP <br>\n0x0200 corresponds to SSL_SESS_CACHE_NO_INTERNAL_STORE <br>\n(note: some of the bits might not be supported by older\nopenssl versions)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_session_cache_mode</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Enables/disables\nsession caching by setting the operational mode for $ctx to\n$mode.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_session_cache_mode($ctx, $mode); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $mode - mode (bitmask) <br>\n# <br>\n# returns: previously set cache mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For bitmask\ndetails see &quot;CTX_get_session_cache_mode&quot;\n(above).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_session_cache_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_timeout</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncurrently set timeout value for $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_timeout($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: timeout in seconds</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_verify_depth</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nverification depth limit currently set in $ctx. If no limit\nhas been explicitly set, -1 is returned and the default\nvalue will be used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_verify_depth($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: depth limit currently set in $ctx, -1 if no limit\nhas been explicitly set</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_verify_mode</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nverification mode (bitmask) currently set in $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_get_verify_mode($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: mode (bitmask)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For bitmask\ndetails see &quot;CTX_set_verify&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_verify_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_verify</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nverification flags for $ctx to be $mode and specifies the\nverify_callback function to be used.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_verify($ctx,\n$mode, $callback); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $mode - mode (bitmask), see OpenSSL manual <br>\n# $callback - [optional] reference to perl callback function\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_verify.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_post_handshake_auth</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Enable the\nPost-Handshake Authentication extension to be added to the\nClientHello such that post-handshake authentication can be\nrequested by the server.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_posthandshake_auth($ctx,\n$val); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $val - 0 then the extension is not sent, otherwise it is\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\nhttps://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_post_handshake_auth\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_post_handshake_auth.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">CTX_load_verify_locations</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Specifies the\nlocations for $ctx, at which <small>CA</small> certificates\nfor verification purposes are located. The certificates\navailable via $CAfile and $CApath are trusted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_load_verify_locations($ctx, $CAfile,\n$CApath); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $CAfile - (string) file of CA certificates in PEM format,\nthe file can contain several CA certificates (or '') <br>\n# $CApath - (string) directory containing CA certificates in\nPEM format (or '') <br>\n# <br>\n# returns: 1 on success, 0 on failure (check the error stack\nto find out the reason)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">CTX_need_tmp_RSA</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return the\nresult of\n&quot;SSL_CTX_ctrl(ctx,SSL_CTRL_NEED_TMP_RSA,0,NULL)&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_need_tmp_RSA($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: result of SSL_CTRL_NEED_TMP_RSA command</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Not available\nwith OpenSSL 1.1 and later.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">CTX_new</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The same as\n&quot;CTX_v23_new&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_new(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_new.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Not available\nwith OpenSSL 1.1 and later.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">CTX_v2_new</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL_CTX</small> object - based on\n<b>SSLv2_method()</b> - as framework to establish\n<small>TLS/SSL</small> enabled connections.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_v2_new(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">CTX_v23_new</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL_CTX</small> object - based on\n<b>SSLv23_method()</b> - as framework to establish\n<small>TLS/SSL</small> enabled connections.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_v23_new(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">CTX_v3_new</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL_CTX</small> object - based on\n<b>SSLv3_method()</b> - as framework to establish\n<small>TLS/SSL</small> enabled connections.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_v3_new(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">CTX_tlsv1_new</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL_CTX</small> object - based on\n<b>TLSv1_method()</b> - as framework to establish\n<small>TLS/SSL</small> enabled connections.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_tlsv1_new(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_tlsv1_1_new</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL_CTX</small> object - based on\n<b>TLSv1_1_method()</b> - as framework to establish\n<small>TLS/SSL</small> enabled connections. Only available\nwhere supported by the underlying openssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_tlsv1_1_new(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_tlsv1_2_new</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL_CTX</small> object - based on\n<b>TLSv1_2_method()</b> - as framework to establish\n<small>TLS/SSL</small> enabled connections. Only available\nwhere supported by the underlying openssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_tlsv1_2_new(); <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_new_with_method</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL_CTX</small> object based on $meth method</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_new_with_method($meth); <br>\n# $meth - value corresponding to openssl's SSL_METHOD\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure) <br>\n#example <br>\nmy $ctx =\nNet::SSLeay::CTX_new_with_method(&amp;Net::SSLeay::TLSv1_method);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"81%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_min_proto_version,\nCTX_set_max_proto_version, set_min_proto_version and\nset_max_proto_version,</p> </td>\n<td width=\"2%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.1.0-pre2 or LibreSSL 2.6.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set the minimum\nand maximum supported protocol for $ctx or $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_min_proto_version($ctx, $version) <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $version - (integer) constat version value or 0 for\nautomatic lowest or highest value <br>\n# <br>\n# returns: 1 on success, 0 on failure <br>\n#example: allow only TLS 1.2 for a SSL_CTX <br>\nmy $rv_min = Net::SSLeay::CTX_set_min_proto_version($ctx,\nNet::SSLeay::TLS1_2_VERSION()); <br>\nmy $rv_max = Net::SSLeay::CTX_set_max_proto_version($ctx,\nNet::SSLeay::TLS1_2_VERSION()); <br>\n#example: allow only TLS 1.1 for a SSL <br>\nmy $rv_min = Net::SSLeay::set_min_proto_version($ssl,\nNet::SSLeay::TLS1_1_VERSION()); <br>\nmy $rv_max = Net::SSLeay::set_max_proto_version($ssl,\nNet::SSLeay::TLS1_1_VERSION());</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_min_proto_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"81%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_min_proto_version,\nCTX_get_max_proto_version, get_min_proto_version and\nget_max_proto_version,</p> </td>\n<td width=\"2%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.1.0g</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get the minimum\nand maximum supported protocol for $ctx or $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $version =\nNet::SSLeay::CTX_get_min_proto_version($ctx) <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: 0 automatic lowest or highest value, configured\nvalue otherwise</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_min_proto_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CTX_remove_session</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Removes the\nsession $ses from the context $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_remove_session($ctx, $ses); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_add_session.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_accept</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_accept($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of started SSL/TLS handshakes in server\nmode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_accept_good</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_accept_good($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of successfully established SSL/TLS\nsessions in server mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_accept_renegotiate</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_accept_renegotiate($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of start renegotiations in server mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_cache_full</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_cache_full($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of sessions that were removed because the\nmaximum session cache size was exceeded</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_cb_hits</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_cb_hits($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of successfully retrieved sessions from\nthe external session cache in server mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_connect</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_connect($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of started SSL/TLS handshakes in client\nmode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_connect_good</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_connect_good($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of successfully established SSL/TLS\nsessions in client mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_sess_connect_renegotiate</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_connect_renegotiate($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of start renegotiations in client mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_get_cache_size</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncurrently valid session cache size.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_get_cache_size($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: current size</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_hits</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_hits($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of successfully reused sessions</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_misses</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_misses($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of sessions proposed by clients that were\nnot found in the internal session cache in server mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_number</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_number($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: current number of sessions in the internal\nsession cache</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_set_cache_size</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the size\nof the internal session cache of context $ctx to $size.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_sess_set_cache_size($ctx,\n$size); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $size - cache size (0 = unlimited) <br>\n# <br>\n# returns: previously valid size</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_set_cache_size.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_timeouts</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nnumber of sessions proposed by clients and either found in\nthe internal or external session cache in server mode, but\nthat were invalid due to timeout. These sessions are not\nincluded in the SSL_CTX_sess_hits count.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sess_timeouts($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: number of sessions</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_set_new_cb</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function, which is automatically called whenever a\nnew session was negotiated.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_sess_set_new_cb($ctx,\n$func); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $func - perl reference to callback function <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_set_new_cb.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sess_set_remove_cb</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function, which is automatically called whenever a\nsession is removed by the <small>SSL</small> engine.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_sess_set_remove_cb($ctx,\n$func); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $func - perl reference to callback function <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_sess_set_remove_cb.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">CTX_sessions</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\npointer to the lhash databases containing the internal\nsession cache for ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_sessions($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: value corresponding to openssl's LHASH structure\n(0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_sessions.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set1_param</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nrequires at least OpenSSL 1.0.0-beta3</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Applies X509\nverification parameters $vpm on $ctx</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set1_param($ctx, $vpm); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $vpm - value corresponding to openssl's X509_VERIFY_PARAM\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_CTX_get0_param.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_cert_store</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets/replaces\nthe certificate verification storage of $ctx to/with\n$store.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_cert_store($ctx,\n$store); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $store - value corresponding to openssl's X509_STORE\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_store.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_set_cert_verify_callback</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nverification callback function for $ctx. <small>SSL</small>\nobjects that are created from $ctx inherit the setting valid\nat the time when &quot;Net::SSLeay::new($ctx)&quot; is\ncalled.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_cert_verify_callback($ctx,\n$func, $data); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $func - perl reference to callback function <br>\n# $data - [optional] data that will be passed to callback\nfunction when invoked <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_cert_verify_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_cipher_list</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the list\nof available ciphers for $ctx using the control string $str.\nThe list of ciphers is inherited by all ssl objects created\nfrom $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_cipher_list($s, $str); <br>\n# $s - value corresponding to openssl's SSL_CTX structure\n<br>\n# $str - (string) cipher list e.g. '3DES:+RSA' <br>\n# <br>\n# returns: 1 if any cipher could be selected and 0 on\ncomplete failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The format of\n$str is described in\n&lt;https://www.openssl.org/docs/manmaster/man1/openssl-ciphers.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_cipher_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_ciphersuites</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Configure the\navailable TLSv1.3 ciphersuites.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_ciphersuites($ctx, $str); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $str - colon (&quot;:&quot;) separated list of TLSv1.3\nciphersuite names in order of preference <br>\n# <br>\n# returns: (integer) 1 if the requested ciphersuite list was\nconfigured, and 0 otherwise</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_ciphersuites.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_client_CA_list</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the list\nof CAs sent to the client when requesting a client\ncertificate for $ctx.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_client_CA_list($ctx,\n$list); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $list - value corresponding to openssl's X509_NAME_STACK\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_default_passwd_cb</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ndefault password callback called when loading/storing a\n<small>PEM</small> certificate with encryption.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_default_passwd_cb($ctx,\n$func); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $func - perl reference to callback function <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"52%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_set_default_passwd_cb_userdata</p> </td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets a pointer\nto userdata which will be provided to the password callback\non invocation.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_default_passwd_cb_userdata($ctx,\n$userdata); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $userdata - data that will be passed to callback function\nwhen invoked <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_set_default_verify_paths</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_default_verify_paths($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_ex_data</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nstore application data at $data for $idx into the $ctx\nobject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_ex_data($ssl, $idx, $data); <br>\n# $ssl - value corresponding to openssl's SSL_CTX structure\n<br>\n# $idx - (integer) ??? <br>\n# $data - (pointer) ??? <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_purpose</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_purpose($s, $purpose); <br>\n# $s - value corresponding to openssl's SSL_CTX structure\n<br>\n# $purpose - (integer) purpose identifier <br>\n# <br>\n# returns: 1 on success, 0 on failure <br>\n#avainable purpose identifier <br>\n1 - X509_PURPOSE_SSL_CLIENT <br>\n2 - X509_PURPOSE_SSL_SERVER <br>\n3 - X509_PURPOSE_NS_SSL_SERVER <br>\n4 - X509_PURPOSE_SMIME_SIGN <br>\n5 - X509_PURPOSE_SMIME_ENCRYPT <br>\n6 - X509_PURPOSE_CRL_SIGN <br>\n7 - X509_PURPOSE_ANY <br>\n8 - X509_PURPOSE_OCSP_HELPER <br>\n9 - X509_PURPOSE_TIMESTAMP_SIGN <br>\n#or use corresponding constants <br>\n$purpose = &amp;Net::SSLeay::X509_PURPOSE_SSL_CLIENT; <br>\n... <br>\n$purpose =\n&amp;Net::SSLeay::X509_PURPOSE_TIMESTAMP_SIGN;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_quiet_shutdown</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\n&rsquo;quiet shutdown&rsquo; flag for $ctx to be mode.\n<small>SSL</small> objects created from $ctx inherit the\nmode valid at the time &quot;Net::SSLeay::new($ctx)&quot; is\ncalled.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_quiet_shutdown($ctx,\n$mode); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $mode - 0 or 1 <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_read_ahead</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_read_ahead($ctx, $val); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $val - read_ahead value to be set <br>\n# <br>\n# returns: the original read_ahead value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_session_id_context</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncontext $sid_ctx of length $sid_ctx_len within which a\nsession can be reused for the $ctx object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_session_id_context($ctx, $sid_ctx,\n$sid_ctx_len); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $sid_ctx - data buffer <br>\n# $sid_ctx_len - length of data in $sid_ctx <br>\n# <br>\n# returns: 1 on success, 0 on failure (the error is logged\nto the error stack)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_ssl_version</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets a new\ndefault <small>TLS/SSL</small> method for <small>SSL</small>\nobjects newly created from this $ctx. <small>SSL</small>\nobjects already created with\n&quot;Net::SSLeay::new($ctx)&quot; are not affected, except\nwhen &quot;Net::SSLeay:clear($ssl)&quot; is being\ncalled.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_ssl_version($ctx, $meth); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $meth - value corresponding to openssl's SSL_METHOD\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_timeout</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ntimeout for newly created sessions for $ctx to $t. The\ntimeout value $t must be given in seconds.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_timeout($ctx, $t); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $t - timeout in seconds <br>\n# <br>\n# returns: previously set timeout value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_timeout.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_tmp_dh</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets\n<small>DH</small> parameters to be used to be $dh. The key\nis inherited by all ssl objects created from $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_tmp_dh($ctx, $dh); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $dh - value corresponding to openssl's DH structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_tmp_dh_callback</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function for $ctx to be used when a\n<small>DH</small> parameters are required to\n$tmp_dh_callback.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_tmp_dh_callback($ctx,\n$tmp_dh_callback); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# tmp_dh_callback - (function pointer) ??? <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_tmp_rsa</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ntemporary/ephemeral <small>RSA</small> key to be used to be\n$rsa.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_tmp_rsa($ctx, $rsa); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $rsa - value corresponding to openssl's RSA structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Not available\nwith OpenSSL 1.1 and later.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_tmp_rsa_callback</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function for ctx to be used when a\ntemporary/ephemeral <small>RSA</small> key is required to\n$tmp_rsa_callback.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (does this\nfunction really work?)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_tmp_rsa_callback($ctx,\n$tmp_rsa_callback); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $tmp_rsa_callback - (function pointer) ??? <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Not available\nwith OpenSSL 1.1 and later.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_trust</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_trust($s, $trust); <br>\n# $s - value corresponding to openssl's SSL_CTX structure\n<br>\n# $trust - (integer) trust identifier <br>\n# <br>\n# returns: the original value <br>\n#available trust identifiers <br>\n1 - X509_TRUST_COMPAT <br>\n2 - X509_TRUST_SSL_CLIENT <br>\n3 - X509_TRUST_SSL_SERVER <br>\n4 - X509_TRUST_EMAIL <br>\n5 - X509_TRUST_OBJECT_SIGN <br>\n6 - X509_TRUST_OCSP_SIGN <br>\n7 - X509_TRUST_OCSP_REQUEST <br>\n8 - X509_TRUST_TSA <br>\n#or use corresponding constants <br>\n$trust = &amp;Net::SSLeay::X509_TRUST_COMPAT; <br>\n... <br>\n$trust = &amp;Net::SSLeay::X509_TRUST_TSA;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_verify_depth</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nmaximum depth for the certificate chain verification that\nshall be allowed for ctx.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_verify_depth($ctx,\n$depth); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $depth - max. depth <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_use_PKCS12_file</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\ncertificate and private key from <small>PKCS12</small> file\n$p12filename to $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_use_PKCS12_file($ctx, $p12filename,\n$password); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $p12filename - (string) filename <br>\n# $password - (string) password to decrypt private key <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CTX_use_PrivateKey</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\nprivate key $pkey to $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_use_PrivateKey($ctx, $pkey); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">CTX_use_PrivateKey_file</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the first\nprivate key found in $file to $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_use_PrivateKey_file($ctx, $file, $type);\n<br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">CTX_use_RSAPrivateKey</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\n<small>RSA</small> private key $rsa to $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_use_RSAPrivateKey($ctx, $rsa); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $rsa - value corresponding to openssl's RSA structure <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">CTX_use_RSAPrivateKey_file</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the first\n<small>RSA</small> private key found in $file to $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_use_RSAPrivateKey_file($ctx, $file, $type);\n<br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_use_certificate</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads the\ncertificate $x into $ctx</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_use_certificate($ctx, $x); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"46%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_use_certificate_chain_file</p> </td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads a\ncertificate chain from $file into $ctx. The certificates\nmust be in <small>PEM</small> format and must be sorted\nstarting with the subject&rsquo;s certificate (actual client\nor server certificate), followed by intermediate\n<small>CA</small> certificates if applicable, and ending at\nthe highest level (root) <small>CA.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_use_certificate_chain_file($ctx, $file);\n<br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $file - (string) file name <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">CTX_use_certificate_file</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads the first\ncertificate stored in $file into $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_use_certificate_file($ctx, $file, $type);\n<br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_security_level</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.0, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nsecurity level associated with $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $level =\nNet::SSLeay::CTX_get_security_level($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: (integer) current security level</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_security_level.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_security_level</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.0, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nsecurity level associated with $ctx to $level.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_security_level($ctx,\n$level); <br>\n# $ssl - value corresponding to openssl's SSL_CTX structure\n<br>\n# $level - new security level <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_security_level.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_num_tickets</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set number of\nTLSv1.3 session tickets that will be sent to a client.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CTX_set_num_tickets($ctx, $number_of_tickets);\n<br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $number_of_tickets - number of tickets to send <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set to zero if\nyou do not no want to support a session resumption.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_num_tickets.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_num_tickets</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get number of\nTLSv1.3 session tickets that will be sent to a client.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$number_of_tickets = Net::SSLeay::CTX_get_num_tickets($ctx);\n<br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: (integer) number of tickets to send</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_num_tickets.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_keylog_callback</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.90 and before; requires at\nleast OpenSSL 1.1.1pre1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set the\n<small>TLS</small> key logging callback.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_keylog_callback($ctx,\n$cb); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $cb - reference to a perl callback function <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback\nfunction will be called like this:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">keylog_cb_func($ssl,\n$line); <br>\n# $ssl - value corresponding to OpenSSL's SSL object\nassociated with the connection <br>\n# $line - a string containing the key material in the format\nused by NSS for its SSLKEYLOGFILE debugging output</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_keylog_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">CTX_get_keylog_callback</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.90 and before; requires at\nleast OpenSSL 1.1.1pre1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieve the\npreviously set <small>TLS</small> key logging callback.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $cb =\nNet::SSLeay::CTX_get_keylog_callback($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: a reference to a perl callback function or undef\nif no callback is set</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_CTX_get_keylog_callback.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> SSL_* related functions</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>NOTE:</small></b>\nPlease note that the function described in this chapter have\n&quot; <small>SSL_&quot;</small> part stripped from their\noriginal openssl names.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\">new</p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>SSL</small> structure which is needed to hold the\ndata for a <small>TLS/SSL</small> connection. The new\nstructure inherits the settings of the underlying context\n$ctx: connection method (SSLv2/v3/TLSv1), options,\nverification settings, timeout settings.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::new($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: value corresponding to openssl's SSL structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc &lt;http://www.openssl.org/docs/ssl/SSL_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\">accept</p></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Waits for a\n<small>TLS/SSL</small> client to initiate the\n<small>TLS/SSL</small> handshake. The communication channel\nmust already have been set and assigned to the ssl by\nsetting an underlying <small>BIO.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::accept($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 1 = success, 0 = handshake not successful, &lt;0\n= fatal error during handshake</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_accept.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">add_client_CA</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\n<small>CA</small> name extracted from cacert to the list of\nCAs sent to the client when requesting a client certificate\nfor the chosen ssl, overriding the setting valid for\nssl&rsquo;s <small>SSL_CTX</small> object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::add_client_CA($ssl, $x); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">callback_ctrl</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::callback_ctrl($ssl, $cmd, $fp); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $cmd - (integer) command id <br>\n# $fp - (function pointer) ??? <br>\n# <br>\n# returns: ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">check_private_key</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Checks the\nconsistency of a private key with the corresponding\ncertificate loaded into $ssl</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::check_private_key($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"8%\">\n\n\n<p style=\"margin-top: 1em\">clear</p></td>\n<td width=\"75%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Reset\n<small>SSL</small> object to allow another connection.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::clear($ssl);\n<br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_clear.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">connect</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Initiate the\n<small>TLS/SSL</small> handshake with an\n<small>TLS/SSL</small> server.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::connect($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 1 = success, 0 = handshake not successful, &lt;0\n= fatal error during handshake</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_connect.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">copy_session_id</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Copies the\nsession structure fro $from to $to (+ also the private key\nand certificate associated with $from).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::copy_session_id($to,\n$from); <br>\n# $to - value corresponding to openssl's SSL structure <br>\n# $from - value corresponding to openssl's SSL structure\n<br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">ctrl</p></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Internal\nhandling function for <small>SSL</small> objects.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>BEWARE:</small></b>\nopenssl doc says: This function should never be called\ndirectly!</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ctrl($ssl, $cmd, $larg, $parg); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $cmd - (integer) command id <br>\n# $larg - (integer) long ??? <br>\n# $parg - (string/pointer) ??? <br>\n# <br>\n# returns: (long) result of given command ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about valid $cmd values check\n&quot;CTX_ctrl&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_ctrl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">do_handshake</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Will wait for a\n<small>SSL/TLS</small> handshake to take place. If the\nconnection is in client mode, the handshake will be started.\nThe handshake routines may have to be explicitly set in\nadvance using either SSL_set_connect_state or\n<a href=\"https://man.page/3/SSL_set_accept_state\">SSL_set_accept_state(3)</a>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::do_handshake($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 1 = success, 0 = handshake not successful, &lt;0\n= fatal error during handshake</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_do_handshake.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\">dup</p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nduplicate of $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::dup($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's SSL structure (0\non failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">free</p></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Free an\nallocated <small>SSL</small> structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::free($ssl);\n<br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_free.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">get0_param</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncurrent verification parameters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $vpm =\nNet::SSLeay::get0_param($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's\nX509_VERIFY_PARAM structure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_CTX_get0_param.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">get_SSL_CTX</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\npointer to the <small>SSL_CTX</small> object, from which\n$ssl was created with Net::SSLeay::new.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_SSL_CTX($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CTX\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_SSL_CTX.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">set_SSL_CTX</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nrequires at least OpenSSL 0.9.8f</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\n<small>SSL_CTX</small> the corresponds to an\n<small>SSL</small> session.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $the_ssl_ctx\n= Net::SSLeay::set_SSL_CTX($ssl, $ssl_ctx); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $ssl_ctx - Change the ssl object to the given ssl_ctx <br>\n# <br>\n# returns - the ssl_ctx</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">get_app_data</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Can be used to\nget application defined value/data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_app_data($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: string/buffer/pointer ???</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">set_app_data</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Can be used to\nset some application defined value/data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_app_data($ssl, $arg); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $arg - (string/buffer/pointer ???) data <br>\n# <br>\n# returns: ???</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">get_certificate</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Gets X509\ncertificate from an established <small>SSL</small>\nconnection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_certificate($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's X509 structure\n(0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">get_cipher</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Obtains the\nname of the currently used cipher.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_cipher($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (string) cipher name e.g. 'DHE-RSA-AES256-SHA' or\n'', when no session has been established.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">get_cipher_bits</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Obtain the\nnumber of secret/algorithm bits used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_cipher_bits($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: number of secret bits used by current cipher</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html&gt;\nand\n&lt;http://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">get_ciphers</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.88 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a list\nof <small>SSL_CIPHER</small> structures available for $ssl\nsorted by preference</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @ciphers =\nNet::SSLeay::get_ciphers($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (list) SSL_CIPHER structures or nothing when $ssl\nis undefined or no ciphers are available</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @ciphers =\nNet::SSLeay::get_ciphers($ssl); <br>\nforeach my $c (@ciphers) { <br>\nprint Net::SSLeay::CIPHER_get_name($c) . &quot;\\n&quot;;\n<br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_get_ciphers.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">get_cipher_list</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nname (string) of the <small>SSL_CIPHER</small> listed for\n$ssl with priority $n.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_cipher_list($ssl, $n); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $n - (integer) priority <br>\n# <br>\n# returns: (string) cipher name e.g. 'EDH-DSS-DES-CBC3-SHA'\nor undef in case of error</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Call\nNet::SSLeay::get_cipher_list with priority starting from 0\nto obtain the sorted list of available ciphers, until undef\nis returned:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $priority =\n0; <br>\nwhile (my $c = Net::SSLeay::get_cipher_list($ssl,\n$priority)) { <br>\nprint &quot;cipher[$priority] = $c\\n&quot;; <br>\n$priority++; <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_get_cipher_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">get_client_CA_list</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nlist of client CAs explicitly set for $ssl using\n&quot;Net::SSleay::set_client_CA_list&quot; or $ssl&rsquo;s\n<small>SSL_CTX</small> object with\n&quot;Net::SSLeay::CTX_set_client_CA_list&quot;, when in\nserver mode.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In client mode,\nreturns the list of client CAs sent from the server, if\nany.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_client_CA_list($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's\nSTACK_OF(X509_NAME) structure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_client_CA_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">get_current_cipher</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncipher actually used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_current_cipher($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's SSL_CIPHER\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_current_cipher.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">get_default_timeout</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ndefault timeout value assigned to <small>SSL_SESSION</small>\nobjects negotiated for the protocol valid for $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_default_timeout($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (long) timeout in seconds</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_default_timeout.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">get_error</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nresult code for a preceding call to &quot;connect&quot;,\n&quot;accept&quot;, &quot;do_handshake&quot;,\n&quot;read&quot;, &quot;peek&quot; or &quot;write&quot; on\n$ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_error($ssl, $ret); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $ret - return value of preceding TLS/SSL I/O operation\n<br>\n# <br>\n# returns: result code, which is one of the following\nvalues: <br>\n# 0 - SSL_ERROR_NONE <br>\n# 1 - SSL_ERROR_SSL <br>\n# 2 - SSL_ERROR_WANT_READ <br>\n# 3 - SSL_ERROR_WANT_WRITE <br>\n# 4 - SSL_ERROR_WANT_X509_LOOKUP <br>\n# 5 - SSL_ERROR_SYSCALL <br>\n# 6 - SSL_ERROR_ZERO_RETURN <br>\n# 7 - SSL_ERROR_WANT_CONNECT <br>\n# 8 - SSL_ERROR_WANT_ACCEPT</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">get_ex_data</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nretrieve the information for $idx from $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_ex_data($ssl, $idx); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $idx - (integer) index for application specific data <br>\n# <br>\n# returns: pointer to ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">set_ex_data</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nstore application data at $data for $idx into the $ssl\nobject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_ex_data($ssl, $idx, $data); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $idx - (integer) ??? <br>\n# $data - (pointer) ??? <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">get_ex_new_index</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nregister a new index for application specific data.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_ex_new_index($argl, $argp, $new_func,\n$dup_func, $free_func); <br>\n# $argl - (long) ??? <br>\n# $argp - (pointer) ??? <br>\n# $new_func - function pointer ??? (CRYPTO_EX_new *) <br>\n# $dup_func - function pointer ??? (CRYPTO_EX_dup *) <br>\n# $free_func - function pointer ??? (CRYPTO_EX_free *) <br>\n# <br>\n# returns: (integer) ???</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_ex_new_index.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\">get_fd</p></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nfile descriptor which is linked to $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_fd($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: file descriptor (&gt;=0) or -1 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_fd.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">get_finished</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Obtains the\nlatest &rsquo;Finished&rsquo; message sent to the peer.\nReturn value is zero if there&rsquo;s been no Finished\nmessage yet. Default count is 2*EVP_MAX_MD_SIZE that is long\nenough for all possible Finish messages. If you supply a\nnon-default count, the resulting return value may be longer\nthan returned buf&rsquo;s length.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_finished($ssl, $buf, $count); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $buf - buffer where the returned data will be stored <br>\n# $count - [optional] max size of return data - default is\n2*EVP_MAX_MD_SIZE <br>\n# <br>\n# returns: length of latest Finished message</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">get_peer_finished</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Obtains the\nlatest &rsquo;Finished&rsquo; message expected from the\npeer. Parameters and return value are similar to\n<b>get_finished()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_peer_finished($ssl, $buf, $count); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $buf - buffer where the returned data will be stored <br>\n# $count - [optional] max size of return data - default is\n2*EVP_MAX_MD_SIZE <br>\n# <br>\n# returns: length of latest Finished message</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">get_keyblock_size</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Gets the length\nof the <small>TLS</small> keyblock.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_keyblock_size($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: keyblock size, -1 on error</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">get_mode</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nmode (bitmask) set for $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_mode($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: mode (bitmask)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To decode the\nreturn value (bitmask) see documentation for\n&quot;CTX_get_mode&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">set_mode</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the mode\nset via bitmask in $mode to $ssl. Options already set before\nare not cleared.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_mode($ssl, $mode); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $mode - mode (bitmask) <br>\n# <br>\n# returns: the new mode bitmask after adding $mode</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For $mode\nbitmask details see &quot;CTX_get_mode&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">get_options</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\noptions (bitmask) set for $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_options($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: options (bitmask)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To decode the\nreturn value (bitmask) see documentation for\n&quot;CTX_get_options&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">set_options</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\noptions set via bitmask in $options to $ssl. Options already\nset before are not cleared!</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_options($ssl,\n$options); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $options - options (bitmask) <br>\n# <br>\n# returns: the new options bitmask after adding $options</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For $options\nbitmask details see &quot;CTX_get_options&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_options.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">get_peer_certificate</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get the X509\ncertificate of the peer.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_peer_certificate($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's X509 structure\n(0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">get_peer_cert_chain</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get the\ncertificate chain of the peer as an array of X509\nstructures.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @rv =\nNet::SSLeay::get_peer_cert_chain($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: list of X509 structures</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_peer_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">get_quiet_shutdown</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\n&rsquo;quiet shutdown&rsquo; setting of ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_quiet_shutdown($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) current 'quiet shutdown' value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">get_rbio</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get\n&rsquo;read&rsquo; <small>BIO</small> linked to an\n<small>SSL</small> object $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_rbio($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's BIO structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_rbio.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">get_read_ahead</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_read_ahead($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) read_ahead value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">set_read_ahead</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_read_ahead($ssl,\n$val); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $val - read_ahead value to be set <br>\n# <br>\n# returns: the original read_ahead value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">get_security_level</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.0, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nsecurity level associated with $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $level =\nNet::SSLeay::get_security_level($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) current security level</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_get_security_level.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">set_security_level</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.0, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nsecurity level associated with $ssl to $level.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_security_level($ssl,\n$level); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $level - new security level <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_set_security_level.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">set_num_tickets</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set number of\nTLSv1.3 session tickets that will be sent to a client.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_num_tickets($ssl, $number_of_tickets); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $number_of_tickets - number of tickets to send <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set to zero if\nyou do not no want to support a session resumption.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_set_num_tickets.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">get_num_tickets</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get number of\nTLSv1.3 session tickets that will be sent to a client.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$number_of_tickets = Net::SSLeay::get_num_tickets($ctx);\n<br>\n# $ctx - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: number of tickets to send</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_get_num_tickets.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">get_server_random</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\ninternal SSLv3 server_random value.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::get_server_random($ssl);\n<br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: server_random value (binary data)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">get_client_random</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\ninternal SSLv3 client_random value.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::get_client_random($ssl);\n<br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: client_random value (binary data)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">export_keying_material</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns keying\nmaterial based on the string $label and optional $context.\nNote that with TLSv1.2 and lower, empty context (empty\nstring) and undefined context (no value or\n&rsquo;undef&rsquo;) will return different values.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $out =\nNet::SSLeay::export_keying_material($ssl, $olen, $label,\n$context); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $olen - number of bytes to return <br>\n# $label - application specific label <br>\n# $context - [optional] context - default is undef for no\ncontext <br>\n# <br>\n# returns: keying material (binary data) or undef on\nerror</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_export_keying_material.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">get_session</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieve\n<small>TLS/SSL</small> session data used in $ssl. The\nreference count of the <small>SSL_SESSION</small> is\n<small>NOT</small> incremented.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_session($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's SSL_SESSION\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_session.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">SSL_get0_session</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The alias for\n&quot;get_session&quot; (note that the name is\n&quot;SSL_get0_session&quot; <small>NOT</small>\n&quot;get0_session&quot;).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::SSL_get0_session();</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">get1_session</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\npointer to the <small>SSL_SESSION</small> actually used in\n$ssl. The reference count of the <small>SSL_SESSION</small>\nis incremented by 1.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get1_session($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's SSL_SESSION\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_session.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">get_shared_ciphers</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns string\nwith a list (colon &rsquo;:&rsquo; separated) of ciphers\nshared between client and server within <small>SSL</small>\nsession $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_shared_ciphers() <br>\n# <br>\n# returns: string like\n'ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:...'</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">get_shutdown</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nshutdown mode of $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_shutdown($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: shutdown mode (bitmask) of ssl <br>\n#to decode the return value (bitmask) use: <br>\n0 - No shutdown setting, yet <br>\n1 - SSL_SENT_SHUTDOWN <br>\n2 - SSL_RECEIVED_SHUTDOWN</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_shutdown.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">get_ssl_method</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nfunction pointer to the <small>TLS/SSL</small> method set in\n$ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_ssl_method($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's SSL_METHOD\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">in_init, in_before,\nis_init_finished, in_connect_init, in_accept_init</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieve\ninformation about the handshake state machine. All functions\ntake $ssl as the only argument and return 0 or 1. These\nfunctions are recommended over <b>get_state()</b> and\n<b>state()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::is_init_finished($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: All functions return 1 or 0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc https://www.openssl.org/docs/ssl/SSL_in_init.html\n&lt;http://www.openssl.org/docs/ssl/SSL_in_init.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">get_state</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nOpenSSL 1.1.0 and later use different constants which are\nnot made available. Use <b>is_init_finished()</b> and\nrelated functions instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\n<small>SSL</small> connection state.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_state($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) state value <br>\n# to decode the returned state check: <br>\n# SSL_ST_* constants in openssl/ssl.h <br>\n# SSL2_ST_* constants in openssl/ssl2.h <br>\n# SSL23_ST_* constants in openssl/ssl23.h <br>\n# SSL3_ST_* + DTLS1_ST_* constants in openssl/ssl3.h</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"8%\">\n\n\n<p style=\"margin-top: 1em\">state</p></td>\n<td width=\"75%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Exactly the\nsame as &quot;get_state&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::state($ssl);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">set_state</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\n<small>SSL</small> connection state.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_state($ssl,Net::SSLeay::SSL_ST_ACCEPT());</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Not available\nwith OpenSSL 1.1 and later.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">get_verify_depth</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nverification depth limit currently set in $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_verify_depth($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: current depth or -1 if no limit has been\nexplicitly set</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">set_verify_depth</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nmaximum depth for the certificate chain verification that\nshall be allowed for $ssl.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_verify_depth($ssl,\n$depth); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $depth - (integer) depth <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">get_verify_mode</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nverification mode (bitmask) currently set in $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_verify_mode($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: mode (bitmask)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To decode the\nreturn value (bitmask) see documentation for\n&quot;CTX_get_verify_mode&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_get_verify_mode.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">set_verify</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nverification flags for $ssl to be $mode and specifies the\n$verify_callback function to be used.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_verify($ssl,\n$mode, $callback); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $mode - mode (bitmask) <br>\n# $callback - [optional] reference to perl callback function\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For $mode\nbitmask details see &quot;CTX_get_verify_mode&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_verify.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">set_post_handshake_auth</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Enable the\nPost-Handshake Authentication extension to be added to the\nClientHello such that post-handshake authentication can be\nrequested by the server.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_posthandshake_auth($ssl,\n$val); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $val - 0 then the extension is not sent, otherwise it is\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\nhttps://www.openssl.org/docs/manmaster/man3/SSL_set_post_handshake_auth\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_set_post_handshake_auth.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">verify_client_post_handshake</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">verify_client_post_handshake\ncauses a CertificateRequest message to be sent by a server\non the given ssl connection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::verify_client_post_handshake($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 1 if the request succeeded, and 0 if the request\nfailed. The error stack can be examined to determine the\nfailure reason.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_verify_client_post_handshake.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">get_verify_result</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nresult of the verification of the X509 certificate presented\nby the peer, if any.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_verify_result($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) <br>\n# 0 - X509_V_OK: ok <br>\n# 2 - X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get\nissuer certificate <br>\n# 3 - X509_V_ERR_UNABLE_TO_GET_CRL: unable to get\ncertificate CRL <br>\n# 4 - X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to\ndecrypt certificate's signature <br>\n# 5 - X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to\ndecrypt CRL's signature <br>\n# 6 - X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable\nto decode issuer public key <br>\n# 7 - X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate\nsignature failure <br>\n# 8 - X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature\nfailure <br>\n# 9 - X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet\nvalid <br>\n# 10 - X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired\n<br>\n# 11 - X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid\n<br>\n# 12 - X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired <br>\n# 13 - X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format\nerror in certificate's notBefore field <br>\n# 14 - X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format\nerror in certificate's notAfter field <br>\n# 15 - X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format\nerror in CRL's lastUpdate field <br>\n# 16 - X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format\nerror in CRL's nextUpdate field <br>\n# 17 - X509_V_ERR_OUT_OF_MEM: out of memory <br>\n# 18 - X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed\ncertificate <br>\n# 19 - X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed\ncertificate in certificate chain <br>\n# 20 - X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable\nto get local issuer certificate <br>\n# 21 - X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to\nverify the first certificate <br>\n# 22 - X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too\nlong <br>\n# 23 - X509_V_ERR_CERT_REVOKED: certificate revoked <br>\n# 24 - X509_V_ERR_INVALID_CA: invalid CA certificate <br>\n# 25 - X509_V_ERR_PATH_LENGTH_EXCEEDED: path length\nconstraint exceeded <br>\n# 26 - X509_V_ERR_INVALID_PURPOSE: unsupported certificate\npurpose <br>\n# 27 - X509_V_ERR_CERT_UNTRUSTED: certificate not trusted\n<br>\n# 28 - X509_V_ERR_CERT_REJECTED: certificate rejected <br>\n# 29 - X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer\nmismatch <br>\n# 30 - X509_V_ERR_AKID_SKID_MISMATCH: authority and subject\nkey identifier mismatch <br>\n# 31 - X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and\nissuer serial number mismatch <br>\n# 32 - X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not\ninclude certificate signing <br>\n# 50 - X509_V_ERR_APPLICATION_VERIFICATION: application\nverification failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_verify_result.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">set_verify_result</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Override result\nof peer certificate verification.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_verify_result($ssl,\n$v); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $v - (integer) result value <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more info\nabout valid return values see\n&quot;get_verify_result&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_verify_result.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">get_wbio</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get\n&rsquo;write&rsquo; <small>BIO</small> linked to an\n<small>SSL</small> object $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_wbio($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: value corresponding to openssl's BIO structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_get_rbio.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">load_client_CA_file</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Load X509\ncertificates from file ( <small>PEM</small> formatted).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::load_client_CA_file($file); <br>\n# $file - (string) file name <br>\n# <br>\n# returns: value corresponding to openssl's\nSTACK_OF(X509_NAME) structure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_load_client_CA_file.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">clear_num_renegotiations</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Executes\n<small>SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS</small> command on\n$ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::clear_num_renegotiations($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: command result</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">need_tmp_RSA</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Executes\n<small>SSL_CTRL_NEED_TMP_RSA</small> command on $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::need_tmp_RSA($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: command result</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Not available\nwith OpenSSL 1.1 and later.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">num_renegotiations</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Executes\n<small>SSL_CTRL_GET_NUM_RENEGOTIATIONS</small> command on\n$ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::num_renegotiations($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: command result</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">total_renegotiations</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Executes\n<small>SSL_CTRL_GET_TOTAL_RENEGOTIATIONS</small> command on\n$ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::total_renegotiations($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: command result</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">peek</p></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Copies $max\nbytes from the specified $ssl into the returned value. In\ncontrast to the &quot;Net::SSLeay::read()&quot; function,\nthe data in the <small>SSL</small> buffer is unmodified\nafter the <b>SSL_peek()</b> operation.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::peek($ssl,\n$max); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $max - [optional] max bytes to peek (integer) - default is\n32768 <br>\n# <br>\n# in scalar context: data read from the TLS/SSL connection,\nundef on error <br>\n# in list context: two-item array consisting of data read\n(undef on error), <br>\n# and return code from SSL_peek().</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">peek_ex</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Copies $max\nbytes from the specified $ssl into the returned value. In\ncontrast to the &quot;Net::SSLeay::read_ex()&quot; function,\nthe data in the <small>SSL</small> buffer is unmodified\nafter the <b>SSL_peek_ex()</b> operation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my($got, $rv) =\nNet::SSLeay::peek_ex($ssl, $max); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $max - [optional] max bytes to peek (integer) - default is\n32768 <br>\n# <br>\n# returns a list: two-item list consisting of data read\n(undef on error), <br>\n# and return code from SSL_peek_ex().</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_peek_ex.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">pending</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Obtain number\nof readable bytes buffered in $ssl object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::pending($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: the number of bytes pending</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_pending.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">has_pending</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.0, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns 1 if\n$ssl has buffered data (whether processed or unprocessed)\nand 0 otherwise.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::has_pending($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) 1 or 0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_has_pending.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">read</p></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Tries to read\n$max bytes from the specified $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $got =\nNet::SSLeay::read($ssl, $max); <br>\nmy($got, $rv) = Net::SSLeay::read($ssl, $max); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $max - [optional] max bytes to read (integer) - default is\n32768 <br>\n# <br>\n# returns: <br>\n# in scalar context: data read from the TLS/SSL connection,\nundef on error <br>\n# in list context: two-item array consisting of data read\n(undef on error), <br>\n# and return code from SSL_read().</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_read.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">read_ex</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Tries to read\n$max bytes from the specified $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my($got, $rv) =\nNet::SSLeay::read_ex($ssl, $max); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $max - [optional] max bytes to read (integer) - default is\n32768 <br>\n# <br>\n# returns a list: two-item list consisting of data read\n(undef on error), <br>\n# and return code from SSL_read_ex().</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_read_ex.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">renegotiate</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Turn on flags\nfor renegotiation so that renegotiation will happen</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::renegotiate($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">rstate_string</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a 2\nletter string indicating the current read state of the\n<small>SSL</small> object $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::rstate_string($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 2-letter string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_rstate_string.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">rstate_string_long</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nstring indicating the current read state of the\n<small>SSL</small> object ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::rstate_string_long($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: string with current state</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_rstate_string.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">session_reused</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Query whether a\nreused session was negotiated during handshake.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::session_reused($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 0 - new session was negotiated; 1 - session was\nreused.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_session_reused.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">set1_param</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nrequires at least OpenSSL 1.0.0-beta3</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Applies X509\nverification parameters $vpm on $ssl</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set1_param($ssl, $vpm); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $vpm - value corresponding to openssl's X509_VERIFY_PARAM\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">set_accept_state</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets $ssl to\nwork in server mode.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_accept_state($ssl);\n<br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_connect_state.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">set_bio</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Connects the\nBIOs $rbio and $wbio for the read and write operations of\nthe <small>TLS/SSL</small> (encrypted) side of $ssl.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_bio($ssl,\n$rbio, $wbio); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $rbio - value corresponding to openssl's BIO structure\n<br>\n# $wbio - value corresponding to openssl's BIO structure\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_bio.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">set_cipher_list</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the list\nof ciphers only for ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_cipher_list($ssl, $str); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $str - (string) cipher list e.g. '3DES:+RSA' <br>\n# <br>\n# returns: 1 if any cipher could be selected and 0 on\ncomplete failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">set_ciphersuites</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Configure the\navailable TLSv1.3 ciphersuites.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_ciphersuites($ssl, $str); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $str - colon (&quot;:&quot;) separated list of TLSv1.3\nciphersuite names in order of preference <br>\n# <br>\n# returns: (integer) 1 if the requested ciphersuite list was\nconfigured, and 0 otherwise</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_set_ciphersuites.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">set_client_CA_list</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the list\nof CAs sent to the client when requesting a client\ncertificate for the chosen $ssl, overriding the setting\nvalid for $ssl&rsquo;s <small>SSL_CTX</small> object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_client_CA_list($ssl, $list); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $list - value corresponding to openssl's\nSTACK_OF(X509_NAME) structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_client_CA_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">set_connect_state</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets $ssl to\nwork in client mode.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_connect_state($ssl);\n<br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_connect_state.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\">set_fd</p></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the file\ndescriptor $fd as the input/output facility for the\n<small>TLS/SSL</small> (encrypted) side of $ssl, $fd will\ntypically be the socket file descriptor of a network\nconnection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_fd($ssl, $fd); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $fd - (integer) file handle (got via perl's fileno) <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_fd.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">set_psk_client_callback</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the psk\nclient callback.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_psk_client_callback($ssl,\nsub { my $hint = shift; return ($identity, $key) } ); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $hint - PSK identity hint send by the server <br>\n# $identity - PSK identity <br>\n# $key - PSK key, hex string without the leading '0x', e.g.\n'deadbeef' <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_psk_client_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">set_rfd</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the file\ndescriptor $fd as the input (read) facility for the\n<small>TLS/SSL</small> (encrypted) side of $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_rfd($ssl, $fd); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $fd - (integer) file handle (got via perl's fileno) <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_fd.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">set_wfd</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_wfd($ssl, $fd); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $fd - (integer) file handle (got via perl's fileno) <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_fd.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">set_info_callback</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function, that can be used to obtain state\ninformation for $ssl during connection setup and use. When\ncallback is undef, the callback setting currently valid for\nctx is used.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_info_callback($ssl,\n$cb, [$data]); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $cb - sub { my ($ssl,$where,$ret,$data) = @_; ... } <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_info_callback</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function on ctx, that can be used to obtain state\ninformation during ssl connection setup and use. When\ncallback is undef, an existing callback will be\ndisabled.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_info_callback($ssl,\n$cb, [$data]); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $cb - sub { my ($ssl,$where,$ret,$data) = @_; ... } <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_info_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">set_msg_callback</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function, that can be used to obtain protocol\nmessages information for $ssl during connection setup and\nuse. When callback is undef, the callback setting currently\nvalid for ctx is used. Note that set_msg_callback_arg is not\nprovided as there is no need to explicitly set $arg, this is\nhandled by set_msg_callback.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_msg_callback($ssl,\n$cb, [$arg]); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $cb - sub { my\n($write_p,$version,$content_type,$buf,$len,$ssl,$arg) = @_;\n... } <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/manmaster/man3/SSL_set_msg_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_msg_callback</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function on ctx, that can be used to obtain\nprotocol messages information for ssl connection setup and\nuse. When callback is undef, the existing callback will be\ndisabled. Note that CTX_set_msg_callback_arg is not provided\nas there is no need to explicitly set $arg, this is handled\nby CTX_set_msg_callback.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_msg_callback($ssl,\n$cb, [$arg]); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $cb - sub { my\n($write_p,$version,$content_type,$buf,$len,$ssl,$arg) = @_;\n... } <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/manmaster/man3/SSL_CTX_set_msg_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">set_pref_cipher</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the list\nof available ciphers for $ssl using the control string\n$str.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_pref_cipher($ssl, $str); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $str - (string) cipher list e.g. '3DES:+RSA' <br>\n# <br>\n# returns: 1 if any cipher could be selected and 0 on\ncomplete failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_cipher_list.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_psk_client_callback</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the psk\nclient callback.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_psk_client_callback($ssl,\nsub { my $hint = shift; return ($identity, $key) } ); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $hint - PSK identity hint send by the server <br>\n# $identity - PSK identity <br>\n# $key - PSK key, hex string without the leading '0x', e.g.\n'deadbeef' <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_psk_client_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">set_purpose</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_purpose($ssl, $purpose); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $purpose - (integer) purpose identifier <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more info\nabout available $purpose identifiers see\n&quot;CTX_set_purpose&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">set_quiet_shutdown</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\n&rsquo;quiet shutdown&rsquo; flag for $ssl to be $mode.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_quiet_shutdown($ssl,\n$mode); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $mode - 0 or 1 <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_quiet_shutdown.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">set_session</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set a\n<small>TLS/SSL</small> session to be used during\n<small>TLS/SSL</small> connect.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_session($to, $ses); <br>\n# $to - value corresponding to openssl's SSL structure <br>\n# $ses - value corresponding to openssl's SSL_SESSION\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_session.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">set_session_id_context</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncontext $sid_ctx of length $sid_ctx_len within which a\nsession can be reused for the $ssl object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_session_id_context($ssl, $sid_ctx,\n$sid_ctx_len); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $sid_ctx - data buffer <br>\n# $sid_ctx_len - length of data in $sid_ctx <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_session_id_context.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">set_session_secret_cb</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Setup\npre-shared secret session resumption function.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_session_secret_cb($ssl,\n$func, $data); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $func - perl reference to callback function <br>\n# $data - [optional] data that will be passed to callback\nfunction when invoked <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback\nfunction will be called like:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">callback_function($secret,\n$ciphers, $pref_cipher, $data); <br>\n# $secret is the current master session key, usually all 0s\nat the beginning of a session <br>\n# $ciphers is ref to an array of peer cipher names <br>\n# $pref_cipher is a ref to an index into the list of cipher\nnames of <br>\n# the preferred cipher. Set it if you want to specify a\npreferred cipher <br>\n# $data is the data passed to set_session_secret_cb</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback\nfunction should return 1 if it likes the suggested cipher\n(or has selected an alternative by setting pref_cipher),\nelse it should return 0 (in which case OpenSSL will select\nits own preferred cipher).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">With OpenSSL\n1.1 and later, callback_function can change the master key\nfor the session by altering $secret and returning 1.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"48%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_set_tlsext_ticket_getkey_cb</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Setup\nencryption for <small>TLS</small> session tickets (stateless\nsession reuse).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_tlsext_ticket_getkey_cb($ctx,\n$func, $data); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $func - perl reference to callback function <br>\n# $data - [optional] data that will be passed to callback\nfunction when invoked <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback\nfunction will be called like:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">getkey($data,[$key_name])\n-&gt; ($key,$current_key_name) <br>\n# $data is the data passed to set_session_secret_cb <br>\n# $key_name is the name of the key OpenSSL has extracted\nfrom the session ticket <br>\n# $key is the requested key for ticket encryption + HMAC\n<br>\n# $current_key_name is the name for the currently valid\nkey</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">OpenSSL will\ncall the function without a key name if it generates a new\nticket. It then needs the callback to return the\nencryption+HMAC key and an identifier (key name) for this\nkey.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When OpenSSL\ngets a session ticket from the client it extracts the key\nname and calls the callback with this name as argument. It\nthen expects the callback to return the encryption+HMAC key\nmatching the requested key name and and also the key name\nwhich should be used at the moment. If the requested key\nname and the returned key name differ it means that this\nsession ticket was created with an expired key and need to\nbe renewed. In this case OpenSSL will call the callback\nagain with no key name to create a new session ticket based\non the old one.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The key must be\nat least 32 byte of random data which can be created with\nRAND_bytes. Internally the first 16 byte are used as key in\n<small>AES-128</small> encryption while the next 16 byte are\nused for the <small>SHA-256 HMAC.</small> The key name are\nbinary data and must be exactly 16 byte long.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::RAND_bytes(my\n$oldkey,32); <br>\nNet::SSLeay::RAND_bytes(my $newkey,32); <br>\nmy $oldkey_name = pack(&quot;a16&quot;,'oldsecret'); <br>\nmy $newkey_name = pack(&quot;a16&quot;,'newsecret'); <br>\nmy @keys = ( <br>\n[ $newkey_name, $newkey ], # current active key <br>\n[ $oldkey_name, $oldkey ], # already expired <br>\n); <br>\n\nNet::SSLeay::CTX_set_tlsext_ticket_getkey_cb($server2-&gt;_ctx,\nsub { <br>\nmy ($mykeys,$name) = @_; <br>\n# return (current_key, current_key_name) if no name given\n<br>\nreturn ($mykeys-&gt;[0][1],$mykeys-&gt;[0][0]) if ! $name;\n<br>\n# return (matching_key, current_key_name) if we find a key\nmatching <br>\n# the given name <br>\nfor(my $i = 0; $i&lt;@$mykeys; $i++) { <br>\nnext if $name ne $mykeys-&gt;[$i][0]; <br>\nreturn ($mykeys-&gt;[$i][1],$mykeys-&gt;[0][0]); <br>\n} <br>\n# no matching key found <br>\nreturn; <br>\n},\\@keys);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nis based on the OpenSSL function\nSSL_CTX_set_tlsext_ticket_key_cb but provides a simpler to\nuse interface. For more information see\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tlsext_ticket_key_cb.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">set_session_ticket_ext_cb</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Setup callback\nfor <small>TLS</small> session tickets (stateless session\nreuse).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_session_ticket_ext_cb($ssl,\n$func, $data); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $func - perl reference to callback function <br>\n# $data - [optional] data that will be passed to callback\nfunction when invoked <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback\nfunction will be called like:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">getticket($ssl,$ticket,$data)\n-&gt; $return_value <br>\n# $ssl is a value corresponding to openssl's SSL structure\n<br>\n# $ticket is a value of received TLS session ticket (can\nalso be empty) <br>\n# $data is the data passed to set_session_ticket_ext_cb <br>\n# $return_value is either 0 (failure) or 1 (success)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nis based on the OpenSSL function\nSSL_set_session_ticket_ext_cb.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">set_session_ticket_ext</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set\n<small>TLS</small> session ticket (stateless session\nreuse).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_session_ticket_ext($ssl,\n$ticket); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $ticket - is a value of TLS session ticket which client\nwill send (can also be empty string) <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback\nfunction will be called like:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">getticket($ssl,$ticket,$data)\n-&gt; $return_value <br>\n# $ssl is a value corresponding to openssl's SSL structure\n<br>\n# $ticket is a value of received TLS session ticket (can\nalso be empty) <br>\n# $data is the data passed to set_session_ticket_ext_cb <br>\n# $return_value is either 0 (failure) or 1 (success)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nis based on the OpenSSL function\nSSL_set_session_ticket_ext_cb.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">set_shutdown</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nshutdown state of $ssl to $mode.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_shutdown($ssl,\n$mode); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $mode - (integer) shutdown mode: <br>\n# 0 - No shutdown <br>\n# 1 - SSL_SENT_SHUTDOWN <br>\n# 2 - SSL_RECEIVED_SHUTDOWN <br>\n# 3 - SSL_RECEIVED_SHUTDOWN+SSL_SENT_SHUTDOWN <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_set_shutdown.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">set_ssl_method</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets a new\n<small>TLS/SSL</small> method for a particular $ssl\nobject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_ssl_method($ssl, $method); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $method - value corresponding to openssl's SSL_METHOD\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_ssl_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">set_tmp_dh</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets\n<small>DH</small> parameters to be used to be $dh.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_tmp_dh($ssl, $dh); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $dh - value corresponding to openssl's DH structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">set_tmp_dh_callback</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function for $ssl to be used when a\n<small>DH</small> parameters are required to $dh_cb.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (does this\nfunction really work?)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_tmp_dh_callback($ssl,\n$dh); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $dh_cb - pointer to function ??? <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_dh_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">set_tmp_rsa</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ntemporary/ephemeral <small>RSA</small> key to be used in\n$ssl to be $rsa.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_tmp_rsa($ssl, $rsa); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $rsa - value corresponding to openssl's RSA structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rsakey =\nNet::SSLeay::RSA_generate_key(); <br>\nNet::SSLeay::set_tmp_rsa($ssl, $rsakey); <br>\nNet::SSLeay::RSA_free($rsakey);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">set_tmp_rsa_callback</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncallback function for $ssl to be used when a\ntemporary/ephemeral <small>RSA</small> key is required to\n$tmp_rsa_callback.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (does this\nfunction really work?)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_tmp_rsa_callback($ssl,\n$tmp_rsa_callback); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $tmp_rsa_callback - (function pointer) ??? <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_tmp_rsa_callback.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">set_trust</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::set_trust($ssl, $trust); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $trust - (integer) trust identifier <br>\n# <br>\n# returns: the original value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about $trust values see\n&quot;CTX_set_trust&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">shutdown</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Shuts down an\nactive <small>TLS/SSL</small> connection. It sends the\n&rsquo;close notify&rsquo; shutdown alert to the peer.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::shutdown($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 1 - shutdown was successfully completed <br>\n# 0 - shutdown is not yet finished, <br>\n# -1 - shutdown was not successful</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_shutdown.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">state_string</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a 6\nletter string indicating the current state of the\n<small>SSL</small> object $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::state_string($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: 6-letter string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_state_string.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">state_string_long</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nstring indicating the current state of the\n<small>SSL</small> object $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::state_string_long($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: state strings</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_state_string.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">set_default_passwd_cb</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.1.0f. Not needed with LibreSSL.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ndefault password callback called when loading/storing a\n<small>PEM</small> certificate with encryption for $ssl.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_default_passwd_cb($ssl,\n$func); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $func - perl reference to callback function <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"46%\">\n\n\n\n<p style=\"margin-top: 1em\">set_default_passwd_cb_userdata</p> </td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.1.0f. Not needed with LibreSSL.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets a pointer\nto userdata which will be provided to the password callback\nof $ssl on invocation.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_default_passwd_cb_userdata($ssl,\n$userdata); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $userdata - data that will be passed to callback function\nwhen invoked <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_set_default_passwd_cb.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">use_PrivateKey</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds $pkey as\nprivate key to $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_PrivateKey($ssl, $pkey); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">use_PrivateKey_ASN1</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\nprivate key of type $pk stored in $data to $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_PrivateKey_ASN1($pk, $ssl, $d, $len); <br>\n# $pk - (integer) key type, NID of corresponding algorithm\n<br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $data - key data (binary) <br>\n# $len - length of $data <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">use_PrivateKey_file</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the first\nprivate key found in $file to $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_PrivateKey_file($ssl, $file, $type); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">use_RSAPrivateKey</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds $rsa as\n<small>RSA</small> private key to $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_RSAPrivateKey($ssl, $rsa); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $rsa - value corresponding to openssl's RSA structure <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">use_RSAPrivateKey_ASN1</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds\n<small>RSA</small> private key stored in $data to $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_RSAPrivateKey_ASN1($ssl, $data, $len); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $data - key data (binary) <br>\n# $len - length of $data <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">use_RSAPrivateKey_file</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the first\n<small>RSA</small> private key found in $file to $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_RSAPrivateKey_file($ssl, $file, $type);\n<br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">use_certificate</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads the\ncertificate $x into $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_certificate($ssl, $x); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">use_certificate_ASN1</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads the\n<small>ASN1</small> encoded certificate from $data to\n$ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_certificate_ASN1($ssl, $data, $len); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $data - certificate data (binary) <br>\n# $len - length of $data <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">use_certificate_chain_file</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY</small></b>\n: not available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.1.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads a\ncertificate chain from $file into $ssl. The certificates\nmust be in <small>PEM</small> format and must be sorted\nstarting with the subject&rsquo;s certificate (actual client\nor server certificate), followed by intermediate\n<small>CA</small> certificates if applicable, and ending at\nthe highest level (root) <small>CA.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_certificate_chain_file($ssl, $file); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $file - (string) file name <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">use_certificate_file</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads the first\ncertificate stored in $file into $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::use_certificate_file($ssl, $file, $type); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# <br>\n# returns: 1 on success, otherwise check out the error stack\nto find out the reason</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_CTX_use_certificate.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">get_version</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL/TLS</small> protocol name</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::get_version($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (string) protocol name, see OpenSSL manual for\nthe full list <br>\n# TLSv1 <br>\n# TLSv1.3</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_get_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">version</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>SSL/TLS</small> protocol version</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::version($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) protocol version, see OpenSSL manual\nfor the full list <br>\n# 0x0301 - TLS1_VERSION (TLSv1) <br>\n# 0xFEFF - DTLS1_VERSION (DTLSv1)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">client_version</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.0, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>TLS</small> protocol version used by the client when\ninitiating the connection</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::client_version($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) protocol version, see OpenSSL manual\nfor the full list <br>\n# 0x0301 - TLS1_VERSION (TLSv1) <br>\n# 0xFEFF - DTLS1_VERSION (DTLSv1)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_client_version.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">is_dtls</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.0, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::is_dtls($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) zero or one <br>\n# 0 - connection is not using DTLS <br>\n# 1 - connection is using DTLS</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_is_dtls.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">want</p></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns state\ninformation for the <small>SSL</small> object $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::want($ssl); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: state <br>\n# 1 - SSL_NOTHING <br>\n# 2 - SSL_WRITING <br>\n# 3 - SSL_READING <br>\n# 4 - SSL_X509_LOOKUP</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_want.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"8%\">\n\n\n<p style=\"margin-top: 1em\">write</p></td>\n<td width=\"75%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Writes data\nfrom the buffer $data into the specified $ssl\nconnection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::write($ssl, $data); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $data - data to be written <br>\n# <br>\n# returns: &gt;0 - (success) number of bytes actually\nwritten to the TLS/SSL connection <br>\n# 0 - write not successful, probably the underlying\nconnection was closed <br>\n# &lt;0 - error</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_write.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">write_ex</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Writes data\nfrom the buffer $data into the specified $ssl\nconnection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my ($len, $rv)\n= Net::SSLeay::write_ex($ssl, $data); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $data - data to be written <br>\n# <br>\n# returns a list: two-item list consisting of number of\nbytes written, <br>\n# and return code from SSL_write_ex()</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/SSL_write_ex.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">write_partial</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Writes a\nfragment of data in $data from the buffer $data into the\nspecified $ssl connection. This is a non-blocking function\nlike <b>Net::SSLeay::write()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::write_partial($ssl, $from, $count, $data); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $from - (integer) offset from the beginning of $data <br>\n# $count - (integer) length of data to be written <br>\n# $data - data buffer <br>\n# <br>\n# returns: &gt;0 - (success) number of bytes actually\nwritten to the TLS/SSL connection <br>\n# 0 - write not successful, probably the underlying\nconnection was closed <br>\n# &lt;0 - error</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">set_tlsext_host_name</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.8f</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets\n<small>TLS</small> servername extension on\n<small>SLL</small> object $ssl to value $name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nset_tlsext_host_name($ssl, $name); <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# $name - (string) name to be set <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> RAND_* related functions</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Check openssl\ndoc related to <small>RAND</small> stuff\n&lt;http://www.openssl.org/docs/crypto/rand.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">RAND_add</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Mixes the $num\nbytes at $buf into the <small>PRNG</small> state.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::RAND_add($buf,\n$num, $entropy); <br>\n# $buf - buffer with data to be mixed into the PRNG state\n<br>\n# $num - number of bytes in $buf <br>\n# $entropy - estimate of how much randomness is contained in\n$buf (in bytes) <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_add.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">RAND_seed</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Equivalent to\n&quot;RAND_add&quot; when $num == $entropy.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::RAND_seed($buf);\n# Perlishly figures out buf size <br>\n# $buf - buffer with data to be mixed into the PRNG state\n<br>\n# $num - number of bytes in $buf <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_add.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">RAND_status</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Gives\n<small>PRNG</small> status (seeded enough or not).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RAND_status(); <br>\n#returns: 1 if the PRNG has been seeded with enough data, 0\notherwise</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_add.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">RAND_bytes</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Puts $num\ncryptographically strong pseudo-random bytes into $buf.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RAND_bytes($buf, $num); <br>\n# $buf - buffer where the random data will be stored <br>\n# $num - the size (in bytes) of requested random data <br>\n# <br>\n# returns: 1 on success, -1 if not supported by the current\nRAND method, or 0 on other failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/manmaster/man3/RAND_bytes.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">RAND_priv_bytes</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.85 and before; requires at\nleast OpenSSL 1.1.1, not in LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Puts $num\ncryptographically strong pseudo-random bytes into $buf.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RAND_priv_bytes($buf, $num); <br>\n# $buf - buffer where the random data will be stored <br>\n# $num - the size (in bytes) of requested random data <br>\n# <br>\n# returns: 1 on success, -1 if not supported by the current\nRAND method, or 0 on other failure</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">RAND_priv_bytes\nhas the same semantics as RAND_bytes, but see see the\ndocumentation for more information.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/manmaster/man3/RAND_priv_bytes.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">RAND_pseudo_bytes</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Puts $num\npseudo-random (not necessarily unpredictable) bytes into\n$buf.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RAND_pseudo_bytes($buf, $num); <br>\n# $buf - buffer where the random data will be stored <br>\n# $num - the size (in bytes) of requested random data <br>\n# <br>\n# returns: 1 if the bytes generated are cryptographically\nstrong, 0 otherwise</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_bytes.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">RAND_cleanup</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Erase the\n<small>PRNG</small> state.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::RAND_cleanup();\n<br>\n# no args, no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_cleanup.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">RAND_egd_bytes</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Queries the\nentropy gathering daemon <small>EGD</small> on socket $path\nfor $bytes bytes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RAND_egd_bytes($path, $bytes); <br>\n# $path - path to a socket of entropy gathering daemon EGD\n<br>\n# $bytes - number of bytes we want from EGD <br>\n# <br>\n# returns: the number of bytes read from the daemon on\nsuccess, and -1 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_egd.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">RAND_file_name</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Generates a\ndefault path for the random seed file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $file =\nNet::SSLeay::RAND_file_name($num); <br>\n# $num - maximum size of returned file name <br>\n# <br>\n# returns: string with file name on success, '' (empty\nstring) or undef on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">LibreSSL and\nOpenSSL 1.1.0a and later return undef when, for example,\n$num is not large enough to hold the filename.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_load_file.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">RAND_load_file</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nIs no longer functional on LibreSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Reads\n$max_bytes of bytes from $file_name and adds them to the\n<small>PRNG.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RAND_load_file($file_name, $max_bytes); <br>\n# $file_name - the name of file <br>\n# $max_bytes - bytes to read from $file_name; -1 =&gt; the\ncomplete file is read <br>\n# <br>\n# returns: the number of bytes read</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_load_file.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">RAND_write_file</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Writes 1024\nrandom bytes to $file_name which can be used to initialize\nthe <small>PRNG</small> by calling\n&quot;RAND_load_file&quot; in a later session.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RAND_write_file($file_name); <br>\n# $file_name - the name of file <br>\n# <br>\n# returns: the number of bytes written, and -1 if the bytes\nwritten were generated without appropriate seed</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RAND_load_file.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">RAND_poll</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Collects some\nentropy from operating system and adds it to the\n<small>PRNG.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RAND_poll(); <br>\n# returns: 1 on success, 0 on failure (unable to gather\nreasonable entropy)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> OBJ_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_cmp</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Compares\n<small>ASN1_OBJECT</small> $a to <small>ASN1_OBJECT</small>\n$b.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_cmp($a, $b); <br>\n# $a - value corresponding to openssl's ASN1_OBJECT\nstructure <br>\n# $b - value corresponding to openssl's ASN1_OBJECT\nstructure <br>\n# <br>\n# returns: if the two are identical 0 is returned</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OBJ_nid2obj.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_dup</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\ncopy/duplicate of $o.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_dup($o); <br>\n# $o - value corresponding to openssl's ASN1_OBJECT\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_OBJECT\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OBJ_nid2obj.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_nid2ln</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns long\nname for given <small>NID</small> $n.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_nid2ln($n); <br>\n# $n - (integer) NID <br>\n# <br>\n# returns: (string) long name e.g. 'commonName'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OBJ_nid2obj.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_ln2nid</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>NID</small> corresponding to given long name $n.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_ln2nid($s); <br>\n# $s - (string) long name e.g. 'commonName' <br>\n# <br>\n# returns: (integer) NID</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_nid2sn</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns short\nname for given <small>NID</small> $n.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_nid2sn($n); <br>\n# $n - (integer) NID <br>\n# <br>\n# returns: (string) short name e.g. 'CN'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">print\nNet::SSLeay::OBJ_nid2sn(&amp;Net::SSLeay::NID_commonName);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_sn2nid</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>NID</small> corresponding to given short name $s.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_sn2nid($s); <br>\n# $s - (string) short name e.g. 'CN' <br>\n# <br>\n# returns: (integer) NID</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">print\n&quot;NID_commonName constant=&quot;,\n&amp;Net::SSLeay::NID_commonName; <br>\nprint &quot;OBJ_sn2nid('CN')=&quot;,\nNet::SSLeay::OBJ_sn2nid('CN');</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_nid2obj</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>ASN1_OBJECT</small> for given <small>NID</small>\n$n.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_nid2obj($n); <br>\n# $n - (integer) NID <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_OBJECT\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OBJ_nid2obj.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_obj2nid</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>NID</small> corresponding to given\n<small>ASN1_OBJECT</small> $o.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_obj2nid($o); <br>\n# $o - value corresponding to openssl's ASN1_OBJECT\nstructure <br>\n# <br>\n# returns: (integer) NID</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OBJ_nid2obj.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_txt2obj</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Converts the\ntext string s into an <small>ASN1_OBJECT</small> structure.\nIf $no_name is 0 then long names (e.g.\n&rsquo;commonName&rsquo;) and short names (e.g. &rsquo;\n<small>CN</small> &rsquo;) will be interpreted as well as\nnumerical forms (e.g. &rsquo;2.5.4.3&rsquo;). If $no_name is\n1 only the numerical form is acceptable.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_txt2obj($s, $no_name); <br>\n# $s - text string to be converted <br>\n# $no_name - (integer) 0 or 1 <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_OBJECT\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OBJ_nid2obj.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_obj2txt</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Converts the\n<small>ASN1_OBJECT</small> a into a textual\nrepresentation.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::OBJ_obj2txt($a,\n$no_name); <br>\n# $a - value corresponding to openssl's ASN1_OBJECT\nstructure <br>\n# $no_name - (integer) 0 or 1 <br>\n# <br>\n# returns: textual representation e.g. 'commonName'\n($no_name=0), '2.5.4.3' ($no_name=1)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OBJ_nid2obj.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">OBJ_txt2nid</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>NID</small> corresponding to text string $s which can\nbe a long name, a short name or the numerical representation\nof an object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OBJ_txt2nid($s); <br>\n# $s - (string) e.g. 'commonName' or 'CN' or '2.5.4.3' <br>\n# <br>\n# returns: (integer) NID</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $nid =\nNet::SSLeay::OBJ_txt2nid('2.5.4.3'); <br>\nNet::SSLeay::OBJ_nid2sn($n);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/OBJ_nid2obj.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> ASN1_INTEGER_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">ASN1_INTEGER_new</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>ASN1_INTEGER</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ASN1_INTEGER_new(); <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_INTEGER\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">ASN1_INTEGER_free</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Free an\nallocated <small>ASN1_INTEGER</small> structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::ASN1_INTEGER_free($i);\n<br>\n# $i - value corresponding to openssl's ASN1_INTEGER\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">ASN1_INTEGER_get</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns integer\nvalue of given <small>ASN1_INTEGER</small> object.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>BEWARE:</small></b>\nIf the value stored in <small>ASN1_INTEGER</small> is\ngreater than max. integer that can be stored in\n&rsquo;long&rsquo; type (usually 32bit but may vary\naccording to platform) then this function will return -1.\nFor getting large <small>ASN1_INTEGER</small> values\nconsider using &quot;P_ASN1_INTEGER_get_dec&quot; or\n&quot;P_ASN1_INTEGER_get_hex&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ASN1_INTEGER_get($a); <br>\n# $a - value corresponding to openssl's ASN1_INTEGER\nstructure <br>\n# <br>\n# returns: integer value of ASN1_INTEGER object in $a</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">ASN1_INTEGER_set</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets value of\ngiven <small>ASN1_INTEGER</small> object to value $val</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>BEWARE:</small></b>\n$val has max. limit (= max. integer that can be stored in\n&rsquo;long&rsquo; type). For setting large\n<small>ASN1_INTEGER</small> values consider using\n&quot;P_ASN1_INTEGER_set_dec&quot; or\n&quot;P_ASN1_INTEGER_set_hex&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::ASN1_INTEGER_set($i, $val); <br>\n# $i - value corresponding to openssl's ASN1_INTEGER\nstructure <br>\n# $val - integer value <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_INTEGER_get_dec</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns string\nwith decimal representation of integer value of given\n<small>ASN1_INTEGER</small> object.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_ASN1_INTEGER_get_dec($i);\n<br>\n# $i - value corresponding to openssl's ASN1_INTEGER\nstructure <br>\n# <br>\n# returns: string with decimal representation</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_INTEGER_get_hex</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns string\nwith hexadecimal representation of integer value of given\n<small>ASN1_INTEGER</small> object.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_ASN1_INTEGER_get_hex($i);\n<br>\n# $i - value corresponding to openssl's ASN1_INTEGER\nstructure <br>\n# <br>\n# returns: string with hexadecimal representation</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_INTEGER_set_dec</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets value of\ngiven <small>ASN1_INTEGER</small> object to value $val\n(decimal string, suitable for large integers)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_ASN1_INTEGER_set_dec($i,\n$str); <br>\n# $i - value corresponding to openssl's ASN1_INTEGER\nstructure <br>\n# $str - string with decimal representation <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_INTEGER_set_hex</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets value of\ngiven <small>ASN1_INTEGER</small> object to value $val\n(hexadecimal string, suitable for large integers)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_ASN1_INTEGER_set_hex($i,\n$str); <br>\n# $i - value corresponding to openssl's ASN1_INTEGER\nstructure <br>\n# $str - string with hexadecimal representation <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> ASN1_STRING_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_STRING_get</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns string\nvalue of given <small>ASN1_STRING</small> object.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_ASN1_STRING_get($s,\n$utf8_decode); <br>\n# $s - value corresponding to openssl's ASN1_STRING\nstructure <br>\n# $utf8_decode - [optional] 0 or 1 whether the returned\nvalue should be utf8 decoded (default=0) <br>\n# <br>\n# returns: string <br>\n$string = Net::SSLeay::P_ASN1_STRING_get($s); <br>\n#is the same as: <br>\n$string = Net::SSLeay::P_ASN1_STRING_get($s, 0);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> ASN1_TIME_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">ASN1_TIME_new</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $time =\nASN1_TIME_new(); <br>\n# returns: value corresponding to openssl's ASN1_TIME\nstructure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">ASN1_TIME_free</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">ASN1_TIME_free($time);\n<br>\n# $time - value corresponding to openssl's ASN1_TIME\nstructure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">ASN1_TIME_set</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">ASN1_TIME_set($time,\n$t); <br>\n# $time - value corresponding to openssl's ASN1_TIME\nstructure <br>\n# $t - time value in seconds since 1.1.1970</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>BEWARE:</small></b>\nIt is platform dependent how this function will handle dates\nafter 2038. Although perl&rsquo;s integer is large enough\nthe internal implementation of this function is dependent on\nthe size of time_t structure (32bit time_t has problem with\n2038).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nsafely set date and time after 2038 use function\n&quot;P_ASN1_TIME_set_isotime&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_TIME_get_isotime</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7e</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Gives\n<small>ISO-8601</small> string representation of\n<small>ASN1_TIME</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$datetime_string = P_ASN1_TIME_get_isotime($time); <br>\n# $time - value corresponding to openssl's ASN1_TIME\nstructure <br>\n# <br>\n# returns: datetime string like '2033-05-16T20:39:37Z' or ''\non failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The output\nformat is compatible with module\nDateTime::Format::RFC3339</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_TIME_set_isotime</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7e</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets time and\ndate value of ANS1_time structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nP_ASN1_TIME_set_isotime($time, $string); <br>\n# $time - value corresponding to openssl's ASN1_TIME\nstructure <br>\n# $string - ISO-8601 timedate string like\n'2033-05-16T20:39:37Z' <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $string\nparameter has to be in full form like\n&quot;2012-03-22T23:55:33&quot; or\n&quot;2012-03-22T23:55:33Z&quot; or\n&quot;2012-03-22T23:55:33CET&quot;. Short forms like\n&quot;2012-03-22T23:55&quot; or &quot;2012-03-22&quot; are\nnot supported.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_TIME_put2string</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before, has bugs with\nopenssl-0.9.8i</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Gives string\nrepresentation of <small>ASN1_TIME</small> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $str =\nP_ASN1_TIME_put2string($time); <br>\n# $time - value corresponding to openssl's ASN1_TIME\nstructure <br>\n# <br>\n# returns: datetime string like 'May 16 20:39:37 2033\nGMT'</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">P_ASN1_UTCTIME_put2string</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\ndeprecated function, only for backward compatibility, just\nan alias for &quot;P_ASN1_TIME_put2string&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> X509_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">X509_new</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Allocates and\ninitializes a X509 structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_new(); <br>\n# <br>\n# returns: value corresponding to openssl's X509 structure\n(0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">X509_free</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Frees up the\nX509 structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_free($a);\n<br>\n# $a - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_check_host</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.68 and before; requires at\nleast OpenSSL 1.0.2. X509_CHECK_FLAG_NEVER_CHECK_SUBJECT\nrequires OpenSSL 1.1.0.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Checks if the\ncertificate Subject Alternative Name ( <small>SAN</small> )\nor Subject CommonName ( <small>CN</small> ) matches the\nspecified host name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_check_host($cert, $name, $flags,\n$peername); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# $name - host name to check <br>\n# $flags (optional, default: 0) - can be the bitwise OR of:\n<br>\n# &amp;Net::SSLeay::X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT\n<br>\n# &amp;Net::SSLeay::X509_CHECK_FLAG_NO_WILDCARDS <br>\n# &amp;Net::SSLeay::X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS\n<br>\n# &amp;Net::SSLeay::X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS\n<br>\n# &amp;Net::SSLeay::X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS\n<br>\n# &amp;Net::SSLeay::X509_CHECK_FLAG_NEVER_CHECK_SUBJECT <br>\n# $peername (optional) - If not omitted and $host matches\n$cert, <br>\n# a copy of the matching SAN or CN from <br>\n# the peer certificate is stored in $peername. <br>\n# <br>\n# returns: <br>\n# 1 for a successful match <br>\n# 0 for a failed match <br>\n# -1 for an internal error <br>\n# -2 if the input is malformed</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_check_host.html&gt;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">X509_check_email</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.68 and before; requires at\nleast OpenSSL 1.0.2.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Checks if the\ncertificate matches the specified email address.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_check_email($cert, $address, $flags); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# $address - email address to check <br>\n# $flags (optional, default: 0) - see X509_check_host() <br>\n# <br>\n# returns: see X509_check_host()</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_check_email.html&gt;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">X509_check_ip</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.68 and before; requires at\nleast OpenSSL 1.0.2.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Checks if the\ncertificate matches the specified IPv4 or IPv6 address.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_check_ip($cert, $address, $flags); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# $address - IP address to check in binary format, in\nnetwork byte order <br>\n# $flags (optional, default: 0) - see X509_check_host() <br>\n# <br>\n# returns: see X509_check_host()</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_check_ip.html&gt;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">X509_check_ip_asc</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.68 and before; requires at\nleast OpenSSL 1.0.2.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Checks if the\ncertificate matches the specified IPv4 or IPv6 address.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_check_ip_asc($cert, $address, $flags);\n<br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# $address - IP address to check in text representation <br>\n# $flags (optional, default: 0) - see X509_check_host() <br>\n# <br>\n# returns: see X509_check_host()</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_check_ip_asc.html&gt;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_certificate_type</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns bitmask\nwith type of certificate $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_certificate_type($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: (integer) bitmask with certificate type <br>\n#to decode bitmask returned by this function use these\nconstants: <br>\n&amp;Net::SSLeay::EVP_PKS_DSA <br>\n&amp;Net::SSLeay::EVP_PKS_EC <br>\n&amp;Net::SSLeay::EVP_PKS_RSA <br>\n&amp;Net::SSLeay::EVP_PKT_ENC <br>\n&amp;Net::SSLeay::EVP_PKT_EXCH <br>\n&amp;Net::SSLeay::EVP_PKT_EXP <br>\n&amp;Net::SSLeay::EVP_PKT_SIGN <br>\n&amp;Net::SSLeay::EVP_PK_DH <br>\n&amp;Net::SSLeay::EVP_PK_DSA <br>\n&amp;Net::SSLeay::EVP_PK_EC <br>\n&amp;Net::SSLeay::EVP_PK_RSA</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">X509_digest</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\ndigest/fingerprint of X509 $data using $type hash\nfunction.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$digest_value = Net::SSLeay::X509_digest($data, $type); <br>\n# $data - value corresponding to openssl's X509 structure\n<br>\n# $type - value corresponding to openssl's EVP_MD structure\n- e.g. got via EVP_get_digestbyname() <br>\n# <br>\n# returns: hash value (binary) <br>\n#to get printable (hex) value of digest use: <br>\nprint unpack('H*', $digest_value);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_issuer_and_serial_hash</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sort of a\nchecksum of issuer name and serial number of X509\ncertificate $x. The result is not a full hash (e.g. sha-1),\nit is kind-of-a-hash truncated to the size of\n&rsquo;unsigned long&rsquo; (32 bits). The resulting value\nmight differ across different openssl versions for the same\nX509 certificate.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_issuer_and_serial_hash($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: number representing checksum</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_issuer_name_hash</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sort of a\nchecksum of issuer name of X509 certificate $x. The result\nis not a full hash (e.g. sha-1), it is kind-of-a-hash\ntruncated to the size of &rsquo;unsigned long&rsquo; (32\nbits). The resulting value might differ across different\nopenssl versions for the same X509 certificate.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_issuer_name_hash($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: number representing checksum</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">X509_subject_name_hash</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sort of a\nchecksum of subject name of X509 certificate $x. The result\nis not a full hash (e.g. sha-1), it is kind-of-a-hash\ntruncated to the size of &rsquo;unsigned long&rsquo; (32\nbits). The resulting value might differ across different\nopenssl versions for the same X509 certificate.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_subject_name_hash($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: number representing checksum</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">X509_pubkey_digest</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\ndigest/fingerprint of public key from X509 certificate $data\nusing $type hash function.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$digest_value = Net::SSLeay::X509_pubkey_digest($data,\n$type); <br>\n# $data - value corresponding to openssl's X509 structure\n<br>\n# $type - value corresponding to openssl's EVP_MD structure\n- e.g. got via EVP_get_digestbyname() <br>\n# <br>\n# returns: hash value (binary) <br>\n#to get printable (hex) value of digest use: <br>\nprint unpack('H*', $digest_value);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_set_issuer_name</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets issuer of\nX509 certificate $x to $name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_set_issuer_name($x, $name); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_set_pubkey</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets public key\nof X509 certificate $x to $pkey.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_set_pubkey($x, $pkey); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_set_serialNumber</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets serial\nnumber of X509 certificate $x to $serial.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_set_serialNumber($x, $serial); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# $serial - value corresponding to openssl's ASN1_INTEGER\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure <br>\n#to create $serial value use one of these: <br>\n$serial = Net::SSLeay::P_ASN1_INTEGER_set_hex('45ad6f');\n<br>\n$serial =\nNet::SSLeay::P_ASN1_INTEGER_set_dec('7896541238529631478');\n<br>\n$serial = Net::SSLeay::ASN1_INTEGER_set(45896);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_set_subject_name</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets subject of\nX509 certificate $x to $name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_set_subject_name($x, $name); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">X509_set_version</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Set\n&rsquo;version&rsquo; value for X509 certificate $ to\n$version.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_set_version($x, $version); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# $version - (integer) version number <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">X509_sign</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sign X509\ncertificate $x with private key $pkey (using digest\nalgorithm $md).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_sign($x, $pkey, $md); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# $md - value corresponding to openssl's EVP_MD structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">X509_verify</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Verifies X509\nobject $a using public key $r (pubkey of issuing\n<small>CA</small> ).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_verify($x, $r); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# $r - value corresponding to openssl's EVP_PKEY structure\n<br>\n# <br>\n# returns: 0 - verify failure, 1 - verify OK, &lt;0 -\nerror</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_ext_count</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ntotal number of extensions in X509 object $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_ext_count($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: count of extensions</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_pubkey</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns public\nkey corresponding to given X509 object $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_pubkey($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: value corresponding to openssl's EVP_PKEY\nstructure (0 on failure)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nThis method returns only the public key&rsquo;s key bits,\nwithout the algorithm or parameters. Use\n&quot;X509_get_X509_PUBKEY()&quot; to return the full public\nkey ( <small>SPKI</small> ) instead.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_X509_PUBKEY</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.72 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nfull public key ( <small>SPKI</small> ) of given X509\ncertificate $x.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_get_X509_PUBKEY($x);\n<br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: public key data in DER format (binary)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_serialNumber</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns serial\nnumber of X509 certificate $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_serialNumber($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_INTEGER\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See\n&quot;P_ASN1_INTEGER_get_dec&quot;,\n&quot;P_ASN1_INTEGER_get_hex&quot; or\n&quot;ASN1_INTEGER_get&quot; to decode\n<small>ASN1_INTEGER</small> object.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">X509_get0_serialNumber</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\navailable in Net-SSLeay-1.86 onwards</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>X509_get0_serialNumber()</b>\nis the same as <b>X509_get_serialNumber()</b> except it\naccepts a const parameter and returns a const result.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_version</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n&rsquo;version&rsquo; value of given X509 certificate\n$x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_version($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: (integer) version</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_ext</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nX509_EXTENSION from $x509 based on given position/index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_ext($x509, $index); <br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# $index - (integer) position/index of extension within\n$x509 <br>\n# <br>\n# returns: value corresponding to openssl's X509_EXTENSION\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_ext_by_NID</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nX509_EXTENSION from $x509 based on given\n<small>NID.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_ext_by_NID($x509, $nid, $loc); <br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# $nid - (integer) NID value <br>\n# $loc - (integer) position to start lookup at <br>\n# <br>\n# returns: position/index of extension, negative value on\nerror <br>\n# call Net::SSLeay::X509_get_ext($x509, $rv) to get the\nactual extension</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_fingerprint</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nfingerprint of certificate $cert.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function. The implementation is based on\nopenssl&rsquo;s &quot;X509_digest()&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_get_fingerprint($x509,\n$type); <br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# $type - (string) digest type, currently supported values:\n<br>\n# &quot;md5&quot; <br>\n# &quot;sha1&quot; <br>\n# &quot;sha256&quot; <br>\n# &quot;ripemd160&quot; <br>\n# <br>\n# returns: certificate digest - hexadecimal string (NOT\nbinary data!)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_issuer_name</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return an\nX509_NAME object representing the issuer of the certificate\n$cert.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_issuer_name($cert); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: value corresponding to openssl's X509_NAME\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_notAfter</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return an\nobject giving the time after which the certificate $cert is\nnot valid.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_notAfter($cert); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: value corresponding to openssl's ASN1_TIME\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To get human\nreadable/printable form the return value you can use:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $time =\nNet::SSLeay::X509_get_notAfter($cert); <br>\nprint &quot;notAfter=&quot;,\nNet::SSLeay::P_ASN1_TIME_get_isotime($time),\n&quot;\\n&quot;;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_notBefore</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return an\nobject giving the time before which the certificate $cert is\nnot valid</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_notBefore($cert); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: value corresponding to openssl's ASN1_TIME\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To get human\nreadable/printable form the return value you can use:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $time =\nNet::SSLeay::X509_get_notBefore($cert); <br>\nprint &quot;notBefore=&quot;,\nNet::SSLeay::P_ASN1_TIME_get_isotime($time),\n&quot;\\n&quot;;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_subjectAltNames</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nlist of alternative subject names from X509 certificate\n$cert.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @rv =\nNet::SSLeay::X509_get_subjectAltNames($cert); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: list containing pairs - name_type (integer),\nname_value (string) <br>\n# where name_type can be: <br>\n# 0 - GEN_OTHERNAME <br>\n# 1 - GEN_EMAIL <br>\n# 2 - GEN_DNS <br>\n# 3 - GEN_X400 <br>\n# 4 - GEN_DIRNAME <br>\n# 5 - GEN_EDIPARTY <br>\n# 6 - GEN_URI <br>\n# 7 - GEN_IPADD <br>\n# 8 - GEN_RID</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: type 7 -\n<small>GEN_IPADD</small> contains the <small>IP</small>\naddress as a packed binary address. <small>GEN_RID</small>\nis available in Net-SSLeay-1.90 and later. Maximum length\nfor returned <small>RID</small> string is currently 2500.\nInvalid and overly long <small>RID</small> values are\nskipped and not returned. <small>GEN_X400</small> and\n<small>GEN_EDIPARTY</small> are not supported and will not\nbe returned even when present in the certificate.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_get_subject_name</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nsubject of the certificate $cert.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_get_subject_name($cert); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: value corresponding to openssl's X509_NAME\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_gmtime_adj</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adjust th\n<small>ASN1_TIME</small> object to the timestamp (in\n<small>GMT</small> ).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_gmtime_adj($s, $adj); <br>\n# $s - value corresponding to openssl's ASN1_TIME structure\n<br>\n# $adj - timestamp (seconds since 1.1.1970) <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_TIME\nstructure (0 on failure)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>BEWARE:</small></b>\nthis function may fail for dates after 2038 as it is\ndependent on time_t size on your system (32bit time_t does\nnot work after 2038). Consider using\n&quot;P_ASN1_TIME_set_isotime&quot; instead).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_load_cert_crl_file</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Takes\n<small>PEM</small> file and loads all X509 certificates and\nX509 CRLs from that file into X509_LOOKUP structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_load_cert_crl_file($ctx, $file, $type);\n<br>\n# $ctx - value corresponding to openssl's X509_LOOKUP\nstructure <br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# if not FILETYPE_PEM then behaves as\nNet::SSLeay::X509_load_cert_file() <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_load_cert_file</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads/adds X509\ncertificate from $file to X509_LOOKUP structure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_load_cert_file($ctx, $file, $type); <br>\n# $ctx - value corresponding to openssl's X509_LOOKUP\nstructure <br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">X509_load_crl_file</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads/adds X509\n<small>CRL</small> from $file to X509_LOOKUP structure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_load_crl_file($ctx, $file, $type); <br>\n# $ctx - value corresponding to openssl's X509_LOOKUP\nstructure <br>\n# $file - (string) file name <br>\n# $type - (integer) type - use constants\n&amp;Net::SSLeay::FILETYPE_PEM or\n&amp;Net::SSLeay::FILETYPE_ASN1 <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_policy_level_get0_node</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_level_get0_node($level, $i); <br>\n# $level - value corresponding to openssl's\nX509_POLICY_LEVEL structure <br>\n# $i - (integer) index/position <br>\n# <br>\n# returns: value corresponding to openssl's X509_POLICY_NODE\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_policy_level_node_count</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_level_node_count($level); <br>\n# $level - value corresponding to openssl's\nX509_POLICY_LEVEL structure <br>\n# <br>\n# returns: (integer) node count</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_policy_node_get0_parent</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_node_get0_parent($node); <br>\n# $node - value corresponding to openssl's X509_POLICY_NODE\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's X509_POLICY_NODE\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_policy_node_get0_policy</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_node_get0_policy($node); <br>\n# $node - value corresponding to openssl's X509_POLICY_NODE\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_OBJECT\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_policy_node_get0_qualifiers</p> </td>\n<td width=\"34%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_node_get0_qualifiers($node); <br>\n# $node - value corresponding to openssl's X509_POLICY_NODE\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's\nSTACK_OF(POLICYQUALINFO) structure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_policy_tree_free</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_policy_tree_free($tree);\n<br>\n# $tree - value corresponding to openssl's X509_POLICY_TREE\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_policy_tree_get0_level</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_tree_get0_level($tree, $i); <br>\n# $tree - value corresponding to openssl's X509_POLICY_TREE\nstructure <br>\n# $i - (integer) level index <br>\n# <br>\n# returns: value corresponding to openssl's\nX509_POLICY_LEVEL structure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"46%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_policy_tree_get0_policies</p> </td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_tree_get0_policies($tree); <br>\n# $tree - value corresponding to openssl's X509_POLICY_TREE\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's X509_POLICY_NODE\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"54%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_policy_tree_get0_user_policies</p> </td>\n<td width=\"29%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_tree_get0_user_policies($tree);\n<br>\n# $tree - value corresponding to openssl's X509_POLICY_TREE\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's X509_POLICY_NODE\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_policy_tree_level_count</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_policy_tree_level_count($tree); <br>\n# $tree - value corresponding to openssl's X509_POLICY_TREE\nstructure <br>\n# <br>\n# returns: (integer) count</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"45%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_verify_cert_error_string</p> </td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a human\nreadable error string for verification error $n.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_verify_cert_error_string($n); <br>\n# $n - (long) numeric error code <br>\n# <br>\n# returns: error string</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_add_extensions</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds one or\nmore X509 extensions to X509 object $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_add_extensions($x, $ca_cert, $nid,\n$value); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# $ca_cert - value corresponding to openssl's X509 structure\n(issuer's cert - necessary for sertting\nNID_authority_key_identifier) <br>\n# $nid - NID identifying extension to be set <br>\n# $value - extension value <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can set\nmore extensions at once:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_add_extensions($x509, $ca_cert, <br>\n&amp;Net::SSLeay::NID_key_usage =&gt;\n'digitalSignature,keyEncipherment', <br>\n&amp;Net::SSLeay::NID_subject_key_identifier =&gt; 'hash',\n<br>\n&amp;Net::SSLeay::NID_authority_key_identifier =&gt;\n'keyid', <br>\n&amp;Net::SSLeay::NID_authority_key_identifier =&gt;\n'issuer', <br>\n&amp;Net::SSLeay::NID_basic_constraints =&gt; 'CA:FALSE',\n<br>\n&amp;Net::SSLeay::NID_ext_key_usage =&gt;\n'serverAuth,clientAuth', <br>\n&amp;Net::SSLeay::NID_netscape_cert_type =&gt; 'server',\n<br>\n&amp;Net::SSLeay::NID_subject_alt_name =&gt;\n'DNS:s1.dom.com,DNS:s2.dom.com,DNS:s3.dom.com', <br>\n);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_copy_extensions</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Copies X509\nextensions from X509_REQ object to X509 object - handy when\nyou need to turn X509_REQ into X509 certificate.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_X509_copy_extensions($x509_req,\n$x509, $override); <br>\n# $x509_req - value corresponding to openssl's X509_REQ\nstructure <br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# $override - (integer) flag indication whether to override\nalready existing items in $x509 (default 1) <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"52%\">\n\n\n\n<p style=\"margin-top: 1em\">P_X509_get_crl_distribution_points</p> </td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Get the list of\n<small>CRL</small> distribution points from X509\ncertificate.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @cdp =\nNet::SSLeay::P_X509_get_crl_distribution_points($x509); <br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: list of distribution points (usually URLs)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_get_ext_key_usage</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Gets the list\nof extended key usage of given X509 certificate $cert.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @ext_usage =\nNet::SSLeay::P_X509_get_ext_key_usage($cert, $format); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# $format - choose type of return values: 0=OIDs, 1=NIDs,\n2=shortnames, 3=longnames <br>\n# <br>\n# returns: list of values</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Examples:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n@extkeyusage_oid =\nNet::SSLeay::P_X509_get_ext_key_usage($x509,0); <br>\n# returns for example: (&quot;1.3.6.1.5.5.7.3.1&quot;,\n&quot;1.3.6.1.5.5.7.3.2&quot;) <br>\nmy @extkeyusage_nid =\nNet::SSLeay::P_X509_get_ext_key_usage($x509,1); <br>\n# returns for example: (129, 130) <br>\nmy @extkeyusage_sn =\nNet::SSLeay::P_X509_get_ext_key_usage($x509,2); <br>\n# returns for example: (&quot;serverAuth&quot;,\n&quot;clientAuth&quot;) <br>\nmy @extkeyusage_ln =\nNet::SSLeay::P_X509_get_ext_key_usage($x509,3); <br>\n# returns for example: (&quot;TLS Web Server\nAuthentication&quot;, &quot;TLS Web Client\nAuthentication&quot;)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_get_key_usage</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Gets the list\nof key usage of given X509 certificate $cert.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my @keyusage =\nNet::SSLeay::P_X509_get_key_usage($cert); <br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: list of key usage values which can be none, one\nor more from the following list: <br>\n# &quot;digitalSignature&quot; <br>\n# &quot;nonRepudiation&quot; <br>\n# &quot;keyEncipherment&quot; <br>\n# &quot;dataEncipherment&quot; <br>\n# &quot;keyAgreement&quot; <br>\n# &quot;keyCertSign&quot; <br>\n# &quot;cRLSign&quot; <br>\n# &quot;encipherOnly&quot; <br>\n# &quot;decipherOnly&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"45%\">\n\n\n\n<p style=\"margin-top: 1em\">P_X509_get_netscape_cert_type</p> </td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Gets the list\nof Netscape cert types of given X509 certificate $cert.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_X509_get_netscape_cert_type($cert);\n<br>\n# $cert - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: list of Netscape type values which can be none,\none or more from the following list: <br>\n# &quot;client&quot; <br>\n# &quot;server&quot; <br>\n# &quot;email&quot; <br>\n# &quot;objsign&quot; <br>\n# &quot;reserved&quot; <br>\n# &quot;sslCA&quot; <br>\n# &quot;emailCA&quot; <br>\n# &quot;objCA&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_get_pubkey_alg</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>ASN1_OBJECT</small> corresponding to X509 certificate\npublic key algorithm.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_get_pubkey_alg($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_OBJECT\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To get textual\nrepresentation use:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $alg =\nNet::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_pubkey_alg($x509));\n<br>\n# returns for example: &quot;rsaEncryption&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_get_signature_alg</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>ASN1_OBJECT</small> corresponding to X509 signarite\nkey algorithm.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_get_signature_alg($x); <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_OBJECT\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To get textual\nrepresentation use:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $alg =\nNet::SSLeay::OBJ_obj2txt(Net::SSLeay::P_X509_get_signature_alg($x509))\n<br>\n# returns for example: &quot;sha1WithRSAEncryption&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_new_null</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a new,\nempty, <small>STACK_OF</small> (X509) structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::sk_X509_new_null(); <br>\n# <br>\n# returns: value corresponding to openssl's STACK_OF(X509)\nstructure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_push</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Pushes an X509\nstructure onto a <small>STACK_OF</small> (X509)\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::sk_X509_push($sk_x509, $x509); <br>\n# $sk_x509 - value corresponding to openssl's STACK_OF(X509)\nstructure <br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: total number of elements after the operation, 0\non failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_pop</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Pops an single\nX509 structure from a <small>STACK_OF</small> (X509)\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $x509 =\nNetSSLeay::sk_X509_pop($sk_x509) <br>\n# $sk_x509 - value corresponding to openssl's STACK_OF(X509)\nstructure <br>\n# <br>\n# returns: a pointer to an X509 structure, undef on\nfailure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/sk_TYPE_pop.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_shift</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Shifts an\nsingle X509 structure onto a <small>STACK_OF</small> (X509)\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $x509 =\nNetSSLeay::sk_X509_shift($sk_x509, $x509) <br>\n# $sk_x509 - value corresponding to openssl's STACK_OF(X509)\nstructure <br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# <br>\n# returns: a pointer to an X509 structure, undef on\nfailure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/sk_TYPE_shift.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_unshift</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unshifts an\nsingle X509 structure from a <small>STACK_OF</small> (X509)\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNetSSLeay::sk_X509_unshift($sk_x509) <br>\n# $sk_x509 - value corresponding to openssl's STACK_OF(X509)\nstructure <br>\n# <br>\n# returns: total number of elements after the operation, 0\non failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/sk_TYPE_unshift.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_insert</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Inserts a\nsingle X509 structure into a <small>STACK_OF</small> (X509)\nat the specified index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::sk_X509_insert($sk_x509, $x509, index); <br>\n# $sk_x509 - value corresponding to openssl's STACK_OF(X509)\nstructure <br>\n# $x509 - value corresponding to openssl's X509 structure\n<br>\n# index - integer - 0 based index <br>\n# <br>\n# returns: total number of elements after the operation, 0\non failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/sk_TYPE_insert.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_delete</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Delete a single\nX509 structure from a <small>STACK_OF</small> (X509) at the\nspecified index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $x509 =\nNet::SSLeay::sk_X509_delete($sk_x509, index); <br>\n# $sk_x509 - value corresponding to openssl's STACK_OF(X509)\nstructure <br>\n# index - integer - 0 based index <br>\n# <br>\n# returns: a pointer to an X509 structure, undef on\nfailure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/sk_TYPE_delete.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_value</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return a single\nX509 structure from a <small>STACK_OF</small> (X509) at the\nspecified index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $x509 =\nNet::SSLeay::sk_X509_value($sk_x509, index) <br>\n# $sk_x509 - value corresponding to openssl's STACK_OF(X509)\nstructure <br>\n# index - integer - 0 based index <br>\n# <br>\n# returns: a pointer to an X509 structure, undef on\nfailure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/sk_TYPE_value.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_num</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return the\nnumber of X509 elements in a <small>STACK_OF</small>\n(X509).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $num =\nNet::SSLeay::sk_X509_num($sk_x509); <br>\n# $sk_x509 - value corresponding to openssl's STACK_OF(X509)\nstructure <br>\n# <br>\n# returns: the number of elements in the stack, -1 if the\npassed stack is NULL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/sk_TYPE_num.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> X509_REQ_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_new</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\nX509_REQ structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_new(); <br>\n# <br>\n# returns: value corresponding to openssl's X509_REQ\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_free</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Free an\nallocated X509_REQ structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_REQ_free($x);\n<br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_add1_attr_by_NID</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds an\nattribute whose name is defined by a <small>NID</small>\n$nid. The field value to be added is in $bytes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_add1_attr_by_NID($req, $nid, $type,\n$bytes); <br>\n# $req - value corresponding to openssl's X509_REQ structure\n<br>\n# $nid - (integer) NID value <br>\n# $type - (integer) type of data in $bytes (see below) <br>\n# $bytes - data to be set <br>\n# <br>\n# returns: 1 on success, 0 on failure <br>\n# values for $type - use constants: <br>\n&amp;Net::SSLeay::MBSTRING_UTF8 - $bytes contains utf8\nencoded data <br>\n&amp;Net::SSLeay::MBSTRING_ASC - $bytes contains ASCII\ndata</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_digest</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\ndigest/fingerprint of X509_REQ $data using $type hash\nfunction.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$digest_value = Net::SSLeay::X509_REQ_digest($data, $type);\n<br>\n# $data - value corresponding to openssl's X509_REQ\nstructure <br>\n# $type - value corresponding to openssl's EVP_MD structure\n- e.g. got via EVP_get_digestbyname() <br>\n# <br>\n# returns: hash value (binary) <br>\n#to get printable (hex) value of digest use: <br>\nprint unpack('H*', $digest_value);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_get_attr_by_NID</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieve the\nnext index matching $nid after $lastpos ($lastpos should\ninitially be set to -1).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_get_attr_by_NID($req, $nid,\n$lastpos=-1); <br>\n# $req - value corresponding to openssl's X509_REQ structure\n<br>\n# $nid - (integer) NID value <br>\n# $lastpos - [optional] (integer) index where to start\nsearch (default -1) <br>\n# <br>\n# returns: index (-1 if there are no more entries)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: use\n&quot;P_X509_REQ_get_attr&quot; to get the actual attribute\nvalue - e.g.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $index =\nNet::SSLeay::X509_REQ_get_attr_by_NID($req, $nid); <br>\nmy @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req,\n$index);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_get_attr_by_OBJ</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieve the\nnext index matching $obj after $lastpos ($lastpos should\ninitially be set to -1).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_get_attr_by_OBJ($req, $obj,\n$lastpos=-1); <br>\n# $req - value corresponding to openssl's X509_REQ structure\n<br>\n# $obj - value corresponding to openssl's ASN1_OBJECT\nstructure <br>\n# $lastpos - [optional] (integer) index where to start\nsearch (default -1) <br>\n# <br>\n# returns: index (-1 if there are no more entries)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: use\n&quot;P_X509_REQ_get_attr&quot; to get the actual attribute\nvalue - e.g.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $index =\nNet::SSLeay::X509_REQ_get_attr_by_NID($req, $nid); <br>\nmy @attr_values = Net::SSLeay::P_X509_REQ_get_attr($req,\n$index);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_get_attr_count</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ntotal number of attributes in $req.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_get_attr_count($req); <br>\n# $req - value corresponding to openssl's X509_REQ structure\n<br>\n# <br>\n# returns: (integer) items count</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_get_pubkey</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns public\nkey corresponding to given X509_REQ object $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_get_pubkey($x); <br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# <br>\n# returns: value corresponding to openssl's EVP_PKEY\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_get_subject_name</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nX509_NAME object corresponding to subject name of given\nX509_REQ object $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_get_subject_name($x); <br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# <br>\n# returns: value corresponding to openssl's X509_NAME\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_get_version</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n&rsquo;version&rsquo; value for given X509_REQ object\n$x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_get_version($x); <br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# <br>\n# returns: (integer) version e.g. 0 = &quot;version\n1&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_set_pubkey</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets public key\nof given X509_REQ object $x to $pkey.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_set_pubkey($x, $pkey); <br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_set_subject_name</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets subject\nname of given X509_REQ object $x to X509_NAME object\n$name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_set_subject_name($x, $name); <br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_set_version</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets\n&rsquo;version&rsquo; of given X509_REQ object $x to\n$version.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_set_version($x, $version); <br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# $version - (integer) e.g. 0 = &quot;version 1&quot; <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_sign</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sign X509_REQ\nobject $x with private key $pk (using digest algorithm\n$md).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_sign($x, $pk, $md); <br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# $pk - value corresponding to openssl's EVP_PKEY structure\n(requestor's private key) <br>\n# $md - value corresponding to openssl's EVP_MD structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_REQ_verify</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Verifies\nX509_REQ object $x using public key $r (pubkey of requesting\nparty).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_REQ_verify($x, $r); <br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# $r - value corresponding to openssl's EVP_PKEY structure\n<br>\n# <br>\n# returns: 0 - verify failure, 1 - verify OK, &lt;0 -\nerror</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_REQ_add_extensions</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds one or\nmore X509 extensions to X509_REQ object $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_REQ_add_extensions($x, $nid, $value);\n<br>\n# $x - value corresponding to openssl's X509_REQ structure\n<br>\n# $nid - NID identifying extension to be set <br>\n# $value - extension value <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can set\nmore extensions at once:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_REQ_add_extensions($x509_req, <br>\n&amp;Net::SSLeay::NID_key_usage =&gt;\n'digitalSignature,keyEncipherment', <br>\n&amp;Net::SSLeay::NID_basic_constraints =&gt; 'CA:FALSE',\n<br>\n&amp;Net::SSLeay::NID_ext_key_usage =&gt;\n'serverAuth,clientAuth', <br>\n&amp;Net::SSLeay::NID_netscape_cert_type =&gt; 'server',\n<br>\n&amp;Net::SSLeay::NID_subject_alt_name =&gt;\n'DNS:s1.com,DNS:s2.com', <br>\n&amp;Net::SSLeay::NID_crl_distribution_points =&gt;\n'URI:http://pki.com/crl1,URI:http://pki.com/crl2', <br>\n);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_REQ_get_attr</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nattribute value for X509_REQ&rsquo;s attribute at index\n$n.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_X509_REQ_get_attr($req,\n$n); <br>\n# $req - value corresponding to openssl's X509_REQ structure\n<br>\n# $n - (integer) attribute index <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_STRING\nstructure</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> X509_CRL_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_new</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\nX509_CRL structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_new(); <br>\n# <br>\n# returns: value corresponding to openssl's X509_CRL\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_free</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Free an\nallocated X509_CRL structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_CRL_free($x);\n<br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_digest</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\ndigest/fingerprint of X509_CRL $data using $type hash\nfunction.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$digest_value = Net::SSLeay::X509_CRL_digest($data, $type);\n<br>\n# $data - value corresponding to openssl's X509_CRL\nstructure <br>\n# $type - value corresponding to openssl's EVP_MD structure\n- e.g. got via EVP_get_digestbyname() <br>\n# <br>\n# returns: hash value (binary)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $x509_crl\n<br>\nmy $md =\nNet::SSLeay::EVP_get_digestbyname(&quot;sha1&quot;); <br>\nmy $digest_value = Net::SSLeay::X509_CRL_digest($x509_crl,\n$md); <br>\n#to get printable (hex) value of digest use: <br>\nprint &quot;digest=&quot;, unpack('H*', $digest_value),\n&quot;\\n&quot;;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_get_ext</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.54 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nX509_EXTENSION from $x509 based on given position/index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_get_ext($x509, $index); <br>\n# $x509 - value corresponding to openssl's X509_CRL\nstructure <br>\n# $index - (integer) position/index of extension within\n$x509 <br>\n# <br>\n# returns: value corresponding to openssl's X509_EXTENSION\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_get_ext_by_NID</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.54 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nX509_EXTENSION from $x509 based on given\n<small>NID.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_get_ext_by_NID($x509, $nid, $loc);\n<br>\n# $x509 - value corresponding to openssl's X509_CRL\nstructure <br>\n# $nid - (integer) NID value <br>\n# $loc - (integer) position to start lookup at <br>\n# <br>\n# returns: position/index of extension, negative value on\nerror <br>\n# call Net::SSLeay::X509_CRL_get_ext($x509, $rv) to get the\nactual extension</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_get_ext_count</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.54 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ntotal number of extensions in X509_CRL object $x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_get_ext_count($x); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: count of extensions</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_get_issuer</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nX509_NAME object corresponding to the issuer of X509_CRL\n$x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_get_issuer($x); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: value corresponding to openssl's X509_NAME\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See other\n&quot;X509_NAME_*&quot; functions to get more info from\nX509_NAME structure.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_get_lastUpdate</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n&rsquo;lastUpdate&rsquo; date-time value of X509_CRL object\n$x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_get_lastUpdate($x); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: value corresponding to openssl's ASN1_TIME\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_get_nextUpdate</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n&rsquo;nextUpdate&rsquo; date-time value of X509_CRL object\n$x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_get_nextUpdate($x); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: value corresponding to openssl's ASN1_TIME\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_get_version</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n&rsquo;version&rsquo; value of given X509_CRL structure\n$x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_get_version($x); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: (integer) version</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_set_issuer_name</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the issuer\nof X509_CRL object $x to X509_NAME object $name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_set_issuer_name($x, $name); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_set_lastUpdate</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets\n&rsquo;lastUpdate&rsquo; value of X509_CRL object $x to\n$tm.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_set_lastUpdate($x, $tm); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# $tm - value corresponding to openssl's ASN1_TIME structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_set_nextUpdate</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets\n&rsquo;nextUpdate&rsquo; value of X509_CRL object $x to\n$tm.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_set_nextUpdate($x, $tm); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# $tm - value corresponding to openssl's ASN1_TIME structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_set_version</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets\n&rsquo;version&rsquo; value of given X509_CRL structure $x\nto $version.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_set_version($x, $version); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# $version - (integer) version number (1 = version 2 CRL)\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that if\nyou want to use any X509_CRL extension you need to set\n&quot;version 2 <small>CRL&quot;</small> -\n&quot;Net::SSLeay::X509_CRL_set_version($x, 1)&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_sign</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sign X509_CRL\nobject $x with private key $pkey (using digest algorithm\n$md).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_sign($x, $pkey, $md); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# $pkey - value corresponding to openssl's EVP_PKEY\nstructure <br>\n# $md - value corresponding to openssl's EVP_MD structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_sort</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sorts the data\nof X509_CRL object so it will be written in serial number\norder.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_sort($x); <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_CRL_verify</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Verifies\nX509_CRL object $a using public key $r (pubkey of issuing\n<small>CA</small> ).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_CRL_verify($a, $r); <br>\n# $a - value corresponding to openssl's X509_CRL structure\n<br>\n# $r - value corresponding to openssl's EVP_PKEY structure\n<br>\n# <br>\n# returns: 0 - verify failure, 1 - verify OK, &lt;0 -\nerror</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"51%\">\n\n\n\n<p style=\"margin-top: 1em\">P_X509_CRL_add_revoked_serial_hex</p> </td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds given\nserial number $serial_hex to X509_CRL object $crl.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::P_X509_CRL_add_revoked_serial_hex($crl,\n$serial_hex, $rev_time, $reason_code, $comp_time); <br>\n# $crl - value corresponding to openssl's X509_CRL structure\n<br>\n# $serial_hex - string (hexadecimal) representation of\nserial number <br>\n# $rev_time - (revocation time) value corresponding to\nopenssl's ASN1_TIME structure <br>\n# $reason_code - [optional] (integer) reason code (see\nbelow) - default 0 <br>\n# $comp_time - [optional] (compromise time) value\ncorresponding to openssl's ASN1_TIME structure <br>\n# <br>\n# returns: no return value <br>\nreason codes: <br>\n0 - unspecified <br>\n1 - keyCompromise <br>\n2 - CACompromise <br>\n3 - affiliationChanged <br>\n4 - superseded <br>\n5 - cessationOfOperation <br>\n6 - certificateHold <br>\n7 - removeFromCRL</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_CRL_get_serial</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns serial\nnumber of X509_CRL object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_CRL_get_serial($crl); <br>\n# $crl - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: value corresponding to openssl's ASN1_INTEGER\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_CRL_set_serial</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets serial\nnumber of X509_CRL object to $crl_number.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_CRL_set_serial($crl, $crl_number); <br>\n# $crl - value corresponding to openssl's X509_CRL structure\n<br>\n# $crl_number - value corresponding to openssl's\nASN1_INTEGER structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_CRL_add_extensions</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.88 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds one or\nmore X509 extensions to X509 <small>CRL</small> object\n$x.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_CRL_add_extensions($x, $ca_cert, $nid,\n$value); <br>\n# $x - value corresponding to openssl's X509 CRL structure\n<br>\n# $ca_cert - value corresponding to openssl's X509 structure\n(issuer's cert - necessary for sertting\nNID_authority_key_identifier) <br>\n# $nid - NID identifying extension to be set <br>\n# $value - extension value <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails see &quot;P_X509_add_extensions&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> X509_EXTENSION_* related\nfunctions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_EXTENSION_get_critical</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n&rsquo;critical&rsquo; flag of given X509_EXTENSION object\n$ex.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_EXTENSION_get_critical($ex); <br>\n# $ex - value corresponding to openssl's X509_EXTENSION\nstructure <br>\n# <br>\n# returns: (integer) 1 - critical, 0 - noncritical</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_EXTENSION_get_data</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns value\n(raw data) of X509_EXTENSION object $ne.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_EXTENSION_get_data($ne); <br>\n# $ne - value corresponding to openssl's X509_EXTENSION\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's\nASN1_OCTET_STRING structure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note: you can\nuse &quot;P_ASN1_STRING_get&quot; to convert\n<small>ASN1_OCTET_STRING</small> into perl scalar\nvariable.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">X509_EXTENSION_get_object</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\n<small>OID</small> ( <small>ASN1_OBJECT</small> ) of\nX509_EXTENSION object $ne.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_EXTENSION_get_object($ex); <br>\n# $ex - value corresponding to openssl's X509_EXTENSION\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_OBJECT\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">X509V3_EXT_print</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns string\nrepresentation of given X509_EXTENSION object $ext.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509V3_EXT_print($ext,\n$flags, $utf8_decode); <br>\n# $ext - value corresponding to openssl's X509_EXTENSION\nstructure <br>\n# $flags - [optional] (integer) Currently the flag argument\nis unused and should be set to 0 <br>\n# $utf8_decode - [optional] 0 or 1 whether the returned\nvalue should be utf8 decoded (default=0) <br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">X509V3_EXT_d2i</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Parses an\nextension and returns its internal structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509V3_EXT_d2i($ext); <br>\n# $ext - value corresponding to openssl's X509_EXTENSION\nstructure <br>\n# <br>\n# returns: pointer ???</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> X509_NAME_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_ENTRY_get_data</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieves the\nfield value of $ne in and <small>ASN1_STRING</small>\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_ENTRY_get_data($ne); <br>\n# $ne - value corresponding to openssl's X509_NAME_ENTRY\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_STRING\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_ENTRY_get_object</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieves the\nfield name of $ne in and <small>ASN1_OBJECT</small>\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_ENTRY_get_object($ne); <br>\n# $ne - value corresponding to openssl's X509_NAME_ENTRY\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's ASN1_OBJECT\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_ENTRY_get_object.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_new</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.55 and before; requires at\nleast openssl-0.9.5</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\nX509_NAME structure. Adds a field whose name is defined by a\nstring $field. The field value to be added is in $bytes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_new(); <br>\n# <br>\n# returns: value corresponding to openssl's X509_NAME\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_hash</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.55 and before; requires at\nleast openssl-0.9.5</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sort of a\nchecksum of issuer name $name. The result is not a full hash\n(e.g. sha-1), it is kind-of-a-hash truncated to the size of\n&rsquo;unsigned long&rsquo; (32 bits). The resulting value\nmight differ across different openssl versions for the same\nX509 certificate.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_hash($name); <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# <br>\n# returns: number representing checksum</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_add_entry_by_txt</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.5</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds a field\nwhose name is defined by a string $field. The field value to\nbe added is in $bytes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_add_entry_by_txt($name, $field,\n$type, $bytes, $len, $loc, $set); <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# $field - (string) field definition (name) - e.g.\n&quot;organizationName&quot; <br>\n# $type - (integer) type of data in $bytes (see below) <br>\n# $bytes - data to be set <br>\n# $loc - [optional] (integer) index where the new entry is\ninserted: if it is -1 (default) it is appended <br>\n# $set - [optional] (integer) determines how the new type is\nadded. If it is 0 (default) a new RDN is created <br>\n# <br>\n# returns: 1 on success, 0 on failure <br>\n# values for $type - use constants: <br>\n&amp;Net::SSLeay::MBSTRING_UTF8 - $bytes contains utf8\nencoded data <br>\n&amp;Net::SSLeay::MBSTRING_ASC - $bytes contains ASCII\ndata</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unicode note:\nwhen passing non-ascii (unicode) string in $bytes do not\nforget to set &quot;$flags =\n&amp;Net::SSLeay::MBSTRING_UTF8&quot; and encode the perl\n$string via &quot;$bytes = encode('utf-8',\n$string)&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_add_entry_by_NID</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.5</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds a field\nwhose name is defined by a <small>NID</small> $nid. The\nfield value to be added is in $bytes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_add_entry_by_NID($name, $nid, $type,\n$bytes, $len, $loc, $set); <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# $nid - (integer) field definition - NID value <br>\n# $type - (integer) type of data in $bytes (see below) <br>\n# $bytes - data to be set <br>\n# $loc - [optional] (integer) index where the new entry is\ninserted: if it is -1 (default) it is appended <br>\n# $set - [optional] (integer) determines how the new type is\nadded. If it is 0 (default) a new RDN is created <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_add_entry_by_OBJ</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-0.9.5</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds a field\nwhose name is defined by a object ( <small>OID</small> )\n$obj . The field value to be added is in $bytes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_add_entry_by_OBJ($name, $obj, $type,\n$bytes, $len, $loc, $set); <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# $obj - field definition - value corresponding to openssl's\nASN1_OBJECT structure <br>\n# $type - (integer) type of data in $bytes (see below) <br>\n# $bytes - data to be set <br>\n# $loc - [optional] (integer) index where the new entry is\ninserted: if it is -1 (default) it is appended <br>\n# $set - [optional] (integer) determines how the new type is\nadded. If it is 0 (default) a new RDN is created <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_add_entry_by_txt.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_cmp</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Compares two\nX509_NAME obejcts.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_cmp($a, $b); <br>\n# $a - value corresponding to openssl's X509_NAME structure\n<br>\n# $b - value corresponding to openssl's X509_NAME structure\n<br>\n# <br>\n# returns: 0 if $a matches $b; non zero otherwise</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_digest</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\ndigest/fingerprint of X509_NAME $data using $type hash\nfunction.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$digest_value = Net::SSLeay::X509_NAME_digest($data, $type);\n<br>\n# $data - value corresponding to openssl's X509_NAME\nstructure <br>\n# $type - value corresponding to openssl's EVP_MD structure\n- e.g. got via EVP_get_digestbyname() <br>\n# <br>\n# returns: hash value (binary) <br>\n#to get printable (hex) value of digest use: <br>\nprint unpack('H*', $digest_value);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_entry_count</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ntotal number of entries in $name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_entry_count($name); <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# <br>\n# returns: (integer) entries count</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_get_entry</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieves the\nX509_NAME_ENTRY from $name corresponding to index $loc.\nAcceptable values for $loc run from 0 to\n&quot;Net::SSLeay::X509_NAME_entry_count($name)- 1&quot;.\nThe value returned is an internal pointer which must not be\nfreed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_NAME_get_entry($name, $loc); <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# $loc - (integer) index of wanted entry <br>\n# <br>\n# returns: value corresponding to openssl's X509_NAME_ENTRY\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_print_ex</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nstring with human readable version of $name.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_NAME_print_ex($name,\n$flags, $utf8_decode); <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# $flags - [optional] conversion flags (default\nXN_FLAG_RFC2253) - see below <br>\n# $utf8_decode - [optional] 0 or 1 whether the returned\nvalue should be utf8 decoded (default=0) <br>\n# <br>\n# returns: string representation of $name <br>\n#available conversion flags - use constants: <br>\n&amp;Net::SSLeay::XN_FLAG_COMPAT <br>\n&amp;Net::SSLeay::XN_FLAG_DN_REV <br>\n&amp;Net::SSLeay::XN_FLAG_DUMP_UNKNOWN_FIELDS <br>\n&amp;Net::SSLeay::XN_FLAG_FN_ALIGN <br>\n&amp;Net::SSLeay::XN_FLAG_FN_LN <br>\n&amp;Net::SSLeay::XN_FLAG_FN_MASK <br>\n&amp;Net::SSLeay::XN_FLAG_FN_NONE <br>\n&amp;Net::SSLeay::XN_FLAG_FN_OID <br>\n&amp;Net::SSLeay::XN_FLAG_FN_SN <br>\n&amp;Net::SSLeay::XN_FLAG_MULTILINE <br>\n&amp;Net::SSLeay::XN_FLAG_ONELINE <br>\n&amp;Net::SSLeay::XN_FLAG_RFC2253 <br>\n&amp;Net::SSLeay::XN_FLAG_SEP_COMMA_PLUS <br>\n&amp;Net::SSLeay::XN_FLAG_SEP_CPLUS_SPC <br>\n&amp;Net::SSLeay::XN_FLAG_SEP_MASK <br>\n&amp;Net::SSLeay::XN_FLAG_SEP_MULTILINE <br>\n&amp;Net::SSLeay::XN_FLAG_SEP_SPLUS_SPC <br>\n&amp;Net::SSLeay::XN_FLAG_SPC_EQ</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Most likely you\nwill be fine with default:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_NAME_print_ex($name,\n&amp;Net::SSLeay::XN_FLAG_RFC2253);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Or you might\nwant RFC2253-like output without utf8 chars escaping:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">use Net::SSLeay\nqw/XN_FLAG_RFC2253 ASN1_STRFLGS_ESC_MSB/; <br>\nmy $flag_rfc22536_utf8 = (XN_FLAG_RFC2253) &amp; (~\nASN1_STRFLGS_ESC_MSB); <br>\nmy $result = Net::SSLeay::X509_NAME_print_ex($name,\n$flag_rfc22536_utf8, 1);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_get_text_by_NID</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieves the\ntext from the first entry in name which matches $nid, if no\nsuch entry exists -1 is returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>openssl\nnote:</b> this is a legacy function which has various\nlimitations which makes it of minimal use in practice. It\ncan only find the first matching entry and will copy the\ncontents of the field verbatim: this can be highly confusing\nif the target is a multicharacter string type like a\nBMPString or a UTF8String.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_NAME_get_text_by_NID($name,\n$nid); <br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# $nid - NID value (integer) <br>\n# <br>\n# returns: text value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_get_index_by_NID.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">X509_NAME_oneline</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return an\n<small>ASCII</small> version of $name.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_NAME_oneline($name);\n<br>\n# $name - value corresponding to openssl's X509_NAME\nstructure <br>\n# <br>\n# returns: (string) ASCII version of $name</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_NAME_print_ex.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_NAME_free</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Free an\nallocated <small>STACK_OF</small> (X509_NAME) structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::sk_X509_NAME_free($sk);\n<br>\n# $sk - value corresponding to openssl's STACK_OF(X509_NAME)\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_NAME_num</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return number\nof items in <small>STACK_OF</small> (X509_NAME)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::sk_X509_NAME_num($sk); <br>\n# $sk - value corresponding to openssl's STACK_OF(X509_NAME)\nstructure <br>\n# <br>\n# returns: number of items</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_NAME_value</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns\nX509_NAME from position $index in <small>STACK_OF</small>\n(X509_NAME)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::sk_X509_NAME_value($sk, $i); <br>\n# $sk - value corresponding to openssl's STACK_OF(X509_NAME)\nstructure <br>\n# $i - (integer) index/position <br>\n# <br>\n# returns: value corresponding to openssl's X509_NAME\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"48%\">\n\n\n\n<p style=\"margin-top: 1em\">add_file_cert_subjects_to_stack</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Add a file of\ncerts to a stack. All certs in $file that are not already in\nthe $stackCAs will be added.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::add_file_cert_subjects_to_stack($stackCAs,\n$file); <br>\n# $stackCAs - value corresponding to openssl's\nSTACK_OF(X509_NAME) structure <br>\n# $file - (string) filename <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"46%\">\n\n\n\n<p style=\"margin-top: 1em\">add_dir_cert_subjects_to_stack</p> </td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Add a directory\nof certs to a stack. All certs in $dir that are not already\nin the $stackCAs will be added.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::add_dir_cert_subjects_to_stack($stackCAs,\n$dir); <br>\n# $stackCAs - value corresponding to openssl's\nSTACK_OF(X509_NAME) structure <br>\n# $dir - (string) the directory to append from. All files in\nthis directory will be examined as potential certs. Any that\nare acceptable to SSL_add_dir_cert_subjects_to_stack() that\nare not already in the stack will be included. <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> X509_STORE_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_new</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">returns a newly\ninitialised X509_STORE_CTX structure.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_init</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>X509_STORE_CTX_init()</b>\nsets up an X509_STORE_CTX for a subsequent verification\noperation. It must be called before each call to\n<b>X509_verify_cert()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_CTX_init($x509_store_ctx,\n$x509_store, $x509, $chain); <br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure (required) <br>\n# $x509_store - value corresponding to openssl's X509_STORE\nstructure (optional) <br>\n# $x509 - value corresponding to openssl's X509 structure\n(optional) <br>\n# $chain - value corresponding to openssl's STACK_OF(X509)\nstructure (optional) <br>\n# <br>\n# returns: 1 on success, 0 on failure <br>\n# <br>\n# Note: returns nothing with Net::SSLeay 1.90 and\nearlier.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_init.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_free</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Frees an\nX509_STORE_CTX structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_STORE_CTX_free($x509_store_ctx);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#\n$x509_store_ctx - value corresponding to openssl&rsquo;s\nX509_STORE_CTX structure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">X509_verify_cert</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<b>X509_verify_cert()</b> function attempts to discover and\nvalidate a certificate chain based on parameters in ctx. A\ncomplete description of the process is contained in the\n<a href=\"https://man.page/1/verify\">verify(1)</a> manual page.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If this\nfunction returns 0, use X509_STORE_CTX_get_error to get\nadditional error information.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_verify_cert($x509_store_ctx); <br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# <br>\n# returns: 1 if a complete chain can be built and validated,\notherwise 0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/X509_verify_cert.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"48%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_get_current_cert</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncertificate in ctx which caused the error or 0 if no\ncertificate is relevant.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_CTX_get_current_cert($x509_store_ctx);\n<br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# <br>\n# returns: value corresponding to openssl's X509 structure\n(0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_get0_cert</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY</small></b>\n: not available in Net-SSLeay-1.88 and before; requires at\nleast OpenSSL 1.1.0pre6 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns an\ninternal pointer to the certificate being verified by the\nctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $x509 =\nNet::SSLeay::X509_STORE_CTX_get0_cert($x509_store_ctx); <br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# <br>\n# returns: value corresponding to openssl's X509\nstructure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get0_cert.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_get1_chain</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nreturns a complete validate chain if a previous call to\n<b>X509_verify_cert()</b> is successful.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_CTX_get1_chain($x509_store_ctx);\n<br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# <br>\n# returns: value corresponding to openssl's STACK_OF(X509)\nstructure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/X509_STORE_CTX_get1_chain.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_get_error</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nerror code of $ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_CTX_get_error($x509_store_ctx); <br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# <br>\n# returns: (integer) error code</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more info\nabout erro code values check function\n&quot;get_verify_result&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"46%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_get_error_depth</p> </td>\n<td width=\"37%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ndepth of the error. This is a non-negative integer\nrepresenting where in the certificate chain the error\noccurred. If it is zero it occurred in the end entity\ncertificate, one if it is the certificate which signed the\nend entity certificate and so on.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_CTX_get_error_depth($x509_store_ctx);\n<br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# <br>\n# returns: (integer) depth</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_get_ex_data</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nretrieve the information for $idx from $x509_store_ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_CTX_get_ex_data($x509_store_ctx,\n$idx); <br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# $idx - (integer) index for application specific data <br>\n# <br>\n# returns: pointer to ???</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_set_ex_data</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Is used to\nstore application data at arg for idx into\n$x509_store_ctx.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_CTX_set_ex_data($x509_store_ctx,\n$idx, $data); <br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# $idx - (integer) ??? <br>\n# $data - (pointer) ??? <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_set_cert</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\ncertificate to be verified in $x509_store_ctx to $x.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_STORE_CTX_set_cert($x509_store_ctx,\n$x); <br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_STORE_CTX_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_new</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a newly\ninitialized X509_STORE structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_new(); <br>\n# <br>\n# returns: value corresponding to openssl's X509_STORE\nstructure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_free</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Frees an\nX509_STORE structure</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_STORE_free($x509_store);\n<br>\n# $x509_store - value corresponding to openssl's X509_STORE\nstructure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_add_lookup</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds a lookup\nto an X509_STORE for a given lookup method.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $method =\n&amp;Net::SSLeay::X509_LOOKUP_hash_dir; <br>\nmy $rv = Net::SSLeay::X509_STORE_add_lookup($x509_store,\n$method); <br>\n# $method - value corresponding to openssl's\nX509_LOOKUP_METHOD structure <br>\n# $x509_store - value corresponding to openssl's X509_STORE\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's X509_LOOKUP\nstructure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/X509_STORE_add_lookup.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_CTX_set_error</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the error\ncode of $ctx to $s. For example it might be used in a\nverification callback to set an error based on additional\nchecks.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_STORE_CTX_set_error($x509_store_ctx,\n$s); <br>\n# $x509_store_ctx - value corresponding to openssl's\nX509_STORE_CTX structure <br>\n# $s - (integer) error id <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_STORE_CTX_get_error.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_add_cert</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds X509\ncertificate $x into the X509_STORE $store.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_add_cert($store, $x); <br>\n# $store - value corresponding to openssl's X509_STORE\nstructure <br>\n# $x - value corresponding to openssl's X509 structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_add_crl</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds X509\n<small>CRL</small> $x into the X509_STORE $store.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_add_crl($store, $x); <br>\n# $store - value corresponding to openssl's X509_STORE\nstructure <br>\n# $x - value corresponding to openssl's X509_CRL structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_set1_param</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_STORE_set1_param($store, $pm); <br>\n# $store - value corresponding to openssl's X509_STORE\nstructure <br>\n# $pm - value corresponding to openssl's X509_VERIFY_PARAM\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_LOOKUP_hash_dir</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns an\nX509_LOOKUP structure that instructs an X509_STORE to load\nfiles from a directory containing certificates with\nfilenames in the format <i>hash.N</i> or crls with filenames\nin the format <i>hash.</i><b>r</b><i>N</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_LOOKUP_hash_dir(); <br>\n# <br>\n# returns: value corresponding to openssl's\nX509_LOOKUP_METHOD structure, with the hashed directory\nmethod</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/man1.1.1/man3/X509_load_crl_file.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">X509_LOOKUP_add_dir</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Add a directory\nto an X509_LOOKUP structure, usually obtained from\nX509_STORE_add_lookup.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $method =\n&amp;Net::SSLeay::X509_LOOKUP_hash_dir; <br>\nmy $lookup = Net::SSLeay::X509_STORE_add_lookup($x509_store,\n$method); <br>\nmy $type = &amp;Net::SSLeay::X509_FILETYPE_PEM; <br>\nNet::SSLeay::X509_LOOKUP_add_dir($lookup, $dir, $type); <br>\n# $lookup - value corresponding to openssl's X509_LOOKUP\nstructure <br>\n# $dir - string path to a directory <br>\n# $type - constant corresponding to the type of file in the\ndirectory - can be X509_FILETYPE_PEM, X509_FILETYPE_DEFAULT,\nor X509_FILETYPE_ASN1</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_set_flags</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_STORE_set_flags($ctx,\n$flags); <br>\n# $ctx - value corresponding to openssl's X509_STORE\nstructure <br>\n# $flags - (unsigned long) flags to be set (bitmask) <br>\n# <br>\n# returns: no return value <br>\n#to create $flags value use corresponding constants like\n<br>\n$flags = Net::SSLeay::X509_V_FLAG_CRL_CHECK();</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about $flags bitmask see\n&quot;X509_VERIFY_PARAM_set_flags&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_set_purpose</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_STORE_set_purpose($ctx,\n$purpose); <br>\n# $ctx - value corresponding to openssl's X509_STORE\nstructure <br>\n# $purpose - (integer) purpose identifier <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about $purpose identifier check\n&quot;CTX_set_purpose&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">X509_STORE_set_trust</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_STORE_set_trust($ctx,\n$trust); <br>\n# $ctx - value corresponding to openssl's X509_STORE\nstructure <br>\n# $trust - (integer) trust identifier <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about $trust identifier check\n&quot;CTX_set_trust&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low Level\n<small>API: X509_INFO</small> related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_INFO_num</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nnumber of values in a <small>STACK_OF</small> (X509_INFO)\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::sk_X509_INFO_num($sk_x509_info); <br>\n# $sk_x509_info - value corresponding to openssl's\nSTACK_OF(X509_INFO) structure <br>\n# <br>\n# returns: number of values in $sk_X509_info</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">sk_X509_INFO_value</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nvalue of a <small>STACK_OF</small> (X509_INFO) structure at\na given index.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::sk_X509_INFO_value($sk_x509_info, $index); <br>\n# $sk_x509_info - value corresponding to openssl's\nSTACK_OF(X509_INFO) structure <br>\n# $index - index into the stack <br>\n# <br>\n# returns: value corresponding to openssl's X509_INFO\nstructure at the given index</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">P_X509_INFO_get_x509</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nX509 structure stored in an X509_INFO structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_X509_INFO_get_x509($x509_info); <br>\n# $x509_info - value corresponding to openssl's X509_INFO\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's X509\nstructure</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> X509_VERIFY_PARAM_* related\nfunctions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"45%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_add0_policy</p> </td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Enables policy\nchecking (it is disabled by default) and adds $policy to the\nacceptable policy set.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_add0_policy($param, $policy);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $policy - value corresponding to openssl's ASN1_OBJECT\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_add0_table</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_add0_table($param); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_add1_host</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta2 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds an\nadditional reference identifier that can match the\npeer&rsquo;s certificate.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_add1_host($param, $name);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $name - (string) name to be set <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See also\nOpenSSL docs, &quot;X509_VERIFY_PARAM_set1_host&quot; and\n&quot;X509_VERIFY_PARAM_set_hostflags&quot; for more\ninformation, including wildcard matching.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"45%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_clear_flags</p> </td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Clears the\nflags $flags in param.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_clear_flags($param, $flags);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $flags - (unsigned long) flags to be set (bitmask) <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about $flags bitmask see\n&quot;X509_VERIFY_PARAM_set_flags&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_free</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Frees up the\nX509_VERIFY_PARAM structure.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_VERIFY_PARAM_free($param);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"48%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_get0_peername</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta2 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\n<small>DNS</small> hostname or subject CommonName from the\npeer certificate that matched one of the reference\nidentifiers.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_get0_peername($param); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# <br>\n# returns: (string) name e.g. '*.example.com' or undef</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_get_depth</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncurrent verification depth.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_get_depth($param); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# <br>\n# returns: (ineger) depth</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_get_flags</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\ncurrent verification flags.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_get_flags($param); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# <br>\n# returns: (unsigned long) flags to be set (bitmask)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about returned flags bitmask see\n&quot;X509_VERIFY_PARAM_set_flags&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set_flags</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set_flags($param, $flags);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $flags - (unsigned long) flags to be set (bitmask) <br>\n# <br>\n# returns: 1 on success, 0 on failure <br>\n#to create $flags value use corresponding constants like\n<br>\n$flags = Net::SSLeay::X509_V_FLAG_CRL_CHECK();</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about $flags bitmask, see the OpenSSL docs\nbelow.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_inherit</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_inherit($to, $from); <br>\n# $to - value corresponding to openssl's X509_VERIFY_PARAM\nstructure <br>\n# $from - value corresponding to openssl's X509_VERIFY_PARAM\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_lookup</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Finds\nX509_VERIFY_PARAM by name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_lookup($name); <br>\n# $name - (string) name we want to find <br>\n# <br>\n# returns: value corresponding to openssl's\nX509_VERIFY_PARAM structure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_new</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\nX509_VERIFY_PARAM structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_new(); <br>\n# <br>\n# returns: value corresponding to openssl's\nX509_VERIFY_PARAM structure (0 on failure)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set1</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the name\nof X509_VERIFY_PARAM structure $to to the same value as the\nname of X509_VERIFY_PARAM structure $from.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set1($to, $from); <br>\n# $to - value corresponding to openssl's X509_VERIFY_PARAM\nstructure <br>\n# $from - value corresponding to openssl's X509_VERIFY_PARAM\nstructure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set1_email</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nexpected <small>RFC822</small> email address to email.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set1_email($param, $email);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $email - (string) email to be set <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set1_host</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nexpected <small>DNS</small> hostname to name clearing any\npreviously specified host name or names.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set1_host($param, $name);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $name - (string) name to be set <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See also\nOpenSSL docs, &quot;X509_VERIFY_PARAM_add1_host&quot; and\n&quot;X509_VERIFY_PARAM_set_hostflags&quot; for more\ninformation, including wildcard matching.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set1_ip</p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nexpected <small>IP</small> address to ip.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set1_ip($param, $ip); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $ip - (binary) 4 octet IPv4 or 16 octet IPv6 address <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"45%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set1_ip_asc</p> </td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta1 or LibreSSL 2.7.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nexpected <small>IP</small> address to ipasc.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set1_asc($param, $ipasc);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $ip - (string) IPv4 or IPv6 address <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set1_name</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the name\nof X509_VERIFY_PARAM structure $param to $name.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set1_name($param, $name);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $name - (string) name to be set <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"48%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set1_policies</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Enables policy\nchecking (it is disabled by default) and sets the acceptable\npolicy set to policies. Any existing policy set is cleared.\nThe policies parameter can be 0 to clear an existing policy\nset.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set1_policies($param,\n$policies); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $policies - value corresponding to openssl's\nSTACK_OF(ASN1_OBJECT) structure <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set_depth</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nmaximum verification depth to depth. That is the maximum\nnumber of untrusted <small>CA</small> certificates that can\nappear in a chain.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_VERIFY_PARAM_set_depth($param,\n$depth); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $depth - (integer) depth to be set <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"48%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set_hostflags</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.82 and before; requires at\nleast OpenSSL 1.0.2-beta2 or LibreSSL 2.7.0</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_VERIFY_PARAM_set_hostflags($param,\n$flags); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $flags - (unsigned int) flags to be set (bitmask) <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See also\nOpenSSL docs, &quot;X509_VERIFY_PARAM_add1_host&quot; and\n&quot;X509_VERIFY_PARAM_set1_host&quot; for more\ninformation. The flags for controlling wildcard checks and\nother features are defined in OpenSSL docs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"45%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set_purpose</p> </td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nverification purpose in $param to $purpose. This determines\nthe acceptable purpose of the certificate chain, for example\n<small>SSL</small> client or <small>SSL</small> server.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set_purpose($param,\n$purpose); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $purpose - (integer) purpose identifier <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about $purpose identifier check\n&quot;CTX_set_purpose&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set_time</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the\nverification time in $param to $t. Normally the current time\nis used.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_VERIFY_PARAM_set_time($param,\n$t); <br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $t - (time_t) time in seconds since 1.1.1970 <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_set_trust</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets the trust\nsetting in $param to $trust.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::X509_VERIFY_PARAM_set_trust($param, $trust);\n<br>\n# $param - value corresponding to openssl's\nX509_VERIFY_PARAM structure <br>\n# $trust - (integer) trust identifier <br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For more\ndetails about $trust identifier check\n&quot;CTX_set_trust&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/X509_VERIFY_PARAM_set_flags.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"48%\">\n\n\n\n<p style=\"margin-top: 1em\">X509_VERIFY_PARAM_table_cleanup</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">??? (more info\nneeded)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::X509_VERIFY_PARAM_table_cleanup();\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> Cipher (EVP_CIPHER_*) related\nfunctions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">EVP_get_cipherbyname</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns an\n<small>EVP_CIPHER</small> structure when passed a cipher\nname.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_get_cipherbyname($name); <br>\n# $name - (string) cipher name e.g. 'aes-128-cbc',\n'camellia-256-ecb', 'des-ede', ... <br>\n# <br>\n# returns: value corresponding to openssl's EVP_CIPHER\nstructure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/EVP_EncryptInit.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> Digest (EVP_MD_*) related\nfunctions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">OpenSSL_add_all_digests</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::OpenSSL_add_all_digests();\n<br>\n# no args, no return value</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">http://www.openssl.org/docs/crypto/OpenSSL_add_all_algorithms.html</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">P_EVP_MD_list_all</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-1.0.0</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nDoes not exactly correspond to any low level\n<small>API</small> function</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::P_EVP_MD_list_all(); <br>\n# <br>\n# returns: arrayref - list of available digest names</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The returned\ndigest names correspond to values expected by\n&quot;EVP_get_digestbyname&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that some\nof the digests are available by default and some only after\ncalling &quot;OpenSSL_add_all_digests&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">EVP_get_digestbyname</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_get_digestbyname($name); <br>\n# $name - string with digest name <br>\n# <br>\n# returns: value corresponding to openssl's EVP_MD\nstructure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The $name param\ncan be:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">md2 <br>\nmd4 <br>\nmd5 <br>\nmdc2 <br>\nripemd160 <br>\nsha <br>\nsha1 <br>\nsha224 <br>\nsha256 <br>\nsha512 <br>\nwhirlpool</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Or better check\nthe supported digests by calling\n&quot;P_EVP_MD_list_all&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">EVP_MD_type</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_MD_type($md); <br>\n# $md - value corresponding to openssl's EVP_MD structure\n<br>\n# <br>\n# returns: the NID (integer) of the OBJECT IDENTIFIER\nrepresenting the given message digest</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">EVP_MD_size</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_MD_size($md); <br>\n# $md - value corresponding to openssl's EVP_MD structure\n<br>\n# <br>\n# returns: the size of the message digest in bytes (e.g. 20\nfor SHA1)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">EVP_MD_CTX_md</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::EVP_MD_CTX_md($ctx);\n<br>\n# $ctx - value corresponding to openssl's EVP_MD_CTX\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's EVP_MD\nstructure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">EVP_MD_CTX_create</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Allocates,\ninitializes and returns a digest context.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_MD_CTX_create(); <br>\n# <br>\n# returns: value corresponding to openssl's EVP_MD_CTX\nstructure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The complete\nidea behind <small>EVP_MD_CTX</small> looks like this\nexample:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::OpenSSL_add_all_digests();\n<br>\nmy $md =\nNet::SSLeay::EVP_get_digestbyname(&quot;sha1&quot;); <br>\nmy $ctx = Net::SSLeay::EVP_MD_CTX_create(); <br>\nNet::SSLeay::EVP_DigestInit($ctx, $md); <br>\nwhile(my $chunk = get_piece_of_data()) { <br>\nNet::SSLeay::EVP_DigestUpdate($ctx,$chunk); <br>\n} <br>\nmy $result = Net::SSLeay::EVP_DigestFinal($ctx); <br>\nNet::SSLeay::EVP_MD_CTX_destroy($ctx); <br>\nprint &quot;digest=&quot;, unpack('H*', $result),\n&quot;\\n&quot;; #print hex value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\">EVP_DigestInit_ex</p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Sets up digest\ncontext $ctx to use a digest $type from\n<small>ENGINE</small> $impl, $ctx must be initialized before\ncalling this function, type will typically be supplied by a\nfunction such as &quot;EVP_get_digestbyname&quot;. If $impl\nis 0 then the default implementation of digest $type is\nused.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_DigestInit_ex($ctx, $type, $impl); <br>\n# $ctx - value corresponding to openssl's EVP_MD_CTX\nstructure <br>\n# $type - value corresponding to openssl's EVP_MD structure\n<br>\n# $impl - value corresponding to openssl's ENGINE structure\n<br>\n# <br>\n# returns: 1 for success and 0 for failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">EVP_DigestInit</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Behaves in the\nsame way as &quot;EVP_DigestInit_ex&quot; except the passed\ncontext $ctx does not have to be initialized, and it always\nuses the default digest implementation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_DigestInit($ctx, $type); <br>\n# $ctx - value corresponding to openssl's EVP_MD_CTX\nstructure <br>\n# $type - value corresponding to openssl's EVP_MD structure\n<br>\n# <br>\n# returns: 1 for success and 0 for failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">EVP_MD_CTX_destroy</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Cleans up\ndigest context $ctx and frees up the space allocated to it,\nit should be called only on a context created using\n&quot;EVP_MD_CTX_create&quot;.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::EVP_MD_CTX_destroy($ctx);\n<br>\n# $ctx - value corresponding to openssl's EVP_MD_CTX\nstructure <br>\n# <br>\n# returns: no return value</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">EVP_DigestUpdate</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_DigestUpdate($ctx, $data); <br>\n# $ctx - value corresponding to openssl's EVP_MD_CTX\nstructure <br>\n# $data - data to be hashed <br>\n# <br>\n# returns: 1 for success and 0 for failure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">EVP_DigestFinal_ex</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Retrieves the\ndigest value from $ctx. After calling\n&quot;EVP_DigestFinal_ex&quot; no additional calls to\n&quot;EVP_DigestUpdate&quot; can be made, but\n&quot;EVP_DigestInit_ex&quot; can be called to initialize a\nnew digest operation.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my\n$digest_value = Net::SSLeay::EVP_DigestFinal_ex($ctx); <br>\n# $ctx - value corresponding to openssl's EVP_MD_CTX\nstructure <br>\n# <br>\n# returns: hash value (binary) <br>\n#to get printable (hex) value of digest use: <br>\nprint unpack('H*', $digest_value);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">EVP_DigestFinal</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Similar to\n&quot;EVP_DigestFinal_ex&quot; except the digest context ctx\nis automatically cleaned up.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_DigestFinal($ctx); <br>\n# $ctx - value corresponding to openssl's EVP_MD_CTX\nstructure <br>\n# <br>\n# returns: hash value (binary) <br>\n#to get printable (hex) value of digest use: <br>\nprint unpack('H*', $digest_value);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\"><small>MD2</small></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small><b>COMPATIBILITY:</b></small>\nno supported by default in openssl-1.0.0</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\n<small>MD2</small> from given $data (all data needs to be\nloaded into memory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $digest =\nNet::SSLeay::MD2($data); <br>\nprint &quot;digest(hexadecimal)=&quot;, unpack('H*',\n$digest);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\"><small>MD4</small></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\n<small>MD4</small> from given $data (all data needs to be\nloaded into memory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $digest =\nNet::SSLeay::MD4($data); <br>\nprint &quot;digest(hexadecimal)=&quot;, unpack('H*',\n$digest);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\"><small>MD5</small></p></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\n<small>MD5</small> from given $data (all data needs to be\nloaded into memory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $digest =\nNet::SSLeay::MD5($data); <br>\nprint &quot;digest(hexadecimal)=&quot;, unpack('H*',\n$digest);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\"><small>RIPEMD160</small></p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\n<small>RIPEMD160</small> from given $data (all data needs to\nbe loaded into memory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $digest =\nNet::SSLeay::RIPEMD160($data); <br>\nprint &quot;digest(hexadecimal)=&quot;, unpack('H*',\n$digest);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><small>SHA1</small></p></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small><b>COMPATIBILITY:</b></small>\nnot available in Net-SSLeay-1.42 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\n<small>SHA1</small> from given $data (all data needs to be\nloaded into memory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $digest =\nNet::SSLeay::SHA1($data); <br>\nprint &quot;digest(hexadecimal)=&quot;, unpack('H*',\n$digest);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><small>SHA256</small></p></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small><b>COMPATIBILITY:</b></small>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.8</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\n<small>SHA256</small> from given $data (all data needs to be\nloaded into memory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $digest =\nNet::SSLeay::SHA256($data); <br>\nprint &quot;digest(hexadecimal)=&quot;, unpack('H*',\n$digest);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><small>SHA512</small></p></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small><b>COMPATIBILITY:</b></small>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.8</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\n<small>SHA512</small> from given $data (all data needs to be\nloaded into memory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $digest =\nNet::SSLeay::SHA512($data); <br>\nprint &quot;digest(hexadecimal)=&quot;, unpack('H*',\n$digest);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">EVP_Digest</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.7</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Computes\n&quot;any&quot; digest from given $data (all data needs to\nbe loaded into memory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $md =\nNet::SSLeay::EVP_get_digestbyname(&quot;sha1&quot;); #or any\nother algorithm <br>\nmy $digest = Net::SSLeay::EVP_Digest($data, $md); <br>\nprint &quot;digest(hexadecimal)=&quot;, unpack('H*',\n$digest);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">EVP_sha1</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $md =\nNet::SSLeay::EVP_sha1(); <br>\n# <br>\n# returns: value corresponding to openssl's EVP_MD\nstructure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">EVP_sha256</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nrequires at least openssl-0.9.8</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $md =\nNet::SSLeay::EVP_sha256(); <br>\n# <br>\n# returns: value corresponding to openssl's EVP_MD\nstructure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\">EVP_sha512</p></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before; requires at\nleast openssl-0.9.8</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $md =\nNet::SSLeay::EVP_sha512(); <br>\n# <br>\n# returns: value corresponding to openssl's EVP_MD\nstructure</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">EVP_add_digest</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::EVP_add_digest($digest); <br>\n# $digest - value corresponding to openssl's EVP_MD\nstructure <br>\n# <br>\n# returns: 1 on success, 0 otherwise</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> CIPHER_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CIPHER_get_name</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.42 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns name of\nthe cipher used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CIPHER_get_name($cipher); <br>\n# $cipher - value corresponding to openssl's SSL_CIPHER\nstructure <br>\n# <br>\n# returns: (string) cipher name e.g. 'DHE-RSA-AES256-SHA',\n'(NONE)' if $cipher is undefined.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_CIPHER_get_name.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $ssl_cipher\n= Net::SSLeay::get_current_cipher($ssl); <br>\nmy $cipher_name =\nNet::SSLeay::CIPHER_get_name($ssl_cipher);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CIPHER_description</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\ndoesn&rsquo;t work correctly in Net-SSLeay-1.88 and\nbefore</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\ntextual description of the cipher used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CIPHER_description($cipher); <br>\n# $cipher - value corresponding to openssl's SSL_CIPHER\nstructure <br>\n# <br>\n# returns: (string) cipher description e.g.\n'DHE-RSA-AES256-SHA SSLv3 Kx=DH Au=RSA Enc=AES(256)\nMac=SHA1'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_CIPHER_description.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">CIPHER_get_bits</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\n$alg_bits doesn&rsquo;t work correctly in Net-SSLeay-1.88\nand before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nnumber of secret bits used for cipher.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CIPHER_get_bits($cipher, $alg_bits); <br>\n# $cipher - value corresponding to openssl's SSL_CIPHER\nstructure <br>\n# $alg_bits - [optional] empty scalar for storing additional\nreturn value <br>\n# <br>\n# returns: (integer) number of secret bits, 0 on error <br>\n# (integer) in $alg_bits for bits processed by the chosen\nalgorithm</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_CIPHER_get_bits.html&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># bits and\nalg_bits are not equal for e.g.,\nTLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, <br>\n# RFC 8422 name TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA <br>\nmy $alg_bits; <br>\nmy $bits = Net::SSLeay::CIPHER_get_bits($cipher, $alg_bits);\n<br>\n#my $bits = Net::SSLeay::CIPHER_get_bits($cipher); <br>\nprint &quot;bits: $bits, alg_bits: $alg_bits\\n&quot;;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">CIPHER_get_version</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.88 and before</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns version\nof <small>SSL/TLS</small> protocol that first defined the\ncipher</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::CIPHER_get_version($cipher); <br>\n# $cipher - value corresponding to openssl's SSL_CIPHER\nstructure <br>\n# <br>\n# returns: (string) cipher name e.g. 'TLSv1/SSLv3' with some\nlibraries, 'TLSv1.0' or 'TLSv1.3', '(NONE)' if $cipher is\nundefined.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/ssl/SSL_CIPHER_get_version.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> RSA_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">RSA_generate_key</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Generates a key\npair and returns it in a newly allocated <small>RSA</small>\nstructure. The pseudo-random number generator must be seeded\nprior to calling RSA_generate_key.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::RSA_generate_key($bits, $e, $perl_cb,\n$perl_cb_arg); <br>\n# $bits - (integer) modulus size in bits e.g. 512, 1024,\n2048 <br>\n# $e - (integer) public exponent, an odd number, typically\n3, 17 or 65537 <br>\n# $perl_cb - [optional] reference to perl callback function\n<br>\n# $perl_cb_arg - [optional] data that will be passed to\ncallback function when invoked <br>\n# <br>\n# returns: value corresponding to openssl's RSA structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RSA_generate_key.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">RSA_free</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Frees the\n<small>RSA</small> structure and its components. The key is\nerased before the memory is returned to the system.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::RSA_free($r);\n<br>\n# $r - value corresponding to openssl's RSA structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/RSA_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">RSA_get_key_parameters</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a list\nof pointers to BIGNUMs representing the parameters of the\nkey in this order: (n, e, d, p, q, dmp1, dmq1, iqmp)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Caution:\nreturned list consists of <small>SV</small> pointers to\nBIGNUMs, which would need to be blessed as\nCrypt::OpenSSL::Bignum for further use</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my (@params) =\nRSA_get_key_parameters($r);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> BIO_* related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">BIO_eof</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns 1 if\nthe <small>BIO</small> has read <small>EOF,</small> the\nprecise meaning of &rsquo; <small>EOF</small> &rsquo; varies\naccording to the <small>BIO</small> type.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_eof($s); <br>\n# $s - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: 1 if EOF has been reached 0 otherwise</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_ctrl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">BIO_f_ssl</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\n<small>SSL BIO</small> method. This is a filter\n<small>BIO</small> which is a wrapper round the OpenSSL\n<small>SSL</small> routines adding a <small>BIO</small>\n&rsquo;flavour&rsquo; to <small>SSL I/O.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_f_ssl(); <br>\n# <br>\n# returns: value corresponding to openssl's BIO_METHOD\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_f_ssl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">BIO_free</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Frees up a\nsingle <small>BIO.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_free($bio;); <br>\n# $bio; - value corresponding to openssl's BIO structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">BIO_new</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a new\n<small>BIO</small> using method $type</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_new($type); <br>\n# $type - value corresponding to openssl's BIO_METHOD\nstructure <br>\n# <br>\n# returns: value corresponding to openssl's BIO structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">BIO_new_buffer_ssl_connect</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>BIO</small> chain consisting of a buffering\n<small>BIO,</small> an <small>SSL BIO</small> (using ctx)\nand a connect <small>BIO.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_new_buffer_ssl_connect($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: value corresponding to openssl's BIO structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_f_ssl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">BIO_new_file</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\nfile <small>BIO</small> with mode $mode the meaning of mode\nis the same as the stdio function <b>fopen()</b>. The\n<small>BIO_CLOSE</small> flag is set on the returned\n<small>BIO.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_new_file($filename, $mode); <br>\n# $filename - (string) filename <br>\n# $mode - (string) opening mode (as mode by stdio function\nfopen) <br>\n# <br>\n# returns: value corresponding to openssl's BIO structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_s_file.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">BIO_new_ssl</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Allocates an\n<small>SSL BIO</small> using <small>SSL_CTX</small> ctx and\nusing client mode if client is non zero.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_new_ssl($ctx, $client); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $client - (integer) 0 or 1 - indicates ssl client mode\n<br>\n# <br>\n# returns: value corresponding to openssl's BIO structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_f_ssl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">BIO_new_ssl_connect</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Creates a new\n<small>BIO</small> chain consisting of an <small>SSL\nBIO</small> (using ctx) followed by a connect\n<small>BIO.</small></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_new_ssl_connect($ctx); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# <br>\n# returns: value corresponding to openssl's BIO structure (0\non failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_f_ssl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">BIO_pending</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return the\nnumber of pending characters in the BIOs read buffers.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_pending($s); <br>\n# $s - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: the amount of pending data</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_ctrl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\">BIO_wpending</p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return the\nnumber of pending characters in the BIOs write buffers.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_wpending($s); <br>\n# $s - value corresponding to openssl's BIO structure <br>\n# <br>\n# returns: the amount of pending data</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_ctrl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">BIO_read</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Read the\nunderlying descriptor.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::BIO_read($s,\n$max); <br>\n# $s - value corresponding to openssl's BIO structure <br>\n# $max - [optional] max. bytes to read (if not specified,\nthe value 32768 is used) <br>\n# <br>\n# returns: data</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_read.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">BIO_write</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Attempts to\nwrite data from $buffer to <small>BIO</small> $b.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_write($b, $buffer); <br>\n# $b - value corresponding to openssl's BIO structure <br>\n# $buffer - data <br>\n# <br>\n# returns: amount of data successfully written <br>\n# or that no data was successfully read or written if the\nresult is 0 or -1 <br>\n# or -2 when the operation is not implemented in the\nspecific BIO type</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_read.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"14%\">\n\n\n<p style=\"margin-top: 1em\">BIO_s_mem</p></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Return the\nmemory <small>BIO</small> method function.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_s_mem(); <br>\n# <br>\n# returns: value corresponding to openssl's BIO_METHOD\nstructure (0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_s_mem.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">BIO_ssl_copy_session_id</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Copies an\n<small>SSL</small> session id between <small>BIO</small>\nchains from and to. It does this by locating the\n<small>SSL</small> BIOs in each chain and calling\n<b>SSL_copy_session_id()</b> on the internal\n<small>SSL</small> pointer.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::BIO_ssl_copy_session_id($to, $from); <br>\n# $to - value corresponding to openssl's BIO structure <br>\n# $from - value corresponding to openssl's BIO structure\n<br>\n# <br>\n# returns: 1 on success, 0 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_f_ssl.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">BIO_ssl_shutdown</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Closes down an\n<small>SSL</small> connection on <small>BIO</small> chain\nbio. It does this by locating the <small>SSL BIO</small> in\nthe chain and calling <b>SSL_shutdown()</b> on its internal\n<small>SSL</small> pointer.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::BIO_ssl_shutdown($ssl_bio);\n<br>\n# $ssl_bio - value corresponding to openssl's BIO structure\n<br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/BIO_f_ssl.html&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> Server side Server Name Indication (\n<small>SNI</small> ) support</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">set_tlsext_host_name</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>TBA</small></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"21%\">\n\n\n<p style=\"margin-top: 1em\">get_servername</p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>TBA</small></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">get_servername_type</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>TBA</small></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"52%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_set_tlsext_servername_callback</p> </td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nrequires at least OpenSSL 0.9.8f</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nis used in a server to support Server side Server Name\nIndication ( <small>SNI</small> ).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_tlsext_servername_callback($ctx,\n$code) <br>\n# $ctx - SSL context <br>\n# $code - reference to a subroutine that will be called when\na new connection is being initiated <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">On the client\nside: use set_tlsext_host_name($ssl, $servername) before\ninitiating the <small>SSL</small> connection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">On the server\nside: Set up an additional <b><small>SSL_CTX</small> ()</b>\nfor each different certificate;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Add a\nservername callback to each <b><small>SSL_CTX</small> ()</b>\nusing <b>CTX_set_tlsext_servername_callback()</b>;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The callback\nfunction is required to retrieve the client-supplied\nservername with get_servername(ssl). Figure out the right\n<small>SSL_CTX</small> to go with that host name, then\nswitch the <small>SSL</small> object to that\n<small>SSL_CTX</small> with <b>set_SSL_CTX()</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># set callback\n<br>\nNet::SSLeay::CTX_set_tlsext_servername_callback($ctx, <br>\nsub { <br>\nmy $ssl = shift; <br>\nmy $h = Net::SSLeay::get_servername($ssl); <br>\nNet::SSLeay::set_SSL_CTX($ssl, $hostnames{$h}-&gt;{ctx}) if\nexists $hostnames{$h}; <br>\n} );</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">More complete\nexample:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># ...\ninitialize Net::SSLeay <br>\nmy %hostnames = ( <br>\n'sni1' =&gt; { cert=&gt;'sni1.pem', key=&gt;'sni1.key' },\n<br>\n'sni2' =&gt; { cert=&gt;'sni2.pem', key=&gt;'sni2.key' },\n<br>\n); <br>\n# create a new context for each certificate/key pair <br>\nfor my $name (keys %hostnames) { <br>\n$hostnames{$name}-&gt;{ctx} = Net::SSLeay::CTX_new or die;\n<br>\n\nNet::SSLeay::CTX_set_cipher_list($hostnames{$name}-&gt;{ctx},\n'ALL'); <br>\nNet::SSLeay::set_cert_and_key($hostnames{$name}-&gt;{ctx},\n<br>\n$hostnames{$name}-&gt;{cert}, $hostnames{$name}-&gt;{key})\nor die; <br>\n} <br>\n# create default context <br>\nmy $ctx = Net::SSLeay::CTX_new or die; <br>\nNet::SSLeay::CTX_set_cipher_list($ctx, 'ALL'); <br>\nNet::SSLeay::set_cert_and_key($ctx, 'cert.pem','key.pem') or\ndie; <br>\n# set callback <br>\nNet::SSLeay::CTX_set_tlsext_servername_callback($ctx, sub {\n<br>\nmy $ssl = shift; <br>\nmy $h = Net::SSLeay::get_servername($ssl); <br>\nNet::SSLeay::set_SSL_CTX($ssl, $hostnames{$h}-&gt;{ctx}) if\nexists $hostnames{$h}; <br>\n} ); <br>\n# ... later <br>\n$s = Net::SSLeay::new($ctx); <br>\nNet::SSLeay::set_fd($s, fileno($accepted_socket)); <br>\nNet::SSLeay::accept($s);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API: NPN</small> (next protocol negotiation) related\nfunctions</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>NPN</small>\nis being replaced with <small>ALPN,</small> a more recent\n<small>TLS</small> extension for application protocol\nnegotiation that&rsquo;s in process of being adopted by\n<small>IETF.</small> Please look below for <small>APLN\nAPI</small> description.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Simple approach\nfor using <small>NPN</small> support looks like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">### client side\n<br>\nuse Net::SSLeay; <br>\nuse IO::Socket::INET; <br>\nNet::SSLeay::initialize(); <br>\nmy $sock =\nIO::Socket::INET-&gt;new(PeerAddr=&gt;'encrypted.google.com:443')\nor die; <br>\nmy $ctx = Net::SSLeay::CTX_tlsv1_new() or die; <br>\nNet::SSLeay::CTX_set_options($ctx,\n&amp;Net::SSLeay::OP_ALL); <br>\nNet::SSLeay::CTX_set_next_proto_select_cb($ctx,\n['http1.1','spdy/2']); <br>\nmy $ssl = Net::SSLeay::new($ctx) or die; <br>\nNet::SSLeay::set_fd($ssl, fileno($sock)) or die; <br>\nNet::SSLeay::connect($ssl); <br>\nwarn\n&quot;client:negotiated=&quot;,Net::SSLeay::P_next_proto_negotiated($ssl),\n&quot;\\n&quot;; <br>\nwarn &quot;client:last_status=&quot;,\nNet::SSLeay::P_next_proto_last_status($ssl), &quot;\\n&quot;;\n<br>\n### server side <br>\nuse Net::SSLeay; <br>\nuse IO::Socket::INET; <br>\nNet::SSLeay::initialize(); <br>\nmy $ctx = Net::SSLeay::CTX_tlsv1_new() or die; <br>\nNet::SSLeay::CTX_set_options($ctx,\n&amp;Net::SSLeay::OP_ALL); <br>\nNet::SSLeay::set_cert_and_key($ctx, &quot;cert.pem&quot;,\n&quot;key.pem&quot;); <br>\nNet::SSLeay::CTX_set_next_protos_advertised_cb($ctx,\n['spdy/2','http1.1']); <br>\nmy $sock =\nIO::Socket::INET-&gt;new(LocalAddr=&gt;'localhost',\nLocalPort=&gt;5443, Proto=&gt;'tcp', Listen=&gt;20) or die;\n<br>\nwhile (1) { <br>\nmy $ssl = Net::SSLeay::new($ctx); <br>\nwarn(&quot;server:waiting for incoming\nconnection...\\n&quot;); <br>\nmy $fd = $sock-&gt;accept(); <br>\nNet::SSLeay::set_fd($ssl, $fd-&gt;fileno); <br>\nNet::SSLeay::accept($ssl); <br>\nwarn\n&quot;server:negotiated=&quot;,Net::SSLeay::P_next_proto_negotiated($ssl),&quot;\\n&quot;;\n<br>\nmy $got = Net::SSLeay::read($ssl); <br>\nNet::SSLeay::ssl_write_all($ssl,\n&quot;length=&quot;.length($got)); <br>\nNet::SSLeay::free($ssl); <br>\n$fd-&gt;close(); <br>\n} <br>\n# check with: openssl s_client -connect localhost:5443\n-nextprotoneg http/1.1,spdy/2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Please note\nthat the selection (negotiation) is performed by client\nside, the server side simply advertise the list of supported\nprotocols.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Advanced\napproach allows you to implement your own negotiation\nalgorithm.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#see below\ndocumentation for: <br>\nNet::SSleay::CTX_set_next_proto_select_cb($ctx,\n$perl_callback_function, $callback_data); <br>\nNet::SSleay::CTX_set_next_protos_advertised_cb($ctx,\n$perl_callback_function, $callback_data);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Detection of\n<small>NPN</small> support (works even in older Net::SSLeay\nversions):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::SSLeay; <br>\nif (exists &amp;Net::SSLeay::P_next_proto_negotiated) { <br>\n# do NPN stuff <br>\n}</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"43%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_set_next_proto_select_cb</p> </td>\n<td width=\"40%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-1.0.1</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nYou need CTX_set_next_proto_select_cb on <b>client side</b>\nof <small>SSL</small> connection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Simple usage -\nin this case a &quot;common&quot; negotiation algorithm (as\nimplemented by openssl&rsquo;s function\nSSL_select_next_proto) is used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSleay::CTX_set_next_proto_select_cb($ctx, $arrayref);\n<br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $arrayref - list of accepted protocols - e.g. ['http1.0',\n'http1.1'] <br>\n# <br>\n# returns: 0 on success, 1 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Advanced usage\n(you probably do not need this):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSleay::CTX_set_next_proto_select_cb($ctx,\n$perl_callback_function, $callback_data); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $perl_callback_function - reference to perl function <br>\n# $callback_data - [optional] data to passed to callback\nfunction when invoked <br>\n# <br>\n# returns: 0 on success, 1 on failure <br>\n# where callback function looks like <br>\nsub npn_advertised_cb_invoke { <br>\nmy ($ssl, $arrayref_proto_list_advertised_by_server,\n$callback_data) = @_; <br>\nmy $status; <br>\n# ... <br>\n$status = 1; #status can be: <br>\n# 0 - OPENSSL_NPN_UNSUPPORTED <br>\n# 1 - OPENSSL_NPN_NEGOTIATED <br>\n# 2 - OPENSSL_NPN_NO_OVERLAP <br>\nreturn $status, ['http1.1','spdy/2']; # the callback has to\nreturn 2 values <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To\nundefine/clear this callback use:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSleay::CTX_set_next_proto_select_cb($ctx,\nundef);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"51%\">\n\n\n\n<p style=\"margin-top: 1em\">CTX_set_next_protos_advertised_cb</p> </td>\n<td width=\"32%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-1.0.1</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nYou need CTX_set_next_proto_select_cb on <b>server side</b>\nof <small>SSL</small> connection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Simple\nusage:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSleay::CTX_set_next_protos_advertised_cb($ctx,\n$arrayref); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $arrayref - list of advertised protocols - e.g.\n['http1.0', 'http1.1'] <br>\n# <br>\n# returns: 0 on success, 1 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Advanced usage\n(you probably do not need this):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSleay::CTX_set_next_protos_advertised_cb($ctx,\n$perl_callback_function, $callback_data); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $perl_callback_function - reference to perl function <br>\n# $callback_data - [optional] data to passed to callback\nfunction when invoked <br>\n# <br>\n# returns: 0 on success, 1 on failure <br>\n# where callback function looks like <br>\nsub npn_advertised_cb_invoke { <br>\nmy ($ssl, $callback_data) = @_; <br>\n# ... <br>\nreturn ['http1.1','spdy/2']; # the callback has to return\narrayref <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To\nundefine/clear this callback use:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSleay::CTX_set_next_protos_advertised_cb($ctx,\nundef);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">P_next_proto_negotiated</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-1.0.1</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nname of negotiated protocol for given <small>SSL</small>\nconnection $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSLeay::P_next_proto_negotiated($ssl) <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (string) negotiated protocol name (or undef if no\nnegotiation was done or failed with fatal error)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">P_next_proto_last_status</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.45 and before; requires at\nleast openssl-1.0.1</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nresult of the last negotiation for given <small>SSL</small>\nconnection $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSLeay::P_next_proto_last_status($ssl) <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (integer) negotiation status <br>\n# 0 - OPENSSL_NPN_UNSUPPORTED <br>\n# 1 - OPENSSL_NPN_NEGOTIATED <br>\n# 2 - OPENSSL_NPN_NO_OVERLAP</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API: ALPN</small> (application layer protocol\nnegotiation) related functions</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Application\nprotocol can be negotiated via two different mechanisms\nemploying two different <small>TLS</small> extensions:\n<small>NPN</small> (obsolete) and <small>ALPN</small>\n(recommended).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>API</small> is rather similar, with slight\ndifferences reflecting protocol specifics. In particular,\nwith <small>ALPN</small> the protocol negotiation takes\nplace on server, while with <small>NPN</small> the client\nimplements the protocol negotiation logic.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With\n<small>ALPN,</small> the most basic implementation looks\nlike this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">### client side\n<br>\nuse Net::SSLeay; <br>\nuse IO::Socket::INET; <br>\nNet::SSLeay::initialize(); <br>\nmy $sock =\nIO::Socket::INET-&gt;new(PeerAddr=&gt;'encrypted.google.com:443')\nor die; <br>\nmy $ctx = Net::SSLeay::CTX_tlsv1_new() or die; <br>\nNet::SSLeay::CTX_set_options($ctx,\n&amp;Net::SSLeay::OP_ALL); <br>\nNet::SSLeay::CTX_set_alpn_protos($ctx, ['http/1.1',\n'http/2.0', 'spdy/3]); <br>\nmy $ssl = Net::SSLeay::new($ctx) or die; <br>\nNet::SSLeay::set_fd($ssl, fileno($sock)) or die; <br>\nNet::SSLeay::connect($ssl); <br>\nwarn\n&quot;client:selected=&quot;,Net::SSLeay::P_alpn_selected($ssl),\n&quot;\\n&quot;; <br>\n### server side <br>\nuse Net::SSLeay; <br>\nuse IO::Socket::INET; <br>\nNet::SSLeay::initialize(); <br>\nmy $ctx = Net::SSLeay::CTX_tlsv1_new() or die; <br>\nNet::SSLeay::CTX_set_options($ctx,\n&amp;Net::SSLeay::OP_ALL); <br>\nNet::SSLeay::set_cert_and_key($ctx, &quot;cert.pem&quot;,\n&quot;key.pem&quot;); <br>\nNet::SSLeay::CTX_set_alpn_select_cb($ctx, ['http/1.1',\n'http/2.0', 'spdy/3]); <br>\nmy $sock =\nIO::Socket::INET-&gt;new(LocalAddr=&gt;'localhost',\nLocalPort=&gt;5443, Proto=&gt;'tcp', Listen=&gt;20) or die;\n<br>\nwhile (1) { <br>\nmy $ssl = Net::SSLeay::new($ctx); <br>\nwarn(&quot;server:waiting for incoming\nconnection...\\n&quot;); <br>\nmy $fd = $sock-&gt;accept(); <br>\nNet::SSLeay::set_fd($ssl, $fd-&gt;fileno); <br>\nNet::SSLeay::accept($ssl); <br>\nwarn\n&quot;server:selected=&quot;,Net::SSLeay::P_alpn_selected($ssl),&quot;\\n&quot;;\n<br>\nmy $got = Net::SSLeay::read($ssl); <br>\nNet::SSLeay::ssl_write_all($ssl,\n&quot;length=&quot;.length($got)); <br>\nNet::SSLeay::free($ssl); <br>\n$fd-&gt;close(); <br>\n} <br>\n# check with: openssl s_client -connect localhost:5443 -alpn\nspdy/3,http/1.1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Advanced\napproach allows you to implement your own negotiation\nalgorithm.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#see below\ndocumentation for: <br>\nNet::SSleay::CTX_set_alpn_select_cb($ctx,\n$perl_callback_function, $callback_data);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Detection of\n<small>ALPN</small> support (works even in older Net::SSLeay\nversions):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::SSLeay; <br>\nif (exists &amp;Net::SSLeay::P_alpn_selected) { <br>\n# do ALPN stuff <br>\n}</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_alpn_select_cb</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.55 and before; requires at\nleast openssl-1.0.2</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nYou need CTX_set_alpn_select_cb on <b>server side</b> of\n<small>TLS</small> connection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Simple usage -\nin this case a &quot;common&quot; negotiation algorithm (as\nimplemented by openssl&rsquo;s function\nSSL_select_next_proto) is used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSleay::CTX_set_alpn_select_cb($ctx, $arrayref); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $arrayref - list of accepted protocols - e.g. ['http/2.0',\n'http/1.1', 'spdy/3'] <br>\n# <br>\n# returns: 0 on success, 1 on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Advanced usage\n(you probably do not need this):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSleay::CTX_set_alpn_select_cb($ctx,\n$perl_callback_function, $callback_data); <br>\n# $ctx - value corresponding to openssl's SSL_CTX structure\n<br>\n# $perl_callback_function - reference to perl function <br>\n# $callback_data - [optional] data to passed to callback\nfunction when invoked <br>\n# <br>\n# returns: 0 on success, 1 on failure <br>\n# where callback function looks like <br>\nsub alpn_select_cb_invoke { <br>\nmy ($ssl, $arrayref_proto_list_advertised_by_client,\n$callback_data) = @_; <br>\n# ... <br>\nif ($negotiated) { <br>\nreturn 'http/2.0'; <br>\n} else { <br>\nreturn undef; <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To\nundefine/clear this callback use:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSleay::CTX_set_alpn_select_cb($ctx,\nundef);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">set_alpn_protos</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.55 and before; requires at\nleast openssl-1.0.2</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nYou need set_alpn_protos on <b>client side</b> of\n<small>TLS</small> connection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This adds list\nof supported application layer protocols to ClientHello\nmessage sent by a client. It advertises the enumeration of\nsupported protocols:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::set_alpn_protos($ssl,\n['http/1.1', 'http/2.0', 'spdy/3]); <br>\n# returns 0 on success</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_alpn_protos</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.55 and before; requires at\nleast openssl-1.0.2</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>NOTE:</small></b>\nYou need CTX_set_alpn_protos on <b>client side</b> of\n<small>TLS</small> connection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This adds list\nof supported application layer protocols to ClientHello\nmessage sent by a client. It advertises the enumeration of\nsupported protocols:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_alpn_protos($ctx,\n['http/1.1', 'http/2.0', 'spdy/3]); <br>\n# returns 0 on success</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">P_alpn_selected</p></td>\n<td width=\"60%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\nnot available in Net-SSLeay-1.55 and before; requires at\nleast openssl-1.0.2</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nname of negotiated protocol for given <small>TLS</small>\nconnection $ssl.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$rv =\nNet::SSLeay::P_alpn_selected($ssl) <br>\n# $ssl - value corresponding to openssl's SSL structure <br>\n# <br>\n# returns: (string) negotiated protocol name (or undef if no\nnegotiation was done or failed with fatal error)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API: DANE</small> Support</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">OpenSSL version\n1.0.2 adds preliminary support <small>RFC6698</small> Domain\nAuthentication of Named Entities ( <small>DANE</small> )\nTransport Layer Association within OpenSSL</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"40%\">\n\n\n<p style=\"margin-top: 1em\">SSL_get_tlsa_record_byname</p></td>\n<td width=\"43%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>COMPATIBILITY:</small></b>\n<small>DELETED</small> from net-ssleay, since it is not\nsupported by OpenSSL</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In order to\nfacilitate <small>DANE</small> there is additional\ninterface, SSL_get_tlsa_record_byname, accepting hostname,\nport and socket type that returns packed <small>TLSA</small>\nrecord. In order to make it even easier there is additional\nSSL_ctrl function that calls SSL_get_tlsa_record_byname for\nyou. Latter is recommended for programmers that wish to\nmaintain broader binary compatibility, e.g. make application\nwork with both 1.0.2 and prior version (in which case call\nto SSL_ctrl with new code returning error would have to be\nignored when running with prior version).</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::get_tlsa_record_byname($name,\n$port, $type);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API:</small> Other functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"41%\">\n\n\n<p style=\"margin-top: 1em\">COMP_add_compression_method</p></td>\n<td width=\"42%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Adds the\ncompression method cm with the identifier id to the list of\navailable compression methods. This list is globally\nmaintained for all <small>SSL</small> operations within this\napplication. It cannot be set for specific\n<small>SSL_CTX</small> or <small>SSL</small> objects.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::COMP_add_compression_method($id, $cm); <br>\n# $id - (integer) compression method id <br>\n# 0 to 63: methods defined by the IETF <br>\n# 64 to 192: external party methods assigned by IANA <br>\n# 193 to 255: reserved for private use <br>\n# <br>\n# $cm - value corresponding to openssl's COMP_METHOD\nstructure <br>\n# <br>\n# returns: 0 on success, 1 on failure (check the error queue\nto find out the reason)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/ssl/SSL_COMP_add_compression_method.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p style=\"margin-top: 1em\">DH_free</p></td>\n<td width=\"72%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Frees the\n<small>DH</small> structure and its components. The values\nare erased before the memory is returned to the system.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::DH_free($dh);\n<br>\n# $dh - value corresponding to openssl's DH structure <br>\n# <br>\n# returns: no return value</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;http://www.openssl.org/docs/crypto/DH_new.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\">FIPS_mode_set</p></td>\n<td width=\"63%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Enable or\ndisable <small>FIPS</small> mode in a <small>FIPS</small>\ncapable OpenSSL.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::\nFIPS_mode_set($enable); <br>\n# $enable - (integer) 1 to enable, 0 to disable</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API: EC</small> related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"25%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_tmp_ecdh</p></td>\n<td width=\"58%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>TBA</small></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\">EC_KEY_free</p></td>\n<td width=\"66%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>TBA</small></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"37%\">\n\n\n<p style=\"margin-top: 1em\">EC_KEY_new_by_curve_name</p></td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><small>TBA</small></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"29%\">\n\n\n<p style=\"margin-top: 1em\">EC_KEY_generate_key</p></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Generates a\n<small>EC</small> key and returns it in a newly allocated\n<small>EC_KEY</small> structure. The <small>EC</small> key\nthen can be used to create a <small>PKEY</small> which can\nbe used in calls like X509_set_pubkey.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $key =\nNet::SSLeay::EVP_PKEY_new(); <br>\nmy $ec = Net::SSLeay::EC_KEY_generate_key($curve); <br>\nNet::SSLeay::EVP_PKEY_assign_EC_KEY($key,$ec); <br>\n# $curve - curve name like 'secp521r1' or the matching Id\n(integer) of the curve <br>\n# <br>\n# returns: value corresponding to openssl's EC_KEY structure\n(0 on failure)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This function\nhas no equivalent in OpenSSL but combines multiple OpenSSL\nfunctions for an easier interface.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set_ecdh_auto,\nset_ecdh_auto</p> </td>\n<td width=\"34%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These functions\nenable or disable the automatic curve selection on the\nserver side by calling SSL_CTX_set_ecdh_auto or\nSSL_set_ecdh_auto respectively. If enabled the highest\npreference curve is automatically used for\n<small>ECDH</small> temporary keys used during key exchange.\nThis function is no longer available for OpenSSL 1.1.0 or\nhigher.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set_ecdh_auto($ctx,1);\n<br>\nNet::SSLeay::set_ecdh_auto($ssl,1);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"58%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set1_curves_list,\nset1_curves_list</p> </td>\n<td width=\"25%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These functions\nset the supported curves (in order of preference) by calling\nSSL_CTX_set1_curves_list or SSL_set1_curves_list\nrespectively. For a <small>TLS</small> client these curves\nare offered to the server in the supported curves extension\nwhile on the server side these are used to determine the\nshared curve. These functions are only available since\nOpenSSL 1.1.0.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set1_curves_list($ctx,&quot;P-521:P-384:P-256&quot;);\n<br>\n\nNet::SSLeay::set1_curves_list($ssl,&quot;P-521:P-384:P-256&quot;);</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"58%\">\n\n\n<p style=\"margin-top: 1em\">CTX_set1_groups_list,\nset1_groups_list</p> </td>\n<td width=\"25%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">These functions\nset the supported groups (in order of preference) by calling\nSSL_CTX_set1_groups_list or SSL_set1_groups_list\nrespectively. This is practically the same as\nCTX_set1_curves_list and set1_curves_list except that all\n<small>DH</small> groups can be given as supported by\n<small>TLS 1.3.</small> These functions are only available\nsince OpenSSL 1.1.1.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Net::SSLeay::CTX_set1_groups_list($ctx,&quot;P-521:P-384:P-256&quot;);\n<br>\n\nNet::SSLeay::set1_groups_list($ssl,&quot;P-521:P-384:P-256&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Low level\n<small>API: OSSL_LIB_CTX</small> and\n<small>OSSL_PROVIDER</small> related functions</i></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"49%\">\n\n\n\n<p style=\"margin-top: 1em\">OSSL_LIB_CTX_get0_global_default</p> </td>\n<td width=\"34%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns a\nconcrete (non <small>NULL</small> ) reference to the global\ndefault library context.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $libctx =\nNet::SSLeay::OSSL_LIB_CTX_get0_global_default(); <br>\n# returns: a value corresponding to OSSL_LIB_CTX structure\nor false on failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Typically\nit&rsquo;s simpler to use undef with functions that take an\n<small>OSSL_LIB_CTX</small> argument when global default\nlibrary context is needed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OSSL_LIB_CTX_get0_global_default.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"28%\">\n\n\n<p style=\"margin-top: 1em\">OSSL_PROVIDER_load</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads and\ninitializes a provider</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $provider =\nNet::SSLeay::OSSL_PROVIDER_load($libctx, $name); <br>\n# $libctx - value corresponding to OSSL_LIB_CTX structure or\nundef <br>\n# $name - (string) provider name, e.g., 'legacy' <br>\n# <br>\n# returns: a value corresponding to OSSL_PROVIDER or false\non failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Using undef\nloads the provider within the global default library\ncontext.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $provider =\nNet::SSLeay::OSSL_PROVIDER_load(undef, 'legacy');</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_load.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"34%\">\n\n\n<p style=\"margin-top: 1em\">OSSL_PROVIDER_try_load</p></td>\n<td width=\"49%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Loads and\ninitializes a provider similar to OSSL_PROVIDER_load with\nadditional fallback control.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $provider =\nNet::SSLeay::OSSL_PROVIDER_try_load($libctx, $name,\n$retain_fallbacks); <br>\n# $libctx - value corresponding to OSSL_LIB_CTX structure or\nundef <br>\n# $name - (string) provider name, e.g., 'legacy' <br>\n# $retain_fallbacks - (integer) 0 or 1 <br>\n# <br>\n# returns: a value corresponding to OSSL_PROVIDER or false\non failure</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_try_load.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">OSSL_PROVIDER_unload</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Unloads the\ngiven provider.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OSSL_PROVIDER_unload($provider); <br>\n# $provider - a value corresponding to OSSL_PROVIDER <br>\n# <br>\n# returns: (integer) 1 on success, 0 on error</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_unload.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">OSSL_PROVIDER_available</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Checks if a\nnamed provider is available for use.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OSSL_PROVIDER_available($libctx, $name); <br>\n# $libctx - value corresponding to OSSL_LIB_CTX structure or\nundef <br>\n# $name - (string) provider name, e.g., 'legacy' <br>\n# <br>\n# returns: (integer) 1 if the named provider is available,\notherwise 0.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_available.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"31%\">\n\n\n<p style=\"margin-top: 1em\">OSSL_PROVIDER_do_all</p></td>\n<td width=\"52%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Iterates over\nall loaded providers. A callback is called for each\nprovider.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OSSL_PROVIDER_do_all($libctx, $cb, $cbdata);\n<br>\n# $libctx - value corresponding to OSSL_LIB_CTX structure or\nundef <br>\n# $cb - reference to a perl callback function <br>\n$ $cbdata - data that will be passed to callback function\n<br>\n# <br>\n# returns: (integer) 1 if all callbacks returned 1, 0 the\nfirst time a callback returns 0.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sub do_all_cb {\n<br>\nmy ($provider, $cbdata) = @_; <br>\nmy $name = Net::SSLeay::OSSL_PROVIDER_get0_name($provider);\n<br>\nprint &quot;Callback for provider: '$name', cbdata:\n'$cbdata'\\n&quot;; <br>\nreturn 1; <br>\n} <br>\nmy $data_for_cb = 'Hello'; <br>\n# Triggers default provider automatic loading. <br>\nNet::SSLeay::OSSL_PROVIDER_available(undef, 'default') ||\ndie 'default provider not available'; <br>\nNet::SSLeay::OSSL_PROVIDER_load(undef, 'legacy') || die\n'load legacy'; <br>\nNet::SSLeay::OSSL_PROVIDER_load(undef, 'null') || die 'load\nnull'; <br>\nNet::SSLeay::OSSL_PROVIDER_do_all(undef, \\&amp;do_all_cb,\n$data_for_cb) || die 'a callback failed';</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_do_all.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">OSSL_PROVIDER_get0_name</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Returns the\nname of the given provider.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $name =\nNet::SSLeay::OSSL_PROVIDER_get0_name($provider); <br>\n# $provider - a value corresponding to OSSL_PROVIDER <br>\n# <br>\n# returns: (string) provider name, e.g., 'legacy'</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_get0_name.html&gt;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\">OSSL_PROVIDER_self_test</p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Runs the\nprovider&rsquo;s self tests.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">my $rv =\nNet::SSLeay::OSSL_PROVIDER_self_test($provider); <br>\n# $libctx - value corresponding to OSSL_LIB_CTX structure or\nundef <br>\n# $provider - a value corresponding to OSSL_PROVIDER <br>\n# <br>\n# returns: (integer) returns 1 if the self tests pass, 0 on\nerror</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Check openssl\ndoc\n&lt;https://www.openssl.org/docs/manmaster/man3/OSSL_PROVIDER_self_test.html&gt;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Constants</b>\n<br>\nThere are many openssl constants available in Net::SSLeay.\nYou can use them like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nNet::SSLeay; <br>\nprint &amp;Net::SSLeay::NID_commonName; <br>\n#or <br>\nprint Net::SSLeay::NID_commonName();</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or you can\nimport them and use:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">use Net::SSLeay\nqw/NID_commonName/; <br>\nprint &amp;NID_commonName; <br>\n#or <br>\nprint NID_commonName(); <br>\n#or <br>\nprint NID_commonName;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The constants\nnames are derived from openssl constants, however constants\nstarting with &quot;SSL_&quot; prefix have name with\n&quot;SSL_&quot; part stripped - e.g. openssl&rsquo;s\nconstant &quot;SSL_OP_ALL&quot; is available as\n&quot;Net::SSleay::OP_ALL&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The list of all\navailable constant names:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ASN1_STRFLGS_ESC_CTRL\nOPENSSL_VERSION_STRING <br>\nASN1_STRFLGS_ESC_MSB OP_ALL <br>\nASN1_STRFLGS_ESC_QUOTE OP_ALLOW_NO_DHE_KEX <br>\nASN1_STRFLGS_RFC2253 OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\n<br>\nCB_ACCEPT_EXIT OP_CIPHER_SERVER_PREFERENCE <br>\nCB_ACCEPT_LOOP OP_CISCO_ANYCONNECT <br>\nCB_ALERT OP_COOKIE_EXCHANGE <br>\nCB_CONNECT_EXIT OP_CRYPTOPRO_TLSEXT_BUG <br>\nCB_CONNECT_LOOP OP_DONT_INSERT_EMPTY_FRAGMENTS <br>\nCB_EXIT OP_ENABLE_MIDDLEBOX_COMPAT <br>\nCB_HANDSHAKE_DONE OP_EPHEMERAL_RSA <br>\nCB_HANDSHAKE_START OP_LEGACY_SERVER_CONNECT <br>\nCB_LOOP OP_MICROSOFT_BIG_SSLV3_BUFFER <br>\nCB_READ OP_MICROSOFT_SESS_ID_BUG <br>\nCB_READ_ALERT OP_MSIE_SSLV2_RSA_PADDING <br>\nCB_WRITE OP_NETSCAPE_CA_DN_BUG <br>\nCB_WRITE_ALERT OP_NETSCAPE_CHALLENGE_BUG <br>\nERROR_NONE OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG <br>\nERROR_SSL OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG <br>\nERROR_SYSCALL OP_NON_EXPORT_FIRST <br>\nERROR_WANT_ACCEPT OP_NO_ANTI_REPLAY <br>\nERROR_WANT_CONNECT OP_NO_CLIENT_RENEGOTIATION <br>\nERROR_WANT_READ OP_NO_COMPRESSION <br>\nERROR_WANT_WRITE OP_NO_ENCRYPT_THEN_MAC <br>\nERROR_WANT_X509_LOOKUP OP_NO_QUERY_MTU <br>\nERROR_ZERO_RETURN OP_NO_RENEGOTIATION <br>\nEVP_PKS_DSA OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION <br>\nEVP_PKS_EC OP_NO_SSL_MASK <br>\nEVP_PKS_RSA OP_NO_SSLv2 <br>\nEVP_PKT_ENC OP_NO_SSLv3 <br>\nEVP_PKT_EXCH OP_NO_TICKET <br>\nEVP_PKT_EXP OP_NO_TLSv1 <br>\nEVP_PKT_SIGN OP_NO_TLSv1_1 <br>\nEVP_PK_DH OP_NO_TLSv1_2 <br>\nEVP_PK_DSA OP_NO_TLSv1_3 <br>\nEVP_PK_EC OP_PKCS1_CHECK_1 <br>\nEVP_PK_RSA OP_PKCS1_CHECK_2 <br>\nFILETYPE_ASN1 OP_PRIORITIZE_CHACHA <br>\nFILETYPE_PEM OP_SAFARI_ECDHE_ECDSA_BUG <br>\nF_CLIENT_CERTIFICATE OP_SINGLE_DH_USE <br>\nF_CLIENT_HELLO OP_SINGLE_ECDH_USE <br>\nF_CLIENT_MASTER_KEY OP_SSLEAY_080_CLIENT_DH_BUG <br>\nF_D2I_SSL_SESSION OP_SSLREF2_REUSE_CERT_TYPE_BUG <br>\nF_GET_CLIENT_FINISHED OP_TLSEXT_PADDING <br>\nF_GET_CLIENT_HELLO OP_TLS_BLOCK_PADDING_BUG <br>\nF_GET_CLIENT_MASTER_KEY OP_TLS_D5_BUG <br>\nF_GET_SERVER_FINISHED OP_TLS_ROLLBACK_BUG <br>\nF_GET_SERVER_HELLO READING <br>\nF_GET_SERVER_VERIFY RECEIVED_SHUTDOWN <br>\nF_I2D_SSL_SESSION RSA_3 <br>\nF_READ_N RSA_F4 <br>\nF_REQUEST_CERTIFICATE R_BAD_AUTHENTICATION_TYPE <br>\nF_SERVER_HELLO R_BAD_CHECKSUM <br>\nF_SSL_CERT_NEW R_BAD_MAC_DECODE <br>\nF_SSL_GET_NEW_SESSION R_BAD_RESPONSE_ARGUMENT <br>\nF_SSL_NEW R_BAD_SSL_FILETYPE <br>\nF_SSL_READ R_BAD_SSL_SESSION_ID_LENGTH <br>\nF_SSL_RSA_PRIVATE_DECRYPT R_BAD_STATE <br>\nF_SSL_RSA_PUBLIC_ENCRYPT R_BAD_WRITE_RETRY <br>\nF_SSL_SESSION_NEW R_CHALLENGE_IS_DIFFERENT <br>\nF_SSL_SESSION_PRINT_FP R_CIPHER_TABLE_SRC_ERROR <br>\nF_SSL_SET_FD R_INVALID_CHALLENGE_LENGTH <br>\nF_SSL_SET_RFD R_NO_CERTIFICATE_SET <br>\nF_SSL_SET_WFD R_NO_CERTIFICATE_SPECIFIED <br>\nF_SSL_USE_CERTIFICATE R_NO_CIPHER_LIST <br>\nF_SSL_USE_CERTIFICATE_ASN1 R_NO_CIPHER_MATCH <br>\nF_SSL_USE_CERTIFICATE_FILE R_NO_PRIVATEKEY <br>\nF_SSL_USE_PRIVATEKEY R_NO_PUBLICKEY <br>\nF_SSL_USE_PRIVATEKEY_ASN1 R_NULL_SSL_CTX <br>\nF_SSL_USE_PRIVATEKEY_FILE\nR_PEER_DID_NOT_RETURN_A_CERTIFICATE <br>\nF_SSL_USE_RSAPRIVATEKEY R_PEER_ERROR <br>\nF_SSL_USE_RSAPRIVATEKEY_ASN1 R_PEER_ERROR_CERTIFICATE <br>\nF_SSL_USE_RSAPRIVATEKEY_FILE R_PEER_ERROR_NO_CIPHER <br>\nF_WRITE_PENDING R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE\n<br>\nGEN_DIRNAME R_PUBLIC_KEY_ENCRYPT_ERROR <br>\nGEN_DNS R_PUBLIC_KEY_IS_NOT_RSA <br>\nGEN_EDIPARTY R_READ_WRONG_PACKET_TYPE <br>\nGEN_EMAIL R_SHORT_READ <br>\nGEN_IPADD R_SSL_SESSION_ID_IS_DIFFERENT <br>\nGEN_OTHERNAME R_UNABLE_TO_EXTRACT_PUBLIC_KEY <br>\nGEN_RID R_UNKNOWN_REMOTE_ERROR_TYPE <br>\nGEN_URI R_UNKNOWN_STATE <br>\nGEN_X400 R_X509_LIB <br>\nLIBRESSL_VERSION_NUMBER SENT_SHUTDOWN <br>\nMBSTRING_ASC SESSION_ASN1_VERSION <br>\nMBSTRING_BMP SESS_CACHE_BOTH <br>\nMBSTRING_FLAG SESS_CACHE_CLIENT <br>\nMBSTRING_UNIV SESS_CACHE_NO_AUTO_CLEAR <br>\nMBSTRING_UTF8 SESS_CACHE_NO_INTERNAL <br>\nMIN_RSA_MODULUS_LENGTH_IN_BYTES\nSESS_CACHE_NO_INTERNAL_LOOKUP <br>\nMODE_ACCEPT_MOVING_WRITE_BUFFER SESS_CACHE_NO_INTERNAL_STORE\n<br>\nMODE_AUTO_RETRY SESS_CACHE_OFF <br>\nMODE_ENABLE_PARTIAL_WRITE SESS_CACHE_SERVER <br>\nMODE_RELEASE_BUFFERS SSL2_MT_CLIENT_CERTIFICATE <br>\nNID_OCSP_sign SSL2_MT_CLIENT_FINISHED <br>\nNID_SMIMECapabilities SSL2_MT_CLIENT_HELLO <br>\nNID_X500 SSL2_MT_CLIENT_MASTER_KEY <br>\nNID_X509 SSL2_MT_ERROR <br>\nNID_ad_OCSP SSL2_MT_REQUEST_CERTIFICATE <br>\nNID_ad_ca_issuers SSL2_MT_SERVER_FINISHED <br>\nNID_algorithm SSL2_MT_SERVER_HELLO <br>\nNID_authority_key_identifier SSL2_MT_SERVER_VERIFY <br>\nNID_basic_constraints SSL2_VERSION <br>\nNID_bf_cbc SSL3_MT_CCS <br>\nNID_bf_cfb64 SSL3_MT_CERTIFICATE <br>\nNID_bf_ecb SSL3_MT_CERTIFICATE_REQUEST <br>\nNID_bf_ofb64 SSL3_MT_CERTIFICATE_STATUS <br>\nNID_cast5_cbc SSL3_MT_CERTIFICATE_URL <br>\nNID_cast5_cfb64 SSL3_MT_CERTIFICATE_VERIFY <br>\nNID_cast5_ecb SSL3_MT_CHANGE_CIPHER_SPEC <br>\nNID_cast5_ofb64 SSL3_MT_CLIENT_HELLO <br>\nNID_certBag SSL3_MT_CLIENT_KEY_EXCHANGE <br>\nNID_certificate_policies SSL3_MT_ENCRYPTED_EXTENSIONS <br>\nNID_client_auth SSL3_MT_END_OF_EARLY_DATA <br>\nNID_code_sign SSL3_MT_FINISHED <br>\nNID_commonName SSL3_MT_HELLO_REQUEST <br>\nNID_countryName SSL3_MT_KEY_UPDATE <br>\nNID_crlBag SSL3_MT_MESSAGE_HASH <br>\nNID_crl_distribution_points SSL3_MT_NEWSESSION_TICKET <br>\nNID_crl_number SSL3_MT_NEXT_PROTO <br>\nNID_crl_reason SSL3_MT_SERVER_DONE <br>\nNID_delta_crl SSL3_MT_SERVER_HELLO <br>\nNID_des_cbc SSL3_MT_SERVER_KEY_EXCHANGE <br>\nNID_des_cfb64 SSL3_MT_SUPPLEMENTAL_DATA <br>\nNID_des_ecb SSL3_RT_ALERT <br>\nNID_des_ede SSL3_RT_APPLICATION_DATA <br>\nNID_des_ede3 SSL3_RT_CHANGE_CIPHER_SPEC <br>\nNID_des_ede3_cbc SSL3_RT_HANDSHAKE <br>\nNID_des_ede3_cfb64 SSL3_RT_HEADER <br>\nNID_des_ede3_ofb64 SSL3_RT_INNER_CONTENT_TYPE <br>\nNID_des_ede_cbc SSL3_VERSION <br>\nNID_des_ede_cfb64 SSLEAY_BUILT_ON <br>\nNID_des_ede_ofb64 SSLEAY_CFLAGS <br>\nNID_des_ofb64 SSLEAY_DIR <br>\nNID_description SSLEAY_PLATFORM <br>\nNID_desx_cbc SSLEAY_VERSION <br>\nNID_dhKeyAgreement ST_ACCEPT <br>\nNID_dnQualifier ST_BEFORE <br>\nNID_dsa ST_CONNECT <br>\nNID_dsaWithSHA ST_INIT <br>\nNID_dsaWithSHA1 ST_OK <br>\nNID_dsaWithSHA1_2 ST_READ_BODY <br>\nNID_dsa_2 ST_READ_HEADER <br>\nNID_email_protect TLS1_1_VERSION <br>\nNID_ext_key_usage TLS1_2_VERSION <br>\nNID_ext_req TLS1_3_VERSION <br>\nNID_friendlyName TLS1_VERSION <br>\nNID_givenName TLSEXT_STATUSTYPE_ocsp <br>\nNID_hmacWithSHA1 VERIFY_CLIENT_ONCE <br>\nNID_id_ad VERIFY_FAIL_IF_NO_PEER_CERT <br>\nNID_id_ce VERIFY_NONE <br>\nNID_id_kp VERIFY_PEER <br>\nNID_id_pbkdf2 VERIFY_POST_HANDSHAKE <br>\nNID_id_pe V_OCSP_CERTSTATUS_GOOD <br>\nNID_id_pkix V_OCSP_CERTSTATUS_REVOKED <br>\nNID_id_qt_cps V_OCSP_CERTSTATUS_UNKNOWN <br>\nNID_id_qt_unotice WRITING <br>\nNID_idea_cbc X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT <br>\nNID_idea_cfb64 X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS <br>\nNID_idea_ecb X509_CHECK_FLAG_NEVER_CHECK_SUBJECT <br>\nNID_idea_ofb64 X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS <br>\nNID_info_access X509_CHECK_FLAG_NO_WILDCARDS <br>\nNID_initials X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS <br>\nNID_invalidity_date X509_FILETYPE_ASN1 <br>\nNID_issuer_alt_name X509_FILETYPE_DEFAULT <br>\nNID_keyBag X509_FILETYPE_PEM <br>\nNID_key_usage X509_LOOKUP <br>\nNID_localKeyID X509_PURPOSE_ANY <br>\nNID_localityName X509_PURPOSE_CRL_SIGN <br>\nNID_md2 X509_PURPOSE_NS_SSL_SERVER <br>\nNID_md2WithRSAEncryption X509_PURPOSE_OCSP_HELPER <br>\nNID_md5 X509_PURPOSE_SMIME_ENCRYPT <br>\nNID_md5WithRSA X509_PURPOSE_SMIME_SIGN <br>\nNID_md5WithRSAEncryption X509_PURPOSE_SSL_CLIENT <br>\nNID_md5_sha1 X509_PURPOSE_SSL_SERVER <br>\nNID_mdc2 X509_PURPOSE_TIMESTAMP_SIGN <br>\nNID_mdc2WithRSA X509_TRUST_COMPAT <br>\nNID_ms_code_com X509_TRUST_EMAIL <br>\nNID_ms_code_ind X509_TRUST_OBJECT_SIGN <br>\nNID_ms_ctl_sign X509_TRUST_OCSP_REQUEST <br>\nNID_ms_efs X509_TRUST_OCSP_SIGN <br>\nNID_ms_ext_req X509_TRUST_SSL_CLIENT <br>\nNID_ms_sgc X509_TRUST_SSL_SERVER <br>\nNID_name X509_TRUST_TSA <br>\nNID_netscape X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH <br>\nNID_netscape_base_url X509_V_ERR_AKID_SKID_MISMATCH <br>\nNID_netscape_ca_policy_url\nX509_V_ERR_APPLICATION_VERIFICATION <br>\nNID_netscape_ca_revocation_url X509_V_ERR_CA_KEY_TOO_SMALL\n<br>\nNID_netscape_cert_extension X509_V_ERR_CA_MD_TOO_WEAK <br>\nNID_netscape_cert_sequence X509_V_ERR_CERT_CHAIN_TOO_LONG\n<br>\nNID_netscape_cert_type X509_V_ERR_CERT_HAS_EXPIRED <br>\nNID_netscape_comment X509_V_ERR_CERT_NOT_YET_VALID <br>\nNID_netscape_data_type X509_V_ERR_CERT_REJECTED <br>\nNID_netscape_renewal_url X509_V_ERR_CERT_REVOKED <br>\nNID_netscape_revocation_url\nX509_V_ERR_CERT_SIGNATURE_FAILURE <br>\nNID_netscape_ssl_server_name X509_V_ERR_CERT_UNTRUSTED <br>\nNID_ns_sgc X509_V_ERR_CRL_HAS_EXPIRED <br>\nNID_organizationName X509_V_ERR_CRL_NOT_YET_VALID <br>\nNID_organizationalUnitName\nX509_V_ERR_CRL_PATH_VALIDATION_ERROR <br>\nNID_pbeWithMD2AndDES_CBC X509_V_ERR_CRL_SIGNATURE_FAILURE\n<br>\nNID_pbeWithMD2AndRC2_CBC X509_V_ERR_DANE_NO_MATCH <br>\nNID_pbeWithMD5AndCast5_CBC\nX509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT <br>\nNID_pbeWithMD5AndDES_CBC X509_V_ERR_DIFFERENT_CRL_SCOPE <br>\nNID_pbeWithMD5AndRC2_CBC X509_V_ERR_EE_KEY_TOO_SMALL <br>\nNID_pbeWithSHA1AndDES_CBC X509_V_ERR_EMAIL_MISMATCH <br>\nNID_pbeWithSHA1AndRC2_CBC\nX509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD <br>\nNID_pbe_WithSHA1And128BitRC2_CBC\nX509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD <br>\nNID_pbe_WithSHA1And128BitRC4\nX509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD <br>\nNID_pbe_WithSHA1And2_Key_TripleDES_CBC\nX509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD <br>\nNID_pbe_WithSHA1And3_Key_TripleDES_CBC\nX509_V_ERR_EXCLUDED_VIOLATION <br>\nNID_pbe_WithSHA1And40BitRC2_CBC X509_V_ERR_HOSTNAME_MISMATCH\n<br>\nNID_pbe_WithSHA1And40BitRC4 X509_V_ERR_INVALID_CA <br>\nNID_pbes2 X509_V_ERR_INVALID_CALL <br>\nNID_pbmac1 X509_V_ERR_INVALID_EXTENSION <br>\nNID_pkcs X509_V_ERR_INVALID_NON_CA <br>\nNID_pkcs3 X509_V_ERR_INVALID_POLICY_EXTENSION <br>\nNID_pkcs7 X509_V_ERR_INVALID_PURPOSE <br>\nNID_pkcs7_data X509_V_ERR_IP_ADDRESS_MISMATCH <br>\nNID_pkcs7_digest X509_V_ERR_KEYUSAGE_NO_CERTSIGN <br>\nNID_pkcs7_encrypted X509_V_ERR_KEYUSAGE_NO_CRL_SIGN <br>\nNID_pkcs7_enveloped X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE\n<br>\nNID_pkcs7_signed X509_V_ERR_NO_EXPLICIT_POLICY <br>\nNID_pkcs7_signedAndEnveloped X509_V_ERR_NO_VALID_SCTS <br>\nNID_pkcs8ShroudedKeyBag X509_V_ERR_OCSP_CERT_UNKNOWN <br>\nNID_pkcs9 X509_V_ERR_OCSP_VERIFY_FAILED <br>\nNID_pkcs9_challengePassword X509_V_ERR_OCSP_VERIFY_NEEDED\n<br>\nNID_pkcs9_contentType X509_V_ERR_OUT_OF_MEM <br>\nNID_pkcs9_countersignature X509_V_ERR_PATH_LENGTH_EXCEEDED\n<br>\nNID_pkcs9_emailAddress X509_V_ERR_PATH_LOOP <br>\nNID_pkcs9_extCertAttributes X509_V_ERR_PERMITTED_VIOLATION\n<br>\nNID_pkcs9_messageDigest\nX509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED <br>\nNID_pkcs9_signingTime X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED\n<br>\nNID_pkcs9_unstructuredAddress\nX509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION <br>\nNID_pkcs9_unstructuredName\nX509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN <br>\nNID_private_key_usage_period X509_V_ERR_STORE_LOOKUP <br>\nNID_rc2_40_cbc X509_V_ERR_SUBJECT_ISSUER_MISMATCH <br>\nNID_rc2_64_cbc X509_V_ERR_SUBTREE_MINMAX <br>\nNID_rc2_cbc X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256\n<br>\nNID_rc2_cfb64 X509_V_ERR_SUITE_B_INVALID_ALGORITHM <br>\nNID_rc2_ecb X509_V_ERR_SUITE_B_INVALID_CURVE <br>\nNID_rc2_ofb64 X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM\n<br>\nNID_rc4 X509_V_ERR_SUITE_B_INVALID_VERSION <br>\nNID_rc4_40 X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED <br>\nNID_rc5_cbc X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY\n<br>\nNID_rc5_cfb64 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE\n<br>\nNID_rc5_ecb X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE <br>\nNID_rc5_ofb64 X509_V_ERR_UNABLE_TO_GET_CRL <br>\nNID_ripemd160 X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER <br>\nNID_ripemd160WithRSA X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT\n<br>\nNID_rle_compression\nX509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY <br>\nNID_rsa X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE <br>\nNID_rsaEncryption\nX509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION <br>\nNID_rsadsi X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION <br>\nNID_safeContentsBag X509_V_ERR_UNNESTED_RESOURCE <br>\nNID_sdsiCertificate X509_V_ERR_UNSPECIFIED <br>\nNID_secretBag X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX <br>\nNID_serialNumber X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE <br>\nNID_server_auth X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE\n<br>\nNID_sha X509_V_ERR_UNSUPPORTED_NAME_SYNTAX <br>\nNID_sha1 X509_V_FLAG_ALLOW_PROXY_CERTS <br>\nNID_sha1WithRSA X509_V_FLAG_CB_ISSUER_CHECK <br>\nNID_sha1WithRSAEncryption X509_V_FLAG_CHECK_SS_SIGNATURE\n<br>\nNID_shaWithRSAEncryption X509_V_FLAG_CRL_CHECK <br>\nNID_stateOrProvinceName X509_V_FLAG_CRL_CHECK_ALL <br>\nNID_subject_alt_name X509_V_FLAG_EXPLICIT_POLICY <br>\nNID_subject_key_identifier X509_V_FLAG_EXTENDED_CRL_SUPPORT\n<br>\nNID_surname X509_V_FLAG_IGNORE_CRITICAL <br>\nNID_sxnet X509_V_FLAG_INHIBIT_ANY <br>\nNID_time_stamp X509_V_FLAG_INHIBIT_MAP <br>\nNID_title X509_V_FLAG_LEGACY_VERIFY <br>\nNID_undef X509_V_FLAG_NOTIFY_POLICY <br>\nNID_uniqueIdentifier X509_V_FLAG_NO_ALT_CHAINS <br>\nNID_x509Certificate X509_V_FLAG_NO_CHECK_TIME <br>\nNID_x509Crl X509_V_FLAG_PARTIAL_CHAIN <br>\nNID_zlib_compression X509_V_FLAG_POLICY_CHECK <br>\nNOTHING X509_V_FLAG_POLICY_MASK <br>\nOCSP_RESPONSE_STATUS_INTERNALERROR\nX509_V_FLAG_SUITEB_128_LOS <br>\nOCSP_RESPONSE_STATUS_MALFORMEDREQUEST\nX509_V_FLAG_SUITEB_128_LOS_ONLY <br>\nOCSP_RESPONSE_STATUS_SIGREQUIRED X509_V_FLAG_SUITEB_192_LOS\n<br>\nOCSP_RESPONSE_STATUS_SUCCESSFUL X509_V_FLAG_TRUSTED_FIRST\n<br>\nOCSP_RESPONSE_STATUS_TRYLATER X509_V_FLAG_USE_CHECK_TIME\n<br>\nOCSP_RESPONSE_STATUS_UNAUTHORIZED X509_V_FLAG_USE_DELTAS\n<br>\nOPENSSL_BUILT_ON X509_V_FLAG_X509_STRICT <br>\nOPENSSL_CFLAGS X509_V_OK <br>\nOPENSSL_CPU_INFO XN_FLAG_COMPAT <br>\nOPENSSL_DIR XN_FLAG_DN_REV <br>\nOPENSSL_ENGINES_DIR XN_FLAG_DUMP_UNKNOWN_FIELDS <br>\nOPENSSL_FULL_VERSION_STRING XN_FLAG_FN_ALIGN <br>\nOPENSSL_INFO_CONFIG_DIR XN_FLAG_FN_LN <br>\nOPENSSL_INFO_CPU_SETTINGS XN_FLAG_FN_MASK <br>\nOPENSSL_INFO_DIR_FILENAME_SEPARATOR XN_FLAG_FN_NONE <br>\nOPENSSL_INFO_DSO_EXTENSION XN_FLAG_FN_OID <br>\nOPENSSL_INFO_ENGINES_DIR XN_FLAG_FN_SN <br>\nOPENSSL_INFO_LIST_SEPARATOR XN_FLAG_MULTILINE <br>\nOPENSSL_INFO_MODULES_DIR XN_FLAG_ONELINE <br>\nOPENSSL_INFO_SEED_SOURCE XN_FLAG_RFC2253 <br>\nOPENSSL_MODULES_DIR XN_FLAG_SEP_COMMA_PLUS <br>\nOPENSSL_PLATFORM XN_FLAG_SEP_CPLUS_SPC <br>\nOPENSSL_VERSION XN_FLAG_SEP_MASK <br>\nOPENSSL_VERSION_MAJOR XN_FLAG_SEP_MULTILINE <br>\nOPENSSL_VERSION_MINOR XN_FLAG_SEP_SPLUS_SPC <br>\nOPENSSL_VERSION_NUMBER XN_FLAG_SPC_EQ <br>\nOPENSSL_VERSION_PATCH</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>INTERNAL\nONLY</small> functions (do not use these)</b> <br>\nThe following functions are not intended for use from\noutside of Net::SSLeay module. They might be removed,\nrenamed or changed without prior notice in future\nversion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Simply\n<b><small>DO NOT USE THEM</small></b> !</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p style=\"margin-top: 1em\">hello</p></td>\n<td width=\"71%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p>blength</p></td>\n<td width=\"71%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"12%\">\n\n\n<p>constant</p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">One very good\nexample to look at is the implementation of\n&quot;sslcat()&quot; in the &quot;SSLeay.pm&quot; file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nis a simple SSLeay client (with too little error checking\n:-(</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#!/usr/bin/perl\n<br>\nuse Socket; <br>\nuse Net::SSLeay qw(die_now die_if_ssl_error) ; <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize(); <br>\n($dest_serv, $port, $msg) = @ARGV; # Read command line <br>\n$port = getservbyname ($port, 'tcp') unless $port =~\n/^\\d+$/; <br>\n$dest_ip = gethostbyname ($dest_serv); <br>\n$dest_serv_params = sockaddr_in($port, $dest_ip); <br>\nsocket (S, &amp;AF_INET, &amp;SOCK_STREAM, 0) or die\n&quot;socket: $!&quot;; <br>\nconnect (S, $dest_serv_params) or die &quot;connect:\n$!&quot;; <br>\nselect (S); $| = 1; select (STDOUT); # Eliminate STDIO\nbuffering <br>\n# The network connection is now open, lets fire up SSL <br>\n$ctx = Net::SSLeay::CTX_new() or die_now(&quot;Failed to\ncreate SSL_CTX $!&quot;); <br>\nNet::SSLeay::CTX_set_options($ctx, &amp;Net::SSLeay::OP_ALL)\n<br>\nor die_if_ssl_error(&quot;ssl ctx set options&quot;); <br>\n$ssl = Net::SSLeay::new($ctx) or die_now(&quot;Failed to\ncreate SSL $!&quot;); <br>\nNet::SSLeay::set_fd($ssl, fileno(S)); # Must use fileno <br>\n$res = Net::SSLeay::connect($ssl) and\ndie_if_ssl_error(&quot;ssl connect&quot;); <br>\nprint &quot;Cipher `&quot; . Net::SSLeay::get_cipher($ssl) .\n&quot;'\\n&quot;; <br>\n# Exchange data <br>\n$res = Net::SSLeay::write($ssl, $msg); # Perl knows how long\n$msg is <br>\ndie_if_ssl_error(&quot;ssl write&quot;); <br>\nCORE::shutdown S, 1; # Half close --&gt; No more output,\nsends EOF to server <br>\n$got = Net::SSLeay::read($ssl); # Perl returns undef on\nfailure <br>\ndie_if_ssl_error(&quot;ssl read&quot;); <br>\nprint $got; <br>\nNet::SSLeay::free ($ssl); # Tear down connection <br>\nNet::SSLeay::CTX_free ($ctx); <br>\nclose S;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nis a simple SSLeay echo server (non forking):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#!/usr/bin/perl\n-w <br>\nuse Socket; <br>\nuse Net::SSLeay qw(die_now die_if_ssl_error); <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize(); <br>\n$our_ip = &quot;\\0\\0\\0\\0&quot;; # Bind to all interfaces\n<br>\n$port = 1235; <br>\n$sockaddr_template = 'S n a4 x8'; <br>\n$our_serv_params = pack ($sockaddr_template, &amp;AF_INET,\n$port, $our_ip); <br>\nsocket (S, &amp;AF_INET, &amp;SOCK_STREAM, 0) or die\n&quot;socket: $!&quot;; <br>\nbind (S, $our_serv_params) or die &quot;bind: $!&quot;; <br>\nlisten (S, 5) or die &quot;listen: $!&quot;; <br>\n$ctx = Net::SSLeay::CTX_new () or die_now(&quot;CTX_new\n($ctx): $!&quot;); <br>\nNet::SSLeay::CTX_set_options($ctx, &amp;Net::SSLeay::OP_ALL)\n<br>\nor die_if_ssl_error(&quot;ssl ctx set options&quot;); <br>\n# Following will ask password unless private key is not\nencrypted <br>\nNet::SSLeay::CTX_use_RSAPrivateKey_file ($ctx,\n'plain-rsa.pem', <br>\n&amp;Net::SSLeay::FILETYPE_PEM); <br>\ndie_if_ssl_error(&quot;private key&quot;); <br>\nNet::SSLeay::CTX_use_certificate_file ($ctx,\n'plain-cert.pem', <br>\n&amp;Net::SSLeay::FILETYPE_PEM); <br>\ndie_if_ssl_error(&quot;certificate&quot;); <br>\nwhile (1) { <br>\nprint &quot;Accepting connections...\\n&quot;; <br>\n($addr = accept (NS, S)) or die &quot;accept: $!&quot;; <br>\nselect (NS); $| = 1; select (STDOUT); # Piping hot! <br>\n($af,$client_port,$client_ip) =\nunpack($sockaddr_template,$addr); <br>\n@inetaddr = unpack('C4',$client_ip); <br>\nprint &quot;$af connection from &quot; . <br>\njoin ('.', @inetaddr) . &quot;:$client_port\\n&quot;; <br>\n# We now have a network connection, lets fire up SSLeay...\n<br>\n$ssl = Net::SSLeay::new($ctx) or die_now(&quot;SSL_new\n($ssl): $!&quot;); <br>\nNet::SSLeay::set_fd($ssl, fileno(NS)); <br>\n$err = Net::SSLeay::accept($ssl) and die_if_ssl_error('ssl\naccept'); <br>\nprint &quot;Cipher `&quot; . Net::SSLeay::get_cipher($ssl) .\n&quot;'\\n&quot;; <br>\n# Connected. Exchange some data. <br>\n$got = Net::SSLeay::read($ssl); # Returns undef on fail <br>\ndie_if_ssl_error(&quot;ssl read&quot;); <br>\nprint &quot;Got `$got' (&quot; . length ($got) . &quot;\nchars)\\n&quot;; <br>\nNet::SSLeay::write ($ssl, uc ($got)) or die &quot;write:\n$!&quot;; <br>\ndie_if_ssl_error(&quot;ssl write&quot;); <br>\nNet::SSLeay::free ($ssl); # Tear down connection <br>\nclose NS; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Yet another\necho server. This one runs from &quot;/etc/inetd.conf&quot;\nso it avoids all the socket code overhead. Only caveat is\nopening an rsa key file - it had better be without any\nencryption or else it will not know where to ask for the\npassword. Note how &quot;STDIN&quot; and &quot;STDOUT&quot;\nare wired to <small>SSL.</small></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#!/usr/bin/perl\n<br>\n# /etc/inetd.conf <br>\n# ssltst stream tcp nowait root /path/to/server.pl server.pl\n<br>\n# /etc/services <br>\n# ssltst 1234/tcp <br>\nuse Net::SSLeay qw(die_now die_if_ssl_error); <br>\nNet::SSLeay::load_error_strings(); <br>\nNet::SSLeay::SSLeay_add_ssl_algorithms(); <br>\nNet::SSLeay::randomize(); <br>\nchdir '/key/dir' or die &quot;chdir: $!&quot;; <br>\n$| = 1; # Piping hot! <br>\nopen LOG, &quot;&gt;&gt;/dev/console&quot; or die\n&quot;Can't open log file $!&quot;; <br>\nselect LOG; print &quot;server.pl started\\n&quot;; <br>\n$ctx = Net::SSLeay::CTX_new() or die_now &quot;CTX_new\n($ctx) ($!)&quot;; <br>\n$ssl = Net::SSLeay::new($ctx) or die_now &quot;new ($ssl)\n($!)&quot;; <br>\nNet::SSLeay::set_options($ssl, &amp;Net::SSLeay::OP_ALL)\n<br>\nand die_if_ssl_error(&quot;ssl set options&quot;); <br>\n# We get already open network connection from inetd, now we\njust <br>\n# need to attach SSLeay to STDIN and STDOUT <br>\nNet::SSLeay::set_rfd($ssl, fileno(STDIN)); <br>\nNet::SSLeay::set_wfd($ssl, fileno(STDOUT)); <br>\nNet::SSLeay::use_RSAPrivateKey_file ($ssl, 'plain-rsa.pem',\n<br>\nNet::SSLeay::FILETYPE_PEM); <br>\ndie_if_ssl_error(&quot;private key&quot;); <br>\nNet::SSLeay::use_certificate_file ($ssl, 'plain-cert.pem',\n<br>\nNet::SSLeay::FILETYPE_PEM); <br>\ndie_if_ssl_error(&quot;certificate&quot;); <br>\nNet::SSLeay::accept($ssl) and die_if_ssl_err(&quot;ssl\naccept: $!&quot;); <br>\nprint &quot;Cipher `&quot; . Net::SSLeay::get_cipher($ssl) .\n&quot;'\\n&quot;; <br>\n$got = Net::SSLeay::read($ssl); <br>\ndie_if_ssl_error(&quot;ssl read&quot;); <br>\nprint &quot;Got `$got' (&quot; . length ($got) . &quot;\nchars)\\n&quot;; <br>\nNet::SSLeay::write ($ssl, uc($got)) or die &quot;write:\n$!&quot;; <br>\ndie_if_ssl_error(&quot;ssl write&quot;); <br>\nNet::SSLeay::free ($ssl); # Tear down the connection <br>\nNet::SSLeay::CTX_free ($ctx); <br>\nclose LOG;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are also\na number of example/test programs in the examples\ndirectory:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sslecho.pl - A\nsimple server, not unlike the one above <br>\nminicli.pl - Implements a client using low level SSLeay\nroutines <br>\nsslcat.pl - Demonstrates using high level sslcat utility\nfunction <br>\nget_page.pl - Is a utility for getting html pages from\nsecure servers <br>\ncallback.pl - Demonstrates certificate verification and\ncallback usage <br>\nstdio_bulk.pl - Does SSL over Unix pipes <br>\nssl-inetd-serv.pl - SSL server that can be invoked from\ninetd.conf <br>\nhttpd-proxy-snif.pl - Utility that allows you to see how a\nbrowser <br>\nsends https request to given server and what reply <br>\nit gets back (very educative :-) <br>\nmakecert.pl - Creates a self signed cert (does not use this\nmodule)</p>\n\n<h2>INSTALLATION\n<a name=\"INSTALLATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<small>README</small> and <small>README</small> .* in the\ndistribution directory for installation guidance on a\nvariety of platforms.</p>\n\n<h2>LIMITATIONS\n<a name=\"LIMITATIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;Net::SSLeay::read()&quot;\nuses an internal buffer of 32KB, thus no single read will\nreturn more. In practice one read returns much less, usually\nas much as fits in one network packet. To work around this,\nyou should use a loop like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$reply = '';\n<br>\nwhile ($got = Net::SSLeay::read($ssl)) { <br>\nlast if print_errs('SSL_read'); <br>\n$reply .= $got; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Although there\nis no built-in limit in &quot;Net::SSLeay::write()&quot;,\nthe network packet size limitation applies here as well,\nthus use:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$written = 0;\n<br>\nwhile ($written &lt; length($message)) { <br>\n$written += Net::SSLeay::write($ssl, substr($message,\n$written)); <br>\nlast if print_errs('SSL_write'); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or\nalternatively you can just use the following convenience\nfunctions:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::ssl_write_all($ssl,\n$message) or die &quot;ssl write failure&quot;; <br>\n$got = Net::SSLeay::ssl_read_all($ssl) or die &quot;ssl read\nfailure&quot;;</p>\n\n<h2>KNOWN BUGS AND CAVEATS\n<a name=\"KNOWN BUGS AND CAVEATS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">LibreSSL\nversions in the 3.1 - 3.3 series contain a <small>TLS\n1.3</small> implementation that is not fully compatible with\nthe libssl <small>API,</small> but is still advertised\nduring protocol auto-negotiation. If you encounter problems\nor unexpected behaviour with <small>SSL</small> or\n<small>SSL_CTX</small> objects whose protocol version was\nautomatically negotiated and libssl is provided by any of\nthese versions of LibreSSL, it could be because the peers\nnegotiated to use <small>TLS 1.3</small> - try setting the\nmaximum protocol version to <small>TLS 1.2</small> (via\n&quot;Net::SSLeay::set_max_proto_version()&quot; or\n&quot;Net::SSLeay::CTX_set_max_proto_version()&quot;) before\nestablishing the connection. The first stable LibreSSL\nversion with a fully libssl-compatible <small>TLS\n1.3</small> implementation is 3.4.1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An OpenSSL bug\n<small>CVE-2015-0290</small> &quot;OpenSSL Multiblock\nCorrupted Pointer Issue&quot; can cause <small>POST</small>\nrequests of over 90kB to fail or crash. This bug is reported\nto be fixed in OpenSSL 1.0.2a.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Autoloader\nemits a</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Argument\n&quot;xxx&quot; isn't numeric in entersub at\nblib/lib/Net/SSLeay.pm'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">warning if\ndie_if_ssl_error is made autoloadable. If you figure out\nwhy, drop me a line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Callback set\nusing &quot;SSL_set_verify()&quot; does not appear to work.\nThis may well be an openssl problem (e.g. see\n&quot;ssl/ssl_lib.c&quot; line 1029). Try using\n&quot;SSL_CTX_set_verify()&quot; instead and do not be\nsurprised if even this stops working in future versions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Callback and\ncertificate verification stuff is generally too little\ntested.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Random numbers\nare not initialized randomly enough, especially if you do\nnot have &quot;/dev/random&quot; and/or\n&quot;/dev/urandom&quot; (such as in Solaris platforms - but\nit&rsquo;s been suggested that cryptorand daemon from the\nSUNski package solves this). In this case you should\ninvestigate third party software that can emulate these\ndevices, e.g. by way of a named pipe to some program.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Another gotcha\nwith random number initialization is randomness depletion.\nThis phenomenon, which has been extensively discussed in\nOpenSSL, Apache-SSL, and Apache-mod_ssl forums, can cause\nyour script to block if you use &quot;/dev/random&quot; or\nto operate insecurely if you use &quot;/dev/urandom&quot;.\nWhat happens is that when too much randomness is drawn from\nthe operating system&rsquo;s randomness pool then randomness\ncan temporarily be unavailable. &quot;/dev/random&quot;\nsolves this problem by waiting until enough randomness can\nbe gathered - and this can take a long time since blocking\nreduces activity in the machine and less activity provides\nless random events: a vicious circle.\n&quot;/dev/urandom&quot; solves this dilemma more\npragmatically by simply returning predictable\n&quot;random&quot; numbers. Some&quot; /dev/urandom&quot;\nemulation software however actually seems to implement\n&quot;/dev/random&quot; semantics. Caveat emptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">I&rsquo;ve been\npointed to two such daemons by Mik Firestone\n&lt;mik@@speed.stdio._com&gt; who has used them on Solaris\n8:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Entropy Gathering Daemon (\n<small>EGD</small> ) at\n&lt;http://www.lothar.com/tech/crypto/&gt;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Pseudo-random number generating daemon (\n<small>PRNGD</small> ) at\n&lt;http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html&gt;</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you are\nusing the low level <small>API</small> functions to\ncommunicate with other <small>SSL</small> implementations,\nyou would do well to call</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::CTX_set_options($ctx,\n&amp;Net::SSLeay::OP_ALL) <br>\nor die_if_ssl_error(&quot;ssl ctx set options&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">to cope with\nsome well know bugs in some other <small>SSL</small>\nimplementations. The high level <small>API</small> functions\nalways set all known compatibility options.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sometimes\n&quot;sslcat()&quot; (and the high level\n<small>HTTPS</small> functions that build on it) is too fast\nin signaling the <small>EOF</small> to legacy\n<small>HTTPS</small> servers. This causes the server to\nreturn empty page. To work around this problem you can set\nthe global variable</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$Net::SSLeay::slowly\n= 1; # Add sleep so broken servers can keep up</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>HTTP/1.1</small>\nis not supported. Specifically this module does not know to\nissue or serve multiple http requests per connection. This\nis a serious shortcoming, but using the <small>SSL</small>\nsession cache on your server helps to alleviate the\n<small>CPU</small> load somewhat.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As of version\n1.09 many newer OpenSSL auxiliary functions were added (from\n&quot;REM_AUTOMATICALLY_GENERATED_1_09&quot; onwards in\n&quot;SSLeay.xs&quot;). Unfortunately I have not had any\nopportunity to test these. Some of them are trivial enough\nthat I believe they &quot;just work&quot;, but others have\nrather complex interfaces with function pointers and all. In\nthese cases you should proceed wit great caution.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module\ndefaults to using OpenSSL automatic protocol negotiation\ncode for automatically detecting the version of the\n<small>SSL/TLS</small> protocol that the other end talks.\nWith most web servers this works just fine, but once in a\nwhile I get complaints from people that the module does not\nwork with some web servers. Usually this can be solved by\nexplicitly setting the protocol version, e.g.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">$Net::SSLeay::ssl_version\n= 2; # Insist on SSLv2 <br>\n$Net::SSLeay::ssl_version = 3; # Insist on SSLv3 <br>\n$Net::SSLeay::ssl_version = 10; # Insist on TLSv1 <br>\n$Net::SSLeay::ssl_version = 11; # Insist on TLSv1.1 <br>\n$Net::SSLeay::ssl_version = 12; # Insist on TLSv1.2 <br>\n$Net::SSLeay::ssl_version = 13; # Insist on TLSv1.3</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Although the\nautonegotiation is nice to have, the <small>SSL</small>\nstandards do not formally specify any such mechanism. Most\nof the world has accepted the SSLeay/OpenSSL way of doing it\nas the de facto standard. But for the few that think\ndifferently, you have to explicitly speak the correct\nversion. This is not really a bug, but rather a deficiency\nin the standards. If a site refuses to respond or sends back\nsome nonsensical error codes (at the <small>SSL</small>\nhandshake level), try this option before mailing me.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On some\nsystems, OpenSSL may be compiled without support for SSLv2.\nIf this is the case, Net::SSLeay will warn if ssl_version\nhas been set to 2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The high level\n<small>API</small> returns the certificate of the peer, thus\nallowing one to check what certificate was supplied.\nHowever, you will only be able to check the certificate\nafter the fact, i.e. you already sent your form data by the\ntime you find out that you did not trust them, oops.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So, while being\nable to know the certificate after the fact is surely\nuseful, the security minded would still choose to do the\nconnection and certificate verification first and only then\nexchange data with the site. Currently none of the high\nlevel <small>API</small> functions do this, thus you would\nhave to program it using the low level <small>API. A</small>\ngood place to start is to see how the\n&quot;Net::SSLeay::http_cat()&quot; function is\nimplemented.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The high level\n<small>API</small> functions use a global file handle\n&quot;SSLCAT_S&quot; internally. This really should not be a\nproblem because there is no way to interleave the high level\n<small>API</small> functions, unless you use threads (but\nthreads are not very well supported in perl anyway).\nHowever, you may run into problems if you call undocumented\ninternal functions in an interleaved fashion. The best\nsolution is to &quot;require Net::SSLeay&quot; in one thread\nafter all the threads have been created.</p>\n\n<h2>DIAGNOSTICS\n<a name=\"DIAGNOSTICS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Random number\ngenerator not seeded!!!</p>\n\n<p style=\"margin-left:17%;\"><b>(W)</b> This warning\nindicates that &quot;randomize()&quot; was not able to read\n&quot;/dev/random&quot; or &quot;/dev/urandom&quot;,\npossibly because your system does not have them or they are\ndifferently named. You can still use <small>SSL,</small> but\nthe encryption will not be as strong.</p>\n\n<p style=\"margin-left:11%;\">open_tcp_connection:\ndestination host not found:&rsquo;server&rsquo; (port 123)\n<br>\n($!)</p>\n\n<p style=\"margin-left:17%;\">Name lookup for host named\n&quot;server&quot; failed.</p>\n\n<p style=\"margin-left:11%;\">open_tcp_connection: failed\n&rsquo;server&rsquo;, 123 ($!)</p>\n\n<p style=\"margin-left:17%;\">The name was resolved, but\nestablishing the <small>TCP</small> connection failed.</p>\n\n<p style=\"margin-left:11%;\">msg 123: 1 - error:140770F8:SSL\nroutines:SSL23_GET_SERVER_HELLO:unknown <br>\nproto</p>\n\n<p style=\"margin-left:17%;\">SSLeay error string. The first\nnumber (123) is the <small>PID,</small> the second number\n(1) indicates the position of the error message in SSLeay\nerror stack. You often see a pile of these messages as\nerrors cascade.</p>\n\n<p style=\"margin-left:11%;\">msg 123: 1 -\n<b>error:02001002::lib</b>(2) :<a href=\"https://man.page/1/func\">func(1)</a>\n:<a href=\"https://man.page/2/reason\">reason(2)</a></p>\n\n<p style=\"margin-left:17%;\">The same as above, but you\ndidn&rsquo;t call <b>load_error_strings()</b> so SSLeay\ncouldn&rsquo;t verbosely explain the error. You can still\nfind out what it means with this command:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">/usr/local/ssl/bin/ssleay\nerrstr 02001002</p>\n\n<p style=\"margin-left:11%;\">Password is being asked for\nprivate key</p>\n\n<p style=\"margin-left:17%;\">This is normal behaviour if\nyour private key is encrypted. Either you have to supply the\npassword or you have to use an unencrypted private key. Scan\nOpenSSL.org for the <small>FAQ</small> that explains how to\ndo this (or just study examples/makecert.pl which is used\nduring &quot;make test&quot; to do just that).</p>\n\n<h2>SECURITY\n<a name=\"SECURITY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can\nmitigate some of the security vulnerabilities that might be\npresent in your <small>SSL/TLS</small> application:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>BEAST</small>\nAttack</b> <br>\nhttp://blogs.cisco.com/security/beat-the-beast-with-tls/\nhttps://community.qualys.com/blogs/securitylabs/2011/10/17/mitigating-the-beast-attack-on-tls\nhttp://blog.zoller.lu/2011/09/beast-summary-tls-cbc-countermeasures.html</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>BEAST</small> attack relies on a weakness in the way\n<small>CBC</small> mode is used in <small>SSL/TLS.</small>\nIn OpenSSL versions 0.9.6d and later, the protocol-level\nmitigation is enabled by default, thus making it not\nvulnerable to the <small>BEAST</small> attack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Solutions:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Compile with OpenSSL versions 0.9.6d or later, which\nenables <small>SSL_OP_ALL</small> by default</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Ensure <small>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</small>\nis not enabled (its not enabled by default)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Don&rsquo;t support SSLv2, SSLv3</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Actively control the ciphers your server supports with\nset_cipher_list:</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::set_cipher_list($ssl,\n&rsquo; <small>RC4-SHA:HIGH:</small> !ADH&rsquo;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Session\nResumption</b> <br>\n\nhttp://www.openssl.org/docs/ssl/SSL_CTX_set_options.html</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>SSL</small> Labs vulnerability test on your\n<small>SSL</small> server might report in red:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Session\nresumption No (IDs assigned but not accepted)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This report is\nnot really bug or a vulnerability, since the server will not\naccept session resumption requests. However, you can prevent\nthis noise in the report by disabling the session cache\naltogether:\nNet::SSLeay::CTX_set_session_cache_mode($ssl_ctx,\n<b>Net::SSLeay::SESS_CACHE_OFF()</b>); Use 0 if you\ndon&rsquo;t have <small>SESS_CACHE_OFF</small> constant.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Secure\nRenegotiation and DoS Attack</b> <br>\n\nhttps://community.qualys.com/blogs/securitylabs/2011/10/31/tls-renegotiation-and-denial-of-service-attacks</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is not a\n&quot;security flaw,&quot; it is more of a DoS\nvulnerability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Solutions:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Do not support SSLv2</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Do not set the\n<small>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</small>\noption</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Compile with OpenSSL 0.9.8m or later</p></td></tr>\n</table>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you\nencounter a problem with this module that you believe is a\nbug, please create a new issue\n&lt;https://github.com/radiator-software/p5-net-ssleay/issues/new&gt;\nin the Net-SSLeay GitHub repository. Please make sure your\nbug report includes the following information:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\">the code you are trying to\nrun;</p> </td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>your operating system name and version;</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>the output of &quot;perl -V&quot;;</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"75%\">\n\n\n<p>the version of OpenSSL or LibreSSL you are using.</p></td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Originally\nwritten by Sampo Kellom&Atilde;&curren;ki.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Maintained by\nFlorian Ragwitz between November 2005 and January 2010.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Maintained by\nMike McCauley between November 2005 and June 2018.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Maintained by\nChris Novakovic, Tuure Vartiainen and Heikki Vatiainen since\nJune 2018.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n1996-2003 Sampo Kellom&Atilde;&curren;ki\n&lt;sampo@iki.fi&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2005-2010 Florian Ragwitz &lt;rafl@debian.org&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2005-2018 Mike McCauley &lt;mikem@airspayce.com&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2018- Chris Novakovic &lt;chris@chrisn.me.uk&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2018- Tuure Vartiainen\n&lt;vartiait@radiatorsoftware.com&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright (c)\n2018- Heikki Vatiainen &lt;hvn@radiatorsoftware.com&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All rights\nreserved.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\nreleased under the terms of the Artistic License 2.0. For\ndetails, see the &quot;LICENSE&quot; file distributed with\nNet-SSLeay&rsquo;s source code.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Net::SSLeay::Handle\n- File handle interface <br>\n./examples - Example servers and a clients <br>\n&lt;http://www.openssl.org/&gt; - OpenSSL source,\ndocumentation, etc <br>\nopenssl-users-request@openssl.org - General OpenSSL mailing\nlist <br>\n&lt;http://www.ietf.org/rfc/rfc2246.txt&gt; - TLS 1.0\nspecification <br>\n&lt;http://www.w3c.org&gt; - HTTP specifications <br>\n&lt;http://www.ietf.org/rfc/rfc2617.txt&gt; - How to send\npassword <br>\n&lt;http://www.lothar.com/tech/crypto/&gt; - Entropy\nGathering Daemon (EGD) <br>\n\n&lt;http://www.aet.tu-cottbus.de/personen/jaenicke/postfix_tls/prngd.html&gt;\n<br>\n- pseudo-random number generating daemon (PRNGD) <br>\nperl(1) <br>\nperlref(1) <br>\nperllol(1) <br>\nperldoc ~openssl/doc/ssl/SSL_CTX_set_verify.pod</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#COMPATIBILITY\">COMPATIBILITY</a>","<a href=\"#OVERVIEW\">OVERVIEW</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#INSTALLATION\">INSTALLATION</a>","<a href=\"#LIMITATIONS\">LIMITATIONS</a>","<a href=\"#KNOWN BUGS AND CAVEATS\">KNOWN BUGS AND CAVEATS</a>","<a href=\"#DIAGNOSTICS\">DIAGNOSTICS</a>","<a href=\"#SECURITY\">SECURITY</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>","<a href=\"#LICENSE\">LICENSE</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":3}