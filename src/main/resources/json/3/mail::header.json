{"name":"mail::header","body":"\n\n<h1 align=\"center\">Mail::Header</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Header -\nmanipulate MIME headers</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nMail::Header; <br>\nmy $head = Mail::Header-&gt;new; <br>\nmy $head = Mail::Header-&gt;new( \\*STDIN ); <br>\nmy $head = Mail::Header-&gt;new( [&lt;&gt;], Modify =&gt;\n0);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Read, write,\ncreate, and manipulate <small>MIME</small> headers, the\nleading part of each modern e-mail message, but also used in\nother protocols like <small>HTTP.</small> The fields are\nkept in Mail::Field objects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Be aware that\nthe header fields each have a name part, which shall be\ntreated case-insensitive, and a content part, which may be\nfolded over multiple lines.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Header\ndoes not always follow the RFCs strict enough, does not help\nyou with character encodings. It does not use weak\nreferences where it could (because those did not exist when\nthe module was written) which costs some performance and\nmake the implementation a little more complicated. The\nMail::Message::Head implementation is much newer and\ntherefore better.</p>\n\n<h2>METHODS\n<a name=\"METHODS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Constructors</b>\n<br>\n$obj-&gt;<b>dup</b>()</p>\n\n<p style=\"margin-left:17%;\">Create a duplicate of the\ncurrent object.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>new</b>( [$source],\n[%options] ) <br>\nMail::Header-&gt;<b>new</b>( [$source], [%options] )</p>\n\n<p style=\"margin-left:17%;\">The $source may be either a\nfile descriptor (reference to a <small>GLOB</small> ) or a\nreference to an array. If given the new object will be\ninitialized with headers either from the array of read from\nthe file descriptor.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">%options is a\nlist of options given in the form of key-value pairs, just\nlike a hash table. Valid options are</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">-Option\n--Default <br>\nFoldLength 79 <br>\nMailFrom 'KEEP' <br>\nModify false <br>\nFoldLength =&gt; <small>INTEGER</small></p>\n\n<p style=\"margin-left:20%;\">The default length of line to\nbe used when folding header lines. See\n<b>fold_length()</b>.</p>\n\n<p style=\"margin-left:17%;\">MailFrom =&gt; &rsquo;\n<small>IGNORE</small> &rsquo;|&rsquo; <small>COERCE</small>\n&rsquo;|&rsquo; <small>KEEP</small> &rsquo;|&rsquo;\n<small>ERROR</small> &rsquo;</p>\n\n<p style=\"margin-left:20%;\">See method\n<b>mail_from()</b>.</p>\n\n<p style=\"margin-left:17%;\">Modify =&gt;\n<small>BOOLEAN</small></p>\n\n<p style=\"margin-left:20%;\">If this value is <i>true</i>\nthen the headers will be re-formatted, otherwise the format\nof the header lines will remain unchanged.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>&quot;Fake&quot;\nconstructors</b> <br>\nBe warned that the next constructors all require an already\ncreated header object, of which the original content will be\ndestroyed. <br>\n$obj-&gt;<b>empty</b>()</p>\n\n<p style=\"margin-left:17%;\">Empty an existing\n&quot;Mail::Header&quot; object of all lines.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>extract</b>(\n<small>ARRAY</small> )</p>\n\n<p style=\"margin-left:17%;\">Extract a header from the given\narray into an existing Mail::Header object.\n&quot;extract&quot; <b>will modify</b> this array. Returns\nthe object that the method was called on.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>header</b>( [\n<small>ARRAY</small> ] )</p>\n\n<p style=\"margin-left:17%;\">&quot;header&quot; does\nmultiple operations. First it will extract a header from the\n<small>ARRAY,</small> if given. It will then reformat the\nheader (if reformatting is permitted), and finally return a\nreference to an array which contains the header in a\nprintable form.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>header_hashref</b>(\n[ <small>HASH</small> ] )</p>\n\n<p style=\"margin-left:17%;\">As <b>header()</b>, but it will\neventually set headers from a hash reference, and it will\nreturn the headers as a hash reference.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">example:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">$fields-&gt;{From}\n= 'Tobias Brox &lt;tobix@cpan.org&gt;'; <br>\n$fields-&gt;{To} = ['you@somewhere', 'me@localhost']; <br>\n$head-&gt;header_hashref($fields);</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>read</b>($fh)</p>\n\n<p style=\"margin-left:17%;\">Read a header from the given\nfile descriptor into an existing Mail::Header object.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Accessors</b>\n<br>\n$obj-&gt;<b>fold_length</b>( [$tag], [$length] )</p>\n\n<p style=\"margin-left:17%;\">Set the default fold length for\nall tags or just one. With no arguments the default fold\nlength is returned. With two arguments it sets the fold\nlength for the given tag and returns the previous value. If\nonly $length is given it sets the default fold length for\nthe current object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In the two\nargument form &quot;fold_length&quot; may be called as a\nstatic method, setting default fold lengths for tags that\nwill be used by <b>all</b> &quot;Mail::Header&quot; objects.\nSee the &quot;fold&quot; method for a description on how\n&quot;Mail::Header&quot; uses these values.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>mail_from</b>(&rsquo;\n<small>IGNORE</small> &rsquo;|&rsquo; <small>COERCE</small>\n&rsquo;|&rsquo; <small>KEEP</small> &rsquo;|&rsquo;\n<small>ERROR</small> &rsquo;)</p>\n\n<p style=\"margin-left:17%;\">This specifies what to do when\na `From ' line is encountered. Valid values are\n&quot;IGNORE&quot; - ignore and discard the header,\n&quot;ERROR&quot; - invoke an error (call die),\n&quot;COERCE&quot; - rename them as Mail-From and\n&quot;KEEP&quot; - keep them.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>modify</b>(\n[$value] )</p>\n\n<p style=\"margin-left:17%;\">If $value is <i>false</i> then\n&quot;Mail::Header&quot; will not do any automatic\nreformatting of the headers, other than to ensure that the\nline starts with the tags given.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Processing</b>\n<br>\n$obj-&gt;<b>add</b>( $tag, $line [, $index] )</p>\n\n<p style=\"margin-left:17%;\">Add a new line to the header.\nIf $tag is &quot;undef&quot; the tag will be extracted from\nthe beginning of the given line. If $index is given, the new\nline will be inserted into the header at the given point,\notherwise the new line will be appended to the end of the\nheader.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>as_string</b>()</p>\n\n<p style=\"margin-left:17%;\">Returns the header as a single\nstring.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>cleanup</b>()</p>\n\n<p style=\"margin-left:17%;\">Remove any header line that,\nother than the tag, only contains whitespace</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>combine</b>( $tag\n[, $with] )</p>\n\n<p style=\"margin-left:17%;\">Combine all instances of $tag\ninto one. The lines will be joined together $with, or a\nsingle space if not given. The new item will be positioned\nin the header where the first instance was, all other\ninstances of $tag will be removed.</p>\n\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>count</b>($tag)</p>\n\n<p style=\"margin-left:17%;\">Returns the number of times the\ngiven atg appears in the header</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>delete</b>( $tag [,\n$index ] )</p>\n\n<p style=\"margin-left:17%;\">Delete a tag from the header.\nIf an $index id is given, then the Nth instance of the tag\nwill be removed. If no $index is given, then all instances\nof tag will be removed.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>fold</b>( [$length]\n)</p>\n\n<p style=\"margin-left:17%;\">Fold the header. If $length is\nnot given, then &quot;Mail::Header&quot; uses the following\nrules to determine what length to fold a line.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>get</b>( $tag [,\n$index] )</p>\n\n<p style=\"margin-left:17%;\">Get the text from a line. If an\n$index is given, then the text of the Nth instance will be\nreturned. If it is not given the return value depends on the\ncontext in which &quot;get&quot; was called. In an array\ncontext a list of all the text from all the instances of the\n$tag will be returned. In a scalar context the text for the\nfirst instance will be returned.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The lines are\nunfolded, but still terminated with a new-line (see\n&quot;chomp&quot;)</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>print</b>( [$fh]\n)</p>\n\n<p style=\"margin-left:17%;\">Print the header to the given\nfile descriptor, or &quot;STDOUT&quot; if no file descriptor\nis given.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>replace</b>( $tag,\n$line [, $index ] )</p>\n\n<p style=\"margin-left:17%;\">Replace a line in the header.\nIf $tag is &quot;undef&quot; the tag will be extracted from\nthe beginning of the given line. If $index is given the new\nline will replace the Nth instance of that tag, otherwise\nthe first instance of the tag is replaced. If the tag does\nnot appear in the header then a new line will be appended to\nthe header.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>tags</b>()</p>\n\n<p style=\"margin-left:17%;\">Returns an array of all the\ntags that exist in the header. Each tag will only appear in\nthe list once. The order of the tags is not specified.</p>\n\n<p style=\"margin-left:11%;\">$obj-&gt;<b>unfold</b>( [$tag]\n)</p>\n\n<p style=\"margin-left:17%;\">Unfold all instances of the\ngiven tag so that they do not spread across multiple lines.\nIf $tag is not given then all lines are unfolded.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The unfolding\nprocess is wrong but (for compatibility reasons) will not be\nrepaired: only one blank at the start of the line should be\nremoved, not all of them.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This module is\npart of the MailTools distribution,\n<i>http://perl.overmeer.net/mailtools/</i>.</p>\n\n<h2>AUTHORS\n<a name=\"AUTHORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The MailTools\nbundle was developed by Graham Barr. Later, Mark Overmeer\ntook over maintenance without commitment to further\ndevelopment.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mail::Cap by\nGisle Aas &lt;aas@oslonett.no&gt;. Mail::Field::AddrList by\nPeter Orbaek &lt;poe@cit.dk&gt;. Mail::Mailer and Mail::Send\nby Tim Bunce &lt;Tim.Bunce@ig.co.uk&gt;. For other\ncontributors see ChangeLog.</p>\n\n<h2>LICENSE\n<a name=\"LICENSE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyrights\n1995-2000 Graham Barr &lt;gbarr@pobox.com&gt; and 2001-2017\nMark Overmeer &lt;perl@overmeer.net&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program is\nfree software; you can redistribute it and/or modify it\nunder the same terms as Perl itself. See\n<i>http://www.perl.com/perl/misc/Artistic.html</i></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#METHODS\">METHODS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHORS\">AUTHORS</a>","<a href=\"#LICENSE\">LICENSE</a>"],"level":3}