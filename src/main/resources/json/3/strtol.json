{"name":"strtol","description":"strtol, strtoll, strtoq - convert a string to a long integer","body":"\n\n<h1 align=\"center\">STRTOL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">strtol,\nstrtoll, strtoq - convert a string to a long integer</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdlib.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nstrtol(const char *</b><i>nptr</i><b>, char\n**</b><i>endptr</i><b>, int</b> <i>base</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long long\nstrtoll(const char *</b><i>nptr</i><b>, char\n**</b><i>endptr</i><b>, int</b> <i>base</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strtoll</b>():</p>\n\n<p style=\"margin-left:17%;\">_ISOC99_SOURCE <br>\n|| /* Glibc versions &lt;= 2.19: */ _SVID_SOURCE ||\n_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtol</b>() function converts the initial part of the\nstring in <i>nptr</i> to a long integer value according to\nthe given <i>base</i>, which must be between 2 and 36\ninclusive, or be the special value 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The string may\nbegin with an arbitrary amount of white space (as determined\nby <a href=\"https://man.page/3/isspace\">isspace(3)</a>) followed by a single optional '+' or\n'-' sign. If <i>base</i> is zero or 16, the string may then\ninclude a &quot;0x&quot; or &quot;0X&quot; prefix, and the\nnumber will be read in base 16; otherwise, a zero\n<i>base</i> is taken as 10 (decimal) unless the next\ncharacter is '0', in which case it is taken as 8\n(octal).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The remainder\nof the string is converted to a <i>long</i> value in the\nobvious manner, stopping at the first character which is not\na valid digit in the given base. (In bases above 10, the\nletter 'A' in either uppercase or lowercase represents 10,\n'B' represents 11, and so forth, with 'Z' representing\n35.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>endptr</i> is not NULL, <b>strtol</b>() stores the\naddress of the first invalid character in <i>*endptr</i>. If\nthere were no digits at all, <b>strtol</b>() stores the\noriginal value of <i>nptr</i> in <i>*endptr</i> (and returns\n0). In particular, if <i>*nptr</i> is not '\\0' but\n<i>**endptr</i> is '\\0' on return, the entire string is\nvalid.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtoll</b>() function works just like the\n<b>strtol</b>() function but returns a <i>long long</i>\ninteger value.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtol</b>() function returns the result of the\nconversion, unless the value would underflow or overflow. If\nan underflow occurs, <b>strtol</b>() returns\n<b>LONG_MIN</b>. If an overflow occurs, <b>strtol</b>()\nreturns <b>LONG_MAX</b>. In both cases, <i>errno</i> is set\nto <b>ERANGE</b>. Precisely the same holds for\n<b>strtoll</b>() (with <b>LLONG_MIN</b> and <b>LLONG_MAX</b>\ninstead of <b>LONG_MIN</b> and <b>LONG_MAX</b>).</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">(not in C99) The given\n<i>base</i> contains an unsupported value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ERANGE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The resulting value was out of range.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nimplementation may also set <i>errno</i> to <b>EINVAL</b> in\ncase no conversion was performed (no digits seen, and 0\nreturned).</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3428201.png\" alt=\"Image grohtml-3428201.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strtol</b>():\nPOSIX.1-2001, POSIX.1-2008, C89, C99 SVr4, 4.3BSD.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strtoll</b>():\nPOSIX.1-2001, POSIX.1-2008, C99.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since\n<b>strtol</b>() can legitimately return 0, <b>LONG_MAX</b>,\nor <b>LONG_MIN</b> (<b>LLONG_MAX</b> or <b>LLONG_MIN</b> for\n<b>strtoll</b>()) on both success and failure, the calling\nprogram should set <i>errno</i> to 0 before the call, and\nthen determine if an error occurred by checking whether\n<i>errno</i> has a nonzero value after the call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX.1, in locales other than &quot;C&quot; and\n&quot;POSIX&quot;, these functions may accept other,\nimplementation-defined numeric strings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">BSD also\nhas</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>quad_t\nstrtoq(const char *</b><i>nptr</i><b>, char\n**</b><i>endptr</i><b>, int</b> <i>base</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">with completely\nanalogous definition. Depending on the wordsize of the\ncurrent architecture, this may be equivalent to\n<b>strtoll</b>() or to <b>strtol</b>().</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nshown below demonstrates the use of <b>strtol</b>(). The\nfirst command-line argument specifies a string from which\n<b>strtol</b>() should parse a number. The second (optional)\nargument specifies the base to be used for the conversion.\n(This argument is converted to numeric form using\n<a href=\"https://man.page/3/atoi\">atoi(3)</a>, a function that performs no error checking\nand has a simpler interface than <b>strtol</b>().) Some\nexamples of the results produced by this program are the\nfollowing:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n123</b> <br>\nstrtol() returned 123 <br>\n$ <b>./a.out ' 123'</b> <br>\nstrtol() returned 123 <br>\n$ <b>./a.out 123abc</b> <br>\nstrtol() returned 123 <br>\nFurther characters after number: &quot;abc&quot; <br>\n$ <b>./a.out 123abc 55</b> <br>\nstrtol: Invalid argument <br>\n$ <b>./a.out ''</b> <br>\nNo digits were found <br>\n$ <b>./a.out 4000000000</b> <br>\nstrtol: Numerical result out of range</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;limits.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;errno.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint base; <br>\nchar *endptr, *str; <br>\nlong val;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &lt;\n2) { <br>\nfprintf(stderr, &quot;Usage: %s str [base]\\n&quot;,\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">str = argv[1];\n<br>\nbase = (argc &gt; 2) ? atoi(argv[2]) : 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">errno = 0; /*\nTo distinguish success/failure after call */ <br>\nval = strtol(str, &amp;endptr, base);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Check for\nvarious possible errors */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (errno != 0)\n{ <br>\nperror(&quot;strtol&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (endptr ==\nstr) { <br>\nfprintf(stderr, &quot;No digits were found\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* If we got\nhere, strtol() successfully parsed a number */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;strtol()\nreturned %ld\\n&quot;, val);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (*endptr !=\n'\\0') /* Not necessarily an error... */ <br>\nprintf(&quot;Further characters after number:\n\\&quot;%s\\&quot;\\n&quot;, endptr);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/atof\">atof(3)</a>,\n<a href=\"https://man.page/3/atoi\">atoi(3)</a>, <a href=\"https://man.page/3/atol\">atol(3)</a>, <a href=\"https://man.page/3/strtod\">strtod(3)</a>,\n<a href=\"https://man.page/3/strtoimax\">strtoimax(3)</a>, <a href=\"https://man.page/3/strtoul\">strtoul(3)</a>,</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}