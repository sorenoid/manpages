{"name":"stdarg","description":"stdarg,\nva_start, va_arg, va_end, va_copy - variable argument\nlists","body":"\n\n<h1 align=\"center\">STDARG</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">stdarg,\nva_start, va_arg, va_end, va_copy - variable argument\nlists</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;stdarg.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void\nva_start(va_list</b> <i>ap</i><b>,</b> <i>last</i><b>);</b>\n<i><br>\ntype</i> <b>va_arg(va_list</b> <i>ap</i><b>,</b>\n<i>type</i><b>); <br>\nvoid va_end(va_list</b> <i>ap</i><b>); <br>\nvoid va_copy(va_list</b> <i>dest</i><b>, va_list</b>\n<i>src</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A function may\nbe called with a varying number of arguments of varying\ntypes. The include file <i>&lt;stdarg.h&gt;</i> declares a\ntype <i>va_list</i> and defines three macros for stepping\nthrough a list of arguments whose number and types are not\nknown to the called function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The called\nfunction must declare an object of type <i>va_list</i> which\nis used by the macros <b>va_start</b>(), <b>va_arg</b>(),\nand <b>va_end</b>().</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>va_start()</b>\n<br>\nThe <b>va_start</b>() macro initializes <i>ap</i> for\nsubsequent use by <b>va_arg</b>() and <b>va_end</b>(), and\nmust be called first.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The argument\n<i>last</i> is the name of the last argument before the\nvariable argument list, that is, the last argument of which\nthe calling function knows the type.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because the\naddress of this argument may be used in the\n<b>va_start</b>() macro, it should not be declared as a\nregister variable, or as a function or an array type.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>va_arg()</b>\n<br>\nThe <b>va_arg</b>() macro expands to an expression that has\nthe type and value of the next argument in the call. The\nargument <i>ap</i> is the <i>va_list ap</i> initialized by\n<b>va_start</b>(). Each call to <b>va_arg</b>() modifies\n<i>ap</i> so that the next call returns the next argument.\nThe argument <i>type</i> is a type name specified so that\nthe type of a pointer to an object that has the specified\ntype can be obtained simply by adding a * to\n<i>type</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first use\nof the <b>va_arg</b>() macro after that of the\n<b>va_start</b>() macro returns the argument after\n<i>last</i>. Successive invocations return the values of the\nremaining arguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If there is no\nnext argument, or if <i>type</i> is not compatible with the\ntype of the actual next argument (as promoted according to\nthe default argument promotions), random errors will\noccur.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>ap</i> is\npassed to a function that uses\n<b>va_arg(</b><i>ap</i><b>,</b><i>type</i><b>),</b> then the\nvalue of <i>ap</i> is undefined after the return of that\nfunction.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>va_end()</b>\n<br>\nEach invocation of <b>va_start</b>() must be matched by a\ncorresponding invocation of <b>va_end</b>() in the same\nfunction. After the call <b>va_end(</b><i>ap</i><b>)</b> the\nvariable <i>ap</i> is undefined. Multiple traversals of the\nlist, each bracketed by <b>va_start</b>() and\n<b>va_end</b>() are possible. <b>va_end</b>() may be a macro\nor a function.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>va_copy()</b>\n<br>\nThe <b>va_copy</b>() macro copies the (previously\ninitialized) variable argument list <i>src</i> to\n<i>dest</i>. The behavior is as if <b>va_start</b>() were\napplied to <i>dest</i> with the same <i>last</i> argument,\nfollowed by the same number of <b>va_arg</b>() invocations\nthat was used to reach the current state of <i>src</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An obvious\nimplementation would have a <i>va_list</i> be a pointer to\nthe stack frame of the variadic function. In such a setup\n(by far the most common) there seems nothing against an\nassignment</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">va_list aq =\nap;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unfortunately,\nthere are also systems that make it an array of pointers (of\nlength 1), and there one needs</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">va_list aq;\n<br>\n*aq = *ap;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Finally, on\nsystems where arguments are passed in registers, it may be\nnecessary for <b>va_start</b>() to allocate memory, store\nthe arguments there, and also an indication of which\nargument is next, so that <b>va_arg</b>() can step through\nthe list. Now <b>va_end</b>() can free the allocated memory\nagain. To accommodate this situation, C99 adds a macro\n<b>va_copy</b>(), so that the above assignment can be\nreplaced by</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">va_list aq;\n<br>\nva_copy(aq, ap); <br>\n... <br>\nva_end(aq);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each invocation\nof <b>va_copy</b>() must be matched by a corresponding\ninvocation of <b>va_end</b>() in the same function. Some\nsystems that do not supply <b>va_copy</b>() have\n<b>__va_copy</b> instead, since that was the name used in\nthe draft proposal.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3429491.png\" alt=\"Image grohtml-3429491.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>va_start</b>(), <b>va_arg</b>(), and <b>va_end</b>()\nmacros conform to C89. C99 defines the <b>va_copy</b>()\nmacro.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unlike the\nhistorical <b>varargs</b> macros, the <b>stdarg</b> macros\ndo not permit programmers to code a function with no fixed\narguments. This problem generates work mainly when\nconverting <b>varargs</b> code to <b>stdarg</b> code, but it\nalso creates difficulties for variadic functions that wish\nto pass all of their arguments on to a function that takes a\n<i>va_list</i> argument, such as <a href=\"https://man.page/3/vfprintf\">vfprintf(3)</a>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<i>foo</i> takes a string of format characters and prints\nout the argument associated with each format character based\non the type.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stdio.h&gt; <br>\n#include &lt;stdarg.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">void <br>\nfoo(char *fmt, ...) /* '...' is C syntax for a variadic\nfunction */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">{ <br>\nva_list ap; <br>\nint d; <br>\nchar c; <br>\nchar *s;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">va_start(ap,\nfmt); <br>\nwhile (*fmt) <br>\nswitch (*fmt++) { <br>\ncase 's': /* string */ <br>\ns = va_arg(ap, char *); <br>\nprintf(&quot;string %s\\n&quot;, s); <br>\nbreak; <br>\ncase 'd': /* int */ <br>\nd = va_arg(ap, int); <br>\nprintf(&quot;int %d\\n&quot;, d); <br>\nbreak; <br>\ncase 'c': /* char */ <br>\n/* need a cast here since va_arg only <br>\ntakes fully promoted types */ <br>\nc = (char) va_arg(ap, int); <br>\nprintf(&quot;char %c\\n&quot;, c); <br>\nbreak; <br>\n} <br>\nva_end(ap); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/vprintf\">vprintf(3)</a>,\n<a href=\"https://man.page/3/vscanf\">vscanf(3)</a>, <a href=\"https://man.page/3/vsyslog\">vsyslog(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}