{"name":"strtok","description":"strtok,\nstrtok_r - extract tokens from strings","body":"\n\n<h1 align=\"center\">STRTOK</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">strtok,\nstrtok_r - extract tokens from strings</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;string.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*strtok(char *</b><i>str</i><b>, const char\n*</b><i>delim</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>char\n*strtok_r(char *</b><i>str</i><b>, const char\n*</b><i>delim</i><b>, char **</b><i>saveptr</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strtok_r</b>():\n_POSIX_C_SOURCE <br>\n|| /* Glibc versions &lt;= 2.19: */ _BSD_SOURCE ||\n_SVID_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtok</b>() function breaks a string into a sequence of\nzero or more nonempty tokens. On the first call to\n<b>strtok</b>(), the string to be parsed should be specified\nin <i>str</i>. In each subsequent call that should parse the\nsame string, <i>str</i> must be NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>delim</i> argument specifies a set of bytes that delimit\nthe tokens in the parsed string. The caller may specify\ndifferent strings in <i>delim</i> in successive calls that\nparse the same string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each call to\n<b>strtok</b>() returns a pointer to a null-terminated\nstring containing the next token. This string does not\ninclude the delimiting byte. If no more tokens are found,\n<b>strtok</b>() returns NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A sequence of\ncalls to <b>strtok</b>() that operate on the same string\nmaintains a pointer that determines the point from which to\nstart searching for the next token. The first call to\n<b>strtok</b>() sets this pointer to point to the first byte\nof the string. The start of the next token is determined by\nscanning forward for the next nondelimiter byte in\n<i>str</i>. If such a byte is found, it is taken as the\nstart of the next token. If no such byte is found, then\nthere are no more tokens, and <b>strtok</b>() returns NULL.\n(A string that is empty or that contains only delimiters\nwill thus cause <b>strtok</b>() to return NULL on the first\ncall.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The end of each\ntoken is found by scanning forward until either the next\ndelimiter byte is found or until the terminating null byte\n('\\0') is encountered. If a delimiter byte is found, it is\noverwritten with a null byte to terminate the current token,\nand <b>strtok</b>() saves a pointer to the following byte;\nthat pointer will be used as the starting point when\nsearching for the next token. In this case, <b>strtok</b>()\nreturns a pointer to the start of the found token.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From the above\ndescription, it follows that a sequence of two or more\ncontiguous delimiter bytes in the parsed string is\nconsidered to be a single delimiter, and that delimiter\nbytes at the start or end of the string are ignored. Put\nanother way: the tokens returned by <b>strtok</b>() are\nalways nonempty strings. Thus, for example, given the string\n&quot;<i>aaa;;bbb,</i>&quot;, successive calls to\n<b>strtok</b>() that specify the delimiter string\n&quot;<i>;,</i>&quot; would return the strings\n&quot;<i>aaa</i>&quot; and &quot;<i>bbb</i>&quot;, and then\na null pointer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtok_r</b>() function is a reentrant version of\n<b>strtok</b>(). The <i>saveptr</i> argument is a pointer to\na <i>char&nbsp;*</i> variable that is used internally by\n<b>strtok_r</b>() in order to maintain context between\nsuccessive calls that parse the same string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On the first\ncall to <b>strtok_r</b>(), <i>str</i> should point to the\nstring to be parsed, and the value of <i>*saveptr</i> is\nignored (but see NOTES). In subsequent calls, <i>str</i>\nshould be NULL, and <i>saveptr</i> (and the buffer that it\npoints to) should be unchanged since the previous call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Different\nstrings may be parsed concurrently using sequences of calls\nto <b>strtok_r</b>() that specify different <i>saveptr</i>\narguments.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>strtok</b>() and <b>strtok_r</b>() functions return a\npointer to the next token, or NULL if there are no more\ntokens.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3387901.png\" alt=\"Image grohtml-3387901.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strtok</b>()</p>\n\n<p style=\"margin-left:22%;\">POSIX.1-2001, POSIX.1-2008,\nC89, C99, SVr4, 4.3BSD.</p>\n\n<p style=\"margin-left:11%;\"><b>strtok_r</b>()</p>\n\n<p style=\"margin-left:22%;\">POSIX.1-2001, POSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On some\nimplementations, <i>*saveptr</i> is required to be NULL on\nthe first call to <b>strtok_r</b>() that is being used to\nparse <i>str</i>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Be cautious\nwhen using these functions. If you do use them, note\nthat:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>These functions modify their first argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>These functions cannot be used on constant strings.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The identity of the delimiting byte is lost.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The <b>strtok</b>() function uses a static buffer while\nparsing, so it&rsquo;s not thread safe. Use\n<b>strtok_r</b>() if this matters to you.</p></td></tr>\n</table>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow uses nested loops that employ <b>strtok_r</b>() to\nbreak a string into a two-level hierarchy of tokens. The\nfirst command-line argument specifies the string to be\nparsed. The second argument specifies the delimiter byte(s)\nto be used to separate that string into &quot;major&quot;\ntokens. The third argument specifies the delimiter byte(s)\nto be used to separate the &quot;major&quot; tokens into\nsubtokens.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An example of\nthe output produced by this program is the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n'a/bbb///cc;xxx:yyy:' ':;' '/'</b> <br>\n1: a/bbb///cc <br>\n--&gt; a <br>\n--&gt; bbb <br>\n--&gt; cc <br>\n2: xxx <br>\n--&gt; xxx <br>\n3: yyy <br>\n--&gt; yyy</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;string.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nchar *str1, *str2, *token, *subtoken; <br>\nchar *saveptr1, *saveptr2;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 4)\n{ <br>\nfprintf(stderr, &quot;Usage: %s string delim\nsubdelim\\n&quot;, <br>\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (int j = 1,\nstr1 = argv[1]; ; j++, str1 = NULL) { <br>\ntoken = strtok_r(str1, argv[2], &amp;saveptr1); <br>\nif (token == NULL) <br>\nbreak; <br>\nprintf(&quot;%d: %s\\n&quot;, j, token);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (str2 =\ntoken; ; str2 = NULL) { <br>\nsubtoken = strtok_r(str2, argv[3], &amp;saveptr2); <br>\nif (subtoken == NULL) <br>\nbreak; <br>\nprintf(&quot; --&gt; %s\\n&quot;, subtoken); <br>\n} <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Another example\nprogram using <b>strtok</b>() can be found in\n<a href=\"https://man.page/3/getaddrinfo_a\">getaddrinfo_a(3)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/index\">index(3)</a>,\n<a href=\"https://man.page/3/memchr\">memchr(3)</a>, <a href=\"https://man.page/3/rindex\">rindex(3)</a>, <a href=\"https://man.page/3/strchr\">strchr(3)</a>,\n<a href=\"https://man.page/3/string\">string(3)</a>, <a href=\"https://man.page/3/strpbrk\">strpbrk(3)</a>, <a href=\"https://man.page/3/strsep\">strsep(3)</a>,\n<a href=\"https://man.page/3/strspn\">strspn(3)</a>, <a href=\"https://man.page/3/strstr\">strstr(3)</a>, <a href=\"https://man.page/3/wcstok\">wcstok(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":3}