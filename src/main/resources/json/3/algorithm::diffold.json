{"name":"algorithm::diffold","description":"Algorithm::DiffOld\n- Compute &rsquo;intelligent&rsquo; differences between two\nfiles / lists but use the old (&lt;=0.59) interface.\n\n<h2>NOTE\n<a name=\"NOTE\"></a>\n</h2>\n\n\nThis has been\nprovided as part of the Algorithm::Diff package by Ned Konz.\nThis particular module is <b><small>ONLY</small></b> for\npeople who <b><small>HAVE</small></b> to have the old\ninterface, which uses a comparison function rather than a\nkey generating function.\n\nBecause each of\nthe lines in one array have to be compared with each of the\nlines in the other array, this does M*N comparisons. This\ncan be very slow. I clocked it at taking 18 times as long as\nthe stock version of Algorithm::Diff for a 4000-line file.\nIt will get worse quadratically as array sizes increase.","body":"\n\n<h1 align=\"center\">Algorithm::DiffOld</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Algorithm::DiffOld\n- Compute &rsquo;intelligent&rsquo; differences between two\nfiles / lists but use the old (&lt;=0.59) interface.</p>\n\n<h2>NOTE\n<a name=\"NOTE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This has been\nprovided as part of the Algorithm::Diff package by Ned Konz.\nThis particular module is <b><small>ONLY</small></b> for\npeople who <b><small>HAVE</small></b> to have the old\ninterface, which uses a comparison function rather than a\nkey generating function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because each of\nthe lines in one array have to be compared with each of the\nlines in the other array, this does M*N comparisons. This\ncan be very slow. I clocked it at taking 18 times as long as\nthe stock version of Algorithm::Diff for a 4000-line file.\nIt will get worse quadratically as array sizes increase.</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">use\nAlgorithm::DiffOld qw(diff LCS traverse_sequences); <br>\n@lcs = LCS( \\@seq1, \\@seq2, $comparison_function ); <br>\n$lcsref = LCS( \\@seq1, \\@seq2, $comparison_function ); <br>\n@diffs = diff( \\@seq1, \\@seq2, $comparison_function ); <br>\ntraverse_sequences( \\@seq1, \\@seq2, <br>\n{ MATCH =&gt; $callback, <br>\nDISCARD_A =&gt; $callback, <br>\nDISCARD_B =&gt; $callback, <br>\n}, <br>\n$comparison_function );</p>\n\n<h2>COMPARISON FUNCTIONS\n<a name=\"COMPARISON FUNCTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of the\nmain routines should be passed a comparison function. If you\naren&rsquo;t passing one in, <b>use Algorithm::Diff\ninstead</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nshould return a true value when two items should compare as\nequal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\ninstance,</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">@lcs = LCS(\n\\@seq1, \\@seq2, sub { my ($a, $b) = @_; $a eq $b } );</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">but if that is\nall you&rsquo;re doing with your comparison function, just\nuse Algorithm::Diff and let it do this (this is its\ndefault).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Or:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sub\nsomeFunkyComparisonFunction <br>\n{ <br>\nmy ($a, $b) = @_; <br>\n$a =~ m{$b}; <br>\n} <br>\n@diffs = diff( \\@lines, \\@patterns,\n\\&amp;someFunkyComparisonFunction );</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">which would\nallow you to diff an array @lines which consists of text\nlines with an array @patterns which consists of regular\nexpressions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is\nactually the reason I wrote this version -- there is no way\nto do this with a key generation function as in the stock\nAlgorithm::Diff.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#NOTE\">NOTE</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#COMPARISON FUNCTIONS\">COMPARISON FUNCTIONS</a>"],"level":3}