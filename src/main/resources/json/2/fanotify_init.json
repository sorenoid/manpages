{"name":"fanotify_init","description":"fanotify_init -\ncreate and initialize fanotify group","body":"\n\n<h1 align=\"center\">FANOTIFY_INIT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fanotify_init -\ncreate and initialize fanotify group</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;fcntl.h&gt; <br>\n#include &lt;sys/fanotify.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfanotify_init(unsigned int</b> <i>flags</i><b>, unsigned\nint</b> <i>event_f_flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an overview\nof the fanotify API, see <a href=\"https://man.page/7/fanotify\">fanotify(7)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fanotify_init</b>()\ninitializes a new fanotify group and returns a file\ndescriptor for the event queue associated with the\ngroup.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The file\ndescriptor is used in calls to <a href=\"https://man.page/2/fanotify_mark\">fanotify_mark(2)</a> to\nspecify the files, directories, mounts or filesystems for\nwhich fanotify events shall be created. These events are\nreceived by reading from the file descriptor. Some events\nare only informative, indicating that a file has been\naccessed. Other events can be used to determine whether\nanother application is permitted to access a file or\ndirectory. Permission to access filesystem objects is\ngranted by writing to the file descriptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Multiple\nprograms may be using the fanotify interface at the same\ntime to monitor the same files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the current\nimplementation, the number of fanotify groups per user is\nlimited to 128. This limit cannot be overridden.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Calling\n<b>fanotify_init</b>() requires the <b>CAP_SYS_ADMIN</b>\ncapability. This constraint might be relaxed in future\nversions of the API. Therefore, certain additional\ncapability checks have been implemented as indicated\nbelow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument contains a multi-bit field defining\nthe notification class of the listening application and\nfurther single bit fields specifying the behavior of the\nfile descriptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If multiple\nlisteners for permission events exist, the notification\nclass is used to establish the sequence in which the\nlisteners receive the events.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only one of the\nfollowing notification classes may be specified in\n<i>flags</i>: <b><br>\nFAN_CLASS_PRE_CONTENT</b></p>\n\n<p style=\"margin-left:22%;\">This value allows the receipt\nof events notifying that a file has been accessed and events\nfor permission decisions if a file may be accessed. It is\nintended for event listeners that need to access files\nbefore they contain their final data. This notification\nclass might be used by hierarchical storage managers, for\nexample.</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_CLASS_CONTENT</b></p>\n\n<p style=\"margin-left:22%;\">This value allows the receipt\nof events notifying that a file has been accessed and events\nfor permission decisions if a file may be accessed. It is\nintended for event listeners that need to access files when\nthey already contain their final content. This notification\nclass might be used by malware detection programs, for\nexample.</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_CLASS_NOTIF</b></p>\n\n<p style=\"margin-left:22%;\">This is the default value. It\ndoes not need to be specified. This value only allows the\nreceipt of events notifying that a file has been accessed.\nPermission decisions before the file is accessed are not\npossible.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Listeners with\ndifferent notification classes will receive events in the\norder <b>FAN_CLASS_PRE_CONTENT</b>,\n<b>FAN_CLASS_CONTENT</b>, <b>FAN_CLASS_NOTIF</b>. The order\nof notification for listeners in the same notification class\nis undefined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nbits can additionally be set in <i>flags</i>: <b><br>\nFAN_CLOEXEC</b></p>\n\n<p style=\"margin-left:22%;\">Set the close-on-exec flag\n(<b>FD_CLOEXEC</b>) on the new file descriptor. See the\ndescription of the <b>O_CLOEXEC</b> flag in\n<a href=\"https://man.page/2/open\">open(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_NONBLOCK</b></p>\n\n<p style=\"margin-left:22%;\">Enable the nonblocking flag\n(<b>O_NONBLOCK</b>) for the file descriptor. Reading from\nthe file descriptor will not block. Instead, if no data is\navailable, <a href=\"https://man.page/2/read\">read(2)</a> fails with the error\n<b>EAGAIN</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_UNLIMITED_QUEUE</b></p>\n\n<p style=\"margin-left:22%;\">Remove the limit of 16384\nevents for the event queue. Use of this flag requires the\n<b>CAP_SYS_ADMIN</b> capability.</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_UNLIMITED_MARKS</b></p>\n\n<p style=\"margin-left:22%;\">Remove the limit of 8192 marks.\nUse of this flag requires the <b>CAP_SYS_ADMIN</b>\ncapability.</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_REPORT_TID</b> (since\nLinux 4.20)</p>\n\n<p style=\"margin-left:22%;\">Report thread ID (TID) instead\nof process ID (PID) in the <i>pid</i> field of the <i>struct\nfanotify_event_metadata</i> supplied to <a href=\"https://man.page/2/read\">read(2)</a> (see\n<a href=\"https://man.page/7/fanotify\">fanotify(7)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_REPORT_FID</b> (since\nLinux 5.1)</p>\n\n<p style=\"margin-left:22%;\">This value allows the receipt\nof events which contain additional information about the\nunderlying filesystem object correlated to an event. An\nadditional record of type <b>FAN_EVENT_INFO_TYPE_FID</b>\nencapsulates the information about the object and is\nincluded alongside the generic event metadata structure. The\nfile descriptor that is used to represent the object\ncorrelated to an event is instead substituted with a file\nhandle. It is intended for applications that may find the\nuse of a file handle to identify an object more suitable\nthan a file descriptor. Additionally, it may be used for\napplications monitoring a directory or a filesystem that are\ninterested in the directory entry modification events\n<b>FAN_CREATE</b>, <b>FAN_DELETE</b>, and <b>FAN_MOVE</b>,\nor in events such as <b>FAN_ATTRIB</b>,\n<b>FAN_DELETE_SELF</b>, and <b>FAN_MOVE_SELF</b>. All the\nevents above require an fanotify group that identifies\nfilesystem objects by file handles. Note that for the\ndirectory entry modification events the reported file handle\nidentifies the modified directory and not the\ncreated/deleted/moved child object. The use of\n<b>FAN_CLASS_CONTENT</b> or <b>FAN_CLASS_PRE_CONTENT</b> is\nnot permitted with this flag and will result in the error\n<b>EINVAL</b>. See <a href=\"https://man.page/7/fanotify\">fanotify(7)</a> for additional\ndetails.</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_REPORT_DIR_FID</b>\n(since Linux 5.9)</p>\n\n<p style=\"margin-left:22%;\">Events for fanotify groups\ninitialized with this flag will contain (see exceptions\nbelow) additional information about a directory object\ncorrelated to an event. An additional record of type\n<b>FAN_EVENT_INFO_TYPE_DFID</b> encapsulates the information\nabout the directory object and is included alongside the\ngeneric event metadata structure. For events that occur on a\nnon-directory object, the additional structure includes a\nfile handle that identifies the parent directory filesystem\nobject. Note that there is no guarantee that the directory\nfilesystem object will be found at the location described by\nthe file handle information at the time the event is\nreceived. When combined with the flag <b>FAN_REPORT_FID</b>,\ntwo records may be reported with events that occur on a\nnon-directory object, one to identify the non-directory\nobject itself and one to identify the parent directory\nobject. Note that in some cases, a filesystem object does\nnot have a parent, for example, when an event occurs on an\nunlinked but open file. In that case, with the\n<b>FAN_REPORT_FID</b> flag, the event will be reported with\nonly one record to identify the non-directory object itself,\nbecause there is no directory associated with the event.\nWithout the <b>FAN_REPORT_FID</b> flag, no event will be\nreported. See <a href=\"https://man.page/7/fanotify\">fanotify(7)</a> for additional details.</p>\n\n<p style=\"margin-left:11%;\"><b>FAN_REPORT_NAME</b> (since\nLinux 5.9)</p>\n\n<p style=\"margin-left:22%;\">Events for fanotify groups\ninitialized with this flag will contain additional\ninformation about the name of the directory entry correlated\nto an event. This flag must be provided in conjunction with\nthe flag <b>FAN_REPORT_DIR_FID</b>. Providing this flag\nvalue without <b>FAN_REPORT_DIR_FID</b> will result in the\nerror <b>EINVAL</b>. This flag may be combined with the flag\n<b>FAN_REPORT_FID</b>. An additional record of type\n<b>FAN_EVENT_INFO_TYPE_DFID_NAME</b>, which encapsulates the\ninformation about the directory entry, is included alongside\nthe generic event metadata structure and substitutes the\nadditional information record of type\n<b>FAN_EVENT_INFO_TYPE_DFID</b>. The additional record\nincludes a file handle that identifies a directory\nfilesystem object followed by a name that identifies an\nentry in that directory. For the directory entry\nmodification events <b>FAN_CREATE</b>, <b>FAN_DELETE</b>,\nand <b>FAN_MOVE</b>, the reported name is that of the\ncreated/deleted/moved directory entry. For other events that\noccur on a directory object, the reported file handle is\nthat of the directory object itself and the reported name is\n&rsquo;.&rsquo;. For other events that occur on a\nnon-directory object, the reported file handle is that of\nthe parent directory object and the reported name is the\nname of a directory entry where the object was located at\nthe time of the event. The rationale behind this logic is\nthat the reported directory file handle can be passed to\n<a href=\"https://man.page/2/open_by_handle_at\">open_by_handle_at(2)</a> to get an open directory file\ndescriptor and that file descriptor along with the reported\nname can be used to call <a href=\"https://man.page/2/fstatat\">fstatat(2)</a>. The same rule\nthat applies to record type <b>FAN_EVENT_INFO_TYPE_DFID</b>\nalso applies to record type\n<b>FAN_EVENT_INFO_TYPE_DFID_NAME</b>: if a non-directory\nobject has no parent, either the event will not be reported\nor it will be reported without the directory entry\ninformation. Note that there is no guarantee that the\nfilesystem object will be found at the location described by\nthe directory entry information at the time the event is\nreceived. See <a href=\"https://man.page/7/fanotify\">fanotify(7)</a> for additional details.</p>\n\n\n<p style=\"margin-left:11%;\"><b>FAN_REPORT_DFID_NAME</b></p>\n\n<p style=\"margin-left:22%;\">This is a synonym for\n(<b>FAN_REPORT_DIR_FID</b>|<b>FAN_REPORT_NAME</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>event_f_flags</i> argument defines the file status flags\nthat will be set on the open file descriptions that are\ncreated for fanotify events. For details of these flags, see\nthe description of the <i>flags</i> values in\n<a href=\"https://man.page/2/open\">open(2)</a>. <i>event_f_flags</i> includes a multi-bit\nfield for the access mode. This field can take the following\nvalues: <b><br>\nO_RDONLY</b></p>\n\n<p style=\"margin-left:22%;\">This value allows only read\naccess.</p>\n\n<p style=\"margin-left:11%;\"><b>O_WRONLY</b></p>\n\n<p style=\"margin-left:22%;\">This value allows only write\naccess.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>O_RDWR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p>This value allows read and write access.</p></td>\n<td width=\"17%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additional bits\ncan be set in <i>event_f_flags</i>. The most useful values\nare: <b><br>\nO_LARGEFILE</b></p>\n\n<p style=\"margin-left:22%;\">Enable support for files\nexceeding 2&nbsp;GB. Failing to set this flag will result in\nan <b>EOVERFLOW</b> error when trying to open a large file\nwhich is monitored by an fanotify group on a 32-bit\nsystem.</p>\n\n<p style=\"margin-left:11%;\"><b>O_CLOEXEC</b> (since Linux\n3.18)</p>\n\n<p style=\"margin-left:22%;\">Enable the close-on-exec flag\nfor the file descriptor. See the description of the\n<b>O_CLOEXEC</b> flag in <a href=\"https://man.page/2/open\">open(2)</a> for reasons why this\nmay be useful.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nare also allowable: <b>O_APPEND</b>, <b>O_DSYNC</b>,\n<b>O_NOATIME</b>, <b>O_NONBLOCK</b>, and <b>O_SYNC</b>.\nSpecifying any other flag in <i>event_f_flags</i> yields the\nerror <b>EINVAL</b> (but see BUGS).</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>fanotify_init</b>() returns a new file descriptor. On\nerror, -1 is returned, and <i>errno</i> is set to indicate\nthe error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">An invalid value was passed in\n<i>flags</i> or <i>event_f_flags</i>.\n<b>FAN_ALL_INIT_FLAGS</b> (deprecated since Linux kernel\nversion 4.20) defines all allowable bits for\n<i>flags</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The number of fanotify groups for this user exceeds\n128.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The allocation of memory for the notification group\nfailed.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSYS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This kernel does not implement <b>fanotify_init</b>().\nThe fanotify API is available only if the kernel was\nconfigured with <b>CONFIG_FANOTIFY</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The operation is not permitted because the caller lacks\nthe <b>CAP_SYS_ADMIN</b> capability.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fanotify_init</b>()\nwas introduced in version 2.6.36 of the Linux kernel and\nenabled in version 2.6.37.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall is Linux-specific.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nbug was present in Linux kernels before version 3.18:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The <b>O_CLOEXEC</b> is ignored\nwhen passed in <i>event_f_flags</i>.</p></td>\n<td width=\"2%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nbug was present in Linux kernels before version 3.14:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The <i>event_f_flags</i>\nargument is not checked for invalid flags. Flags that are\nintended only for internal use, such as <b>FMODE_EXEC</b>,\ncan be set, and will consequently be set for the file\ndescriptors returned when reading from the fanotify file\ndescriptor.</p> </td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/fanotify_mark\">fanotify_mark(2)</a>,\n<a href=\"https://man.page/7/fanotify\">fanotify(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}