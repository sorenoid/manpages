{"name":"quotactl","description":"quotactl -\nmanipulate disk quotas","body":"\n\n<h1 align=\"center\">QUOTACTL</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">quotactl -\nmanipulate disk quotas</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/quota.h&gt; <br>\n#include &lt;xfs/xqm.h&gt; /* for XFS quotas */</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nquotactl(int</b> <i>cmd</i><b>, const char\n*</b><i>special</i><b>, int</b> <i>id</i><b>, caddr_t</b>\n<i>addr</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The quota\nsystem can be used to set per-user, per-group, and\nper-project limits on the amount of disk space used on a\nfilesystem. For each user and/or group, a soft limit and a\nhard limit can be set for each filesystem. The hard limit\ncan&rsquo;t be exceeded. The soft limit can be exceeded, but\nwarnings will ensue. Moreover, the user can&rsquo;t exceed\nthe soft limit for more than grace period duration (one week\nby default) at a time; after this, the soft limit counts as\na hard limit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>quotactl</b>() call manipulates disk quotas. The\n<i>cmd</i> argument indicates a command to be applied to the\nuser or group ID specified in <i>id</i>. To initialize the\n<i>cmd</i> argument, use the <i>QCMD(subcmd, type)</i>\nmacro. The <i>type</i> value is either <b>USRQUOTA</b>, for\nuser quotas, <b>GRPQUOTA</b>, for group quotas, or (since\nLinux 4.1) <b>PRJQUOTA</b>, for project quotas. The\n<i>subcmd</i> value is described below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>special</i> argument is a pointer to a null-terminated\nstring containing the pathname of the (mounted) block\nspecial device for the filesystem being manipulated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>addr</i>\nargument is the address of an optional, command-specific,\ndata structure that is copied in or out of the system. The\ninterpretation of <i>addr</i> is given with each operation\nbelow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>subcmd</i> value is one of the following operations:\n<b><br>\nQ_QUOTAON</b></p>\n\n<p style=\"margin-left:22%;\">Turn on quotas for a\nfilesystem. The <i>id</i> argument is the identification\nnumber of the quota format to be used. Currently, there are\nthree supported quota formats:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"18%\">\n\n\n<p><b>QFMT_VFS_OLD</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"58%\">\n\n\n<p>The original quota format.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"18%\">\n\n\n<p><b>QFMT_VFS_V0</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"58%\">\n\n\n<p>The standard VFS v0 quota format, which can handle\n32-bit UIDs and GIDs and quota limits up to 2^42 bytes and\n2^32 inodes.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"18%\">\n\n\n<p><b>QFMT_VFS_V1</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"58%\">\n\n\n<p>A quota format that can handle 32-bit UIDs and GIDs and\nquota limits of 2^64 bytes and 2^64 inodes.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>addr</i>\nargument points to the pathname of a file containing the\nquotas for the filesystem. The quota file must exist; it is\nnormally created with the <b>quotacheck</b>(8) program</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Quota\ninformation can be also stored in hidden system inodes for\next4, XFS, and other filesystems if the filesystem is\nconfigured so. In this case, there are no visible quota\nfiles and there is no need to use <b>quotacheck</b>(8).\nQuota information is always kept consistent by the\nfilesystem and the <b>Q_QUOTAON</b> operation serves only to\nenable enforcement of quota limits. The presence of hidden\nsystem inodes with quota information is indicated by the\n<b>DQF_SYS_FILE</b> flag in the <i>dqi_flags</i> field\nreturned by the <b>Q_GETINFO</b> operation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nrequires privilege (<b>CAP_SYS_ADMIN</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>Q_QUOTAOFF</b></p>\n\n<p style=\"margin-left:22%;\">Turn off quotas for a\nfilesystem. The <i>addr</i> and <i>id</i> arguments are\nignored. This operation requires privilege\n(<b>CAP_SYS_ADMIN</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>Q_GETQUOTA</b></p>\n\n<p style=\"margin-left:22%;\">Get disk quota limits and\ncurrent usage for user or group <i>id</i>. The <i>addr</i>\nargument is a pointer to a <i>dqblk</i> structure defined in\n<i>&lt;sys/quota.h&gt;</i> as follows:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* uint64_t is\nan unsigned 64-bit integer; <br>\nuint32_t is an unsigned 32-bit integer */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct dqblk {\n/* Definition since Linux 2.4.22 */ <br>\nuint64_t dqb_bhardlimit; /* Absolute limit on disk <br>\nquota blocks alloc */ <br>\nuint64_t dqb_bsoftlimit; /* Preferred limit on <br>\ndisk quota blocks */ <br>\nuint64_t dqb_curspace; /* Current occupied space <br>\n(in bytes) */ <br>\nuint64_t dqb_ihardlimit; /* Maximum number of <br>\nallocated inodes */ <br>\nuint64_t dqb_isoftlimit; /* Preferred inode limit */ <br>\nuint64_t dqb_curinodes; /* Current number of <br>\nallocated inodes */ <br>\nuint64_t dqb_btime; /* Time limit for excessive <br>\ndisk use */ <br>\nuint64_t dqb_itime; /* Time limit for excessive <br>\nfiles */ <br>\nuint32_t dqb_valid; /* Bit mask of QIF_* <br>\nconstants */ <br>\n};</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* Flags in\ndqb_valid that indicate which fields in <br>\ndqblk structure are valid. */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nQIF_BLIMITS 1 <br>\n#define QIF_SPACE 2 <br>\n#define QIF_ILIMITS 4 <br>\n#define QIF_INODES 8 <br>\n#define QIF_BTIME 16 <br>\n#define QIF_ITIME 32 <br>\n#define QIF_LIMITS (QIF_BLIMITS | QIF_ILIMITS) <br>\n#define QIF_USAGE (QIF_SPACE | QIF_INODES) <br>\n#define QIF_TIMES (QIF_BTIME | QIF_ITIME) <br>\n#define QIF_ALL (QIF_LIMITS | QIF_USAGE | QIF_TIMES)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>dqb_valid</i> field is a bit mask that is set to indicate\nthe entries in the <i>dqblk</i> structure that are valid.\nCurrently, the kernel fills in all entries of the\n<i>dqblk</i> structure and marks them as valid in the\n<i>dqb_valid</i> field. Unprivileged users may retrieve only\ntheir own quotas; a privileged user (<b>CAP_SYS_ADMIN</b>)\ncan retrieve the quotas of any user.</p>\n\n<p style=\"margin-left:11%;\"><b>Q_GETNEXTQUOTA</b> (since\nLinux 4.6)</p>\n\n<p style=\"margin-left:22%;\">This operation is the same as\n<b>Q_GETQUOTA</b>, but it returns quota information for the\nnext ID greater than or equal to <i>id</i> that has a quota\nset.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>addr</i>\nargument is a pointer to a <i>nextdqblk</i> structure whose\nfields are as for the <i>dqblk</i>, except for the addition\nof a <i>dqb_id</i> field that is used to return the ID for\nwhich quota information is being returned:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nnextdqblk { <br>\nuint64_t dqb_bhardlimit; <br>\nuint64_t dqb_bsoftlimit; <br>\nuint64_t dqb_curspace; <br>\nuint64_t dqb_ihardlimit; <br>\nuint64_t dqb_isoftlimit; <br>\nuint64_t dqb_curinodes; <br>\nuint64_t dqb_btime; <br>\nuint64_t dqb_itime; <br>\nuint32_t dqb_valid; <br>\nuint32_t dqb_id; <br>\n};</p>\n\n<p style=\"margin-left:11%;\"><b>Q_SETQUOTA</b></p>\n\n<p style=\"margin-left:22%;\">Set quota information for user\nor group <i>id</i>, using the information supplied in the\n<i>dqblk</i> structure pointed to by <i>addr</i>. The\n<i>dqb_valid</i> field of the <i>dqblk</i> structure\nindicates which entries in the structure have been set by\nthe caller. This operation supersedes the <b>Q_SETQLIM</b>\nand <b>Q_SETUSE</b> operations in the previous quota\ninterfaces. This operation requires privilege\n(<b>CAP_SYS_ADMIN</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>Q_GETINFO</b> (since Linux\n2.4.22)</p>\n\n<p style=\"margin-left:22%;\">Get information (like grace\ntimes) about quotafile. The <i>addr</i> argument should be a\npointer to a <i>dqinfo</i> structure. This structure is\ndefined in <i>&lt;sys/quota.h&gt;</i> as follows:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* uint64_t is\nan unsigned 64-bit integer; <br>\nuint32_t is an unsigned 32-bit integer */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct dqinfo {\n/* Defined since kernel 2.4.22 */ <br>\nuint64_t dqi_bgrace; /* Time before block soft limit <br>\nbecomes hard limit */ <br>\nuint64_t dqi_igrace; /* Time before inode soft limit <br>\nbecomes hard limit */ <br>\nuint32_t dqi_flags; /* Flags for quotafile <br>\n(DQF_*) */ <br>\nuint32_t dqi_valid; <br>\n};</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* Bits for\ndqi_flags */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* Quota format\nQFMT_VFS_OLD */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nDQF_ROOT_SQUASH (1 &lt;&lt; 0) /* Root squash enabled */\n<br>\n/* Before Linux v4.0, this had been defined <br>\nprivately as V1_DQF_RSQUASH */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* Quota format\nQFMT_VFS_V0 / QFMT_VFS_V1 */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nDQF_SYS_FILE (1 &lt;&lt; 16) /* Quota stored in <br>\na system file */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* Flags in\ndqi_valid that indicate which fields in <br>\ndqinfo structure are valid. */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nIIF_BGRACE 1 <br>\n#define IIF_IGRACE 2 <br>\n#define IIF_FLAGS 4 <br>\n#define IIF_ALL (IIF_BGRACE | IIF_IGRACE | IIF_FLAGS)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>dqi_valid</i> field in the <i>dqinfo</i> structure\nindicates the entries in the structure that are valid.\nCurrently, the kernel fills in all entries of the\n<i>dqinfo</i> structure and marks them all as valid in the\n<i>dqi_valid</i> field. The <i>id</i> argument is\nignored.</p>\n\n<p style=\"margin-left:11%;\"><b>Q_SETINFO</b> (since Linux\n2.4.22)</p>\n\n<p style=\"margin-left:22%;\">Set information about\nquotafile. The <i>addr</i> argument should be a pointer to a\n<i>dqinfo</i> structure. The <i>dqi_valid</i> field of the\n<i>dqinfo</i> structure indicates the entries in the\nstructure that have been set by the caller. This operation\nsupersedes the <b>Q_SETGRACE</b> and <b>Q_SETFLAGS</b>\noperations in the previous quota interfaces. The <i>id</i>\nargument is ignored. This operation requires privilege\n(<b>CAP_SYS_ADMIN</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>Q_GETFMT</b> (since Linux\n2.4.22)</p>\n\n<p style=\"margin-left:22%;\">Get quota format used on the\nspecified filesystem. The <i>addr</i> argument should be a\npointer to a 4-byte buffer where the format number will be\nstored.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>Q_SYNC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Update the on-disk copy of quota usages for a\nfilesystem. If <i>special</i> is NULL, then all filesystems\nwith active quotas are sync&rsquo;ed. The <i>addr</i> and\n<i>id</i> arguments are ignored.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>Q_GETSTATS</b> (supported up\nto Linux 2.4.21)</p>\n\n<p style=\"margin-left:22%;\">Get statistics and other\ngeneric information about the quota subsystem. The\n<i>addr</i> argument should be a pointer to a <i>dqstats</i>\nstructure in which data should be stored. This structure is\ndefined in <i>&lt;sys/quota.h&gt;</i>. The <i>special</i>\nand <i>id</i> arguments are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis obsolete and was removed in Linux 2.4.22. Files in\n<i>/proc/sys/fs/quota/</i> carry the information\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For XFS\nfilesystems making use of the XFS Quota Manager (XQM), the\nabove operations are bypassed and the following operations\nare used: <b><br>\nQ_XQUOTAON</b></p>\n\n<p style=\"margin-left:22%;\">Turn on quotas for an XFS\nfilesystem. XFS provides the ability to turn on/off quota\nlimit enforcement with quota accounting. Therefore, XFS\nexpects <i>addr</i> to be a pointer to an <i>unsigned\nint</i> that contains a bitwise combination of the following\nflags (defined in <i>&lt;xfs/xqm.h&gt;</i>):</p>\n\n\n<p style=\"margin-left:28%; margin-top: 1em\">XFS_QUOTA_UDQ_ACCT\n/* User quota accounting */ <br>\nXFS_QUOTA_UDQ_ENFD /* User quota limits enforcement */ <br>\nXFS_QUOTA_GDQ_ACCT /* Group quota accounting */ <br>\nXFS_QUOTA_GDQ_ENFD /* Group quota limits enforcement */ <br>\nXFS_QUOTA_PDQ_ACCT /* Project quota accounting */ <br>\nXFS_QUOTA_PDQ_ENFD /* Project quota limits enforcement\n*/</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nrequires privilege (<b>CAP_SYS_ADMIN</b>). The <i>id</i>\nargument is ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>Q_XQUOTAOFF</b></p>\n\n<p style=\"margin-left:22%;\">Turn off quotas for an XFS\nfilesystem. As with <b>Q_QUOTAON</b>, XFS filesystems expect\na pointer to an <i>unsigned int</i> that specifies whether\nquota accounting and/or limit enforcement need to be turned\noff (using the same flags as for <b>Q_XQUOTAON</b>\noperation). This operation requires privilege\n(<b>CAP_SYS_ADMIN</b>). The <i>id</i> argument is\nignored.</p>\n\n<p style=\"margin-left:11%;\"><b>Q_XGETQUOTA</b></p>\n\n<p style=\"margin-left:22%;\">Get disk quota limits and\ncurrent usage for user <i>id</i>. The <i>addr</i> argument\nis a pointer to an <i>fs_disk_quota</i> structure, which is\ndefined in <i>&lt;xfs/xqm.h&gt;</i> as follows:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* All the blk\nunits are in BBs (Basic Blocks) of <br>\n512 bytes. */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nFS_DQUOT_VERSION 1 /* fs_disk_quota.d_version */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nXFS_USER_QUOTA (1&lt;&lt;0) /* User quota type */ <br>\n#define XFS_PROJ_QUOTA (1&lt;&lt;1) /* Project quota type */\n<br>\n#define XFS_GROUP_QUOTA (1&lt;&lt;2) /* Group quota type\n*/</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nfs_disk_quota { <br>\nint8_t d_version; /* Version of this structure */ <br>\nint8_t d_flags; /* XFS_{USER,PROJ,GROUP}_QUOTA */ <br>\nuint16_t d_fieldmask; /* Field specifier */ <br>\nuint32_t d_id; /* User, project, or group ID */ <br>\nuint64_t d_blk_hardlimit; /* Absolute limit on <br>\ndisk blocks */ <br>\nuint64_t d_blk_softlimit; /* Preferred limit on <br>\ndisk blocks */ <br>\nuint64_t d_ino_hardlimit; /* Maximum # allocated <br>\ninodes */ <br>\nuint64_t d_ino_softlimit; /* Preferred inode limit */ <br>\nuint64_t d_bcount; /* # disk blocks owned by <br>\nthe user */ <br>\nuint64_t d_icount; /* # inodes owned by the user */ <br>\nint32_t d_itimer; /* Zero if within inode limits */ <br>\n/* If not, we refuse service */ <br>\nint32_t d_btimer; /* Similar to above; for <br>\ndisk blocks */ <br>\nuint16_t d_iwarns; /* # warnings issued with <br>\nrespect to # of inodes */ <br>\nuint16_t d_bwarns; /* # warnings issued with <br>\nrespect to disk blocks */ <br>\nint32_t d_padding2; /* Padding - for future use */ <br>\nuint64_t d_rtb_hardlimit; /* Absolute limit on realtime <br>\n(RT) disk blocks */ <br>\nuint64_t d_rtb_softlimit; /* Preferred limit on RT <br>\ndisk blocks */ <br>\nuint64_t d_rtbcount; /* # realtime blocks owned */ <br>\nint32_t d_rtbtimer; /* Similar to above; for RT <br>\ndisk blocks */ <br>\nuint16_t d_rtbwarns; /* # warnings issued with <br>\nrespect to RT disk blocks */ <br>\nint16_t d_padding3; /* Padding - for future use */ <br>\nchar d_padding4[8]; /* Yet more padding */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Unprivileged\nusers may retrieve only their own quotas; a privileged user\n(<b>CAP_SYS_ADMIN</b>) may retrieve the quotas of any\nuser.</p>\n\n<p style=\"margin-left:11%;\"><b>Q_XGETNEXTQUOTA</b> (since\nLinux 4.6)</p>\n\n<p style=\"margin-left:22%;\">This operation is the same as\n<b>Q_XGETQUOTA</b>, but it returns (in the\n<i>fs_disk_quota</i> structure pointed by <i>addr</i>) quota\ninformation for the next ID greater than or equal to\n<i>id</i> that has a quota set. Note that since\n<i>fs_disk_quota</i> already has <i>q_id</i> field, no\nseparate structure type is needed (in contrast with\n<b>Q_GETQUOTA</b> and <b>Q_GETNEXTQUOTA</b> operations)</p>\n\n<p style=\"margin-left:11%;\"><b>Q_XSETQLIM</b></p>\n\n<p style=\"margin-left:22%;\">Set disk quota limits for user\n<i>id</i>. The <i>addr</i> argument is a pointer to an\n<i>fs_disk_quota</i> structure. This operation requires\nprivilege (<b>CAP_SYS_ADMIN</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>Q_XGETQSTAT</b></p>\n\n<p style=\"margin-left:22%;\">Returns XFS filesystem-specific\nquota information in the <i>fs_quota_stat</i> structure\npointed by <i>addr</i>. This is useful for finding out how\nmuch space is used to store quota information, and also to\nget the quota on/off status of a given local XFS filesystem.\nThe <i>fs_quota_stat</i> structure itself is defined as\nfollows:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nFS_QSTAT_VERSION 1 /* fs_quota_stat.qs_version */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nfs_qfilestat { <br>\nuint64_t qfs_ino; /* Inode number */ <br>\nuint64_t qfs_nblks; /* Number of BBs <br>\n512-byte-blocks */ <br>\nuint32_t qfs_nextents; /* Number of extents */ <br>\n};</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nfs_quota_stat { <br>\nint8_t qs_version; /* Version number for <br>\nfuture changes */ <br>\nuint16_t qs_flags; /* XFS_QUOTA_{U,P,G}DQ_{ACCT,ENFD} */\n<br>\nint8_t qs_pad; /* Unused */ <br>\nstruct fs_qfilestat qs_uquota; /* User quota storage <br>\ninformation */ <br>\nstruct fs_qfilestat qs_gquota; /* Group quota storage <br>\ninformation */ <br>\nuint32_t qs_incoredqs; /* Number of dquots in core */ <br>\nint32_t qs_btimelimit; /* Limit for blocks timer */ <br>\nint32_t qs_itimelimit; /* Limit for inodes timer */ <br>\nint32_t qs_rtbtimelimit;/* Limit for RT <br>\nblocks timer */ <br>\nuint16_t qs_bwarnlimit; /* Limit for # of warnings */ <br>\nuint16_t qs_iwarnlimit; /* Limit for # of warnings */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>id</i>\nargument is ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>Q_XGETQSTATV</b></p>\n\n<p style=\"margin-left:22%;\">Returns XFS filesystem-specific\nquota information in the <i>fs_quota_statv</i> pointed to by\n<i>addr</i>. This version of the operation uses a structure\nwith proper versioning support, along with appropriate\nlayout (all fields are naturally aligned) and padding to\navoiding special compat handling; it also provides the\nability to get statistics regarding the project quota file.\nThe <i>fs_quota_statv</i> structure itself is defined as\nfollows:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nFS_QSTATV_VERSION1 1 /* fs_quota_statv.qs_version */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nfs_qfilestatv { <br>\nuint64_t qfs_ino; /* Inode number */ <br>\nuint64_t qfs_nblks; /* Number of BBs <br>\n512-byte-blocks */ <br>\nuint32_t qfs_nextents; /* Number of extents */ <br>\nuint32_t qfs_pad; /* Pad for 8-byte alignment */ <br>\n};</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nfs_quota_statv { <br>\nint8_t qs_version; /* Version for future <br>\nchanges */ <br>\nuint8_t qs_pad1; /* Pad for 16-bit alignment */ <br>\nuint16_t qs_flags; /* XFS_QUOTA_.* flags */ <br>\nuint32_t qs_incoredqs; /* Number of dquots incore */ <br>\nstruct fs_qfilestatv qs_uquota; /* User quota <br>\ninformation */ <br>\nstruct fs_qfilestatv qs_gquota; /* Group quota <br>\ninformation */ <br>\nstruct fs_qfilestatv qs_pquota; /* Project quota <br>\ninformation */ <br>\nint32_t qs_btimelimit; /* Limit for blocks timer */ <br>\nint32_t qs_itimelimit; /* Limit for inodes timer */ <br>\nint32_t qs_rtbtimelimit; /* Limit for RT blocks <br>\ntimer */ <br>\nuint16_t qs_bwarnlimit; /* Limit for # of warnings */ <br>\nuint16_t qs_iwarnlimit; /* Limit for # of warnings */ <br>\nuint64_t qs_pad2[8]; /* For future proofing */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>qs_version</i> field of the structure should be filled\nwith the version of the structure supported by the callee\n(for now, only <i>FS_QSTAT_VERSION1</i> is supported). The\nkernel will fill the structure in accordance with version\nprovided. The <i>id</i> argument is ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>Q_XQUOTARM (since Linux\n3.16)</b></p>\n\n<p style=\"margin-left:22%;\">Free the disk space taken by\ndisk quotas. The <i>addr</i> argument should be a pointer to\nan <i>unsigned int</i> value containing flags (the same as\nin <i>d_flags</i> field of <i>fs_disk_quota</i> structure)\nwhich identify what types of quota should be removed. (Note\nthat the quota type passed in the <i>cmd</i> argument is\nignored, but should remain valid in order to pass\npreliminary quotactl syscall handler checks.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Quotas must\nhave already been turned off. The <i>id</i> argument is\nignored.</p>\n\n<p style=\"margin-left:11%;\"><b>Q_XQUOTASYNC</b> (since\nLinux 2.6.15; no-op since Linux 3.4)</p>\n\n<p style=\"margin-left:22%;\">This operation was an XFS quota\nequivalent to <b>Q_SYNC</b>, but it is no-op since Linux\n3.4, as <a href=\"https://man.page/1/sync\">sync(1)</a> writes quota information to disk now\n(in addition to the other filesystem metadata that it writes\nout). The <i>special</i>, <i>id</i> and <i>addr</i>\narguments are ignored.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>quotactl</b>() returns 0; on error -1 is returned, and\n<i>errno</i> is set to indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>cmd</i> is <b>Q_QUOTAON</b>,\nand the quota file pointed to by <i>addr</i> exists, but is\nnot a regular file or is not on the filesystem pointed to by\n<i>special</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>cmd</i> is <b>Q_QUOTAON</b>, but another\n<b>Q_QUOTAON</b> had already been performed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>addr</i> or <i>special</i> is invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>cmd</i> or <i>type</i> is invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>cmd</i> is <b>Q_QUOTAON</b>, but the specified quota\nfile is corrupted.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EINVAL</b> (since Linux\n5.5)</p>\n\n<p style=\"margin-left:22%;\"><i>cmd</i> is\n<b>Q_XQUOTARM</b>, but <i>addr</i> does not point to valid\nquota types.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The file specified by <i>special</i> or <i>addr</i> does\nnot exist.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSYS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The kernel has not been compiled with the\n<b>CONFIG_QUOTA</b> option.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTBLK</b></p>\n\n<p style=\"margin-left:22%;\"><i>special</i> is not a block\ndevice.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller lacked the required privilege\n(<b>CAP_SYS_ADMIN</b>) for the specified operation.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ERANGE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>cmd</i> is <b>Q_SETQUOTA</b>, but the specified\nlimits are out of the range allowed by the quota format.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>No disk quota is found for the indicated user. Quotas\nhave not been turned on for this filesystem.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>cmd</i> is <b>Q_QUOTAON</b>, but the specified quota\nformat was not found.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>cmd</i> is <b>Q_GETNEXTQUOTA</b> or\n<b>Q_XGETNEXTQUOTA</b>, but there is no ID greater than or\nequal to <i>id</i> that has an active quota.</p></td></tr>\n</table>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Instead of\n<i>&lt;xfs/xqm.h&gt;</i> one can use\n<i>&lt;linux/dqblk_xfs.h&gt;</i>, taking into account that\nthere are several naming discrepancies:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Quota enabling flags (of format\n<b>XFS_QUOTA_[UGP]DQ_{ACCT,ENFD}</b>) are defined without a\nleading &quot;X&quot;, as\n<b>FS_QUOTA_[UGP]DQ_{ACCT,ENFD}</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The same is true for <b>XFS_{USER,GROUP,PROJ}_QUOTA</b>\nquota type flags, which are defined as\n<b>FS_{USER,GROUP,PROJ}_QUOTA</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <i>dqblk_xfs.h</i> header file defines its own\n<b>XQM_USRQUOTA</b>, <b>XQM_GRPQUOTA</b>, and\n<b>XQM_PRJQUOTA</b> constants for the available quota types,\nbut their values are the same as for constants without the\n<b>XQM_</b> prefix.</p></td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/quota\">quota(1)</a>,\n<a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>, <b>quotacheck</b>(8),\n<b>quotaon</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}