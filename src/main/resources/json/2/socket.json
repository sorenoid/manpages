{"name":"socket","description":"socket - create\nan endpoint for communication","body":"\n\n<h1 align=\"center\">SOCKET</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">socket - create\nan endpoint for communication</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt;</b> /* See NOTES */ <b><br>\n#include &lt;sys/socket.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsocket(int</b> <i>domain</i><b>, int</b> <i>type</i><b>,\nint</b> <i>protocol</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>socket</b>()\ncreates an endpoint for communication and returns a file\ndescriptor that refers to that endpoint. The file descriptor\nreturned by a successful call will be the lowest-numbered\nfile descriptor not currently open for the process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>domain</i> argument specifies a communication domain;\nthis selects the protocol family which will be used for\ncommunication. These families are defined in\n<i>&lt;sys/socket.h&gt;</i>. The formats currently\nunderstood by the Linux kernel include:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3267431.png\" alt=\"Image grohtml-3267431.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Further details\nof the above address families, as well as information on\nseveral other address families, can be found in\n<a href=\"https://man.page/7/address_families\">address_families(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The socket has\nthe indicated <i>type</i>, which specifies the communication\nsemantics. Currently defined types are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>SOCK_STREAM</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>Provides sequenced, reliable, two-way, connection-based\nbyte streams. An out-of-band data transmission mechanism may\nbe supported.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>SOCK_DGRAM</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>Supports datagrams (connectionless, unreliable messages\nof a fixed maximum length).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>SOCK_SEQPACKET</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>Provides a sequenced, reliable, two-way connection-based\ndata transmission path for datagrams of fixed maximum\nlength; a consumer is required to read an entire packet with\neach input system call.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>SOCK_RAW</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>Provides raw network protocol access.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>SOCK_RDM</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>Provides a reliable datagram layer that does not\nguarantee ordering.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>SOCK_PACKET</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>Obsolete and should not be used in new programs; see\n<a href=\"https://man.page/7/packet\">packet(7)</a>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some socket\ntypes may not be implemented by all protocol families.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.27, the <i>type</i> argument serves a second purpose: in\naddition to specifying a socket type, it may include the\nbitwise OR of any of the following values, to modify the\nbehavior of <b>socket</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\"><b>SOCK_NONBLOCK</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"65%\">\n\n\n<p style=\"margin-top: 1em\">Set the <b>O_NONBLOCK</b> file\nstatus flag on the open file description (see\n<a href=\"https://man.page/2/open\">open(2)</a>) referred to by the new file descriptor.\nUsing this flag saves extra calls to <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> to\nachieve the same result.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"20%\">\n\n\n<p><b>SOCK_CLOEXEC</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"65%\">\n\n\n<p>Set the close-on-exec (<b>FD_CLOEXEC</b>) flag on the\nnew file descriptor. See the description of the\n<b>O_CLOEXEC</b> flag in <a href=\"https://man.page/2/open\">open(2)</a> for reasons why this\nmay be useful.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>protocol</i> specifies a particular protocol to be used\nwith the socket. Normally only a single protocol exists to\nsupport a particular socket type within a given protocol\nfamily, in which case <i>protocol</i> can be specified as 0.\nHowever, it is possible that many protocols may exist, in\nwhich case a particular protocol must be specified in this\nmanner. The protocol number to use is specific to the\n&ldquo;communication domain&rdquo; in which communication is\nto take place; see <a href=\"https://man.page/5/protocols\">protocols(5)</a>. See\n<a href=\"https://man.page/3/getprotoent\">getprotoent(3)</a> on how to map protocol name strings to\nprotocol numbers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sockets of type\n<b>SOCK_STREAM</b> are full-duplex byte streams. They do not\npreserve record boundaries. A stream socket must be in a\n<i>connected</i> state before any data may be sent or\nreceived on it. A connection to another socket is created\nwith a <a href=\"https://man.page/2/connect\">connect(2)</a> call. Once connected, data may be\ntransferred using <a href=\"https://man.page/2/read\">read(2)</a> and <a href=\"https://man.page/2/write\">write(2)</a> calls\nor some variant of the <a href=\"https://man.page/2/send\">send(2)</a> and <a href=\"https://man.page/2/recv\">recv(2)</a>\ncalls. When a session has been completed a <a href=\"https://man.page/2/close\">close(2)</a>\nmay be performed. Out-of-band data may also be transmitted\nas described in <a href=\"https://man.page/2/send\">send(2)</a> and received as described in\n<a href=\"https://man.page/2/recv\">recv(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ncommunications protocols which implement a\n<b>SOCK_STREAM</b> ensure that data is not lost or\nduplicated. If a piece of data for which the peer protocol\nhas buffer space cannot be successfully transmitted within a\nreasonable length of time, then the connection is considered\nto be dead. When <b>SO_KEEPALIVE</b> is enabled on the\nsocket the protocol checks in a protocol-specific manner if\nthe other end is still alive. A <b>SIGPIPE</b> signal is\nraised if a process sends or receives on a broken stream;\nthis causes naive processes, which do not handle the signal,\nto exit. <b>SOCK_SEQPACKET</b> sockets employ the same\nsystem calls as <b>SOCK_STREAM</b> sockets. The only\ndifference is that <a href=\"https://man.page/2/read\">read(2)</a> calls will return only the\namount of data requested, and any data remaining in the\narriving packet will be discarded. Also all message\nboundaries in incoming datagrams are preserved.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SOCK_DGRAM</b>\nand <b>SOCK_RAW</b> sockets allow sending of datagrams to\ncorrespondents named in <a href=\"https://man.page/2/sendto\">sendto(2)</a> calls. Datagrams\nare generally received with <a href=\"https://man.page/2/recvfrom\">recvfrom(2)</a>, which\nreturns the next datagram along with the address of its\nsender.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SOCK_PACKET</b>\nis an obsolete socket type to receive raw packets directly\nfrom the device driver. Use <a href=\"https://man.page/7/packet\">packet(7)</a> instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> <b>F_SETOWN</b> operation can be used to\nspecify a process or process group to receive a\n<b>SIGURG</b> signal when the out-of-band data arrives or\n<b>SIGPIPE</b> signal when a <b>SOCK_STREAM</b> connection\nbreaks unexpectedly. This operation may also be used to set\nthe process or process group that receives the I/O and\nasynchronous notification of I/O events via <b>SIGIO</b>.\nUsing <b>F_SETOWN</b> is equivalent to an <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>\ncall with the <b>FIOSETOWN</b> or <b>SIOCSPGRP</b>\nargument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\nnetwork signals an error condition to the protocol module\n(e.g., using an ICMP message for IP) the pending error flag\nis set for the socket. The next operation on this socket\nwill return the error code of the pending error. For some\nprotocols it is possible to enable a per-socket error queue\nto retrieve detailed information about the error; see\n<b>IP_RECVERR</b> in <a href=\"https://man.page/7/ip\">ip(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The operation\nof sockets is controlled by socket level <i>options</i>.\nThese options are defined in <i>&lt;sys/socket.h&gt;</i>.\nThe functions <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> and <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>\nare used to set and get options.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success, a\nfile descriptor for the new socket is returned. On error, -1\nis returned, and <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Permission to create a socket of\nthe specified type and/or protocol is denied.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EAFNOSUPPORT</b></p>\n\n<p style=\"margin-left:22%;\">The implementation does not\nsupport the specified address family.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Unknown protocol, or protocol family not available.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Invalid flags in <i>type</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system-wide limit on the total number of open files\nhas been reached.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOBUFS</b> or\n<b>ENOMEM</b></p>\n\n<p style=\"margin-left:22%;\">Insufficient memory is\navailable. The socket cannot be created until sufficient\nresources are freed.</p>\n\n<p style=\"margin-left:11%;\"><b>EPROTONOSUPPORT</b></p>\n\n<p style=\"margin-left:22%;\">The protocol type or the\nspecified protocol is not supported within this domain.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other errors\nmay be generated by the underlying protocol modules.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, 4.4BSD.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>SOCK_NONBLOCK</b> and <b>SOCK_CLOEXEC</b> flags are\nLinux-specific.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>socket</b>()\nappeared in 4.2BSD. It is generally portable to/from non-BSD\nsystems supporting clones of the BSD socket layer (including\nSystem&nbsp;V variants).</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 does\nnot require the inclusion of <i>&lt;sys/types.h&gt;</i>, and\nthis header file is not required on Linux. However, some\nhistorical (BSD) implementations required this header file,\nand portable applications are probably wise to include\nit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The manifest\nconstants used under 4.x BSD for protocol families are\n<b>PF_UNIX</b>, <b>PF_INET</b>, and so on, while\n<b>AF_UNIX</b>, <b>AF_INET</b>, and so on are used for\naddress families. However, already the BSD man page\npromises: &quot;The protocol family generally is the same as\nthe address family&quot;, and subsequent standards use AF_*\neverywhere.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An example of\nthe use of <b>socket</b>() is shown in\n<a href=\"https://man.page/3/getaddrinfo\">getaddrinfo(3)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/accept\">accept(2)</a>,\n<a href=\"https://man.page/2/bind\">bind(2)</a>, <a href=\"https://man.page/2/close\">close(2)</a>, <a href=\"https://man.page/2/connect\">connect(2)</a>,\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, <a href=\"https://man.page/2/getpeername\">getpeername(2)</a>,\n<a href=\"https://man.page/2/getsockname\">getsockname(2)</a>, <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>,\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a>, <a href=\"https://man.page/2/listen\">listen(2)</a>, <a href=\"https://man.page/2/read\">read(2)</a>,\n<a href=\"https://man.page/2/recv\">recv(2)</a>, <a href=\"https://man.page/2/select\">select(2)</a>, <a href=\"https://man.page/2/send\">send(2)</a>,\n<a href=\"https://man.page/2/shutdown\">shutdown(2)</a>, <a href=\"https://man.page/2/socketpair\">socketpair(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>,\n<a href=\"https://man.page/3/getprotoent\">getprotoent(3)</a>, <a href=\"https://man.page/7/address_families\">address_families(7)</a>,\n<a href=\"https://man.page/7/ip\">ip(7)</a>, <a href=\"https://man.page/7/socket\">socket(7)</a>, <a href=\"https://man.page/7/tcp\">tcp(7)</a>,\n<a href=\"https://man.page/7/udp\">udp(7)</a>, <a href=\"https://man.page/7/unix\">unix(7)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&ldquo;An\nIntroductory 4.3BSD Interprocess Communication\nTutorial&rdquo; and &ldquo;BSD Interprocess Communication\nTutorial&rdquo;, reprinted in <i>UNIX Programmer&rsquo;s\nSupplementary Documents Volume 1.</i></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}