{"name":"sigaltstack","body":"\n\n<h1 align=\"center\">SIGALTSTACK</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sigaltstack -\nset and/or get signal stack context</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;signal.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsigaltstack(const stack_t *</b><i>ss</i><b>, stack_t\n*</b><i>old_ss</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigaltstack</b>():</p>\n\n\n<p style=\"margin-left:17%;\">_XOPEN_SOURCE&nbsp;&gt;=&nbsp;500\n<br>\n|| /* Since glibc 2.12: */\n_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;200809L <br>\n|| /* Glibc versions &lt;= 2.19: */ _BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigaltstack</b>()\nallows a thread to define a new alternate signal stack\nand/or retrieve the state of an existing alternate signal\nstack. An alternate signal stack is used during the\nexecution of a signal handler if the establishment of that\nhandler (see <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>) requested it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The normal\nsequence of events for using an alternate signal stack is\nthe following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Allocate an area of memory to be used for the alternate\nsignal stack.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Use <b>sigaltstack</b>() to inform the system of the\nexistence and location of the alternate signal stack.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>When establishing a signal handler using\n<a href=\"https://man.page/2/sigaction\">sigaction(2)</a>, inform the system that the signal\nhandler should be executed on the alternate signal stack by\nspecifying the <b>SA_ONSTACK</b> flag.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>ss</i>\nargument is used to specify a new alternate signal stack,\nwhile the <i>old_ss</i> argument is used to retrieve\ninformation about the currently established signal stack. If\nwe are interested in performing just one of these tasks,\nthen the other argument can be specified as NULL.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>stack_t</i> type used to type the arguments of this\nfunction is defined as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n{ <br>\nvoid *ss_sp; /* Base address of stack */ <br>\nint ss_flags; /* Flags */ <br>\nsize_t ss_size; /* Number of bytes in stack */ <br>\n} stack_t;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To establish a\nnew alternate signal stack, the fields of this structure are\nset as follows: <i><br>\nss.ss_flags</i></p>\n\n<p style=\"margin-left:22%;\">This field contains either 0,\nor the following flag: <b><br>\nSS_AUTODISARM</b> (since Linux 4.7)</p>\n\n<p style=\"margin-left:32%;\">Clear the alternate signal\nstack settings on entry to the signal handler. When the\nsignal handler returns, the previous alternate signal stack\nsettings are restored.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This flag was\nadded in order make it safe to switch away from the signal\nhandler with <a href=\"https://man.page/3/swapcontext\">swapcontext(3)</a>. Without this flag, a\nsubsequently handled signal will corrupt the state of the\nswitched-away signal handler. On kernels where this flag is\nnot supported, <b>sigaltstack</b>() fails with the error\n<b>EINVAL</b> when this flag is supplied.</p>\n\n<p style=\"margin-left:11%;\"><i>ss.ss_sp</i></p>\n\n<p style=\"margin-left:22%;\">This field specifies the\nstarting address of the stack. When a signal handler is\ninvoked on the alternate stack, the kernel automatically\naligns the address given in <i>ss.ss_sp</i> to a suitable\naddress boundary for the underlying hardware\narchitecture.</p>\n\n<p style=\"margin-left:11%;\"><i>ss.ss_size</i></p>\n\n<p style=\"margin-left:22%;\">This field specifies the size\nof the stack. The constant <b>SIGSTKSZ</b> is defined to be\nlarge enough to cover the usual size requirements for an\nalternate signal stack, and the constant <b>MINSIGSTKSZ</b>\ndefines the minimum size required to execute a signal\nhandler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To disable an\nexisting stack, specify <i>ss.ss_flags</i> as\n<b>SS_DISABLE</b>. In this case, the kernel ignores any\nother flags in <i>ss.ss_flags</i> and the remaining fields\nin <i>ss</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>old_ss</i> is not NULL, then it is used to return\ninformation about the alternate signal stack which was in\neffect prior to the call to <b>sigaltstack</b>(). The\n<i>old_ss.ss_sp</i> and <i>old_ss.ss_size</i> fields return\nthe starting address and size of that stack. The\n<i>old_ss.ss_flags</i> may return either of the following\nvalues: <b><br>\nSS_ONSTACK</b></p>\n\n<p style=\"margin-left:22%;\">The thread is currently\nexecuting on the alternate signal stack. (Note that it is\nnot possible to change the alternate signal stack if the\nthread is currently executing on it.)</p>\n\n<p style=\"margin-left:11%;\"><b>SS_DISABLE</b></p>\n\n<p style=\"margin-left:22%;\">The alternate signal stack is\ncurrently disabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Alternatively,\nthis value is returned if the thread is currently executing\non an alternate signal stack that was established using the\n<b>SS_AUTODISARM</b> flag. In this case, it is safe to\nswitch away from the signal handler with\n<a href=\"https://man.page/3/swapcontext\">swapcontext(3)</a>. It is also possible to set up a\ndifferent alternative signal stack using a further call to\n<b>sigaltstack</b>().</p>\n\n<p style=\"margin-left:11%;\"><b>SS_AUTODISARM</b></p>\n\n<p style=\"margin-left:22%;\">The alternate signal stack has\nbeen marked to be autodisarmed as described above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By specifying\n<i>ss</i> as NULL, and <i>old_ss</i> as a non-NULL value,\none can obtain the current settings for the alternate signal\nstack without changing them.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigaltstack</b>()\nreturns 0 on success, or -1 on failure with <i>errno</i> set\nto indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Either <i>ss</i> or\n<i>old_ss</i> is not NULL and points to an area outside of\nthe process&rsquo;s address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>ss</i> is not NULL and the <i>ss_flags</i> field\ncontains an invalid flag.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The specified size of the new alternate signal stack\n<i>ss.ss_size</i> was less than <b>MINSIGSTKSZ</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to change the alternate signal stack\nwhile it was active (i.e., the thread was already executing\non the current alternate signal stack).</p></td></tr>\n</table>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3260501.png\" alt=\"Image grohtml-3260501.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SUSv2, SVr4.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>SS_AUTODISARM</b> flag is a Linux extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The most common\nusage of an alternate signal stack is to handle the\n<b>SIGSEGV</b> signal that is generated if the space\navailable for the standard stack is exhausted: in this case,\na signal handler for <b>SIGSEGV</b> cannot be invoked on the\nstandard stack; if we wish to handle it, we must use an\nalternate signal stack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Establishing an\nalternate signal stack is useful if a thread expects that it\nmay exhaust its standard stack. This may occur, for example,\nbecause the stack grows so large that it encounters the\nupwardly growing heap, or it reaches a limit established by\na call to <b>setrlimit(RLIMIT_STACK, &amp;rlim)</b>. If the\nstandard stack is exhausted, the kernel sends the thread a\n<b>SIGSEGV</b> signal. In these circumstances the only way\nto catch this signal is on an alternate signal stack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On most\nhardware architectures supported by Linux, stacks grow\ndownward. <b>sigaltstack</b>() automatically takes account\nof the direction of stack growth.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Functions\ncalled from a signal handler executing on an alternate\nsignal stack will also use the alternate signal stack. (This\nalso applies to any handlers invoked for other signals while\nthe thread is executing on the alternate signal stack.)\nUnlike the standard stack, the system does not automatically\nextend the alternate signal stack. Exceeding the allocated\nsize of the alternate signal stack will lead to\nunpredictable results.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A successful\ncall to <a href=\"https://man.page/2/execve\">execve(2)</a> removes any existing alternate\nsignal stack. A child process created via <a href=\"https://man.page/2/fork\">fork(2)</a>\ninherits a copy of its parent&rsquo;s alternate signal stack\nsettings. The same is also true for a child process created\nusing <a href=\"https://man.page/2/clone\">clone(2)</a>, unless the clone flags include\n<b>CLONE_VM</b> and do not include <b>CLONE_VFORK</b>, in\nwhich case any alternate signal stack that was established\nin the parent is disabled in the child process.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigaltstack</b>()\nsupersedes the older <b>sigstack</b>() call. For backward\ncompatibility, glibc also provides <b>sigstack</b>(). All\nnew applications should be written using\n<b>sigaltstack</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>History</b>\n<br>\n4.2BSD had a <b>sigstack</b>() system call. It used a\nslightly different struct, and had the major disadvantage\nthat the caller had to know the direction of stack\ngrowth.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In Linux 2.2\nand earlier, the only flag that could be specified in\n<i>ss.sa_flags</i> was <b>SS_DISABLE</b>. In the lead up to\nthe release of the Linux 2.4 kernel, a change was made to\nallow <b>sigaltstack</b>() to allow\n<i>ss.ss_flags==SS_ONSTACK</i> with the same meaning as\n<i>ss.ss_flags==0</i> (i.e., the inclusion of\n<b>SS_ONSTACK</b> in <i>ss.ss_flags</i> is a no-op). On\nother implementations, and according to POSIX.1,\n<b>SS_ONSTACK</b> appears only as a reported flag in\n<i>old_ss.ss_flags</i>. On Linux, there is no need ever to\nspecify <b>SS_ONSTACK</b> in <i>ss.ss_flags</i>, and indeed\ndoing so should be avoided on portability grounds: various\nother systems give an error if <b>SS_ONSTACK</b> is\nspecified in <i>ss.ss_flags</i>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncode segment demonstrates the use of <b>sigaltstack</b>()\n(and <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>) to install an alternate signal\nstack that is employed by a handler for the <b>SIGSEGV</b>\nsignal:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">stack_t ss;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ss.ss_sp =\nmalloc(SIGSTKSZ); <br>\nif (ss.ss_sp == NULL) { <br>\nperror(&quot;malloc&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ss.ss_size =\nSIGSTKSZ; <br>\nss.ss_flags = 0; <br>\nif (sigaltstack(&amp;ss, NULL) == -1) { <br>\nperror(&quot;sigaltstack&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sa.sa_flags =\nSA_ONSTACK; <br>\nsa.sa_handler = handler(); /* Address of a signal handler */\n<br>\nsigemptyset(&amp;sa.sa_mask); <br>\nif (sigaction(SIGSEGV, &amp;sa, NULL) == -1) { <br>\nperror(&quot;sigaction&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/execve\">execve(2)</a>,\n<a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>, <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a>, <a href=\"https://man.page/3/sigsetjmp\">sigsetjmp(3)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}