{"name":"sched_setscheduler","description":"sched_setscheduler,\nsched_getscheduler - set and get scheduling\npolicy/parameters","body":"\n\n<h1 align=\"center\">SCHED_SETSCHEDULER</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sched_setscheduler,\nsched_getscheduler - set and get scheduling\npolicy/parameters</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sched.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsched_setscheduler(pid_t</b> <i>pid</i><b>, int</b>\n<i>policy</i><b>, <br>\nconst struct sched_param *</b><i>param</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsched_getscheduler(pid_t</b> <i>pid</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>sched_setscheduler</b>() system call sets both the\nscheduling policy and parameters for the thread whose ID is\nspecified in <i>pid</i>. If <i>pid</i> equals zero, the\nscheduling policy and parameters of the calling thread will\nbe set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The scheduling\nparameters are specified in the <i>param</i> argument, which\nis a pointer to a structure of the following form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nsched_param { <br>\n... <br>\nint sched_priority; <br>\n... <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the current\nimplementation, the structure contains only one field,\n<i>sched_priority</i>. The interpretation of <i>param</i>\ndepends on the selected policy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently,\nLinux supports the following &quot;normal&quot; (i.e.,\nnon-real-time) scheduling policies as values that may be\nspecified in <i>policy</i>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"17%\">\n\n\n<p><b>SCHED_OTHER</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>the standard round-robin time-sharing policy;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"17%\">\n\n\n<p><b>SCHED_BATCH</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>for &quot;batch&quot; style execution of processes;\nand</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"17%\">\n\n\n<p><b>SCHED_IDLE</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>for running <i>very</i> low priority background\njobs.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For each of the\nabove policies, <i>param-&gt;sched_priority</i> must be\n0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various\n&quot;real-time&quot; policies are also supported, for\nspecial time-critical applications that need precise control\nover the way in which runnable threads are selected for\nexecution. For the rules governing when a process may use\nthese policies, see <a href=\"https://man.page/7/sched\">sched(7)</a>. The real-time policies\nthat may be specified in <i>policy</i> are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"15%\">\n\n\n<p style=\"margin-top: 1em\"><b>SCHED_FIFO</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"51%\">\n\n\n<p style=\"margin-top: 1em\">a first-in, first-out policy;\nand</p> </td>\n<td width=\"17%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"15%\">\n\n\n<p><b>SCHED_RR</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"51%\">\n\n\n<p>a round-robin policy.</p></td>\n<td width=\"17%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For each of the\nabove policies, <i>param-&gt;sched_priority</i> specifies a\nscheduling priority for the thread. This is a number in the\nrange returned by calling <a href=\"https://man.page/2/sched_get_priority_min\">sched_get_priority_min(2)</a>\nand <a href=\"https://man.page/2/sched_get_priority_max\">sched_get_priority_max(2)</a> with the specified\n<i>policy</i>. On Linux, these system calls return,\nrespectively, 1 and 99.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.32, the <b>SCHED_RESET_ON_FORK</b> flag can be ORed in\n<i>policy</i> when calling <b>sched_setscheduler</b>(). As a\nresult of including this flag, children created by\n<a href=\"https://man.page/2/fork\">fork(2)</a> do not inherit privileged scheduling\npolicies. See <a href=\"https://man.page/7/sched\">sched(7)</a> for details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sched_getscheduler</b>()\nreturns the current scheduling policy of the thread\nidentified by <i>pid</i>. If <i>pid</i> equals zero, the\npolicy of the calling thread will be retrieved.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>sched_setscheduler</b>() returns zero. On success,\n<b>sched_getscheduler</b>() returns the policy for the\nthread (a nonnegative integer). On error, both calls return\n-1, and <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Invalid arguments: <i>pid</i> is\nnegative or <i>param</i> is NULL.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>sched_setscheduler</b>()) <i>policy</i> is not one\nof the recognized policies.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>sched_setscheduler</b>()) <i>param</i> does not make\nsense for the specified <i>policy</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling thread does not have appropriate\nprivileges.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The thread whose ID is <i>pid</i> could not be\nfound.</p> </td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008 (but see BUGS below). The <b>SCHED_BATCH</b>\nand <b>SCHED_IDLE</b> policies are Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Further details\nof the semantics of all of the above &quot;normal&quot; and\n&quot;real-time&quot; scheduling policies can be found in\nthe <a href=\"https://man.page/7/sched\">sched(7)</a> manual page. That page also describes an\nadditional policy, <b>SCHED_DEADLINE</b>, which is settable\nonly via <a href=\"https://man.page/2/sched_setattr\">sched_setattr(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX systems\non which <b>sched_setscheduler</b>() and\n<b>sched_getscheduler</b>() are available define\n<b>_POSIX_PRIORITY_SCHEDULING</b> in\n<i>&lt;unistd.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 does\nnot detail the permissions that an unprivileged thread\nrequires in order to call <b>sched_setscheduler</b>(), and\ndetails vary across systems. For example, the Solaris 7\nmanual page says that the real or effective user ID of the\ncaller must match the real user ID or the save set-user-ID\nof the target.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The scheduling\npolicy and parameters are in fact per-thread attributes on\nLinux. The value returned from a call to <a href=\"https://man.page/2/gettid\">gettid(2)</a>\ncan be passed in the argument <i>pid</i>. Specifying\n<i>pid</i> as 0 will operate on the attributes of the\ncalling thread, and passing the value returned from a call\nto <a href=\"https://man.page/2/getpid\">getpid(2)</a> will operate on the attributes of the\nmain thread of the thread group. (If you are using the POSIX\nthreads API, then use <a href=\"https://man.page/3/pthread_setschedparam\">pthread_setschedparam(3)</a>,\n<a href=\"https://man.page/3/pthread_getschedparam\">pthread_getschedparam(3)</a>, and\n<a href=\"https://man.page/3/pthread_setschedprio\">pthread_setschedprio(3)</a>, instead of the\n<b>sched_*</b>(2) system calls.)</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 says\nthat on success, <b>sched_setscheduler</b>() should return\nthe previous scheduling policy. Linux\n<b>sched_setscheduler</b>() does not conform to this\nrequirement, since it always returns 0 on success.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/chrt\">chrt(1)</a>,\n<a href=\"https://man.page/2/nice\">nice(2)</a>, <a href=\"https://man.page/2/sched_get_priority_max\">sched_get_priority_max(2)</a>,\n<a href=\"https://man.page/2/sched_get_priority_min\">sched_get_priority_min(2)</a>,\n<a href=\"https://man.page/2/sched_getaffinity\">sched_getaffinity(2)</a>, <a href=\"https://man.page/2/sched_getattr\">sched_getattr(2)</a>,\n<a href=\"https://man.page/2/sched_getparam\">sched_getparam(2)</a>, <a href=\"https://man.page/2/sched_rr_get_interval\">sched_rr_get_interval(2)</a>,\n<a href=\"https://man.page/2/sched_setaffinity\">sched_setaffinity(2)</a>, <a href=\"https://man.page/2/sched_setattr\">sched_setattr(2)</a>,\n<a href=\"https://man.page/2/sched_setparam\">sched_setparam(2)</a>, <a href=\"https://man.page/2/sched_yield\">sched_yield(2)</a>,\n<a href=\"https://man.page/2/setpriority\">setpriority(2)</a>, <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>,\n<a href=\"https://man.page/7/cpuset\">cpuset(7)</a>, <a href=\"https://man.page/7/sched\">sched(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}