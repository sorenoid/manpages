{"name":"readv","body":"\n\n<h1 align=\"center\">READV</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">readv, writev,\npreadv, pwritev, preadv2, pwritev2 - read or write data into\nmultiple buffers</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/uio.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\nreadv(int</b> <i>fd</i><b>, const struct iovec\n*</b><i>iov</i><b>, int</b> <i>iovcnt</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\nwritev(int</b> <i>fd</i><b>, const struct iovec\n*</b><i>iov</i><b>, int</b> <i>iovcnt</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\npreadv(int</b> <i>fd</i><b>, const struct iovec\n*</b><i>iov</i><b>, int</b> <i>iovcnt</i><b>, <br>\noff_t</b> <i>offset</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\npwritev(int</b> <i>fd</i><b>, const struct iovec\n*</b><i>iov</i><b>, int</b> <i>iovcnt</i><b>, <br>\noff_t</b> <i>offset</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\npreadv2(int</b> <i>fd</i><b>, const struct iovec\n*</b><i>iov</i><b>, int</b> <i>iovcnt</i><b>, <br>\noff_t</b> <i>offset</i><b>, int</b>\n<i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\npwritev2(int</b> <i>fd</i><b>, const struct iovec\n*</b><i>iov</i><b>, int</b> <i>iovcnt</i><b>, <br>\noff_t</b> <i>offset</i><b>, int</b>\n<i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preadv</b>(),\n<b>pwritev</b>(): <br>\nSince glibc 2.19: <br>\n_DEFAULT_SOURCE <br>\nGlibc 2.19 and earlier: <br>\n_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>readv</b>() system call reads <i>iovcnt</i> buffers from\nthe file associated with the file descriptor <i>fd</i> into\nthe buffers described by <i>iov</i> (&quot;scatter\ninput&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>writev</b>() system call writes <i>iovcnt</i> buffers of\ndata described by <i>iov</i> to the file associated with the\nfile descriptor <i>fd</i> (&quot;gather output&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The pointer\n<i>iov</i> points to an array of <i>iovec</i> structures,\ndefined in <i>&lt;sys/uio.h&gt;</i> as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct iovec {\n<br>\nvoid *iov_base; /* Starting address */ <br>\nsize_t iov_len; /* Number of bytes to transfer */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>readv</b>() system call works just like <a href=\"https://man.page/2/read\">read(2)</a>\nexcept that multiple buffers are filled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>writev</b>() system call works just like <a href=\"https://man.page/2/write\">write(2)</a>\nexcept that multiple buffers are written out.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Buffers are\nprocessed in array order. This means that <b>readv</b>()\ncompletely fills <i>iov[0]</i> before proceeding to\n<i>iov[1]</i>, and so on. (If there is insufficient data,\nthen not all buffers pointed to by <i>iov</i> may be\nfilled.) Similarly, <b>writev</b>() writes out the entire\ncontents of <i>iov[0]</i> before proceeding to\n<i>iov[1]</i>, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The data\ntransfers performed by <b>readv</b>() and <b>writev</b>()\nare atomic: the data written by <b>writev</b>() is written\nas a single block that is not intermingled with output from\nwrites in other processes (but see <a href=\"https://man.page/7/pipe\">pipe(7)</a> for an\nexception); analogously, <b>readv</b>() is guaranteed to\nread a contiguous block of data from the file, regardless of\nread operations performed in other threads or processes that\nhave file descriptors referring to the same open file\ndescription (see <a href=\"https://man.page/2/open\">open(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preadv() and\npwritev()</b> <br>\nThe <b>preadv</b>() system call combines the functionality\nof <b>readv</b>() and <a href=\"https://man.page/2/pread\">pread(2)</a>. It performs the same\ntask as <b>readv</b>(), but adds a fourth argument,\n<i>offset</i>, which specifies the file offset at which the\ninput operation is to be performed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pwritev</b>() system call combines the functionality of\n<b>writev</b>() and <a href=\"https://man.page/2/pwrite\">pwrite(2)</a>. It performs the same\ntask as <b>writev</b>(), but adds a fourth argument,\n<i>offset</i>, which specifies the file offset at which the\noutput operation is to be performed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The file offset\nis not changed by these system calls. The file referred to\nby <i>fd</i> must be capable of seeking.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preadv2()\nand pwritev2()</b> <br>\nThese system calls are similar to <b>preadv</b>() and\n<b>pwritev</b>() calls, but add a fifth argument,\n<i>flags</i>, which modifies the behavior on a per-call\nbasis.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unlike\n<b>preadv</b>() and <b>pwritev</b>(), if the <i>offset</i>\nargument is -1, then the current file offset is used and\nupdated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument contains a bitwise OR of zero or more\nof the following flags: <b><br>\nRWF_DSYNC</b> (since Linux 4.7)</p>\n\n<p style=\"margin-left:22%;\">Provide a per-write equivalent\nof the <b>O_DSYNC open</b>(2) flag. This flag is meaningful\nonly for <b>pwritev2</b>(), and its effect applies only to\nthe data range written by the system call.</p>\n\n<p style=\"margin-left:11%;\"><b>RWF_HIPRI</b> (since Linux\n4.6)</p>\n\n<p style=\"margin-left:22%;\">High priority read/write.\nAllows block-based filesystems to use polling of the device,\nwhich provides lower latency, but may use additional\nresources. (Currently, this feature is usable only on a file\ndescriptor opened using the <b>O_DIRECT</b> flag.)</p>\n\n<p style=\"margin-left:11%;\"><b>RWF_SYNC</b> (since Linux\n4.7)</p>\n\n<p style=\"margin-left:22%;\">Provide a per-write equivalent\nof the <b>O_SYNC open</b>(2) flag. This flag is meaningful\nonly for <b>pwritev2</b>(), and its effect applies only to\nthe data range written by the system call.</p>\n\n<p style=\"margin-left:11%;\"><b>RWF_NOWAIT</b> (since Linux\n4.14)</p>\n\n<p style=\"margin-left:22%;\">Do not wait for data which is\nnot immediately available. If this flag is specified, the\n<b>preadv2</b>() system call will return instantly if it\nwould have to read data from the backing storage or wait for\na lock. If some data was successfully read, it will return\nthe number of bytes read. If no bytes were read, it will\nreturn -1 and set <i>errno</i> to <b>EAGAIN</b>. Currently,\nthis flag is meaningful only for <b>preadv2</b>().</p>\n\n<p style=\"margin-left:11%;\"><b>RWF_APPEND</b> (since Linux\n4.16)</p>\n\n<p style=\"margin-left:22%;\">Provide a per-write equivalent\nof the <b>O_APPEND open</b>(2) flag. This flag is meaningful\nonly for <b>pwritev2</b>(), and its effect applies only to\nthe data range written by the system call. The <i>offset</i>\nargument does not affect the write operation; the data is\nalways appended to the end of the file. However, if the\n<i>offset</i> argument is -1, the current file offset is\nupdated.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>readv</b>(), <b>preadv</b>(), and <b>preadv2</b>() return\nthe number of bytes read; <b>writev</b>(), <b>pwritev</b>(),\nand <b>pwritev2</b>() return the number of bytes\nwritten.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that it is\nnot an error for a successful call to transfer fewer bytes\nthan requested (see <a href=\"https://man.page/2/read\">read(2)</a> and <a href=\"https://man.page/2/write\">write(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On error, -1 is\nreturned, and <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The errors are\nas given for <a href=\"https://man.page/2/read\">read(2)</a> and <a href=\"https://man.page/2/write\">write(2)</a>.\nFurthermore, <b>preadv</b>(), <b>preadv2</b>(),\n<b>pwritev</b>(), and <b>pwritev2</b>() can also fail for\nthe same reasons as <a href=\"https://man.page/2/lseek\">lseek(2)</a>. Additionally, the\nfollowing errors are defined:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The sum of the <i>iov_len</i> values overflows an\n<i>ssize_t</i> value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The vector count, <i>iovcnt</i>, is less than zero or\ngreater than the permitted maximum.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\">An unknown flag is specified in\n<i>flags</i>.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preadv</b>()\nand <b>pwritev</b>() first appeared in Linux 2.6.30; library\nsupport was added in glibc 2.10.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preadv2</b>()\nand <b>pwritev2</b>() first appeared in Linux 4.6. Library\nsupport was added in glibc 2.26.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>readv</b>(),\n<b>writev</b>(): POSIX.1-2001, POSIX.1-2008, 4.4BSD (these\nsystem calls first appeared in 4.2BSD).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preadv</b>(),\n<b>pwritev</b>(): nonstandard, but present also on the\nmodern BSDs.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>preadv2</b>(),\n<b>pwritev2</b>(): nonstandard Linux extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 allows\nan implementation to place a limit on the number of items\nthat can be passed in <i>iov</i>. An implementation can\nadvertise its limit by defining <b>IOV_MAX</b> in\n<i>&lt;limits.h&gt;</i> or at run time via the return value\nfrom <i>sysconf(_SC_IOV_MAX)</i>. On modern Linux systems,\nthe limit is 1024. Back in Linux 2.0 days, this limit was\n16.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nThe raw <b>preadv</b>() and <b>pwritev</b>() system calls\nhave call signatures that differ slightly from that of the\ncorresponding GNU C library wrapper functions shown in the\nSYNOPSIS. The final argument, <i>offset</i>, is unpacked by\nthe wrapper functions into two arguments in the system\ncalls:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned\nlong</b> <i>pos_l</i><b>, unsigned long</b> <i>pos</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These arguments\ncontain, respectively, the low order and high order 32 bits\nof <i>offset</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Historical C\nlibrary/kernel differences</b> <br>\nTo deal with the fact that <b>IOV_MAX</b> was so low on\nearly versions of Linux, the glibc wrapper functions for\n<b>readv</b>() and <b>writev</b>() did some extra work if\nthey detected that the underlying kernel system call failed\nbecause this limit was exceeded. In the case of\n<b>readv</b>(), the wrapper function allocated a temporary\nbuffer large enough for all of the items specified by\n<i>iov</i>, passed that buffer in a call to <a href=\"https://man.page/2/read\">read(2)</a>,\ncopied data from the buffer to the locations specified by\nthe <i>iov_base</i> fields of the elements of <i>iov</i>,\nand then freed the buffer. The wrapper function for\n<b>writev</b>() performed the analogous task using a\ntemporary buffer and a call to <a href=\"https://man.page/2/write\">write(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The need for\nthis extra effort in the glibc wrapper functions went away\nwith Linux 2.2 and later. However, glibc continued to\nprovide this behavior until version 2.10. Starting with\nglibc version 2.9, the wrapper functions provide this\nbehavior only if the library detects that the system is\nrunning a Linux kernel older than version 2.6.18 (an\narbitrarily selected kernel version). And since glibc 2.20\n(which requires a minimum Linux kernel version of 2.6.32),\nthe glibc wrapper functions always just directly invoke the\nsystem calls.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncode sample demonstrates the use of <b>writev</b>():</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">char *str0 =\n&quot;hello &quot;; <br>\nchar *str1 = &quot;world\\n&quot;; <br>\nstruct iovec iov[2]; <br>\nssize_t nwritten;</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">iov[0].iov_base\n= str0; <br>\niov[0].iov_len = strlen(str0); <br>\niov[1].iov_base = str1; <br>\niov[1].iov_len = strlen(str1);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">nwritten =\nwritev(STDOUT_FILENO, iov, 2);</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/pread\">pread(2)</a>,\n<a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}