{"name":"close","body":"\n\n<h1 align=\"center\">CLOSE</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">close - close a\nfile descriptor</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nclose(int</b> <i>fd</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>close</b>()\ncloses a file descriptor, so that it no longer refers to any\nfile and may be reused. Any record locks (see\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>) held on the file it was associated with,\nand owned by the process, are removed (regardless of the\nfile descriptor that was used to obtain the lock).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>fd</i> is\nthe last file descriptor referring to the underlying open\nfile description (see <a href=\"https://man.page/2/open\">open(2)</a>), the resources\nassociated with the open file description are freed; if the\nfile descriptor was the last reference to a file which has\nbeen removed using <a href=\"https://man.page/2/unlink\">unlink(2)</a>, the file is\ndeleted.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>close</b>()\nreturns zero on success. On error, -1 is returned, and\n<i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>fd</i> isn&rsquo;t a valid\nopen file descriptor.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The <b>close</b>() call was interrupted by a signal; see\n<a href=\"https://man.page/7/signal\">signal(7)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EIO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>An I/O error occurred.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOSPC</b>,\n<b>EDQUOT</b></p>\n\n<p style=\"margin-left:22%;\">On NFS, these errors are not\nnormally reported against the first write which exceeds the\navailable storage space, but instead against a subsequent\n<a href=\"https://man.page/2/write\">write(2)</a>, <a href=\"https://man.page/2/fsync\">fsync(2)</a>, or <b>close</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See NOTES for a\ndiscussion of why <b>close</b>() should not be retried after\nan error.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4, 4.3BSD.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A successful\nclose does not guarantee that the data has been successfully\nsaved to disk, as the kernel uses the buffer cache to defer\nwrites. Typically, filesystems do not flush buffers when a\nfile is closed. If you need to be sure that the data is\nphysically stored on the underlying disk, use\n<a href=\"https://man.page/2/fsync\">fsync(2)</a>. (It will depend on the disk hardware at\nthis point.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nclose-on-exec file descriptor flag can be used to ensure\nthat a file descriptor is automatically closed upon a\nsuccessful <a href=\"https://man.page/2/execve\">execve(2)</a>; see <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> for\ndetails.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Multithreaded\nprocesses and close()</b> <br>\nIt is probably unwise to close file descriptors while they\nmay be in use by system calls in other threads in the same\nprocess. Since a file descriptor may be reused, there are\nsome obscure race conditions that may cause unintended side\neffects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Furthermore,\nconsider the following scenario where two threads are\nperforming operations on the same file descriptor:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>One thread is blocked in an I/O system call on the file\ndescriptor. For example, it is trying to <a href=\"https://man.page/2/write\">write(2)</a> to\na pipe that is already full, or trying to <a href=\"https://man.page/2/read\">read(2)</a>\nfrom a stream socket which currently has no available\ndata.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Another thread closes the file descriptor.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The behavior in\nthis situation varies across systems. On some systems, when\nthe file descriptor is closed, the blocking system call\nreturns immediately with an error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux (and\npossibly some other systems), the behavior is different. the\nblocking I/O system call holds a reference to the underlying\nopen file description, and this reference keeps the\ndescription open until the I/O system call completes. (See\n<a href=\"https://man.page/2/open\">open(2)</a> for a discussion of open file descriptions.)\nThus, the blocking system call in the first thread may\nsuccessfully complete after the <b>close</b>() in the second\nthread.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Dealing with\nerror returns from close()</b> <br>\nA careful programmer will check the return value of\n<b>close</b>(), since it is quite possible that errors on a\nprevious <a href=\"https://man.page/2/write\">write(2)</a> operation are reported only on the\nfinal <b>close</b>() that releases the open file\ndescription. Failing to check the return value when closing\na file may lead to <i>silent</i> loss of data. This can\nespecially be observed with NFS and with disk quota.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note, however,\nthat a failure return should be used only for diagnostic\npurposes (i.e., a warning to the application that there may\nstill be I/O pending or there may have been failed I/O) or\nremedial purposes (e.g., writing the file once more or\ncreating a backup).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Retrying the\n<b>close</b>() after a failure return is the wrong thing to\ndo, since this may cause a reused file descriptor from\nanother thread to be closed. This can occur because the\nLinux kernel <i>always</i> releases the file descriptor\nearly in the close operation, freeing it for reuse; the\nsteps that may return an error, such as flushing data to the\nfilesystem or device, occur only later in the close\noperation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many other\nimplementations similarly always close the file descriptor\n(except in the case of <b>EBADF</b>, meaning that the file\ndescriptor was invalid) even if they subsequently report an\nerror on return from <b>close</b>(). POSIX.1 is currently\nsilent on this point, but there are plans to mandate this\nbehavior in the next major release of the standard.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A careful\nprogrammer who wants to know about I/O errors may precede\n<b>close</b>() with a call to <a href=\"https://man.page/2/fsync\">fsync(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>EINTR</b> error is a somewhat special case. Regarding the\n<b>EINTR</b> error, POSIX.1-2008 says:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<b>close</b>() is interrupted by a signal that is to be\ncaught, it shall return -1 with <i>errno</i> set to\n<b>EINTR</b> and the state of <i>fildes</i> is\nunspecified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This permits\nthe behavior that occurs on Linux and many other\nimplementations, where, as with other errors that may be\nreported by <b>close</b>(), the file descriptor is\nguaranteed to be closed. However, it also permits another\npossibility: that the implementation returns an <b>EINTR</b>\nerror and keeps the file descriptor open. (According to its\ndocumentation, HP-UX&rsquo;s <b>close</b>() does this.) The\ncaller must then once more use <b>close</b>() to close the\nfile descriptor, to avoid file descriptor leaks. This\ndivergence in implementation behaviors provides a difficult\nhurdle for portable applications, since on many\nimplementations, <b>close</b>() must not be called again\nafter an <b>EINTR</b> error, and on at least one,\n<b>close</b>() must be called again. There are plans to\naddress this conundrum for the next major release of the\nPOSIX.1 standard.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/fcntl\">fcntl(2)</a>,\n<a href=\"https://man.page/2/fsync\">fsync(2)</a>, <a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/2/shutdown\">shutdown(2)</a>,\n<a href=\"https://man.page/2/unlink\">unlink(2)</a>, <a href=\"https://man.page/3/fclose\">fclose(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}