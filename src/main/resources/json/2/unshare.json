{"name":"unshare","description":"unshare -\ndisassociate parts of the process execution context","body":"\n\n<h1 align=\"center\">UNSHARE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">unshare -\ndisassociate parts of the process execution context</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE <br>\n#include &lt;sched.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nunshare(int</b> <i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unshare</b>()\nallows a process (or thread) to disassociate parts of its\nexecution context that are currently being shared with other\nprocesses (or threads). Part of the execution context, such\nas the mount namespace, is shared implicitly when a new\nprocess is created using <a href=\"https://man.page/2/fork\">fork(2)</a> or <a href=\"https://man.page/2/vfork\">vfork(2)</a>,\nwhile other parts, such as virtual memory, may be shared by\nexplicit request when creating a process or thread using\n<a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The main use of\n<b>unshare</b>() is to allow a process to control its shared\nexecution context without creating a new process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument is a bit mask that specifies which\nparts of the execution context should be unshared. This\nargument is specified by ORing together zero or more of the\nfollowing constants: <b><br>\nCLONE_FILES</b></p>\n\n<p style=\"margin-left:22%;\">Reverse the effect of the\n<a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_FILES</b> flag. Unshare the file\ndescriptor table, so that the calling process no longer\nshares its file descriptors with any other process.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_FS</b></p>\n\n<p style=\"margin-left:22%;\">Reverse the effect of the\n<a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_FS</b> flag. Unshare filesystem\nattributes, so that the calling process no longer shares its\nroot directory (<a href=\"https://man.page/2/chroot\">chroot(2)</a>), current directory\n(<a href=\"https://man.page/2/chdir\">chdir(2)</a>), or umask (<a href=\"https://man.page/2/umask\">umask(2)</a>) attributes\nwith any other process.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWCGROUP</b> (since\nLinux 4.6)</p>\n\n<p style=\"margin-left:22%;\">This flag has the same effect\nas the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_NEWCGROUP</b> flag. Unshare\nthe cgroup namespace. Use of <b>CLONE_NEWCGROUP</b> requires\nthe <b>CAP_SYS_ADMIN</b> capability.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWIPC</b> (since\nLinux 2.6.19)</p>\n\n<p style=\"margin-left:22%;\">This flag has the same effect\nas the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_NEWIPC</b> flag. Unshare the\nIPC namespace, so that the calling process has a private\ncopy of the IPC namespace which is not shared with any other\nprocess. Specifying this flag automatically implies\n<b>CLONE_SYSVSEM</b> as well. Use of <b>CLONE_NEWIPC</b>\nrequires the <b>CAP_SYS_ADMIN</b> capability.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWNET</b> (since\nLinux 2.6.24)</p>\n\n<p style=\"margin-left:22%;\">This flag has the same effect\nas the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_NEWNET</b> flag. Unshare the\nnetwork namespace, so that the calling process is moved into\na new network namespace which is not shared with any\npreviously existing process. Use of <b>CLONE_NEWNET</b>\nrequires the <b>CAP_SYS_ADMIN</b> capability.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWNS</b></p>\n\n<p style=\"margin-left:22%;\">This flag has the same effect\nas the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_NEWNS</b> flag. Unshare the\nmount namespace, so that the calling process has a private\ncopy of its namespace which is not shared with any other\nprocess. Specifying this flag automatically implies\n<b>CLONE_FS</b> as well. Use of <b>CLONE_NEWNS</b> requires\nthe <b>CAP_SYS_ADMIN</b> capability. For further\ninformation, see <a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWPID</b> (since\nLinux 3.8)</p>\n\n<p style=\"margin-left:22%;\">This flag has the same effect\nas the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_NEWPID</b> flag. Unshare the\nPID namespace, so that the calling process has a new PID\nnamespace for its children which is not shared with any\npreviously existing process. The calling process is\n<i>not</i> moved into the new namespace. The first child\ncreated by the calling process will have the process ID 1\nand will assume the role of <a href=\"https://man.page/1/init\">init(1)</a> in the new\nnamespace. <b>CLONE_NEWPID</b> automatically implies\n<b>CLONE_THREAD</b> as well. Use of <b>CLONE_NEWPID</b>\nrequires the <b>CAP_SYS_ADMIN</b> capability. For further\ninformation, see <a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWTIME</b> (since\nLinux 5.6)</p>\n\n<p style=\"margin-left:22%;\">Unshare the time namespace, so\nthat the calling process has a new time namespace for its\nchildren which is not shared with any previously existing\nprocess. The calling process is <i>not</i> moved into the\nnew namespace. Use of <b>CLONE_NEWTIME</b> requires the\n<b>CAP_SYS_ADMIN</b> capability. For further information,\nsee <a href=\"https://man.page/7/time_namespaces\">time_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWUSER</b> (since\nLinux 3.8)</p>\n\n<p style=\"margin-left:22%;\">This flag has the same effect\nas the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_NEWUSER</b> flag. Unshare\nthe user namespace, so that the calling process is moved\ninto a new user namespace which is not shared with any\npreviously existing process. As with the child process\ncreated by <a href=\"https://man.page/2/clone\">clone(2)</a> with the <b>CLONE_NEWUSER</b>\nflag, the caller obtains a full set of capabilities in the\nnew namespace.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>CLONE_NEWUSER</b>\nrequires that the calling process is not threaded;\nspecifying <b>CLONE_NEWUSER</b> automatically implies\n<b>CLONE_THREAD</b>. Since Linux 3.9, <b>CLONE_NEWUSER</b>\nalso automatically implies <b>CLONE_FS</b>.\n<b>CLONE_NEWUSER</b> requires that the user ID and group ID\nof the calling process are mapped to user IDs and group IDs\nin the user namespace of the calling process at the time of\nthe call.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For further\ninformation on user namespaces, see\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWUTS</b> (since\nLinux 2.6.19)</p>\n\n<p style=\"margin-left:22%;\">This flag has the same effect\nas the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_NEWUTS</b> flag. Unshare the\nUTS IPC namespace, so that the calling process has a private\ncopy of the UTS namespace which is not shared with any other\nprocess. Use of <b>CLONE_NEWUTS</b> requires the\n<b>CAP_SYS_ADMIN</b> capability.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_SYSVSEM</b> (since\nLinux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">This flag reverses the effect\nof the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_SYSVSEM</b> flag. Unshare\nSystem&nbsp;V semaphore adjustment (<i>semadj</i>) values,\nso that the calling process has a new empty <i>semadj</i>\nlist that is not shared with any other process. If this is\nthe last process that has a reference to the process&rsquo;s\ncurrent <i>semadj</i> list, then the adjustments in that\nlist are applied to the corresponding semaphores, as\ndescribed in <a href=\"https://man.page/2/semop\">semop(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\n<b>CLONE_THREAD</b>, <b>CLONE_SIGHAND</b>, and\n<b>CLONE_VM</b> can be specified in <i>flags</i> if the\ncaller is single threaded (i.e., it is not sharing its\naddress space with another process or thread). In this case,\nthese flags have no effect. (Note also that specifying\n<b>CLONE_THREAD</b> automatically implies <b>CLONE_VM</b>,\nand specifying <b>CLONE_VM</b> automatically implies\n<b>CLONE_SIGHAND</b>.) If the process is multithreaded, then\nthe use of these flags results in an error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>flags</i>\nis specified as zero, then <b>unshare</b>() is a no-op; no\nchanges are made to the calling process&rsquo;s execution\ncontext.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero returned. On failure, -1 is returned and <i>errno</i>\nis set to indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">An invalid bit was specified in\n<i>flags</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>CLONE_THREAD</b>, <b>CLONE_SIGHAND</b>, or\n<b>CLONE_VM</b> was specified in <i>flags</i>, and the\ncaller is multithreaded.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>CLONE_NEWIPC</b> was specified in <i>flags</i>, but\nthe kernel was not configured with the <b>CONFIG_SYSVIPC</b>\nand <b>CONFIG_IPC_NS</b> options.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>CLONE_NEWNET</b> was specified in <i>flags</i>, but\nthe kernel was not configured with the <b>CONFIG_NET_NS</b>\noption.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>CLONE_NEWPID</b> was specified in <i>flags</i>, but\nthe kernel was not configured with the <b>CONFIG_PID_NS</b>\noption.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>CLONE_NEWUSER</b> was specified in <i>flags</i>, but\nthe kernel was not configured with the <b>CONFIG_USER_NS</b>\noption.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>CLONE_NEWUTS</b> was specified in <i>flags</i>, but\nthe kernel was not configured with the <b>CONFIG_UTS_NS</b>\noption.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>CLONE_NEWPID</b> was specified in <i>flags</i>, but\nthe process has previously called <b>unshare</b>() with the\n<b>CLONE_NEWPID</b> flag.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Cannot allocate sufficient memory to copy parts of\ncaller&rsquo;s context that need to be unshared.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOSPC</b> (since Linux\n3.7)</p>\n\n<p style=\"margin-left:22%;\"><b>CLONE_NEWPID</b> was\nspecified in flags, but the limit on the nesting depth of\nPID namespaces would have been exceeded; see\n<a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>ENOSPC</b> (since Linux 4.9;\nbeforehand <b>EUSERS</b>)</p>\n\n<p style=\"margin-left:22%;\"><b>CLONE_NEWUSER</b> was\nspecified in <i>flags</i>, and the call would cause the\nlimit on the number of nested user namespaces to be\nexceeded. See <a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">From Linux 3.11\nto Linux 4.8, the error diagnosed in this case was\n<b>EUSERS</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>ENOSPC</b> (since Linux\n4.9)</p>\n\n<p style=\"margin-left:22%;\">One of the values in\n<i>flags</i> specified the creation of a new user namespace,\nbut doing so would have caused the limit defined by the\ncorresponding file in <i>/proc/sys/user</i> to be exceeded.\nFor further details, see <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process did not have the required privileges\nfor this operation.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><b>CLONE_NEWUSER</b> was specified in <i>flags</i>, but\neither the effective user ID or the effective group ID of\nthe caller does not have a mapping in the parent namespace\n(see <a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EPERM</b> (since Linux\n3.9)</p>\n\n<p style=\"margin-left:22%;\"><b>CLONE_NEWUSER</b> was\nspecified in <i>flags</i> and the caller is in a chroot\nenvironment (i.e., the caller&rsquo;s root directory does\nnot match the root directory of the mount namespace in which\nit resides).</p>\n\n<p style=\"margin-left:11%;\"><b>EUSERS</b> (from Linux 3.11\nto Linux 4.8)</p>\n\n<p style=\"margin-left:22%;\"><b>CLONE_NEWUSER</b> was\nspecified in <i>flags</i>, and the limit on the number of\nnested user namespaces would be exceeded. See the discussion\nof the <b>ENOSPC</b> error above.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>unshare</b>() system call was added to Linux in kernel\n2.6.16.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>unshare</b>() system call is Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Not all of the\nprocess attributes that can be shared when a new process is\ncreated using <a href=\"https://man.page/2/clone\">clone(2)</a> can be unshared using\n<b>unshare</b>(). In particular, as at kernel 3.8,\n<b>unshare</b>() does not implement flags that reverse the\neffects of <b>CLONE_SIGHAND</b>, <b>CLONE_THREAD</b>, or\n<b>CLONE_VM</b>. Such functionality may be added in the\nfuture, if required.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow provides a simple implementation of the\n<a href=\"https://man.page/1/unshare\">unshare(1)</a> command, which unshares one or more\nnamespaces and executes the command supplied in its\ncommand-line arguments. Here&rsquo;s an example of the use\nof this program, running a shell in a new mount namespace,\nand verifying that the original shell and the new shell are\nin separate mount namespaces:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>readlink\n/proc/$$/ns/mnt</b> <br>\nmnt:[4026531840] <br>\n$ <b>sudo ./unshare -m /bin/bash</b> <br>\n# <b>readlink /proc/$$/ns/mnt</b> <br>\nmnt:[4026532325]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The differing\noutput of the two <a href=\"https://man.page/1/readlink\">readlink(1)</a> commands shows that the\ntwo shells are in different mount namespaces.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n/* unshare.c</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A simple\nimplementation of the unshare(1) command: unshare <br>\nnamespaces and execute a command. <br>\n*/ <br>\n#define _GNU_SOURCE <br>\n#include &lt;sched.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* A simple\nerror-handling function: print an error message based <br>\non the value in 'errno' and terminate the calling process\n*/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nerrExit(msg) do { perror(msg); exit(EXIT_FAILURE); \\ <br>\n} while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nusage(char *pname) <br>\n{ <br>\nfprintf(stderr, &quot;Usage: %s [options] program\n[arg...]\\n&quot;, pname); <br>\nfprintf(stderr, &quot;Options can be:\\n&quot;); <br>\nfprintf(stderr, &quot; -C unshare cgroup namespace\\n&quot;);\n<br>\nfprintf(stderr, &quot; -i unshare IPC namespace\\n&quot;);\n<br>\nfprintf(stderr, &quot; -m unshare mount namespace\\n&quot;);\n<br>\nfprintf(stderr, &quot; -n unshare network\nnamespace\\n&quot;); <br>\nfprintf(stderr, &quot; -p unshare PID namespace\\n&quot;);\n<br>\nfprintf(stderr, &quot; -t unshare time namespace\\n&quot;);\n<br>\nfprintf(stderr, &quot; -u unshare UTS namespace\\n&quot;);\n<br>\nfprintf(stderr, &quot; -U unshare user namespace\\n&quot;);\n<br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint flags, opt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">flags = 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">while ((opt =\ngetopt(argc, argv, &quot;CimnptuU&quot;)) != -1) { <br>\nswitch (opt) { <br>\ncase 'C': flags |= CLONE_NEWCGROUP; break; <br>\ncase 'i': flags |= CLONE_NEWIPC; break; <br>\ncase 'm': flags |= CLONE_NEWNS; break; <br>\ncase 'n': flags |= CLONE_NEWNET; break; <br>\ncase 'p': flags |= CLONE_NEWPID; break; <br>\ncase 't': flags |= CLONE_NEWTIME; break; <br>\ncase 'u': flags |= CLONE_NEWUTS; break; <br>\ncase 'U': flags |= CLONE_NEWUSER; break; <br>\ndefault: usage(argv[0]); <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (optind\n&gt;= argc) <br>\nusage(argv[0]);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(unshare(flags) == -1) <br>\nerrExit(&quot;unshare&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">execvp(argv[optind],\n&amp;argv[optind]); <br>\nerrExit(&quot;execvp&quot;); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/unshare\">unshare(1)</a>,\n<a href=\"https://man.page/2/clone\">clone(2)</a>, <a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/kcmp\">kcmp(2)</a>,\n<a href=\"https://man.page/2/setns\">setns(2)</a>, <a href=\"https://man.page/2/vfork\">vfork(2)</a>, <a href=\"https://man.page/7/namespaces\">namespaces(7)</a></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Documentation/userspace-api/unshare.rst</i>\nin the Linux kernel source tree (or\n<i>Documentation/unshare.txt</i> before Linux 4.12)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}