{"name":"keyctl","description":"keyctl - manipulate the kernel&rsquo;s key management facility","body":"\n\n<h1 align=\"center\">KEYCTL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">keyctl -\nmanipulate the kernel&rsquo;s key management facility</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;keyutils.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nkeyctl(int</b> <i>operation</i><b>, ...);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/* For\ndirect call via syscall(2): */ <br>\n#include &lt;asm/unistd.h&gt; <br>\n#include &lt;linux/keyctl.h&gt; <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nsyscall(__NR_keyctl, int</b> <i>operation</i><b>,\n__kernel_ulong_t</b> <i>arg2</i><b>, <br>\n__kernel_ulong_t</b> <i>arg3</i><b>, __kernel_ulong_t</b>\n<i>arg4</i><b>, <br>\n__kernel_ulong_t</b> <i>arg5</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">No glibc\nwrapper is provided for this system call; see NOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>keyctl</b>()\nallows user-space programs to perform key manipulation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The operation\nperformed by <b>keyctl</b>() is determined by the value of\nthe <i>operation</i> argument. Each of these operations is\nwrapped by the <i>libkeyutils</i> library (provided by the\n<i>keyutils</i> package) into individual functions (noted\nbelow) to permit the compiler to check types.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The permitted\nvalues for <i>operation</i> are: <b><br>\nKEYCTL_GET_KEYRING_ID</b> (since Linux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Map a special key ID to a real\nkey ID for this process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nlooks up the special key whose ID is provided in <i>arg2</i>\n(cast to <i>key_serial_t</i>). If the special key is found,\nthe ID of the corresponding real key is returned as the\nfunction result. The following values may be specified in\n<i>arg2</i>: <b><br>\nKEY_SPEC_THREAD_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">This specifies the calling\nthread&rsquo;s thread-specific keyring. See\n<a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_SPEC_PROCESS_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">This specifies the\ncaller&rsquo;s process-specific keyring. See\n<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_SPEC_SESSION_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">This specifies the\ncaller&rsquo;s session-specific keyring. See\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_SPEC_USER_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">This specifies the\ncaller&rsquo;s UID-specific keyring. See\n<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_SPEC_USER_SESSION_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">This specifies the\ncaller&rsquo;s UID-session keyring. See\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_SPEC_REQKEY_AUTH_KEY</b>\n(since Linux 2.6.16)</p>\n\n<p style=\"margin-left:32%;\">This specifies the\nauthorization key created by <a href=\"https://man.page/2/request_key\">request_key(2)</a> and\npassed to the process it spawns to generate a key. This key\nis available only in a <b>request-key</b>(8)-style program\nthat was passed an authorization key by the kernel and\nceases to be available once the requested key has been\ninstantiated; see <a href=\"https://man.page/2/request_key\">request_key(2)</a>.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_SPEC_REQUESTOR_KEYRING</b>\n(since Linux 2.6.29)</p>\n\n<p style=\"margin-left:32%;\">This specifies the key ID for\nthe <a href=\"https://man.page/2/request_key\">request_key(2)</a> destination keyring. This keyring\nis available only in a <b>request-key</b>(8)-style program\nthat was passed an authorization key by the kernel and\nceases to be available once the requested key has been\ninstantiated; see <a href=\"https://man.page/2/request_key\">request_key(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The behavior if\nthe key specified in <i>arg2</i> does not exist depends on\nthe value of <i>arg3</i> (cast to <i>int</i>). If\n<i>arg3</i> contains a nonzero value, then&mdash;if it is\nappropriate to do so (e.g., when looking up the user,\nuser-session, or session key)&mdash;a new key is created and\nits real key ID returned as the function result. Otherwise,\nthe operation fails with the error <b>ENOKEY</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If a valid key\nID is specified in <i>arg2</i>, and the key exists, then\nthis operation simply returns the key ID. If the key does\nnot exist, the call fails with error <b>ENOKEY</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave <i>search</i> permission on a keyring in order for it\nto be found.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg4</i> and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_get_keyring_ID\">keyctl_get_keyring_ID(3)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_JOIN_SESSION_KEYRING</b>\n(since Linux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Replace the session keyring\nthis process subscribes to with a new session keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <i>arg2</i>\nis NULL, an anonymous keyring with the description\n&quot;_ses&quot; is created and the process is subscribed to\nthat keyring as its session keyring, displacing the previous\nsession keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Otherwise,\n<i>arg2</i> (cast to <i>char&nbsp;*</i>) is treated as the\ndescription (name) of a keyring, and the behavior is as\nfollows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>If a keyring with a matching description exists, the\nprocess will attempt to subscribe to that keyring as its\nsession keyring if possible; if that is not possible, an\nerror is returned. In order to subscribe to the keyring, the\ncaller must have <i>search</i> permission on the\nkeyring.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>If a keyring with a matching description does not exist,\nthen a new keyring with the specified description is\ncreated, and the process is subscribed to that keyring as\nits session keyring.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_join_session_keyring\">keyctl_join_session_keyring(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_UPDATE</b> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Update a key&rsquo;s data\npayload.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg2</i>\nargument (cast to <i>key_serial_t</i>) specifies the ID of\nthe key to be updated. The <i>arg3</i> argument (cast to\n<i>void&nbsp;*</i>) points to the new payload and\n<i>arg4</i> (cast to <i>size_t</i>) contains the new payload\nsize in bytes.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave <i>write</i> permission on the key specified and the\nkey type must support updating.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A negatively\ninstantiated key (see the description of\n<b>KEYCTL_REJECT</b>) can be positively instantiated with\nthis operation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg5</i>\nargument is ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_update\">keyctl_update(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_REVOKE</b> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Revoke the key with the ID\nprovided in <i>arg2</i> (cast to <i>key_serial_t</i>). The\nkey is scheduled for garbage collection; it will no longer\nbe findable, and will be unavailable for further operations.\nFurther attempts to use the key will fail with the error\n<b>EKEYREVOKED</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave <i>write</i> or <i>setattr</i> permission on the\nkey.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_revoke\">keyctl_revoke(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_CHOWN</b> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Change the ownership (user and\ngroup ID) of a key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg2</i>\nargument (cast to <i>key_serial_t</i>) contains the key ID.\nThe <i>arg3</i> argument (cast to <i>uid_t</i>) contains the\nnew user ID (or -1 in case the user ID shouldn&rsquo;t be\nchanged). The <i>arg4</i> argument (cast to <i>gid_t</i>)\ncontains the new group ID (or -1 in case the group ID\nshouldn&rsquo;t be changed).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The key must\ngrant the caller <i>setattr</i> permission.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For the UID to\nbe changed, or for the GID to be changed to a group the\ncaller is not a member of, the caller must have the\n<b>CAP_SYS_ADMIN</b> capability (see\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the UID is\nto be changed, the new user must have sufficient quota to\naccept the key. The quota deduction will be removed from the\nold user to the new user should the UID be changed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg5</i>\nargument is ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_chown\">keyctl_chown(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_SETPERM</b> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Change the permissions of the\nkey with the ID provided in the <i>arg2</i> argument (cast\nto <i>key_serial_t</i>) to the permissions provided in the\n<i>arg3</i> argument (cast to <i>key_perm_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the caller\ndoesn&rsquo;t have the <b>CAP_SYS_ADMIN</b> capability, it\ncan change permissions only for the keys it owns. (More\nprecisely: the caller&rsquo;s filesystem UID must match the\nUID of the key.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The key must\ngrant <i>setattr</i> permission to the caller\n<i>regardless</i> of the caller&rsquo;s capabilities.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The permissions\nin <i>arg3</i> specify masks of available operations for\neach of the following user categories: <i><br>\npossessor</i> (since Linux 2.6.14)</p>\n\n<p style=\"margin-left:32%;\">This is the permission granted\nto a process that possesses the key (has it attached\nsearchably to one of the process&rsquo;s keyrings); see\n<a href=\"https://man.page/7/keyrings\">keyrings(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>user</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>This is the permission granted to a process whose\nfilesystem UID matches the UID of the key.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>group</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>This is the permission granted to a process whose\nfilesystem GID or any of its supplementary GIDs matches the\nGID of the key.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>other</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>This is the permission granted to other processes that\ndo not match the <i>user</i> and <i>group</i>\ncategories.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>user</i>, <i>group</i>, and <i>other</i> categories are\nexclusive: if a process matches the <i>user</i> category, it\nwill not receive permissions granted in the <i>group</i>\ncategory; if a process matches the <i>user</i> or\n<i>group</i> category, then it will not receive permissions\ngranted in the <i>other</i> category.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>possessor</i> category grants permissions that are\ncumulative with the grants from the <i>user</i>,\n<i>group</i>, or <i>other</i> category.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Each permission\nmask is eight bits in size, with only six bits currently\nused. The available permissions are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>view</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">This permission allows reading\nattributes of a key.</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This permission\nis required for the <b>KEYCTL_DESCRIBE</b> operation.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The permission\nbits for each category are <b>KEY_POS_VIEW</b>,\n<b>KEY_USR_VIEW</b>, <b>KEY_GRP_VIEW</b>, and\n<b>KEY_OTH_VIEW</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>read</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">This permission allows reading a\nkey&rsquo;s payload.</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This permission\nis required for the <b>KEYCTL_READ</b> operation.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The permission\nbits for each category are <b>KEY_POS_READ</b>,\n<b>KEY_USR_READ</b>, <b>KEY_GRP_READ</b>, and\n<b>KEY_OTH_READ</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><i>write</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">This permission allows update or\ninstantiation of a key&rsquo;s payload. For a keyring, it\nallows keys to be linked and unlinked from the keyring,</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This permission\nis required for the <b>KEYCTL_UPDATE</b>,\n<b>KEYCTL_REVOKE</b>, <b>KEYCTL_CLEAR</b>,\n<b>KEYCTL_LINK</b>, and <b>KEYCTL_UNLINK</b> operations.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The permission\nbits for each category are <b>KEY_POS_WRITE</b>,\n<b>KEY_USR_WRITE</b>, <b>KEY_GRP_WRITE</b>, and\n<b>KEY_OTH_WRITE</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><i>search</i></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">This permission allows keyrings\nto be searched and keys to be found. Searches can recurse\nonly into nested keyrings that have <i>search</i> permission\nset.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This permission\nis required for the <b>KEYCTL_GET_KEYRING_ID</b>,\n<b>KEYCTL_JOIN_SESSION_KEYRING</b>, <b>KEYCTL_SEARCH</b>,\nand <b>KEYCTL_INVALIDATE</b> operations.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The permission\nbits for each category are <b>KEY_POS_SEARCH</b>,\n<b>KEY_USR_SEARCH</b>, <b>KEY_GRP_SEARCH</b>, and\n<b>KEY_OTH_SEARCH</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>link</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">This permission allows a key or\nkeyring to be linked to.</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This permission\nis required for the <b>KEYCTL_LINK</b> and\n<b>KEYCTL_SESSION_TO_PARENT</b> operations.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The permission\nbits for each category are <b>KEY_POS_LINK</b>,\n<b>KEY_USR_LINK</b>, <b>KEY_GRP_LINK</b>, and\n<b>KEY_OTH_LINK</b>.</p>\n\n<p style=\"margin-left:22%;\"><i>setattr</i> (since Linux\n2.6.15).</p>\n\n<p style=\"margin-left:32%;\">This permission allows a\nkey&rsquo;s UID, GID, and permissions mask to be\nchanged.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This permission\nis required for the <b>KEYCTL_REVOKE</b>,\n<b>KEYCTL_CHOWN</b>, and <b>KEYCTL_SETPERM</b>\noperations.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The permission\nbits for each category are <b>KEY_POS_SETATTR</b>,\n<b>KEY_USR_SETATTR</b>, <b>KEY_GRP_SETATTR</b>, and\n<b>KEY_OTH_SETATTR</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">As a\nconvenience, the following macros are defined as masks for\nall of the permission bits in each of the user categories:\n<b>KEY_POS_ALL</b>, <b>KEY_USR_ALL</b>, <b>KEY_GRP_ALL</b>,\nand <b>KEY_OTH_ALL</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg4</i>\nand <i>arg5</i> arguments are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_setperm\">keyctl_setperm(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_DESCRIBE</b> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Obtain a string describing the\nattributes of a specified key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey to be described is specified in <i>arg2</i> (cast to\n<i>key_serial_t</i>). The descriptive string is returned in\nthe buffer pointed to by <i>arg3</i> (cast to\n<i>char&nbsp;*</i>); <i>arg4</i> (cast to <i>size_t</i>)\nspecifies the size of that buffer in bytes.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The key must\ngrant the caller <i>view</i> permission.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The returned\nstring is null-terminated and contains the following\ninformation about the key:</p>\n\n\n<p style=\"margin-left:28%; margin-top: 1em\"><i>type</i>;<i>uid</i>;<i>gid</i>;<i>perm</i>;<i>description</i></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In the above,\n<i>type</i> and <i>description</i> are strings, <i>uid</i>\nand <i>gid</i> are decimal strings, and <i>perm</i> is a\nhexadecimal permissions mask. The descriptive string is\nwritten with the following format:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">%s;%d;%d;%08x;%s</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Note: the\nintention is that the descriptive string should be\nextensible in future kernel versions</b>. In particular, the\n<i>description</i> field will not contain semicolons; it\nshould be parsed by working backwards from the end of the\nstring to find the last semicolon. This allows future\nsemicolon-delimited fields to be inserted in the descriptive\nstring in the future.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Writing to the\nbuffer is attempted only when <i>arg3</i> is non-NULL and\nthe specified buffer size is large enough to accept the\ndescriptive string (including the terminating null byte). In\norder to determine whether the buffer size was too small,\ncheck to see if the return value of the operation is greater\nthan <i>arg4</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg5</i>\nargument is ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_describe\">keyctl_describe(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_CLEAR</b></p>\n\n<p style=\"margin-left:22%;\">Clear the contents of (i.e.,\nunlink all keys from) a keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey (which must be of keyring type) is provided in\n<i>arg2</i> (cast to <i>key_serial_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave <i>write</i> permission on the keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_clear\">keyctl_clear(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_LINK</b> (since Linux\n2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Create a link from a keyring to\na key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The key to be\nlinked is specified in <i>arg2</i> (cast to\n<i>key_serial_t</i>); the keyring is specified in\n<i>arg3</i> (cast to <i>key_serial_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If a key with\nthe same type and description is already linked in the\nkeyring, then that key is displaced from the keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before creating\nthe link, the kernel checks the nesting of the keyrings and\nreturns appropriate errors if the link would produce a cycle\nor if the nesting of keyrings would be too deep (The limit\non the nesting of keyrings is determined by the kernel\nconstant <b>KEYRING_SEARCH_MAX_DEPTH</b>, defined with the\nvalue 6, and is necessary to prevent overflows on the kernel\nstack when recursively searching keyrings).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave <i>link</i> permission on the key being added and\n<i>write</i> permission on the keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg4</i> and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_link\">keyctl_link(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_UNLINK</b> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Unlink a key from a\nkeyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey to be unlinked is specified in <i>arg2</i> (cast to\n<i>key_serial_t</i>); the ID of the keyring from which it is\nto be unlinked is specified in <i>arg3</i> (cast to\n<i>key_serial_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the key is\nnot currently linked into the keyring, an error results.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave <i>write</i> permission on the keyring from which the\nkey is being removed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the last\nlink to a key is removed, then that key will be scheduled\nfor destruction.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg4</i> and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_unlink\">keyctl_unlink(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_SEARCH</b> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Search for a key in a keyring\ntree, returning its ID and optionally linking it to a\nspecified keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The tree to be\nsearched is specified by passing the ID of the head keyring\nin <i>arg2</i> (cast to <i>key_serial_t</i>). The search is\nperformed breadth-first and recursively.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg3</i>\nand <i>arg4</i> arguments specify the key to be searched\nfor: <i>arg3</i> (cast as <i>char&nbsp;*</i>) contains the\nkey type (a null-terminated character string up to 32 bytes\nin size, including the terminating null byte), and\n<i>arg4</i> (cast as <i>char&nbsp;*</i>) contains the\ndescription of the key (a null-terminated character string\nup to 4096 bytes in size, including the terminating null\nbyte).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The source\nkeyring must grant <i>search</i> permission to the caller.\nWhen performing the recursive search, only keyrings that\ngrant the caller <i>search</i> permission will be searched.\nOnly keys with for which the caller has <i>search</i>\npermission can be found.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the key is\nfound, its ID is returned as the function result.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the key is\nfound and <i>arg5</i> (cast to <i>key_serial_t</i>) is\nnonzero, then, subject to the same constraints and rules as\n<b>KEYCTL_LINK</b>, the key is linked into the keyring whose\nID is specified in <i>arg5</i>. If the destination keyring\nspecified in <i>arg5</i> already contains a link to a key\nthat has the same type and description, then that link will\nbe displaced by a link to the key found by this\noperation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Instead of\nvalid existing keyring IDs, the source (<i>arg2</i>) and\ndestination (<i>arg5</i>) keyrings can be one of the special\nkeyring IDs listed under <b>KEYCTL_GET_KEYRING_ID</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_search\">keyctl_search(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_READ</b> (since Linux\n2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Read the payload data of a\nkey.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey whose payload is to be read is specified in <i>arg2</i>\n(cast to <i>key_serial_t</i>). This can be the ID of an\nexisting key, or any of the special key IDs listed for\n<b>KEYCTL_GET_KEYRING_ID</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The payload is\nplaced in the buffer pointed by <i>arg3</i> (cast to\n<i>char&nbsp;*</i>); the size of that buffer must be\nspecified in <i>arg4</i> (cast to <i>size_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The returned\ndata will be processed for presentation according to the key\ntype. For example, a keyring will return an array of\n<i>key_serial_t</i> entries representing the IDs of all the\nkeys that are linked to it. The <i>user</i> key type will\nreturn its data as is. If a key type does not implement this\nfunction, the operation fails with the error\n<b>EOPNOTSUPP</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <i>arg3</i>\nis not NULL, as much of the payload data as will fit is\ncopied into the buffer. On a successful return, the return\nvalue is always the total size of the payload data. To\ndetermine whether the buffer was of sufficient size, check\nto see that the return value is less than or equal to the\nvalue supplied in <i>arg4</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The key must\neither grant the caller <i>read</i> permission, or grant the\ncaller <i>search</i> permission when searched for from the\nprocess keyrings (i.e., the key is possessed).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg5</i>\nargument is ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_read\">keyctl_read(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_INSTANTIATE</b>\n(since Linux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">(Positively) instantiate an\nuninstantiated key with a specified payload.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey to be instantiated is provided in <i>arg2</i> (cast to\n<i>key_serial_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The key payload\nis specified in the buffer pointed to by <i>arg3</i> (cast\nto <i>void&nbsp;*</i>); the size of that buffer is specified\nin <i>arg4</i> (cast to <i>size_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The payload may\nbe a NULL pointer and the buffer size may be 0 if this is\nsupported by the key type (e.g., it is a keyring).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The operation\nmay be fail if the payload data is in the wrong format or is\notherwise invalid.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <i>arg5</i>\n(cast to <i>key_serial_t</i>) is nonzero, then, subject to\nthe same constraints and rules as <b>KEYCTL_LINK</b>, the\ninstantiated key is linked into the keyring whose ID\nspecified in <i>arg5</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave the appropriate authorization key, and once the\nuninstantiated key has been instantiated, the authorization\nkey is revoked. In other words, this operation is available\nonly from a <b>request-key</b>(8)-style program. See\n<a href=\"https://man.page/2/request_key\">request_key(2)</a> for an explanation of uninstantiated\nkeys and key instantiation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_instantiate\">keyctl_instantiate(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_NEGATE</b> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">Negatively instantiate an\nuninstantiated key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis equivalent to the call:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">keyctl(KEYCTL_REJECT,\narg2, arg3, ENOKEY, arg4);</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg5</i>\nargument is ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_negate\">keyctl_negate(3)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_SET_REQKEY_KEYRING</b>\n(since Linux 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">Set the default keyring to\nwhich implicitly requested keys will be linked for this\nthread, and return the previous setting. Implicit key\nrequests are those made by internal kernel components, such\nas can occur when, for example, opening files on an AFS or\nNFS filesystem. Setting the default keyring also has an\neffect when requesting a key from user space; see\n<a href=\"https://man.page/2/request_key\">request_key(2)</a> for details.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg2</i>\nargument (cast to <i>int</i>) should contain one of the\nfollowing values, to specify the new default keyring:\n<b><br>\nKEY_REQKEY_DEFL_NO_CHANGE</b></p>\n\n<p style=\"margin-left:32%;\">Don&rsquo;t change the default\nkeyring. This can be used to discover the current default\nkeyring (without changing it).</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_REQKEY_DEFL_DEFAULT</b></p>\n\n<p style=\"margin-left:32%;\">This selects the default\nbehaviour, which is to use the thread-specific keyring if\nthere is one, otherwise the process-specific keyring if\nthere is one, otherwise the session keyring if there is one,\notherwise the UID-specific session keyring, otherwise the\nuser-specific keyring.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_REQKEY_DEFL_THREAD_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">Use the thread-specific keyring\n(<a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>) as the new default keyring.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_REQKEY_DEFL_PROCESS_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">Use the process-specific\nkeyring (<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>) as the new default\nkeyring.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_REQKEY_DEFL_SESSION_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">Use the session-specific\nkeyring (<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>) as the new default\nkeyring.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_REQKEY_DEFL_USER_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">Use the UID-specific keyring\n(<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>) as the new default keyring.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_REQKEY_DEFL_USER_SESSION_KEYRING</b></p>\n\n<p style=\"margin-left:32%;\">Use the UID-specific session\nkeyring (<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>) as the new default\nkeyring.</p>\n\n\n<p style=\"margin-left:22%;\"><b>KEY_REQKEY_DEFL_REQUESTOR_KEYRING</b>\n(since Linux 2.6.29)</p>\n\n<p style=\"margin-left:32%;\">Use the requestor keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">All other\nvalues are invalid.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The setting\ncontrolled by this operation is inherited by the child of\n<a href=\"https://man.page/2/fork\">fork(2)</a> and preserved across <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_set_reqkey_keyring\">keyctl_set_reqkey_keyring(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_SET_TIMEOUT</b>\n(since Linux 2.6.16)</p>\n\n<p style=\"margin-left:22%;\">Set a timeout on a key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey is specified in <i>arg2</i> (cast to\n<i>key_serial_t</i>). The timeout value, in seconds from the\ncurrent time, is specified in <i>arg3</i> (cast to\n<i>unsigned int</i>). The timeout is measured against the\nrealtime clock.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Specifying the\ntimeout value as 0 clears any existing timeout on the\nkey.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>/proc/keys</i> file displays the remaining time until\neach key will expire. (This is the only method of\ndiscovering the timeout on a key.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\neither have the <i>setattr</i> permission on the key or hold\nan instantiation authorization token for the key (see\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The key and any\nlinks to the key will be automatically garbage collected\nafter the timeout expires. Subsequent attempts to access the\nkey will then fail with the error <b>EKEYEXPIRED</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\ncannot be used to set timeouts on revoked, expired, or\nnegatively instantiated keys.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg4</i> and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_set_timeout\">keyctl_set_timeout(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_ASSUME_AUTHORITY</b>\n(since Linux 2.6.16)</p>\n\n<p style=\"margin-left:22%;\">Assume (or divest) the\nauthority for the calling thread to instantiate a key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg2</i>\nargument (cast to <i>key_serial_t</i>) specifies either a\nnonzero key ID to assume authority, or the value 0 to divest\nauthority.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <i>arg2</i>\nis nonzero, then it specifies the ID of an uninstantiated\nkey for which authority is to be assumed. That key can then\nbe instantiated using one of <b>KEYCTL_INSTANTIATE</b>,\n<b>KEYCTL_INSTANTIATE_IOV</b>, <b>KEYCTL_REJECT</b>, or\n<b>KEYCTL_NEGATE</b>. Once the key has been instantiated,\nthe thread is automatically divested of authority to\ninstantiate the key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Authority over\na key can be assumed only if the calling thread has present\nin its keyrings the authorization key that is associated\nwith the specified key. (In other words, the\n<b>KEYCTL_ASSUME_AUTHORITY</b> operation is available only\nfrom a <b>request-key</b>(8)-style program; see\n<a href=\"https://man.page/2/request_key\">request_key(2)</a> for an explanation of how this\noperation is used.) The caller must have <i>search</i>\npermission on the authorization key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\nspecified key has a matching authorization key, then the ID\nof that key is returned. The authorization key can be read\n(<b>KEYCTL_READ</b>) to obtain the callout information\npassed to <a href=\"https://man.page/2/request_key\">request_key(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the ID given\nin <i>arg2</i> is 0, then the currently assumed authority is\ncleared (divested), and the value 0 is returned.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>KEYCTL_ASSUME_AUTHORITY</b> mechanism allows a program\nsuch as <b>request-key</b>(8) to assume the necessary\nauthority to instantiate a new uninstantiated key that was\ncreated as a consequence of a call to <a href=\"https://man.page/2/request_key\">request_key(2)</a>.\nFor further information, see <a href=\"https://man.page/2/request_key\">request_key(2)</a> and the\nkernel source file\n<i>Documentation/security/keys-request-key.txt</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_assume_authority\">keyctl_assume_authority(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_GET_SECURITY</b>\n(since Linux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">Get the LSM (Linux Security\nModule) security label of the specified key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey whose security label is to be fetched is specified in\n<i>arg2</i> (cast to <i>key_serial_t</i>). The security\nlabel (terminated by a null byte) will be placed in the\nbuffer pointed to by <i>arg3</i> argument (cast to\n<i>char&nbsp;*</i>); the size of the buffer must be provided\nin <i>arg4</i> (cast to <i>size_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <i>arg3</i>\nis specified as NULL or the buffer size specified in\n<i>arg4</i> is too small, the full size of the security\nlabel string (including the terminating null byte) is\nreturned as the function result, and nothing is copied to\nthe buffer.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave <i>view</i> permission on the specified key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The returned\nsecurity label string will be rendered in a form appropriate\nto the LSM in force. For example, with SELinux, it may look\nlike:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If no LSM is\ncurrently in force, then an empty string is placed in the\nbuffer.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg5</i>\nargument is ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the functions\n<a href=\"https://man.page/3/keyctl_get_security\">keyctl_get_security(3)</a> and\n<a href=\"https://man.page/3/keyctl_get_security_alloc\">keyctl_get_security_alloc(3)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_SESSION_TO_PARENT</b>\n(since Linux 2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Replace the session keyring to\nwhich the <i>parent</i> of the calling process subscribes\nwith the session keyring of the calling process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The keyring\nwill be replaced in the parent process at the point where\nthe parent next transitions from kernel space to user\nspace.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The keyring\nmust exist and must grant the caller <i>link</i> permission.\nThe parent process must be single-threaded and have the same\neffective ownership as this process and must not be\nset-user-ID or set-group-ID. The UID of the parent\nprocess&rsquo;s existing session keyring (f it has one), as\nwell as the UID of the caller&rsquo;s session keyring much\nmatch the caller&rsquo;s effective UID.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fact that\nit is the parent process that is affected by this operation\nallows a program such as the shell to start a child process\nthat uses this operation to change the shell&rsquo;s session\nkeyring. (This is what the <a href=\"https://man.page/1/keyctl\">keyctl(1)</a>\n<b>new_session</b> command does.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg2</i>, <i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are\nignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_session_to_parent\">keyctl_session_to_parent(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_REJECT</b> (since\nLinux 2.6.39)</p>\n\n<p style=\"margin-left:22%;\">Mark a key as negatively\ninstantiated and set an expiration timer on the key. This\noperation provides a superset of the functionality of the\nearlier <b>KEYCTL_NEGATE</b> operation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey that is to be negatively instantiated is specified in\n<i>arg2</i> (cast to <i>key_serial_t</i>). The <i>arg3</i>\n(cast to <i>unsigned int</i>) argument specifies the\nlifetime of the key, in seconds. The <i>arg4</i> argument\n(cast to <i>unsigned int</i>) specifies the error to be\nreturned when a search hits this key; typically, this is one\nof <b>EKEYREJECTED</b>, <b>EKEYREVOKED</b>, or\n<b>EKEYEXPIRED</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <i>arg5</i>\n(cast to <i>key_serial_t</i>) is nonzero, then, subject to\nthe same constraints and rules as <b>KEYCTL_LINK</b>, the\nnegatively instantiated key is linked into the keyring whose\nID is specified in <i>arg5</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave the appropriate authorization key. In other words, this\noperation is available only from a\n<b>request-key</b>(8)-style program. See\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave the appropriate authorization key, and once the\nuninstantiated key has been instantiated, the authorization\nkey is revoked. In other words, this operation is available\nonly from a <b>request-key</b>(8)-style program. See\n<a href=\"https://man.page/2/request_key\">request_key(2)</a> for an explanation of uninstantiated\nkeys and key instantiation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_reject\">keyctl_reject(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_INSTANTIATE_IOV</b>\n(since Linux 2.6.39)</p>\n\n<p style=\"margin-left:22%;\">Instantiate an uninstantiated\nkey with a payload specified via a vector of buffers.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis the same as <b>KEYCTL_INSTANTIATE</b>, but the payload\ndata is specified as an array of <i>iovec</i>\nstructures:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct iovec {\n<br>\nvoid *iov_base; /* Starting address of buffer */ <br>\nsize_t iov_len; /* Size of buffer (in bytes) */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The pointer to\nthe payload vector is specified in <i>arg3</i> (cast as\n<i>const struct iovec&nbsp;*</i>). The number of items in\nthe vector is specified in <i>arg4</i> (cast as <i>unsigned\nint</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg2</i>\n(key ID) and <i>arg5</i> (keyring ID) are interpreted as for\n<b>KEYCTL_INSTANTIATE</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_instantiate_iov\">keyctl_instantiate_iov(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_INVALIDATE</b> (since\nLinux 3.5)</p>\n\n<p style=\"margin-left:22%;\">Mark a key as invalid.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ID of the\nkey to be invalidated is specified in <i>arg2</i> (cast to\n<i>key_serial_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To invalidate a\nkey, the caller must have <i>search</i> permission on the\nkey.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nmarks the key as invalid and schedules immediate garbage\ncollection. The garbage collector removes the invalidated\nkey from all keyrings and deletes the key when its reference\ncount reaches zero. After this operation, the key will be\nignored by all searches, even if it is not yet deleted.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Keys that are\nmarked invalid become invisible to normal key operations\nimmediately, though they are still visible in\n<i>/proc/keys</i> (marked with an &rsquo;i&rsquo; flag)\nuntil they are actually removed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_invalidate\">keyctl_invalidate(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_GET_PERSISTENT</b>\n(since Linux 3.13)</p>\n\n<p style=\"margin-left:22%;\">Get the persistent keyring\n(<a href=\"https://man.page/7/persistent-keyring\">persistent-keyring(7)</a>) for a specified user and link\nit to a specified keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The user ID is\nspecified in <i>arg2</i> (cast to <i>uid_t</i>). If the\nvalue -1 is specified, the caller&rsquo;s real user ID is\nused. The ID of the destination keyring is specified in\n<i>arg3</i> (cast to <i>key_serial_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave the <b>CAP_SETUID</b> capability in its user namespace\nin order to fetch the persistent keyring for a user ID that\ndoes not match either the real or effective user ID of the\ncaller.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the call is\nsuccessful, a link to the persistent keyring is added to the\nkeyring whose ID was specified in <i>arg3</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller must\nhave <i>write</i> permission on the keyring.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The persistent\nkeyring will be created by the kernel if it does not yet\nexist.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Each time the\n<b>KEYCTL_GET_PERSISTENT</b> operation is performed, the\npersistent keyring will have its expiration timeout reset to\nthe value in:</p>\n\n\n<p style=\"margin-left:28%; margin-top: 1em\">/proc/sys/kernel/keys/persistent_keyring_expiry</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Should the\ntimeout be reached, the persistent keyring will be removed\nand everything it pins can then be garbage collected.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Persistent\nkeyrings were added to Linux in kernel version 3.13.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg4</i> and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> via the function\n<a href=\"https://man.page/3/keyctl_get_persistent\">keyctl_get_persistent(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_DH_COMPUTE</b> (since\nLinux 4.7)</p>\n\n<p style=\"margin-left:22%;\">Compute a Diffie-Hellman shared\nsecret or public key, optionally applying key derivation\nfunction (KDF) to the result.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg2</i>\nargument is a pointer to a set of parameters containing\nserial numbers for three <i>&quot;user&quot;</i> keys used\nin the Diffie-Hellman calculation, packaged in a structure\nof the following form:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nkeyctl_dh_params { <br>\nint32_t private; /* The local private key */ <br>\nint32_t prime; /* The prime, known to both parties */ <br>\nint32_t base; /* The base integer: either a shared <br>\ngenerator or the remote public key */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Each of the\nthree keys specified in this structure must grant the caller\n<i>read</i> permission. The payloads of these keys are used\nto calculate the Diffie-Hellman result as:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">base ^ private\nmod prime</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the base is\nthe shared generator, the result is the local public key. If\nthe base is the remote public key, the result is the shared\nsecret.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg3</i>\nargument (cast to <i>char&nbsp;*</i>) points to a buffer\nwhere the result of the calculation is placed. The size of\nthat buffer is specified in <i>arg4</i> (cast to\n<i>size_t</i>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The buffer must\nbe large enough to accommodate the output data, otherwise an\nerror is returned. If <i>arg4</i> is specified zero, in\nwhich case the buffer is not used and the operation returns\nthe minimum required buffer size (i.e., the length of the\nprime).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Diffie-Hellman\ncomputations can be performed in user space, but require a\nmultiple-precision integer (MPI) library. Moving the\nimplementation into the kernel gives access to the kernel\nMPI implementation, and allows access to secure or\nacceleration hardware.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Adding support\nfor DH computation to the <b>keyctl</b>() system call was\nconsidered a good fit due to the DH algorithm&rsquo;s use\nfor deriving shared keys; it also allows the type of the key\nto determine which DH implementation (software or hardware)\nis appropriate.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<i>arg5</i> argument is <b>NULL</b>, then the DH result\nitself is returned. Otherwise (since Linux 4.12), it is a\npointer to a structure which specifies parameters of the KDF\noperation to be applied:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nkeyctl_kdf_params { <br>\nchar *hashname; /* Hash algorithm name */ <br>\nchar *otherinfo; /* SP800-56A OtherInfo */ <br>\n__u32 otherinfolen; /* Length of otherinfo data */ <br>\n__u32 __spare[8]; /* Reserved */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>hashname</i> field is a null-terminated string which\nspecifies a hash name (available in the kernel&rsquo;s\ncrypto API; the list of the hashes available is rather\ntricky to observe; please refer to the\n<a href=\"https://www.kernel.org/doc/html/latest/crypto/architecture.html\">&quot;Kernel\nCrypto API Architecture&quot;</a> documentation for the\ninformation regarding how hash names are constructed and\nyour kernel&rsquo;s source and configuration regarding what\nciphers and templates with type <b>CRYPTO_ALG_TYPE_SHASH</b>\nare available) to be applied to DH result in KDF\noperation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>otherinfo</i> field is an <i>OtherInfo</i> data as\ndescribed in SP800-56A section 5.8.1.2 and is\nalgorithm-specific. This data is concatenated with the\nresult of DH operation and is provided as an input to the\nKDF operation. Its size is provided in the\n<i>otherinfolen</i> field and is limited by\n<b>KEYCTL_KDF_MAX_OI_LEN</b> constant that defined in\n<i>security/keys/internal.h</i> to a value of 64.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>__spare</b> field is currently unused. It was ignored\nuntil Linux 4.13 (but still should be user-addressable since\nit is copied to the kernel), and should contain zeros since\nLinux 4.13.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The KDF\nimplementation complies with SP800-56A as well as with\nSP800-108 (the counter KDF).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis exposed by <i>libkeyutils</i> (from version 1.5.10\nonwards) via the functions <a href=\"https://man.page/3/keyctl_dh_compute\">keyctl_dh_compute(3)</a> and\n<a href=\"https://man.page/3/keyctl_dh_compute_alloc\">keyctl_dh_compute_alloc(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_RESTRICT_KEYRING</b>\n(since Linux 4.12)</p>\n\n<p style=\"margin-left:22%;\">Apply a key-linking restriction\nto the keyring with the ID provided in <i>arg2</i> (cast to\n<i>key_serial_t</i>). The caller must have <i>setattr</i>\npermission on the key. If <i>arg3</i> is NULL, any attempt\nto add a key to the keyring is blocked; otherwise it\ncontains a pointer to a string with a key type name and\n<i>arg4</i> contains a pointer to string that describes the\ntype-specific restriction. As of Linux 4.12, only the type\n&quot;asymmetric&quot; has restrictions defined: <b><br>\nbuiltin_trusted</b></p>\n\n<p style=\"margin-left:32%;\">Allows only keys that are\nsigned by a key linked to the built-in keyring\n(&quot;.builtin_trusted_keys&quot;).</p>\n\n\n<p style=\"margin-left:22%;\"><b>builtin_and_secondary_trusted</b></p>\n\n<p style=\"margin-left:32%;\">Allows only keys that are\nsigned by a key linked to the secondary keyring\n(&quot;.secondary_trusted_keys&quot;) or, by extension, a\nkey in a built-in keyring, as the latter is linked to the\nformer.</p>\n\n\n<p style=\"margin-left:22%;\"><b>key_or_keyring:</b><i>key</i>\n<b><br>\nkey_or_keyring:</b><i>key</i><b>:chain</b></p>\n\n<p style=\"margin-left:32%;\">If <i>key</i> specifies the ID\nof a key of type &quot;asymmetric&quot;, then only keys that\nare signed by this key are allowed.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">If <i>key</i>\nspecifies the ID of a keyring, then only keys that are\nsigned by a key linked to this keyring are allowed.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">If\n&quot;:chain&quot; is specified, keys that are signed by a\nkeys linked to the destination keyring (that is, the keyring\nwith the ID specified in the <i>arg2</i> argument) are also\nallowed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that a\nrestriction can be configured only once for the specified\nkeyring; once a restriction is set, it can&rsquo;t be\noverridden.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The argument\n<i>arg5</i> is ignored.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a\nsuccessful call, the return value depends on the operation:\n<b><br>\nKEYCTL_GET_KEYRING_ID</b></p>\n\n<p style=\"margin-left:22%;\">The ID of the requested\nkeyring.</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_JOIN_SESSION_KEYRING</b></p>\n\n<p style=\"margin-left:22%;\">The ID of the joined session\nkeyring.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_DESCRIBE</b></p>\n\n<p style=\"margin-left:22%;\">The size of the description\n(including the terminating null byte), irrespective of the\nprovided buffer size.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_SEARCH</b></p>\n\n<p style=\"margin-left:22%;\">The ID of the key that was\nfound.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_READ</b></p>\n\n<p style=\"margin-left:22%;\">The amount of data that is\navailable in the key, irrespective of the provided buffer\nsize.</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_SET_REQKEY_KEYRING</b></p>\n\n<p style=\"margin-left:22%;\">The ID of the previous default\nkeyring to which implicitly requested keys were linked (one\nof <b>KEY_REQKEY_DEFL_USER_*</b>).</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_ASSUME_AUTHORITY</b></p>\n\n<p style=\"margin-left:22%;\">Either 0, if the ID given was\n0, or the ID of the authorization key matching the specified\nkey, if a nonzero key ID was provided.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_GET_SECURITY</b></p>\n\n<p style=\"margin-left:22%;\">The size of the LSM security\nlabel string (including the terminating null byte),\nirrespective of the provided buffer size.</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_GET_PERSISTENT</b></p>\n\n<p style=\"margin-left:22%;\">The ID of the persistent\nkeyring.</p>\n\n<p style=\"margin-left:11%;\"><b>KEYCTL_DH_COMPUTE</b></p>\n\n<p style=\"margin-left:22%;\">The number of bytes copied to\nthe buffer, or, if <i>arg4</i> is 0, the required buffer\nsize.</p>\n\n<p style=\"margin-left:11%;\">All other operations</p>\n\n<p style=\"margin-left:22%;\">Zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On error, -1 is\nreturned, and <i>errno</i> is set appropriately to indicate\nthe error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The requested operation\nwasn&rsquo;t permitted.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_DH_COMPUTE</b> and there\nwas an error during crypto module initialization.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EDEADLK</b></p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_LINK</b> and the requested link would result in a\ncycle.</p>\n\n<p style=\"margin-left:11%;\"><b>EDEADLK</b></p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_RESTRICT_KEYRING</b> and the requested keyring\nrestriction would result in a cycle.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EDQUOT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The key quota for the caller&rsquo;s user would be\nexceeded by creating a key or linking it to the keyring.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EEXIST</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_RESTRICT_KEYRING</b> and\nkeyring provided in <i>arg2</i> argument already has a\nrestriction set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_DH_COMPUTE</b> and one of\nthe following has failed:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">&bull;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\"></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\">copying of the <i>struct\nkeyctl_dh_params</i>, provided in the <i>arg2</i> argument,\nfrom user space;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>copying of the <i>struct keyctl_kdf_params</i>, provided\nin the non-NULL <i>arg5</i> argument, from user space (in\ncase kernel supports performing KDF operation on DH\noperation result);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>copying of data pointed by the <i>hashname</i> field of\nthe <i>struct keyctl_kdf_params</i> from user space;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>copying of data pointed by the <i>otherinfo</i> field of\nthe <i>struct keyctl_kdf_params</i> from user space if the\n<i>otherinfolen</i> field was nonzero;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>copying of the result to user space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>operation</i>\nwas <b>KEYCTL_SETPERM</b> and an invalid permission bit was\nspecified in <i>arg3</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>operation</i> was\n<b>KEYCTL_SEARCH</b> and the size of the description in\n<i>arg4</i> (including the terminating null byte) exceeded\n4096 bytes. size of the string (including the terminating\nnull byte) specified in <i>arg3</i> (the key type) or\n<i>arg4</i> (the key description) exceeded the limit (32\nbytes and 4096 bytes respectively).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EINVAL</b> (Linux kernels\nbefore 4.12)</p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_DH_COMPUTE</b>, argument <i>arg5</i> was\nnon-NULL.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_DH_COMPUTE</b> And the\ndigest size of the hashing algorithm supplied is zero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_DH_COMPUTE</b> and the\nbuffer size provided is not enough to hold the result.\nProvide 0 as a buffer size in order to obtain the minimum\nbuffer size.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_DH_COMPUTE</b> and the\nhash name provided in the <i>hashname</i> field of the\n<i>struct keyctl_kdf_params</i> pointed by <i>arg5</i>\nargument is too big (the limit is implementation-specific\nand varies between kernel versions, but it is deemed big\nenough for all valid algorithm names).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_DH_COMPUTE</b> and the\n<i>__spare</i> field of the <i>struct keyctl_kdf_params</i>\nprovided in the <i>arg5</i> argument contains nonzero\nvalues.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EKEYEXPIRED</b></p>\n\n<p style=\"margin-left:22%;\">An expired key was found or\nspecified.</p>\n\n<p style=\"margin-left:11%;\"><b>EKEYREJECTED</b></p>\n\n<p style=\"margin-left:22%;\">A rejected key was found or\nspecified.</p>\n\n<p style=\"margin-left:11%;\"><b>EKEYREVOKED</b></p>\n\n<p style=\"margin-left:22%;\">A revoked key was found or\nspecified.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_LINK</b> and the\nrequested link would cause the maximum nesting depth for\nkeyrings to be exceeded.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EMSGSIZE</b></p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_DH_COMPUTE</b> and the buffer length exceeds\n<b>KEYCTL_KDF_MAX_OUTPUT_LEN</b> (which is 1024 currently)\nor the <i>otherinfolen</i> field of the <i>struct\nkeyctl_kdf_parms</i> passed in <i>arg5</i> exceeds\n<b>KEYCTL_KDF_MAX_OI_LEN</b> (which is 64 currently).</p>\n\n<p style=\"margin-left:11%;\"><b>ENFILE</b> (Linux kernels\nbefore 3.13)</p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_LINK</b> and the keyring is full. (Before Linux\n3.13, the available space for storing keyring links was\nlimited to a single page of memory; since Linux 3.13, there\nis no fixed limit.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_UNLINK</b> and the key to\nbe unlinked isn&rsquo;t linked to the keyring.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_DH_COMPUTE</b> and the\nhashing algorithm specified in the <i>hashname</i> field of\nthe <i>struct keyctl_kdf_params</i> pointed by <i>arg5</i>\nargument hasn&rsquo;t been found.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_RESTRICT_KEYRING</b> and\nthe type provided in <i>arg3</i> argument doesn&rsquo;t\nsupport setting key linking restrictions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOKEY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>No matching key was found or an invalid key was\nspecified.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOKEY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The value <b>KEYCTL_GET_KEYRING_ID</b> was specified in\n<i>operation</i>, the key specified in <i>arg2</i> did not\nexist, and <i>arg3</i> was zero (meaning don&rsquo;t create\nthe key if it didn&rsquo;t exist).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>One of kernel memory allocation routines failed during\nthe execution of the syscall.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\">A key of keyring type was\nexpected but the ID of a key with a different type was\nprovided.</p>\n\n<p style=\"margin-left:11%;\"><b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_READ</b> and the key type does not support reading\n(e.g., the type is <i>&quot;login&quot;</i>).</p>\n\n<p style=\"margin-left:11%;\"><b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_UPDATE</b> and the key type does not support\nupdating.</p>\n\n<p style=\"margin-left:11%;\"><b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_RESTRICT_KEYRING</b>, the type provided in\n<i>arg3</i> argument was &quot;asymmetric&quot;, and the key\nspecified in the restriction specification provided in\n<i>arg4</i> has type other than &quot;asymmetric&quot; or\n&quot;keyring&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_GET_PERSISTENT</b>,\n<i>arg2</i> specified a UID other than the calling\nthread&rsquo;s real or effective UID, and the caller did not\nhave the <b>CAP_SETUID</b> capability.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> was <b>KEYCTL_SESSION_TO_PARENT</b> and\neither: all of the UIDs (GIDs) of the parent process do not\nmatch the effective UID (GID) of the calling process; the\nUID of the parent&rsquo;s existing session keyring or the\nUID of the caller&rsquo;s session keyring did not match the\neffective UID of the caller; the parent process is not\nsingle-thread; or the parent process is <a href=\"https://man.page/1/init\">init(1)</a> or a\nkernel thread.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ETIMEDOUT</b></p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> was\n<b>KEYCTL_DH_COMPUTE</b> and the initialization of crypto\nmodules has timed out.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall first appeared in Linux 2.6.10.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall is a nonstandard Linux extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">No wrapper for\nthis system call is provided in glibc. A wrapper is provided\nin the <i>libkeyutils</i> library. When employing the\nwrapper in that library, link with <i>-lkeyutils</i>.\nHowever, rather than using this system call directly, you\nprobably want to use the various library functions mentioned\nin the descriptions of individual operations above.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow provide subset of the functionality of the\n<b>request-key</b>(8) program provided by the\n<i>keyutils</i> package. For informational purposes, the\nprogram records various information in a log file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As described in\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>, the <b>request-key</b>(8) program is\ninvoked with command-line arguments that describe a key that\nis to be instantiated. The example program fetches and logs\nthese arguments. The program assumes authority to\ninstantiate the requested key, and then instantiates that\nkey.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nshell session demonstrates the use of this program. In the\nsession, we compile the program and then use it to\ntemporarily replace the standard <b>request-key</b>(8)\nprogram. (Note that temporarily disabling the standard\n<b>request-key</b>(8) program may not be safe on some\nsystems.) While our example program is installed, we use the\nexample program shown in <a href=\"https://man.page/2/request_key\">request_key(2)</a> to request a\nkey.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cc -o\nkey_instantiate key_instantiate.c -lkeyutils</b> <br>\n$ <b>sudo mv /sbin/request-key /sbin/request-key.backup</b>\n<br>\n$ <b>sudo cp key_instantiate /sbin/request-key</b> <br>\n$ <b>./t_request_key user mykey somepayloaddata</b> <br>\nKey ID is 20d035bf <br>\n$ <b>sudo mv /sbin/request-key.backup\n/sbin/request-key</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Looking at the\nlog file created by this program, we can see the\ncommand-line arguments supplied to our example program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat\n/tmp/key_instantiate.log</b> <br>\nTime: Mon Nov 7 13:06:47 2016</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Command line\narguments: <br>\nargv[0]: /sbin/request-key <br>\noperation: create <br>\nkey_to_instantiate: 20d035bf <br>\nUID: 1000 <br>\nGID: 1000 <br>\nthread_keyring: 0 <br>\nprocess_keyring: 0 <br>\nsession_keyring: 256e6a6</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Key\ndescription: user;1000;1000;3f010000;mykey <br>\nAuth key payload: somepayloaddata <br>\nDestination keyring: 256e6a6 <br>\nAuth key description:\n.request_key_auth;1000;1000;0b010000;20d035bf</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The last few\nlines of the above output show that the example program was\nable to fetch:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the description of the key to be instantiated, which\nincluded the name of the key (<i>mykey</i>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the payload of the authorization key, which consisted of\nthe data (<i>somepayloaddata</i>) passed to\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the destination keyring that was specified in the call\nto <a href=\"https://man.page/2/request_key\">request_key(2)</a>; and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the description of the authorization key, where we can\nsee that the name of the authorization key matches the ID of\nthe key that is to be instantiated (<i>20d035bf</i>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The example\nprogram in <a href=\"https://man.page/2/request_key\">request_key(2)</a> specified the destination\nkeyring as <b>KEY_SPEC_SESSION_KEYRING</b>. By examining the\ncontents of <i>/proc/keys</i>, we can see that this was\ntranslated to the ID of the destination keyring\n(<i>0256e6a6</i>) shown in the log output above; we can also\nsee the newly created key with the name <i>mykey</i> and ID\n<i>20d035bf</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat\n/proc/keys | egrep 'mykey|256e6a6'</b> <br>\n0256e6a6 I--Q--- 194 perm 3f030000 1000 1000 keyring _ses: 3\n<br>\n20d035bf I--Q--- 1 perm 3f010000 1000 1000 user mykey:\n16</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n/* key_instantiate.c */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;sys/types.h&gt; <br>\n#include &lt;keyutils.h&gt; <br>\n#include &lt;time.h&gt; <br>\n#include &lt;fcntl.h&gt; <br>\n#include &lt;stdint.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;string.h&gt; <br>\n#include &lt;errno.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#ifndef\nKEY_SPEC_REQUESTOR_KEYRING <br>\n#define KEY_SPEC_REQUESTOR_KEYRING -8 <br>\n#endif</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nFILE *fp; <br>\ntime_t t; <br>\nchar *operation; <br>\nkey_serial_t key_to_instantiate, dest_keyring; <br>\nkey_serial_t thread_keyring, process_keyring,\nsession_keyring; <br>\nuid_t uid; <br>\ngid_t gid; <br>\nchar dbuf[256]; <br>\nchar auth_key_payload[256]; <br>\nint akp_size; /* Size of auth_key_payload */ <br>\nint auth_key;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fp =\nfopen(&quot;/tmp/key_instantiate.log&quot;, &quot;w&quot;);\n<br>\nif (fp == NULL) <br>\nexit(EXIT_FAILURE);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">setbuf(fp,\nNULL);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">t = time(NULL);\n<br>\nfprintf(fp, &quot;Time: %s\\n&quot;, ctime(&amp;t));</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* The kernel passes a fixed set of arguments to the program\n<br>\n* that it execs; fetch them. <br>\n*/ <br>\noperation = argv[1]; <br>\nkey_to_instantiate = atoi(argv[2]); <br>\nuid = atoi(argv[3]); <br>\ngid = atoi(argv[4]); <br>\nthread_keyring = atoi(argv[5]); <br>\nprocess_keyring = atoi(argv[6]); <br>\nsession_keyring = atoi(argv[7]);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fprintf(fp,\n&quot;Command line arguments:\\n&quot;); <br>\nfprintf(fp, &quot; argv[0]: %s\\n&quot;, argv[0]); <br>\nfprintf(fp, &quot; operation: %s\\n&quot;, operation); <br>\nfprintf(fp, &quot; key_to_instantiate: %jx\\n&quot;, <br>\n(uintmax_t) key_to_instantiate); <br>\nfprintf(fp, &quot; UID: %jd\\n&quot;, (intmax_t) uid); <br>\nfprintf(fp, &quot; GID: %jd\\n&quot;, (intmax_t) gid); <br>\nfprintf(fp, &quot; thread_keyring: %jx\\n&quot;, <br>\n(uintmax_t) thread_keyring); <br>\nfprintf(fp, &quot; process_keyring: %jx\\n&quot;, <br>\n(uintmax_t) process_keyring); <br>\nfprintf(fp, &quot; session_keyring: %jx\\n&quot;, <br>\n(uintmax_t) session_keyring); <br>\nfprintf(fp, &quot;\\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* Assume the authority to instantiate the key named in\nargv[2] <br>\n*/ <br>\nif (keyctl(KEYCTL_ASSUME_AUTHORITY, key_to_instantiate) ==\n-1) { <br>\nfprintf(fp, &quot;KEYCTL_ASSUME_AUTHORITY failed:\n%s\\n&quot;, <br>\nstrerror(errno)); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* Fetch the description of the key that is to be\ninstantiated <br>\n*/ <br>\nif (keyctl(KEYCTL_DESCRIBE, key_to_instantiate, <br>\ndbuf, sizeof(dbuf)) == -1) { <br>\nfprintf(fp, &quot;KEYCTL_DESCRIBE failed: %s\\n&quot;,\nstrerror(errno)); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fprintf(fp,\n&quot;Key description: %s\\n&quot;, dbuf);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* Fetch the payload of the authorization key, which is <br>\n* actually the callout data given to request_key() <br>\n*/ <br>\nakp_size = keyctl(KEYCTL_READ, KEY_SPEC_REQKEY_AUTH_KEY,\n<br>\nauth_key_payload, sizeof(auth_key_payload)); <br>\nif (akp_size == -1) { <br>\nfprintf(fp, &quot;KEYCTL_READ failed: %s\\n&quot;,\nstrerror(errno)); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">auth_key_payload[akp_size]\n= '\\0'; <br>\nfprintf(fp, &quot;Auth key payload: %s\\n&quot;,\nauth_key_payload);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* For interest, get the ID of the authorization key and <br>\n* display it. <br>\n*/ <br>\nauth_key = keyctl(KEYCTL_GET_KEYRING_ID, <br>\nKEY_SPEC_REQKEY_AUTH_KEY); <br>\nif (auth_key == -1) { <br>\nfprintf(fp, &quot;KEYCTL_GET_KEYRING_ID failed: %s\\n&quot;,\n<br>\nstrerror(errno)); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fprintf(fp,\n&quot;Auth key ID: %jx\\n&quot;, (uintmax_t) auth_key);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* Fetch key ID for the request_key(2) destination keyring.\n<br>\n*/ <br>\ndest_keyring = keyctl(KEYCTL_GET_KEYRING_ID, <br>\nKEY_SPEC_REQUESTOR_KEYRING); <br>\nif (dest_keyring == -1) { <br>\nfprintf(fp, &quot;KEYCTL_GET_KEYRING_ID failed: %s\\n&quot;,\n<br>\nstrerror(errno)); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fprintf(fp,\n&quot;Destination keyring: %jx\\n&quot;, (uintmax_t)\ndest_keyring);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* Fetch the description of the authorization key. This <br>\n* allows us to see the key type, UID, GID, permissions, <br>\n* and description (name) of the key. Among other things,\n<br>\n* we will see that the name of the key is a hexadecimal <br>\n* string representing the ID of the key to be instantiated.\n<br>\n*/ <br>\nif (keyctl(KEYCTL_DESCRIBE, KEY_SPEC_REQKEY_AUTH_KEY, <br>\ndbuf, sizeof(dbuf)) == -1) { <br>\nfprintf(fp, &quot;KEYCTL_DESCRIBE failed: %s\\n&quot;,\nstrerror(errno)); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fprintf(fp,\n&quot;Auth key description: %s\\n&quot;, dbuf);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* Instantiate the key using the callout data that was\nsupplied <br>\n* in the payload of the authorization key. <br>\n*/ <br>\nif (keyctl(KEYCTL_INSTANTIATE, key_to_instantiate, <br>\nauth_key_payload, akp_size + 1, dest_keyring) == -1) { <br>\nfprintf(fp, &quot;KEYCTL_INSTANTIATE failed: %s\\n&quot;,\n<br>\nstrerror(errno)); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/keyctl\">keyctl(1)</a>,\n<a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/request_key\">request_key(2)</a>, <a href=\"https://man.page/3/keyctl\">keyctl(3)</a>,\n<a href=\"https://man.page/3/keyctl_assume_authority\">keyctl_assume_authority(3)</a>, <a href=\"https://man.page/3/keyctl_chown\">keyctl_chown(3)</a>,\n<a href=\"https://man.page/3/keyctl_clear\">keyctl_clear(3)</a>, <a href=\"https://man.page/3/keyctl_describe\">keyctl_describe(3)</a>,\n<a href=\"https://man.page/3/keyctl_describe_alloc\">keyctl_describe_alloc(3)</a>,\n<a href=\"https://man.page/3/keyctl_dh_compute\">keyctl_dh_compute(3)</a>,\n<a href=\"https://man.page/3/keyctl_dh_compute_alloc\">keyctl_dh_compute_alloc(3)</a>,\n<a href=\"https://man.page/3/keyctl_get_keyring_ID\">keyctl_get_keyring_ID(3)</a>,\n<a href=\"https://man.page/3/keyctl_get_persistent\">keyctl_get_persistent(3)</a>,\n<a href=\"https://man.page/3/keyctl_get_security\">keyctl_get_security(3)</a>,\n<a href=\"https://man.page/3/keyctl_get_security_alloc\">keyctl_get_security_alloc(3)</a>,\n<a href=\"https://man.page/3/keyctl_instantiate\">keyctl_instantiate(3)</a>,\n<a href=\"https://man.page/3/keyctl_instantiate_iov\">keyctl_instantiate_iov(3)</a>,\n<a href=\"https://man.page/3/keyctl_invalidate\">keyctl_invalidate(3)</a>,\n<a href=\"https://man.page/3/keyctl_join_session_keyring\">keyctl_join_session_keyring(3)</a>,\n<a href=\"https://man.page/3/keyctl_link\">keyctl_link(3)</a>, <a href=\"https://man.page/3/keyctl_negate\">keyctl_negate(3)</a>,\n<a href=\"https://man.page/3/keyctl_read\">keyctl_read(3)</a>, <a href=\"https://man.page/3/keyctl_read_alloc\">keyctl_read_alloc(3)</a>,\n<a href=\"https://man.page/3/keyctl_reject\">keyctl_reject(3)</a>, <a href=\"https://man.page/3/keyctl_revoke\">keyctl_revoke(3)</a>,\n<a href=\"https://man.page/3/keyctl_search\">keyctl_search(3)</a>, <a href=\"https://man.page/3/keyctl_session_to_parent\">keyctl_session_to_parent(3)</a>,\n<a href=\"https://man.page/3/keyctl_set_reqkey_keyring\">keyctl_set_reqkey_keyring(3)</a>,\n<a href=\"https://man.page/3/keyctl_set_timeout\">keyctl_set_timeout(3)</a>, <a href=\"https://man.page/3/keyctl_setperm\">keyctl_setperm(3)</a>,\n<a href=\"https://man.page/3/keyctl_unlink\">keyctl_unlink(3)</a>, <a href=\"https://man.page/3/keyctl_update\">keyctl_update(3)</a>,\n<a href=\"https://man.page/3/recursive_key_scan\">recursive_key_scan(3)</a>,\n<a href=\"https://man.page/3/recursive_session_key_scan\">recursive_session_key_scan(3)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a>,\n<a href=\"https://man.page/7/keyrings\">keyrings(7)</a>, <a href=\"https://man.page/7/keyutils\">keyutils(7)</a>,\n<a href=\"https://man.page/7/persistent-keyring\">persistent-keyring(7)</a>, <a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>,\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>, <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>,\n<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>, <a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>,\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>, <b>request-key</b>(8)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nsource files under <i>Documentation/security/keys/</i> (or,\nbefore Linux 4.13, in the file\n<i>Documentation/security/keys.txt</i>).</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}