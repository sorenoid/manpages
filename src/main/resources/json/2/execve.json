{"name":"execve","body":"\n\n<h1 align=\"center\">EXECVE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">execve -\nexecute program</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nexecve(const char *</b><i>pathname</i><b>, char *const</b>\n<i>argv</i><b>[], <br>\nchar *const</b> <i>envp</i><b>[]);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>execve</b>()\nexecutes the program referred to by <i>pathname</i>. This\ncauses the program that is currently being run by the\ncalling process to be replaced with a new program, with\nnewly initialized stack, heap, and (initialized and\nuninitialized) data segments.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>pathname</i>\nmust be either a binary executable, or a script starting\nwith a line of the form:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>#!</b><i>interpreter</i>\n[optional-arg]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For details of\nthe latter case, see &quot;Interpreter scripts&quot;\nbelow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>argv</i> is\nan array of pointers to strings passed to the new program as\nits command-line arguments. By convention, the first of\nthese strings (i.e., <i>argv[0]</i>) should contain the\nfilename associated with the file being executed. The\n<i>argv</i> array must be terminated by a NULL pointer.\n(Thus, in the new program, <i>argv[argc]</i> will be\nNULL.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>envp</i> is\nan array of pointers to strings, conventionally of the form\n<b>key=value</b>, which are passed as the environment of the\nnew program. The <i>envp</i> array must be terminated by a\nNULL pointer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The argument\nvector and environment can be accessed by the new\nprogram&rsquo;s main function, when it is defined as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">int main(int\nargc, char *argv[], char *envp[])</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note, however,\nthat the use of a third argument to the main function is not\nspecified in POSIX.1; according to POSIX.1, the environment\nshould be accessed via the external variable\n<a href=\"https://man.page/7/environ\">environ(7)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>execve</b>()\ndoes not return on success, and the text, initialized data,\nuninitialized data (bss), and stack of the calling process\nare overwritten according to the contents of the newly\nloaded program.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the current\nprogram is being ptraced, a <b>SIGTRAP</b> signal is sent to\nit after a successful <b>execve</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nset-user-ID bit is set on the program file referred to by\n<i>pathname</i>, then the effective user ID of the calling\nprocess is changed to that of the owner of the program file.\nSimilarly, if the set-group-ID bit is set on the program\nfile, then the effective group ID of the calling process is\nset to the group of the program file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\naforementioned transformations of the effective IDs are\n<i>not</i> performed (i.e., the set-user-ID and set-group-ID\nbits are ignored) if any of the following is true:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the <i>no_new_privs</i> attribute is set for the calling\nthread (see <a href=\"https://man.page/2/prctl\">prctl(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the underlying filesystem is mounted <i>nosuid</i> (the\n<b>MS_NOSUID</b> flag for <a href=\"https://man.page/2/mount\">mount(2)</a>); or</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the calling process is being ptraced.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ncapabilities of the program file (see\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>) are also ignored if any of the above\nare true.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The effective\nuser ID of the process is copied to the saved set-user-ID;\nsimilarly, the effective group ID is copied to the saved\nset-group-ID. This copying takes place after any effective\nID changes that occur because of the set-user-ID and\nset-group-ID mode bits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nprocess&rsquo;s real UID and real GID, as well its\nsupplementary group IDs, are unchanged by a call to\n<b>execve</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nexecutable is an a.out dynamically linked binary executable\ncontaining shared-library stubs, the Linux dynamic linker\n<b>ld.so</b>(8) is called at the start of execution to bring\nneeded shared objects into memory and link the executable\nwith them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nexecutable is a dynamically linked ELF executable, the\ninterpreter named in the PT_INTERP segment is used to load\nthe needed shared objects. This interpreter is typically\n<i>/lib/ld-linux.so.2</i> for binaries linked with glibc\n(see <b>ld-linux.so</b>(8)).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Effect on\nprocess attributes</b> <br>\nAll process attributes are preserved during an\n<b>execve</b>(), except the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The dispositions of any signals\nthat are being caught are reset to the default\n(<a href=\"https://man.page/7/signal\">signal(7)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Any alternate signal stack is not preserved\n(<a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Memory mappings are not preserved (<a href=\"https://man.page/2/mmap\">mmap(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Attached System&nbsp;V shared memory segments are\ndetached (<a href=\"https://man.page/2/shmat\">shmat(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>POSIX shared memory regions are unmapped\n(<a href=\"https://man.page/3/shm_open\">shm_open(3)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Open POSIX message queue descriptors are closed\n(<a href=\"https://man.page/7/mq_overview\">mq_overview(7)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Any open POSIX named semaphores are closed\n(<a href=\"https://man.page/7/sem_overview\">sem_overview(7)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>POSIX timers are not preserved\n(<a href=\"https://man.page/2/timer_create\">timer_create(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Any open directory streams are closed\n(<a href=\"https://man.page/3/opendir\">opendir(3)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Memory locks are not preserved (<a href=\"https://man.page/2/mlock\">mlock(2)</a>,\n<a href=\"https://man.page/2/mlockall\">mlockall(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Exit handlers are not preserved (<a href=\"https://man.page/3/atexit\">atexit(3)</a>,\n<a href=\"https://man.page/3/on_exit\">on_exit(3)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The floating-point environment is reset to the default\n(see <a href=\"https://man.page/3/fenv\">fenv(3)</a>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The process\nattributes in the preceding list are all specified in\nPOSIX.1. The following Linux-specific process attributes are\nalso not preserved during an <b>execve</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The process&rsquo;s\n&quot;dumpable&quot; attribute is set to the value 1, unless\na set-user-ID program, a set-group-ID program, or a program\nwith capabilities is being executed, in which case the\ndumpable flag may instead be reset to the value in\n<i>/proc/sys/fs/suid_dumpable</i>, in the circumstances\ndescribed under <b>PR_SET_DUMPABLE</b> in <a href=\"https://man.page/2/prctl\">prctl(2)</a>.\nNote that changes to the &quot;dumpable&quot; attribute may\ncause ownership of files in the process&rsquo;s\n<i>/proc/[pid]</i> directory to change to <i>root:root</i>,\nas described in <a href=\"https://man.page/5/proc\">proc(5)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_SET_KEEPCAPS</b> flag is\ncleared.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>(Since Linux 2.4.36 / 2.6.23) If a set-user-ID or\nset-group-ID program is being executed, then the parent\ndeath signal set by <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_SET_PDEATHSIG</b>\nflag is cleared.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The process name, as set by <a href=\"https://man.page/2/prctl\">prctl(2)</a>\n<b>PR_SET_NAME</b> (and displayed by <i>ps&nbsp;-o\ncomm</i>), is reset to the name of the new executable\nfile.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <b>SECBIT_KEEP_CAPS</b> <i>securebits</i> flag is\ncleared. See <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The termination signal is reset to <b>SIGCHLD</b> (see\n<a href=\"https://man.page/2/clone\">clone(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The file descriptor table is unshared, undoing the\neffect of the <b>CLONE_FILES</b> flag of\n<a href=\"https://man.page/2/clone\">clone(2)</a>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the\nfollowing further points:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">All threads other than the\ncalling thread are destroyed during an <b>execve</b>().\nMutexes, condition variables, and other pthreads objects are\nnot preserved.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The equivalent of <i>setlocale(LC_ALL,\n&quot;C&quot;)</i> is executed at program start-up.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>POSIX.1 specifies that the dispositions of any signals\nthat are ignored or set to the default are left unchanged.\nPOSIX.1 specifies one exception: if <b>SIGCHLD</b> is being\nignored, then an implementation may leave the disposition\nunchanged or reset it to the default; Linux does the\nformer.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Any outstanding asynchronous I/O operations are canceled\n(<a href=\"https://man.page/3/aio_read\">aio_read(3)</a>, <a href=\"https://man.page/3/aio_write\">aio_write(3)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>For the handling of capabilities during <b>execve</b>(),\nsee <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>By default, file descriptors remain open across an\n<b>execve</b>(). File descriptors that are marked\nclose-on-exec are closed; see the description of\n<b>FD_CLOEXEC</b> in <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>. (If a file descriptor\nis closed, this will cause the release of all record locks\nobtained on the underlying file by this process. See\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> for details.) POSIX.1 says that if file\ndescriptors 0, 1, and 2 would otherwise be closed after a\nsuccessful <b>execve</b>(), and the process would gain\nprivilege because the set-user-ID or set-group-ID mode bit\nwas set on the executed file, then the system may open an\nunspecified file for each of these file descriptors. As a\ngeneral principle, no portable program, whether privileged\nor not, can assume that these three file descriptors will\nremain closed across an <b>execve</b>().</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Interpreter\nscripts</b> <br>\nAn interpreter script is a text file that has execute\npermission enabled and whose first line is of the form:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>#!</b><i>interpreter</i>\n[optional-arg]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>interpreter</i> must be a valid pathname for an\nexecutable file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<i>pathname</i> argument of <b>execve</b>() specifies an\ninterpreter script, then <i>interpreter</i> will be invoked\nwith the following arguments:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>interpreter</i>\n[optional-arg] <i>pathname</i> arg...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where\n<i>pathname</i> is the absolute pathname of the file\nspecified as the first argument of <b>execve</b>(), and\n<i>arg...</i> is the series of words pointed to by the\n<i>argv</i> argument of <b>execve</b>(), starting at\n<i>argv[1]</i>. Note that there is no way to get the\n<i>argv[0]</i> that was passed to the <b>execve</b>()\ncall.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For portable\nuse, <i>optional-arg</i> should either be absent, or be\nspecified as a single word (i.e., it should not contain\nwhite space); see NOTES below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.28, the kernel permits the interpreter of a script to\nitself be a script. This permission is recursive, up to a\nlimit of four recursions, so that the interpreter may be a\nscript which is interpreted by a script, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Limits on\nsize of arguments and environment</b> <br>\nMost UNIX implementations impose some limit on the total\nsize of the command-line argument (<i>argv</i>) and\nenvironment (<i>envp</i>) strings that may be passed to a\nnew program. POSIX.1 allows an implementation to advertise\nthis limit using the <b>ARG_MAX</b> constant (either defined\nin <i>&lt;limits.h&gt;</i> or available at run time using\nthe call <i>sysconf(_SC_ARG_MAX)</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux prior\nto kernel 2.6.23, the memory used to store the environment\nand argument strings was limited to 32 pages (defined by the\nkernel constant <b>MAX_ARG_PAGES</b>). On architectures with\na 4-kB page size, this yields a maximum size of\n128&nbsp;kB.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On kernel\n2.6.23 and later, most architectures support a size limit\nderived from the soft <b>RLIMIT_STACK</b> resource limit\n(see <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>) that is in force at the time of\nthe <b>execve</b>() call. (Architectures with no memory\nmanagement unit are excepted: they maintain the limit that\nwas in effect before kernel 2.6.23.) This change allows\nprograms to have a much larger argument and/or environment\nlist. For these architectures, the total size is limited to\n1/4 of the allowed stack size. (Imposing the 1/4-limit\nensures that the new program always has some stack space.)\nAdditionally, the total size is limited to 3/4 of the value\nof the kernel constant <b>_STK_LIM</b> (8 Mibibytes). Since\nLinux 2.6.25, the kernel also places a floor of 32 pages on\nthis size limit, so that, even when <b>RLIMIT_STACK</b> is\nset very low, applications are guaranteed to have at least\nas much argument and environment space as was provided by\nLinux 2.6.23 and earlier. (This guarantee was not provided\nin Linux 2.6.23 and 2.6.24.) Additionally, the limit per\nstring is 32 pages (the kernel constant\n<b>MAX_ARG_STRLEN</b>), and the maximum number of strings is\n0x7FFFFFFF.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>execve</b>() does not return, on error -1 is returned,\nand <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>E2BIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The total number of bytes in the\nenvironment (<i>envp</i>) and argument list (<i>argv</i>) is\ntoo large.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Search permission is denied on a component of the path\nprefix of <i>pathname</i> or the name of a script\ninterpreter. (See also <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The file or a script interpreter is not a regular\nfile.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Execute permission is denied for the file or a script or\nELF interpreter.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The filesystem is mounted <i>noexec</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EAGAIN</b> (since Linux\n3.1)</p>\n\n<p style=\"margin-left:22%;\">Having changed its real UID\nusing one of the <b>set*uid</b>() calls, the caller\nwas&mdash;and is now still&mdash;above its\n<b>RLIMIT_NPROC</b> resource limit (see\n<a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>). For a more detailed explanation of\nthis error, see NOTES.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> or one of the pointers in the vectors\n<i>argv</i> or <i>envp</i> points outside your accessible\naddress space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An ELF executable had more than one PT_INTERP segment\n(i.e., tried to name more than one interpreter).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EIO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An I/O error occurred.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EISDIR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An ELF interpreter was a directory.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ELIBBAD</b></p>\n\n<p style=\"margin-left:22%;\">An ELF interpreter was not in a\nrecognized format.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Too many symbolic links were encountered in resolving\n<i>pathname</i> or the name of a script or ELF\ninterpreter.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The maximum recursion limit was reached during recursive\nscript interpretation (see &quot;Interpreter scripts&quot;,\nabove). Before Linux 3.8, the error produced for this case\nwas <b>ENOEXEC</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENAMETOOLONG</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> is too\nlong.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system-wide limit on the total number of open files\nhas been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The file <i>pathname</i> or a script or ELF interpreter\ndoes not exist.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOEXEC</b></p>\n\n<p style=\"margin-left:22%;\">An executable is not in a\nrecognized format, is for the wrong architecture, or has\nsome other format error that means it cannot be\nexecuted.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p>Insufficient kernel memory was available.</p></td>\n<td width=\"15%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\">A component of the path prefix\nof <i>pathname</i> or a script or ELF interpreter is not a\ndirectory.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The filesystem is mounted <i>nosuid</i>, the user is not\nthe superuser, and the file has the set-user-ID or\nset-group-ID bit set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The process is being traced, the user is not the\nsuperuser and the file has the set-user-ID or set-group-ID\nbit set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>A &quot;capability-dumb&quot; applications would not\nobtain the full set of permitted capabilities granted by the\nexecutable file. See <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ETXTBSY</b></p>\n\n<p style=\"margin-left:22%;\">The specified executable was\nopen for writing by one or more processes.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4, 4.3BSD. POSIX does not document the #!\nbehavior, but it exists (with some variations) on other UNIX\nsystems.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">One sometimes\nsees <b>execve</b>() (and the related functions described in\n<a href=\"https://man.page/3/exec\">exec(3)</a>) described as &quot;executing a <i>new</i>\nprocess&quot; (or similar). This is a highly misleading\ndescription: there is no new process; many attributes of the\ncalling process remain unchanged (in particular, its PID).\nAll that <b>execve</b>() does is arrange for an existing\nprocess (the calling process) to execute a new program.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Set-user-ID and\nset-group-ID processes can not be <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>d.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The result of\nmounting a filesystem <i>nosuid</i> varies across Linux\nkernel versions: some will refuse execution of set-user-ID\nand set-group-ID executables when this would give the user\npowers they did not have already (and return <b>EPERM</b>),\nsome will just ignore the set-user-ID and set-group-ID bits\nand <b>exec</b>() successfully.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux,\n<i>argv</i> and <i>envp</i> can be specified as NULL. In\nboth cases, this has the same effect as specifying the\nargument as a pointer to a list containing a single null\npointer. <b>Do not take advantage of this nonstandard and\nnonportable misfeature!</b> On many other UNIX systems,\nspecifying <i>argv</i> as NULL will result in an error\n(<b>EFAULT</b>). <i>Some</i> other UNIX systems treat the\n<i>envp==NULL</i> case the same as Linux.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 says\nthat values returned by <a href=\"https://man.page/3/sysconf\">sysconf(3)</a> should be\ninvariant over the lifetime of a process. However, since\nLinux 2.6.23, if the <b>RLIMIT_STACK</b> resource limit\nchanges, then the value reported by <b>_SC_ARG_MAX</b> will\nalso change, to reflect the fact that the limit on space for\nholding command-line arguments and environment variables has\nchanged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In most cases\nwhere <b>execve</b>() fails, control returns to the original\nexecutable image, and the caller of <b>execve</b>() can then\nhandle the error. However, in (rare) cases (typically caused\nby resource exhaustion), failure may occur past the point of\nno return: the original executable image has been torn down,\nbut the new image could not be completely built. In such\ncases, the kernel kills the process with a <b>SIGSEGV</b>\n(<b>SIGKILL</b> until Linux 3.17) signal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Interpreter\nscripts</b> <br>\nThe kernel imposes a maximum length on the text that follows\nthe &quot;#!&quot; characters at the start of a script;\ncharacters beyond the limit are ignored. Before Linux 5.1,\nthe limit is 127 characters. Since Linux 5.1, the limit is\n255 characters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The semantics\nof the <i>optional-arg</i> argument of an interpreter script\nvary across implementations. On Linux, the entire string\nfollowing the <i>interpreter</i> name is passed as a single\nargument to the interpreter, and this string can include\nwhite space. However, behavior differs on some other\nsystems. Some systems use the first white space to terminate\n<i>optional-arg</i>. On some systems, an interpreter script\ncan have multiple arguments, and white spaces in\n<i>optional-arg</i> are used to delimit the arguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux (like\nmost other modern UNIX systems) ignores the set-user-ID and\nset-group-ID bits on scripts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>execve() and\nEAGAIN</b> <br>\nA more detailed explanation of the <b>EAGAIN</b> error that\ncan occur (since Linux 3.1) when calling <b>execve</b>() is\nas follows.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>EAGAIN</b> error can occur when a <i>preceding</i> call\nto <a href=\"https://man.page/2/setuid\">setuid(2)</a>, <a href=\"https://man.page/2/setreuid\">setreuid(2)</a>, or\n<a href=\"https://man.page/2/setresuid\">setresuid(2)</a> caused the real user ID of the process\nto change, and that change caused the process to exceed its\n<b>RLIMIT_NPROC</b> resource limit (i.e., the number of\nprocesses belonging to the new real UID exceeds the resource\nlimit). From Linux 2.6.0 to 3.0, this caused the\n<b>set*uid</b>() call to fail. (Prior to 2.6, the resource\nlimit was not imposed on processes that changed their user\nIDs.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n3.1, the scenario just described no longer causes the\n<b>set*uid</b>() call to fail, because it too often led to\nsecurity holes where buggy applications didn&rsquo;t check\nthe return status and assumed that&mdash;if the caller had\nroot privileges&mdash;the call would always succeed.\nInstead, the <b>set*uid</b>() calls now successfully change\nthe real UID, but the kernel sets an internal flag, named\n<b>PF_NPROC_EXCEEDED</b>, to note that the\n<b>RLIMIT_NPROC</b> resource limit has been exceeded. If the\n<b>PF_NPROC_EXCEEDED</b> flag is set and the resource limit\nis still exceeded at the time of a subsequent\n<b>execve</b>() call, that call fails with the error\n<b>EAGAIN</b>. This kernel logic ensures that the\n<b>RLIMIT_NPROC</b> resource limit is still enforced for the\ncommon privileged daemon workflow&mdash;namely,\n<a href=\"https://man.page/2/fork\">fork(2)</a> + <b>set*uid</b>() + <b>execve</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the resource\nlimit was not still exceeded at the time of the\n<b>execve</b>() call (because other processes belonging to\nthis real UID terminated between the <b>set*uid</b>() call\nand the <b>execve</b>() call), then the <b>execve</b>() call\nsucceeds and the kernel clears the <b>PF_NPROC_EXCEEDED</b>\nprocess flag. The flag is also cleared if a subsequent call\nto <a href=\"https://man.page/2/fork\">fork(2)</a> by this process succeeds.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Historical</b>\n<br>\nWith UNIX&nbsp;V6, the argument list of an <b>exec</b>()\ncall was ended by 0, while the argument list of <i>main</i>\nwas ended by -1. Thus, this argument list was not directly\nusable in a further <b>exec</b>() call. Since UNIX&nbsp;V7,\nboth are NULL.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nprogram is designed to be execed by the second program\nbelow. It just echoes its command-line arguments, one per\nline.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* myecho.c\n*/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#include\n&lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nfor (int j = 0; j &lt; argc; j++) <br>\nprintf(&quot;argv[%d]: %s\\n&quot;, j, argv[j]);</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This program\ncan be used to exec the program named in its command-line\nargument:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* execve.c\n*/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#include\n&lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nchar *newargv[] = { NULL, &quot;hello&quot;,\n&quot;world&quot;, NULL }; <br>\nchar *newenviron[] = { NULL };</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if (argc != 2)\n{ <br>\nfprintf(stderr, &quot;Usage: %s\n&lt;file-to-exec&gt;\\n&quot;, argv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">newargv[0] =\nargv[1];</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">execve(argv[1],\nnewargv, newenviron); <br>\nperror(&quot;execve&quot;); /* execve() returns only on\nerror */ <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We can use the\nsecond program to exec the first as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cc\nmyecho.c -o myecho</b> <br>\n$ <b>cc execve.c -o execve</b> <br>\n$ <b>./execve ./myecho</b> <br>\nargv[0]: ./myecho <br>\nargv[1]: hello <br>\nargv[2]: world</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We can also use\nthese programs to demonstrate the use of a script\ninterpreter. To do this we create a script whose\n&quot;interpreter&quot; is our <i>myecho</i> program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat &gt;\nscript <br>\n#!./myecho script-arg <br>\n^D</b> <br>\n$ <b>chmod +x script</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We can then use\nour program to exec the script:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./execve\n./script</b> <br>\nargv[0]: ./myecho <br>\nargv[1]: script-arg <br>\nargv[2]: ./script <br>\nargv[3]: hello <br>\nargv[4]: world</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/chmod\">chmod(2)</a>,\n<a href=\"https://man.page/2/execveat\">execveat(2)</a>, <a href=\"https://man.page/2/fork\">fork(2)</a>,\n<a href=\"https://man.page/2/get_robust_list\">get_robust_list(2)</a>, <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>, <a href=\"https://man.page/3/exec\">exec(3)</a>,\n<a href=\"https://man.page/3/fexecve\">fexecve(3)</a>, <a href=\"https://man.page/3/getopt\">getopt(3)</a>, <a href=\"https://man.page/3/system\">system(3)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a>,\n<a href=\"https://man.page/7/environ\">environ(7)</a>, <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>,\n<b>ld.so</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}