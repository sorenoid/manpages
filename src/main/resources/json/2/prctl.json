{"name":"prctl","body":"\n\n<h1 align=\"center\">PRCTL</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">prctl -\noperations on a process or thread</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/prctl.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nprctl(int</b> <i>option</i><b>, unsigned long</b>\n<i>arg2</i><b>, unsigned long</b> <i>arg3</i><b>, <br>\nunsigned long</b> <i>arg4</i><b>, unsigned long</b>\n<i>arg5</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>prctl</b>()\nmanipulates various aspects of the behavior of the calling\nthread or process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\ncareless use of some <b>prctl</b>() operations can confuse\nthe user-space run-time environment, so these operations\nshould be used with care.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>prctl</b>()\nis called with a first argument describing what to do (with\nvalues defined in <i>&lt;linux/prctl.h&gt;</i>), and further\narguments with a significance depending on the first one.\nThe first argument can be: <b><br>\nPR_CAP_AMBIENT</b> (since Linux 4.3)</p>\n\n<p style=\"margin-left:22%;\">Reads or changes the ambient\ncapability set of the calling thread, according to the value\nof <i>arg2</i>, which must be one of the following: <b><br>\nPR_CAP_AMBIENT_RAISE</b></p>\n\n<p style=\"margin-left:32%;\">The capability specified in\n<i>arg3</i> is added to the ambient set. The specified\ncapability must already be present in both the permitted and\nthe inheritable sets of the process. This operation is not\npermitted if the <b>SECBIT_NO_CAP_AMBIENT_RAISE</b>\nsecurebit is set.</p>\n\n\n<p style=\"margin-left:22%;\"><b>PR_CAP_AMBIENT_LOWER</b></p>\n\n<p style=\"margin-left:32%;\">The capability specified in\n<i>arg3</i> is removed from the ambient set.</p>\n\n\n<p style=\"margin-left:22%;\"><b>PR_CAP_AMBIENT_IS_SET</b></p>\n\n<p style=\"margin-left:32%;\">The <b>prctl</b>() call returns\n1 if the capability in <i>arg3</i> is in the ambient set and\n0 if it is not.</p>\n\n\n<p style=\"margin-left:22%;\"><b>PR_CAP_AMBIENT_CLEAR_ALL</b></p>\n\n<p style=\"margin-left:32%;\">All capabilities will be\nremoved from the ambient set. This operation requires\nsetting <i>arg3</i> to zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In all of the\nabove operations, <i>arg4</i> and <i>arg5</i> must be\nspecified as 0.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Higher-level\ninterfaces layered on top of the above operations are\nprovided in the <a href=\"https://man.page/3/libcap\">libcap(3)</a> library in the form of\n<a href=\"https://man.page/3/cap_get_ambient\">cap_get_ambient(3)</a>, <a href=\"https://man.page/3/cap_set_ambient\">cap_set_ambient(3)</a>, and\n<a href=\"https://man.page/3/cap_reset_ambient\">cap_reset_ambient(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_CAPBSET_READ</b> (since\nLinux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\n1 if the capability specified in <i>arg2</i> is in the\ncalling thread&rsquo;s capability bounding set, or 0 if it\nis not. (The capability constants are defined in\n<i>&lt;linux/capability.h&gt;</i>.) The capability bounding\nset dictates whether the process can receive the capability\nthrough a file&rsquo;s permitted capability set on a\nsubsequent call to <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\ncapability specified in <i>arg2</i> is not valid, then the\ncall fails with the error <b>EINVAL</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A higher-level\ninterface layered on top of this operation is provided in\nthe <a href=\"https://man.page/3/libcap\">libcap(3)</a> library in the form of\n<a href=\"https://man.page/3/cap_get_bound\">cap_get_bound(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_CAPBSET_DROP</b> (since\nLinux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">If the calling thread has the\n<b>CAP_SETPCAP</b> capability within its user namespace,\nthen drop the capability specified by <i>arg2</i> from the\ncalling thread&rsquo;s capability bounding set. Any children\nof the calling thread will inherit the newly reduced\nbounding set.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The call fails\nwith the error: <b>EPERM</b> if the calling thread does not\nhave the <b>CAP_SETPCAP</b>; <b>EINVAL</b> if <i>arg2</i>\ndoes not represent a valid capability; or <b>EINVAL</b> if\nfile capabilities are not enabled in the kernel, in which\ncase bounding sets are not supported.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A higher-level\ninterface layered on top of this operation is provided in\nthe <a href=\"https://man.page/3/libcap\">libcap(3)</a> library in the form of\n<a href=\"https://man.page/3/cap_drop_bound\">cap_drop_bound(3)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_CHILD_SUBREAPER</b>\n(since Linux 3.4)</p>\n\n<p style=\"margin-left:22%;\">If <i>arg2</i> is nonzero, set\nthe &quot;child subreaper&quot; attribute of the calling\nprocess; if <i>arg2</i> is zero, unset the attribute.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A subreaper\nfulfills the role of <a href=\"https://man.page/1/init\">init(1)</a> for its descendant\nprocesses. When a process becomes orphaned (i.e., its\nimmediate parent terminates), then that process will be\nreparented to the nearest still living ancestor subreaper.\nSubsequently, calls to <a href=\"https://man.page/2/getppid\">getppid(2)</a> in the orphaned\nprocess will now return the PID of the subreaper process,\nand when the orphan terminates, it is the subreaper process\nthat will receive a <b>SIGCHLD</b> signal and will be able\nto <a href=\"https://man.page/2/wait\">wait(2)</a> on the process to discover its termination\nstatus.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The setting of\nthe &quot;child subreaper&quot; attribute is not inherited\nby children created by <a href=\"https://man.page/2/fork\">fork(2)</a> and <a href=\"https://man.page/2/clone\">clone(2)</a>.\nThe setting is preserved across <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Establishing a\nsubreaper process is useful in session management frameworks\nwhere a hierarchical group of processes is managed by a\nsubreaper process that needs to be informed when one of the\nprocesses&mdash;for example, a double-forked\ndaemon&mdash;terminates (perhaps so that it can restart that\nprocess). Some <a href=\"https://man.page/1/init\">init(1)</a> frameworks (e.g.,\n<a href=\"https://man.page/1/systemd\">systemd(1)</a>) employ a subreaper process for similar\nreasons.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_CHILD_SUBREAPER</b>\n(since Linux 3.4)</p>\n\n<p style=\"margin-left:22%;\">Return the &quot;child\nsubreaper&quot; setting of the caller, in the location\npointed to by <i>(int&nbsp;*) arg2</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_DUMPABLE</b> (since\nLinux 2.3.20)</p>\n\n<p style=\"margin-left:22%;\">Set the state of the\n&quot;dumpable&quot; attribute, which determines whether\ncore dumps are produced for the calling process upon\ndelivery of a signal whose default behavior is to produce a\ncore dump.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In kernels up\nto and including 2.6.12, <i>arg2</i> must be either 0\n(<b>SUID_DUMP_DISABLE</b>, process is not dumpable) or 1\n(<b>SUID_DUMP_USER</b>, process is dumpable). Between\nkernels 2.6.13 and 2.6.17, the value 2 was also permitted,\nwhich caused any binary which normally would not be dumped\nto be dumped readable by root only; for security reasons,\nthis feature has been removed. (See also the description of\n<i>/proc/sys/fs/ suid_dumpable</i> in <a href=\"https://man.page/5/proc\">proc(5)</a>.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Normally, the\n&quot;dumpable&quot; attribute is set to 1. However, it is\nreset to the current value contained in the file\n<i>/proc/sys/fs/ suid_dumpable</i> (which by default has the\nvalue 0), in the following circumstances:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The process&rsquo;s effective user or group ID is\nchanged.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The process&rsquo;s filesystem user or group ID is\nchanged (see <a href=\"https://man.page/7/credentials\">credentials(7)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The process executes (<a href=\"https://man.page/2/execve\">execve(2)</a>) a set-user-ID or\nset-group-ID program, resulting in a change of either the\neffective user ID or the effective group ID.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The process executes (<a href=\"https://man.page/2/execve\">execve(2)</a>) a program that\nhas file capabilities (see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>), but only\nif the permitted capabilities gained exceed those already\npermitted for the process.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Processes that\nare not dumpable can not be attached via <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>\n<b>PTRACE_ATTACH</b>; see <a href=\"https://man.page/2/ptrace\">ptrace(2)</a> for further\ndetails.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If a process is\nnot dumpable, the ownership of files in the process&rsquo;s\n<i>/proc/[pid]</i> directory is affected as described in\n<a href=\"https://man.page/5/proc\">proc(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_DUMPABLE</b> (since\nLinux 2.3.20)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe current state of the calling process&rsquo;s dumpable\nattribute.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_ENDIAN</b> (since\nLinux 2.6.18, PowerPC only)</p>\n\n<p style=\"margin-left:22%;\">Set the endian-ness of the\ncalling process to the value given in <i>arg2</i>, which\nshould be one of the following: <b>PR_ENDIAN_BIG</b>,\n<b>PR_ENDIAN_LITTLE</b>, or <b>PR_ENDIAN_PPC_LITTLE</b>\n(PowerPC pseudo little endian).</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_ENDIAN</b> (since\nLinux 2.6.18, PowerPC only)</p>\n\n<p style=\"margin-left:22%;\">Return the endian-ness of the\ncalling process, in the location pointed to by\n<i>(int&nbsp;*) arg2</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_FP_MODE</b> (since\nLinux 4.0, only on MIPS)</p>\n\n<p style=\"margin-left:22%;\">On the MIPS architecture,\nuser-space code can be built using an ABI which permits\nlinking with code that has more restrictive floating-point\n(FP) requirements. For example, user-space code may be built\nto target the O32 FPXX ABI and linked with code built for\neither one of the more restrictive FP32 or FP64 ABIs. When\nmore restrictive code is linked in, the overall requirement\nfor the process is to use the more restrictive\nfloating-point mode.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Because the\nkernel has no means of knowing in advance which mode the\nprocess should be executed in, and because these\nrestrictions can change over the lifetime of the process,\nthe <b>PR_SET_FP_MODE</b> operation is provided to allow\ncontrol of the floating-point mode from user space.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>(unsigned int) arg2</i> argument is a bit mask describing\nthe floating-point mode used: <b><br>\nPR_FP_MODE_FR</b></p>\n\n<p style=\"margin-left:32%;\">When this bit is <i>unset</i>\n(so called <b>FR=0</b> or <b>FR0</b> mode), the 32\nfloating-point registers are 32 bits wide, and 64-bit\nregisters are represented as a pair of registers (even- and\nodd- numbered, with the even-numbered register containing\nthe lower 32 bits, and the odd-numbered register containing\nthe higher 32 bits).</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">When this bit\nis <i>set</i> (on supported hardware), the 32 floating-point\nregisters are 64 bits wide (so called <b>FR=1</b> or\n<b>FR1</b> mode). Note that modern MIPS implementations\n(MIPS R6 and newer) support <b>FR=1</b> mode only.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Applications\nthat use the O32 FP32 ABI can operate only when this bit is\n<i>unset</i> (<b>FR=0</b>; or they can be used with FRE\nenabled, see below). Applications that use the O32 FP64 ABI\n(and the O32 FP64A ABI, which exists to provide the ability\nto operate with existing FP32 code; see below) can operate\nonly when this bit is <i>set</i> (<b>FR=1</b>). Applications\nthat use the O32 FPXX ABI can operate with either\n<b>FR=0</b> or <b>FR=1</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_FP_MODE_FRE</b></p>\n\n<p style=\"margin-left:32%;\">Enable emulation of 32-bit\nfloating-point mode. When this mode is enabled, it emulates\n32-bit floating-point operations by raising a\nreserved-instruction exception on every instruction that\nuses 32-bit formats and the kernel then handles the\ninstruction in software. (The problem lies in the\ndiscrepancy of handling odd-numbered registers which are the\nhigh 32 bits of 64-bit registers with even numbers in\n<b>FR=0</b> mode and the lower 32-bit parts of odd-numbered\n64-bit registers in <b>FR=1</b> mode.) Enabling this bit is\nnecessary when code with the O32 FP32 ABI should operate\nwith code with compatible the O32 FPXX or O32 FP64A ABIs\n(which require <b>FR=1</b> FPU mode) or when it is executed\non newer hardware (MIPS R6 onwards) which lacks <b>FR=0</b>\nmode support when a binary with the FP32 ABI is used.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Note that this\nmode makes sense only when the FPU is in 64-bit mode\n(<b>FR=1</b>).</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Note that the\nuse of emulation inherently has a significant performance\nhit and should be avoided if possible.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In the N32/N64\nABI, 64-bit floating-point mode is always used, so FPU\nemulation is not required and the FPU always operates in\n<b>FR=1</b> mode.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option is\nmainly intended for use by the dynamic linker\n(<b>ld.so</b>(8)).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_FP_MODE</b> (since\nLinux 4.0, only on MIPS)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe current floating-point mode (see the description of\n<b>PR_SET_FP_MODE</b> for details).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">On success, the\ncall returns a bit mask which represents the current\nfloating-point mode.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The arguments\n<i>arg2</i>, <i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are\nignored.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_FPEMU</b> (since\nLinux 2.4.18, 2.5.9, only on ia64)</p>\n\n<p style=\"margin-left:22%;\">Set floating-point emulation\ncontrol bits to <i>arg2</i>. Pass <b>PR_FPEMU_NOPRINT</b> to\nsilently emulate floating-point operation accesses, or\n<b>PR_FPEMU_SIGFPE</b> to not emulate floating-point\noperations and send <b>SIGFPE</b> instead.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_FPEMU</b> (since\nLinux 2.4.18, 2.5.9, only on ia64)</p>\n\n<p style=\"margin-left:22%;\">Return floating-point emulation\ncontrol bits, in the location pointed to by <i>(int&nbsp;*)\narg2</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_FPEXC</b> (since\nLinux 2.4.21, 2.5.32, only on PowerPC)</p>\n\n<p style=\"margin-left:22%;\">Set floating-point exception\nmode to <i>arg2</i>. Pass <b>PR_FP_EXC_SW_ENABLE</b> to use\nFPEXC for FP exception enables, <b>PR_FP_EXC_DIV</b> for\nfloating-point divide by zero, <b>PR_FP_EXC_OVF</b> for\nfloating-point overflow, <b>PR_FP_EXC_UND</b> for\nfloating-point underflow, <b>PR_FP_EXC_RES</b> for\nfloating-point inexact result, <b>PR_FP_EXC_INV</b> for\nfloating-point invalid operation, <b>PR_FP_EXC_DISABLED</b>\nfor FP exceptions disabled, <b>PR_FP_EXC_NONRECOV</b> for\nasync nonrecoverable exception mode, <b>PR_FP_EXC_ASYNC</b>\nfor async recoverable exception mode,\n<b>PR_FP_EXC_PRECISE</b> for precise exception mode.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_FPEXC</b> (since\nLinux 2.4.21, 2.5.32, only on PowerPC)</p>\n\n<p style=\"margin-left:22%;\">Return floating-point exception\nmode, in the location pointed to by <i>(int&nbsp;*)\narg2</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_IO_FLUSHER</b> (since\nLinux 5.6)</p>\n\n<p style=\"margin-left:22%;\">If a user process is involved\nin the block layer or filesystem I/O path, and can allocate\nmemory while processing I/O requests it must set <i>arg2</i>\nto 1. This will put the process in the IO_FLUSHER state,\nwhich allows it special treatment to make progress when\nallocating memory. If <i>arg2</i> is 0, the process will\nclear the IO_FLUSHER state, and the default behavior will be\nused.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The calling\nprocess must have the <b>CAP_SYS_RESOURCE</b>\ncapability.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>arg3</i>,\n<i>arg4</i>, and <i>arg5</i> must be zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The IO_FLUSHER\nstate is inherited by a child process created via\n<a href=\"https://man.page/2/fork\">fork(2)</a> and is preserved across <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Examples of\nIO_FLUSHER applications are FUSE daemons, SCSI device\nemulation daemons, and daemons that perform error handling\nlike multipath path recovery applications.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_IO_FLUSHER (Since\nLinux 5.6)</b></p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe IO_FLUSHER state of the caller. A value of 1 indicates\nthat the caller is in the IO_FLUSHER state; 0 indicates that\nthe caller is not in the IO_FLUSHER state.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The calling\nprocess must have the <b>CAP_SYS_RESOURCE</b>\ncapability.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>arg2</i>,\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> must be zero.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_KEEPCAPS</b> (since\nLinux 2.2.18)</p>\n\n<p style=\"margin-left:22%;\">Set the state of the calling\nthread&rsquo;s &quot;keep capabilities&quot; flag. The\neffect of this flag is described in <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.\n<i>arg2</i> must be either 0 (clear the flag) or 1 (set the\nflag). The &quot;keep capabilities&quot; value will be reset\nto 0 on subsequent calls to <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_KEEPCAPS</b> (since\nLinux 2.2.18)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe current state of the calling thread&rsquo;s &quot;keep\ncapabilities&quot; flag. See <a href=\"https://man.page/7/capabilities\">capabilities(7)</a> for a\ndescription of this flag.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_MCE_KILL</b> (since Linux\n2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Set the machine check memory\ncorruption kill policy for the calling thread. If\n<i>arg2</i> is <b>PR_MCE_KILL_CLEAR</b>, clear the thread\nmemory corruption kill policy and use the system-wide\ndefault. (The system-wide default is defined by\n<i>/proc/sys/vm/memory_failure_early_kill</i>; see\n<a href=\"https://man.page/5/proc\">proc(5)</a>.) If <i>arg2</i> is <b>PR_MCE_KILL_SET</b>,\nuse a thread-specific memory corruption kill policy. In this\ncase, <i>arg3</i> defines whether the policy is <i>early\nkill</i> (<b>PR_MCE_KILL_EARLY</b>), <i>late kill</i>\n(<b>PR_MCE_KILL_LATE</b>), or the system-wide default\n(<b>PR_MCE_KILL_DEFAULT</b>). Early kill means that the\nthread receives a <b>SIGBUS</b> signal as soon as hardware\nmemory corruption is detected inside its address space. In\nlate kill mode, the process is killed only when it accesses\na corrupted page. See <a href=\"https://man.page/2/sigaction\">sigaction(2)</a> for more\ninformation on the <b>SIGBUS</b> signal. The policy is\ninherited by children. The remaining unused <b>prctl</b>()\narguments must be zero for future compatibility.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_MCE_KILL_GET</b> (since\nLinux 2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe current per-process machine check kill policy. All\nunused <b>prctl</b>() arguments must be zero.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_MM</b> (since Linux\n3.3)</p>\n\n<p style=\"margin-left:22%;\">Modify certain kernel memory\nmap descriptor fields of the calling process. Usually these\nfields are set by the kernel and dynamic loader (see\n<b>ld.so</b>(8) for more information) and a regular\napplication should not use this feature. However, there are\ncases, such as self-modifying programs, where a program\nmight find it useful to change its own memory map.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The calling\nprocess must have the <b>CAP_SYS_RESOURCE</b> capability.\nThe value in <i>arg2</i> is one of the options below, while\n<i>arg3</i> provides a new value for the option. The\n<i>arg4</i> and <i>arg5</i> arguments must be zero if\nunused.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before Linux\n3.10, this feature is available only if the kernel is built\nwith the <b>CONFIG_CHECKPOINT_RESTORE</b> option enabled.\n<b><br>\nPR_SET_MM_START_CODE</b></p>\n\n<p style=\"margin-left:32%;\">Set the address above which the\nprogram text can run. The corresponding memory area must be\nreadable and executable, but not writable or shareable (see\n<a href=\"https://man.page/2/mprotect\">mprotect(2)</a> and <a href=\"https://man.page/2/mmap\">mmap(2)</a> for more\ninformation).</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_END_CODE</b></p>\n\n<p style=\"margin-left:32%;\">Set the address below which the\nprogram text can run. The corresponding memory area must be\nreadable and executable, but not writable or shareable.</p>\n\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_START_DATA</b></p>\n\n<p style=\"margin-left:32%;\">Set the address above which\ninitialized and uninitialized (bss) data are placed. The\ncorresponding memory area must be readable and writable, but\nnot executable or shareable.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_END_DATA</b></p>\n\n<p style=\"margin-left:32%;\">Set the address below which\ninitialized and uninitialized (bss) data are placed. The\ncorresponding memory area must be readable and writable, but\nnot executable or shareable.</p>\n\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_START_STACK</b></p>\n\n<p style=\"margin-left:32%;\">Set the start address of the\nstack. The corresponding memory area must be readable and\nwritable.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_START_BRK</b></p>\n\n<p style=\"margin-left:32%;\">Set the address above which the\nprogram heap can be expanded with <a href=\"https://man.page/2/brk\">brk(2)</a> call. The\naddress must be greater than the ending address of the\ncurrent program data segment. In addition, the combined size\nof the resulting heap and the size of the data segment\ncan&rsquo;t exceed the <b>RLIMIT_DATA</b> resource limit\n(see <a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>).</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_BRK</b></p>\n\n<p style=\"margin-left:32%;\">Set the current <a href=\"https://man.page/2/brk\">brk(2)</a>\nvalue. The requirements for the address are the same as for\nthe <b>PR_SET_MM_START_BRK</b> option.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\noptions are available since Linux 3.5. <b><br>\nPR_SET_MM_ARG_START</b></p>\n\n<p style=\"margin-left:32%;\">Set the address above which the\nprogram command line is placed.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_ARG_END</b></p>\n\n<p style=\"margin-left:32%;\">Set the address below which the\nprogram command line is placed.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_ENV_START</b></p>\n\n<p style=\"margin-left:32%;\">Set the address above which the\nprogram environment is placed.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_ENV_END</b></p>\n\n<p style=\"margin-left:32%;\">Set the address below which the\nprogram environment is placed.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The address\npassed with <b>PR_SET_MM_ARG_START</b>,\n<b>PR_SET_MM_ARG_END</b>, <b>PR_SET_MM_ENV_START</b>, and\n<b>PR_SET_MM_ENV_END</b> should belong to a process stack\narea. Thus, the corresponding memory area must be readable,\nwritable, and (depending on the kernel configuration) have\nthe <b>MAP_GROWSDOWN</b> attribute set (see\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>).</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_AUXV</b></p>\n\n<p style=\"margin-left:32%;\">Set a new auxiliary vector. The\n<i>arg3</i> argument should provide the address of the\nvector. The <i>arg4</i> is the size of the vector.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_EXE_FILE</b></p>\n\n<p style=\"margin-left:32%;\">Supersede the\n<i>/proc/pid/exe</i> symbolic link with a new one pointing\nto a new executable file identified by the file descriptor\nprovided in <i>arg3</i> argument. The file descriptor should\nbe obtained with a regular <a href=\"https://man.page/2/open\">open(2)</a> call.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">To change the\nsymbolic link, one needs to unmap all existing executable\nmemory areas, including those created by the kernel itself\n(for example the kernel usually creates at least one\nexecutable memory area for the ELF <i>.text</i>\nsection).</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">In Linux 4.9\nand earlier, the <b>PR_SET_MM_EXE_FILE</b> operation can be\nperformed only once in a process&rsquo;s lifetime;\nattempting to perform the operation a second time results in\nthe error <b>EPERM</b>. This restriction was enforced for\nsecurity reasons that were subsequently deemed specious, and\nthe restriction was removed in Linux 4.10 because some\nuser-space applications needed to perform this operation\nmore than once.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\noptions are available since Linux 3.18. <b><br>\nPR_SET_MM_MAP</b></p>\n\n<p style=\"margin-left:32%;\">Provides one-shot access to all\nthe addresses by passing in a <i>struct prctl_mm_map</i> (as\ndefined in <i>&lt;linux/prctl.h&gt;</i>). The <i>arg4</i>\nargument should provide the size of the struct.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This feature is\navailable only if the kernel is built with the\n<b>CONFIG_CHECKPOINT_RESTORE</b> option enabled.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SET_MM_MAP_SIZE</b></p>\n\n<p style=\"margin-left:32%;\">Returns the size of the\n<i>struct prctl_mm_map</i> the kernel expects. This allows\nuser space to find a compatible struct. The <i>arg4</i>\nargument should be a pointer to an unsigned int.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This feature is\navailable only if the kernel is built with the\n<b>CONFIG_CHECKPOINT_RESTORE</b> option enabled.</p>\n\n\n<p style=\"margin-left:11%;\"><b>PR_MPX_ENABLE_MANAGEMENT</b>,\n<b>PR_MPX_DISABLE_MANAGEMENT</b> (since Linux 3.19, <br>\nremoved in Linux 5.4; only on x86)</p>\n\n<p style=\"margin-left:22%;\">Enable or disable kernel\nmanagement of Memory Protection eXtensions (MPX) bounds\ntables. The <i>arg2</i>, <i>arg3</i>, <i>arg4</i>, and\n<i>arg5</i> arguments must be zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">MPX is a\nhardware-assisted mechanism for performing bounds checking\non pointers. It consists of a set of registers storing\nbounds information and a set of special instruction prefixes\nthat tell the CPU on which instructions it should do bounds\nenforcement. There is a limited number of these registers\nand when there are more pointers than registers, their\ncontents must be &quot;spilled&quot; into a set of tables.\nThese tables are called &quot;bounds tables&quot; and the\nMPX <b>prctl</b>() operations control whether the kernel\nmanages their allocation and freeing.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When management\nis enabled, the kernel will take over allocation and freeing\nof the bounds tables. It does this by trapping the #BR\nexceptions that result at first use of missing bounds tables\nand instead of delivering the exception to user space, it\nallocates the table and populates the bounds directory with\nthe location of the new table. For freeing, the kernel\nchecks to see if bounds tables are present for memory which\nis not allocated, and frees them if so.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before enabling\nMPX management using <b>PR_MPX_ENABLE_MANAGEMENT</b>, the\napplication must first have allocated a user-space buffer\nfor the bounds directory and placed the location of that\ndirectory in the <i>bndcfgu</i> register.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">These calls\nfail if the CPU or kernel does not support MPX. Kernel\nsupport for MPX is enabled via the\n<b>CONFIG_X86_INTEL_MPX</b> configuration option. You can\ncheck whether the CPU supports MPX by looking for the\n<i>mpx</i> CPUID bit, like with the following command:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">cat\n/proc/cpuinfo | grep ' mpx '</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A thread may\nnot switch in or out of long (64-bit) mode while MPX is\nenabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">All threads in\na process are affected by these calls.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The child of a\n<a href=\"https://man.page/2/fork\">fork(2)</a> inherits the state of MPX management. During\n<a href=\"https://man.page/2/execve\">execve(2)</a>, MPX management is reset to a state as if\n<b>PR_MPX_DISABLE_MANAGEMENT</b> had been called.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For further\ninformation on Intel MPX, see the kernel source file\n<i>Documentation/x86/intel_mpx.txt</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Due to a lack\nof toolchain support, <b>PR_MPX_ENABLE_MANAGEMENT</b> and\n<b>PR_MPX_DISABLE_MANAGEMENT</b> are not supported in Linux\n5.4 and later.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_NAME</b> (since Linux\n2.6.9)</p>\n\n<p style=\"margin-left:22%;\">Set the name of the calling\nthread, using the value in the location pointed to by\n<i>(char&nbsp;*) arg2</i>. The name can be up to 16 bytes\nlong, including the terminating null byte. (If the length of\nthe string, including the terminating null byte, exceeds 16\nbytes, the string is silently truncated.) This is the same\nattribute that can be set via <a href=\"https://man.page/3/pthread_setname_np\">pthread_setname_np(3)</a>\nand retrieved using <a href=\"https://man.page/3/pthread_getname_np\">pthread_getname_np(3)</a>. The\nattribute is likewise accessible via\n<i>/proc/self/task/[tid]/comm</i> (see <a href=\"https://man.page/5/proc\">proc(5)</a>),\nwhere <i>[tid]</i> is the thread ID of the calling thread,\nas returned by <a href=\"https://man.page/2/gettid\">gettid(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_NAME</b> (since Linux\n2.6.11)</p>\n\n<p style=\"margin-left:22%;\">Return the name of the calling\nthread, in the buffer pointed to by <i>(char&nbsp;*)\narg2</i>. The buffer should allow space for up to 16 bytes;\nthe returned string will be null-terminated.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_NO_NEW_PRIVS</b>\n(since Linux 3.5)</p>\n\n<p style=\"margin-left:22%;\">Set the calling thread&rsquo;s\n<i>no_new_privs</i> attribute to the value in <i>arg2</i>.\nWith <i>no_new_privs</i> set to 1, <a href=\"https://man.page/2/execve\">execve(2)</a> promises\nnot to grant privileges to do anything that could not have\nbeen done without the <a href=\"https://man.page/2/execve\">execve(2)</a> call (for example,\nrendering the set-user-ID and set-group-ID mode bits, and\nfile capabilities non-functional). Once set, the\n<i>no_new_privs</i> attribute cannot be unset. The setting\nof this attribute is inherited by children created by\n<a href=\"https://man.page/2/fork\">fork(2)</a> and <a href=\"https://man.page/2/clone\">clone(2)</a>, and preserved across\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n4.10, the value of a thread&rsquo;s <i>no_new_privs</i>\nattribute can be viewed via the <i>NoNewPrivs</i> field in\nthe <i>/proc/[pid]/status</i> file.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For more\ninformation, see the kernel source file\n<i>Documentation/userspace-api/no_new_privs.rst</i> (or\n<i>Documentation/prctl/no_new_privs.txt</i> before Linux\n4.13). See also <a href=\"https://man.page/2/seccomp\">seccomp(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_NO_NEW_PRIVS</b>\n(since Linux 3.5)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe value of the <i>no_new_privs</i> attribute for the\ncalling thread. A value of 0 indicates the regular\n<a href=\"https://man.page/2/execve\">execve(2)</a> behavior. A value of 1 indicates\n<a href=\"https://man.page/2/execve\">execve(2)</a> will operate in the privilege-restricting\nmode described above.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_PAC_RESET_KEYS</b> (since\nLinux 5.0, only on arm64)</p>\n\n<p style=\"margin-left:22%;\">Securely reset the\nthread&rsquo;s pointer authentication keys to fresh random\nvalues generated by the kernel.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The set of keys\nto be reset is specified by <i>arg2</i>, which must be a\nlogical OR of zero or more of the following: <b><br>\nPR_PAC_APIAKEY</b></p>\n\n<p style=\"margin-left:32%;\">instruction authentication key\nA</p>\n\n<p style=\"margin-left:22%;\"><b>PR_PAC_APIBKEY</b></p>\n\n<p style=\"margin-left:32%;\">instruction authentication key\nB</p>\n\n<p style=\"margin-left:22%;\"><b>PR_PAC_APDAKEY</b></p>\n\n<p style=\"margin-left:32%;\">data authentication key A</p>\n\n<p style=\"margin-left:22%;\"><b>PR_PAC_APDBKEY</b></p>\n\n<p style=\"margin-left:32%;\">data authentication key B</p>\n\n<p style=\"margin-left:22%;\"><b>PR_PAC_APGAKEY</b></p>\n\n<p style=\"margin-left:32%;\">generic authentication\n&ldquo;A&rdquo; key.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">(Yes folks,\nthere really is no generic B key.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">As a special\ncase, if <i>arg2</i> is zero, then all the keys are reset.\nSince new keys could be added in future, this is the\nrecommended way to completely wipe the existing keys when\nestablishing a clean execution context. Note that there is\nno need to use <b>PR_PAC_RESET_KEYS</b> in preparation for\ncalling <a href=\"https://man.page/2/execve\">execve(2)</a>, since <a href=\"https://man.page/2/execve\">execve(2)</a> resets all\nthe pointer authentication keys.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The remaining\narguments <i>arg3</i>, <i>arg4</i>, and <i>arg5</i> must all\nbe zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\narguments are invalid, and in particular if <i>arg2</i>\ncontains set bits that are unrecognized or that correspond\nto a key not available on this platform, then the call fails\nwith error <b>EINVAL</b>.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Warning:</b>\nBecause the compiler or run-time environment may be using\nsome or all of the keys, a successful\n<b>PR_PAC_RESET_KEYS</b> may crash the calling process. The\nconditions for using it safely are complex and\nsystem-dependent. Don&rsquo;t use it unless you know what\nyou are doing.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For more\ninformation, see the kernel source file\n<i>Documentation/arm64/pointer-authentication.rst</i> (or\n<i>Documentation/arm64/pointer-authentication.txt</i> before\nLinux 5.3).</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_PDEATHSIG</b> (since\nLinux 2.1.57)</p>\n\n<p style=\"margin-left:22%;\">Set the parent-death signal of\nthe calling process to <i>arg2</i> (either a signal value in\nthe range 1..<b>NSIG</b>-1<b>,</b> or 0 to clear). This is\nthe signal that the calling process will get when its parent\ndies.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>Warning</i>:\nthe &quot;parent&quot; in this case is considered to be the\n<i>thread</i> that created this process. In other words, the\nsignal will be sent when that thread terminates (via, for\nexample, <a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>), rather than after all of\nthe threads in the parent process terminate.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\nparent-death signal is sent upon subsequent termination of\nthe parent thread and also upon termination of each\nsubreaper process (see the description of\n<b>PR_SET_CHILD_SUBREAPER</b> above) to which the caller is\nsubsequently reparented. If the parent thread and all\nancestor subreapers have already terminated by the time of\nthe <b>PR_SET_PDEATHSIG</b> operation, then no parent-death\nsignal is sent to the caller.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\nparent-death signal is process-directed (see\n<a href=\"https://man.page/7/signal\">signal(7)</a>) and, if the child installs a handler using\nthe <a href=\"https://man.page/2/sigaction\">sigaction(2)</a> <b>SA_SIGINFO</b> flag, the\n<i>si_pid</i> field of the <i>siginfo_t</i> argument of the\nhandler contains the PID of the terminating parent\nprocess.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\nparent-death signal setting is cleared for the child of a\n<a href=\"https://man.page/2/fork\">fork(2)</a>. It is also (since Linux 2.4.36 / 2.6.23)\ncleared when executing a set-user-ID or set-group-ID binary,\nor a binary that has associated capabilities (see\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>); otherwise, this value is preserved\nacross <a href=\"https://man.page/2/execve\">execve(2)</a>. The parent-death signal setting is\nalso cleared upon changes to any of the following thread\ncredentials: effective user ID, effective group ID,\nfilesystem user ID, or filesystem group ID.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_PDEATHSIG</b> (since\nLinux 2.3.15)</p>\n\n<p style=\"margin-left:22%;\">Return the current value of the\nparent process death signal, in the location pointed to by\n<i>(int&nbsp;*) arg2</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_PTRACER</b> (since\nLinux 3.4)</p>\n\n<p style=\"margin-left:22%;\">This is meaningful only when\nthe Yama LSM is enabled and in mode 1 (&quot;restricted\nptrace&quot;, visible via\n<i>/proc/sys/kernel/yama/ptrace_scope</i>). When a\n&quot;ptracer process ID&quot; is passed in <i>arg2</i>, the\ncaller is declaring that the ptracer process can\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a> the calling process as if it were a direct\nprocess ancestor. Each <b>PR_SET_PTRACER</b> operation\nreplaces the previous &quot;ptracer process ID&quot;.\nEmploying <b>PR_SET_PTRACER</b> with <i>arg2</i> set to 0\nclears the caller&rsquo;s &quot;ptracer process ID&quot;. If\n<i>arg2</i> is <b>PR_SET_PTRACER_ANY</b>, the ptrace\nrestrictions introduced by Yama are effectively disabled for\nthe calling process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For further\ninformation, see the kernel source file\n<i>Documentation/admin-guide/LSM/Yama.rst</i> (or\n<i>Documentation/security/Yama.txt</i> before Linux\n4.13).</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_SECCOMP</b> (since\nLinux 2.6.23)</p>\n\n<p style=\"margin-left:22%;\">Set the secure computing\n(seccomp) mode for the calling thread, to limit the\navailable system calls. The more recent <a href=\"https://man.page/2/seccomp\">seccomp(2)</a>\nsystem call provides a superset of the functionality of\n<b>PR_SET_SECCOMP</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The seccomp\nmode is selected via <i>arg2</i>. (The seccomp constants are\ndefined in <i>&lt;linux/seccomp.h&gt;</i>.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">With\n<i>arg2</i> set to <b>SECCOMP_MODE_STRICT</b>, the only\nsystem calls that the thread is permitted to make are\n<a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>, <a href=\"https://man.page/2/_exit\">_exit(2)</a> (but not\n<a href=\"https://man.page/2/exit_group\">exit_group(2)</a>), and <a href=\"https://man.page/2/sigreturn\">sigreturn(2)</a>. Other system\ncalls result in the delivery of a <b>SIGKILL</b> signal.\nStrict secure computing mode is useful for number-crunching\napplications that may need to execute untrusted byte code,\nperhaps obtained by reading from a pipe or socket. This\noperation is available only if the kernel is configured with\n<b>CONFIG_SECCOMP</b> enabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">With\n<i>arg2</i> set to <b>SECCOMP_MODE_FILTER</b> (since Linux\n3.5), the system calls allowed are defined by a pointer to a\nBerkeley Packet Filter passed in <i>arg3</i>. This argument\nis a pointer to <i>struct sock_fprog</i>; it can be designed\nto filter arbitrary system calls and system call arguments.\nThis mode is available only if the kernel is configured with\n<b>CONFIG_SECCOMP_FILTER</b> enabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<b>SECCOMP_MODE_FILTER</b> filters permit <a href=\"https://man.page/2/fork\">fork(2)</a>,\nthen the seccomp mode is inherited by children created by\n<a href=\"https://man.page/2/fork\">fork(2)</a>; if <a href=\"https://man.page/2/execve\">execve(2)</a> is permitted, then the\nseccomp mode is preserved across <a href=\"https://man.page/2/execve\">execve(2)</a>. If the\nfilters permit <b>prctl</b>() calls, then additional filters\ncan be added; they are run in order until the first\nnon-allow result is seen.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For further\ninformation, see the kernel source file\n<i>Documentation/userspace-api/seccomp_filter.rst</i> (or\n<i>Documentation/prctl/seccomp_filter.txt</i> before Linux\n4.13).</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_SECCOMP</b> (since\nLinux 2.6.23)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe secure computing mode of the calling thread. If the\ncaller is not in secure computing mode, this operation\nreturns 0; if the caller is in strict secure computing mode,\nthen the <b>prctl</b>() call will cause a <b>SIGKILL</b>\nsignal to be sent to the process. If the caller is in filter\nmode, and this system call is allowed by the seccomp\nfilters, it returns 2; otherwise, the process is killed with\na <b>SIGKILL</b> signal. This operation is available only if\nthe kernel is configured with <b>CONFIG_SECCOMP</b>\nenabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n3.8, the <i>Seccomp</i> field of the\n<i>/proc/[pid]/status</i> file provides a method of\nobtaining the same information, without the risk that the\nprocess is killed; see <a href=\"https://man.page/5/proc\">proc(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_SECUREBITS</b> (since\nLinux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">Set the &quot;securebits&quot;\nflags of the calling thread to the value supplied in\n<i>arg2</i>. See <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_SECUREBITS</b> (since\nLinux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe &quot;securebits&quot; flags of the calling thread. See\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_SPECULATION_CTRL</b>\n(since Linux 4.17)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe state of the speculation misfeature specified in\n<i>arg2</i>. Currently, the only permitted value for this\nargument is <b>PR_SPEC_STORE_BYPASS</b> (otherwise the call\nfails with the error <b>ENODEV</b>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The return\nvalue uses bits 0-3 with the following meaning: <b><br>\nPR_SPEC_PRCTL</b></p>\n\n<p style=\"margin-left:32%;\">Mitigation can be controlled\nper thread by <b>PR_SET_SPECULATION_CTRL</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SPEC_ENABLE</b></p>\n\n<p style=\"margin-left:32%;\">The speculation feature is\nenabled, mitigation is disabled.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SPEC_DISABLE</b></p>\n\n<p style=\"margin-left:32%;\">The speculation feature is\ndisabled, mitigation is enabled.</p>\n\n\n<p style=\"margin-left:22%;\"><b>PR_SPEC_FORCE_DISABLE</b></p>\n\n<p style=\"margin-left:32%;\">Same as <b>PR_SPEC_DISABLE</b>\nbut cannot be undone.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SPEC_DISABLE_NOEXEC</b>\n(since Linux 5.1)</p>\n\n<p style=\"margin-left:32%;\">Same as <b>PR_SPEC_DISABLE</b>,\nbut the state will be cleared on <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If all bits are\n0, then the CPU is not affected by the speculation\nmisfeature.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<b>PR_SPEC_PRCTL</b> is set, then per-thread control of the\nmitigation is available. If not set, <b>prctl</b>() for the\nspeculation misfeature will fail.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>arg3</i>, <i>arg4</i>, and <i>arg5</i> arguments must be\nspecified as 0; otherwise the call fails with the error\n<b>EINVAL</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_SPECULATION_CTRL</b>\n(since Linux 4.17)</p>\n\n<p style=\"margin-left:22%;\">Sets the state of the\nspeculation misfeature specified in <i>arg2</i>. The\nspeculation-misfeature settings are per-thread\nattributes.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Currently,\n<i>arg2</i> must be one of: <b><br>\nPR_SPEC_STORE_BYPASS</b></p>\n\n<p style=\"margin-left:32%;\">Set the state of the\nspeculative store bypass misfeature.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SPEC_INDIRECT_BRANCH</b>\n(since Linux 4.20)</p>\n\n<p style=\"margin-left:32%;\">Set the state of the indirect\nbranch speculation misfeature.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If <i>arg2</i>\ndoes not have one of the above values, then the call fails\nwith the error <b>ENODEV</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg3</i>\nargument is used to hand in the control value, which is one\nof the following: <b><br>\nPR_SPEC_ENABLE</b></p>\n\n<p style=\"margin-left:32%;\">The speculation feature is\nenabled, mitigation is disabled.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SPEC_DISABLE</b></p>\n\n<p style=\"margin-left:32%;\">The speculation feature is\ndisabled, mitigation is enabled.</p>\n\n\n<p style=\"margin-left:22%;\"><b>PR_SPEC_FORCE_DISABLE</b></p>\n\n<p style=\"margin-left:32%;\">Same as <b>PR_SPEC_DISABLE</b>,\nbut cannot be undone. A subsequent <b>prctl</b>(<i>arg2</i>,\n<b>PR_SPEC_ENABLE</b>) with the same value for <i>arg2</i>\nwill fail with the error <b>EPERM</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SPEC_DISABLE_NOEXEC</b>\n(since Linux 5.1)</p>\n\n<p style=\"margin-left:32%;\">Same as <b>PR_SPEC_DISABLE</b>,\nbut the state will be cleared on <a href=\"https://man.page/2/execve\">execve(2)</a>. Currently\nonly supported for <i>arg2</i> equal to\n<b>PR_SPEC_STORE_BYPASS.</b></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Any unsupported\nvalue in <i>arg3</i> will result in the call failing with\nthe error <b>ERANGE</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>arg4</i>\nand <i>arg5</i> arguments must be specified as 0; otherwise\nthe call fails with the error <b>EINVAL</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The speculation\nfeature can also be controlled by the\n<b>spec_store_bypass_disable</b> boot parameter. This\nparameter may enforce a read-only policy which will result\nin the <b>prctl</b>() call failing with the error\n<b>ENXIO</b>. For further details, see the kernel source\nfile\n<i>Documentation/admin-guide/kernel-parameters.txt</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SVE_SET_VL</b> (since\nLinux 4.15, only on arm64)</p>\n\n<p style=\"margin-left:22%;\">Configure the thread&rsquo;s\nSVE vector length, as specified by <i>(int) arg2</i>.\nArguments <i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are\nignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The bits of\n<i>arg2</i> corresponding to <b>PR_SVE_VL_LEN_MASK</b> must\nbe set to the desired vector length in bytes. This is\ninterpreted as an upper bound: the kernel will select the\ngreatest available vector length that does not exceed the\nvalue specified. In particular, specifying <b>SVE_VL_MAX</b>\n(defined in <i>&lt;asm/sigcontext.h&gt;)</i> for the\n<b>PR_SVE_VL_LEN_MASK</b> bits requests the maximum\nsupported vector length.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In addition,\nthe other bits of <i>arg2</i> must be set to one of the\nfollowing combinations of flags:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>0</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>Perform the change immediately. At the next\n<a href=\"https://man.page/2/execve\">execve(2)</a> in the thread, the vector length will be\nreset to the value configured in\n<i>/proc/sys/abi/sve_default_vector_length</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>PR_SVE_VL_INHERIT</b></p>\n\n<p style=\"margin-left:32%;\">Perform the change immediately.\nSubsequent <a href=\"https://man.page/2/execve\">execve(2)</a> calls will preserve the new\nvector length.</p>\n\n\n<p style=\"margin-left:22%;\"><b>PR_SVE_SET_VL_ONEXEC</b></p>\n\n<p style=\"margin-left:32%;\">Defer the change, so that it is\nperformed at the next <a href=\"https://man.page/2/execve\">execve(2)</a> in the thread.\nFurther <a href=\"https://man.page/2/execve\">execve(2)</a> calls will reset the vector length\nto the value configured in\n<i>/proc/sys/abi/sve_default_vector_length</i>.</p>\n\n<p style=\"margin-left:22%;\"><b>PR_SVE_SET_VL_ONEXEC |\nPR_SVE_VL_INHERIT</b></p>\n\n<p style=\"margin-left:32%;\">Defer the change, so that it is\nperformed at the next <a href=\"https://man.page/2/execve\">execve(2)</a> in the thread.\nFurther <a href=\"https://man.page/2/execve\">execve(2)</a> calls will preserve the new vector\nlength.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In all cases,\nany previously pending deferred change is canceled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The call fails\nwith error <b>EINVAL</b> if SVE is not supported on the\nplatform, if <i>arg2</i> is unrecognized or invalid, or the\nvalue in the bits of <i>arg2</i> corresponding to\n<b>PR_SVE_VL_LEN_MASK</b> is outside the range\n<b>SVE_VL_MIN</b>..<b>SVE_VL_MAX</b> or is not a multiple of\n16.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">On success, a\nnonnegative value is returned that describes the\n<i>selected</i> configuration. If\n<b>PR_SVE_SET_VL_ONEXEC</b> was included in <i>arg2</i>,\nthen the configuration described by the return value will\ntake effect at the next <b>execve</b>(). Otherwise, the\nconfiguration is already in effect when the\n<b>PR_SVE_SET_VL</b> call returns. In either case, the value\nis encoded in the same way as the return value of\n<b>PR_SVE_GET_VL</b>. Note that there is no explicit flag in\nthe return value corresponding to\n<b>PR_SVE_SET_VL_ONEXEC</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\nconfiguration (including any pending deferred change) is\ninherited across <a href=\"https://man.page/2/fork\">fork(2)</a> and <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For more\ninformation, see the kernel source file\n<i>Documentation/arm64/sve.rst</i> (or\n<i>Documentation/arm64/sve.txt</i> before Linux 5.3).</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Warning:</b>\nBecause the compiler or run-time environment may be using\nSVE, using this call without the <b>PR_SVE_SET_VL_ONEXEC</b>\nflag may crash the calling process. The conditions for using\nit safely are complex and system-dependent. Don&rsquo;t use\nit unless you really know what you are doing.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SVE_GET_VL</b> (since\nLinux 4.15, only on arm64)</p>\n\n<p style=\"margin-left:22%;\">Get the thread&rsquo;s current\nSVE vector length configuration.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Arguments\n<i>arg2</i>, <i>arg3</i>, <i>arg4</i>, and <i>arg5</i> are\nignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Provided that\nthe kernel and platform support SVE, this operation always\nsucceeds, returning a nonnegative value that describes the\n<i>current</i> configuration. The bits corresponding to\n<b>PR_SVE_VL_LEN_MASK</b> contain the currently configured\nvector length in bytes. The bit corresponding to\n<b>PR_SVE_VL_INHERIT</b> indicates whether the vector length\nwill be inherited across <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that there\nis no way to determine whether there is a pending vector\nlength change that has not yet taken effect.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For more\ninformation, see the kernel source file\n<i>Documentation/arm64/sve.rst</i> (or\n<i>Documentation/arm64/sve.txt</i> before Linux 5.3).</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_TAGGED_ADDR_CTRL</b>\n(since Linux 5.4, only on arm64)</p>\n\n<p style=\"margin-left:22%;\">Controls support for passing\ntagged user-space addresses to the kernel (i.e., addresses\nwhere bits 56&mdash;63 are not all zero).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The level of\nsupport is selected by <i>arg2</i>, which can be one of the\nfollowing:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p><b>0</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>Addresses that are passed for the purpose of being\ndereferenced by the kernel must be untagged.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:22%;\"><b>PR_TAGGED_ADDR_ENABLE</b></p>\n\n<p style=\"margin-left:32%;\">Addresses that are passed for\nthe purpose of being dereferenced by the kernel may be\ntagged, with the exceptions summarized below.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The remaining\narguments <i>arg3</i>, <i>arg4</i>, and <i>arg5</i> must all\nbe zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">On success, the\nmode specified in <i>arg2</i> is set for the calling thread\nand the return value is 0. If the arguments are invalid, the\nmode specified in <i>arg2</i> is unrecognized, or if this\nfeature is unsupported by the kernel or disabled via\n<i>/proc/sys/abi/tagged_addr_disabled</i>, the call fails\nwith the error <b>EINVAL</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In particular,\nif <b>prctl</b>(<b>PR_SET_TAGGED_ADDR_CTRL</b>, 0, 0, 0, 0)\nfails with <b>EINVAL</b>, then all addresses passed to the\nkernel must be untagged.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Irrespective of\nwhich mode is set, addresses passed to certain interfaces\nmust always be untagged:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p><a href=\"https://man.page/2/brk\">brk(2)</a>, <a href=\"https://man.page/2/mmap\">mmap(2)</a>, <a href=\"https://man.page/2/shmat\">shmat(2)</a>,\n<a href=\"https://man.page/2/shmdt\">shmdt(2)</a>, and the <i>new_address</i> argument of\n<a href=\"https://man.page/2/mremap\">mremap(2)</a>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:25%; margin-top: 1em\">(Prior to Linux\n5.6 these accepted tagged addresses, but the behaviour may\nnot be what you expect. Don&rsquo;t rely on it.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\">&rsquo;polymorphic&rsquo;\ninterfaces that accept pointers to arbitrary types cast to a\n<i>void *</i> or other generic type, specifically\n<b>prctl</b>(), <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>, and in general\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> (only certain specific\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> options allow tagged addresses).</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This list of\nexclusions may shrink when moving from one kernel version to\na later kernel version. While the kernel may make some\nguarantees for backwards compatibility reasons, for the\npurposes of new software the effect of passing tagged\naddresses to these interfaces is unspecified.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The mode set by\nthis call is inherited across <a href=\"https://man.page/2/fork\">fork(2)</a> and\n<a href=\"https://man.page/2/clone\">clone(2)</a>. The mode is reset by <a href=\"https://man.page/2/execve\">execve(2)</a> to 0\n(i.e., tagged addresses not permitted in the user/kernel\nABI).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For more\ninformation, see the kernel source file\n<i>Documentation/arm64/tagged-address-abi.rst</i>.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Warning:</b>\nThis call is primarily intended for use by the run-time\nenvironment. A successful <b>PR_SET_TAGGED_ADDR_CTRL</b>\ncall elsewhere may crash the calling process. The conditions\nfor using it safely are complex and system-dependent.\nDon&rsquo;t use it unless you know what you are doing.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_TAGGED_ADDR_CTRL</b>\n(since Linux 5.4, only on arm64)</p>\n\n<p style=\"margin-left:22%;\">Returns the current tagged\naddress mode for the calling thread.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Arguments\n<i>arg2</i>, <i>arg3</i>, <i>arg4</i>, and <i>arg5</i> must\nall be zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\narguments are invalid or this feature is disabled or\nunsupported by the kernel, the call fails with\n<b>EINVAL</b>. In particular, if\n<b>prctl</b>(<b>PR_GET_TAGGED_ADDR_CTRL</b>, 0, 0, 0, 0)\nfails with <b>EINVAL</b>, then this feature is definitely\neither unsupported, or disabled via\n<i>/proc/sys/abi/tagged_addr_disabled</i>. In this case, all\naddresses passed to the kernel must be untagged.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Otherwise, the\ncall returns a nonnegative value describing the current\ntagged address mode, encoded in the same way as the\n<i>arg2</i> argument of <b>PR_SET_TAGGED_ADDR_CTRL</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For more\ninformation, see the kernel source file\n<i>Documentation/arm64/tagged-address-abi.rst</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>PR_TASK_PERF_EVENTS_DISABLE</b>\n(since Linux 2.6.31)</p>\n\n<p style=\"margin-left:22%;\">Disable all performance\ncounters attached to the calling process, regardless of\nwhether the counters were created by this process or another\nprocess. Performance counters created by the calling process\nfor other processes are unaffected. For more information on\nperformance counters, see the Linux kernel source file\n<i>tools/perf/design.txt</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Originally\ncalled <b>PR_TASK_PERF_COUNTERS_DISABLE</b>; renamed\n(retaining the same numerical value) in Linux 2.6.32.</p>\n\n\n<p style=\"margin-left:11%;\"><b>PR_TASK_PERF_EVENTS_ENABLE</b>\n(since Linux 2.6.31)</p>\n\n<p style=\"margin-left:22%;\">The converse of\n<b>PR_TASK_PERF_EVENTS_DISABLE</b>; enable performance\ncounters attached to the calling process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Originally\ncalled <b>PR_TASK_PERF_COUNTERS_ENABLE</b>; renamed in Linux\n2.6.32.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_THP_DISABLE</b>\n(since Linux 3.15)</p>\n\n<p style=\"margin-left:22%;\">Set the state of the &quot;THP\ndisable&quot; flag for the calling thread. If <i>arg2</i>\nhas a nonzero value, the flag is set, otherwise it is\ncleared. Setting this flag provides a method for disabling\ntransparent huge pages for jobs where the code cannot be\nmodified, and using a malloc hook with <a href=\"https://man.page/2/madvise\">madvise(2)</a> is\nnot an option (i.e., statically allocated data). The setting\nof the &quot;THP disable&quot; flag is inherited by a child\ncreated via <a href=\"https://man.page/2/fork\">fork(2)</a> and is preserved across\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_THP_DISABLE</b>\n(since Linux 3.15)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe current setting of the &quot;THP disable&quot; flag for\nthe calling thread: either 1, if the flag is set, or 0, if\nit is not.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_TID_ADDRESS</b>\n(since Linux 3.5)</p>\n\n<p style=\"margin-left:22%;\">Return the\n<i>clear_child_tid</i> address set by\n<a href=\"https://man.page/2/set_tid_address\">set_tid_address(2)</a> and the <a href=\"https://man.page/2/clone\">clone(2)</a>\n<b>CLONE_CHILD_CLEARTID</b> flag, in the location pointed to\nby <i>(int&nbsp;**)&nbsp;arg2</i>. This feature is available\nonly if the kernel is built with the\n<b>CONFIG_CHECKPOINT_RESTORE</b> option enabled. Note that\nsince the <b>prctl</b>() system call does not have a compat\nimplementation for the AMD64 x32 and MIPS n32 ABIs, and the\nkernel writes out a pointer using the kernel&rsquo;s pointer\nsize, this operation expects a user-space buffer of 8 (not\n4) bytes on these ABIs.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_TIMERSLACK</b> (since\nLinux 2.6.28)</p>\n\n<p style=\"margin-left:22%;\">Each thread has two associated\ntimer slack values: a &quot;default&quot; value, and a\n&quot;current&quot; value. This operation sets the\n&quot;current&quot; timer slack value for the calling\nthread. <i>arg2</i> is an unsigned long value, then maximum\n&quot;current&quot; value is ULONG_MAX and the minimum\n&quot;current&quot; value is 1. If the nanosecond value\nsupplied in <i>arg2</i> is greater than zero, then the\n&quot;current&quot; value is set to this value. If\n<i>arg2</i> is equal to zero, the &quot;current&quot; timer\nslack is reset to the thread&rsquo;s &quot;default&quot;\ntimer slack value.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n&quot;current&quot; timer slack is used by the kernel to\ngroup timer expirations for the calling thread that are\nclose to one another; as a consequence, timer expirations\nfor the thread may be up to the specified number of\nnanoseconds late (but will never expire early). Grouping\ntimer expirations can help reduce system power consumption\nby minimizing CPU wake-ups.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The timer\nexpirations affected by timer slack are those set by\n<a href=\"https://man.page/2/select\">select(2)</a>, <a href=\"https://man.page/2/pselect\">pselect(2)</a>, <a href=\"https://man.page/2/poll\">poll(2)</a>,\n<a href=\"https://man.page/2/ppoll\">ppoll(2)</a>, <a href=\"https://man.page/2/epoll_wait\">epoll_wait(2)</a>,\n<a href=\"https://man.page/2/epoll_pwait\">epoll_pwait(2)</a>, <a href=\"https://man.page/2/clock_nanosleep\">clock_nanosleep(2)</a>,\n<a href=\"https://man.page/2/nanosleep\">nanosleep(2)</a>, and <a href=\"https://man.page/2/futex\">futex(2)</a> (and thus the\nlibrary functions implemented via futexes, including\n<a href=\"https://man.page/3/pthread_cond_timedwait\">pthread_cond_timedwait(3)</a>,\n<a href=\"https://man.page/3/pthread_mutex_timedlock\">pthread_mutex_timedlock(3)</a>,\n<a href=\"https://man.page/3/pthread_rwlock_timedrdlock\">pthread_rwlock_timedrdlock(3)</a>,\n<a href=\"https://man.page/3/pthread_rwlock_timedwrlock\">pthread_rwlock_timedwrlock(3)</a>, and\n<a href=\"https://man.page/3/sem_timedwait\">sem_timedwait(3)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Timer slack is\nnot applied to threads that are scheduled under a real-time\nscheduling policy (see <a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When a new\nthread is created, the two timer slack values are made the\nsame as the &quot;current&quot; value of the creating\nthread. Thereafter, a thread can adjust its\n&quot;current&quot; timer slack value via\n<b>PR_SET_TIMERSLACK</b>. The &quot;default&quot; value\ncan&rsquo;t be changed. The timer slack values of\n<i>init</i> (PID 1), the ancestor of all processes, are\n50,000 nanoseconds (50 microseconds). The timer slack value\nis inherited by a child created via <a href=\"https://man.page/2/fork\">fork(2)</a>, and is\npreserved across <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n4.6, the &quot;current&quot; timer slack value of any\nprocess can be examined and changed via the file\n<i>/proc/[pid]/timerslack_ns</i>. See <a href=\"https://man.page/5/proc\">proc(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_TIMERSLACK</b> (since\nLinux 2.6.28)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nthe &quot;current&quot; timer slack value of the calling\nthread.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_TIMING</b> (since\nLinux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">Set whether to use (normal,\ntraditional) statistical process timing or accurate\ntimestamp-based process timing, by passing\n<b>PR_TIMING_STATISTICAL</b> or <b>PR_TIMING_TIMESTAMP</b>\nto <i>arg2</i>. <b>PR_TIMING_TIMESTAMP</b> is not currently\nimplemented (attempting to set this mode will yield the\nerror <b>EINVAL</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_TIMING</b> (since\nLinux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">Return (as the function result)\nwhich process timing method is currently in use.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_TSC</b> (since Linux\n2.6.26, x86 only)</p>\n\n<p style=\"margin-left:22%;\">Set the state of the flag\ndetermining whether the timestamp counter can be read by the\nprocess. Pass <b>PR_TSC_ENABLE</b> to <i>arg2</i> to allow\nit to be read, or <b>PR_TSC_SIGSEGV</b> to generate a\n<b>SIGSEGV</b> when the process tries to read the timestamp\ncounter.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_TSC</b> (since Linux\n2.6.26, x86 only)</p>\n\n<p style=\"margin-left:22%;\">Return the state of the flag\ndetermining whether the timestamp counter can be read, in\nthe location pointed to by <i>(int&nbsp;*) arg2</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>PR_SET_UNALIGN</b></p>\n\n<p style=\"margin-left:22%;\">(Only on: ia64, since Linux\n2.3.48; parisc, since Linux 2.6.15; PowerPC, since Linux\n2.6.18; Alpha, since Linux 2.6.22; sh, since Linux 2.6.34;\ntile, since Linux 3.12) Set unaligned access control bits to\n<i>arg2</i>. Pass <b>PR_UNALIGN_NOPRINT</b> to silently fix\nup unaligned user accesses, or <b>PR_UNALIGN_SIGBUS</b> to\ngenerate <b>SIGBUS</b> on unaligned user access. Alpha also\nsupports an additional flag with the value of 4 and no\ncorresponding named constant, which instructs kernel to not\nfix up unaligned accesses (it is analogous to providing the\n<b>UAC_NOFIX</b> flag in <b>SSI_NVPAIRS</b> operation of the\n<b>setsysinfo</b>() system call on Tru64).</p>\n\n<p style=\"margin-left:11%;\"><b>PR_GET_UNALIGN</b></p>\n\n<p style=\"margin-left:22%;\">(See <b>PR_SET_UNALIGN</b> for\ninformation on versions and architectures.) Return unaligned\naccess control bits, in the location pointed to by\n<i>(unsigned int&nbsp;*) arg2</i>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>PR_CAP_AMBIENT</b>+<b>PR_CAP_AMBIENT_IS_SET</b>,\n<b>PR_CAPBSET_READ</b>, <b>PR_GET_DUMPABLE</b>,\n<b>PR_GET_FP_MODE</b>, <b>PR_GET_IO_FLUSHER</b>,\n<b>PR_GET_KEEPCAPS</b>, <b>PR_MCE_KILL_GET</b>,\n<b>PR_GET_NO_NEW_PRIVS</b>, <b>PR_GET_SECUREBITS</b>,\n<b>PR_GET_SPECULATION_CTRL</b>, <b>PR_SVE_GET_VL</b>,\n<b>PR_SVE_SET_VL</b>, <b>PR_GET_TAGGED_ADDR_CTRL</b>,\n<b>PR_GET_THP_DISABLE</b>, <b>PR_GET_TIMING</b>,\n<b>PR_GET_TIMERSLACK</b>, and (if it returns)\n<b>PR_GET_SECCOMP</b> return the nonnegative values\ndescribed above. All other <i>option</i> values return 0 on\nsuccess. On error, -1 is returned, and <i>errno</i> is set\nappropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>option</i> is\n<b>PR_SET_SECCOMP</b> and <i>arg2</i> is\n<b>SECCOMP_MODE_FILTER</b>, but the process does not have\nthe <b>CAP_SYS_ADMIN</b> capability or has not set the\n<i>no_new_privs</i> attribute (see the discussion of\n<b>PR_SET_NO_NEW_PRIVS</b> above).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_MM</b>, and <i>arg3</i> is\n<b>PR_SET_MM_EXE_FILE</b>, the file is not executable.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_MM</b>, <i>arg3</i> is\n<b>PR_SET_MM_EXE_FILE</b>, and the file descriptor passed in\n<i>arg4</i> is not valid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_MM</b>, <i>arg3</i> is\n<b>PR_SET_MM_EXE_FILE</b>, and this the second attempt to\nchange the <i>/proc/pid/exe</i> symbolic link, which is\nprohibited.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>arg2</i> is an invalid address.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_SECCOMP</b>, <i>arg2</i> is\n<b>SECCOMP_MODE_FILTER</b>, the system was built with\n<b>CONFIG_SECCOMP_FILTER</b>, and <i>arg3</i> is an invalid\naddress.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The value of <i>option</i> is not recognized, or not\nsupported on this system.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_MCE_KILL</b> or\n<b>PR_MCE_KILL_GET</b> or <b>PR_SET_MM</b>, and unused\n<b>prctl</b>() arguments were not specified as zero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>arg2</i> is not valid value for this\n<i>option</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_SECCOMP</b> or\n<b>PR_GET_SECCOMP</b>, and the kernel was not configured\nwith <b>CONFIG_SECCOMP</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_SECCOMP</b>, <i>arg2</i> is\n<b>SECCOMP_MODE_FILTER</b>, and the kernel was not\nconfigured with <b>CONFIG_SECCOMP_FILTER</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_MM</b>, and one of the\nfollowing is true</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">*</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\"></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\"><i>arg4</i> or <i>arg5</i> is\nnonzero;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><i>arg3</i> is greater than <b>TASK_SIZE</b> (the limit\non the size of the user address space for this\narchitecture);</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><i>arg2</i> is <b>PR_SET_MM_START_CODE</b>,\n<b>PR_SET_MM_END_CODE</b>, <b>PR_SET_MM_START_DATA</b>,\n<b>PR_SET_MM_END_DATA</b>, or <b>PR_SET_MM_START_STACK</b>,\nand the permissions of the corresponding memory area are not\nas required;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><i>arg2</i> is <b>PR_SET_MM_START_BRK</b> or\n<b>PR_SET_MM_BRK</b>, and <i>arg3</i> is less than or equal\nto the end of the data segment or specifies a value that\nwould cause the <b>RLIMIT_DATA</b> resource limit to be\nexceeded.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>option</i>\nis <b>PR_SET_PTRACER</b> and <i>arg2</i> is not 0,\n<b>PR_SET_PTRACER_ANY</b>, or the PID of an existing\nprocess.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>option</i> is\n<b>PR_SET_PDEATHSIG</b> and <i>arg2</i> is not a valid\nsignal number.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_DUMPABLE</b> and <i>arg2</i>\nis neither <b>SUID_DUMP_DISABLE</b> nor\n<b>SUID_DUMP_USER</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_TIMING</b> and <i>arg2</i> is\nnot <b>PR_TIMING_STATISTICAL</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_NO_NEW_PRIVS</b> and\n<i>arg2</i> is not equal to 1 or <i>arg3</i>, <i>arg4</i>,\nor <i>arg5</i> is nonzero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_GET_NO_NEW_PRIVS</b> and\n<i>arg2</i>, <i>arg3</i>, <i>arg4</i>, or <i>arg5</i> is\nnonzero.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_THP_DISABLE</b> and\n<i>arg3</i>, <i>arg4</i>, or <i>arg5</i> is nonzero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_GET_THP_DISABLE</b> and\n<i>arg2</i>, <i>arg3</i>, <i>arg4</i>, or <i>arg5</i> is\nnonzero.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_CAP_AMBIENT</b> and an unused\nargument (<i>arg4</i>, <i>arg5</i>, or, in the case of\n<b>PR_CAP_AMBIENT_CLEAR_ALL</b>, <i>arg3</i>) is nonzero; or\n<i>arg2</i> has an invalid value; or <i>arg2</i> is\n<b>PR_CAP_AMBIENT_LOWER</b>, <b>PR_CAP_AMBIENT_RAISE</b>, or\n<b>PR_CAP_AMBIENT_IS_SET</b> and <i>arg3</i> does not\nspecify a valid capability.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> was <b>PR_GET_SPECULATION_CTRL</b> or\n<b>PR_SET_SPECULATION_CTRL</b> and unused arguments to\n<b>prctl</b>() are not 0. <b>EINVAL</b> <i>option</i> is\n<b>PR_PAC_RESET_KEYS</b> and the arguments are invalid or\nunsupported. See the description of <b>PR_PAC_RESET_KEYS</b>\nabove for details.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SVE_SET_VL</b> and the arguments\nare invalid or unsupported, or SVE is not available on this\nplatform. See the description of <b>PR_SVE_SET_VL</b> above\nfor details.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SVE_GET_VL</b> and SVE is not\navailable on this platform.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_TAGGED_ADDR_CTRL</b> and the\narguments are invalid or unsupported. See the description of\n<b>PR_SET_TAGGED_ADDR_CTRL</b> above for details.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_GET_TAGGED_ADDR_CTRL</b> and the\narguments are invalid or unsupported. See the description of\n<b>PR_GET_TAGGED_ADDR_CTRL</b> above for details.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENODEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> was <b>PR_SET_SPECULATION_CTRL</b> the\nkernel or CPU does not support the requested speculation\nmisfeature.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENXIO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> was <b>PR_MPX_ENABLE_MANAGEMENT</b> or\n<b>PR_MPX_DISABLE_MANAGEMENT</b> and the kernel or the CPU\ndoes not support MPX management. Check that the kernel and\nprocessor have MPX support.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENXIO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> was <b>PR_SET_SPECULATION_CTRL</b> implies\nthat the control of the selected speculation misfeature is\nnot possible. See <b>PR_GET_SPECULATION_CTRL</b> for the bit\nfields to determine which option is available.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\"><i>option</i> is\n<b>PR_SET_FP_MODE</b> and <i>arg2</i> has an invalid or\nunsupported value.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_SECUREBITS</b>, and the\ncaller does not have the <b>CAP_SETPCAP</b> capability, or\ntried to unset a &quot;locked&quot; flag, or tried to set a\nflag whose corresponding locked flag was set (see\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_SPECULATION_CTRL</b> wherein\nthe speculation was disabled with\n<b>PR_SPEC_FORCE_DISABLE</b> and caller tried to enable it\nagain.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_KEEPCAPS</b>, and the\ncaller&rsquo;s <b>SECBIT_KEEP_CAPS_LOCKED</b> flag is set\n(see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_CAPBSET_DROP</b>, and the caller\ndoes not have the <b>CAP_SETPCAP</b> capability.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_SET_MM</b>, and the caller does\nnot have the <b>CAP_SYS_RESOURCE</b> capability.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> is <b>PR_CAP_AMBIENT</b> and <i>arg2</i>\nis <b>PR_CAP_AMBIENT_RAISE</b>, but either the capability\nspecified in <i>arg3</i> is not present in the\nprocess&rsquo;s permitted and inheritable capability sets,\nor the <b>PR_CAP_AMBIENT_LOWER</b> securebit has been\nset.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ERANGE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>option</i> was <b>PR_SET_SPECULATION_CTRL</b> and\n<i>arg3</i> is not <b>PR_SPEC_ENABLE</b>,\n<b>PR_SPEC_DISABLE</b>, <b>PR_SPEC_FORCE_DISABLE</b>, nor\n<b>PR_SPEC_DISABLE_NOEXEC</b>.</p> </td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>prctl</b>() system call was introduced in Linux\n2.1.57.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This call is\nLinux-specific. IRIX has a <b>prctl</b>() system call (also\nintroduced in Linux 2.1.44 as irix_prctl on the MIPS\narchitecture), with prototype</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>ptrdiff_t\nprctl(int</b> <i>option</i><b>, int</b> <i>arg2</i><b>,\nint</b> <i>arg3</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and options to\nget the maximum number of processes per user, get the\nmaximum number of processors the calling process can use,\nfind out whether a specified process is currently blocked,\nget or set the maximum stack size, and so on.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/signal\">signal(2)</a>,\n<a href=\"https://man.page/5/core\">core(5)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}