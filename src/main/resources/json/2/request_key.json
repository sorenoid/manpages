{"name":"request_key","description":"request_key - request a key from the kernel&rsquo;s key management facility","body":"\n\n<h1 align=\"center\">REQUEST_KEY</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">request_key -\nrequest a key from the kernel&rsquo;s key management\nfacility</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;keyutils.h&gt;</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>key_serial_t\nrequest_key(const char *</b><i>type</i><b>, const char\n*</b><i>description</i><b>, <br>\nconst char *</b><i>callout_info</i><b>, <br>\nkey_serial_t</b> <i>dest_keyring</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">No glibc\nwrapper is provided for this system call; see NOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>request_key</b>()\nattempts to find a key of the given <i>type</i> with a\ndescription (name) that matches the specified\n<i>description</i>. If such a key could not be found, then\nthe key is optionally created. If the key is found or\ncreated, <b>request_key</b>() attaches it to the keyring\nwhose ID is specified in <i>dest_keyring</i> and returns the\nkey&rsquo;s serial number.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>request_key</b>()\nfirst recursively searches for a matching key in all of the\nkeyrings attached to the calling process. The keyrings are\nsearched in the order: thread-specific keyring,\nprocess-specific keyring, and then session keyring.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>request_key</b>() is called from a program invoked by\n<b>request_key</b>() on behalf of some other process to\ngenerate a key, then the keyrings of that other process will\nbe searched next, using that other process&rsquo;s user ID,\ngroup ID, supplementary group IDs, and security context to\ndetermine access.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The search of\nthe keyring tree is breadth-first: the keys in each keyring\nsearched are checked for a match before any child keyrings\nare recursed into. Only keys for which the caller has\n<i>search</i> permission be found, and only keyrings for\nwhich the caller has <i>search</i> permission may be\nsearched.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the key is\nnot found and <i>callout</i> is NULL, then the call fails\nwith the error <b>ENOKEY</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the key is\nnot found and <i>callout</i> is not NULL, then the kernel\nattempts to invoke a user-space program to instantiate the\nkey. The details are given below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>dest_keyring</i> serial number may be that of a valid\nkeyring for which the caller has <i>write</i> permission, or\nit may be one of the following special keyring IDs: <b><br>\nKEY_SPEC_THREAD_KEYRING</b></p>\n\n<p style=\"margin-left:22%;\">This specifies the\ncaller&rsquo;s thread-specific keyring (see\n<a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>).</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEY_SPEC_PROCESS_KEYRING</b></p>\n\n<p style=\"margin-left:22%;\">This specifies the\ncaller&rsquo;s process-specific keyring (see\n<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>).</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEY_SPEC_SESSION_KEYRING</b></p>\n\n<p style=\"margin-left:22%;\">This specifies the\ncaller&rsquo;s session-specific keyring (see\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>).</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEY_SPEC_USER_KEYRING</b></p>\n\n<p style=\"margin-left:22%;\">This specifies the\ncaller&rsquo;s UID-specific keyring (see\n<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>).</p>\n\n\n<p style=\"margin-left:11%;\"><b>KEY_SPEC_USER_SESSION_KEYRING</b></p>\n\n<p style=\"margin-left:22%;\">This specifies the\ncaller&rsquo;s UID-session keyring (see\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n<i>dest_keyring</i> is specified as 0 and no key\nconstruction has been performed, then no additional linking\nis done.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Otherwise, if\n<i>dest_keyring</i> is 0 and a new key is constructed, the\nnew key will be linked to the &quot;default&quot; keyring.\nMore precisely, when the kernel tries to determine to which\nkeyring the newly constructed key should be linked, it tries\nthe following keyrings, beginning with the keyring set via\nthe <a href=\"https://man.page/2/keyctl\">keyctl(2)</a> <b>KEYCTL_SET_REQKEY_KEYRING</b>\noperation and continuing in the order shown below until it\nfinds the first keyring that exists:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The requestor keyring\n(<b>KEY_REQKEY_DEFL_REQUESTOR_KEYRING</b>, since Linux\n2.6.29).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The thread-specific keyring\n(<b>KEY_REQKEY_DEFL_THREAD_KEYRING</b>; see\n<a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The process-specific keyring\n(<b>KEY_REQKEY_DEFL_PROCESS_KEYRING</b>; see\n<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The session-specific keyring\n(<b>KEY_REQKEY_DEFL_SESSION_KEYRING</b>; see\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The session keyring for the process&rsquo;s user ID\n(<b>KEY_REQKEY_DEFL_USER_SESSION_KEYRING</b>; see\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>). This keyring is expected to\nalways exist.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The UID-specific keyring\n(<b>KEY_REQKEY_DEFL_USER_KEYRING</b>; see\n<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>). This keyring is also expected to\nalways exist.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<a href=\"https://man.page/2/keyctl\">keyctl(2)</a> <b>KEYCTL_SET_REQKEY_KEYRING</b> operation\nspecifies <b>KEY_REQKEY_DEFL_DEFAULT</b> (or no\n<b>KEYCTL_SET_REQKEY_KEYRING</b> operation is performed),\nthen the kernel looks for a keyring starting from the\nbeginning of the list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Requesting\nuser-space instantiation of a key</b> <br>\nIf the kernel cannot find a key matching <i>type</i> and\n<i>description</i>, and <i>callout</i> is not NULL, then the\nkernel attempts to invoke a user-space program to\ninstantiate a key with the given <i>type</i> and\n<i>description</i>. In this case, the following steps are\nperformed:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">a)</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The kernel creates an\nuninstantiated key, U, with the requested <i>type</i> and\n<i>description</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>b)</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>The kernel creates an authorization key, V, that refers\nto the key U and records the facts that the caller of\n<b>request_key</b>() is:</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">(1)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\"></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">the context in which the key U\nshould be instantiated and secured, and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>(2)</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>the context from which associated key requests may be\nsatisfied.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\nauthorization key is constructed as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The key type is\n<i>&quot;.request_key_auth&quot;</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>*</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The key&rsquo;s UID and GID are the same as the\ncorresponding filesystem IDs of the requesting process.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>*</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The key grants <i>view</i>, <i>read</i>, and\n<i>search</i> permissions to the key possessor as well as\n<i>view</i> permission for the key user.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>*</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The description (name) of the key is the hexadecimal\nstring representing the ID of the key that is to be\ninstantiated in the requesting program.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>*</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The payload of the key is taken from the data specified\nin <i>callout_info</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>*</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Internally, the kernel also records the PID of the\nprocess that called <b>request_key</b>().</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p>c)</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The kernel\ncreates a process that executes a user-space service such as\n<b>request-key</b>(8) with a new session keyring that\ncontains a link to the authorization key, V.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This program is\nsupplied with the following command-line arguments:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p style=\"margin-top: 1em\">[0]</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\">The string\n<i>&quot;/sbin/request-key&quot;</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>[1]</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>The string <i>&quot;create&quot;</i> (indicating that a\nkey is to be created).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>[2]</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>The ID of the key that is to be instantiated.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>[3]</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>The filesystem UID of the caller of\n<b>request_key</b>().</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>[4]</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>The filesystem GID of the caller of\n<b>request_key</b>().</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>[5]</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>The ID of the thread keyring of the caller of\n<b>request_key</b>(). This may be zero if that keyring\nhasn&rsquo;t been created.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>[6]</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>The ID of the process keyring of the caller of\n<b>request_key</b>(). This may be zero if that keyring\nhasn&rsquo;t been created.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>[7]</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>The ID of the session keyring of the caller of\n<b>request_key</b>().</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>Note</i>:\neach of the command-line arguments that is a key ID is\nencoded in <i>decimal</i> (unlike the key IDs shown in\n<i>/proc/keys</i>, which are shown as hexadecimal\nvalues).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">d)</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\">The program spawned in the\nprevious step:</p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">*</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\"></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Assumes the authority to\ninstantiate the key U using the <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>\n<b>KEYCTL_ASSUME_AUTHORITY</b> operation (typically via the\n<a href=\"https://man.page/3/keyctl_assume_authority\">keyctl_assume_authority(3)</a> function).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Obtains the callout data from the payload of the\nauthorization key V (using the <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>\n<b>KEYCTL_READ</b> operation (or, more commonly, the\n<a href=\"https://man.page/3/keyctl_read\">keyctl_read(3)</a> function) with a key ID value of\n<b>KEY_SPEC_REQKEY_AUTH_KEY</b>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Instantiates the key (or execs another program that\nperforms that task), specifying the payload and destination\nkeyring. (The destination keyring that the requestor\nspecified when calling <b>request_key</b>() can be accessed\nusing the special key ID <b>KEY_SPEC_REQUESTOR_KEYRING</b>.)\nInstantiation is performed using the <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>\n<b>KEYCTL_INSTANTIATE</b> operation (or, more commonly, the\n<a href=\"https://man.page/3/keyctl_instantiate\">keyctl_instantiate(3)</a> function). At this point, the\n<b>request_key</b>() call completes, and the requesting\nprogram can continue execution.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If these steps\nare unsuccessful, then an <b>ENOKEY</b> error will be\nreturned to the caller of <b>request_key</b>() and a\ntemporary, negatively instantiated key will be installed in\nthe keyring specified by <i>dest_keyring</i>. This will\nexpire after a few seconds, but will cause subsequent calls\nto <b>request_key</b>() to fail until it does. The purpose\nof this negatively instantiated key is to prevent (possibly\ndifferent) processes making repeated requests (that require\nexpensive <b>request-key</b>(8) upcalls) for a key that\ncan&rsquo;t (at the moment) be positively instantiated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Once the key\nhas been instantiated, the authorization key\n(<b>KEY_SPEC_REQKEY_AUTH_KEY</b>) is revoked, and the\ndestination keyring (<b>KEY_SPEC_REQUESTOR_KEYRING</b>) is\nno longer accessible from the <b>request-key</b>(8)\nprogram.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a key is\ncreated, then&mdash;regardless of whether it is a valid key\nor a negatively instantiated key&mdash;it will displace any\nother key with the same type and description from the\nkeyring specified in <i>dest_keyring</i>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>request_key</b>() returns the serial number of the key it\nfound or caused to be created. On error, -1 is returned and\n<i>errno</i> is set to indicate the cause of the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The keyring wasn&rsquo;t\navailable for modification by the user.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EDQUOT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The key quota for this user would be exceeded by\ncreating this key or linking it to the keyring.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>One of <i>type</i>, <i>description</i>, or\n<i>callout_info</i> points outside the process&rsquo;s\naccessible address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The request was interrupted by a signal; see\n<a href=\"https://man.page/7/signal\">signal(7)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The size of the string (including the terminating null\nbyte) specified in <i>type</i> or <i>description</i>\nexceeded the limit (32 bytes and 4096 bytes\nrespectively).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The size of the string (including the terminating null\nbyte) specified in <i>callout_info</i> exceeded the system\npage size.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EKEYEXPIRED</b></p>\n\n<p style=\"margin-left:22%;\">An expired key was found, but\nno replacement could be obtained.</p>\n\n<p style=\"margin-left:11%;\"><b>EKEYREJECTED</b></p>\n\n<p style=\"margin-left:22%;\">The attempt to generate a new\nkey was rejected.</p>\n\n<p style=\"margin-left:11%;\"><b>EKEYREVOKED</b></p>\n\n<p style=\"margin-left:22%;\">A revoked key was found, but no\nreplacement could be obtained.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOKEY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"70%\">\n\n\n<p>No matching key was found.</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"70%\">\n\n\n<p>Insufficient memory to create a key.</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"70%\">\n\n\n<p>The <i>type</i> argument started with a period\n('.').</p> </td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall first appeared in Linux 2.6.10. The ability to\ninstantiate keys upon request was added in Linux 2.6.13.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall is a nonstandard Linux extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">No wrapper for\nthis system call is provided in glibc. A wrapper is provided\nin the <i>libkeyutils</i> package. When employing the\nwrapper in that library, link with <i>-lkeyutils</i>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>request_key</b>(). The\n<i>type</i>, <i>description</i>, and <i>callout_info</i>\narguments for the system call are taken from the values\nsupplied in the command-line arguments. The call specifies\nthe session keyring as the target keyring.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\ndemonstrate this program, we first create a suitable entry\nin the file <i>/etc/request-key.conf</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ sudo sh <br>\n# <b>echo 'create user mtk:* * /bin/keyctl instantiate %k %c\n%S' \\ <br>\n&gt; /etc/request-key.conf</b> <br>\n# <b>exit</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This entry\nspecifies that when a new &quot;user&quot; key with the\nprefix &quot;mtk:&quot; must be instantiated, that task\nshould be performed via the <a href=\"https://man.page/1/keyctl\">keyctl(1)</a> command&rsquo;s\n<b>instantiate</b> operation. The arguments supplied to the\n<b>instantiate</b> operation are: the ID of the\nuninstantiated key (<i>%k</i>); the callout data supplied to\nthe <b>request_key</b>() call (<i>%c</i>); and the session\nkeyring (<i>%S</i>) of the requestor (i.e., the caller of\n<b>request_key</b>()). See <b>request-key.conf</b>(5) for\ndetails of these <i>%</i> specifiers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then we run the\nprogram and check the contents of <i>/proc/keys</i> to\nverify that the requested key has been instantiated:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./t_request_key user mtk:key1 &quot;Payload\ndata&quot;</b> <br>\n$ <b>grep '2dddaf50' /proc/keys</b> <br>\n2dddaf50 I--Q--- 1 perm 3f010000 1000 1000 user mtk:key1:\n12</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For another\nexample of the use of this program, see\n<a href=\"https://man.page/2/keyctl\">keyctl(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n/* t_request_key.c */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;sys/types.h&gt; <br>\n#include &lt;keyutils.h&gt; <br>\n#include &lt;stdint.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;string.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nkey_serial_t key;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 4)\n{ <br>\nfprintf(stderr, &quot;Usage: %s type description\ncallout-data\\n&quot;, <br>\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">key =\nrequest_key(argv[1], argv[2], argv[3], <br>\nKEY_SPEC_SESSION_KEYRING); <br>\nif (key == -1) { <br>\nperror(&quot;request_key&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Key\nID is %jx\\n&quot;, (uintmax_t) key);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/keyctl\">keyctl(1)</a>,\n<a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>, <a href=\"https://man.page/3/keyctl\">keyctl(3)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/keyrings\">keyrings(7)</a>,\n<a href=\"https://man.page/7/keyutils\">keyutils(7)</a>, <a href=\"https://man.page/7/persistent-keyring\">persistent-keyring(7)</a>,\n<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>, <a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>,\n<a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>, <a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>,\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>, <b>request-key</b>(8)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nsource files <i>Documentation/security/keys/core.rst</i> and\n<i>Documentation/keys/request-key.rst</i> (or, before Linux\n4.13, in the files <i>Documentation/security/keys.txt</i>\nand <i>Documentation/security/keys-request-key.txt</i>).</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}