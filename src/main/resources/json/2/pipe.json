{"name":"pipe","body":"\n\n<h1 align=\"center\">PIPE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pipe, pipe2 -\ncreate pipe</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* On Alpha,\nIA-64, MIPS, SuperH, and SPARC/SPARC64; see NOTES */ <b><br>\nstruct fd_pair { <br>\nlong fd[2]; <br>\n}; <br>\nstruct fd_pair pipe();</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* On all other\narchitectures */ <b><br>\nint pipe(int</b> <i>pipefd</i><b>[2]);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;fcntl.h&gt;</b> /* Obtain O_* constant\ndefinitions */ <b><br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npipe2(int</b> <i>pipefd</i><b>[2], int</b>\n<i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pipe</b>()\ncreates a pipe, a unidirectional data channel that can be\nused for interprocess communication. The array <i>pipefd</i>\nis used to return two file descriptors referring to the ends\nof the pipe. <i>pipefd[0]</i> refers to the read end of the\npipe. <i>pipefd[1]</i> refers to the write end of the pipe.\nData written to the write end of the pipe is buffered by the\nkernel until it is read from the read end of the pipe. For\nfurther details, see <a href=\"https://man.page/7/pipe\">pipe(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>flags</i>\nis 0, then <b>pipe2</b>() is the same as <b>pipe</b>(). The\nfollowing values can be bitwise ORed in <i>flags</i> to\nobtain different behavior: <b><br>\nO_CLOEXEC</b></p>\n\n<p style=\"margin-left:22%;\">Set the close-on-exec\n(<b>FD_CLOEXEC</b>) flag on the two new file descriptors.\nSee the description of the same flag in <a href=\"https://man.page/2/open\">open(2)</a> for\nreasons why this may be useful.</p>\n\n<p style=\"margin-left:11%;\"><b>O_DIRECT</b> (since Linux\n3.4)</p>\n\n<p style=\"margin-left:22%;\">Create a pipe that performs I/O\nin &quot;packet&quot; mode. Each <a href=\"https://man.page/2/write\">write(2)</a> to the pipe\nis dealt with as a separate packet, and <a href=\"https://man.page/2/read\">read(2)</a>s from\nthe pipe will read one packet at a time. Note the following\npoints:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Writes of greater than <b>PIPE_BUF</b> bytes (see\n<a href=\"https://man.page/7/pipe\">pipe(7)</a>) will be split into multiple packets. The\nconstant <b>PIPE_BUF</b> is defined in\n<i>&lt;limits.h&gt;</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>If a <a href=\"https://man.page/2/read\">read(2)</a> specifies a buffer size that is\nsmaller than the next packet, then the requested number of\nbytes are read, and the excess bytes in the packet are\ndiscarded. Specifying a buffer size of <b>PIPE_BUF</b> will\nbe sufficient to read the largest possible packets (see the\nprevious point).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Zero-length packets are not supported. (A <a href=\"https://man.page/2/read\">read(2)</a>\nthat specifies a buffer size of zero is a no-op, and returns\n0.)</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Older kernels\nthat do not support this flag will indicate this via an\n<b>EINVAL</b> error.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n4.5, it is possible to change the <b>O_DIRECT</b> setting of\na pipe file descriptor using <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>O_NONBLOCK</b></p>\n\n<p style=\"margin-left:22%;\">Set the <b>O_NONBLOCK</b> file\nstatus flag on the open file descriptions referred to by the\nnew file descriptors. Using this flag saves extra calls to\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> to achieve the same result.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, <i>errno</i> is\nset appropriately, and <i>pipefd</i> is left unchanged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux (and\nother systems), <b>pipe</b>() does not modify <i>pipefd</i>\non failure. A requirement standardizing this behavior was\nadded in POSIX.1-2008 TC2. The Linux-specific <b>pipe2</b>()\nsystem call likewise does not modify <i>pipefd</i> on\nfailure.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>pipefd</i> is not valid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>pipe2</b>()) Invalid value in <i>flags</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system-wide limit on the total number of open files\nhas been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The user hard limit on memory that can be allocated for\npipes has been reached and the caller is not privileged; see\n<a href=\"https://man.page/7/pipe\">pipe(7)</a>.</p> </td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pipe2</b>()\nwas added to Linux in version 2.6.27; glibc support is\navailable starting with version 2.9.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pipe</b>():\nPOSIX.1-2001, POSIX.1-2008.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pipe2</b>()\nis Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The System V\nABI on some architectures allows the use of more than one\nregister for returning multiple values; several\narchitectures (namely, Alpha, IA-64, MIPS, SuperH, and\nSPARC/SPARC64) (ab)use this feature in order to implement\nthe <b>pipe</b>() system call in a functional manner: the\ncall doesn&rsquo;t take any arguments and returns a pair of\nfile descriptors as the return value on success. The glibc\n<b>pipe</b>() wrapper function transparently deals with\nthis. See <a href=\"https://man.page/2/syscall\">syscall(2)</a> for information regarding\nregisters used for storing second file descriptor.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nprogram creates a pipe, and then <a href=\"https://man.page/2/fork\">fork(2)</a>s to create a\nchild process; the child inherits a duplicate set of file\ndescriptors that refer to the same pipe. After the\n<a href=\"https://man.page/2/fork\">fork(2)</a>, each process closes the file descriptors\nthat it doesn&rsquo;t need for the pipe (see\n<a href=\"https://man.page/7/pipe\">pipe(7)</a>). The parent then writes the string contained\nin the program&rsquo;s command-line argument to the pipe,\nand the child reads this string a byte at a time from the\npipe and echoes it on standard output.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;sys/types.h&gt; <br>\n#include &lt;sys/wait.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;string.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint pipefd[2]; <br>\npid_t cpid; <br>\nchar buf;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 2)\n{ <br>\nfprintf(stderr, &quot;Usage: %s &lt;string&gt;\\n&quot;,\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(pipe(pipefd) == -1) { <br>\nperror(&quot;pipe&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">cpid = fork();\n<br>\nif (cpid == -1) { <br>\nperror(&quot;fork&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (cpid == 0)\n{ /* Child reads from pipe */ <br>\nclose(pipefd[1]); /* Close unused write end */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">while\n(read(pipefd[0], &amp;buf, 1) &gt; 0) <br>\nwrite(STDOUT_FILENO, &amp;buf, 1);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">write(STDOUT_FILENO,\n&quot;\\n&quot;, 1); <br>\nclose(pipefd[0]); <br>\n_exit(EXIT_SUCCESS);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">} else { /*\nParent writes argv[1] to pipe */ <br>\nclose(pipefd[0]); /* Close unused read end */ <br>\nwrite(pipefd[1], argv[1], strlen(argv[1])); <br>\nclose(pipefd[1]); /* Reader will see EOF */ <br>\nwait(NULL); /* Wait for child */ <br>\nexit(EXIT_SUCCESS); <br>\n} <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/fork\">fork(2)</a>,\n<a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/socketpair\">socketpair(2)</a>, <a href=\"https://man.page/2/splice\">splice(2)</a>,\n<a href=\"https://man.page/2/tee\">tee(2)</a>, <a href=\"https://man.page/2/vmsplice\">vmsplice(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>,\n<a href=\"https://man.page/3/popen\">popen(3)</a>, <a href=\"https://man.page/7/pipe\">pipe(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}