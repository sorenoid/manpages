{"name":"vfork","body":"\n\n<h1 align=\"center\">VFORK</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">vfork - create\na child process and block parent</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pid_t\nvfork(void);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>vfork</b>():</p>\n\n<p style=\"margin-left:17%;\">Since glibc 2.12:</p>\n\n\n<p style=\"margin-left:23%;\">(_XOPEN_SOURCE&nbsp;&gt;=&nbsp;500)\n&amp;&amp; ! (_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;200809L) <br>\n|| /* Since glibc 2.19: */ _DEFAULT_SOURCE <br>\n|| /* Glibc versions &lt;= 2.19: */ _BSD_SOURCE</p>\n\n<p style=\"margin-left:17%;\">Before glibc 2.12:</p>\n\n<p style=\"margin-left:23%;\">_BSD_SOURCE ||\n_XOPEN_SOURCE&nbsp;&gt;=&nbsp;500</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Standard\ndescription</b> <br>\n(From POSIX.1) The <b>vfork</b>() function has the same\neffect as <a href=\"https://man.page/2/fork\">fork(2)</a>, except that the behavior is\nundefined if the process created by <b>vfork</b>() either\nmodifies any data other than a variable of type <i>pid_t</i>\nused to store the return value from <b>vfork</b>(), or\nreturns from the function in which <b>vfork</b>() was\ncalled, or calls any other function before successfully\ncalling <a href=\"https://man.page/2/_exit\">_exit(2)</a> or one of the <a href=\"https://man.page/3/exec\">exec(3)</a> family\nof functions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux\ndescription <br>\nvfork</b>(), just like <a href=\"https://man.page/2/fork\">fork(2)</a>, creates a child\nprocess of the calling process. For details and return value\nand errors, see <a href=\"https://man.page/2/fork\">fork(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>vfork</b>()\nis a special case of <a href=\"https://man.page/2/clone\">clone(2)</a>. It is used to create\nnew processes without copying the page tables of the parent\nprocess. It may be useful in performance-sensitive\napplications where a child is created which then immediately\nissues an <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>vfork</b>()\ndiffers from <a href=\"https://man.page/2/fork\">fork(2)</a> in that the calling thread is\nsuspended until the child terminates (either normally, by\ncalling <a href=\"https://man.page/2/_exit\">_exit(2)</a>, or abnormally, after delivery of a\nfatal signal), or it makes a call to <a href=\"https://man.page/2/execve\">execve(2)</a>. Until\nthat point, the child shares all memory with its parent,\nincluding the stack. The child must not return from the\ncurrent function or call <a href=\"https://man.page/3/exit\">exit(3)</a> (which would have\nthe effect of calling exit handlers established by the\nparent process and flushing the parent&rsquo;s\n<a href=\"https://man.page/3/stdio\">stdio(3)</a> buffers), but may call <a href=\"https://man.page/2/_exit\">_exit(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As with\n<a href=\"https://man.page/2/fork\">fork(2)</a>, the child process created by <b>vfork</b>()\ninherits copies of various of the caller&rsquo;s process\nattributes (e.g., file descriptors, signal dispositions, and\ncurrent working directory); the <b>vfork</b>() call differs\nonly in the treatment of the virtual address space, as\ndescribed above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Signals sent to\nthe parent arrive after the child releases the\nparent&rsquo;s memory (i.e., after the child terminates or\ncalls <a href=\"https://man.page/2/execve\">execve(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Historic\ndescription</b> <br>\nUnder Linux, <a href=\"https://man.page/2/fork\">fork(2)</a> is implemented using\ncopy-on-write pages, so the only penalty incurred by\n<a href=\"https://man.page/2/fork\">fork(2)</a> is the time and memory required to duplicate\nthe parent&rsquo;s page tables, and to create a unique task\nstructure for the child. However, in the bad old days a\n<a href=\"https://man.page/2/fork\">fork(2)</a> would require making a complete copy of the\ncaller&rsquo;s data space, often needlessly, since usually\nimmediately afterward an <a href=\"https://man.page/3/exec\">exec(3)</a> is done. Thus, for\ngreater efficiency, BSD introduced the <b>vfork</b>() system\ncall, which did not fully copy the address space of the\nparent process, but borrowed the parent&rsquo;s memory and\nthread of control until a call to <a href=\"https://man.page/2/execve\">execve(2)</a> or an\nexit occurred. The parent process was suspended while the\nchild was using its resources. The use of <b>vfork</b>() was\ntricky: for example, not modifying data in the parent\nprocess depended on knowing which variables were held in a\nregister.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">4.3BSD;\nPOSIX.1-2001 (but marked OBSOLETE). POSIX.1-2008 removes the\nspecification of <b>vfork</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nrequirements put on <b>vfork</b>() by the standards are\nweaker than those put on <a href=\"https://man.page/2/fork\">fork(2)</a>, so an\nimplementation where the two are synonymous is compliant. In\nparticular, the programmer cannot rely on the parent\nremaining blocked until the child either terminates or calls\n<a href=\"https://man.page/2/execve\">execve(2)</a>, and cannot rely on any specific behavior\nwith respect to shared memory.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some consider\nthe semantics of <b>vfork</b>() to be an architectural\nblemish, and the 4.2BSD man page stated: &quot;This system\ncall will be eliminated when proper system sharing\nmechanisms are implemented. Users should not depend on the\nmemory sharing semantics of <b>vfork</b>() as it will, in\nthat case, be made synonymous to <a href=\"https://man.page/2/fork\">fork(2)</a>.&quot;\nHowever, even though modern memory management hardware has\ndecreased the performance difference between <a href=\"https://man.page/2/fork\">fork(2)</a>\nand <b>vfork</b>(), there are various reasons why Linux and\nother systems have retained <b>vfork</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Some performance-critical applications require the small\nperformance advantage conferred by <b>vfork</b>().</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><b>vfork</b>() can be implemented on systems that lack a\nmemory-management unit (MMU), but <a href=\"https://man.page/2/fork\">fork(2)</a> can&rsquo;t\nbe implemented on such systems. (POSIX.1-2008 removed\n<b>vfork</b>() from the standard; the POSIX rationale for\nthe <a href=\"https://man.page/3/posix_spawn\">posix_spawn(3)</a> function notes that that function,\nwhich provides functionality equivalent to\n<a href=\"https://man.page/2/fork\">fork(2)</a>+<a href=\"https://man.page/3/exec\">exec(3)</a>, is designed to be\nimplementable on systems that lack an MMU.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>On systems where memory is constrained, <b>vfork</b>()\navoids the need to temporarily commit memory (see the\ndescription of <i>/proc/sys/vm/overcommit_memory</i> in\n<a href=\"https://man.page/5/proc\">proc(5)</a>) in order to execute a new program. (This can\nbe especially beneficial where a large parent process wishes\nto execute a small helper program in a child process.) By\ncontrast, using <a href=\"https://man.page/2/fork\">fork(2)</a> in this scenario requires\neither committing an amount of memory equal to the size of\nthe parent process (if strict overcommitting is in force) or\novercommitting memory with the risk that a process is\nterminated by the out-of-memory (OOM) killer.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Caveats</b>\n<br>\nThe child process should take care not to modify the memory\nin unintended ways, since such changes will be seen by the\nparent process once the child terminates or executes another\nprogram. In this regard, signal handlers can be especially\nproblematic: if a signal handler that is invoked in the\nchild of <b>vfork</b>() changes memory, those changes may\nresult in an inconsistent process state from the perspective\nof the parent process (e.g., memory changes would be visible\nin the parent, but changes to the state of open file\ndescriptors would not be visible).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>vfork</b>() is called in a multithreaded process, only\nthe calling thread is suspended until the child terminates\nor executes a new program. This means that the child is\nsharing an address space with other running code. This can\nbe dangerous if another thread in the parent process changes\ncredentials (using <a href=\"https://man.page/2/setuid\">setuid(2)</a> or similar), since there\nare now two processes with different privilege levels\nrunning in the same address space. As an example of the\ndangers, suppose that a multithreaded program running as\nroot creates a child using <b>vfork</b>(). After the\n<b>vfork</b>(), a thread in the parent process drops the\nprocess to an unprivileged user in order to run some\nuntrusted code (e.g., perhaps via plug-in opened with\n<a href=\"https://man.page/3/dlopen\">dlopen(3)</a>). In this case, attacks are possible where\nthe parent process uses <a href=\"https://man.page/2/mmap\">mmap(2)</a> to map in code that\nwill be executed by the privileged child process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux\nnotes</b> <br>\nFork handlers established using <a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a> are\nnot called when a multithreaded program employing the NPTL\nthreading library calls <b>vfork</b>(). Fork handlers are\ncalled in this case in a program using the LinuxThreads\nthreading library. (See <a href=\"https://man.page/7/pthreads\">pthreads(7)</a> for a description\nof Linux threading libraries.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A call to\n<b>vfork</b>() is equivalent to calling <a href=\"https://man.page/2/clone\">clone(2)</a> with\n<i>flags</i> specified as:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">CLONE_VM |\nCLONE_VFORK | SIGCHLD</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>History</b>\n<br>\nThe <b>vfork</b>() system call appeared in 3.0BSD. In 4.4BSD\nit was made synonymous to <a href=\"https://man.page/2/fork\">fork(2)</a> but NetBSD\nintroduced it again; see\n<a href=\"http://www.netbsd.org/Documentation/kernel/vfork.html\">http://www.netbsd.org/Documentation/kernel/vfork.html</a>.\nIn Linux, it has been equivalent to <a href=\"https://man.page/2/fork\">fork(2)</a> until\n2.2.0-pre6 or so. Since 2.2.0-pre9 (on i386, somewhat later\non other architectures) it is an independent system call.\nSupport was added in glibc 2.0.112.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Details of the\nsignal handling are obscure and differ between systems. The\nBSD man page states: &quot;To avoid a possible deadlock\nsituation, processes that are children in the middle of a\n<b>vfork</b>() are never sent <b>SIGTTOU</b> or\n<b>SIGTTIN</b> signals; rather, output or <i>ioctl</i>s are\nallowed and input attempts result in an end-of-file\nindication.&quot;</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/execve\">execve(2)</a>, <a href=\"https://man.page/2/_exit\">_exit(2)</a>, <a href=\"https://man.page/2/fork\">fork(2)</a>,\n<a href=\"https://man.page/2/unshare\">unshare(2)</a>, <a href=\"https://man.page/2/wait\">wait(2)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}