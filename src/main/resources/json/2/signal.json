{"name":"signal","description":"signal - ANSI C\nsignal handling","body":"\n\n<h1 align=\"center\">SIGNAL</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">signal - ANSI C\nsignal handling</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;signal.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>typedef void\n(*sighandler_t)(int);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sighandler_t\nsignal(int</b> <i>signum</i><b>, sighandler_t</b>\n<i>handler</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>WARNING</b>:\n<br>\nthe behavior of <b>signal</b>() varies across UNIX versions,\nand has also varied historically across different versions\nof Linux. <b>Avoid its use</b>: use <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>\ninstead. See <i>Portability</i> below.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>signal</b>()\nsets the disposition of the signal <i>signum</i> to\n<i>handler</i>, which is either <b>SIG_IGN</b>,\n<b>SIG_DFL</b>, or the address of a programmer-defined\nfunction (a &quot;signal handler&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the signal\n<i>signum</i> is delivered to the process, then one of the\nfollowing happens:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If the disposition is set to <b>SIG_IGN</b>, then the\nsignal is ignored.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If the disposition is set to <b>SIG_DFL</b>, then the\ndefault action associated with the signal (see\n<a href=\"https://man.page/7/signal\">signal(7)</a>) occurs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If the disposition is set to a function, then first\neither the disposition is reset to <b>SIG_DFL</b>, or the\nsignal is blocked (see <i>Portability</i> below), and then\n<i>handler</i> is called with argument <i>signum</i>. If\ninvocation of the handler caused the signal to be blocked,\nthen the signal is unblocked upon return from the\nhandler.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The signals\n<b>SIGKILL</b> and <b>SIGSTOP</b> cannot be caught or\nignored.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>signal</b>()\nreturns the previous value of the signal handler, or\n<b>SIG_ERR</b> on error. In the event of an error,\n<i>errno</i> is set to indicate the cause.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"27%\">\n\n\n<p style=\"margin-top: 1em\"><i>signum</i> is invalid.</p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, C89, C99.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The effects of\n<b>signal</b>() in a multithreaded process are\nunspecified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX, the behavior of a process is undefined after it\nignores a <b>SIGFPE</b>, <b>SIGILL</b>, or <b>SIGSEGV</b>\nsignal that was not generated by <a href=\"https://man.page/2/kill\">kill(2)</a> or\n<a href=\"https://man.page/3/raise\">raise(3)</a>. Integer division by zero has undefined\nresult. On some architectures it will generate a\n<b>SIGFPE</b> signal. (Also dividing the most negative\ninteger by -1 may generate <b>SIGFPE</b>.) Ignoring this\nsignal might lead to an endless loop.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/sigaction\">sigaction(2)</a> for details on what happens when the\ndisposition <b>SIGCHLD</b> is set to <b>SIG_IGN</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/7/signal-safety\">signal-safety(7)</a> for a list of the async-signal-safe\nfunctions that can be safely called from inside a signal\nhandler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The use of\n<i>sighandler_t</i> is a GNU extension, exposed if\n<b>_GNU_SOURCE</b> is defined; glibc also defines (the\nBSD-derived) <i>sig_t</i> if <b>_BSD_SOURCE</b> (glibc 2.19\nand earlier) or <b>_DEFAULT_SOURCE</b> (glibc 2.19 and\nlater) is defined. Without use of such a type, the\ndeclaration of <b>signal</b>() is the somewhat harder to\nread:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>void (\n*</b><i>signal</i><b>(int</b> <i>signum</i><b>, void\n(*</b><i>handler</i><b>)(int)) ) (int);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Portability</b>\n<br>\nThe only portable use of <b>signal</b>() is to set a\nsignal&rsquo;s disposition to <b>SIG_DFL</b> or\n<b>SIG_IGN</b>. The semantics when using <b>signal</b>() to\nestablish a signal handler vary across systems (and POSIX.1\nexplicitly permits this variation); <b>do not use it for\nthis purpose.</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 solved\nthe portability mess by specifying <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\nwhich provides explicit control of the semantics when a\nsignal handler is invoked; use that interface instead of\n<b>signal</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the original\nUNIX systems, when a handler that was established using\n<b>signal</b>() was invoked by the delivery of a signal, the\ndisposition of the signal would be reset to <b>SIG_DFL</b>,\nand the system did not block delivery of further instances\nof the signal. This is equivalent to calling\n<a href=\"https://man.page/2/sigaction\">sigaction(2)</a> with the following flags:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sa.sa_flags =\nSA_RESETHAND | SA_NODEFER;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">System&nbsp;V\nalso provides these semantics for <b>signal</b>(). This was\nbad because the signal might be delivered again before the\nhandler had a chance to reestablish itself. Furthermore,\nrapid deliveries of the same signal could result in\nrecursive invocations of the handler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">BSD improved on\nthis situation, but unfortunately also changed the semantics\nof the existing <b>signal</b>() interface while doing so. On\nBSD, when a signal handler is invoked, the signal\ndisposition is not reset, and further instances of the\nsignal are blocked from being delivered while the handler is\nexecuting. Furthermore, certain blocking system calls are\nautomatically restarted if interrupted by a signal handler\n(see <a href=\"https://man.page/7/signal\">signal(7)</a>). The BSD semantics are equivalent to\ncalling <a href=\"https://man.page/2/sigaction\">sigaction(2)</a> with the following flags:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sa.sa_flags =\nSA_RESTART;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The situation\non Linux is as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">The kernel&rsquo;s\n<b>signal</b>() system call provides System&nbsp;V\nsemantics.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>By default, in glibc 2 and later, the <b>signal</b>()\nwrapper function does not invoke the kernel system call.\nInstead, it calls <a href=\"https://man.page/2/sigaction\">sigaction(2)</a> using flags that\nsupply BSD semantics. This default behavior is provided as\nlong as a suitable feature test macro is defined:\n<b>_BSD_SOURCE</b> on glibc 2.19 and earlier or\n<b>_DEFAULT_SOURCE</b> in glibc 2.19 and later. (By default,\nthese macros are defined; see <a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>\nfor details.) If such a feature test macro is not defined,\nthen <b>signal</b>() provides System&nbsp;V semantics.</p></td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/kill\">kill(1)</a>,\n<a href=\"https://man.page/2/alarm\">alarm(2)</a>, <a href=\"https://man.page/2/kill\">kill(2)</a>, <a href=\"https://man.page/2/pause\">pause(2)</a>,\n<a href=\"https://man.page/2/sigaction\">sigaction(2)</a>, <a href=\"https://man.page/2/signalfd\">signalfd(2)</a>,\n<a href=\"https://man.page/2/sigpending\">sigpending(2)</a>, <a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>,\n<a href=\"https://man.page/2/sigsuspend\">sigsuspend(2)</a>, <a href=\"https://man.page/3/bsd_signal\">bsd_signal(3)</a>,\n<a href=\"https://man.page/3/killpg\">killpg(3)</a>, <a href=\"https://man.page/3/raise\">raise(3)</a>, <a href=\"https://man.page/3/siginterrupt\">siginterrupt(3)</a>,\n<a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a>, <a href=\"https://man.page/3/sigsetops\">sigsetops(3)</a>, <a href=\"https://man.page/3/sigvec\">sigvec(3)</a>,\n<a href=\"https://man.page/3/sysv_signal\">sysv_signal(3)</a>, <a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}