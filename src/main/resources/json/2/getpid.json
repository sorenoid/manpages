{"name":"getpid","description":"getpid, getppid - get process identification","body":"\n\n<h1 align=\"center\">GETPID</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getpid, getppid\n- get process identification</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pid_t\ngetpid(void); <br>\npid_t getppid(void);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getpid</b>()\nreturns the process ID (PID) of the calling process. (This\nis often used by routines that generate unique temporary\nfilenames.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getppid</b>()\nreturns the process ID of the parent of the calling process.\nThis will be either the ID of the process that created this\nprocess using <b>fork</b>(), or, if that process has already\nterminated, the ID of the process to which this process has\nbeen reparented (either <a href=\"https://man.page/1/init\">init(1)</a> or a\n&quot;subreaper&quot; process defined via the\n<a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_SET_CHILD_SUBREAPER</b>\noperation).</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare always successful.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, 4.3BSD, SVr4.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\ncaller&rsquo;s parent is in a different PID namespace (see\n<a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>), <b>getppid</b>() returns 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From a kernel\nperspective, the PID (which is shared by all of the threads\nin a multithreaded process) is sometimes also known as the\nthread group ID (TGID). This contrasts with the kernel\nthread ID (TID), which is unique for each thread. For\nfurther details, see <a href=\"https://man.page/2/gettid\">gettid(2)</a> and the discussion of\nthe <b>CLONE_THREAD</b> flag in <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nFrom glibc version 2.3.4 up to and including version 2.24,\nthe glibc wrapper function for <b>getpid</b>() cached PIDs,\nwith the goal of avoiding additional system calls when a\nprocess calls <b>getpid</b>() repeatedly. Normally this\ncaching was invisible, but its correct operation relied on\nsupport in the wrapper functions for <a href=\"https://man.page/2/fork\">fork(2)</a>,\n<a href=\"https://man.page/2/vfork\">vfork(2)</a>, and <a href=\"https://man.page/2/clone\">clone(2)</a>: if an application\nbypassed the glibc wrappers for these system calls by using\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>, then a call to <b>getpid</b>() in the\nchild would return the wrong value (to be precise: it would\nreturn the PID of the parent process). In addition, there\nwere cases where <b>getpid</b>() could return the wrong\nvalue even when invoking <a href=\"https://man.page/2/clone\">clone(2)</a> via the glibc\nwrapper function. (For a discussion of one such case, see\nBUGS in <a href=\"https://man.page/2/clone\">clone(2)</a>.) Furthermore, the complexity of the\ncaching code had been the source of a few bugs within glibc\nover the years.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because of the\naforementioned problems, since glibc version 2.25, the PID\ncache is removed: calls to <b>getpid</b>() always invoke the\nactual system call, rather than returning a cached\nvalue.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Alpha,\ninstead of a pair of <b>getpid</b>() and <b>getppid</b>()\nsystem calls, a single <b>getxpid</b>() system call is\nprovided, which returns a pair of PID and parent PID. The\nglibc <b>getpid</b>() and <b>getppid</b>() wrapper functions\ntransparently deal with this. See <a href=\"https://man.page/2/syscall\">syscall(2)</a> for\ndetails regarding register mapping.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/gettid\">gettid(2)</a>, <a href=\"https://man.page/2/kill\">kill(2)</a>,\n<a href=\"https://man.page/3/exec\">exec(3)</a>, <a href=\"https://man.page/3/mkstemp\">mkstemp(3)</a>, <a href=\"https://man.page/3/tempnam\">tempnam(3)</a>,\n<a href=\"https://man.page/3/tmpfile\">tmpfile(3)</a>, <a href=\"https://man.page/3/tmpnam\">tmpnam(3)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a>,\n<a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}