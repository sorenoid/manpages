{"name":"sync_file_range","description":"sync_file_range - sync a file segment with disk","body":"\n\n<h1 align=\"center\">SYNC_FILE_RANGE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sync_file_range\n- sync a file segment with disk</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;fcntl.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsync_file_range(int</b> <i>fd</i><b>, off64_t</b>\n<i>offset</i><b>, off64_t</b> <i>nbytes</i><b>, <br>\nunsigned int</b> <i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sync_file_range</b>()\npermits fine control when synchronizing the open file\nreferred to by the file descriptor <i>fd</i> with disk.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>offset</i>\nis the starting byte of the file range to be synchronized.\n<i>nbytes</i> specifies the length of the range to be\nsynchronized, in bytes; if <i>nbytes</i> is zero, then all\nbytes from <i>offset</i> through to the end of file are\nsynchronized. Synchronization is in units of the system page\nsize: <i>offset</i> is rounded down to a page boundary;\n<i>(offset+nbytes-1)</i> is rounded up to a page\nboundary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> bit-mask argument can include any of the\nfollowing values: <b><br>\nSYNC_FILE_RANGE_WAIT_BEFORE</b></p>\n\n<p style=\"margin-left:22%;\">Wait upon write-out of all\npages in the specified range that have already been\nsubmitted to the device driver for write-out before\nperforming any write.</p>\n\n\n<p style=\"margin-left:11%;\"><b>SYNC_FILE_RANGE_WRITE</b></p>\n\n<p style=\"margin-left:22%;\">Initiate write-out of all dirty\npages in the specified range which are not presently\nsubmitted write-out. Note that even this may block if you\nattempt to write more than request queue size.</p>\n\n\n<p style=\"margin-left:11%;\"><b>SYNC_FILE_RANGE_WAIT_AFTER</b></p>\n\n<p style=\"margin-left:22%;\">Wait upon write-out of all\npages in the range after performing any write.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Specifying\n<i>flags</i> as 0 is permitted, as a no-op.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Warning</b>\n<br>\nThis system call is extremely dangerous and should not be\nused in portable programs. None of these operations writes\nout the file&rsquo;s metadata. Therefore, unless the\napplication is strictly performing overwrites of\nalready-instantiated disk blocks, there are no guarantees\nthat the data will be available after a crash. There is no\nuser interface to know if a write is purely an overwrite. On\nfilesystems using copy-on-write semantics (e.g.,\n<i>btrfs</i>) an overwrite of existing allocated blocks is\nimpossible. When writing into preallocated space, many\nfilesystems also require calls into the block allocator,\nwhich this system call does not sync out to disk. This\nsystem call does not flush disk write caches and thus does\nnot provide any data integrity on systems with volatile disk\nwrite caches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Some details\n<br>\nSYNC_FILE_RANGE_WAIT_BEFORE</b> and\n<b>SYNC_FILE_RANGE_WAIT_AFTER</b> will detect any I/O errors\nor <b>ENOSPC</b> conditions and will return these to the\ncaller.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Useful\ncombinations of the <i>flags</i> bits are: <b><br>\nSYNC_FILE_RANGE_WAIT_BEFORE | SYNC_FILE_RANGE_WRITE</b></p>\n\n<p style=\"margin-left:22%;\">Ensures that all pages in the\nspecified range which were dirty when\n<b>sync_file_range</b>() was called are placed under\nwrite-out. This is a start-write-for-data-integrity\noperation.</p>\n\n\n<p style=\"margin-left:11%;\"><b>SYNC_FILE_RANGE_WRITE</b></p>\n\n<p style=\"margin-left:22%;\">Start write-out of all dirty\npages in the specified range which are not presently under\nwrite-out. This is an asynchronous flush-to-disk operation.\nThis is not suitable for data integrity operations.</p>\n\n\n<p style=\"margin-left:11%;\"><b>SYNC_FILE_RANGE_WAIT_BEFORE</b>\n(or <b>SYNC_FILE_RANGE_WAIT_AFTER</b>)</p>\n\n<p style=\"margin-left:22%;\">Wait for completion of\nwrite-out of all pages in the specified range. This can be\nused after an earlier <b>SYNC_FILE_RANGE_WAIT_BEFORE |\nSYNC_FILE_RANGE_WRITE</b> operation to wait for completion\nof that operation, and obtain its result.</p>\n\n<p style=\"margin-left:11%;\"><b>SYNC_FILE_RANGE_WAIT_BEFORE\n| SYNC_FILE_RANGE_WRITE | <br>\nSYNC_FILE_RANGE_WAIT_AFTER</b></p>\n\n<p style=\"margin-left:22%;\">This is a\nwrite-for-data-integrity operation that will ensure that all\npages in the specified range which were dirty when\n<b>sync_file_range</b>() was called are committed to\ndisk.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>sync_file_range</b>() returns 0; on failure -1 is\nreturned and <i>errno</i> is set to indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>fd</i> is not a valid file\ndescriptor.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>flags</i> specifies an invalid bit; or <i>offset</i>\nor <i>nbytes</i> is invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EIO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>I/O error.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Out of memory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSPC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Out of disk space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESPIPE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fd</i> refers to something other than a regular file,\na block device, or a directory.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sync_file_range</b>()\nappeared on Linux in kernel 2.6.17.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall is Linux-specific, and should be avoided in portable\nprograms.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sync_file_range2()</b>\n<br>\nSome architectures (e.g., PowerPC, ARM) need 64-bit\narguments to be aligned in a suitable pair of registers. On\nsuch architectures, the call signature of\n<b>sync_file_range</b>() shown in the SYNOPSIS would force a\nregister to be wasted as padding between the <i>fd</i> and\n<i>offset</i> arguments. (See <a href=\"https://man.page/2/syscall\">syscall(2)</a> for\ndetails.) Therefore, these architectures define a different\nsystem call that orders the arguments suitably:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>int\nsync_file_range2(int</b> <i>fd</i><b>, unsigned int</b>\n<i>flags</i><b>, <br>\noff64_t</b> <i>offset</i><b>, off64_t</b>\n<i>nbytes</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The behavior of\nthis system call is otherwise exactly the same as\n<b>sync_file_range</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A system call\nwith this signature first appeared on the ARM architecture\nin Linux 2.6.20, with the name <b>arm_sync_file_range</b>().\nIt was renamed in Linux 2.6.22, when the analogous system\ncall was added for PowerPC. On architectures where glibc\nsupport is provided, glibc transparently wraps\n<b>sync_file_range2</b>() under the name\n<b>sync_file_range</b>().</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/fdatasync\">fdatasync(2)</a>,\n<a href=\"https://man.page/2/fsync\">fsync(2)</a>, <a href=\"https://man.page/2/msync\">msync(2)</a>, <a href=\"https://man.page/2/sync\">sync(2)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}