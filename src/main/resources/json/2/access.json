{"name":"access","body":"\n\n<h1 align=\"center\">ACCESS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">access,\nfaccessat, faccessat2 - check user&rsquo;s permissions for a\nfile</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\naccess(const char *</b><i>pathname</i><b>, int</b>\n<i>mode</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;fcntl.h&gt;</b> /* Definition of AT_* constants */\n<b><br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfaccessat(int</b> <i>dirfd</i><b>, const char\n*</b><i>pathname</i><b>, int</b> <i>mode</i><b>, int</b>\n<i>flags</i><b>);</b> <br>\n/* But see C library/kernel differences, below */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfaccessat2(int</b> <i>dirfd</i><b>, const char\n*</b><i>pathname</i><b>, int</b> <i>mode</i><b>, int</b>\n<i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>faccessat</b>():</p>\n\n<p style=\"margin-left:17%;\">Since glibc 2.10:</p>\n\n\n<p style=\"margin-left:23%;\">_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;200809L</p>\n\n<p style=\"margin-left:17%;\">Before glibc 2.10:</p>\n\n<p style=\"margin-left:23%;\">_ATFILE_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>access</b>()\nchecks whether the calling process can access the file\n<i>pathname</i>. If <i>pathname</i> is a symbolic link, it\nis dereferenced.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>mode</i>\nspecifies the accessibility check(s) to be performed, and is\neither the value <b>F_OK</b>, or a mask consisting of the\nbitwise OR of one or more of <b>R_OK</b>, <b>W_OK</b>, and\n<b>X_OK</b>. <b>F_OK</b> tests for the existence of the\nfile. <b>R_OK</b>, <b>W_OK</b>, and <b>X_OK</b> test whether\nthe file exists and grants read, write, and execute\npermissions, respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The check is\ndone using the calling process&rsquo;s <i>real</i> UID and\nGID, rather than the effective IDs as is done when actually\nattempting an operation (e.g., <a href=\"https://man.page/2/open\">open(2)</a>) on the file.\nSimilarly, for the root user, the check uses the set of\npermitted capabilities rather than the set of effective\ncapabilities; and for non-root users, the check uses an\nempty set of capabilities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This allows\nset-user-ID programs and capability-endowed programs to\neasily determine the invoking user&rsquo;s authority. In\nother words, <b>access</b>() does not answer the &quot;can I\nread/write/execute this file?&quot; question. It answers a\nslightly different question: &quot;(assuming I&rsquo;m a\nsetuid binary) can <i>the user who invoked me</i>\nread/write/execute this file?&quot;, which gives set-user-ID\nprograms the possibility to prevent malicious users from\ncausing them to read files which users shouldn&rsquo;t be\nable to read.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the calling\nprocess is privileged (i.e., its real UID is zero), then an\n<b>X_OK</b> check is successful for a regular file if\nexecute permission is enabled for any of the file owner,\ngroup, or other.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>faccessat()\n<br>\nfaccessat</b>() operates in exactly the same way as\n<b>access</b>(), except for the differences described\nhere.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the pathname\ngiven in <i>pathname</i> is relative, then it is interpreted\nrelative to the directory referred to by the file descriptor\n<i>dirfd</i> (rather than relative to the current working\ndirectory of the calling process, as is done by\n<b>access</b>() for a relative pathname).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>pathname</i> is relative and <i>dirfd</i> is the special\nvalue <b>AT_FDCWD</b>, then <i>pathname</i> is interpreted\nrelative to the current working directory of the calling\nprocess (like <b>access</b>()).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>pathname</i> is absolute, then <i>dirfd</i> is\nignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>flags</i> is\nconstructed by ORing together zero or more of the following\nvalues: <b><br>\nAT_EACCESS</b></p>\n\n<p style=\"margin-left:22%;\">Perform access checks using the\neffective user and group IDs. By default, <b>faccessat</b>()\nuses the real IDs (like <b>access</b>()).</p>\n\n<p style=\"margin-left:11%;\"><b>AT_SYMLINK_NOFOLLOW</b></p>\n\n<p style=\"margin-left:22%;\">If <i>pathname</i> is a\nsymbolic link, do not dereference it: instead return\ninformation about the link itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/openat\">openat(2)</a> for an explanation of the need for\n<b>faccessat</b>().</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>faccessat2()</b>\n<br>\nThe description of <b>faccessat</b>() given above\ncorresponds to POSIX.1 and to the implementation provided by\nglibc. However, the glibc implementation was an imperfect\nemulation (see BUGS) that papered over the fact that the raw\nLinux <b>faccessat</b>() system call does not have a\n<i>flags</i> argument. To allow for a proper implementation,\nLinux 5.8 added the <b>faccessat2</b>() system call, which\nsupports the <i>flags</i> argument and allows a correct\nimplementation of the <b>faccessat</b>() wrapper\nfunction.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success (all\nrequested permissions granted, or <i>mode</i> is <b>F_OK</b>\nand the file exists), zero is returned. On error (at least\none bit in <i>mode</i> asked for a permission that is\ndenied, or <i>mode</i> is <b>F_OK</b> and the file does not\nexist, or some other error occurred), -1 is returned, and\n<i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>access</b>()\nand <b>faccessat</b>() shall fail if:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The requested access would be denied to the file, or\nsearch permission is denied for one of the directories in\nthe path prefix of <i>pathname</i>. (See also\n<a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Too many symbolic links were encountered in resolving\n<i>pathname</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENAMETOOLONG</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> is too\nlong.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A component of <i>pathname</i> does not exist or is a\ndangling symbolic link.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\">A component used as a directory\nin <i>pathname</i> is not, in fact, a directory.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EROFS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Write permission was requested for a file on a read-only\nfilesystem.</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>access</b>()\nand <b>faccessat</b>() may fail if:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>pathname</i> points outside\nyour accessible address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>mode</i> was incorrectly specified.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EIO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An I/O error occurred.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Insufficient kernel memory was available.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ETXTBSY</b></p>\n\n<p style=\"margin-left:22%;\">Write access was requested to\nan executable which is being executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nadditional errors can occur for <b>faccessat</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"56%\">\n\n\n<p><i>dirfd</i> is not a valid file descriptor.</p></td>\n<td width=\"22%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"56%\">\n\n\n<p>Invalid flag specified in <i>flags</i>.</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> is relative and\n<i>dirfd</i> is a file descriptor referring to a file other\nthan a directory.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>faccessat</b>()\nwas added to Linux in kernel 2.6.16; library support was\nadded to glibc in version 2.4.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>faccessat2</b>()\nwas added to Linux in version 5.8.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>access</b>():\nSVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>faccessat</b>():\nPOSIX.1-2008.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>faccessat2</b>():\nLinux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Warning</b>:\nUsing these calls to check if a user is authorized to, for\nexample, open a file before actually doing so using\n<a href=\"https://man.page/2/open\">open(2)</a> creates a security hole, because the user\nmight exploit the short time interval between checking and\nopening the file to manipulate it. <b>For this reason, the\nuse of this system call should be avoided</b>. (In the\nexample just described, a safer alternative would be to\ntemporarily switch the process&rsquo;s effective user ID to\nthe real ID and then call <a href=\"https://man.page/2/open\">open(2)</a>.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>access</b>()\nalways dereferences symbolic links. If you need to check the\npermissions on a symbolic link, use <b>faccessat</b>() with\nthe flag <b>AT_SYMLINK_NOFOLLOW</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These calls\nreturn an error if any of the access types in <i>mode</i> is\ndenied, even if some of the other access types in\n<i>mode</i> are permitted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the calling\nprocess has appropriate privileges (i.e., is superuser),\nPOSIX.1-2001 permits an implementation to indicate success\nfor an <b>X_OK</b> check even if none of the execute file\npermission bits are set. Linux does not do this.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A file is\naccessible only if the permissions on each of the\ndirectories in the path prefix of <i>pathname</i> grant\nsearch (i.e., execute) access. If any directory is\ninaccessible, then the <b>access</b>() call fails,\nregardless of the permissions on the file itself.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only access\nbits are checked, not the file type or contents. Therefore,\nif a directory is found to be writable, it probably means\nthat files can be created in the directory, and not that the\ndirectory can be written as a file. Similarly, a DOS file\nmay be found to be &quot;executable,&quot; but the\n<a href=\"https://man.page/2/execve\">execve(2)</a> call will still fail.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These calls may\nnot work correctly on NFSv2 filesystems with UID mapping\nenabled, because UID mapping is done on the server and\nhidden from the client, which checks permissions. (NFS\nversions 3 and higher perform the check on the server.)\nSimilar problems can occur to FUSE mounts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nThe raw <b>faccessat</b>() system call takes only the first\nthree arguments. The <b>AT_EACCESS</b> and\n<b>AT_SYMLINK_NOFOLLOW</b> flags are actually implemented\nwithin the glibc wrapper function for <b>faccessat</b>(). If\neither of these flags is specified, then the wrapper\nfunction employs <a href=\"https://man.page/2/fstatat\">fstatat(2)</a> to determine access\npermissions, but see BUGS.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Glibc\nnotes</b> <br>\nOn older kernels where <b>faccessat</b>() is unavailable\n(and when the <b>AT_EACCESS</b> and\n<b>AT_SYMLINK_NOFOLLOW</b> flags are not specified), the\nglibc wrapper function falls back to the use of\n<b>access</b>(). When <i>pathname</i> is a relative\npathname, glibc constructs a pathname based on the symbolic\nlink in <i>/proc/self/fd</i> that corresponds to the\n<i>dirfd</i> argument.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because the\nLinux kernel&rsquo;s <b>faccessat</b>() system call does not\nsupport a <i>flags</i> argument, the glibc\n<b>faccessat</b>() wrapper function provided in glibc 2.32\nand earlier emulates the required functionality using a\ncombination of the <b>faccessat</b>() system call and\n<a href=\"https://man.page/2/fstatat\">fstatat(2)</a>. However, this emulation does not take\nACLs into account. Starting with glibc 2.33, the wrapper\nfunction avoids this bug by making use of the\n<b>faccessat2</b>() system call where it is provided by the\nunderlying kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In kernel 2.4\n(and earlier) there is some strangeness in the handling of\n<b>X_OK</b> tests for superuser. If all categories of\nexecute permission are disabled for a nondirectory file,\nthen the only <b>access</b>() test that returns -1 is when\n<i>mode</i> is specified as just <b>X_OK</b>; if <b>R_OK</b>\nor <b>W_OK</b> is also specified in <i>mode</i>, then\n<b>access</b>() returns 0 for such files. Early 2.6 kernels\n(up to and including 2.6.3) also behaved in the same way as\nkernel 2.4.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In kernels\nbefore 2.6.20, these calls ignored the effect of the\n<b>MS_NOEXEC</b> flag if it was used to <a href=\"https://man.page/2/mount\">mount(2)</a> the\nunderlying filesystem. Since kernel 2.6.20, the\n<b>MS_NOEXEC</b> flag is honored.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/chmod\">chmod(2)</a>,\n<a href=\"https://man.page/2/chown\">chown(2)</a>, <a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/2/setgid\">setgid(2)</a>,\n<a href=\"https://man.page/2/setuid\">setuid(2)</a>, <a href=\"https://man.page/2/stat\">stat(2)</a>, <a href=\"https://man.page/3/euidaccess\">euidaccess(3)</a>,\n<a href=\"https://man.page/7/credentials\">credentials(7)</a>, <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>,\n<a href=\"https://man.page/7/symlink\">symlink(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}