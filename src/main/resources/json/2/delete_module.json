{"name":"delete_module","body":"\n\n<h1 align=\"center\">DELETE_MODULE</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">delete_module -\nunload a kernel module</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ndelete_module(const char *</b><i>name</i><b>, int</b>\n<i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>: No\ndeclaration of this system call is provided in glibc\nheaders; see NOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>delete_module</b>() system call attempts to remove the\nunused loadable module entry identified by <i>name</i>. If\nthe module has an <i>exit</i> function, then that function\nis executed before unloading the module. The <i>flags</i>\nargument is used to modify the behavior of the system call,\nas described below. This system call requires privilege.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Module removal\nis attempted according to the following rules:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>If there are other loaded modules that depend on (i.e.,\nrefer to symbols defined in) this module, then the call\nfails.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Otherwise, if the reference count for the module (i.e.,\nthe number of processes currently using the module) is zero,\nthen the module is immediately unloaded.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>If a module has a nonzero reference count, then the\nbehavior depends on the bits set in <i>flags</i>. In normal\nusage (see NOTES), the <b>O_NONBLOCK</b> flag is always\nspecified, and the <b>O_TRUNC</b> flag may additionally be\nspecified.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The various\ncombinations for <i>flags</i> have the following effect:\n<b><br>\nflags == O_NONBLOCK</b></p>\n\n<p style=\"margin-left:28%;\">The call returns immediately,\nwith an error.</p>\n\n<p style=\"margin-left:17%;\"><b>flags == (O_NONBLOCK |\nO_TRUNC)</b></p>\n\n<p style=\"margin-left:28%;\">The module is unloaded\nimmediately, regardless of whether it has a nonzero\nreference count.</p>\n\n<p style=\"margin-left:17%;\"><b>(flags &amp; O_NONBLOCK) ==\n0</b></p>\n\n<p style=\"margin-left:28%;\">If <i>flags</i> does not\nspecify <b>O_NONBLOCK</b>, the following steps occur:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>The module is marked so that no new references are\npermitted.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>If the module&rsquo;s reference count is nonzero, the\ncaller is placed in an uninterruptible sleep state\n(<b>TASK_UNINTERRUPTIBLE</b>) until the reference count is\nzero, at which point the call unblocks.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"28%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>The module is unloaded in the usual way.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>O_TRUNC</b> flag has one further effect on the rules\ndescribed above. By default, if a module has an <i>init</i>\nfunction but no <i>exit</i> function, then an attempt to\nremove the module fails. However, if <b>O_TRUNC</b> was\nspecified, this requirement is bypassed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\n<b>O_TRUNC</b> flag is dangerous! If the kernel was not\nbuilt with <b>CONFIG_MODULE_FORCE_UNLOAD</b>, this flag is\nsilently ignored. (Normally,\n<b>CONFIG_MODULE_FORCE_UNLOAD</b> is enabled.) Using this\nflag taints the kernel (TAINT_FORCED_RMMOD).</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned and <i>errno</i>\nis set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The module is not\n&quot;live&quot; (i.e., it is still being initialized or is\nalready marked for removal); or, the module has an\n<i>init</i> function but has no <i>exit</i> function, and\n<b>O_TRUNC</b> was not specified in <i>flags</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>name</i> refers to a location outside the\nprocess&rsquo;s accessible address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>No module by that name exists.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller was not privileged (did not have the\n<b>CAP_SYS_MODULE</b> capability), or module unloading is\ndisabled (see <i>/proc/sys/kernel/modules_disabled</i> in\n<a href=\"https://man.page/5/proc\">proc(5)</a>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EWOULDBLOCK</b></p>\n\n<p style=\"margin-left:22%;\">Other modules depend on this\nmodule; or, <b>O_NONBLOCK</b> was specified in <i>flags</i>,\nbut the reference count of this module is nonzero and\n<b>O_TRUNC</b> was not specified in <i>flags</i>.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>delete_module</b>()\nis Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>delete_module</b>() system call is not supported by\nglibc. No declaration is provided in glibc headers, but,\nthrough a quirk of history, glibc versions before 2.23 did\nexport an ABI for this system call. Therefore, in order to\nemploy this system call, it is (before glibc 2.23)\nsufficient to manually declare the interface in your code;\nalternatively, you can invoke the system call using\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nuninterruptible sleep that may occur if <b>O_NONBLOCK</b> is\nomitted from <i>flags</i> is considered undesirable, because\nthe sleeping process is left in an unkillable state. As at\nLinux 3.7, specifying <b>O_NONBLOCK</b> is optional, but in\nfuture kernels it is likely to become mandatory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux 2.4\nand earlier</b> <br>\nIn Linux 2.4 and earlier, the system call took only one\nargument:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ndelete_module(const char *</b><i>name</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>name</i>\nis NULL, all unused modules marked auto-clean are\nremoved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some further\ndetails of differences in the behavior of\n<b>delete_module</b>() in Linux 2.4 and earlier are\n<i>not</i> currently explained in this manual page.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/create_module\">create_module(2)</a>,\n<a href=\"https://man.page/2/init_module\">init_module(2)</a>, <a href=\"https://man.page/2/query_module\">query_module(2)</a>,\n<b>lsmod</b>(8), <b>modprobe</b>(8), <b>rmmod</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}