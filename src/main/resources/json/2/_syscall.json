{"name":"_syscall","description":"_syscall - invoking a system call without library support (OBSOLETE)","body":"\n\n<h1 align=\"center\">_SYSCALL</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">_syscall -\ninvoking a system call without library support\n(OBSOLETE)</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;linux/unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A _syscall\nmacro</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">desired system\ncall</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The important\nthing to know about a system call is its prototype. You need\nto know how many arguments, their types, and the function\nreturn type. There are seven macros that make the actual\ncall into the system easier. They have the form:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">_syscall<i>X</i>(<i>type</i>,<i>name</i>,<i>type1</i>,<i>arg1</i>,<i>type2</i>,<i>arg2</i>,...)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>X</i> is\n0&ndash;6, which are the number of arguments taken by the\nsystem call</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>type</i> is\nthe return type of the system call</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>name</i> is\nthe name of the system call</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>typeN</i> is\nthe Nth argument&rsquo;s type</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>argN</i> is\nthe name of the Nth argument</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These macros\ncreate a function called <i>name</i> with the arguments you\nspecify. Once you include the _syscall() in your source\nfile, you call the system call by <i>name</i>.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/usr/include/linux/unistd.h</i></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The use of\nthese macros is Linux-specific, and deprecated.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Starting around\nkernel 2.6.18, the _syscall macros were removed from header\nfiles supplied to user space. Use <a href=\"https://man.page/2/syscall\">syscall(2)</a> instead.\n(Some architectures, notably ia64, never provided the\n_syscall macros; on those architectures, <a href=\"https://man.page/2/syscall\">syscall(2)</a>\nwas always required.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The _syscall()\nmacros <i>do not</i> produce a prototype. You may have to\ncreate one, especially for C++ users.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">System calls\nare not required to return only positive or negative error\ncodes. You need to read the source to be sure how it will\nreturn errors. Usually, it is the negative of a standard\nerror code, for example, -<i>EPERM</i>. The _syscall()\nmacros will return the result <i>r</i> of the system call\nwhen <i>r</i> is nonnegative, but will return -1 and set the\nvariable <i>errno</i> to -<i>r</i> when <i>r</i> is\nnegative. For the error codes, see <a href=\"https://man.page/3/errno\">errno(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When defining a\nsystem call, the argument types <i>must</i> be passed\nby-value or by-pointer (for aggregates like structs).</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;errno.h&gt; <br>\n#include &lt;linux/unistd.h&gt; /* for _syscallX\nmacros/related stuff */ <br>\n#include &lt;linux/kernel.h&gt; /* for struct sysinfo */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">_syscall1(int,\nsysinfo, struct sysinfo *, info);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(void) <br>\n{ <br>\nstruct sysinfo s_info; <br>\nint error;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">error =\nsysinfo(&amp;s_info); <br>\nprintf(&quot;code error = %d\\n&quot;, error); <br>\nprintf(&quot;Uptime = %lds\\nLoad: 1 min %lu / 5 min %lu / 15\nmin %lu\\n&quot; <br>\n&quot;RAM: total %lu / free %lu / shared %lu\\n&quot; <br>\n&quot;Memory in buffers = %lu\\nSwap: total %lu / free\n%lu\\n&quot; <br>\n&quot;Number of processes = %d\\n&quot;, <br>\ns_info.uptime, s_info.loads[0], <br>\ns_info.loads[1], s_info.loads[2], <br>\ns_info.totalram, s_info.freeram, <br>\ns_info.sharedram, s_info.bufferram, <br>\ns_info.totalswap, s_info.freeswap, <br>\ns_info.procs); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Sample\noutput</b> <br>\ncode error = 0 <br>\nuptime = 502034s <br>\nLoad: 1 min 13376 / 5 min 5504 / 15 min 1152 <br>\nRAM: total 15343616 / free 827392 / shared 8237056 <br>\nMemory in buffers = 5066752 <br>\nSwap: total 27881472 / free 24698880 <br>\nNumber of processes = 40</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/intro\">intro(2)</a>,\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>, <a href=\"https://man.page/3/errno\">errno(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}