{"name":"epoll_wait","description":"epoll_wait,\nepoll_pwait - wait for an I/O event on an epoll file\ndescriptor","body":"\n\n<h1 align=\"center\">EPOLL_WAIT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">epoll_wait,\nepoll_pwait - wait for an I/O event on an epoll file\ndescriptor</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/epoll.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nepoll_wait(int</b> <i>epfd</i><b>, struct epoll_event\n*</b><i>events</i><b>, <br>\nint</b> <i>maxevents</i><b>, int</b> <i>timeout</i><b>);\n<br>\nint epoll_pwait(int</b> <i>epfd</i><b>, struct epoll_event\n*</b><i>events</i><b>, <br>\nint</b> <i>maxevents</i><b>, int</b> <i>timeout</i><b>, <br>\nconst sigset_t *</b><i>sigmask</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>epoll_wait</b>() system call waits for events on the\n<a href=\"https://man.page/7/epoll\">epoll(7)</a> instance referred to by the file descriptor\n<i>epfd</i>. The buffer pointed to by <i>events</i> is used\nto return information from the ready list about file\ndescriptors in the interest list that have some events\navailable. Up to <i>maxevents</i> are returned by\n<b>epoll_wait</b>(). The <i>maxevents</i> argument must be\ngreater than zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>timeout</i> argument specifies the number of milliseconds\nthat <b>epoll_wait</b>() will block. Time is measured\nagainst the <b>CLOCK_MONOTONIC</b> clock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A call to\n<b>epoll_wait</b>() will block until either:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p>a file descriptor delivers an event;</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p>the call is interrupted by a signal handler; or</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"72%\">\n\n\n<p>the timeout expires.</p></td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\n<i>timeout</i> interval will be rounded up to the system\nclock granularity, and kernel scheduling delays mean that\nthe blocking interval may overrun by a small amount.\nSpecifying a <i>timeout</i> of -1 causes <b>epoll_wait</b>()\nto block indefinitely, while specifying a <i>timeout</i>\nequal to zero cause <b>epoll_wait</b>() to return\nimmediately, even if no events are available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>struct\nepoll_event</i> is defined as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef union\nepoll_data { <br>\nvoid *ptr; <br>\nint fd; <br>\nuint32_t u32; <br>\nuint64_t u64; <br>\n} epoll_data_t;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nepoll_event { <br>\nuint32_t events; /* Epoll events */ <br>\nepoll_data_t data; /* User data variable */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>data</i>\nfield of each returned <i>epoll_event</i> structure contains\nthe same data as was specified in the most recent call to\n<a href=\"https://man.page/2/epoll_ctl\">epoll_ctl(2)</a> (<b>EPOLL_CTL_ADD</b>,\n<b>EPOLL_CTL_MOD</b>) for the corresponding open file\ndescriptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>events</i> field is a bit mask that indicates the events\nthat have occurred for the corresponding open file\ndescription. See <a href=\"https://man.page/2/epoll_ctl\">epoll_ctl(2)</a> for a list of the bits\nthat may appear in this mask.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>epoll_pwait()</b>\n<br>\nThe relationship between <b>epoll_wait</b>() and\n<b>epoll_pwait</b>() is analogous to the relationship\nbetween <a href=\"https://man.page/2/select\">select(2)</a> and <a href=\"https://man.page/2/pselect\">pselect(2)</a>: like\n<a href=\"https://man.page/2/pselect\">pselect(2)</a>, <b>epoll_pwait</b>() allows an\napplication to safely wait until either a file descriptor\nbecomes ready or until a signal is caught.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\n<b>epoll_pwait</b>() call:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ready =\nepoll_pwait(epfd, &amp;events, maxevents, timeout,\n&amp;sigmask);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">is equivalent\nto <i>atomically</i> executing the following calls:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sigset_t\norigmask;</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">pthread_sigmask(SIG_SETMASK,\n&amp;sigmask, &amp;origmask); <br>\nready = epoll_wait(epfd, &amp;events, maxevents, timeout);\n<br>\npthread_sigmask(SIG_SETMASK, &amp;origmask, NULL);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>sigmask</i> argument may be specified as NULL, in which\ncase <b>epoll_pwait</b>() is equivalent to\n<b>epoll_wait</b>().</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\nsuccessful, <b>epoll_wait</b>() returns the number of file\ndescriptors ready for the requested I/O, or zero if no file\ndescriptor became ready during the requested <i>timeout</i>\nmilliseconds. When an error occurs, <b>epoll_wait</b>()\nreturns -1 and <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>epfd</i> is not a valid file\ndescriptor.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The memory area pointed to by <i>events</i> is not\naccessible with write permissions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The call was interrupted by a signal handler before\neither (1) any of the requested events occurred or (2) the\n<i>timeout</i> expired; see <a href=\"https://man.page/7/signal\">signal(7)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>epfd</i> is not an <b>epoll</b> file descriptor, or\n<i>maxevents</i> is less than or equal to zero.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>epoll_wait</b>()\nwas added to the kernel in version 2.6. Library support is\nprovided in glibc starting with version 2.3.2.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>epoll_pwait</b>()\nwas added to Linux in kernel 2.6.19. Library support is\nprovided in glibc starting with version 2.6.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>epoll_wait</b>()\nis Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">While one\nthread is blocked in a call to <b>epoll_wait</b>(), it is\npossible for another thread to add a file descriptor to the\nwaited-upon <b>epoll</b> instance. If the new file\ndescriptor becomes ready, it will cause the\n<b>epoll_wait</b>() call to unblock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If more than\n<i>maxevents</i> file descriptors are ready when\n<b>epoll_wait</b>() is called, then successive\n<b>epoll_wait</b>() calls will round robin through the set\nof ready file descriptors. This behavior helps avoid\nstarvation scenarios, where a process fails to notice that\nadditional file descriptors are ready because it focuses on\na set of file descriptors that are already known to be\nready.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that it is\npossible to call <b>epoll_wait</b>() on an <b>epoll</b>\ninstance whose interest list is currently empty (or whose\ninterest list becomes empty because file descriptors are\nclosed or removed from the interest in another thread). The\ncall will block until some file descriptor is later added to\nthe interest list (in another thread) and that file\ndescriptor becomes ready.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In kernels\nbefore 2.6.37, a <i>timeout</i> value larger than\napproximately <i>LONG_MAX / HZ</i> milliseconds is treated\nas -1 (i.e., infinity). Thus, for example, on a system where\n<i>sizeof(long)</i> is 4 and the kernel <i>HZ</i> value is\n1000, this means that timeouts greater than 35.79 minutes\nare treated as infinity.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nThe raw <b>epoll_pwait</b>() system call has a sixth\nargument, <i>size_t sigsetsize</i>, which specifies the size\nin bytes of the <i>sigmask</i> argument. The glibc\n<b>epoll_pwait</b>() wrapper function specifies this\nargument as a fixed value (equal to\n<i>sizeof(sigset_t)</i>).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/epoll_create\">epoll_create(2)</a>,\n<a href=\"https://man.page/2/epoll_ctl\">epoll_ctl(2)</a>, <a href=\"https://man.page/7/epoll\">epoll(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}