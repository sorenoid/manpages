{"name":"umount","body":"\n\n<h1 align=\"center\">UMOUNT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">umount, umount2\n- unmount filesystem</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/mount.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\numount(const char *</b><i>target</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\numount2(const char *</b><i>target</i><b>, int</b>\n<i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>umount</b>()\nand <b>umount2</b>() remove the attachment of the (topmost)\nfilesystem mounted on <i>target</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Appropriate\nprivilege (Linux: the <b>CAP_SYS_ADMIN</b> capability) is\nrequired to unmount filesystems.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux 2.1.116\nadded the <b>umount2</b>() system call, which, like\n<b>umount</b>(), unmounts a target, but allows additional\n<i>flags</i> controlling the behavior of the operation:\n<b><br>\nMNT_FORCE</b> (since Linux 2.1.116)</p>\n\n<p style=\"margin-left:22%;\">Ask the filesystem to abort\npending requests before attempting the unmount. This may\nallow the unmount to complete without waiting for an\ninaccessible server, but could cause data loss. If, after\naborting requests, some processes still have active\nreferences to the filesystem, the unmount will still fail.\nAs at Linux 4.12, <b>MNT_FORCE</b> is supported only on the\nfollowing filesystems: 9p (since Linux 2.6.16), ceph (since\nLinux 2.6.34), cifs (since Linux 2.6.12), fuse (since Linux\n2.6.16), lustre (since Linux 3.11), and NFS (since Linux\n2.1.116).</p>\n\n<p style=\"margin-left:11%;\"><b>MNT_DETACH</b> (since Linux\n2.4.11)</p>\n\n<p style=\"margin-left:22%;\">Perform a lazy unmount: make\nthe mount point unavailable for new accesses, immediately\ndisconnect the filesystem and all filesystems mounted below\nit from each other and from the mount table, and actually\nperform the unmount when the mount point ceases to be\nbusy.</p>\n\n<p style=\"margin-left:11%;\"><b>MNT_EXPIRE</b> (since Linux\n2.6.8)</p>\n\n<p style=\"margin-left:22%;\">Mark the mount point as\nexpired. If a mount point is not currently in use, then an\ninitial call to <b>umount2</b>() with this flag fails with\nthe error <b>EAGAIN</b>, but marks the mount point as\nexpired. The mount point remains expired as long as it\nisn&rsquo;t accessed by any process. A second\n<b>umount2</b>() call specifying <b>MNT_EXPIRE</b> unmounts\nan expired mount point. This flag cannot be specified with\neither <b>MNT_FORCE</b> or <b>MNT_DETACH</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>UMOUNT_NOFOLLOW</b> (since\nLinux 2.6.34)</p>\n\n<p style=\"margin-left:22%;\">Don&rsquo;t dereference\n<i>target</i> if it is a symbolic link. This flag allows\nsecurity problems to be avoided in set-user-ID-<i>root</i>\nprograms that allow unprivileged users to unmount\nfilesystems.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, and <i>errno</i>\nis set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The error\nvalues given below result from filesystem type independent\nerrors. Each filesystem type may have its own special errors\nand its own special behavior. See the Linux kernel source\ncode for details.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A call to <b>umount2</b>() specifying <b>MNT_EXPIRE</b>\nsuccessfully marked an unbusy filesystem as expired.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>target</i> could not be unmounted because it is\nbusy.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>target</i> points outside the user address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>target</i> is not a mount point.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>umount2</b>() was called with <b>MNT_EXPIRE</b> and\neither <b>MNT_DETACH</b> or <b>MNT_FORCE</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EINVAL</b> (since Linux\n2.6.34)</p>\n\n<p style=\"margin-left:22%;\"><b>umount2</b>() was called\nwith an invalid flag value in <i>flags</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>ENAMETOOLONG</b></p>\n\n<p style=\"margin-left:22%;\">A pathname was longer than\n<b>MAXPATHLEN</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A pathname was empty or had a nonexistent component.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The kernel could not allocate a free page to copy\nfilenames or data into.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller does not have the required privileges.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MNT_DETACH</b>\nand <b>MNT_EXPIRE</b> are available in glibc since version\n2.11.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nare Linux-specific and should not be used in programs\nintended to be portable.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>umount() and\nshared mount points</b> <br>\nShared mount points cause any mount activity on a mount\npoint, including <b>umount</b>() operations, to be forwarded\nto every shared mount point in the peer group and every\nslave mount of that peer group. This means that\n<b>umount</b>() of any peer in a set of shared mounts will\ncause all of its peers to be unmounted and all of their\nslaves to be unmounted as well.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\npropagation of unmount activity can be particularly\nsurprising on systems where every mount point is shared by\ndefault. On such systems, recursively bind mounting the root\ndirectory of the filesystem onto a subdirectory and then\nlater unmounting that subdirectory with <b>MNT_DETACH</b>\nwill cause every mount in the mount namespace to be lazily\nunmounted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To ensure\n<b>umount</b>() does not propagate in this fashion, the\nmount point may be remounted using a <a href=\"https://man.page/2/mount\">mount(2)</a> call\nwith a <i>mount_flags</i> argument that includes both\n<b>MS_REC</b> and <b>MS_PRIVATE</b> prior to <b>umount</b>()\nbeing called.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Historical\ndetails</b> <br>\nThe original <b>umount</b>() function was called as\n<i>umount(device)</i> and would return <b>ENOTBLK</b> when\ncalled with something other than a block device. In Linux\n0.98p4, a call <i>umount(dir)</i> was added, in order to\nsupport anonymous devices. In Linux 2.3.99-pre7, the call\n<i>umount(device)</i> was removed, leaving only\n<i>umount(dir)</i> (since now devices can be mounted in more\nthan one place, so specifying the device does not\nsuffice).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/mount\">mount(2)</a>,\n<a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>, <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>,\n<b>mount</b>(8), <b>umount</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}