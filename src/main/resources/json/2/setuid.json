{"name":"setuid","description":"setuid - set user identity","body":"\n\n<h1 align=\"center\">SETUID</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">setuid - set\nuser identity</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsetuid(uid_t</b> <i>uid</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>setuid</b>()\nsets the effective user ID of the calling process. If the\ncalling process is privileged (more precisely: if the\nprocess has the <b>CAP_SETUID</b> capability in its user\nnamespace), the real UID and saved set-user-ID are also\nset.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Under Linux,\n<b>setuid</b>() is implemented like the POSIX version with\nthe <b>_POSIX_SAVED_IDS</b> feature. This allows a\nset-user-ID (other than root) program to drop all of its\nuser privileges, do some un-privileged work, and then\nreengage the original effective user ID in a secure\nmanner.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the user is\nroot or the program is set-user-ID-root, special care must\nbe taken: <b>setuid</b>() checks the effective user ID of\nthe caller and if it is the superuser, all process-related\nuser ID&rsquo;s are set to <i>uid</i>. After this has\noccurred, it is impossible for the program to regain root\nprivileges.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thus, a\nset-user-ID-root program wishing to temporarily drop root\nprivileges, assume the identity of an unprivileged user, and\nthen regain root privileges afterward cannot use\n<b>setuid</b>(). You can accomplish this with\n<a href=\"https://man.page/2/seteuid\">seteuid(2)</a>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, and <i>errno</i>\nis set appropriately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nthere are cases where <b>setuid</b>() can fail even when the\ncaller is UID 0; it is a grave security error to omit\nchecking for a failure return from <b>setuid</b>().</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The call would change the\ncaller&rsquo;s real UID (i.e., <i>uid</i> does not match the\ncaller&rsquo;s real UID), but there was a temporary failure\nallocating the necessary kernel data structures.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>uid</i> does not match the real user ID of the caller\nand this call would bring the number of processes belonging\nto the real user ID <i>uid</i> over the caller&rsquo;s\n<b>RLIMIT_NPROC</b> resource limit. Since Linux 3.1, this\nerror case no longer occurs (but robust applications should\ncheck for this error); see the description of <b>EAGAIN</b>\nin <a href=\"https://man.page/2/execve\">execve(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The user ID specified in <i>uid</i> is not valid in this\nuser namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The user is not privileged (Linux: does not have the\n<b>CAP_SETUID</b> capability in its user namespace) and\n<i>uid</i> does not match the real UID or saved set-user-ID\nof the calling process.</p></td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4. Not quite compatible with the 4.4BSD\ncall, which sets all of the real, saved, and effective user\nIDs.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux has the\nconcept of the filesystem user ID, normally equal to the\neffective user ID. The <b>setuid</b>() call also sets the\nfilesystem user ID of the calling process. See\n<a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>uid</i>\nis different from the old effective UID, the process will be\nforbidden from leaving core dumps.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The original\nLinux <b>setuid</b>() system call supported only 16-bit user\nIDs. Subsequently, Linux 2.4 added <b>setuid32</b>()\nsupporting 32-bit IDs. The glibc <b>setuid</b>() wrapper\nfunction transparently deals with the variation across\nkernel versions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nAt the kernel level, user IDs and group IDs are a per-thread\nattribute. However, POSIX requires that all threads in a\nprocess share the same credentials. The NPTL threading\nimplementation handles the POSIX requirements by providing\nwrapper functions for the various system calls that change\nprocess UIDs and GIDs. These wrapper functions (including\nthe one for <b>setuid</b>()) employ a signal-based technique\nto ensure that when one thread changes credentials, all of\nthe other threads in the process also change their\ncredentials. For details, see <a href=\"https://man.page/7/nptl\">nptl(7)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/getuid\">getuid(2)</a>,\n<a href=\"https://man.page/2/seteuid\">seteuid(2)</a>, <a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a>, <a href=\"https://man.page/2/setreuid\">setreuid(2)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a>,\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}