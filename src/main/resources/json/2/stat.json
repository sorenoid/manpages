{"name":"stat","body":"\n\n<h1 align=\"center\">STAT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">stat, fstat,\nlstat, fstatat - get file status</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nstat(const char *</b><i>pathname</i><b>, struct stat\n*</b><i>statbuf</i><b>); <br>\nint fstat(int</b> <i>fd</i><b>, struct stat\n*</b><i>statbuf</i><b>); <br>\nint lstat(const char *</b><i>pathname</i><b>, struct stat\n*</b><i>statbuf</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;fcntl.h&gt;</b> /* Definition of AT_* constants */\n<b><br>\n#include &lt;sys/stat.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfstatat(int</b> <i>dirfd</i><b>, const char\n*</b><i>pathname</i><b>, struct stat *</b><i>statbuf</i><b>,\n<br>\nint</b> <i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>lstat</b>():</p>\n\n<p style=\"margin-left:17%;\">/* glibc 2.19 and earlier */\n_BSD_SOURCE <br>\n|| /* Since glibc 2.20 */ _DEFAULT_SOURCE <br>\n|| _XOPEN_SOURCE&nbsp;&gt;=&nbsp;500 <br>\n|| /* Since glibc 2.10: */\n_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;200112L</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fstatat</b>():</p>\n\n<p style=\"margin-left:17%;\">Since glibc 2.10:</p>\n\n\n<p style=\"margin-left:23%;\">_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;200809L</p>\n\n<p style=\"margin-left:17%;\">Before glibc 2.10:</p>\n\n<p style=\"margin-left:23%;\">_ATFILE_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These functions\nreturn information about a file, in the buffer pointed to by\n<i>statbuf</i>. No permissions are required on the file\nitself, but&mdash;in the case of <b>stat</b>(),\n<b>fstatat</b>(), and <b>lstat</b>()&mdash;execute (search)\npermission is required on all of the directories in\n<i>pathname</i> that lead to the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>stat</b>()\nand <b>fstatat</b>() retrieve information about the file\npointed to by <i>pathname</i>; the differences for\n<b>fstatat</b>() are described below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>lstat</b>()\nis identical to <b>stat</b>(), except that if\n<i>pathname</i> is a symbolic link, then it returns\ninformation about the link itself, not the file that the\nlink refers to.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fstat</b>()\nis identical to <b>stat</b>(), except that the file about\nwhich information is to be retrieved is specified by the\nfile descriptor <i>fd</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The stat\nstructure</b> <br>\nAll of these system calls return a <i>stat</i> structure,\nwhich contains the following fields:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct stat {\n<br>\ndev_t st_dev; /* ID of device containing file */ <br>\nino_t st_ino; /* Inode number */ <br>\nmode_t st_mode; /* File type and mode */ <br>\nnlink_t st_nlink; /* Number of hard links */ <br>\nuid_t st_uid; /* User ID of owner */ <br>\ngid_t st_gid; /* Group ID of owner */ <br>\ndev_t st_rdev; /* Device ID (if special file) */ <br>\noff_t st_size; /* Total size, in bytes */ <br>\nblksize_t st_blksize; /* Block size for filesystem I/O */\n<br>\nblkcnt_t st_blocks; /* Number of 512B blocks allocated\n*/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* Since Linux\n2.6, the kernel supports nanosecond <br>\nprecision for the following timestamp fields. <br>\nFor the details before Linux 2.6, see NOTES. */</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct timespec\nst_atim; /* Time of last access */ <br>\nstruct timespec st_mtim; /* Time of last modification */\n<br>\nstruct timespec st_ctim; /* Time of last status change\n*/</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#define\nst_atime st_atim.tv_sec /* Backward compatibility */ <br>\n#define st_mtime st_mtim.tv_sec <br>\n#define st_ctime st_ctim.tv_sec <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nthe order of fields in the <i>stat</i> structure varies\nsomewhat across architectures. In addition, the definition\nabove does not show the padding bytes that may be present\nbetween some fields on various architectures. Consult the\nglibc and kernel source code if you need to know the\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nfor performance and simplicity reasons, different fields in\nthe <i>stat</i> structure may contain state information from\ndifferent moments during the execution of the system call.\nFor example, if <i>st_mode</i> or <i>st_uid</i> is changed\nby another process by calling <a href=\"https://man.page/2/chmod\">chmod(2)</a> or\n<a href=\"https://man.page/2/chown\">chown(2)</a>, <b>stat</b>() might return the old\n<i>st_mode</i> together with the new <i>st_uid</i>, or the\nold <i>st_uid</i> together with the new <i>st_mode</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fields in\nthe <i>stat</i> structure are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>st_dev</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This field describes the device on which this file\nresides. (The <a href=\"https://man.page/3/major\">major(3)</a> and <a href=\"https://man.page/3/minor\">minor(3)</a> macros may\nbe useful to decompose the device ID in this field.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>st_ino</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This field contains the file&rsquo;s inode number.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>st_mode</i></p>\n\n<p style=\"margin-left:22%;\">This field contains the file\ntype and mode. See <a href=\"https://man.page/7/inode\">inode(7)</a> for further\ninformation.</p>\n\n<p style=\"margin-left:11%;\"><i>st_nlink</i></p>\n\n<p style=\"margin-left:22%;\">This field contains the number\nof hard links to the file.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>st_uid</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This field contains the user ID of the owner of the\nfile.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>st_gid</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This field contains the ID of the group owner of the\nfile.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>st_rdev</i></p>\n\n<p style=\"margin-left:22%;\">This field describes the device\nthat this file (inode) represents.</p>\n\n<p style=\"margin-left:11%;\"><i>st_size</i></p>\n\n<p style=\"margin-left:22%;\">This field gives the size of\nthe file (if it is a regular file or a symbolic link) in\nbytes. The size of a symbolic link is the length of the\npathname it contains, without a terminating null byte.</p>\n\n<p style=\"margin-left:11%;\"><i>st_blksize</i></p>\n\n<p style=\"margin-left:22%;\">This field gives the\n&quot;preferred&quot; block size for efficient filesystem\nI/O.</p>\n\n<p style=\"margin-left:11%;\"><i>st_blocks</i></p>\n\n<p style=\"margin-left:22%;\">This field indicates the number\nof blocks allocated to the file, in 512-byte units. (This\nmay be smaller than <i>st_size</i>/512 when the file has\nholes.)</p>\n\n<p style=\"margin-left:11%;\"><i>st_atime</i></p>\n\n<p style=\"margin-left:22%;\">This is the time of the last\naccess of file data.</p>\n\n<p style=\"margin-left:11%;\"><i>st_mtime</i></p>\n\n<p style=\"margin-left:22%;\">This is the time of last\nmodification of file data.</p>\n\n<p style=\"margin-left:11%;\"><i>st_ctime</i></p>\n\n<p style=\"margin-left:22%;\">This is the file&rsquo;s last\nstatus change timestamp (time of last change to the\ninode).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For further\ninformation on the above fields, see <a href=\"https://man.page/7/inode\">inode(7)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fstatat()</b>\n<br>\nThe <b>fstatat</b>() system call is a more general interface\nfor accessing file information which can still provide\nexactly the behavior of each of <b>stat</b>(),\n<b>lstat</b>(), and <b>fstat</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the pathname\ngiven in <i>pathname</i> is relative, then it is interpreted\nrelative to the directory referred to by the file descriptor\n<i>dirfd</i> (rather than relative to the current working\ndirectory of the calling process, as is done by\n<b>stat</b>() and <b>lstat</b>() for a relative\npathname).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>pathname</i> is relative and <i>dirfd</i> is the special\nvalue <b>AT_FDCWD</b>, then <i>pathname</i> is interpreted\nrelative to the current working directory of the calling\nprocess (like <b>stat</b>() and <b>lstat</b>()).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>pathname</i> is absolute, then <i>dirfd</i> is\nignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>flags</i>\ncan either be 0, or include one or more of the following\nflags ORed: <b><br>\nAT_EMPTY_PATH</b> (since Linux 2.6.39)</p>\n\n<p style=\"margin-left:22%;\">If <i>pathname</i> is an empty\nstring, operate on the file referred to by <i>dirfd</i>\n(which may have been obtained using the <a href=\"https://man.page/2/open\">open(2)</a>\n<b>O_PATH</b> flag). In this case, <i>dirfd</i> can refer to\nany type of file, not just a directory, and the behavior of\n<b>fstatat</b>() is similar to that of <b>fstat</b>(). If\n<i>dirfd</i> is <b>AT_FDCWD</b>, the call operates on the\ncurrent working directory. This flag is Linux-specific;\ndefine <b>_GNU_SOURCE</b> to obtain its definition.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_NO_AUTOMOUNT</b> (since\nLinux 2.6.38)</p>\n\n<p style=\"margin-left:22%;\">Don&rsquo;t automount the\nterminal (&quot;basename&quot;) component of <i>pathname</i>\nif it is a directory that is an automount point. This allows\nthe caller to gather attributes of an automount point\n(rather than the location it would mount). Since Linux 4.14,\nalso don&rsquo;t instantiate a nonexistent name in an\non-demand directory such as used for automounter indirect\nmaps. This flag has no effect if the mount point has already\nbeen mounted over.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Both\n<b>stat</b>() and <b>lstat</b>() act as though\n<b>AT_NO_AUTOMOUNT</b> was set.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>AT_NO_AUTOMOUNT</b> can be used in tools that scan\ndirectories to prevent mass-automounting of a directory of\nautomount points.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This flag is\nLinux-specific; define <b>_GNU_SOURCE</b> to obtain its\ndefinition.</p>\n\n<p style=\"margin-left:11%;\"><b>AT_SYMLINK_NOFOLLOW</b></p>\n\n<p style=\"margin-left:22%;\">If <i>pathname</i> is a\nsymbolic link, do not dereference it: instead return\ninformation about the link itself, like <b>lstat</b>(). (By\ndefault, <b>fstatat</b>() dereferences symbolic links, like\n<b>stat</b>().)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/openat\">openat(2)</a> for an explanation of the need for\n<b>fstatat</b>().</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, and <i>errno</i>\nis set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Search permission is denied for\none of the directories in the path prefix of\n<i>pathname</i>. (See also <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fd</i> is not a valid open file descriptor.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Bad address.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Too many symbolic links encountered while traversing the\npath.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENAMETOOLONG</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> is too\nlong.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A component of <i>pathname</i> does not exist or is a\ndangling symbolic link.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> is an empty string and\n<b>AT_EMPTY_PATH</b> was not specified in <i>flags</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Out of memory (i.e., kernel memory).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\">A component of the path prefix\nof <i>pathname</i> is not a directory.</p>\n\n<p style=\"margin-left:11%;\"><b>EOVERFLOW</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> or <i>fd</i>\nrefers to a file whose size, inode number, or number of\nblocks cannot be represented in, respectively, the types\n<i>off_t</i>, <i>ino_t</i>, or <i>blkcnt_t</i>. This error\ncan occur when, for example, an application compiled on a\n32-bit platform without <i>-D_FILE_OFFSET_BITS=64</i> calls\n<b>stat</b>() on a file whose size exceeds\n<i>(1&lt;&lt;31)-1</i> bytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nadditional errors can occur for <b>fstatat</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"56%\">\n\n\n<p><i>dirfd</i> is not a valid file descriptor.</p></td>\n<td width=\"22%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"56%\">\n\n\n<p>Invalid flag specified in <i>flags</i>.</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> is relative and\n<i>dirfd</i> is a file descriptor referring to a file other\nthan a directory.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fstatat</b>()\nwas added to Linux in kernel 2.6.16; library support was\nadded to glibc in version 2.4.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>stat</b>(),\n<b>fstat</b>(), <b>lstat</b>(): SVr4, 4.3BSD, POSIX.1-2001,\nPOSIX.1.2008.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fstatat</b>():\nPOSIX.1-2008.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX.1-2001, <b>lstat</b>() on a symbolic link need return\nvalid information only in the <i>st_size</i> field and the\nfile type of the <i>st_mode</i> field of the <i>stat</i>\nstructure. POSIX.1-2008 tightens the specification,\nrequiring <b>lstat</b>() to return valid information in all\nfields except the mode bits in <i>st_mode</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use of the\n<i>st_blocks</i> and <i>st_blksize</i> fields may be less\nportable. (They were introduced in BSD. The interpretation\ndiffers between systems, and possibly on a single system\nwhen NFS mounts are involved.)</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Timestamp\nfields</b> <br>\nOlder kernels and older standards did not support nanosecond\ntimestamp fields. Instead, there were three timestamp\nfields&mdash;<i>st_atime</i>, <i>st_mtime</i>, and\n<i>st_ctime</i>&mdash;typed as <i>time_t</i> that recorded\ntimestamps with one-second precision.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since kernel\n2.5.48, the <i>stat</i> structure supports nanosecond\nresolution for the three file timestamp fields. The\nnanosecond components of each timestamp are available via\nnames of the form <i>st_atim.tv_nsec</i>, if suitable\nfeature test macros are defined. Nanosecond timestamps were\nstandardized in POSIX.1-2008, and, starting with version\n2.12, glibc exposes the nanosecond component names if\n<b>_POSIX_C_SOURCE</b> is defined with the value 200809L or\ngreater, or <b>_XOPEN_SOURCE</b> is defined with the value\n700 or greater. Up to and including glibc 2.19, the\ndefinitions of the nanoseconds components are also defined\nif <b>_BSD_SOURCE</b> or <b>_SVID_SOURCE</b> is defined. If\nnone of the aforementioned macros are defined, then the\nnanosecond values are exposed with names of the form\n<i>st_atimensec</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nOver time, increases in the size of the <i>stat</i>\nstructure have led to three successive versions of\n<b>stat</b>(): <i>sys_stat</i>() (slot <i>__NR_oldstat</i>),\n<i>sys_newstat</i>() (slot <i>__NR_stat</i>), and\n<i>sys_stat64()</i> (slot <i>__NR_stat64</i>) on 32-bit\nplatforms such as i386. The first two versions were already\npresent in Linux 1.0 (albeit with different names); the last\nwas added in Linux 2.4. Similar remarks apply for\n<b>fstat</b>() and <b>lstat</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nkernel-internal versions of the <i>stat</i> structure dealt\nwith by the different versions are, respectively: <i><br>\n__old_kernel_stat</i></p>\n\n<p style=\"margin-left:22%;\">The original structure, with\nrather narrow fields, and no padding.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>stat</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Larger <i>st_ino</i> field and padding added to various\nparts of the structure to allow for future expansion.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>stat64</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Even larger <i>st_ino</i> field, larger <i>st_uid</i>\nand <i>st_gid</i> fields to accommodate the Linux-2.4\nexpansion of UIDs and GIDs to 32 bits, and various other\nenlarged fields and further padding in the structure.\n(Various padding bytes were eventually consumed in Linux\n2.6, with the advent of 32-bit device IDs and nanosecond\ncomponents for the timestamp fields.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The glibc\n<b>stat</b>() wrapper function hides these details from\napplications, invoking the most recent version of the system\ncall provided by the kernel, and repacking the returned\ninformation if required for old binaries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On modern\n64-bit systems, life is simpler: there is a single\n<b>stat</b>() system call and the kernel deals with a\n<i>stat</i> structure that contains fields of a sufficient\nsize.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The underlying\nsystem call employed by the glibc <b>fstatat</b>() wrapper\nfunction is actually called <b>fstatat64</b>() or, on some\narchitectures, <b>newfstatat</b>().</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nprogram calls <b>lstat</b>() and displays selected fields in\nthe returned <i>stat</i> structure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;sys/types.h&gt; <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;stdint.h&gt; <br>\n#include &lt;time.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;sys/sysmacros.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nstruct stat sb;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 2)\n{ <br>\nfprintf(stderr, &quot;Usage: %s &lt;pathname&gt;\\n&quot;,\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(lstat(argv[1], &amp;sb) == -1) { <br>\nperror(&quot;lstat&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;ID\nof containing device: [%jx,%jx]\\n&quot;, <br>\n(uintmax_t) major(sb.st_dev), <br>\n(uintmax_t) minor(sb.st_dev));</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;File\ntype: &quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">switch\n(sb.st_mode &amp; S_IFMT) { <br>\ncase S_IFBLK: printf(&quot;block device\\n&quot;); break;\n<br>\ncase S_IFCHR: printf(&quot;character device\\n&quot;); break;\n<br>\ncase S_IFDIR: printf(&quot;directory\\n&quot;); break; <br>\ncase S_IFIFO: printf(&quot;FIFO/pipe\\n&quot;); break; <br>\ncase S_IFLNK: printf(&quot;symlink\\n&quot;); break; <br>\ncase S_IFREG: printf(&quot;regular file\\n&quot;); break;\n<br>\ncase S_IFSOCK: printf(&quot;socket\\n&quot;); break; <br>\ndefault: printf(&quot;unknown?\\n&quot;); break; <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;I-node\nnumber: %ju\\n&quot;, (uintmax_t) sb.st_ino);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Mode:\n%jo (octal)\\n&quot;, <br>\n(uintmax_t) sb.st_mode);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Link\ncount: %ju\\n&quot;, (uintmax_t) sb.st_nlink); <br>\nprintf(&quot;Ownership: UID=%ju GID=%ju\\n&quot;, <br>\n(uintmax_t) sb.st_uid, (uintmax_t) sb.st_gid);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Preferred\nI/O block size: %jd bytes\\n&quot;, <br>\n(intmax_t) sb.st_blksize); <br>\nprintf(&quot;File size: %jd bytes\\n&quot;, <br>\n(intmax_t) sb.st_size); <br>\nprintf(&quot;Blocks allocated: %jd\\n&quot;, <br>\n(intmax_t) sb.st_blocks);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Last\nstatus change: %s&quot;, ctime(&amp;sb.st_ctime)); <br>\nprintf(&quot;Last file access: %s&quot;,\nctime(&amp;sb.st_atime)); <br>\nprintf(&quot;Last file modification: %s&quot;,\nctime(&amp;sb.st_mtime));</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/ls\">ls(1)</a>,\n<a href=\"https://man.page/1/stat\">stat(1)</a>, <a href=\"https://man.page/2/access\">access(2)</a>, <a href=\"https://man.page/2/chmod\">chmod(2)</a>,\n<a href=\"https://man.page/2/chown\">chown(2)</a>, <a href=\"https://man.page/2/readlink\">readlink(2)</a>, <a href=\"https://man.page/2/statx\">statx(2)</a>,\n<a href=\"https://man.page/2/utime\">utime(2)</a>, <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/inode\">inode(7)</a>,\n<a href=\"https://man.page/7/symlink\">symlink(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}