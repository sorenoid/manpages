{"name":"clock_getres","description":"clock_getres,\nclock_gettime, clock_settime - clock and time functions","body":"\n\n<h1 align=\"center\">CLOCK_GETRES</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">clock_getres,\nclock_gettime, clock_settime - clock and time functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;time.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nclock_getres(clockid_t</b> <i>clockid</i><b>, struct\ntimespec *</b><i>res</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nclock_gettime(clockid_t</b> <i>clockid</i><b>, struct\ntimespec *</b><i>tp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nclock_settime(clockid_t</b> <i>clockid</i><b>, const struct\ntimespec *</b><i>tp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Link with\n<i>-lrt</i> (only for glibc versions before 2.17).</p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>clock_getres</b>(),\n<b>clock_gettime</b>(), <b>clock_settime</b>():</p>\n\n\n<p style=\"margin-left:22%;\">_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;199309L</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The function\n<b>clock_getres</b>() finds the resolution (precision) of\nthe specified clock <i>clockid</i>, and, if <i>res</i> is\nnon-NULL, stores it in the <i>struct timespec</i> pointed to\nby <i>res</i>. The resolution of clocks depends on the\nimplementation and cannot be configured by a particular\nprocess. If the time value pointed to by the argument\n<i>tp</i> of <b>clock_settime</b>() is not a multiple of\n<i>res</i>, then it is truncated to a multiple of\n<i>res</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The functions\n<b>clock_gettime</b>() and <b>clock_settime</b>() retrieve\nand set the time of the specified clock <i>clockid</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>res</i>\nand <i>tp</i> arguments are <i>timespec</i> structures, as\nspecified in <i>&lt;time.h&gt;</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct timespec\n{ <br>\ntime_t tv_sec; /* seconds */ <br>\nlong tv_nsec; /* nanoseconds */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>clockid</i> argument is the identifier of the particular\nclock on which to act. A clock may be system-wide and hence\nvisible for all processes, or per-process if it measures\ntime only within a single process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\nimplementations support the system-wide real-time clock,\nwhich is identified by <b>CLOCK_REALTIME</b>. Its time\nrepresents seconds and nanoseconds since the Epoch. When its\ntime is changed, timers for a relative interval are\nunaffected, but timers for an absolute point in time are\naffected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">More clocks may\nbe implemented. The interpretation of the corresponding time\nvalues and the effect on timers is unspecified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sufficiently\nrecent versions of glibc and the Linux kernel support the\nfollowing clocks: <b><br>\nCLOCK_REALTIME</b></p>\n\n<p style=\"margin-left:22%;\">A settable system-wide clock\nthat measures real (i.e., wall-clock) time. Setting this\nclock requires appropriate privileges. This clock is\naffected by discontinuous jumps in the system time (e.g., if\nthe system administrator manually changes the clock), and by\nthe incremental adjustments performed by <a href=\"https://man.page/3/adjtime\">adjtime(3)</a>\nand NTP.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_REALTIME_ALARM</b>\n(since Linux 3.0; Linux-specific)</p>\n\n<p style=\"margin-left:22%;\">Like <b>CLOCK_REALTIME</b>, but\nnot settable. See <a href=\"https://man.page/2/timer_create\">timer_create(2)</a> for further\ndetails.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_REALTIME_COARSE</b>\n(since Linux 2.6.32; Linux-specific)</p>\n\n<p style=\"margin-left:22%;\">A faster but less precise\nversion of <b>CLOCK_REALTIME</b>. This clock is not\nsettable. Use when you need very fast, but not fine-grained\ntimestamps. Requires per-architecture support, and probably\nalso architecture support for this flag in the\n<a href=\"https://man.page/7/vdso\">vdso(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_TAI</b> (since Linux\n3.10; Linux-specific)</p>\n\n<p style=\"margin-left:22%;\">A nonsettable system-wide clock\nderived from wall-clock time but ignoring leap seconds. This\nclock does not experience discontinuities and backwards\njumps caused by NTP inserting leap seconds as\n<b>CLOCK_REALTIME</b> does.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The acronym TAI\nrefers to International Atomic Time.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_MONOTONIC</b></p>\n\n<p style=\"margin-left:22%;\">A nonsettable system-wide clock\nthat represents monotonic time since&mdash;as described by\nPOSIX&mdash;&quot;some unspecified point in the past&quot;.\nOn Linux, that point corresponds to the number of seconds\nthat the system has been running since it was booted.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>CLOCK_MONOTONIC</b> clock is not affected by\ndiscontinuous jumps in the system time (e.g., if the system\nadministrator manually changes the clock), but is affected\nby the incremental adjustments performed by\n<a href=\"https://man.page/3/adjtime\">adjtime(3)</a> and NTP. This clock does not count time\nthat the system is suspended. All <b>CLOCK_MONOTONIC</b>\nvariants guarantee that the time returned by consecutive\ncalls will not go backwards, but successive calls\nmay&mdash;depending on the architecture&mdash;return\nidentical (not-increased) time values.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_MONOTONIC_COARSE</b>\n(since Linux 2.6.32; Linux-specific)</p>\n\n<p style=\"margin-left:22%;\">A faster but less precise\nversion of <b>CLOCK_MONOTONIC</b>. Use when you need very\nfast, but not fine-grained timestamps. Requires\nper-architecture support, and probably also architecture\nsupport for this flag in the <a href=\"https://man.page/7/vdso\">vdso(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_MONOTONIC_RAW</b>\n(since Linux 2.6.28; Linux-specific)</p>\n\n<p style=\"margin-left:22%;\">Similar to\n<b>CLOCK_MONOTONIC</b>, but provides access to a raw\nhardware-based time that is not subject to NTP adjustments\nor the incremental adjustments performed by\n<a href=\"https://man.page/3/adjtime\">adjtime(3)</a>. This clock does not count time that the\nsystem is suspended.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_BOOTTIME</b> (since\nLinux 2.6.39; Linux-specific)</p>\n\n<p style=\"margin-left:22%;\">A nonsettable system-wide clock\nthat is identical to <b>CLOCK_MONOTONIC</b>, except that it\nalso includes any time that the system is suspended. This\nallows applications to get a suspend-aware monotonic clock\nwithout having to deal with the complications of\n<b>CLOCK_REALTIME</b>, which may have discontinuities if the\ntime is changed using <a href=\"https://man.page/2/settimeofday\">settimeofday(2)</a> or similar.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_BOOTTIME_ALARM</b>\n(since Linux 3.0; Linux-specific)</p>\n\n<p style=\"margin-left:22%;\">Like <b>CLOCK_BOOTTIME</b>. See\n<a href=\"https://man.page/2/timer_create\">timer_create(2)</a> for further details.</p>\n\n\n<p style=\"margin-left:11%;\"><b>CLOCK_PROCESS_CPUTIME_ID</b>\n(since Linux 2.6.12)</p>\n\n<p style=\"margin-left:22%;\">This is a clock that measures\nCPU time consumed by this process (i.e., CPU time consumed\nby all threads in the process). On Linux, this clock is not\nsettable.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_THREAD_CPUTIME_ID</b>\n(since Linux 2.6.12)</p>\n\n<p style=\"margin-left:22%;\">This is a clock that measures\nCPU time consumed by this thread. On Linux, this clock is\nnot settable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux also\nimplements dynamic clock instances as described below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Dynamic\nclocks</b> <br>\nIn addition to the hard-coded System-V style clock IDs\ndescribed above, Linux also supports POSIX clock operations\non certain character devices. Such devices are called\n&quot;dynamic&quot; clocks, and are supported since Linux\n2.6.39.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\nappropriate macros, open file descriptors may be converted\ninto clock IDs and passed to <b>clock_gettime</b>(),\n<b>clock_settime</b>(), and <a href=\"https://man.page/2/clock_adjtime\">clock_adjtime(2)</a>. The\nfollowing example shows how to convert a file descriptor\ninto a dynamic clock ID.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#define CLOCKFD\n3 <br>\n#define FD_TO_CLOCKID(fd) ((~(clockid_t) (fd) &lt;&lt; 3) |\nCLOCKFD) <br>\n#define CLOCKID_TO_FD(clk) ((unsigned int) ~((clk) &gt;&gt;\n3))</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct timespec\nts; <br>\nclockid_t clkid; <br>\nint fd;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">fd =\nopen(&quot;/dev/ptp0&quot;, O_RDWR); <br>\nclkid = FD_TO_CLOCKID(fd); <br>\nclock_gettime(clkid, &amp;ts);</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>clock_gettime</b>(),\n<b>clock_settime</b>(), and <b>clock_getres</b>() return 0\nfor success, or -1 for failure (in which case <i>errno</i>\nis set appropriately).</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><b>clock_settime</b>() does not\nhave write permission for the dynamic POSIX clock device\nindicated.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>tp</i> points outside the accessible address\nspace.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>clockid</i> specified is invalid for one of two\nreasons. Either the System-V style hard coded positive value\nis out of range, or the dynamic clock ID does not refer to a\nvalid instance of a clock object.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>clock_settime</b>()): <i>tp.tv_sec</i> is negative\nor <i>tp.tv_nsec</i> is outside the range\n[0..999,999,999].</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>clockid</i> specified in a call to\n<b>clock_settime</b>() is not a settable clock.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EINVAL</b> (since Linux\n4.3)</p>\n\n<p style=\"margin-left:22%;\">A call to\n<b>clock_settime</b>() with a <i>clockid</i> of\n<b>CLOCK_REALTIME</b> attempted to set the time to a value\nless than the current value of the <b>CLOCK_MONOTONIC</b>\nclock.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENODEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The hot-pluggable device (like USB for example)\nrepresented by a dynamic <i>clk_id</i> has disappeared after\nits character device was opened.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTSUP</b></p>\n\n<p style=\"margin-left:22%;\">The operation is not supported\nby the dynamic POSIX clock device specified.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><b>clock_settime</b>() does not have permission to set\nthe clock indicated.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls first appeared in Linux 2.6.</p>\n\n<h2>ATTRIBUTES\n<a name=\"ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an\nexplanation of the terms used in this section, see\n<a href=\"https://man.page/7/attributes\">attributes(7)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3272771.png\" alt=\"Image grohtml-3272771.png\"></p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SUSv2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On POSIX\nsystems on which these functions are available, the symbol\n<b>_POSIX_TIMERS</b> is defined in <i>&lt;unistd.h&gt;</i>\nto a value greater than 0. The symbols\n<b>_POSIX_MONOTONIC_CLOCK</b>, <b>_POSIX_CPUTIME</b>,\n<b>_POSIX_THREAD_CPUTIME</b> indicate that\n<b>CLOCK_MONOTONIC</b>, <b>CLOCK_PROCESS_CPUTIME_ID</b>,\n<b>CLOCK_THREAD_CPUTIME_ID</b> are available. (See also\n<a href=\"https://man.page/3/sysconf\">sysconf(3)</a>.)</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1\nspecifies the following:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Setting the\nvalue of the <b>CLOCK_REALTIME</b> clock via\n<b>clock_settime</b>() shall have no effect on threads that\nare blocked waiting for a relative time service based upon\nthis clock, including the <b>nanosleep</b>() function; nor\non the expiration of relative timers based upon this clock.\nConsequently, these time services shall expire when the\nrequested relative interval elapses, independently of the\nnew or old value of the clock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX.1-2001, a process with &quot;appropriate\nprivileges&quot; may set the <b>CLOCK_PROCESS_CPUTIME_ID</b>\nand <b>CLOCK_THREAD_CPUTIME_ID</b> clocks using\n<b>clock_settime</b>(). On Linux, these clocks are not\nsettable (i.e., no process has &quot;appropriate\nprivileges&quot;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nOn some architectures, an implementation of\n<b>clock_gettime</b>() is provided in the\n<a href=\"https://man.page/7/vdso\">vdso(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Historical\nnote for SMP systems</b> <br>\nBefore Linux added kernel support for\n<b>CLOCK_PROCESS_CPUTIME_ID</b> and\n<b>CLOCK_THREAD_CPUTIME_ID</b>, glibc implemented these\nclocks on many platforms using timer registers from the CPUs\n(TSC on i386, AR.ITC on Itanium). These registers may differ\nbetween CPUs and as a consequence these clocks may return\n<b>bogus results</b> if a process is migrated to another\nCPU.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the CPUs in\nan SMP system have different clock sources, then there is no\nway to maintain a correlation between the timer registers\nsince each CPU will run at a slightly different frequency.\nIf that is the case, then <i>clock_getcpuclockid(0)</i> will\nreturn <b>ENOENT</b> to signify this condition. The two\nclocks will then be useful only if it can be ensured that a\nprocess stays on a certain CPU.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The processors\nin an SMP system do not start all at exactly the same time\nand therefore the timer registers are typically running at\nan offset. Some architectures include code that attempts to\nlimit these offsets on bootup. However, the code cannot\nguarantee to accurately tune the offsets. Glibc contains no\nprovisions to deal with these offsets (unlike the Linux\nKernel). Typically these offsets are small and therefore the\neffects may be negligible in most cases.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since glibc\n2.4, the wrapper functions for the system calls described in\nthis page avoid the abovementioned problems by employing the\nkernel implementation of <b>CLOCK_PROCESS_CPUTIME_ID</b> and\n<b>CLOCK_THREAD_CPUTIME_ID</b>, on systems that provide such\nan implementation (i.e., Linux 2.6.12 and later).</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>clock_gettime</b>() and\n<b>clock_getres</b>() with various clocks. This is an\nexample of what we might see when running the program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./clock_times x</b> <br>\nCLOCK_REALTIME : 1585985459.446 (18356 days + 7h 30m 59s)\n<br>\nresolution: 0.000000001 <br>\nCLOCK_TAI : 1585985496.447 (18356 days + 7h 31m 36s) <br>\nresolution: 0.000000001 <br>\nCLOCK_MONOTONIC: 52395.722 (14h 33m 15s) <br>\nresolution: 0.000000001 <br>\nCLOCK_BOOTTIME : 72691.019 (20h 11m 31s) <br>\nresolution: 0.000000001</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n/* clock_times.c</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nGNU General Public License v2 or later. <br>\n*/ <br>\n#define _XOPEN_SOURCE 600 <br>\n#include &lt;time.h&gt; <br>\n#include &lt;stdint.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdbool.h&gt; <br>\n#include &lt;unistd.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nSECS_IN_DAY (24 * 60 * 60)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\ndisplayClock(clockid_t clock, const char *name, bool\nshowRes) <br>\n{ <br>\nstruct timespec ts;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(clock_gettime(clock, &amp;ts) == -1) { <br>\nperror(&quot;clock_gettime&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;%-15s:\n%10jd.%03ld (&quot;, name, <br>\n(intmax_t) ts.tv_sec, ts.tv_nsec / 1000000);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">long days =\nts.tv_sec / SECS_IN_DAY; <br>\nif (days &gt; 0) <br>\nprintf(&quot;%ld days + &quot;, days);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;%2dh\n%2dm %2ds&quot;, <br>\n(int) (ts.tv_sec % SECS_IN_DAY) / 3600, <br>\n(int) (ts.tv_sec % 3600) / 60, <br>\n(int) ts.tv_sec % 60); <br>\nprintf(&quot;)\\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(clock_getres(clock, &amp;ts) == -1) { <br>\nperror(&quot;clock_getres&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (showRes)\n<br>\nprintf(&quot; resolution: %10jd.%09ld\\n&quot;, <br>\n(intmax_t) ts.tv_sec, ts.tv_nsec); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nbool showRes = argc &gt; 1;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">displayClock(CLOCK_REALTIME,\n&quot;CLOCK_REALTIME&quot;, showRes); <br>\n#ifdef CLOCK_TAI <br>\ndisplayClock(CLOCK_TAI, &quot;CLOCK_TAI&quot;, showRes);\n<br>\n#endif <br>\ndisplayClock(CLOCK_MONOTONIC, &quot;CLOCK_MONOTONIC&quot;,\nshowRes); <br>\n#ifdef CLOCK_BOOTTIME <br>\ndisplayClock(CLOCK_BOOTTIME, &quot;CLOCK_BOOTTIME&quot;,\nshowRes); <br>\n#endif <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/date\">date(1)</a>,\n<a href=\"https://man.page/2/gettimeofday\">gettimeofday(2)</a>, <a href=\"https://man.page/2/settimeofday\">settimeofday(2)</a>,\n<a href=\"https://man.page/2/time\">time(2)</a>, <a href=\"https://man.page/3/adjtime\">adjtime(3)</a>,\n<a href=\"https://man.page/3/clock_getcpuclockid\">clock_getcpuclockid(3)</a>, <a href=\"https://man.page/3/ctime\">ctime(3)</a>,\n<a href=\"https://man.page/3/ftime\">ftime(3)</a>, <a href=\"https://man.page/3/pthread_getcpuclockid\">pthread_getcpuclockid(3)</a>,\n<a href=\"https://man.page/3/sysconf\">sysconf(3)</a>, <a href=\"https://man.page/7/time\">time(7)</a>,\n<a href=\"https://man.page/7/time_namespaces\">time_namespaces(7)</a>, <a href=\"https://man.page/7/vdso\">vdso(7)</a>,\n<b>hwclock</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#ATTRIBUTES\">ATTRIBUTES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}