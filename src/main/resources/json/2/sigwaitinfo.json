{"name":"sigwaitinfo","body":"\n\n<h1 align=\"center\">SIGWAITINFO</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sigwaitinfo,\nsigtimedwait, rt_sigtimedwait - synchronously wait for\nqueued signals</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;signal.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsigwaitinfo(const sigset_t *</b><i>set</i><b>, siginfo_t\n*</b><i>info</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsigtimedwait(const sigset_t *</b><i>set</i><b>, siginfo_t\n*</b><i>info</i><b>, <br>\nconst struct timespec *</b><i>timeout</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigwaitinfo</b>(),\n<b>sigtimedwait</b>():\n_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;199309L</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigwaitinfo</b>()\nsuspends execution of the calling thread until one of the\nsignals in <i>set</i> is pending (If one of the signals in\n<i>set</i> is already pending for the calling thread,\n<b>sigwaitinfo</b>() will return immediately.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigwaitinfo</b>()\nremoves the signal from the set of pending signals and\nreturns the signal number as its function result. If the\n<i>info</i> argument is not NULL, then the buffer that it\npoints to is used to return a structure of type\n<i>siginfo_t</i> (see <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>) containing\ninformation about the signal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If multiple\nsignals in <i>set</i> are pending for the caller, the signal\nthat is retrieved by <b>sigwaitinfo</b>() is determined\naccording to the usual ordering rules; see <a href=\"https://man.page/7/signal\">signal(7)</a>\nfor further details.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigtimedwait</b>()\noperates in exactly the same way as <b>sigwaitinfo</b>()\nexcept that it has an additional argument, <i>timeout</i>,\nwhich specifies the interval for which the thread is\nsuspended waiting for a signal. (This interval will be\nrounded up to the system clock granularity, and kernel\nscheduling delays mean that the interval may overrun by a\nsmall amount.) This argument is of the following type:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct timespec\n{ <br>\nlong tv_sec; /* seconds */ <br>\nlong tv_nsec; /* nanoseconds */ <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If both fields\nof this structure are specified as 0, a poll is performed:\n<b>sigtimedwait</b>() returns immediately, either with\ninformation about a signal that was pending for the caller,\nor with an error if none of the signals in <i>set</i> was\npending.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nboth <b>sigwaitinfo</b>() and <b>sigtimedwait</b>() return a\nsignal number (i.e., a value greater than zero). On failure\nboth calls return -1, with <i>errno</i> set to indicate the\nerror.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">No signal in <i>set</i> was\nbecame pending within the <i>timeout</i> period specified to\n<b>sigtimedwait</b>().</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The wait was interrupted by a signal handler; see\n<a href=\"https://man.page/7/signal\">signal(7)</a>. (This handler was for a signal other than\none of those in <i>set</i>.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>timeout</i> was invalid.</p></td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In normal\nusage, the calling program blocks the signals in <i>set</i>\nvia a prior call to <a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a> (so that the\ndefault disposition for these signals does not occur if they\nbecome pending between successive calls to\n<b>sigwaitinfo</b>() or <b>sigtimedwait</b>()) and does not\nestablish handlers for these signals. In a multithreaded\nprogram, the signal should be blocked in all threads, in\norder to prevent the signal being treated according to its\ndefault disposition in a thread other than the one calling\n<b>sigwaitinfo</b>() or <b>sigtimedwait</b>()).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The set of\nsignals that is pending for a given thread is the union of\nthe set of signals that is pending specifically for that\nthread and the set of signals that is pending for the\nprocess as a whole (see <a href=\"https://man.page/7/signal\">signal(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Attempts to\nwait for <b>SIGKILL</b> and <b>SIGSTOP</b> are silently\nignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If multiple\nthreads of a process are blocked waiting for the same\nsignal(s) in <b>sigwaitinfo</b>() or <b>sigtimedwait</b>(),\nthen exactly one of the threads will actually receive the\nsignal if it becomes pending for the process as a whole;\nwhich of the threads receives the signal is\nindeterminate.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigwaitinfo</b>()\nor <b>sigtimedwait</b>(), can&rsquo;t be used to receive\nsignals that are synchronously generated, such as the\n<b>SIGSEGV</b> signal that results from accessing an invalid\nmemory address or the <b>SIGFPE</b> signal that results from\nan arithmetic error. Such signals can be caught only via\nsignal handler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX leaves\nthe meaning of a NULL value for the <i>timeout</i> argument\nof <b>sigtimedwait</b>() unspecified, permitting the\npossibility that this has the same meaning as a call to\n<b>sigwaitinfo</b>(), and indeed this is what is done on\nLinux.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nOn Linux, <b>sigwaitinfo</b>() is a library function\nimplemented on top of <b>sigtimedwait</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The glibc\nwrapper functions for <b>sigwaitinfo</b>() and\n<b>sigtimedwait</b>() silently ignore attempts to wait for\nthe two real-time signals that are used internally by the\nNPTL threading implementation. See <a href=\"https://man.page/7/nptl\">nptl(7)</a> for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The original\nLinux system call was named <b>sigtimedwait</b>(). However,\nwith the addition of real-time signals in Linux 2.2, the\nfixed-size, 32-bit <i>sigset_t</i> type supported by that\nsystem call was no longer fit for purpose. Consequently, a\nnew system call, <b>rt_sigtimedwait</b>(), was added to\nsupport an enlarged <i>sigset_t</i> type. The new system\ncall takes a fourth argument, <i>size_t sigsetsize</i>,\nwhich specifies the size in bytes of the signal set in\n<i>set</i>. This argument is currently required to have the\nvalue <i>sizeof(sigset_t)</i> (or the error <b>EINVAL</b>\nresults). The glibc <b>sigtimedwait</b>() wrapper function\nhides these details from us, transparently calling\n<b>rt_sigtimedwait</b>() when the kernel provides it.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/kill\">kill(2)</a>,\n<a href=\"https://man.page/2/sigaction\">sigaction(2)</a>, <a href=\"https://man.page/2/signal\">signal(2)</a>, <a href=\"https://man.page/2/signalfd\">signalfd(2)</a>,\n<a href=\"https://man.page/2/sigpending\">sigpending(2)</a>, <a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>,\n<a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a>, <a href=\"https://man.page/3/sigsetops\">sigsetops(3)</a>, <a href=\"https://man.page/3/sigwait\">sigwait(3)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a>, <a href=\"https://man.page/7/time\">time(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}