{"name":"seccomp","description":"seccomp -\noperate on Secure Computing state of the process","body":"\n\n<h1 align=\"center\">SECCOMP</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">seccomp -\noperate on Secure Computing state of the process</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;linux/seccomp.h&gt; <br>\n#include &lt;linux/filter.h&gt; <br>\n#include &lt;linux/audit.h&gt; <br>\n#include &lt;linux/signal.h&gt; <br>\n#include &lt;sys/ptrace.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nseccomp(unsigned int</b> <i>operation</i><b>, unsigned\nint</b> <i>flags</i><b>, void *</b><i>args</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>seccomp</b>() system call operates on the Secure\nComputing (seccomp) state of the calling process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently,\nLinux supports the following <i>operation</i> values:\n<b><br>\nSECCOMP_SET_MODE_STRICT</b></p>\n\n<p style=\"margin-left:22%;\">The only system calls that the\ncalling thread is permitted to make are <a href=\"https://man.page/2/read\">read(2)</a>,\n<a href=\"https://man.page/2/write\">write(2)</a>, <a href=\"https://man.page/2/_exit\">_exit(2)</a> (but not\n<a href=\"https://man.page/2/exit_group\">exit_group(2)</a>), and <a href=\"https://man.page/2/sigreturn\">sigreturn(2)</a>. Other system\ncalls result in the delivery of a <b>SIGKILL</b> signal.\nStrict secure computing mode is useful for number-crunching\napplications that may need to execute untrusted byte code,\nperhaps obtained by reading from a pipe or socket.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that\nalthough the calling thread can no longer call\n<a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>, it can use <a href=\"https://man.page/2/sigreturn\">sigreturn(2)</a> to\nblock all signals apart from <b>SIGKILL</b> and\n<b>SIGSTOP</b>. This means that <a href=\"https://man.page/2/alarm\">alarm(2)</a> (for\nexample) is not sufficient for restricting the\nprocess&rsquo;s execution time. Instead, to reliably\nterminate the process, <b>SIGKILL</b> must be used. This can\nbe done by using <a href=\"https://man.page/2/timer_create\">timer_create(2)</a> with\n<b>SIGEV_SIGNAL</b> and <i>sigev_signo</i> set to\n<b>SIGKILL</b>, or by using <a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a> to set the\nhard limit for <b>RLIMIT_CPU</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis available only if the kernel is configured with\n<b>CONFIG_SECCOMP</b> enabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value of\n<i>flags</i> must be 0, and <i>args</i> must be NULL.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This operation\nis functionally identical to the call:</p>\n\n\n<p style=\"margin-left:28%; margin-top: 1em\">prctl(PR_SET_SECCOMP,\nSECCOMP_MODE_STRICT);</p>\n\n\n<p style=\"margin-left:11%;\"><b>SECCOMP_SET_MODE_FILTER</b></p>\n\n<p style=\"margin-left:22%;\">The system calls allowed are\ndefined by a pointer to a Berkeley Packet Filter (BPF)\npassed via <i>args</i>. This argument is a pointer to a\n<i>struct&nbsp;sock_fprog</i>; it can be designed to filter\narbitrary system calls and system call arguments. If the\nfilter is invalid, <b>seccomp</b>() fails, returning\n<b>EINVAL</b> in <i>errno</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<a href=\"https://man.page/2/fork\">fork(2)</a> or <a href=\"https://man.page/2/clone\">clone(2)</a> is allowed by the filter,\nany child processes will be constrained to the same system\ncall filters as the parent. If <a href=\"https://man.page/2/execve\">execve(2)</a> is allowed,\nthe existing filters will be preserved across a call to\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In order to use\nthe <b>SECCOMP_SET_MODE_FILTER</b> operation, either the\ncalling thread must have the <b>CAP_SYS_ADMIN</b> capability\nin its user namespace, or the thread must already have the\n<i>no_new_privs</i> bit set. If that bit was not already set\nby an ancestor of this thread, the thread must make the\nfollowing call:</p>\n\n\n<p style=\"margin-left:28%; margin-top: 1em\">prctl(PR_SET_NO_NEW_PRIVS,\n1);</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Otherwise, the\n<b>SECCOMP_SET_MODE_FILTER</b> operation fails and returns\n<b>EACCES</b> in <i>errno</i>. This requirement ensures that\nan unprivileged process cannot apply a malicious filter and\nthen invoke a set-user-ID or other privileged program using\n<a href=\"https://man.page/2/execve\">execve(2)</a>, thus potentially compromising that\nprogram. (Such a malicious filter might, for example, cause\nan attempt to use <a href=\"https://man.page/2/setuid\">setuid(2)</a> to set the caller&rsquo;s\nuser IDs to nonzero values to instead return 0 without\nactually making the system call. Thus, the program might be\ntricked into retaining superuser privileges in circumstances\nwhere it is possible to influence it to do dangerous things\nbecause it did not actually drop privileges.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<a href=\"https://man.page/2/prctl\">prctl(2)</a> or <b>seccomp</b>() is allowed by the\nattached filter, further filters may be added. This will\nincrease evaluation time, but allows for further reduction\nof the attack surface during execution of a thread.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>SECCOMP_SET_MODE_FILTER</b> operation is available only\nif the kernel is configured with\n<b>CONFIG_SECCOMP_FILTER</b> enabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When\n<i>flags</i> is 0, this operation is functionally identical\nto the call:</p>\n\n\n<p style=\"margin-left:28%; margin-top: 1em\">prctl(PR_SET_SECCOMP,\nSECCOMP_MODE_FILTER, args);</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The recognized\n<i>flags</i> are: <b><br>\nSECCOMP_FILTER_FLAG_TSYNC</b></p>\n\n<p style=\"margin-left:32%;\">When adding a new filter,\nsynchronize all other threads of the calling process to the\nsame seccomp filter tree. A &quot;filter tree&quot; is the\nordered list of filters attached to a thread. (Attaching\nidentical filters in separate <b>seccomp</b>() calls results\nin different filters from this perspective.)</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">If any thread\ncannot synchronize to the same filter tree, the call will\nnot attach the new seccomp filter, and will fail, returning\nthe first thread ID found that cannot synchronize.\nSynchronization will fail if another thread in the same\nprocess is in <b>SECCOMP_MODE_STRICT</b> or if it has\nattached new seccomp filters to itself, diverging from the\ncalling thread&rsquo;s filter tree.</p>\n\n<p style=\"margin-left:22%;\"><b>SECCOMP_FILTER_FLAG_LOG</b>\n(since Linux 4.14)</p>\n\n<p style=\"margin-left:32%;\">All filter return actions\nexcept <b>SECCOMP_RET_ALLOW</b> should be logged. An\nadministrator may override this filter flag by preventing\nspecific actions from being logged via the\n<i>/proc/sys/kernel/seccomp/actions_logged</i> file.</p>\n\n\n<p style=\"margin-left:22%;\"><b>SECCOMP_FILTER_FLAG_SPEC_ALLOW</b>\n(since Linux 4.17)</p>\n\n<p style=\"margin-left:32%;\">Disable Speculative Store\nBypass mitigation.</p>\n\n\n<p style=\"margin-left:11%;\"><b>SECCOMP_GET_ACTION_AVAIL</b>\n(since Linux 4.14)</p>\n\n<p style=\"margin-left:22%;\">Test to see if an action is\nsupported by the kernel. This operation is helpful to\nconfirm that the kernel knows of a more recently added\nfilter return action since the kernel treats all unknown\nactions as <b>SECCOMP_RET_KILL_PROCESS</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value of\n<i>flags</i> must be 0, and <i>args</i> must be a pointer to\nan unsigned 32-bit filter return action.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Filters</b>\n<br>\nWhen adding filters via <b>SECCOMP_SET_MODE_FILTER</b>,\n<i>args</i> points to a filter program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nsock_fprog { <br>\nunsigned short len; /* Number of BPF instructions */ <br>\nstruct sock_filter *filter; /* Pointer to array of <br>\nBPF instructions */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each program\nmust contain one or more BPF instructions:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nsock_filter { /* Filter block */ <br>\n__u16 code; /* Actual filter code */ <br>\n__u8 jt; /* Jump true */ <br>\n__u8 jf; /* Jump false */ <br>\n__u32 k; /* Generic multiuse field */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When executing\nthe instructions, the BPF program operates on the system\ncall information made available (i.e., use the\n<b>BPF_ABS</b> addressing mode) as a (read-only) buffer of\nthe following form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nseccomp_data { <br>\nint nr; /* System call number */ <br>\n__u32 arch; /* AUDIT_ARCH_* value <br>\n(see &lt;linux/audit.h&gt;) */ <br>\n__u64 instruction_pointer; /* CPU instruction pointer */\n<br>\n__u64 args[6]; /* Up to 6 system call arguments */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because\nnumbering of system calls varies between architectures and\nsome architectures (e.g., x86-64) allow user-space code to\nuse the calling conventions of multiple architectures (and\nthe convention being used may vary over the life of a\nprocess that uses <a href=\"https://man.page/2/execve\">execve(2)</a> to execute binaries that\nemploy the different conventions), it is usually necessary\nto verify the value of the <i>arch</i> field.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is strongly\nrecommended to use an allow-list approach whenever possible\nbecause such an approach is more robust and simple. A\ndeny-list will have to be updated whenever a potentially\ndangerous system call is added (or a dangerous flag or\noption if those are deny-listed), and it is often possible\nto alter the representation of a value without altering its\nmeaning, leading to a deny-list bypass. See also\n<i>Caveats</i> below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>arch</i>\nfield is not unique for all calling conventions. The x86-64\nABI and the x32 ABI both use <b>AUDIT_ARCH_X86_64</b> as\n<i>arch</i>, and they run on the same processors. Instead,\nthe mask <b>__X32_SYSCALL_BIT</b> is used on the system call\nnumber to tell the two ABIs apart.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This means that\na policy must either deny all syscalls with\n<b>__X32_SYSCALL_BIT</b> or it must recognize syscalls with\nand without <b>__X32_SYSCALL_BIT</b> set. A list of system\ncalls to be denied based on <i>nr</i> that does not also\ncontain <i>nr</i> values with <b>__X32_SYSCALL_BIT</b> set\ncan be bypassed by a malicious program that sets\n<b>__X32_SYSCALL_BIT</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additionally,\nkernels prior to Linux 5.4 incorrectly permitted <i>nr</i>\nin the ranges 512-547 as well as the corresponding non-x32\nsyscalls ORed with <b>__X32_SYSCALL_BIT</b>. For example,\n<i>nr</i> == 521 and <i>nr</i> == (101 |\n<b>__X32_SYSCALL_BIT</b>) would result in invocations of\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a> with potentially confused x32-vs-x86_64\nsemantics in the kernel. Policies intended to work on\nkernels before Linux 5.4 must ensure that they deny or\notherwise correctly handle these system calls. On Linux 5.4\nand newer, such system calls will fail with the error\n<b>ENOSYS</b>, without doing anything.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>instruction_pointer</i> field provides the address of the\nmachine-language instruction that performed the system call.\nThis might be useful in conjunction with the use of\n<i>/proc/[pid]/maps</i> to perform checks based on which\nregion (mapping) of the program made the system call.\n(Probably, it is wise to lock down the <a href=\"https://man.page/2/mmap\">mmap(2)</a> and\n<a href=\"https://man.page/2/mprotect\">mprotect(2)</a> system calls to prevent the program from\nsubverting such checks.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When checking\nvalues from <i>args</i>, keep in mind that arguments are\noften silently truncated before being processed, but after\nthe seccomp check. For example, this happens if the i386 ABI\nis used on an x86-64 kernel: although the kernel will\nnormally not look beyond the 32 lowest bits of the\narguments, the values of the full 64-bit registers will be\npresent in the seccomp data. A less surprising example is\nthat if the x86-64 ABI is used to perform a system call that\ntakes an argument of type <i>int</i>, the more-significant\nhalf of the argument register is ignored by the system call,\nbut visible in the seccomp data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A seccomp\nfilter returns a 32-bit value consisting of two parts: the\nmost significant 16 bits (corresponding to the mask defined\nby the constant <b>SECCOMP_RET_ACTION_FULL</b>) contain one\nof the &quot;action&quot; values listed below; the least\nsignificant 16-bits (defined by the constant\n<b>SECCOMP_RET_DATA</b>) are &quot;data&quot; to be\nassociated with this return value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If multiple\nfilters exist, they are <i>all</i> executed, in reverse\norder of their addition to the filter tree&mdash;that is,\nthe most recently installed filter is executed first. (Note\nthat all filters will be called even if one of the earlier\nfilters returns <b>SECCOMP_RET_KILL</b>. This is done to\nsimplify the kernel code and to provide a tiny speed-up in\nthe execution of sets of filters by avoiding a check for\nthis uncommon case.) The return value for the evaluation of\na given system call is the first-seen action value of\nhighest precedence (along with its accompanying data)\nreturned by execution of all of the filters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In decreasing\norder of precedence, the action values that may be returned\nby a seccomp filter are: <b><br>\nSECCOMP_RET_KILL_PROCESS</b> (since Linux 4.14)</p>\n\n<p style=\"margin-left:22%;\">This value results in immediate\ntermination of the process, with a core dump. The system\ncall is not executed. By contrast with\n<b>SECCOMP_RET_KILL_THREAD</b> below, all threads in the\nthread group are terminated. (For a discussion of thread\ngroups, see the description of the <b>CLONE_THREAD</b> flag\nin <a href=\"https://man.page/2/clone\">clone(2)</a>.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The process\nterminates <i>as though</i> killed by a <b>SIGSYS</b>\nsignal. Even if a signal handler has been registered for\n<b>SIGSYS</b>, the handler will be ignored in this case and\nthe process always terminates. To a parent process that is\nwaiting on this process (using <a href=\"https://man.page/2/waitpid\">waitpid(2)</a> or\nsimilar), the returned <i>wstatus</i> will indicate that its\nchild was terminated as though by a <b>SIGSYS</b>\nsignal.</p>\n\n<p style=\"margin-left:11%;\"><b>SECCOMP_RET_KILL_THREAD</b>\n(or <b>SECCOMP_RET_KILL</b>)</p>\n\n<p style=\"margin-left:22%;\">This value results in immediate\ntermination of the thread that made the system call. The\nsystem call is not executed. Other threads in the same\nthread group will continue to execute.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The thread\nterminates <i>as though</i> killed by a <b>SIGSYS</b>\nsignal. See <b>SECCOMP_RET_KILL_PROCESS</b> above.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before Linux\n4.11, any process terminated in this way would not trigger a\ncoredump (even though <b>SIGSYS</b> is documented in\n<a href=\"https://man.page/7/signal\">signal(7)</a> as having a default action of termination\nwith a core dump). Since Linux 4.11, a single-threaded\nprocess will dump core if terminated in this way.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">With the\naddition of <b>SECCOMP_RET_KILL_PROCESS</b> in Linux 4.14,\n<b>SECCOMP_RET_KILL_THREAD</b> was added as a synonym for\n<b>SECCOMP_RET_KILL</b>, in order to more clearly\ndistinguish the two actions.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Note</b>:\nthe use of <b>SECCOMP_RET_KILL_THREAD</b> to kill a single\nthread in a multithreaded process is likely to leave the\nprocess in a permanently inconsistent and possibly corrupt\nstate.</p>\n\n<p style=\"margin-left:11%;\"><b>SECCOMP_RET_TRAP</b></p>\n\n<p style=\"margin-left:22%;\">This value results in the\nkernel sending a thread-directed <b>SIGSYS</b> signal to the\ntriggering thread. (The system call is not executed.)\nVarious fields will be set in the <i>siginfo_t</i> structure\n(see <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>) associated with signal:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><i>si_signo</i> will contain <b>SIGSYS</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><i>si_call_addr</i> will show the address of the system\ncall instruction.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><i>si_syscall</i> and <i>si_arch</i> will indicate which\nsystem call was attempted.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><i>si_code</i> will contain <b>SYS_SECCOMP</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><i>si_errno</i> will contain the <b>SECCOMP_RET_DATA</b>\nportion of the filter return value.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The program\ncounter will be as though the system call happened (i.e.,\nthe program counter will not point to the system call\ninstruction). The return value register will contain an\narchitecture-dependent value; if resuming execution, set it\nto something appropriate for the system call. (The\narchitecture dependency is because replacing it with\n<b>ENOSYS</b> could overwrite some useful information.)</p>\n\n<p style=\"margin-left:11%;\"><b>SECCOMP_RET_ERRNO</b></p>\n\n<p style=\"margin-left:22%;\">This value results in the\n<b>SECCOMP_RET_DATA</b> portion of the filter&rsquo;s return\nvalue being passed to user space as the <i>errno</i> value\nwithout executing the system call.</p>\n\n<p style=\"margin-left:11%;\"><b>SECCOMP_RET_TRACE</b></p>\n\n<p style=\"margin-left:22%;\">When returned, this value will\ncause the kernel to attempt to notify a\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>-based tracer prior to executing the system\ncall. If there is no tracer present, the system call is not\nexecuted and returns a failure status with <i>errno</i> set\nto <b>ENOSYS</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A tracer will\nbe notified if it requests <b>PTRACE_O_TRACESECCOMP</b>\nusing <i>ptrace(PTRACE_SETOPTIONS)</i>. The tracer will be\nnotified of a <b>PTRACE_EVENT_SECCOMP</b> and the\n<b>SECCOMP_RET_DATA</b> portion of the filter&rsquo;s return\nvalue will be available to the tracer via\n<b>PTRACE_GETEVENTMSG</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The tracer can\nskip the system call by changing the system call number to\n-1. Alternatively, the tracer can change the system call\nrequested by changing the system call to a valid system call\nnumber. If the tracer asks to skip the system call, then the\nsystem call will appear to return the value that the tracer\nputs in the return value register.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before kernel\n4.8, the seccomp check will not be run again after the\ntracer is notified. (This means that, on older kernels,\nseccomp-based sandboxes <b>must not</b> allow use of\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>&mdash;even of other sandboxed\nprocesses&mdash;without extreme care; ptracers can use this\nmechanism to escape from the seccomp sandbox.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that a\ntracer process will not be notified if another filter\nreturns an action value with a precedence greater than\n<b>SECCOMP_RET_TRACE</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>SECCOMP_RET_LOG</b> (since\nLinux 4.14)</p>\n\n<p style=\"margin-left:22%;\">This value results in the\nsystem call being executed after the filter return action is\nlogged. An administrator may override the logging of this\naction via the\n<i>/proc/sys/kernel/seccomp/actions_logged</i> file.</p>\n\n<p style=\"margin-left:11%;\"><b>SECCOMP_RET_ALLOW</b></p>\n\n<p style=\"margin-left:22%;\">This value results in the\nsystem call being executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If an action\nvalue other than one of the above is specified, then the\nfilter action is treated as either\n<b>SECCOMP_RET_KILL_PROCESS</b> (since Linux 4.14) or\n<b>SECCOMP_RET_KILL_THREAD</b> (in Linux 4.13 and\nearlier).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc\ninterfaces</b> <br>\nThe files in the directory <i>/proc/sys/kernel/seccomp</i>\nprovide additional seccomp information and configuration:\n<i><br>\nactions_avail</i> (since Linux 4.14)</p>\n\n<p style=\"margin-left:22%;\">A read-only ordered list of\nseccomp filter return actions in string form. The ordering,\nfrom left-to-right, is in decreasing order of precedence.\nThe list represents the set of seccomp filter return actions\nsupported by the kernel.</p>\n\n<p style=\"margin-left:11%;\"><i>actions_logged</i> (since\nLinux 4.14)</p>\n\n<p style=\"margin-left:22%;\">A read-write ordered list of\nseccomp filter return actions that are allowed to be logged.\nWrites to the file do not need to be in ordered form but\nreads from the file will be ordered in the same way as the\n<i>actions_avail</i> file.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">It is important\nto note that the value of <i>actions_logged</i> does not\nprevent certain filter return actions from being logged when\nthe audit subsystem is configured to audit a task. If the\naction is not found in the <i>actions_logged</i> file, the\nfinal decision on whether to audit the action for that task\nis ultimately left up to the audit subsystem to decide for\nall filter return actions other than\n<b>SECCOMP_RET_ALLOW</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n&quot;allow&quot; string is not accepted in the\n<i>actions_logged</i> file as it is not possible to log\n<b>SECCOMP_RET_ALLOW</b> actions. Attempting to write\n&quot;allow&quot; to the file will fail with the error\n<b>EINVAL</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Audit\nlogging of seccomp actions</b> <br>\nSince Linux 4.14, the kernel provides the facility to log\nthe actions returned by seccomp filters in the audit log.\nThe kernel makes the decision to log an action based on the\naction type, whether or not the action is present in the\n<i>actions_logged</i> file, and whether kernel auditing is\nenabled (e.g., via the kernel boot option <i>audit=1</i>).\nThe rules are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If the action is <b>SECCOMP_RET_ALLOW</b>, the action is\nnot logged.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Otherwise, if the action is either\n<b>SECCOMP_RET_KILL_PROCESS</b> or\n<b>SECCOMP_RET_KILL_THREAD</b>, and that action appears in\nthe <i>actions_logged</i> file, the action is logged.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Otherwise, if the filter has requested logging (the\n<b>SECCOMP_FILTER_FLAG_LOG</b> flag) and the action appears\nin the <i>actions_logged</i> file, the action is logged.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Otherwise, if kernel auditing is enabled and the process\nis being audited (<b>autrace</b>(8)), the action is\nlogged.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Otherwise, the action is not logged.</p></td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>seccomp</b>() returns 0. On error, if\n<b>SECCOMP_FILTER_FLAG_TSYNC</b> was used, the return value\nis the ID of the thread that caused the synchronization\nfailure. (This ID is a kernel thread ID of the type returned\nby <a href=\"https://man.page/2/clone\">clone(2)</a> and <a href=\"https://man.page/2/gettid\">gettid(2)</a>.) On other errors,\n-1 is returned, and <i>errno</i> is set to indicate the\ncause of the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>seccomp</b>()\ncan fail for the following reasons:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The caller did not have the\n<b>CAP_SYS_ADMIN</b> capability in its user namespace, or\nhad not set <i>no_new_privs</i> before using\n<b>SECCOMP_SET_MODE_FILTER</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>args</i> was not a valid address.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> is unknown or is not supported by this\nkernel version or configuration.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The specified <i>flags</i> are invalid for the given\n<i>operation</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> included <b>BPF_ABS</b>, but the\nspecified offset was not aligned to a 32-bit boundary or\nexceeded <i>sizeof(struct&nbsp;seccomp_data)</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A secure computing mode has already been set, and\n<i>operation</i> differs from the existing setting.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> specified\n<b>SECCOMP_SET_MODE_FILTER</b>, but the filter program\npointed to by <i>args</i> was not valid or the length of the\nfilter program was zero or exceeded <b>BPF_MAXINSNS</b>\n(4096) instructions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Out of memory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The total length of all filter programs attached to the\ncalling thread would exceed <b>MAX_INSNS_PER_PATH</b>\n(32768) instructions. Note that for the purposes of\ncalculating this limit, each already existing filter program\nincurs an overhead penalty of 4 instructions.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\"><i>operation</i> specified\n<b>SECCOMP_GET_ACTION_AVAIL</b>, but the kernel does not\nsupport the filter return action specified by\n<i>args</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Another thread caused a failure during thread sync, but\nits ID could not be determined.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>seccomp</b>() system call first appeared in Linux\n3.17.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>seccomp</b>() system call is a nonstandard Linux\nextension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rather than\nhand-coding seccomp filters as shown in the example below,\nyou may prefer to employ the <i>libseccomp</i> library,\nwhich provides a front-end for generating seccomp\nfilters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>Seccomp</i> field of the <i>/proc/[pid]/status</i> file\nprovides a method of viewing the seccomp mode of a process;\nsee <a href=\"https://man.page/5/proc\">proc(5)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>seccomp</b>()\nprovides a superset of the functionality provided by the\n<a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_SET_SECCOMP</b> operation (which does\nnot support <i>flags</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n4.4, the <a href=\"https://man.page/2/ptrace\">ptrace(2)</a> <b>PTRACE_SECCOMP_GET_FILTER</b>\noperation can be used to dump a process&rsquo;s seccomp\nfilters.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Architecture\nsupport for seccomp BPF</b> <br>\nArchitecture support for seccomp BPF filtering is available\non the following architectures:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p style=\"margin-top: 1em\">x86-64, i386, x32 (since Linux\n3.5)</p> </td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>ARM (since Linux 3.8)</p></td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>s390 (since Linux 3.8)</p></td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>MIPS (since Linux 3.16)</p></td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>ARM-64 (since Linux 3.19)</p></td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>PowerPC (since Linux 4.3)</p></td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>Tile (since Linux 4.3)</p></td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>PA-RISC (since Linux 4.6)</p></td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Caveats</b>\n<br>\nThere are various subtleties to consider when applying\nseccomp filters to a program, including the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Some traditional system calls\nhave user-space implementations in the <a href=\"https://man.page/7/vdso\">vdso(7)</a> on\nmany architectures. Notable examples include\n<a href=\"https://man.page/2/clock_gettime\">clock_gettime(2)</a>, <a href=\"https://man.page/2/gettimeofday\">gettimeofday(2)</a>, and\n<a href=\"https://man.page/2/time\">time(2)</a>. On such architectures, seccomp filtering for\nthese system calls will have no effect. (However, there are\ncases where the <a href=\"https://man.page/7/vdso\">vdso(7)</a> implementations may fall back\nto invoking the true system call, in which case seccomp\nfilters would see the system call.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Seccomp filtering is based on system call numbers.\nHowever, applications typically do not directly invoke\nsystem calls, but instead call wrapper functions in the C\nlibrary which in turn invoke the system calls. Consequently,\none must be aware of the following:</p></td></tr>\n</table>\n\n<p style=\"margin-left:15%;\">&bull;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\"></td>\n<td width=\"3%\"></td>\n<td width=\"80%\">\n\n\n<p style=\"margin-top: 1em\">The glibc wrappers for some\ntraditional system calls may actually employ system calls\nwith different names in the kernel. For example, the\n<a href=\"https://man.page/2/exit\">exit(2)</a> wrapper function actually employs the\n<a href=\"https://man.page/2/exit_group\">exit_group(2)</a> system call, and the <a href=\"https://man.page/2/fork\">fork(2)</a>\nwrapper function actually calls <a href=\"https://man.page/2/clone\">clone(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"80%\">\n\n\n<p>The behavior of wrapper functions may vary across\narchitectures, according to the range of system calls\nprovided on those architectures. In other words, the same\nwrapper function may invoke different system calls on\ndifferent architectures.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"3%\"></td>\n<td width=\"80%\">\n\n\n<p>Finally, the behavior of wrapper functions can change\nacross glibc versions. For example, in older versions, the\nglibc wrapper function for <a href=\"https://man.page/2/open\">open(2)</a> invoked the system\ncall of the same name, but starting in glibc 2.26, the\nimplementation switched to calling <a href=\"https://man.page/2/openat\">openat(2)</a> on all\narchitectures.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The consequence\nof the above points is that it may be necessary to filter\nfor a system call other than might be expected. Various\nmanual pages in Section 2 provide helpful details about the\ndifferences between wrapper functions and the underlying\nsystem calls in subsections entitled <i>C library/kernel\ndifferences</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Furthermore,\nnote that the application of seccomp filters even risks\ncausing bugs in an application, when the filters cause\nunexpected failures for legitimate operations that the\napplication might need to perform. Such bugs may not easily\nbe discovered when testing the seccomp filters if the bugs\noccur in rarely used application code paths.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Seccomp-specific\nBPF details</b> <br>\nNote the following BPF details specific to seccomp\nfilters:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The <b>BPF_H</b> and\n<b>BPF_B</b> size modifiers are not supported: all\noperations must load and store (4-byte) words\n(<b>BPF_W</b>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>To access the contents of the <i>seccomp_data</i>\nbuffer, use the <b>BPF_ABS</b> addressing mode modifier.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <b>BPF_LEN</b> addressing mode modifier yields an\nimmediate mode operand whose value is the size of the\n<i>seccomp_data</i> buffer.</p></td></tr>\n</table>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow accepts four or more arguments. The first three\narguments are a system call number, a numeric architecture\nidentifier, and an error number. The program uses these\nvalues to construct a BPF filter that is used at run time to\nperform the following checks:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\">[1]</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">If the program is not running on\nthe specified architecture, the BPF filter causes system\ncalls to fail with the error <b>ENOSYS</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>[2]</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If the program attempts to execute the system call with\nthe specified number, the BPF filter causes the system call\nto fail, with <i>errno</i> being set to the specified error\nnumber.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The remaining\ncommand-line arguments specify the pathname and additional\narguments of a program that the example program should\nattempt to execute using <a href=\"https://man.page/3/execv\">execv(3)</a> (a library function\nthat employs the <a href=\"https://man.page/2/execve\">execve(2)</a> system call). Some example\nruns of the program are shown below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, we\ndisplay the architecture that we are running on (x86-64) and\nthen construct a shell function that looks up system call\nnumbers on this architecture:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>uname\n-m</b> <br>\nx86_64 <br>\n$ <b>syscall_nr() { <br>\ncat /usr/src/linux/arch/x86/syscalls/syscall_64.tbl | \\ <br>\nawk '$2 != &quot;x32&quot; &amp;&amp; $3 == &quot;'$1'&quot;\n{ print $1 }' <br>\n}</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the BPF\nfilter rejects a system call (case [2] above), it causes the\nsystem call to fail with the error number specified on the\ncommand line. In the experiments shown here, we&rsquo;ll use\nerror number 99:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>errno\n99</b> <br>\nEADDRNOTAVAIL 99 Cannot assign requested address</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing example, we attempt to run the command\n<a href=\"https://man.page/1/whoami\">whoami(1)</a>, but the BPF filter rejects the\n<a href=\"https://man.page/2/execve\">execve(2)</a> system call, so that the command is not\neven executed:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>syscall_nr\nexecve</b> <br>\n59 <br>\n$ <b>./a.out</b> <br>\nUsage: ./a.out &lt;syscall_nr&gt; &lt;arch&gt; &lt;errno&gt;\n&lt;prog&gt; [&lt;args&gt;] <br>\nHint for &lt;arch&gt;: AUDIT_ARCH_I386: 0x40000003 <br>\nAUDIT_ARCH_X86_64: 0xC000003E <br>\n$ <b>./a.out 59 0xC000003E 99 /bin/whoami</b> <br>\nexecv: Cannot assign requested address</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the next\nexample, the BPF filter rejects the <a href=\"https://man.page/2/write\">write(2)</a> system\ncall, so that, although it is successfully started, the\n<a href=\"https://man.page/1/whoami\">whoami(1)</a> command is not able to write output:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>syscall_nr\nwrite</b> <br>\n1 <br>\n$ <b>./a.out 1 0xC000003E 99 /bin/whoami</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the final\nexample, the BPF filter rejects a system call that is not\nused by the <a href=\"https://man.page/1/whoami\">whoami(1)</a> command, so it is able to\nsuccessfully execute and produce output:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>syscall_nr\npreadv</b> <br>\n295 <br>\n$ <b>./a.out 295 0xC000003E 99 /bin/whoami</b> <br>\ncecilia</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;errno.h&gt; <br>\n#include &lt;stddef.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;linux/audit.h&gt; <br>\n#include &lt;linux/filter.h&gt; <br>\n#include &lt;linux/seccomp.h&gt; <br>\n#include &lt;sys/prctl.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nX32_SYSCALL_BIT 0x40000000 <br>\n#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int <br>\ninstall_filter(int syscall_nr, int t_arch, int f_errno) <br>\n{ <br>\nunsigned int upper_nr_limit = 0xffffffff;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Assume that\nAUDIT_ARCH_X86_64 means the normal x86-64 ABI <br>\n(in the x32 ABI, all system calls have bit 30 set in the\n<br>\n'nr' field, meaning the numbers are &gt;= X32_SYSCALL_BIT)\n*/ <br>\nif (t_arch == AUDIT_ARCH_X86_64) <br>\nupper_nr_limit = X32_SYSCALL_BIT - 1;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">struct\nsock_filter filter[] = { <br>\n/* [0] Load architecture from 'seccomp_data' buffer into\n<br>\naccumulator */ <br>\nBPF_STMT(BPF_LD | BPF_W | BPF_ABS, <br>\n(offsetof(struct seccomp_data, arch))),</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* [1] Jump\nforward 5 instructions if architecture does not <br>\nmatch 't_arch' */ <br>\nBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, t_arch, 0, 5),</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* [2] Load\nsystem call number from 'seccomp_data' buffer into <br>\naccumulator */ <br>\nBPF_STMT(BPF_LD | BPF_W | BPF_ABS, <br>\n(offsetof(struct seccomp_data, nr))),</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* [3] Check\nABI - only needed for x86-64 in deny-list use <br>\ncases. Use BPF_JGT instead of checking against the bit <br>\nmask to avoid having to reload the syscall number. */ <br>\nBPF_JUMP(BPF_JMP | BPF_JGT | BPF_K, upper_nr_limit, 3,\n0),</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* [4] Jump\nforward 1 instruction if system call number <br>\ndoes not match 'syscall_nr' */ <br>\nBPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, syscall_nr, 0, 1),</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* [5] Matching\narchitecture and system call: don't execute <br>\nthe system call, and return 'f_errno' in 'errno' */ <br>\nBPF_STMT(BPF_RET | BPF_K, <br>\nSECCOMP_RET_ERRNO | (f_errno &amp; SECCOMP_RET_DATA)),</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* [6]\nDestination of system call number mismatch: allow other <br>\nsystem calls */ <br>\nBPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* [7]\nDestination of architecture mismatch: kill process */ <br>\nBPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL_PROCESS), <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">struct\nsock_fprog prog = { <br>\n.len = ARRAY_SIZE(filter), <br>\n.filter = filter, <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(seccomp(SECCOMP_SET_MODE_FILTER, 0, &amp;prog)) { <br>\nperror(&quot;seccomp&quot;); <br>\nreturn 1; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return 0; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char **argv) <br>\n{ <br>\nif (argc &lt; 5) { <br>\nfprintf(stderr, &quot;Usage: &quot; <br>\n&quot;%s &lt;syscall_nr&gt; &lt;arch&gt; &lt;errno&gt;\n&lt;prog&gt; [&lt;args&gt;]\\n&quot; <br>\n&quot;Hint for &lt;arch&gt;: AUDIT_ARCH_I386: 0x%X\\n&quot;\n<br>\n&quot; AUDIT_ARCH_X86_64: 0x%X\\n&quot; <br>\n&quot;\\n&quot;, argv[0], AUDIT_ARCH_I386,\nAUDIT_ARCH_X86_64); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) { <br>\nperror(&quot;prctl&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(install_filter(strtol(argv[1], NULL, 0), <br>\nstrtol(argv[2], NULL, 0), <br>\nstrtol(argv[3], NULL, 0))) <br>\nexit(EXIT_FAILURE);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">execv(argv[4],\n&amp;argv[4]); <br>\nperror(&quot;execv&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/bpfc\">bpfc(1)</a>,\n<a href=\"https://man.page/1/strace\">strace(1)</a>, <a href=\"https://man.page/2/bpf\">bpf(2)</a>, <a href=\"https://man.page/2/prctl\">prctl(2)</a>,\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a>, <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>, <a href=\"https://man.page/5/proc\">proc(5)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a>, <a href=\"https://man.page/7/socket\">socket(7)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various pages\nfrom the <i>libseccomp</i> library, including:\n<a href=\"https://man.page/1/scmp_sys_resolver\">scmp_sys_resolver(1)</a>, <a href=\"https://man.page/3/seccomp_export_bpf\">seccomp_export_bpf(3)</a>,\n<a href=\"https://man.page/3/seccomp_init\">seccomp_init(3)</a>, <a href=\"https://man.page/3/seccomp_load\">seccomp_load(3)</a>, and\n<a href=\"https://man.page/3/seccomp_rule_add\">seccomp_rule_add(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nsource files <i>Documentation/networking/filter.txt</i> and\n<i>Documentation/userspace-api/seccomp_filter.rst</i> (or\n<i>Documentation/prctl/seccomp_filter.txt</i> before Linux\n4.13).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">McCanne, S. and\nJacobson, V. (1992) <i>The BSD Packet Filter: A New\nArchitecture for User-level Packet Capture</i>, Proceedings\nof the USENIX Winter 1993 Conference\n<a href=\"http://www.tcpdump.org/papers/bpf-usenix93.pdf\">http://www.tcpdump.org/papers/bpf-usenix93.pdf</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}