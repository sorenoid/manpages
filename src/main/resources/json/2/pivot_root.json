{"name":"pivot_root","description":"pivot_root -\nchange the root mount","body":"\n\n<h1 align=\"center\">PIVOT_ROOT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pivot_root -\nchange the root mount</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npivot_root(const char *</b><i>new_root</i><b>, const char\n*</b><i>put_old</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nThere is no glibc wrapper for this system call; see\nNOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pivot_root</b>()\nchanges the root mount in the mount namespace of the calling\nprocess. More precisely, it moves the root mount to the\ndirectory <i>put_old</i> and makes <i>new_root</i> the new\nroot mount. The calling process must have the\n<b>CAP_SYS_ADMIN</b> capability in the user namespace that\nowns the caller&rsquo;s mount namespace.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pivot_root</b>()\nchanges the root directory and the current working directory\nof each process or thread in the same mount namespace to\n<i>new_root</i> if they point to the old root directory.\n(See also NOTES.) On the other hand, <b>pivot_root</b>()\ndoes not change the caller&rsquo;s current working directory\n(unless it is on the old root directory), and thus it should\nbe followed by a <b>chdir(&quot;/&quot;)</b> call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nrestrictions apply:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><i>new_root</i> and <i>put_old</i> must be\ndirectories.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><i>new_root</i> and <i>put_old</i> must not be on the\nsame mount as the current root.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><i>put_old</i> must be at or underneath <i>new_root</i>;\nthat is, adding some nonnegative number of\n&quot;<i>/..</i>&quot; prefixes to the pathname pointed to\nby <i>put_old</i> must yield the same directory as\n<i>new_root</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><i>new_root</i> must be a path to a mount point, but\ncan&rsquo;t be <i>&quot;/&quot;</i>. A path that is not\nalready a mount point can be converted into one by bind\nmounting the path onto itself.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The propagation type of the parent mount of\n<i>new_root</i> and the parent mount of the current root\ndirectory must not be <b>MS_SHARED</b>; similarly, if\n<i>put_old</i> is an existing mount point, its propagation\ntype must not be <b>MS_SHARED</b>. These restrictions ensure\nthat <b>pivot_root</b>() never propagates any changes to\nanother mount namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The current root directory must be a mount point.</p></td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, and <i>errno</i>\nis set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pivot_root</b>()\nmay fail with any of the same errors as <a href=\"https://man.page/2/stat\">stat(2)</a>.\nAdditionally, it may fail with the following errors:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>new_root</i> or\n<i>put_old</i> is on the current root mount. (This error\ncovers the pathological case where <i>new_root</i> is\n<i>&quot;/&quot;</i>.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>new_root</i> is not a mount point.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>put_old</i> is not at or underneath\n<i>new_root</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The current root directory is not a mount point (because\nof an earlier <a href=\"https://man.page/2/chroot\">chroot(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The current root is on the rootfs (initial ramfs) mount;\nsee NOTES.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Either the mount point at <i>new_root</i>, or the parent\nmount of that mount point, has propagation type\n<b>MS_SHARED</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>put_old</i> is a mount point and has the propagation\ntype <b>MS_SHARED</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\"><i>new_root</i> or\n<i>put_old</i> is not a directory.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process does not have the\n<b>CAP_SYS_ADMIN</b> capability.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pivot_root</b>()\nwas introduced in Linux 2.3.41.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pivot_root</b>()\nis Linux-specific and hence is not portable.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glibc does not\nprovide a wrapper for this system call; call it using\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A command-line\ninterface for this system call is provided by\n<b>pivot_root</b>(8).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pivot_root</b>()\nallows the caller to switch to a new root filesystem while\nat the same time placing the old root mount at a location\nunder <i>new_root</i> from where it can subsequently be\nunmounted. (The fact that it moves all processes that have a\nroot directory or current working directory on the old root\ndirectory to the new root frees the old root directory of\nusers, allowing the old root mount to be unmounted more\neasily.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One use of\n<b>pivot_root</b>() is during system startup, when the\nsystem mounts a temporary root filesystem (e.g., an\n<a href=\"https://man.page/4/initrd\">initrd(4)</a>), then mounts the real root filesystem, and\neventually turns the latter into the root directory of all\nrelevant processes and threads. A modern use is to set up a\nroot filesystem during the creation of a container.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fact that\n<b>pivot_root</b>() modifies process root and current\nworking directories in the manner noted in DESCRIPTION is\nnecessary in order to prevent kernel threads from keeping\nthe old root mount busy with their root and current working\ndirectories, even if they never access the filesystem in any\nway.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The rootfs\n(initial ramfs) cannot be <b>pivot_root</b>()ed. The\nrecommended method of changing the root filesystem in this\ncase is to delete everything in rootfs, overmount rootfs\nwith the new root, attach\n<i>stdin</i>/<i>stdout</i>/<i>stderr</i> to the new\n<i>/dev/console</i>, and exec the new <a href=\"https://man.page/1/init\">init(1)</a>. Helper\nprograms for this process exist; see\n<b>switch_root</b>(8).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pivot_root(&quot;.&quot;,\n&quot;.&quot;)</b> <i><br>\nnew_root</i> and <i>put_old</i> may be the same directory.\nIn particular, the following sequence allows a pivot-root\noperation without needing to create and remove a temporary\ndirectory:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">chdir(new_root);\n<br>\npivot_root(&quot;.&quot;, &quot;.&quot;); <br>\numount2(&quot;.&quot;, MNT_DETACH);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This sequence\nsucceeds because the <b>pivot_root</b>() call stacks the old\nroot mount point on top of the new root mount point at\n<i>/</i>. At that point, the calling process&rsquo;s root\ndirectory and current working directory refer to the new\nroot mount point (<i>new_root</i>). During the subsequent\n<b>umount</b>() call, resolution of <i>&quot;.&quot;</i>\nstarts with <i>new_root</i> and then moves up the list of\nmounts stacked at <i>/</i>, with the result that old root\nmount point is unmounted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Historical\nnotes</b> <br>\nFor many years, this manual page carried the following\ntext:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>pivot_root</b>()\nmay or may not change the current root and the current\nworking directory of any processes or threads which use the\nold root directory. The caller of <b>pivot_root</b>() must\nensure that processes with root or current working directory\nat the old root operate correctly in either case. An easy\nway to ensure this is to change their root and current\nworking directory to <i>new_root</i> before invoking\n<b>pivot_root</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This text,\nwritten before the system call implementation was even\nfinalized in the kernel, was probably intended to warn users\nat that time that the implementation might change before\nfinal release. However, the behavior stated in DESCRIPTION\nhas remained consistent since this system call was first\nimplemented and will not change now.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>pivot_root</b>() inside a\nmount namespace that is created using <a href=\"https://man.page/2/clone\">clone(2)</a>. After\npivoting to the root directory named in the program&rsquo;s\nfirst command-line argument, the child created by\n<a href=\"https://man.page/2/clone\">clone(2)</a> then executes the program named in the\nremaining command-line arguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We demonstrate\nthe program by creating a directory that will serve as the\nnew root filesystem and placing a copy of the (statically\nlinked) <a href=\"https://man.page/1/busybox\">busybox(1)</a> executable in that directory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>mkdir\n/tmp/rootfs</b> <br>\n$ <b>ls -id /tmp/rootfs</b> # Show inode number of new root\ndirectory <br>\n319459 /tmp/rootfs <br>\n$ <b>cp $(which busybox) /tmp/rootfs</b> <br>\n$ <b>PS1='bbsh$ ' sudo ./pivot_root_demo /tmp/rootfs\n/busybox sh</b> <br>\nbbsh$ <b>PATH=/</b> <br>\nbbsh$ <b>busybox ln busybox ln</b> <br>\nbbsh$ <b>ln busybox echo</b> <br>\nbbsh$ <b>ln busybox ls</b> <br>\nbbsh$ <b>ls</b> <br>\nbusybox echo ln ls <br>\nbbsh$ <b>ls -id /</b> # Compare with inode number above <br>\n319459 / <br>\nbbsh$ <b>echo 'hello world'</b> <br>\nhello world</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/*\npivot_root_demo.c */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\n_GNU_SOURCE <br>\n#include &lt;sched.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;sys/wait.h&gt; <br>\n#include &lt;sys/syscall.h&gt; <br>\n#include &lt;sys/mount.h&gt; <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;limits.h&gt; <br>\n#include &lt;sys/mman.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nerrExit(msg) do { perror(msg); exit(EXIT_FAILURE); \\ <br>\n} while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int <br>\npivot_root(const char *new_root, const char *put_old) <br>\n{ <br>\nreturn syscall(SYS_pivot_root, new_root, put_old); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nSTACK_SIZE (1024 * 1024)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int /*\nStartup function for cloned child */ <br>\nchild(void *arg) <br>\n{ <br>\nchar **args = arg; <br>\nchar *new_root = args[0]; <br>\nconst char *put_old = &quot;/oldrootfs&quot;; <br>\nchar path[PATH_MAX];</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Ensure that\n'new_root' and its parent mount don't have <br>\nshared propagation (which would cause pivot_root() to <br>\nreturn an error), and prevent propagation of mount <br>\nevents to the initial mount namespace */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (mount(NULL,\n&quot;/&quot;, NULL, MS_REC | MS_PRIVATE, NULL) == -1) <br>\nerrExit(&quot;mount-MS_PRIVATE&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Ensure that\n'new_root' is a mount point */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(mount(new_root, new_root, NULL, MS_BIND, NULL) == -1) <br>\nerrExit(&quot;mount-MS_BIND&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Create\ndirectory to which old root will be pivoted */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">snprintf(path,\nsizeof(path), &quot;%s/%s&quot;, new_root, put_old); <br>\nif (mkdir(path, 0777) == -1) <br>\nerrExit(&quot;mkdir&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* And pivot\nthe root filesystem */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(pivot_root(new_root, path) == -1) <br>\nerrExit(&quot;pivot_root&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Switch the\ncurrent working directory to &quot;/&quot; */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(chdir(&quot;/&quot;) == -1) <br>\nerrExit(&quot;chdir&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Unmount old\nroot and remove mount point */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(umount2(put_old, MNT_DETACH) == -1) <br>\nperror(&quot;umount2&quot;); <br>\nif (rmdir(put_old) == -1) <br>\nperror(&quot;rmdir&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Execute the\ncommand specified in argv[1]... */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">execv(args[1],\n&amp;args[1]); <br>\nerrExit(&quot;execv&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\n/* Create a child process in a new mount namespace */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">char *stack =\nmmap(NULL, STACK_SIZE, PROT_READ | PROT_WRITE, <br>\nMAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, -1, 0); <br>\nif (stack == MAP_FAILED) <br>\nerrExit(&quot;mmap&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(clone(child, stack + STACK_SIZE, <br>\nCLONE_NEWNS | SIGCHLD, &amp;argv[1]) == -1) <br>\nerrExit(&quot;clone&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Parent falls\nthrough to here; wait for child */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (wait(NULL)\n== -1) <br>\nerrExit(&quot;wait&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/chdir\">chdir(2)</a>,\n<a href=\"https://man.page/2/chroot\">chroot(2)</a>, <a href=\"https://man.page/2/mount\">mount(2)</a>, <a href=\"https://man.page/2/stat\">stat(2)</a>,\n<a href=\"https://man.page/4/initrd\">initrd(4)</a>, <a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>,\n<b>pivot_root</b>(8), <b>switch_root</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}