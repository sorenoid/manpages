{"name":"mount","body":"\n\n<h1 align=\"center\">MOUNT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mount - mount\nfilesystem</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/mount.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmount(const char *</b><i>source</i><b>, const char\n*</b><i>target</i><b>, <br>\nconst char *</b><i>filesystemtype</i><b>, unsigned long</b>\n<i>mountflags</i><b>, <br>\nconst void *</b><i>data</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mount</b>()\nattaches the filesystem specified by <i>source</i> (which is\noften a pathname referring to a device, but can also be the\npathname of a directory or file, or a dummy string) to the\nlocation (a directory or file) specified by the pathname in\n<i>target</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Appropriate\nprivilege (Linux: the <b>CAP_SYS_ADMIN</b> capability) is\nrequired to mount filesystems.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Values for the\n<i>filesystemtype</i> argument supported by the kernel are\nlisted in <i>/proc/filesystems</i> (e.g., &quot;btrfs&quot;,\n&quot;ext4&quot;, &quot;jfs&quot;, &quot;xfs&quot;,\n&quot;vfat&quot;, &quot;fuse&quot;, &quot;tmpfs&quot;,\n&quot;cgroup&quot;, &quot;proc&quot;, &quot;mqueue&quot;,\n&quot;nfs&quot;, &quot;cifs&quot;, &quot;iso9660&quot;).\nFurther types may become available when the appropriate\nmodules are loaded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>data</i>\nargument is interpreted by the different filesystems.\nTypically it is a string of comma-separated options\nunderstood by this filesystem. See <b>mount</b>(8) for\ndetails of the options available for each filesystem\ntype.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A call to\n<b>mount</b>() performs one of a number of general types of\noperation, depending on the bits specified in\n<i>mountflags</i>. The choice of which operation to perform\nis determined by testing the bits set in <i>mountflags</i>,\nwith the tests being conducted in the order listed here:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Remount an existing mount: <i>mountflags</i> includes\n<b>MS_REMOUNT</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Create a bind mount: <i>mountflags</i> includes\n<b>MS_BIND</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Change the propagation type of an existing mount:\n<i>mountflags</i> includes one of <b>MS_SHARED</b>,\n<b>MS_PRIVATE</b>, <b>MS_SLAVE</b>, or\n<b>MS_UNBINDABLE</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Move an existing mount to a new location:\n<i>mountflags</i> includes <b>MS_MOVE</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Create a new mount: <i>mountflags</i> includes none of\nthe above flags.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of these\noperations is detailed later in this page. Further flags may\nbe specified in <i>mountflags</i> to modify the behavior of\n<b>mount</b>(), as described below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Additional\nmount flags</b> <br>\nThe list below describes the additional flags that can be\nspecified in <i>mountflags</i>. Note that some operation\ntypes ignore some or all of these flags, as described later\nin this page. <b><br>\nMS_DIRSYNC</b> (since Linux 2.5.19)</p>\n\n<p style=\"margin-left:22%;\">Make directory changes on this\nfilesystem synchronous. (This property can be obtained for\nindividual directories or subtrees using\n<a href=\"https://man.page/1/chattr\">chattr(1)</a>.)</p>\n\n<p style=\"margin-left:11%;\"><b>MS_LAZYTIME</b> (since Linux\n4.0)</p>\n\n<p style=\"margin-left:22%;\">Reduce on-disk updates of inode\ntimestamps (atime, mtime, ctime) by maintaining these\nchanges only in memory. The on-disk timestamps are updated\nonly when:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(a)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>the inode needs to be updated for some change unrelated\nto file timestamps;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(b)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>the application employs <a href=\"https://man.page/2/fsync\">fsync(2)</a>,\n<a href=\"https://man.page/2/syncfs\">syncfs(2)</a>, or <a href=\"https://man.page/2/sync\">sync(2)</a>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(c)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>an undeleted inode is evicted from memory; or</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p>(d)</p></td>\n<td width=\"3%\"></td>\n<td width=\"71%\">\n\n\n<p>more than 24 hours have passed since the inode was\nwritten to disk.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This mount\noption significantly reduces writes needed to update the\ninode&rsquo;s timestamps, especially mtime and atime.\nHowever, in the event of a system crash, the atime and mtime\nfields on disk might be out of date by up to 24 hours.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Examples of\nworkloads where this option could be of significant benefit\ninclude frequent random writes to preallocated files, as\nwell as cases where the <b>MS_STRICTATIME</b> mount option\nis also enabled. (The advantage of combining\n<b>MS_STRICTATIME</b> and <b>MS_LAZYTIME</b> is that\n<a href=\"https://man.page/2/stat\">stat(2)</a> will return the correctly updated atime, but\nthe atime updates will be flushed to disk only in the cases\nlisted above.)</p>\n\n<p style=\"margin-left:11%;\"><b>MS_MANDLOCK</b></p>\n\n<p style=\"margin-left:22%;\">Permit mandatory locking on\nfiles in this filesystem. (Mandatory locking must still be\nenabled on a per-file basis, as described in\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.) Since Linux 4.5, this mount option\nrequires the <b>CAP_SYS_ADMIN</b> capability and a kernel\nconfigured with the <b>CONFIG_MANDATORY_FILE_LOCKING</b>\noption.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_NOATIME</b></p>\n\n<p style=\"margin-left:22%;\">Do not update access times for\n(all types of) files on this filesystem.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_NODEV</b></p>\n\n<p style=\"margin-left:22%;\">Do not allow access to devices\n(special files) on this filesystem.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_NODIRATIME</b></p>\n\n<p style=\"margin-left:22%;\">Do not update access times for\ndirectories on this filesystem. This flag provides a subset\nof the functionality provided by <b>MS_NOATIME</b>; that is,\n<b>MS_NOATIME</b> implies <b>MS_NODIRATIME</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_NOEXEC</b></p>\n\n<p style=\"margin-left:22%;\">Do not allow programs to be\nexecuted from this filesystem.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_NOSUID</b></p>\n\n<p style=\"margin-left:22%;\">Do not honor set-user-ID and\nset-group-ID bits or file capabilities when executing\nprograms from this filesystem.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_RDONLY</b></p>\n\n<p style=\"margin-left:22%;\">Mount filesystem read-only.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_REC</b> (since Linux\n2.4.11)</p>\n\n<p style=\"margin-left:22%;\">Used in conjunction with\n<b>MS_BIND</b> to create a recursive bind mount, and in\nconjunction with the propagation type flags to recursively\nchange the propagation type of all of the mounts in a\nsubtree. See below for further details.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_RELATIME</b> (since Linux\n2.6.20)</p>\n\n<p style=\"margin-left:22%;\">When a file on this filesystem\nis accessed, update the file&rsquo;s last access time\n(atime) only if the current value of atime is less than or\nequal to the file&rsquo;s last modification time (mtime) or\nlast status change time (ctime). This option is useful for\nprograms, such as <a href=\"https://man.page/1/mutt\">mutt(1)</a>, that need to know when a\nfile has been read since it was last modified. Since Linux\n2.6.30, the kernel defaults to the behavior provided by this\nflag (unless <b>MS_NOATIME</b> was specified), and the\n<b>MS_STRICTATIME</b> flag is required to obtain traditional\nsemantics. In addition, since Linux 2.6.30, the file&rsquo;s\nlast access time is always updated if it is more than 1 day\nold.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_SILENT</b> (since Linux\n2.6.17)</p>\n\n<p style=\"margin-left:22%;\">Suppress the display of certain\n(<i>printk</i>()) warning messages in the kernel log. This\nflag supersedes the misnamed and obsolete <b>MS_VERBOSE</b>\nflag (available since Linux 2.4.12), which has the same\nmeaning.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_STRICTATIME</b> (since\nLinux 2.6.30)</p>\n\n<p style=\"margin-left:22%;\">Always update the last access\ntime (atime) when files on this filesystem are accessed.\n(This was the default behavior before Linux 2.6.30.)\nSpecifying this flag overrides the effect of setting the\n<b>MS_NOATIME</b> and <b>MS_RELATIME</b> flags.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_SYNCHRONOUS</b></p>\n\n<p style=\"margin-left:22%;\">Make writes on this filesystem\nsynchronous (as though the <b>O_SYNC</b> flag to\n<a href=\"https://man.page/2/open\">open(2)</a> was specified for all file opens to this\nfilesystem).</p>\n\n<p style=\"margin-left:11%;\"><b>MS_NOSYMFOLLOW</b> (since\nLinux 5.10)</p>\n\n<p style=\"margin-left:22%;\">Do not follow symbolic links\nwhen resolving paths. Symbolic links can still be created,\nand <a href=\"https://man.page/1/readlink\">readlink(1)</a>, <a href=\"https://man.page/2/readlink\">readlink(2)</a>,\n<a href=\"https://man.page/1/realpath\">realpath(1)</a>, and <a href=\"https://man.page/3/realpath\">realpath(3)</a> all still work\nproperly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From Linux 2.4\nonward, some of the above flags are settable on a per-mount\nbasis, while others apply to the superblock of the mounted\nfilesystem, meaning that all mounts of the same filesystem\nshare those flags. (Previously, all of the flags were\nper-superblock.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nper-mount-point flags are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Since Linux 2.4: <b>MS_NODEV</b>, <b>MS_NOEXEC</b>, and\n<b>MS_NOSUID</b> flags are settable on a per-mount-point\nbasis.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Additionally, since Linux 2.6.16: <b>MS_NOATIME</b> and\n<b>MS_NODIRATIME</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Additionally, since Linux 2.6.20:\n<b>MS_RELATIME</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nflags are per-superblock: <b>MS_DIRSYNC</b>,\n<b>MS_LAZYTIME</b>, <b>MS_MANDLOCK</b>, <b>MS_SILENT</b>,\nand <b>MS_SYNCHRONOUS</b>. The initial settings of these\nflags are determined on the first mount of the filesystem,\nand will be shared by all subsequent mounts of the same\nfilesystem. Subsequently, the settings of the flags can be\nchanged via a remount operation (see below). Such changes\nwill be visible via all mount points associated with the\nfilesystem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.16, <b>MS_RDONLY</b> can be set or cleared on a\nper-mount-point basis as well as on the underlying\nfilesystem superblock. The mounted filesystem will be\nwritable only if neither the filesystem nor the mountpoint\nare flagged as read-only.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Remounting\nan existing mount</b> <br>\nAn existing mount may be remounted by specifying\n<b>MS_REMOUNT</b> in <i>mountflags</i>. This allows you to\nchange the <i>mountflags</i> and <i>data</i> of an existing\nmount without having to unmount and remount the filesystem.\n<i>target</i> should be the same value specified in the\ninitial <b>mount</b>() call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>source</i> and <i>filesystemtype</i> arguments are\nignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>mountflags</i> and <i>data</i> arguments should match the\nvalues used in the original <b>mount</b>() call, except for\nthose parameters that are being deliberately changed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\n<i>mountflags</i> can be changed: <b>MS_LAZYTIME</b>,\n<b>MS_MANDLOCK</b>, <b>MS_NOATIME</b>, <b>MS_NODEV</b>,\n<b>MS_NODIRATIME</b>, <b>MS_NOEXEC</b>, <b>MS_NOSUID</b>,\n<b>MS_RELATIME</b>, <b>MS_RDONLY</b>, <b>MS_STRICTATIME</b>\n(whose effect is to clear the <b>MS_NOATIME</b> and\n<b>MS_RELATIME</b> flags), and <b>MS_SYNCHRONOUS</b>.\nAttempts to change the setting of the <b>MS_DIRSYNC</b> and\n<b>MS_SILENT</b> flags during a remount are silently\nignored. Note that changes to per-superblock flags are\nvisible via all mount points of the associated filesystem\n(because the per-superblock flags are shared by all mount\npoints).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n3.17, if none of <b>MS_NOATIME</b>, <b>MS_NODIRATIME</b>,\n<b>MS_RELATIME</b>, or <b>MS_STRICTATIME</b> is specified in\n<i>mountflags</i>, then the remount operation preserves the\nexisting values of these flags (rather than defaulting to\n<b>MS_RELATIME</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.26, the <b>MS_REMOUNT</b> flag can be used with\n<b>MS_BIND</b> to modify only the per-mount-point flags.\nThis is particularly useful for setting or clearing the\n&quot;read-only&quot; flag on a mount point without changing\nthe underlying filesystem. Specifying <i>mountflags</i>\nas:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">MS_REMOUNT |\nMS_BIND | MS_RDONLY</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">will make\naccess through this mountpoint read-only, without affecting\nother mount points.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Creating a\nbind mount</b> <br>\nIf <i>mountflags</i> includes <b>MS_BIND</b> (available\nsince Linux 2.4), then perform a bind mount. A bind mount\nmakes a file or a directory subtree visible at another point\nwithin the single directory hierarchy. Bind mounts may cross\nfilesystem boundaries and span <a href=\"https://man.page/2/chroot\">chroot(2)</a> jails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>filesystemtype</i> and <i>data</i> arguments are\nignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The remaining\nbits (other than <b>MS_REC</b>, described below) in the\n<i>mountflags</i> argument are also ignored. (The bind mount\nhas the same mount options as the underlying mount point.)\nHowever, see the discussion of remounting above, for a\nmethod of making an existing bind mount read-only.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\nwhen a directory is bind mounted, only that directory is\nmounted; if there are any submounts under the directory\ntree, they are not bind mounted. If the <b>MS_REC</b> flag\nis also specified, then a recursive bind mount operation is\nperformed: all submounts under the <i>source</i> subtree\n(other than unbindable mounts) are also bind mounted at the\ncorresponding location in the <i>target</i> subtree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Changing the\npropagation type of an existing mount</b> <br>\nIf <i>mountflags</i> includes one of <b>MS_SHARED</b>,\n<b>MS_PRIVATE</b>, <b>MS_SLAVE</b>, or <b>MS_UNBINDABLE</b>\n(all available since Linux 2.6.15), then the propagation\ntype of an existing mount is changed. If more than one of\nthese flags is specified, an error results.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The only other\nflags that can be specified while changing the propagation\ntype are <b>MS_REC</b> (described below) and\n<b>MS_SILENT</b> (which is ignored).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>source</i>, <i>filesystemtype</i>, and <i>data</i>\narguments are ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The meanings of\nthe propagation type flags are as follows: <b><br>\nMS_SHARED</b></p>\n\n<p style=\"margin-left:22%;\">Make this mount point shared.\nMount and unmount events immediately under this mount point\nwill propagate to the other mount points that are members of\nthis mount&rsquo;s peer group. Propagation here means that\nthe same mount or unmount will automatically occur under all\nof the other mount points in the peer group. Conversely,\nmount and unmount events that take place under peer mount\npoints will propagate to this mount point.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_PRIVATE</b></p>\n\n<p style=\"margin-left:22%;\">Make this mount point private.\nMount and unmount events do not propagate into or out of\nthis mount point.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_SLAVE</b></p>\n\n<p style=\"margin-left:22%;\">If this is a shared mount point\nthat is a member of a peer group that contains other\nmembers, convert it to a slave mount. If this is a shared\nmount point that is a member of a peer group that contains\nno other members, convert it to a private mount. Otherwise,\nthe propagation type of the mount point is left\nunchanged.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When a mount\npoint is a slave, mount and unmount events propagate into\nthis mount point from the (master) shared peer group of\nwhich it was formerly a member. Mount and unmount events\nunder this mount point do not propagate to any peer.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A mount point\ncan be the slave of another peer group while at the same\ntime sharing mount and unmount events with a peer group of\nwhich it is a member.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_UNBINDABLE</b></p>\n\n<p style=\"margin-left:22%;\">Make this mount unbindable.\nThis is like a private mount, and in addition this mount\ncan&rsquo;t be bind mounted. When a recursive bind mount\n(<b>mount</b>() with the <b>MS_BIND</b> and <b>MS_REC</b>\nflags) is performed on a directory subtree, any unbindable\nmounts within the subtree are automatically pruned (i.e.,\nnot replicated) when replicating that subtree to produce the\ntarget subtree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\nchanging the propagation type affects only the <i>target</i>\nmount point. If the <b>MS_REC</b> flag is also specified in\n<i>mountflags</i>, then the propagation type of all mount\npoints under <i>target</i> is also changed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For further\ndetails regarding mount propagation types (including the\ndefault propagation type assigned to new mounts), see\n<a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Moving a\nmount</b> <br>\nIf <i>mountflags</i> contains the flag <b>MS_MOVE</b>\n(available since Linux 2.4.18), then move a subtree:\n<i>source</i> specifies an existing mount point and\n<i>target</i> specifies the new location to which that mount\npoint is to be relocated. The move is atomic: at no point is\nthe subtree unmounted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The remaining\nbits in the <i>mountflags</i> argument are ignored, as are\nthe <i>filesystemtype</i> and <i>data</i> arguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Creating a\nnew mount point</b> <br>\nIf none of <b>MS_REMOUNT</b>, <b>MS_BIND</b>,\n<b>MS_MOVE</b>, <b>MS_SHARED</b>, <b>MS_PRIVATE</b>,\n<b>MS_SLAVE</b>, or <b>MS_UNBINDABLE</b> is specified in\n<i>mountflags</i>, then <b>mount</b>() performs its default\naction: creating a new mount point. <i>source</i> specifies\nthe source for the new mount point, and <i>target</i>\nspecifies the directory at which to create the mount\npoint.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>filesystemtype</i> and <i>data</i> arguments are\nemployed, and further bits may be specified in\n<i>mountflags</i> to modify the behavior of the call.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, and <i>errno</i>\nis set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The error\nvalues given below result from filesystem type independent\nerrors. Each filesystem type may have its own special errors\nand its own special behavior. See the Linux kernel source\ncode for details.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A component of a path was not searchable. (See also\n<a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Mounting a read-only filesystem was attempted without\ngiving the <b>MS_RDONLY</b> flag.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The filesystem\nmay be read-only for various reasons, including: it resides\non a read-only optical disk; it is resides on a device with\na physical switch that has been set to mark the device\nread-only; the filesystem implementation was compiled with\nread-only support; or errors were detected when initially\nmounting the filesystem, so that it was marked read-only and\ncan&rsquo;t be remounted as read-write (until the errors are\nfixed).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Some\nfilesystems instead return the error <b>EROFS</b> on an\nattempt to mount a read-only filesystem.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The block device <i>source</i>\nis located on a filesystem mounted with the <b>MS_NODEV</b>\noption.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to stack a new mount directly on top\nof an existing mount point that was created in this mount\nnamespace with the same <i>source</i> and <i>target</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>source</i> cannot be remounted read-only, because it\nstill holds files open for writing.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>One of the pointer arguments points outside the user\naddress space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>source</i> had an invalid superblock.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A remount operation (<b>MS_REMOUNT</b>) was attempted,\nbut <i>source</i> was not already mounted on\n<i>target</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A move operation (<b>MS_MOVE</b>) was attempted, but the\nmount tree under <i>source</i> includes unbindable mounts\nand <i>target</i> is a mount point that has propagation type\n<b>MS_SHARED</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A move operation (<b>MS_MOVE</b>) was attempted, but the\nparent mount of <i>source</i> mount has propagation type\n<b>MS_SHARED</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A move operation (<b>MS_MOVE</b>) was attempted, but\n<i>source</i> was not a mount point, or was '/'.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A bind operation (<b>MS_BIND</b>) was requested where\n<i>source</i> referred a mount namespace magic link (i.e., a\n<i>/proc/[pid]/ns/mnt</i> magic link or a bind mount to such\na link) and the propagation type of the parent mount of\n<i>target</i> was <b>MS_SHARED</b>, but propagation of the\nrequested bind mount could lead to a circular dependency\nthat might prevent the mount namespace from ever being\nfreed.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>mountflags</i> includes more than one of\n<b>MS_SHARED</b>, <b>MS_PRIVATE</b>, <b>MS_SLAVE</b>, or\n<b>MS_UNBINDABLE</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>mountflags</i> includes <b>MS_SHARED</b>,\n<b>MS_PRIVATE</b>, <b>MS_SLAVE</b>, or <b>MS_UNBINDABLE</b>\nand also includes a flag other than <b>MS_REC</b> or\n<b>MS_SILENT</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to bind mount an unbindable\nmount.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>In an unprivileged mount namespace (i.e., a mount\nnamespace owned by a user namespace that was created by an\nunprivileged user), a bind mount operation (<b>MS_BIND</b>)\nwas attempted without specifying (<b>MS_REC</b>), which\nwould have revealed the filesystem tree underneath one of\nthe submounts of the directory being bound.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Too many links encountered during pathname\nresolution.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A move operation was attempted, and <i>target</i> is a\ndescendant of <i>source</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(In case no block device is required:) Table of dummy\ndevices is full.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENAMETOOLONG</b></p>\n\n<p style=\"margin-left:22%;\">A pathname was longer than\n<b>MAXPATHLEN</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENODEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>filesystemtype</i> not configured in the kernel.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A pathname was empty or had a nonexistent component.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The kernel could not allocate a free page to copy\nfilenames or data into.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTBLK</b></p>\n\n<p style=\"margin-left:22%;\"><i>source</i> is not a block\ndevice (and a device was required).</p>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\"><i>target</i>, or a prefix of\n<i>source</i>, is not a directory.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ENXIO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The major number of the block device <i>source</i> is\nout of range.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller does not have the required privileges.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EROFS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Mounting a read-only filesystem was attempted without\ngiving the <b>MS_RDONLY</b> flag. See <b>EACCES</b>,\nabove.</p> </td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The definitions\nof <b>MS_DIRSYNC</b>, <b>MS_MOVE</b>, <b>MS_PRIVATE</b>,\n<b>MS_REC</b>, <b>MS_RELATIME</b>, <b>MS_SHARED</b>,\n<b>MS_SLAVE</b>, <b>MS_STRICTATIME</b>, and\n<b>MS_UNBINDABLE</b> were added to glibc headers in version\n2.12.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis Linux-specific and should not be used in programs\nintended to be portable.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux 2.4\na single filesystem can be mounted at multiple mount points,\nand multiple mounts can be stacked on the same mount\npoint.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>mountflags</i> argument may have the magic number 0xC0ED\n(<b>MS_MGC_VAL</b>) in the top 16 bits. (All of the other\nflags discussed in DESCRIPTION occupy the low order 16 bits\nof <i>mountflags</i>.) Specifying <b>MS_MGC_VAL</b> was\nrequired in kernel versions prior to 2.4, but since Linux\n2.4 is no longer required and is ignored if specified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The original\n<b>MS_SYNC</b> flag was renamed <b>MS_SYNCHRONOUS</b> in\n1.1.69 when a different <b>MS_SYNC</b> was added to\n<i>&lt;mman.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before Linux\n2.4 an attempt to execute a set-user-ID or set-group-ID\nprogram on a filesystem mounted with <b>MS_NOSUID</b> would\nfail with <b>EPERM</b>. Since Linux 2.4 the set-user-ID and\nset-group-ID bits are just silently ignored in this\ncase.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mount\nnamespaces</b> <br>\nStarting with kernel 2.4.19, Linux provides mount\nnamespaces. A mount namespace is the set of filesystem\nmounts that are visible to a process. Mount namespaces can\nbe (and usually are) shared between multiple processes, and\nchanges to the namespace (i.e., mounts and unmounts) by one\nprocess are visible to all other processes sharing the same\nnamespace. (The pre-2.4.19 Linux situation can be considered\nas one in which a single namespace was shared by every\nprocess on the system.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A child process\ncreated by <a href=\"https://man.page/2/fork\">fork(2)</a> shares its parent&rsquo;s mount\nnamespace; the mount namespace is preserved across an\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A process can\nobtain a private mount namespace if: it was created using\nthe <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_NEWNS</b> flag, in which case\nits new namespace is initialized to be a <i>copy</i> of the\nnamespace of the process that called <a href=\"https://man.page/2/clone\">clone(2)</a>; or it\ncalls <a href=\"https://man.page/2/unshare\">unshare(2)</a> with the <b>CLONE_NEWNS</b> flag,\nwhich causes the caller&rsquo;s mount namespace to obtain a\nprivate copy of the namespace that it was previously sharing\nwith other processes, so that future mounts and unmounts by\nthe caller are invisible to other processes (except child\nprocesses that the caller subsequently creates) and vice\nversa.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For further\ndetails on mount namespaces, see\n<a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Parental\nrelationship between mount points</b> <br>\nEach mount point has a parent mount point. The overall\nparental relationship of all mount points defines the single\ndirectory hierarchy seen by the processes within a mount\nnamespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The parent of a\nnew mount point is defined when the mount point is created.\nIn the usual case, the parent of a new mount is the mount\npoint of the filesystem containing the directory or file at\nwhich the new mount is attached. In the case where a new\nmount is stacked on top of an existing mount, the parent of\nthe new mount is the previous mount that was stacked at that\nlocation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The parental\nrelationship between mount points can be discovered via the\n<i>/proc/[pid]/mountinfo</i> file (see below).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc/[pid]/mounts\nand /proc/[pid]/mountinfo</b> <br>\nThe Linux-specific <i>/proc/[pid]/mounts</i> file exposes\nthe list of mount points in the mount namespace of the\nprocess with the specified ID. The\n<i>/proc/[pid]/mountinfo</i> file exposes even more\ninformation about mount points, including the propagation\ntype and mount ID information that makes it possible to\ndiscover the parental relationship between mount points. See\n<a href=\"https://man.page/5/proc\">proc(5)</a> and <a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a> for details of\nthis file.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/mountpoint\">mountpoint(1)</a>,\n<a href=\"https://man.page/2/chroot\">chroot(2)</a>, <a href=\"https://man.page/2/ioctl_iflags\">ioctl_iflags(2)</a>,\n<a href=\"https://man.page/2/pivot_root\">pivot_root(2)</a>, <a href=\"https://man.page/2/umount\">umount(2)</a>,\n<a href=\"https://man.page/7/mount_namespaces\">mount_namespaces(7)</a>, <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>,\n<b>findmnt</b>(8), <b>lsblk</b>(8), <b>mount</b>(8),\n<b>umount</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}