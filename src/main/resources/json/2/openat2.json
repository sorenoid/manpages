{"name":"openat2","body":"\n\n<h1 align=\"center\">OPENAT2</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">openat2 - open\nand possibly create a file (extended)</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;fcntl.h&gt; <br>\n#include &lt;linux/openat2.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nopenat2(int</b> <i>dirfd</i><b>, const char\n*</b><i>pathname</i><b>, <br>\nstruct open_how *</b><i>how</i><b>, size_t</b>\n<i>size</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nThere is no glibc wrapper for this system call; see\nNOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>openat2</b>() system call is an extension of\n<a href=\"https://man.page/2/openat\">openat(2)</a> and provides a superset of its\nfunctionality.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>openat2</b>() system call opens the file specified by\n<i>pathname</i>. If the specified file does not exist, it\nmay optionally (if <b>O_CREAT</b> is specified in\n<i>how.flags</i>) be created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As with\n<a href=\"https://man.page/2/openat\">openat(2)</a>, if <i>pathname</i> is a relative pathname,\nthen it is interpreted relative to the directory referred to\nby the file descriptor <i>dirfd</i> (or the current working\ndirectory of the calling process, if <i>dirfd</i> is the\nspecial value <b>AT_FDCWD</b>). If <i>pathname</i> is an\nabsolute pathname, then <i>dirfd</i> is ignored (unless\n<i>how.resolve</i> contains <b>RESOLVE_IN_ROOT</b>, in which\ncase <i>pathname</i> is resolved relative to\n<i>dirfd</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rather than\ntaking a single <i>flags</i> argument, an extensible\nstructure (<i>how</i>) is passed to allow for future\nextensions. The <i>size</i> argument must be specified as\n<i>sizeof(struct open_how)</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The open_how\nstructure</b> <br>\nThe <i>how</i> argument specifies how <i>pathname</i> should\nbe opened, and acts as a superset of the <i>flags</i> and\n<i>mode</i> arguments to <a href=\"https://man.page/2/openat\">openat(2)</a>. This argument is\na pointer to a structure of the following form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct open_how\n{ <br>\nu64 flags; /* O_* flags */ <br>\nu64 mode; /* Mode for O_{CREAT,TMPFILE} */ <br>\nu64 resolve; /* RESOLVE_* flags */ <br>\n/* ... */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any future\nextensions to <b>openat2</b>() will be implemented as new\nfields appended to the above structure, with a zero value in\na new field resulting in the kernel behaving as though that\nextension field was not present. Therefore, the caller\n<i>must</i> zero-fill this structure on initialization. (See\nthe &quot;Extensibility&quot; section of the <b>NOTES</b>\nfor more detail on why this is necessary.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fields of\nthe <i>open_how</i> structure are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>flags</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>This field specifies the file creation and file status\nflags to use when opening the file. All of the <b>O_*</b>\nflags defined for <a href=\"https://man.page/2/openat\">openat(2)</a> are valid\n<b>openat2</b>() flag values.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Whereas\n<a href=\"https://man.page/2/openat\">openat(2)</a> ignores unknown bits in its <i>flags</i>\nargument, <b>openat2</b>() returns an error if unknown or\nconflicting flags are specified in <i>how.flags</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>mode</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">This field specifies the mode\nfor the new file, with identical semantics to the\n<i>mode</i> argument of <a href=\"https://man.page/2/openat\">openat(2)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Whereas\n<a href=\"https://man.page/2/openat\">openat(2)</a> ignores bits other than those in the range\n<i>07777</i> in its <i>mode</i> argument, <b>openat2</b>()\nreturns an error if <i>how.mode</i> contains bits other than\n<i>07777</i>. Similarly, an error is returned if\n<b>openat2</b>() is called with a nonzero <i>how.mode</i>\nand <i>how.flags</i> does not contain <b>O_CREAT</b> or\n<b>O_TMPFILE</b>.</p>\n\n<p style=\"margin-left:11%;\"><i>resolve</i></p>\n\n<p style=\"margin-left:22%;\">This is a bit-mask of flags\nthat modify the way in which <b>all</b> components of\n<i>pathname</i> will be resolved. (See\n<a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a> for background information.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The primary use\ncase for these flags is to allow trusted programs to\nrestrict how untrusted paths (or paths inside untrusted\ndirectories) are resolved. The full list of <i>resolve</i>\nflags is as follows: <b><br>\nRESOLVE_BENEATH</b></p>\n\n<p style=\"margin-left:32%;\">Do not permit the path\nresolution to succeed if any component of the resolution is\nnot a descendant of the directory indicated by <i>dirfd</i>.\nThis causes absolute symbolic links (and absolute values of\n<i>pathname</i>) to be rejected.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Currently, this\nflag also disables magic-link resolution (see below).\nHowever, this may change in the future. Therefore, to ensure\nthat magic links are not resolved, the caller should\nexplicitly specify <b>RESOLVE_NO_MAGICLINKS</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>RESOLVE_IN_ROOT</b></p>\n\n<p style=\"margin-left:32%;\">Treat the directory referred to\nby <i>dirfd</i> as the root directory while resolving\n<i>pathname</i>. Absolute symbolic links are interpreted\nrelative to <i>dirfd</i>. If a prefix component of\n<i>pathname</i> equates to <i>dirfd</i>, then an immediately\nfollowing <i>..</i> component likewise equates to\n<i>dirfd</i> (just as <i>/..</i> is traditionally equivalent\nto <i>/</i>). If <i>pathname</i> is an absolute path, it is\nalso interpreted relative to <i>dirfd</i>.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The effect of\nthis flag is as though the calling process had used\n<a href=\"https://man.page/2/chroot\">chroot(2)</a> to (temporarily) modify its root directory\n(to the directory referred to by <i>dirfd</i>). However,\nunlike <a href=\"https://man.page/2/chroot\">chroot(2)</a> (which changes the filesystem root\npermanently for a process), <b>RESOLVE_IN_ROOT</b> allows a\nprogram to efficiently restrict path resolution on a\nper-open basis.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Currently, this\nflag also disables magic-link resolution. However, this may\nchange in the future. Therefore, to ensure that magic links\nare not resolved, the caller should explicitly specify\n<b>RESOLVE_NO_MAGICLINKS</b>.</p>\n\n\n<p style=\"margin-left:22%;\"><b>RESOLVE_NO_MAGICLINKS</b></p>\n\n<p style=\"margin-left:32%;\">Disallow all magic-link\nresolution during path resolution.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Magic links are\nsymbolic link-like objects that are most notably found in\n<a href=\"https://man.page/5/proc\">proc(5)</a>; examples include <i>/proc/[pid]/exe</i> and\n<i>/proc/[pid]/fd/*</i>. (See <a href=\"https://man.page/7/symlink\">symlink(7)</a> for more\ndetails.)</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Unknowingly\nopening magic links can be risky for some applications.\nExamples of such risks include the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"65%\">\n\n\n<p>If the process opening a pathname is a controlling\nprocess that currently has no controlling terminal (see\n<a href=\"https://man.page/7/credentials\">credentials(7)</a>), then opening a magic link inside\n<i>/proc/[pid]/fd</i> that happens to refer to a terminal\nwould cause the process to acquire a controlling\nterminal.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"65%\">\n\n\n<p>In a containerized environment, a magic link inside\n<i>/proc</i> may refer to an object outside the container,\nand thus may provide a means to escape from the\ncontainer.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Because of such\nrisks, an application may prefer to disable magic link\nresolution using the <b>RESOLVE_NO_MAGICLINKS</b> flag.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">If the trailing\ncomponent (i.e., basename) of <i>pathname</i> is a magic\nlink, <i>how.resolve</i> contains\n<b>RESOLVE_NO_MAGICLINKS</b>, and <i>how.flags</i> contains\nboth <b>O_PATH</b> and <b>O_NOFOLLOW</b>, then an\n<b>O_PATH</b> file descriptor referencing the magic link\nwill be returned.</p>\n\n<p style=\"margin-left:22%;\"><b>RESOLVE_NO_SYMLINKS</b></p>\n\n<p style=\"margin-left:32%;\">Disallow resolution of symbolic\nlinks during path resolution. This option implies\n<b>RESOLVE_NO_MAGICLINKS</b>.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">If the trailing\ncomponent (i.e., basename) of <i>pathname</i> is a symbolic\nlink, <i>how.resolve</i> contains\n<b>RESOLVE_NO_SYMLINKS</b>, and <i>how.flags</i> contains\nboth <b>O_PATH</b> and <b>O_NOFOLLOW</b>, then an\n<b>O_PATH</b> file descriptor referencing the symbolic link\nwill be returned.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Note that the\neffect of the <b>RESOLVE_NO_SYMLINKS</b> flag, which affects\nthe treatment of symbolic links in all of the components of\n<i>pathname</i>, differs from the effect of the\n<b>O_NOFOLLOW</b> file creation flag (in <i>how.flags</i>),\nwhich affects the handling of symbolic links only in the\nfinal component of <i>pathname</i>.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Applications\nthat employ the <b>RESOLVE_NO_SYMLINKS</b> flag are\nencouraged to make its use configurable (unless it is used\nfor a specific security purpose), as symbolic links are very\nwidely used by end-users. Setting this flag\nindiscriminately&mdash;i.e., for purposes not specifically\nrelated to security&mdash;for all uses of <b>openat2</b>()\nmay result in spurious errors on previously functional\nsystems. This may occur if, for example, a system pathname\nthat is used by an application is modified (e.g., in a new\ndistribution release) so that a pathname component (now)\ncontains a symbolic link.</p>\n\n<p style=\"margin-left:22%;\"><b>RESOLVE_NO_XDEV</b></p>\n\n<p style=\"margin-left:32%;\">Disallow traversal of mount\npoints during path resolution (including all bind mounts).\nConsequently, <i>pathname</i> must either be on the same\nmount as the directory referred to by <i>dirfd</i>, or on\nthe same mount as the current working directory if\n<i>dirfd</i> is specified as <b>AT_FDCWD</b>.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Applications\nthat employ the <b>RESOLVE_NO_XDEV</b> flag are encouraged\nto make its use configurable (unless it is used for a\nspecific security purpose), as bind mounts are widely used\nby end-users. Setting this flag indiscriminately&mdash;i.e.,\nfor purposes not specifically related to security&mdash;for\nall uses of <b>openat2</b>() may result in spurious errors\non previously functional systems. This may occur if, for\nexample, a system pathname that is used by an application is\nmodified (e.g., in a new distribution release) so that a\npathname component (now) contains a bind mount.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If any bits\nother than those listed above are set in <i>how.resolve</i>,\nan error is returned.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success, a\nnew file descriptor is returned. On error, -1 is returned,\nand <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The set of\nerrors returned by <b>openat2</b>() includes all of the\nerrors returned by <a href=\"https://man.page/2/openat\">openat(2)</a>, as well as the\nfollowing additional errors:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>E2BIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An extension that this kernel does not support was\nspecified in <i>how</i>. (See the &quot;Extensibility&quot;\nsection of <b>NOTES</b> for more detail on how extensions\nare handled.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>how.resolve</i> contains either\n<b>RESOLVE_IN_ROOT</b> or <b>RESOLVE_BENEATH</b>, and the\nkernel could not ensure that a &quot;..&quot; component\ndidn&rsquo;t escape (due to a race condition or potential\nattack). The caller may choose to retry the <b>openat2</b>()\ncall.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An unknown flag or invalid value was specified in\n<i>how</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>mode</i> is nonzero, but <i>how.flags</i> does not\ncontain <b>O_CREAT</b> or <b>O_TMPFILE</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>size</i> was smaller than any known version of\n<i>struct open_how</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>how.resolve</i> contains <b>RESOLVE_NO_SYMLINKS</b>,\nand one of the path components was a symbolic link (or magic\nlink).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>how.resolve</i> contains\n<b>RESOLVE_NO_MAGICLINKS</b>, and one of the path components\nwas a magic link.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EXDEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>how.resolve</i> contains either\n<b>RESOLVE_IN_ROOT</b> or <b>RESOLVE_BENEATH</b>, and an\nescape from the root during path resolution was\ndetected.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EXDEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>how.resolve</i> contains <b>RESOLVE_NO_XDEV</b>, and\na path component crosses a mount point.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>openat2</b>()\nfirst appeared in Linux 5.6.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall is Linux-specific.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The semantics\nof <b>RESOLVE_BENEATH</b> were modeled after FreeBSD&rsquo;s\n<b>O_BENEATH</b>.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glibc does not\nprovide a wrapper for this system call; call it using\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Extensibility</b>\n<br>\nIn order to allow for future extensibility, <b>openat2</b>()\nrequires the user-space application to specify the size of\nthe <i>open_how</i> structure that it is passing. By\nproviding this information, it is possible for\n<b>openat2</b>() to provide both forwards- and\nbackwards-compatibility, with <i>size</i> acting as an\nimplicit version number. (Because new extension fields will\nalways be appended, the structure size will always\nincrease.) This extensibility design is very similar to\nother system calls such as <a href=\"https://man.page/2/sched_setattr\">sched_setattr(2)</a>,\n<a href=\"https://man.page/2/perf_event_open\">perf_event_open(2)</a>, and <a href=\"https://man.page/2/clone3\">clone3(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If we let\n<i>usize</i> be the size of the structure as specified by\nthe user-space application, and <i>ksize</i> be the size of\nthe structure which the kernel supports, then there are\nthree cases to consider:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">If <i>ksize</i> equals\n<i>usize</i>, then there is no version mismatch and\n<i>how</i> can be used verbatim.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>If <i>ksize</i> is larger than <i>usize</i>, then there\nare some extension fields that the kernel supports which the\nuser-space application is unaware of. Because a zero value\nin any added extension field signifies a no-op, the kernel\ntreats all of the extension fields not provided by the\nuser-space application as having zero values. This provides\nbackwards-compatibility.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>If <i>ksize</i> is smaller than <i>usize</i>, then there\nare some extension fields which the user-space application\nis aware of but which the kernel does not support. Because\nany extension field must have its zero values signify a\nno-op, the kernel can safely ignore the unsupported\nextension fields if they are all-zero. If any unsupported\nextension fields are nonzero, then -1 is returned and\n<i>errno</i> is set to <b>E2BIG</b>. This provides\nforwards-compatibility.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because the\ndefinition of <i>struct open_how</i> may change in the\nfuture (with new fields being added when system headers are\nupdated), user-space applications should zero-fill <i>struct\nopen_how</i> to ensure that recompiling the program with new\nheaders will not result in spurious errors at runtime. The\nsimplest way is to use a designated initializer:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct open_how\nhow = { .flags = O_RDWR, <br>\n.resolve = RESOLVE_IN_ROOT };</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">or explicitly\nusing <a href=\"https://man.page/3/memset\">memset(3)</a> or similar:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct open_how\nhow; <br>\nmemset(&amp;how, 0, sizeof(how)); <br>\nhow.flags = O_RDWR; <br>\nhow.resolve = RESOLVE_IN_ROOT;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A user-space\napplication that wishes to determine which extensions the\nrunning kernel supports can do so by conducting a binary\nsearch on <i>size</i> with a structure which has every byte\nnonzero (to find the largest value which doesn&rsquo;t\nproduce an error of <b>E2BIG</b>).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/openat\">openat(2)</a>,\n<a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>, <a href=\"https://man.page/7/symlink\">symlink(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}