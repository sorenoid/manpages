{"name":"set_thread_area","body":"\n\n<h1 align=\"center\">SET_THREAD_AREA</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">get_thread_area,\nset_thread_area - manipulate thread-local storage\ninformation</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;linux/unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#if defined\n__i386__ || defined __x86_64__ <br>\n# include &lt;asm/ldt.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nget_thread_area(struct user_desc *</b><i>u_info</i><b>);\n<br>\nint set_thread_area(struct user_desc\n*</b><i>u_info</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#elif\ndefined __m68k__</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nget_thread_area(void); <br>\nint set_thread_area(unsigned long</b> <i>tp</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#elif\ndefined __mips__</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nset_thread_area(unsigned long</b> <i>addr</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#endif</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nThere are no glibc wrappers for these system calls; see\nNOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These calls\nprovide architecture-specific support for a thread-local\nstorage implementation. At the moment,\n<b>set_thread_area</b>() is available on m68k, MIPS, and x86\n(both 32-bit and 64-bit variants); <b>get_thread_area</b>()\nis available on m68k and x86.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On m68k and\nMIPS, <b>set_thread_area</b>() allows storing an arbitrary\npointer (provided in the <b>tp</b> argument on m68k and in\nthe <b>addr</b> argument on MIPS) in the kernel data\nstructure associated with the calling thread; this pointer\ncan later be retrieved using <b>get_thread_area</b>() (see\nalso NOTES for information regarding obtaining the thread\npointer on MIPS).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On x86, Linux\ndedicates three global descriptor table (GDT) entries for\nthread-local storage. For more information about the GDT,\nsee the Intel Software Developer&rsquo;s Manual or the AMD\nArchitecture Programming Manual.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both of these\nsystem calls take an argument that is a pointer to a\nstructure of the following type:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nuser_desc { <br>\nunsigned int entry_number; <br>\nunsigned int base_addr; <br>\nunsigned int limit; <br>\nunsigned int seg_32bit:1; <br>\nunsigned int contents:2; <br>\nunsigned int read_exec_only:1; <br>\nunsigned int limit_in_pages:1; <br>\nunsigned int seg_not_present:1; <br>\nunsigned int useable:1; <br>\n#ifdef __x86_64__ <br>\nunsigned int lm:1; <br>\n#endif <br>\n};</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>get_thread_area</b>()\nreads the GDT entry indicated by\n<i>u_info-&gt;entry_number</i> and fills in the rest of the\nfields in <i>u_info</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>set_thread_area</b>()\nsets a TLS entry in the GDT.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The TLS array\nentry set by <b>set_thread_area</b>() corresponds to the\nvalue of <i>u_info-&gt;entry_number</i> passed in by the\nuser. If this value is in bounds, <b>set_thread_area</b>()\nwrites the TLS descriptor pointed to by <i>u_info</i> into\nthe thread&rsquo;s TLS array.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>set_thread_area</b>() is passed an <i>entry_number</i> of\n-1, it searches for a free TLS entry. If\n<b>set_thread_area</b>() finds a free TLS entry, the value\nof <i>u_info-&gt;entry_number</i> is set upon return to show\nwhich entry was changed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n<i>user_desc</i> is considered &quot;empty&quot; if\n<i>read_exec_only</i> and <i>seg_not_present</i> are set to\n1 and all of the other fields are 0. If an &quot;empty&quot;\ndescriptor is passed to <b>set_thread_area</b>(), the\ncorresponding TLS entry will be cleared. See BUGS for\nadditional details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n3.19, <b>set_thread_area</b>() cannot be used to write\nnon-present segments, 16-bit segments, or code segments,\nalthough clearing a segment is still acceptable.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On x86, these\nsystem calls return 0 on success, and -1 on failure, with\n<i>errno</i> set appropriately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On MIPS and\nm68k, <b>set_thread_area</b>() always returns 0. On m68k,\n<b>get_thread_area</b>() returns the thread area pointer\nvalue (previously set via <b>set_thread_area</b>()).</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>u_info</i> is an invalid\npointer.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>u_info-&gt;entry_number</i> is out of bounds.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSYS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>get_thread_area</b>() or <b>set_thread_area</b>() was\ninvoked as a 64-bit system call.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>set_thread_area</b>()) A free TLS entry could not be\nlocated.</p> </td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>set_thread_area</b>()\nfirst appeared in Linux 2.5.29. <b>get_thread_area</b>()\nfirst appeared in Linux 2.5.32.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>set_thread_area</b>()\nand <b>get_thread_area</b>() are Linux-specific and should\nnot be used in programs that are intended to be\nportable.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glibc does not\nprovide wrappers for these system calls, since they are\ngenerally intended for use only by threading libraries. In\nthe unlikely event that you want to call them directly, use\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/arch_prctl\">arch_prctl(2)</a>\ncan interfere with <b>set_thread_area</b>() on x86. See\n<a href=\"https://man.page/2/arch_prctl\">arch_prctl(2)</a> for more details. This is not normally\na problem, as <a href=\"https://man.page/2/arch_prctl\">arch_prctl(2)</a> is normally used only by\n64-bit programs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On MIPS, the\ncurrent value of the thread area pointer can be obtained\nusing the instruction:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">rdhwr dest,\n$29</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ninstruction traps and is handled by kernel.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On 64-bit\nkernels before Linux 3.19, one of the padding bits in\n<i>user_desc</i>, if set, would prevent the descriptor from\nbeing considered empty (see <a href=\"https://man.page/2/modify_ldt\">modify_ldt(2)</a>). As a\nresult, the only reliable way to clear a TLS entry is to use\n<a href=\"https://man.page/3/memset\">memset(3)</a> to zero the entire <i>user_desc</i>\nstructure, including padding bits, and then to set the\n<i>read_exec_only</i> and <i>seg_not_present</i> bits. On\nLinux 3.19, a <i>user_desc</i> consisting entirely of zeros\nexcept for <i>entry_number</i> will also be interpreted as a\nrequest to clear a TLS entry, but this behaved differently\non older kernels.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Prior to Linux\n3.19, the DS and ES segment registers must not reference TLS\nentries.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/arch_prctl\">arch_prctl(2)</a>,\n<a href=\"https://man.page/2/modify_ldt\">modify_ldt(2)</a>, <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>\n(<b>PTRACE_GET_THREAD_AREA</b> and\n<b>PTRACE_SET_THREAD_AREA</b>)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}