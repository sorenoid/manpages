{"name":"ioctl_iflags","description":"ioctl_iflags -\nioctl() operations for inode flags\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nVarious Linux\nfilesystems support the notion of <i>inode\nflags</i>&mdash;attributes that modify the semantics of\nfiles and directories. These flags can be retrieved and\nmodified using two <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations:\n\n<p style=\"margin-left:17%; margin-top: 1em\">int attr; <br>\nfd = open(&quot;pathname&quot;, ...);\n\n<p style=\"margin-left:17%; margin-top: 1em\">ioctl(fd,\nFS_IOC_GETFLAGS, &amp;attr); /* Place current flags <br>\nin 'attr' */ <br>\nattr |= FS_NOATIME_FL; /* Tweak returned bit mask */ <br>\nioctl(fd, FS_IOC_SETFLAGS, &amp;attr); /* Update flags for\ninode <br>\nreferred to by 'fd' */\n\nThe\n<a href=\"https://man.page/1/lsattr\">lsattr(1)</a> and <a href=\"https://man.page/1/chattr\">chattr(1)</a> shell commands provide\ninterfaces to these two operations, allowing a user to view\nand modify the inode flags associated with a file.\n\nThe following\nflags are supported (shown along with the corresponding\nletter used to indicate the flag by <a href=\"https://man.page/1/lsattr\">lsattr(1)</a> and\n<a href=\"https://man.page/1/chattr\">chattr(1)</a>): <b><br>\nFS_APPEND_FL</b> 'a'\n\n<p style=\"margin-left:22%;\">The file can be opened only\nwith the <b>O_APPEND</b> flag. (This restriction applies\neven to the superuser.) Only a privileged process\n(<b>CAP_LINUX_IMMUTABLE</b>) can set or clear this\nattribute.\n\n<p style=\"margin-left:11%;\"><b>FS_COMPR_FL</b> 'c'\n\n<p style=\"margin-left:22%;\">Store the file in a compressed\nformat on disk. This flag is <i>not</i> supported by most of\nthe mainstream filesystem implementations; one exception is\n<a href=\"https://man.page/5/btrfs\">btrfs(5)</a>.\n\n<p style=\"margin-left:11%;\"><b>FS_DIRSYNC_FL</b> 'D' (since\nLinux 2.6.0)\n\n<p style=\"margin-left:22%;\">Write directory changes\nsynchronously to disk. This flag provides semantics\nequivalent to the <a href=\"https://man.page/2/mount\">mount(2)</a> <b>MS_DIRSYNC</b> option,\nbut on a per-directory basis. This flag can be applied only\nto directories.\n\n<p style=\"margin-left:11%;\"><b>FS_IMMUTABLE_FL</b> 'i'\n\n<p style=\"margin-left:22%;\">The file is immutable: no\nchanges are permitted to the file contents or metadata\n(permissions, timestamps, ownership, link count and so on).\n(This restriction applies even to the superuser.) Only a\nprivileged process (<b>CAP_LINUX_IMMUTABLE</b>) can set or\nclear this attribute.\n\n<p style=\"margin-left:11%;\"><b>FS_JOURNAL_DATA_FL</b>\n'j'\n\n<p style=\"margin-left:22%;\">Enable journaling of file data\non <a href=\"https://man.page/5/ext3\">ext3(5)</a> and <a href=\"https://man.page/5/ext4\">ext4(5)</a> filesystems. On a\nfilesystem that is journaling in <i>ordered</i> or\n<i>writeback</i> mode, a privileged\n(<b>CAP_SYS_RESOURCE</b>) process can set this flag to\nenable journaling of data updates on a per-file basis.\n\n<p style=\"margin-left:11%;\"><b>FS_NOATIME_FL</b> 'A'\n\n<p style=\"margin-left:22%;\">Don&rsquo;t update the file\nlast access time when the file is accessed. This can provide\nI/O performance benefits for applications that do not care\nabout the accuracy of this timestamp. This flag provides\nfunctionality similar to the <a href=\"https://man.page/2/mount\">mount(2)</a>\n<b>MS_NOATIME</b> flag, but on a per-file basis.\n\n<p style=\"margin-left:11%;\"><b>FS_NOCOW_FL</b> 'C' (since\nLinux 2.6.39)\n\n<p style=\"margin-left:22%;\">The file will not be subject to\ncopy-on-write updates. This flag has an effect only on\nfilesystems that support copy-on-write semantics, such as\nBtrfs. See <a href=\"https://man.page/1/chattr\">chattr(1)</a> and <a href=\"https://man.page/5/btrfs\">btrfs(5)</a>.\n\n<p style=\"margin-left:11%;\"><b>FS_NODUMP_FL</b> 'd'\n\n<p style=\"margin-left:22%;\">Don&rsquo;t include this file\nin backups made using <b>dump</b>(8).\n\n<p style=\"margin-left:11%;\"><b>FS_NOTAIL_FL</b> 't'\n\n<p style=\"margin-left:22%;\">This flag is supported only on\nReiserfs. It disables the Reiserfs tail-packing feature,\nwhich tries to pack small files (and the final fragment of\nlarger files) into the same disk block as the file\nmetadata.\n\n<p style=\"margin-left:11%;\"><b>FS_PROJINHERIT_FL</b> 'P'\n(since Linux 4.5)\n\n<p style=\"margin-left:22%;\">Inherit the quota project ID.\nFiles and subdirectories will inherit the project ID of the\ndirectory. This flag can be applied only to directories.\n\n<p style=\"margin-left:11%;\"><b>FS_SECRM_FL</b> 's'\n\n<p style=\"margin-left:22%;\">Mark the file for secure\ndeletion. This feature is not implemented by any filesystem,\nsince the task of securely erasing a file from a recording\nmedium is surprisingly difficult.\n\n<p style=\"margin-left:11%;\"><b>FS_SYNC_FL</b> 'S'\n\n<p style=\"margin-left:22%;\">Make file updates synchronous.\nFor files, this makes all writes synchronous (as though all\nopens of the file were with the <b>O_SYNC</b> flag). For\ndirectories, this has the same effect as the\n<b>FS_DIRSYNC_FL</b> flag.\n\n<p style=\"margin-left:11%;\"><b>FS_TOPDIR_FL</b> 'T'\n\n<p style=\"margin-left:22%;\">Mark a directory for special\ntreatment under the Orlov block-allocation strategy. See\n<a href=\"https://man.page/1/chattr\">chattr(1)</a> for details. This flag can be applied only\nto directories and has an effect only for ext2, ext3, and\next4.\n\n<p style=\"margin-left:11%;\"><b>FS_UNRM_FL</b> 'u'\n\n<p style=\"margin-left:22%;\">Allow the file to be undeleted\nif it is deleted. This feature is not implemented by any\nfilesystem, since it is possible to implement file-recovery\nmechanisms outside the kernel.\n\nIn most cases,\nwhen any of the above flags is set on a directory, the flag\nis inherited by files and subdirectories created inside that\ndirectory. Exceptions include <b>FS_TOPDIR_FL</b>, which is\nnot inheritable, and <b>FS_DIRSYNC_FL</b>, which is\ninherited only by subdirectories.\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\nInode flags are\na nonstandard Linux extension.\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\nIn order to\nchange the inode flags of a file using the\n<b>FS_IOC_SETFLAGS</b> operation, the effective user ID of\nthe caller must match the owner of the file, or the caller\nmust have the <b>CAP_FOWNER</b> capability.\n\nThe type of the\nargument given to the <b>FS_IOC_GETFLAGS</b> and\n<b>FS_IOC_SETFLAGS</b> operations is <i>int&nbsp;*</i>,\nnotwithstanding the implication in the kernel source file\n<i>include/uapi/linux/fs.h</i> that the argument is\n<i>long&nbsp;*</i>.\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/1/chattr\">chattr(1)</a>,\n<a href=\"https://man.page/1/lsattr\">lsattr(1)</a>, <a href=\"https://man.page/2/mount\">mount(2)</a>, <a href=\"https://man.page/5/btrfs\">btrfs(5)</a>,\n<a href=\"https://man.page/5/ext4\">ext4(5)</a>, <a href=\"https://man.page/5/xfs\">xfs(5)</a>, <a href=\"https://man.page/7/xattr\">xattr(7)</a>,\n<b>mount</b>(8)\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\nThis page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.","body":"\n\n<h1 align=\"center\">IOCTL_IFLAGS</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ioctl_iflags -\nioctl() operations for inode flags</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various Linux\nfilesystems support the notion of <i>inode\nflags</i>&mdash;attributes that modify the semantics of\nfiles and directories. These flags can be retrieved and\nmodified using two <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">int attr; <br>\nfd = open(&quot;pathname&quot;, ...);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ioctl(fd,\nFS_IOC_GETFLAGS, &amp;attr); /* Place current flags <br>\nin 'attr' */ <br>\nattr |= FS_NOATIME_FL; /* Tweak returned bit mask */ <br>\nioctl(fd, FS_IOC_SETFLAGS, &amp;attr); /* Update flags for\ninode <br>\nreferred to by 'fd' */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<a href=\"https://man.page/1/lsattr\">lsattr(1)</a> and <a href=\"https://man.page/1/chattr\">chattr(1)</a> shell commands provide\ninterfaces to these two operations, allowing a user to view\nand modify the inode flags associated with a file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nflags are supported (shown along with the corresponding\nletter used to indicate the flag by <a href=\"https://man.page/1/lsattr\">lsattr(1)</a> and\n<a href=\"https://man.page/1/chattr\">chattr(1)</a>): <b><br>\nFS_APPEND_FL</b> 'a'</p>\n\n<p style=\"margin-left:22%;\">The file can be opened only\nwith the <b>O_APPEND</b> flag. (This restriction applies\neven to the superuser.) Only a privileged process\n(<b>CAP_LINUX_IMMUTABLE</b>) can set or clear this\nattribute.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_COMPR_FL</b> 'c'</p>\n\n<p style=\"margin-left:22%;\">Store the file in a compressed\nformat on disk. This flag is <i>not</i> supported by most of\nthe mainstream filesystem implementations; one exception is\n<a href=\"https://man.page/5/btrfs\">btrfs(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_DIRSYNC_FL</b> 'D' (since\nLinux 2.6.0)</p>\n\n<p style=\"margin-left:22%;\">Write directory changes\nsynchronously to disk. This flag provides semantics\nequivalent to the <a href=\"https://man.page/2/mount\">mount(2)</a> <b>MS_DIRSYNC</b> option,\nbut on a per-directory basis. This flag can be applied only\nto directories.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_IMMUTABLE_FL</b> 'i'</p>\n\n<p style=\"margin-left:22%;\">The file is immutable: no\nchanges are permitted to the file contents or metadata\n(permissions, timestamps, ownership, link count and so on).\n(This restriction applies even to the superuser.) Only a\nprivileged process (<b>CAP_LINUX_IMMUTABLE</b>) can set or\nclear this attribute.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_JOURNAL_DATA_FL</b>\n'j'</p>\n\n<p style=\"margin-left:22%;\">Enable journaling of file data\non <a href=\"https://man.page/5/ext3\">ext3(5)</a> and <a href=\"https://man.page/5/ext4\">ext4(5)</a> filesystems. On a\nfilesystem that is journaling in <i>ordered</i> or\n<i>writeback</i> mode, a privileged\n(<b>CAP_SYS_RESOURCE</b>) process can set this flag to\nenable journaling of data updates on a per-file basis.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_NOATIME_FL</b> 'A'</p>\n\n<p style=\"margin-left:22%;\">Don&rsquo;t update the file\nlast access time when the file is accessed. This can provide\nI/O performance benefits for applications that do not care\nabout the accuracy of this timestamp. This flag provides\nfunctionality similar to the <a href=\"https://man.page/2/mount\">mount(2)</a>\n<b>MS_NOATIME</b> flag, but on a per-file basis.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_NOCOW_FL</b> 'C' (since\nLinux 2.6.39)</p>\n\n<p style=\"margin-left:22%;\">The file will not be subject to\ncopy-on-write updates. This flag has an effect only on\nfilesystems that support copy-on-write semantics, such as\nBtrfs. See <a href=\"https://man.page/1/chattr\">chattr(1)</a> and <a href=\"https://man.page/5/btrfs\">btrfs(5)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_NODUMP_FL</b> 'd'</p>\n\n<p style=\"margin-left:22%;\">Don&rsquo;t include this file\nin backups made using <b>dump</b>(8).</p>\n\n<p style=\"margin-left:11%;\"><b>FS_NOTAIL_FL</b> 't'</p>\n\n<p style=\"margin-left:22%;\">This flag is supported only on\nReiserfs. It disables the Reiserfs tail-packing feature,\nwhich tries to pack small files (and the final fragment of\nlarger files) into the same disk block as the file\nmetadata.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_PROJINHERIT_FL</b> 'P'\n(since Linux 4.5)</p>\n\n<p style=\"margin-left:22%;\">Inherit the quota project ID.\nFiles and subdirectories will inherit the project ID of the\ndirectory. This flag can be applied only to directories.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_SECRM_FL</b> 's'</p>\n\n<p style=\"margin-left:22%;\">Mark the file for secure\ndeletion. This feature is not implemented by any filesystem,\nsince the task of securely erasing a file from a recording\nmedium is surprisingly difficult.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_SYNC_FL</b> 'S'</p>\n\n<p style=\"margin-left:22%;\">Make file updates synchronous.\nFor files, this makes all writes synchronous (as though all\nopens of the file were with the <b>O_SYNC</b> flag). For\ndirectories, this has the same effect as the\n<b>FS_DIRSYNC_FL</b> flag.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_TOPDIR_FL</b> 'T'</p>\n\n<p style=\"margin-left:22%;\">Mark a directory for special\ntreatment under the Orlov block-allocation strategy. See\n<a href=\"https://man.page/1/chattr\">chattr(1)</a> for details. This flag can be applied only\nto directories and has an effect only for ext2, ext3, and\next4.</p>\n\n<p style=\"margin-left:11%;\"><b>FS_UNRM_FL</b> 'u'</p>\n\n<p style=\"margin-left:22%;\">Allow the file to be undeleted\nif it is deleted. This feature is not implemented by any\nfilesystem, since it is possible to implement file-recovery\nmechanisms outside the kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In most cases,\nwhen any of the above flags is set on a directory, the flag\nis inherited by files and subdirectories created inside that\ndirectory. Exceptions include <b>FS_TOPDIR_FL</b>, which is\nnot inheritable, and <b>FS_DIRSYNC_FL</b>, which is\ninherited only by subdirectories.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Inode flags are\na nonstandard Linux extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\nchange the inode flags of a file using the\n<b>FS_IOC_SETFLAGS</b> operation, the effective user ID of\nthe caller must match the owner of the file, or the caller\nmust have the <b>CAP_FOWNER</b> capability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The type of the\nargument given to the <b>FS_IOC_GETFLAGS</b> and\n<b>FS_IOC_SETFLAGS</b> operations is <i>int&nbsp;*</i>,\nnotwithstanding the implication in the kernel source file\n<i>include/uapi/linux/fs.h</i> that the argument is\n<i>long&nbsp;*</i>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/chattr\">chattr(1)</a>,\n<a href=\"https://man.page/1/lsattr\">lsattr(1)</a>, <a href=\"https://man.page/2/mount\">mount(2)</a>, <a href=\"https://man.page/5/btrfs\">btrfs(5)</a>,\n<a href=\"https://man.page/5/ext4\">ext4(5)</a>, <a href=\"https://man.page/5/xfs\">xfs(5)</a>, <a href=\"https://man.page/7/xattr\">xattr(7)</a>,\n<b>mount</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}