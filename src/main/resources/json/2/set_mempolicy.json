{"name":"set_mempolicy","body":"\n\n<h1 align=\"center\">SET_MEMPOLICY</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">set_mempolicy -\nset default NUMA memory policy for a thread and its\nchildren</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;numaif.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>long\nset_mempolicy(int</b> <i>mode</i><b>, const unsigned long\n*</b><i>nodemask</i><b>, <br>\nunsigned long</b> <i>maxnode</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Link with\n<i>-lnuma</i>.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>set_mempolicy</b>()\nsets the NUMA memory policy of the calling thread, which\nconsists of a policy mode and zero or more nodes, to the\nvalues specified by the <i>mode</i>, <i>nodemask</i>, and\n<i>maxnode</i> arguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A NUMA machine\nhas different memory controllers with different distances to\nspecific CPUs. The memory policy defines from which node\nmemory is allocated for the thread.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall defines the default policy for the thread. The thread\npolicy governs allocation of pages in the process&rsquo;s\naddress space outside of memory ranges controlled by a more\nspecific policy set by <a href=\"https://man.page/2/mbind\">mbind(2)</a>. The thread default\npolicy also controls allocation of any pages for\nmemory-mapped files mapped using the <a href=\"https://man.page/2/mmap\">mmap(2)</a> call\nwith the <b>MAP_PRIVATE</b> flag and that are only read\n(loaded) from by the thread and of memory-mapped files\nmapped using the <a href=\"https://man.page/2/mmap\">mmap(2)</a> call with the\n<b>MAP_SHARED</b> flag, regardless of the access type. The\npolicy is applied only when a new page is allocated for the\nthread. For anonymous memory this is when the page is first\ntouched by the thread.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>mode</i>\nargument must specify one of <b>MPOL_DEFAULT</b>,\n<b>MPOL_BIND</b>, <b>MPOL_INTERLEAVE</b>,\n<b>MPOL_PREFERRED</b>, or <b>MPOL_LOCAL</b> (which are\ndescribed in detail below). All modes except\n<b>MPOL_DEFAULT</b> require the caller to specify the node\nor nodes to which the mode applies, via the <i>nodemask</i>\nargument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>mode</i>\nargument may also include an optional <i>mode flag</i>. The\nsupported <i>mode flags</i> are: <b><br>\nMPOL_F_STATIC_NODES</b> (since Linux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">A nonempty <i>nodemask</i>\nspecifies physical node IDs. Linux will not remap the\n<i>nodemask</i> when the process moves to a different cpuset\ncontext, nor when the set of nodes allowed by the\nprocess&rsquo;s current cpuset context changes.</p>\n\n<p style=\"margin-left:11%;\"><b>MPOL_F_RELATIVE_NODES</b>\n(since Linux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">A nonempty <i>nodemask</i>\nspecifies node IDs that are relative to the set of node IDs\nallowed by the process&rsquo;s current cpuset.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>nodemask</i>\npoints to a bit mask of node IDs that contains up to\n<i>maxnode</i> bits. The bit mask size is rounded to the\nnext multiple of <i>sizeof(unsigned long)</i>, but the\nkernel will use bits only up to <i>maxnode</i>. A NULL value\nof <i>nodemask</i> or a <i>maxnode</i> value of zero\nspecifies the empty set of nodes. If the value of\n<i>maxnode</i> is zero, the <i>nodemask</i> argument is\nignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Where a\n<i>nodemask</i> is required, it must contain at least one\nnode that is on-line, allowed by the process&rsquo;s current\ncpuset context, (unless the <b>MPOL_F_STATIC_NODES</b> mode\nflag is specified), and contains memory. If the\n<b>MPOL_F_STATIC_NODES</b> is set in <i>mode</i> and a\nrequired <i>nodemask</i> contains no nodes that are allowed\nby the process&rsquo;s current cpuset context, the memory\npolicy reverts to <i>local allocation</i>. This effectively\noverrides the specified policy until the process&rsquo;s\ncpuset context includes one or more of the nodes specified\nby <i>nodemask</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>mode</i>\nargument must include one of the following values: <b><br>\nMPOL_DEFAULT</b></p>\n\n<p style=\"margin-left:22%;\">This mode specifies that any\nnondefault thread memory policy be removed, so that the\nmemory policy &quot;falls back&quot; to the system default\npolicy. The system default policy is &quot;local\nallocation&quot;&mdash;that is, allocate memory on the node\nof the CPU that triggered the allocation. <i>nodemask</i>\nmust be specified as NULL. If the &quot;local node&quot;\ncontains no free memory, the system will attempt to allocate\nmemory from a &quot;near by&quot; node.</p>\n\n<p style=\"margin-left:11%;\"><b>MPOL_BIND</b></p>\n\n<p style=\"margin-left:22%;\">This mode defines a strict\npolicy that restricts memory allocation to the nodes\nspecified in <i>nodemask</i>. If <i>nodemask</i> specifies\nmore than one node, page allocations will come from the node\nwith the lowest numeric node ID first, until that node\ncontains no free memory. Allocations will then come from the\nnode with the next highest node ID specified in\n<i>nodemask</i> and so forth, until none of the specified\nnodes contain free memory. Pages will not be allocated from\nany node not specified in the <i>nodemask</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>MPOL_INTERLEAVE</b></p>\n\n<p style=\"margin-left:22%;\">This mode interleaves page\nallocations across the nodes specified in <i>nodemask</i> in\nnumeric node ID order. This optimizes for bandwidth instead\nof latency by spreading out pages and memory accesses to\nthose pages across multiple nodes. However, accesses to a\nsingle page will still be limited to the memory bandwidth of\na single node.</p>\n\n<p style=\"margin-left:11%;\"><b>MPOL_PREFERRED</b></p>\n\n<p style=\"margin-left:22%;\">This mode sets the preferred\nnode for allocation. The kernel will try to allocate pages\nfrom this node first and fall back to &quot;near by&quot;\nnodes if the preferred node is low on free memory. If\n<i>nodemask</i> specifies more than one node ID, the first\nnode in the mask will be selected as the preferred node. If\nthe <i>nodemask</i> and <i>maxnode</i> arguments specify the\nempty set, then the policy specifies &quot;local\nallocation&quot; (like the system default policy discussed\nabove).</p>\n\n<p style=\"margin-left:11%;\"><b>MPOL_LOCAL</b> (since Linux\n3.8)</p>\n\n<p style=\"margin-left:22%;\">This mode specifies &quot;local\nallocation&quot;; the memory is allocated on the node of the\nCPU that triggered the allocation (the &quot;local\nnode&quot;). The <i>nodemask</i> and <i>maxnode</i>\narguments must specify the empty set. If the &quot;local\nnode&quot; is low on free memory, the kernel will try to\nallocate memory from other nodes. The kernel will allocate\nmemory from the &quot;local node&quot; whenever memory for\nthis node is available. If the &quot;local node&quot; is not\nallowed by the process&rsquo;s current cpuset context, the\nkernel will try to allocate memory from other nodes. The\nkernel will allocate memory from the &quot;local node&quot;\nwhenever it becomes allowed by the process&rsquo;s current\ncpuset context.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The thread\nmemory policy is preserved across an <a href=\"https://man.page/2/execve\">execve(2)</a>, and\nis inherited by child threads created using <a href=\"https://man.page/2/fork\">fork(2)</a>\nor <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>set_mempolicy</b>() returns 0; on error, -1 is returned\nand <i>errno</i> is set to indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Part of all of the memory range\nspecified by <i>nodemask</i> and <i>maxnode</i> points\noutside your accessible address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>mode</i> is invalid. Or, <i>mode</i> is\n<b>MPOL_DEFAULT</b> and <i>nodemask</i> is nonempty, or\n<i>mode</i> is <b>MPOL_BIND</b> or <b>MPOL_INTERLEAVE</b>\nand <i>nodemask</i> is empty. Or, <i>maxnode</i> specifies\nmore than a page worth of bits. Or, <i>nodemask</i>\nspecifies one or more node IDs that are greater than the\nmaximum supported node ID. Or, none of the node IDs\nspecified by <i>nodemask</i> are on-line and allowed by the\nprocess&rsquo;s current cpuset context, or none of the\nspecified nodes contain memory. Or, the <i>mode</i> argument\nspecified both <b>MPOL_F_STATIC_NODES</b> and\n<b>MPOL_F_RELATIVE_NODES</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Insufficient kernel memory was available.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>set_mempolicy</b>() system call was added to the Linux\nkernel in version 2.6.7.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall is Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Memory policy\nis not remembered if the page is swapped out. When such a\npage is paged back in, it will use the policy of the thread\nor memory range that is in effect at the time the page is\nallocated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For information\non library support, see <a href=\"https://man.page/7/numa\">numa(7)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/get_mempolicy\">get_mempolicy(2)</a>,\n<a href=\"https://man.page/2/getcpu\">getcpu(2)</a>, <a href=\"https://man.page/2/mbind\">mbind(2)</a>, <a href=\"https://man.page/2/mmap\">mmap(2)</a>,\n<a href=\"https://man.page/3/numa\">numa(3)</a>, <a href=\"https://man.page/7/cpuset\">cpuset(7)</a>, <a href=\"https://man.page/7/numa\">numa(7)</a>,\n<b>numactl</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}