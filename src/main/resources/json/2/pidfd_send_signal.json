{"name":"pidfd_send_signal","description":"pidfd_send_signal\n- send a signal to a process specified by a file\ndescriptor","body":"\n\n<h1 align=\"center\">PIDFD_SEND_SIGNAL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pidfd_send_signal\n- send a signal to a process specified by a file\ndescriptor</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;signal.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npidfd_send_signal(int</b> <i>pidfd</i><b>, int</b>\n<i>sig</i><b>, siginfo_t *</b><i>info</i><b>, <br>\nunsigned int</b> <i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pidfd_send_signal</b>() system call sends the signal\n<i>sig</i> to the target process referred to by\n<i>pidfd</i>, a PID file descriptor that refers to a\nprocess.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<i>info</i> argument points to a <i>siginfo_t</i> buffer,\nthat buffer should be populated as described in\n<a href=\"https://man.page/2/rt_sigqueueinfo\">rt_sigqueueinfo(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<i>info</i> argument is a NULL pointer, this is equivalent\nto specifying a pointer to a <i>siginfo_t</i> buffer whose\nfields match the values that are implicitly supplied when a\nsignal is sent using <a href=\"https://man.page/2/kill\">kill(2)</a>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"67%\">\n\n\n<p><i>si_signo</i> is set to the signal number;</p></td>\n<td width=\"18%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"67%\">\n\n\n<p><i>si_errno</i> is set to 0;</p></td>\n<td width=\"18%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"67%\">\n\n\n<p><i>si_code</i> is set to <b>SI_USER</b>;</p></td>\n<td width=\"18%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"67%\">\n\n\n<p><i>si_pid</i> is set to the caller&rsquo;s PID; and</p></td>\n<td width=\"18%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"67%\">\n\n\n<p><i>si_uid</i> is set to the caller&rsquo;s real user\nID.</p> </td>\n<td width=\"18%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The calling\nprocess must either be in the same PID namespace as the\nprocess referred to by <i>pidfd</i>, or be in an ancestor of\nthat namespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument is reserved for future use; currently,\nthis argument must be specified as 0.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>pidfd_send_signal</b>() returns 0. On error, -1 is\nreturned and <i>errno</i> is set to indicate the cause of\nthe error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>pidfd</i> is not a valid PID\nfile descriptor.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>sig</i> is not a valid signal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process is not in a PID namespace from which\nit can send a signal to the target process.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>flags</i> is not 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process does not have permission to send the\nsignal to the target process.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pidfd</i> doesn&rsquo;t refer to the calling process,\nand <i>info.si_code</i> is invalid (see\n<a href=\"https://man.page/2/rt_sigqueueinfo\">rt_sigqueueinfo(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The target process does not exist (i.e., it has\nterminated and been waited on).</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pidfd_send_signal</b>()\nfirst appeared in Linux 5.1.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pidfd_send_signal</b>()\nis Linux specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently,\nthere is no glibc wrapper for this system call; call it\nusing <a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>PID file\ndescriptors</b> <br>\nThe <i>pidfd</i> argument is a PID file descriptor, a file\ndescriptor that refers to process. Such a file descriptor\ncan be obtained in any of the following ways:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">by opening a <i>/proc/[pid]</i>\ndirectory;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>using <a href=\"https://man.page/2/pidfd_open\">pidfd_open(2)</a>; or</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>via the PID file descriptor that is returned by a call\nto <a href=\"https://man.page/2/clone\">clone(2)</a> or <a href=\"https://man.page/2/clone3\">clone3(2)</a> that specifies the\n<b>CLONE_PIDFD</b> flag.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pidfd_send_signal</b>() system call allows the avoidance\nof race conditions that occur when using traditional\ninterfaces (such as <a href=\"https://man.page/2/kill\">kill(2)</a>) to signal a process. The\nproblem is that the traditional interfaces specify the\ntarget process via a process ID (PID), with the result that\nthe sender may accidentally send a signal to the wrong\nprocess if the originally intended target process has\nterminated and its PID has been recycled for another\nprocess. By contrast, a PID file descriptor is a stable\nreference to a specific process; if that process terminates,\n<b>pidfd_send_signal</b>() fails with the error\n<b>ESRCH</b>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\n_GNU_SOURCE <br>\n#include &lt;limits.h&gt; <br>\n#include &lt;signal.h&gt; <br>\n#include &lt;fcntl.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;string.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;sys/syscall.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#ifndef\n__NR_pidfd_send_signal <br>\n#define __NR_pidfd_send_signal 424 <br>\n#endif</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int <br>\npidfd_send_signal(int pidfd, int sig, siginfo_t *info, <br>\nunsigned int flags) <br>\n{ <br>\nreturn syscall(__NR_pidfd_send_signal, pidfd, sig, info,\nflags); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nsiginfo_t info; <br>\nchar path[PATH_MAX]; <br>\nint pidfd, sig;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 3)\n{ <br>\nfprintf(stderr, &quot;Usage: %s &lt;pid&gt;\n&lt;signal&gt;\\n&quot;, argv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sig =\natoi(argv[2]);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Obtain a PID\nfile descriptor by opening the /proc/PID directory <br>\nof the target process */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">snprintf(path,\nsizeof(path), &quot;/proc/%s&quot;, argv[1]);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pidfd =\nopen(path, O_RDONLY); <br>\nif (pidfd == -1) { <br>\nperror(&quot;open&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Populate a\n'siginfo_t' structure for use with <br>\npidfd_send_signal() */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">memset(&amp;info,\n0, sizeof(info)); <br>\ninfo.si_code = SI_QUEUE; <br>\ninfo.si_signo = sig; <br>\ninfo.si_errno = 0; <br>\ninfo.si_uid = getuid(); <br>\ninfo.si_pid = getpid(); <br>\ninfo.si_value.sival_int = 1234;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Send the\nsignal */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(pidfd_send_signal(pidfd, sig, &amp;info, 0) == -1) { <br>\nperror(&quot;pidfd_send_signal&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/kill\">kill(2)</a>, <a href=\"https://man.page/2/pidfd_open\">pidfd_open(2)</a>,\n<a href=\"https://man.page/2/rt_sigqueueinfo\">rt_sigqueueinfo(2)</a>, <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>, <a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}