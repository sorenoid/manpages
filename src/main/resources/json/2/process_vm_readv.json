{"name":"process_vm_readv","body":"\n\n<h1 align=\"center\">PROCESS_VM_READV</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">process_vm_readv,\nprocess_vm_writev - transfer data between process address\nspaces</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/uio.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\nprocess_vm_readv(pid_t</b> <i>pid</i><b>, <br>\nconst struct iovec *</b><i>local_iov</i><b>, <br>\nunsigned long</b> <i>liovcnt</i><b>, <br>\nconst struct iovec *</b><i>remote_iov</i><b>, <br>\nunsigned long</b> <i>riovcnt</i><b>, <br>\nunsigned long</b> <i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\nprocess_vm_writev(pid_t</b> <i>pid</i><b>, <br>\nconst struct iovec *</b><i>local_iov</i><b>, <br>\nunsigned long</b> <i>liovcnt</i><b>, <br>\nconst struct iovec *</b><i>remote_iov</i><b>, <br>\nunsigned long</b> <i>riovcnt</i><b>, <br>\nunsigned long</b> <i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>process_vm_readv</b>(),\n<b>process_vm_writev</b>():</p>\n\n<p style=\"margin-left:17%;\"><b>_GNU_SOURCE</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls transfer data between the address space of the calling\nprocess (&quot;the local process&quot;) and the process\nidentified by <i>pid</i> (&quot;the remote process&quot;).\nThe data moves directly between the address spaces of the\ntwo processes, without passing through kernel space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>process_vm_readv</b>() system call transfers data from\nthe remote process to the local process. The data to be\ntransferred is identified by <i>remote_iov</i> and\n<i>riovcnt</i>: <i>remote_iov</i> is a pointer to an array\ndescribing address ranges in the process <i>pid</i>, and\n<i>riovcnt</i> specifies the number of elements in\n<i>remote_iov</i>. The data is transferred to the locations\nspecified by <i>local_iov</i> and <i>liovcnt</i>:\n<i>local_iov</i> is a pointer to an array describing address\nranges in the calling process, and <i>liovcnt</i> specifies\nthe number of elements in <i>local_iov</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>process_vm_writev</b>() system call is the converse of\n<b>process_vm_readv</b>()&mdash;it transfers data from the\nlocal process to the remote process. Other than the\ndirection of the transfer, the arguments <i>liovcnt</i>,\n<i>local_iov</i>, <i>riovcnt</i>, and <i>remote_iov</i> have\nthe same meaning as for <b>process_vm_readv</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>local_iov</i> and <i>remote_iov</i> arguments point to an\narray of <i>iovec</i> structures, defined in\n<i>&lt;sys/uio.h&gt;</i> as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct iovec {\n<br>\nvoid *iov_base; /* Starting address */ <br>\nsize_t iov_len; /* Number of bytes to transfer */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Buffers are\nprocessed in array order. This means that\n<b>process_vm_readv</b>() completely fills\n<i>local_iov[0]</i> before proceeding to\n<i>local_iov[1]</i>, and so on. Likewise,\n<i>remote_iov[0]</i> is completely read before proceeding to\n<i>remote_iov[1]</i>, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Similarly,\n<b>process_vm_writev</b>() writes out the entire contents of\n<i>local_iov[0]</i> before proceeding to\n<i>local_iov[1]</i>, and it completely fills\n<i>remote_iov[0]</i> before proceeding to\n<i>remote_iov[1]</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The lengths of\n<i>remote_iov[i].iov_len</i> and <i>local_iov[i].iov_len</i>\ndo not have to be the same. Thus, it is possible to split a\nsingle local buffer into multiple remote buffers, or vice\nversa.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument is currently unused and must be set to\n0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The values\nspecified in the <i>liovcnt</i> and <i>riovcnt</i> arguments\nmust be less than or equal to <b>IOV_MAX</b> (defined in\n<i>&lt;limits.h&gt;</i> or accessible via the call\n<i>sysconf(_SC_IOV_MAX)</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The count\narguments and <i>local_iov</i> are checked before doing any\ntransfers. If the counts are too big, or <i>local_iov</i> is\ninvalid, or the addresses refer to regions that are\ninaccessible to the local process, none of the vectors will\nbe processed and an error will be returned immediately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note, however,\nthat these system calls do not check the memory regions in\nthe remote process until just before doing the read/write.\nConsequently, a partial read/write (see RETURN VALUE) may\nresult if one of the <i>remote_iov</i> elements points to an\ninvalid memory region in the remote process. No further\nreads/writes will be attempted beyond that point. Keep this\nin mind when attempting to read data of unknown length (such\nas C strings that are null-terminated) from a remote\nprocess, by avoiding spanning memory pages (typically\n4&nbsp;KiB) in a single remote <i>iovec</i> element.\n(Instead, split the remote read into two <i>remote_iov</i>\nelements and have them merge back into a single write\n<i>local_iov</i> entry. The first read entry goes up to the\npage boundary, while the second starts on the next page\nboundary.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission to\nread from or write to another process is governed by a\nptrace access mode <b>PTRACE_MODE_ATTACH_REALCREDS</b>\ncheck; see <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>process_vm_readv</b>() returns the number of bytes read\nand <b>process_vm_writev</b>() returns the number of bytes\nwritten. This return value may be less than the total number\nof requested bytes, if a partial read/write occurred.\n(Partial transfers apply at the granularity of <i>iovec</i>\nelements. These system calls won&rsquo;t perform a partial\ntransfer that splits a single <i>iovec</i> element.) The\ncaller should check the return value to determine whether a\npartial read/write occurred.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On error, -1 is\nreturned and <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The memory described by\n<i>local_iov</i> is outside the caller&rsquo;s accessible\naddress space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The memory described by <i>remote_iov</i> is outside the\naccessible address space of the process <i>pid</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The sum of the <i>iov_len</i> values of either\n<i>local_iov</i> or <i>remote_iov</i> overflows a\n<i>ssize_t</i> value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>flags</i> is not 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>liovcnt</i> or <i>riovcnt</i> is too large.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Could not allocate memory for internal copies of the\n<i>iovec</i> structures.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller does not have permission to access the\naddress space of the process <i>pid</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>No process with ID <i>pid</i> exists.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls were added in Linux 3.2. Support is provided in glibc\nsince version 2.15.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls are nonstandard Linux extensions.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The data\ntransfers performed by <b>process_vm_readv</b>() and\n<b>process_vm_writev</b>() are not guaranteed to be atomic\nin any way.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls were designed to permit fast message passing by\nallowing messages to be exchanged with a single copy\noperation (rather than the double copy that would be\nrequired when using, for example, shared memory or\npipes).</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncode sample demonstrates the use of\n<b>process_vm_readv</b>(). It reads 20 bytes at the address\n0x10000 from the process with PID 10 and writes the first 10\nbytes into <i>buf1</i> and the second 10 bytes into\n<i>buf2</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;sys/uio.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(void) <br>\n{ <br>\nstruct iovec local[2]; <br>\nstruct iovec remote[1]; <br>\nchar buf1[10]; <br>\nchar buf2[10]; <br>\nssize_t nread; <br>\npid_t pid = 10; /* PID of remote process */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">local[0].iov_base\n= buf1; <br>\nlocal[0].iov_len = 10; <br>\nlocal[1].iov_base = buf2; <br>\nlocal[1].iov_len = 10; <br>\nremote[0].iov_base = (void *) 0x10000; <br>\nremote[0].iov_len = 20;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">nread =\nprocess_vm_readv(pid, local, 2, remote, 1, 0); <br>\nif (nread != 20) <br>\nreturn 1; <br>\nelse <br>\nreturn 0; <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/readv\">readv(2)</a>,\n<a href=\"https://man.page/2/writev\">writev(2)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}