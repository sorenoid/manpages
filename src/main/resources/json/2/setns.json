{"name":"setns","body":"\n\n<h1 align=\"center\">SETNS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">setns -\nreassociate thread with a namespace</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;sched.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsetns(int</b> <i>fd</i><b>, int</b>\n<i>nstype</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setns</b>() system call allows the calling thread to move\ninto different namespaces. The <i>fd</i> argument is one of\nthe following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>a file descriptor referring to one of the magic links in\na <i>/proc/[pid]/ns/</i> directory (or a bind mount to such\na link);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>a PID file descriptor (see <a href=\"https://man.page/2/pidfd_open\">pidfd_open(2)</a>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>nstype</i> argument is interpreted differently in each\ncase.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fd refers to\na /proc/[pid]/ns/ link</b> <br>\nIf <i>fd</i> refers to a <i>/proc/[pid]/ns/</i> link, then\n<b>setns</b>() reassociates the calling thread with the\nnamespace associated with that link, subject to any\nconstraints imposed by the <i>nstype</i> argument. In this\nusage, each call to <b>setns</b>() changes just one of the\ncaller&rsquo;s namespace memberships.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>nstype</i> argument specifies which type of namespace the\ncalling thread may be reassociated with. This argument can\nhave <i>one</i> of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\"><b>0</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\">Allow any type of namespace to\nbe joined.</p></td>\n<td width=\"15%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWCGROUP</b> (since\nLinux 4.6)</p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> must refer to a\ncgroup namespace.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWIPC</b> (since\nLinux 3.0)</p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> must refer to an IPC\nnamespace.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWNET</b> (since\nLinux 3.0)</p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> must refer to a\nnetwork namespace.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWNS</b> (since Linux\n3.8)</p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> must refer to a mount\nnamespace.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWPID</b> (since\nLinux 3.8)</p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> must refer to a\ndescendant PID namespace.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWTIME</b> (since\nLinux 5.8)</p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> must refer to a time\nnamespace.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWUSER</b> (since\nLinux 3.8)</p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> must refer to a user\nnamespace.</p>\n\n<p style=\"margin-left:11%;\"><b>CLONE_NEWUTS</b> (since\nLinux 3.0)</p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> must refer to a UTS\nnamespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Specifying\n<i>nstype</i> as 0 suffices if the caller knows (or does not\ncare) what type of namespace is referred to by <i>fd</i>.\nSpecifying a nonzero value for <i>nstype</i> is useful if\nthe caller does not know what type of namespace is referred\nto by <i>fd</i> and wants to ensure that the namespace is of\na particular type. (The caller might not know the type of\nthe namespace referred to by <i>fd</i> if the file\ndescriptor was opened by another process and, for example,\npassed to the caller via a UNIX domain socket.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fd is a PID\nfile descriptor</b> <br>\nSince Linux 5.8, <i>fd</i> may refer to a PID file\ndescriptor obtained from <a href=\"https://man.page/2/pidfd_open\">pidfd_open(2)</a> or\n<a href=\"https://man.page/3/clone\">clone(3)</a>. In this usage, <b>setns</b>() atomically\nmoves the calling thread into one or more of the same\nnamespaces as the thread referred to by <i>fd</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>nstype</i> argument is a bit mask specified by ORing\ntogether <i>one or more</i> of the <b>CLONE_NEW*</b>\nnamespace constants listed above. The caller is moved into\neach of the target thread&rsquo;s namespaces that is\nspecified in <i>nstype</i>; the caller&rsquo;s memberships\nin the remaining namespaces are left unchanged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example,\nthe following code would move the caller into the same user,\nnetwork, and UTS namespaces as PID 1234, but would leave the\ncaller&rsquo;s other namespace memberships unchanged:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">int fd =\npidfd_open(1234, 0); <br>\nsetns(fd, CLONE_NEWUSER | CLONE_NEWNET | CLONE_NEWUTS);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Details for\nspecific namespace types</b> <br>\nNote the following details and restrictions when\nreassociating with specific namespace types: <br>\nUser namespaces</p>\n\n<p style=\"margin-left:22%;\">A process reassociating itself\nwith a user namespace must have the <b>CAP_SYS_ADMIN</b>\ncapability in the target user namespace. (This necessarily\nimplies that it is only possible to join a descendant user\nnamespace.) Upon successfully joining a user namespace, a\nprocess is granted all capabilities in that namespace,\nregardless of its user and group IDs.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A multithreaded\nprocess may not change user namespace with\n<b>setns</b>().</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">It is not\npermitted to use <b>setns</b>() to reenter the\ncaller&rsquo;s current user namespace. This prevents a\ncaller that has dropped capabilities from regaining those\ncapabilities via a call to <b>setns</b>().</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For security\nreasons, a process can&rsquo;t join a new user namespace if\nit is sharing filesystem-related attributes (the attributes\nwhose sharing is controlled by the <a href=\"https://man.page/2/clone\">clone(2)</a>\n<b>CLONE_FS</b> flag) with another process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For further\ndetails on user namespaces, see\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\">Mount namespaces</p>\n\n<p style=\"margin-left:22%;\">Changing the mount namespace\nrequires that the caller possess both <b>CAP_SYS_CHROOT</b>\nand <b>CAP_SYS_ADMIN</b> capabilities in its own user\nnamespace and <b>CAP_SYS_ADMIN</b> in the user namespace\nthat owns the target mount namespace.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A process\ncan&rsquo;t join a new mount namespace if it is sharing\nfilesystem-related attributes (the attributes whose sharing\nis controlled by the <a href=\"https://man.page/2/clone\">clone(2)</a> <b>CLONE_FS</b> flag)\nwith another process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">See\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a> for details on the interaction of\nuser namespaces and mount namespaces.</p>\n\n<p style=\"margin-left:11%;\">PID namespaces</p>\n\n<p style=\"margin-left:22%;\">In order to reassociate itself\nwith a new PID namespace, the caller must have the\n<b>CAP_SYS_ADMIN</b> capability both in its own user\nnamespace and in the user namespace that owns the target PID\nnamespace.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Reassociating\nthe PID namespace has somewhat different from other\nnamespace types. Reassociating the calling thread with a PID\nnamespace changes only the PID namespace that subsequently\ncreated child processes of the caller will be placed in; it\ndoes not change the PID namespace of the caller itself.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Reassociating\nwith a PID namespace is allowed only if the target PID\nnamespace is a descendant (child, grandchild, etc.) of, or\nis the same as, the current PID namespace of the caller.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For further\ndetails on PID namespaces, see <a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%;\">Cgroup namespaces</p>\n\n<p style=\"margin-left:22%;\">In order to reassociate itself\nwith a new cgroup namespace, the caller must have the\n<b>CAP_SYS_ADMIN</b> capability both in its own user\nnamespace and in the user namespace that owns the target\ncgroup namespace.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Using\n<b>setns</b>() to change the caller&rsquo;s cgroup namespace\ndoes not change the caller&rsquo;s cgroup memberships.</p>\n\n<p style=\"margin-left:11%;\">Network, IPC, time, and UTS\nnamespaces</p>\n\n<p style=\"margin-left:22%;\">In order to reassociate itself\nwith a new network, IPC, time, or UTS namespace, the caller\nmust have the <b>CAP_SYS_ADMIN</b> capability both in its\nown user namespace and in the user namespace that owns the\ntarget namespace.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>setns</b>() returns 0. On failure, -1 is returned and\n<i>errno</i> is set to indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>fd</i> is not a valid file\ndescriptor.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fd</i> refers to a namespace whose type does not\nmatch that specified in <i>nstype</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>There is problem with reassociating the thread with the\nspecified namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller tried to join an ancestor (parent,\ngrandparent, and so on) PID namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller attempted to join the user namespace in which\nit is already a member.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller shares filesystem (<b>CLONE_FS</b>) state (in\nparticular, the root directory) with other processes and\ntried to join a new user namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller is multithreaded and tried to join a new user\nnamespace.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fd</i> is a PID file descriptor and <i>nstype</i> is\ninvalid (e.g., it is 0).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Cannot allocate sufficient memory to change the\nspecified namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling thread did not have the required capability\nfor this operation.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fd</i> is a PID file descriptor but the process it\nrefers to no longer exists (i.e., it has terminated and been\nwaited on).</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setns</b>() system call first appeared in Linux in kernel\n3.0; library support was added to glibc in version 2.14.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>setns</b>() system call is Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For further\ninformation on the <i>/proc/[pid]/ns/</i> magic links, see\n<a href=\"https://man.page/7/namespaces\">namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Not all of the\nattributes that can be shared when a new thread is created\nusing <a href=\"https://man.page/2/clone\">clone(2)</a> can be changed using\n<b>setns</b>().</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow takes two or more arguments. The first argument\nspecifies the pathname of a namespace file in an existing\n<i>/proc/[pid]/ns/</i> directory. The remaining arguments\nspecify a command and its arguments. The program opens the\nnamespace file, joins that namespace using <b>setns</b>(),\nand executes the specified command inside that\nnamespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nshell session demonstrates the use of this program (compiled\nas a binary named <i>ns_exec</i>) in conjunction with the\n<b>CLONE_NEWUTS</b> example program in the <a href=\"https://man.page/2/clone\">clone(2)</a>\nman page (complied as a binary named <i>newuts</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We begin by\nexecuting the example program in <a href=\"https://man.page/2/clone\">clone(2)</a> in the\nbackground. That program creates a child in a separate UTS\nnamespace. The child changes the hostname in its namespace,\nand then both processes display the hostnames in their UTS\nnamespaces, so that we can see that they are different.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>su</b> #\nNeed privilege for namespace operations <br>\nPassword: <br>\n# <b>./newuts bizarro &amp;</b> <br>\n[1] 3549 <br>\nclone() returned 3550 <br>\nuts.nodename in child: bizarro <br>\nuts.nodename in parent: antero <br>\n# <b>uname -n</b> # Verify hostname in the shell <br>\nantero</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We then run the\nprogram shown below, using it to execute a shell. Inside\nthat shell, we verify that the hostname is the one set by\nthe child created by the first program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>./ns_exec\n/proc/3550/ns/uts /bin/bash</b> <br>\n# <b>uname -n</b> # Executed in shell started by ns_exec\n<br>\nbizarro</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#define _GNU_SOURCE <br>\n#include &lt;fcntl.h&gt; <br>\n#include &lt;sched.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nerrExit(msg) do { perror(msg); exit(EXIT_FAILURE); \\ <br>\n} while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint fd;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc &lt;\n3) { <br>\nfprintf(stderr, &quot;%s /proc/PID/ns/FILE cmd\nargs...\\n&quot;, argv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Get file\ndescriptor for namespace; the file descriptor is opened <br>\nwith O_CLOEXEC so as to ensure that it is not inherited by\nthe <br>\nprogram that is later executed. */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fd =\nopen(argv[1], O_RDONLY | O_CLOEXEC); <br>\nif (fd == -1) <br>\nerrExit(&quot;open&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (setns(fd,\n0) == -1) /* Join that namespace */ <br>\nerrExit(&quot;setns&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">execvp(argv[2],\n&amp;argv[2]); /* Execute a command in namespace */ <br>\nerrExit(&quot;execvp&quot;); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/nsenter\">nsenter(1)</a>,\n<a href=\"https://man.page/2/clone\">clone(2)</a>, <a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/unshare\">unshare(2)</a>,\n<a href=\"https://man.page/2/vfork\">vfork(2)</a>, <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>, <a href=\"https://man.page/7/unix\">unix(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}