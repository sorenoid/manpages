{"name":"setresuid","body":"\n\n<h1 align=\"center\">SETRESUID</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">setresuid,\nsetresgid - set real, effective and saved user or group\nID</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsetresuid(uid_t</b> <i>ruid</i><b>, uid_t</b>\n<i>euid</i><b>, uid_t</b> <i>suid</i><b>); <br>\nint setresgid(gid_t</b> <i>rgid</i><b>, gid_t</b>\n<i>egid</i><b>, gid_t</b> <i>sgid</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>setresuid</b>()\nsets the real user ID, the effective user ID, and the saved\nset-user-ID of the calling process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An unprivileged\nprocess may change its real UID, effective UID, and saved\nset-user-ID, each to one of: the current real UID, the\ncurrent effective UID or the current saved set-user-ID.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A privileged\nprocess (on Linux, one having the <b>CAP_SETUID</b>\ncapability) may set its real UID, effective UID, and saved\nset-user-ID to arbitrary values.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If one of the\narguments equals -1, the corresponding value is not\nchanged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Regardless of\nwhat changes are made to the real UID, effective UID, and\nsaved set-user-ID, the filesystem UID is always set to the\nsame value as the (possibly new) effective UID.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Completely\nanalogously, <b>setresgid</b>() sets the real GID, effective\nGID, and saved set-group-ID of the calling process (and\nalways modifies the filesystem GID to be the same as the\neffective GID), with the same restrictions for unprivileged\nprocesses.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, and <i>errno</i>\nis set appropriately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nthere are cases where <b>setresuid</b>() can fail even when\nthe caller is UID 0; it is a grave security error to omit\nchecking for a failure return from <b>setresuid</b>().</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The call would change the\ncaller&rsquo;s real UID (i.e., <i>ruid</i> does not match\nthe caller&rsquo;s real UID), but there was a temporary\nfailure allocating the necessary kernel data structures.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>ruid</i> does not match the caller&rsquo;s real UID\nand this call would bring the number of processes belonging\nto the real user ID <i>ruid</i> over the caller&rsquo;s\n<b>RLIMIT_NPROC</b> resource limit. Since Linux 3.1, this\nerror case no longer occurs (but robust applications should\ncheck for this error); see the description of <b>EAGAIN</b>\nin <a href=\"https://man.page/2/execve\">execve(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>One or more of the target user or group IDs is not valid\nin this user namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process is not privileged (did not have the\nnecessary capability in its user namespace) and tried to\nchange the IDs to values that are not permitted. For\n<b>setresuid</b>(), the necessary capability is\n<b>CAP_SETUID</b>; for <b>setresgid</b>(), it is\n<b>CAP_SETGID</b>.</p> </td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These calls are\navailable under Linux since Linux 2.1.44.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These calls are\nnonstandard; they also appear on HP-UX and some of the\nBSDs.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Under HP-UX and\nFreeBSD, the prototype is found in <i>&lt;unistd.h&gt;</i>.\nUnder Linux, the prototype is provided by glibc since\nversion 2.3.2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The original\nLinux <b>setresuid</b>() and <b>setresgid</b>() system calls\nsupported only 16-bit user and group IDs. Subsequently,\nLinux 2.4 added <b>setresuid32</b>() and\n<b>setresgid32</b>(), supporting 32-bit IDs. The glibc\n<b>setresuid</b>() and <b>setresgid</b>() wrapper functions\ntransparently deal with the variations across kernel\nversions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nAt the kernel level, user IDs and group IDs are a per-thread\nattribute. However, POSIX requires that all threads in a\nprocess share the same credentials. The NPTL threading\nimplementation handles the POSIX requirements by providing\nwrapper functions for the various system calls that change\nprocess UIDs and GIDs. These wrapper functions (including\nthose for <b>setresuid</b>() and <b>setresgid</b>()) employ\na signal-based technique to ensure that when one thread\nchanges credentials, all of the other threads in the process\nalso change their credentials. For details, see\n<a href=\"https://man.page/7/nptl\">nptl(7)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/getresuid\">getresuid(2)</a>,\n<a href=\"https://man.page/2/getuid\">getuid(2)</a>, <a href=\"https://man.page/2/setfsgid\">setfsgid(2)</a>, <a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a>,\n<a href=\"https://man.page/2/setreuid\">setreuid(2)</a>, <a href=\"https://man.page/2/setuid\">setuid(2)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a>,\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}