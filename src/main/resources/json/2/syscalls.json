{"name":"syscalls","description":"syscalls -\nLinux system calls","body":"\n\n<h1 align=\"center\">SYSCALLS</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">syscalls -\nLinux system calls</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux system\ncalls.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The system call\nis the fundamental interface between an application and the\nLinux kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>System calls\nand library wrapper functions</b> <br>\nSystem calls are generally not invoked directly, but rather\nvia wrapper functions in glibc (or perhaps some other\nlibrary). For details of direct invocation of a system call,\nsee <a href=\"https://man.page/2/intro\">intro(2)</a>. Often, but not always, the name of the\nwrapper function is the same as the name of the system call\nthat it invokes. For example, glibc contains a function\n<b>chdir</b>() which invokes the underlying\n&quot;chdir&quot; system call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Often the glibc\nwrapper function is quite thin, doing little work other than\ncopying arguments to the right registers before invoking the\nsystem call, and then setting <i>errno</i> appropriately\nafter the system call has returned. (These are the same\nsteps that are performed by <a href=\"https://man.page/2/syscall\">syscall(2)</a>, which can be\nused to invoke system calls for which no wrapper function is\nprovided.) Note: system calls indicate a failure by\nreturning a negative error number to the caller on\narchitectures without a separate error register/flag, as\nnoted in <a href=\"https://man.page/2/syscall\">syscall(2)</a>; when this happens, the wrapper\nfunction negates the returned error number (to make it\npositive), copies it to <i>errno</i>, and returns -1 to the\ncaller of the wrapper.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sometimes,\nhowever, the wrapper function does some extra work before\ninvoking the system call. For example, nowadays there are\n(for reasons described below) two related system calls,\n<a href=\"https://man.page/2/truncate\">truncate(2)</a> and <a href=\"https://man.page/2/truncate64\">truncate64(2)</a>, and the glibc\n<b>truncate</b>() wrapper function checks which of those\nsystem calls are provided by the kernel and determines which\nshould be employed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>System call\nlist</b> <br>\nBelow is a list of the Linux system calls. In the list, the\n<i>Kernel</i> column indicates the kernel version for those\nsystem calls that were new in Linux 2.2, or have appeared\nsince that kernel version. Note the following points:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Where no kernel version is indicated, the system call\nappeared in kernel 1.0 or earlier.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Where a system call is marked &quot;1.2&quot; this means\nthe system call probably appeared in a 1.1.x kernel version,\nand first appeared in a stable kernel with 1.2. (Development\nof the 1.2 kernel was initiated from a branch of kernel\n1.0.6 via the 1.1.x unstable kernel series.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Where a system call is marked &quot;2.0&quot; this means\nthe system call probably appeared in a 1.3.x kernel version,\nand first appeared in a stable kernel with 2.0. (Development\nof the 2.0 kernel was initiated from a branch of kernel\n1.2.x, somewhere around 1.2.10, via the 1.3.x unstable\nkernel series.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Where a system call is marked &quot;2.2&quot; this means\nthe system call probably appeared in a 2.1.x kernel version,\nand first appeared in a stable kernel with 2.2.0.\n(Development of the 2.2 kernel was initiated from a branch\nof kernel 2.0.21 via the 2.1.x unstable kernel series.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Where a system call is marked &quot;2.4&quot; this means\nthe system call probably appeared in a 2.3.x kernel version,\nand first appeared in a stable kernel with 2.4.0.\n(Development of the 2.4 kernel was initiated from a branch\nof kernel 2.2.8 via the 2.3.x unstable kernel series.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Where a system call is marked &quot;2.6&quot; this means\nthe system call probably appeared in a 2.5.x kernel version,\nand first appeared in a stable kernel with 2.6.0.\n(Development of kernel 2.6 was initiated from a branch of\nkernel 2.4.15 via the 2.5.x unstable kernel series.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Starting with kernel 2.6.0, the development model\nchanged, and new system calls may appear in each 2.6.x\nrelease. In this case, the exact version number where the\nsystem call appeared is shown. This convention continues\nwith the 3.x kernel series, which followed on from kernel\n2.6.39; and the 4.x kernel series, which followed on from\nkernel 3.19; and the 5.x kernel series, which followed on\nfrom kernel 4.20.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>In some cases, a system call was added to a stable\nkernel series after it branched from the previous stable\nkernel series, and then backported into the earlier stable\nkernel series. For example some system calls that appeared\nin 2.6.x were also backported into a 2.4.x release after\n2.4.15. When this is so, the version where the system call\nappeared in both of the major kernel series is listed.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The list of\nsystem calls that are available as at kernel 5.10 (or in a\nfew cases only on older kernels) is as follows:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3247861.png\" alt=\"Image grohtml-3247861.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On many\nplatforms, including x86-32, socket calls are all\nmultiplexed (via glibc wrapper functions) through\n<a href=\"https://man.page/2/socketcall\">socketcall(2)</a> and similarly System&nbsp;V IPC calls\nare multiplexed through <a href=\"https://man.page/2/ipc\">ipc(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Although slots\nare reserved for them in the system call table, the\nfollowing system calls are not implemented in the standard\nkernel: <a href=\"https://man.page/2/afs_syscall\">afs_syscall(2)</a>, <a href=\"https://man.page/2/break\">break(2)</a>,\n<a href=\"https://man.page/2/ftime\">ftime(2)</a>, <a href=\"https://man.page/2/getpmsg\">getpmsg(2)</a>, <a href=\"https://man.page/2/gtty\">gtty(2)</a>,\n<a href=\"https://man.page/2/idle\">idle(2)</a>, <a href=\"https://man.page/2/lock\">lock(2)</a>, <a href=\"https://man.page/2/madvise1\">madvise1(2)</a>,\n<a href=\"https://man.page/2/mpx\">mpx(2)</a>, <a href=\"https://man.page/2/phys\">phys(2)</a>, <a href=\"https://man.page/2/prof\">prof(2)</a>,\n<a href=\"https://man.page/2/profil\">profil(2)</a>, <a href=\"https://man.page/2/putpmsg\">putpmsg(2)</a>, <a href=\"https://man.page/2/security\">security(2)</a>,\n<a href=\"https://man.page/2/stty\">stty(2)</a>, <a href=\"https://man.page/2/tuxcall\">tuxcall(2)</a>, <a href=\"https://man.page/2/ulimit\">ulimit(2)</a>, and\n<a href=\"https://man.page/2/vserver\">vserver(2)</a> (see also <a href=\"https://man.page/2/unimplemented\">unimplemented(2)</a>).\nHowever, <a href=\"https://man.page/3/ftime\">ftime(3)</a>, <a href=\"https://man.page/3/profil\">profil(3)</a>, and\n<a href=\"https://man.page/3/ulimit\">ulimit(3)</a> exist as library routines. The slot for\n<a href=\"https://man.page/2/phys\">phys(2)</a> is in use since kernel 2.1.116 for\n<a href=\"https://man.page/2/umount\">umount(2)</a>; <a href=\"https://man.page/2/phys\">phys(2)</a> will never be implemented.\nThe <a href=\"https://man.page/2/getpmsg\">getpmsg(2)</a> and <a href=\"https://man.page/2/putpmsg\">putpmsg(2)</a> calls are for\nkernels patched to support STREAMS, and may never be in the\nstandard kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There was\nbriefly <a href=\"https://man.page/2/set_zone_reclaim\">set_zone_reclaim(2)</a>, added in Linux 2.6.13,\nand removed in 2.6.16; this system call was never available\nto user space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>System calls\non removed ports</b> <br>\nSome system calls only ever existed on Linux architectures\nthat have since been removed from the kernel: <br>\nAVR32 (port removed in Linux 4.12)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"13%\">\n\n\n<p><a href=\"https://man.page/2/pread\">pread(2)</a></p></td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"13%\">\n\n\n<p><a href=\"https://man.page/2/pwrite\">pwrite(2)</a></p></td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">Blackfin (port removed in Linux\n4.17)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p><a href=\"https://man.page/2/bfin_spinlock\">bfin_spinlock(2)</a> (added in Linux 2.6.22)</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p><a href=\"https://man.page/2/dma_memcpy\">dma_memcpy(2)</a> (added in Linux 2.6.22)</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p><a href=\"https://man.page/2/pread\">pread(2)</a> (added in Linux 2.6.22)</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p><a href=\"https://man.page/2/pwrite\">pwrite(2)</a> (added in Linux 2.6.22)</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p><a href=\"https://man.page/2/sram_alloc\">sram_alloc(2)</a> (added in Linux 2.6.22)</p></td>\n<td width=\"14%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"61%\">\n\n\n<p><a href=\"https://man.page/2/sram_free\">sram_free(2)</a> (added in Linux 2.6.22)</p></td>\n<td width=\"14%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">Metag (port removed in Linux\n4.17)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p><a href=\"https://man.page/2/metag_get_tls\">metag_get_tls(2)</a> (add in Linux 3.9)</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p><a href=\"https://man.page/2/metag_set_fpu_flags\">metag_set_fpu_flags(2)</a> (add in Linux 3.9)</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p><a href=\"https://man.page/2/metag_set_tls\">metag_set_tls(2)</a> (add in Linux 3.9)</p></td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"63%\">\n\n\n<p><a href=\"https://man.page/2/metag_setglobalbit\">metag_setglobalbit(2)</a> (add in Linux 3.9)</p></td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">Tile (port removed in Linux\n4.17)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"64%\">\n\n\n<p><a href=\"https://man.page/2/cmpxchg_badaddr\">cmpxchg_badaddr(2)</a> (added in Linux 2.6.36)</p></td>\n<td width=\"11%\">\n</td></tr>\n</table>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Roughly\nspeaking, the code belonging to the system call with number\n__NR_xxx defined in <i>/usr/include/asm/unistd.h</i> can be\nfound in the Linux kernel source in the routine\n<i>sys_xxx</i>(). There are many exceptions, however, mostly\nbecause older system calls were superseded by newer ones,\nand this has been treated somewhat unsystematically. On\nplatforms with proprietary operating-system emulation, such\nas sparc, sparc64, and alpha, there are many additional\nsystem calls; mips64 also contains a full set of 32-bit\nsystem calls.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Over time,\nchanges to the interfaces of some system calls have been\nnecessary. One reason for such changes was the need to\nincrease the size of structures or scalar values passed to\nthe system call. Because of these changes, certain\narchitectures (notably, longstanding 32-bit architectures\nsuch as i386) now have various groups of related system\ncalls (e.g., <a href=\"https://man.page/2/truncate\">truncate(2)</a> and <a href=\"https://man.page/2/truncate64\">truncate64(2)</a>)\nwhich perform similar tasks, but which vary in details such\nas the size of their arguments. (As noted earlier,\napplications are generally unaware of this: the glibc\nwrapper functions do some work to ensure that the right\nsystem call is invoked, and that ABI compatibility is\npreserved for old binaries.) Examples of systems calls that\nexist in multiple versions are the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">By now there are three different\nversions of <a href=\"https://man.page/2/stat\">stat(2)</a>: <i>sys_stat</i>() (slot\n<i>__NR_oldstat</i>), <i>sys_newstat</i>() (slot\n<i>__NR_stat</i>), and <i>sys_stat64</i>() (slot\n<i>__NR_stat64</i>), with the last being the most current. A\nsimilar story applies for <a href=\"https://man.page/2/lstat\">lstat(2)</a> and\n<a href=\"https://man.page/2/fstat\">fstat(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Similarly, the defines <i>__NR_oldolduname</i>,\n<i>__NR_olduname</i>, and <i>__NR_uname</i> refer to the\nroutines <i>sys_olduname</i>(), <i>sys_uname</i>(), and\n<i>sys_newuname</i>().</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>In Linux 2.0, a new version of <a href=\"https://man.page/2/vm86\">vm86(2)</a> appeared,\nwith the old and the new kernel routines being named\n<i>sys_vm86old</i>() and <i>sys_vm86</i>().</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>In Linux 2.4, a new version of <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>\nappeared, with the old and the new kernel routines being\nnamed <i>sys_old_getrlimit</i>() (slot\n<i>__NR_getrlimit</i>) and <i>sys_getrlimit</i>() (slot\n<i>__NR_ugetrlimit</i>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Linux 2.4 increased the size of user and group IDs from\n16 to 32 bits. To support this change, a range of system\ncalls were added (e.g., <a href=\"https://man.page/2/chown32\">chown32(2)</a>,\n<a href=\"https://man.page/2/getuid32\">getuid32(2)</a>, <a href=\"https://man.page/2/getgroups32\">getgroups32(2)</a>,\n<a href=\"https://man.page/2/setresuid32\">setresuid32(2)</a>), superseding earlier calls of the\nsame name without the &quot;32&quot; suffix.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Linux 2.4 added support for applications on 32-bit\narchitectures to access large files (i.e., files for which\nthe sizes and file offsets can&rsquo;t be represented in 32\nbits.) To support this change, replacements were required\nfor system calls that deal with file offsets and sizes. Thus\nthe following system calls were added: <a href=\"https://man.page/2/fcntl64\">fcntl64(2)</a>,\n<a href=\"https://man.page/2/getdents64\">getdents64(2)</a>, <a href=\"https://man.page/2/stat64\">stat64(2)</a>, <a href=\"https://man.page/2/statfs64\">statfs64(2)</a>,\n<a href=\"https://man.page/2/truncate64\">truncate64(2)</a>, and their analogs that work with file\ndescriptors or symbolic links. These system calls supersede\nthe older system calls which, except in the case of the\n&quot;stat&quot; calls, have the same name without the\n&quot;64&quot; suffix.</p></td></tr>\n</table>\n\n<p style=\"margin-left:15%; margin-top: 1em\">On newer\nplatforms that only have 64-bit file access and 32-bit\nUIDs/GIDs (e.g., alpha, ia64, s390x, x86-64), there is just\na single version of the UID/GID and file access system\ncalls. On platforms (typically, 32-bit platforms) where the\n*64 and *32 calls exist, the other versions are\nobsolete.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The <i>rt_sig*</i> calls were\nadded in kernel 2.2 to support the addition of real-time\nsignals (see <a href=\"https://man.page/7/signal\">signal(7)</a>). These system calls supersede\nthe older system calls of the same name without the\n&quot;rt_&quot; prefix.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <a href=\"https://man.page/2/select\">select(2)</a> and <a href=\"https://man.page/2/mmap\">mmap(2)</a> system calls use\nfive or more arguments, which caused problems in the way\nargument passing on the i386 used to be set up. Thus, while\nother architectures have <i>sys_select</i>() and\n<i>sys_mmap</i>() corresponding to <i>__NR_select</i> and\n<i>__NR_mmap</i>, on i386 one finds <i>old_select</i>() and\n<i>old_mmap</i>() (routines that use a pointer to an\nargument block) instead. These days passing five arguments\nis not a problem any more, and there is a\n<i>__NR__newselect</i> that corresponds directly to\n<i>sys_select</i>() and similarly <i>__NR_mmap2</i>. s390x\nis the only 64-bit architecture that has\n<i>old_mmap</i>().</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Architecture-specific\ndetails: Alpha</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\"><a href=\"https://man.page/2/getxgid\">getxgid(2)</a> returns a pair\nof GID and effective GID via registers <b>r0</b> and\n<b>r20</b>; it is provided instead of <a href=\"https://man.page/2/getgid\">getgid(2)</a> and\n<a href=\"https://man.page/2/getegid\">getegid(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><a href=\"https://man.page/2/getxpid\">getxpid(2)</a> returns a pair of PID and parent PID\nvia registers <b>r0</b> and <b>r20</b>; it is provided\ninstead of <a href=\"https://man.page/2/getpid\">getpid(2)</a> and <a href=\"https://man.page/2/getppid\">getppid(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><a href=\"https://man.page/2/old_adjtimex\">old_adjtimex(2)</a> is a variant of\n<a href=\"https://man.page/2/adjtimex\">adjtimex(2)</a> that uses <i>struct timeval32</i>, for\ncompatibility with OSF/1.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><a href=\"https://man.page/2/getxuid\">getxuid(2)</a> returns a pair of GID and effective\nGID via registers <b>r0</b> and <b>r20</b>; it is provided\ninstead of <a href=\"https://man.page/2/getuid\">getuid(2)</a> and <a href=\"https://man.page/2/geteuid\">geteuid(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><a href=\"https://man.page/2/sethae\">sethae(2)</a> is used for configuring the Host\nAddress Extension register on low-cost Alphas in order to\naccess address space beyond first 27 bits.</p></td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/intro\">intro(2)</a>,\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>, <a href=\"https://man.page/2/unimplemented\">unimplemented(2)</a>, <a href=\"https://man.page/3/errno\">errno(3)</a>,\n<a href=\"https://man.page/7/libc\">libc(7)</a>, <a href=\"https://man.page/7/vdso\">vdso(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}